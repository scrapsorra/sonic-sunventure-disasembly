00000000                            ;  =========================================================================
00000000                            ; |           Sonic the Hedgehog Disassembly for Sega Mega Drive            |
00000000                            ;  =========================================================================
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx, Stealth and Esrael L.G. Neto
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            	include	"_s1smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000001                  SourceDriver = 1 ; Please don't modify the value.
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000 =0000000C                  psgdelta	EQU 12
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =00000088                  smpsPitch10lo	EQU $88
00000000 =00000094                  smpsPitch09lo	EQU $94
00000000 =000000A0                  smpsPitch08lo	EQU $A0
00000000 =000000AC                  smpsPitch07lo	EQU $AC
00000000 =000000B8                  smpsPitch06lo	EQU $B8
00000000 =000000C4                  smpsPitch05lo	EQU $C4
00000000 =000000D0                  smpsPitch04lo	EQU $D0
00000000 =000000DC                  smpsPitch03lo	EQU $DC
00000000 =000000E8                  smpsPitch02lo	EQU $E8
00000000 =000000F4                  smpsPitch01lo	EQU $F4
00000000 =00000000                  smpsPitch00		EQU $00
00000000 =0000000C                  smpsPitch01hi	EQU $0C
00000000 =00000018                  smpsPitch02hi	EQU $18
00000000 =00000024                  smpsPitch03hi	EQU $24
00000000 =00000030                  smpsPitch04hi	EQU $30
00000000 =0000003C                  smpsPitch05hi	EQU $3C
00000000 =00000048                  smpsPitch06hi	EQU $48
00000000 =00000054                  smpsPitch07hi	EQU $54
00000000 =00000060                  smpsPitch08hi	EQU $60
00000000 =0000006C                  smpsPitch09hi	EQU $6C
00000000 =00000078                  smpsPitch10hi	EQU $78
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst		EQU	$80
00000000 =00000081                  nC0			EQU	$81
00000000 =00000082                  nCs0		EQU	$82
00000000 =00000083                  nD0			EQU	$83
00000000 =00000084                  nEb0		EQU	$84
00000000 =00000085                  nE0			EQU	$85
00000000 =00000086                  nF0			EQU	$86
00000000 =00000087                  nFs0		EQU	$87
00000000 =00000088                  nG0			EQU	$88
00000000 =00000089                  nAb0		EQU	$89
00000000 =0000008A                  nA0			EQU	$8A
00000000 =0000008B                  nBb0		EQU	$8B
00000000 =0000008C                  nB0			EQU	$8C
00000000 =0000008D                  nC1			EQU	$8D
00000000 =0000008E                  nCs1		EQU	$8E
00000000 =0000008F                  nD1			EQU	$8F
00000000 =00000090                  nEb1		EQU	$90
00000000 =00000091                  nE1			EQU	$91
00000000 =00000092                  nF1			EQU	$92
00000000 =00000093                  nFs1		EQU	$93
00000000 =00000094                  nG1			EQU	$94
00000000 =00000095                  nAb1		EQU	$95
00000000 =00000096                  nA1			EQU	$96
00000000 =00000097                  nBb1		EQU	$97
00000000 =00000098                  nB1			EQU	$98
00000000 =00000099                  nC2			EQU	$99
00000000 =0000009A                  nCs2		EQU	$9A
00000000 =0000009B                  nD2			EQU	$9B
00000000 =0000009C                  nEb2		EQU	$9C
00000000 =0000009D                  nE2			EQU	$9D
00000000 =0000009E                  nF2			EQU	$9E
00000000 =0000009F                  nFs2		EQU	$9F
00000000 =000000A0                  nG2			EQU	$A0
00000000 =000000A1                  nAb2		EQU	$A1
00000000 =000000A2                  nA2			EQU	$A2
00000000 =000000A3                  nBb2		EQU	$A3
00000000 =000000A4                  nB2			EQU	$A4
00000000 =000000A5                  nC3			EQU	$A5
00000000 =000000A6                  nCs3		EQU	$A6
00000000 =000000A7                  nD3			EQU	$A7
00000000 =000000A8                  nEb3		EQU	$A8
00000000 =000000A9                  nE3			EQU	$A9
00000000 =000000AA                  nF3			EQU	$AA
00000000 =000000AB                  nFs3		EQU	$AB
00000000 =000000AC                  nG3			EQU	$AC
00000000 =000000AD                  nAb3		EQU	$AD
00000000 =000000AE                  nA3			EQU	$AE
00000000 =000000AF                  nBb3		EQU	$AF
00000000 =000000B0                  nB3			EQU	$B0
00000000 =000000B1                  nC4			EQU	$B1
00000000 =000000B2                  nCs4		EQU	$B2
00000000 =000000B3                  nD4			EQU	$B3
00000000 =000000B4                  nEb4		EQU	$B4
00000000 =000000B5                  nE4			EQU	$B5
00000000 =000000B6                  nF4			EQU	$B6
00000000 =000000B7                  nFs4		EQU	$B7
00000000 =000000B8                  nG4			EQU	$B8
00000000 =000000B9                  nAb4		EQU	$B9
00000000 =000000BA                  nA4			EQU	$BA
00000000 =000000BB                  nBb4		EQU	$BB
00000000 =000000BC                  nB4			EQU	$BC
00000000 =000000BD                  nC5			EQU	$BD
00000000 =000000BE                  nCs5		EQU	$BE
00000000 =000000BF                  nD5			EQU	$BF
00000000 =000000C0                  nEb5		EQU	$C0
00000000 =000000C1                  nE5			EQU	$C1
00000000 =000000C2                  nF5			EQU	$C2
00000000 =000000C3                  nFs5		EQU	$C3
00000000 =000000C4                  nG5			EQU	$C4
00000000 =000000C5                  nAb5		EQU	$C5
00000000 =000000C6                  nA5			EQU	$C6
00000000 =000000C7                  nBb5		EQU	$C7
00000000 =000000C8                  nB5			EQU	$C8
00000000 =000000C9                  nC6			EQU	$C9
00000000 =000000CA                  nCs6		EQU	$CA
00000000 =000000CB                  nD6			EQU	$CB
00000000 =000000CC                  nEb6		EQU	$CC
00000000 =000000CD                  nE6			EQU	$CD
00000000 =000000CE                  nF6			EQU	$CE
00000000 =000000CF                  nFs6		EQU	$CF
00000000 =000000D0                  nG6			EQU	$D0
00000000 =000000D1                  nAb6		EQU	$D1
00000000 =000000D2                  nA6			EQU	$D2
00000000 =000000D3                  nBb6		EQU	$D3
00000000 =000000D4                  nB6			EQU	$D4
00000000 =000000D5                  nC7			EQU	$D5
00000000 =000000D6                  nCs7		EQU	$D6
00000000 =000000D7                  nD7			EQU	$D7
00000000 =000000D8                  nEb7		EQU	$D8
00000000 =000000D9                  nE7			EQU	$D9
00000000 =000000DA                  nF7			EQU	$DA
00000000 =000000DB                  nFs7		EQU	$DB
00000000 =000000DC                  nG7			EQU	$DC
00000000 =000000DD                  nAb7		EQU	$DD
00000000 =000000DE                  nA7			EQU	$DE
00000000 =000000DF                  nBb7		EQU	$DF
00000000                            ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
00000000                            ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
00000000                            ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
00000000                            ; and ensure that the ending note is indeed the maximum PSG frequency.
00000000 =000000C6                  nMaxPSG				EQU nA5
00000000 =000000D2                  nMaxPSG1			EQU nA5+psgdelta
00000000 =000000D2                  nMaxPSG2			EQU nA5+psgdelta
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG Flutter Equates
00000000 =00000000                  fTone_00	EQU	$00
00000000 =00000001                  fTone_01	EQU	$01
00000000 =00000002                  fTone_02	EQU	$02
00000000 =00000003                  fTone_03	EQU	$03
00000000 =00000004                  fTone_04	EQU	$04
00000000 =00000005                  fTone_05	EQU	$05
00000000 =00000006                  fTone_06	EQU	$06
00000000 =00000007                  fTone_07	EQU	$07
00000000 =00000008                  fTone_08	EQU	$08
00000000 =00000009                  fTone_09	EQU	$09
00000000 =00000007                  fTone_0A	EQU	$07
00000000 =00000005                  fTone_0B	EQU	$05
00000000 =00000000                  fTone_0C	EQU	$00
00000000                            ;fTone_0D	EQU	$00
00000000 =00000002                  sTone_01	EQU	$02
00000000 =00000002                  sTone_02	EQU	$02
00000000 =00000005                  sTone_03	EQU	$05
00000000 =00000003                  sTone_04	EQU	$03
00000000 =00000001                  sTone_05	EQU	$01
00000000 =00000003                  sTone_06	EQU	$03
00000000 =00000000                  sTone_07	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_08	EQU	$09
00000000 =00000005                  sTone_09	EQU	$05
00000000 =00000007                  sTone_0A	EQU	$07
00000000 =00000000                  sTone_0B	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_0C	EQU	$09
00000000 =00000000                  sTone_0D	EQU	$00	; This time it matches 100%
00000000 =00000002                  sTone_0E	EQU	$02	; Duplicate of 01
00000000 =00000002                  sTone_0F	EQU	$02	; Duplicate of 02
00000000 =00000000                  sTone_10	EQU	$00
00000000 =00000006                  sTone_11	EQU	$06
00000000 =00000001                  sTone_12	EQU	$01	; Duplicate of 05
00000000 =00000003                  sTone_13	EQU	$03	; Duplicate of 06
00000000 =00000000                  sTone_14	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_15	EQU	$09	; Duplicate of 08
00000000 =00000005                  sTone_16	EQU	$05	; Duplicate of 09
00000000 =00000007                  sTone_17	EQU	$07	; Duplicate of 0A
00000000 =00000000                  sTone_18	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_19	EQU	$09	; Duplicate of 0C
00000000 =00000002                  sTone_1A	EQU	$02
00000000 =00000009                  sTone_1B	EQU	$09	; Duplicate of 0C
00000000 =00000006                  sTone_1C	EQU	$06
00000000 =00000007                  sTone_1D	EQU	$07
00000000 =00000002                  sTone_1E	EQU	$02
00000000 =00000004                  sTone_1F	EQU	$04
00000000 =00000000                  sTone_20	EQU	$00	; This time it matches 100%
00000000 =00000009                  sTone_21	EQU	$09
00000000 =00000004                  sTone_22	EQU	$04
00000000 =00000007                  sTone_23	EQU	$07
00000000 =00000002                  sTone_24	EQU	$02
00000000 =00000009                  sTone_25	EQU	$09
00000000 =00000007                  sTone_26	EQU	$07
00000000 =00000003                  sTone_27	EQU	$03
00000000                            ;sTone_28	EQU	$09
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick equ $81
00000000 =00000082                  dSnare equ $82
00000000 =00000085                  dCrashCymbal equ $85
00000000 =00000088                  dHiTimpani equ $88
00000000 =00000089                  dMidTimpani equ $89
00000000 =0000008A                  dLowTimpani equ $8A
00000000 =0000008B                  dFloorTimpani equ $8B
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Conversion macros and functions
00000000                            
00000000                            ;conv0To256  macro val 
00000000                            	;if val<$01
00000000                            		;dc.b (256-val+$FF)&$FF
00000000                            	;else	
00000000                            		;dc.b (256-val)&$FF	
00000000                            	;endc
00000000                            	;endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000                            smpsHeaderStartSong macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderStartSongConvert macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b	div
00000000                            tempoDivider set div
00000000                            	dc.b    mod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if (narg=2)
00000000                            		dc.b	pitch
00000000                            		if (narg=3)
00000000                            			dc.b	vol
00000000                            		else
00000000                            			dc.b	$00
00000000                            		endif
00000000                            	else
00000000                            		dc.w	$00
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
00000000                            	endif
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	if (chanid&$80)<>0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            smpsDetune macro val
00000000                            	dc.b		$E1, val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000 =000000E6                  sVol	EQU $E6
00000000                            
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000 =000000E7                  smpsNA	EQU smpsNoAttack
00000000 =000000E7                  sNA	EQU smpsNoAttack
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            	dc.b	$E8,val
00000000                            	endm
00000000                            
00000000                            ; Add xx to channel pitch
00000000                            smpsAlterPitch macro val
00000000                            	dc.b	$E9,val
00000000                            	endm
00000000                            
00000000                            smpsChangeTransposition macro val
00000000                            	if SourceDriver>=3
00000000                            		dc.b	$FF,val
00000000                            	else
00000000                            		dc.b	$E9,val
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro val
00000000                            	dc.b	$EA
00000000                            	dc.b    val
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000 =000000EC                  spVol	EQU $EC
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            	dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; EFxx - Set Voice of FM channel to xx
00000000                            smpsFMvoice macro voice
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	wait+1,speed,change,(step*speed-1)&$FF
00000000                            	else
00000000                            		dc.b	wait,speed,change,step
00000000                            	endif
00000000                            	;dc.b	speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	dc.b	$E6,val1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; S1/S2 only coordination flag
00000000                            ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
00000000                            smpsWeirdD1LRR macro
00000000                            	dc.b	$F9
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set op1
00000000                            vcDT2 set op2
00000000                            vcDT3 set op3
00000000                            vcDT4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set op1
00000000                            vcCF2 set op2
00000000                            vcCF3 set op3
00000000                            vcCF4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set op1
00000000                            vcRS2 set op2
00000000                            vcRS3 set op3
00000000                            vcRS4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set op1
00000000                            vcAR2 set op2
00000000                            vcAR3 set op3
00000000                            vcAR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set op1
00000000                            vcAM2 set op2
00000000                            vcAM3 set op3
00000000                            vcAM4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set op1
00000000                            vcD1R2 set op2
00000000                            vcD1R3 set op3
00000000                            vcD1R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set op1
00000000                            vcD2R2 set op2
00000000                            vcD2R3 set op3
00000000                            vcD2R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set op1
00000000                            vcDL2 set op2
00000000                            vcDL3 set op3
00000000                            vcDL4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set op1
00000000                            vcRR2 set op2
00000000                            vcRR3 set op3
00000000                            vcRR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set op1
00000000                            vcTL2 set op2
00000000                            vcTL3 set op3
00000000                            vcTL4 set op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            	dc.b	(vcDT4<<4)+vcCF4, (vcDT3<<4)+vcCF3, (vcDT2<<4)+vcCF2, (vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4, (vcRS3<<6)+vcAR3, (vcRS2<<6)+vcAR2, (vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4, (vcAM3<<5)+vcD1R3, (vcAM2<<5)+vcD1R2, (vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4, vcD2R3, vcD2R2, vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4, (vcDL3<<4)+vcRR3, (vcDL2<<4)+vcRR2, (vcDL1<<4)+vcRR1
00000000                            	;dc.b	vcTL4|vcTLMask4, vcTL3|vcTLMask3, vcTL2|vcTLMask2, vcTL1|vcTLMask1
00000000                            	if vcAlgorithm=7
00000000                            		dc.b	op4|$80
00000000                            	else
00000000                            		dc.b	op4
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=4
00000000                            		dc.b    op3|$80
00000000                            	else
00000000                            		dc.b    op3
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=5
00000000                            		dc.b    op2|$80
00000000                            	else
00000000                            		dc.b    op2
00000000                            	endif
00000000                            		dc.b    op1|$80
00000000                            	endm
00000000                            
00000000                            
00000000                            	include	"Constants.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00006978                  Size_of_SegaPCM:		equ $6978
00000000                            
00000000                            ; VDP addressses
00000000 =00C00000                  vdp_data_port:		equ $C00000
00000000 =00C00004                  vdp_control_port:	equ $C00004
00000000 =00C00008                  vdp_counter:		equ $C00008
00000000                            
00000000 =00C00011                  psg_input:		equ $C00011
00000000                            
00000000                            ; Z80 addresses
00000000 =00A00000                  z80_ram:		equ $A00000	; start of Z80 RAM
00000000 =00A000EA                  z80_dac3_pitch:		equ $A000EA
00000000 =00A01FFD                  z80_dac_status:		equ $A01FFD
00000000 =00A01FFF                  z80_dac_sample:		equ $A01FFF
00000000 =00A02000                  z80_ram_end:		equ $A02000	; end of non-reserved Z80 RAM
00000000 =00A10001                  z80_version:		equ $A10001
00000000 =00A10002                  z80_port_1_data:	equ $A10002
00000000 =00A10008                  z80_port_1_control:	equ $A10008
00000000 =00A1000A                  z80_port_2_control:	equ $A1000A
00000000 =00A1000C                  z80_expansion_control:	equ $A1000C
00000000 =00A11100                  z80_bus_request:	equ $A11100
00000000 =00A11200                  z80_reset:		equ $A11200
00000000 =00A04000                  ym2612_a0:		equ $A04000
00000000 =00A04001                  ym2612_d0:		equ $A04001
00000000 =00A04002                  ym2612_a1:		equ $A04002
00000000 =00A04003                  ym2612_d1:		equ $A04003
00000000                            
00000000 =00A14000                  security_addr:		equ $A14000
00000000                            
00000000                            ; Sound driver constants
00000000 =00000000                  TrackPlaybackControl:	equ 0		; All tracks
00000000 =00000001                  TrackVoiceControl:	equ 1		; All tracks
00000000 =00000002                  TrackTempoDivider:	equ 2		; All tracks
00000000 =00000004                  TrackDataPointer:	equ 4		; All tracks (4 bytes)
00000000 =00000008                  TrackTranspose:		equ 8		; FM/PSG only (sometimes written to as a word, to include TrackVolume)
00000000 =00000009                  TrackVolume:		equ 9		; FM/PSG only
00000000 =0000000A                  TrackAMSFMSPan:		equ $A		; FM/DAC only
00000000 =0000000B                  TrackVoiceIndex:	equ $B		; FM/PSG only
00000000 =0000000C                  TrackVolEnvIndex:	equ $C		; PSG only
00000000 =0000000D                  TrackStackPointer:	equ $D		; All tracks
00000000 =0000000E                  TrackDurationTimeout:	equ $E		; All tracks
00000000 =0000000F                  TrackSavedDuration:	equ $F		; All tracks
00000000 =00000010                  TrackSavedDAC:		equ $10		; DAC only
00000000 =00000010                  TrackFreq:		equ $10		; FM/PSG only (2 bytes)
00000000 =00000012                  TrackNoteTimeout:	equ $12		; FM/PSG only
00000000 =00000013                  TrackNoteTimeoutMaster:equ $13		; FM/PSG only
00000000 =00000014                  TrackModulationPtr:	equ $14		; FM/PSG only (4 bytes)
00000000 =00000018                  TrackModulationWait:	equ $18		; FM/PSG only
00000000 =00000019                  TrackModulationSpeed:	equ $19		; FM/PSG only
00000000 =0000001A                  TrackModulationDelta:	equ $1A		; FM/PSG only
00000000 =0000001B                  TrackModulationSteps:	equ $1B		; FM/PSG only
00000000 =0000001C                  TrackModulationVal:	equ $1C		; FM/PSG only (2 bytes)
00000000 =0000001E                  TrackDetune:		equ $1E		; FM/PSG only
00000000 =0000001F                  TrackPSGNoise:		equ $1F		; PSG only
00000000 =0000001F                  TrackFeedbackAlgo:	equ $1F		; FM only
00000000 =00000020                  TrackVoicePtr:		equ $20		; FM SFX only (4 bytes)
00000000 =00000024                  TrackLoopCounters:	equ $24		; All tracks (multiple bytes)
00000000                            TrackGoSubStack:	equ TrackSz	; All tracks (multiple bytes. This constant won't get to be used because of an optimisation that just uses zTrackSz)
00000000                            
00000000 =00000030                  TrackSz:	equ $30
00000000                            
00000000                            ; VRAM data
00000000 =0000C000                  vram_fg:	equ $C000	; foreground namespace
00000000 =0000E000                  vram_bg:	equ $E000	; background namespace
00000000 =0000F000                  vram_sonic:	equ $F000	; Sonic graphics
00000000 =0000F800                  vram_sprites:	equ $F800	; sprite table
00000000 =0000FC00                  vram_hscroll:	equ $FC00	; horizontal scroll table
00000000                            
00000000                            ; Game modes
00000000                            id_Sega:	equ ptr_GM_Sega-GameModeArray	; $00
00000000                            id_Title:	equ ptr_GM_Title-GameModeArray	; $04
00000000                            id_Demo:	equ ptr_GM_Demo-GameModeArray	; $08
00000000                            id_Level:	equ ptr_GM_Level-GameModeArray	; $0C
00000000                            id_Special:	equ ptr_GM_Special-GameModeArray; $10
00000000                            id_Continue:	equ ptr_GM_Cont-GameModeArray	; $14
00000000                            id_Ending:	equ ptr_GM_Ending-GameModeArray	; $18
00000000                            id_Credits:	equ ptr_GM_Credits-GameModeArray; $1C
00000000                            
00000000                            ; Levels
00000000 =00000000                  id_GHZ:		equ 0
00000000 =00000001                  id_LZ:		equ 1
00000000 =00000002                  id_MZ:		equ 2
00000000 =00000003                  id_SLZ:		equ 3
00000000 =00000004                  id_SYZ:		equ 4
00000000 =00000005                  id_SBZ:		equ 5
00000000 =00000006                  id_EndZ:	equ 6
00000000 =00000007                  id_SS:		equ 7
00000000                            
00000000                            ; colors
00000000 =00000000                  cBlack:		equ $000		; color black
00000000 =00000EEE                  cWhite:		equ $EEE		; color white
00000000 =00000E00                  cBlue:		equ $E00		; color blue
00000000 =000000E0                  cGreen:		equ $0E0		; color green
00000000 =0000000E                  cRed:		equ $00E		; color red
00000000 =000000EE                  cYellow:	equ cGreen+cRed		; color yellow
00000000 =00000EE0                  cAqua:		equ cGreen+cBlue	; color aqua
00000000 =00000E0E                  cMagenta:	equ cBlue+cRed		; color magenta
00000000                            
00000000                            ; Joypad input
00000000 =00000080                  btnStart:	equ %10000000 ; Start button	($80)
00000000 =00000040                  btnA:		equ %01000000 ; A		($40)
00000000 =00000020                  btnC:		equ %00100000 ; C		($20)
00000000 =00000010                  btnB:		equ %00010000 ; B		($10)
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =00000002                  btnDn:		equ %00000010 ; Down		($02)
00000000 =00000001                  btnUp:		equ %00000001 ; Up		($01)
00000000 =0000000F                  btnDir:		equ %00001111 ; Any direction	($0F)
00000000 =00000070                  btnABC:		equ %01110000 ; A, B or C	($70)
00000000 =00000007                  bitStart:	equ 7
00000000 =00000006                  bitA:		equ 6
00000000 =00000005                  bitC:		equ 5
00000000 =00000004                  bitB:		equ 4
00000000 =00000003                  bitR:		equ 3
00000000 =00000002                  bitL:		equ 2
00000000 =00000001                  bitDn:		equ 1
00000000 =00000000                  bitUp:		equ 0
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000020                  obInertia:	equ $20	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  obActWid:	equ $14	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            
00000000                            ; Object variables used by Sonic
00000000 =00000030                  flashtime:	equ $30	; time between flashes after getting hit
00000000 =00000032                  invtime:	equ $32	; time left for invincibility
00000000 =00000034                  shoetime:	equ $34	; time left for speed shoes
00000000                            
00000000                            ; Shield variables
00000000 =00000033                  shield_LastLoadedDPLC:    equ $33
00000000 =0000003C                  shield_DPLC_Address:    equ $3C
00000000 =00000038                  shield_Art_Address:    equ $38
00000000 =00000036                  shield_vram_art:    equ $36
00000000                            
00000000                            ; Object variables (Sonic 2 disassembly nomenclature)
00000000 =00000001                  render_flags:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  art_tile:	equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  mappings:	equ 4	; mappings address (4 bytes)
00000000 =00000008                  x_pos:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000C                  y_pos:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  x_vel:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  y_vel:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000016                  y_radius:	equ $16	; height/2
00000000 =00000017                  x_radius:	equ $17	; width/2
00000000 =00000018                  priority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  width_pixels:	equ $14	; action width
00000000 =0000001A                  mapping_frame:	equ $1A	; current frame displayed
00000000 =0000001B                  anim_frame:	equ $1B	; current frame in animation script
00000000 =0000001C                  anim:		equ $1C	; current animation
00000000 =0000001D                  next_anim:	equ $1D	; next animation
00000000 =0000001E                  anim_frame_duration: equ $1E ; time to next frame
00000000 =00000020                  collision_flags: equ $20 ; collision response type
00000000 =00000021                  collision_property: equ $21 ; collision extra property
00000000 =00000022                  status:		equ $22	; orientation or mode
00000000 =00000023                  respawn_index:	equ $23	; respawn list index number
00000000 =00000024                  routine:	equ $24	; routine number
00000000 =00000025                  routine_secondary: equ $25 ; secondary routine number
00000000 =00000026                  angle:		equ $26	; angle
00000000 =00000028                  subtype:	equ $28	; object subtype
00000000                            
00000000                            ; Animation flags
00000000 =000000FF                  afEnd:		equ $FF	; return to beginning of animation
00000000 =000000FE                  afBack:		equ $FE	; go back (specified number) bytes
00000000 =000000FD                  afChange:	equ $FD	; run specified animation
00000000 =000000FC                  afRoutine:	equ $FC	; increment routine counter
00000000 =000000FB                  afReset:	equ $FB	; reset animation and 2nd object routine counter
00000000 =000000FA                  af2ndRoutine:	equ $FA	; increment 2nd routine counter
00000000                            
00000000                            
00000000 =0000000B                  mainspr_mapframe    = $B
00000000 =0000000E                  mainspr_width        = $E
00000000 =0000000F                  mainspr_childsprites     = $F    ; amount of child sprites
00000000 =00000014                  mainspr_height        = $14
00000000 =00000010                  sub2_x_pos        = $10    ;x_vel
00000000 =00000012                  sub2_y_pos        = $12    ;y_vel
00000000 =00000015                  sub2_mapframe        = $15
00000000 =00000016                  sub3_x_pos        = $16    ;y_radius
00000000 =00000018                  sub3_y_pos        = $18    ;priority
00000000 =0000001B                  sub3_mapframe        = $1B    ;anim_frame
00000000 =0000001C                  sub4_x_pos        = $1C    ;anim
00000000 =0000001E                  sub4_y_pos        = $1E    ;anim_frame_duration
00000000 =00000021                  sub4_mapframe        = $21    ;collision_property
00000000 =00000022                  sub5_x_pos        = $22    ;status
00000000 =00000024                  sub5_y_pos        = $24    ;routine
00000000 =00000027                  sub5_mapframe        = $27
00000000 =00000028                  sub6_x_pos        = $28    ;subtype
00000000 =0000002A                  sub6_y_pos        = $2A
00000000 =0000002D                  sub6_mapframe        = $2D
00000000 =0000002E                  sub7_x_pos        = $2E
00000000 =00000030                  sub7_y_pos        = $30
00000000 =00000033                  sub7_mapframe        = $33
00000000 =00000034                  sub8_x_pos        = $34
00000000 =00000036                  sub8_y_pos        = $36
00000000 =00000039                  sub8_mapframe        = $39
00000000 =0000003A                  sub9_x_pos        = $3A
00000000 =0000003C                  sub9_y_pos        = $3C
00000000 =0000003F                  sub9_mapframe        = $3F
00000000 =00000006                  next_subspr       = $6
00000000                            
00000000                            ; Background music
00000000 =00000081                  bgm__First:	equ $81
00000000                            bgm_GHZ:	equ ((ptr_mus81-MusicIndex)/4)+bgm__First
00000000                            bgm_LZ:		equ ((ptr_mus82-MusicIndex)/4)+bgm__First
00000000                            bgm_MZ:		equ ((ptr_mus83-MusicIndex)/4)+bgm__First
00000000                            bgm_SLZ:	equ ((ptr_mus84-MusicIndex)/4)+bgm__First
00000000                            bgm_SYZ:	equ ((ptr_mus85-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ:	equ ((ptr_mus86-MusicIndex)/4)+bgm__First
00000000                            bgm_Invincible:	equ ((ptr_mus87-MusicIndex)/4)+bgm__First
00000000                            bgm_ExtraLife:	equ ((ptr_mus88-MusicIndex)/4)+bgm__First
00000000                            bgm_SS:		equ ((ptr_mus89-MusicIndex)/4)+bgm__First
00000000                            bgm_Title:	equ ((ptr_mus8A-MusicIndex)/4)+bgm__First
00000000                            bgm_Ending:	equ ((ptr_mus8B-MusicIndex)/4)+bgm__First
00000000                            bgm_Boss:	equ ((ptr_mus8C-MusicIndex)/4)+bgm__First
00000000                            bgm_FZ:		equ ((ptr_mus8D-MusicIndex)/4)+bgm__First
00000000                            bgm_GotThrough:	equ ((ptr_mus8E-MusicIndex)/4)+bgm__First
00000000                            bgm_GameOver:	equ ((ptr_mus8F-MusicIndex)/4)+bgm__First
00000000                            bgm_Continue:	equ ((ptr_mus90-MusicIndex)/4)+bgm__First
00000000                            bgm_Credits:	equ ((ptr_mus91-MusicIndex)/4)+bgm__First
00000000                            bgm_Drowning:	equ ((ptr_mus92-MusicIndex)/4)+bgm__First
00000000                            bgm_Emerald:	equ ((ptr_mus93-MusicIndex)/4)+bgm__First
00000000                            bgm_Pinch:		equ ((ptr_mus94-MusicIndex)/4)+bgm__First
00000000                            bgm_Seaside:	equ ((ptr_mus95-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ3:		equ ((ptr_mus96-MusicIndex)/4)+bgm__First
00000000                            bgm_Granada:	equ ((ptr_mus97-MusicIndex)/4)+bgm__First
00000000                            bgm_Options:	equ ((ptr_mus98-MusicIndex)/4)+bgm__First
00000000                            bgm_ToxicLandfill:	equ ((ptr_mus99-MusicIndex)/4)+bgm__First
00000000                            bgm_RRZ2:	equ ((ptr_mus9A-MusicIndex)/4)+bgm__First
00000000                            bgm_TTZBF:	equ ((ptr_mus9B-MusicIndex)/4)+bgm__First
00000000                            bgm_Tribute:	equ ((ptr_mus9C-MusicIndex)/4)+bgm__First
00000000                            bgm__Last:	equ ((ptr_musend-MusicIndex-4)/4)+bgm__First
00000000                            
00000000                            ; Sound effects
00000000 =000000A0                  sfx__First:	equ $A0
00000000                            sfx_Jump:	equ ((ptr_sndA0-SoundIndex)/4)+sfx__First
00000000                            sfx_Lamppost:	equ ((ptr_sndA1-SoundIndex)/4)+sfx__First
00000000                            sfx_A2:		equ ((ptr_sndA2-SoundIndex)/4)+sfx__First
00000000                            sfx_Death:	equ ((ptr_sndA3-SoundIndex)/4)+sfx__First
00000000                            sfx_Skid:	equ ((ptr_sndA4-SoundIndex)/4)+sfx__First
00000000                            sfx_LRingBox:	equ ((ptr_sndA5-SoundIndex)/4)+sfx__First
00000000                            sfx_HitSpikes:	equ ((ptr_sndA6-SoundIndex)/4)+sfx__First
00000000                            sfx_Push:	equ ((ptr_sndA7-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGoal:	equ ((ptr_sndA8-SoundIndex)/4)+sfx__First
00000000                            sfx_SSItem:	equ ((ptr_sndA9-SoundIndex)/4)+sfx__First
00000000                            sfx_Splash:	equ ((ptr_sndAA-SoundIndex)/4)+sfx__First
00000000                            sfx_FireShield:	equ ((ptr_FireShield-SoundIndex)/4)+sfx__First
00000000                            sfx_HitBoss:	equ ((ptr_sndAC-SoundIndex)/4)+sfx__First
00000000                            sfx_Bubble:	equ ((ptr_sndAD-SoundIndex)/4)+sfx__First
00000000                            sfx_Fireball:	equ ((ptr_sndAE-SoundIndex)/4)+sfx__First
00000000                            sfx_Shield:	equ ((ptr_sndAF-SoundIndex)/4)+sfx__First
00000000                            sfx_Saw:	equ ((ptr_sndB0-SoundIndex)/4)+sfx__First
00000000                            sfx_Electric:	equ ((ptr_sndB1-SoundIndex)/4)+sfx__First
00000000                            sfx_Drown:	equ ((ptr_sndB2-SoundIndex)/4)+sfx__First
00000000                            sfx_Flamethrower:equ ((ptr_sndB3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bumper:	equ ((ptr_sndB4-SoundIndex)/4)+sfx__First
00000000                            sfx_Ring:	equ ((ptr_sndB5-SoundIndex)/4)+sfx__First
00000000                            sfx_SpikesMove:	equ ((ptr_sndB6-SoundIndex)/4)+sfx__First
00000000                            sfx_Rumbling:	equ ((ptr_sndB7-SoundIndex)/4)+sfx__First
00000000                            sfx_B8:		equ ((ptr_sndB8-SoundIndex)/4)+sfx__First
00000000                            sfx_Collapse:	equ ((ptr_sndB9-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGlass:	equ ((ptr_sndBA-SoundIndex)/4)+sfx__First
00000000                            sfx_Door:	equ ((ptr_sndBB-SoundIndex)/4)+sfx__First
00000000                            sfx_Teleport:	equ ((ptr_sndBC-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainStomp:	equ ((ptr_sndBD-SoundIndex)/4)+sfx__First
00000000                            sfx_Roll:	equ ((ptr_sndBE-SoundIndex)/4)+sfx__First
00000000                            sfx_Continue:	equ ((ptr_sndBF-SoundIndex)/4)+sfx__First
00000000                            sfx_Basaran:	equ ((ptr_sndC0-SoundIndex)/4)+sfx__First
00000000                            sfx_BreakItem:	equ ((ptr_sndC1-SoundIndex)/4)+sfx__First
00000000                            sfx_Warning:	equ ((ptr_sndC2-SoundIndex)/4)+sfx__First
00000000                            sfx_GiantRing:	equ ((ptr_sndC3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bomb:	equ ((ptr_sndC4-SoundIndex)/4)+sfx__First
00000000                            sfx_Cash:	equ ((ptr_sndC5-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLoss:	equ ((ptr_sndC6-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainRise:	equ ((ptr_sndC7-SoundIndex)/4)+sfx__First
00000000                            sfx_Burning:	equ ((ptr_sndC8-SoundIndex)/4)+sfx__First
00000000                            sfx_Bonus:	equ ((ptr_sndC9-SoundIndex)/4)+sfx__First
00000000                            sfx_EnterSS:	equ ((ptr_sndCA-SoundIndex)/4)+sfx__First
00000000                            sfx_WallSmash:	equ ((ptr_sndCB-SoundIndex)/4)+sfx__First
00000000                            sfx_Spring:	equ ((ptr_sndCC-SoundIndex)/4)+sfx__First
00000000                            sfx_Switch:	equ ((ptr_sndCD-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLeft:	equ ((ptr_sndCE-SoundIndex)/4)+sfx__First
00000000                            sfx_Signpost:	equ ((ptr_sndCF-SoundIndex)/4)+sfx__First
00000000                            sfx__Last:	equ ((ptr_sndend-SoundIndex-4)/4)+sfx__First
00000000                            
00000000                            ; Special sound effects
00000000 =000000D0                  spec__First:	equ $D0
00000000                            sfx_Waterfall:	equ ((ptr_sndD0-SpecSoundIndex)/4)+spec__First
00000000                            sfx_LightningShield:	equ ((ptr_sndD1-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Peelout:	equ ((ptr_sndD2-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutRelease:	equ ((ptr_sndD3-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutStop:	equ ((ptr_sndD4-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Spindash:	equ ((ptr_sndD5-SpecSoundIndex)/4)+spec__First
00000000                            spec__Last:	equ ((ptr_specend-SpecSoundIndex-4)/4)+spec__First
00000000                            
00000000 =000000E0                  flg__First:	equ $E0
00000000                            bgm_Fade:	equ ((ptr_flgE0-Sound_ExIndex)/4)+flg__First
00000000                            sfx_Sega:	equ ((ptr_flgE1-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Speedup:	equ ((ptr_flgE2-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Slowdown:	equ ((ptr_flgE3-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Stop:	equ ((ptr_flgE4-Sound_ExIndex)/4)+flg__First
00000000                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
00000000                            
00000000                            ; Sonic frame IDs
00000000 =00000000                  fr_Null:	equ 0
00000000 =00000001                  fr_Stand:	equ 1
00000000 =00000002                  fr_Blink:	equ 2
00000000 =00000003                  fr_Wait1:	equ 3
00000000 =00000004                  fr_Wait2:	equ 4
00000000 =00000005                  fr_Wait3:	equ 5
00000000 =00000006                  fr_Wait4:	equ 6
00000000 =00000007                  fr_Wait5:	equ 7
00000000 =00000008                  fr_Wait6:	equ 8
00000000 =00000009                  fr_Wait7:	equ 9
00000000 =0000000A                  fr_Wait8:	equ $A
00000000 =0000000B                  fr_Wait9:	equ $B
00000000 =0000000C                  fr_LookUp1:	equ $C
00000000 =0000000D                  fr_LookUp2:	equ $D
00000000 =0000000E                  fr_Walk11:	equ $E
00000000 =0000000F                  fr_Walk12:	equ $F
00000000 =00000010                  fr_Walk13:	equ $10
00000000 =00000011                  fr_Walk14:	equ $11
00000000 =00000012                  fr_Walk15:	equ $12
00000000 =00000013                  fr_Walk16:	equ $13
00000000 =00000014                  fr_Walk17:	equ $14
00000000 =00000015                  fr_Walk18:	equ $15
00000000 =00000016                  fr_Walk21:	equ $16
00000000 =00000017                  fr_Walk22:	equ $17
00000000 =00000018                  fr_Walk23:	equ $18
00000000 =00000019                  fr_Walk24:	equ $19
00000000 =0000001A                  fr_Walk25:	equ $1A
00000000 =0000001B                  fr_Walk26:	equ $1B
00000000 =0000001C                  fr_Walk27:	equ $1C
00000000 =0000001D                  fr_Walk28:	equ $1D
00000000 =0000001E                  fr_Walk31:	equ $1E
00000000 =0000001F                  fr_Walk32:	equ $1F
00000000 =00000020                  fr_Walk33:	equ $20
00000000 =00000021                  fr_Walk34:	equ $21
00000000 =00000022                  fr_Walk35:	equ $22
00000000 =00000023                  fr_Walk36:	equ $23
00000000 =00000024                  fr_Walk37:	equ $24
00000000 =00000025                  fr_Walk38:	equ $25
00000000 =00000026                  fr_Walk41:	equ $26
00000000 =00000027                  fr_Walk42:	equ $27
00000000 =00000028                  fr_Walk43:	equ $28
00000000 =00000029                  fr_Walk44:	equ $29
00000000 =0000002A                  fr_Walk45:	equ $2A
00000000 =0000002B                  fr_Walk46:	equ $2B
00000000 =0000002C                  fr_Walk47:	equ $2C
00000000 =0000002D                  fr_Walk48:	equ $2D
00000000 =0000002E                  fr_Run11:	equ $2E
00000000 =0000002F                  fr_Run12:	equ $2F
00000000 =00000030                  fr_Run13:	equ $30
00000000 =00000031                  fr_Run14:	equ $31
00000000 =00000032                  fr_Run15:	equ $32
00000000 =00000033                  fr_Run16:	equ $33
00000000 =00000034                  fr_Run17:	equ $34
00000000 =00000035                  fr_Run18:	equ $35
00000000 =00000036                  fr_Run21:	equ $36
00000000 =00000037                  fr_Run22:	equ $37
00000000 =00000038                  fr_Run23:	equ $38
00000000 =00000039                  fr_Run24:	equ $39
00000000 =0000003A                  fr_Run25:	equ $3A
00000000 =0000003B                  fr_Run26:	equ $3B
00000000 =0000003C                  fr_Run27:	equ $3C
00000000 =0000003D                  fr_Run28:	equ $3D
00000000 =0000003E                  fr_Run31:	equ $3E
00000000 =0000003F                  fr_Run32:	equ $3F
00000000 =00000040                  fr_Run33:	equ $40
00000000 =00000041                  fr_Run34:	equ $41
00000000 =00000042                  fr_Run35:	equ $42
00000000 =00000043                  fr_Run36:	equ $43
00000000 =00000044                  fr_Run37:	equ $44
00000000 =00000045                  fr_Run38:	equ $45
00000000 =00000046                  fr_Run41:	equ $46
00000000 =00000047                  fr_Run42:	equ $47
00000000 =00000048                  fr_Run43:	equ $48
00000000 =00000049                  fr_Run44:	equ $49
00000000 =0000004A                  fr_Run45:	equ $4A
00000000 =0000004B                  fr_Run46:	equ $4B
00000000 =0000004C                  fr_Run47:	equ $4C
00000000 =0000004D                  fr_Run48:	equ $4D
00000000 =0000004E                  fr_peelout11:	equ $4E
00000000 =0000004F                  fr_peelout12:	equ $4F
00000000 =00000050                  fr_peelout13:	equ $50
00000000 =00000051                  fr_peelout14:	equ $51
00000000 =00000052                  fr_peelout21:	equ $52
00000000 =00000053                  fr_peelout22:	equ $53
00000000 =00000054                  fr_peelout23:	equ $54
00000000 =00000055                  fr_peelout24:	equ $55
00000000 =00000056                  fr_peelout31:	equ $56
00000000 =00000057                  fr_peelout32:	equ $57
00000000 =00000058                  fr_peelout33:	equ $58
00000000 =00000059                  fr_peelout34:	equ $59
00000000 =0000005A                  fr_peelout41:	equ $5A
00000000 =0000005B                  fr_peelout42:	equ $5B
00000000 =0000005C                  fr_peelout43:	equ $5C
00000000 =0000005D                  fr_peelout44:	equ $5D
00000000 =0000005E                  fr_Roll1:	equ $5E
00000000 =00000060                  fr_Roll2:	equ $60
00000000 =00000062                  fr_Roll3:	equ $62
00000000 =00000064                  fr_Roll4:	equ $64
00000000 =00000066                  fr_Roll5:	equ $66
00000000 =0000005F                  fr_Roll6:	equ $5F
00000000 =00000061                  fr_Roll7:	equ $61
00000000 =00000063                  fr_Roll8:	equ $63
00000000 =00000065                  fr_Roll9:	equ $65
00000000 =00000067                  fr_Warp1:	equ $67
00000000 =00000068                  fr_Warp2:	equ $68
00000000 =00000069                  fr_Warp3:	equ $69
00000000 =0000006A                  fr_Warp4:	equ $6A
00000000 =0000006B                  fr_Stop1:	equ $6B
00000000 =0000006C                  fr_Stop2:	equ $6C
00000000 =0000006D                  fr_Stop3:	equ $6D
00000000 =0000006E                  fr_Stop4:	equ $6E
00000000 =0000006F                  fr_Leap3:	equ $6F
00000000 =00000070                  fr_Duck2:	equ $70
00000000 =00000071                  fr_Duck:	equ $71
00000000 =00000072                  fr_Balance1:	equ $72
00000000 =00000073                  fr_Balance2:	equ $73
00000000 =00000074                  fr_Balance3:	equ $74
00000000 =00000075                  fr_Balance4:	equ $75
00000000 =00000076                  fr_GetAir2:		equ $76
00000000 =00000077                  fr_Blank:		equ $77
00000000 =00000078                  fr_VHang1:		equ $78
00000000 =00000079                  fr_VHang2:		equ $79
00000000 =0000007A                  fr_VHang3:		equ $7A
00000000                            
00000000 =0000007C                  fr_Float1:	equ $7C
00000000 =0000007E                  fr_Float2:	equ $7E
00000000 =00000081                  fr_Float3:	equ $81
00000000 =00000082                  fr_Float4:	equ $82
00000000 =00000080                  fr_Float5:	equ $80
00000000 =0000007B                  fr_Float6:	equ $7B
00000000 =0000007D                  fr_float7:	equ $7D
00000000 =0000007F                  fr_float8:	equ $7F
00000000 =00000083                  fr_Spring:	equ $83
00000000 =00000084                  fr_Spring2:	equ $84
00000000 =00000085                  fr_Hang1:	equ $85
00000000 =00000086                  fr_Hang2:	equ $86
00000000 =00000087                  fr_Leap1:	equ $87
00000000 =00000088                  fr_Leap2:	equ $88
00000000 =00000089                  fr_Push1:	equ $89
00000000 =0000008A                  fr_Push2:	equ $8A
00000000 =0000008B                  fr_Push3:	equ $8B
00000000 =0000008C                  fr_Push4:	equ $8C
00000000 =0000008D                  fr_Push5:	equ $8D
00000000 =0000008E                  fr_Push6:	equ $8E
00000000 =0000008F                  fr_Push7:	equ $8F
00000000 =00000090                  fr_Push8:	equ $90
00000000 =00000091                  fr_Surf:	equ $91
00000000 =00000092                  fr_Burnt:	equ $92
00000000 =00000093                  fr_Drown:	equ $93
00000000 =00000094                  fr_Death:	equ $94
00000000 =00000095                  fr_GetAir:	equ $95
00000000 =00000096                  fr_Injury:	equ $96
00000000 =00000097                  fr_WaterSlide:	equ $97
00000000 =00000098                  fr_skele1:	equ $98
00000000 =00000099                  fr_skele2:	equ $99
00000000 =0000009A                  fr_hurtblue:	equ $9A
00000000 =0000009B                  fr_Spindash1	equ $9B
00000000 =0000009C                  fr_Spindash2	equ $9C
00000000 =0000009D                  fr_Spindash3	equ $9D
00000000 =0000009E                  fr_Spindash4	equ $9E
00000000 =0000009F                  fr_Spindash5	equ $9F
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000 =000000A1                  fr_Transform1	equ	$A1
00000000 =000000A2                  fr_Transform2	equ	$A2
00000000 =000000A3                  fr_Transform3	equ	$A3
00000000 =000000A4                  fr_Transform4	equ	$A4
00000000 =000000A5                  fr_Transform5	equ	$A5
00000000 =000000A6                  fr_Transform6	equ	$A6
00000000 =000000A7                  fr_Transform7	equ	$A7
00000000 =000000A8                  fr_Transform8	equ	$A8
00000000 =000000A9                  fr_Transform9	equ	$A9
00000000 =000000A9                  fr_Transform9	equ	$A9
00000000                            	include	"Variables.asm"
00000000                            ; Variables (v) and Flags (f)
00000000                            
00000000 =FFFFFC00                  v_regbuffer:	equ $FFFFFC00	; stores registers d0-a7 during an error event ($40 bytes)
00000000 =FFFFFC40                  v_spbuffer:	equ $FFFFFC40	; stores most recent sp address (4 bytes)
00000000 =FFFFFC44                  v_errortype:	equ $FFFFFC44	; error type
00000000                            
00000000 =00FF0000                  v_256x256:	equ   $FF0000	; 256x256 tile mappings ($A400 bytes)
00000000 =FFFFA400                  v_lvllayout:	equ $FFFFA400	; level and background layouts ($400 bytes)
00000000 =FFFFA800                  v_bgscroll_buffer:	equ	$FFFFA800	; background scroll buffer ($200 bytes)
00000000 =FFFFAA00                  v_ngfx_buffer:	equ $FFFFAA00	; Nemesis graphics decompression buffer ($200 bytes)
00000000 =FFFFAC00                  v_spritequeue:	equ $FFFFAC00	; sprite display queue, in order of priority ($400 bytes)
00000000 =FFFFB000                  v_16x16:		equ $FFFFB000	; 16x16 tile mappings
00000000 =FFFFC800                  VDP_Command_Buffer:	equ $FFFFC800
00000000                            
00000000 =FFFFC8FC                  VDP_Command_Buffer_Slot:equ VDP_Command_Buffer+7*$12*2
00000000 =FFFFC800                  v_sgfx_buffer:	equ $FFFFC800	; buffered Sonic graphics ($17 cells) ($2E0 bytes)
00000000 =FFFFCB00                  v_tracksonic:	equ $FFFFCB00	; position tracking data for Sonic ($100 bytes)
00000000 =FFFFCC00                  v_hscrolltablebuffer:	equ $FFFFCC00 ; scrolling table data (actually $380 bytes, but $400 is reserved for it)
00000000 =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	equ v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFD800                  v_lvlobjspace:	equ $FFFFD800	; level object variable space ($1800 bytes)
00000000 =FFFFF015                  v_palmuscounter:	equ $FFFFF015
00000000 =FFFFF000                  v_snddriver_ram:	equ $FFFFF000 ; start of RAM for the sound driver data ($5C0 bytes)
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, until otherwise stated, all offsets are relative to v_snddriver_ram
00000000                            ; =================================================================================
00000000 =00000000                  v_startofvariables:	equ $000
00000000 =00000000                  v_sndprio:		equ $000	; sound priority (priority of new music/SFX must be higher or equal to this value or it won't play; bit 7 of priority being set prevents this value from changing)
00000000 =00000001                  v_main_tempo_timeout:	equ $001	; Counts down to zero; when zero, resets to next value and delays song by 1 frame
00000000 =00000002                  v_main_tempo:		equ $002	; Used for music only
00000000 =00000003                  f_pausemusic:		equ $003	; flag set to stop music when paused
00000000 =00000004                  v_fadeout_counter:	equ $004
00000000                            
00000000 =00000006                  v_fadeout_delay:	equ $006
00000000 =00000007                  v_communication_byte:	equ $007	; used in Ristar to sync with a boss' attacks; unused here
00000000 =00000008                  f_updating_dac:		equ $008	; $80 if updating DAC, $00 otherwise
00000000 =00000009                  v_sound_id:		equ $009	; sound or music copied from below
00000000 =0000000A                  v_soundqueue0:		equ $00A	; sound or music to play
00000000 =0000000B                  v_soundqueue1:		equ $00B	; special sound to play
00000000 =0000000C                  v_soundqueue2:		equ $00C	; unused sound to play
00000000                            
00000000 =0000000E                  f_voice_selector:	equ $00E	; $00 = use music voice pointer; $40 = use special voice pointer; $80 = use track voice pointer
00000000                            
00000000 =00000018                  v_voice_ptr:		equ $018	; voice data pointer (4 bytes)
00000000                            
00000000 =00000020                  v_special_voice_ptr:	equ $020	; voice data pointer for special SFX ($D0-$DF) (4 bytes)
00000000                            
00000000 =00000024                  f_fadein_flag:		equ $024	; Flag for fade in
00000000 =00000025                  v_fadein_delay:		equ $025
00000000 =00000026                  v_fadein_counter:	equ $026	; Timer for fade in/out
00000000 =00000027                  f_1up_playing:		equ $027	; flag indicating 1-up song is playing
00000000 =00000028                  v_tempo_mod:		equ $028	; music - tempo modifier
00000000 =00000029                  v_speeduptempo:		equ $029	; music - tempo modifier with speed shoes
00000000 =0000002A                  f_speedup:		equ $02A	; flag indicating whether speed shoes tempo is on ($80) or off ($00)
00000000 =0000002B                  v_ring_speaker:		equ $02B	; which speaker the "ring" sound is played in (00 = right; 01 = left)
00000000 =0000002C                  f_push_playing:		equ $02C	; if set, prevents further push sounds from playing
00000000                            
00000000 =00000040                  v_music_track_ram:	equ $040	; Start of music RAM
00000000                            
00000000 =00000040                  v_music_fmdac_tracks:	equ v_music_track_ram+TrackSz*0
00000000 =00000040                  v_music_dac_track:	equ v_music_fmdac_tracks+TrackSz*0
00000000 =00000070                  v_music_fm_tracks:	equ v_music_fmdac_tracks+TrackSz*1
00000000 =00000070                  v_music_fm1_track:	equ v_music_fm_tracks+TrackSz*0
00000000 =000000A0                  v_music_fm2_track:	equ v_music_fm_tracks+TrackSz*1
00000000 =000000D0                  v_music_fm3_track:	equ v_music_fm_tracks+TrackSz*2
00000000 =00000100                  v_music_fm4_track:	equ v_music_fm_tracks+TrackSz*3
00000000 =00000130                  v_music_fm5_track:	equ v_music_fm_tracks+TrackSz*4
00000000 =00000160                  v_music_fm6_track:	equ v_music_fm_tracks+TrackSz*5
00000000 =00000190                  v_music_fm_tracks_end:	equ v_music_fm_tracks+TrackSz*6
00000000 =00000190                  v_music_fmdac_tracks_end:	equ v_music_fm_tracks_end
00000000 =00000190                  v_music_psg_tracks:	equ v_music_fmdac_tracks_end
00000000 =00000190                  v_music_psg1_track:	equ v_music_psg_tracks+TrackSz*0
00000000 =000001C0                  v_music_psg2_track:	equ v_music_psg_tracks+TrackSz*1
00000000 =000001F0                  v_music_psg3_track:	equ v_music_psg_tracks+TrackSz*2
00000000 =00000220                  v_music_psg_tracks_end:	equ v_music_psg_tracks+TrackSz*3
00000000 =00000220                  v_music_track_ram_end:	equ v_music_psg_tracks_end
00000000                            
00000000 =00000220                  v_sfx_track_ram:	equ v_music_track_ram_end	; Start of SFX RAM, straight after the end of music RAM
00000000                            
00000000 =00000220                  v_sfx_fm_tracks:	equ v_sfx_track_ram+TrackSz*0
00000000 =00000220                  v_sfx_fm3_track:	equ v_sfx_fm_tracks+TrackSz*0
00000000 =00000250                  v_sfx_fm4_track:	equ v_sfx_fm_tracks+TrackSz*1
00000000 =00000280                  v_sfx_fm5_track:	equ v_sfx_fm_tracks+TrackSz*2
00000000 =000002B0                  v_sfx_fm_tracks_end:	equ v_sfx_fm_tracks+TrackSz*3
00000000 =000002B0                  v_sfx_psg_tracks:	equ v_sfx_fm_tracks_end
00000000 =000002B0                  v_sfx_psg1_track:	equ v_sfx_psg_tracks+TrackSz*0
00000000 =000002E0                  v_sfx_psg2_track:	equ v_sfx_psg_tracks+TrackSz*1
00000000 =00000310                  v_sfx_psg3_track:	equ v_sfx_psg_tracks+TrackSz*2
00000000 =00000340                  v_sfx_psg_tracks_end:	equ v_sfx_psg_tracks+TrackSz*3
00000000 =00000340                  v_sfx_track_ram_end:	equ v_sfx_psg_tracks_end
00000000                            
00000000 =00000340                  v_spcsfx_track_ram:	equ v_sfx_track_ram_end	; Start of special SFX RAM, straight after the end of SFX RAM
00000000                            
00000000 =00000340                  v_spcsfx_fm4_track:	equ v_spcsfx_track_ram+TrackSz*0
00000000 =00000370                  v_spcsfx_psg3_track:	equ v_spcsfx_track_ram+TrackSz*1
00000000 =000003A0                  v_spcsfx_track_ram_end:	equ v_spcsfx_track_ram+TrackSz*2
00000000                            
00000000 =000003A0                  v_1up_ram_copy:		equ v_spcsfx_track_ram_end
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, no longer relative to sound driver RAM
00000000                            ; =================================================================================
00000000                            
00000000 =FFFFF600                  v_gamemode:	equ $FFFFF600	; game mode (00=Sega; 04=Title; 08=Demo; 0C=Level; 10=SS; 14=Cont; 18=End; 1C=Credit; +8C=PreLevel)
00000000 =FFFFF602                  v_jpadhold2:	equ $FFFFF602	; joypad input - held, duplicate
00000000 =FFFFF603                  v_jpadpress2:	equ $FFFFF603	; joypad input - pressed, duplicate
00000000 =FFFFF604                  v_jpadhold1:	equ $FFFFF604	; joypad input - held
00000000 =FFFFF605                  v_jpadpress1:	equ $FFFFF605	; joypad input - pressed
00000000 =FFFFF608                  v_loadhud:		equ	$FFFFF608
00000000 =FFFFF60C                  v_vdp_buffer1:	equ $FFFFF60C	; VDP instruction buffer (2 bytes)
00000000                            
00000000 =FFFFF614                  v_demolength:	equ $FFFFF614	; the length of a demo in frames (2 bytes)
00000000 =FFFFF616                  v_scrposy_dup:	equ $FFFFF616	; screen position y (duplicate) (2 bytes)
00000000 =FFFFF618                  v_bgscrposy_dup:	equ $FFFFF618	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFF61A                  v_scrposx_dup:	equ $FFFFF61A	; screen position x (duplicate) (2 bytes)
00000000 =FFFFF61C                  v_bgscreenposx_dup_unused:	equ $FFFFF61C	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFF61E                  v_bg3screenposy_dup_unused:	equ $FFFFF61E	; (2 bytes)
00000000 =FFFFF620                  v_bg3screenposx_dup_unused:	equ $FFFFF620	; (2 bytes)
00000000                            
00000000 =FFFFF624                  v_hbla_hreg:	equ $FFFFF624	; VDP H.interrupt register buffer (8Axx) (2 bytes)
00000000 =FFFFF625                  v_hbla_line:	equ $FFFFF625	; screen line where water starts and palette is changed by HBlank
00000000 =FFFFF626                  v_pfade_start:	equ $FFFFF626	; palette fading - start position in bytes
00000000 =FFFFF627                  v_pfade_size:	equ $FFFFF627	; palette fading - number of colors
00000000 =FFFFF62A                  v_vbla_routine:	equ $FFFFF62A	; VBlank - routine counter
00000000 =FFFFF62C                  v_spritecount:	equ $FFFFF62C	; number of sprites on-screen
00000000 =FFFFF632                  v_pcyc_num:	equ $FFFFF632	; palette cycling - current reference number (2 bytes)
00000000 =FFFFF634                  v_pcyc_time:	equ $FFFFF634	; palette cycling - time until the next change (2 bytes)
00000000 =FFFFF636                  v_random:	equ $FFFFF636	; pseudo random number buffer (4 bytes)
00000000 =FFFFF63A                  f_pause:		equ $FFFFF63A	; flag set to pause the game (2 bytes)
00000000 =FFFFF640                  v_vdp_buffer2:	equ $FFFFF640	; VDP instruction buffer (2 bytes)
00000000 =FFFFF644                  f_hbla_pal:	equ $FFFFF644	; flag set to change palette during HBlank (0000 = no; 0001 = change) (2 bytes)
00000000 =FFFFF646                  v_waterpos1:	equ $FFFFF646	; water height, actual (2 bytes)
00000000 =FFFFF648                  v_waterpos2:	equ $FFFFF648	; water height, ignoring sway (2 bytes)
00000000 =FFFFF64A                  v_waterpos3:	equ $FFFFF64A	; water height, next target (2 bytes)
00000000 =FFFFF64C                  f_water:		equ $FFFFF64C	; flag set for water
00000000 =FFFFF64D                  v_wtr_routine:	equ $FFFFF64D	; water event - routine counter
00000000 =FFFFF64E                  f_wtr_state:	equ $FFFFF64E	; water palette state when water is above/below the screen (00 = partly/all dry; 01 = all underwater)
00000000                            
00000000 =FFFFF650                  v_pal_buffer:	equ $FFFFF650	; palette data buffer (used for palette cycling) ($30 bytes)
00000000 =FFFFF680                  v_plc_buffer:	equ $FFFFF680	; pattern load cues buffer (maximum $10 PLCs) ($60 bytes)
00000000 =FFFFF6E0                  v_ptrnemcode:	equ $FFFFF6E0	; pointer for nemesis decompression code ($1502 or $150C) (4 bytes)
00000000                            
00000000 =FFFFF6F8                  f_plc_execute:	equ $FFFFF6F8	; flag set for pattern load cue execution (2 bytes)
00000000                            
00000000 =FFFFF700                  v_screenposx:	equ $FFFFF700	; screen position x (2 bytes)
00000000 =FFFFF704                  v_screenposy:	equ $FFFFF704	; screen position y (2 bytes)
00000000 =FFFFF708                  v_bgscreenposx:	equ $FFFFF708	; background screen position x (2 bytes)
00000000 =FFFFF70C                  v_bgscreenposy:	equ $FFFFF70C	; background screen position y (2 bytes)
00000000 =FFFFF710                  v_bg2screenposx:	equ $FFFFF710	; 2 bytes
00000000 =FFFFF714                  v_bg2screenposy:	equ $FFFFF714	; 2 bytes
00000000 =FFFFF718                  v_bg3screenposx:	equ $FFFFF718	; 2 bytes
00000000 =FFFFF71C                  v_bg3screenposy:	equ $FFFFF71C	; 2 bytes
00000000                            
00000000 =FFFFF720                  v_limitleft1:	equ $FFFFF720	; left level boundary (2 bytes)
00000000 =FFFFF722                  v_limitright1:	equ $FFFFF722	; right level boundary (2 bytes)
00000000 =FFFFF724                  v_limittop1:	equ $FFFFF724	; top level boundary (2 bytes)
00000000 =FFFFF726                  v_limitbtm1:	equ $FFFFF726	; bottom level boundary (2 bytes)
00000000 =FFFFF728                  v_limitleft2:	equ $FFFFF728	; left level boundary (2 bytes)
00000000 =FFFFF72A                  v_limitright2:	equ $FFFFF72A	; right level boundary (2 bytes)
00000000 =FFFFF72C                  v_limittop2:	equ $FFFFF72C	; top level boundary (2 bytes)
00000000 =FFFFF72E                  v_limitbtm2:	equ $FFFFF72E	; bottom level boundary (2 bytes)
00000000                            
00000000 =FFFFF732                  v_limitleft3:	equ $FFFFF732	; left level boundary, at the end of an act (2 bytes)
00000000                            
00000000 =FFFFF73A                  v_scrshiftx:	equ $FFFFF73A	; x-screen shift (new - last) * $100
00000000 =FFFFF73C                  v_scrshifty:	equ $FFFFF73C	; y-screen shift (new - last) * $100
00000000                            
00000000 =FFFFF73E                  v_lookshift:	equ $FFFFF73E	; screen shift when Sonic looks up/down (2 bytes)
00000000 =FFFFF742                  v_dle_routine:	equ $FFFFF742	; dynamic level event - routine counter
00000000 =FFFFF744                  f_nobgscroll:	equ $FFFFF744	; flag set to cancel background scrolling
00000000                            
00000000 =FFFFF74A                  v_fg_xblock:	equ	$FFFFF74A	; foreground x-block parity (for redraw)
00000000 =FFFFF74B                  v_fg_yblock:	equ	$FFFFF74B	; foreground y-block parity (for redraw)
00000000 =FFFFF74C                  v_bg1_xblock:	equ	$FFFFF74C	; background x-block parity (for redraw)
00000000 =FFFFF74D                  v_bg1_yblock:	equ	$FFFFF74D	; background y-block parity (for redraw)
00000000 =FFFFF74E                  v_bg2_xblock:	equ	$FFFFF74E	; secondary background x-block parity (for redraw)
00000000 =FFFFF74F                  v_bg2_yblock:	equ	$FFFFF74F	; secondary background y-block parity (unused)
00000000 =FFFFF750                  v_bg3_xblock:	equ	$FFFFF750	; teritary background x-block parity (for redraw)
00000000 =FFFFF751                  v_bg3_yblock:	equ	$FFFFF751	; teritary background y-block parity (unused)
00000000                            
00000000 =FFFFF754                  v_fg_scroll_flags:	equ $FFFFF754	; screen redraw flags for foreground
00000000 =FFFFF756                  v_bg1_scroll_flags:	equ $FFFFF756	; screen redraw flags for background 1
00000000 =FFFFF758                  v_bg2_scroll_flags:	equ $FFFFF758	; screen redraw flags for background 2
00000000 =FFFFF75A                  v_bg3_scroll_flags:	equ $FFFFF75A	; screen redraw flags for background 3
00000000 =FFFFF75C                  f_bgscrollvert:	equ $FFFFF75C	; flag for vertical background scrolling
00000000 =FFFFF760                  v_sonspeedmax:	equ $FFFFF760	; Sonic's maximum speed (2 bytes)
00000000 =FFFFF762                  v_sonspeedacc:	equ $FFFFF762	; Sonic's acceleration (2 bytes)
00000000 =FFFFF764                  v_sonspeeddec:	equ $FFFFF764	; Sonic's deceleration (2 bytes)
00000000 =FFFFF766                  v_sonframenum:	equ $FFFFF766	; frame to display for Sonic
00000000 =FFFFF767                  f_sonframechg:	equ $FFFFF767	; flag set to update Sonic's sprite frame
00000000 =FFFFF768                  v_anglebuffer:	equ $FFFFF768	; angle of collision block that Sonic or object is standing on
00000000                            
00000000 =FFFFF76C                  v_opl_routine:	equ $FFFFF76C	; ObjPosLoad - routine counter
00000000 =FFFFF76E                  v_opl_screen:	equ $FFFFF76E	; ObjPosLoad - screen variable
00000000 =FFFFF770                  v_opl_data:	equ $FFFFF770	; ObjPosLoad - data buffer ($10 bytes)
00000000                            
00000000 =FFFFF780                  v_ssangle:	equ $FFFFF780	; Special Stage angle (2 bytes)
00000000 =FFFFF782                  v_ssrotate:	equ $FFFFF782	; Special Stage rotation speed (2 bytes)
00000000 =FFFFF790                  v_btnpushtime1:	equ $FFFFF790	; button push duration - in level (2 bytes)
00000000 =FFFFF792                  v_btnpushtime2:	equ $FFFFF792	; button push duration - in demo (2 bytes)
00000000 =FFFFF794                  v_palchgspeed:	equ $FFFFF794	; palette fade/transition speed (0 is fastest) (2 bytes)
00000000 =FFFFF796                  v_collindex:	equ $FFFFF796	; ROM address for collision index of current level (4 bytes)
00000000 =FFFFF79A                  v_palss_num:	equ $FFFFF79A	; palette cycling in Special Stage - reference number (2 bytes)
00000000 =FFFFF79C                  v_palss_time:	equ $FFFFF79C	; palette cycling in Special Stage - time until next change (2 bytes)
00000000                            
00000000 =FFFFF7A0                  v_camera_pan:	equ $FFFFF7A0    ; Extended Camera - how far the camera/view is panned to the left or right of Sonic (2 bytes)
00000000                            
00000000 =FFFFF7A4                  v_obj31ypos:	equ $FFFFF7A4	; y-position of object 31 (MZ stomper) (2 bytes)
00000000 =FFFFF7A7                  v_bossstatus:	equ $FFFFF7A7	; status of boss and prison capsule (01 = boss defeated; 02 = prison opened)
00000000 =FFFFF7A8                  v_trackpos:	equ $FFFFF7A8	; position tracking reference number (2 bytes)
00000000 =FFFFF7A9                  v_trackbyte:	equ $FFFFF7A9	; low byte for position tracking
00000000 =FFFFF7AA                  f_lockscreen:	equ $FFFFF7AA	; flag set to lock screen during bosses
00000000 =FFFFF7AC                  v_256loop1:	equ $FFFFF7AC	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AD                  v_256loop2:	equ $FFFFF7AD	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AE                  v_256roll1:	equ $FFFFF7AE	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7AF                  v_256roll2:	equ $FFFFF7AF	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7B0                  v_lani0_frame:	equ $FFFFF7B0	; level graphics animation 0 - current frame
00000000 =FFFFF7B1                  v_lani0_time:	equ $FFFFF7B1	; level graphics animation 0 - time until next frame
00000000 =FFFFF7B2                  v_lani1_frame:	equ $FFFFF7B2	; level graphics animation 1 - current frame
00000000 =FFFFF7B3                  v_lani1_time:	equ $FFFFF7B3	; level graphics animation 1 - time until next frame
00000000 =FFFFF7B4                  v_lani2_frame:	equ $FFFFF7B4	; level graphics animation 2 - current frame
00000000 =FFFFF7B5                  v_lani2_time:	equ $FFFFF7B5	; level graphics animation 2 - time until next frame
00000000 =FFFFF7B6                  v_lani3_frame:	equ $FFFFF7B6	; level graphics animation 3 - current frame
00000000 =FFFFF7B7                  v_lani3_time:	equ $FFFFF7B7	; level graphics animation 3 - time until next frame
00000000 =FFFFF7B8                  v_lani4_frame:	equ $FFFFF7B8	; level graphics animation 4 - current frame
00000000 =FFFFF7B9                  v_lani4_time:	equ $FFFFF7B9	; level graphics animation 4 - time until next frame
00000000 =FFFFF7BA                  v_lani5_frame:	equ $FFFFF7BA	; level graphics animation 5 - current frame
00000000 =FFFFF7BB                  v_lani5_time:	equ $FFFFF7BB	; level graphics animation 5 - time until next frame
00000000 =FFFFF7BE                  v_gfxbigring:	equ $FFFFF7BE	; settings for giant ring graphics loading (2 bytes)
00000000 =FFFFF7C0                  f_conveyrev:	equ $FFFFF7C0	; flag set to reverse conveyor belts in LZ/SBZ
00000000 =FFFFF7C1                  v_obj63:		equ $FFFFF7C1	; object 63 (LZ/SBZ platforms) variables (6 bytes)
00000000 =FFFFF7C7                  f_wtunnelmode:	equ $FFFFF7C7	; LZ water tunnel mode
00000000 =FFFFF7C8                  f_lockmulti:	equ $FFFFF7C8	; flag set to lock controls, lock Sonic's position & animation
00000000 =FFFFF7C9                  f_wtunnelallow:	equ $FFFFF7C9	; LZ water tunnels (00 = enabled; 01 = disabled)
00000000 =FFFFF7CA                  f_jumponly:	equ $FFFFF7CA	; flag set to lock controls apart from jumping
00000000 =FFFFF7CB                  v_obj6B:		equ $FFFFF7CB	; object 6B (SBZ stomper) variable
00000000 =FFFFF7CC                  f_lockctrl:	equ $FFFFF7CC	; flag set to lock controls during ending sequence
00000000 =FFFFF7CD                  f_bigring:	equ $FFFFF7CD	; flag set when Sonic collects the giant ring
00000000 =FFFFF7D0                  v_itembonus:	equ $FFFFF7D0	; item bonus from broken enemies, blocks etc. (2 bytes)
00000000 =FFFFF7D2                  v_timebonus:	equ $FFFFF7D2	; time bonus at the end of an act (2 bytes)
00000000 =FFFFF7D4                  v_ringbonus:	equ $FFFFF7D4	; ring bonus at the end of an act (2 bytes)
00000000 =FFFFF7D6                  f_endactbonus:	equ $FFFFF7D6	; time/ring bonus update flag at the end of an act
00000000 =FFFFF7D7                  v_sonicend:	equ $FFFFF7D7	; routine counter for Sonic in the ending sequence
00000000 =FFFFF7D8                  v_lz_deform:	equ	$FFFFF7D8	; LZ deformtaion offset, in units of $80 (2 bytes)
00000000 =FFFFF7E0                  f_switch:	equ $FFFFF7E0	; flags set when Sonic stands on a switch ($10 bytes)
00000000 =FFFFF7F0                  v_scroll_block_1_size:	equ $FFFFF7F0	; (2 bytes)
00000000 =FFFFF7F2                  v_scroll_block_2_size:	equ $FFFFF7F2	; unused (2 bytes)
00000000 =FFFFF7F4                  v_scroll_block_3_size:	equ $FFFFF7F4	; unused (2 bytes)
00000000 =FFFFF7F6                  v_scroll_block_4_size:	equ $FFFFF7F6	; unused (2 bytes)
00000000                            
00000000 =FFFFF800                  v_spritetablebuffer:	equ $FFFFF800 ; sprite table ($280 bytes, last $80 bytes are overwritten by v_pal_water_dup)
00000000 =FFFFFA00                  v_pal_water_dup:	equ $FFFFFA00 ; duplicate underwater palette, used for transitions ($80 bytes)
00000000 =FFFFFA80                  v_pal_water:	equ $FFFFFA80	; main underwater palette ($80 bytes)
00000000 =FFFFFB00                  v_pal_dry:	equ $FFFFFB00	; main palette ($80 bytes)
00000000 =FFFFFB80                  v_pal_dry_dup:	equ $FFFFFB80	; duplicate palette, used for transitions ($80 bytes)
00000000 =FFFFFC00                  v_objstate:	equ $FFFFFC00	; object state list ($200 bytes)
00000000                            
00000000                            
00000000 =FFFFFE00                  v_systemstack:	equ $FFFFFE00
00000000 =FFFFFE02                  f_restart:	equ $FFFFFE02	; restart level flag (2 bytes)
00000000 =FFFFFE04                  v_framecount:	equ $FFFFFE04	; frame counter (adds 1 every frame) (2 bytes)
00000000 =FFFFFE05                  v_framebyte:	equ v_framecount+1; low byte for frame counter
00000000 =FFFFFE06                  v_debugitem:	equ $FFFFFE06	; debug item currently selected (NOT the object number of the item)
00000000 =FFFFFE08                  v_debuguse:	equ $FFFFFE08	; debug mode use & routine counter (when Sonic is a ring/item) (2 bytes)
00000000 =FFFFFE0A                  v_debugxspeed:	equ $FFFFFE0A	; debug mode - horizontal speed
00000000 =FFFFFE0B                  v_debugyspeed:	equ $FFFFFE0B	; debug mode - vertical speed
00000000 =FFFFFE0C                  v_vbla_count:	equ $FFFFFE0C	; vertical interrupt counter (adds 1 every VBlank) (4 bytes)
00000000 =FFFFFE0E                  v_vbla_word:	equ v_vbla_count+2 ; low word for vertical interrupt counter (2 bytes)
00000000 =FFFFFE0F                  v_vbla_byte:	equ v_vbla_word+1	; low byte for vertical interrupt counter
00000000 =FFFFFE10                  v_zone:		equ $FFFFFE10	; current zone number
00000000 =FFFFFE11                  v_act:		equ $FFFFFE11	; current act number
00000000 =FFFFFE12                  v_lives:		equ $FFFFFE12	; number of lives
00000000 =FFFFFE14                  v_air:		equ $FFFFFE14	; air remaining while underwater (2 bytes)
00000000 =FFFFFE15                  v_airbyte:	equ v_air+1	; low byte for air
00000000 =FFFFFE16                  v_lastspecial:	equ $FFFFFE16	; last special stage number
00000000 =FFFFFE18                  v_continues:	equ $FFFFFE18	; number of continues
00000000 =FFFFFE1A                  f_timeover:	equ $FFFFFE1A	; time over flag
00000000 =FFFFFE1B                  v_lifecount:	equ $FFFFFE1B	; lives counter value (for actual number, see "v_lives")
00000000 =FFFFFE1C                  f_lifecount:	equ $FFFFFE1C	; lives counter update flag
00000000 =FFFFFE1D                  f_ringcount:	equ $FFFFFE1D	; ring counter update flag
00000000 =FFFFFE1E                  f_timecount:	equ $FFFFFE1E	; time counter update flag
00000000 =FFFFFE1F                  f_scorecount:	equ $FFFFFE1F	; score counter update flag
00000000 =FFFFFE20                  v_rings:		equ $FFFFFE20	; rings (2 bytes)
00000000 =FFFFFE21                  v_ringbyte:	equ v_rings+1	; low byte for rings
00000000 =FFFFFE22                  v_time:		equ $FFFFFE22	; time (4 bytes)
00000000 =FFFFFE23                  v_timemin:	equ $FFFFFE23	; time - minutes
00000000 =FFFFFE24                  v_timesec:	equ $FFFFFE24	; time - seconds
00000000 =FFFFFE25                  v_timecent:	equ $FFFFFE25	; time - centiseconds
00000000 =FFFFFE26                  v_score:		equ $FFFFFE26	; score (4 bytes)
00000000 =FFFFFE2C                  v_shield:	equ $FFFFFE2C	; shield status (00 = no; 01 = yes)
00000000 =FFFFFE2D                  v_invinc:	equ $FFFFFE2D	; invinciblity status (00 = no; 01 = yes)
00000000 =FFFFFE2E                  v_shoes:		equ $FFFFFE2E	; speed shoes status (00 = no; 01 = yes)
00000000 =FFFFFE30                  v_lastlamp:	equ $FFFFFE30	; number of the last lamppost you hit
00000000 =FFFFFE32                  v_lamp_xpos:	equ v_lastlamp+2	; x-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE34                  v_lamp_ypos:	equ v_lastlamp+4	; y-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE36                  v_lamp_rings:	equ v_lastlamp+6	; rings stored at lamppost (2 bytes)
00000000 =FFFFFE38                  v_lamp_time:	equ v_lastlamp+8	; time stored at lamppost (2 bytes)
00000000 =FFFFFE3C                  v_lamp_dle:	equ v_lastlamp+$C	; dynamic level event routine counter at lamppost
00000000 =FFFFFE3E                  v_lamp_limitbtm:	equ v_lastlamp+$E	; level bottom boundary at lamppost (2 bytes)
00000000 =FFFFFE40                  v_lamp_scrx:	equ v_lastlamp+$10 ; x-axis screen at lamppost (2 bytes)
00000000 =FFFFFE42                  v_lamp_scry:	equ v_lastlamp+$12 ; y-axis screen at lamppost (2 bytes)
00000000                            
00000000 =FFFFFE50                  v_lamp_wtrpos:	equ v_lastlamp+$20 ; water position at lamppost (2 bytes)
00000000 =FFFFFE52                  v_lamp_wtrrout:	equ v_lastlamp+$22 ; water routine at lamppost
00000000 =FFFFFE53                  v_lamp_wtrstat:	equ v_lastlamp+$23 ; water state at lamppost
00000000 =FFFFFE54                  v_lamp_lives:	equ v_lastlamp+$24 ; lives counter at lamppost
00000000 =FFFFFE57                  v_emeralds:	equ $FFFFFE57	; number of chaos emeralds
00000000 =FFFFFE58                  v_emldlist:	equ $FFFFFE58	; which individual emeralds you have (00 = no; 01 = yes) (6 bytes)
00000000 =FFFFFE5E                  v_oscillate:	equ $FFFFFE5E	; values which oscillate - for swinging platforms, et al ($42 bytes)
00000000 =FFFFFEC0                  v_ani0_time:	equ $FFFFFEC0	; synchronised sprite animation 0 - time until next frame (used for synchronised animations)
00000000 =FFFFFEC1                  v_ani0_frame:	equ $FFFFFEC1	; synchronised sprite animation 0 - current frame
00000000 =FFFFFEC2                  v_ani1_time:	equ $FFFFFEC2	; synchronised sprite animation 1 - time until next frame
00000000 =FFFFFEC3                  v_ani1_frame:	equ $FFFFFEC3	; synchronised sprite animation 1 - current frame
00000000 =FFFFFEC4                  v_ani2_time:	equ $FFFFFEC4	; synchronised sprite animation 2 - time until next frame
00000000 =FFFFFEC5                  v_ani2_frame:	equ $FFFFFEC5	; synchronised sprite animation 2 - current frame
00000000 =FFFFFEC6                  v_ani3_time:	equ $FFFFFEC6	; synchronised sprite animation 3 - time until next frame
00000000 =FFFFFEC7                  v_ani3_frame:	equ $FFFFFEC7	; synchronised sprite animation 3 - current frame
00000000 =FFFFFEC8                  v_ani3_buf:	equ $FFFFFEC8	; synchronised sprite animation 3 - info buffer (2 bytes)
00000000 =FFFFFEC9                  v_ani4_frame:	equ $FFFFFEC9	; synchronised sprite animation 4 - current frame
00000000 =FFFFFEF0                  v_limittopdb:	equ $FFFFFEF0	; level upper boundary, buffered for debug mode (2 bytes)
00000000 =FFFFFEF2                  v_limitbtmdb:	equ $FFFFFEF2	; level bottom boundary, buffered for debug mode (2 bytes)
00000000                            
00000000 =FFFFFF10                  v_screenposx_dup:	equ $FFFFFF10	; screen position x (duplicate) (2 bytes)
00000000 =FFFFFF14                  v_screenposy_dup:	equ $FFFFFF14	; screen position y (duplicate) (2 bytes)
00000000 =FFFFFF18                  v_bgscreenposx_dup:	equ $FFFFFF18	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFFF1C                  v_bgscreenposy_dup:	equ $FFFFFF1C	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFFF20                  v_bg2screenposx_dup:	equ $FFFFFF20	; 2 bytes
00000000 =FFFFFF24                  v_bg2screenposy_dup:	equ $FFFFFF24	; 2 bytes
00000000 =FFFFFF28                  v_bg3screenposx_dup:	equ $FFFFFF28	; 2 bytes
00000000 =FFFFFF2C                  v_bg3screenposy_dup:	equ $FFFFFF2C	; 2 bytes
00000000 =FFFFFF30                  v_fg_scroll_flags_dup:	equ $FFFFFF30
00000000 =FFFFFF32                  v_bg1_scroll_flags_dup:	equ $FFFFFF32
00000000 =FFFFFF34                  v_bg2_scroll_flags_dup:	equ $FFFFFF34
00000000 =FFFFFF36                  v_bg3_scroll_flags_dup:	equ $FFFFFF36
00000000                            
00000000 =FFFFFF80                  v_levseldelay:	equ $FFFFFF80	; level select - time until change when up/down is held (2 bytes)
00000000 =FFFFFF82                  v_levselitem:	equ $FFFFFF82	; level select - item selected (2 bytes)
00000000 =FFFFFF84                  v_levselsound:	equ $FFFFFF84	; level select - sound selected (2 bytes)
00000000 =FFFFFFB0                  Title_screen_option:	equ $FFFFFFB0
00000000 =FFFFFFC0                  v_scorecopy:	equ $FFFFFFC0	; score, duplicate (4 bytes)
00000000 =FFFFFFC0                  v_scorelife:	equ $FFFFFFC0	; points required for an extra life (4 bytes) (JP1 only)
00000000 =FFFFFFE0                  f_levselcheat:	equ $FFFFFFE0	; level select cheat flag
00000000 =FFFFFFE1                  f_slomocheat:	equ $FFFFFFE1	; slow motion & frame advance cheat flag
00000000 =FFFFFFE2                  f_debugcheat:	equ $FFFFFFE2	; debug mode cheat flag
00000000 =FFFFFFE3                  f_creditscheat:	equ $FFFFFFE3	; hidden credits & press start cheat flag
00000000 =FFFFFFE4                  v_title_dcount:	equ $FFFFFFE4	; number of times the d-pad is pressed on title screen (2 bytes)
00000000 =FFFFFFE6                  v_title_ccount:	equ $FFFFFFE6	; number of times C is pressed on title screen (2 bytes)
00000000                            
00000000 =FFFFFFF0                  f_demo:		equ $FFFFFFF0	; demo mode flag (0 = no; 1 = yes; $8001 = ending) (2 bytes)
00000000 =FFFFFFF2                  v_demonum:	equ $FFFFFFF2	; demo level number (not the same as the level number) (2 bytes)
00000000 =FFFFFFF4                  v_creditsnum:	equ $FFFFFFF4	; credits index number (2 bytes)
00000000 =FFFFFFF8                  v_megadrive:	equ $FFFFFFF8	; Megadrive machine type
00000000 =FFFFFFFA                  f_debugmode:	equ $FFFFFFFA	; debug mode flag (sometimes 2 bytes)
00000000 =FFFFFFFC                  v_init:		equ $FFFFFFFC	; 'init' text string (4 bytes)
00000000                            
00000000 =FFFFF5C3                  f_emeraldm:	equ $FFFFF5C3
00000000 =FFFFF5C4                  v_tagwater:    	equ $FFFFF5C4   ; TIS  
00000000 =FFFFFF92                  v_watersplashpos:    equ $FFFFFF92    ; TIS  
00000000 =00000039                  f_spindash	= $39
00000000 =FFFFF5C6                  v_Saved_music:	equ $FFFFF5C6
00000000 =FFFFF5C8                  v_rshield:	equ $FFFFF5C8	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5C9                  v_gshield:	equ $FFFFF5C9	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CA                  v_spshield:	equ $FFFFF5CA	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CD                  v_homingattack:	equ $FFFFF5CD
00000000                            
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000                            
00000000 =FFFFF5D8                  Super_Sonic_palette =        $FFFFF5D8
00000000 =FFFFF5DC                  Palette_frame =        $FFFFF5DC
00000000 =FFFFF5DE                  Palette_timer =        $FFFFF5DE
00000000 =FFFFF5CD                  Palette_Frame_Count =        $FFFFF5CD
00000000 =FFFFF670                  Super_Sonic_frame_count =    $FFFFF670
00000000 =FFFFFE19                  Super_Sonic_flag =        $FFFFFE19
00000000 =FFFFFE19                  Super_Sonic_flag =        $FFFFFE19
00000000                            	include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reads ASCII strings and passes them to character generator
00000000                            ; ---------------------------------------------------------------------------
00000000                            asc        macro str
00000000                            ct =    0                            ; accumulates the total num of characters
00000000                                rept narg                        ; repeat for every argumeny
00000000                            lc =        0                        ; the position in the string
00000000                            
00000000                                dc.b strlen(\str)-1                    ; put the string length before the string itself
00000000                                rept strlen(\str)                    ; repeat for each character in string
00000000                            cc         substr lc+1,lc+1,\str                ; get a single character into cc
00000000                            arg =        '\cc'                        ; convert it to a character
00000000                                        char.b arg                ; put the character into the ROM (as byte)
00000000                            
00000000                            lc =        lc+1                        ; go to the next character
00000000                            ct =        ct+1                        ; increment character count
00000000                                    endr
00000000                                shift
00000000                                endr
00000000                                endm
00000000                            
00000000                            ; translates ASCII character to proper hex value
00000000                            char        macro c
00000000                                if c=' '
00000000                                    dc.\0 0                        ; example 1: single letters
00000000                            
00000000                                elseif c='*'
00000000                                    dc.\0 $1A                        ; example 1: single letters
00000000                            
00000000                                elseif (c>='0')&(c<='9')
00000000                                    dc.\0 \c-'0'+$20                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                elseif (c>='A')&(c<='Z')
00000000                                    dc.\0 \c-$41+$1E                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                else
00000000                                    dc.\0 \c                    ; example 3: any other character
00000000                                endif
00000000                                endm	
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align:	macro
00000000                            	if (narg=1)
00000000                            	dcb.b \1-(*%\1),0
00000000                            	else
00000000                            	dcb.b \1-(*%\1),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),(vdp_control_port).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeVRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$4000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeCRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$C000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA fill VRAM with a value
00000000                            ; input: value, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            fillVRAM:	macro value,length,loc
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.w	#$8F01,(a5)
00000000                            		move.l	#$94000000+((length&$FF00)<<8)+$9300+(length&$FF),(a5)
00000000                            		move.w	#$9780,(a5)
00000000                            		move.l	#$40000080+((loc&$3FFF)<<16)+((loc&$C000)>>14),(a5)
00000000                            		move.w	#value,(vdp_data_port).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
00000000                            ; input: source, destination, width [cells], height [cells]
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            copyTilemap:	macro source,loc,width,height
00000000                            		lea	(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		jsr	TilemapToVRAM
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; stop the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            stopZ80:	macro
00000000                            		move.w	#$100,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; wait for Z80 to stop
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            waitZ80:	macro
00000000                            	@wait:	btst	#0,(z80_bus_request).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reset the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; start the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            startZ80:	macro
00000000                            		move.w	#0,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; disable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            disable_ints:	macro
00000000                            		move	#$2700,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; enable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            enable_ints:	macro
00000000                            		move	#$2300,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; long conditional jumps
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            jhi:		macro loc
00000000                            		bls.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcc:		macro loc
00000000                            		bcs.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jhs:		macro loc
00000000                            		jcc	loc
00000000                            		endm
00000000                            
00000000                            jls:		macro loc
00000000                            		bhi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcs:		macro loc
00000000                            		bcc.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlo:		macro loc
00000000                            		jcs	loc
00000000                            		endm
00000000                            
00000000                            jeq:		macro loc
00000000                            		bne.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jne:		macro loc
00000000                            		beq.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jgt:		macro loc
00000000                            		ble.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jge:		macro loc
00000000                            		blt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jle:		macro loc
00000000                            		bgt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlt:		macro loc
00000000                            		bge.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jpl:		macro loc
00000000                            		bmi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jmi:		macro loc
00000000                            		bpl.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; check if object moves out of range
00000000                            ; input: location to jump to if out of range, x-axis pos (obX(a0) by default)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            out_of_range:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0		; approx distance between object and screen
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; play a sound effect or music
00000000                            ; input: track, terminate routine, branch or jump, move operand size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            music:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd1).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound
00000000                            		      else
00000000                            			bra.w	PlaySound
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound).l
00000000                            		      else
00000000                            			jmp	(PlaySound).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            sfx:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd2).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound_Special
00000000                            		      else
00000000                            			bra.w	PlaySound_Special
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound_Special).l
00000000                            		      else
00000000                            			jmp	(PlaySound_Special).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; bankswitch between SRAM and ROM
00000000                            ; (remember to enable SRAM in the header first!)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            gotoSRAM:	macro
00000000                            		move.b  #1,($A130F1).l
00000000                            		endm
00000000                            
00000000                            gotoROM:	macro
00000000                            		move.b  #0,($A130F1).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; compare the size of an index with ZoneCount constant
00000000                            ; (should be used immediately after the index)
00000000                            ; input: index address, element size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            zonewarning:	macro loc,elementsize
00000000                            	@end:
00000000                            		if (@end-loc)-(ZoneCount*elementsize)<>0
00000000                            		inform 1,"Size of \loc ($%h) does not match ZoneCount ($\#ZoneCount).",(@end-loc)/elementsize
00000000                            		endc
00000000                            		endm
00000000                            		endm
00000000                                include   "Debugger.asm"
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Error handling and debugging modules
00000000                            ; 2016-2017, Vladikcomper
00000000                            ; 2020 mod - AURORA FIELDS
00000000                            ; ---------------------------------------------------------------
00000000                            ; Debugging macros definitions file
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ----------------------------
00000000                            ; Arguments formatting flags
00000000                            ; ----------------------------
00000000                            
00000000                            ; General arguments format flags
00000000 =00000080                  hex		equ		$80				; flag to display as hexadecimal number
00000000 =00000090                  dec		equ		$90				; flag to display as decimal number
00000000 =000000A0                  bin		equ		$A0				; flag to display as binary number
00000000 =000000B0                  sym		equ		$B0				; flag to display as symbol (treat as offset, decode into symbol +displacement, if present)
00000000 =000000C0                  symdisp		equ		$C0				; flag to display as symbol's displacement alone (DO NOT USE, unless complex formatting is required, see notes below)
00000000 =000000DF                  str		equ		$DF				; flag to display as string (treat as offset, insert string from that offset)
00000000 =000000D0                  asm		equ		$D0				; flag to display as code (treat as offset, decode from that offset)
00000000                            
00000000                            ; NOTES:
00000000                            ;	* By default, the "sym" flag displays both symbol and displacement (e.g.: "Map_Sonic+$2E")
00000000                            ;		In case, you need a different formatting for the displacement part (different text color and such),
00000000                            ;		use "sym|split", so the displacement won't be displayed until symdisp is met
00000000                            ;	* The "symdisp" can only be used after the "sym|split" instance, which decodes offset, otherwise, it'll
00000000                            ;		display a garbage offset.
00000000                            ;	* No other argument format flags (hex, dec, bin, str) are allowed between "sym|split" and "symdisp",
00000000                            ;		otherwise, the "symdisp" results are undefined.
00000000                            ;	* When using "str" flag, the argument should point to string offset that will be inserted.
00000000                            ;		Arguments format flags CAN NOT be used in the string (as no arguments are meant to be here),
00000000                            ;		only console control flags (see below).
00000000                            ;	* The "asm" flag will use "setpat" flag to switch text color, and will reset pattern to normal again.
00000000                            ;		you must reapply any pattern you used before yourself.
00000000                            ;	* The "asm" flag will overwrite $FF0000-$FF0080, so be careful when viewing RAM.
00000000                            
00000000                            
00000000                            ; Additional flags ...
00000000                            ; ... for number formatters (hex, dec, bin)
00000000 =00000008                  signed	equ		8				; treat number as signed (display + or - before the number depending on sign)
00000000                            
00000000                            ; ... for symbol formatter (sym)
00000000 =00000008                  split	equ		8				; DO NOT write displacement (if present), skip and wait for "symdisp" flag to write it later (optional)
00000000 =00000004                  forced	equ		4				; display "<unknown>" if symbol was not found, otherwise, plain offset is displayed by the displacement formatter
00000000                            
00000000                            ; ... for symbol displacement formatter (symdisp)
00000000 =00000008                  weak	equ		8				; DO NOT write plain offset if symbol is displayed as "<unknown>"
00000000                            
00000000                            ; Argument type flags:
00000000                            ; - DO NOT USE in formatted strings processed by macros, as these are included automatically
00000000                            ; - ONLY USE when writting down strings manually with DC.B
00000000 =00000000                  byte	equ		0
00000000 =00000001                  word	equ		1
00000000 =00000003                  long	equ		3
00000000                            
00000000                            ; -----------------------
00000000                            ; Console control flags
00000000                            ; -----------------------
00000000                            
00000000                            ; Plain control flags: no arguments following
00000000 =000000E0                  endl	equ		$E0				; "End of line": flag for line break
00000000 =000000E6                  cr	equ		$E6				; "Carriage return": jump to the beginning of the line
00000000 =000000E8                  pal0	equ		$E8				; use palette line #0
00000000 =000000EA                  pal1	equ		$EA				; use palette line #1
00000000 =000000EC                  pal2	equ		$EC				; use palette line #2
00000000 =000000EE                  pal3	equ		$EE				; use palette line #3
00000000                            
00000000                            ; Parametrized control flags: followed by 1-byte argument
00000000 =000000F0                  setw	equ		$F0				; set line width: number of characters before automatic line break
00000000 =000000F4                  setoff	equ		$F4				; set tile offset: lower byte of base pattern, which points to tile index of ASCII character 00
00000000 =000000F8                  setpat	equ		$F8				; set tile pattern: high byte of base pattern, which determines palette flags and $100-tile section id
00000000 =000000FA                  setx	equ		$FA				; set x-position
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            RaiseError &
00000000                            
00000000                            	pea	*(pc)
00000000                            	move.w	sr, -(sp)
00000000                            	__FSTRING_GenerateArgumentsCode \string
00000000                            	jsr		ErrorHandler
00000000                            	__FSTRING_GenerateDecodedString \string
00000000                            	if strlen("\console_program")						; if console program offset is specified ...
00000000                            		dc.b	\opts+_eh_enter_console|(((*&1)^1)*_eh_align_offset)	; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            		even								; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            		jmp	\console_program					; ... an aligned "jmp" instruction that calls console program itself
00000000                            	else
00000000                            		dc.b	\opts+0							; otherwise, just specify \opts for error handler, +0 will generate dc.b 0 ...
00000000                            		even								; ... in case \opts argument is empty or skipped
00000000                            	endc
00000000                            	even
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            Console &
00000000                            
00000000                            	if strcmp("\0","write")|strcmp("\0","writeline")
00000000                            		move.w	sr, -(sp)
00000000                            		__FSTRING_GenerateArgumentsCode \1
00000000                            		movem.l	a0-a2/d7, -(sp)
00000000                            		if (__sp>0)
00000000                            			lea	4*4(sp), a2
00000000                            		endc
00000000                            		lea	@str\@(pc), a1
00000000                            		jsr	ErrorHandler.__global__console_\0\_formatted
00000000                            		movem.l	(sp)+, a0-a2/d7
00000000                            		if (__sp>8)
00000000                            			lea	__sp(sp), sp
00000000                            		elseif (__sp>0)
00000000                            			addq.w	#__sp, sp
00000000                            		endc
00000000                            		move.w	(sp)+, sr
00000000                            		bra.w	@instr_end\@
00000000                            	@str\@:
00000000                            		__FSTRING_GenerateDecodedString \1
00000000                            		even
00000000                            	@instr_end\@:
00000000                            
00000000                            	elseif strcmp("\0","run")
00000000                            		jsr	ErrorHandler.__extern__console_only
00000000                            		jsr	\1
00000000                            		bra.s	*
00000000                            
00000000                            	elseif strcmp("\0","setxy")
00000000                            		move.w	sr, -(sp)
00000000                            		movem.l	d0-d1, -(sp)
00000000                            		move.w	\2, -(sp)
00000000                            		move.w	\1, -(sp)
00000000                            		jsr	ErrorHandler.__global__console_setposasxy_stack
00000000                            		addq.w	#4, sp
00000000                            		movem.l	(sp)+, d0-d1
00000000                            		move.w	(sp)+, sr
00000000                            
00000000                            	elseif strcmp("\0","breakline")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr	ErrorHandler.__global__console_startnewline
00000000                            		move.w	(sp)+, sr
00000000                            
00000000                            	else
00000000                            		inform	2,"""\0"" isn't a member of ""Console"""
00000000                            
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __ErrorMessage &
00000000                            		__FSTRING_GenerateArgumentsCode \string
00000000                            		jsr		ErrorHandler
00000000                            		__FSTRING_GenerateDecodedString \string
00000000                            		dc.b	\opts+0
00000000                            		even
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateArgumentsCode &
00000000                            
00000000                            	__pos:	set 	instr(\string,'%<')				; token position
00000000                            	__stack:set	0						; size of actual stack
00000000                            	__sp:	set	0						; stack displacement
00000000                            
00000000                            	; Parse string itself
00000000                            	while (__pos)
00000000                            
00000000                            		; Retrive expression in brackets following % char
00000000                                	__endpos:	set	instr(__pos+1,\string,'>')
00000000                                	__midpos:	set	instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__substr:	substr	__pos+1+1,__endpos-1,\string		; .type ea param
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string		; .type
00000000                            
00000000                            		; Expression is an effective address (e.g. %(.w d0 hex) )
00000000                            		if "\__type">>8="."
00000000                            			__operand:	substr	__pos+1+1,__midpos-1,\string	; .type ea
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string	; param
00000000                            
00000000                            			if "\__type"=".b"
00000000                            				pushp	"move\__operand\,1(sp)"
00000000                            				pushp	"subq.w	#2, sp"
00000000                            				__stack: = __stack+2
00000000                            				__sp: = __sp+2
00000000                            
00000000                            			elseif "\__type"=".w"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+2
00000000                            
00000000                            			elseif "\__type"=".l"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+4
00000000                            
00000000                            			else
00000000                            				fatal 'Unrecognized type in string operand: %<\__substr>'
00000000                            			endc
00000000                            		endc
00000000                            
00000000                            		__pos:	set	instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            
00000000                            	; Generate stack code
00000000                            	rept __stack
00000000                            		popp	__command
00000000                            		\__command
00000000                            	endr
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateDecodedString &
00000000                            
00000000                            	__lpos:	set	1						; start position
00000000                            	__pos:	set 	instr(\string,'%<')				; token position
00000000                            
00000000                            	while (__pos)
00000000                            
00000000                            		; Write part of string before % token
00000000                            		__substr:	substr	__lpos,__pos-1,\string
00000000                            		dc.b	"\__substr"
00000000                            
00000000                            		; Retrive expression in brakets following % char
00000000                                	__endpos:	set		instr(__pos+1,\string,'>')
00000000                                	__midpos:	set		instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string		; .type
00000000                            
00000000                            		; Expression is an effective address (e.g. %<.w d0 hex> )
00000000                            		if "\__type">>8="."
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string	; param
00000000                            			if strlen("\__param")<1
00000000                            				__param: substr ,,"hex"			; if param is ommited, set it to "hex"
00000000                            			endc
00000000                            			if "\__type"=".b"
00000000                            				dc.b	\__param
00000000                            			elseif "\__type"=".w"
00000000                            				dc.b	\__param|1
00000000                            			else
00000000                            				dc.b	\__param|3
00000000                            			endc
00000000                            
00000000                            		; Expression is an inline constant (e.g. %<endl> )
00000000                            		else
00000000                            			__substr:	substr	__pos+1+1,__endpos-1,\string
00000000                            			dc.b	\__substr
00000000                            		endc
00000000                            
00000000                            		__lpos:	set	__endpos+1
00000000                            		__pos:	set	instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            
00000000                            	; Write part of string before the end
00000000                            	__substr:	substr	__lpos,,\string
00000000                            	dc.b	"\__substr"
00000000                            	dc.b	0
00000000                            	endm
00000000                            	endm
00000000                            	
00000000 =00000000                  EnableSRAM:	equ 0	; change to 1 to enable SRAM
00000000 =00000001                  BackupSRAM:	equ 1
00000000 =00000003                  AddressSRAM:	equ 3	; 0 = odd+even; 2 = even only; 3 = odd only
00000000                            
00000000                            ; Change to 0 to build the original version of the game, dubbed REV00
00000000                            ; Change to 1 to build the later vesion, dubbed REV01, which includes various bugfixes and enhancements
00000000                            ; Change to 2 to build the version from Sonic Mega Collection, dubbed REVXB, which fixes the infamous "spike bug"
00000000 =00000002                  Revision:	equ 2
00000000                            
00000000 =00000006                  ZoneCount:	equ 6	; discrete zones are: GHZ, MZ, SYZ, LZ, SLZ, and SBZ
00000000                            
00000000 =00000000                  OptimiseSound:	equ 0	; change to 1 to optimise sound queuing
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00                  Vectors:	dc.l v_systemstack&$FFFFFF	; Initial stack pointer value
00000004 0000 0000                  		dc.l EntryPoint			; Start of program
00000008 0000 0000                  		dc.l BusError			; Bus error
0000000C 0000 0000                  		dc.l AddressError		; Address error (4)
00000010 0000 0000                  		dc.l IllegalInstr		; Illegal instruction
00000014 0000 0000                  		dc.l ZeroDivide			; Division by zero
00000018 0000 0000                  		dc.l ChkInstr			; CHK exception
0000001C 0000 0000                  		dc.l TrapvInstr			; TRAPV exception (8)
00000020 0000 0000                  		dc.l PrivilegeViol		; Privilege violation
00000024 0000 0000                  		dc.l Trace				; TRACE exception
00000028 0000 0000                  		dc.l Line1010Emu		; Line-A emulator
0000002C 0000 0000                  		dc.l Line1111Emu		; Line-F emulator (12)
00000030 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000034 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000038 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000003C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (16)
00000040 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000044 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000048 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000004C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (20)
00000050 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000054 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000058 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000005C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (24)
00000060 0000 0000                  		dc.l ErrorExcept		; Spurious exception
00000064 0000 0000                  		dc.l ErrorTrap			; IRQ level 1
00000068 0000 0000                  		dc.l ErrorTrap			; IRQ level 2
0000006C 0000 0000                  		dc.l ErrorTrap			; IRQ level 3 (28)
00000070 0000 0000                  		dc.l HBlank				; IRQ level 4 (horizontal retrace interrupt)
00000074 0000 0000                  		dc.l ErrorTrap			; IRQ level 5
00000078 0000 0000                  		dc.l VBlank				; IRQ level 6 (vertical retrace interrupt)
0000007C 0000 0000                  		dc.l ErrorTrap			; IRQ level 7 (32)
00000080 0000 0000                  		dc.l ErrorTrap			; TRAP #00 exception
00000084 0000 0000                  		dc.l ErrorTrap			; TRAP #01 exception
00000088 0000 0000                  		dc.l ErrorTrap			; TRAP #02 exception
0000008C 0000 0000                  		dc.l ErrorTrap			; TRAP #03 exception (36)
00000090 0000 0000                  		dc.l ErrorTrap			; TRAP #04 exception
00000094 0000 0000                  		dc.l ErrorTrap			; TRAP #05 exception
00000098 0000 0000                  		dc.l ErrorTrap			; TRAP #06 exception
0000009C 0000 0000                  		dc.l ErrorTrap			; TRAP #07 exception (40)
000000A0 0000 0000                  		dc.l ErrorTrap			; TRAP #08 exception
000000A4 0000 0000                  		dc.l ErrorTrap			; TRAP #09 exception
000000A8 0000 0000                  		dc.l ErrorTrap			; TRAP #10 exception
000000AC 0000 0000                  		dc.l ErrorTrap			; TRAP #11 exception (44)
000000B0 0000 0000                  		dc.l ErrorTrap			; TRAP #12 exception
000000B4 0000 0000                  		dc.l ErrorTrap			; TRAP #13 exception
000000B8 0000 0000                  		dc.l ErrorTrap			; TRAP #14 exception
000000BC 0000 0000                  		dc.l ErrorTrap			; TRAP #15 exception (48)
000000C0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000CC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000DC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000E0                            loc_E0:
000000E0                            		; Relocated code from Spik_Hurt. REVXB was a nasty hex-edit.
000000E0 2628 000C                  		move.l	obY(a0),d3
000000E4 3028 0012                  		move.w	obVelY(a0),d0
000000E8 48C0                       		ext.l	d0
000000EA E180                       		asl.l	#8,d0
000000EC 4EF9 0000 0000             		jmp	(loc_D5A2).l
000000F2                            
000000F2 0000                       		dc.w ErrorTrap
000000F4 0000 0000                  		dc.l ErrorTrap
000000F8 0000 0000                  		dc.l ErrorTrap
000000FC 0000 0000                  		dc.l ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console1:	dc.b "SEGA MEGA DRIVE " ; Hardware system ID (Console name)
00000110 2843 2953 4547 4120 3139+  Date:		dc.b "(C)SEGA 1991.APR" ; Copyright holder and release date (generally year)
00000120 534F 4E49 4320 5355 4E56+  Title_Local:	dc.b "SONIC SUNVENTURE                                " ; Domestic name
00000150 534F 4E49 4320 5355 4E56+  Title_Int:	dc.b "SONIC SUNVENTURE                                " ; International name
00000180 474D 2030 3030 3034 3034+  			dc.b "GM 00004049-01" ; Serial/version number (Rev non-0)
0000018E 0000                       Checksum: dc.w $0
00000190 4A20 2020 2020 2020 2020+  		dc.b "J               " ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; Start address of ROM
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; End address of ROM
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; Start address of RAM
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; End address of RAM
000001B0 2020 2020                  		dc.l $20202020
000001B4 2020 2020                  		dc.l $20202020		; SRAM start ($200001)
000001B8 2020 2020                  		dc.l $20202020		; SRAM end ($20xxxx)
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b "                                                    " ; Notes (unused, anything can be put in this space, but it has to be 52 bytes.)
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b "JUE             " ; Region (Country code)
00000200                            EndOfHeader:
00000200                            
00000200                            ; ===========================================================================
00000200                            ; Crash/Freeze the 68000. Unlike Sonic 2, Sonic 1 uses the 68000 for playing music, so it stops too
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	(z80_port_1_control).l ; test port A & B control registers
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	(z80_expansion_control).l ; test port C control register
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	SkipSetup ; Skip the VDP and Z80 setup code if port A, B or C is ok...?
00000216 4BFA 0000                  		lea	SetupValues(pc),a5	; Load setup values array address.
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version (from $A10001)
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity	; If the console has no TMSS, skip the security stuff.
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1) ; move "SEGA" to TMSS register ($A14000)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0	; clear write-pending flag in VDP to prevent issues if the 68k has been reset in the middle of writing a command long word to the VDP.
00000236 7000                       		moveq	#0,d0	; clear d0
00000238 2C40                       		movea.l	d0,a6	; clear a6
0000023A 4E66                       		move.l	a6,usp	; set usp to $0
0000023C                            
0000023C 7217                       		moveq	#$17,d1
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248                            		
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the VRAM
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254                            
00000254 7425                       		moveq	#$25,d2
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C                            		
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)	; clear 4 bytes of RAM
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; repeat until the entire RAM is clear
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment mode
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C                            
0000026C 761F                       		moveq	#$1F,d3	; set repeat times
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)	; clear 2 palettes
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; repeat until the entire CRAM is clear
00000274 289D                       		move.l	(a5)+,(a4)	; set VDP to VSRAM write
00000276                            
00000276 7813                       		moveq	#$13,d4
00000278                            ClrVSRAMLoop:
00000278 2680                       		move.l	d0,(a3)	; clear 4 bytes of VSRAM.
0000027A 51CC FFFC                  		dbf	d4,ClrVSRAMLoop	; repeat until the entire VSRAM is clear
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop	; repeat for other channels
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear all registers
0000028E 46FC 2700                  		disable_ints
00000292                            
00000292                            SkipSetup:
00000292 6000                       		bra.s	GameProgram	; begin game
00000294                            
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; VDP register start number
00000296 3FFF                       		dc.w $3FFF		; size of RAM/4
00000298 0100                       		dc.w $100		; VDP register diff
0000029A                            
0000029A 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l z80_bus_request	; Z80 bus request
000002A2 00A1 1200                  		dc.l z80_reset		; Z80 reset
000002A6 00C0 0000                  		dc.l vdp_data_port	; VDP data
000002AA 00C0 0004                  		dc.l vdp_control_port	; VDP control
000002AE                            
000002AE 04                         		dc.b 4			; VDP $80 - 8-colour mode
000002AF 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
000002B0 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
000002B1 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
000002B2 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
000002B3 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
000002B4 00                         		dc.b 0			; VDP $86 - unused
000002B5 00                         		dc.b 0			; VDP $87 - background colour
000002B6 00                         		dc.b 0			; VDP $88 - unused
000002B7 00                         		dc.b 0			; VDP $89 - unused
000002B8 FF                         		dc.b 255		; VDP $8A - HBlank register
000002B9 00                         		dc.b 0			; VDP $8B - full screen scroll
000002BA 81                         		dc.b $81		; VDP $8C - 40 cell display
000002BB 37                         		dc.b ($DC00>>10)	; VDP $8D - hscroll table address
000002BC 00                         		dc.b 0			; VDP $8E - unused
000002BD 01                         		dc.b 1			; VDP $8F - VDP increment
000002BE 01                         		dc.b 1			; VDP $90 - 64 cell hscroll size
000002BF 00                         		dc.b 0			; VDP $91 - window h position
000002C0 00                         		dc.b 0			; VDP $92 - window v position
000002C1 FFFF                       		dc.w $FFFF		; VDP $93/94 - DMA length
000002C3 0000                       		dc.w 0			; VDP $95/96 - DMA source
000002C5 80                         		dc.b $80		; VDP $97 - DMA fill VRAM
000002C6 4000 0080                  		dc.l $40000080		; VRAM address 0
000002CA                            
000002CA AF                         		dc.b $AF		; xor	a
000002CB 01D9 1F                    		dc.b $01, $D9, $1F	; ld	bc,1fd9h
000002CE 1127 00                    		dc.b $11, $27, $00	; ld	de,0027h
000002D1 2126 00                    		dc.b $21, $26, $00	; ld	hl,0026h
000002D4 F9                         		dc.b $F9		; ld	sp,hl
000002D5 77                         		dc.b $77		; ld	(hl),a
000002D6 EDB0                       		dc.b $ED, $B0		; ldir
000002D8 DDE1                       		dc.b $DD, $E1		; pop	ix
000002DA FDE1                       		dc.b $FD, $E1		; pop	iy
000002DC ED47                       		dc.b $ED, $47		; ld	i,a
000002DE ED4F                       		dc.b $ED, $4F		; ld	r,a
000002E0 D1                         		dc.b $D1		; pop	de
000002E1 E1                         		dc.b $E1		; pop	hl
000002E2 F1                         		dc.b $F1		; pop	af
000002E3 08                         		dc.b $08		; ex	af,af'
000002E4 D9                         		dc.b $D9		; exx
000002E5 C1                         		dc.b $C1		; pop	bc
000002E6 D1                         		dc.b $D1		; pop	de
000002E7 E1                         		dc.b $E1		; pop	hl
000002E8 F1                         		dc.b $F1		; pop	af
000002E9 F9                         		dc.b $F9		; ld	sp,hl
000002EA F3                         		dc.b $F3		; di
000002EB ED56                       		dc.b $ED, $56		; im1
000002ED 36E9                       		dc.b $36, $E9		; ld	(hl),e9h
000002EF E9                         		dc.b $E9		; jp	(hl)
000002F0                            
000002F0 8104                       		dc.w $8104		; VDP display mode
000002F2 8F02                       		dc.w $8F02		; VDP increment
000002F4 C000 0000                  		dc.l $C0000000		; CRAM write mode
000002F8 4000 0010                  		dc.l $40000010		; VSRAM address 0
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	(vdp_control_port).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',(v_init).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#EndOfHeader,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            	@loop:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bhs.s	@loop
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare checksum in header to ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E                            
0000033E                            	CheckSumOk:
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            	@clearRAM:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($FE00-$FFFF)
0000034E                            
0000034E 1039 00A1 0001             		move.b	(z80_version).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,(v_megadrive).w ; get region setting
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',(v_init).w ; set flag so checksum won't run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            	@clearRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($0000-$FDFF)
00000376 4EB9 0000 0000                     jsr	(InitDMAQueue).l	
0000037C 6100 0000                  		bsr.w	VDPSetupGame
00000380 6100 0000                  		bsr.w	SoundDriverLoad
00000384 6100 0000                  		bsr.w	JoypadInit
00000388 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set Game Mode to Sega Screen
0000038E                            
0000038E                            MainGameLoop:
0000038E 4EB9 0000 0000             		jsr		ReadJoypads
00000394 1038 F600                  		move.b	(v_gamemode).w,d0 ; load Game Mode
00000398 0240 007C                  		andi.w	#$7C,d0	; limit Game Mode value to $1C max (change to a maximum of 7C to add more game modes)
0000039C 207B 0000                  		movea.l	GameModeArray(pc,d0.w),a0 ; jump to apt location in ROM
000003A0 4E90                       		jsr		(a0)
000003A2 60EA                       		bra.s	MainGameLoop	; loop indefinitely
000003A4                            ; ===========================================================================
000003A4                            ; ---------------------------------------------------------------------------
000003A4                            ; Main game mode array
000003A4                            ; ---------------------------------------------------------------------------
000003A4                            
000003A4                            GameModeArray:
000003A4 0000 0000                  ptr_GM_Sega:		dc.l	GM_Sega		; Sega Screen ($00)
000003A8 0000 0000                  ptr_GM_Title:		dc.l	GM_Title	; Title	Screen ($04)
000003AC 0000 0000                  ptr_GM_Demo:		dc.l	GM_Level	; Demo Mode ($08)
000003B0 0000 0000                  ptr_GM_Level:		dc.l	GM_Level	; Normal Level ($0C)
000003B4 0000 0000                  ptr_GM_Special:		dc.l	GM_Special	; Special Stage	($10)
000003B8 0000 0000                  ptr_GM_Cont:		dc.l	GM_Continue	; Continue Screen ($14)
000003BC 0000 0000                  ptr_GM_Ending:		dc.l	GM_Ending	; End of game sequence ($18)
000003C0 0000 0000                  ptr_GM_Credits:		dc.l	GM_Credits	; Credits ($1C)
000003C4 0000 0000                  ptr_GM_MenuScreen:	dc.l	MenuScreen	; Credits ($20)
000003C8 4E75                       		rts	
000003CA                            ; ===========================================================================
000003CA                            
000003CA                            CheckSumError:
000003CA 6100 0000                  		bsr.w	VDPSetupGame
000003CE 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
000003D8 7E3F                       		moveq	#$3F,d7
000003DA                            
000003DA                            	@fillred:
000003DA 33FC 000E 00C0 0000        		move.w	#cRed,(vdp_data_port).l ; fill palette with red
000003E2 51CF FFF6                  		dbf	d7,@fillred	; repeat $3F more times
000003E6                            
000003E6                            	@endlessloop:
000003E6 60FE                       		bra.s	@endlessloop
000003E8                            ; ===========================================================================
000003E8                            
000003E8                            
000003E8                            ; ===========================================================================
000003E8                            
000003E8                            loc_43A:
000003E8 46FC 2700                  		disable_ints
000003EC 544F                       		addq.w	#2,sp
000003EE 21DF FC40                  		move.l	(sp)+,(v_spbuffer).w
000003F2 544F                       		addq.w	#2,sp
000003F4 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
000003FA 6100 0000                  		bsr.w	ShowErrorMessage
000003FE 202F 0002                  		move.l	2(sp),d0
00000402 6100 0000                  		bsr.w	ShowErrorValue
00000406 2038 FC40                  		move.l	(v_spbuffer).w,d0
0000040A 6100 0000                  		bsr.w	ShowErrorValue
0000040E 6000                       		bra.s	loc_478
00000410                            ; ===========================================================================
00000410                            
00000410                            loc_462:
00000410 46FC 2700                  		disable_ints
00000414 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
0000041A 6100 0000                  		bsr.w	ShowErrorMessage
0000041E 202F 0002                  		move.l	2(sp),d0
00000422 6100 0000                  		bsr.w	ShowErrorValue
00000426                            
00000426                            loc_478:
00000426 6100 0000                  		bsr.w	ErrorWaitForC
0000042A 4CF8 FFFF FC00             		movem.l	(v_regbuffer).w,d0-a7
00000430 46FC 2300                  		enable_ints
00000434 4E73                       		rte	
00000436                            
00000436                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000436                            
00000436                            
00000436                            ShowErrorMessage:
00000436 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00000446 41F9 0000 0000             		lea	(Art_Text).l,a0
0000044C 323C 027F                  		move.w	#$27F,d1
00000450                            	@loadgfx:
00000450 3C98                       		move.w	(a0)+,(a6)
00000452 51C9 FFFC                  		dbf	d1,@loadgfx
00000456                            
00000456 7000                       		moveq	#0,d0		; clear	d0
00000458 1038 FC44                  		move.b	(v_errortype).w,d0 ; load error code
0000045C 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000460 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
0000046E 7212                       		moveq	#$12,d1		; number of characters (minus 1)
00000470                            
00000470                            	@showchars:
00000470 7000                       		moveq	#0,d0
00000472 1018                       		move.b	(a0)+,d0
00000474 0640 0790                  		addi.w	#$790,d0
00000478 3C80                       		move.w	d0,(a6)
0000047A 51C9 FFF4                  		dbf	d1,@showchars	; repeat for number of characters
0000047E 4E75                       		rts	
00000480                            ; End of function ShowErrorMessage
00000480                            
00000480                            ; ===========================================================================
00000480 0000 0000                  ErrorText:	dc.w @exception-ErrorText, @bus-ErrorText
00000484 0000 0000                  		dc.w @address-ErrorText, @illinstruct-ErrorText
00000488 0000 0000                  		dc.w @zerodivide-ErrorText, @chkinstruct-ErrorText
0000048C 0000 0000                  		dc.w @trapv-ErrorText, @privilege-ErrorText
00000490 0000 0000                  		dc.w @trace-ErrorText, @line1010-ErrorText
00000494 0000                       		dc.w @line1111-ErrorText
00000496 4552 524F 5220 4558 4345+  @exception:	dc.b "ERROR EXCEPTION    "
000004A9 4255 5320 4552 524F 5220+  @bus:		dc.b "BUS ERROR          "
000004BC 4144 4452 4553 5320 4552+  @address:	dc.b "ADDRESS ERROR      "
000004CF 494C 4C45 4741 4C20 494E+  @illinstruct:	dc.b "ILLEGAL INSTRUCTION"
000004E2 4045 524F 2044 4956 4944+  @zerodivide:	dc.b "@ERO DIVIDE        "
000004F5 4348 4B20 494E 5354 5255+  @chkinstruct:	dc.b "CHK INSTRUCTION    "
00000508 5452 4150 5620 494E 5354+  @trapv:		dc.b "TRAPV INSTRUCTION  "
0000051B 5052 4956 494C 4547 4520+  @privilege:	dc.b "PRIVILEGE VIOLATION"
0000052E 5452 4143 4520 2020 2020+  @trace:		dc.b "TRACE              "
00000541 4C49 4E45 2031 3031 3020+  @line1010:	dc.b "LINE 1010 EMULATOR "
00000554 4C49 4E45 2031 3131 3120+  @line1111:	dc.b "LINE 1111 EMULATOR "
00000568 00                         		even
00000568                            
00000568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000568                            
00000568                            
00000568                            ShowErrorValue:
00000568 3CBC 07CA                  		move.w	#$7CA,(a6)	; display "$" symbol
0000056C 7407                       		moveq	#7,d2
0000056E                            
0000056E                            	@loop:
0000056E E998                       		rol.l	#4,d0
00000570 6100                       		bsr.s	@shownumber	; display 8 numbers
00000572 51CA FFFA                  		dbf	d2,@loop
00000576 4E75                       		rts	
00000578                            ; End of function ShowErrorValue
00000578                            
00000578                            
00000578                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000578                            
00000578                            
00000578                            @shownumber:
00000578 3200                       		move.w	d0,d1
0000057A 0241 000F                  		andi.w	#$F,d1
0000057E 0C41 000A                  		cmpi.w	#$A,d1
00000582 6500                       		blo.s	@chars0to9
00000584 5E41                       		addq.w	#7,d1		; add 7 for characters A-F
00000586                            
00000586                            	@chars0to9:
00000586 0641 07C0                  		addi.w	#$7C0,d1
0000058A 3C81                       		move.w	d1,(a6)
0000058C 4E75                       		rts	
0000058E                            ; End of function sub_5CA
0000058E                            
0000058E                            
0000058E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000058E                            
0000058E                            
0000058E                            ErrorWaitForC:
0000058E 6100 0000                  		bsr.w	ReadJoypads
00000592 0C38 0020 F605             		cmpi.b	#btnC,(v_jpadpress1).w ; is button C pressed?
00000598 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000059C 4E75                       		rts	
0000059E                            ; End of function ErrorWaitForC
0000059E                            
0000059E                            ; ===========================================================================
0000059E                            
0000059E                            Art_Text:	incbin	"artunc\menutext.bin" ; text used in level select and debug mode
00000ABE                            		even
00000ABE                            
00000ABE                            ; ---------------------------------------------------------------------------
00000ABE                            ; Vertical interrupt
00000ABE                            ; ---------------------------------------------------------------------------
00000ABE                            
00000ABE                            VBlank:
00000ABE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AC2 4A38 F62A                  		tst.b	(v_vbla_routine).w
00000AC6 6700                       		beq.s	VBla_00
00000AC8 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000ACE 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00000AD8 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l ; send screen y-axis pos. to VSRAM
00000AE0 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000AE6 6700                       		beq.s	@notPAL		; if not, branch
00000AE8                            
00000AE8 303C 0700                  		move.w	#$700,d0
00000AEC                            	@waitPAL:
00000AEC 51C8 FFFE                  		dbf	d0,@waitPAL ; wait here in a loop doing nothing for a while...
00000AF0                            
00000AF0                            	@notPAL:
00000AF0 1038 F62A                  		move.b	(v_vbla_routine).w,d0
00000AF4 11FC 0000 F62A             		move.b	#0,(v_vbla_routine).w
00000AFA 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w
00000B00 0240 003E                  		andi.w	#$3E,d0
00000B04 303B 0000                  		move.w	VBla_Index(pc,d0.w),d0
00000B08 4EBB 0000                  		jsr	VBla_Index(pc,d0.w)
00000B0C                            
00000B0C                            VBla_Music:
00000B0C 4EB9 0000 0000             		jsr	(UpdateMusic).l
00000B12                            
00000B12                            VBla_Exit:
00000B12 52B8 FE0C                  		addq.l	#1,(v_vbla_count).w
00000B16 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B1A 4E73                       		rte	
00000B1C                            ; ===========================================================================
00000B1C 0000 0000                  VBla_Index:	dc.w VBla_00-VBla_Index, VBla_02-VBla_Index
00000B20 0000 0000                  		dc.w VBla_04-VBla_Index, VBla_06-VBla_Index
00000B24 0000 0000                  		dc.w VBla_08-VBla_Index, VBla_0A-VBla_Index
00000B28 0000 0000                  		dc.w VBla_0C-VBla_Index, VBla_0E-VBla_Index
00000B2C 0000 0000                  		dc.w VBla_10-VBla_Index, VBla_12-VBla_Index
00000B30 0000 0000                  		dc.w VBla_14-VBla_Index, VBla_16-VBla_Index
00000B34 0000                       		dc.w VBla_0C-VBla_Index
00000B36                            ; ===========================================================================
00000B36                            
00000B36                            VBla_00:
00000B36 0C38 0000 F600             		cmpi.b	#$80+id_Level,(v_gamemode).w
00000B3C 6700                       		beq.s	@islevel
00000B3E 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w ; is game on a level?
00000B44 6600 FFC6                  		bne.w	VBla_Music	; if not, branch
00000B48                            
00000B48                            	@islevel:
00000B48 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ ?
00000B4E 6600 FFBC                  		bne.w	VBla_Music	; if not, branch
00000B52                            
00000B52 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000B58 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000B5E 6700                       		beq.s	@notPAL		; if not, branch
00000B60                            
00000B60 303C 0700                  		move.w	#$700,d0
00000B64                            	@waitPAL:
00000B64 51C8 FFFE                  		dbf	d0,@waitPAL
00000B68                            
00000B68                            	@notPAL:
00000B68 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w ; set HBlank flag
00000B6E 33FC 0100 00A1 1100        		stopZ80
00000B76 0839 0000 00A1 1100 66F6   		waitZ80
00000B80 4A38 F64E                  		tst.b	(f_wtr_state).w	; is water above top of screen?
00000B84 6600                       		bne.s	@waterabove 	; if yes, branch
00000B86                            
00000B86 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000BAA 6000                       		bra.s	@waterbelow
00000BAC                            
00000BAC                            @waterabove:
00000BAC 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000BD0                            
00000BD0                            	@waterbelow:
00000BD0 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000BD4 33FC 0000 00A1 1100        		startZ80
00000BDC 6000 FF2E                  		bra.w	VBla_Music
00000BE0                            ; ===========================================================================
00000BE0                            
00000BE0                            VBla_02:
00000BE0 6100 0000                  		bsr.w	sub_106E
00000BE4                            
00000BE4                            VBla_14:
00000BE4 4A78 F614                  		tst.w	(v_demolength).w
00000BE8 6700 0000                  		beq.w	@end
00000BEC 5378 F614                  		subq.w	#1,(v_demolength).w
00000BF0                            
00000BF0                            	@end:
00000BF0 4E75                       		rts	
00000BF2                            ; ===========================================================================
00000BF2                            
00000BF2                            VBla_04:
00000BF2 6100 0000                  		bsr.w	sub_106E
00000BF6 6100 0000                  		bsr.w	LoadTilesAsYouMove_BGOnly
00000BFA 4EB9 0000 0000             		jsr 	ProcessDMAQueue		
00000C00 6100 0000                  		bsr.w	sub_1642
00000C04 4A78 F614                  		tst.w	(v_demolength).w
00000C08 6700 0000                  		beq.w	@end
00000C0C 5378 F614                  		subq.w	#1,(v_demolength).w
00000C10                            
00000C10                            	@end:
00000C10 4E75                       		rts	
00000C12                            ; ===========================================================================
00000C12                            
00000C12                            VBla_06:
00000C12 6100 0000                  		bsr.w	sub_106E
00000C16 4E75                       		rts	
00000C18                            ; ===========================================================================
00000C18                            
00000C18                            VBla_10:
00000C18 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game on special stage?
00000C1E 6700 0000                  		beq.w	VBla_0A		; if yes, branch
00000C22                            
00000C22                            VBla_08:
00000C22 33FC 0100 00A1 1100        		stopZ80
00000C2A 0839 0000 00A1 1100 66F6   		waitZ80
00000C34 6100 0000                  		bsr.w	ReadJoypads
00000C38 4A38 F64E                  		tst.b	(f_wtr_state).w
00000C3C 6600                       		bne.s	@waterabove
00000C3E                            
00000C3E 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000C62 6000                       		bra.s	@waterbelow
00000C64                            
00000C64                            @waterabove:
00000C64 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000C88                            
00000C88                            	@waterbelow:
00000C88 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000C8C                            
00000C8C 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000CB0 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000CD4 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000CDA                            
00000CDA                            	@nochg:
00000CDA 33FC 0000 00A1 1100        		startZ80
00000CE2 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000CE8 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000CEE 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000CF4 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000CFA 0C38 0060 F625             		cmpi.b	#96,(v_hbla_line).w
00000D00 6400                       		bhs.s	Demo_Time
00000D02 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D08 588F                       		addq.l	#4,sp
00000D0A 6000 FE06                  		bra.w	VBla_Exit
00000D0E                            
00000D0E                            ; ---------------------------------------------------------------------------
00000D0E                            ; Subroutine to	run a demo for an amount of time
00000D0E                            ; ---------------------------------------------------------------------------
00000D0E                            
00000D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D0E                            
00000D0E                            
00000D0E                            Demo_Time:
00000D0E 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D12 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000D18 4EB9 0000 0000             		jsr	(HUD_Update).l
00000D1E 6100 0000                  		bsr.w	ProcessDPLC2
00000D22 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00000D26 6700 0000                  		beq.w	@end		; if not, branch
00000D2A 5378 F614                  		subq.w	#1,(v_demolength).w ; subtract 1 from time left
00000D2E                            
00000D2E                            	@end:
00000D2E 4E75                       		rts	
00000D30                            ; End of function Demo_Time
00000D30                            
00000D30                            ; ===========================================================================
00000D30                            
00000D30                            VBla_0A:
00000D30 33FC 0100 00A1 1100        		stopZ80
00000D38 0839 0000 00A1 1100 66F6   		waitZ80
00000D42 6100 0000                  		bsr.w	ReadJoypads
00000D46 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000D6A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000D8E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000DB2 33FC 0000 00A1 1100        		startZ80
00000DBA 6100 0000                  		bsr.w	PalCycle_SS
00000DBE 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000DC4                            
00000DC4                            	@nochg:
00000DC4 4A78 F614                  		tst.w	(v_demolength).w	; is there time left on the demo?
00000DC8 6700 0000                  		beq.w	@end	; if not, return
00000DCC 5378 F614                  		subq.w	#1,(v_demolength).w	; subtract 1 from time left in demo
00000DD0                            
00000DD0                            	@end:
00000DD0 4E75                       		rts	
00000DD2                            ; ===========================================================================
00000DD2                            
00000DD2                            VBla_0C:
00000DD2 33FC 0100 00A1 1100        		stopZ80
00000DDA 0839 0000 00A1 1100 66F6   		waitZ80
00000DE4 6100 0000                  		bsr.w	ReadJoypads
00000DE8 4A38 F64E                  		tst.b	(f_wtr_state).w
00000DEC 6600                       		bne.s	@waterabove
00000DEE                            
00000DEE 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000E12 6000                       		bra.s	@waterbelow
00000E14                            
00000E14                            @waterabove:
00000E14 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000E38                            
00000E38                            	@waterbelow:
00000E38 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000E3C 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000E60 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000E84 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E8A                            
00000E8A                            	@nochg:
00000E8A 33FC 0000 00A1 1100        		startZ80
00000E92 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000E98 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000E9E 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000EA4 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000EAA 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000EAE 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000EB4 4EB9 0000 0000             		jsr	(HUD_Update).l
00000EBA 6100 0000                  		bsr.w	sub_1642
00000EBE 4E75                       		rts	
00000EC0                            ; ===========================================================================
00000EC0                            
00000EC0                            VBla_0E:
00000EC0 6100 0000                  		bsr.w	sub_106E
00000EC4 5238 F628                  		addq.b	#1,($FFFFF628).w
00000EC8 11FC 000E F62A             		move.b	#$E,(v_vbla_routine).w
00000ECE 4E75                       		rts	
00000ED0                            ; ===========================================================================
00000ED0                            
00000ED0                            VBla_12:
00000ED0 6100 0000                  		bsr.w	sub_106E
00000ED4 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000ED8 6000 0000                  		bra.w	sub_1642
00000EDC                            ; ===========================================================================
00000EDC                            
00000EDC                            VBla_16:
00000EDC 33FC 0100 00A1 1100        		stopZ80
00000EE4 0839 0000 00A1 1100 66F6   		waitZ80
00000EEE 6100 0000                  		bsr.w	ReadJoypads
00000EF2 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000F16 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000F3A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000F5E 33FC 0000 00A1 1100        		startZ80
00000F66 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000F6C                            	@nochg:
00000F6C 4A78 F614                  		tst.w	(v_demolength).w
00000F70 6700 0000                  		beq.w	@end
00000F74 5378 F614                  		subq.w	#1,(v_demolength).w
00000F78                            
00000F78                            	@end:
00000F78 4E75                       		rts	
00000F7A                            
00000F7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F7A                            
00000F7A                            
00000F7A                            sub_106E:
00000F7A 33FC 0100 00A1 1100        		stopZ80
00000F82 0839 0000 00A1 1100 66F6   		waitZ80
00000F8C 6100 0000                  		bsr.w	ReadJoypads
00000F90 4A38 F64E                  		tst.b	(f_wtr_state).w ; is water above top of screen?
00000F94 6600                       		bne.s	@waterabove	; if yes, branch
00000F96 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000FBA 6000                       		bra.s	@waterbelow
00000FBC                            
00000FBC                            	@waterabove:
00000FBC 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000FE0                            
00000FE0                            	@waterbelow:
00000FE0 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00001004 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00001028 33FC 0000 00A1 1100        		startZ80
00001030 4E75                       		rts	
00001032                            ; End of function sub_106E
00001032                            
00001032                            ; ---------------------------------------------------------------------------
00001032                            ; Horizontal interrupt
00001032                            ; ---------------------------------------------------------------------------
00001032                            
00001032                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001032                            
00001032                            
00001032                            HBlank:
00001032 46FC 2700                  		disable_ints
00001036 4A78 F644                  		tst.w	(f_hbla_pal).w	; is palette set to change?
0000103A 6700                       		beq.s	@nochg		; if not, branch
0000103C 31FC 0000 F644             		move.w	#0,(f_hbla_pal).w
00001042 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001046 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
0000104C 41F8 FA80                  		lea	(v_pal_water).w,a0 ; get palette from RAM
00001050 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001058 2298                       		move.l	(a0)+,(a1)	; move palette to CRAM
0000105A 2298                       		move.l	(a0)+,(a1)
0000105C 2298                       		move.l	(a0)+,(a1)
0000105E 2298                       		move.l	(a0)+,(a1)
00001060 2298                       		move.l	(a0)+,(a1)
00001062 2298                       		move.l	(a0)+,(a1)
00001064 2298                       		move.l	(a0)+,(a1)
00001066 2298                       		move.l	(a0)+,(a1)
00001068 2298                       		move.l	(a0)+,(a1)
0000106A 2298                       		move.l	(a0)+,(a1)
0000106C 2298                       		move.l	(a0)+,(a1)
0000106E 2298                       		move.l	(a0)+,(a1)
00001070 2298                       		move.l	(a0)+,(a1)
00001072 2298                       		move.l	(a0)+,(a1)
00001074 2298                       		move.l	(a0)+,(a1)
00001076 2298                       		move.l	(a0)+,(a1)
00001078 2298                       		move.l	(a0)+,(a1)
0000107A 2298                       		move.l	(a0)+,(a1)
0000107C 2298                       		move.l	(a0)+,(a1)
0000107E 2298                       		move.l	(a0)+,(a1)
00001080 2298                       		move.l	(a0)+,(a1)
00001082 2298                       		move.l	(a0)+,(a1)
00001084 2298                       		move.l	(a0)+,(a1)
00001086 2298                       		move.l	(a0)+,(a1)
00001088 2298                       		move.l	(a0)+,(a1)
0000108A 2298                       		move.l	(a0)+,(a1)
0000108C 2298                       		move.l	(a0)+,(a1)
0000108E 2298                       		move.l	(a0)+,(a1)
00001090 2298                       		move.l	(a0)+,(a1)
00001092 2298                       		move.l	(a0)+,(a1)
00001094 2298                       		move.l	(a0)+,(a1)
00001096 2298                       		move.l	(a0)+,(a1)
00001098 337C 8ADF 0004             		move.w	#$8A00+223,4(a1) ; reset HBlank register
0000109E 4CDF 0300                  		movem.l	(sp)+,a0-a1
000010A2 4A38 F64F                  		tst.b	($FFFFF64F).w
000010A6 6600                       		bne.s	loc_119E
000010A8                            
000010A8                            	@nochg:
000010A8 4E73                       		rte	
000010AA                            ; ===========================================================================
000010AA                            
000010AA                            loc_119E:
000010AA 4238 F64F                  		clr.b	($FFFFF64F).w
000010AE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000010B2 6100 FC5A                  		bsr.w	Demo_Time
000010B6 4EB9 0000 0000             		jsr	(UpdateMusic).l
000010BC 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000010C0 4E73                       		rte	
000010C2                            ; End of function HBlank
000010C2                            
000010C2                            ; ---------------------------------------------------------------------------
000010C2                            ; Subroutine to	initialise joypads
000010C2                            ; ---------------------------------------------------------------------------
000010C2                            
000010C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010C2                            
000010C2                            
000010C2                            JoypadInit:
000010C2 33FC 0100 00A1 1100        		stopZ80
000010CA 0839 0000 00A1 1100 66F6   		waitZ80
000010D4 7040                       		moveq	#$40,d0
000010D6 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000010DC 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000010E2 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (expansion/extra)
000010E8 33FC 0000 00A1 1100        		startZ80
000010F0 4E75                       		rts	
000010F2                            ; End of function JoypadInit
000010F2                            
000010F2                            ; ---------------------------------------------------------------------------
000010F2                            ; Subroutine to	read joypad input, and send it to the RAM
000010F2                            ; ---------------------------------------------------------------------------
000010F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010F2                            
000010F2                            
000010F2                            ReadJoypads:
000010F2 41F8 F604                  		lea	(v_jpadhold1).w,a0 ; address where joypad states are written
000010F6 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000010FC 6100                       		bsr.s	@read		; do the first joypad
000010FE 5449                       		addq.w	#2,a1		; do the second	joypad
00001100                            
00001100                            	@read:
00001100 12BC 0000                  		move.b	#0,(a1)
00001104 4E71                       		nop	
00001106 4E71                       		nop	
00001108 1011                       		move.b	(a1),d0
0000110A E508                       		lsl.b	#2,d0
0000110C 0200 00C0                  		andi.b	#$C0,d0
00001110 12BC 0040                  		move.b	#$40,(a1)
00001114 4E71                       		nop	
00001116 4E71                       		nop	
00001118 1211                       		move.b	(a1),d1
0000111A 0201 003F                  		andi.b	#$3F,d1
0000111E 8001                       		or.b	d1,d0
00001120 4600                       		not.b	d0
00001122 1210                       		move.b	(a0),d1
00001124 B101                       		eor.b	d0,d1
00001126 10C0                       		move.b	d0,(a0)+
00001128 C200                       		and.b	d0,d1
0000112A 10C1                       		move.b	d1,(a0)+
0000112C 4E75                       		rts	
0000112E                            ; End of function ReadJoypads
0000112E                            
0000112E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000112E                            
0000112E                            
0000112E                            VDPSetupGame:
0000112E 41F9 00C0 0004             		lea	(vdp_control_port).l,a0
00001134 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
0000113A 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001140 7E12                       		moveq	#$12,d7
00001142                            
00001142                            	@setreg:
00001142 309A                       		move.w	(a2)+,(a0)
00001144 51CF FFFC                  		dbf	d7,@setreg	; set the VDP registers
00001148                            
00001148 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
0000114E 31C0 F60C                  		move.w	d0,(v_vdp_buffer1).w
00001152 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w	; H-INT every 224th scanline
00001158 7000                       		moveq	#0,d0
0000115A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
00001164 3E3C 003F                  		move.w	#$3F,d7
00001168                            
00001168                            	@clrCRAM:
00001168 3280                       		move.w	d0,(a1)
0000116A 51CF FFFC                  		dbf	d7,@clrCRAM	; clear	the CRAM
0000116E                            
0000116E 42B8 F616                  		clr.l	(v_scrposy_dup).w
00001172 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00001176 2F01                       		move.l	d1,-(sp)
00001178 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFFF,0
0000119A                            
0000119A                            	@waitforDMA:
0000119A 3215                       		move.w	(a5),d1
0000119C 0801 0001                  		btst	#1,d1		; is DMA (fillVRAM) still running?
000011A0 66F8                       		bne.s	@waitforDMA	; if yes, branch
000011A2                            
000011A2 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment size
000011A6 221F                       		move.l	(sp)+,d1
000011A8 4E75                       		rts	
000011AA                            ; End of function VDPSetupGame
000011AA                            
000011AA                            ; ===========================================================================
000011AA 8004                       VDPSetupArray:	dc.w $8004		; 8-colour mode
000011AC 8134                       		dc.w $8134		; enable V.interrupts, enable DMA
000011AE 8230                       		dc.w $8200+(vram_fg>>10) ; set foreground nametable address
000011B0 8328                       		dc.w $8300+($A000>>10)	; set window nametable address
000011B2 8407                       		dc.w $8400+(vram_bg>>13) ; set background nametable address
000011B4 857C                       		dc.w $8500+(vram_sprites>>9) ; set sprite table address
000011B6 8600                       		dc.w $8600		; unused
000011B8 8700                       		dc.w $8700		; set background colour (palette entry 0)
000011BA 8800                       		dc.w $8800		; unused
000011BC 8900                       		dc.w $8900		; unused
000011BE 8A00                       		dc.w $8A00		; default H.interrupt register
000011C0 8B00                       		dc.w $8B00		; full-screen vertical scrolling
000011C2 8C81                       		dc.w $8C81		; 40-cell display mode
000011C4 8D3F                       		dc.w $8D00+(vram_hscroll>>10) ; set background hscroll address
000011C6 8E00                       		dc.w $8E00		; unused
000011C8 8F02                       		dc.w $8F02		; set VDP increment size
000011CA 9001                       		dc.w $9001		; 64-cell hscroll size
000011CC 9100                       		dc.w $9100		; window horizontal position
000011CE 9200                       		dc.w $9200		; window vertical position
000011D0                            
000011D0                            ; ---------------------------------------------------------------------------
000011D0                            ; Subroutine to	clear the screen
000011D0                            ; ---------------------------------------------------------------------------
000011D0                            
000011D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011D0                            
000011D0                            
000011D0                            ClearScreen:
000011D0 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_fg ; clear foreground namespace
000011F2                            
000011F2                            	@wait1:
000011F2 3215                       		move.w	(a5),d1
000011F4 0801 0001                  		btst	#1,d1
000011F8 66F8                       		bne.s	@wait1
000011FA                            
000011FA 3ABC 8F02                  		move.w	#$8F02,(a5)
000011FE 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_bg ; clear background namespace
00001220                            
00001220                            	@wait2:
00001220 3215                       		move.w	(a5),d1
00001222 0801 0001                  		btst	#1,d1
00001226 66F8                       		bne.s	@wait2
00001228                            
00001228 3ABC 8F02                  		move.w	#$8F02,(a5)
0000122C 42B8 F616                  		clr.l	(v_scrposy_dup).w
00001230 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00001234                            
00001234 43F8 F800                  		lea	(v_spritetablebuffer).w,a1
00001238 7000                       		moveq	#0,d0
0000123A 323C 00A0                  		move.w	#($280/4),d1	; This should be ($280/4)-1, leading to a slight bug (first bit of v_pal_water is cleared)
0000123E                            
0000123E                            	@clearsprites:
0000123E 22C0                       		move.l	d0,(a1)+
00001240 51C9 FFFC                  		dbf	d1,@clearsprites ; clear sprite table (in RAM)
00001244                            
00001244 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00001248 7000                       		moveq	#0,d0
0000124A 323C 0100                  		move.w	#($400/4),d1	; This should be ($400/4)-1, leading to a slight bug (first bit of the Sonic object's RAM is cleared)
0000124E                            
0000124E                            	@clearhscroll:
0000124E 22C0                       		move.l	d0,(a1)+
00001250 51C9 FFFC                  		dbf	d1,@clearhscroll ; clear hscroll table (in RAM)
00001254 4E75                       		rts	
00001256                            ; End of function ClearScreen
00001256                            
00001256                            ; ---------------------------------------------------------------------------
00001256                            ; Subroutine to	load the sound driver
00001256                            ; ---------------------------------------------------------------------------
00001256                            
00001256                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001256                            
00001256                            
00001256                            SoundDriverLoad:
00001256 4E71                       		nop	
00001258 33FC 0100 00A1 1100        		stopZ80
00001260 33FC 0100 00A1 1200        		resetZ80
00001268 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000126E 43F9 00A0 0000             		lea	(z80_ram).l,a1	; target Z80 RAM
00001274 6100 0000                  		bsr.w	KosDec		; decompress
00001278 33FC 0000 00A1 1200        		resetZ80a
00001280 4E71                       		nop	
00001282 4E71                       		nop	
00001284 4E71                       		nop	
00001286 4E71                       		nop	
00001288 33FC 0100 00A1 1200        		resetZ80
00001290 33FC 0000 00A1 1100        		startZ80
00001298 4E75                       		rts	
0000129A                            ; End of function SoundDriverLoad
0000129A                            
0000129A                            		include	"_incObj\sub PlaySound.asm"
0000129A                            ; ---------------------------------------------------------------------------
0000129A                            ; Subroutine to	play a music track
0000129A                            
0000129A                            ; input:
0000129A                            ;	d0 = track to play
0000129A                            ; ---------------------------------------------------------------------------
0000129A                            
0000129A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000129A                            
0000129A                            
0000129A                            PlaySound:
0000129A 11C0 F00A                  		move.b	d0,(v_snddriver_ram+v_soundqueue0).w
0000129E 4E75                       		rts	
000012A0                            ; End of function PlaySound
000012A0                            
000012A0                            ; ---------------------------------------------------------------------------
000012A0                            ; Subroutine to	play a sound effect
000012A0                            ; ---------------------------------------------------------------------------
000012A0                            
000012A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012A0                            
000012A0                            
000012A0                            PlaySound_Special:
000012A0 11C0 F00B                  		move.b	d0,(v_snddriver_ram+v_soundqueue1).w
000012A4 4E75                       		rts	
000012A6                            ; End of function PlaySound_Special
000012A6                            
000012A6                            ; ===========================================================================
000012A6                            ; ---------------------------------------------------------------------------
000012A6                            ; Unused sound/music subroutine
000012A6                            ; ---------------------------------------------------------------------------
000012A6                            
000012A6                            PlaySound_Unused:
000012A6 11C0 F00C                  		move.b	d0,(v_snddriver_ram+v_soundqueue2).w
000012AA 4E75                       		rts	
000012AA 4E75                       		rts	
000012AC                            		include	"_inc\PauseGame.asm"
000012AC                            ; ---------------------------------------------------------------------------
000012AC                            ; Subroutine to	pause the game
000012AC                            ; ---------------------------------------------------------------------------
000012AC                            
000012AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012AC                            
000012AC                            
000012AC                            PauseGame:
000012AC 4E71                       		nop	
000012AE 4A38 FE12                  		tst.b	(v_lives).w	; do you have any lives	left?
000012B2 6700                       		beq.s	Unpause		; if not, branch
000012B4 4A78 F63A                  		tst.w	(f_pause).w	; is game already paused?
000012B8 6600                       		bne.s	Pause_StopGame	; if yes, branch
000012BA 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
000012C0 6700                       		beq.s	Pause_DoNothing	; if not, branch
000012C2                            
000012C2                            Pause_StopGame:
000012C2 31FC 0001 F63A             		move.w	#1,(f_pause).w	; freeze time
000012C8 11FC 0001 F003             		move.b	#1,(v_snddriver_ram+f_pausemusic).w ; pause music
000012CE                            
000012CE                            Pause_Loop:
000012CE 11FC 0010 F62A             		move.b	#$10,(v_vbla_routine).w
000012D4 6100 0000                  		bsr.w	WaitForVBla
000012D8 4A38 FFE1                  		tst.b	(f_slomocheat).w ; is slow-motion cheat on?
000012DC 6700                       		beq.s	Pause_ChkStart	; if not, branch
000012DE 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
000012E4 6700                       		beq.s	Pause_ChkBC	; if not, branch
000012E6 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; set game mode to 4 (title screen)
000012EC 4E71                       		nop	
000012EE 6000                       		bra.s	Pause_EndMusic
000012F0                            ; ===========================================================================
000012F0                            
000012F0                            Pause_ChkBC:
000012F0 0838 0004 F604             		btst	#bitB,(v_jpadhold1).w ; is button B pressed?
000012F6 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012F8 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000012FE 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001300                            
00001300                            Pause_ChkStart:
00001300 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00001306 67C6                       		beq.s	Pause_Loop	; if not, branch
00001308                            
00001308                            Pause_EndMusic:
00001308 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; unpause the music
0000130E                            
0000130E                            Unpause:
0000130E 31FC 0000 F63A             		move.w	#0,(f_pause).w	; unpause the game
00001314                            
00001314                            Pause_DoNothing:
00001314 4E75                       		rts	
00001316                            ; ===========================================================================
00001316                            
00001316                            Pause_SlowMo:
00001316 31FC 0001 F63A             		move.w	#1,(f_pause).w
0000131C 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; Unpause the music
00001322 4E75                       		rts	
00001324                            ; End of function PauseGame
00001324                            ; End of function PauseGame
00001324                            
00001324                            ; ---------------------------------------------------------------------------
00001324                            ; Subroutine to	copy a tile map from RAM to VRAM namespace
00001324                            
00001324                            ; input:
00001324                            ;	a1 = tile map address
00001324                            ;	d0 = VRAM address
00001324                            ;	d1 = width (cells)
00001324                            ;	d2 = height (cells)
00001324                            ; ---------------------------------------------------------------------------
00001324                            
00001324                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001324                            
00001324                            
00001324                            TilemapToVRAM:
00001324 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000132A 283C 0080 0000             		move.l	#$800000,d4
00001330                            
00001330                            	Tilemap_Line:
00001330 2D40 0004                  		move.l	d0,4(a6)	; move d0 to VDP_control_port
00001334 3601                       		move.w	d1,d3
00001336                            
00001336                            	Tilemap_Cell:
00001336 3C99                       		move.w	(a1)+,(a6)	; write value to namespace
00001338 51CB FFFC                  		dbf	d3,Tilemap_Cell	; next tile
0000133C D084                       		add.l	d4,d0		; goto next line
0000133E 51CA FFF0                  		dbf	d2,Tilemap_Line	; next line
00001342 4E75                       		rts	
00001344                            ; End of function TilemapToVRAM
00001344                            
00001344                            		include	"_inc\Nemesis Decompression.asm"
00001344                            ; ==============================================================================
00001344                            ; ------------------------------------------------------------------------------
00001344                            ; Nemesis decompression routine
00001344                            ; ------------------------------------------------------------------------------
00001344                            ; Optimized by vladikcomper
00001344                            ; ------------------------------------------------------------------------------
00001344                             
00001344                            NemDec_RAM:
00001344 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001348 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
0000134C 6000                           bra.s   NemDec_Main
0000134E                             
0000134E                            ; ------------------------------------------------------------------------------
0000134E                            NemDec:
0000134E 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001352 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
00001358 47FA 0000                      lea NemPCD_WriteRowToVDP(pc),a3
0000135C                             
0000135C                            NemDec_Main:
0000135C 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
00001360 3418                           move.w  (a0)+,d2        ; get number of patterns
00001362 6A00                           bpl.s   @0          ; are we in Mode 0?
00001364 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
00001368 E74A                       @0  lsl.w   #3,d2
0000136A 3A42                           movea.w d2,a5
0000136C 7607                           moveq   #7,d3
0000136E 7400                           moveq   #0,d2
00001370 7800                           moveq   #0,d4
00001372 6100 0000                      bsr.w   NemDec_BuildCodeTable
00001376 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
00001378 E145                           asl.w   #8,d5           ; shift up by a byte
0000137A 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
0000137C 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
00001380 6100                           bsr.s   NemDec2
00001382 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
00001386 4E75                           rts
00001388                             
00001388                            ; ---------------------------------------------------------------------------
00001388                            ; Part of the Nemesis decompressor, processes the actual compressed data
00001388                            ; ---------------------------------------------------------------------------
00001388                             
00001388                            NemDec2:
00001388 3E06                           move.w  d6,d7
0000138A 5147                           subq.w  #8,d7           ; get shift value
0000138C 3205                           move.w  d5,d1
0000138E EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
00001390 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
00001394 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
00001396 0241 00FF                      andi.w  #$FF,d1
0000139A D241                           add.w   d1,d1
0000139C 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
000013A0 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
000013A4 6400                           bcc.s   @0          ; if not, branch
000013A6 5046                           addq.w  #8,d6
000013A8 E145                           asl.w   #8,d5
000013AA 1A18                           move.b  (a0)+,d5        ; read next byte
000013AC 1231 1001                  @0  move.b  1(a1,d1.w),d1
000013B0 3001                           move.w  d1,d0
000013B2 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
000013B6 0240 00F0                      andi.w  #$F0,d0
000013BA                             
000013BA                            NemDec_GetRepeatCount:
000013BA E848                           lsr.w   #4,d0           ; get repeat count
000013BC                             
000013BC                            NemDec_WritePixel:
000013BC E98C                           lsl.l   #4,d4           ; shift up by a nybble
000013BE 8801                           or.b    d1,d4           ; write pixel
000013C0 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
000013C4 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
000013C6                            ; ---------------------------------------------------------------------------
000013C6                             
000013C6                            NemPCD_NewRow:
000013C6 7800                           moveq   #0,d4           ; reset row
000013C8 7607                           moveq   #7,d3           ; reset nybble counter
000013CA                             
000013CA                            NemDec_WritePixelLoop:
000013CA 51C8 FFF0                      dbf d0,NemDec_WritePixel
000013CE 60B8                           bra.s   NemDec2
000013D0                            ; ---------------------------------------------------------------------------
000013D0                             
000013D0                            NemDec_InlineData:
000013D0 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
000013D2 0C46 0009                      cmpi.w  #9,d6
000013D6 6400                           bcc.s   @0
000013D8 5046                           addq.w  #8,d6
000013DA E145                           asl.w   #8,d5
000013DC 1A18                           move.b  (a0)+,d5
000013DE 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
000013E0 3205                           move.w  d5,d1
000013E2 EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
000013E4 3001                           move.w  d1,d0
000013E6 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
000013EA 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
000013EE 0C46 0009                      cmpi.w  #9,d6
000013F2 64C6                           bcc.s   NemDec_GetRepeatCount
000013F4 5046                           addq.w  #8,d6
000013F6 E145                           asl.w   #8,d5
000013F8 1A18                           move.b  (a0)+,d5
000013FA 60BE                           bra.s   NemDec_GetRepeatCount
000013FC                             
000013FC                            ; ---------------------------------------------------------------------------
000013FC                            ; Subroutines to output decompressed entry
000013FC                            ; Selected depending on current decompression mode
000013FC                            ; ---------------------------------------------------------------------------
000013FC                             
000013FC                            NemPCD_WriteRowToVDP:
000013FC                            loc_1502:
000013FC 2884                           move.l  d4,(a4)         ; write 8-pixel row
000013FE 534D                           subq.w  #1,a5
00001400 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
00001402 66C2                           bne.s   NemPCD_NewRow         ; if not, branch
00001404 4E75                           rts
00001406                            ; ---------------------------------------------------------------------------
00001406                             
00001406                            NemPCD_WriteRowToVDP_XOR:
00001406 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
00001408 2882                           move.l  d2,(a4)         ; and write the result
0000140A 534D                           subq.w  #1,a5
0000140C 380D                           move.w  a5,d4
0000140E 66B6                           bne.s   NemPCD_NewRow
00001410 4E75                           rts
00001412                            ; ---------------------------------------------------------------------------
00001412                             
00001412                            NemDec_WriteRowToRAM:
00001412 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
00001414 534D                           subq.w  #1,a5
00001416 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
00001418 66AC                           bne.s   NemPCD_NewRow         ; if not, branch
0000141A 4E75                           rts
0000141C                            ; ---------------------------------------------------------------------------
0000141C                             
0000141C                            NemDec_WriteRowToRAM_XOR:
0000141C B982                           eor.l   d4,d2           ; XOR the previous row by the current row
0000141E 28C2                           move.l  d2,(a4)+        ; and write the result
00001420 534D                           subq.w  #1,a5
00001422 380D                           move.w  a5,d4
00001424 66A0                           bne.s   NemPCD_NewRow
00001426 4E75                           rts
00001428                             
00001428                            ; ---------------------------------------------------------------------------
00001428                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
00001428                            ; ---------------------------------------------------------------------------
00001428                             
00001428                            NemDec_BuildCodeTable:
00001428 1018                           move.b  (a0)+,d0        ; read first byte
0000142A                             
0000142A                            @ChkEnd:
0000142A 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
0000142E 6600                           bne.s   @NewPalIndex        ; if not, branch
00001430 4E75                           rts
00001432                            ; ---------------------------------------------------------------------------
00001432                             
00001432                            @NewPalIndex:
00001432 3E00                           move.w  d0,d7
00001434                             
00001434                            @ItemLoop:
00001434 1018                           move.b  (a0)+,d0        ; read next byte
00001436 6BF2                           bmi.s   @ChkEnd         ; ~~
00001438 1200                           move.b  d0,d1
0000143A 0247 000F                      andi.w  #$F,d7          ; get palette index
0000143E 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
00001442 8E41                           or.w    d1,d7           ; combine the two
00001444 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
00001448 1200                           move.b  d0,d1
0000144A E149                           lsl.w   #8,d1
0000144C 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
0000144E 7208                           moveq   #8,d1
00001450 9240                           sub.w   d0,d1           ; is the code 8 bits long?
00001452 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
00001454 1018                           move.b  (a0)+,d0        ; get code
00001456 D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
00001458 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
0000145C 60D6                           bra.s   @ItemLoop       ; repeat
0000145E                            ; ---------------------------------------------------------------------------
0000145E                             
0000145E                            @ItemShortCode:
0000145E 1018                           move.b  (a0)+,d0        ; get code
00001460 E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
00001462 D040                           add.w   d0,d0           ; get index into code table
00001464 7A01                           moveq   #1,d5
00001466 E36D                           lsl.w   d1,d5
00001468 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
0000146A 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
0000146E                             
0000146E                            @ItemShortCodeLoop:
0000146E 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
00001470 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
00001474 60BE                           bra.s   @ItemLoop
00001474 60BE                           bra.s   @ItemLoop
00001476                            
00001476                              
00001476                                pusho	; buffer local label symbol config
00001476                                opt ws+  ; change local label symbol to '.'
00001476                            
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; MACRO ResetDMAQueue
00001476                            ; Clears the DMA queue, discarding all previously-queued DMAs.
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE Process_DMA_Queue / ProcessDMAQueue
00001476                            ; Performs all queued DMA transfers and clears the DMA queue.
00001476                            ;
00001476                            ; Output:
00001476                            ; 	a1,a5	trashed
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE InitDMAQueue
00001476                            ; Pre-initializes the DMA queue with VDP register numbers in alternating bytes.
00001476                            ; Must be called before the queue is used, and the queue expects that only it
00001476                            ; write to this region of RAM.
00001476                            ;
00001476                            ; Output:
00001476                            ; 	a0,d0,d1	trashed
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE Add_To_DMA_Queue / QueueDMATransfer
00001476                            ; Queues a DMA with parameters given in registers.
00001476                            ;
00001476                            ; Options:
00001476                            ; 	AssumeSourceAddressInBytes (default 1)
00001476                            ; 	AssumeSourceAddressIsRAMSafe (default 0)
00001476                            ; 	UseRAMSourceSafeDMA (default 1&(AssumeSourceAddressIsRAMSafe=0))
00001476                            ; 	Use128kbSafeDMA (default 0)
00001476                            ; 	UseVIntSafeDMA (default 0)
00001476                            ; Input:
00001476                            ; 	d1	Source address (in bytes, or in words if AssumeSourceAddressInBytes is
00001476                            ; 		set to 0)
00001476                            ; 	d2	Destination address
00001476                            ; 	d3	Transfer length (in words)
00001476                            ; Output:
00001476                            ; 	d0,d1,d2,d3,a1	trashed
00001476                            ;
00001476                            ; With the default settings, runs in:
00001476                            ; * 48(11/0) cycles if queue is full (DMA discarded)
00001476                            ; * 184(29/9) cycles otherwise (DMA queued)
00001476                            ;
00001476                            ; With Use128kbSafeDMA = 1, runs in:
00001476                            ; * 48(11/0) cycles if queue is full at the start (DMA discarded)
00001476                            ; * 200(32/9) cycles if the DMA does not cross a 128kB boundary (DMA queued)
00001476                            ; * 226(38/9) cycles if the DMA crosses a 128kB boundary, and the first piece
00001476                            ;   fills the queue (second piece is discarded)
00001476                            ; * 338(56/17) cycles if the DMA crosses a 128kB boundary, and the queue has
00001476                            ;   space for both pieces (both pieces queued)
00001476                            ;
00001476                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to all times.
00001476                            ;
00001476                            ; Setting AssumeSourceAddressInBytes to 0 reduces all times by 10(1/0) cycles,
00001476                            ; but only if the DMA is not entirely discarded. However, all callers must be
00001476                            ; edited to make sure the adresss given is correct.
00001476                            ;
00001476                            ; Setting AssumeSourceAddressIsRAMSafe to 1, or UseRAMSourceSafeDMA to 0,
00001476                            ; reduces all times by 14(2/0) cycles, but only if the DMA is not entirely
00001476                            ; discarded. However, all callers must be edited to make sure the adresss given
00001476                            ; in the correct form. You can use the dmaSource function for that.
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; MACRO QueueStaticDMA
00001476                            ; Directly queues a DMA on the spot. Requires all parameters to be known at
00001476                            ; assembly time; that is, no registers. Gives assembly errors when the DMA
00001476                            ; crosses a 128kB boundary, is at an odd ROM location, or is zero length.
00001476                            ;
00001476                            ; Options:
00001476                            ; 	UseVIntSafeDMA (default 0)
00001476                            ; Input:
00001476                            ; 	Source address (in bytes), transfer length (in bytes), destination address
00001476                            ; Output:
00001476                            ; 	d0,a1	trashed
00001476                            ;
00001476                            ; With the default settings, runs in:
00001476                            ; * 32(7/0) cycles if queue is full (DMA discarded)
00001476                            ; * 122(21/8) cycles otherwise (DMA queued)
00001476                            ;
00001476                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to both cases.
00001476                            ; ===========================================================================
00001476                            ; option: AssumeSourceAddressInBytes
00001476                            ;
00001476                            ; This option makes the function work as a drop-in replacement of the original
00001476                            ; functions. If you modify all callers to supply a position in words instead of
00001476                            ; bytes (i.e., divide source address by 2) you can set this to 0 to gain 10(1/0)
00001476 =00000001                  AssumeSourceAddressInBytes = 1
00001476                            ; ===========================================================================
00001476                            ; option: AssumeSourceAddressIsRAMSafe
00001476                            ;
00001476                            ; This option (which is disabled by default) makes the DMA queue assume that the
00001476                            ; source address is given to the function in a way that makes them safe to use
00001476                            ; with RAM sources. You need to edit all callers to ensure this.
00001476                            ; Enabling this option turns off UseRAMSourceSafeDMA, and saves 14(2/0).
00001476 =00000000                  AssumeSourceAddressIsRAMSafe = 0
00001476                            ; ===========================================================================
00001476                            ; option: UseRAMSourceSafeDMA
00001476                            ;
00001476                            ; This option (which is enabled by default) makes source addresses in RAM safe
00001476                            ; at the cost of 14(2/0). If you modify all callers so as to clear the top byte
00001476                            ; of source addresses (i.e., by ANDing them with $FFFFFF).
00001476 =00000001                  UseRAMSourceSafeDMA = 1&(AssumeSourceAddressIsRAMSafe=0)
00001476                            ; ===========================================================================
00001476                            ; option: Use128kbSafeDMA
00001476                            ;
00001476                            ; This option breaks DMA transfers that crosses a 128kB block into two. It is
00001476                            ; disabled by default because you can simply align the art in ROM and avoid the
00001476                            ; issue altogether. It is here so that you have a high-performance routine to do
00001476                            ; the job in situations where you can't align it in ROM.
00001476 =00000001                  Use128kbSafeDMA = 1
00001476                            ; ===========================================================================
00001476                            ; option UseVIntSafeDMA
00001476                            ;
00001476                            ; Option to mask interrupts while updating the DMA queue. This fixes many race
00001476                            ; conditions in the DMA funcion, but it costs 46(6/1) cycles. The better way to
00001476                            ; handle these race conditions would be to make unsafe callers (such as S3&K's
00001476                            ; KosM decoder) prevent these by masking off interrupts before calling and then
00001476                            ; restore interrupts after.
00001476 =00000000                  UseVIntSafeDMA = 0
00001476                            ; ===========================================================================
00001476                            
00001476                            
00001476                            ; Convenience macros, for increased maintainability of the code.
00001476 =00000027                  DMA = %100111
00001476 =00000021                  VRAM = %100001
00001476                            ; Like vdpComm, but starting from an address contained in a register
00001476 =00000001                  vdpCommReg_defined = 1
00001476                            vdpCommReg macro reg,type,rwd,clr
00001476                            	lsl.l	#2,\reg							; Move high bits into (word-swapped) position, accidentally moving everything else
00001476                            	if ((\type&\rwd)&3)<>0
00001476                            		addq.w	#((\type&\rwd)&3),\reg			; Add upper access type bits
00001476                            	endif
00001476                            	ror.w	#2,\reg							; Put upper access type bits into place, also moving all other bits into their correct (word-swapped) places
00001476                            	swap	\reg								; Put all bits in proper places
00001476                            	if \clr <> 0
00001476                            		andi.w	#3,\reg						; Strip whatever junk was in upper word of reg
00001476                            	endif
00001476                            	if ((\type&\rwd)&$FC)=$20
00001476                            		tas.b	\reg							; Add in the DMA flag -- tas fails on memory, but works on registers
00001476                            	elseif ((\type&\rwd)&$FC)<>0
00001476                            		ori.w	#(((\type&\rwd)&$FC)<<2),\reg	; Add in missing access type bits
00001476                            	endif
00001476                            	endm
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000001                  intMacros_defined = 1
00001476                            enableInts macro
00001476                            	move	#$2300,sr
00001476                            	endm
00001476                            
00001476                            disableInts macro
00001476                            	move	#$2700,sr
00001476                            	endm
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000001                  DMAEntry_defined = 1
00001476                                    rsreset
00001476 =00000000                  DMAEntry.Reg94:		rs.b	1
00001476                            			  
00001476 =00000001                  DMAEntry.Size:      rs.b    0
00001476 =00000001                  DMAEntry.SizeH:		rs.b	1
00001476 =00000002                  DMAEntry.Reg93:		rs.b	1
00001476 =00000003                  DMAEntry.Source:    rs.b    0
00001476 =00000003                  DMAEntry.SizeL:		rs.b	1
00001476 =00000004                  DMAEntry.Reg97:		rs.b	1
00001476 =00000005                  DMAEntry.SrcH:		rs.b	1
00001476 =00000006                  DMAEntry.Reg96:		rs.b	1
00001476 =00000007                  DMAEntry.SrcM:		rs.b	1
00001476 =00000008                  DMAEntry.Reg95:		rs.b	1
00001476 =00000009                  DMAEntry.SrcL:		rs.b	1
00001476 =0000000A                  DMAEntry.Command:	rs.l	1
00001476 =0000000E                  DMAEntry.len:   rs.w    0
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000012                  QueueSlotCount = (VDP_Command_Buffer_Slot-VDP_Command_Buffer)/DMAEntry.len
00001476                            ; ---------------------------------------------------------------------------
00001476                            						
00001476                            										   
00001476                            									   
00001476                            	  
00001476                            																			 
00001476                            							  
00001476 =00000001                  QueueStaticDMA_defined = 1
00001476                            ; Expects source address and DMA length in bytes. Also, expects source, size, and dest to be known
00001476                            ; at assembly time. Gives errors if DMA starts at an odd address, transfers
00001476                            ; crosses a 128kB boundary, or has size 0.
00001476                            QueueStaticDMA macro src,length,dest
00001476                                local   len
00001476                            		if ((\src)&1)<>0
00001476                            			inform 3,"DMA queued from odd source \1!"
00001476                            		endif
00001476                            		if ((\length)&1)<>0
00001476                            			inform 3,"DMA an odd number of bytes \2!"
00001476                            		endif
00001476                            		if (\length)=0
00001476                            			inform 3,"DMA transferring 0 bytes (becomes a 128kB transfer). If you really mean it, pass 128kB instead."
00001476                            		endif
00001476                            		if (((\src)+(\length)-1)>>17)<>((\src)>>17)
00001476                            			inform 3,"DMA crosses a 128kB boundary. You should either split the DMA manually or align the source adequately."
00001476                            		endif
00001476                            	  
00001476                            	if UseVIntSafeDMA=1
00001476                            		move.w	sr,-(sp)										; Save current interrupt mask
00001476                            		disableInts												; Mask off interrupts
00001476                            	endif ; UseVIntSafeDMA=1
00001476                            	movea.w	(VDP_Command_Buffer_Slot).w,a1
00001476                            	cmpa.w	#VDP_Command_Buffer_Slot,a1
00001476                            	beq.s	.done												; Return if there's no more room in the buffer
00001476                            	len: = ((length>>1)&$7FFF)
00001476                                move.b	#(len>>8)&$FF,DMAEntry.SizeH(a1)		; Write top byte of size/2
00001476                            	move.l	#((len&$FF)<<24)|((src>>1)&$7FFFFF),d0	; Set d0 to bottom byte of size/2 and the low 3 bytes of source/2
00001476                            	movep.l	d0,DMAEntry.SizeL(a1)								; Write it all to the queue
00001476                            	lea	DMAEntry.Command(a1),a1									; Seek to correct RAM address to store VDP DMA command
00001476                            	move.l	#$40000080,(a1)+						; Write VDP DMA command for destination address
00001476                            	move.w	a1,(VDP_Command_Buffer_Slot).w						; Write next queue slot
00001476                            .done:
00001476                            	if UseVIntSafeDMA=1
00001476                            		move.w	(sp)+,sr										; Restore interrupts to previous state
00001476                            	endif ;UseVIntSafeDMA=1
00001476                            	endm
00001476                            
00001476                                
00001476                            
00001476                            ; ---------------------------------------------------------------------------
00001476                            ResetDMAQueue: macro
00001476                            	move.w	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
00001476                            	endm
00001476                            ; ===========================================================================
00001476                            
00001476                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001476                            
00001476                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand:
00001476                            Add_To_DMA_Queue:
00001476                            QueueDMATransfer:
00001476 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
0000147A B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
0000147E 6700                       	beq.s	.done											; Return if there's no more room in the buffer
00001480                            
00001480 E289                       		lsr.l	#1,d1										; Source address is in words for the VDP registers
00001482 0881 0017                  		bclr.l	#23,d1										; Make sure bit 23 is clear (68k->VDP DMA flag)
00001486 03C9 0003                  	movep.l	d1,DMAEntry.Source(a1)							; Write source address; the useless top byte will be overwritten later
0000148A 7000                       	moveq	#0,d0											; We need a zero on d0
0000148C                            
0000148C                            		; Detect if transfer crosses 128KB boundary
0000148C                            		; Using sub+sub instead of move+add handles the following edge cases:
0000148C                            		; (1) d3.w = 0 => 128kB transfer
0000148C                            		;   (a) d1.w = 0 => no carry, don't split the DMA
0000148C                            		;   (b) d1.w != 0 => carry, need to split the DMA
0000148C                            		; (2) d3.w != 0
0000148C                            		;   (a) if there is carry on d1.w + d3.w
0000148C                            		;     (* ) if d1.w + d3.w = 0 => transfer comes entirely from current 128kB block, don't split the DMA
0000148C                            		;     (**) if d1.w + d3.w != 0 => need to split the DMA
0000148C                            		;   (b) if there is no carry on d1.w + d3.w => don't split the DMA
0000148C                            		; The reason this works is that carry on d1.w + d3.w means that
0000148C                            		; d1.w + d3.w >= $10000, whereas carry on (-d3.w) - (d1.w) means that
0000148C                            		; d1.w + d3.w > $10000.
0000148C 9043                       		sub.w	d3,d0										; Using sub instead of move and add allows checking edge cases
0000148E 9041                       		sub.w	d1,d0										; Does the transfer cross over to the next 128kB block?
00001490 6500                       		bcs.s	.doubletransfer								; Branch if yes
00001492                            	; It does not cross a 128kB boundary. So just finish writing it.
00001492 0789 0001                  	movep.w	d3,DMAEntry.Size(a1)							; Write DMA length, overwriting useless top byte of source address
00001496                            
00001496                            .finishxfer:
00001496                            	; Command to specify destination address and begin DMA
00001496 3002                       	move.w	d2,d0											; Use the fact that top word of d0 is zero to avoid clearing on vdpCommReg
000014A2 43E9 000A                  	lea	DMAEntry.Command(a1),a1								; Seek to correct RAM address to store VDP DMA command
000014A6 22C0                       	move.l	d0,(a1)+										; Write VDP DMA command for destination address
000014A8 31C9 C8FC                  	move.w	a1,(VDP_Command_Buffer_Slot).w					; Write next queue slot
000014AC                            
000014AC                            .done:
000014AC 4E75                       	rts
000014AE                            ; ---------------------------------------------------------------------------
000014AE                            .doubletransfer:
000014AE                            		; We need to split the DMA into two parts, since it crosses a 128kB block
000014AE D043                       		add.w	d3,d0										; Set d0 to the number of words until end of current 128kB block
000014B0 0189 0001                  		movep.w	d0,DMAEntry.Size(a1)						; Write DMA length of first part, overwriting useless top byte of source addres
000014B4                            
000014B4 B2FC C8EE                  		cmpa.w	#VDP_Command_Buffer_Slot-DMAEntry.len,a1	; Does the queue have enough space for both parts?
000014B8 67DC                       		beq.s	.finishxfer									; Branch if not
000014BA                            
000014BA                            		; Get second transfer's source, destination, and length
000014BA 9640                       		sub.w	d0,d3										; Set d3 to the number of words remaining
000014BC D280                       		add.l	d0,d1										; Offset the source address of the second part by the length of the first part
000014BE D040                       		add.w	d0,d0										; Convert to number of bytes
000014C0 D042                       		add.w	d2,d0										; Set d0 to the VRAM destination of the second part
000014C2                            
000014C2                            		; If we know top word of d2 is clear, the following vdpCommReg can be set to not
000014C2                            		; clear it. There is, unfortunately, no faster way to clear it than this.
000014D0 2342 000A                  		move.l	d2,DMAEntry.Command(a1)						; Write VDP DMA command for destination address of first part
000014D4                            
000014D4                            		; Do second transfer
000014D4 03C9 0011                  		movep.l	d1,DMAEntry.len+DMAEntry.Source(a1)			; Write source address of second part; useless top byte will be overwritten later
000014D8 0789 000F                  		movep.w	d3,DMAEntry.len+DMAEntry.Size(a1)			; Write DMA length of second part, overwriting useless top byte of source addres
000014DC                            
000014DC                            		; Command to specify destination address and begin DMA
000014E6 43E9 0018                  		lea	DMAEntry.len+DMAEntry.Command(a1),a1			; Seek to correct RAM address to store VDP DMA command of second part
000014EA 22C0                       		move.l	d0,(a1)+									; Write VDP DMA command for destination address of second part
000014EC                            
000014EC 31C9 C8FC                  		move.w	a1,(VDP_Command_Buffer_Slot).w				; Write next queue slot
000014F0 4E75                       		rts
000014F2                            ; End of function QueueDMATransfer
000014F2                            ; ===========================================================================
000014F2                            
000014F2                            ; ---------------------------------------------------------------------------
000014F2                            ; Subroutine for issuing all VDP commands that were queued
000014F2                            ; (by earlier calls to QueueDMATransfer)
000014F2                            ; Resets the queue when it's done
000014F2                            ; ---------------------------------------------------------------------------
000014F2                            
000014F2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000014F2                            
000014F2                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA:
000014F2                            Process_DMA_Queue:
000014F2                            ProcessDMAQueue:
000014F2 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
000014F6 4EE9 0000                  	jmp	.jump_table-VDP_Command_Buffer(a1)
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            .jump_table:
000014FA 4E75                       	rts
000014FC                            	rept 6
000014FC                            		trap	#0											; Just in case
000014FC 4E40 4E40 4E40 4E40 4E40+  	endr
00001508                            ; ---------------------------------------------------------------------------
00001508 =00000001                      c: = 1
00001508                            	rept QueueSlotCount
00001508                            		lea	(vdp_control_port).l,a5
00001508                            		lea	(VDP_Command_Buffer).w,a1
00001508                            		if c<>QueueSlotCount
00001508                            			bra.w	.jump0 - c*8
00001508                            		endif
00001508                                c: = c + 1
00001600                            ; ---------------------------------------------------------------------------
00001600                            	rept QueueSlotCount
00001600                            		move.l	(a1)+,(a5)									; Transfer length
00001600                            		move.l	(a1)+,(a5)									; Source address high
00001600                            		move.l	(a1)+,(a5)									; Source address low + destination high
00001600                            		move.w	(a1)+,(a5)									; Destination low, trigger DMA
00001600 2A99 2A99 2A99 3A99 2A99+  	endr
00001690                            
00001690                            .jump0:
00001690 31FC C800 C8FC             	ResetDMAQueue
00001696 4E75                       	rts
00001698                            ; End of function ProcessDMAQueue
00001698                            ; ===========================================================================
00001698                            
00001698                            ; ---------------------------------------------------------------------------
00001698                            ; Subroutine for initializing the DMA queue.
00001698                            ; ---------------------------------------------------------------------------
00001698                            
00001698                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001698                            
00001698                            InitDMAQueue:
00001698 41F8 C800                  	lea	(VDP_Command_Buffer).w,a0
0000169C 7094                       	moveq	#-$6C,d0				; fast-store $94 (sign-extended) in d0
0000169E 223C 9397 9695             	move.l	#$93979695,d1
000016A4 =00000000                      c: = 0
000016A4                            	rept QueueSlotCount
000016A4                            		move.b	d0,c + DMAEntry.Reg94(a0)
000016A4                            		movep.l	d1,c + DMAEntry.Reg93(a0)
000016A4                                c: = c + DMAEntry.len
000016A4 1080 03C8 0002 1140 000E+  	endr
00001732                            
00001732 31FC C800 C8FC             	ResetDMAQueue
00001738 4E75                       	rts
0000173A                            ; End of function ProcessDMAQueue
0000173A                            ; ===========================================================================
0000173A                            
0000173A                            
0000173A                                popo	; buffer local label symbol config
0000173A                            
0000173A                            
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            ; Subroutine to load pattern load cues (aka to queue pattern load requests)
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            
0000173A                            ; ARGUMENTS
0000173A                            ; d0 = index of PLC list
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            
0000173A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000173A                            
0000173A                            ; LoadPLC:
0000173A                            AddPLC:
0000173A 48E7 0060                  		movem.l	a1-a2,-(sp)
0000173E 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001744 D040                       		add.w	d0,d0
00001746 3031 0000                  		move.w	(a1,d0.w),d0
0000174A 43F1 0000                  		lea	(a1,d0.w),a1		; jump to relevant PLC
0000174E 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space
00001752                            
00001752                            	@findspace:
00001752 4A92                       		tst.l	(a2)		; is space available in RAM?
00001754 6700                       		beq.s	@copytoRAM	; if yes, branch
00001756 5C4A                       		addq.w	#6,a2		; if not, try next space
00001758 60F8                       		bra.s	@findspace
0000175A                            ; ===========================================================================
0000175A                            
0000175A                            @copytoRAM:
0000175A 3019                       		move.w	(a1)+,d0	; get length of PLC
0000175C 6B00                       		bmi.s	@skip
0000175E                            
0000175E                            	@loop:
0000175E 24D9                       		move.l	(a1)+,(a2)+
00001760 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
00001762 51C8 FFFA                  		dbf	d0,@loop	; repeat for length of PLC
00001766                            
00001766                            	@skip:
00001766 4CDF 0600                  		movem.l	(sp)+,a1-a2 ; a1=object
0000176A 4E75                       		rts	
0000176C                            ; End of function AddPLC
0000176C                            
0000176C                            
0000176C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000176C                            ; Queue pattern load requests, but clear the PLQ first
0000176C                            
0000176C                            ; ARGUMENTS
0000176C                            ; d0 = index of PLC list (see ArtLoadCues)
0000176C                            
0000176C                            ; NOTICE: This subroutine does not check for buffer overruns. The programmer
0000176C                            ;	  (or hacker) is responsible for making sure that no more than
0000176C                            ;	  16 load requests are copied into the buffer.
0000176C                            ;	  _________DO NOT PUT MORE THAN 16 LOAD REQUESTS IN A LIST!__________
0000176C                            ;         (or if you change the size of Plc_Buffer, the limit becomes (Plc_Buffer_Only_End-Plc_Buffer)/6)
0000176C                            
0000176C                            ; LoadPLC2:
0000176C                            NewPLC:
0000176C 48E7 0060                  		movem.l	a1-a2,-(sp)
00001770 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001776 D040                       		add.w	d0,d0
00001778 3031 0000                  		move.w	(a1,d0.w),d0
0000177C 43F1 0000                  		lea	(a1,d0.w),a1	; jump to relevant PLC
00001780 6100                       		bsr.s	ClearPLC	; erase any data in PLC buffer space
00001782 45F8 F680                  		lea	(v_plc_buffer).w,a2
00001786 3019                       		move.w	(a1)+,d0	; get length of PLC
00001788 6B00                       		bmi.s	@skip		; if it's negative, skip the next loop
0000178A                            
0000178A                            	@loop:
0000178A 24D9                       		move.l	(a1)+,(a2)+
0000178C 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
0000178E 51C8 FFFA                  		dbf	d0,@loop		; repeat for length of PLC
00001792                            
00001792                            	@skip:
00001792 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001796 4E75                       		rts	
00001798                            ; End of function NewPLC
00001798                            
00001798                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001798                            
00001798                            ; ---------------------------------------------------------------------------
00001798                            ; Subroutine to	clear the pattern load cues
00001798                            ; ---------------------------------------------------------------------------
00001798                            
00001798                            ; Clear the pattern load queue ($FFF680 - $FFF700)
00001798                            
00001798                            
00001798                            ClearPLC:
00001798 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space in RAM
0000179C 701F                       		moveq	#$1F,d0	; bytesToLcnt(v_plc_buffer_end-v_plc_buffer)
0000179E                            
0000179E                            	@loop:
0000179E 429A                       		clr.l	(a2)+
000017A0 51C8 FFFC                  		dbf	d0,@loop
000017A4 4E75                       		rts	
000017A6                            ; End of function ClearPLC
000017A6                            
000017A6                            ; ---------------------------------------------------------------------------
000017A6                            ; Subroutine to	use graphics listed in a pattern load cue
000017A6                            ; ---------------------------------------------------------------------------
000017A6                            
000017A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A6                            
000017A6                            
000017A6                            RunPLC:
000017A6 4AB8 F680                  		tst.l	(v_plc_buffer).w
000017AA 6700                       		beq.s	Rplc_Exit
000017AC 4A78 F6F8                  		tst.w	(f_plc_execute).w
000017B0 6600                       		bne.s	Rplc_Exit
000017B2 2078 F680                  		movea.l	(v_plc_buffer).w,a0
000017B6 47F9 0000 13FC             		lea	(NemPCD_WriteRowToVDP).l,a3
000017BC 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
000017C0 3418                       		move.w	(a0)+,d2
000017C2 6A00                       		bpl.s	loc_160E
000017C4 D6FC 000A                  		adda.w	#$A,a3
000017C8                            
000017C8                            loc_160E:
000017C8 0242 7FFF                  		andi.w	#$7FFF,d2
000017CC 31C2 F6F8                  		move.w	d2,(f_plc_execute).w
000017D0 6100 FC56                  		bsr.w	NemDec_BuildCodeTable
000017D4 1A18                       		move.b	(a0)+,d5
000017D6 E145                       		asl.w	#8,d5
000017D8 1A18                       		move.b	(a0)+,d5
000017DA 7C10                       		moveq	#$10,d6
000017DC 7000                       		moveq	#0,d0
000017DE 21C8 F680                  		move.l	a0,(v_plc_buffer).w
000017E2 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
000017E6 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000017EA 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
000017EE 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000017F2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000017F6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000017FA                            
000017FA                            Rplc_Exit:
000017FA 4E75                       		rts	
000017FC                            ; End of function RunPLC
000017FC                            
000017FC                            
000017FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017FC                            
000017FC                            
000017FC                            sub_1642:
000017FC 4A78 F6F8                  		tst.w	(f_plc_execute).w
00001800 6700 0000                  		beq.w	locret_16DA
00001804 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
0000180A 7000                       		moveq	#0,d0
0000180C 3038 F684                  		move.w	($FFFFF684).w,d0
00001810 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001816 6000                       		bra.s	loc_1676
00001818                            ; End of function sub_1642
00001818                            
00001818                            
00001818                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001818                            
00001818                            
00001818                            ; sub_165E:
00001818                            ProcessDPLC2:
00001818 4A78 F6F8                  		tst.w	(f_plc_execute).w
0000181C 6700                       		beq.s	locret_16DA
0000181E 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001824 7000                       		moveq	#0,d0
00001826 3038 F684                  		move.w	($FFFFF684).w,d0
0000182A 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001830                            
00001830                            loc_1676:
00001830 49F9 00C0 0004             		lea	(vdp_control_port).l,a4
00001836 E588                       		lsl.l	#2,d0
00001838 E448                       		lsr.w	#2,d0
0000183A 0040 4000                  		ori.w	#$4000,d0
0000183E 4840                       		swap	d0
00001840 2880                       		move.l	d0,(a4)
00001842 594C                       		subq.w	#4,a4
00001844 2078 F680                  		movea.l	(v_plc_buffer).w,a0
00001848 2678 F6E0                  		movea.l	(v_ptrnemcode).w,a3
0000184C 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001850 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001854 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001858 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
0000185C 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001860 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001864                            
00001864                            loc_16AA:
00001864 3A7C 0008                  		movea.w	#8,a5
00001868 6100 FB5C                  		bsr.w	NemPCD_NewRow
0000186C 5378 F6F8                  		subq.w	#1,(f_plc_execute).w
00001870 6700                       		beq.s	loc_16DC
00001872 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00001876 66EC                       		bne.s	loc_16AA
00001878 21C8 F680                  		move.l	a0,(v_plc_buffer).w
0000187C 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
00001880 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001884 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001888 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
0000188C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001890 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001894                            
00001894                            locret_16DA:
00001894 4E75                       		rts	
00001896                            ; ===========================================================================
00001896                            
00001896                            loc_16DC:
00001896 41F8 F680                  		lea	(v_plc_buffer).w,a0
0000189A 7015                       		moveq	#$15,d0
0000189C                            
0000189C                            loc_16E2:
0000189C 20E8 0006                  		move.l	6(a0),(a0)+
000018A0 51C8 FFFA                  		dbf	d0,loc_16E2
000018A4 4E75                       		rts	
000018A6                            ; End of function ProcessDPLC2
000018A6                            
000018A6                            ; ---------------------------------------------------------------------------
000018A6                            ; Subroutine to	execute	the pattern load cue
000018A6                            ; ---------------------------------------------------------------------------
000018A6                            
000018A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018A6                            
000018A6                            
000018A6                            QuickPLC:
000018A6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000018AC D040                       		add.w	d0,d0
000018AE 3031 0000                  		move.w	(a1,d0.w),d0
000018B2 43F1 0000                  		lea	(a1,d0.w),a1
000018B6 3219                       		move.w	(a1)+,d1	; get length of PLC
000018B8                            
000018B8                            	Qplc_Loop:
000018B8 2059                       		movea.l	(a1)+,a0	; get art pointer
000018BA 7000                       		moveq	#0,d0
000018BC 3019                       		move.w	(a1)+,d0	; get VRAM address
000018BE E588                       		lsl.l	#2,d0
000018C0 E448                       		lsr.w	#2,d0
000018C2 0040 4000                  		ori.w	#$4000,d0
000018C6 4840                       		swap	d0
000018C8 23C0 00C0 0004             		move.l	d0,(vdp_control_port).l ; converted VRAM address to VDP format
000018CE 6100 FA7E                  		bsr.w	NemDec		; decompress
000018D2 51C9 FFE4                  		dbf	d1,Qplc_Loop	; repeat for length of PLC
000018D6 4E75                       		rts	
000018D8                            ; End of function QuickPLC
000018D8                            
000018D8                            		include	"_inc\Enigma Decompression.asm"
000018D8                            ; ---------------------------------------------------------------------------
000018D8                            ; Enigma decompression algorithm
000018D8                            
000018D8                            ; input:
000018D8                            ;	d0 = starting art tile (added to each 8x8 before writing to destination)
000018D8                            ;	a0 = source address
000018D8                            ;	a1 = destination address
000018D8                            
000018D8                            ; usage:
000018D8                            ;	lea	(source).l,a0
000018D8                            ;	lea	(destination).l,a1
000018D8                            ;	move.w	#arttile,d0
000018D8                            ;	bsr.w	EniDec
000018D8                            
000018D8                            ; See http://www.segaretro.org/Enigma_compression for format description
000018D8                            ; ---------------------------------------------------------------------------
000018D8                            
000018D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018D8                            
000018D8                            
000018D8                            EniDec:
000018D8 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
000018DC 3640                       		movea.w	d0,a3		; store starting art tile
000018DE 1018                       		move.b	(a0)+,d0
000018E0 4880                       		ext.w	d0
000018E2 3A40                       		movea.w	d0,a5		; store number of bits in inline copy value
000018E4 1818                       		move.b	(a0)+,d4
000018E6 E70C                       		lsl.b	#3,d4		; store PCCVH flags bitfield
000018E8 3458                       		movea.w	(a0)+,a2
000018EA D4CB                       		adda.w	a3,a2		; store incremental copy word
000018EC 3858                       		movea.w	(a0)+,a4
000018EE D8CB                       		adda.w	a3,a4		; store literal copy word
000018F0 1A18                       		move.b	(a0)+,d5
000018F2 E145                       		asl.w	#8,d5
000018F4 1A18                       		move.b	(a0)+,d5	; get first word in format list
000018F6 7C10                       		moveq	#16,d6		; initial shift value
000018F8                            ; loc_173E:
000018F8                            Eni_Loop:
000018F8 7007                       		moveq	#7,d0		; assume a format list entry is 7 bits
000018FA 3E06                       		move.w	d6,d7
000018FC 9E40                       		sub.w	d0,d7
000018FE 3205                       		move.w	d5,d1
00001900 EE69                       		lsr.w	d7,d1
00001902 0241 007F                  		andi.w	#$7F,d1		; get format list entry
00001906 3401                       		move.w	d1,d2		; and copy it
00001908 0C41 0040                  		cmpi.w	#$40,d1		; is the high bit of the entry set?
0000190C 6400                       		bhs.s	@sevenbitentry
0000190E 7006                       		moveq	#6,d0		; if it isn't, the entry is actually 6 bits
00001910 E24A                       		lsr.w	#1,d2
00001912                            ; loc_1758:
00001912                            @sevenbitentry:
00001912 6100 0000                  		bsr.w	EniDec_FetchByte
00001916 0242 000F                  		andi.w	#$F,d2		; get repeat count
0000191A E849                       		lsr.w	#4,d1
0000191C D241                       		add.w	d1,d1
0000191E 4EFB 1000                  		jmp	EniDec_Index(pc,d1.w)
00001922                            ; End of function EniDec
00001922                            
00001922                            ; ===========================================================================
00001922                            ; loc_1768:
00001922                            EniDec_00:
00001922 32CA                       @loop:		move.w	a2,(a1)+	; copy incremental copy word
00001924 524A                       		addq.w	#1,a2		; increment it
00001926 51CA FFFA                  		dbf	d2,@loop	; repeat
0000192A 60CC                       		bra.s	Eni_Loop
0000192C                            ; ===========================================================================
0000192C                            ; loc_1772:
0000192C                            EniDec_01:
0000192C 32CC                       @loop:		move.w	a4,(a1)+	; copy literal copy word
0000192E 51CA FFFC                  		dbf	d2,@loop	; repeat
00001932 60C4                       		bra.s	Eni_Loop
00001934                            ; ===========================================================================
00001934                            ; loc_177A:
00001934                            EniDec_100:
00001934 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001938                            ; loc_177E:
00001938 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
0000193A 51CA FFFC                  		dbf	d2,@loop	; repeat
0000193E                            
0000193E 60B8                       		bra.s	Eni_Loop
00001940                            ; ===========================================================================
00001940                            ; loc_1786:
00001940                            EniDec_101:
00001940 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001944                            ; loc_178A:
00001944 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001946 5241                       		addq.w	#1,d1		; increment
00001948 51CA FFFA                  		dbf	d2,@loop	; repeat
0000194C                            
0000194C 60AA                       		bra.s	Eni_Loop
0000194E                            ; ===========================================================================
0000194E                            ; loc_1794:
0000194E                            EniDec_110:
0000194E 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001952                            ; loc_1798:
00001952 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001954 5341                       		subq.w	#1,d1		; decrement
00001956 51CA FFFA                  		dbf	d2,@loop	; repeat
0000195A                            
0000195A 609C                       		bra.s	Eni_Loop
0000195C                            ; ===========================================================================
0000195C                            ; loc_17A2:
0000195C                            EniDec_111:
0000195C 0C42 000F                  		cmpi.w	#$F,d2
00001960 6700                       		beq.s	EniDec_Done
00001962                            ; loc_17A8:
00001962 6100 0000                  @loop:		bsr.w	EniDec_FetchInlineValue	; fetch new inline value
00001966 32C1                       		move.w	d1,(a1)+	; copy it
00001968 51CA FFF8                  		dbf	d2,@loop	; and repeat
0000196C                            
0000196C 608A                       		bra.s	Eni_Loop
0000196E                            ; ===========================================================================
0000196E                            ; loc_17B4:
0000196E                            EniDec_Index:
0000196E 60B2                       		bra.s	EniDec_00
00001970 60B0                       		bra.s	EniDec_00
00001972 60B8                       		bra.s	EniDec_01
00001974 60B6                       		bra.s	EniDec_01
00001976 60BC                       		bra.s	EniDec_100
00001978 60C6                       		bra.s	EniDec_101
0000197A 60D2                       		bra.s	EniDec_110
0000197C 60DE                       		bra.s	EniDec_111
0000197E                            ; ===========================================================================
0000197E                            ; loc_17C4:
0000197E                            EniDec_Done:
0000197E 5348                       		subq.w	#1,a0		; go back by one byte
00001980 0C46 0010                  		cmpi.w	#16,d6		; were we going to start on a completely new byte?
00001984 6600                       		bne.s	@notnewbyte	; if not, branch
00001986 5348                       		subq.w	#1,a0		; and another one if needed
00001988                            ; loc_17CE:
00001988                            @notnewbyte:
00001988 3008                       		move.w	a0,d0
0000198A E248                       		lsr.w	#1,d0		; are we on an odd byte?
0000198C 6400                       		bcc.s	@evenbyte	; if not, branch
0000198E 5248                       		addq.w	#1,a0		; ensure we're on an even byte
00001990                            ; loc_17D6:
00001990                            @evenbyte:
00001990 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001994 4E75                       		rts	
00001996                            
00001996                            ; ---------------------------------------------------------------------------
00001996                            ; Part of the Enigma decompressor
00001996                            ; Fetches an inline copy value and stores it in d1
00001996                            ; ---------------------------------------------------------------------------
00001996                            
00001996                            ; =============== S U B R O U T I N E =======================================
00001996                            
00001996                            ; loc_17DC:
00001996                            EniDec_FetchInlineValue:
00001996 360B                       		move.w	a3,d3		; copy starting art tile
00001998 1204                       		move.b	d4,d1		; copy PCCVH bitfield
0000199A D201                       		add.b	d1,d1		; is the priority bit set?
0000199C 6400                       		bcc.s	@skippriority	; if not, branch
0000199E 5346                       		subq.w	#1,d6
000019A0 0D05                       		btst	d6,d5		; is the priority bit set in the inline render flags?
000019A2 6700                       		beq.s	@skippriority	; if not, branch
000019A4 0043 8000                  		ori.w	#$8000,d3	; otherwise set priority bit in art tile
000019A8                            ; loc_17EE:
000019A8                            @skippriority:
000019A8 D201                       		add.b	d1,d1		; is the high palette line bit set?
000019AA 6400                       		bcc.s	@skiphighpal	; if not, branch
000019AC 5346                       		subq.w	#1,d6
000019AE 0D05                       		btst	d6,d5
000019B0 6700                       		beq.s	@skiphighpal
000019B2 0643 4000                  		addi.w	#$4000,d3	; set second palette line bit
000019B6                            ; loc_17FC:
000019B6                            @skiphighpal:
000019B6 D201                       		add.b	d1,d1		; is the low palette line bit set?
000019B8 6400                       		bcc.s	@skiplowpal	; if not, branch
000019BA 5346                       		subq.w	#1,d6
000019BC 0D05                       		btst	d6,d5
000019BE 6700                       		beq.s	@skiplowpal
000019C0 0643 2000                  		addi.w	#$2000,d3	; set first palette line bit
000019C4                            ; loc_180A:
000019C4                            @skiplowpal:
000019C4 D201                       		add.b	d1,d1		; is the vertical flip flag set?
000019C6 6400                       		bcc.s	@skipyflip	; if not, branch
000019C8 5346                       		subq.w	#1,d6
000019CA 0D05                       		btst	d6,d5
000019CC 6700                       		beq.s	@skipyflip
000019CE 0043 1000                  		ori.w	#$1000,d3	; set Y-flip bit
000019D2                            ; loc_1818:
000019D2                            @skipyflip:
000019D2 D201                       		add.b	d1,d1		; is the horizontal flip flag set?
000019D4 6400                       		bcc.s	@skipxflip	; if not, branch
000019D6 5346                       		subq.w	#1,d6
000019D8 0D05                       		btst	d6,d5
000019DA 6700                       		beq.s	@skipxflip
000019DC 0043 0800                  		ori.w	#$800,d3	; set X-flip bit
000019E0                            ; loc_1826:
000019E0                            @skipxflip:
000019E0 3205                       		move.w	d5,d1
000019E2 3E06                       		move.w	d6,d7
000019E4 9E4D                       		sub.w	a5,d7		; subtract length in bits of inline copy value
000019E6 6400                       		bcc.s	@enoughbits	; branch if a new word doesn't need to be read
000019E8 3C07                       		move.w	d7,d6
000019EA 0646 0010                  		addi.w	#16,d6
000019EE 4447                       		neg.w	d7		; calculate bit deficit
000019F0 EF69                       		lsl.w	d7,d1		; and make space for that many bits
000019F2 1A10                       		move.b	(a0),d5		; get next byte
000019F4 EF3D                       		rol.b	d7,d5		; and rotate the required bits into the lowest positions
000019F6 DE47                       		add.w	d7,d7
000019F8 CA7B 7000                  		and.w	EniDec_Masks-2(pc,d7.w),d5
000019FC D245                       		add.w	d5,d1		; combine upper bits with lower bits
000019FE                            ; loc_1844:
000019FE                            @maskvalue:
000019FE 300D                       		move.w	a5,d0		; get length in bits of inline copy value
00001A00 D040                       		add.w	d0,d0
00001A02 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; mask value appropriately
00001A06 D243                       		add.w	d3,d1		; add starting art tile
00001A08 1A18                       		move.b	(a0)+,d5
00001A0A E14D                       		lsl.w	#8,d5
00001A0C 1A18                       		move.b	(a0)+,d5	; get next word
00001A0E 4E75                       		rts	
00001A10                            ; ===========================================================================
00001A10                            ; loc_1856:
00001A10                            @enoughbits:
00001A10 6700                       		beq.s	@justenough	; if the word has been exactly exhausted, branch
00001A12 EE69                       		lsr.w	d7,d1	; get inline copy value
00001A14 300D                       		move.w	a5,d0
00001A16 D040                       		add.w	d0,d0
00001A18 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; and mask it appropriately
00001A1C D243                       		add.w	d3,d1	; add starting art tile
00001A1E 300D                       		move.w	a5,d0
00001A20 6000                       		bra.s	EniDec_FetchByte
00001A22                            ; ===========================================================================
00001A22                            ; loc_1868:
00001A22                            @justenough:
00001A22 7C10                       		moveq	#16,d6	; reset shift value
00001A24 60D8                       		bra.s	@maskvalue
00001A26                            ; ===========================================================================
00001A26                            ; word_186C:
00001A26                            EniDec_Masks:
00001A26 0001 0003 0007 000F        		dc.w	 1,    3,    7,   $F
00001A2E 001F 003F 007F 00FF        		dc.w   $1F,  $3F,  $7F,  $FF
00001A36 01FF 03FF 07FF 0FFF        		dc.w  $1FF, $3FF, $7FF, $FFF
00001A3E 1FFF 3FFF 7FFF FFFF        		dc.w $1FFF,$3FFF,$7FFF,$FFFF
00001A46                            
00001A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A46                            
00001A46                            ; sub_188C:
00001A46                            EniDec_FetchByte:
00001A46 9C40                       		sub.w	d0,d6	; subtract length of current entry from shift value so that next entry is read next time around
00001A48 0C46 0009                  		cmpi.w	#9,d6	; does a new byte need to be read?
00001A4C 6400                       		bhs.s	@locret	; if not, branch
00001A4E 5046                       		addq.w	#8,d6
00001A50 E145                       		asl.w	#8,d5
00001A52 1A18                       		move.b	(a0)+,d5
00001A54                            @locret:
00001A54 4E75                       		rts	
00001A56                            ; End of function EniDec_FetchByte
00001A56                            ; End of function EniDec_FetchByte
00001A56                            		include	"_inc\Kosinski Decompression.asm"
00001A56                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001A56                            ; ---------------------------------------------------------------------------
00001A56                            ; KOSINSKI DECOMPRESSION PROCEDURE
00001A56                            ; (sometimes called KOZINSKI decompression)
00001A56                            ;
00001A56                            ; ARGUMENTS:
00001A56                            ; a0 = source address
00001A56                            ; a1 = destination address
00001A56                            ;
00001A56                            ; For format explanation see http://info.sonicretro.org/Kosinski@compression
00001A56                            ; New faster version by written by vladikcomper, with additional improvements by
00001A56                            ; MarkeyJester and Flamewing
00001A56                            ; Converted to ASM68K by Beta Filter.
00001A56                            ; ---------------------------------------------------------------------------
00001A56 =00000001                  Kos_UseLUT: equ 1
00001A56 =00000003                  Kos_LoopUnroll: equ 3
00001A56 =00000001                  Kos_ExtremeUnrolling: equ 1
00001A56                            
00001A56                            Kos_RunBitStream macro
00001A56                                dbra    d2,@skip\@
00001A56                                moveq   #7,d2                   ; Set repeat count to 8.
00001A56                                move.b  d1,d0                   ; Use the remaining 8 bits.
00001A56                                not.w   d3                      ; Have all 16 bits been used up?
00001A56                                bne.s   @skip\@                   ; Branch if not.
00001A56                                move.b  (a0)+,d0                ; Get desc field low-byte.
00001A56                                move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A56                                if Kos_UseLUT=1
00001A56                                move.b  (a4,d0.w),d0            ; Invert bit order...
00001A56                                move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A56                                endif
00001A56                            @skip\@
00001A56                                endm
00001A56                            
00001A56                            Kos_ReadBit macro
00001A56                                if Kos_UseLUT=1
00001A56                                add.b   d0,d0                   ; Get a bit from the bitstream.
00001A56                                else
00001A56                                lsr.b   #1,d0                   ; Get a bit from the bitstream.
00001A56                                endif
00001A56                                endm
00001A56                            ; ===========================================================================
00001A56                            ; KozDec@193A:
00001A56                            KosDec:
00001A56 7E07                           moveq   #(1<<Kos_LoopUnroll)-1,d7
00001A58 7000                           moveq   #0,d0
00001A5A 7200                           moveq   #0,d1
00001A5C 49FA 0000                      lea KosDec_ByteMap(pc),a4       ; Load LUT pointer.
00001A60 1018                           move.b  (a0)+,d0                ; Get desc field low-byte.
00001A62 1218                           move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A64 1034 0000                      move.b  (a4,d0.w),d0            ; Invert bit order...
00001A68 1234 1000                      move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A6C 7407                           moveq   #7,d2                   ; Set repeat count to 8.
00001A6E 7600                           moveq   #0,d3                   ; d3 will be desc field switcher.
00001A70 6000                           bra.s   @FetchNewCode
00001A72                            ; ---------------------------------------------------------------------------
00001A72                            @FetchCodeLoop:
00001A72                                ; Code 1 (Uncompressed byte).
00001A8A 12D8                           move.b  (a0)+,(a1)+
00001A8C                            
00001A8C                            @FetchNewCode:
00001A8E 65E2                           bcs.s   @FetchCodeLoop          ; If code = 1, branch.
00001A90                            
00001A90                                ; Codes 00 and 01.
00001A90 7AFF                           moveq   #-1,d5
00001A92 4BD1                           lea (a1),a5
00001AAE 6500 0000                      bcs.w   @Code_01
00001AB2                            
00001AB2                                ; Code 00 (Dictionary ref. short).
00001ACC 6500                           bcs.s   @Copy45
00001AE8 6500                           bcs.s   @Copy3
00001B02 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B04 DAC5                           adda.w  d5,a5
00001B06 12DD                           move.b  (a5)+,(a1)+
00001B08 12DD                           move.b  (a5)+,(a1)+
00001B0A 6080                           bra.s   @FetchNewCode
00001B0C                            ; ---------------------------------------------------------------------------
00001B0C                            @Copy3:
00001B24 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B26 DAC5                           adda.w  d5,a5
00001B28 12DD                           move.b  (a5)+,(a1)+
00001B2A 12DD                           move.b  (a5)+,(a1)+
00001B2C 12DD                           move.b  (a5)+,(a1)+
00001B2E 6000 FF5C                      bra.w   @FetchNewCode
00001B32                            ; ---------------------------------------------------------------------------
00001B32                            @Copy45:
00001B4C 6500                           bcs.s   @Copy5
00001B66 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B68 DAC5                           adda.w  d5,a5
00001B6A 12DD                           move.b  (a5)+,(a1)+
00001B6C 12DD                           move.b  (a5)+,(a1)+
00001B6E 12DD                           move.b  (a5)+,(a1)+
00001B70 12DD                           move.b  (a5)+,(a1)+
00001B72 6000 FF18                      bra.w   @FetchNewCode
00001B76                            ; ---------------------------------------------------------------------------
00001B76                            @Copy5:
00001B8E 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B90 DAC5                           adda.w  d5,a5
00001B92 12DD                           move.b  (a5)+,(a1)+
00001B94 12DD                           move.b  (a5)+,(a1)+
00001B96 12DD                           move.b  (a5)+,(a1)+
00001B98 12DD                           move.b  (a5)+,(a1)+
00001B9A 12DD                           move.b  (a5)+,(a1)+
00001B9C 6000 FEEE                      bra.w   @FetchNewCode
00001BA0                            ; ---------------------------------------------------------------------------
00001BA0                            ; ---------------------------------------------------------------------------
00001BA0                            @Code_01:
00001BA0 7800                           moveq   #0,d4                   ; d4 will contain copy count.
00001BA2                                ; Code 01 (Dictionary ref. long / special).
00001BBA 1C18                           move.b  (a0)+,d6                ; d6 = %LLLLLLLL.
00001BBC 1818                           move.b  (a0)+,d4                ; d4 = %HHHHHCCC.
00001BBE 1A04                           move.b  d4,d5                   ; d5 = %11111111 HHHHHCCC.
00001BC0 EB4D                           lsl.w   #5,d5                   ; d5 = %111HHHHH CCC00000.
00001BC2 1A06                           move.b  d6,d5                   ; d5 = %111HHHHH LLLLLLLL.
00001BC4 C847                           and.w   d7,d4                   ; d4 = %00000CCC.
00001BC6 6600                           bne.s   @StreamCopy             ; if CCC=0, branch.
00001BC8                            
00001BC8                                ; special mode (extended counter)
00001BC8 1818                           move.b  (a0)+,d4                ; Read cnt
00001BCA 6700                           beq.s   @Quit                   ; If cnt=0, quit decompression.
00001BCC 5304                           subq.b  #1,d4
00001BCE 6700 FEBC                      beq.w   @FetchNewCode           ; If cnt=1, fetch a new code.
00001BD2                            
00001BD2 DAC5                           adda.w  d5,a5
00001BD4 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001BD6 3C04                           move.w  d4,d6
00001BD8 4646                           not.w   d6
00001BDA CC47                           and.w   d7,d6
00001BDC DC46                           add.w   d6,d6
00001BDE E64C                           lsr.w   #Kos_LoopUnroll,d4
00001BE0 4EFB 6000                      jmp @largecopy(pc,d6.w)
00001BE4                            ; ---------------------------------------------------------------------------
00001BE4                            @largecopy:
00001BE4                                rept (1<<Kos_LoopUnroll)
00001BE4                                move.b  (a5)+,(a1)+
00001BE4 12DD 12DD 12DD 12DD 12DD+      endr
00001BF4 51CC FFEE                      dbra    d4,@largecopy
00001BF8 6000 FE92                      bra.w   @FetchNewCode
00001BFC                            ; ---------------------------------------------------------------------------
00001BFC                            @StreamCopy:
00001BFC DAC5                           adda.w  d5,a5
00001BFE 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001C00 BF44                           eor.w   d7,d4
00001C02 D844                           add.w   d4,d4
00001C04 4EFB 4000                      jmp @mediumcopy(pc,d4.w)
00001C08                            ; ---------------------------------------------------------------------------
00001C08                            @mediumcopy:
00001C08                                rept 8
00001C08                                move.b  (a5)+,(a1)+
00001C08 12DD 12DD 12DD 12DD 12DD+      endr
00001C18 6000 FE72                      bra.w   @FetchNewCode
00001C1C                            ; ---------------------------------------------------------------------------
00001C1C                            @Quit:
00001C1C 4E75                           rts                             ; End of function KosDec.
00001C1E                            ; ===========================================================================
00001C1E                            KosDec_ByteMap:
00001C1E 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
00001C2E 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
00001C3E 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
00001C4E 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
00001C5E 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
00001C6E 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
00001C7E 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00001C8E 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00001C9E 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00001CAE 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00001CBE 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00001CCE 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001CDE 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001CEE 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001CFE 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001D0E 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001D1E                            ; ===========================================================================
00001D1E                            ; ===========================================================================
00001D1E                            
00001D1E                            		include	"_inc\PaletteCycle.asm"
00001D1E                            ; ---------------------------------------------------------------------------
00001D1E                            ; Palette cycling routine loading subroutine
00001D1E                            ; ---------------------------------------------------------------------------
00001D1E                            
00001D1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D1E                            
00001D1E                            
00001D1E                            PaletteCycle:
00001D1E 6100 0000                  		bsr.w	PalCycle_SuperSonic	
00001D22 7400                       		moveq	#0,d2
00001D24 7000                       		moveq	#0,d0
00001D26 1038 FE10                  		move.b	(v_zone).w,d0	; get level number
00001D2A D040                       		add.w	d0,d0
00001D2C 303B 0000                  		move.w	PCycle_Index(pc,d0.w),d0
00001D30 4EFB 0000                  		jmp	PCycle_Index(pc,d0.w) ; jump to relevant palette routine
00001D34                            ; End of function PaletteCycle
00001D34                            
00001D34                            ; ===========================================================================
00001D34                            ; ---------------------------------------------------------------------------
00001D34                            ; Palette cycling routines
00001D34                            ; ---------------------------------------------------------------------------
00001D34 0000                       PCycle_Index:	dc.w PCycle_GHZ-PCycle_Index
00001D36 0000                       		dc.w PCycle_LZ-PCycle_Index
00001D38 0000                       		dc.w PCycle_MZ-PCycle_Index
00001D3A 0000                       		dc.w PalCycle_SLZ-PCycle_Index
00001D3C 0000                       		dc.w PalCycle_SYZ-PCycle_Index
00001D3E 0000                       		dc.w PalCycle_SBZ-PCycle_Index
00001D40 0000                       		dc.w PCycle_GHZ-PCycle_Index	; Ending
00001D42                            
00001D42                            
00001D42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D42                            
00001D42                            
00001D42                            PCycle_Title:
00001D42 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001D48 6000                       		bra.s	PCycGHZ_Go
00001D4A                            ; ===========================================================================
00001D4A                            
00001D4A                            PCycle_GHZ:
00001D4A 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001D50                            
00001D50                            PCycGHZ_Go:
00001D50 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D54 6A00                       		bpl.s	PCycGHZ_Skip	; if time remains, branch
00001D56                            
00001D56 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 5 frames
00001D5C 3038 F632                  		move.w	(v_pcyc_num).w,d0 ; get cycle number
00001D60 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D64 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D68 E748                       		lsl.w	#3,d0
00001D6A 43F8 FB50                  		lea	(v_pal_dry+$50).w,a1
00001D6E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D72 22B0 0004                  		move.l	4(a0,d0.w),(a1)	; copy palette data to RAM
00001D76                            
00001D76                            PCycGHZ_Skip:
00001D76 4E75                       		rts	
00001D78                            ; End of function PCycle_GHZ
00001D78                            
00001D78                            
00001D78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D78                            
00001D78                            
00001D78                            PCycle_LZ:
00001D78                            ; Waterfalls
00001D78 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D7C 6A00                       		bpl.s	PCycLZ_Skip1	; if time remains, branch
00001D7E                            
00001D7E 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 2 frames
00001D84 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001D88 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D8C 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D90 E748                       		lsl.w	#3,d0
00001D92 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001D98 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; check if level is SBZ3
00001D9E 6600                       		bne.s	PCycLZ_NotSBZ3
00001DA0 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	palette instead
00001DA6                            
00001DA6                            	PCycLZ_NotSBZ3:
00001DA6 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001DAA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DAE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001DB2 43F8 FAD6                  		lea	(v_pal_water+$56).w,a1
00001DB6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DBA 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001DBE                            
00001DBE                            PCycLZ_Skip1:
00001DBE                            ; Conveyor belts
00001DBE                            		;move.w	(v_framecount).w,d0
00001DBE                            		;andi.w	#7,d0
00001DBE                            		;move.b	PCycLZ_Seq(pc,d0.w),d0 ; get byte from palette sequence
00001DBE                            		;beq.s	PCycLZ_Skip2	; if byte is 0, branch
00001DBE                            		;moveq	#1,d1
00001DBE                            		;tst.b	(f_conveyrev).w	; have conveyor belts been reversed?
00001DBE                            		;beq.s	PCycLZ_NoRev	; if not, branch
00001DBE                            		;neg.w	d1
00001DBE                            
00001DBE                            	;PCycLZ_NoRev:
00001DBE                            		;move.w	(v_pal_buffer).w,d0
00001DBE                            		;andi.w	#3,d0
00001DBE                            		;add.w	d1,d0
00001DBE                            		;cmpi.w	#3,d0
00001DBE                            		;bcs.s	loc_1A0A
00001DBE                            		;move.w	d0,d1
00001DBE                            		;moveq	#0,d0
00001DBE                            		;tst.w	d1
00001DBE                            		;bpl.s	loc_1A0A
00001DBE                            		;moveq	#2,d0
00001DBE                            
00001DBE                            ;loc_1A0A:
00001DBE                            		;move.w	d0,(v_pal_buffer).w
00001DBE                            		;add.w	d0,d0
00001DBE                            		;move.w	d0,d1
00001DBE                            		;add.w	d0,d0
00001DBE                            		;add.w	d1,d0
00001DBE                            		;lea	(Pal_LZCyc2).l,a0
00001DBE                            		;lea	(v_pal_dry+$76).w,a1
00001DBE                            		;move.l	(a0,d0.w),(a1)+
00001DBE                            		;move.w	4(a0,d0.w),(a1)
00001DBE                            		;lea	(Pal_LZCyc3).l,a0
00001DBE                            		;lea	(v_pal_water+$76).w,a1
00001DBE                            		;move.l	(a0,d0.w),(a1)+
00001DBE                            		;move.w	4(a0,d0.w),(a1)
00001DBE                            
00001DBE                            ;PCycLZ_Skip2:
00001DBE 4E75                       		rts	
00001DC0                            ; End of function PCycle_LZ
00001DC0                            
00001DC0                            ; ===========================================================================
00001DC0 0100 0001 0000 0100        PCycLZ_Seq:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001DC8                            ; ===========================================================================
00001DC8                            
00001DC8                            PCycle_MZ:
00001DC8 4E75                       		rts	
00001DCA                            
00001DCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DCA                            
00001DCA                            
00001DCA                            PalCycle_SLZ:
00001DCA 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001DCE 6A00                       		bpl.s	locret_1A80
00001DD0 31FC 0007 F634             		move.w	#7,(v_pcyc_time).w
00001DD6 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001DDA 5240                       		addq.w	#1,d0
00001DDC 0C40 0006                  		cmpi.w	#6,d0
00001DE0 6500                       		bcs.s	loc_1A60
00001DE2 7000                       		moveq	#0,d0
00001DE4                            
00001DE4                            loc_1A60:
00001DE4 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001DE8 3200                       		move.w	d0,d1
00001DEA D241                       		add.w	d1,d1
00001DEC D041                       		add.w	d1,d0
00001DEE D040                       		add.w	d0,d0
00001DF0 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001DF6 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001DFA 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001DFE 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001E04                            
00001E04                            locret_1A80:
00001E04 4E75                       		rts	
00001E06                            ; End of function PalCycle_SLZ
00001E06                            
00001E06                            
00001E06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E06                            
00001E06                            
00001E06                            PalCycle_SYZ:
00001E06 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E0A 6A00                       		bpl.s	locret_1AC6
00001E0C 31FC 0005 F634             		move.w	#5,(v_pcyc_time).w
00001E12 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001E16 5278 F632                  		addq.w	#1,(v_pcyc_num).w
00001E1A 0240 0003                  		andi.w	#3,d0
00001E1E E548                       		lsl.w	#2,d0
00001E20 3200                       		move.w	d0,d1
00001E22 D040                       		add.w	d0,d0
00001E24 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001E2A 43F8 FB6E                  		lea	(v_pal_dry+$6E).w,a1
00001E2E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001E32 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001E36 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001E3C 43F8 FB76                  		lea	(v_pal_dry+$76).w,a1
00001E40 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001E44 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001E4A                            
00001E4A                            locret_1AC6:
00001E4A 4E75                       		rts	
00001E4C                            ; End of function PalCycle_SYZ
00001E4C                            
00001E4C                            
00001E4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E4C                            
00001E4C                            
00001E4C                            PalCycle_SBZ:
00001E4C 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E52 4A38 FE11                  		tst.b	(v_act).w
00001E56 6700                       		beq.s	loc_1ADA
00001E58 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E5E                            
00001E5E                            loc_1ADA:
00001E5E 43F8 F650                  		lea	(v_pal_buffer).w,a1
00001E62 321A                       		move.w	(a2)+,d1
00001E64                            
00001E64                            loc_1AE0:
00001E64 5311                       		subq.b	#1,(a1)
00001E66 6B00                       		bmi.s	loc_1AEA
00001E68 5489                       		addq.l	#2,a1
00001E6A 5C8A                       		addq.l	#6,a2
00001E6C 6000                       		bra.s	loc_1B06
00001E6E                            ; ===========================================================================
00001E6E                            
00001E6E                            loc_1AEA:
00001E6E 12DA                       		move.b	(a2)+,(a1)+
00001E70 1011                       		move.b	(a1),d0
00001E72 5200                       		addq.b	#1,d0
00001E74 B01A                       		cmp.b	(a2)+,d0
00001E76 6500                       		bcs.s	loc_1AF6
00001E78 7000                       		moveq	#0,d0
00001E7A                            
00001E7A                            loc_1AF6:
00001E7A 12C0                       		move.b	d0,(a1)+
00001E7C 0240 000F                  		andi.w	#$F,d0
00001E80 D040                       		add.w	d0,d0
00001E82 305A                       		movea.w	(a2)+,a0
00001E84 365A                       		movea.w	(a2)+,a3
00001E86 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001E8A                            
00001E8A                            loc_1B06:
00001E8A 51C9 FFD8                  		dbf	d1,loc_1AE0
00001E8E 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E92 6A00                       		bpl.s	locret_1B64
00001E94 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001E9A 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w
00001EA0 4A38 FE11                  		tst.b	(v_act).w
00001EA4 6700                       		beq.s	loc_1B2E
00001EA6 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001EAC 31FC 0002 F634             		move.w	#2,(v_pcyc_time).w
00001EB2                            
00001EB2                            loc_1B2E:
00001EB2 72FF                       		moveq	#-1,d1
00001EB4 4A38 F7C0                  		tst.b	(f_conveyrev).w
00001EB8 6700                       		beq.s	loc_1B38
00001EBA 4441                       		neg.w	d1
00001EBC                            
00001EBC                            loc_1B38:
00001EBC 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001EC0 0240 0003                  		andi.w	#3,d0
00001EC4 D041                       		add.w	d1,d0
00001EC6 0C40 0003                  		cmpi.w	#3,d0
00001ECA 6500                       		bcs.s	loc_1B52
00001ECC 3200                       		move.w	d0,d1
00001ECE 7000                       		moveq	#0,d0
00001ED0 4A41                       		tst.w	d1
00001ED2 6A00                       		bpl.s	loc_1B52
00001ED4 7002                       		moveq	#2,d0
00001ED6                            
00001ED6                            loc_1B52:
00001ED6 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001EDA D040                       		add.w	d0,d0
00001EDC 43F8 FB58                  		lea	(v_pal_dry+$58).w,a1
00001EE0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001EE4 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001EE8                            
00001EE8                            locret_1B64:
00001EE8 4E75                       		rts	
00001EEA                            ; End of function PalCycle_SBZ
00001EEA                            
00001EEA                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001EEA                            
00001EEA                            ; sub_213E:
00001EEA                            PalCycle_SuperSonic:
00001EEA 7000                       		moveq	#0,d0
00001EEC 1038 F5D8                  		move.b	(Super_Sonic_palette).w,d0
00001EF0 6700                       		beq.s	PalCycle_SuperSonic_return	; rts	; return, if Sonic isn't super
00001EF2 6B00 0000                  		bmi.w	PalCycle_SuperSonic_normal	; branch, if fade-in is done
00001EF6 5300                       		subq.b	#1,d0
00001EF8 6600                       		bne.s	PalCycle_SuperSonic_revert	; branch for values greater than 1
00001EFA                            
00001EFA                            		; fade from Sonic's to Super Sonic's palette
00001EFA                            		; run frame timer
00001EFA 5338 F5DE                  		subq.b	#1,(Palette_timer).w
00001EFE 6A00                       		bpl.s	PalCycle_SuperSonic_return	; rts
00001F00 11FC 0003 F5DE             		move.b	#3,(Palette_timer).w
00001F06                            
00001F06                            		; increment palette frame and update Sonic's palette
00001F06 41F9 0000 0000             		lea	(CyclingPal_SSTransformation).l,a0
00001F0C 3038 F5DC                  		move.w	(Palette_frame).w,d0
00001F10 5078 F5DC                  		addq.w	#8,(Palette_frame).w	; 1 palette entry = 1 word, Sonic uses 4 shades of blue
00001F14 0C78 0030 F5DC             		cmpi.w	#$30,(Palette_frame).w	; has palette cycle reached the 6th frame?
00001F1A 6500                       		blo.s	PalCycle_SuperSonic_palettes			; if not, branch
00001F1C 11FC 00FF F5D8             		move.b	#-1,(Super_Sonic_palette).w	; mark fade-in as done
00001F22 11FC 0000 F7C8             		move.b	#0,($FFFFF7C8).w ; unfreeze Sonic	
00001F28 6000                       		bra.s		PalCycle_SuperSonic_palettes
00001F2A                            
00001F2A                            PalCycle_SuperSonic_return:
00001F2A 4E75                       		rts
00001F2C                            ; ===========================================================================
00001F2C                            ; loc_2188:
00001F2C                            PalCycle_SuperSonic_revert:	; runs the fade in transition backwards
00001F2C                            		; run frame timer
00001F2C 5338 F5DE                  		subq.b	#1,(Palette_timer).w
00001F30 6AF8                       		bpl.s	PalCycle_SuperSonic_return	; rts
00001F32 11FC 0003 F5DE             		move.b	#3,(Palette_timer).w
00001F38                            
00001F38                            		; decrement palette frame and update Sonic's palette
00001F38 41F9 0000 0000             		lea	(CyclingPal_SSTransformation).l,a0
00001F3E 3038 F5DC                  		move.w	(Palette_frame).w,d0
00001F42 5178 F5DC                  		subq.w	#8,(Palette_frame).w	; previous frame
00001F46 6400                       		bcc.s	PalCycle_SuperSonic_palettes			; branch, if it isn't the first frame
00001F48 31FC 0000 F5DC             		move.w	#0,(Palette_frame).w
00001F4E 11FC 0000 F5D8             		move.b	#0,(Super_Sonic_palette).w	; stop palette cycle
00001F54                            
00001F54                            PalCycle_SuperSonic_palettes:
00001F54 43F8 FB04                  		lea	(v_pal_dry+4).w,a1
00001F58 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001F5C 22B0 0004                  		move.l	4(a0,d0.w),(a1)	
00001F60 4E75                       		rts
00001F62                            ; ===========================================================================
00001F62                            ; loc_21E6:
00001F62                            PalCycle_SuperSonic_normal:
00001F62                            		; run frame timer
00001F62 5338 F5DE                  		subq.b	#1,(Palette_timer).w
00001F66 6AC2                       		bpl.s	PalCycle_SuperSonic_return	; rts
00001F68 11FC 0007 F5DE             		move.b	#7,(Palette_timer).w
00001F6E                            
00001F6E                            		; increment palette frame and update Sonic's palette
00001F6E 41F9 0000 0000             		lea	(CyclingPal_SSTransformation).l,a0
00001F74 3038 F5DC                  		move.w	(Palette_frame).w,d0
00001F78 5078 F5DC                  		addq.w	#8,(Palette_frame).w	; next frame
00001F7C 0C78 0078 F5DC             		cmpi.w	#$78,(Palette_frame).w	; is it the last frame?
00001F82 63D0                       		bls.s	PalCycle_SuperSonic_palettes			; if not, branch
00001F84 31FC 0030 F5DC             		move.w	#$30,(Palette_frame).w	; reset frame counter (Super Sonic's normal palette cycle starts at $30. Everything before that is for the palette fade)
00001F8A 60C8                       		bra.s	PalCycle_SuperSonic_palettes
00001F8C 4E75                       		rts
00001F8E                            ; End of function PalCycle_SuperSonic
00001F8E                            
00001F8E                            
00001F8E                            CyclingPal_SSTransformation:	incbin	"palette/Super.bin"
00001F8E                            CyclingPal_SSTransformation:	incbin	"palette/Super.bin"
0000200E                            
0000200E                            Pal_TitleCyc:	incbin	"palette\Cycle - Title Screen Water.bin"
0000202E                            Pal_GHZCyc:	incbin	"palette\Cycle - GHZ.bin"
0000204E                            Pal_LZCyc1:	incbin	"palette\Cycle - LZ Waterfall.bin"
0000206E                            Pal_LZCyc2:	incbin	"palette\Cycle - LZ Conveyor Belt.bin"
00002080                            Pal_LZCyc3:	incbin	"palette\Cycle - LZ Conveyor Belt Underwater.bin"
00002092                            Pal_SBZ3Cyc1:	incbin	"palette\Cycle - SBZ3 Waterfall.bin"
000020FA                            Pal_SLZCyc:	incbin	"palette\Cycle - SLZ.bin"
0000211E                            Pal_SYZCyc1:	incbin	"palette\Cycle - SYZ1.bin"
0000213E                            Pal_SYZCyc2:	incbin	"palette\Cycle - SYZ2.bin"
0000214E                            Pal_SYZCyc1_2:	incbin	"palette\Cycle - SYZ1 Act 2.bin"
0000216E                            Pal_SYZCyc2_2:	incbin	"palette\Cycle - SYZ2 Act 2.bin"
0000217E                            Pal_SYZCyc1_3:	incbin	"palette\Cycle - SYZ1 Act 3.bin"
0000219E                            Pal_SYZCyc2_3:	incbin	"palette\Cycle - SYZ2 Act 3.bin"
000021AE                            
000021AE                            		include	"_inc\SBZ Palette Scripts.asm"
000021AE                            ; ---------------------------------------------------------------------------
000021AE                            ; Scrap Brain Zone palette cycling script
000021AE                            ; ---------------------------------------------------------------------------
000021AE                            
000021AE                            mSBZp:	macro duration,colors,paladdress,ramaddress
000021AE                            	dc.b duration, colors
000021AE                            	dc.w paladdress, ramaddress
000021AE                            	endm
000021AE                            
000021AE                            ; duration in frames, number of colors, palette address, RAM address
000021AE                            
000021AE                            Pal_SBZCycList1:
000021AE 0000                       	dc.w ((end_SBZCycList1-Pal_SBZCycList1-2)/6)-1
000021B0 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
000021B6 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
000021BC 0E08 0000 FB6E             	mSBZp	$E,8,Pal_SBZCyc3,v_pal_dry+$6E
000021C2 0B08 0000 FB70             	mSBZp	$B,8,Pal_SBZCyc5,v_pal_dry+$70
000021C8 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
000021CE 1C10 0000 FB7E             	mSBZp	$1C,$10,Pal_SBZCyc7,v_pal_dry+$7E
000021D4 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
000021DA 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
000021E0 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
000021E6                            end_SBZCycList1:
000021E6                            	even
000021E6                            
000021E6                            Pal_SBZCycList2:
000021E6 0000                       	dc.w ((end_SBZCycList2-Pal_SBZCycList2-2)/6)-1
000021E8 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
000021EE 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
000021F4 0908 0000 FB70             	mSBZp	9,8,Pal_SBZCyc9,v_pal_dry+$70
000021FA 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00002200 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00002206 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
0000220C 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
00002212                            end_SBZCycList2:
00002212                            	even
00002212                            	even
00002212                            
00002212                            Pal_SBZCyc1:	incbin	"palette\Cycle - SBZ 1.bin"
00002222                            Pal_SBZCyc2:	incbin	"palette\Cycle - SBZ 2.bin"
00002232                            Pal_SBZCyc3:	incbin	"palette\Cycle - SBZ 3.bin"
00002242                            Pal_SBZCyc4:	incbin	"palette\Cycle - SBZ 4.bin"
0000224E                            Pal_SBZCyc5:	incbin	"palette\Cycle - SBZ 5.bin"
0000225E                            Pal_SBZCyc6:	incbin	"palette\Cycle - SBZ 6.bin"
0000226E                            Pal_SBZCyc7:	incbin	"palette\Cycle - SBZ 7.bin"
0000228E                            Pal_SBZCyc8:	incbin	"palette\Cycle - SBZ 8.bin"
00002298                            Pal_SBZCyc9:	incbin	"palette\Cycle - SBZ 9.bin"
000022A8                            Pal_SBZCyc10:	incbin	"palette\Cycle - SBZ 10.bin"
000022B4                            ; ---------------------------------------------------------------------------
000022B4                            ; Subroutine to	fade in from black
000022B4                            ; ---------------------------------------------------------------------------
000022B4                            
000022B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022B4                            
000022B4                            
000022B4                            PaletteFadeIn:
000022B4 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; set start position = 0; size = $40
000022BA                            
000022BA                            PalFadeIn_Alt:				; start position and size are already set
000022BA 7000                       		moveq	#0,d0
000022BC 41F8 FB00                  		lea	(v_pal_dry).w,a0
000022C0 1038 F626                  		move.b	(v_pfade_start).w,d0
000022C4 D0C0                       		adda.w	d0,a0
000022C6 7200                       		moveq	#cBlack,d1
000022C8 1038 F627                  		move.b	(v_pfade_size).w,d0
000022CC                            
000022CC                            	@fill:
000022CC 30C1                       		move.w	d1,(a0)+
000022CE 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with black
000022D2                            
000022D2 383C 0015                  		move.w	#$15,d4
000022D6                            
000022D6                            	@mainloop:
000022D6 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
000022DC 6100 0000                  		bsr.w	WaitForVBla
000022E0 6100                       		bsr.s	FadeIn_FromBlack
000022E2 6100 F4C2                  		bsr.w	RunPLC
000022E6 51CC FFEE                  		dbf	d4,@mainloop
000022EA 4E75                       		rts	
000022EC                            ; End of function PaletteFadeIn
000022EC                            
000022EC                            
000022EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022EC                            
000022EC                            
000022EC                            FadeIn_FromBlack:
000022EC 7000                       		moveq	#0,d0
000022EE 41F8 FB00                  		lea	(v_pal_dry).w,a0
000022F2 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
000022F6 1038 F626                  		move.b	(v_pfade_start).w,d0
000022FA D0C0                       		adda.w	d0,a0
000022FC D2C0                       		adda.w	d0,a1
000022FE 1038 F627                  		move.b	(v_pfade_size).w,d0
00002302                            
00002302                            	@addcolour:
00002302 6100                       		bsr.s	FadeIn_AddColour ; increase colour
00002304 51C8 FFFC                  		dbf	d0,@addcolour	; repeat for size of palette
00002308                            
00002308 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
0000230E 6600                       		bne.s	@exit		; if not, branch
00002310                            
00002310 7000                       		moveq	#0,d0
00002312 41F8 FA80                  		lea	(v_pal_water).w,a0
00002316 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
0000231A 1038 F626                  		move.b	(v_pfade_start).w,d0
0000231E D0C0                       		adda.w	d0,a0
00002320 D2C0                       		adda.w	d0,a1
00002322 1038 F627                  		move.b	(v_pfade_size).w,d0
00002326                            
00002326                            	@addcolour2:
00002326 6100                       		bsr.s	FadeIn_AddColour ; increase colour again
00002328 51C8 FFFC                  		dbf	d0,@addcolour2 ; repeat
0000232C                            
0000232C                            @exit:
0000232C 4E75                       		rts	
0000232E                            ; End of function FadeIn_FromBlack
0000232E                            
0000232E                            
0000232E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000232E                            
0000232E                            
0000232E                            FadeIn_AddColour:
0000232E                            @addblue:
0000232E 3419                       		move.w	(a1)+,d2
00002330 3610                       		move.w	(a0),d3
00002332 B642                       		cmp.w	d2,d3		; is colour already at threshold level?
00002334 6700                       		beq.s	@next		; if yes, branch
00002336 3203                       		move.w	d3,d1
00002338 0641 0200                  		addi.w	#$200,d1	; increase blue	value
0000233C B242                       		cmp.w	d2,d1		; has blue reached threshold level?
0000233E 6200                       		bhi.s	@addgreen	; if yes, branch
00002340 30C1                       		move.w	d1,(a0)+	; update palette
00002342 4E75                       		rts	
00002344                            ; ===========================================================================
00002344                            
00002344                            @addgreen:
00002344 3203                       		move.w	d3,d1
00002346 0641 0020                  		addi.w	#$20,d1		; increase green value
0000234A B242                       		cmp.w	d2,d1
0000234C 6200                       		bhi.s	@addred
0000234E 30C1                       		move.w	d1,(a0)+	; update palette
00002350 4E75                       		rts	
00002352                            ; ===========================================================================
00002352                            
00002352                            @addred:
00002352 5458                       		addq.w	#2,(a0)+	; increase red value
00002354 4E75                       		rts	
00002356                            ; ===========================================================================
00002356                            
00002356                            @next:
00002356 5448                       		addq.w	#2,a0		; next colour
00002358 4E75                       		rts	
0000235A                            ; End of function FadeIn_AddColour
0000235A                            
0000235A                            
0000235A                            ; ---------------------------------------------------------------------------
0000235A                            ; Subroutine to fade out to black
0000235A                            ; ---------------------------------------------------------------------------
0000235A                            
0000235A                            
0000235A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000235A                            
0000235A                            
0000235A                            PaletteFadeOut:
0000235A 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00002360 383C 0015                  		move.w	#$15,d4
00002364                            
00002364                            	@mainloop:
00002364 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
0000236A 6100 0000                  		bsr.w	WaitForVBla
0000236E 6100                       		bsr.s	FadeOut_ToBlack
00002370 6100 F434                  		bsr.w	RunPLC
00002374 51CC FFEE                  		dbf	d4,@mainloop
00002378 4E75                       		rts	
0000237A                            ; End of function PaletteFadeOut
0000237A                            
0000237A                            
0000237A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000237A                            
0000237A                            
0000237A                            FadeOut_ToBlack:
0000237A 7000                       		moveq	#0,d0
0000237C 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002380 1038 F626                  		move.b	(v_pfade_start).w,d0
00002384 D0C0                       		adda.w	d0,a0
00002386 1038 F627                  		move.b	(v_pfade_size).w,d0
0000238A                            
0000238A                            	@decolour:
0000238A 6100                       		bsr.s	FadeOut_DecColour ; decrease colour
0000238C 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
00002390                            
00002390 7000                       		moveq	#0,d0
00002392 41F8 FA80                  		lea	(v_pal_water).w,a0
00002396 1038 F626                  		move.b	(v_pfade_start).w,d0
0000239A D0C0                       		adda.w	d0,a0
0000239C 1038 F627                  		move.b	(v_pfade_size).w,d0
000023A0                            
000023A0                            	@decolour2:
000023A0 6100                       		bsr.s	FadeOut_DecColour
000023A2 51C8 FFFC                  		dbf	d0,@decolour2
000023A6 4E75                       		rts	
000023A8                            ; End of function FadeOut_ToBlack
000023A8                            
000023A8                            
000023A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000023A8                            
000023A8                            
000023A8                            FadeOut_DecColour:
000023A8                            @dered:
000023A8 3410                       		move.w	(a0),d2
000023AA 6700                       		beq.s	@next
000023AC 3202                       		move.w	d2,d1
000023AE 0241 000E                  		andi.w	#$E,d1
000023B2 6700                       		beq.s	@degreen
000023B4 5558                       		subq.w	#2,(a0)+	; decrease red value
000023B6 4E75                       		rts	
000023B8                            ; ===========================================================================
000023B8                            
000023B8                            @degreen:
000023B8 3202                       		move.w	d2,d1
000023BA 0241 00E0                  		andi.w	#$E0,d1
000023BE 6700                       		beq.s	@deblue
000023C0 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000023C4 4E75                       		rts	
000023C6                            ; ===========================================================================
000023C6                            
000023C6                            @deblue:
000023C6 3202                       		move.w	d2,d1
000023C8 0241 0E00                  		andi.w	#$E00,d1
000023CC 6700                       		beq.s	@next
000023CE 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000023D2 4E75                       		rts	
000023D4                            ; ===========================================================================
000023D4                            
000023D4                            @next:
000023D4 5448                       		addq.w	#2,a0
000023D6 4E75                       		rts	
000023D8                            ; End of function FadeOut_DecColour
000023D8                            
000023D8                            ; ---------------------------------------------------------------------------
000023D8                            ; Subroutine to	fade in from white (Special Stage)
000023D8                            ; ---------------------------------------------------------------------------
000023D8                            
000023D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000023D8                            
000023D8                            
000023D8                            PaletteWhiteIn:
000023D8 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
000023DE 7000                       		moveq	#0,d0
000023E0 41F8 FB00                  		lea	(v_pal_dry).w,a0
000023E4 1038 F626                  		move.b	(v_pfade_start).w,d0
000023E8 D0C0                       		adda.w	d0,a0
000023EA 323C 0EEE                  		move.w	#cWhite,d1
000023EE 1038 F627                  		move.b	(v_pfade_size).w,d0
000023F2                            
000023F2                            	@fill:
000023F2 30C1                       		move.w	d1,(a0)+
000023F4 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with white
000023F8                            
000023F8 383C 0015                  		move.w	#$15,d4
000023FC                            
000023FC                            	@mainloop:
000023FC 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002402 6100 0000                  		bsr.w	WaitForVBla
00002406 6100                       		bsr.s	WhiteIn_FromWhite
00002408 6100 F39C                  		bsr.w	RunPLC
0000240C 51CC FFEE                  		dbf	d4,@mainloop
00002410 4E75                       		rts	
00002412                            ; End of function PaletteWhiteIn
00002412                            
00002412                            
00002412                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002412                            
00002412                            
00002412                            WhiteIn_FromWhite:
00002412 7000                       		moveq	#0,d0
00002414 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002418 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
0000241C 1038 F626                  		move.b	(v_pfade_start).w,d0
00002420 D0C0                       		adda.w	d0,a0
00002422 D2C0                       		adda.w	d0,a1
00002424 1038 F627                  		move.b	(v_pfade_size).w,d0
00002428                            
00002428                            	@decolour:
00002428 6100                       		bsr.s	WhiteIn_DecColour ; decrease colour
0000242A 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
0000242E                            
0000242E 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
00002434 6600                       		bne.s	@exit		; if not, branch
00002436 7000                       		moveq	#0,d0
00002438 41F8 FA80                  		lea	(v_pal_water).w,a0
0000243C 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00002440 1038 F626                  		move.b	(v_pfade_start).w,d0
00002444 D0C0                       		adda.w	d0,a0
00002446 D2C0                       		adda.w	d0,a1
00002448 1038 F627                  		move.b	(v_pfade_size).w,d0
0000244C                            
0000244C                            	@decolour2:
0000244C 6100                       		bsr.s	WhiteIn_DecColour
0000244E 51C8 FFFC                  		dbf	d0,@decolour2
00002452                            
00002452                            	@exit:
00002452 4E75                       		rts	
00002454                            ; End of function WhiteIn_FromWhite
00002454                            
00002454                            
00002454                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002454                            
00002454                            
00002454                            WhiteIn_DecColour:
00002454                            @deblue:
00002454 3419                       		move.w	(a1)+,d2
00002456 3610                       		move.w	(a0),d3
00002458 B642                       		cmp.w	d2,d3
0000245A 6700                       		beq.s	@next
0000245C 3203                       		move.w	d3,d1
0000245E 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002462 6500                       		blo.s	@degreen
00002464 B242                       		cmp.w	d2,d1
00002466 6500                       		blo.s	@degreen
00002468 30C1                       		move.w	d1,(a0)+
0000246A 4E75                       		rts	
0000246C                            ; ===========================================================================
0000246C                            
0000246C                            @degreen:
0000246C 3203                       		move.w	d3,d1
0000246E 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002472 6500                       		blo.s	@dered
00002474 B242                       		cmp.w	d2,d1
00002476 6500                       		blo.s	@dered
00002478 30C1                       		move.w	d1,(a0)+
0000247A 4E75                       		rts	
0000247C                            ; ===========================================================================
0000247C                            
0000247C                            @dered:
0000247C 5558                       		subq.w	#2,(a0)+	; decrease red value
0000247E 4E75                       		rts	
00002480                            ; ===========================================================================
00002480                            
00002480                            @next:
00002480 5448                       		addq.w	#2,a0
00002482 4E75                       		rts	
00002484                            ; End of function WhiteIn_DecColour
00002484                            
00002484                            ; ---------------------------------------------------------------------------
00002484                            ; Subroutine to fade to white (Special Stage)
00002484                            ; ---------------------------------------------------------------------------
00002484                            
00002484                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002484                            
00002484                            
00002484                            PaletteWhiteOut:
00002484 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
0000248A 383C 0015                  		move.w	#$15,d4
0000248E                            
0000248E                            	@mainloop:
0000248E 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002494 6100 0000                  		bsr.w	WaitForVBla
00002498 6100                       		bsr.s	WhiteOut_ToWhite
0000249A 6100 F30A                  		bsr.w	RunPLC
0000249E 51CC FFEE                  		dbf	d4,@mainloop
000024A2 4E75                       		rts	
000024A4                            ; End of function PaletteWhiteOut
000024A4                            
000024A4                            
000024A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000024A4                            
000024A4                            
000024A4                            WhiteOut_ToWhite:
000024A4 7000                       		moveq	#0,d0
000024A6 41F8 FB00                  		lea	(v_pal_dry).w,a0
000024AA 1038 F626                  		move.b	(v_pfade_start).w,d0
000024AE D0C0                       		adda.w	d0,a0
000024B0 1038 F627                  		move.b	(v_pfade_size).w,d0
000024B4                            
000024B4                            	@addcolour:
000024B4 6100                       		bsr.s	WhiteOut_AddColour
000024B6 51C8 FFFC                  		dbf	d0,@addcolour
000024BA                            
000024BA 7000                       		moveq	#0,d0
000024BC 41F8 FA80                  		lea	(v_pal_water).w,a0
000024C0 1038 F626                  		move.b	(v_pfade_start).w,d0
000024C4 D0C0                       		adda.w	d0,a0
000024C6 1038 F627                  		move.b	(v_pfade_size).w,d0
000024CA                            
000024CA                            	@addcolour2:
000024CA 6100                       		bsr.s	WhiteOut_AddColour
000024CC 51C8 FFFC                  		dbf	d0,@addcolour2
000024D0 4E75                       		rts	
000024D2                            ; End of function WhiteOut_ToWhite
000024D2                            
000024D2                            
000024D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000024D2                            
000024D2                            
000024D2                            WhiteOut_AddColour:
000024D2                            @addred:
000024D2 3410                       		move.w	(a0),d2
000024D4 0C42 0EEE                  		cmpi.w	#cWhite,d2
000024D8 6700                       		beq.s	@next
000024DA 3202                       		move.w	d2,d1
000024DC 0241 000E                  		andi.w	#$E,d1
000024E0 0C41 000E                  		cmpi.w	#cRed,d1
000024E4 6700                       		beq.s	@addgreen
000024E6 5458                       		addq.w	#2,(a0)+	; increase red value
000024E8 4E75                       		rts	
000024EA                            ; ===========================================================================
000024EA                            
000024EA                            @addgreen:
000024EA 3202                       		move.w	d2,d1
000024EC 0241 00E0                  		andi.w	#$E0,d1
000024F0 0C41 00E0                  		cmpi.w	#cGreen,d1
000024F4 6700                       		beq.s	@addblue
000024F6 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000024FA 4E75                       		rts	
000024FC                            ; ===========================================================================
000024FC                            
000024FC                            @addblue:
000024FC 3202                       		move.w	d2,d1
000024FE 0241 0E00                  		andi.w	#$E00,d1
00002502 0C41 0E00                  		cmpi.w	#cBlue,d1
00002506 6700                       		beq.s	@next
00002508 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
0000250C 4E75                       		rts	
0000250E                            ; ===========================================================================
0000250E                            
0000250E                            @next:
0000250E 5448                       		addq.w	#2,a0
00002510 4E75                       		rts	
00002512                            ; End of function WhiteOut_AddColour
00002512                            
00002512                            ; ---------------------------------------------------------------------------
00002512                            ; Palette cycling routine - Sega logo
00002512                            ; ---------------------------------------------------------------------------
00002512                            
00002512                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002512                            
00002512                            
00002512                            PalCycle_Sega:
00002512 4A38 F635                  		tst.b	(v_pcyc_time+1).w
00002516 6600                       		bne.s	loc_206A
00002518 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
0000251C 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002522 7205                       		moveq	#5,d1
00002524 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002528                            
00002528                            loc_2020:
00002528 6A00                       		bpl.s	loc_202A
0000252A 5448                       		addq.w	#2,a0
0000252C 5341                       		subq.w	#1,d1
0000252E 5440                       		addq.w	#2,d0
00002530 60F6                       		bra.s	loc_2020
00002532                            ; ===========================================================================
00002532                            
00002532                            loc_202A:
00002532 3400                       		move.w	d0,d2
00002534 0242 001E                  		andi.w	#$1E,d2
00002538 6600                       		bne.s	loc_2034
0000253A 5440                       		addq.w	#2,d0
0000253C                            
0000253C                            loc_2034:
0000253C 0C40 0060                  		cmpi.w	#$60,d0
00002540 6400                       		bhs.s	loc_203E
00002542 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002546                            
00002546                            loc_203E:
00002546 5440                       		addq.w	#2,d0
00002548 51C9 FFE8                  		dbf	d1,loc_202A
0000254C                            
0000254C 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002550 5440                       		addq.w	#2,d0
00002552 3400                       		move.w	d0,d2
00002554 0242 001E                  		andi.w	#$1E,d2
00002558 6600                       		bne.s	loc_2054
0000255A 5440                       		addq.w	#2,d0
0000255C                            
0000255C                            loc_2054:
0000255C 0C40 0064                  		cmpi.w	#$64,d0
00002560 6D00                       		blt.s	loc_2062
00002562 31FC 0401 F634             		move.w	#$401,(v_pcyc_time).w
00002568 70F4                       		moveq	#-$C,d0
0000256A                            
0000256A                            loc_2062:
0000256A 31C0 F632                  		move.w	d0,(v_pcyc_num).w
0000256E 7001                       		moveq	#1,d0
00002570 4E75                       		rts	
00002572                            ; ===========================================================================
00002572                            
00002572                            loc_206A:
00002572 5338 F634                  		subq.b	#1,(v_pcyc_time).w
00002576 6A00                       		bpl.s	loc_20BC
00002578 11FC 0004 F634             		move.b	#4,(v_pcyc_time).w
0000257E 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002582 0640 000C                  		addi.w	#$C,d0
00002586 0C40 0030                  		cmpi.w	#$30,d0
0000258A 6500                       		blo.s	loc_2088
0000258C 7000                       		moveq	#0,d0
0000258E 4E75                       		rts	
00002590                            ; ===========================================================================
00002590                            
00002590                            loc_2088:
00002590 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00002594 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000259A 41F0 0000                  		lea	(a0,d0.w),a0
0000259E 43F8 FB04                  		lea	(v_pal_dry+$04).w,a1
000025A2 22D8                       		move.l	(a0)+,(a1)+
000025A4 22D8                       		move.l	(a0)+,(a1)+
000025A6 3298                       		move.w	(a0)+,(a1)
000025A8 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
000025AC 7000                       		moveq	#0,d0
000025AE 722C                       		moveq	#$2C,d1
000025B0                            
000025B0                            loc_20A8:
000025B0 3400                       		move.w	d0,d2
000025B2 0242 001E                  		andi.w	#$1E,d2
000025B6 6600                       		bne.s	loc_20B2
000025B8 5440                       		addq.w	#2,d0
000025BA                            
000025BA                            loc_20B2:
000025BA 3390 0000                  		move.w	(a0),(a1,d0.w)
000025BE 5440                       		addq.w	#2,d0
000025C0 51C9 FFEE                  		dbf	d1,loc_20A8
000025C4                            
000025C4                            loc_20BC:
000025C4 7001                       		moveq	#1,d0
000025C6 4E75                       		rts	
000025C8                            ; End of function PalCycle_Sega
000025C8                            
000025C8                            ; ===========================================================================
000025C8                            
000025C8                            Pal_Sega1:	incbin	"palette\Sega1.bin"
000025D4                            Pal_Sega2:	incbin	"palette\Sega2.bin"
00002604                            
00002604                            ; ---------------------------------------------------------------------------
00002604                            ; Subroutines to load palettes
00002604                            
00002604                            ; input:
00002604                            ;	d0 = index number for palette
00002604                            ; ---------------------------------------------------------------------------
00002604                            
00002604                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002604                            
00002604                            
00002604                            ; ---------------------------------------------------------------------------
00002604                            ; Subroutines to load pallets
00002604                            ; ---------------------------------------------------------------------------
00002604                            
00002604                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002604                            
00002604                            PalLoad1:
00002604 1238 FE11                  		move.b ($FFFFFE11),d1
00002608 43F9 0000 0000             		lea (PalPointers).l,a1
0000260E 0C01 0000                  		cmp.b #0,d1
00002612 6700 0000                  		beq.w PalLoad1_Continue
00002616 43F9 0000 0000             		lea (PalPointers2).l,a1
0000261C 0C01 0001                  		cmp.b #1,d1
00002620 6700 0000                  		beq.w PalLoad1_Continue
00002624 43F9 0000 0000             		lea (PalPointers3).l,a1
0000262A                            
0000262A                            PalLoad1_Continue:
0000262A E748                       		lsl.w #3,d0
0000262C D2C0                       		adda.w d0,a1
0000262E 2459                       		movea.l (a1)+,a2
00002630 3659                       		movea.w (a1)+,a3
00002632 D6FC 0080                  		adda.w #$80,a3
00002636 3E19                       		move.w (a1)+,d7
00002638                            
00002638                            loc_2110:
00002638 26DA                       		move.l (a2)+,(a3)+
0000263A 51CF FFFC                  		dbf d7,loc_2110
0000263E 4E75                       		rts
00002640                             ; End of function PalLoad1
00002640                            
00002640                            
00002640                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002640                            
00002640                            PalLoad2:
00002640 1238 FE11                  		move.b ($FFFFFE11),d1
00002644 43F9 0000 0000             		lea (PalPointers).l,a1
0000264A 0C01 0000                  		cmp.b #0,d1
0000264E 6700 0000                  		beq.w PalLoad2_Continue
00002652 43F9 0000 0000             		lea (PalPointers2).l,a1
00002658 0C01 0001                  		cmp.b #1,d1
0000265C 6700 0000                  		beq.w PalLoad2_Continue
00002660 43F9 0000 0000             		lea (PalPointers3).l,a1
00002666                            
00002666                            
00002666                            PalLoad2_Continue:
00002666 E748                       		lsl.w #3,d0
00002668 D2C0                       		adda.w d0,a1
0000266A 2459                       		movea.l (a1)+,a2
0000266C 3659                       		movea.w (a1)+,a3
0000266E 3E19                       		move.w (a1)+,d7
00002670                            
00002670                            loc_2128:
00002670 26DA                       		move.l (a2)+,(a3)+
00002672 51CF FFFC                  		dbf d7,loc_2128
00002676 4E75                       		rts
00002678                            ; End of function PalLoad2
00002678                            
00002678                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00002678                            
00002678                            
00002678                            PalLoad_Loop: ;Quick load - TIS
00002678                                    
00002678 34D9                               move.w    (a1)+,(a2)+              ;Copy pallete data to RAM
0000267A 51C8 FFFC                          dbf    d0,PalLoad_Loop               ;Loop d0 (length)
0000267E 4E75                               rts
00002680                            
00002680                            ; ---------------------------------------------------------------------------
00002680                            ; Underwater pallet loading subroutine
00002680                            ; ---------------------------------------------------------------------------
00002680                            
00002680                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002680                            
00002680                            PalLoad3_Water:
00002680 1238 FE11                  		move.b ($FFFFFE11),d1
00002684 43F9 0000 0000             		lea (PalPointers).l,a1
0000268A 0C01 0000                  		cmp.b #0,d1
0000268E 6700 0000                  		beq.w PalLoad3_Continue
00002692 43F9 0000 0000             		lea (PalPointers2).l,a1
00002698 0C01 0001                  		cmp.b #1,d1
0000269C 6700 0000                  		beq.w PalLoad3_Continue
000026A0 43F9 0000 0000             		lea (PalPointers3).l,a1
000026A6                            
000026A6                            PalLoad3_Continue:
000026A6 E748                       		lsl.w #3,d0
000026A8 D2C0                       		adda.w d0,a1
000026AA 2459                       		movea.l (a1)+,a2
000026AC 3659                       		movea.w (a1)+,a3
000026AE 96FC 0080                  		suba.w #$80,a3
000026B2 3E19                       		move.w (a1)+,d7
000026B4                            
000026B4                            loc_2144:
000026B4 26DA                       		move.l (a2)+,(a3)+
000026B6 51CF FFFC                  		dbf d7,loc_2144
000026BA 4E75                       		rts
000026BC                            ; End of function PalLoad3_Water
000026BC                            
000026BC                            
000026BC                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000026BC                            
000026BC                            
000026BC                            PalLoad4_Water:
000026BC 1238 FE11                  		move.b ($FFFFFE11),d1
000026C0 43F9 0000 0000             		lea (PalPointers).l,a1
000026C6 0C01 0000                  		cmp.b #0,d1
000026CA 6700 0000                  		beq.w PalLoad4_Continue
000026CE 43F9 0000 0000             		lea (PalPointers2).l,a1
000026D4 0C01 0001                  		cmp.b #1,d1
000026D8 6700 0000                  		beq.w PalLoad4_Continue
000026DC 43F9 0000 0000             		lea (PalPointers3).l,a1
000026E2                            
000026E2                            PalLoad4_Continue:
000026E2 E748                       		lsl.w #3,d0
000026E4 D2C0                       		adda.w d0,a1
000026E6 2459                       		movea.l (a1)+,a2
000026E8 3659                       		movea.w (a1)+,a3
000026EA 96FC 0100                  		suba.w #$100,a3
000026EE 3E19                       		move.w (a1)+,d7
000026F0                            loc_2160:
000026F0 26DA                       		move.l (a2)+,(a3)+
000026F2 51CF FFFC                  		dbf d7,loc_2160
000026F6 4E75                       		rts
000026F8                             ; End of function PalLoad4_Water
000026F8                            
000026F8                            ; ===========================================================================
000026F8                            
000026F8                            		include	"_inc\Palette Pointers.asm"
000026F8                            ; ---------------------------------------------------------------------------
000026F8                            ; Palette pointers
000026F8                            ; ---------------------------------------------------------------------------
000026F8                            
000026F8                            palp:	macro paladdress,ramaddress,colors
000026F8                            	dc.l paladdress
000026F8                            	dc.w ramaddress, (colors>>1)-1
000026F8                            	endm
000026F8                            
000026F8                            PalPointers:
000026F8                            
000026F8                            ; palette address, RAM address, colors
000026F8                            
000026F8 0000 0000 FB00 001F        ptr_Pal_SegaBG:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002700 0000 0000 FB00 001F        ptr_Pal_Title:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002708 0000 0000 FB00 001F        ptr_Pal_LevelSel:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002710 0000 0000 FB00 0007        ptr_Pal_Sonic:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002718                            Pal_Levels:
00002718 0000 0000 FB20 0017        ptr_Pal_GHZ:		palp	Pal_GHZ,v_pal_dry+$20, $30		; 4 - GHZ
00002720 0000 0000 FB20 0017        ptr_Pal_LZ:		palp	Pal_LZ,v_pal_dry+$20,$30		; 5 - LZ
00002728 0000 0000 FB20 0017        ptr_Pal_MZ:		palp	Pal_MZ,v_pal_dry+$20,$30		; 6 - MZ
00002730 0000 0000 FB20 0017        ptr_Pal_SLZ:		palp	Pal_SLZ,v_pal_dry+$20,$30		; 7 - SLZ
00002738 0000 0000 FB20 0017        ptr_Pal_SYZ:		palp	Pal_SYZ,v_pal_dry+$20,$30		; 8 - SYZ
00002740 0000 0000 FB20 0017        ptr_Pal_SBZ1:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002748 0000 0000 FB00 001F        ptr_Pal_Special:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002750 0000 0000 FB00 001F        ptr_Pal_LZWater:	palp	Pal_LZWater,v_pal_dry,$40		; $B (11) - LZ underwater
00002758 0000 0000 FB20 0017        ptr_Pal_SBZ3:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002760 0000 0000 FB00 001F        ptr_Pal_SBZ3Water:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002768 0000 0000 FB20 0017        ptr_Pal_SBZ2:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002770 0000 0000 FB00 0007        ptr_Pal_LZSonWater:	palp	Pal_LZSonWater,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002778 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002780 0000 0000 FB00 001F        ptr_Pal_SSResult:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002788 0000 0000 FB00 000F        ptr_Pal_Continue:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002790 0000 0000 FB00 001F        ptr_Pal_Options:		palp	Pal_Options,v_pal_dry,$40		; $14 (20) - options screen
00002798 0000 0000 FB00 001F        ptr_Pal_Ending2:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000027A0 0000 0000 FB00 001F        ptr_Pal_Ending:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000027A8 0000 0000 FB00 0007        ptr_Pal_Sonic2:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (20) - Sonic (Sonic 1)
000027B0 0000 0000 FB00 0007        ptr_Pal_Sonic3:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (21) - Sonic (Beta)
000027B8 0000 0000 FB00 0007        ptr_Pal_Sonic4:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (22) - Sonic (Midnight)
000027C0 0000 0000 FB00 0007        ptr_Pal_Sonic5:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (23) - Sonic (C2)
000027C8 0000 0000 FB00 0007        ptr_Pal_Sonic6:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (24) - Sonic (Crackers)
000027D0 0000 0000 FB00 0007        ptr_Pal_Sonic7:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (25) - Sonic (RHS)
000027D8 0000 0000 FB00 0007        ptr_Pal_Sonic8:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (26) - Sonic (Socket)
000027E0 0000 0000 FB00 0007        ptr_Pal_Sonic9:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (27) - Sonic (Cringe)
000027E8 0000 0000 FB00 0007        ptr_Pal_Sonic10:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
000027F0 0000 0000 FB00 0007        ptr_Pal_Sonic11:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
000027F8 0000 0000 FB00 0007        ptr_Pal_SonWater2:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
00002800 0000 0000 FB00 0007        ptr_Pal_SonWater3:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
00002808 0000 0000 FB00 0007        ptr_Pal_SonWater4:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
00002810 0000 0000 FB00 0007        ptr_Pal_SonWater5:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
00002818 0000 0000 FB00 0007        ptr_Pal_SonWater6:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
00002820 0000 0000 FB00 0007        ptr_Pal_SonWater7:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
00002828 0000 0000 FB00 0007        ptr_Pal_SonWater8:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
00002830 0000 0000 FB00 0007        ptr_Pal_SonWater9:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
00002838 0000 0000 FB00 0007        ptr_Pal_SonWater10:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
00002840 0000 0000 FB00 0007        ptr_Pal_SonWater11:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
00002848 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
00002850 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
00002858 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
00002860 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
00002868 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
00002870 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
00002878 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
00002880 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
00002888 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
00002890 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
00002898                            			even
00002898                            
00002898                            PalPointers2:
00002898                            
00002898                            ; palette address, RAM address, colors
00002898                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
00002898 0000 0000 FB00 001F        ptr_Pal_SegaBG_D:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
000028A0 0000 0000 FB00 001F        ptr_Pal_Title_D:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
000028A8 0000 0000 FB00 001F        ptr_Pal_LevelSel_D:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
000028B0 0000 0000 FB00 0007        ptr_Pal_SonicD:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
000028B8                            Pal_Levels_2:
000028B8 0000 0000 FB20 0017        ptr_Pal_GHZ2:		palp	Pal_GHZ2,v_pal_dry+$20, $30		; 4 - GHZ
000028C0 0000 0000 FB20 0017        ptr_Pal_LZ2:		palp	Pal_LZ2,v_pal_dry+$20,$30		; 5 - LZ
000028C8 0000 0000 FB20 0017        ptr_Pal_MZ2:		palp	Pal_MZ2,v_pal_dry+$20,$30		; 6 - MZ
000028D0 0000 0000 FB20 0017        ptr_Pal_SLZ2:		palp	Pal_SLZ2,v_pal_dry+$20,$30		; 7 - SLZ
000028D8 0000 0000 FB20 0017        ptr_Pal_SYZ2:		palp	Pal_SYZ2,v_pal_dry+$20,$30		; 8 - SYZ
000028E0 0000 0000 FB20 0017        ptr_Pal_SBZ1_D:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
000028E8 0000 0000 FB00 001F        ptr_Pal_Special_D:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
000028F0 0000 0000 FB00 001F        ptr_Pal_LZWatr2:	palp	Pal_LZWatr2,v_pal_dry,$40		; $B (11) - LZ underwater
000028F8 0000 0000 FB20 0017        ptr_Pal_SBZ3_D:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002900 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_D:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002908 0000 0000 FB20 0017        ptr_Pal_SBZ2_D:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002910 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002918 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_D:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002920 0000 0000 FB00 001F        ptr_Pal_SSResult_D:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002928 0000 0000 FB00 000F        ptr_Pal_Continue_D:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002930 0000 0000 FB00 001F        ptr_Pal_Options_D:		palp	Pal_Options,v_pal_dry,$40		; $13 (20) - options screen
00002938 0000 0000 FB00 001F        ptr_Pal_Ending2_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
00002940 0000 0000 FB00 001F        ptr_Pal_Ending_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
00002948 0000 0000 FB00 0007        ptr_Pal_Sonic2_D:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
00002950 0000 0000 FB00 0007        ptr_Pal_Sonic3_D:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
00002958 0000 0000 FB00 0007        ptr_Pal_Sonic4_D:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
00002960 0000 0000 FB00 0007        ptr_Pal_Sonic5_D:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
00002968 0000 0000 FB00 0007        ptr_Pal_Sonic6_D:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
00002970 0000 0000 FB00 0007        ptr_Pal_Sonic7_D:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
00002978 0000 0000 FB00 0007        ptr_Pal_Sonic8_D:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002980 0000 0000 FB00 0007        ptr_Pal_Sonic9_D:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002988 0000 0000 FB00 0007        ptr_Pal_Sonic10_D:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
00002990 0000 0000 FB00 0007        ptr_Pal_Sonic11_D:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
00002998 0000 0000 FB00 0007        ptr_Pal_SonWater2_D:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
000029A0 0000 0000 FB00 0007        ptr_Pal_SonWater3_D:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
000029A8 0000 0000 FB00 0007        ptr_Pal_SonWater4_D:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
000029B0 0000 0000 FB00 0007        ptr_Pal_SonWater5_D:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
000029B8 0000 0000 FB00 0007        ptr_Pal_SonWater6_D:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
000029C0 0000 0000 FB00 0007        ptr_Pal_SonWater7_D:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
000029C8 0000 0000 FB00 0007        ptr_Pal_SonWater8_D:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
000029D0 0000 0000 FB00 0007        ptr_Pal_SonWater9_D:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
000029D8 0000 0000 FB00 0007        ptr_Pal_SonWater10_D:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
000029E0 0000 0000 FB00 0007        ptr_Pal_SonWater11_D:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
000029E8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2_D:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
000029F0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3_D:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
000029F8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4_D:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
00002A00 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5_D:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
00002A08 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6_D:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
00002A10 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7_D:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
00002A18 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8_D:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
00002A20 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9_D:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
00002A28 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10_D:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
00002A30 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11_D:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
00002A38                            			even
00002A38                            			
00002A38                            PalPointers3:
00002A38                            			
00002A38                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
00002A38 0000 0000 FB00 001F        ptr_Pal_SegaBG_E:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002A40 0000 0000 FB00 001F        ptr_Pal_Title_E:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002A48 0000 0000 FB00 001F        ptr_Pal_LevelSel_E:		palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002A50 0000 0000 FB00 0007        ptr_Pal_SonicE:			palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002A58                            Pal_Levels_3:
00002A58 0000 0000 FB20 0017        ptr_Pal_GHZ3:		palp	Pal_GHZ3,v_pal_dry+$20, $30		; 4 - GHZ
00002A60 0000 0000 FB20 0017        ptr_Pal_LZ3:		palp	Pal_LZ3,v_pal_dry+$20,$30		; 5 - LZ
00002A68 0000 0000 FB20 0017        ptr_Pal_MZ3:		palp	Pal_MZ3,v_pal_dry+$20,$30		; 6 - MZ
00002A70 0000 0000 FB20 0017        ptr_Pal_SLZ3:		palp	Pal_SLZ3,v_pal_dry+$20,$30		; 7 - SLZ
00002A78 0000 0000 FB20 0017        ptr_Pal_SYZ3:		palp	Pal_SYZ3,v_pal_dry+$20,$30		; 8 - SYZ
00002A80 0000 0000 FB20 0017        ptr_Pal_SBZ1_E:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002A88 0000 0000 FB00 001F        ptr_Pal_Special_E:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002A90 0000 0000 FB00 001F        ptr_Pal_LZWatr3:	palp	Pal_LZWatr3,v_pal_dry,$40		; $B (11) - LZ underwater
00002A98 0000 0000 FB20 0017        ptr_Pal_SBZ3_E:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002AA0 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_E:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002AA8 0000 0000 FB20 0017        ptr_Pal_SBZ2_E:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002AB0 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2E:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002AB8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_E:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002AC0 0000 0000 FB00 001F        ptr_Pal_SSResult_E:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002AC8 0000 0000 FB00 000F        ptr_Pal_Continue_E:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002AD0 0000 0000 FB00 001F        ptr_Pal_Options_E:		palp	Pal_Options,v_pal_dry,$40		; $14 (21) - options screen
00002AD8 0000 0000 FB00 001F        ptr_Pal_Ending2_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002AE0 0000 0000 FB00 001F        ptr_Pal_Ending_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002AE8 0000 0000 FB00 0007        ptr_Pal_Sonic2_E:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
00002AF0 0000 0000 FB00 0007        ptr_Pal_Sonic3_E:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
00002AF8 0000 0000 FB00 0007        ptr_Pal_Sonic4_E:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
00002B00 0000 0000 FB00 0007        ptr_Pal_Sonic5_E:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
00002B08 0000 0000 FB00 0007        ptr_Pal_Sonic6_E:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
00002B10 0000 0000 FB00 0007        ptr_Pal_Sonic7_E:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
00002B18 0000 0000 FB00 0007        ptr_Pal_Sonic8_E:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002B20 0000 0000 FB00 0007        ptr_Pal_Sonic9_E:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002B28 0000 0000 FB00 0007        ptr_Pal_Sonic10_E:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
00002B30 0000 0000 FB00 0007        ptr_Pal_Sonic11_E:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
00002B38 0000 0000 FB00 0007        ptr_Pal_SonWater2_E:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
00002B40 0000 0000 FB00 0007        ptr_Pal_SonWater3_E:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
00002B48 0000 0000 FB00 0007        ptr_Pal_SonWater4_E:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
00002B50 0000 0000 FB00 0007        ptr_Pal_SonWater5_E:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
00002B58 0000 0000 FB00 0007        ptr_Pal_SonWater6_E:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
00002B60 0000 0000 FB00 0007        ptr_Pal_SonWater7_E:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
00002B68 0000 0000 FB00 0007        ptr_Pal_SonWater8_E:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
00002B70 0000 0000 FB00 0007        ptr_Pal_SonWater9_E:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
00002B78 0000 0000 FB00 0007        ptr_Pal_SonWater10_E:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
00002B80 0000 0000 FB00 0007        ptr_Pal_SonWater11_E:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
00002B88 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2_E:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
00002B90 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3_E:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
00002B98 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4_E:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
00002BA0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5_E:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
00002BA8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6_E:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
00002BB0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7_E:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
00002BB8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8_E:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
00002BC0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9_E:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
00002BC8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10_E:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
00002BD0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11_E:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
00002BD8                            			even
00002BD8                            
00002BD8                            
00002BD8 =00000000                  palid_SegaBG:		equ (ptr_Pal_SegaBG-PalPointers)/8
00002BD8 =00000001                  palid_Title:		equ (ptr_Pal_Title-PalPointers)/8
00002BD8 =00000002                  palid_LevelSel:		equ (ptr_Pal_LevelSel-PalPointers)/8
00002BD8 =00000003                  palid_Sonic:		equ (ptr_Pal_Sonic-PalPointers)/8
00002BD8 =00000004                  palid_GHZ:		equ (ptr_Pal_GHZ-PalPointers)/8
00002BD8 =00000005                  palid_LZ:		equ (ptr_Pal_LZ-PalPointers)/8
00002BD8 =00000006                  palid_MZ:		equ (ptr_Pal_MZ-PalPointers)/8
00002BD8 =00000007                  palid_SLZ:		equ (ptr_Pal_SLZ-PalPointers)/8
00002BD8 =00000008                  palid_SYZ:		equ (ptr_Pal_SYZ-PalPointers)/8
00002BD8 =00000009                  palid_SBZ1:		equ (ptr_Pal_SBZ1-PalPointers)/8
00002BD8 =0000000A                  palid_Special:		equ (ptr_Pal_Special-PalPointers)/8
00002BD8 =0000000B                  palid_LZWater:		equ (ptr_Pal_LZWater-PalPointers)/8
00002BD8 =0000000C                  palid_SBZ3:		equ (ptr_Pal_SBZ3-PalPointers)/8
00002BD8 =0000000D                  palid_SBZ3Water:	equ (ptr_Pal_SBZ3Water-PalPointers)/8
00002BD8 =0000000E                  palid_SBZ2:		equ (ptr_Pal_SBZ2-PalPointers)/8
00002BD8 =0000000F                  palid_LZSonWater:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002BD8 =00000010                  palid_SBZ3SonWat:	equ (ptr_Pal_SBZ3SonWat-PalPointers)/8
00002BD8 =00000011                  palid_SSResult:		equ (ptr_Pal_SSResult-PalPointers)/8
00002BD8 =00000012                  palid_Continue:		equ (ptr_Pal_Continue-PalPointers)/8
00002BD8 =00000013                  palid_Options:		equ (ptr_Pal_Options-PalPointers)/8
00002BD8 =00000015                  palid_Ending2:		equ (ptr_Pal_Ending-PalPointers)/8
00002BD8 =00000015                  palid_Ending:		equ (ptr_Pal_Ending-PalPointers)/8
00002BD8 =00000004                  palid_GHZ2:		equ (ptr_Pal_GHZ-PalPointers)/8
00002BD8 =00000005                  palid_LZ2:		equ (ptr_Pal_LZ-PalPointers)/8
00002BD8 =00000006                  palid_MZ2:		equ (ptr_Pal_MZ-PalPointers)/8
00002BD8 =00000007                  palid_SLZ2:		equ (ptr_Pal_SLZ-PalPointers)/8
00002BD8 =00000008                  palid_SYZ2:		equ (ptr_Pal_SYZ-PalPointers)/8
00002BD8 =0000003F                  palid_LZWatr2:		equ (ptr_Pal_LZWatr2-PalPointers)/8
00002BD8 =0000000F                  palid_LZSonWatr2:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002BD8 =0000006C                  palid_GHZ3:		equ (ptr_Pal_GHZ3-PalPointers)/8
00002BD8 =0000006D                  palid_LZ3:		equ (ptr_Pal_LZ3-PalPointers)/8
00002BD8 =0000006E                  palid_MZ3:		equ (ptr_Pal_MZ3-PalPointers)/8
00002BD8 =0000006F                  palid_SLZ3:		equ (ptr_Pal_SLZ3-PalPointers)/8
00002BD8 =00000070                  palid_SYZ3:		equ (ptr_Pal_SYZ3-PalPointers)/8
00002BD8 =00000073                  palid_LZWatr3:		equ (ptr_Pal_LZWatr3-PalPointers)/8
00002BD8 =0000000F                  palid_LZSonWatr3:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002BD8 =00000016                  palid_Sonic2:		equ (ptr_Pal_Sonic2-PalPointers)/8
00002BD8 =00000017                  palid_Sonic3:		equ (ptr_Pal_Sonic3-PalPointers)/8
00002BD8 =00000018                  palid_Sonic4:		equ (ptr_Pal_Sonic4-PalPointers)/8
00002BD8 =00000019                  palid_Sonic5:		equ (ptr_Pal_Sonic5-PalPointers)/8
00002BD8 =0000001A                  palid_Sonic6:		equ (ptr_Pal_Sonic6-PalPointers)/8
00002BD8 =0000001B                  palid_Sonic7:		equ (ptr_Pal_Sonic7-PalPointers)/8
00002BD8 =0000001C                  palid_Sonic8:		equ (ptr_Pal_Sonic8-PalPointers)/8
00002BD8 =0000001D                  palid_Sonic9:		equ (ptr_Pal_Sonic9-PalPointers)/8
00002BD8 =0000001E                  palid_Sonic10:		equ (ptr_Pal_Sonic10-PalPointers)/8
00002BD8 =0000001F                  palid_Sonic11:		equ (ptr_Pal_Sonic11-PalPointers)/8
00002BD8 =00000020                  palid_SonWater2:		equ (ptr_Pal_SonWater2-PalPointers)/8
00002BD8 =00000021                  palid_SonWater3:		equ (ptr_Pal_SonWater3-PalPointers)/8
00002BD8 =00000022                  palid_SonWater4:		equ (ptr_Pal_SonWater4-PalPointers)/8
00002BD8 =00000023                  palid_SonWater5:		equ (ptr_Pal_SonWater5-PalPointers)/8
00002BD8 =00000024                  palid_SonWater6:		equ (ptr_Pal_SonWater6-PalPointers)/8
00002BD8 =00000025                  palid_SonWater7:		equ (ptr_Pal_SonWater7-PalPointers)/8
00002BD8 =00000026                  palid_SonWater8:		equ (ptr_Pal_SonWater8-PalPointers)/8
00002BD8 =00000027                  palid_SonWater9:		equ (ptr_Pal_SonWater9-PalPointers)/8
00002BD8 =00000028                  palid_SonWater10:		equ (ptr_Pal_SonWater10-PalPointers)/8
00002BD8 =00000029                  palid_SonWater11:		equ (ptr_Pal_SonWater11-PalPointers)/8
00002BD8 =0000002A                  palid_SBZ3SonWat2:		equ (ptr_Pal_SBZ3SonWat2-PalPointers)/8
00002BD8 =0000002B                  palid_SBZ3SonWat3:		equ (ptr_Pal_SBZ3SonWat3-PalPointers)/8
00002BD8 =0000002C                  palid_SBZ3SonWat4:		equ (ptr_Pal_SBZ3SonWat4-PalPointers)/8
00002BD8 =0000002D                  palid_SBZ3SonWat5:		equ (ptr_Pal_SBZ3SonWat5-PalPointers)/8
00002BD8 =0000002E                  palid_SBZ3SonWat6:		equ (ptr_Pal_SBZ3SonWat6-PalPointers)/8
00002BD8 =0000002F                  palid_SBZ3SonWat7:		equ (ptr_Pal_SBZ3SonWat7-PalPointers)/8
00002BD8 =00000030                  palid_SBZ3SonWat8:		equ (ptr_Pal_SBZ3SonWat8-PalPointers)/8
00002BD8 =00000031                  palid_SBZ3SonWat9:		equ (ptr_Pal_SBZ3SonWat9-PalPointers)/8
00002BD8 =00000032                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
00002BD8 =00000033                  palid_SBZ3SonWat11:		equ (ptr_Pal_SBZ3SonWat11-PalPointers)/8
00002BD8 =00000033                  palid_SBZ3SonWat11:		equ (ptr_Pal_SBZ3SonWat11-PalPointers)/8
00002BD8                            		
00002BD8                            		;include	"_inc\Palette Pointers2.asm"
00002BD8                            		
00002BD8                            		;include	"_inc\Palette Pointers3.asm"
00002BD8                            		
00002BD8                            
00002BD8                            ; ---------------------------------------------------------------------------
00002BD8                            ; Palette data
00002BD8                            ; ---------------------------------------------------------------------------
00002BD8                            Pal_SegaBG:	incbin	"palette\Sega Background.bin"
00002C58                            Pal_Title:	incbin	"palette\Title Screen.bin"
00002CD8                            Pal_LevelSel:	incbin	"palette\Level Select.bin"
00002D58                            Pal_Sonic:	incbin	"palette\Sonic Pal\01 Default.bin"
00002D78                            Pal_GHZ:	incbin	"palette\Green Hill Zone.bin"
00002DD8                            Pal_GHZ2:	incbin	"palette\Green Hill Zone2.bin"
00002E38                            Pal_GHZ3:	incbin	"palette\Green Hill Zone3.bin"
00002E98                            Pal_LZ:		incbin	"palette\Labyrinth Zone.bin"
00002EF8                            Pal_LZ2:	incbin	"palette\Labyrinth Zone2.bin"
00002F58                            Pal_LZ3:	incbin	"palette\Labyrinth Zone3.bin"
00002FB8                            Pal_LZWater:	incbin	"palette\Labyrinth Zone Underwater.bin"
00003038                            Pal_LZWatr2:	incbin	"palette\Labyrinth Zone Underwater2.bin"
000030B8                            Pal_LZWatr3:	incbin	"palette\Labyrinth Zone Underwater3.bin"
00003138                            Pal_MZ:		incbin	"palette\Marble Zone.bin"
00003198                            Pal_MZ2:	incbin	"palette\Marble Zone2.bin"
000031F8                            Pal_MZ3:	incbin	"palette\Marble Zone3.bin"
00003258                            Pal_SLZ:	incbin	"palette\Star Light Zone.bin"
000032B8                            Pal_SLZ2:	incbin	"palette\Star Light Zone2.bin"
00003318                            Pal_SLZ3:	incbin	"palette\Star Light Zone3.bin"
00003378                            Pal_SYZ:	incbin	"palette\Spring Yard Zone.bin"
000033D8                            Pal_SYZ2:	incbin	"palette\Spring Yard Zone2.bin"
00003438                            Pal_SYZ3:	incbin	"palette\Spring Yard Zone3.bin"
00003498                            Pal_SBZ1:	incbin	"palette\SBZ Act 1.bin"
000034F8                            Pal_SBZ2:	incbin	"palette\SBZ Act 2.bin"
00003558                            Pal_Special:	incbin	"palette\Special Stage.bin"
000035D8                            Pal_SBZ3:	incbin	"palette\SBZ Act 3.bin"
00003638                            Pal_SBZ3Water:	incbin	"palette\SBZ Act 3 Underwater.bin"
000036B8                            Pal_LZSonWater:	incbin	"palette\Sonic - LZ Underwater.bin"
000036D8                            Pal_LZSonWatr2:	incbin	"palette\Sonic - LZ2 Underwater.bin"
000036F8                            Pal_SBZ3SonWat:	incbin	"palette\Sonic - SBZ3 Underwater.bin"
00003718                            Pal_SSResult:	incbin	"palette\Special Stage Results.bin"
00003798                            Pal_Continue:	incbin	"palette\Special Stage Continue Bonus.bin"
000037D8                            Pal_Ending:	incbin	"palette\Ending.bin"
00003858                            Pal_Options:	incbin	"palette\Options.bin"
000038D8                            Pal_Sonic2:	incbin	"palette\Sonic Pal\02 Sonic 1.bin"
000038F8                            Pal_Sonic3:	incbin	"palette\Sonic Pal\03 Beta.bin"
00003918                            Pal_Sonic4:	incbin	"palette\Sonic Pal\04 Midnight.bin"
00003938                            Pal_Sonic5:	incbin	"palette\Sonic Pal\05 C2.bin"
00003958                            Pal_Sonic6:	incbin	"palette\Sonic Pal\06 Clacker.bin"
00003978                            Pal_Sonic7:	incbin	"palette\Sonic Pal\07 Red Hot.bin"
00003998                            Pal_Sonic8:	incbin	"palette\Sonic Pal\08 Socket.bin"
000039B8                            Pal_Sonic9:	incbin	"palette\Sonic Pal\09 Cringe.bin"
000039D8                            Pal_Sonic10:	incbin	"palette\Sonic Pal\10 Dark.bin"
000039F8                            Pal_Sonic11:	incbin	"palette\Sonic Pal\11 DeltaWooloo.bin"
00003A18                            Pal_SonWater2:	incbin	"palette\Sonic Pal\02 Sonic 1 Underwater.bin"
00003A38                            Pal_SonWater3:	incbin	"palette\Sonic Pal\03 Beta Underwater.bin"
00003A58                            Pal_SonWater4:	incbin	"palette\Sonic Pal\04 Midnight Underwater.bin"
00003A78                            Pal_SonWater5:	incbin	"palette\Sonic Pal\05 C2 Underwater.bin"
00003A98                            Pal_SonWater6:	incbin	"palette\Sonic Pal\06 Clacker Underwater.bin"
00003AB8                            Pal_SonWater7:	incbin	"palette\Sonic Pal\07 Red Hot Underwater.bin"
00003AD8                            Pal_SonWater8:	incbin	"palette\Sonic Pal\08 Socket Underwater.bin"
00003AF8                            Pal_SonWater9:	incbin	"palette\Sonic Pal\09 Cringe Underwater.bin"
00003B18                            Pal_SonWater10:	incbin	"palette\Sonic Pal\10 Dark Underwater.bin"
00003B38                            Pal_SonWater11:	incbin	"palette\Sonic Pal\11 DeltaWooloo Underwater.bin"
00003B58                            Pal_SBZ3SonWat2:	incbin	"palette\Sonic Pal\02 Sonic 1 SBZ3.bin"
00003B78                            Pal_SBZ3SonWat3:	incbin	"palette\Sonic Pal\03 Beta SBZ3.bin"
00003B98                            Pal_SBZ3SonWat4:	incbin	"palette\Sonic Pal\04 Midnight SBZ3.bin"
00003BB8                            Pal_SBZ3SonWat5:	incbin	"palette\Sonic Pal\05 C2 SBZ3.bin"
00003BD8                            Pal_SBZ3SonWat6:	incbin	"palette\Sonic Pal\06 Clacker SBZ3.bin"
00003BF8                            Pal_SBZ3SonWat7:	incbin	"palette\Sonic Pal\07 Red Hot SBZ3.bin"
00003C18                            Pal_SBZ3SonWat8:	incbin	"palette\Sonic Pal\08 Socket SBZ3.bin"
00003C38                            Pal_SBZ3SonWat9:	incbin	"palette\Sonic Pal\09 Cringe SBZ3.bin"
00003C58                            Pal_SBZ3SonWat10:	incbin	"palette\Sonic Pal\10 Dark SBZ3.bin"
00003C78                            Pal_SBZ3SonWat11:	incbin	"palette\Sonic Pal\11 DeltaWooloo SBZ3.bin"
00003C98                            ; ---------------------------------------------------------------------------
00003C98                            ; Subroutine to	wait for VBlank routines to complete
00003C98                            ; ---------------------------------------------------------------------------
00003C98                            
00003C98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003C98                            
00003C98                            
00003C98                            WaitForVBla:
00003C98 46FC 2300                  		enable_ints
00003C9C                            
00003C9C                            	@wait:
00003C9C 4A38 F62A                  		tst.b	(v_vbla_routine).w ; has VBlank routine finished?
00003CA0 66FA                       		bne.s	@wait		; if not, branch
00003CA2 4E75                       		rts	
00003CA4                            ; End of function WaitForVBla
00003CA4                            
00003CA4                            		include	"_incObj\sub RandomNumber.asm"
00003CA4                            ; ---------------------------------------------------------------------------
00003CA4                            ; Subroutine to	generate a pseudo-random number	in d0
00003CA4                            ; ---------------------------------------------------------------------------
00003CA4                            
00003CA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003CA4                            
00003CA4                            
00003CA4                            RandomNumber:
00003CA4 2238 F636                  		move.l	(v_random).w,d1
00003CA8 6600                       		bne.s	@scramble	; if d1 is not 0, branch
00003CAA 223C 2A6D 365A             		move.l	#$2A6D365A,d1	; if d1 is 0, use seed number
00003CB0                            
00003CB0                            	@scramble:
00003CB0 2001                       		move.l	d1,d0
00003CB2 E581                       		asl.l	#2,d1
00003CB4 D280                       		add.l	d0,d1
00003CB6 E781                       		asl.l	#3,d1
00003CB8 D280                       		add.l	d0,d1
00003CBA 3001                       		move.w	d1,d0
00003CBC 4841                       		swap	d1
00003CBE D041                       		add.w	d1,d0
00003CC0 3200                       		move.w	d0,d1
00003CC2 4841                       		swap	d1
00003CC4 21C1 F636                  		move.l	d1,(v_random).w
00003CC8 4E75                       		rts	
00003CC8 4E75                       		rts	
00003CCA                            		include	"_incObj\sub CalcSine.asm"
00003CCA                            ; ---------------------------------------------------------------------------
00003CCA                            ; Subroutine calculate a sine
00003CCA                            
00003CCA                            ; input:
00003CCA                            ;	d0 = angle
00003CCA                            
00003CCA                            ; output:
00003CCA                            ;	d0 = sine
00003CCA                            ;	d1 = cosine
00003CCA                            ; ---------------------------------------------------------------------------
00003CCA                            
00003CCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003CCA                            
00003CCA                            
00003CCA                            CalcSine:
00003CCA 0240 00FF                          andi.w  #$FF,d0
00003CCE 5040                               addq.w  #8,d0
00003CD0 D040                               add.w   d0,d0
00003CD2 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
00003CD6 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
00003CDA 4E75                               rts
00003CDC                            ; End of function CalcSine
00003CDC                            
00003CDC                            ; ===========================================================================
00003CDC                            
00003CDC                            Sine_Data:	incbin	"misc\sinewave.bin"	; values for a 360° sine wave
00003F5C                            
00003F5C                            ; ===========================================================================
00003F5C                            ; ===========================================================================
00003F5C                            		include	"_incObj\sub CalcAngle.asm"
00003F5C                            ; ---------------------------------------------------------------------------
00003F5C                            ; Subroutine calculate an angle
00003F5C                            
00003F5C                            ; input:
00003F5C                            ;	d1 = x-axis distance
00003F5C                            ;	d2 = y-axis distance
00003F5C                            
00003F5C                            ; output:
00003F5C                            ;	d0 = angle
00003F5C                            ; ---------------------------------------------------------------------------
00003F5C                            
00003F5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F5C                            
00003F5C                            
00003F5C                            CalcAngle:
00003F5C 48E7 1800                  		movem.l	d3-d4,-(sp)
00003F60 7600                       		moveq	#0,d3
00003F62 7800                       		moveq	#0,d4
00003F64 3601                       		move.w	d1,d3
00003F66 3802                       		move.w	d2,d4
00003F68 8843                       		or.w	d3,d4
00003F6A 6700                       		beq.s	loc_2D04
00003F6C 3802                       		move.w	d2,d4
00003F6E 4A43                       		tst.w	d3
00003F70 6A00 0000                  		bpl.w	loc_2CC2
00003F74 4443                       		neg.w	d3
00003F76                            
00003F76                            loc_2CC2:
00003F76 4A44                       		tst.w	d4
00003F78 6A00 0000                  		bpl.w	loc_2CCA
00003F7C 4444                       		neg.w	d4
00003F7E                            
00003F7E                            loc_2CCA:
00003F7E B843                       		cmp.w	d3,d4
00003F80 6400 0000                  		bcc.w	loc_2CDC
00003F84 E18C                       		lsl.l	#8,d4
00003F86 88C3                       		divu.w	d3,d4
00003F88 7000                       		moveq	#0,d0
00003F8A 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003F8E 6000                       		bra.s	loc_2CE6
00003F90                            ; ===========================================================================
00003F90                            
00003F90                            loc_2CDC:
00003F90 E18B                       		lsl.l	#8,d3
00003F92 86C4                       		divu.w	d4,d3
00003F94 7040                       		moveq	#$40,d0
00003F96 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003F9A                            
00003F9A                            loc_2CE6:
00003F9A 4A41                       		tst.w	d1
00003F9C 6A00 0000                  		bpl.w	loc_2CF2
00003FA0 4440                       		neg.w	d0
00003FA2 0640 0080                  		addi.w	#$80,d0
00003FA6                            
00003FA6                            loc_2CF2:
00003FA6 4A42                       		tst.w	d2
00003FA8 6A00 0000                  		bpl.w	loc_2CFE
00003FAC 4440                       		neg.w	d0
00003FAE 0640 0100                  		addi.w	#$100,d0
00003FB2                            
00003FB2                            loc_2CFE:
00003FB2 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003FB6 4E75                       		rts	
00003FB8                            ; ===========================================================================
00003FB8                            
00003FB8                            loc_2D04:
00003FB8 303C 0040                  		move.w	#$40,d0
00003FBC 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003FC0 4E75                       		rts	
00003FC2                            ; End of function CalcAngle
00003FC2                            
00003FC2                            ; ===========================================================================
00003FC2                            
00003FC2                            Angle_Data:	incbin	"misc\angles.bin"
000040C4                            
000040C4                            ; ===========================================================================
000040C4                            ; ===========================================================================
000040C4                            
000040C4                            ; ---------------------------------------------------------------------------
000040C4                            ; Sega screen
000040C4                            ; ---------------------------------------------------------------------------
000040C4                            
000040C4                            GM_Sega:
000040CC 6100 D6CA                  		bsr.w	ClearPLC
000040D0 6100 E288                  		bsr.w	PaletteFadeOut
000040D4 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000040DA 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
000040DE 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000040E2 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000040E6 3CBC 8700                  		move.w	#$8700,(a6)	; set background colour (palette entry 0)
000040EA 3CBC 8B00                  		move.w	#$8B00,(a6)	; full-screen vertical scrolling
000040EE 4238 F64E                  		clr.b	(f_wtr_state).w
000040F2 46FC 2700                  		disable_ints
000040F6 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000040FA 0200 00BF                  		andi.b	#$BF,d0
000040FE 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00004104 6100 D0CA                  		bsr.w	ClearScreen
00004112 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00004118 6100 D234                  		bsr.w	NemDec
0000411C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004122 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00004128 303C 0000                  		move.w	#0,d0
0000412C 6100 D7AA                  		bsr.w	EniDec
00004130                            
00004130 43F9 00FF 0000 203C 6510+  		copyTilemap	$FF0000,$E510,$17,7
00004144 43F9 00FF 0180 203C 4000+  		copyTilemap	$FF0180,$C000,$27,$1B
00004158                            
00004158 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
0000415C 6B00                       			bmi.s   @loadpal
0000415E 43F9 00FF 0A40 203C 453A+  			copyTilemap	$FF0A40,$C53A,2,1 ; hide "TM" with a white rectangle
00004172                            
00004172                            	@loadpal:
00004172 7000                       		moveq	#palid_SegaBG,d0
00004174 6100 E4CA                  		bsr.w	PalLoad2	; load Sega logo palette
00004178 47F9 FFFF FB80                     lea        ($FFFFFB80).l,a3
0000417E 7E3F                               moveq    #$3F,d7
00004180                             
00004180                                .loop:
00004180 36FC 0000                          move.w    #cBlack,(a3)+    ; move data to RAM
00004184 51CF FFFA                          dbf        d7,.loop
00004188 6100 E12A                          bsr.w     PaletteFadeIn ; added to allow fade in			
0000418C 31FC FFF6 F632             		move.w	#-$A,(v_pcyc_num).w
00004192 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w
00004198 31FC 0000 F662             		move.w	#0,(v_pal_buffer+$12).w
0000419E 31FC 0000 F660             		move.w	#0,(v_pal_buffer+$10).w
000041A4 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000041A8 0000 0040                  		ori.b	#$40,d0
000041AC 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000041B2                            
000041B2                            Sega_WaitPal:
000041B2 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
000041B8 6100 FADE                  		bsr.w	WaitForVBla
000041BC 6100 E354                  		bsr.w	PalCycle_Sega
000041C0 66F0                       		bne.s	Sega_WaitPal
000041C2                            
000041CA 11FC 0014 F62A             		move.b	#$14,(v_vbla_routine).w
000041D0 6100 FAC6                  		bsr.w	WaitForVBla
000041D4 31FC 001E F614             		move.w	#$1E,(v_demolength).w
000041DA                            
000041DA                            Sega_WaitEnd:
000041DA 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
000041E0 6100 FAB6                  		bsr.w	WaitForVBla
000041E4 4A78 F614                  		tst.w	(v_demolength).w
000041E8 6700                       		beq.s	Sega_GotoTitle
000041EA 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
000041F0 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
000041F2                            
000041F2                            Sega_GotoTitle:
000041F2 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
000041F8 4E75                       		rts	
000041FA                            ; ===========================================================================
000041FA                            
000041FA                            ; ---------------------------------------------------------------------------
000041FA                            ; Title	screen
000041FA                            ; ---------------------------------------------------------------------------
000041FA                            
000041FA                            GM_Title:
00004202 6100 D594                  		bsr.w	ClearPLC
00004206 6100 E152                  		bsr.w	PaletteFadeOut
0000420A 46FC 2700                  		disable_ints
0000420E 6100 D046                  		bsr.w	SoundDriverLoad
00004212 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00004218 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
0000421C 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00004220 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00004224 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00004228 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
0000422C 3CBC 8B03                  		move.w	#$8B03,(a6)
00004230 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (palette line 2, entry 0)
00004234 4238 F64E                  		clr.b	(f_wtr_state).w
00004238 6100 CF96                  		bsr.w	ClearScreen
0000423C                            		;jsr		SHC2022 
0000423C                            
0000423C 43F8 D000                  		lea	(v_objspace).w,a1
00004240 7000                       		moveq	#0,d0
00004242 323C 07FF                  		move.w	#$7FF,d1
00004246                            
00004246                            	Tit_ClrObj1:
00004246 22C0                       		move.l	d0,(a1)+
00004248 51C9 FFFC                  		dbf	d1,Tit_ClrObj1	; fill object space ($D000-$EFFF) with 0
0000424C                            
0000424C 6100 E066                  		bsr.w	PaletteFadeIn
00004250 46FC 2700                  		disable_ints
0000425E 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00004264 6100 D0E8                  		bsr.w	NemDec
00004272 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00004278 6100 D0D4                  		bsr.w	NemDec
00004286 41F9 0000 0000             		lea (Nem_TitleMenu).l,a0 ; Load Menu Text/Characters pattern
0000428C 6100 D0C0                  		bsr.w 	NemDec
00004290 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000429E 4BF9 0000 059E             		lea	(Art_Text).l,a5	; load level select font
000042A4 323C 028F                  		move.w	#$28F,d1
000042A8                            
000042A8                            	Tit_LoadText:
000042A8 3C9D                       		move.w	(a5)+,(a6)
000042AA 51C9 FFFC                  		dbf	d1,Tit_LoadText	; load level select font
000042AE                            
000042AE 11FC 0000 FE30             		move.b	#0,(v_lastlamp).w ; clear lamppost counter
000042B4 31FC 0000 FE08             		move.w	#0,(v_debuguse).w ; disable debug item placement mode
000042BA 31FC 0000 FFF0             		move.w	#0,(f_demo).w	; disable debug mode
000042C0 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w ; unused variable
000042C6 31FC 0000 FE10             		move.w	#(id_GHZ<<8),(v_zone).w	; set level to GHZ (00)
000042CC 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w ; disable palette cycling
000042D2 6100 0000                  		bsr.w	LevelSizeLoad
000042D6 6100 0000                  		bsr.w	DeformLayers
000042DA 43F8 B000                  		lea	(v_16x16).w,a1
000042DE 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load	GHZ 16x16 mappings
000042E4 303C 0000                  		move.w	#0,d0
000042E8 6100 D5EE                  		bsr.w	EniDec
000042EC 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load GHZ 256x256 mappings
000042F2 43F9 00FF 0000             		lea	(v_256x256).l,a1
000042F8 6100 D75C                  		bsr.w	KosDec
000042FC 6100 0000                  		bsr.w	LevelLayoutLoad
00004300 6100 E058                  		bsr.w	PaletteFadeOut
00004304 46FC 2700                  		disable_ints
00004308 6100 CEC6                  		bsr.w	ClearScreen
0000430C 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00004312 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004318 47F8 F708                  		lea	(v_bgscreenposx).w,a3
0000431C 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00004320 343C 6000                  		move.w	#$6000,d2
00004324 6100 0000                  		bsr.w	DrawChunks
00004328 43F9 00FF 0000             		lea	($FF0000).l,a1
0000432E 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00004334 303C 0000                  		move.w	#0,d0
00004338 6100 D59E                  		bsr.w	EniDec
0000433C                            
0000433C 43F9 00FF 0000 203C 4206+  		copyTilemap	$FF0000,$C206,$21,$15
00004350                            
0000435A 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0 ; load title screen patterns
00004360 6100 CFEC                  		bsr.w	NemDec
00004364 7001                       		moveq	#palid_Title,d0	; load title screen palette
00004366 6100 E29C                  		bsr.w	PalLoad1
00004372 11FC 0000 FFFA             		move.b	#0,(f_debugmode).w ; disable debug mode
00004378 31FC 0900 F614             		move.w	#$900,(v_demolength).w ; run title screen for $178 frames
0000437E 43F8 D080                  		lea	(v_objspace+$80).w,a1
00004382 7000                       		moveq	#0,d0
00004384 323C 0007                  		move.w	#7,d1
00004388                            
00004388                            	Tit_ClrObj2:
00004388 22C0                       		move.l	d0,(a1)+
0000438A 51C9 FFFC                  		dbf	d1,Tit_ClrObj2
0000438E                            
0000438E 11FC 0000 D040             		move.b	#id_TitleSonic,(v_objspace+$40).w ; load big Sonic object
00004394 11FC 0000 D080             		move.b	#id_PSBTM,(v_objspace+$80).w ; load "PRESS START BUTTON" object
0000439A 4238 D0A4                  		clr.b	(v_objspace+$80+obRoutine).w ; The 'Mega Games 10' version of Sonic 1 added this line, to fix the 'PRESS START BUTTON' object not appearing
0000439E                            
0000439E 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
000043A2 6A00                       			bpl.s   @isjap		; if yes, branch
000043A4                            
000043A4 11FC 0000 D0C0             		move.b	#id_PSBTM,(v_objspace+$C0).w ; load "TM" object
000043AA 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
000043B0                            	@isjap:
000043B0 11FC 0000 D100             		move.b	#id_PSBTM,(v_objspace+$100).w ; load object which hides part of Sonic
000043B6 11FC 0002 D11A             		move.b	#2,(v_objspace+$100+obFrame).w
000043BC 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000043C2 6100 0000                  		bsr.w	DeformLayers
000043C6 4EB9 0000 0000             		jsr	(BuildSprites).l
000043CC 7000                       		moveq	#plcid_Main,d0
000043CE 6100 D39C                  		bsr.w	NewPLC
000043D2 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w
000043D8 31FC 0000 FFE6             		move.w	#0,(v_title_ccount).w
000043DE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000043E2 0000 0040                  		ori.b	#$40,d0
000043E6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000043EC 6100 DEC6                  		bsr.w	PaletteFadeIn
000043F0                            
000043F0                            Tit_MainLoop:
000043F0 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000043F6 6100 F8A0                  		bsr.w	WaitForVBla
000043FA 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004400 6100 0000                  		bsr.w	DeformLayers
00004404 4EB9 0000 0000             		jsr	(BuildSprites).l
0000440A 6100 D936                  		bsr.w	PCycle_Title
0000440E 6100 D396                  		bsr.w	RunPLC
00004412 3038 D008                  		move.w	(v_objspace+obX).w,d0
00004416 5440                       		addq.w	#2,d0
00004418 31C0 D008                  		move.w	d0,(v_objspace+obX).w ; move Sonic to the right
0000441C 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed $1C00 on x-axis?
00004420 6500                       		blo.s	Tit_ChkRegion	; if not, branch
00004422                            
00004422 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004428 4E75                       		rts	
0000442A                            ; ===========================================================================
0000442A                            
0000442A                            Tit_ChkRegion:
0000442A 4A38 FFF8                  		tst.b	(v_megadrive).w	; check	if the machine is US or	Japanese
0000442E 6A00                       		bpl.s	Tit_RegionJap	; if Japanese, branch
00004430                            
00004430 41F9 0000 0000             		lea	(LevSelCode_US).l,a0 ; load US code
00004436 6000                       		bra.s	Tit_EnterCheat
00004438                            
00004438                            	Tit_RegionJap:
00004438 41F9 0000 0000             		lea	(LevSelCode_J).l,a0 ; load J code
0000443E                            
0000443E                            Tit_EnterCheat:
0000443E 3038 FFE4                  		move.w	(v_title_dcount).w,d0
00004442 D0C0                       		adda.w	d0,a0
00004444 1038 F605                  		move.b	(v_jpadpress1).w,d0 ; get button press
00004448 0200 000F                  		andi.b	#btnDir,d0	; read only UDLR buttons
0000444C B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
0000444E 6600                       		bne.s	Tit_ResetCheat	; if not, branch
00004450 5278 FFE4                  		addq.w	#1,(v_title_dcount).w ; next button press
00004454 4A00                       		tst.b	d0
00004456 6600                       		bne.s	Tit_CountC
00004458 41F8 FFE0                  		lea	(f_levselcheat).w,a0
0000445C 3238 FFE6                  		move.w	(v_title_ccount).w,d1
00004460 E249                       		lsr.w	#1,d1
00004462 0241 0003                  		andi.w	#3,d1
00004466 6700                       		beq.s	Tit_PlayRing
00004468 4A38 FFF8                  		tst.b	(v_megadrive).w
0000446C 6A00                       		bpl.s	Tit_PlayRing
0000446E 7201                       		moveq	#1,d1
00004470 1181 1001                  		move.b	d1,1(a0,d1.w)	; cheat depends on how many times C is pressed
00004474                            
00004474                            	Tit_PlayRing:
00004474 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00004482 6000                       		bra.s	Tit_CountC
00004484                            ; ===========================================================================
00004484                            
00004484                            Tit_ResetCheat:
00004484 4A00                       		tst.b	d0
00004486 6700                       		beq.s	Tit_CountC
00004488 0C78 0009 FFE4             		cmpi.w	#9,(v_title_dcount).w
0000448E 6700                       		beq.s	Tit_CountC
00004490 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w ; reset UDLR counter
00004496                            
00004496                            Tit_CountC:
00004496 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000449A 0200 0020                  		andi.b	#btnC,d0	; is C button pressed?
0000449E 6700                       		beq.s	loc_3230	; if not, branch
000044A0 5278 FFE6                  		addq.w	#1,(v_title_ccount).w ; increment C counter
000044A4                            		
000044A4                            loc_3230:
000044A4 4A78 F614                  		tst.w	(v_demolength).w
000044A8 6700 0000                  		beq.w	GotoDemo
000044AC 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000044B2 6700 FF3C                  		beq.w	Tit_MainLoop	; if not, branch
000044B6                            
000044B6                            Tit_ChkLevSel:
000044B6 4A38 FFE0                  		tst.b	(f_levselcheat).w ; check if level select code is on
000044BA 6700 0000                  		beq.w	@cont	; if not, play level
000044BE 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; check if A is pressed
000044C4 6700 0000                  		beq.w	@cont	; if not, play level
000044C8 6000 0000                  		bra.w	Tit_LevelSelect
000044CC                            
000044CC                            	@cont:		
000044CC 0C38 0006 D0A4             		cmp.b	#6,($FFFFD0A4).w   ; is Title Menu on
000044D2 6700 FF1C                  		beq.w	Tit_MainLoop         ; if it not was deleted, branch  	
000044D6 7400                       		moveq	#0,d2
000044D8 1438 FFB0                  		move.b	(Title_screen_option).w,d2   ; load the choice
000044DC D442                       		add.w	d2,d2            ; multiply by 2
000044DE 343B 2000                  		move.w	Tit_Menu_Choice(pc,d2.w),d2
000044E2 4EFB 2000                  		jmp   Tit_Menu_Choice(pc,d2.w)   ; jump to the choice code
000044E6                            
000044E6                            ; ===========================================================================
000044E6                            Tit_Menu_Choice:
000044E6 0000                       		dc.w PlayLevel-Tit_Menu_Choice   ; 0
000044E8 0000                       		dc.w Menu_Options-Tit_Menu_Choice  ; 2
000044EA                            ; ===========================================================================
000044EA                            
000044EA                            Menu_Options:
000044EA 11FC 0020 F600             		move.b	#$20,(v_gamemode).w
000044F0 4E75                       		rts
000044F2                            
000044F2                            Tit_LevelSelect:	
000044F2 7002                       		moveq	#palid_LevelSel,d0
000044F4 6100 E14A                  		bsr.w	PalLoad2	; load level select palette
000044F8 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000044FC 7000                       		moveq	#0,d0
000044FE 323C 00DF                  		move.w	#$DF,d1
00004502                            
00004502                            	Tit_ClrScroll1:
00004502 22C0                       		move.l	d0,(a1)+
00004504 51C9 FFFC                  		dbf	d1,Tit_ClrScroll1 ; clear scroll data (in RAM)
00004508                            
00004508 21C0 F616                  		move.l	d0,(v_scrposy_dup).w
0000450C 46FC 2700                  		disable_ints
00004510 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004520 323C 03FF                  		move.w	#$3FF,d1
00004524                            
00004524                            	Tit_ClrScroll2:
00004524 2C80                       		move.l	d0,(a6)
00004526 51C9 FFFC                  		dbf	d1,Tit_ClrScroll2 ; clear scroll data (in VRAM)
0000452A                            
0000452A 6100 0000                  		bsr.w	LevSelTextLoad
0000452E                            
0000452E                            ; ---------------------------------------------------------------------------
0000452E                            ; Level	Select
0000452E                            ; ---------------------------------------------------------------------------
0000452E                            
0000452E                            LevelSelect:
0000452E 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00004534 6100 F762                  		bsr.w	WaitForVBla
00004538 6100 0000                  		bsr.w	LevSelControls
0000453C 6100 D268                  		bsr.w	RunPLC
00004540 4AB8 F680                  		tst.l	(v_plc_buffer).w
00004544 66E8                       		bne.s	LevelSelect
00004546 0238 00F0 F605             		andi.b	#btnABC+btnStart,(v_jpadpress1).w ; is A, B, C, or Start pressed?
0000454C 67E0                       		beq.s	LevelSelect	; if not, branch
0000454E 3038 FF82                  		move.w	(v_levselitem).w,d0
00004552 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00004556 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00004558 3038 FF84                  		move.w	(v_levselsound).w,d0
0000455C 0640 0080                  		addi.w	#$80,d0
00004560                            		;cmpi.w	#$9F,d0		; is sound $9F being played?
00004560                            		;beq.s	LevSel_Ending	; if yes, branch
00004560                            		;cmpi.w	#$9E,d0		; is sound $9E being played?
00004560                            		;beq.s	LevSel_Credits	; if yes, branch
00004560                            
00004560                            LevSel_PlaySnd:
00004560 6100 CD3E                  		bsr.w	PlaySound_Special
00004564 60C8                       		bra.s	LevelSelect
00004566                            ; ===========================================================================
00004566                            
00004566                            LevSel_Ending:
00004566 11FC 0000 F600             		move.b	#id_Ending,(v_gamemode).w ; set screen mode to $18 (Ending)
0000456C 31FC 0600 FE10             		move.w	#(id_EndZ<<8),(v_zone).w ; set level to 0600 (Ending)
00004572 4E75                       		rts	
00004574                            ; ===========================================================================
00004574                            
00004574                            LevSel_Credits:
00004574 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; set screen mode to $1C (Credits)
00004582 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w
00004588 4E75                       		rts	
0000458A                            ; ===========================================================================
0000458A                            
0000458A                            LevSel_Level_SS:
0000458A D040                       		add.w	d0,d0
0000458C 303B 0000                  		move.w	LevSel_Ptrs(pc,d0.w),d0 ; load level number
00004590 6B00 FF9C                  		bmi.w	LevelSelect
00004594 0C40 0700                  		cmpi.w	#id_SS*$100,d0	; check	if level is 0700 (Special Stage)
00004598 6600                       		bne.s	LevSel_Level	; if not, branch
0000459A 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
000045A0 4278 FE10                  		clr.w	(v_zone).w	; clear	level
000045A4 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000045AA 7000                       		moveq	#0,d0
000045AC 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000045B0 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000045B4 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000045B8 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000045C0 4E75                       		rts	
000045C2                            ; ===========================================================================
000045C2                            
000045C2                            LevSel_Level:
000045C2 0240 3FFF                  		andi.w	#$3FFF,d0
000045C6 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
000045CA                            
000045CA                            PlayLevel:
000045CA 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
000045D0 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000045D6 7000                       		moveq	#0,d0
000045D8 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000045DC 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000045E0 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000045E4 11C0 FE16                  		move.b	d0,(v_lastspecial).w ; clear special stage number
000045E8 11C0 FE57                  		move.b	d0,(v_emeralds).w ; clear emeralds
000045EC 21C0 FE58                  		move.l	d0,(v_emldlist).w ; clear emeralds
000045F0 21C0 FE5C                  		move.l	d0,(v_emldlist+4).w ; clear emeralds
000045F4 11FC 0001 FE18             		move.b	#1,(v_continues).w ; set continues to 1
000045FA 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
0000460A 4E75                       		rts	
0000460C                            ; ===========================================================================
0000460C                            ; ---------------------------------------------------------------------------
0000460C                            ; Level	select - level pointers
0000460C                            ; ---------------------------------------------------------------------------
0000460C                            		; correct level order
0000460C 0000                       		dc.b id_GHZ, 0
0000460E 0001                       		dc.b id_GHZ, 1
00004610 0002                       		dc.b id_GHZ, 2
00004612 0200                       		dc.b id_MZ, 0
00004614 0201                       		dc.b id_MZ, 1
00004616 0202                       		dc.b id_MZ, 2
00004618 0400                       		dc.b id_SYZ, 0
0000461A 0401                       		dc.b id_SYZ, 1
0000461C 0402                       		dc.b id_SYZ, 2
0000461E 0100                       		dc.b id_LZ, 0
00004620 0101                       		dc.b id_LZ, 1
00004622 0102                       		dc.b id_LZ, 2
00004624 0300                       		dc.b id_SLZ, 0
00004626 0301                       		dc.b id_SLZ, 1
00004628 0302                       		dc.b id_SLZ, 2
0000462A 0500                       		dc.b id_SBZ, 0
0000462C 0501                       		dc.b id_SBZ, 1
0000462E 0103                       		dc.b id_LZ, 3
00004630 0502                       		dc.b id_SBZ, 2
00004632 0700                       		dc.b id_SS, 0		; Special Stage
00004634 8000                       		dc.w $8000		; Sound Test
00004636                            		even
00004636                            ; ---------------------------------------------------------------------------
00004636                            ; Level	select codes
00004636                            ; ---------------------------------------------------------------------------
00004636 0102 0202 0408 00FF        		dc.b btnUp,btnDn,btnDn,btnDn,btnL,btnR,0,$FF
0000463E                            		even
0000463E                            
0000463E 0102 0408 00FF             LevSelCode_US:	dc.b btnUp,btnDn,btnL,btnR,0,$FF
00004644                            		even
00004644                            ; ===========================================================================
00004644                            
00004644                            ; ---------------------------------------------------------------------------
00004644                            ; Demo mode
00004644                            ; ---------------------------------------------------------------------------
00004644                            
00004644                            GotoDemo:
00004644 31FC 001E F614             		move.w	#$1E,(v_demolength).w
0000464A                            
0000464A                            loc_33B6:
0000464A 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00004650 6100 F646                  		bsr.w	WaitForVBla
00004654 6100 0000                  		bsr.w	DeformLayers
00004658 6100 D6C4                  		bsr.w	PaletteCycle
0000465C 6100 D148                  		bsr.w	RunPLC
00004660 3038 D008                  		move.w	(v_objspace+obX).w,d0
00004664 5440                       		addq.w	#2,d0
00004666 31C0 D008                  		move.w	d0,(v_objspace+obX).w
0000466A 0C40 1C00                  		cmpi.w	#$1C00,d0
0000466E 6500                       		blo.s	loc_33E4
00004670 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
00004676 4E75                       		rts	
00004678                            ; ===========================================================================
00004678                            
00004678                            loc_33E4:
00004678 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
0000467E 6600 FE36                  		bne.w	Tit_ChkLevSel	; if yes, branch
00004682 4A78 F614                  		tst.w	(v_demolength).w
00004686 6600 FFC2                  		bne.w	loc_33B6
00004692 3038 FFF2                  		move.w	(v_demonum).w,d0 ; load	demo number
00004696 0240 0007                  		andi.w	#7,d0
0000469A D040                       		add.w	d0,d0
0000469C 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000046A0 31C0 FE10                  		move.w	d0,(v_zone).w
000046A4 5278 FFF2                  		addq.w	#1,(v_demonum).w ; add 1 to demo number
000046A8 0C78 0004 FFF2             		cmpi.w	#4,(v_demonum).w ; is demo number less than 4?
000046AE 6500                       		blo.s	loc_3422	; if yes, branch
000046B0 31FC 0000 FFF2             		move.w	#0,(v_demonum).w ; reset demo number to	0
000046B6                            
000046B6                            loc_3422:
000046B6 31FC 0001 FFF0             		move.w	#1,(f_demo).w	; turn demo mode on
000046BC 11FC 0000 F600             		move.b	#id_Demo,(v_gamemode).w ; set screen mode to 08 (demo)
000046C2 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000046C6 6600                       		bne.s	Demo_Level	; if not, branch
000046C8 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
000046CE 4278 FE10                  		clr.w	(v_zone).w	; clear	level number
000046D2 4238 FE16                  		clr.b	(v_lastspecial).w ; clear special stage number
000046D6                            
000046D6                            Demo_Level:
000046D6 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000046DC 7000                       		moveq	#0,d0
000046DE 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000046E2 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000046E6 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000046EA 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000046F2 4E75                       		rts	
000046F4                            ; ===========================================================================
000046F4                            ; ---------------------------------------------------------------------------
000046F4                            ; Levels used in demos
000046F4                            ; ---------------------------------------------------------------------------
000046F4                            Demo_Levels:	incbin	"misc\Demo Level Order - Intro.bin"
000046FC                            		even
000046FC                            
000046FC                            ; ---------------------------------------------------------------------------
000046FC                            ; Subroutine to	change what you're selecting in the level select
000046FC                            ; ---------------------------------------------------------------------------
000046FC                            
000046FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000046FC                            
000046FC                            
000046FC                            LevSelControls:
000046FC 1238 F605                  		move.b	(v_jpadpress1).w,d1
00004700 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed and held?
00004704 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00004706 5378 FF80                  		subq.w	#1,(v_levseldelay).w ; subtract 1 from time to next move
0000470A 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
0000470C                            
0000470C                            LevSel_UpDown:
0000470C 31FC 000B FF80             		move.w	#$B,(v_levseldelay).w ; reset time delay
00004712 1238 F604                  		move.b	(v_jpadhold1).w,d1
00004716 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed?
0000471A 6700                       		beq.s	LevSel_SndTest	; if not, branch
0000471C 3038 FF82                  		move.w	(v_levselitem).w,d0
00004720 0801 0000                  		btst	#bitUp,d1	; is up	pressed?
00004724 6700                       		beq.s	LevSel_Down	; if not, branch
00004726 5340                       		subq.w	#1,d0		; move up 1 selection
00004728 6400                       		bhs.s	LevSel_Down
0000472A 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
0000472C                            
0000472C                            LevSel_Down:
0000472C 0801 0001                  		btst	#bitDn,d1	; is down pressed?
00004730 6700                       		beq.s	LevSel_Refresh	; if not, branch
00004732 5240                       		addq.w	#1,d0		; move down 1 selection
00004734 0C40 0015                  		cmpi.w	#$15,d0
00004738 6500                       		blo.s	LevSel_Refresh
0000473A 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
0000473C                            
0000473C                            LevSel_Refresh:
0000473C 31C0 FF82                  		move.w	d0,(v_levselitem).w ; set new selection
00004740 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00004744 4E75                       		rts	
00004746                            ; ===========================================================================
00004746                            
00004746                            LevSel_SndTest:
00004746 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w ; is item $14 selected?
0000474C 6600                       		bne.s	LevSel_NoMove	; if not, branch
0000474E 1238 F605                  		move.b	(v_jpadpress1).w,d1
00004752 0201 000C                  		andi.b	#btnR+btnL,d1	; is left/right	pressed?
00004756 6700                       		beq.s	LevSel_NoMove	; if not, branch
00004758 3038 FF84                  		move.w	(v_levselsound).w,d0
0000475C 0801 0002                  		btst	#bitL,d1	; is left pressed?
00004760 6700                       		beq.s	LevSel_Right	; if not, branch
00004762 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00004764 6400                       		bhs.s	LevSel_Right
00004766 7055                       		moveq	#$55,d0		; if sound test	moves below 0, set to $55
00004768                            
00004768                            LevSel_Right:
00004768 0801 0003                  		btst	#bitR,d1	; is right pressed?
0000476C 6700                       		beq.s	LevSel_Refresh2	; if not, branch
0000476E 5240                       		addq.w	#1,d0		; add 1	to sound test
00004770 0C40 0056                  		cmpi.w	#$56,d0
00004774 6500                       		blo.s	LevSel_Refresh2
00004776 7000                       		moveq	#0,d0		; if sound test	moves above $55, set to	0
00004778                            
00004778                            LevSel_Refresh2:
00004778 31C0 FF84                  		move.w	d0,(v_levselsound).w ; set sound test number
0000477C 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00004780                            
00004780                            LevSel_NoMove:
00004780 4E75                       		rts	
00004782                            ; End of function LevSelControls
00004782                            
00004782                            ; ---------------------------------------------------------------------------
00004782                            ; Subroutine to load level select text
00004782                            ; ---------------------------------------------------------------------------
00004782                            
00004782                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004782                            
00004782                            
00004782                            LevSelTextLoad:
00004782                            
00004782 =62100003                  	textpos:	= ($40000000+(($E210&$3FFF)<<16)+(($E210&$C000)>>14))
00004782                            					; $E210 is a VRAM address
00004782                            
00004782 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004788 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000478E 283C 6210 0003             		move.l	#textpos,d4	; text position on screen
00004794 363C E680                  		move.w	#$E680,d3	; VRAM setting (4th palette, $680th tile)
00004798 7214                       		moveq	#$14,d1		; number of lines of text
0000479A                            
0000479A                            	LevSel_DrawAll:
0000479A 2D44 0004                  		move.l	d4,4(a6)
0000479E 6100 0000                  		bsr.w	LevSel_ChgLine	; draw line of text
000047A2 0684 0080 0000             		addi.l	#$800000,d4	; jump to next line
000047A8 51C9 FFF0                  		dbf	d1,LevSel_DrawAll
000047AC                            
000047AC 7000                       		moveq	#0,d0
000047AE 3038 FF82                  		move.w	(v_levselitem).w,d0
000047B2 3200                       		move.w	d0,d1
000047B4 283C 6210 0003             		move.l	#textpos,d4
000047BA EF48                       		lsl.w	#7,d0
000047BC 4840                       		swap	d0
000047BE D880                       		add.l	d0,d4
000047C0 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000047C6 E749                       		lsl.w	#3,d1
000047C8 3001                       		move.w	d1,d0
000047CA D241                       		add.w	d1,d1
000047CC D240                       		add.w	d0,d1
000047CE D2C1                       		adda.w	d1,a1
000047D0 363C C680                  		move.w	#$C680,d3	; VRAM setting (3rd palette, $680th tile)
000047D4 2D44 0004                  		move.l	d4,4(a6)
000047D8 6100 0000                  		bsr.w	LevSel_ChgLine	; recolour selected line
000047DC 363C E680                  		move.w	#$E680,d3
000047E0 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w
000047E6 6600                       		bne.s	LevSel_DrawSnd
000047E8 363C C680                  		move.w	#$C680,d3
000047EC                            
000047EC                            LevSel_DrawSnd:
000047F6 3038 FF84                  		move.w	(v_levselsound).w,d0
000047FA 0640 0080                  		addi.w	#$80,d0
000047FE 1400                       		move.b	d0,d2
00004800 E808                       		lsr.b	#4,d0
00004802 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 1st digit
00004806 1002                       		move.b	d2,d0
00004808 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 2nd digit
0000480C 4E75                       		rts	
0000480E                            ; End of function LevSelTextLoad
0000480E                            
0000480E                            
0000480E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000480E                            
0000480E                            
0000480E                            LevSel_ChgSnd:
0000480E 0240 000F                  		andi.w	#$F,d0
00004812 0C00 000A                  		cmpi.b	#$A,d0		; is digit $A-$F?
00004816 6500                       		blo.s	LevSel_Numb	; if not, branch
00004818 5E00                       		addi.b	#7,d0		; use alpha characters
0000481A                            
0000481A                            	LevSel_Numb:
0000481A D043                       		add.w	d3,d0
0000481C 3C80                       		move.w	d0,(a6)
0000481E 4E75                       		rts	
00004820                            ; End of function LevSel_ChgSnd
00004820                            
00004820                            
00004820                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004820                            
00004820                            
00004820                            LevSel_ChgLine:
00004820 7417                       		moveq	#$17,d2		; number of characters per line
00004822                            
00004822                            	LevSel_LineLoop:
00004822 7000                       		moveq	#0,d0
00004824 1019                       		move.b	(a1)+,d0	; get character
00004826 6A00                       		bpl.s	LevSel_CharOk	; branch if valid
00004828 3CBC 0000                  		move.w	#0,(a6)		; use blank character
0000482C 51CA FFF4                  		dbf	d2,LevSel_LineLoop
00004830 4E75                       		rts	
00004832                            
00004832                            
00004832                            	LevSel_CharOk:
00004832 D043                       		add.w	d3,d0		; combine char with VRAM setting
00004834 3C80                       		move.w	d0,(a6)		; send to VRAM
00004836 51CA FFEA                  		dbf	d2,LevSel_LineLoop
0000483A 4E75                       		rts	
0000483C                            ; End of function LevSel_ChgLine
0000483C                            
0000483C                            ; ===========================================================================
0000483C                            ; ---------------------------------------------------------------------------
0000483C                            ; Level	select menu text
0000483C                            ; ---------------------------------------------------------------------------
0000483C                            		incbin	"misc\Level Select Text (JP1).bin"
00004A34                            		even
00004A34                            ; ---------------------------------------------------------------------------
00004A34                            ; Music	playlist
00004A34                            ; ---------------------------------------------------------------------------
00004A34                            MusicList:
00004A34 00                         			dc.b bgm_GHZ    ; GHZ1
00004A35 00                                 	dc.b bgm_LZ    ; GHZ2
00004A36 00                                 	dc.b bgm_Seaside   ; GHZ3
00004A37 00                                 	dc.b bgm_LZ    ; GHZ4
00004A38 00                                 	dc.b bgm_Stop    ; LZ1
00004A39 00                                 	dc.b bgm_Stop   ; LZ2
00004A3A 00                                 	dc.b bgm_Stop    ; LZ3
00004A3B 00                                 	dc.b bgm_SBZ3    ; LZ4
00004A3C 00                                 	dc.b bgm_MZ    ; MZ1
00004A3D 00                                 	dc.b bgm_SBZ    ; MZ2
00004A3E 00                                 	dc.b bgm_RRZ2   ; MZ3
00004A3F 00                                 	dc.b bgm_SBZ    ; MZ4
00004A40 00                                 	dc.b bgm_LZ    ; SLZ1
00004A41 00                                 	dc.b bgm_LZ    ; SLZ2
00004A42 00                                 	dc.b bgm_LZ    ; SLZ3
00004A43 00                                 	dc.b bgm_LZ    ; SLZ4
00004A44 00                                 	dc.b bgm_SYZ    ; SYZ1
00004A45 00                                 	dc.b bgm_SLZ    ; SYZ2
00004A46 00                                 	dc.b bgm_SLZ    ; SYZ3
00004A47 00                                 	dc.b bgm_SLZ    ; SYZ4
00004A48 00                                 	dc.b bgm_SBZ    ; SBZ1
00004A49 00                                 	dc.b bgm_SBZ    ; SBZ2
00004A4A 00                                 	dc.b bgm_FZ		; SBZ3
00004A4B 00                                 	dc.b bgm_SBZ    ; SBZ4
00004A4C 00                                 	dc.b bgm_GHZ    ; GHZ1
00004A4D 00                                 	dc.b bgm_GHZ    ; GHZ1
00004A4E 00                                 	dc.b bgm_GHZ    ; GHZ1
00004A4F 00                                 	dc.b bgm_GHZ    ; GHZ1
00004A50                                    	even
00004A50                            ; ===========================================================================
00004A50                            
00004A50                            ; ---------------------------------------------------------------------------
00004A50                            ; Level
00004A50                            ; ---------------------------------------------------------------------------
00004A50                            
00004A50                            GM_Level:
00004A50 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS - reset water state
00004A56                            
00004A56 08F8 0007 F600             		bset	#7,(v_gamemode).w ; add $80 to screen mode (for pre level sequence)
00004A5C 4A78 FFF0                  		tst.w	(f_demo).w
00004A60 6B00                       		bmi.s	Level_NoMusicFade
00004A6A                            
00004A6A                            	Level_NoMusicFade:
00004A6A 6100 CD2C                  		bsr.w	ClearPLC
00004A6E 6100 D8EA                  		bsr.w	PaletteFadeOut
00004A72 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
00004A76 6B00                       		bmi.s	Level_ClrRam	; if yes, branch
00004A78 46FC 2700                  		disable_ints
00004A86 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004A8C 6100 C8C0                  		bsr.w	NemDec
00004A90 46FC 2300                  		enable_ints
00004A94 7000                       		moveq	#0,d0
00004A96 1038 FE10                  		move.b	(v_zone).w,d0
00004A9A E948                       		lsl.w	#4,d0
00004A9C 45F9 0000 0000             		lea	(LevelHeaders).l,a2
00004AA2 45F2 0000                  		lea	(a2,d0.w),a2
00004AA6 7000                       		moveq	#0,d0
00004AA8 1012                       		move.b	(a2),d0
00004AAA 6700                       		beq.s	loc_37FC
00004AAC 6100 CC8C                  		bsr.w	AddPLC		; load level patterns
00004AB0                            
00004AB0                            loc_37FC:
00004AB0 7000                       		moveq	#plcid_Main2,d0
00004AB2 6100 CC86                  		bsr.w	AddPLC		; load standard	patterns
00004AB6 4EB9 0000 0000             		jsr		LoadLifeIcon
00004ABC                            		
00004ABC                            Level_ClrRam:
00004ABC 43F8 D000                  		lea	(v_objspace).w,a1
00004AC0 7000                       		moveq	#0,d0
00004AC2 323C 07FF                  		move.w	#$7FF,d1
00004AC6                            
00004AC6                            	Level_ClrObjRam:
00004AC6 22C0                       		move.l	d0,(a1)+
00004AC8 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00004ACC                            
00004ACC 43F8 F628                  		lea	($FFFFF628).w,a1
00004AD0 7000                       		moveq	#0,d0
00004AD2 323C 0015                  		move.w	#$15,d1
00004AD6                            
00004AD6                            	Level_ClrVars1:
00004AD6 22C0                       		move.l	d0,(a1)+
00004AD8 51C9 FFFC                  		dbf	d1,Level_ClrVars1 ; clear misc variables
00004ADC                            
00004ADC 43F8 F700                  		lea	(v_screenposx).w,a1
00004AE0 7000                       		moveq	#0,d0
00004AE2 323C 003F                  		move.w	#$3F,d1
00004AE6                            
00004AE6                            	Level_ClrVars2:
00004AE6 22C0                       		move.l	d0,(a1)+
00004AE8 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00004AEC                            
00004AEC 43F8 FE60                  		lea	(v_oscillate+2).w,a1
00004AF0 7000                       		moveq	#0,d0
00004AF2 323C 0047                  		move.w	#$47,d1
00004AF6                            
00004AF6                            	Level_ClrVars3:
00004AF6 22C0                       		move.l	d0,(a1)+
00004AF8 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00004AFC                            
00004AFC 46FC 2700                  		disable_ints
00004B00 6100 C6CE                  		bsr.w	ClearScreen
00004B04 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00004B0A 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00004B0E 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00004B12 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00004B16 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
00004B1A 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00004B1E 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00004B22 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00004B26 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
00004B2C 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
00004B30 31FC C800 C8FC             		ResetDMAQueue	
00004B36 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004B3C 6600                       		bne.s	Level_LoadPal	; if not, branch
00004B3E                            
00004B3E 3CBC 8014                  		move.w	#$8014,(a6)	; enable H-interrupts
00004B42 7000                       		moveq	#0,d0
00004B44 1038 FE11                  		move.b	(v_act).w,d0
00004B48 D040                       		add.w	d0,d0
00004B4A 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00004B50 3031 0000                  		move.w	(a1,d0.w),d0
00004B54 31C0 F646                  		move.w	d0,(v_waterpos1).w ; set water heights
00004B58 31C0 F648                  		move.w	d0,(v_waterpos2).w
00004B5C 31C0 F64A                  		move.w	d0,(v_waterpos3).w
00004B60 4238 F64D                  		clr.b	(v_wtr_routine).w ; clear water routine counter
00004B64 4238 F64E                  		clr.b	(f_wtr_state).w	; clear	water state
00004B68 11FC 0001 F64C             		move.b	#1,(f_water).w	; enable water
00004B6E                            
00004B6E                            Level_LoadPal:
00004B6E 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00004B74 46FC 2300                  		move	#$2300,sr
00004B78 4EB9 0000 0000             		jsr		LoadPlayerPal
00004B7E 6100 DAC0                  		bsr.w	PalLoad2	; load Sonic's pallet line
00004B82 0C38 0001 F64C             		cmp.b	#1,(f_water).w ; Is water enabled?
00004B88 6600                       		bne.s	Level_GetBgm	; if not, branch
00004B8A 4EB9 0000 0000             		jsr		LoadPlayerWaterPal
00004B90 6100 DAEE                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00004B94 4A38 FE30                  		tst.b	($FFFFFE30).w
00004B98 6700                       		beq.s	Level_GetBgm
00004B9A 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00004BA0                            
00004BA0                            	Level_GetBgm:
00004BA0 4A78 FFF0                  		tst.w	(f_demo).w
00004BA4 6B00                               	bmi.s	Level_SkipTtlCard
00004BA6 7000                               	moveq	#0,d0
00004BA8 3038 FE10                  		move.w	(v_zone).w,d0
00004BAC E418                       		ror.b	#2,d0
00004BAE EC48                       		lsr.w   #6,d0
00004BB0 43F9 0000 4A34                     	lea	(MusicList).l,a1 ; load    music playlist
00004BB6 1031 0000                          	move.b	(a1,d0.w),d0
00004BBA 11C0 F5C6                  		move.b	d0,((v_Saved_music)).w
00004BBE 6100 C6DA                          	bsr.w	PlaySound    ; play music
00004BC2 11FC 0000 D080                     	move.b	#id_TitleCard,(v_objspace+$80).w ; load title card object
00004BC8                            
00004BC8                            
00004BC8                            Level_TtlCardLoop:
00004BC8 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00004BCE 6100 F0C8                  		bsr.w	WaitForVBla
00004BD2 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004BD8 4EB9 0000 0000             		jsr	(BuildSprites).l
00004BDE 6100 CBC6                  		bsr.w	RunPLC
00004BE2 3038 D108                  		move.w	(v_objspace+$108).w,d0
00004BE6 B078 D130                  		cmp.w	(v_objspace+$130).w,d0 ; has title card sequence finished?
00004BEA 66DC                       		bne.s	Level_TtlCardLoop ; if not, branch
00004BEC 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are there any items in the pattern load cue?
00004BF0 66D6                       		bne.s	Level_TtlCardLoop ; if yes, branch
00004BF2 4EB9 0000 0000             		jsr	(Hud_Base).l	; load basic HUD gfx
00004BF8                            
00004BF8                            	Level_SkipTtlCard:
00004BF8 4EB9 0000 0000             		jsr		LoadPlayerPal
00004BFE 6100 DA04                  		bsr.w	PalLoad1	; load Sonic's palette
00004C02 6100 0000                  		bsr.w	LevelSizeLoad
00004C06 6100 0000                  		bsr.w	DeformLayers
00004C0A 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
00004C10 6100 0000                  		bsr.w	LevelDataLoad ; load block mappings and palettes
00004C14 6100 0000                  		bsr.w	LoadTilesFromStart
00004C18 4EB9 0000 0000             		jsr	(FloorLog_Unk).l
00004C1E 6100 0000                  		bsr.w	ColIndexLoad
00004C22 6100 0000                  		bsr.w	LZWaterFeatures
00004C26 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00004C2C 4A78 FFF0                  		tst.w	(f_demo).w
00004C30 6B00                       		bmi.s	Level_ChkDebug
00004C32 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
00004C38                            
00004C38                            Level_ChkDebug:
00004C38 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00004C3C 6700                       		beq.s	Level_ChkWater	; if not, branch
00004C3E 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button held?
00004C44 6700                       		beq.s	Level_ChkWater	; if not, branch
00004C46 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00004C4C                            
00004C4C                            Level_ChkWater:
00004C4C 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
00004C52 31FC 0000 F604             		move.w	#0,(v_jpadhold1).w
00004C58 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004C5E 6600                       		bne.s	Level_LoadObj	; if not, branch
00004C60 11FC 0000 D780             		move.b	#id_WaterSurface,(v_objspace+$780).w ; load water surface object
00004C66 31FC 0060 D788             		move.w	#$60,(v_objspace+$780+obX).w
00004C6C 11FC 0000 D7C0             		move.b	#id_WaterSurface,(v_objspace+$7C0).w
00004C72 31FC 0120 D7C8             		move.w	#$120,(v_objspace+$7C0+obX).w
00004C78                            
00004C78                            Level_LoadObj:
00004C78 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004C7E 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004C84 4EB9 0000 0000             		jsr	(BuildSprites).l
00004C8A 7000                       		moveq	#0,d0
00004C8C 4A38 FE30                  		tst.b	(v_lastlamp).w	; are you starting from	a lamppost?
00004C90 6600                       		bne.s	Level_SkipClr	; if yes, branch
00004C92 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004C96 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004C9A 11C0 FE1B                  		move.b	d0,(v_lifecount).w ; clear lives counter
00004C9E                            
00004C9E                            	Level_SkipClr:
00004C9E 11C0 FE1A                  		move.b	d0,(f_timeover).w
00004CA2 11C0 FE2C                  		move.b	d0,(v_shield).w	; clear shield
00004CA6 11C0 F5C8                  		move.b	d0,(v_rshield).w; clear red shield
00004CAA 11C0 F5C9                  		move.b	d0,(v_gshield).w; clear gold shield
00004CAE 11C0 F5CA                  		move.b	d0,(v_spshield).w; clear gold shield
00004CB2 11C0 FE2D                  		move.b	d0,(v_invinc).w	; clear invincibility
00004CB6 11C0 FE2E                  		move.b	d0,(v_shoes).w	; clear speed shoes
00004CBA 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00004CBE 31C0 FE08                  		move.w	d0,(v_debuguse).w
00004CC2 31C0 FE02                  		move.w	d0,(f_restart).w
00004CC6 31C0 FE04                  		move.w	d0,(v_framecount).w
00004CCA 6100 0000                  		bsr.w	OscillateNumInit
00004CCE 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00004CD4 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00004CDA 11FC 0001 FE1E             		move.b	#1,(f_timecount).w ; update time counter
00004CE0 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
00004CE6 43F9 0000 0000             		lea	(DemoDataPtr).l,a1 ; load demo data
00004CEC 7000                       		moveq	#0,d0
00004CEE 1038 FE10                  		move.b	(v_zone).w,d0
00004CF2 E548                       		lsl.w	#2,d0
00004CF4 2271 0000                  		movea.l	(a1,d0.w),a1
00004CF8 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004CFC 6A00                       		bpl.s	Level_Demo	; if yes, branch
00004CFE 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1 ; load ending demo data
00004D04 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00004D08 5340                       		subq.w	#1,d0
00004D0A E548                       		lsl.w	#2,d0
00004D0C 2271 0000                  		movea.l	(a1,d0.w),a1
00004D10                            
00004D10                            Level_Demo:
00004D10 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w ; load key press duration
00004D16 5338 F792                  		subq.b	#1,(v_btnpushtime2).w ; subtract 1 from duration
00004D1A 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00004D20 4A78 FFF0                  		tst.w	(f_demo).w
00004D24 6A00                       		bpl.s	Level_ChkWaterPal
00004D26 31FC 021C F614             		move.w	#540,(v_demolength).w
00004D2C 0C78 0004 FFF4             		cmpi.w	#4,(v_creditsnum).w
00004D32 6600                       		bne.s	Level_ChkWaterPal
00004D34 31FC 01FE F614             		move.w	#510,(v_demolength).w
00004D3A                            
00004D3A                            Level_ChkWaterPal:
00004D3A 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ/SBZ3?
00004D40 6600                       		bne.s	Level_Delay	; if not, branch
00004D42 700B                       		moveq	#palid_LZWater,d0 ; palette $B (LZ underwater)
00004D44 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; is level SBZ3?
00004D4A 6600                       		bne.s	Level_WtrNotSbz	; if not, branch
00004D4C 700D                       		moveq	#palid_SBZ3Water,d0 ; palette $D (SBZ3 underwater)
00004D4E                            
00004D4E                            	Level_WtrNotSbz:
00004D4E 6100 D96C                  		bsr.w	PalLoad4_Water
00004D52                            
00004D52                            Level_Delay:
00004D52 323C 0003                  		move.w	#3,d1
00004D56                            
00004D56                            	Level_DelayLoop:
00004D56 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004D5C 6100 EF3A                  		bsr.w	WaitForVBla
00004D60 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004D64                            
00004D64 31FC 202F F626             		move.w	#$202F,(v_pfade_start).w ; fade in 2nd, 3rd & 4th palette lines
00004D6A 6100 D54E                  		bsr.w	PalFadeIn_Alt
00004D6E 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
00004D72 6B00                       		bmi.s	Level_ClrCardArt ; if yes, branch
00004D74 5438 D0A4                  		addq.b	#2,(v_objspace+$80+obRoutine).w ; make title card move
00004D78 5838 D0E4                  		addq.b	#4,(v_objspace+$C0+obRoutine).w
00004D7C 5838 D124                  		addq.b	#4,(v_objspace+$100+obRoutine).w
00004D80 5838 D164                  		addq.b	#4,(v_objspace+$140+obRoutine).w
00004D84 6000                       		bra.s	Level_StartGame
00004D86                            ; ===========================================================================
00004D86                            
00004D86                            Level_ClrCardArt:
00004D86 7000                       		moveq	#plcid_Explode,d0
00004D88 4EB9 0000 173A             		jsr	(AddPLC).l	; load explosion gfx
00004D8E 7000                       		moveq	#0,d0
00004D90 1038 FE10                  		move.b	(v_zone).w,d0
00004D94 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
00004D98 4EB9 0000 173A             		jsr	(AddPLC).l	; load animal gfx (level no. + $15)
00004D9E                            
00004D9E                            Level_StartGame:
00004D9E 08B8 0007 F600             		bclr	#7,(v_gamemode).w ; subtract $80 from mode to end pre-level stuff
00004DA4                            
00004DA4                            ; ---------------------------------------------------------------------------
00004DA4                            ; Main level loop (when	all title card and loading sequences are finished)
00004DA4                            ; ---------------------------------------------------------------------------
00004DA4                            
00004DA4                            Level_MainLoop:
00004DA4 6100 C506                  		bsr.w	PauseGame
00004DA8 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004DAE 6100 EEE8                  		bsr.w	WaitForVBla
00004DB2 5278 FE04                  		addq.w	#1,(v_framecount).w ; add 1 to level timer
00004DB6 6100 0000                  		bsr.w	MoveSonicInDemo
00004DBA 6100 0000                  		bsr.w	LZWaterFeatures
00004DBE 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004DC4 4A78 FE02                  			tst.w   (f_restart).w
00004DC8 6600 FC86                  			bne     GM_Level
00004DCC 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00004DD0 6600                       		bne.s	Level_DoScroll	; if yes, branch
00004DD2 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004DD8 6400                       		bhs.s	Level_SkipScroll ; if yes, branch
00004DDA                            
00004DDA                            	Level_DoScroll:
00004DDA 6100 0000                  		bsr.w	DeformLayers
00004DDE                            
00004DDE                            	Level_SkipScroll:
00004DDE 4EB9 0000 0000             		jsr	(BuildSprites).l
00004DE4 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004DEA 6100 CF32                  		bsr.w	PaletteCycle
00004DEE 6100 C9B6                  		bsr.w	RunPLC
00004DF2 6100 0000                  		bsr.w	OscillateNumDo
00004DF6 6100 0000                  		bsr.w	SynchroAnimate
00004DFA 6100 0000                  		bsr.w	SignpostArtLoad
00004DFE                            
00004DFE 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004E04 6700                       		beq.s	Level_ChkDemo	; if mode is 8 (demo), branch
00004E06 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w
00004E0C 6700 FF96                  		beq.w	Level_MainLoop	; if mode is $C (level), branch
00004E10 4E75                       		rts	
00004E12                            ; ===========================================================================
00004E12                            
00004E12                            Level_ChkDemo:
00004E12 4A78 FE02                  		tst.w	(f_restart).w	; is level set to restart?
00004E16 6600                       		bne.s	Level_EndDemo	; if yes, branch
00004E18 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00004E1C 6700                       		beq.s	Level_EndDemo	; if not, branch
00004E1E 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004E24 6700 FF7E                  		beq.w	Level_MainLoop	; if mode is 8 (demo), branch
00004E28 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004E2E 4E75                       		rts	
00004E30                            ; ===========================================================================
00004E30                            
00004E30                            Level_EndDemo:
00004E30 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004E36 6600                       		bne.s	Level_FadeDemo	; if mode is 8 (demo), branch
00004E38 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004E3E 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on & not ending sequence?
00004E42 6A00                       		bpl.s	Level_FadeDemo	; if yes, branch
00004E44 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; go to credits
00004E4A                            
00004E4A                            Level_FadeDemo:
00004E4A 31FC 003C F614             		move.w	#$3C,(v_demolength).w
00004E50 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00004E56 4278 F794                  		clr.w	(v_palchgspeed).w
00004E5A                            
00004E5A                            	Level_FDLoop:
00004E5A 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004E60 6100 EE36                  		bsr.w	WaitForVBla
00004E64 6100 0000                  		bsr.w	MoveSonicInDemo
00004E68 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004E6E 4EB9 0000 0000             		jsr	(BuildSprites).l
00004E74 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004E7A 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00004E7E 6A00                       		bpl.s	loc_3BC8
00004E80 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00004E86 6100 D4F2                  		bsr.w	FadeOut_ToBlack
00004E8A                            
00004E8A                            loc_3BC8:
00004E8A 4A78 F614                  		tst.w	(v_demolength).w
00004E8E 66CA                       		bne.s	Level_FDLoop
00004E90 4E75                       		rts	
00004E92                            ; ===========================================================================
00004E92                            
00004E92                            		include	"_inc\LZWaterFeatures.asm"
00004E92                            ; ---------------------------------------------------------------------------
00004E92                            ; Subroutine to	do special water effects in Labyrinth Zone
00004E92                            ; ---------------------------------------------------------------------------
00004E92                            
00004E92                            LZWaterFeatures:
00004E92 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00004E98 6600                       		bne.s	@notlabyrinth	; if not, branch
00004E9A 4A38 F744                  			tst.b   (f_nobgscroll).w
00004E9E 6600                       			bne.s	@setheight
00004EA0 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004EA6 6400                       		bcc.s	@setheight	; if yes, skip other effects
00004EA8                            
00004EA8 6100 0000                  		bsr.w	LZWindTunnels
00004EAC 6100 0000                  		bsr.w	LZWaterSlides
00004EB0 6100 0000                  		bsr.w	LZDynamicWater
00004EB4                            
00004EB4                            @setheight:
00004EB4 4238 F64E                  		clr.b	(f_wtr_state).w
00004EB8 7000                       		moveq	#0,d0
00004EBA 1038 FE60                  		move.b	(v_oscillate+2).w,d0
00004EBE E248                       		lsr.w	#1,d0
00004EC0 D078 F648                  		add.w	(v_waterpos2).w,d0
00004EC4 31C0 F646                  		move.w	d0,(v_waterpos1).w
00004EC8 3038 F646                  		move.w	(v_waterpos1).w,d0
00004ECC 9078 F704                  		sub.w	(v_screenposy).w,d0
00004ED0 6400                       		bcc.s	@isbelow
00004ED2 4A40                       		tst.w	d0
00004ED4 6A00                       		bpl.s	@isbelow	; if water is below top of screen, branch
00004ED6                            
00004ED6 11FC 00DF F625             		move.b	#223,(v_hbla_line).w
00004EDC 11FC 0001 F64E             		move.b	#1,(f_wtr_state).w ; screen is all underwater
00004EE2                            
00004EE2                            	@isbelow:
00004EE2 0C40 00DF                  		cmpi.w	#223,d0		; is water within 223 pixels of top of screen?
00004EE6 6500                       		bcs.s	@isvisible	; if yes, branch
00004EE8 303C 00DF                  		move.w	#223,d0
00004EEC                            
00004EEC                            	@isvisible:
00004EEC 11C0 F625                  		move.b	d0,(v_hbla_line).w ; set water surface as on-screen
00004EF0                            
00004EF0                            @notlabyrinth:
00004EF0 4E75                       		rts	
00004EF2                            ; ===========================================================================
00004EF2                            ; ---------------------------------------------------------------------------
00004EF2                            ; Initial water heights
00004EF2                            ; ---------------------------------------------------------------------------
00004EF2 0420                       WaterHeight:	dc.w $420	; Labyrinth 1
00004EF4 0328                       		dc.w $328	; Labyrinth 2
00004EF6 0900                       		dc.w $900	; Labyrinth 3
00004EF8 0228                       		dc.w $228	; Scrap Brain 3
00004EFA                            		even
00004EFA                            ; ===========================================================================
00004EFA                            
00004EFA                            ; ---------------------------------------------------------------------------
00004EFA                            ; Labyrinth dynamic water routines
00004EFA                            ; ---------------------------------------------------------------------------
00004EFA                            
00004EFA                            LZDynamicWater:
00004EFA 7000                       		moveq	#0,d0
00004EFC 1038 FE11                  		move.b	(v_act).w,d0
00004F00 D040                       		add.w	d0,d0
00004F02 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004F06 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004F0A 7200                       		moveq	#0,d1
00004F0C 1238 F64C                  		move.b	(f_water).w,d1
00004F10 3038 F64A                  		move.w	(v_waterpos3).w,d0
00004F14 9078 F648                  		sub.w	(v_waterpos2).w,d0
00004F18 6700                       		beq.s	@exit		; if water level is correct, branch
00004F1A 6400                       		bcc.s	@movewater	; if water level is too high, branch
00004F1C 4441                       		neg.w	d1		; set water to move up instead
00004F1E                            
00004F1E                            	@movewater:
00004F1E D378 F648                  		add.w	d1,(v_waterpos2).w ; move water up/down
00004F22                            
00004F22                            	@exit:
00004F22 4E75                       		rts	
00004F24                            ; ===========================================================================
00004F24 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004F26 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004F28 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004F2A 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004F2C                            ; ===========================================================================
00004F2C                            
00004F2C                            DynWater_LZ1:
00004F2C 4E75                       		rts	
00004F2E                            ; ===========================================================================
00004F2E                            
00004F2E                            DynWater_LZ2:
00004F2E 3038 F700                  		move.w	(v_screenposx).w,d0
00004F32 323C 0328                  		move.w	#$328,d1
00004F36 0C40 0500                  		cmpi.w	#$500,d0
00004F3A 6500                       		bcs.s	@setwater
00004F3C 323C 03C8                  		move.w	#$3C8,d1
00004F40 0C40 0B00                  		cmpi.w	#$B00,d0
00004F44 6500                       		bcs.s	@setwater
00004F46 323C 0428                  		move.w	#$428,d1
00004F4A                            
00004F4A                            	@setwater:
00004F4A 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004F4E 4E75                       		rts	
00004F50                            ; ===========================================================================
00004F50                            
00004F50                            DynWater_LZ3:
00004F50 3038 F700                  		move.w	(v_screenposx).w,d0
00004F54 1438 F64D                  		move.b	(v_wtr_routine).w,d2
00004F58 6600                       		bne.s	@routine2
00004F5A                            
00004F5A 323C 0900                  		move.w	#$900,d1
00004F5E 0C40 0600                  		cmpi.w	#$600,d0	; has screen reached position?
00004F62 6500                       		bcs.s	@setwaterlz3	; if not, branch
00004F64 0C78 03C0 D00C             		cmpi.w	#$3C0,(v_player+obY).w
00004F6A 6500                       		bcs.s	@setwaterlz3
00004F6C 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic in a y-axis range?
00004F72 6400                       		bcc.s	@setwaterlz3	; if not, branch
00004F74                            
00004F74 323C 04C8                  		move.w	#$4C8,d1	; set new water height
00004F78 11FC 004B A506             		move.b	#$4B,(v_lvllayout+$106).w ; update level layout
00004F7E 11FC 0001 F64D             		move.b	#1,(v_wtr_routine).w ; use second routine next
00004F8C                            
00004F8C                            	@setwaterlz3:
00004F8C 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004F90 31C1 F648                  		move.w	d1,(v_waterpos2).w ; change water height instantly
00004F94 4E75                       		rts	
00004F96                            ; ===========================================================================
00004F96                            
00004F96                            @routine2:
00004F96 5302                       		subq.b	#1,d2
00004F98 6600                       		bne.s	@routine3
00004F9A 323C 04C8                  		move.w	#$4C8,d1
00004F9E 0C40 0770                  		cmpi.w	#$770,d0
00004FA2 6500                       		bcs.s	@setwater2
00004FA4 323C 0308                  		move.w	#$308,d1
00004FA8 0C40 1400                  		cmpi.w	#$1400,d0
00004FAC 6500                       		bcs.s	@setwater2
00004FAE 0C78 0508 F64A             		cmpi.w	#$508,(v_waterpos3).w
00004FB4 6700                       		beq.s	@sonicislow
00004FB6 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic below $600 y-axis?
00004FBC 6400                       		bcc.s	@sonicislow	; if yes, branch
00004FBE 0C78 0280 D00C             		cmpi.w	#$280,(v_player+obY).w
00004FC4 6400                       		bcc.s	@setwater2
00004FC6                            
00004FC6                            @sonicislow:
00004FC6 323C 0508                  		move.w	#$508,d1
00004FCA 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004FCE 0C40 1770                  		cmpi.w	#$1770,d0
00004FD2 6500                       		bcs.s	@setwater2
00004FD4 11FC 0002 F64D             		move.b	#2,(v_wtr_routine).w
00004FDA                            
00004FDA                            	@setwater2:
00004FDA 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004FDE 4E75                       		rts	
00004FE0                            ; ===========================================================================
00004FE0                            
00004FE0                            @routine3:
00004FE0 5302                       		subq.b	#1,d2
00004FE2 6600                       		bne.s	@routine4
00004FE4 323C 0508                  		move.w	#$508,d1
00004FE8 0C40 1860                  		cmpi.w	#$1860,d0
00004FEC 6500                       		bcs.s	@setwater3
00004FEE 323C 0188                  		move.w	#$188,d1
00004FF2 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004FF6 6400                       		bcc.s	@loc_3DC6
00004FF8 B278 F648                  		cmp.w	(v_waterpos2).w,d1
00004FFC 6600                       		bne.s	@setwater3
00004FFE                            
00004FFE                            	@loc_3DC6:
00004FFE 11FC 0003 F64D             		move.b	#3,(v_wtr_routine).w
00005004                            
00005004                            	@setwater3:
00005004 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00005008 4E75                       		rts	
0000500A                            ; ===========================================================================
0000500A                            
0000500A                            @routine4:
0000500A 5302                       		subq.b	#1,d2
0000500C 6600                       		bne.s	@routine5
0000500E 323C 0188                  		move.w	#$188,d1
00005012 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00005016 6500                       		bcs.s	@setwater4
00005018 323C 0900                  		move.w	#$900,d1
0000501C 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00005020 6500                       		bcs.s	@setwater4
00005022 11FC 0004 F64D             		move.b	#4,(v_wtr_routine).w
00005028 31FC 0608 F64A             		move.w	#$608,(v_waterpos3).w
0000502E 31FC 07C0 F648             		move.w	#$7C0,(v_waterpos2).w
00005034 11FC 0001 F7E8             		move.b	#1,(f_switch+8).w
0000503A 4E75                       		rts	
0000503C                            ; ===========================================================================
0000503C                            
0000503C                            @setwater4:
0000503C 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00005040 31C1 F648                  		move.w	d1,(v_waterpos2).w
00005044 4E75                       		rts	
00005046                            ; ===========================================================================
00005046                            
00005046                            @routine5:
00005046 0C40 1E00                  		cmpi.w	#$1E00,d0	; has screen passed final position?
0000504A 6500                       		bcs.s	@dontset	; if not, branch
0000504C 31FC 0128 F64A             		move.w	#$128,(v_waterpos3).w
00005052                            
00005052                            	@dontset:
00005052 4E75                       		rts	
00005054                            ; ===========================================================================
00005054                            
00005054                            DynWater_SBZ3:
00005054                            	;	move.w	#$228,d1
00005054                            	;	cmpi.w	#$F00,(v_screenposx).w
00005054                            	;	bcs.s	@setwater
00005054                            	;	move.w	#$4C8,d1
00005054                            
00005054                            	;@setwater:
00005054                            		;move.w	d1,(v_waterpos3).w
00005054 4E75                       		rts
00005056                            
00005056                            ; ---------------------------------------------------------------------------
00005056                            ; Labyrinth Zone "wind tunnels"	subroutine
00005056                            ; ---------------------------------------------------------------------------
00005056                            
00005056                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005056                            
00005056                            
00005056                            LZWindTunnels:
00005056 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0000505A 6600 0000                  		bne.w	@quit	; if yes, branch
0000505E 45F9 0000 0000             		lea	(LZWind_Data+8).l,a2
00005064 7000                       		moveq	#0,d0
00005066 1038 FE11                  		move.b	(v_act).w,d0	; get act number
0000506A E748                       		lsl.w	#3,d0		; multiply by 8
0000506C D4C0                       		adda.w	d0,a2		; add to address for data
0000506E 7200                       		moveq	#0,d1
00005070 4A38 FE11                  		tst.b	(v_act).w	; is act number 1?
00005074 6600                       		bne.s	@notact1	; if not, branch
00005076 7201                       		moveq	#1,d1
00005078 514A                       		subq.w	#8,a2		; use different data for act 1
0000507A                            
0000507A                            	@notact1:
0000507A 43F8 D000                  		lea	(v_player).w,a1
0000507E                            
0000507E                            @chksonic:
0000507E 3029 0008                  		move.w	obX(a1),d0
00005082 B052                       		cmp.w	(a2),d0
00005084 6500 0000                  		bcs.w	@chknext
00005088 B06A 0004                  		cmp.w	4(a2),d0
0000508C 6400 0000                  		bcc.w	@chknext
00005090 3429 000C                  		move.w	obY(a1),d2
00005094 B46A 0002                  		cmp.w	2(a2),d2
00005098 6500                       		bcs.s	@chknext
0000509A B46A 0006                  		cmp.w	6(a2),d2
0000509E 6400                       		bcc.s	@chknext	; branch if Sonic is outside a range
000050A0 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000050A4 0200 003F                  		andi.b	#$3F,d0		; does VInt counter fall on 0, $40, $80 or $C0?
000050A8 6600                       		bne.s	@skipsound	; if not, branch
000050B4                            
000050B4                            	@skipsound:
000050B4 4A38 F7C9                  		tst.b	(f_wtunnelallow).w ; are wind tunnels disabled?
000050B8 6600 0000                  		bne.w	@quit	; if yes, branch
000050BC 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1) ; is Sonic hurt/dying?
000050C2 6400                       		bcc.s	@clrquit	; if yes, branch
000050C4 11FC 0001 F7C7             		move.b	#1,(f_wtunnelmode).w
000050CA 0440 0080                  		subi.w	#$80,d0
000050CE B052                       		cmp.w	(a2),d0
000050D0 6400                       		bcc.s	@movesonic
000050D2 7002                       		moveq	#2,d0
000050D4 0C38 0001 FE11             		cmpi.b	#1,(v_act).w	; is act number 2?
000050DA 6600                       		bne.s	@notact2	; if not, branch
000050DC 4440                       		neg.w	d0
000050DE                            
000050DE                            	@notact2:
000050DE D169 000C                  		add.w	d0,obY(a1)	; adjust Sonic's y-axis for curve of tunnel
000050E2                            
000050E2                            @movesonic:
000050E2 5869 0008                  		addq.w	#4,obX(a1)
000050E6 337C 0400 0010             		move.w	#$400,obVelX(a1) ; move Sonic horizontally
000050EC 337C 0000 0012             		move.w	#0,obVelY(a1)
000050F2 137C 0000 001C             		move.b	#id_Float2,obAnim(a1)	; use floating animation
000050F8 08E9 0001 0022             		bset	#1,obStatus(a1)
000050FE 0838 0000 F602             		btst	#0,(v_jpadhold2).w ; is up pressed?
00005104 6700                       		beq.s	@down		; if not, branch
00005106 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up on pole
0000510A                            
0000510A                            	@down:
0000510A 0838 0001 F602             		btst	#1,(v_jpadhold2).w ; is down being pressed?
00005110 6700                       		beq.s	@end		; if not, branch
00005112 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down on pole
00005116                            
00005116                            	@end:
00005116 4E75                       		rts	
00005118                            ; ===========================================================================
00005118                            
00005118                            @chknext:
00005118 504A                       		addq.w	#8,a2		; use second set of values (act 1 only)
0000511A 51C9 FF62                  		dbf	d1,@chksonic	; on act 1, repeat for a second tunnel
0000511E 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic still in a tunnel?
00005122 6700                       		beq.s	@quit		; if yes, branch
00005124 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
0000512A                            
0000512A                            @clrquit:
0000512A 4238 F7C7                  		clr.b	(f_wtunnelmode).w ; finish tunnel
0000512E                            
0000512E                            @quit:
0000512E 4E75                       		rts	
00005130                            ; End of function LZWindTunnels
00005130                            
00005130                            ; ===========================================================================
00005130                            
00005130                            		;    left, top,  right, bottom boundaries
00005130 0A80 0300 0C10 0380        LZWind_Data:	dc.w $A80, $300, $C10,  $380 ; act 1 values (set 1)
00005138 0F80 0100 1410 0180        		dc.w $F80, $100, $1410,	$180 ; act 1 values (set 2)
00005140 0460 0400 0710 0480        		dc.w $460, $400, $710,  $480 ; act 2 values
00005148 0A20 0600 1610 06E0        		dc.w $A20, $600, $1610, $6E0 ; act 3 values
00005150 0C80 0600 13D0 0780        		dc.w $C80, $600, $13D0, $780 ; SBZ act 3 values
00005158                            		even
00005158                            
00005158                            ; ---------------------------------------------------------------------------
00005158                            ; Labyrinth Zone water slide subroutine
00005158                            ; ---------------------------------------------------------------------------
00005158                            
00005158                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005158                            
00005158                            
00005158                            LZWaterSlides:
00005158 43F8 D000                  		lea	(v_player).w,a1
0000515C 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic jumping?
00005162 6600                       		bne.s	loc_3F6A	; if not, branch
00005164 3029 000C                  		move.w	obY(a1),d0
00005168 E248                       		lsr.w	#1,d0
0000516A 0240 0380                  		andi.w	#$380,d0
0000516E 1229 0008                  		move.b	obX(a1),d1
00005172 0241 007F                  		andi.w	#$7F,d1
00005176 D041                       		add.w	d1,d0
00005178 45F8 A400                  		lea	(v_lvllayout).w,a2
0000517C 1032 0000                  		move.b	(a2,d0.w),d0
00005180 45FA 0000                  		lea	Slide_Chunks_End(pc),a2
00005184 7200                       		moveq	#Slide_Chunks_End-Slide_Chunks-1,d1
00005186                            
00005186                            loc_3F62:
00005186 B022                       		cmp.b	-(a2),d0
00005188 57C9 FFFC                  		dbeq	d1,loc_3F62
0000518C 6700                       		beq.s	LZSlide_Move
0000518E                            
0000518E                            loc_3F6A:
0000518E 4A38 F7CA                  		tst.b	(f_jumponly).w
00005192 6700                       		beq.s	locret_3F7A
00005194 337C 0005 003E             		move.w	#5,$3E(a1)
0000519A 4238 F7CA                  		clr.b	(f_jumponly).w
0000519E                            
0000519E                            locret_3F7A:
0000519E 4E75                       		rts	
000051A0                            ; ===========================================================================
000051A0                            
000051A0                            LZSlide_Move:
000051A0 0C41 0003                  		cmpi.w	#3,d1
000051A4 6400                       		bcc.s	loc_3F84
000051A6 4E71                       		nop	
000051A8                            
000051A8                            loc_3F84:
000051A8 08A9 0000 0022             		bclr	#0,obStatus(a1)
000051AE 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
000051B2 1340 0020                  		move.b	d0,obInertia(a1)
000051B6 6A00                       		bpl.s	loc_3F9A
000051B8 08E9 0000 0022             		bset	#0,obStatus(a1)
000051BE                            
000051BE                            loc_3F9A:
000051BE 4229 0021                  		clr.b	obInertia+1(a1)
000051C2 137C 0000 001C             		move.b	#id_WaterSlide,obAnim(a1) ; use Sonic's "sliding" animation
000051C8 11FC 0001 F7CA             		move.b	#1,(f_jumponly).w ; lock controls (except jumping)
000051CE 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000051D2 0200 001F                  		andi.b	#$1F,d0
000051D6 6600                       		bne.s	locret_3FBE
000051E2                            
000051E2                            locret_3FBE:
000051E2 4E75                       		rts	
000051E4                            ; End of function LZWaterSlides
000051E4                            
000051E4                            ; ===========================================================================
000051E4                            ; byte_3FC0:
000051E4                            Slide_Speeds:
000051E4 0AF5 0AF6 F5F4 0B          		dc.b $A, $F5, $A, $F6, $F5, $F4, $B
000051EC 00                         		even
000051EC                            
000051EC                            Slide_Chunks:
000051EC 54                         		dc.b $54 ;2, 7, 3, $4C, $4B, 8, 4
000051ED                            ; byte_3FCF
000051ED                            Slide_Chunks_End
000051EE 00                         		even
000051EE 00                         		even
000051EE                            		include	"_inc\MoveSonicInDemo.asm"
000051EE                            ; ---------------------------------------------------------------------------
000051EE                            ; Subroutine to	move Sonic in demo mode
000051EE                            ; ---------------------------------------------------------------------------
000051EE                            
000051EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000051EE                            
000051EE                            
000051EE                            MoveSonicInDemo:
000051EE 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
000051F2 6600                       		bne.s	MDemo_On	; if yes, branch
000051F4 4E75                       		rts	
000051F6                            ; ===========================================================================
000051F6                            
000051F6                            ; This is an unused subroutine for recording a demo
000051F6                            
000051F6                            DemoRecorder:
000051F6 43F9 0008 0000             		lea	($80000).l,a1
000051FC 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00005200 D2C0                       		adda.w	d0,a1
00005202 1038 F604                  		move.b	(v_jpadhold1).w,d0
00005206 B011                       		cmp.b	(a1),d0
00005208 6600                       		bne.s	@next
0000520A 5229 0001                  		addq.b	#1,1(a1)
0000520E 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00005214 6700                       		beq.s	@next
00005216 4E75                       		rts	
00005218                            
00005218                            	@next:
00005218 1340 0002                  		move.b	d0,2(a1)
0000521C 137C 0000 0003             		move.b	#0,3(a1)
00005222 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
00005226 0278 03FF F790             		andi.w	#$3FF,(v_btnpushtime1).w
0000522C 4E75                       		rts	
0000522E                            ; ===========================================================================
0000522E                            
0000522E                            MDemo_On:
0000522E 4A38 F604                  		tst.b	(v_jpadhold1).w	; is start button pressed?
00005232 6A00                       		bpl.s	@dontquit	; if not, branch
00005234 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00005238 6B00                       		bmi.s	@dontquit	; if yes, branch
0000523A 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00005240                            
00005240                            	@dontquit:
00005240 43F9 0000 0000             		lea	(DemoDataPtr).l,a1
00005246 7000                       		moveq	#0,d0
00005248 1038 FE10                  		move.b	(v_zone).w,d0
0000524C 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is this a special stage?
00005252 6600                       		bne.s	@notspecial	; if not, branch
00005254 7006                       		moveq	#6,d0		; use demo #6
00005256                            
00005256                            	@notspecial:
00005256 E548                       		lsl.w	#2,d0
00005258 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for demo data
0000525C 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00005260 6A00                       		bpl.s	@notcredits	; if not, branch
00005262 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1
00005268 3038 FFF4                  		move.w	(v_creditsnum).w,d0
0000526C 5340                       		subq.w	#1,d0
0000526E E548                       		lsl.w	#2,d0
00005270 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for credits demo
00005274                            
00005274                            	@notcredits:
00005274 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00005278 D2C0                       		adda.w	d0,a1
0000527A 1011                       		move.b	(a1),d0
0000527C 41F8 F604                  		lea	(v_jpadhold1).w,a0
00005280 1200                       		move.b	d0,d1
00005282 7400                       			moveq	#0,d2
00005284 B500                       		eor.b	d2,d0
00005286 10C1                       		move.b	d1,(a0)+
00005288 C001                       		and.b	d1,d0
0000528A 10C0                       		move.b	d0,(a0)+
0000528C 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
00005290 6400                       		bcc.s	@end
00005292 11E9 0003 F792             		move.b	3(a1),(v_btnpushtime2).w
00005298 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
0000529C                            
0000529C                            	@end:
0000529C 4E75                       		rts	
0000529E                            ; End of function MoveSonicInDemo
0000529E                            
0000529E                            ; ===========================================================================
0000529E                            ; ---------------------------------------------------------------------------
0000529E                            ; Demo sequence	pointers
0000529E                            ; ---------------------------------------------------------------------------
0000529E 0000 0000                  DemoDataPtr:	dc.l Demo_GHZ		; demos run after the title screen
000052A2 0000 0000                  		dc.l Demo_GHZ
000052A6 0000 0000                  		dc.l Demo_MZ
000052AA 0000 0000                  		dc.l Demo_MZ
000052AE 0000 0000                  		dc.l Demo_SYZ
000052B2 0000 0000                  		dc.l Demo_SYZ
000052B6 0000 0000                  		dc.l Demo_SS
000052BA 0000 0000                  		dc.l Demo_SS
000052BE                            
000052BE 0000 0000                  DemoEndDataPtr:	dc.l Demo_EndGHZ1	; demos run during the credits
000052C2 0000 0000                  		dc.l Demo_EndMZ
000052C6 0000 0000                  		dc.l Demo_EndSYZ
000052CA 0000 0000                  		dc.l Demo_EndLZ
000052CE 0000 0000                  		dc.l Demo_EndSLZ
000052D2 0000 0000                  		dc.l Demo_EndSBZ1
000052D6 0000 0000                  		dc.l Demo_EndSBZ2
000052DA 0000 0000                  		dc.l Demo_EndGHZ2
000052DE                            
000052DE 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000052EE 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000052FE 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
0000530E                            		even
0000530E                            		even
0000530E                            
0000530E                            ; ---------------------------------------------------------------------------
0000530E                            ; Collision index pointer loading subroutine
0000530E                            ; ---------------------------------------------------------------------------
0000530E                            
0000530E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000530E                            
0000530E                            
0000530E                            ColIndexLoad:
0000530E 7000                       		moveq	#0,d0
00005310 1038 FE10                  		move.b	(v_zone).w,d0
00005314 E548                       		lsl.w	#2,d0
00005316 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),(v_collindex).w
0000531C 4E75                       		rts	
0000531E                            ; End of function ColIndexLoad
0000531E                            
0000531E                            ; ===========================================================================
0000531E                            ; ---------------------------------------------------------------------------
0000531E                            ; Collision index pointers
0000531E                            ; ---------------------------------------------------------------------------
0000531E 0000 0000                  ColPointers:	dc.l Col_GHZ
00005322 0000 0000                  		dc.l Col_LZ
00005326 0000 0000                  		dc.l Col_MZ
0000532A 0000 0000                  		dc.l Col_SLZ
0000532E 0000 0000                  		dc.l Col_SYZ
00005332 0000 0000                  		dc.l Col_SBZ
00005336                            ;		dc.l Col_GHZ ; Pointer for Ending is missing by default.
00005336                            
00005336                            		include	"_inc\Oscillatory Routines.asm"
00005336                            ; ---------------------------------------------------------------------------
00005336                            ; Oscillating number subroutines
00005336                            ; ---------------------------------------------------------------------------
00005336                            
00005336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005336                            
00005336                            ; Initialise the values
00005336                            
00005336                            OscillateNumInit:
00005336 43F8 FE5E                  		lea	(v_oscillate).w,a1
0000533A 45F9 0000 0000             		lea	(@baselines).l,a2
00005340 7220                       		moveq	#$20,d1
00005342                            
00005342                            	@loop:
00005342 32DA                       		move.w	(a2)+,(a1)+	; copy baseline values to RAM
00005344 51C9 FFFC                  		dbf	d1,@loop
00005348 4E75                       		rts	
0000534A                            
0000534A                            
0000534A                            ; ===========================================================================
0000534A 007C                       @baselines:	dc.w %0000000001111100	; oscillation direction bitfield
0000534C 0080 0000                  		dc.w $80, 0
00005350 0080 0000                  		dc.w $80, 0
00005354 0080 0000                  		dc.w $80, 0
00005358 0080 0000                  		dc.w $80, 0
0000535C 0080 0000                  		dc.w $80, 0
00005360 0080 0000                  		dc.w $80, 0
00005364 0080 0000                  		dc.w $80, 0
00005368 0080 0000                  		dc.w $80, 0
0000536C 0080 0000                  		dc.w $80, 0
00005370 50F0 011E                  		dc.w $50F0, $11E
00005374 2080 00B4                  		dc.w $2080, $B4
00005378 3080 010E                  		dc.w $3080, $10E
0000537C 5080 01C2                  		dc.w $5080, $1C2
00005380 7080 0276                  		dc.w $7080, $276
00005384 0080 0000                  		dc.w $80, 0
00005388 0080 0000                  		dc.w $80, 0
0000538C                            		even
0000538C                            
0000538C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000538C                            
0000538C                            ; Oscillate values
0000538C                            
0000538C                            OscillateNumDo:
0000538C 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00005392 6400                       		bcc.s	@end		; if yes, branch
00005394 43F8 FE5E                  		lea	(v_oscillate).w,a1
00005398 45F9 0000 0000             		lea	(@settings).l,a2
0000539E 3619                       		move.w	(a1)+,d3	; get oscillation direction bitfield
000053A0 720F                       		moveq	#$F,d1
000053A2                            
000053A2                            @loop:
000053A2 341A                       		move.w	(a2)+,d2	; get frequency
000053A4 381A                       		move.w	(a2)+,d4	; get amplitude
000053A6 0303                       		btst	d1,d3		; check oscillation direction
000053A8 6600                       		bne.s	@down		; branch if 1
000053AA                            
000053AA                            	@up:
000053AA 3029 0002                  		move.w	2(a1),d0	; get current rate
000053AE D042                       		add.w	d2,d0		; add frequency
000053B0 3340 0002                  		move.w	d0,2(a1)
000053B4 D151                       		add.w	d0,0(a1)	; add rate to value
000053B6 B811                       		cmp.b	0(a1),d4
000053B8 6200                       		bhi.s	@next
000053BA 03C3                       		bset	d1,d3
000053BC 6000                       		bra.s	@next
000053BE                            
000053BE                            	@down:
000053BE 3029 0002                  		move.w	2(a1),d0
000053C2 9042                       		sub.w	d2,d0
000053C4 3340 0002                  		move.w	d0,2(a1)
000053C8 D151                       		add.w	d0,0(a1)
000053CA B811                       		cmp.b	0(a1),d4
000053CC 6300                       		bls.s	@next
000053CE 0383                       		bclr	d1,d3
000053D0                            
000053D0                            	@next:
000053D0 5849                       		addq.w	#4,a1
000053D2 51C9 FFCE                  		dbf	d1,@loop
000053D6 31C3 FE5E                  		move.w	d3,(v_oscillate).w
000053DA                            
000053DA                            @end:
000053DA 4E75                       		rts	
000053DC                            ; End of function OscillateNumDo
000053DC                            
000053DC                            ; ===========================================================================
000053DC 0002 0010                  @settings:	dc.w 2,	$10	; frequency, amplitude
000053E0 0002 0018                  		dc.w 2,	$18
000053E4 0002 0020                  		dc.w 2,	$20
000053E8 0002 0030                  		dc.w 2,	$30
000053EC 0004 0020                  		dc.w 4,	$20
000053F0 0008 0008                  		dc.w 8,	8
000053F4 0008 0040                  		dc.w 8,	$40
000053F8 0004 0040                  		dc.w 4,	$40
000053FC 0002 0050                  		dc.w 2,	$50
00005400 0002 0050                  		dc.w 2,	$50
00005404 0002 0020                  		dc.w 2,	$20
00005408 0003 0030                  		dc.w 3,	$30
0000540C 0005 0050                  		dc.w 5,	$50
00005410 0007 0070                  		dc.w 7,	$70
00005414 0002 0010                  		dc.w 2,	$10
00005418 0002 0010                  		dc.w 2,	$10
0000541C                            		even
0000541C                            		even
0000541C                            
0000541C                            ; ---------------------------------------------------------------------------
0000541C                            ; Subroutine to	change synchronised animation variables (rings, giant rings)
0000541C                            ; ---------------------------------------------------------------------------
0000541C                            
0000541C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000541C                            
0000541C                            
0000541C                            SynchroAnimate:
0000541C                            
0000541C                            ; Used for GHZ spiked log
0000541C                            Sync1:
0000541C 5338 FEC0                  		subq.b	#1,(v_ani0_time).w ; has timer reached 0?
00005420 6A00                       		bpl.s	Sync2		; if not, branch
00005422 11FC 000B FEC0             		move.b	#$B,(v_ani0_time).w ; reset timer
00005428 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w ; next frame
0000542C 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w ; max frame is 7
00005432                            
00005432                            ; Used for rings and giant rings
00005432                            Sync2:
00005432 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
00005436 6A00                       		bpl.s	Sync3
00005438 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0000543E 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
00005442 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
00005448                            
00005448                            ; Used for nothing
00005448                            Sync3:
00005448 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0000544C 6A00                       		bpl.s	Sync4
0000544E 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
00005454 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
00005458 0C38 0006 FEC5             		cmpi.b	#6,(v_ani2_frame).w
0000545E 6500                       		blo.s	Sync4
00005460 11FC 0000 FEC5             		move.b	#0,(v_ani2_frame).w
00005466                            
00005466                            ; Used for bouncing rings
00005466                            Sync4:
00005466 4A38 FEC6                  		tst.b	(v_ani3_time).w
0000546A 6700                       		beq.s	SyncEnd
0000546C 7000                       		moveq	#0,d0
0000546E 1038 FEC6                  		move.b	(v_ani3_time).w,d0
00005472 D078 FEC8                  		add.w	(v_ani3_buf).w,d0
00005476 31C0 FEC8                  		move.w	d0,(v_ani3_buf).w
0000547A EF58                       		rol.w	#7,d0
0000547C 0240 0003                  		andi.w	#3,d0
00005480 11C0 FEC7                  		move.b	d0,(v_ani3_frame).w
00005484 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
00005488                            
00005488                            SyncEnd:
00005488 4E75                       		rts	
0000548A                            ; End of function SynchroAnimate
0000548A                            
0000548A                            ; ---------------------------------------------------------------------------
0000548A                            ; End-of-act signpost pattern loading subroutine
0000548A                            ; ---------------------------------------------------------------------------
0000548A                            
0000548A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000548A                            
0000548A                            
0000548A                            SignpostArtLoad:
0000548A 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0000548E 6600 0000                  		bne.w	@exit		; if yes, branch
00005492 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; is act number 02 (act 3)?
00005498 6700                       		beq.s	@exit		; if yes, branch
0000549A                            
0000549A 3038 F700                  		move.w	(v_screenposx).w,d0
0000549E 3238 F72A                  		move.w	(v_limitright2).w,d1
000054A2 0441 0100                  		subi.w	#$100,d1
000054A6 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000054A8 6D00                       		blt.s	@exit		; if not, branch
000054AA 4A38 FE1E                  		tst.b	(f_timecount).w
000054AE 6700                       		beq.s	@exit
000054B0 B278 F728                  		cmp.w	(v_limitleft2).w,d1
000054B4 6700                       		beq.s	@exit
000054B6 31C1 F728                  		move.w	d1,(v_limitleft2).w ; move left boundary to current screen position
000054BA 7000                       		moveq	#plcid_Signpost,d0
000054BC 6000 C2AE                  		bra.w	NewPLC		; load signpost	patterns
000054C0                            
000054C0                            	@exit:
000054C0 4E75                       		rts	
000054C2                            ; End of function SignpostArtLoad
000054C2                            
000054C2                            ; ===========================================================================
000054C2                            Demo_GHZ:	incbin	"demodata\Intro - GHZ.bin"
00005542                            Demo_MZ:	incbin	"demodata\Intro - MZ.bin"
00005672                            Demo_SYZ:	incbin	"demodata\Intro - SYZ.bin"
000056F2                            Demo_SS:	incbin	"demodata\Intro - Special Stage.bin"
000057F2                            ; ===========================================================================
000057F2                            
000057F2                            ; ---------------------------------------------------------------------------
000057F2                            ; Special Stage
000057F2                            ; ---------------------------------------------------------------------------
000057F2                            
000057F2                            GM_Special:
000057FA 6100 CC88                  		bsr.w	PaletteWhiteOut
000057FE 46FC 2700                  		disable_ints
00005802 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005808 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
0000580C 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
00005810 31FC 8AAF F624             		move.w	#$8A00+175,(v_hbla_hreg).w
00005816 3CBC 9011                  		move.w	#$9011,(a6)	; 128-cell hscroll size
0000581A 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000581E 0200 00BF                  		andi.b	#$BF,d0
00005822 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005828 6100 B9A6                  		bsr.w	ClearScreen
0000582C 46FC 2300                  		enable_ints
00005830 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$6FFF,$5000
00005852                            
00005852                            	SS_WaitForDMA:
00005852 3215                       		move.w	(a5),d1		; read control port ($C00004)
00005854 0801 0001                  		btst	#1,d1		; is DMA running?
00005858 66F8                       		bne.s	SS_WaitForDMA	; if yes, branch
0000585A 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment to 2 bytes
0000585E 6100 0000                  		bsr.w	SS_BGLoad
00005862 7000                       		moveq	#plcid_SpecialStage,d0
00005864 6100 C040                  		bsr.w	QuickPLC	; load special stage patterns
00005868                            
00005868 43F8 D000                  		lea	(v_objspace).w,a1
0000586C 7000                       		moveq	#0,d0
0000586E 323C 07FF                  		move.w	#$7FF,d1
00005872                            	SS_ClrObjRam:
00005872 22C0                       		move.l	d0,(a1)+
00005874 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00005878                            
00005878 43F8 F700                  		lea	(v_screenposx).w,a1
0000587C 7000                       		moveq	#0,d0
0000587E 323C 003F                  		move.w	#$3F,d1
00005882                            	SS_ClrRam1:
00005882 22C0                       		move.l	d0,(a1)+
00005884 51C9 FFFC                  		dbf	d1,SS_ClrRam1	; clear	variables
00005888                            
00005888 43F8 FE60                  		lea	(v_oscillate+2).w,a1
0000588C 7000                       		moveq	#0,d0
0000588E 323C 0027                  		move.w	#$27,d1
00005892                            	SS_ClrRam2:
00005892 22C0                       		move.l	d0,(a1)+
00005894 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00005898                            
00005898 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
0000589C 7000                       		moveq	#0,d0
0000589E 323C 007F                  		move.w	#$7F,d1
000058A2                            	SS_ClrNemRam:
000058A2 22C0                       		move.l	d0,(a1)+
000058A4 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000058A8                            
000058A8 4238 F64E                  		clr.b	(f_wtr_state).w
000058AC 4278 FE02                  		clr.w	(f_restart).w
000058B0 700A                       		moveq	#palid_Special,d0
000058B2 6100 CD50                  		bsr.w	PalLoad1	; load special stage palette
000058B6 4EB9 0000 0000             		jsr	(SS_Load).l		; load SS layout data
000058BC 21FC 0000 0000 F700        		move.l	#0,(v_screenposx).w
000058C4 21FC 0000 0000 F704        		move.l	#0,(v_screenposy).w
000058CC 11FC 0000 D000             		move.b	#id_SonicSpecial,(v_player).w ; load special stage Sonic object
000058D2 6100 0000                  		bsr.w	PalCycle_SS
000058D6 4278 F780                  		clr.w	(v_ssangle).w	; set stage angle to "upright"
000058DA 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set stage rotation speed
000058E8 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
000058EE 43F9 0000 529E             		lea	(DemoDataPtr).l,a1
000058F4 7006                       		moveq	#6,d0
000058F6 E548                       		lsl.w	#2,d0
000058F8 2271 0000                  		movea.l	(a1,d0.w),a1
000058FC 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w
00005902 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
00005906 4278 FE20                  		clr.w	(v_rings).w
0000590A 4238 FE1B                  		clr.b	(v_lifecount).w
0000590E 31FC 0000 FE08             		move.w	#0,(v_debuguse).w
00005914 31FC 0708 F614             		move.w	#1800,(v_demolength).w
0000591A 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
0000591E 6700                       		beq.s	SS_NoDebug	; if not, branch
00005920 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button pressed?
00005926 6700                       		beq.s	SS_NoDebug	; if not, branch
00005928 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
0000592E                            
0000592E                            	SS_NoDebug:
0000592E 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005932 0000 0040                  		ori.b	#$40,d0
00005936 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000593C 6100 CA9A                  		bsr.w	PaletteWhiteIn
00005940                            
00005940                            ; ---------------------------------------------------------------------------
00005940                            ; Main Special Stage loop
00005940                            ; ---------------------------------------------------------------------------
00005940                            
00005940                            SS_MainLoop:
00005940 6100 B96A                  		bsr.w	PauseGame
00005944 11FC 000A F62A             		move.b	#$A,(v_vbla_routine).w
0000594A 6100 E34C                  		bsr.w	WaitForVBla
0000594E 6100 F89E                  		bsr.w	MoveSonicInDemo
00005952 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
00005958 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000595E 4EB9 0000 0000             		jsr	(BuildSprites).l
00005964 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
0000596A 6100 0000                  		bsr.w	SS_BGAnimate
0000596E 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00005972 6700                       		beq.s	SS_ChkEnd	; if not, branch
00005974 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00005978 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
0000597C                            
0000597C                            	SS_ChkEnd:
0000597C 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
00005982 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00005986                            
00005986 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
0000598A 6600 0000                  		bne.w	SS_ToLevel
0000598E 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005994 0C78 0503 FE10             		cmpi.w	#(id_SBZ<<8)+3,(v_zone).w ; is level number higher than FZ?
0000599A 6500                       		blo.s	SS_Finish	; if not, branch
0000599C 4278 FE10                  		clr.w	(v_zone).w	; set to GHZ1
000059A0                            
000059A0                            SS_Finish:
000059A0 31FC 003C F614             		move.w	#60,(v_demolength).w ; set delay time to 1 second
000059A6 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
000059AC 4278 F794                  		clr.w	(v_palchgspeed).w
000059B0                            
000059B0                            	SS_FinLoop:
000059B0 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000059B6 6100 E2E0                  		bsr.w	WaitForVBla
000059BA 6100 F832                  		bsr.w	MoveSonicInDemo
000059BE 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
000059C4 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000059CA 4EB9 0000 0000             		jsr	(BuildSprites).l
000059D0 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
000059D6 6100 0000                  		bsr.w	SS_BGAnimate
000059DA 5378 F794                  		subq.w	#1,(v_palchgspeed).w
000059DE 6A00                       		bpl.s	loc_47D4
000059E0 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
000059E6 6100 CABC                  		bsr.w	WhiteOut_ToWhite
000059EA                            
000059EA                            loc_47D4:
000059EA 4A78 F614                  		tst.w	(v_demolength).w
000059EE 66C0                       		bne.s	SS_FinLoop
000059F0                            
000059F0 46FC 2700                  		disable_ints
000059F4 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000059FA 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000059FE 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00005A02 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00005A06 6100 B7C8                  		bsr.w	ClearScreen
00005A14 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005A1A 6100 B932                  		bsr.w	NemDec
00005A1E 4EB9 0000 0000             		jsr	(Hud_Base).l
00005A24 31FC C800 C8FC             		ResetDMAQueue	
00005A2A 46FC 2300                  		enable_ints
00005A2E 7011                       		moveq	#palid_SSResult,d0
00005A30 6100 CC0E                  		bsr.w	PalLoad2	; load results screen palette
00005A34 7000                       		moveq	#plcid_Main,d0
00005A36 6100 BD34                  		bsr.w	NewPLC
00005A3A 7000                       		moveq	#plcid_SSResult,d0
00005A3C 6100 BCFC                  		bsr.w	AddPLC		; load results screen patterns
00005A40 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00005A46 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; update ring bonus counter
00005A4C 3038 FE20                  		move.w	(v_rings).w,d0
00005A50 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00005A54 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set rings bonus
00005A62                            
00005A62 43F8 D000                  		lea	(v_objspace).w,a1
00005A66 7000                       		moveq	#0,d0
00005A68 323C 07FF                  		move.w	#$7FF,d1
00005A6C                            	SS_EndClrObjRam:
00005A6C 22C0                       		move.l	d0,(a1)+
00005A6E 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00005A72                            
00005A72 11FC 0000 D5C0             		move.b	#id_SSResult,(v_objspace+$5C0).w ; load results screen object
00005A78                            
00005A78                            SS_NormalExit:
00005A78 6100 B832                  		bsr.w	PauseGame
00005A7C 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00005A82 6100 E214                  		bsr.w	WaitForVBla
00005A86 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005A8C 4EB9 0000 0000             		jsr	(BuildSprites).l
00005A92 6100 BD12                  		bsr.w	RunPLC
00005A96 4A78 FE02                  		tst.w	(f_restart).w
00005A9A 67DC                       		beq.s	SS_NormalExit
00005A9C 4AB8 F680                  		tst.l	(v_plc_buffer).w
00005AA0 66D6                       		bne.s	SS_NormalExit
00005AAA 6100 C9D8                  		bsr.w	PaletteWhiteOut
00005AAE 4E75                       		rts	
00005AB0                            ; ===========================================================================
00005AB0                            
00005AB0                            SS_ToSegaScreen:
00005AB0 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00005AB6 4E75                       		rts
00005AB8                            
00005AB8 0C38 0000 F600             SS_ToLevel:	cmpi.b	#id_Level,(v_gamemode).w
00005ABE 67F0                       		beq.s	SS_ToSegaScreen
00005AC0 4E75                       		rts
00005AC2                            
00005AC2                            ; ---------------------------------------------------------------------------
00005AC2                            ; Special stage	background loading subroutine
00005AC2                            ; ---------------------------------------------------------------------------
00005AC2                            
00005AC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005AC2                            
00005AC2                            
00005AC2                            SS_BGLoad:
00005AC2 43F9 00FF 0000             		lea	($FF0000).l,a1
00005AC8 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00005ACE 303C 4051                  		move.w	#$4051,d0
00005AD2 6100 BE04                  		bsr.w	EniDec
00005AD6 263C 5000 0001             		move.l	#$50000001,d3
00005ADC 45F9 00FF 0080             		lea	($FF0080).l,a2
00005AE2 7E06                       		moveq	#6,d7
00005AE4                            
00005AE4                            loc_48BE:
00005AE4 2003                       		move.l	d3,d0
00005AE6 7C03                       		moveq	#3,d6
00005AE8 7800                       		moveq	#0,d4
00005AEA 0C47 0003                  		cmpi.w	#3,d7
00005AEE 6400                       		bhs.s	loc_48CC
00005AF0 7801                       		moveq	#1,d4
00005AF2                            
00005AF2                            loc_48CC:
00005AF2 7A07                       		moveq	#7,d5
00005AF4                            
00005AF4                            loc_48CE:
00005AF4 224A                       		movea.l	a2,a1
00005AF6 0A04 0001                  		eori.b	#1,d4
00005AFA 6600                       		bne.s	loc_48E2
00005AFC 0C47 0006                  		cmpi.w	#6,d7
00005B00 6600                       		bne.s	loc_48F2
00005B02 43F9 00FF 0000             		lea	($FF0000).l,a1
00005B08                            
00005B08                            loc_48E2:
00005B08 48E7 F800                  		movem.l	d0-d4,-(sp)
00005B0C 7207                       		moveq	#7,d1
00005B0E 7407                       		moveq	#7,d2
00005B10 6100 B812                  		bsr.w	TilemapToVRAM
00005B14 4CDF 001F                  		movem.l	(sp)+,d0-d4
00005B18                            
00005B18                            loc_48F2:
00005B18 0680 0010 0000             		addi.l	#$100000,d0
00005B1E 51CD FFD4                  		dbf	d5,loc_48CE
00005B22 0680 0380 0000             		addi.l	#$3800000,d0
00005B28 0A04 0001                  		eori.b	#1,d4
00005B2C 51CE FFC4                  		dbf	d6,loc_48CC
00005B30 0683 1000 0000             		addi.l	#$10000000,d3
00005B36 6A00                       		bpl.s	loc_491C
00005B38 4843                       		swap	d3
00005B3A 0683 0000 C000             		addi.l	#$C000,d3
00005B40 4843                       		swap	d3
00005B42                            
00005B42                            loc_491C:
00005B42 D4FC 0080                  		adda.w	#$80,a2
00005B46 51CF FF9C                  		dbf	d7,loc_48BE
00005B4A 43F9 00FF 0000             		lea	($FF0000).l,a1
00005B50 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00005B56 303C 4000                  		move.w	#$4000,d0
00005B5A 6100 BD7C                  		bsr.w	EniDec
00005B5E 43F9 00FF 0000             		lea	($FF0000).l,a1
00005B64 203C 4000 0003             		move.l	#$40000003,d0
00005B6A 723F                       		moveq	#$3F,d1
00005B6C 741F                       		moveq	#$1F,d2
00005B6E 6100 B7B4                  		bsr.w	TilemapToVRAM
00005B72 43F9 00FF 0000             		lea	($FF0000).l,a1
00005B78 203C 5000 0003             		move.l	#$50000003,d0
00005B7E 723F                       		moveq	#$3F,d1
00005B80 743F                       		moveq	#$3F,d2
00005B82 6100 B7A0                  		bsr.w	TilemapToVRAM
00005B86 4E75                       		rts	
00005B88                            ; End of function SS_BGLoad
00005B88                            
00005B88                            ; ---------------------------------------------------------------------------
00005B88                            ; Palette cycling routine - special stage
00005B88                            ; ---------------------------------------------------------------------------
00005B88                            
00005B88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005B88                            
00005B88                            
00005B88                            PalCycle_SS:
00005B88 4A78 F63A                  		tst.w	(f_pause).w
00005B8C 6600                       		bne.s	locret_49E6
00005B8E 5378 F79C                  		subq.w	#1,(v_palss_time).w
00005B92 6A00                       		bpl.s	locret_49E6
00005B94 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005B9A 3038 F79A                  		move.w	(v_palss_num).w,d0
00005B9E 5278 F79A                  		addq.w	#1,(v_palss_num).w
00005BA2 0240 001F                  		andi.w	#$1F,d0
00005BA6 E548                       		lsl.w	#2,d0
00005BA8 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00005BAE D0C0                       		adda.w	d0,a0
00005BB0 1018                       		move.b	(a0)+,d0
00005BB2 6A00                       		bpl.s	loc_4992
00005BB4 303C 01FF                  		move.w	#$1FF,d0
00005BB8                            
00005BB8                            loc_4992:
00005BB8 31C0 F79C                  		move.w	d0,(v_palss_time).w
00005BBC 7000                       		moveq	#0,d0
00005BBE 1018                       		move.b	(a0)+,d0
00005BC0 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00005BC4 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00005BCA 43F1 0000                  		lea	(a1,d0.w),a1
00005BCE 303C 8200                  		move.w	#-$7E00,d0
00005BD2 1019                       		move.b	(a1)+,d0
00005BD4 3C80                       		move.w	d0,(a6)
00005BD6 11D1 F616                  		move.b	(a1),(v_scrposy_dup).w
00005BDA 303C 8400                  		move.w	#-$7C00,d0
00005BDE 1018                       		move.b	(a0)+,d0
00005BE0 3C80                       		move.w	d0,(a6)
00005BE2 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00005BEC 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l
00005BF4 7000                       		moveq	#0,d0
00005BF6 1018                       		move.b	(a0)+,d0
00005BF8 6B00                       		bmi.s	loc_49E8
00005BFA 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00005C00 D2C0                       		adda.w	d0,a1
00005C02 45F8 FB4E                  		lea	(v_pal_dry+$4E).w,a2
00005C06 24D9                       		move.l	(a1)+,(a2)+
00005C08 24D9                       		move.l	(a1)+,(a2)+
00005C0A 24D9                       		move.l	(a1)+,(a2)+
00005C0C                            
00005C0C                            locret_49E6:
00005C0C 4E75                       		rts	
00005C0E                            ; ===========================================================================
00005C0E                            
00005C0E                            loc_49E8:
00005C0E 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005C12 0C40 008A                  		cmpi.w	#$8A,d0
00005C16 6500                       		blo.s	loc_49F4
00005C18 5241                       		addq.w	#1,d1
00005C1A                            
00005C1A                            loc_49F4:
00005C1A C2FC 002A                  		mulu.w	#$2A,d1
00005C1E 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00005C24 D2C1                       		adda.w	d1,a1
00005C26 0240 007F                  		andi.w	#$7F,d0
00005C2A 0880 0000                  		bclr	#0,d0
00005C2E 6700                       		beq.s	loc_4A18
00005C30 45F8 FB6E                  		lea	(v_pal_dry+$6E).w,a2
00005C34 24D1                       		move.l	(a1),(a2)+
00005C36 24E9 0004                  		move.l	4(a1),(a2)+
00005C3A 24E9 0008                  		move.l	8(a1),(a2)+
00005C3E                            
00005C3E                            loc_4A18:
00005C3E D2FC 000C                  		adda.w	#$C,a1
00005C42 45F8 FB5A                  		lea	(v_pal_dry+$5A).w,a2
00005C46 0C40 000A                  		cmpi.w	#$A,d0
00005C4A 6500                       		blo.s	loc_4A2E
00005C4C 0440 000A                  		subi.w	#$A,d0
00005C50 45F8 FB7A                  		lea	(v_pal_dry+$7A).w,a2
00005C54                            
00005C54                            loc_4A2E:
00005C54 3200                       		move.w	d0,d1
00005C56 D040                       		add.w	d0,d0
00005C58 D041                       		add.w	d1,d0
00005C5A D2C0                       		adda.w	d0,a1
00005C5C 24D9                       		move.l	(a1)+,(a2)+
00005C5E 34D9                       		move.w	(a1)+,(a2)+
00005C60 4E75                       		rts	
00005C62                            ; End of function PalCycle_SS
00005C62                            
00005C62                            ; ===========================================================================
00005C62 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005C72                            
00005C72 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00005C82 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00005C92 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00005CA2 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00005CB2 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00005CC2 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00005CD2 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005CE2                            		even
00005CE2 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005CF0                            		even
00005CF0                            
00005CF0                            Pal_SSCyc1:	incbin	"palette\Cycle - Special Stage 1.bin"
00005D38                            		even
00005D38                            Pal_SSCyc2:	incbin	"palette\Cycle - Special Stage 2.bin"
00005E0A                            		even
00005E0A                            
00005E0A                            ; ---------------------------------------------------------------------------
00005E0A                            ; Subroutine to	make the special stage background animated
00005E0A                            ; ---------------------------------------------------------------------------
00005E0A                            
00005E0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005E0A                            
00005E0A                            
00005E0A                            SS_BGAnimate:
00005E0A 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005E0E 6600                       		bne.s	loc_4BF6
00005E10 31FC 0000 F70C             		move.w	#0,(v_bgscreenposy).w
00005E16 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005E1C                            
00005E1C                            loc_4BF6:
00005E1C 0C40 0008                  		cmpi.w	#8,d0
00005E20 6400                       		bhs.s	loc_4C4E
00005E22 0C40 0006                  		cmpi.w	#6,d0
00005E26 6600                       		bne.s	loc_4C10
00005E28 5278 F718                  		addq.w	#1,(v_bg3screenposx).w
00005E2C 5278 F70C                  		addq.w	#1,(v_bgscreenposy).w
00005E30 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005E36                            
00005E36                            loc_4C10:
00005E36 7000                       		moveq	#0,d0
00005E38 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00005E3C 4440                       		neg.w	d0
00005E3E 4840                       		swap	d0
00005E40 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005E46 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005E4A 7609                       		moveq	#9,d3
00005E4C                            
00005E4C                            loc_4C26:
00005E4C 302B 0002                  		move.w	2(a3),d0
00005E50 6100 DE78                  		bsr.w	CalcSine
00005E54 7400                       		moveq	#0,d2
00005E56 1419                       		move.b	(a1)+,d2
00005E58 C1C2                       		muls.w	d2,d0
00005E5A E080                       		asr.l	#8,d0
00005E5C 36C0                       		move.w	d0,(a3)+
00005E5E 1419                       		move.b	(a1)+,d2
00005E60 4882                       		ext.w	d2
00005E62 D55B                       		add.w	d2,(a3)+
00005E64 51CB FFE6                  		dbf	d3,loc_4C26
00005E68 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005E6C 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005E72 6000                       		bra.s	loc_4C7E
00005E74                            ; ===========================================================================
00005E74                            
00005E74                            loc_4C4E:
00005E74 0C40 000C                  		cmpi.w	#$C,d0
00005E78 6600                       		bne.s	loc_4C74
00005E7A 5378 F718                  		subq.w	#1,(v_bg3screenposx).w
00005E7E 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005E82 243C 0001 8000             		move.l	#$18000,d2
00005E88 7206                       		moveq	#6,d1
00005E8A                            
00005E8A                            loc_4C64:
00005E8A 2013                       		move.l	(a3),d0
00005E8C 9082                       		sub.l	d2,d0
00005E8E 26C0                       		move.l	d0,(a3)+
00005E90 0482 0000 2000             		subi.l	#$2000,d2
00005E96 51C9 FFF2                  		dbf	d1,loc_4C64
00005E9A                            
00005E9A                            loc_4C74:
00005E9A 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005E9E 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005EA4                            
00005EA4                            loc_4C7E:
00005EA4 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00005EA8 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00005EAC 4440                       		neg.w	d0
00005EAE 4840                       		swap	d0
00005EB0 7600                       		moveq	#0,d3
00005EB2 161A                       		move.b	(a2)+,d3
00005EB4 3438 F70C                  		move.w	(v_bgscreenposy).w,d2
00005EB8 4442                       		neg.w	d2
00005EBA 0242 00FF                  		andi.w	#$FF,d2
00005EBE E54A                       		lsl.w	#2,d2
00005EC0                            
00005EC0                            loc_4C9A:
00005EC0 301B                       		move.w	(a3)+,d0
00005EC2 544B                       		addq.w	#2,a3
00005EC4 7200                       		moveq	#0,d1
00005EC6 121A                       		move.b	(a2)+,d1
00005EC8 5341                       		subq.w	#1,d1
00005ECA                            
00005ECA                            loc_4CA4:
00005ECA 2380 2000                  		move.l	d0,(a1,d2.w)
00005ECE 5842                       		addq.w	#4,d2
00005ED0 0242 03FC                  		andi.w	#$3FC,d2
00005ED4 51C9 FFF4                  		dbf	d1,loc_4CA4
00005ED8 51CB FFE6                  		dbf	d3,loc_4C9A
00005EDC 4E75                       		rts	
00005EDE                            ; End of function SS_BGAnimate
00005EDE                            
00005EDE                            ; ===========================================================================
00005EDE 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005EEA                            		even
00005EEA 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005EF2                            		even
00005EF2 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005F06                            		even
00005F06                            
00005F06                            ; ===========================================================================
00005F06                            
00005F06                            ; ---------------------------------------------------------------------------
00005F06                            ; Continue screen
00005F06                            ; ---------------------------------------------------------------------------
00005F06                            
00005F06                            GM_Continue:
00005F06 6100 C452                  		bsr.w	PaletteFadeOut
00005F0A 46FC 2700                  		disable_ints
00005F0E 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005F12 0200 00BF                  		andi.b	#$BF,d0
00005F16 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005F1C 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005F22 3CBC 8004                  		move.w	#$8004,(a6)	; 8 colour mode
00005F26 3CBC 8700                  		move.w	#$8700,(a6)	; background colour
00005F2A 6100 B2A4                  		bsr.w	ClearScreen
00005F2E 31FC C800 C8FC             		ResetDMAQueue
00005F34 43F8 D000                  		lea	(v_objspace).w,a1
00005F38 7000                       		moveq	#0,d0
00005F3A 323C 07FF                  		move.w	#$7FF,d1
00005F3E                            	Cont_ClrObjRam:
00005F3E 22C0                       		move.l	d0,(a1)+
00005F40 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005F44                            
00005F4E 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005F54 6100 B3F8                  		bsr.w	NemDec
00005F62 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005F68 6100 B3E4                  		bsr.w	NemDec
00005F76 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005F7C 6100 B3D0                  		bsr.w	NemDec
00005F80 720A                       		moveq	#10,d1
00005F82 4EB9 0000 0000             		jsr	(ContScrCounter).l	; run countdown	(start from 10)
00005F88 7012                       		moveq	#palid_Continue,d0
00005F8A 6100 C678                  		bsr.w	PalLoad1	; load continue	screen palette
00005F96 31FC 0293 F614             		move.w	#659,(v_demolength).w ; set time delay to 11 seconds
00005F9C 42B8 F700                  		clr.l	(v_screenposx).w
00005FA0 21FC 0100 0000 F704        		move.l	#$1000000,(v_screenposy).w
00005FA8 11FC 0000 D000             		move.b	#id_ContSonic,(v_player).w ; load Sonic object
00005FAE 11FC 0000 D040             		move.b	#id_ContScrItem,(v_objspace+$40).w ; load continue screen objects
00005FB4 11FC 0000 D080             		move.b	#id_ContScrItem,(v_objspace+$80).w
00005FBA 11FC 0003 D098             		move.b	#3,(v_objspace+$80+obPriority).w
00005FC0 11FC 0004 D09A             		move.b	#4,(v_objspace+$80+obFrame).w
00005FC6 11FC 0000 D0C0             		move.b	#id_ContScrItem,(v_objspace+$C0).w
00005FCC 11FC 0004 D0E4             		move.b	#4,(v_objspace+$C0+obRoutine).w
00005FD2 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005FD8 4EB9 0000 0000             		jsr	(BuildSprites).l
00005FDE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005FE2 0000 0040                  		ori.b	#$40,d0
00005FE6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005FEC 6100 C2C6                  		bsr.w	PaletteFadeIn
00005FF0                            
00005FF0                            ; ---------------------------------------------------------------------------
00005FF0                            ; Continue screen main loop
00005FF0                            ; ---------------------------------------------------------------------------
00005FF0                            
00005FF0                            Cont_MainLoop:
00005FF0 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005FF6 6100 DCA0                  		bsr.w	WaitForVBla
00005FFA 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00006000 6400                       		bhs.s	loc_4DF2
00006002 46FC 2700                  		disable_ints
00006006 3238 F614                  		move.w	(v_demolength).w,d1
0000600A 82FC 003C                  		divu.w	#$3C,d1
0000600E 0281 0000 000F             		andi.l	#$F,d1
00006014 4EB9 0000 0000             		jsr	(ContScrCounter).l
0000601A 46FC 2300                  		enable_ints
0000601E                            
0000601E                            loc_4DF2:
0000601E 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006024 4EB9 0000 0000             		jsr	(BuildSprites).l
0000602A 0C78 0180 D008             		cmpi.w	#$180,(v_player+obX).w ; has Sonic run off screen?
00006030 6400                       		bhs.s	Cont_GotoLevel	; if yes, branch
00006032 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00006038 64B6                       		bhs.s	Cont_MainLoop
0000603A 4A78 F614                  		tst.w	(v_demolength).w
0000603E 6600 FFB0                  		bne.w	Cont_MainLoop
00006042 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00006048 4E75                       		rts	
0000604A                            ; ===========================================================================
0000604A                            
0000604A                            Cont_GotoLevel:
0000604A 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00006050 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00006056 7000                       		moveq	#0,d0
00006058 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
0000605C 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00006060 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00006064 11C0 FE30                  		move.b	d0,(v_lastlamp).w ; clear lamppost count
00006068 5338 FE18                  		subq.b	#1,(v_continues).w ; subtract 1 from continues
0000606C 4E75                       		rts	
0000606E                            ; ===========================================================================
0000606E                            
0000606E                            		include	"_incObj\80 Continue Screen Elements.asm"
0000606E                            ; ---------------------------------------------------------------------------
0000606E                            ; Object 80 - Continue screen elements
0000606E                            ; ---------------------------------------------------------------------------
0000606E                            
0000606E                            ContScrItem:
0000606E 7000                       		moveq	#0,d0
00006070 1028 0024                  		move.b	$24(a0),d0
00006074 323B 0000                  		move.w	CSI_Index(pc,d0.w),d1
00006078 4EFB 1000                  		jmp	CSI_Index(pc,d1.w)
0000607C                            ; ===========================================================================
0000607C 0000                       CSI_Index:	dc.w CSI_Main-CSI_Index
0000607E 0000                       		dc.w CSI_Display-CSI_Index
00006080 0000                       		dc.w CSI_MakeMiniSonic-CSI_Index
00006082 0000                       		dc.w CSI_ChkDel-CSI_Index
00006084                            ; ===========================================================================
00006084                            
00006084                            CSI_Main:	; Routine 0
00006084 5428 0024                  		addq.b	#2,obRoutine(a0)
00006088 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00006090 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00006096 117C 0000 0001             		move.b	#0,obRender(a0)
0000609C 117C 003C 0014             		move.b	#$3C,obActWid(a0)
000060A2 317C 0120 0008             		move.w	#$120,obX(a0)
000060A8 317C 00C0 000A             		move.w	#$C0,obScreenY(a0)
000060AE 31FC 0000 FE20             		move.w	#0,(v_rings).w	; clear rings
000060B4                            
000060B4                            CSI_Display:	; Routine 2
000060B4 4EF9 0000 0000             		jmp	(DisplaySprite).l
000060BA                            ; ===========================================================================
000060BA                            
000060BA                            	CSI_MiniSonicPos:
000060BA 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000060CC 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000060D8                            
000060D8                            CSI_MakeMiniSonic:
000060D8                            		; Routine 4
000060D8 2248                       		movea.l	a0,a1
000060DA 45F9 0000 60BA             		lea	(CSI_MiniSonicPos).l,a2
000060E0 7200                       		moveq	#0,d1
000060E2 1238 FE18                  		move.b	(v_continues).w,d1
000060E6 5501                       		subq.b	#2,d1
000060E8 6400                       		bcc.s	CSI_MoreThan1
000060EA 4EF9 0000 0000             		jmp	(DeleteObject).l	; cancel if you have 0-1 continues
000060F0                            
000060F0                            	CSI_MoreThan1:
000060F0 7601                       		moveq	#1,d3
000060F2 0C01 000E                  		cmpi.b	#14,d1		; do you have fewer than 16 continues
000060F6 6500                       		bcs.s	CSI_FewerThan16	; if yes, branch
000060F8                            
000060F8 7600                       		moveq	#0,d3
000060FA 720E                       		moveq	#14,d1		; cap at 15 mini-Sonics
000060FC                            
000060FC                            	CSI_FewerThan16:
000060FC 1401                       		move.b	d1,d2
000060FE 0202 0001                  		andi.b	#1,d2
00006102                            
00006102                            CSI_MiniSonicLoop:
00006102 12BC 0000                  		move.b	#id_ContScrItem,0(a1) ; load mini-Sonic object
00006106 335A 0008                  		move.w	(a2)+,obX(a1)	; use above data for x-axis position
0000610A 4A02                       		tst.b	d2		; do you have an even number of continues?
0000610C 6700                       		beq.s	CSI_Even	; if yes, branch
0000610E 0469 000A 0008             		subi.w	#$A,obX(a1)	; shift mini-Sonics slightly to the right
00006114                            
00006114                            	CSI_Even:
00006114 337C 00D0 000A             		move.w	#$D0,obScreenY(a1)
0000611A 137C 0006 001A             		move.b	#6,obFrame(a1)
00006120 137C 0006 0024             		move.b	#6,obRoutine(a1)
00006126 237C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a1)
0000612E 337C 8551 0002             		move.w	#$8551,obGfx(a1)
00006134 137C 0000 0001             		move.b	#0,obRender(a1)
0000613A 43E9 0040                  		lea	$40(a1),a1
0000613E 51C9 FFC2                  		dbf	d1,CSI_MiniSonicLoop ; repeat for number of continues
00006142                            
00006142 43E9 FFC0                  		lea	-$40(a1),a1
00006146 1343 0028                  		move.b	d3,obSubtype(a1)
0000614A                            
0000614A                            CSI_ChkDel:	; Routine 6
0000614A 4A28 0028                  		tst.b	obSubtype(a0)	; do you have 16 or more continues?
0000614E 6700                       		beq.s	CSI_Animate	; if yes, branch
00006150 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic running?
00006156 6500                       		bcs.s	CSI_Animate	; if not, branch
00006158 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000615C 0200 0001                  		andi.b	#1,d0
00006160 6600                       		bne.s	CSI_Animate
00006162 4A78 D010                  		tst.w	(v_player+obVelX).w ; is Sonic running?
00006166 6600                       		bne.s	CSI_Delete	; if yes, goto delete
00006168 4E75                       		rts	
0000616A                            
0000616A                            CSI_Animate:
0000616A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000616E 0200 000F                  		andi.b	#$F,d0
00006172 6600                       		bne.s	CSI_Display2
00006174 0868 0000 001A             		bchg	#0,obFrame(a0)
0000617A                            
0000617A                            	CSI_Display2:
0000617A 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006180                            ; ===========================================================================
00006180                            
00006180                            CSI_Delete:
00006180 4EF9 0000 0000             		jmp	(DeleteObject).l
00006180 4EF9 0000 0000             		jmp	(DeleteObject).l
00006186                            		include	"_incObj\81 Continue Screen Sonic.asm"
00006186                            ; ---------------------------------------------------------------------------
00006186                            ; Object 81 - Sonic on the continue screen
00006186                            ; ---------------------------------------------------------------------------
00006186                            
00006186                            ContSonic:
00006186 7000                       		moveq	#0,d0
00006188 1028 0024                  		move.b	obRoutine(a0),d0
0000618C 323B 0000                  		move.w	CSon_Index(pc,d0.w),d1
00006190 4EBB 1000                  		jsr	CSon_Index(pc,d1.w)
00006194 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000619A                            ; ===========================================================================
0000619A 0000                       CSon_Index:	dc.w CSon_Main-CSon_Index
0000619C 0000                       		dc.w CSon_ChkLand-CSon_Index
0000619E 0000                       		dc.w CSon_Animate-CSon_Index
000061A0 0000                       		dc.w CSon_Run-CSon_Index
000061A2                            ; ===========================================================================
000061A2                            
000061A2                            CSon_Main:	; Routine 0
000061A2 5428 0024                  		addq.b	#2,obRoutine(a0)
000061A6 317C 00A0 0008             		move.w	#$A0,obX(a0)
000061AC 317C 00C0 000C             		move.w	#$C0,obY(a0)
000061B2 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
000061BA 317C 0780 0002             		move.w	#$780,obGfx(a0)
000061C0 117C 0004 0001             		move.b	#4,obRender(a0)
000061C6 317C 0100 0018             		move.w	#$100,obPriority(a0)
000061CC 117C 0000 001C             		move.b	#id_Float3,obAnim(a0) ; use "floating" animation
000061D2 317C 0400 0012             		move.w	#$400,obVelY(a0) ; make Sonic fall from above
000061D8                            
000061D8                            CSon_ChkLand:	; Routine 2
000061D8 0C68 01A0 000C             		cmpi.w	#$1A0,obY(a0)	; has Sonic landed yet?
000061DE 6600                       		bne.s	CSon_ShowFall	; if not, branch
000061E0                            
000061E0 5428 0024                  		addq.b	#2,obRoutine(a0)
000061E4 4268 0012                  		clr.w	obVelY(a0)	; stop Sonic falling
000061E8 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
000061F0 317C 8500 0002             		move.w	#$8500,obGfx(a0)
000061F6 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000061FC 6000                       		bra.s	CSon_Animate
000061FE                            
000061FE                            CSon_ShowFall:
000061FE 4EB9 0000 0000             		jsr	(SpeedToPos).l
00006204 4EB9 0000 0000             		jsr	(Sonic_Animate).l
0000620A 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00006210                            ; ===========================================================================
00006210                            
00006210                            CSon_Animate:	; Routine 4
00006210 4A38 F605                  		tst.b	(v_jpadpress1).w ; is Start button pressed?
00006214 6B00                       		bmi.s	CSon_GetUp	; if yes, branch
00006216 43F9 0000 0000             		lea	(AniScript_CSon).l,a1
0000621C 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006222                            
00006222                            CSon_GetUp:
00006222 5428 0024                  		addq.b	#2,obRoutine(a0)
00006226 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0000622E 317C 0780 0002             		move.w	#$780,obGfx(a0)
00006234 117C 0000 001C             		move.b	#id_Float4,obAnim(a0) ; use "getting up" animation
0000623A 4268 0020                  		clr.w	obInertia(a0)
0000623E 5168 000C                  		subq.w	#8,obY(a0)
0000624A                            
0000624A                            CSon_Run:	; Routine 6
0000624A 0C68 0800 0020             		cmpi.w	#$800,obInertia(a0) ; check Sonic's inertia
00006250 6600                       		bne.s	CSon_AddInertia	; if too low, branch
00006252 317C 1000 0010             		move.w	#$1000,obVelX(a0) ; move Sonic to the right
00006258 6000                       		bra.s	CSon_ShowRun
0000625A                            
0000625A                            CSon_AddInertia:
0000625A 0668 0020 0020             		addi.w	#$20,obInertia(a0) ; increase inertia
00006260                            
00006260                            CSon_ShowRun:
00006260 4EB9 0000 0000             		jsr	(SpeedToPos).l
00006266 4EB9 0000 0000             		jsr	(Sonic_Animate).l
0000626C 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
0000626C 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00006272                            		include	"_anim\Continue Screen Sonic.asm"
00006272                            ; ---------------------------------------------------------------------------
00006272                            ; Animation script - Sonic on the continue screen
00006272                            ; ---------------------------------------------------------------------------
00006272 0000                       AniScript_CSon:	dc.w A_CSon_1-AniScript_CSon
00006274 0401 0101 0302 0203 03FF   A_CSon_1:	dc.b 4,	1, 1, 1, 3, 2, 2, 3, 3, afEnd
0000627E                            		even
0000627E                            		even
0000627E                            Map_ContScr:	include	"_maps\Continue Screen.asm"
0000627E                            ; --------------------------------------------------------------------------------
0000627E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000627E                            ; --------------------------------------------------------------------------------
0000627E                            
0000627E                            SME_phED7:	
0000627E 0000 0000                  		dc.w SME_phED7_10-SME_phED7, SME_phED7_48-SME_phED7	
00006282 0000 0000                  		dc.w SME_phED7_58-SME_phED7, SME_phED7_68-SME_phED7	
00006286 0000 0000                  		dc.w SME_phED7_78-SME_phED7, SME_phED7_83-SME_phED7	
0000628A 0000 0000                  		dc.w SME_phED7_89-SME_phED7, SME_phED7_8F-SME_phED7	
0000628E 0B                         SME_phED7_10:	dc.b $B	
0000628F F805 0088 C4               		dc.b $F8, 5, 0, $88, $C4	
00006294 F805 00B2 D4               		dc.b $F8, 5, 0, $B2, $D4	
00006299 F805 00AE E4               		dc.b $F8, 5, 0, $AE, $E4	
0000629E F805 00C2 F4               		dc.b $F8, 5, 0, $C2, $F4	
000062A3 F801 00A0 04               		dc.b $F8, 1, 0, $A0, 4	
000062A8 F805 00AE 0C               		dc.b $F8, 5, 0, $AE, $C	
000062AD F805 00C6 1C               		dc.b $F8, 5, 0, $C6, $1C	
000062B2 F805 0090 2C               		dc.b $F8, 5, 0, $90, $2C	
000062B7 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8	
000062BC 3805 2021 08               		dc.b $38, 5, $20, $21, 8	
000062C1 3605 01FC F8               		dc.b $36, 5, 1, $FC, $F8	
000062C6 03                         SME_phED7_48:	dc.b 3	
000062C7 0405 0015 FB               		dc.b 4, 5, 0, $15, $FB	
000062CC F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
000062D1 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
000062D6 03                         SME_phED7_58:	dc.b 3	
000062D7 0405 0019 FB               		dc.b 4, 5, 0, $19, $FB	
000062DC F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
000062E1 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
000062E6 03                         SME_phED7_68:	dc.b 3	
000062E7 0405 001D FB               		dc.b 4, 5, 0, $1D, $FB	
000062EC F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
000062F1 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
000062F6 02                         SME_phED7_78:	dc.b 2	
000062F7 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8	
000062FC 6009 2800 00               		dc.b $60, 9, $28, 0, 0	
00006301 01                         SME_phED7_83:	dc.b 1	
00006302 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
00006307 01                         SME_phED7_89:	dc.b 1	
00006308 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
0000630D 01                         SME_phED7_8F:	dc.b 1	
0000630E 0006 0018 00               		dc.b 0, 6, 0, $18, 0	
00006314 00                         		even
00006314 00                         		even
00006314                            
00006314                            ; ===========================================================================
00006314                            ; ---------------------------------------------------------------------------
00006314                            ; Ending sequence in Green Hill	Zone
00006314                            ; ---------------------------------------------------------------------------
00006314                            
00006314                            GM_Ending:
0000631C 6100 C03C                  		bsr.w	PaletteFadeOut
00006320                            
00006320 43F8 D000                  		lea	(v_objspace).w,a1
00006324 7000                       		moveq	#0,d0
00006326 323C 07FF                  		move.w	#$7FF,d1
0000632A                            	End_ClrObjRam:
0000632A 22C0                       		move.l	d0,(a1)+
0000632C 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00006330                            
00006330 43F8 F628                  		lea	($FFFFF628).w,a1
00006334 7000                       		moveq	#0,d0
00006336 323C 0015                  		move.w	#$15,d1
0000633A                            	End_ClrRam1:
0000633A 22C0                       		move.l	d0,(a1)+
0000633C 51C9 FFFC                  		dbf	d1,End_ClrRam1	; clear	variables
00006340                            
00006340 43F8 F700                  		lea	(v_screenposx).w,a1
00006344 7000                       		moveq	#0,d0
00006346 323C 003F                  		move.w	#$3F,d1
0000634A                            	End_ClrRam2:
0000634A 22C0                       		move.l	d0,(a1)+
0000634C 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00006350                            
00006350 43F8 FE60                  		lea	(v_oscillate+2).w,a1
00006354 7000                       		moveq	#0,d0
00006356 323C 0047                  		move.w	#$47,d1
0000635A                            	End_ClrRam3:
0000635A 22C0                       		move.l	d0,(a1)+
0000635C 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00006360                            
00006360 46FC 2700                  		disable_ints
00006364 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00006368 0200 00BF                  		andi.b	#$BF,d0
0000636C 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00006372 6100 AE5C                  		bsr.w	ClearScreen
00006376 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
0000637C 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006380 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00006384 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00006388 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
0000638C 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00006390 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00006394 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00006398 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
0000639E 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
000063A2 31FC 001E FE14             		move.w	#30,(v_air).w
000063A8 31FC 0600 FE10             		move.w	#id_EndZ<<8,(v_zone).w ; set level number to 0600 (extra flowers)
000063AE 0C38 0000 FE57             		cmpi.b	#0,(v_emeralds).w ; do you have all 6 emeralds?
000063B4 6700                       		beq.s	End_LoadData	; if yes, branch
000063B6 31FC 0601 FE10             		move.w	#(id_EndZ<<8)+1,(v_zone).w ; set level number to 0601 (no flowers)
000063BC                            
000063BC                            End_LoadData:
000063BC 7000                       		moveq	#plcid_Ending,d0
000063BE 6100 B4E6                  		bsr.w	QuickPLC	; load ending sequence patterns
000063C2 4EB9 0000 0000             		jsr	(Hud_Base).l
000063C8 6100 0000                  		bsr.w	LevelSizeLoad
000063CC 6100 0000                  		bsr.w	DeformLayers
000063D0 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
000063D6 6100 0000                  		bsr.w	LevelDataLoad
000063DA 6100 0000                  		bsr.w	LoadTilesFromStart
000063DE 21FC 0000 0000 F796        		move.l	#Col_GHZ,(v_collindex).w ; load collision index
000063E6 46FC 2300                  		enable_ints
000063EA 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000063F0 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000063F4 6100 B660                  		bsr.w	KosDec
000063F8 4EB9 0000 0000             		jsr		LoadPlayerPal
000063FE 6100 C204                  		bsr.w	PalLoad1	; load Sonic's palette
0000640A 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
00006410 6700                       		beq.s	End_LoadSonic	; if not, branch
00006412 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00006418                            
00006418                            End_LoadSonic:
00006418 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
0000641E 08F8 0000 D022             		bset	#0,(v_player+obStatus).w ; make Sonic face left
00006424 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0000642A 31FC 0400 F602             		move.w	#(btnL<<8),(v_jpadhold2).w ; move Sonic to the left
00006430 31FC F600 D020             		move.w	#$F600,(v_player+obInertia).w ; set Sonic's speed
00006436 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
0000643C 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006442 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006448 4EB9 0000 0000             		jsr	(BuildSprites).l
0000644E 7000                       		moveq	#0,d0
00006450 31C0 FE20                  		move.w	d0,(v_rings).w
00006454 21C0 FE22                  		move.l	d0,(v_time).w
00006458 11C0 FE1B                  		move.b	d0,(v_lifecount).w
0000645C 11C0 FE2C                  		move.b	d0,(v_shield).w
00006460 11C0 FE2D                  		move.b	d0,(v_invinc).w
00006464 11C0 FE2E                  		move.b	d0,(v_shoes).w
00006468 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000646C 31C0 FE08                  		move.w	d0,(v_debuguse).w
00006470 31C0 FE02                  		move.w	d0,(f_restart).w
00006474 31C0 FE04                  		move.w	d0,(v_framecount).w
00006478 6100 EEBC                  		bsr.w	OscillateNumInit
0000647C 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w
00006482 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w
00006488 11FC 0000 FE1E             		move.b	#0,(f_timecount).w
0000648E 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00006494 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
0000649A 6100 D7FC                  		bsr.w	WaitForVBla
0000649E 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000064A2 0000 0040                  		ori.b	#$40,d0
000064A6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000064AC 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
000064B2 6100 BE00                  		bsr.w	PaletteFadeIn
000064B6                            
000064B6                            ; ---------------------------------------------------------------------------
000064B6                            ; Main ending sequence loop
000064B6                            ; ---------------------------------------------------------------------------
000064B6                            
000064B6                            End_MainLoop:
000064B6 6100 ADF4                  		bsr.w	PauseGame
000064BA 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
000064C0 6100 D7D6                  		bsr.w	WaitForVBla
000064C4 5278 FE04                  		addq.w	#1,(v_framecount).w
000064C8 6100 0000                  		bsr.w	End_MoveSonic
000064CC 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000064D2 6100 0000                  		bsr.w	DeformLayers
000064D6 4EB9 0000 0000             		jsr	(BuildSprites).l
000064DC 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000064E2 6100 B83A                  		bsr.w	PaletteCycle
000064E6 6100 EEA4                  		bsr.w	OscillateNumDo
000064EA 6100 EF30                  		bsr.w	SynchroAnimate
000064EE 0C38 0000 F600             		cmpi.b	#id_Ending,(v_gamemode).w ; is game mode $18 (ending)?
000064F4 6700                       		beq.s	End_ChkEmerald	; if yes, branch
000064F6                            
000064F6 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; goto credits
000064FC 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w ; set credits index number to 0
00006502 4E75                       		rts	
00006504                            ; ===========================================================================
00006504                            
00006504                            End_ChkEmerald:
00006504 4A78 FE02                  		tst.w	(f_restart).w	; has Sonic released the emeralds?
00006508 6700 FFAC                  		beq.w	End_MainLoop	; if not, branch
0000650C                            
0000650C 4278 FE02                  		clr.w	(f_restart).w
00006510 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00006516 4278 F794                  		clr.w	(v_palchgspeed).w
0000651A                            
0000651A                            	End_AllEmlds:
0000651A 6100 AD90                  		bsr.w	PauseGame
0000651E 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006524 6100 D772                  		bsr.w	WaitForVBla
00006528 5278 FE04                  		addq.w	#1,(v_framecount).w
0000652C 6100 0000                  		bsr.w	End_MoveSonic
00006530 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006536 6100 0000                  		bsr.w	DeformLayers
0000653A 4EB9 0000 0000             		jsr	(BuildSprites).l
00006540 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006546 6100 EE44                  		bsr.w	OscillateNumDo
0000654A 6100 EED0                  		bsr.w	SynchroAnimate
0000654E 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00006552 6A00                       		bpl.s	End_SlowFade
00006554 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
0000655A 6100 BF48                  		bsr.w	WhiteOut_ToWhite
0000655E                            
0000655E                            	End_SlowFade:
0000655E 4A78 FE02                  		tst.w	(f_restart).w
00006562 6700 FFB6                  		beq.w	End_AllEmlds
00006566 4278 FE02                  		clr.w	(f_restart).w
0000656A 31FC 2829 A480             		move.w	#$2829,(v_lvllayout+$80).w ; modify level layout
00006570 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00006576 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000657C 47F8 F700                  		lea	(v_screenposx).w,a3
00006580 49F8 A400                  		lea	(v_lvllayout).w,a4
00006584 343C 4000                  		move.w	#$4000,d2
00006588 6100 0000                  		bsr.w	DrawChunks
0000658C 7015                       		moveq	#palid_Ending,d0
0000658E 6100 C074                  		bsr.w	PalLoad1	; load ending palette
00006592 6100 BE44                  		bsr.w	PaletteWhiteIn
00006596 6000 FF1E                  		bra.w	End_MainLoop
0000659A                            
0000659A                            ; ---------------------------------------------------------------------------
0000659A                            ; Subroutine controlling Sonic on the ending sequence
0000659A                            ; ---------------------------------------------------------------------------
0000659A                            
0000659A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000659A                            
0000659A                            
0000659A                            End_MoveSonic:
0000659A 1038 F7D7                  		move.b	(v_sonicend).w,d0
0000659E 6600                       		bne.s	End_MoveSon2
000065A0 0C78 0090 D008             		cmpi.w	#$90,(v_player+obX).w ; has Sonic passed $90 on x-axis?
000065A6 6400                       		bhs.s	End_MoveSonExit	; if not, branch
000065A8                            
000065A8 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000065AC 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock player's controls
000065B2 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; move Sonic to the right
000065B8 4E75                       		rts	
000065BA                            ; ===========================================================================
000065BA                            
000065BA                            End_MoveSon2:
000065BA 5500                       		subq.b	#2,d0
000065BC 6600                       		bne.s	End_MoveSon3
000065BE 0C78 00A0 D008             		cmpi.w	#$A0,(v_player+obX).w ; has Sonic passed $A0 on x-axis?
000065C4 6500                       		blo.s	End_MoveSonExit	; if not, branch
000065C6                            
000065C6 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000065CA 7000                       		moveq	#0,d0
000065CC 11C0 F7CC                  		move.b	d0,(f_lockctrl).w
000065D0 31C0 F602                  		move.w	d0,(v_jpadhold2).w ; stop Sonic moving
000065D4 31C0 D020                  		move.w	d0,(v_player+obInertia).w
000065D8 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls & position
000065DE 11FC 0003 D01A             		move.b	#3,(v_player+obFrame).w
000065E4 31FC 0000 D01C             		move.w	#(id_Wait<<8)+id_Wait,(v_player+obAnim).w ; use "standing" animation
000065EA 11FC 0003 D01E             		move.b	#3,(v_player+obTimeFrame).w
000065F0 4E75                       		rts	
000065F2                            ; ===========================================================================
000065F2                            
000065F2                            End_MoveSon3:
000065F2 5500                       		subq.b	#2,d0
000065F4 6600                       		bne.s	End_MoveSonExit
000065F6 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000065FA 31FC 00A0 D008             		move.w	#$A0,(v_player+obX).w
00006600 11FC 0000 D000             		move.b	#id_EndSonic,(v_player).w ; load Sonic ending sequence object
00006606 4278 D024                  		clr.w	(v_player+obRoutine).w
0000660A                            
0000660A                            End_MoveSonExit:
0000660A 4E75                       		rts	
0000660C                            ; End of function End_MoveSonic
0000660C                            
0000660C                            ; ===========================================================================
0000660C                            
0000660C                            		include	"_incObj\87 Ending Sequence Sonic.asm"
0000660C                            ; ---------------------------------------------------------------------------
0000660C                            ; Object 87 - Sonic on ending sequence
0000660C                            ; ---------------------------------------------------------------------------
0000660C                            
0000660C                            EndSonic:
0000660C 7000                       		moveq	#0,d0
0000660E 1028 0025                  		move.b	ob2ndRout(a0),d0
00006612 323B 0000                  		move.w	ESon_Index(pc,d0.w),d1
00006616 4EBB 1000                  		jsr	ESon_Index(pc,d1.w)
0000661A 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006620                            ; ===========================================================================
00006620 0000 0000                  ESon_Index:	dc.w ESon_Main-ESon_Index, ESon_MakeEmeralds-ESon_Index
00006624 0000 0000                  		dc.w Obj87_Animate-ESon_Index,	Obj87_LookUp-ESon_Index
00006628 0000 0000                  		dc.w Obj87_ClrObjRam-ESon_Index, Obj87_Animate-ESon_Index
0000662C 0000 0000                  		dc.w Obj87_MakeLogo-ESon_Index, Obj87_Animate-ESon_Index
00006630 0000 0000                  		dc.w Obj87_Leap-ESon_Index, Obj87_Animate-ESon_Index
00006634                            
00006634 =00000030                  eson_time:	equ $30	; time to wait between events
00006634                            ; ===========================================================================
00006634                            
00006634                            ESon_Main:	; Routine 0
00006634 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
0000663A 6700                       		beq.s	ESon_Main2	; if yes, branch
0000663C 0628 0010 0025             		addi.b	#$10,ob2ndRout(a0) ; else, skip emerald sequence
00006642 317C 00D8 0030             		move.w	#216,eson_time(a0)
00006648 4E75                       		rts	
0000664A                            ; ===========================================================================
0000664A                            
0000664A                            ESon_Main2:
0000664A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000664E 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00006656 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
0000665C 117C 0004 0001             		move.b	#4,obRender(a0)
00006662 4228 0022                  		clr.b	obStatus(a0)
00006666 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000666C 117C 0000 001A             		move.b	#0,obFrame(a0)
00006672 317C 0050 0030             		move.w	#80,eson_time(a0) ; set duration for Sonic to pause
00006678                            
00006678                            ESon_MakeEmeralds:
00006678                            		; Routine 2
00006678 5368 0030                  		subq.w	#1,eson_time(a0) ; subtract 1 from duration
0000667C 6600                       		bne.s	ESon_Wait
0000667E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006682 317C 0001 001C             		move.w	#1,obAnim(a0)
00006688 11FC 0000 D400             		move.b	#id_EndChaos,(v_objspace+$400).w ; load chaos emeralds objects
0000668E                            
0000668E                            	ESon_Wait:
0000668E 4E75                       		rts	
00006690                            ; ===========================================================================
00006690                            
00006690                            Obj87_LookUp:	; Routine 6
00006690 0C79 2000 00FF D43C        		cmpi.w	#$2000,((v_objspace&$FFFFFF)+$400+$3C).l
00006698 6600                       		bne.s	locret_5480
0000669A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; set level to	restart	(causes	flash)
000066A0 317C 005A 0030             		move.w	#90,eson_time(a0)
000066A6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000066AA                            
000066AA                            locret_5480:
000066AA 4E75                       		rts	
000066AC                            ; ===========================================================================
000066AC                            
000066AC                            Obj87_ClrObjRam:
000066AC                            		; Routine 8
000066AC 5368 0030                  		subq.w	#1,eson_time(a0)
000066B0 6600                       		bne.s	ESon_Wait2
000066B2 43F8 D400                  		lea	(v_objspace+$400).w,a1
000066B6 323C 00FF                  		move.w	#$FF,d1
000066BA                            
000066BA                            Obj87_ClrLoop:
000066BA 4299                       		clr.l	(a1)+
000066BC 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000066C0 31FC 0001 FE02             		move.w	#1,(f_restart).w
000066C6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000066CA 117C 0001 001C             		move.b	#1,obAnim(a0)
000066D0 317C 003C 0030             		move.w	#60,eson_time(a0)
000066D6                            
000066D6                            ESon_Wait2:
000066D6 4E75                       		rts	
000066D8                            ; ===========================================================================
000066D8                            
000066D8                            Obj87_MakeLogo:	; Routine $C
000066D8 5368 0030                  		subq.w	#1,eson_time(a0)
000066DC 6600                       		bne.s	ESon_Wait3
000066DE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000066E2 317C 00B4 0030             		move.w	#180,eson_time(a0)
000066E8 117C 0002 001C             		move.b	#2,obAnim(a0)
000066EE 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
000066F4                            
000066F4                            ESon_Wait3:
000066F4 4E75                       		rts	
000066F6                            ; ===========================================================================
000066F6                            
000066F6                            Obj87_Animate:	; Rountine 4, $A, $E, $12
000066F6 43F9 0000 0000             		lea	(AniScript_ESon).l,a1
000066FC 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006702                            ; ===========================================================================
00006702                            
00006702                            Obj87_Leap:	; Routine $10
00006702 5368 0030                  		subq.w	#1,eson_time(a0)
00006706 6600                       		bne.s	ESon_Wait4
00006708 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000670C 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00006714 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
0000671A 117C 0004 0001             		move.b	#4,obRender(a0)
00006720 4228 0022                  		clr.b	obStatus(a0)
00006724 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000672A 117C 0005 001A             		move.b	#5,obFrame(a0)
00006730 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "leaping"	animation
00006736 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
0000673C 60B8                       		bra.s	Obj87_Animate
0000673E                            ; ===========================================================================
0000673E                            
0000673E                            ESon_Wait4:
0000673E 4E75                       		rts	
0000673E 4E75                       		rts	
00006740                            		include "_anim\Ending Sequence Sonic.asm"
00006740                            ; ---------------------------------------------------------------------------
00006740                            ; Animation script - Sonic on the ending sequence
00006740                            ; ---------------------------------------------------------------------------
00006740 0000                       AniScript_ESon:	dc.w byte_551C-AniScript_ESon
00006742 0000                       		dc.w byte_552A-AniScript_ESon
00006744 0000                       		dc.w byte_5534-AniScript_ESon
00006746 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00006754 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
0000675E 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00006766                            		even
00006766                            		even
00006766                            		include	"_incObj\88 Ending Sequence Emeralds.asm"
00006766                            ; ---------------------------------------------------------------------------
00006766                            ; Object 88 - chaos emeralds on	the ending sequence
00006766                            ; ---------------------------------------------------------------------------
00006766                            
00006766                            EndChaos:
00006766 7000                       		moveq	#0,d0
00006768 1028 0024                  		move.b	obRoutine(a0),d0
0000676C 323B 0000                  		move.w	ECha_Index(pc,d0.w),d1
00006770 4EBB 1000                  		jsr	ECha_Index(pc,d1.w)
00006774 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000677A                            ; ===========================================================================
0000677A 0000                       ECha_Index:	dc.w ECha_Main-ECha_Index
0000677C 0000                       		dc.w ECha_Move-ECha_Index
0000677E                            
0000677E =00000038                  echa_origX:	equ $38	; x-axis centre of emerald circle (2 bytes)
0000677E =0000003A                  echa_origY:	equ $3A	; y-axis centre of emerald circle (2 bytes)
0000677E =0000003C                  echa_radius:	equ $3C	; radius (2 bytes)
0000677E =0000003E                  echa_angle:	equ $3E	; angle for rotation (2 bytes)
0000677E                            ; ===========================================================================
0000677E                            
0000677E                            ECha_Main:	; Routine 0
0000677E 0C38 0002 D01A             		cmpi.b	#2,(v_player+obFrame).w
00006784 6700                       		beq.s	ECha_CreateEms
00006786 588F                       		addq.l	#4,sp
00006788 4E75                       		rts	
0000678A                            ; ===========================================================================
0000678A                            
0000678A                            ECha_CreateEms:
0000678A 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0) ; match X position with Sonic
00006790 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0) ; match Y position with Sonic
00006796 2248                       		movea.l	a0,a1
00006798 7600                       		moveq	#0,d3
0000679A 7401                       		moveq	#1,d2
0000679C 7205                       		moveq	#5,d1
0000679E                            
0000679E                            	ECha_LoadLoop:
0000679E 12BC 0000                  		move.b	#id_EndChaos,(a1) ; load chaos emerald object
000067A2 5429 0024                  		addq.b	#2,obRoutine(a1)
000067A6 237C 0000 0000 0004        		move.l	#Map_ECha,obMap(a1)
000067AE 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
000067B4 137C 0004 0001             		move.b	#4,obRender(a1)
000067BA 337C 0080 0018             		move.w	#$80,obPriority(a1)
000067C0 3368 0008 0038             		move.w	obX(a0),echa_origX(a1)
000067C6 3368 000C 003A             		move.w	obY(a0),echa_origY(a1)
000067CC 1342 001C                  		move.b	d2,obAnim(a1)
000067D0 1342 001A                  		move.b	d2,obFrame(a1)
000067D4 5202                       		addq.b	#1,d2
000067D6 1343 0026                  		move.b	d3,obAngle(a1)
000067DA 0603 002A                  		addi.b	#$100/6,d3	; angle between each emerald
000067DE 43E9 0040                  		lea	$40(a1),a1
000067E2 51C9 FFBA                  		dbf	d1,ECha_LoadLoop ; repeat 5 more times
000067E6                            
000067E6                            ECha_Move:	; Routine 2
000067E6 3028 003E                  		move.w	echa_angle(a0),d0
000067EA D168 0026                  		add.w	d0,obAngle(a0)
000067EE 1028 0026                  		move.b	obAngle(a0),d0
000067F2 4EB9 0000 3CCA             		jsr	(CalcSine).l
000067F8 7800                       		moveq	#0,d4
000067FA 1828 003C                  		move.b	echa_radius(a0),d4
000067FE C3C4                       		muls.w	d4,d1
00006800 E081                       		asr.l	#8,d1
00006802 C1C4                       		muls.w	d4,d0
00006804 E080                       		asr.l	#8,d0
00006806 D268 0038                  		add.w	echa_origX(a0),d1
0000680A D068 003A                  		add.w	echa_origY(a0),d0
0000680E 3141 0008                  		move.w	d1,obX(a0)
00006812 3140 000C                  		move.w	d0,obY(a0)
00006816                            
00006816                            	ECha_Expand:
00006816 0C68 2000 003C             		cmpi.w	#$2000,echa_radius(a0)
0000681C 6700                       		beq.s	ECha_Rotate
0000681E 0668 0020 003C             		addi.w	#$20,echa_radius(a0) ; expand circle of emeralds
00006824                            
00006824                            	ECha_Rotate:
00006824 0C68 2000 003E             		cmpi.w	#$2000,echa_angle(a0)
0000682A 6700                       		beq.s	ECha_Rise
0000682C 0668 0020 003E             		addi.w	#$20,echa_angle(a0) ; move emeralds around the centre
00006832                            
00006832                            	ECha_Rise:
00006832 0C68 0140 003A             		cmpi.w	#$140,echa_origY(a0)
00006838 6700                       		beq.s	ECha_End
0000683A 5368 003A                  		subq.w	#1,echa_origY(a0) ; make circle rise
0000683E                            
0000683E                            ECha_End:
0000683E 4E75                       		rts	
0000683E 4E75                       		rts	
00006840                            		include	"_incObj\89 Ending Sequence STH.asm"
00006840                            ; ---------------------------------------------------------------------------
00006840                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00006840                            ; ---------------------------------------------------------------------------
00006840                            
00006840                            EndSTH:
00006840 7000                       		moveq	#0,d0
00006842 1028 0024                  		move.b	$24(a0),d0
00006846 323B 0000                  		move.w	ESth_Index(pc,d0.w),d1
0000684A 4EBB 1000                  		jsr	ESth_Index(pc,d1.w)
0000684E 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006854                            ; ===========================================================================
00006854 0000                       ESth_Index:	dc.w ESth_Main-ESth_Index
00006856 0000                       		dc.w ESth_Move-ESth_Index
00006858 0000                       		dc.w ESth_GotoCredits-ESth_Index
0000685A                            
0000685A =00000030                  esth_time:	equ $30		; time until exit
0000685A                            ; ===========================================================================
0000685A                            
0000685A                            ESth_Main:	; Routine 0
0000685A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000685E 317C FFE0 0008             		move.w	#-$20,obX(a0)	; object starts	outside	the level boundary
00006864 317C 00D8 000A             		move.w	#$D8,obScreenY(a0)
0000686A 217C 0000 0000 0004        		move.l	#Map_ESTH,obMap(a0)
00006872 317C 05C5 0002             		move.w	#$5C5,obGfx(a0)
00006878 117C 0000 0001             		move.b	#0,obRender(a0)
0000687E 317C 0000 0018             		move.w	#0,obPriority(a0)
00006884                            
00006884                            ESth_Move:	; Routine 2
00006884 0C68 00C0 0008             		cmpi.w	#$C0,obX(a0)	; has object reached $C0?
0000688A 6700                       		beq.s	ESth_Delay	; if yes, branch
0000688C 0668 0010 0008             		addi.w	#$10,obX(a0)	; move object to the right
00006892 4E75                       		rts
00006894                            
00006894                            ESth_Delay:
00006894 5428 0024                  		addq.b	#2,obRoutine(a0)
00006898 317C 012C 0030             		move.w	#300,esth_time(a0) ; set duration for delay (5 seconds)
0000689E                            
0000689E                            ESth_GotoCredits:
0000689E                            		; Routine 4
0000689E 5368 0030                  		subq.w	#1,esth_time(a0) ; subtract 1 from duration
000068A2 6A00                       		bpl.s	ESth_Wait
000068A4 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; exit to credits
000068AA                            
000068AA                            	ESth_Wait:
000068AA 4E75                       		rts
000068AC                            Map_ESon:	include	"_maps\Ending Sequence Sonic.asm"
000068AC                            ; --------------------------------------------------------------------------------
000068AC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000068AC                            ; --------------------------------------------------------------------------------
000068AC                            
000068AC                            SME_6jV7R:	
000068AC 0000 0000                  		dc.w SME_6jV7R_10-SME_6jV7R, SME_6jV7R_1B-SME_6jV7R	
000068B0 0000 0000                  		dc.w SME_6jV7R_2B-SME_6jV7R, SME_6jV7R_36-SME_6jV7R	
000068B4 0000 0000                  		dc.w SME_6jV7R_4B-SME_6jV7R, SME_6jV7R_60-SME_6jV7R	
000068B8 0000 0000                  		dc.w SME_6jV7R_70-SME_6jV7R, SME_6jV7R_94-SME_6jV7R	
000068BC 02                         SME_6jV7R_10:	dc.b 2	
000068BD EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	
000068C2 0C0C 000C F0               		dc.b $C, $C, 0, $C, $F0	
000068C7 03                         SME_6jV7R_1B:	dc.b 3	
000068C8 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0	
000068CD EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	
000068D2 0C0C 000C F0               		dc.b $C, $C, 0, $C, $F0	
000068D7 02                         SME_6jV7R_2B:	dc.b 2	
000068D8 EC09 0018 F8               		dc.b $EC, 9, 0, $18, $F8	
000068DD FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0	
000068E2 04                         SME_6jV7R_36:	dc.b 4	
000068E3 F40B 002A F8               		dc.b $F4, $B, 0, $2A, $F8	
000068E8 EC08 0036 F8               		dc.b $EC, 8, 0, $36, $F8	
000068ED E404 0039 00               		dc.b $E4, 4, 0, $39, 0	
000068F2 EC02 003B 10               		dc.b $EC, 2, 0, $3B, $10	
000068F7 04                         SME_6jV7R_4B:	dc.b 4	
000068F8 F40B 002A F8               		dc.b $F4, $B, 0, $2A, $F8	
000068FD EC08 0036 F8               		dc.b $EC, 8, 0, $36, $F8	
00006902 E404 0039 00               		dc.b $E4, 4, 0, $39, 0	
00006907 EC02 003B 10               		dc.b $EC, 2, 0, $3B, $10	
0000690C 03                         SME_6jV7R_60:	dc.b 3	
0000690D EC06 004C F0               		dc.b $EC, 6, 0, $4C, $F0	
00006912 EC06 084C 00               		dc.b $EC, 6, 8, $4C, 0	
00006917 040D 0052 F0               		dc.b 4, $D, 0, $52, $F0	
0000691C 07                         SME_6jV7R_70:	dc.b 7	
0000691D B20C 005A F8               		dc.b $B2, $C, 0, $5A, $F8	
00006922 BA0F 005E F0               		dc.b $BA, $F, 0, $5E, $F0	
00006927 BA05 006E 10               		dc.b $BA, 5, 0, $6E, $10	
0000692C CA02 0072 10               		dc.b $CA, 2, 0, $72, $10	
00006931 DA0C 0075 F0               		dc.b $DA, $C, 0, $75, $F0	
00006936 E208 0079 F8               		dc.b $E2, 8, 0, $79, $F8	
0000693B EA05 007C F8               		dc.b $EA, 5, 0, $7C, $F8	
00006940 18                         SME_6jV7R_94:	dc.b $18	
00006941 800F 0080 F8               		dc.b $80, $F, 0, $80, $F8	
00006946 900B 0090 E0               		dc.b $90, $B, 0, $90, $E0	
0000694B 900B 009C 18               		dc.b $90, $B, 0, $9C, $18	
00006950 980B 00A8 30               		dc.b $98, $B, 0, $A8, $30	
00006955 A00F 00B4 58               		dc.b $A0, $F, 0, $B4, $58	
0000695A 8800 00C4 F0               		dc.b $88, 0, 0, $C4, $F0	
0000695F 8005 00C5 18               		dc.b $80, 5, 0, $C5, $18	
00006964 A00F 00C9 F8               		dc.b $A0, $F, 0, $C9, $F8	
00006969 B00B 00D9 E0               		dc.b $B0, $B, 0, $D9, $E0	
0000696E B80F 00E5 38               		dc.b $B8, $F, 0, $E5, $38	
00006973 A805 00F5 48               		dc.b $A8, 5, 0, $F5, $48	
00006978 C002 00F9 58               		dc.b $C0, 2, 0, $F9, $58	
0000697D C00F 00FC F8               		dc.b $C0, $F, 0, $FC, $F8	
00006982 B80F 010C 18               		dc.b $B8, $F, 1, $C, $18	
00006987 B008 011C 18               		dc.b $B0, 8, 1, $1C, $18	
0000698C D80D 011F 30               		dc.b $D8, $D, 1, $1F, $30	
00006991 D808 0127 18               		dc.b $D8, 8, 1, $27, $18	
00006996 D80F 012A D8               		dc.b $D8, $F, 1, $2A, $D8	
0000699B E00D 013A F8               		dc.b $E0, $D, 1, $3A, $F8	
000069A0 E000 0142 28               		dc.b $E0, 0, 1, $42, $28	
000069A5 D004 0143 E0               		dc.b $D0, 4, 1, $43, $E0	
000069AA E805 0145 C8               		dc.b $E8, 5, 1, $45, $C8	
000069AF F80C 0149 C8               		dc.b $F8, $C, 1, $49, $C8	
000069B4 F006 014D F8               		dc.b $F0, 6, 1, $4D, $F8	
000069BA 00                         		even
000069BA 00                         		even
000069BA                            Map_ECha:	include	"_maps\Ending Sequence Emeralds.asm"
000069BA                            ; --------------------------------------------------------------------------------
000069BA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000069BA                            ; --------------------------------------------------------------------------------
000069BA                            
000069BA                            SME_0ZTmS:	
000069BA 0000 0000                  		dc.w SME_0ZTmS_E-SME_0ZTmS, SME_0ZTmS_14-SME_0ZTmS	
000069BE 0000 0000                  		dc.w SME_0ZTmS_1A-SME_0ZTmS, SME_0ZTmS_20-SME_0ZTmS	
000069C2 0000 0000                  		dc.w SME_0ZTmS_26-SME_0ZTmS, SME_0ZTmS_2C-SME_0ZTmS	
000069C6 0000                       		dc.w SME_0ZTmS_32-SME_0ZTmS	
000069C8 01                         SME_0ZTmS_E:	dc.b 1	
000069C9 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
000069CE 01                         SME_0ZTmS_14:	dc.b 1	
000069CF F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
000069D4 01                         SME_0ZTmS_1A:	dc.b 1	
000069D5 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
000069DA 01                         SME_0ZTmS_20:	dc.b 1	
000069DB F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8	
000069E0 01                         SME_0ZTmS_26:	dc.b 1	
000069E1 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8	
000069E6 01                         SME_0ZTmS_2C:	dc.b 1	
000069E7 F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
000069EC 01                         SME_0ZTmS_32:	dc.b 1	
000069ED F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
000069F2                            		even
000069F2                            		even
000069F2                            Map_ESth:	include	"_maps\Ending Sequence STH.asm"
000069F2                            ; --------------------------------------------------------------------------------
000069F2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000069F2                            ; --------------------------------------------------------------------------------
000069F2                            
000069F2                            SME_WuUDZ:	
000069F2 0000                       		dc.w SME_WuUDZ_2-SME_WuUDZ	
000069F4 03                         SME_WuUDZ_2:	dc.b 3	
000069F5 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0	
000069FA F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0	
000069FF F00F 0020 10               		dc.b $F0, $F, 0, $20, $10	
00006A04                            		even
00006A04                            		even
00006A04                            
00006A04                            ; ===========================================================================
00006A04                            ; ---------------------------------------------------------------------------
00006A04                            ; Credits ending sequence
00006A04                            ; ---------------------------------------------------------------------------
00006A04                            
00006A04                            GM_Credits:
00006A04                            		
00006A04 6100 AD92                  		bsr.w	ClearPLC
00006A08 6100 B950                  		bsr.w	PaletteFadeOut
00006A0C 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00006A12 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00006A16 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00006A1A 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00006A1E 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00006A22 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00006A26 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006A2A 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (line 3; colour 0)
00006A2E 4238 F64E                  		clr.b	(f_wtr_state).w
00006A32 6100 A79C                  		bsr.w	ClearScreen
00006A36                            
00006A36 43F8 D000                  		lea	(v_objspace).w,a1
00006A3A 7000                       		moveq	#0,d0
00006A3C 323C 07FF                  		move.w	#$7FF,d1
00006A40                            	TryAg_ClrObjRam:
00006A40 22C0                       		move.l	d0,(a1)+
00006A42 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00006A46                            
00006A46 7000                       		moveq	#plcid_TryAgain,d0
00006A48 6100 AE5C                  		bsr.w	QuickPLC	; load "TRY AGAIN" or "END" patterns
00006A4C                            
00006A4C 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00006A50 7000                       		moveq	#0,d0
00006A52 323C 001F                  		move.w	#$1F,d1
00006A56                            	TryAg_ClrPal:
00006A56 22C0                       		move.l	d0,(a1)+
00006A58 51C9 FFFC                  		dbf	d1,TryAg_ClrPal ; fill palette with black
00006A5C                            
00006A5C 7015                       		moveq	#palid_Ending,d0
00006A5E 6100 BBA4                  		bsr.w	PalLoad1	; load ending palette
00006A62 4278 FBC0                  		clr.w	(v_pal_dry_dup+$40).w
00006A66 11FC 0000 D080             		move.b	#id_EndEggman,(v_objspace+$80).w ; load Eggman object
00006A6C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006A72 4EB9 0000 0000             		jsr	(BuildSprites).l
00006A78 31FC 0B40 F614             		move.w	#2880,(v_demolength).w ; show screen for 48 seconds
00006A7E 6100 B834                  		bsr.w	PaletteFadeIn
00006A82                            
00006A82                            ; ---------------------------------------------------------------------------
00006A82                            ; "TRY AGAIN" and "END"	screen main loop
00006A82                            ; ---------------------------------------------------------------------------
00006A82                            TryAg_MainLoop:
00006A82 6100 A828                  		bsr.w	PauseGame
00006A86 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00006A8C 6100 D20A                  		bsr.w	WaitForVBla
00006A90 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006A96 4EB9 0000 0000             		jsr	(BuildSprites).l
00006A9C 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00006AA2 6600                       		bne.s	TryAg_Exit	; if yes, branch
00006AA4 4A78 F614                  		tst.w	(v_demolength).w ; has 30 seconds elapsed?
00006AA8 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006AAA 0C38 0000 F600             		cmpi.b	#id_Credits,(v_gamemode).w
00006AB0 67D0                       		beq.s	TryAg_MainLoop
00006AB2                            
00006AB2                            TryAg_Exit:
00006AB2 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00006AB8 4E75                       		rts	
00006ABA                            
00006ABA                            ; ===========================================================================
00006ABA                            
00006ABA                            		include	"_incObj\8B Try Again & End Eggman.asm"
00006ABA                            ; ---------------------------------------------------------------------------
00006ABA                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006ABA                            ; ---------------------------------------------------------------------------
00006ABA                            
00006ABA                            EndEggman:
00006ABA 7000                       		moveq	#0,d0
00006ABC 1028 0024                  		move.b	obRoutine(a0),d0
00006AC0 323B 0000                  		move.w	EEgg_Index(pc,d0.w),d1
00006AC4 4EBB 1000                  		jsr	EEgg_Index(pc,d1.w)
00006AC8 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006ACE                            ; ===========================================================================
00006ACE 0000                       EEgg_Index:	dc.w EEgg_Main-EEgg_Index
00006AD0 0000                       		dc.w EEgg_Animate-EEgg_Index
00006AD2 0000                       		dc.w EEgg_Juggle-EEgg_Index
00006AD4 0000                       		dc.w EEgg_Wait-EEgg_Index
00006AD6                            
00006AD6 =00000030                  eegg_time:	equ $30		; time between juggle motions
00006AD6                            ; ===========================================================================
00006AD6                            
00006AD6                            EEgg_Main:	; Routine 0
00006AD6 5428 0024                  		addq.b	#2,obRoutine(a0)
00006ADA 317C 0120 0008             		move.w	#$120,obX(a0)
00006AE0 317C 00F4 000A             		move.w	#$F4,obScreenY(a0)
00006AE6 217C 0000 0000 0004        		move.l	#Map_EEgg,obMap(a0)
00006AEE 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
00006AF4 117C 0000 0001             		move.b	#0,obRender(a0)
00006AFA 317C 0100 0018             		move.w	#$100,obPriority(a0)
00006B00 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "END" animation
00006B06 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
00006B0C 6700                       		beq.s	EEgg_Animate	; if yes, branch
00006B0E                            
00006B0E 11FC 0000 D0C0             		move.b	#id_CreditsText,(v_objspace+$C0).w ; load credits object
00006B14 31FC 0009 FFF4             		move.w	#9,(v_creditsnum).w ; use "TRY AGAIN" text
00006B1A 11FC 0000 D800             		move.b	#id_TryChaos,(v_objspace+$800).w ; load emeralds object on "TRY AGAIN" screen
00006B20 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "TRY AGAIN" animation
00006B26                            
00006B26                            EEgg_Animate:	; Routine 2
00006B26 43F9 0000 0000             		lea	(Ani_EEgg).l,a1
00006B2C 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006B32                            ; ===========================================================================
00006B32                            
00006B32                            EEgg_Juggle:	; Routine 4
00006B32 5428 0024                  		addq.b	#2,obRoutine(a0)
00006B36 7002                       		moveq	#2,d0
00006B38 0828 0000 001C             		btst	#0,obAnim(a0)
00006B3E 6700                       		beq.s	@noflip
00006B40 4440                       		neg.w	d0
00006B42                            
00006B42                            	@noflip:
00006B42 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; get RAM address for emeralds
00006B46 7205                       		moveq	#5,d1
00006B48                            
00006B48                            @emeraldloop:
00006B48 1340 003E                  		move.b	d0,$3E(a1)
00006B4C 3400                       		move.w	d0,d2
00006B4E E742                       		asl.w	#3,d2
00006B50 D529 0026                  		add.b	d2,obAngle(a1)
00006B54 43E9 0040                  		lea	$40(a1),a1
00006B58 51C9 FFEE                  		dbf	d1,@emeraldloop
00006B5C 5228 001A                  		addq.b	#1,obFrame(a0)
00006B60 317C 0070 0030             		move.w	#112,eegg_time(a0)
00006B66                            
00006B66                            EEgg_Wait:	; Routine 6
00006B66 5368 0030                  		subq.w	#1,eegg_time(a0) ; decrement timer
00006B6A 6A00                       		bpl.s	@nochg		; branch if time remains
00006B6C 0868 0000 001C             		bchg	#0,obAnim(a0)
00006B72 117C 0002 0024             		move.b	#2,obRoutine(a0) ; goto EEgg_Animate next
00006B78                            
00006B78                            	@nochg:
00006B78 4E75                       		rts	
00006B78 4E75                       		rts	
00006B7A                            		include "_anim\Try Again & End Eggman.asm"
00006B7A                            ; ---------------------------------------------------------------------------
00006B7A                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00006B7A                            ; ---------------------------------------------------------------------------
00006B7A 0000                       Ani_EEgg:	dc.w @tryagain1-Ani_EEgg
00006B7C 0000                       		dc.w @tryagain2-Ani_EEgg
00006B7E 0000                       		dc.w @end-Ani_EEgg
00006B80 0500 FC01                  @tryagain1:	dc.b 5,	0, afRoutine, 1
00006B84 0502 FC03                  @tryagain2:	dc.b 5,	2, afRoutine, 3
00006B88 0704 0506 0504 0506 0504+  @end:		dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	afEnd
00006B9A                            		even
00006B9A                            		even
00006B9A                            		include	"_incObj\8C Try Again Emeralds.asm"
00006B9A                            ; ---------------------------------------------------------------------------
00006B9A                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006B9A                            ; ---------------------------------------------------------------------------
00006B9A                            
00006B9A                            TryChaos:
00006B9A 7000                       		moveq	#0,d0
00006B9C 1028 0024                  		move.b	obRoutine(a0),d0
00006BA0 323B 0000                  		move.w	TCha_Index(pc,d0.w),d1
00006BA4 4EBB 1000                  		jsr	TCha_Index(pc,d1.w)
00006BA8 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006BAE                            ; ===========================================================================
00006BAE 0000                       TCha_Index:	dc.w TCha_Main-TCha_Index
00006BB0 0000                       		dc.w TCha_Move-TCha_Index
00006BB2                            ; ===========================================================================
00006BB2                            
00006BB2                            TCha_Main:	; Routine 0
00006BB2 2248                       		movea.l	a0,a1
00006BB4 7400                       		moveq	#0,d2
00006BB6 7600                       		moveq	#0,d3
00006BB8 7205                       		moveq	#5,d1
00006BBA 9238 FE57                  		sub.b	(v_emeralds).w,d1
00006BBE                            
00006BBE                            @makeemerald:
00006BBE 12BC 0000                  		move.b	#id_TryChaos,(a1) ; load emerald object
00006BC2 5429 0024                  		addq.b	#2,obRoutine(a1)
00006BC6 237C 0000 69BA 0004        		move.l	#Map_ECha,obMap(a1)
00006BCE 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
00006BD4 137C 0000 0001             		move.b	#0,obRender(a1)
00006BDA 337C 0080 0018             		move.w	#$80,obPriority(a1)
00006BE0 337C 0104 0008             		move.w	#$104,obX(a1)
00006BE6 337C 0120 0038             		move.w	#$120,$38(a1)
00006BEC 337C 00EC 000A             		move.w	#$EC,obScreenY(a1)
00006BF2 3369 000A 003A             		move.w	obScreenY(a1),$3A(a1)
00006BF8 137C 001C 003C             		move.b	#$1C,$3C(a1)
00006BFE 47F8 FE58                  		lea	(v_emldlist).w,a3
00006C02                            
00006C02                            	@chkemerald:
00006C02 7000                       		moveq	#0,d0
00006C04 1038 FE57                  		move.b	(v_emeralds).w,d0
00006C08 5340                       		subq.w	#1,d0
00006C0A 6500                       		bcs.s	@loc_5B42
00006C0C                            
00006C0C                            	@chkloop:
00006C0C B433 0000                  		cmp.b	(a3,d0.w),d2
00006C10 6600                       		bne.s	@notgot
00006C12 5202                       		addq.b	#1,d2
00006C14 60EC                       		bra.s	@chkemerald
00006C16                            ; ===========================================================================
00006C16                            
00006C16                            	@notgot:
00006C16 51C8 FFF4                  		dbf	d0,@chkloop
00006C1A                            
00006C1A                            @loc_5B42:
00006C1A 1342 001A                  		move.b	d2,obFrame(a1)
00006C1E 5229 001A                  		addq.b	#1,obFrame(a1)
00006C22 5202                       		addq.b	#1,d2
00006C24 137C 0080 0026             		move.b	#$80,obAngle(a1)
00006C2A 1343 001E                  		move.b	d3,obTimeFrame(a1)
00006C2E 1343 001F                  		move.b	d3,obDelayAni(a1)
00006C32 0643 000A                  		addi.w	#10,d3
00006C36 43E9 0040                  		lea	$40(a1),a1
00006C3A 51C9 FF82                  		dbf	d1,@makeemerald	; repeat 5 times
00006C3E                            
00006C3E                            TCha_Move:	; Routine 2
00006C3E 4A68 003E                  		tst.w	$3E(a0)
00006C42 6700                       		beq.s	locret_5BBA
00006C44 4A28 001E                  		tst.b	obTimeFrame(a0)
00006C48 6700                       		beq.s	loc_5B78
00006C4A 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00006C4E 6600                       		bne.s	loc_5B80
00006C50                            
00006C50                            loc_5B78:
00006C50 3028 003E                  		move.w	$3E(a0),d0
00006C54 D168 0026                  		add.w	d0,obAngle(a0)
00006C58                            
00006C58                            loc_5B80:
00006C58 1028 0026                  		move.b	obAngle(a0),d0
00006C5C 6700                       		beq.s	loc_5B8C
00006C5E 0C00 0080                  		cmpi.b	#$80,d0
00006C62 6600                       		bne.s	loc_5B96
00006C64                            
00006C64                            loc_5B8C:
00006C64 4268 003E                  		clr.w	$3E(a0)
00006C68 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00006C6E                            
00006C6E                            loc_5B96:
00006C6E 4EB9 0000 3CCA             		jsr	(CalcSine).l
00006C74 7800                       		moveq	#0,d4
00006C76 1828 003C                  		move.b	$3C(a0),d4
00006C7A C3C4                       		muls.w	d4,d1
00006C7C E081                       		asr.l	#8,d1
00006C7E C1C4                       		muls.w	d4,d0
00006C80 E080                       		asr.l	#8,d0
00006C82 D268 0038                  		add.w	$38(a0),d1
00006C86 D068 003A                  		add.w	$3A(a0),d0
00006C8A 3141 0008                  		move.w	d1,obX(a0)
00006C8E 3140 000A                  		move.w	d0,obScreenY(a0)
00006C92                            
00006C92                            locret_5BBA:
00006C92 4E75                       		rts	
00006C92 4E75                       		rts	
00006C94                            Map_EEgg:	include	"_maps\Try Again & End Eggman.asm"
00006C94                            ; ---------------------------------------------------------------------------
00006C94                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006C94                            ; ---------------------------------------------------------------------------
00006C94                            Map_EEgg_internal:
00006C94 0000                       		dc.w M_EEgg_Try1-Map_EEgg_internal
00006C96 0000                       		dc.w M_EEgg_Try2-Map_EEgg_internal
00006C98 0000                       		dc.w M_EEgg_Try3-Map_EEgg_internal
00006C9A 0000                       		dc.w M_EEgg_Try4-Map_EEgg_internal
00006C9C 0000                       		dc.w M_EEgg_End1-Map_EEgg_internal
00006C9E 0000                       		dc.w M_EEgg_End2-Map_EEgg_internal
00006CA0 0000                       		dc.w M_EEgg_End3-Map_EEgg_internal
00006CA2 0000                       		dc.w M_EEgg_End4-Map_EEgg_internal
00006CA4 08                         M_EEgg_Try1:	dc.b 8
00006CA5 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006CAA F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006CAF E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006CB4 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006CB9 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006CBE 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006CC3 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006CC8 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006CCD 08                         M_EEgg_Try2:	dc.b 8
00006CCE E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006CD3 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006CD8 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006CDD F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006CE2 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006CE7 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006CEC 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006CF1 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006CF6 08                         M_EEgg_Try3:	dc.b 8
00006CF7 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006CFC F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006D01 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006D06 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006D0B 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006D10 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006D15 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006D1A 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006D1F 08                         M_EEgg_Try4:	dc.b 8
00006D20 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006D25 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006D2A E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006D2F F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006D34 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006D39 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006D3E 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006D43 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006D48 0C                         M_EEgg_End1:	dc.b $C
00006D49 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006D4E F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006D53 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006D58 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006D5D ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006D62 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006D67 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006D6C 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006D71 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006D76 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006D7B 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006D80 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006D85 0A                         M_EEgg_End2:	dc.b $A
00006D86 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006D8B DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006D90 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006D95 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006D9A DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006D9F F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006DA4 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006DA9 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006DAE 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006DB3 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006DB8 0A                         M_EEgg_End3:	dc.b $A
00006DB9 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006DBE E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006DC3 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006DC8 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006DCD E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006DD2 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006DD7 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006DDC 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006DE1 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006DE6 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006DEB 0C                         M_EEgg_End4:	dc.b $C
00006DEC F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006DF1 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006DF6 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006DFB 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006E00 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006E05 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006E0A 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006E0F 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006E14 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006E19 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006E1E 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006E23 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006E28                            		even
00006E28                            		even
00006E28                            
00006E28                            ; ---------------------------------------------------------------------------
00006E28                            ; Ending sequence demos
00006E28                            ; ---------------------------------------------------------------------------
00006E28                            Demo_EndGHZ1:	incbin	"demodata\Ending - GHZ1.bin"
00006E56                            		even
00006E56                            Demo_EndMZ:	incbin	"demodata\Ending - MZ.bin"
00006E96                            		even
00006E96                            Demo_EndSYZ:	incbin	"demodata\Ending - SYZ.bin"
00006EC6                            		even
00006EC6                            Demo_EndLZ:	incbin	"demodata\Ending - LZ.bin"
00006EF6                            		even
00006EF6                            Demo_EndSLZ:	incbin	"demodata\Ending - SLZ.bin"
00006F16                            		even
00006F16                            Demo_EndSBZ1:	incbin	"demodata\Ending - SBZ1.bin"
00006F36                            		even
00006F36                            Demo_EndSBZ2:	incbin	"demodata\Ending - SBZ2.bin"
00006F66                            		even
00006F66                            Demo_EndGHZ2:	incbin	"demodata\Ending - GHZ2.bin"
00006F96                            		even
00006F96                            
00006F96                            		include	"_inc\LevelSizeLoad & BgScrollSpeed (JP1).asm"
00006F96                            ; ---------------------------------------------------------------------------
00006F96                            ; Subroutine to	load level boundaries and start	locations
00006F96                            ; ---------------------------------------------------------------------------
00006F96                            
00006F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F96                            
00006F96                            
00006F96                            LevelSizeLoad:
00006F96 7000                       		moveq	#0,d0
00006F98 11C0 F740                  		move.b	d0,($FFFFF740).w
00006F9C 11C0 F741                  		move.b	d0,($FFFFF741).w
00006FA0 11C0 F746                  		move.b	d0,($FFFFF746).w
00006FA4 11C0 F748                  		move.b	d0,($FFFFF748).w
00006FA8 11C0 F742                  		move.b	d0,(v_dle_routine).w
00006FAC 3038 FE10                  		move.w	(v_zone).w,d0
00006FB0 ED08                       		lsl.b	#6,d0
00006FB2 E848                       		lsr.w	#4,d0
00006FB4 3200                       		move.w	d0,d1
00006FB6 D040                       		add.w	d0,d0
00006FB8 D041                       		add.w	d1,d0
00006FBA 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006FBE 3018                       		move.w	(a0)+,d0
00006FC0 31C0 F730                  		move.w	d0,($FFFFF730).w
00006FC4 2018                       		move.l	(a0)+,d0
00006FC6 21C0 F728                  		move.l	d0,(v_limitleft2).w
00006FCA 21C0 F720                  		move.l	d0,(v_limitleft1).w
00006FCE 2018                       		move.l	(a0)+,d0
00006FD0 21C0 F72C                  		move.l	d0,(v_limittop2).w
00006FD4 21C0 F724                  		move.l	d0,(v_limittop1).w
00006FD8 3038 F728                  		move.w	(v_limitleft2).w,d0
00006FDC 0640 0240                  		addi.w	#$240,d0
00006FE0 31C0 F732                  		move.w	d0,(v_limitleft3).w
00006FE4 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006FEA 3018                       		move.w	(a0)+,d0
00006FEC 31C0 F73E                  		move.w	d0,(v_lookshift).w
00006FF0 31FC 00A0 F7A0             		move.w    #160,(v_camera_pan).w    ; reset the horizontal camera pan value to 160 pixels
00006FF6 6000 0000                  		bra.w	LevSz_ChkLamp
00006FFA                            
00006FFA                            ; ===========================================================================
00006FFA                            ; ---------------------------------------------------------------------------
00006FFA                            ; Level size array
00006FFA                            ; ---------------------------------------------------------------------------
00006FFA                            LevelSizeArray:
00006FFA                            		; GHZ
00006FFA 0004 0000 4470 0000 0400+  		dc.w $0004, $0000, $4470, $0000, $0400, $0060
00007006 0004 0000 2E60 0000 0300+  		dc.w $0004, $0000, $2E60, $0000, $0300, $0060
00007012 0004 0000 2960 0000 0300+  		dc.w $0004, $0000, $2960, $0000, $0300, $0060
0000701E 0004 0000 7EC0 0000 0400+  		dc.w $0004, $0000, $7EC0, $0000, $0400, $0060
0000702A                            		; LZ
0000702A 0004 0000 19AF 0000 0530+  		dc.w $0004, $0000, $19AF, $0000, $0530, $0060
00007036 0004 0000 10AF 0000 0720+  		dc.w $0004, $0000, $10AF, $0000, $0720, $0060
00007042 0004 0000 202F FF00 0800+  		dc.w $0004, $0000, $202F, $FF00, $0800, $0060
0000704E 0004 0000 20BF 0000 0720+  		dc.w $0004, $0000, $20BF, $0000, $0720, $0060
0000705A                            		; MZ
0000705A 0004 0000 21C0 0000 0520+  		dc.w $0004, $0000, $21C0, $0000, $0520, $0060
00007066 0004 0000 2DE0 0000 0520+  		dc.w $0004, $0000, $2DE0, $0000, $0520, $0060
00007072 0004 0000 1800 0000 0720+  		dc.w $0004, $0000, $1800, $0000, $0720, $0060
0000707E 0004 0000 16BF 0000 0720+  		dc.w $0004, $0000, $16BF, $0000, $0720, $0060
0000708A                            		; SLZ
0000708A 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00007096 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
000070A2 0004 0000 2000 0000 0640+  		dc.w $0004, $0000, $2000, $0000, $0640, $0060
000070AE 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
000070BA                            		; SYZ
000070BA 0004 0000 1B00 0000 0520+  		dc.w $0004, $0000, $1B00, $0000, $0520, $0060
000070C6 0004 0000 1B60 0000 0520+  		dc.w $0004, $0000, $1B60, $0000, $0520, $0060
000070D2 0004 0000 2C00 0000 0620+  		dc.w $0004, $0000, $2C00, $0000, $0620, $0060
000070DE 0004 0000 2EC0 0000 0620+  		dc.w $0004, $0000, $2EC0, $0000, $0620, $0060
000070EA                            		; SBZ
000070EA 0004 0000 21C0 0000 0720+  		dc.w $0004, $0000, $21C0, $0000, $0720, $0060
000070F6 0004 0000 1E40 0000 0800+  		dc.w $0004, $0000, $1E40, $0000, $0800, $0060
00007102 0004 2080 2460 0510 0510+  		dc.w $0004, $2080, $2460, $0510, $0510, $0060
0000710E 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
0000711A                            		; Ending
0000711A 0004 0000 0500 0110 0110+  		dc.w $0004, $0000, $0500, $0110, $0110, $0060
00007126 0004 0000 0DC0 0110 0110+  		dc.w $0004, $0000, $0DC0, $0110, $0110, $0060
00007132 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
0000713E 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
0000714A                            
0000714A                            ; ---------------------------------------------------------------------------
0000714A                            ; Ending start location array
0000714A                            ; ---------------------------------------------------------------------------
0000714A                            EndingStLocArray:
0000714A                            		include	"_inc\Start Location Array - Ending.asm"
0000714A                            ; ---------------------------------------------------------------------------
0000714A                            ; Ending start location array
0000714A                            ; ---------------------------------------------------------------------------
0000714A                            
0000714A                            		incbin	"startpos\ghz1 (Credits demo 1).bin"
0000714E                            		incbin	"startpos\mz2 (Credits demo).bin"
00007152                            		incbin	"startpos\syz3 (Credits demo).bin"
00007156                            		incbin	"startpos\lz3 (Credits demo).bin"
0000715A                            		incbin	"startpos\slz3 (Credits demo).bin"
0000715E                            		incbin	"startpos\sbz1 (Credits demo).bin"
00007162                            		incbin	"startpos\sbz2 (Credits demo).bin"
00007166                            		incbin	"startpos\ghz1 (Credits demo 2).bin"
0000716A                            		even
0000716A                            		even
0000716A                            
0000716A                            ; ===========================================================================
0000716A                            
0000716A                            LevSz_ChkLamp:
0000716A 4A38 FE30                  		tst.b	(v_lastlamp).w	; have any lampposts been hit?
0000716E 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00007170                            
00007170 4EB9 0000 0000             		jsr	(Lamp_LoadInfo).l
00007176 3238 D008                  		move.w	(v_player+obX).w,d1
0000717A 3038 D00C                  		move.w	(v_player+obY).w,d0
0000717E 6000                       		bra.s	LevSz_SkipStartPos
00007180                            ; ===========================================================================
00007180                            
00007180                            LevSz_StartLoc:
00007180 3038 FE10                  		move.w	(v_zone).w,d0
00007184 ED08                       		lsl.b	#6,d0
00007186 E848                       		lsr.w	#4,d0
00007188 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
0000718C 4A78 FFF0                  		tst.w	(f_demo).w	; is ending demo mode on?
00007190 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00007192                            
00007192 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00007196 5340                       		subq.w	#1,d0
00007198 E548                       		lsl.w	#2,d0
0000719A 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
0000719E                            
0000719E                            LevSz_SonicPos:
0000719E 7200                       		moveq	#0,d1
000071A0 3219                       		move.w	(a1)+,d1
000071A2 31C1 D008                  		move.w	d1,(v_player+obX).w ; set Sonic's position on x-axis
000071A6 7000                       		moveq	#0,d0
000071A8 3011                       		move.w	(a1),d0
000071AA 31C0 D00C                  		move.w	d0,(v_player+obY).w ; set Sonic's position on y-axis
000071AE                            
000071AE                            SetScreen:
000071AE                            	LevSz_SkipStartPos:
000071AE 4278 F7A8                  		clr.w (v_trackpos).w ; reset Sonic's position tracking index 
000071B2 45F8 CB00                  		lea (v_tracksonic).w,a2 ; load the tracking array into a2 
000071B6 743F                       		moveq #63,d2 ; begin a 64-step loop 
000071B8                            @looppoint: 
000071B8 34C1                       		move.w d1,(a2)+ ; fill in X 
000071BA 34C0                       		move.w d0,(a2)+ ; fill in Y 
000071BC 51CA FFFA                  		dbf d2,@looppoint ; loop	
000071C0 0441 00A0                  		subi.w	#160,d1		; is Sonic more than 160px from left edge?
000071C4 6400                       		bcc.s	SetScr_WithinLeft ; if yes, branch
000071C6 7200                       		moveq	#0,d1
000071C8                            
000071C8                            	SetScr_WithinLeft:
000071C8 3438 F72A                  		move.w	(v_limitright2).w,d2
000071CC B242                       		cmp.w	d2,d1		; is Sonic inside the right edge?
000071CE 6500                       		bcs.s	SetScr_WithinRight ; if yes, branch
000071D0 3202                       		move.w	d2,d1
000071D2                            
000071D2                            	SetScr_WithinRight:
000071D2 31C1 F700                  		move.w	d1,(v_screenposx).w ; set horizontal screen position
000071D6                            
000071D6 0440 0060                  		subi.w	#96,d0		; is Sonic within 96px of upper edge?
000071DA 6400                       		bcc.s	SetScr_WithinTop ; if yes, branch
000071DC 7000                       		moveq	#0,d0
000071DE                            
000071DE                            	SetScr_WithinTop:
000071DE B078 F72E                  		cmp.w	(v_limitbtm2).w,d0 ; is Sonic above the bottom edge?
000071E2 6D00                       		blt.s	SetScr_WithinBottom ; if yes, branch
000071E4 3038 F72E                  		move.w	(v_limitbtm2).w,d0
000071E8                            
000071E8                            	SetScr_WithinBottom:
000071E8 31C0 F704                  		move.w	d0,(v_screenposy).w ; set vertical screen position
000071EC 6100 0000                  		bsr.w	BgScrollSpeed
000071F0 7000                       		moveq	#0,d0
000071F2 1038 FE10                  		move.b	(v_zone).w,d0
000071F6 E508                       		lsl.b	#2,d0
000071F8 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),(v_256loop1).w
000071FE 4E75                       		rts
00007200                            ; ===========================================================================
00007200                            ; ---------------------------------------------------------------------------
00007200                            ; Sonic start location array
00007200                            ; ---------------------------------------------------------------------------
00007200                            StartLocArray:	include	"_inc\Start Location Array - Levels.asm"
00007200                            ; ---------------------------------------------------------------------------
00007200                            ; Sonic start location array
00007200                            ; ---------------------------------------------------------------------------
00007200                            
00007200                            		incbin	"startpos\ghz1.bin"
00007204                            		incbin	"startpos\ghz2.bin"
00007208                            		incbin	"startpos\ghz3.bin"
0000720C 0080 00A8                  		dc.w	$80,$A8
00007210                            
00007210                            		incbin	"startpos\lz1.bin"
00007214                            		incbin	"startpos\lz2.bin"
00007218                            		incbin	"startpos\lz3.bin"
0000721C                            		incbin	"startpos\sbz3.bin"
00007220                            
00007220                            		incbin	"startpos\mz1.bin"
00007224                            		incbin	"startpos\mz2.bin"
00007228                            		incbin	"startpos\mz3.bin"
0000722C 0080 00A8                  		dc.w	$80,$A8
00007230                            
00007230                            		incbin	"startpos\slz1.bin"
00007234                            		incbin	"startpos\slz2.bin"
00007238                            		incbin	"startpos\slz3.bin"
0000723C 0080 00A8                  		dc.w	$80,$A8
00007240                            
00007240                            		incbin	"startpos\syz1.bin"
00007244                            		incbin	"startpos\syz2.bin"
00007248                            		incbin	"startpos\syz3.bin"
0000724C 0080 00A8                  		dc.w	$80,$A8
00007250                            
00007250                            		incbin	"startpos\sbz1.bin"
00007254                            		incbin	"startpos\sbz2.bin"
00007258                            		incbin	"startpos\fz.bin"
0000725C 0080 00A8                  		dc.w	$80,$A8
00007260                            
00007260                            
00007260                            		incbin	"startpos\end1.bin"
00007264                            		incbin	"startpos\end2.bin"
00007268 0080 00A8                  		dc.w	$80,$A8
0000726C 0080 00A8                  		dc.w	$80,$A8
00007270                            
00007270                            		even
00007270                            		even
00007270                            
00007270                            ; ---------------------------------------------------------------------------
00007270                            ; Which	256x256	tiles contain loops or roll-tunnels
00007270                            ; ---------------------------------------------------------------------------
00007270                            
00007270                            LoopTileNums:
00007270                            
00007270                            ; 		loop	loop	tunnel	tunnel
00007270                            
00007270 B5C0 1F20                  	dc.b	$B5,	$C0,	$1F,	$20	; Green Hill
00007274 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Labyrinth
00007278 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Marble
0000727C AAB4 7F7F                  	dc.b	$AA,	$B4,	$7F,	$7F	; Star Light
00007280 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Spring Yard
00007284 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Scrap Brain
00007288 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Ending (Green Hill)
0000728C                            
0000728C                            		even
0000728C                            
0000728C                            ; ---------------------------------------------------------------------------
0000728C                            ; Subroutine to	set scroll speed of some backgrounds
0000728C                            ; ---------------------------------------------------------------------------
0000728C                            
0000728C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000728C                            
0000728C                            
0000728C                            BgScrollSpeed:
0000728C 4A38 FE30                  		tst.b	(v_lastlamp).w
00007290 6600                       		bne.s	loc_6206
00007292 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007296 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
0000729A 31C1 F708                  		move.w	d1,(v_bgscreenposx).w
0000729E 31C1 F710                  		move.w	d1,(v_bg2screenposx).w
000072A2 31C1 F718                  		move.w	d1,(v_bg3screenposx).w
000072A6                            
000072A6                            loc_6206:
000072A6 7400                       		moveq	#0,d2
000072A8 1438 FE10                  		move.b	(v_zone).w,d2
000072AC D442                       		add.w	d2,d2
000072AE 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000072B2 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000072B6                            ; End of function BgScrollSpeed
000072B6                            
000072B6                            ; ===========================================================================
000072B6 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000072BA 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000072BE 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000072C2 0000                       		dc.w BgScroll_End-BgScroll_Index
000072C4                            ; ===========================================================================
000072C4                            
000072C4                            BgScroll_GHZ:
000072C4 42B8 F708                  		clr.l	(v_bgscreenposx).w
000072C8 42B8 F70C                  		clr.l	(v_bgscreenposy).w
000072CC 42B8 F714                  		clr.l	(v_bg2screenposy).w
000072D0 42B8 F71C                  		clr.l	(v_bg3screenposy).w
000072D4 45F8 A800                  		lea	($FFFFA800).w,a2
000072D8 429A                       		clr.l	(a2)+
000072DA 429A                       		clr.l	(a2)+
000072DC 429A                       		clr.l	(a2)+
000072DE 4E75                       		rts
000072E0                            ; ===========================================================================
000072E0                            
000072E0                            BgScroll_LZ:
000072E0 E280                       		asr.l	#1,d0
000072E2 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000072E6 4E75                       		rts	
000072E8                            ; ===========================================================================
000072E8                            
000072E8                            BgScroll_MZ:
000072E8 4E75                       		rts	
000072EA                            ; ===========================================================================
000072EA                            
000072EA                            BgScroll_SLZ:
000072EA E280                       		asr.l	#1,d0
000072EC 0640 00C0                  		addi.w	#$C0,d0
000072F0 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000072F4 42B8 F708                  		clr.l	(v_bgscreenposx).w
000072F8 4E75                       		rts	
000072FA                            ; ===========================================================================
000072FA                            
000072FA                            BgScroll_SYZ:
000072FA E980                       		asl.l	#4,d0
000072FC 2400                       		move.l	d0,d2
000072FE E380                       		asl.l	#1,d0
00007300 D082                       		add.l	d2,d0
00007302 E080                       		asr.l	#8,d0
00007304 5240                       		addq.w	#1,d0
00007306 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
0000730A 42B8 F708                  		clr.l	(v_bgscreenposx).w
0000730E 4E75                       		rts	
00007310                            ; ===========================================================================
00007310                            
00007310                            BgScroll_SBZ:
00007310 0240 07F8                  		andi.w	#$7F8,d0
00007314 E640                       		asr.w	#3,d0
00007316 5240                       		addq.w	#1,d0
00007318 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
0000731C 4E75                       		rts	
0000731E                            ; ===========================================================================
0000731E                            
0000731E                            BgScroll_End:
0000731E 3038 F700                  		move.w	(v_screenposx).w,d0
00007322 E240                       		asr.w	#1,d0
00007324 31C0 F708                  		move.w	d0,(v_bgscreenposx).w
00007328 31C0 F710                  		move.w	d0,(v_bg2screenposx).w
0000732C E440                       		asr.w	#2,d0
0000732E 3200                       		move.w	d0,d1
00007330 D040                       		add.w	d0,d0
00007332 D041                       		add.w	d1,d0
00007334 31C0 F718                  		move.w	d0,(v_bg3screenposx).w
00007338 42B8 F70C                  		clr.l	(v_bgscreenposy).w
0000733C 42B8 F714                  		clr.l	(v_bg2screenposy).w
00007340 42B8 F71C                  		clr.l	(v_bg3screenposy).w
00007344 45F8 A800                  		lea	($FFFFA800).w,a2
00007348 429A                       		clr.l	(a2)+
0000734A 429A                       		clr.l	(a2)+
0000734C 429A                       		clr.l	(a2)+
0000734E 4E75                       		rts
0000734E 4E75                       		rts
00007350                            		include	"_inc\DeformLayers (JP1).asm"
00007350                            ; ---------------------------------------------------------------------------
00007350                            ; Background layer deformation subroutines
00007350                            ; ---------------------------------------------------------------------------
00007350                            
00007350                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007350                            
00007350                            
00007350                            DeformLayers:
00007350 4A38 F744                  		tst.b	(f_nobgscroll).w
00007354 6700                       		beq.s	@bgscroll
00007356 4E75                       		rts	
00007358                            ; ===========================================================================
00007358                            
00007358                            	@bgscroll:
00007358 4278 F754                  		clr.w	(v_fg_scroll_flags).w
0000735C 4278 F756                  		clr.w	(v_bg1_scroll_flags).w
00007360 4278 F758                  		clr.w	(v_bg2_scroll_flags).w
00007364 4278 F75A                  		clr.w	(v_bg3_scroll_flags).w
00007368 6100 0000                  		bsr.w	ScrollHoriz
0000736C 6100 0000                  		bsr.w	ScrollVertical
00007370 6100 0000                  		bsr.w	DynamicLevelEvents
00007374 31F8 F704 F616             		move.w	(v_screenposy).w,(v_scrposy_dup).w
0000737A 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007380 7000                       		moveq	#0,d0
00007382 1038 FE10                  		move.b	(v_zone).w,d0
00007386 D040                       		add.w	d0,d0
00007388 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
0000738C 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00007390                            ; End of function DeformLayers
00007390                            
00007390                            ; ===========================================================================
00007390                            ; ---------------------------------------------------------------------------
00007390                            ; Offset index for background layer deformation	code
00007390                            ; ---------------------------------------------------------------------------
00007390 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00007394 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00007398 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
0000739C 0000                       		dc.w Deform_GHZ-Deform_Index
0000739E                            ; ---------------------------------------------------------------------------
0000739E                            ; Green	Hill Zone background layer deformation code
0000739E                            ; ---------------------------------------------------------------------------
0000739E                            
0000739E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000739E                            
0000739E                            
0000739E                            Deform_GHZ:
0000739E                            	;cmpi.b    #id_Title,(v_gamemode).w
0000739E                            	;beq.w    Deform_Title
0000739E                            
0000739E                            ;Deform_GHZ_Stage:
0000739E                            	; block 3 - distant mountains
0000739E 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000073A2 48C4                       		ext.l	d4
000073A4 EB84                       		asl.l	#5,d4
000073A6 2204                       		move.l	d4,d1
000073A8 E384                       		asl.l	#1,d4
000073AA D881                       		add.l	d1,d4
000073AC 7C00                       		moveq	#0,d6
000073AE 6100 0000                  		bsr.w	BGScroll_Block3
000073B2                            	; block 2 - hills & waterfalls
000073B2 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000073B6 48C4                       		ext.l	d4
000073B8 EF84                       		asl.l	#7,d4
000073BA 7C00                       		moveq	#0,d6
000073BC 6100 0000                  		bsr.w	BGScroll_Block2
000073C0                            	; calculate Y position
000073C0 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000073C4 3038 F704                  		move.w	(v_screenposy).w,d0
000073C8 0240 07FF                  		andi.w	#$7FF,d0
000073CC EA48                       		lsr.w	#5,d0
000073CE 4440                       		neg.w	d0
000073D0 0640 0020                  		addi.w	#$20,d0
000073D4 6A00                       		bpl.s	@limitY
000073D6 7000                       		moveq	#0,d0
000073D8                            	@limitY:
000073D8 3800                       		move.w	d0,d4
000073DA 31C0 F618                  		move.w	d0,(v_bgscrposy_dup).w
000073DE 3038 F700                  		move.w	(v_screenposx).w,d0
000073E2 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
000073E8 6600                       		bne.s	@notTitle
000073EA 7000                       		moveq	#0,d0	; reset foreground position in title screen
000073EC                            	@notTitle:
000073EC 4440                       		neg.w	d0
000073EE 4840                       		swap	d0
000073F0                            	; auto-scroll clouds
000073F0 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
000073F4 069A 0001 0000             		addi.l	#$10000,(a2)+
000073FA 069A 0000 C000             		addi.l	#$C000,(a2)+
00007400 069A 0000 8000             		addi.l	#$8000,(a2)+
00007406                            	; calculate background scroll	
00007406 3038 A800                  		move.w	(v_bgscroll_buffer).w,d0
0000740A D078 F718                  		add.w	(v_bg3screenposx).w,d0
0000740E 4440                       		neg.w	d0
00007410 323C 001F                  		move.w	#$1F,d1
00007414 9244                       		sub.w	d4,d1
00007416 6500                       		bcs.s	@gotoCloud2
00007418                            	@cloudLoop1:		; upper cloud (32px)
00007418 22C0                       		move.l	d0,(a1)+
0000741A 51C9 FFFC                  		dbf	d1,@cloudLoop1
0000741E                            
0000741E                            	@gotoCloud2:
0000741E 3038 A804                  		move.w	(v_bgscroll_buffer+4).w,d0
00007422 D078 F718                  		add.w	(v_bg3screenposx).w,d0
00007426 4440                       		neg.w	d0
00007428 323C 000F                  		move.w	#$F,d1
0000742C                            	@cloudLoop2:		; middle cloud (16px)
0000742C 22C0                       		move.l	d0,(a1)+
0000742E 51C9 FFFC                  		dbf	d1,@cloudLoop2
00007432                            
00007432 3038 A808                  		move.w	(v_bgscroll_buffer+8).w,d0
00007436 D078 F718                  		add.w	(v_bg3screenposx).w,d0
0000743A 4440                       		neg.w	d0
0000743C 323C 000F                  		move.w	#$F,d1
00007440                            	@cloudLoop3:		; lower cloud (16px)
00007440 22C0                       		move.l	d0,(a1)+
00007442 51C9 FFFC                  		dbf	d1,@cloudLoop3
00007446                            
00007446 323C 002F                  		move.w	#$2F,d1
0000744A 3038 F718                  		move.w	(v_bg3screenposx).w,d0
0000744E 4440                       		neg.w	d0
00007450                            	@mountainLoop:		; distant mountains (48px)
00007450 22C0                       		move.l	d0,(a1)+
00007452 51C9 FFFC                  		dbf	d1,@mountainLoop
00007456                            
00007456 323C 0027                  		move.w	#$27,d1
0000745A 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000745E 4440                       		neg.w	d0
00007460                            	@hillLoop:			; hills & waterfalls (40px)
00007460 22C0                       		move.l	d0,(a1)+
00007462 51C9 FFFC                  		dbf	d1,@hillLoop
00007466                            
00007466 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000746A 3438 F700                  		move.w	(v_screenposx).w,d2
0000746E 9440                       		sub.w	d0,d2
00007470 48C2                       		ext.l	d2
00007472 E182                       		asl.l	#8,d2
00007474 85FC 0068                  		divs.w	#$68,d2
00007478 48C2                       		ext.l	d2
0000747A E182                       		asl.l	#8,d2
0000747C 7600                       		moveq	#0,d3
0000747E 3600                       		move.w	d0,d3
00007480 323C 0047                  		move.w	#$47,d1
00007484 D244                       		add.w	d4,d1
00007486                            	@waterLoop:			; water deformation
00007486 3003                       		move.w	d3,d0
00007488 4440                       		neg.w	d0
0000748A 22C0                       		move.l	d0,(a1)+
0000748C 4843                       		swap	d3
0000748E D682                       		add.l	d2,d3
00007490 4843                       		swap	d3
00007492 51C9 FFF2                  		dbf	d1,@waterLoop
00007496 4E75                       		rts
00007498                            ; End of function Deform_GHZ
00007498                            
00007498                            Deform_Title:
00007498 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000749C 48C4                       		ext.l	d4
0000749E EB84                       		asl.l	#5,d4
000074A0 2204                       		move.l	d4,d1
000074A2 E384                       		asl.l	#1,d4
000074A4 D881                       		add.l	d1,d4
000074A6 7A00                       		moveq	#0,d5
000074A8 6100 0000                  		bsr.w	BGScroll_Block1
000074AC 6100 0000                  		bsr.w	BGScroll_Block3
000074B0 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000074B4 3038 F704                  		move.w	(v_screenposy).w,d0
000074B8 0240 07FF                  		andi.w	#$7FF,d0
000074BC EA48                       		lsr.w	#5,d0
000074BE 4440                       		neg.w	d0
000074C0 0640 0026                  		addi.w	#$26,d0
000074C4 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
000074C8 3800                       		move.w	d0,d4
000074CA 6100 0000                  		bsr.w	BGScroll_Block3
000074CE 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000074D4 323C 006F                  		move.w	#$6F,d1
000074D8 9244                       		sub.w	d4,d1
000074DA 3038 F700                  		move.w	(v_screenposx).w,d0
000074DE 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
000074E4 6600                       		bne.s	loc_633C
000074E6 7000                       		moveq	#0,d0
000074E8                            
000074E8                            loc_633C:
000074E8 4440                       		neg.w	d0
000074EA 4840                       		swap	d0
000074EC 3038 F708                  		move.w	(v_bgscreenposx).w,d0
000074F0 4440                       		neg.w	d0
000074F2                            
000074F2                            loc_6346:
000074F2 22C0                       		move.l	d0,(a1)+
000074F4 51C9 FFFC                  		dbf	d1,loc_6346
000074F8 323C 0027                  		move.w	#$27,d1
000074FC 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007500 4440                       		neg.w	d0
00007502                            
00007502                            loc_6356:
00007502 22C0                       		move.l	d0,(a1)+
00007504 51C9 FFFC                  		dbf	d1,loc_6356
00007508 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000750C 0640 0000                  		addi.w	#0,d0
00007510 3438 F700                  		move.w	(v_screenposx).w,d2
00007514 0642 FE00                  		addi.w	#-$200,d2
00007518 9440                       		sub.w	d0,d2
0000751A 48C2                       		ext.l	d2
0000751C E182                       		asl.l	#8,d2
0000751E 85FC 0068                  		divs.w	#$68,d2
00007522 48C2                       		ext.l	d2
00007524 E182                       		asl.l	#8,d2
00007526 7600                       		moveq	#0,d3
00007528 3600                       		move.w	d0,d3
0000752A 323C 0047                  		move.w	#$47,d1
0000752E D244                       		add.w	d4,d1
00007530                            
00007530                            loc_6384:
00007530 3003                       		move.w	d3,d0
00007532 4440                       		neg.w	d0
00007534 22C0                       		move.l	d0,(a1)+
00007536 4843                       		swap	d3
00007538 D682                       		add.l	d2,d3
0000753A 4843                       		swap	d3
0000753C 51C9 FFF2                  		dbf	d1,loc_6384
00007540 4E75                       		rts	
00007542                            
00007542                            ; ===========================================================================
00007542                            ; ---------------------------------------------------------------------------
00007542                            ; Labyrinth Zone background layer deformation code
00007542                            ; ---------------------------------------------------------------------------
00007542                            
00007542                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007542                            
00007542                            
00007542                            Deform_LZ:
00007542                            	; plain background scroll
00007542 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007546 48C4                       		ext.l	d4
00007548 EF84                       		asl.l	#7,d4
0000754A 3A38 F73C                  		move.w	(v_scrshifty).w,d5
0000754E 48C5                       		ext.l	d5
00007550 EF85                       		asl.l	#7,d5
00007552 6100 0000                  		bsr.w	BGScroll_XY
00007556                            
00007556 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000755C 47F9 0000 0000             		lea	(Lz_Scroll_Data).l,a3
00007562 45F9 0000 0000             		lea	(Drown_WobbleData).l,a2
00007568 1438 F7D8                  		move.b	(v_lz_deform).w,d2
0000756C 1602                       		move.b	d2,d3
0000756E 0678 0080 F7D8             		addi.w	#$80,(v_lz_deform).w
00007574                            
00007574 D478 F70C                  		add.w	(v_bgscreenposy).w,d2
00007578 0242 00FF                  		andi.w	#$FF,d2
0000757C D678 F704                  		add.w	(v_screenposy).w,d3
00007580 0243 00FF                  		andi.w	#$FF,d3
00007584 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007588 323C 00DF                  		move.w	#$DF,d1
0000758C 3038 F700                  		move.w	(v_screenposx).w,d0
00007590 4440                       		neg.w	d0
00007592 3C00                       		move.w	d0,d6
00007594 4840                       		swap	d0
00007596 3038 F708                  		move.w	(v_bgscreenposx).w,d0
0000759A 4440                       		neg.w	d0
0000759C 3838 F646                  		move.w	(v_waterpos1).w,d4
000075A0 3A38 F704                  		move.w	(v_screenposy).w,d5
000075A4                            	; write normal scroll before meeting water position
000075A4                            	@normalLoop:		
000075A4 BA44                       		cmp.w	d4,d5	; is current y >= water y?
000075A6 6C00                       		bge.s	@underwaterLoop	; if yes, branch
000075A8 22C0                       		move.l	d0,(a1)+
000075AA 5245                       		addq.w	#1,d5
000075AC 5202                       		addq.b	#1,d2
000075AE 5203                       		addq.b	#1,d3
000075B0 51C9 FFF2                  		dbf	d1,@normalLoop
000075B4 4E75                       		rts
000075B6                            	; apply water deformation when underwater
000075B6                            	@underwaterLoop:
000075B6 1833 3000                  		move.b	(a3,d3),d4
000075BA 4884                       		ext.w	d4
000075BC D846                       		add.w	d6,d4
000075BE 32C4                       		move.w	d4,(a1)+
000075C0 1832 2000                  		move.b	(a2,d2),d4
000075C4 4884                       		ext.w	d4
000075C6 D840                       		add.w	d0,d4
000075C8 32C4                       		move.w	d4,(a1)+
000075CA 5202                       		addq.b	#1,d2
000075CC 5203                       		addq.b	#1,d3
000075CE 51C9 FFE6                  		dbf	d1,@underwaterLoop
000075D2 4E75                       		rts
000075D4                            
000075D4                            Lz_Scroll_Data:
000075D4 0101 0202 0303 0303 0202+  		dc.b $01,$01,$02,$02,$03,$03,$03,$03,$02,$02,$01,$01,$00,$00,$00,$00
000075E4 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000075F4 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007604 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007614 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007624 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007634 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007644 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007654 FFFF FEFE FDFD FDFD FEFE+  		dc.b $FF,$FF,$FE,$FE,$FD,$FD,$FD,$FD,$FE,$FE,$FF,$FF,$00,$00,$00,$00
00007664 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007674 0101 0202 0303 0303 0202+  		dc.b $01,$01,$02,$02,$03,$03,$03,$03,$02,$02,$01,$01,$00,$00,$00,$00
00007684 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007694 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000076A4 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000076B4 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000076C4 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000076D4                            ; End of function Deform_LZ
000076D4                            
000076D4                            ; ---------------------------------------------------------------------------
000076D4                            ; Marble Zone background layer deformation code
000076D4                            ; ---------------------------------------------------------------------------
000076D4                            
000076D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076D4                            
000076D4                            
000076D4                            Deform_MZ:
000076D4                            	; block 1 - dungeon interior
000076D4 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000076D8 48C4                       		ext.l	d4
000076DA ED84                       		asl.l	#6,d4
000076DC 2204                       		move.l	d4,d1
000076DE E384                       		asl.l	#1,d4
000076E0 D881                       		add.l	d1,d4
000076E2 7C02                       		moveq	#2,d6
000076E4 6100 0000                  		bsr.w	BGScroll_Block1
000076E8                            	; block 3 - mountains
000076E8 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000076EC 48C4                       		ext.l	d4
000076EE ED84                       		asl.l	#6,d4
000076F0 7C06                       		moveq	#6,d6
000076F2 6100 0000                  		bsr.w	BGScroll_Block3
000076F6                            	; block 2 - bushes & antique buildings
000076F6 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000076FA 48C4                       		ext.l	d4
000076FC EF84                       		asl.l	#7,d4
000076FE 7C04                       		moveq	#4,d6
00007700 6100 0000                  		bsr.w	BGScroll_Block2
00007704                            	; calculate y-position of background
00007704 303C 0200                  		move.w	#$200,d0	; start with 512px, ignoring 2 chunks
00007708 3238 F704                  		move.w	(v_screenposy).w,d1
0000770C 0441 01C8                  		subi.w	#$1C8,d1	; 0% scrolling when y <= 56px 
00007710 6500                       		bcs.s	@noYscroll
00007712 3401                       		move.w	d1,d2
00007714 D241                       		add.w	d1,d1
00007716 D242                       		add.w	d2,d1
00007718 E441                       		asr.w	#2,d1
0000771A D041                       		add.w	d1,d0
0000771C                            	@noYscroll:
0000771C 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007720 31C0 F71C                  		move.w	d0,(v_bg3screenposy).w
00007724 6100 0000                  		bsr.w	BGScroll_YAbsolute
00007728 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000772E                            	; do something with redraw flags
0000772E 1038 F756                  		move.b	(v_bg1_scroll_flags).w,d0
00007732 8038 F758                  		or.b	(v_bg2_scroll_flags).w,d0
00007736 8138 F75A                  		or.b	d0,(v_bg3_scroll_flags).w
0000773A 4238 F756                  		clr.b	(v_bg1_scroll_flags).w
0000773E 4238 F758                  		clr.b	(v_bg2_scroll_flags).w
00007742                            	; calculate background scroll buffer
00007742 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007746 3438 F700                  		move.w	(v_screenposx).w,d2
0000774A 4442                       		neg.w	d2
0000774C 3002                       		move.w	d2,d0
0000774E E440                       		asr.w	#2,d0
00007750 9042                       		sub.w	d2,d0
00007752 48C0                       		ext.l	d0
00007754 E780                       		asl.l	#3,d0
00007756 81FC 0005                  		divs.w	#5,d0
0000775A 48C0                       		ext.l	d0
0000775C E980                       		asl.l	#4,d0
0000775E E180                       		asl.l	#8,d0
00007760 7600                       		moveq	#0,d3
00007762 3602                       		move.w	d2,d3
00007764 E243                       		asr.w	#1,d3
00007766 323C 0004                  		move.w	#4,d1
0000776A                            	@cloudLoop:		
0000776A 32C3                       		move.w	d3,(a1)+
0000776C 4843                       		swap	d3
0000776E D680                       		add.l	d0,d3
00007770 4843                       		swap	d3
00007772 51C9 FFF6                  		dbf	d1,@cloudLoop
00007776                            
00007776 3038 F718                  		move.w	(v_bg3screenposx).w,d0
0000777A 4440                       		neg.w	d0
0000777C 323C 0001                  		move.w	#1,d1
00007780                            	@mountainLoop:		
00007780 32C0                       		move.w	d0,(a1)+
00007782 51C9 FFFC                  		dbf	d1,@mountainLoop
00007786                            
00007786 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000778A 4440                       		neg.w	d0
0000778C 323C 0008                  		move.w	#8,d1
00007790                            	@bushLoop:		
00007790 32C0                       		move.w	d0,(a1)+
00007792 51C9 FFFC                  		dbf	d1,@bushLoop
00007796                            
00007796 3038 F708                  		move.w	(v_bgscreenposx).w,d0
0000779A 4440                       		neg.w	d0
0000779C 323C 000F                  		move.w	#$F,d1
000077A0                            	@interiorLoop:		
000077A0 32C0                       		move.w	d0,(a1)+
000077A2 51C9 FFFC                  		dbf	d1,@interiorLoop
000077A6                            
000077A6 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
000077AA 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
000077AE 0440 0200                  		subi.w	#$200,d0	; subtract 512px (unused 2 chunks)
000077B2 3400                       		move.w	d0,d2
000077B4 0C40 0100                  		cmpi.w	#$100,d0
000077B8 6500                       		bcs.s	@limitY
000077BA 303C 0100                  		move.w	#$100,d0
000077BE                            	@limitY:
000077BE 0240 01F0                  		andi.w	#$1F0,d0
000077C2 E648                       		lsr.w	#3,d0
000077C4 45F2 0000                  		lea	(a2,d0),a2
000077C8 6000 0000                  		bra.w	Bg_Scroll_X
000077CC                            ; End of function Deform_MZ
000077CC                            
000077CC                            ; ---------------------------------------------------------------------------
000077CC                            ; Star Light Zone background layer deformation code
000077CC                            ; ---------------------------------------------------------------------------
000077CC                            
000077CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000077CC                            
000077CC                            
000077CC                            Deform_SLZ:
000077CC                            	; vertical scrolling
000077CC 3A38 F73C                  		move.w	(v_scrshifty).w,d5
000077D0 48C5                       		ext.l	d5
000077D2 EF85                       		asl.l	#7,d5
000077D4 6100 0000                  		bsr.w	Bg_Scroll_Y
000077D8 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000077DE                            	; calculate background scroll buffer
000077DE 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
000077E2 3438 F700                  		move.w	(v_screenposx).w,d2
000077E6 4442                       		neg.w	d2
000077E8 3002                       		move.w	d2,d0
000077EA E640                       		asr.w	#3,d0
000077EC 9042                       		sub.w	d2,d0
000077EE 48C0                       		ext.l	d0
000077F0 E980                       		asl.l	#4,d0
000077F2 81FC 001C                  		divs.w	#$1C,d0
000077F6 48C0                       		ext.l	d0
000077F8 E980                       		asl.l	#4,d0
000077FA E180                       		asl.l	#8,d0
000077FC 7600                       		moveq	#0,d3
000077FE 3602                       		move.w	d2,d3
00007800 323C 001B                  		move.w	#$1B,d1
00007804                            	@starLoop:		
00007804 32C3                       		move.w	d3,(a1)+
00007806 4843                       		swap	d3
00007808 D680                       		add.l	d0,d3
0000780A 4843                       		swap	d3
0000780C 51C9 FFF6                  		dbf	d1,@starLoop
00007810                            
00007810 3002                       		move.w	d2,d0
00007812 E640                       		asr.w	#3,d0
00007814 3200                       		move.w	d0,d1
00007816 E241                       		asr.w	#1,d1
00007818 D041                       		add.w	d1,d0
0000781A 323C 0004                  		move.w	#4,d1
0000781E                            	@buildingLoop1:		; distant black buildings
0000781E 32C0                       		move.w	d0,(a1)+
00007820 51C9 FFFC                  		dbf	d1,@buildingLoop1
00007824                            
00007824 3002                       		move.w	d2,d0
00007826 E440                       		asr.w	#2,d0
00007828 323C 0004                  		move.w	#4,d1
0000782C                            	@buildingLoop2:		; closer buildings
0000782C 32C0                       		move.w	d0,(a1)+
0000782E 51C9 FFFC                  		dbf	d1,@buildingLoop2
00007832                            
00007832 3002                       		move.w	d2,d0
00007834 E240                       		asr.w	#1,d0
00007836 323C 001D                  		move.w	#$1D,d1
0000783A                            	@bottomLoop:		; bottom part of background
0000783A 32C0                       		move.w	d0,(a1)+
0000783C 51C9 FFFC                  		dbf	d1,@bottomLoop
00007840                            
00007840 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007844 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007848 3400                       		move.w	d0,d2
0000784A 0440 00C0                  		subi.w	#$C0,d0
0000784E 0240 03F0                  		andi.w	#$3F0,d0
00007852 E648                       		lsr.w	#3,d0
00007854 45F2 0000                  		lea	(a2,d0),a2
00007858                            ;-------------------------------------------------------------------------------
00007858                            ;-------------------------------------------------------------------------------
00007858                            Bg_Scroll_X:
00007858 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
0000785C 323C 000E                  		move.w	#$E,d1
00007860 3038 F700                  		move.w	(v_screenposx).w,d0
00007864 4440                       		neg.w	d0
00007866 4840                       		swap	d0
00007868 0242 000F                  		andi.w	#$F,d2
0000786C D442                       		add.w	d2,d2
0000786E 301A                       		move.w	(a2)+,d0
00007870 4EFB 2000                  		jmp	@pixelJump(pc,d2.w)		; skip pixels for first row
00007874                            	@blockLoop:
00007874 301A                       		move.w	(a2)+,d0
00007876                            	@pixelJump:		
00007876 22C0                       		move.l	d0,(a1)+
00007878 22C0                       		move.l	d0,(a1)+
0000787A 22C0                       		move.l	d0,(a1)+
0000787C 22C0                       		move.l	d0,(a1)+
0000787E 22C0                       		move.l	d0,(a1)+
00007880 22C0                       		move.l	d0,(a1)+
00007882 22C0                       		move.l	d0,(a1)+
00007884 22C0                       		move.l	d0,(a1)+
00007886 22C0                       		move.l	d0,(a1)+
00007888 22C0                       		move.l	d0,(a1)+
0000788A 22C0                       		move.l	d0,(a1)+
0000788C 22C0                       		move.l	d0,(a1)+
0000788E 22C0                       		move.l	d0,(a1)+
00007890 22C0                       		move.l	d0,(a1)+
00007892 22C0                       		move.l	d0,(a1)+
00007894 22C0                       		move.l	d0,(a1)+
00007896 51C9 FFDC                  		dbf	d1,@blockLoop
0000789A 4E75                       		rts
0000789C                            
0000789C                            ; ---------------------------------------------------------------------------
0000789C                            ; Spring Yard Zone background layer deformation	code
0000789C                            ; ---------------------------------------------------------------------------
0000789C                            
0000789C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000789C                            
0000789C                            
0000789C                            Deform_SYZ:
0000789C                            	; vertical scrolling
0000789C 3A38 F73C                  		move.w	(v_scrshifty).w,d5
000078A0 48C5                       		ext.l	d5
000078A2 E985                       		asl.l	#4,d5
000078A4 2205                       		move.l	d5,d1
000078A6 E385                       		asl.l	#1,d5
000078A8 DA81                       		add.l	d1,d5
000078AA 6100 0000                  		bsr.w	Bg_Scroll_Y
000078AE 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000078B4                            	; calculate background scroll buffer
000078B4 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
000078B8 3438 F700                  		move.w	(v_screenposx).w,d2
000078BC 4442                       		neg.w	d2
000078BE 3002                       		move.w	d2,d0
000078C0 E640                       		asr.w	#3,d0
000078C2 9042                       		sub.w	d2,d0
000078C4 48C0                       		ext.l	d0
000078C6 E780                       		asl.l	#3,d0
000078C8 81FC 0008                  		divs.w	#8,d0
000078CC 48C0                       		ext.l	d0
000078CE E980                       		asl.l	#4,d0
000078D0 E180                       		asl.l	#8,d0
000078D2 7600                       		moveq	#0,d3
000078D4 3602                       		move.w	d2,d3
000078D6 E243                       		asr.w	#1,d3
000078D8 323C 0007                  		move.w	#7,d1
000078DC                            	@cloudLoop:		
000078DC 32C3                       		move.w	d3,(a1)+
000078DE 4843                       		swap	d3
000078E0 D680                       		add.l	d0,d3
000078E2 4843                       		swap	d3
000078E4 51C9 FFF6                  		dbf	d1,@cloudLoop
000078E8                            
000078E8 3002                       		move.w	d2,d0
000078EA E640                       		asr.w	#3,d0
000078EC 323C 0004                  		move.w	#4,d1
000078F0                            	@mountainLoop:		
000078F0 32C0                       		move.w	d0,(a1)+
000078F2 51C9 FFFC                  		dbf	d1,@mountainLoop
000078F6                            
000078F6 3002                       		move.w	d2,d0
000078F8 E440                       		asr.w	#2,d0
000078FA 323C 0005                  		move.w	#5,d1
000078FE                            	@buildingLoop:		
000078FE 32C0                       		move.w	d0,(a1)+
00007900 51C9 FFFC                  		dbf	d1,@buildingLoop
00007904                            
00007904 3002                       		move.w	d2,d0
00007906 3202                       		move.w	d2,d1
00007908 E241                       		asr.w	#1,d1
0000790A 9041                       		sub.w	d1,d0
0000790C 48C0                       		ext.l	d0
0000790E E980                       		asl.l	#4,d0
00007910 81FC 000E                  		divs.w	#$E,d0
00007914 48C0                       		ext.l	d0
00007916 E980                       		asl.l	#4,d0
00007918 E180                       		asl.l	#8,d0
0000791A 7600                       		moveq	#0,d3
0000791C 3602                       		move.w	d2,d3
0000791E E243                       		asr.w	#1,d3
00007920 323C 000D                  		move.w	#$D,d1
00007924                            	@bushLoop:		
00007924 32C3                       		move.w	d3,(a1)+
00007926 4843                       		swap	d3
00007928 D680                       		add.l	d0,d3
0000792A 4843                       		swap	d3
0000792C 51C9 FFF6                  		dbf	d1,@bushLoop
00007930                            
00007930 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007934 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007938 3400                       		move.w	d0,d2
0000793A 0240 01F0                  		andi.w	#$1F0,d0
0000793E E648                       		lsr.w	#3,d0
00007940 45F2 0000                  		lea	(a2,d0),a2
00007944 6000 FF12                  		bra.w	Bg_Scroll_X
00007948                            ; End of function Deform_SYZ
00007948                            
00007948                            ; ---------------------------------------------------------------------------
00007948                            ; Scrap	Brain Zone background layer deformation	code
00007948                            ; ---------------------------------------------------------------------------
00007948                            
00007948                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007948                            
00007948                            
00007948                            Deform_SBZ:
00007948 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000794C 48C4                       		ext.l	d4
0000794E ED84                       		asl.l	#6,d4
00007950 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007954 48C5                       		ext.l	d5
00007956 E985                       		asl.l	#4,d5
00007958 E385                       		asl.l	#1,d5
0000795A 6100 0000                  		bsr.w	BGScroll_XY
0000795E 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007964 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007968 323C 00DF                  		move.w	#223,d1
0000796C 3038 F700                  		move.w	(v_screenposx).w,d0
00007970 4440                       		neg.w	d0
00007972 4840                       		swap	d0
00007974 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007978 4440                       		neg.w	d0
0000797A                            
0000797A                            loc_6576:
0000797A 22C0                       		move.l	d0,(a1)+
0000797C 51C9 FFFC                  		dbf	d1,loc_6576
00007980 4E75                       		rts	
00007982                            ;-------------------------------------------------------------------------------
00007982                            Deform_SBZ2:;loc_68A2:
00007982 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007986 48C4                       		ext.l	d4
00007988 ED84                       		asl.l	#6,d4
0000798A 3A38 F73C                  		move.w	(v_scrshifty).w,d5
0000798E 48C5                       		ext.l	d5
00007990 E985                       		asl.l	#4,d5
00007992 E385                       		asl.l	#1,d5
00007994 6100 0000                  		bsr.w	BGScroll_XY
00007998 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000799E 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000079A2 323C 00DF                  		move.w	#223,d1
000079A6 3038 F700                  		move.w	(v_screenposx).w,d0
000079AA 4440                       		neg.w	d0
000079AC 4840                       		swap	d0
000079AE 3038 F708                  		move.w	(v_bgscreenposx).w,d0
000079B2 4440                       		neg.w	d0
000079B4                            
000079B4                            loc_6577:
000079B4 22C0                       		move.l	d0,(a1)+
000079B6 51C9 FFFC                  		dbf	d1,loc_6577
000079BA 4E75                       		rts	
000079BC                            
000079BC                            ; ---------------------------------------------------------------------------
000079BC                            ; Subroutine to	scroll the level horizontally as Sonic moves
000079BC                            ; ---------------------------------------------------------------------------
000079BC                            
000079BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079BC                            
000079BC                            
000079BC                            ScrollHoriz:
000079BC 3838 F700                  		move.w	(v_screenposx).w,d4 ; save old screen position
000079C0 6100                       		bsr.s	MoveScreenHoriz
000079C2 3038 F700                  		move.w	(v_screenposx).w,d0
000079C6 0240 0010                  		andi.w	#$10,d0
000079CA 1238 F74A                  		move.b	(v_fg_xblock).w,d1
000079CE B300                       		eor.b	d1,d0
000079D0 6600                       		bne.s	@return
000079D2 0A38 0010 F74A             		eori.b	#$10,(v_fg_xblock).w
000079D8 3038 F700                  		move.w	(v_screenposx).w,d0
000079DC 9044                       		sub.w	d4,d0		; compare new with old screen position
000079DE 6A00                       		bpl.s	@scrollRight
000079E0                            
000079E0 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w ; screen moves backward
000079E6 4E75                       		rts	
000079E8                            
000079E8                            	@scrollRight:
000079E8 08F8 0003 F754             		bset	#3,(v_fg_scroll_flags).w ; screen moves forward
000079EE                            
000079EE                            	@return:
000079EE 4E75                       		rts	
000079F0                            ; End of function ScrollHoriz
000079F0                            
000079F0                            
000079F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079F0                            
000079F0                            MoveScreenHoriz:
000079F0 4A38 FF8B                  		tst.b	($FFFFFF8B).w
000079F4 6700 0000                  		beq.w	@cont		
000079F8 4EF9 0000 0000             		jmp	MoveScreenHorizEXT
000079FE                            		
000079FE                            	@cont:		
000079FE 3238 C904                  		move.w	($FFFFC904).w,d1
00007A02 6700                       		beq.s	@cont1
00007A04 0441 0100                  		sub.w	#$100,d1
00007A08 31C1 C904                  		move.w	d1,($FFFFC904).w
00007A0C 7200                       		moveq	#0,d1
00007A0E 1238 C904                  		move.b	($FFFFC904).w,d1
00007A12 E509                       		lsl.b	#2,d1
00007A14 5801                       		addq.b	#4,d1
00007A16 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007A1A 9001                       		sub.b	d1,d0
00007A1C 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007A20 3031 0000                  		move.w	(a1,d0.w),d0
00007A24 0240 3FFF                  		and.w	#$3FFF,d0
00007A28 6000                       		bra.s	@cont2
00007A2A                            		
00007A2A                            @cont1:
00007A2A 3038 D008                  		move.w	($FFFFD008).w,d0
00007A2E                            		
00007A2E                            @cont2:
00007A2E 9078 F700                  		sub.w	($FFFFF700).w,d0
00007A32 0440 0090                          subi.w    #144,d0        ; is distance less than 144px?
00007A36 6500                               bcs.s    SH_BehindMid    ; if yes, branch
00007A38 0440 0010                          subi.w    #16,d0        ; is distance more than 160px?
00007A3C 6400                               bcc.s    SH_AheadOfMid    ; if yes, branch
00007A3E 4278 F73A                          clr.w    (v_scrshiftx).w
00007A42 4E75                               rts 
00007A44                            ; ===========================================================================
00007A44                            
00007A44                            SH_AheadOfMid:
00007A44 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007A48 6500                               bcs.s    SH_Ahead16    ; if yes, branch
00007A4A 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007A4E                            
00007A4E                                SH_Ahead16:
00007A4E D078 F700                          add.w    (v_screenposx).w,d0
00007A52 B078 F72A                          cmp.w    (v_limitright2).w,d0
00007A56 6D00                               blt.s    SH_SetScreen
00007A58 3038 F72A                          move.w    (v_limitright2).w,d0
00007A5C                            
00007A5C                            SH_SetScreen:
00007A5C 3200                               move.w    d0,d1
00007A5E 9278 F700                          sub.w    (v_screenposx).w,d1
00007A62 E141                               asl.w    #8,d1
00007A64 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007A68 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007A6C 4E75                               rts 
00007A6E                            ; ===========================================================================
00007A6E                            
00007A6E                            SH_BehindMid:
00007A6E 0C40 FFF0                  		cmpi.w	#-$10,d0
00007A72 6400                       		bcc.s	@cont
00007A74 303C FFF0                  		move.w	#-$10,d0	
00007A78                            
00007A78                            @cont:
00007A78 D078 F700                  		add.w	(v_screenposx).w,d0
00007A7C B078 F728                  		cmp.w	(v_limitleft2).w,d0
00007A80 6EDA                       		bgt.s	SH_SetScreen
00007A82 3038 F728                  		move.w	(v_limitleft2).w,d0
00007A86 60D4                       		bra.s	SH_SetScreen
00007A88                            ; End of function MoveScreenHoriz
00007A88                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00007A88                            
00007A88                            MoveScreenHorizEXT:
00007A88 3238 C904                  		move.w	($FFFFC904).w,d1
00007A8C 6700                       		beq.s	@cont1
00007A8E 0441 0100                  		sub.w	#$100,d1
00007A92 31C1 C904                  		move.w	d1,($FFFFC904).w
00007A96 7200                       		moveq	#0,d1
00007A98 1238 C904                  		move.b	($FFFFC904).w,d1
00007A9C E509                       		lsl.b	#2,d1
00007A9E 5801                       		addq.b	#4,d1
00007AA0 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007AA4 9001                       		sub.b	d1,d0
00007AA6 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007AAA 3031 0000                  		move.w	(a1,d0.w),d0
00007AAE 0240 3FFF                  		and.w	#$3FFF,d0
00007AB2 6000                       		bra.s	@cont2
00007AB4                            		
00007AB4                            @cont1:
00007AB4 3038 D008                  		move.w	($FFFFD008).w,d0
00007AB8                            		
00007AB8                            @cont2:
00007AB8 9078 F700                  		sub.w	($FFFFF700).w,d0
00007ABC 9078 F7A0                          sub.w    (v_camera_pan).w,d0    ; Horizontal camera pan value
00007AC0 6700                               beq.s    SHEXT_ProperlyFramed    ; if zero, branch
00007AC2 6500                               bcs.s    SHEXT_BehindMid    ; if less than, branch
00007AC4 6000                               bra.s    SHEXT_AheadOfMid    ; branch
00007AC6                            ; ===========================================================================
00007AC6                            
00007AC6                            SHEXT_ProperlyFramed:
00007AC6 4278 F73A                          clr.w    (v_scrshiftx).w
00007ACA 4E75                               rts 
00007ACC                            ; ===========================================================================
00007ACC                            
00007ACC                            SHEXT_AheadOfMid:
00007ACC 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007AD0 6D00                               blt.s    SHEXT_Ahead16    ; if yes, branch
00007AD2 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007AD6                            
00007AD6                            SHEXT_Ahead16:
00007AD6 D078 F700                          add.w    (v_screenposx).w,d0
00007ADA B078 F72A                          cmp.w    (v_limitright2).w,d0
00007ADE 6D00                               blt.s    SHEXT_SetScreen
00007AE0 3038 F72A                          move.w    (v_limitright2).w,d0
00007AE4                            
00007AE4                            SHEXT_SetScreen:
00007AE4 3200                               move.w    d0,d1
00007AE6 9278 F700                          sub.w    (v_screenposx).w,d1
00007AEA E141                               asl.w    #8,d1
00007AEC 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007AF0 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007AF4 4E75                               rts
00007AF6                            
00007AF6                            ; ===========================================================================
00007AF6                            
00007AF6                            SHEXT_BehindMid:
00007AF6 0C40 FFF0                          cmpi.w    #-16,d0        ; is Sonic within 16px of middle area?
00007AFA 6C00                               bge.s    SHEXT_Behind16    ; if no, branch
00007AFC 303C FFF0                          move.w    #-16,d0        ; set to -16 if less
00007B00                            
00007B00                            SHEXT_Behind16:
00007B00 D078 F700                          add.w    (v_screenposx).w,d0
00007B04 B078 F728                          cmp.w    (v_limitleft2).w,d0
00007B08 6EDA                               bgt.s    SHEXT_SetScreen
00007B0A 3038 F728                          move.w    (v_limitleft2).w,d0
00007B0E 60D4                               bra.s    SHEXT_SetScreen
00007B10                                  
00007B10                            ; End of function MoveScreenHoriz
00007B10                            
00007B10                            
00007B10                            ; ---------------------------------------------------------------------------
00007B10                            ; Subroutine to	scroll the level vertically as Sonic moves
00007B10                            ; ---------------------------------------------------------------------------
00007B10                            
00007B10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B10                            
00007B10                            
00007B10                            ScrollVertical:
00007B10 7200                       		moveq	#0,d1
00007B12 3038 D00C                  		move.w	(v_player+obY).w,d0
00007B16 9078 F704                  		sub.w	(v_screenposy).w,d0 ; Sonic's distance from top of screen
00007B1A 0838 0002 D022             		btst	#2,(v_player+obStatus).w ; is Sonic rolling?
00007B20 6700                       		beq.s	SV_NotRolling	; if not, branch
00007B22 5B40                       		subq.w	#5,d0
00007B24                            
00007B24                            	SV_NotRolling:
00007B24 0838 0001 D022             		btst	#1,(v_player+obStatus).w ; is Sonic jumping?
00007B2A 6700                       		beq.s	loc_664A	; if not, branch
00007B2C                            
00007B2C 0640 0020                  		addi.w	#32,d0
00007B30 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007B34 6500                       		bcs.s	loc_6696
00007B36 0440 0040                  		subi.w	#64,d0
00007B3A 6400                       		bcc.s	loc_6696
00007B3C 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007B40 6600                       		bne.s	loc_66A8
00007B42 6000                       		bra.s	loc_6656
00007B44                            ; ===========================================================================
00007B44                            
00007B44                            loc_664A:
00007B44 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007B48 6600                       		bne.s	loc_665C
00007B4A 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007B4E 6600                       		bne.s	loc_66A8
00007B50                            
00007B50                            loc_6656:
00007B50 4278 F73C                  		clr.w	(v_scrshifty).w
00007B54 4E75                       		rts	
00007B56                            ; ===========================================================================
00007B56                            
00007B56                            loc_665C:
00007B56 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w
00007B5C 6600                       		bne.s	loc_6684
00007B5E 3238 D020                  		move.w	(v_player+obInertia).w,d1
00007B62 6A00                       		bpl.s	loc_666C
00007B64 4441                       		neg.w	d1
00007B66                            
00007B66                            loc_666C:
00007B66 0C41 0800                  		cmpi.w	#$800,d1
00007B6A 6400                       		bcc.s	loc_6696
00007B6C 323C 0600                  		move.w	#$600,d1
00007B70 0C40 0006                  		cmpi.w	#6,d0
00007B74 6E00                       		bgt.s	loc_66F6
00007B76 0C40 FFFA                  		cmpi.w	#-6,d0
00007B7A 6D00                       		blt.s	loc_66C0
00007B7C 6000                       		bra.s	loc_66AE
00007B7E                            ; ===========================================================================
00007B7E                            
00007B7E                            loc_6684:
00007B7E 323C 0200                  		move.w	#$200,d1
00007B82 0C40 0002                  		cmpi.w	#2,d0
00007B86 6E00                       		bgt.s	loc_66F6
00007B88 0C40 FFFE                  		cmpi.w	#-2,d0
00007B8C 6D00                       		blt.s	loc_66C0
00007B8E 6000                       		bra.s	loc_66AE
00007B90                            ; ===========================================================================
00007B90                            
00007B90                            loc_6696:
00007B90 323C 1000                  		move.w	#$1000,d1
00007B94 0C40 0010                  		cmpi.w	#$10,d0
00007B98 6E00                       		bgt.s	loc_66F6
00007B9A 0C40 FFF0                  		cmpi.w	#-$10,d0
00007B9E 6D00                       		blt.s	loc_66C0
00007BA0 6000                       		bra.s	loc_66AE
00007BA2                            ; ===========================================================================
00007BA2                            
00007BA2                            loc_66A8:
00007BA2 7000                       		moveq	#0,d0
00007BA4 11C0 F75C                  		move.b	d0,(f_bgscrollvert).w
00007BA8                            
00007BA8                            loc_66AE:
00007BA8 7200                       		moveq	#0,d1
00007BAA 3200                       		move.w	d0,d1
00007BAC D278 F704                  		add.w	(v_screenposy).w,d1
00007BB0 4A40                       		tst.w	d0
00007BB2 6A00 0000                  		bpl.w	loc_6700
00007BB6 6000 0000                  		bra.w	loc_66CC
00007BBA                            ; ===========================================================================
00007BBA                            
00007BBA                            loc_66C0:
00007BBA 4441                       		neg.w	d1
00007BBC 48C1                       		ext.l	d1
00007BBE E181                       		asl.l	#8,d1
00007BC0 D2B8 F704                  		add.l	(v_screenposy).w,d1
00007BC4 4841                       		swap	d1
00007BC6                            
00007BC6                            loc_66CC:
00007BC6 B278 F72C                  		cmp.w	(v_limittop2).w,d1
00007BCA 6E00                       		bgt.s	loc_6724
00007BCC 0C41 FF00                  		cmpi.w	#-$100,d1
00007BD0 6E00                       		bgt.s	loc_66F0
00007BD2 0241 07FF                  		andi.w	#$7FF,d1
00007BD6 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00007BDC 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00007BE2 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00007BE8 6000                       		bra.s	loc_6724
00007BEA                            ; ===========================================================================
00007BEA                            
00007BEA                            loc_66F0:
00007BEA 3238 F72C                  		move.w	(v_limittop2).w,d1
00007BEE 6000                       		bra.s	loc_6724
00007BF0                            ; ===========================================================================
00007BF0                            
00007BF0                            loc_66F6:
00007BF0 48C1                       		ext.l	d1
00007BF2 E181                       		asl.l	#8,d1
00007BF4 D2B8 F704                  		add.l	(v_screenposy).w,d1
00007BF8 4841                       		swap	d1
00007BFA                            
00007BFA                            loc_6700:
00007BFA B278 F72E                  		cmp.w	(v_limitbtm2).w,d1
00007BFE 6D00                       		blt.s	loc_6724
00007C00 0441 0800                  		subi.w	#$800,d1
00007C04 6500                       		bcs.s	loc_6720
00007C06 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00007C0C 0478 0800 F704             		subi.w	#$800,(v_screenposy).w
00007C12 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00007C18 6000                       		bra.s	loc_6724
00007C1A                            ; ===========================================================================
00007C1A                            
00007C1A                            loc_6720:
00007C1A 3238 F72E                  		move.w	(v_limitbtm2).w,d1
00007C1E                            
00007C1E                            loc_6724:
00007C1E 3838 F704                  		move.w	(v_screenposy).w,d4
00007C22 4841                       		swap	d1
00007C24 2601                       		move.l	d1,d3
00007C26 96B8 F704                  		sub.l	(v_screenposy).w,d3
00007C2A E09B                       		ror.l	#8,d3
00007C2C 31C3 F73C                  		move.w	d3,(v_scrshifty).w
00007C30 21C1 F704                  		move.l	d1,(v_screenposy).w
00007C34 3038 F704                  		move.w	(v_screenposy).w,d0
00007C38 0240 0010                  		andi.w	#$10,d0
00007C3C 1238 F74B                  		move.b	(v_fg_yblock).w,d1
00007C40 B300                       		eor.b	d1,d0
00007C42 6600                       		bne.s	@return
00007C44 0A38 0010 F74B             		eori.b	#$10,(v_fg_yblock).w
00007C4A 3038 F704                  		move.w	(v_screenposy).w,d0
00007C4E 9044                       		sub.w	d4,d0
00007C50 6A00                       		bpl.s	@scrollBottom
00007C52 08F8 0000 F754             		bset	#0,(v_fg_scroll_flags).w
00007C58 4E75                       		rts	
00007C5A                            ; ===========================================================================
00007C5A                            
00007C5A                            	@scrollBottom:
00007C5A 08F8 0001 F754             		bset	#1,(v_fg_scroll_flags).w
00007C60                            
00007C60                            	@return:
00007C60 4E75                       		rts	
00007C62                            ; End of function ScrollVertical
00007C62                            
00007C62                            
00007C62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C62                            ; Scrolls background and sets redraw flags.
00007C62                            ; d4 - background x offset * $10000
00007C62                            ; d5 - background y offset * $10000
00007C62                            
00007C62                            BGScroll_XY:
00007C62 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00007C66 2002                       		move.l	d2,d0
00007C68 D084                       		add.l	d4,d0
00007C6A 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00007C6E 2200                       		move.l	d0,d1
00007C70 4841                       		swap	d1
00007C72 0241 0010                  		andi.w	#$10,d1
00007C76 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00007C7A B701                       		eor.b	d3,d1
00007C7C 6600                       		bne.s	BGScroll_YRelative	; no change in Y
00007C7E 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00007C84 9082                       		sub.l	d2,d0	; new - old
00007C86 6A00                       		bpl.s	@scrollRight
00007C88 08F8 0002 F756             		bset	#2,(v_bg1_scroll_flags).w
00007C8E 6000                       		bra.s	BGScroll_YRelative
00007C90                            	@scrollRight:
00007C90 08F8 0003 F756             		bset	#3,(v_bg1_scroll_flags).w
00007C96                            BGScroll_YRelative:
00007C96 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00007C9A 2003                       		move.l	d3,d0
00007C9C D085                       		add.l	d5,d0
00007C9E 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00007CA2 2200                       		move.l	d0,d1
00007CA4 4841                       		swap	d1
00007CA6 0241 0010                  		andi.w	#$10,d1
00007CAA 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007CAE B501                       		eor.b	d2,d1
00007CB0 6600                       		bne.s	@return
00007CB2 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007CB8 9083                       		sub.l	d3,d0
00007CBA 6A00                       		bpl.s	@scrollBottom
00007CBC 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00007CC2 4E75                       		rts
00007CC4                            	@scrollBottom:
00007CC4 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00007CCA                            	@return:
00007CCA 4E75                       		rts
00007CCC                            ; End of function BGScroll_XY
00007CCC                            
00007CCC                            Bg_Scroll_Y:
00007CCC 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00007CD0 2003                       		move.l	d3,d0
00007CD2 D085                       		add.l	d5,d0
00007CD4 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00007CD8 2200                       		move.l	d0,d1
00007CDA 4841                       		swap	d1
00007CDC 0241 0010                  		andi.w	#$10,d1
00007CE0 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007CE4 B501                       		eor.b	d2,d1
00007CE6 6600                       		bne.s	@return
00007CE8 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007CEE 9083                       		sub.l	d3,d0
00007CF0 6A00                       		bpl.s	@scrollBottom
00007CF2 08F8 0004 F756             		bset	#4,(v_bg1_scroll_flags).w
00007CF8 4E75                       		rts
00007CFA                            	@scrollBottom:
00007CFA 08F8 0005 F756             		bset	#5,(v_bg1_scroll_flags).w
00007D00                            	@return:
00007D00 4E75                       		rts
00007D02                            
00007D02                            
00007D02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D02                            
00007D02                            
00007D02                            BGScroll_YAbsolute:
00007D02 3638 F70C                  		move.w	(v_bgscreenposy).w,d3
00007D06 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007D0A 3200                       		move.w	d0,d1
00007D0C 0241 0010                  		andi.w	#$10,d1
00007D10 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007D14 B501                       		eor.b	d2,d1
00007D16 6600                       		bne.s	@return
00007D18 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007D1E 9043                       		sub.w	d3,d0
00007D20 6A00                       		bpl.s	@scrollBottom
00007D22 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00007D28 4E75                       		rts
00007D2A                            	@scrollBottom:
00007D2A 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00007D30                            	@return:
00007D30 4E75                       		rts
00007D32                            ; End of function BGScroll_YAbsolute
00007D32                            
00007D32                            
00007D32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D32                            ; d6 - bit to set for redraw
00007D32                            
00007D32                            BGScroll_Block1:
00007D32 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00007D36 2002                       		move.l	d2,d0
00007D38 D084                       		add.l	d4,d0
00007D3A 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00007D3E 2200                       		move.l	d0,d1
00007D40 4841                       		swap	d1
00007D42 0241 0010                  		andi.w	#$10,d1
00007D46 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00007D4A B701                       		eor.b	d3,d1
00007D4C 6600                       		bne.s	@return
00007D4E 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00007D54 9082                       		sub.l	d2,d0
00007D56 6A00                       		bpl.s	@scrollRight
00007D58 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00007D5C 6000                       		bra.s	@return
00007D5E                            	@scrollRight:
00007D5E 5206                       		addq.b	#1,d6
00007D60 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00007D64                            	@return:
00007D64 4E75                       		rts
00007D66                            ; End of function BGScroll_Block1
00007D66                            
00007D66                            
00007D66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D66                            
00007D66                            
00007D66                            BGScroll_Block2:
00007D66 2438 F710                  		move.l	(v_bg2screenposx).w,d2
00007D6A 2002                       		move.l	d2,d0
00007D6C D084                       		add.l	d4,d0
00007D6E 21C0 F710                  		move.l	d0,(v_bg2screenposx).w
00007D72 2200                       		move.l	d0,d1
00007D74 4841                       		swap	d1
00007D76 0241 0010                  		andi.w	#$10,d1
00007D7A 1638 F74E                  		move.b	(v_bg2_xblock).w,d3
00007D7E B701                       		eor.b	d3,d1
00007D80 6600                       		bne.s	@return
00007D82 0A38 0010 F74E             		eori.b	#$10,(v_bg2_xblock).w
00007D88 9082                       		sub.l	d2,d0
00007D8A 6A00                       		bpl.s	@scrollRight
00007D8C 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00007D90 6000                       		bra.s	@return
00007D92                            	@scrollRight:
00007D92 5206                       		addq.b	#1,d6
00007D94 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00007D98                            	@return:
00007D98 4E75                       		rts
00007D9A                            ;-------------------------------------------------------------------------------
00007D9A                            BGScroll_Block3:
00007D9A 2438 F718                  		move.l	(v_bg3screenposx).w,d2
00007D9E 2002                       		move.l	d2,d0
00007DA0 D084                       		add.l	d4,d0
00007DA2 21C0 F718                  		move.l	d0,(v_bg3screenposx).w
00007DA6 2200                       		move.l	d0,d1
00007DA8 4841                       		swap	d1
00007DAA 0241 0010                  		andi.w	#$10,d1
00007DAE 1638 F750                  		move.b	(v_bg3_xblock).w,d3
00007DB2 B701                       		eor.b	d3,d1
00007DB4 6600                       		bne.s	@return
00007DB6 0A38 0010 F750             		eori.b	#$10,(v_bg3_xblock).w
00007DBC 9082                       		sub.l	d2,d0
00007DBE 6A00                       		bpl.s	@scrollRight
00007DC0 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00007DC4 6000                       		bra.s	@return
00007DC6                            	@scrollRight:
00007DC6 5206                       		addq.b	#1,d6
00007DC8 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00007DCC                            	@return:
00007DCC 4E75                       		rts
00007DCC 4E75                       		rts
00007DCE                            
00007DCE                            
00007DCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DCE                            
00007DCE                            ; sub_6886:
00007DCE                            LoadTilesAsYouMove_BGOnly:
00007DCE 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00007DD4 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00007DDA 45F8 F756                  		lea	(v_bg1_scroll_flags).w,a2
00007DDE 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00007DE2 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00007DE6 343C 6000                  		move.w	#$6000,d2
00007DEA 6100 0000                  		bsr.w	DrawBGScrollBlock1
00007DEE 45F8 F758                  		lea	(v_bg2_scroll_flags).w,a2
00007DF2 47F8 F710                  		lea	(v_bg2screenposx).w,a3
00007DF6 6000 0000                  		bra.w	DrawBGScrollBlock2
00007DFA                            ; End of function sub_6886
00007DFA                            
00007DFA                            ; ---------------------------------------------------------------------------
00007DFA                            ; Subroutine to	display	correct	tiles as you move
00007DFA                            ; ---------------------------------------------------------------------------
00007DFA                            
00007DFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DFA                            
00007DFA                            
00007DFA                            LoadTilesAsYouMove:
00007DFA 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00007E00 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00007E06                            		; First, update the background
00007E06 45F8 FF32                  		lea	(v_bg1_scroll_flags_dup).w,a2	; Scroll block 1 scroll flags
00007E0A 47F8 FF18                  		lea	(v_bgscreenposx_dup).w,a3	; Scroll block 1 X coordinate
00007E0E 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00007E12 343C 6000                  		move.w	#$6000,d2			; VRAM thing for selecting Plane B
00007E16 6100 0000                  		bsr.w	DrawBGScrollBlock1
00007E1A 45F8 FF34                  		lea	(v_bg2_scroll_flags_dup).w,a2	; Scroll block 2 scroll flags
00007E1E 47F8 FF20                  		lea	(v_bg2screenposx_dup).w,a3	; Scroll block 2 X coordinate
00007E22 6100 0000                  		bsr.w	DrawBGScrollBlock2
00007E26                            		; REV01 added a third scroll block, though, technically,
00007E26                            		; the RAM for it was already there in REV00
00007E26 45F8 FF36                  		lea	(v_bg3_scroll_flags_dup).w,a2	; Scroll block 3 scroll flags
00007E2A 47F8 FF28                  		lea	(v_bg3screenposx_dup).w,a3	; Scroll block 3 X coordinate
00007E2E 6100 0000                  		bsr.w	DrawBGScrollBlock3
00007E32                            		; Then, update the foreground
00007E32 45F8 FF30                  		lea	(v_fg_scroll_flags_dup).w,a2	; Foreground scroll flags
00007E36 47F8 FF10                  		lea	(v_screenposx_dup).w,a3		; Foreground X coordinate
00007E3A 49F8 A400                  		lea	(v_lvllayout).w,a4
00007E3E 343C 4000                  		move.w	#$4000,d2			; VRAM thing for selecting Plane A
00007E42                            		; The FG's update function is inlined here
00007E42 4A12                       		tst.b	(a2)
00007E44 6700                       		beq.s	locret_6952	; If there are no flags set, nothing needs updating
00007E46 0892 0000                  		bclr	#0,(a2)
00007E4A 6700                       		beq.s	loc_6908
00007E4C                            		; Draw new tiles at the top
00007E4C 78F0                       		moveq	#-16,d4	; Y coordinate. Note that 16 is the size of a block in pixels
00007E4E 7AF0                       		moveq	#-16,d5 ; X coordinate
00007E50 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007E54 78F0                       		moveq	#-16,d4 ; Y coordinate
00007E56 7AF0                       		moveq	#-16,d5 ; X coordinate
00007E58 6100 0000                  		bsr.w	DrawBlocks_LR
00007E5C                            
00007E5C                            loc_6908:
00007E5C 0892 0001                  		bclr	#1,(a2)
00007E60 6700                       		beq.s	loc_6922
00007E62                            		; Draw new tiles at the bottom
00007E62 383C 00E0                  		move.w	#224,d4	; Start at bottom of the screen. Since this draws from top to bottom, we don't need 224+16
00007E66 7AF0                       		moveq	#-16,d5
00007E68 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007E6C 383C 00E0                  		move.w	#224,d4
00007E70 7AF0                       		moveq	#-16,d5
00007E72 6100 0000                  		bsr.w	DrawBlocks_LR
00007E76                            
00007E76                            loc_6922:
00007E76 0892 0002                  		bclr	#2,(a2)
00007E7A 6700                       		beq.s	loc_6938
00007E7C                            		; Draw new tiles on the left
00007E7C 78F0                       		moveq	#-16,d4
00007E7E 7AF0                       		moveq	#-16,d5
00007E80 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007E84 78F0                       		moveq	#-16,d4
00007E86 7AF0                       		moveq	#-16,d5
00007E88 6100 0000                  		bsr.w	DrawBlocks_TB
00007E8C                            
00007E8C                            loc_6938:
00007E8C 0892 0003                  		bclr	#3,(a2)
00007E90 6700                       		beq.s	locret_6952
00007E92                            		; Draw new tiles on the right
00007E92 78F0                       		moveq	#-16,d4
00007E94 3A3C 0140                  		move.w	#320,d5
00007E98 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007E9C 78F0                       		moveq	#-16,d4
00007E9E 3A3C 0140                  		move.w	#320,d5
00007EA2 6100 0000                  		bsr.w	DrawBlocks_TB
00007EA6                            
00007EA6                            locret_6952:
00007EA6 4E75                       		rts	
00007EA8                            ; End of function LoadTilesAsYouMove
00007EA8                            
00007EA8                            
00007EA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007EA8                            
00007EA8                            ; sub_6954:
00007EA8                            DrawBGScrollBlock1:
00007EA8 4A12                       		tst.b	(a2)
00007EAA 6700 0000                  		beq.w	locret_69F2
00007EAE 0892 0000                  		bclr	#0,(a2)
00007EB2 6700                       		beq.s	loc_6972
00007EB4                            		; Draw new tiles at the top
00007EB4 78F0                       		moveq	#-16,d4
00007EB6 7AF0                       		moveq	#-16,d5
00007EB8 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007EBC 78F0                       		moveq	#-16,d4
00007EBE 7AF0                       		moveq	#-16,d5
00007EC0 6100 0000                  			bsr.w	DrawBlocks_LR
00007EC4                            
00007EC4                            loc_6972:
00007EC4 0892 0001                  		bclr	#1,(a2)
00007EC8 6700                       		beq.s	loc_698E
00007ECA                            		; Draw new tiles at the top
00007ECA 383C 00E0                  		move.w	#224,d4
00007ECE 7AF0                       		moveq	#-16,d5
00007ED0 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007ED4 383C 00E0                  		move.w	#224,d4
00007ED8 7AF0                       		moveq	#-16,d5
00007EDA 6100 0000                  			bsr.w	DrawBlocks_LR
00007EDE                            
00007EDE                            loc_698E:
00007EDE 0892 0002                  		bclr	#2,(a2)
00007EE2                            
00007EE2                            
00007EE2 6700                       			beq.s	locj_6D56
00007EE4                            			; Draw new tiles on the left
00007EE4 78F0                       			moveq	#-16,d4
00007EE6 7AF0                       			moveq	#-16,d5
00007EE8 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007EEC 78F0                       			moveq	#-16,d4
00007EEE 7AF0                       			moveq	#-16,d5
00007EF0 6100 0000                  			bsr.w	DrawBlocks_TB
00007EF4                            	locj_6D56:
00007EF4                            
00007EF4 0892 0003                  			bclr	#3,(a2)
00007EF8 6700                       			beq.s	locj_6D70
00007EFA                            			; Draw new tiles on the right
00007EFA 78F0                       			moveq	#-16,d4
00007EFC 3A3C 0140                  			move.w	#320,d5
00007F00 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007F04 78F0                       			moveq	#-16,d4
00007F06 3A3C 0140                  			move.w	#320,d5
00007F0A 6100 0000                  			bsr.w	DrawBlocks_TB
00007F0E                            	locj_6D70:
00007F0E                            
00007F0E 0892 0004                  			bclr	#4,(a2)
00007F12 6700                       			beq.s	locj_6D88
00007F14                            			; Draw entire row at the top
00007F14 78F0                       			moveq	#-16,d4
00007F16 7A00                       			moveq	#0,d5
00007F18 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00007F1C 78F0                       			moveq	#-16,d4
00007F1E 7A00                       			moveq	#0,d5
00007F20 7C1F                       			moveq	#(512/16)-1,d6
00007F22 6100 0000                  			bsr.w	DrawBlocks_LR_3
00007F26                            	locj_6D88:
00007F26                            
00007F26 0892 0005                  			bclr	#5,(a2)
00007F2A 6700                       			beq.s	locret_69F2
00007F2C                            			; Draw entire row at the bottom
00007F2C 383C 00E0                  			move.w	#224,d4
00007F30 7A00                       			moveq	#0,d5
00007F32 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00007F36 383C 00E0                  			move.w	#224,d4
00007F3A 7A00                       			moveq	#0,d5
00007F3C 7C1F                       			moveq	#(512/16)-1,d6
00007F3E 6100 0000                  			bsr.w	DrawBlocks_LR_3
00007F42                            
00007F42                            locret_69F2:
00007F42 4E75                       		rts	
00007F44                            ; End of function DrawBGScrollBlock1
00007F44                            
00007F44                            
00007F44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F44                            
00007F44                            ; Essentially, this draws everything that isn't scroll block 1
00007F44                            ; sub_69F4:
00007F44                            DrawBGScrollBlock2:
00007F44                            
00007F44 4A12                       			tst.b	(a2)
00007F46 6700 0000                  			beq.w	locj_6DF2
00007F4A 0C38 0005 FE10             			cmpi.b	#id_SBZ,(v_zone).w
00007F50 6700 0000                  			beq.w	Draw_SBz
00007F54 0892 0000                  			bclr	#0,(a2)
00007F58 6700                       			beq.s	locj_6DD2
00007F5A                            			; Draw new tiles on the left
00007F5A 383C 0070                  			move.w	#224/2,d4	; Draw the bottom half of the screen
00007F5E 7AF0                       			moveq	#-16,d5
00007F60 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007F64 383C 0070                  			move.w	#224/2,d4
00007F68 7AF0                       			moveq	#-16,d5
00007F6A 7C02                       			moveq	#3-1,d6		; Draw three rows... could this be a repurposed version of the above unused code?
00007F6C 6100 0000                  			bsr.w	DrawBlocks_TB_2
00007F70                            	locj_6DD2:
00007F70 0892 0001                  			bclr	#1,(a2)
00007F74 6700                       			beq.s	locj_6DF2
00007F76                            			; Draw new tiles on the right
00007F76 383C 0070                  			move.w	#224/2,d4
00007F7A 3A3C 0140                  			move.w	#320,d5
00007F7E 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007F82 383C 0070                  			move.w	#224/2,d4
00007F86 3A3C 0140                  			move.w	#320,d5
00007F8A 7C02                       			moveq	#3-1,d6
00007F8C 6100 0000                  			bsr.w	DrawBlocks_TB_2
00007F90                            	locj_6DF2:
00007F90 4E75                       			rts
00007F92                            ;===============================================================================
00007F92                            	locj_6DF4:
00007F92 0000 0000 0006 0606 0606+  			dc.b $00,$00,$00,$00,$00,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$04
00007FA2 0404 0404 0404 0202 0202+  			dc.b $04,$04,$04,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00007FB2 0200                       			dc.b $02,$00						
00007FB4                            ;===============================================================================
00007FB4                            	Draw_SBz:
00007FB4 78F0                       			moveq	#-16,d4
00007FB6 0892 0000                  			bclr	#0,(a2)
00007FBA 6600                       			bne.s	locj_6E28
00007FBC 0892 0001                  			bclr	#1,(a2)
00007FC0 6700                       			beq.s	locj_6E72
00007FC2 383C 00E0                  			move.w	#224,d4
00007FC6                            	locj_6E28:
00007FC6 41F9 0000 7F93             			lea	(locj_6DF4+1).l,a0
00007FCC 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00007FD0 D044                       			add.w	d4,d0
00007FD2 0240 01F0                  			andi.w	#$1F0,d0
00007FD6 E848                       			lsr.w	#4,d0
00007FD8 1030 0000                  			move.b	(a0,d0.w),d0
00007FDC 47F9 0000 0000             			lea	(locj_6FE4).l,a3
00007FE2 3673 0000                  			movea.w	(a3,d0.w),a3
00007FE6 6700                       			beq.s	locj_6E5E
00007FE8 7AF0                       			moveq	#-16,d5
00007FEA 48E7 0C00                  			movem.l	d4/d5,-(sp)
00007FEE 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007FF2 4CDF 0030                  			movem.l	(sp)+,d4/d5
00007FF6 6100 0000                  			bsr.w	DrawBlocks_LR
00007FFA 6000                       			bra.s	locj_6E72
00007FFC                            ;===============================================================================
00007FFC                            	locj_6E5E:
00007FFC 7A00                       			moveq	#0,d5
00007FFE 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008002 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008006 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000800A 7C1F                       			moveq	#(512/16)-1,d6
0000800C 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008010                            	locj_6E72:
00008010 4A12                       			tst.b	(a2)
00008012 6600                       			bne.s	locj_6E78
00008014 4E75                       			rts
00008016                            ;===============================================================================			
00008016                            	locj_6E78:
00008016 78F0                       			moveq	#-16,d4
00008018 7AF0                       			moveq	#-16,d5
0000801A 1012                       			move.b	(a2),d0
0000801C 0200 00A8                  			andi.b	#$A8,d0
00008020 6700                       			beq.s	locj_6E8C
00008022 E208                       			lsr.b	#1,d0
00008024 1480                       			move.b	d0,(a2)
00008026 3A3C 0140                  			move.w	#320,d5
0000802A                            	locj_6E8C:
0000802A 41F9 0000 7F92             			lea	(locj_6DF4).l,a0
00008030 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008034 0240 01F0                  			andi.w	#$1F0,d0
00008038 E848                       			lsr.w	#4,d0
0000803A 41F0 0000                  			lea	(a0,d0.w),a0
0000803E 6000 0000                  			bra.w	locj_6FEC						
00008042                            ;===============================================================================
00008042                            
00008042                            
00008042                            	; locj_6EA4:
00008042                            	DrawBGScrollBlock3:
00008042 4A12                       			tst.b	(a2)
00008044 6700 0000                  			beq.w	locj_6EF0
00008048 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
0000804E 6700 0000                  			beq.w	Draw_Mz
00008052 0892 0000                  			bclr	#0,(a2)
00008056 6700                       			beq.s	locj_6ED0
00008058                            			; Draw new tiles on the left
00008058 383C 0040                  			move.w	#$40,d4
0000805C 7AF0                       			moveq	#-16,d5
0000805E 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008062 383C 0040                  			move.w	#$40,d4
00008066 7AF0                       			moveq	#-16,d5
00008068 7C02                       			moveq	#3-1,d6
0000806A 6100 0000                  			bsr.w	DrawBlocks_TB_2
0000806E                            	locj_6ED0:
0000806E 0892 0001                  			bclr	#1,(a2)
00008072 6700                       			beq.s	locj_6EF0
00008074                            			; Draw new tiles on the right
00008074 383C 0040                  			move.w	#$40,d4
00008078 3A3C 0140                  			move.w	#320,d5
0000807C 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008080 383C 0040                  			move.w	#$40,d4
00008084 3A3C 0140                  			move.w	#320,d5
00008088 7C02                       			moveq	#3-1,d6
0000808A 6100 0000                  			bsr.w	DrawBlocks_TB_2
0000808E                            	locj_6EF0:
0000808E 4E75                       			rts
00008090                            	locj_6EF2:
00008090 0000 0000 0000 0606 0404+  			dc.b $00,$00,$00,$00,$00,$00,$06,$06,$04,$04,$04,$04,$04,$04,$04,$04
000080A0 0402 0202 0202 0202 0202+  			dc.b $04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000080B0 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000080C0 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000080D0 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000080E0 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000080F0 0200                       			dc.b $02,$00
000080F2                            ;===============================================================================
000080F2                            	Draw_Mz:
000080F2 78F0                       			moveq	#-16,d4
000080F4 0892 0000                  			bclr	#0,(a2)
000080F8 6600                       			bne.s	locj_6F66
000080FA 0892 0001                  			bclr	#1,(a2)
000080FE 6700                       			beq.s	locj_6FAE
00008100 383C 00E0                  			move.w	#224,d4
00008104                            	locj_6F66:
00008104 41F9 0000 8091             			lea	(locj_6EF2+1).l,a0
0000810A 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
0000810E 0440 0200                  			subi.w	#$200,d0
00008112 D044                       			add.w	d4,d0
00008114 0240 07F0                  			andi.w	#$7F0,d0
00008118 E848                       			lsr.w	#4,d0
0000811A 1030 0000                  			move.b	(a0,d0.w),d0
0000811E 367B 0000                  			movea.w	locj_6FE4(pc,d0.w),a3
00008122 6700                       			beq.s	locj_6F9A
00008124 7AF0                       			moveq	#-16,d5
00008126 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000812A 6100 0000                  			bsr.w	Calc_VRAM_Pos
0000812E 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008132 6100 0000                  			bsr.w	DrawBlocks_LR
00008136 6000                       			bra.s	locj_6FAE
00008138                            ;===============================================================================
00008138                            	locj_6F9A:
00008138 7A00                       			moveq	#0,d5
0000813A 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000813E 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008142 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008146 7C1F                       			moveq	#(512/16)-1,d6
00008148 6100 0000                  			bsr.w	DrawBlocks_LR_3
0000814C                            	locj_6FAE:
0000814C 4A12                       			tst.b	(a2)
0000814E 6600                       			bne.s	locj_6FB4
00008150 4E75                       			rts
00008152                            ;===============================================================================			
00008152                            	locj_6FB4:
00008152 78F0                       			moveq	#-16,d4
00008154 7AF0                       			moveq	#-16,d5
00008156 1012                       			move.b	(a2),d0
00008158 0200 00A8                  			andi.b	#$A8,d0
0000815C 6700                       			beq.s	locj_6FC8
0000815E E208                       			lsr.b	#1,d0
00008160 1480                       			move.b	d0,(a2)
00008162 3A3C 0140                  			move.w	#320,d5
00008166                            	locj_6FC8:
00008166 41F9 0000 8090             			lea	(locj_6EF2).l,a0
0000816C 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008170 0440 0200                  			subi.w	#$200,d0
00008174 0240 07F0                  			andi.w	#$7F0,d0
00008178 E848                       			lsr.w	#4,d0
0000817A 41F0 0000                  			lea	(a0,d0.w),a0
0000817E 6000 0000                  			bra.w	locj_6FEC
00008182                            ;===============================================================================			
00008182                            	locj_6FE4:
00008182 FF18 FF18 FF20 FF28        			dc.w v_bgscreenposx_dup, v_bgscreenposx_dup, v_bg2screenposx_dup, v_bg3screenposx_dup
0000818A                            	locj_6FEC:
0000818A 7C0F                       			moveq	#((224+16+16)/16)-1,d6
0000818C 2E3C 0080 0000             			move.l	#$800000,d7
00008192                            	locj_6FF4:			
00008192 7000                       			moveq	#0,d0
00008194 1018                       			move.b	(a0)+,d0
00008196 0112                       			btst	d0,(a2)
00008198 6700                       			beq.s	locj_701C
0000819A 367B 00E6                  			move.w	locj_6FE4(pc,d0.w),a3
0000819E 48E7 0C80                  			movem.l	d4/d5/a0,-(sp)
000081A2 48E7 0C00                  			movem.l	d4/d5,-(sp)
000081A6 6100 0000                  			bsr.w	GetBlockData
000081AA 4CDF 0030                  			movem.l	(sp)+,d4/d5
000081AE 6100 0000                  			bsr.w	Calc_VRAM_Pos
000081B2 6100 0000                  			bsr.w	DrawBlock
000081B6 4CDF 0130                  			movem.l	(sp)+,d4/d5/a0
000081BA                            	locj_701C:
000081BA 0644 0010                  			addi.w	#16,d4
000081BE 51CE FFD2                  			dbf	d6,locj_6FF4
000081C2 4212                       			clr.b	(a2)
000081C4 4E75                       			rts			
000081C6                            
000081C6                            
000081C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081C6                            
000081C6                            ; Don't be fooled by the name: this function's for drawing from left to right
000081C6                            ; when the camera's moving up or down
000081C6                            ; DrawTiles_LR:
000081C6                            DrawBlocks_LR:
000081C6 7C15                       		moveq	#((320+16+16)/16)-1,d6	; Draw the entire width of the screen + two extra columns
000081C8                            ; DrawTiles_LR_2:
000081C8                            DrawBlocks_LR_2:
000081C8 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
000081CE 2200                       		move.l	d0,d1
000081D0                            
000081D0                            	@loop:
000081D0 48E7 0C00                  		movem.l	d4-d5,-(sp)
000081D4 6100 0000                  		bsr.w	GetBlockData
000081D8 2001                       		move.l	d1,d0
000081DA 6100 0000                  		bsr.w	DrawBlock
000081DE 5801                       		addq.b	#4,d1		; Two tiles ahead
000081E0 0201 007F                  		andi.b	#$7F,d1		; Wrap around row
000081E4 4CDF 0030                  		movem.l	(sp)+,d4-d5
000081E8 0645 0010                  		addi.w	#16,d5		; Move X coordinate one block ahead
000081EC 51CE FFE2                  		dbf	d6,@loop
000081F0 4E75                       		rts
000081F2                            ; End of function DrawBlocks_LR
000081F2                            
000081F2                            ; DrawTiles_LR_3:
000081F2                            DrawBlocks_LR_3:
000081F2 2E3C 0080 0000             		move.l	#$800000,d7
000081F8 2200                       		move.l	d0,d1
000081FA                            
000081FA                            	@loop:
000081FA 48E7 0C00                  		movem.l	d4-d5,-(sp)
000081FE 6100 0000                  		bsr.w	GetBlockData_2
00008202 2001                       		move.l	d1,d0
00008204 6100 0000                  		bsr.w	DrawBlock
00008208 5801                       		addq.b	#4,d1
0000820A 0201 007F                  		andi.b	#$7F,d1
0000820E 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008212 0645 0010                  		addi.w	#16,d5
00008216 51CE FFE2                  		dbf	d6,@loop
0000821A 4E75                       		rts	
0000821C                            ; End of function DrawBlocks_LR_3
0000821C                            
0000821C                            
0000821C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000821C                            
0000821C                            ; Don't be fooled by the name: this function's for drawing from top to bottom
0000821C                            ; when the camera's moving left or right
0000821C                            ; DrawTiles_TB:
0000821C                            DrawBlocks_TB:
0000821C 7C0F                       		moveq	#((224+16+16)/16)-1,d6	; Draw the entire height of the screen + two extra rows
0000821E                            ; DrawTiles_TB_2:
0000821E                            DrawBlocks_TB_2:
0000821E 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
00008224 2200                       		move.l	d0,d1
00008226                            
00008226                            	@loop:
00008226 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000822A 6100 0000                  		bsr.w	GetBlockData
0000822E 2001                       		move.l	d1,d0
00008230 6100 0000                  		bsr.w	DrawBlock
00008234 0641 0100                  		addi.w	#$100,d1	; Two rows ahead
00008238 0241 0FFF                  		andi.w	#$FFF,d1	; Wrap around plane
0000823C 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008240 0644 0010                  		addi.w	#16,d4		; Move X coordinate one block ahead
00008244 51CE FFE0                  		dbf	d6,@loop
00008248 4E75                       		rts	
0000824A                            ; End of function DrawBlocks_TB_2
0000824A                            
0000824A                            
0000824A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000824A                            
0000824A                            ; Draws a block's worth of tiles
0000824A                            ; Parameters:
0000824A                            ; a0 = Pointer to block metadata (block index and X/Y flip)
0000824A                            ; a1 = Pointer to block
0000824A                            ; a5 = Pointer to VDP command port
0000824A                            ; a6 = Pointer to VDP data port
0000824A                            ; d0 = VRAM command to access plane
0000824A                            ; d2 = VRAM plane A/B specifier
0000824A                            ; d7 = Plane row delta
0000824A                            ; DrawTiles:
0000824A                            DrawBlock:
0000824A 8042                       		or.w	d2,d0	; OR in that plane A/B specifier to the VRAM command
0000824C 4840                       		swap	d0
0000824E 0810 0004                  		btst	#4,(a0)	; Check Y-flip bit
00008252 6600                       		bne.s	DrawFlipY
00008254 0810 0003                  		btst	#3,(a0)	; Check X-flip bit
00008258 6600                       		bne.s	DrawFlipX
0000825A 2A80                       		move.l	d0,(a5)
0000825C 2C99                       		move.l	(a1)+,(a6)	; Write top two tiles
0000825E D087                       		add.l	d7,d0		; Next row
00008260 2A80                       		move.l	d0,(a5)
00008262 2C99                       		move.l	(a1)+,(a6)	; Write bottom two tiles
00008264 4E75                       		rts	
00008266                            ; ===========================================================================
00008266                            
00008266                            DrawFlipX:
00008266 2A80                       		move.l	d0,(a5)
00008268 2819                       		move.l	(a1)+,d4
0000826A 0A84 0800 0800             		eori.l	#$8000800,d4	; Invert X-flip bits of each tile
00008270 4844                       		swap	d4		; Swap the tiles around
00008272 2C84                       		move.l	d4,(a6)		; Write top two tiles
00008274 D087                       		add.l	d7,d0		; Next row
00008276 2A80                       		move.l	d0,(a5)
00008278 2819                       		move.l	(a1)+,d4
0000827A 0A84 0800 0800             		eori.l	#$8000800,d4
00008280 4844                       		swap	d4
00008282 2C84                       		move.l	d4,(a6)		; Write bottom two tiles
00008284 4E75                       		rts	
00008286                            ; ===========================================================================
00008286                            
00008286                            DrawFlipY:
00008286 0810 0003                  		btst	#3,(a0)
0000828A 6600                       		bne.s	DrawFlipXY
0000828C 2A80                       		move.l	d0,(a5)
0000828E 2A19                       		move.l	(a1)+,d5
00008290 2819                       		move.l	(a1)+,d4
00008292 0A84 1000 1000             		eori.l	#$10001000,d4
00008298 2C84                       		move.l	d4,(a6)
0000829A D087                       		add.l	d7,d0
0000829C 2A80                       		move.l	d0,(a5)
0000829E 0A85 1000 1000             		eori.l	#$10001000,d5
000082A4 2C85                       		move.l	d5,(a6)
000082A6 4E75                       		rts	
000082A8                            ; ===========================================================================
000082A8                            
000082A8                            DrawFlipXY:
000082A8 2A80                       		move.l	d0,(a5)
000082AA 2A19                       		move.l	(a1)+,d5
000082AC 2819                       		move.l	(a1)+,d4
000082AE 0A84 1800 1800             		eori.l	#$18001800,d4
000082B4 4844                       		swap	d4
000082B6 2C84                       		move.l	d4,(a6)
000082B8 D087                       		add.l	d7,d0
000082BA 2A80                       		move.l	d0,(a5)
000082BC 0A85 1800 1800             		eori.l	#$18001800,d5
000082C2 4845                       		swap	d5
000082C4 2C85                       		move.l	d5,(a6)
000082C6 4E75                       		rts	
000082C8                            ; End of function DrawBlocks
000082C8                            
000082C8                            ; ===========================================================================
000082C8                            ; unused garbage
000082C8                            
000082C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082C8                            
000082C8                            ; Gets address of block at a certain coordinate
000082C8                            ; Parameters:
000082C8                            ; a4 = Pointer to level layout
000082C8                            ; d4 = Relative Y coordinate
000082C8                            ; d5 = Relative X coordinate
000082C8                            ; Returns:
000082C8                            ; a0 = Address of block metadata
000082C8                            ; a1 = Address of block
000082C8                            ; DrawBlocks:
000082C8                            GetBlockData:
000082C8 DA53                       			add.w	(a3),d5
000082CA                            	GetBlockData_2:
000082CA D86B 0004                  			add.w	4(a3),d4
000082CE 43F8 B000                  			lea	(v_16x16).w,a1
000082D2                            		; Turn Y coordinate into index into level layout
000082D2 3604                       		move.w	d4,d3
000082D4 E24B                       		lsr.w	#1,d3
000082D6 0243 0380                  		andi.w	#$380,d3
000082DA                            		; Turn X coordinate into index into level layout
000082DA E64D                       		lsr.w	#3,d5
000082DC 3005                       		move.w	d5,d0
000082DE EA48                       		lsr.w	#5,d0
000082E0 0240 007F                  		andi.w	#$7F,d0
000082E4                            		; Get chunk from level layout
000082E4 D043                       		add.w	d3,d0
000082E6 76FF                       		moveq	#-1,d3
000082E8 1634 0000                  		move.b	(a4,d0.w),d3
000082EC 6700                       		beq.s	locret_6C1E	; If chunk 00, just return a pointer to the first block (expected to be empty)
000082EE                            		; Turn chunk ID into index into chunk table
000082EE 5303                       		subq.b	#1,d3
000082F0 0243 007F                  		andi.w	#$7F,d3
000082F4 EE5B                       		ror.w	#7,d3
000082F6                            		; Turn Y coordinate into index into chunk
000082F6 D844                       		add.w	d4,d4
000082F8 0244 01E0                  		andi.w	#$1E0,d4
000082FC                            		; Turn X coordinate into index into chunk
000082FC 0245 001E                  		andi.w	#$1E,d5
00008300                            		; Get block metadata from chunk
00008300 D644                       		add.w	d4,d3
00008302 D645                       		add.w	d5,d3
00008304 2043                       		movea.l	d3,a0
00008306 3610                       		move.w	(a0),d3
00008308                            		; Turn block ID into address
00008308 0243 03FF                  		andi.w	#$3FF,d3
0000830C E74B                       		lsl.w	#3,d3
0000830E D2C3                       		adda.w	d3,a1
00008310                            
00008310                            locret_6C1E:
00008310 4E75                       		rts	
00008312                            ; End of function GetBlockData
00008312                            
00008312                            
00008312                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008312                            
00008312                            ; Produces a VRAM plane access command from coordinates
00008312                            ; Parameters:
00008312                            ; d4 = Relative Y coordinate
00008312                            ; d5 = Relative X coordinate
00008312                            ; Returns VDP command in d0
00008312                            Calc_VRAM_Pos:
00008312 DA53                       			add.w	(a3),d5
00008314                            	Calc_VRAM_Pos_2:
00008314 D86B 0004                  			add.w	4(a3),d4
00008318                            		; Floor the coordinates to the nearest pair of tiles (the size of a block).
00008318                            		; Also note that this wraps the value to the size of the plane:
00008318                            		; The plane is 64*8 wide, so wrap at $100, and it's 32*8 tall, so wrap at $200
00008318 0244 00F0                  		andi.w	#$F0,d4
0000831C 0245 01F0                  		andi.w	#$1F0,d5
00008320                            		; Transform the adjusted coordinates into a VDP command
00008320 E94C                       		lsl.w	#4,d4
00008322 E44D                       		lsr.w	#2,d5
00008324 D845                       		add.w	d5,d4
00008326 7003                       		moveq	#3,d0	; Highest bits of plane VRAM address
00008328 4840                       		swap	d0
0000832A 3004                       		move.w	d4,d0
0000832C 4E75                       		rts	
0000832E                            ; End of function Calc_VRAM_Pos
0000832E                            
0000832E                            
0000832E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000832E                            ; not used
0000832E                            
0000832E                            ; This is just like Calc_VRAM_Pos, but seemingly for an earlier
0000832E                            ; VRAM layout: the only difference is the high bits of the
0000832E                            ; plane's VRAM address, which are 10 instead of 11.
0000832E                            ; Both the foreground and background are at $C000 and $E000
0000832E                            ; respectively, so this one starting at $8000 makes no sense.
0000832E                            ; sub_6C3C:
0000832E                            Calc_VRAM_Pos_Unknown:
0000832E D86B 0004                  		add.w	4(a3),d4
00008332 DA53                       		add.w	(a3),d5
00008334 0244 00F0                  		andi.w	#$F0,d4
00008338 0245 01F0                  		andi.w	#$1F0,d5
0000833C E94C                       		lsl.w	#4,d4
0000833E E44D                       		lsr.w	#2,d5
00008340 D845                       		add.w	d5,d4
00008342 7002                       		moveq	#2,d0
00008344 4840                       		swap	d0
00008346 3004                       		move.w	d4,d0
00008348 4E75                       		rts	
0000834A                            ; End of function Calc_VRAM_Pos_Unknown
0000834A                            
0000834A                            ; ---------------------------------------------------------------------------
0000834A                            ; Subroutine to	load tiles as soon as the level	appears
0000834A                            ; ---------------------------------------------------------------------------
0000834A                            
0000834A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000834A                            
0000834A                            
0000834A                            LoadTilesFromStart:
0000834A 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00008350 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00008356 47F8 F700                  		lea	(v_screenposx).w,a3
0000835A 49F8 A400                  		lea	(v_lvllayout).w,a4
0000835E 343C 4000                  		move.w	#$4000,d2
00008362 6100                       		bsr.s	DrawChunks
00008364 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00008368 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
0000836C 343C 6000                  		move.w	#$6000,d2
00008370 4A38 FE10                  			tst.b	(v_zone).w
00008374 6700 0000                  			beq.w	Draw_GHz_Bg
00008378 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
0000837E 6700 0000                  			beq.w	Draw_Mz_Bg
00008382 0C78 0500 FE10             			cmpi.w	#(id_SBZ<<8)+0,(v_zone).w
00008388 6700 0000                  			beq.w	Draw_SBz_Bg
0000838C 0C38 0006 FE10             			cmpi.b	#id_EndZ,(v_zone).w
00008392 6700 0000                  			beq.w	Draw_GHz_Bg
00008396                            ; End of function LoadTilesFromStart
00008396                            
00008396                            
00008396                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008396                            
00008396                            
00008396                            DrawChunks:
00008396 78F0                       		moveq	#-16,d4
00008398 7C0F                       		moveq	#((224+16+16)/16)-1,d6
0000839A                            
0000839A                            	@loop:
0000839A 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000839E 7A00                       		moveq	#0,d5
000083A0 3204                       		move.w	d4,d1
000083A2 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
000083A6 3801                       		move.w	d1,d4
000083A8 7A00                       		moveq	#0,d5
000083AA 7C1F                       		moveq	#(512/16)-1,d6
000083AC 6100 FE1A                  		bsr.w	DrawBlocks_LR_2
000083B0 4CDF 0070                  		movem.l	(sp)+,d4-d6
000083B4 0644 0010                  		addi.w	#16,d4
000083B8 51CE FFE0                  		dbf	d6,@loop
000083BC 4E75                       		rts	
000083BE                            ; End of function DrawChunks
000083BE                            
000083BE                            	Draw_GHz_Bg:
000083BE 7800                       			moveq	#0,d4
000083C0 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000083C2                            	locj_7224:			
000083C2 48E7 0E00                  			movem.l	d4-d6,-(sp)
000083C6 41F9 0000 0000             			lea	(locj_724a),a0
000083CC 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000083D0 D044                       			add.w	d4,d0
000083D2 0240 00F0                  			andi.w	#$F0,d0
000083D6 6100 0000                  			bsr.w	locj_72Ba
000083DA 4CDF 0070                  			movem.l	(sp)+,d4-d6
000083DE 0644 0010                  			addi.w	#16,d4
000083E2 51CE FFDE                  			dbf	d6,locj_7224
000083E6 4E75                       			rts
000083E8                            	locj_724a:
000083E8 0000 0000 0606 0604 0404+  			dc.b $00,$00,$00,$00,$06,$06,$06,$04,$04,$04,$00,$00,$00,$00,$00,$00
000083F8                            ;-------------------------------------------------------------------------------
000083F8                            	Draw_Mz_Bg:;locj_725a:
000083F8 78F0                       			moveq	#-16,d4
000083FA 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000083FC                            	locj_725E:			
000083FC 48E7 0E00                  			movem.l	d4-d6,-(sp)
00008400 41FA FC8F                  			lea	(locj_6EF2+1),a0
00008404 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008408 0440 0200                  			subi.w	#$200,d0
0000840C D044                       			add.w	d4,d0
0000840E 0240 07F0                  			andi.w	#$7F0,d0
00008412 6100 0000                  			bsr.w	locj_72Ba
00008416 4CDF 0070                  			movem.l	(sp)+,d4-d6
0000841A 0644 0010                  			addi.w	#16,d4
0000841E 51CE FFDC                  			dbf	d6,locj_725E
00008422 4E75                       			rts
00008424                            ;-------------------------------------------------------------------------------
00008424                            	Draw_SBz_Bg:;locj_7288:
00008424 78F0                       			moveq	#-16,d4
00008426 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008428                            	locj_728C:			
00008428 48E7 0E00                  			movem.l	d4-d6,-(sp)
0000842C 41F8 7F93                  			lea	(locj_6DF4+1),a0
00008430 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008434 D044                       			add.w	d4,d0
00008436 0240 01F0                  			andi.w	#$1F0,d0
0000843A 6100 0000                  			bsr.w	locj_72Ba
0000843E 4CDF 0070                  			movem.l	(sp)+,d4-d6
00008442 0644 0010                  			addi.w	#16,d4
00008446 51CE FFE0                  			dbf	d6,locj_728C
0000844A 4E75                       			rts
0000844C                            ;-------------------------------------------------------------------------------
0000844C                            	locj_72B2:
0000844C F708 F708 F710 F718        			dc.w v_bgscreenposx, v_bgscreenposx, v_bg2screenposx, v_bg3screenposx
00008454                            	locj_72Ba:
00008454 E848                       			lsr.w	#4,d0
00008456 1030 0000                  			move.b	(a0,d0.w),d0
0000845A 367B 00F0                  			movea.w	locj_72B2(pc,d0.w),a3
0000845E 6700                       			beq.s	locj_72da
00008460 7AF0                       			moveq	#-16,d5
00008462 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008466 6100 FEAA                  			bsr.w	Calc_VRAM_Pos
0000846A 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000846E 6100 FD56                  			bsr.w	DrawBlocks_LR
00008472 6000                       			bra.s	locj_72EE
00008474                            	locj_72da:
00008474 7A00                       			moveq	#0,d5
00008476 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000847A 6100 FE98                  			bsr.w	Calc_VRAM_Pos_2
0000847E 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008482 7C1F                       			moveq	#(512/16)-1,d6
00008484 6100 FD6C                  			bsr.w	DrawBlocks_LR_3
00008488                            	locj_72EE:
00008488 4E75                       			rts
0000848A                            
0000848A                            ; ---------------------------------------------------------------------------
0000848A                            ; Subroutine to load basic level data
0000848A                            ; ---------------------------------------------------------------------------
0000848A                            
0000848A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000848A                            
0000848A                            
0000848A                            LevelDataLoad:
0000848A 7000                       		moveq	#0,d0
0000848C 1038 FE10                  		move.b	(v_zone).w,d0
00008490 E948                       		lsl.w	#4,d0
00008492 45F9 0000 0000             		lea	(LevelHeaders).l,a2
00008498 45F2 0000                  		lea	(a2,d0.w),a2
0000849C 2F0A                       		move.l	a2,-(sp)
0000849E 588A                       		addq.l	#4,a2
000084A0 205A                       		movea.l	(a2)+,a0
000084A2 43F8 B000                  		lea	(v_16x16).w,a1	; RAM address for 16x16 mappings
000084A6 303C 0000                  		move.w	#0,d0
000084AA 6100 942C                  		bsr.w	EniDec
000084AE 205A                       		movea.l	(a2)+,a0
000084B0 43F9 00FF 0000             		lea	(v_256x256).l,a1 ; RAM address for 256x256 mappings
000084B6 6100 959E                  		bsr.w	KosDec
000084BA 6100 0000                  		bsr.w	LevelLayoutLoad
000084BE 301A                       		move.w	(a2)+,d0
000084C0 3012                       		move.w	(a2),d0
000084C2 0240 00FF                  		andi.w	#$FF,d0
000084C6 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; is level SBZ3 (LZ4) ?
000084CC 6600                       		bne.s	@notSBZ3	; if not, branch
000084CE 700C                       		moveq	#palid_SBZ3,d0	; use SB3 palette
000084D0                            
000084D0                            	@notSBZ3:
000084D0 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2?
000084D6 6700                       		beq.s	@isSBZorFZ	; if yes, branch
000084D8 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; is level FZ?
000084DE 6600                       		bne.s	@normalpal	; if not, branch
000084E0                            
000084E0                            	@isSBZorFZ:
000084E0 700E                       		moveq	#palid_SBZ2,d0	; use SBZ2/FZ palette
000084E2                            
000084E2                            	@normalpal:
000084E2 6100 A120                  		bsr.w	PalLoad1	; load palette (based on d0)
000084E6 245F                       		movea.l	(sp)+,a2
000084E8 584A                       		addq.w	#4,a2		; read number for 2nd PLC
000084EA 7000                       		moveq	#0,d0
000084EC 1012                       		move.b	(a2),d0
000084EE 6700                       		beq.s	@skipPLC	; if 2nd PLC is 0 (i.e. the ending sequence), branch
000084F0 6100 9248                  		bsr.w	AddPLC		; load pattern load cues
000084F4                            
000084F4                            	@skipPLC:
000084F4 4E75                       		rts	
000084F6                            ; End of function LevelDataLoad
000084F6                            
000084F6                            ; ---------------------------------------------------------------------------
000084F6                            ; Level	layout loading subroutine
000084F6                            ; ---------------------------------------------------------------------------
000084F6                            
000084F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084F6                            
000084F6                            
000084F6                            LevelLayoutLoad:
000084F6 47F8 A400                  		lea	(v_lvllayout).w,a3
000084FA 323C 01FF                  		move.w	#$1FF,d1
000084FE 7000                       		moveq	#0,d0
00008500                            
00008500                            LevLoad_ClrRam:
00008500 26C0                       		move.l	d0,(a3)+
00008502 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($A400-A7FF)
00008506                            
00008506 47F8 A400                  		lea	(v_lvllayout).w,a3 ; RAM address for level layout
0000850A 7200                       		moveq	#0,d1
0000850C 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00008510 47F8 A440                  		lea	(v_lvllayout+$40).w,a3 ; RAM address for background layout
00008514 7202                       		moveq	#2,d1
00008516                            ; End of function LevelLayoutLoad
00008516                            
00008516                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00008516                            
00008516                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008516                            
00008516                            
00008516                            LevelLayoutLoad2:
00008516 3038 FE10                  		move.w	(v_zone).w,d0
0000851A ED08                       		lsl.b	#6,d0
0000851C EA48                       		lsr.w	#5,d0
0000851E 3400                       		move.w	d0,d2
00008520 D040                       		add.w	d0,d0
00008522 D042                       		add.w	d2,d0
00008524 D041                       		add.w	d1,d0
00008526 43F9 0000 0000             		lea	(Level_Index).l,a1
0000852C 3031 0000                  		move.w	(a1,d0.w),d0
00008530 43F1 0000                  		lea	(a1,d0.w),a1
00008534 7200                       		moveq	#0,d1
00008536 3401                       		move.w	d1,d2
00008538 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
0000853A 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
0000853C                            
0000853C                            LevLoad_NumRows:
0000853C 3001                       		move.w	d1,d0
0000853E 204B                       		movea.l	a3,a0
00008540                            
00008540                            LevLoad_Row:
00008540 10D9                       		move.b	(a1)+,(a0)+
00008542 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00008546 47EB 0080                  		lea	$80(a3),a3	; do next row
0000854A 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
0000854E 4E75                       		rts	
00008550                            ; End of function LevelLayoutLoad2
00008550                            
00008550                            		include	"_inc\DynamicLevelEvents.asm"
00008550                            ; ---------------------------------------------------------------------------
00008550                            ; Dynamic level events
00008550                            ; ---------------------------------------------------------------------------
00008550                            
00008550                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008550                            
00008550                            
00008550                            DynamicLevelEvents:
00008550 7000                       		moveq	#0,d0
00008552 1038 FE10                  		move.b	(v_zone).w,d0
00008556 D040                       		add.w	d0,d0
00008558 303B 0000                  		move.w	DLE_Index(pc,d0.w),d0
0000855C 4EBB 0000                  		jsr	DLE_Index(pc,d0.w) ; run level-specific events
00008560 7202                       		moveq	#2,d1
00008562 3038 F726                  		move.w	(v_limitbtm1).w,d0
00008566 9078 F72E                  		sub.w	(v_limitbtm2).w,d0 ; has lower level boundary changed recently?
0000856A 6700                       		beq.s	DLE_NoChg	; if not, branch
0000856C 6400                       		bcc.s	loc_6DAC
0000856E                            
0000856E 4441                       		neg.w	d1
00008570 3038 F704                  		move.w	(v_screenposy).w,d0
00008574 B078 F726                  		cmp.w	(v_limitbtm1).w,d0
00008578 6300                       		bls.s	loc_6DA0
0000857A 31C0 F72E                  		move.w	d0,(v_limitbtm2).w
0000857E 0278 FFFE F72E             		andi.w	#$FFFE,(v_limitbtm2).w
00008584                            
00008584                            loc_6DA0:
00008584 D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008588 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
0000858E                            
0000858E                            DLE_NoChg:
0000858E 4E75                       		rts	
00008590                            ; ===========================================================================
00008590                            
00008590                            loc_6DAC:
00008590 3038 F704                  		move.w	(v_screenposy).w,d0
00008594 5040                       		addq.w	#8,d0
00008596 B078 F72E                  		cmp.w	(v_limitbtm2).w,d0
0000859A 6500                       		bcs.s	loc_6DC4
0000859C 0838 0001 D022             		btst	#1,(v_player+obStatus).w
000085A2 6700                       		beq.s	loc_6DC4
000085A4 D241                       		add.w	d1,d1
000085A6 D241                       		add.w	d1,d1
000085A8                            
000085A8                            loc_6DC4:
000085A8 D378 F72E                  		add.w	d1,(v_limitbtm2).w
000085AC 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
000085B2 4E75                       		rts	
000085B4                            ; End of function DynamicLevelEvents
000085B4                            
000085B4                            ; ===========================================================================
000085B4                            ; ---------------------------------------------------------------------------
000085B4                            ; Offset index for dynamic level events
000085B4                            ; ---------------------------------------------------------------------------
000085B4 0000 0000                  DLE_Index:	dc.w DLE_GHZ-DLE_Index, DLE_LZ-DLE_Index
000085B8 0000 0000                  		dc.w DLE_MZ-DLE_Index, DLE_SLZ-DLE_Index
000085BC 0000 0000                  		dc.w DLE_SYZ-DLE_Index, DLE_SBZ-DLE_Index
000085C0 0000                       		dc.w DLE_Ending-DLE_Index
000085C2                            ; ===========================================================================
000085C2                            ; ---------------------------------------------------------------------------
000085C2                            ; Green	Hill Zone dynamic level events
000085C2                            ; ---------------------------------------------------------------------------
000085C2                            
000085C2                            DLE_GHZ:
000085C2 7000                       		moveq	#0,d0
000085C4 1038 FE11                  		move.b	(v_act).w,d0
000085C8 D040                       		add.w	d0,d0
000085CA 303B 0000                  		move.w	DLE_GHZx(pc,d0.w),d0
000085CE 4EFB 0000                  		jmp	DLE_GHZx(pc,d0.w)
000085D2                            ; ===========================================================================
000085D2 0000                       DLE_GHZx:	dc.w DLE_GHZ1-DLE_GHZx
000085D4 0000                       		dc.w DLE_GHZ2-DLE_GHZx
000085D6 0000                       		dc.w DLE_GHZ3-DLE_GHZx
000085D8                            ; ===========================================================================
000085D8                            
000085D8                            DLE_GHZ1:
000085D8 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
000085DE 6600                       		bne.s	gohere
000085E0 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
000085E6 4E75                       		rts
000085E8                            gohere:
000085E8 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
000085EE 0C78 1680 F700             		cmpi.w	#$1680,(v_screenposx).w ; has the camera reached $1780 on x-axis?
000085F4 6500                       		bcs.s	locret_6E08	; if not, branch
000085F6 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w ; set lower y-boundary
000085FC                            
000085FC                            locret_6E08:
000085FC 4E75                       		rts	
000085FE                            ; ===========================================================================
000085FE                            
000085FE                            DLE_GHZ2:
000085FE 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008604 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
0000860A 6500                       		bcs.s	locret_6E3A
0000860C 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
00008612 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008618 6500                       		bcs.s	locret_6E3A
0000861A 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008620 6500                       		bcs.s	loc_6E9A
00008622 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
00008628 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
0000862E 6400                       		bcc.s	loc_6E8F
00008630 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
00008636 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
0000863C                            
0000863C                            loc_6E8F:
0000863C 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008642 6400                       		bcc.s	loc_6E9A
00008644                            
00008644                            locret_6E3A:
00008644 4E75                       		rts	
00008646                            ; ===========================================================================
00008646                            
00008646                            loc_6E9A:
00008646 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
0000864C 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008650 4E75                       		rts		
00008652                            ; ===========================================================================
00008652                            
00008652                            DLE_GHZ3:
00008652 7000                       		moveq	#0,d0
00008654 1038 F742                  		move.b	(v_dle_routine).w,d0
00008658 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
0000865C 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00008660                            ; ===========================================================================
00008660 0000                       off_6E4A:	dc.w DLE_GHZ3main-off_6E4A
00008662 0000                       		dc.w DLE_GHZ3boss-off_6E4A
00008664 0000                       		dc.w DLE_GHZ3end-off_6E4A
00008666                            ; ===========================================================================
00008666                            
00008666                            DLE_GHZ3main:
00008666 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
0000866C 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
00008672 6500                       		bcs.s	locret_6E96
00008674 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
0000867A 0C78 0860 F700             		cmpi.w	#$860,(v_screenposx).w
00008680 6500                       		bcs.s	locret_6E96
00008682 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008688 6500                       		bcs.s	loc_6E98
0000868A 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
00008690 0C78 1380 F700             		cmpi.w	#$1380,(v_screenposx).w
00008696 6400                       		bcc.s	loc_6E8E
00008698 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
0000869E 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
000086A4                            
000086A4                            loc_6E8E:
000086A4 0C78 1300 F700             		cmpi.w	#$1300,(v_screenposx).w
000086AA 6400                       		bcc.s	loc_6E98
000086AC                            
000086AC                            locret_6E96:
000086AC 4E75                       		rts	
000086AE                            ; ===========================================================================
000086AE                            
000086AE                            loc_6E98:
000086AE 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000086B4 5438 F742                  		addq.b	#2,(v_dle_routine).w
000086B8 4E75                       		rts	
000086BA                            ; ===========================================================================
000086BA                            
000086BA                            DLE_GHZ3boss:
000086BA 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
000086C0 6400                       		bcc.s	loc_6EB0
000086C2 5538 F742                  		subq.b	#2,(v_dle_routine).w
000086C6                            
000086C6                            loc_6EB0:
000086C6 0C78 2960 F700             		cmpi.w	#$2960,(v_screenposx).w
000086CC 6500                       		bcs.s	locret_6EE8
000086CE 6100 0000                  		bsr.w	FindFreeObj
000086D2 6600                       		bne.s	loc_6ED0
000086D4 12BC 0000                  		move.b	#id_BossGreenHill,0(a1) ; load GHZ boss	object
000086D8 337C 2A60 0008             		move.w	#$2A60,obX(a1)
000086DE 337C 0280 000C             		move.w	#$280,obY(a1)
000086E4                            
000086E4                            loc_6ED0:
000086EC 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000086F2 5438 F742                  		addq.b	#2,(v_dle_routine).w
000086F6 7000                       		moveq	#plcid_Boss,d0
000086F8 6000 9040                  		bra.w	AddPLC		; load boss patterns
000086FC                            ; ===========================================================================
000086FC                            
000086FC                            locret_6EE8:
000086FC 4E75                       		rts	
000086FE                            ; ===========================================================================
000086FE                            
000086FE                            DLE_GHZ3end:
000086FE 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008704 4E75                       		rts	
00008706                            ; ===========================================================================
00008706                            ; ---------------------------------------------------------------------------
00008706                            ; Labyrinth Zone dynamic level events
00008706                            ; ---------------------------------------------------------------------------
00008706                            
00008706                            DLE_LZ:
00008706 7000                       		moveq	#0,d0
00008708 1038 FE11                  		move.b	(v_act).w,d0
0000870C D040                       		add.w	d0,d0
0000870E 303B 0000                  		move.w	DLE_LZx(pc,d0.w),d0
00008712 4EFB 0000                  		jmp	DLE_LZx(pc,d0.w)
00008716                            ; ===========================================================================
00008716 0000                       DLE_LZx:	dc.w DLE_LZ12-DLE_LZx
00008718 0000                       		dc.w DLE_LZ12-DLE_LZx
0000871A 0000                       		dc.w DLE_LZ3-DLE_LZx
0000871C 0000                       		dc.w DLE_SBZ3-DLE_LZx
0000871E                            ; ===========================================================================
0000871E                            
0000871E                            DLE_LZ12:
0000871E 4E75                       		rts	
00008720                            ; ===========================================================================
00008720                            
00008720                            DLE_LZ3:
00008720 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch $F	been pressed?
00008724 6700                       		beq.s	loc_6F28	; if not, branch
00008726 43F8 A506                  		lea	(v_lvllayout+$106).w,a1
0000872A 0C11 0007                  		cmpi.b	#7,(a1)
0000872E 6700                       		beq.s	loc_6F28
00008730 12BC 0007                  		move.b	#7,(a1)		; modify level layout
0000873C                            
0000873C                            loc_6F28:
0000873C 4A38 F742                  		tst.b	(v_dle_routine).w
00008740 6600                       		bne.s	locret_6F64
00008742 0C78 1CA0 F700             		cmpi.w	#$1CA0,(v_screenposx).w
00008748 6500                       		bcs.s	locret_6F62
0000874A 0C78 0600 F704             		cmpi.w	#$600,(v_screenposy).w
00008750 6400                       		bcc.s	locret_6F62
00008752 6100 0000                  		bsr.w	FindFreeObj
00008756 6600                       		bne.s	loc_6F4A
00008758 12BC 0000                  		move.b	#id_BossLabyrinth,0(a1) ; load LZ boss object
0000875C                            
0000875C                            loc_6F4A:
00008764 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
0000876A 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000876E 7000                       		moveq	#plcid_Boss,d0
00008770 6000 8FC8                  		bra.w	AddPLC		; load boss patterns
00008774                            ; ===========================================================================
00008774                            
00008774                            locret_6F62:
00008774 4E75                       		rts	
00008776                            ; ===========================================================================
00008776                            
00008776                            locret_6F64:
00008776 4E75                       		rts	
00008778                            ; ===========================================================================
00008778                            
00008778                            DLE_SBZ3:
00008778 4A38 F742                          tst.b	(v_dle_routine).w
0000877C 6600                               bne.s   loc_6C28
0000877E 4A38 F7E1                  		tst.b	(f_switch+$1).w	; has switch $F	been pressed?
00008782 6700                       		beq.s	loc_6C28	; if not, branch
0000878C 11FC 0001 F742             		move.b	#1, (v_dle_routine).w
00008792                            loc_6C28:
00008792 0C78 0D00 F700             		cmpi.w	#$D00,(v_screenposx).w
00008798 6500                       		bcs.s	locret_6F8C
0000879A 0C78 0018 D00C             		cmpi.w	#$18,(v_player+obY).w ; has Sonic reached the top of the level?
000087A0 6400                       		bcc.s	locret_6F8C	; if not, branch
000087A2 4238 FE30                  		clr.b	(v_lastlamp).w
000087A6 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
000087AC 31FC 0502 FE10             		move.w	#(id_SBZ<<8)+2,(v_zone).w ; set level number to 0502 (FZ)
000087B2 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; freeze Sonic
000087B8                            
000087B8                            locret_6F8C:
000087B8 4E75                       		rts	
000087BA                            ; ===========================================================================
000087BA                            ; ---------------------------------------------------------------------------
000087BA                            ; Marble Zone dynamic level events
000087BA                            ; ---------------------------------------------------------------------------
000087BA                            
000087BA                            DLE_MZ:
000087BA 7000                       		moveq	#0,d0
000087BC 1038 FE11                  		move.b	(v_act).w,d0
000087C0 D040                       		add.w	d0,d0
000087C2 303B 0000                  		move.w	DLE_MZx(pc,d0.w),d0
000087C6 4EFB 0000                  		jmp	DLE_MZx(pc,d0.w)
000087CA                            ; ===========================================================================
000087CA 0000                       DLE_MZx:	dc.w DLE_MZ1-DLE_MZx
000087CC 0000                       		dc.w DLE_MZ2-DLE_MZx
000087CE 0000                       		dc.w DLE_MZ3-DLE_MZx
000087D0                            ; ===========================================================================
000087D0                            
000087D0                            DLE_MZ1:
000087D0 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
000087D6 0C78 1F40 F700             		cmpi.w	#$1F40,(v_screenposx).w
000087DC 6500                       		bcs.s	locret_6FE8
000087DE 31FC 0220 F726             		move.w	#$220,(v_limitbtm1).w
000087E4                            
000087E4                            locret_6FE8:
000087E4 4E75                       		rts	
000087E6                            
000087E6                            ; ===========================================================================
000087E6                            
000087E6                            DLE_MZ2:
000087E6 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
000087EC 0C78 2110 F700             		cmpi.w	#$2110,(v_screenposx).w
000087F2 6500                       		bcs.s	locret_6FE9
000087F4 31FC 0110 F726             		move.w	#$110,(v_limitbtm1).w
000087FA                            		
000087FA                            locret_6FE9:
000087FA 4E75                       		rts	
000087FC                            ; ===========================================================================
000087FC                            
000087FC                            DLE_MZ3:
000087FC 7000                       		moveq	#0,d0
000087FE 1038 F742                  		move.b	(v_dle_routine).w,d0
00008802 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00008806 4EFB 0000                  		jmp	off_7098(pc,d0.w)
0000880A                            ; ===========================================================================
0000880A 0000                       off_7098:	dc.w DLE_MZ3boss-off_7098
0000880C 0000                       		dc.w DLE_MZ3cutscene-off_7098
0000880E 0000                       		dc.w DLE_MZ3boss2-off_7098
00008810 0000                       		dc.w DLE_MZ3end-off_7098
00008812                            ; ===========================================================================
00008812                            
00008812                            DLE_MZ3boss:
00008812 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008818 0C78 0E00 F700             		cmpi.w	#$0E00,(v_screenposx).w
0000881E 6500                       		bcs.s	locret_70E8
00008820 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008826 0C78 17F0 F700             		cmpi.w	#$17F0,(v_screenposx).w
0000882C 6500                       		bcs.s	locret_70E8
0000882E 6100 0000                  		bsr.w	FindFreeObj
00008832 6600                       		bne.s	loc_70D0
00008834 12BC 0000                  		move.b	#id_BossMarble,0(a1) ; load MZ boss object
00008838 337C 19F0 0008             		move.w	#$19F0,obX(a1)
0000883E 337C 022C 000C             		move.w	#$22C,obY(a1)
00008844                            
00008844                            loc_70D0:
0000884C 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008852 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008856 7000                       		moveq	#plcid_Boss,d0
00008858 6000 8EE0                  		bra.w	AddPLC		; load boss patterns
0000885C                            ; ===========================================================================
0000885C                            
0000885C                            locret_70E8:
0000885C 4E75                       		rts	
0000885E                            		
0000885E                            DLE_MZ3cutscene:
0000885E 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008864 0C78 19B0 F700             		cmpi.w	#$19B0,(v_screenposx).w
0000886A 6500                       		bcs.s	locret_8298
0000886C 6100 0000                  		bsr.w	FindFreeObj
00008870 6600                       		bne.s	locret_8298
00008872 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
00008876 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000887A 7000                       		moveq	#plcid_EggmanSBZ2,d0
0000887C 6000 8EBC                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008880                            ; ===========================================================================
00008880                            
00008880                            locret_8298:
00008880 4E75                       		rts	
00008882                            ; ===========================================================================
00008882                            
00008882                            DLE_MZ3boss2:
00008882 0C78 1A60 F700             		cmpi.w	#$1A60,(v_screenposx).w
00008888 6500                       		bcs.s	loc_72C6
0000888A 6100 0000                  		bsr.w	FindFreeObj
0000888E 6600                       		bne.s	loc_72C0
00008890 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008894 5438 F742                  		addq.b	#2,(v_dle_routine).w
000088A0                            
000088A0                            loc_72C0:
000088A0 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000088A6                            
000088A6                            loc_72C6:
000088A6 6000                       		bra.s	loc_72D2
000088A8                            ; ===========================================================================
000088A8                            
000088A8                            DLE_MZ3end:
000088A8 0C78 1B50 F700             		cmpi.w	#$1B50,(v_screenposx).w
000088AE 6500                       		bcs.s	loc_72D2
000088B0 4E75                       		rts	
000088B2                            ; ===========================================================================
000088B2                            
000088B2                            loc_72D2:
000088B2 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
000088B8 4E75                       		rts
000088BA                            
000088BA                            
000088BA                            ; ===========================================================================
000088BA                            ; ---------------------------------------------------------------------------
000088BA                            ; Star Light Zone dynamic level events
000088BA                            ; ---------------------------------------------------------------------------
000088BA                            
000088BA                            DLE_SLZ:
000088BA 7000                       		moveq	#0,d0
000088BC 1038 FE11                  		move.b	(v_act).w,d0
000088C0 D040                       		add.w	d0,d0
000088C2 303B 0000                  		move.w	DLE_SLZx(pc,d0.w),d0
000088C6 4EFB 0000                  		jmp	DLE_SLZx(pc,d0.w)
000088CA                            ; ===========================================================================
000088CA 0000                       DLE_SLZx:	dc.w DLE_SLZ12-DLE_SLZx
000088CC 0000                       		dc.w DLE_SLZ12-DLE_SLZx
000088CE 0000                       		dc.w DLE_SLZ3-DLE_SLZx
000088D0                            ; ===========================================================================
000088D0                            
000088D0                            DLE_SLZ12:
000088D0 4E75                       		rts	
000088D2                            ; ===========================================================================
000088D2                            
000088D2                            DLE_SLZ3:
000088D2 7000                       		moveq	#0,d0
000088D4 1038 F742                  		move.b	(v_dle_routine).w,d0
000088D8 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000088DC 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000088E0                            ; ===========================================================================
000088E0 0000                       off_7118:	dc.w DLE_SLZ3main-off_7118
000088E2 0000                       		dc.w DLE_SLZ3boss-off_7118
000088E4 0000                       		dc.w DLE_SLZ3end-off_7118
000088E6                            ; ===========================================================================
000088E6                            
000088E6                            DLE_SLZ3main:
000088E6 0C78 1E70 F700             		cmpi.w	#$1E70,(v_screenposx).w
000088EC 6500                       		bcs.s	locret_7130
000088EE 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
000088F4 5438 F742                  		addq.b	#2,(v_dle_routine).w
000088F8                            
000088F8                            locret_7130:
000088F8 4E75                       		rts	
000088FA                            ; ===========================================================================
000088FA                            
000088FA                            DLE_SLZ3boss:
000088FA 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008900 6500                       		bcs.s	locret_715C
00008902 6100 0000                  		bsr.w	FindFreeObj
00008906 6600                       		bne.s	loc_7144
00008908 12BC 0000                  		move.b	#id_BossStarLight,(a1) ; load SLZ boss object
0000890C                            
0000890C                            loc_7144:
00008914 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
0000891A 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000891E 7000                       		moveq	#plcid_Boss,d0
00008920 6000 8E18                  		bra.w	AddPLC		; load boss patterns
00008924                            ; ===========================================================================
00008924                            
00008924                            locret_715C:
00008924 4E75                       		rts	
00008926                            ; ===========================================================================
00008926                            
00008926                            DLE_SLZ3end:
00008926 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
0000892C 4E75                       		rts
0000892E 4E75                       		rts
00008930                            ; ===========================================================================
00008930                            ; ---------------------------------------------------------------------------
00008930                            ; Spring Yard Zone dynamic level events
00008930                            ; ---------------------------------------------------------------------------
00008930                            
00008930                            DLE_SYZ:
00008930 7000                       		moveq	#0,d0
00008932 1038 FE11                  		move.b	(v_act).w,d0
00008936 D040                       		add.w	d0,d0
00008938 303B 0000                  		move.w	DLE_SYZx(pc,d0.w),d0
0000893C 4EFB 0000                  		jmp	DLE_SYZx(pc,d0.w)
00008940                            ; ===========================================================================
00008940 0000                       DLE_SYZx:	dc.w DLE_SYZ1-DLE_SYZx
00008942 0000                       		dc.w DLE_SYZ2-DLE_SYZx
00008944 0000                       		dc.w DLE_SYZ3-DLE_SYZx
00008946                            ; ===========================================================================
00008946                            
00008946                            DLE_SYZ1:
00008946 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
0000894C 0C78 1600 F700             		cmpi.w	#$1600,(v_screenposx).w
00008952 6500                       		bcs.s	locret_71A2
00008954 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
0000895A 4E75                       		rts	
0000895C                            ; ===========================================================================
0000895C                            
0000895C                            DLE_SYZ2:
0000895C 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008962 0C78 25A0 F700             		cmpi.w	#$25A0,(v_screenposx).w
00008968 6500                       		bcs.s	locret_71A2
0000896A 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
00008970 0C78 04D0 D00C             		cmpi.w	#$4D0,(v_player+obY).w
00008976 6500                       		bcs.s	locret_71A2
00008978 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
0000897E                            
0000897E                            locret_71A2:
0000897E 4E75                       		rts	
00008980                            ; ===========================================================================
00008980                            
00008980                            DLE_SYZ3:
00008980 7000                       		moveq	#0,d0
00008982 1038 F742                  		move.b	(v_dle_routine).w,d0
00008986 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
0000898A 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
0000898E                            ; ===========================================================================
0000898E 0000                       off_71B2:	dc.w DLE_SYZ3main-off_71B2
00008990 0000                       		dc.w DLE_SYZ3boss-off_71B2
00008992 0000                       		dc.w DLE_SYZ3end-off_71B2
00008994                            ; ===========================================================================
00008994                            
00008994                            DLE_SYZ3main:
00008994 0C78 2AC0 F700             		cmpi.w	#$2AC0,(v_screenposx).w
0000899A 6500                       		bcs.s	locret_71CE
0000899C 6100 0000                  		bsr.w	FindFreeObj
000089A0 6600                       		bne.s	locret_71CE
000089A2 12BC 0000                  		move.b	#id_BossBlock,(a1) ; load blocks that boss picks up
000089A6 5438 F742                  		addq.b	#2,(v_dle_routine).w
000089AA                            
000089AA                            locret_71CE:
000089AA 4E75                       		rts	
000089AC                            ; ===========================================================================
000089AC                            
000089AC                            DLE_SYZ3boss:
000089AC 0C78 2C00 F700             		cmpi.w	#$2C00,(v_screenposx).w
000089B2 6500                       		bcs.s	locret_7200
000089B4 31FC 04CC F726             		move.w	#$4CC,(v_limitbtm1).w
000089BA 6100 0000                  		bsr.w	FindFreeObj
000089BE 6600                       		bne.s	loc_71EC
000089C0 12BC 0000                  		move.b	#id_BossSpringYard,(a1) ; load SYZ boss	object
000089C4 5438 F742                  		addq.b	#2,(v_dle_routine).w
000089C8                            
000089C8                            loc_71EC:
000089D0 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000089D6 7000                       		moveq	#plcid_Boss,d0
000089D8 6000 8D60                  		bra.w	AddPLC		; load boss patterns
000089DC                            ; ===========================================================================
000089DC                            
000089DC                            locret_7200:
000089DC 4E75                       		rts	
000089DE                            ; ===========================================================================
000089DE                            
000089DE                            DLE_SYZ3end:
000089DE 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
000089E4 4E75                       		rts	
000089E6                            ; ===========================================================================
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            ; Scrap	Brain Zone dynamic level events
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            
000089E6                            DLE_SBZ:
000089E6 7000                       		moveq	#0,d0
000089E8 1038 FE11                  		move.b	(v_act).w,d0
000089EC D040                       		add.w	d0,d0
000089EE 303B 0000                  		move.w	DLE_SBZx(pc,d0.w),d0
000089F2 4EFB 0000                  		jmp	DLE_SBZx(pc,d0.w)
000089F6                            ; ===========================================================================
000089F6 0000                       DLE_SBZx:	dc.w DLE_SBZ1-DLE_SBZx
000089F8 0000                       		dc.w DLE_SBZ2-DLE_SBZx
000089FA 0000                       		dc.w DLE_FZ-DLE_SBZx
000089FC                            ; ===========================================================================
000089FC                            
000089FC                            DLE_SBZ1:
000089FC 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00008A02 0C78 1880 F700             		cmpi.w	#$1880,(v_screenposx).w
00008A08 6500                       		bcs.s	locret_7242
00008A0A 31FC 0620 F726             		move.w	#$620,(v_limitbtm1).w
00008A10 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008A16 6500                       		bcs.s	locret_7242
00008A18 31FC 02A0 F726             		move.w	#$2A0,(v_limitbtm1).w
00008A1E                            
00008A1E                            locret_7242:
00008A1E 4E75                       		rts	
00008A20                            ; ===========================================================================
00008A20                            
00008A20                            DLE_SBZ2:
00008A20 7000                       		moveq	#0,d0
00008A22 1038 F742                  		move.b	(v_dle_routine).w,d0
00008A26 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008A2A 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008A2E                            ; ===========================================================================
00008A2E 0000                       off_7252:	dc.w DLE_SBZ2main-off_7252
00008A30 0000                       		dc.w DLE_SBZ2boss-off_7252
00008A32 0000                       		dc.w DLE_SBZ2boss2-off_7252
00008A34 0000                       		dc.w DLE_SBZ2end-off_7252
00008A36                            ; ===========================================================================
00008A36                            
00008A36                            DLE_SBZ2main:
00008A36 31FC 0800 F726             		move.w	#$800,(v_limitbtm1).w
00008A3C 0C78 1800 F700             		cmpi.w	#$1800,(v_screenposx).w
00008A42 6500                       		bcs.s	locret_727A
00008A44 31FC 0510 F726             		move.w	#$510,(v_limitbtm1).w
00008A4A 0C78 1E00 F700             		cmpi.w	#$1E00,(v_screenposx).w
00008A50 6500                       		bcs.s	locret_727A
00008A52 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008A56                            
00008A56                            locret_727A:
00008A56 4E75                       		rts	
00008A58                            ; ===========================================================================
00008A58                            
00008A58                            DLE_SBZ2boss:
00008A58 0C78 1EB0 F700             		cmpi.w	#$1EB0,(v_screenposx).w
00008A5E 6500                       		bcs.s	locret_7298
00008A60 6100 0000                  		bsr.w	FindFreeObj
00008A64 6600                       		bne.s	locret_7298
00008A66 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
00008A6A 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008A6E 7000                       		moveq	#plcid_EggmanSBZ2,d0
00008A70 6000 8CC8                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008A74                            ; ===========================================================================
00008A74                            
00008A74                            locret_7298:
00008A74 4E75                       		rts	
00008A76                            ; ===========================================================================
00008A76                            
00008A76                            DLE_SBZ2boss2:
00008A76 0C78 1F60 F700             		cmpi.w	#$1F60,(v_screenposx).w
00008A7C 6500                       		bcs.s	loc_72B6
00008A7E 6100 0000                  		bsr.w	FindFreeObj
00008A82 6600                       		bne.s	loc_72B0
00008A84 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008A88 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008A8C                            
00008A8C                            loc_72B0:
00008A8C 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008A92                            
00008A92                            loc_72B6:
00008A92 6000                       		bra.s	loc_72C2
00008A94                            ; ===========================================================================
00008A94                            
00008A94                            DLE_SBZ2end:
00008A94 0C78 2050 F700             		cmpi.w	#$2050,(v_screenposx).w
00008A9A 6500                       		bcs.s	loc_72C2
00008A9C 4E75                       		rts	
00008A9E                            ; ===========================================================================
00008A9E                            
00008A9E                            loc_72C2:
00008A9E 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008AA4 4E75                       		rts	
00008AA6                            ; ===========================================================================
00008AA6                            
00008AA6                            DLE_FZ:
00008AA6 7000                       		moveq	#0,d0
00008AA8 1038 F742                  		move.b	(v_dle_routine).w,d0
00008AAC 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008AB0 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00008AB4                            ; ===========================================================================
00008AB4 0000 0000                  off_72D8:	dc.w DLE_FZmain-off_72D8, DLE_FZboss-off_72D8
00008AB8 0000 0000                  		dc.w DLE_FZend-off_72D8, locret_7322-off_72D8
00008ABC 0000                       		dc.w DLE_FZend2-off_72D8
00008ABE                            ; ===========================================================================
00008ABE                            
00008ABE                            DLE_FZmain:
00008ABE 0C78 2148 F700             		cmpi.w	#$2148,(v_screenposx).w
00008AC4 6500                       		bcs.s	loc_72F4
00008AC6 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008ACA 7000                       		moveq	#plcid_FZBoss,d0
00008ACC 6100 8C6C                  		bsr.w	AddPLC		; load FZ boss patterns
00008AD0                            
00008AD0                            loc_72F4:
00008AD0 60CC                       		bra.s	loc_72C2
00008AD2                            ; ===========================================================================
00008AD2                            
00008AD2                            DLE_FZboss:
00008AD2 0C78 2300 F700             		cmpi.w	#$2300,(v_screenposx).w
00008AD8 6500                       		bcs.s	loc_7312
00008ADA 6100 0000                  		bsr.w	FindFreeObj
00008ADE 6600                       		bne.s	loc_7312
00008AE0 12BC 0000                  		move.b	#id_BossFinal,(a1) ; load FZ boss object
00008AE4 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008AE8 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008AEE                            
00008AEE                            loc_7312:
00008AEE 60AE                       		bra.s	loc_72C2
00008AF0                            ; ===========================================================================
00008AF0                            
00008AF0                            DLE_FZend:
00008AF0 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
00008AF6 6500                       		bcs.s	loc_7320
00008AF8 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008AFC                            
00008AFC                            loc_7320:
00008AFC 60A0                       		bra.s	loc_72C2
00008AFE                            ; ===========================================================================
00008AFE                            
00008AFE                            locret_7322:
00008AFE 4E75                       		rts	
00008B00                            ; ===========================================================================
00008B00                            
00008B00                            DLE_FZend2:
00008B00 609C                       		bra.s	loc_72C2
00008B02                            ; ===========================================================================
00008B02                            ; ---------------------------------------------------------------------------
00008B02                            ; Ending sequence dynamic level events (empty)
00008B02                            ; ---------------------------------------------------------------------------
00008B02                            
00008B02                            DLE_Ending:
00008B02 4E75                       		rts	
00008B02 4E75                       		rts	
00008B04                            
00008B04                            		include	"_incObj\11 Bridge (part 1).asm"
00008B04                            ; ---------------------------------------------------------------------------
00008B04                            ; Object 11 - GHZ bridge
00008B04                            ; ---------------------------------------------------------------------------
00008B04                            
00008B04                            Bridge:
00008B04 7000                       		moveq	#0,d0
00008B06 1028 0024                  		move.b	obRoutine(a0),d0
00008B0A 323B 0000                  		move.w	Bri_Index(pc,d0.w),d1
00008B0E 4EFB 1000                  		jmp	Bri_Index(pc,d1.w)
00008B12                            ; ===========================================================================
00008B12 0000 0000                  Bri_Index:	dc.w Bri_Main-Bri_Index, Bri_Action-Bri_Index
00008B16 0000 0000                  		dc.w Bri_Platform-Bri_Index, Bri_Delete-Bri_Index
00008B1A 0000 0000                  		dc.w Bri_Delete-Bri_Index, Bri_Display-Bri_Index
00008B1E                            ; ===========================================================================
00008B1E                            
00008B1E                            Bri_Main:	; Routine 0
00008B1E 5428 0024                  		addq.b	#2,obRoutine(a0)
00008B22 217C 0000 0000 0004        		move.l	#Map_Bri,obMap(a0)
00008B2A 317C 438E 0002             		move.w	#$438E,obGfx(a0)
00008B30 117C 0004 0001             		move.b	#4,obRender(a0)
00008B36 317C 0180 0018             		move.w	#$180,obPriority(a0)
00008B3C 117C 0080 0014             		move.b	#$80,obActWid(a0)
00008B42 3428 000C                  		move.w	obY(a0),d2
00008B46 3628 0008                  		move.w	obX(a0),d3
00008B4A 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008B4C 45E8 0028                  		lea	obSubtype(a0),a2
00008B50 7200                       		moveq	#0,d1
00008B52 1212                       		move.b	(a2),d1		; copy bridge length to d1
00008B54 14FC 0000                  		move.b	#0,(a2)+	; clear bridge length
00008B58 3001                       		move.w	d1,d0
00008B5A E248                       		lsr.w	#1,d0
00008B5C E948                       		lsl.w	#4,d0
00008B5E 9640                       		sub.w	d0,d3		; d3 is position of leftmost log
00008B60 5501                       		subq.b	#2,d1
00008B62 6500                       		bcs.s	Bri_Action	; don't make more if bridge has only 1 log
00008B64                            
00008B64                            @buildloop:
00008B64 6100 0000                  		bsr.w	FindFreeObj
00008B68 6600                       		bne.s	Bri_Action
00008B6A 5228 0028                  		addq.b	#1,obSubtype(a0)
00008B6E B668 0008                  		cmp.w	obX(a0),d3	; is this log the leftmost one?
00008B72 6600                       		bne.s	@notleftmost	; if not, branch
00008B74                            
00008B74 0643 0010                  		addi.w	#$10,d3
00008B78 3142 000C                  		move.w	d2,obY(a0)
00008B7C 3142 003C                  		move.w	d2,$3C(a0)
00008B80 3A08                       		move.w	a0,d5
00008B82 0445 D000                  		subi.w	#$D000,d5
00008B86 EC4D                       		lsr.w	#6,d5
00008B88 0245 007F                  		andi.w	#$7F,d5
00008B8C 14C5                       		move.b	d5,(a2)+
00008B8E 5228 0028                  		addq.b	#1,obSubtype(a0)
00008B92                            
00008B92                            	@notleftmost:
00008B92 3A09                       		move.w	a1,d5
00008B94 0445 D000                  		subi.w	#$D000,d5
00008B98 EC4D                       		lsr.w	#6,d5
00008B9A 0245 007F                  		andi.w	#$7F,d5
00008B9E 14C5                       		move.b	d5,(a2)+
00008BA0 137C 000A 0024             		move.b	#$A,obRoutine(a1)
00008BA6 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00008BA8 3342 000C                  		move.w	d2,obY(a1)
00008BAC 3342 003C                  		move.w	d2,$3C(a1)
00008BB0 3343 0008                  		move.w	d3,obX(a1)
00008BB4 237C 0000 0000 0004        		move.l	#Map_Bri,obMap(a1)
00008BBC 337C 438E 0002             		move.w	#$438E,obGfx(a1)
00008BC2 137C 0004 0001             		move.b	#4,obRender(a1)
00008BC8 337C 0180 0018             		move.w	#$180,obPriority(a1)
00008BCE 137C 0008 0014             		move.b	#8,obActWid(a1)
00008BD4 0643 0010                  		addi.w	#$10,d3
00008BD8 51C9 FF8A                  		dbf	d1,@buildloop ; repeat d1 times (length of bridge)
00008BDC                            
00008BDC                            Bri_Action:	; Routine 2
00008BDC 6100                       		bsr.s	Bri_Solid
00008BDE 4A28 003E                  		tst.b	$3E(a0)
00008BE2 6700                       		beq.s	@display
00008BE4 5928 003E                  		subq.b	#4,$3E(a0)
00008BE8 6100 0000                  		bsr.w	Bri_Bend
00008BEC                            
00008BEC                            	@display:
00008BEC 6100 0000                  		bsr.w	DisplaySprite
00008BF0 6000 0000                  		bra.w	Bri_ChkDel
00008BF4                            
00008BF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BF4                            
00008BF4                            
00008BF4                            Bri_Solid:
00008BF4 7200                       		moveq	#0,d1
00008BF6 1228 0028                  		move.b	obSubtype(a0),d1
00008BFA E749                       		lsl.w	#3,d1
00008BFC 3401                       		move.w	d1,d2
00008BFE 5041                       		addq.w	#8,d1
00008C00 D442                       		add.w	d2,d2
00008C02 43F8 D000                  		lea	(v_player).w,a1
00008C06 4A69 0012                  		tst.w	obVelY(a1)
00008C0A 6B00 0000                  		bmi.w	Plat_Exit
00008C0E 3029 0008                  		move.w	obX(a1),d0
00008C12 9068 0008                  		sub.w	obX(a0),d0
00008C16 D041                       		add.w	d1,d0
00008C18 6B00 0000                  		bmi.w	Plat_Exit
00008C1C B042                       		cmp.w	d2,d0
00008C1E 6400 0000                  		bcc.w	Plat_Exit
00008C22 6000                       		bra.s	Plat_NoXCheck
00008C24                            ; End of function Bri_Solid
00008C24                            ; End of function Bri_Solid
00008C24                            
00008C24                            ; ---------------------------------------------------------------------------
00008C24                            ; Platform subroutine
00008C24                            ; ---------------------------------------------------------------------------
00008C24                            
00008C24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C24                            
00008C24                            PlatformObject:
00008C24 43F8 D000                  		lea	(v_player).w,a1
00008C28 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving up/jumping?
00008C2C 6B00 0000                  		bmi.w	Plat_Exit	; if yes, branch
00008C30                            
00008C30                            ;		perform x-axis range check
00008C30 3029 0008                  		move.w	obX(a1),d0
00008C34 9068 0008                  		sub.w	obX(a0),d0
00008C38 D041                       		add.w	d1,d0
00008C3A 6B00 0000                  		bmi.w	Plat_Exit
00008C3E D241                       		add.w	d1,d1
00008C40 B041                       		cmp.w	d1,d0
00008C42 6400 0000                  		bhs.w	Plat_Exit
00008C46                            
00008C46                            	Plat_NoXCheck:
00008C46 3028 000C                  		move.w	obY(a0),d0
00008C4A 5140                       		subq.w	#8,d0
00008C4C                            
00008C4C                            Platform3:
00008C4C                            ;		perform y-axis range check
00008C4C 3429 000C                  		move.w	obY(a1),d2
00008C50 1229 0016                  		move.b	obHeight(a1),d1
00008C54 4881                       		ext.w	d1
00008C56 D242                       		add.w	d2,d1
00008C58 5841                       		addq.w	#4,d1
00008C5A 9041                       		sub.w	d1,d0
00008C5C 6200 0000                  		bhi.w	Plat_Exit
00008C60 0C40 FFF0                  		cmpi.w	#-$10,d0
00008C64 6500 0000                  		blo.w	Plat_Exit
00008C68                            
00008C68 4A38 F7C8                  		tst.b	(f_lockmulti).w
00008C6C 6B00 0000                  		bmi.w	Plat_Exit
00008C70 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00008C76 6400 0000                  		bhs.w	Plat_Exit
00008C7A D440                       		add.w	d0,d2
00008C7C 5642                       		addq.w	#3,d2
00008C7E 3342 000C                  		move.w	d2,obY(a1)
00008C82 5428 0024                  		addq.b	#2,obRoutine(a0)
00008C86                            
00008C86                            loc_74AE:
00008C86 0829 0003 0022             		btst	#3,obStatus(a1)
00008C8C 6700                       		beq.s	loc_74DC
00008C8E 7000                       		moveq	#0,d0
00008C90 1029 003D                  		move.b	$3D(a1),d0
00008C94 ED48                       		lsl.w	#6,d0
00008C96 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008C9C 2440                       		movea.l	d0,a2
00008C9E 08AA 0003 0022             		bclr	#3,obStatus(a2)
00008CA4 422A 0025                  		clr.b	ob2ndRout(a2)
00008CA8 0C2A 0004 0024             		cmpi.b	#4,obRoutine(a2)
00008CAE 6600                       		bne.s	loc_74DC
00008CB0 552A 0024                  		subq.b	#2,obRoutine(a2)
00008CB4                            
00008CB4                            loc_74DC:
00008CB4 3008                       		move.w	a0,d0
00008CB6 0440 D000                  		subi.w	#-$3000,d0
00008CBA EC48                       		lsr.w	#6,d0
00008CBC 0240 007F                  		andi.w	#$7F,d0
00008CC0 1340 003D                  		move.b	d0,$3D(a1)
00008CC4 137C 0000 0026             		move.b	#0,obAngle(a1)
00008CCA 337C 0000 0012             		move.w	#0,obVelY(a1)
00008CD0 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00008CD6 0829 0001 0022             		btst	#1,obStatus(a1)
00008CDC 6700                       		beq.s	loc_7512
00008CDE 2F08                       		move.l	a0,-(sp)
00008CE0 2049                       		movea.l	a1,a0
00008CE2 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l
00008CE8 205F                       		movea.l	(sp)+,a0
00008CEA                            
00008CEA                            loc_7512:
00008CEA 08E9 0003 0022             		bset	#3,obStatus(a1)
00008CF0 08E8 0003 0022             		bset	#3,obStatus(a0)
00008CF6                            
00008CF6                            Plat_Exit:
00008CF6 4E75                       		rts	
00008CF8                            ; End of function PlatformObject
00008CF8                            
00008CF8                            ; ---------------------------------------------------------------------------
00008CF8                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00008CF8                            ; ---------------------------------------------------------------------------
00008CF8                            
00008CF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008CF8                            
00008CF8                            
00008CF8                            SlopeObject:
00008CF8 43F8 D000                  		lea	(v_player).w,a1
00008CFC 4A69 0012                  		tst.w	obVelY(a1)
00008D00 6B00 FFF4                  		bmi.w	Plat_Exit
00008D04 3029 0008                  		move.w	obX(a1),d0
00008D08 9068 0008                  		sub.w	obX(a0),d0
00008D0C D041                       		add.w	d1,d0
00008D0E 6BE6                       		bmi.s	Plat_Exit
00008D10 D241                       		add.w	d1,d1
00008D12 B041                       		cmp.w	d1,d0
00008D14 64E0                       		bhs.s	Plat_Exit
00008D16 0828 0000 0001             		btst	#0,obRender(a0)
00008D1C 6700                       		beq.s	loc_754A
00008D1E 4640                       		not.w	d0
00008D20 D041                       		add.w	d1,d0
00008D22                            
00008D22                            loc_754A:
00008D22 E248                       		lsr.w	#1,d0
00008D24 7600                       		moveq	#0,d3
00008D26 1632 0000                  		move.b	(a2,d0.w),d3
00008D2A 3028 000C                  		move.w	obY(a0),d0
00008D2E 9043                       		sub.w	d3,d0
00008D30 6000 FF1A                  		bra.w	Platform3
00008D34                            ; End of function SlopeObject
00008D34                            
00008D34                            
00008D34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D34                            
00008D34                            
00008D34                            Swing_Solid:
00008D34 43F8 D000                  		lea	(v_player).w,a1
00008D38 4A69 0012                  		tst.w	obVelY(a1)
00008D3C 6B00 FFB8                  		bmi.w	Plat_Exit
00008D40 3029 0008                  		move.w	obX(a1),d0
00008D44 9068 0008                  		sub.w	obX(a0),d0
00008D48 D041                       		add.w	d1,d0
00008D4A 6B00 FFAA                  		bmi.w	Plat_Exit
00008D4E D241                       		add.w	d1,d1
00008D50 B041                       		cmp.w	d1,d0
00008D52 6400 FFA2                  		bhs.w	Plat_Exit
00008D56 3028 000C                  		move.w	obY(a0),d0
00008D5A 9043                       		sub.w	d3,d0
00008D5C 6000 FEEE                  		bra.w	Platform3
00008D60                            ; End of function Obj15_Solid
00008D60                            
00008D60                            ; ===========================================================================
00008D60                            
00008D60                            		include	"_incObj\11 Bridge (part 2).asm"
00008D60                            
00008D60                            Bri_Platform:	; Routine 4
00008D60 6100                       		bsr.s	Bri_WalkOff
00008D62 6100 0000                  		bsr.w	DisplaySprite
00008D66 6000 0000                  		bra.w	Bri_ChkDel
00008D6A                            
00008D6A                            ; ---------------------------------------------------------------------------
00008D6A                            ; Subroutine allowing Sonic to walk off a bridge
00008D6A                            ; ---------------------------------------------------------------------------
00008D6A                            
00008D6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D6A                            
00008D6A                            
00008D6A                            Bri_WalkOff:
00008D6A 7200                       		moveq	#0,d1
00008D6C 1228 0028                  		move.b	obSubtype(a0),d1
00008D70 E749                       		lsl.w	#3,d1
00008D72 3401                       		move.w	d1,d2
00008D74 5041                       		addq.w	#8,d1
00008D76 6100                       		bsr.s	ExitPlatform2
00008D78 6400                       		bcc.s	locret_75BE
00008D7A E848                       		lsr.w	#4,d0
00008D7C 1140 003F                  		move.b	d0,$3F(a0)
00008D80 1028 003E                  		move.b	$3E(a0),d0
00008D84 0C00 0040                  		cmpi.b	#$40,d0
00008D88 6700                       		beq.s	loc_75B6
00008D8A 5828 003E                  		addq.b	#4,$3E(a0)
00008D8E                            
00008D8E                            loc_75B6:
00008D8E 6100 0000                  		bsr.w	Bri_Bend
00008D92 6100 0000                  		bsr.w	Bri_MoveSonic
00008D96                            
00008D96                            locret_75BE:
00008D96 4E75                       		rts	
00008D98                            ; End of function Bri_WalkOff
00008D98                            ; End of function Bri_WalkOff
00008D98                            
00008D98                            ; ---------------------------------------------------------------------------
00008D98                            ; Subroutine allowing Sonic to walk or jump off	a platform
00008D98                            ; ---------------------------------------------------------------------------
00008D98                            
00008D98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D98                            
00008D98                            
00008D98                            ExitPlatform:
00008D98 3401                       		move.w	d1,d2
00008D9A                            
00008D9A                            ExitPlatform2:
00008D9A D442                       		add.w	d2,d2
00008D9C 43F8 D000                  		lea	(v_player).w,a1
00008DA0 0829 0001 0022             		btst	#1,obStatus(a1)
00008DA6 6600                       		bne.s	loc_75E0
00008DA8 3029 0008                  		move.w	obX(a1),d0
00008DAC 9068 0008                  		sub.w	obX(a0),d0
00008DB0 D041                       		add.w	d1,d0
00008DB2 6B00                       		bmi.s	loc_75E0
00008DB4 B042                       		cmp.w	d2,d0
00008DB6 6500                       		blo.s	locret_75F2
00008DB8                            
00008DB8                            loc_75E0:
00008DB8 08A9 0003 0022             		bclr	#3,obStatus(a1)
00008DBE 117C 0002 0024             		move.b	#2,obRoutine(a0)
00008DC4 08A8 0003 0022             		bclr	#3,obStatus(a0)
00008DCA                            
00008DCA                            locret_75F2:
00008DCA 4E75                       		rts	
00008DCC                            ; End of function ExitPlatform
00008DCC                            
00008DCC                            		include	"_incObj\11 Bridge (part 3).asm"
00008DCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008DCC                            
00008DCC                            
00008DCC                            Bri_MoveSonic:
00008DCC 7000                       		moveq	#0,d0
00008DCE 1028 003F                  		move.b	$3F(a0),d0
00008DD2 1030 0029                  		move.b	$29(a0,d0.w),d0
00008DD6 ED48                       		lsl.w	#6,d0
00008DD8 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008DDE 2440                       		movea.l	d0,a2
00008DE0 43F8 D000                  		lea	(v_player).w,a1
00008DE4 302A 000C                  		move.w	obY(a2),d0
00008DE8 5140                       		subq.w	#8,d0
00008DEA 7200                       		moveq	#0,d1
00008DEC 1229 0016                  		move.b	obHeight(a1),d1
00008DF0 9041                       		sub.w	d1,d0
00008DF2 3340 000C                  		move.w	d0,obY(a1)	; change Sonic's position on y-axis
00008DF6 4E75                       		rts	
00008DF8                            ; End of function Bri_MoveSonic
00008DF8                            
00008DF8                            
00008DF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008DF8                            
00008DF8                            
00008DF8                            Bri_Bend:
00008DF8 1028 003E                  		move.b	$3E(a0),d0
00008DFC 6100 AECC                  		bsr.w	CalcSine
00008E00 3800                       		move.w	d0,d4
00008E02 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00008E08 7000                       		moveq	#0,d0
00008E0A 1028 0028                  		move.b	obSubtype(a0),d0
00008E0E E948                       		lsl.w	#4,d0
00008E10 7600                       		moveq	#0,d3
00008E12 1628 003F                  		move.b	$3F(a0),d3
00008E16 3403                       		move.w	d3,d2
00008E18 D640                       		add.w	d0,d3
00008E1A 7A00                       		moveq	#0,d5
00008E1C 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00008E22 1A35 3000                  		move.b	(a5,d3.w),d5
00008E26 0243 000F                  		andi.w	#$F,d3
00008E2A E94B                       		lsl.w	#4,d3
00008E2C 47F4 3000                  		lea	(a4,d3.w),a3
00008E30 45E8 0029                  		lea	$29(a0),a2
00008E34                            
00008E34                            loc_765C:
00008E34 7000                       		moveq	#0,d0
00008E36 101A                       		move.b	(a2)+,d0
00008E38 ED48                       		lsl.w	#6,d0
00008E3A 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008E40 2240                       		movea.l	d0,a1
00008E42 7000                       		moveq	#0,d0
00008E44 101B                       		move.b	(a3)+,d0
00008E46 5240                       		addq.w	#1,d0
00008E48 C0C5                       		mulu.w	d5,d0
00008E4A C0C4                       		mulu.w	d4,d0
00008E4C 4840                       		swap	d0
00008E4E D069 003C                  		add.w	$3C(a1),d0
00008E52 3340 000C                  		move.w	d0,obY(a1)
00008E56 51CA FFDC                  		dbf	d2,loc_765C
00008E5A 7000                       		moveq	#0,d0
00008E5C 1028 0028                  		move.b	obSubtype(a0),d0
00008E60 7600                       		moveq	#0,d3
00008E62 1628 003F                  		move.b	$3F(a0),d3
00008E66 5203                       		addq.b	#1,d3
00008E68 9600                       		sub.b	d0,d3
00008E6A 4403                       		neg.b	d3
00008E6C 6B00                       		bmi.s	locret_76CA
00008E6E 3403                       		move.w	d3,d2
00008E70 E94B                       		lsl.w	#4,d3
00008E72 47F4 3000                  		lea	(a4,d3.w),a3
00008E76 D6C2                       		adda.w	d2,a3
00008E78 5342                       		subq.w	#1,d2
00008E7A 6500                       		bcs.s	locret_76CA
00008E7C                            
00008E7C                            loc_76A4:
00008E7C 7000                       		moveq	#0,d0
00008E7E 101A                       		move.b	(a2)+,d0
00008E80 ED48                       		lsl.w	#6,d0
00008E82 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008E88 2240                       		movea.l	d0,a1
00008E8A 7000                       		moveq	#0,d0
00008E8C 1023                       		move.b	-(a3),d0
00008E8E 5240                       		addq.w	#1,d0
00008E90 C0C5                       		mulu.w	d5,d0
00008E92 C0C4                       		mulu.w	d4,d0
00008E94 4840                       		swap	d0
00008E96 D069 003C                  		add.w	$3C(a1),d0
00008E9A 3340 000C                  		move.w	d0,obY(a1)
00008E9E 51CA FFDC                  		dbf	d2,loc_76A4
00008EA2                            
00008EA2                            locret_76CA:
00008EA2 4E75                       		rts	
00008EA4                            ; End of function Bri_Bend
00008EA4                            
00008EA4                            ; ===========================================================================
00008EA4                            ; ---------------------------------------------------------------------------
00008EA4                            ; GHZ bridge-bending data
00008EA4                            ; (Defines how the bridge bends	when Sonic walks across	it)
00008EA4                            ; ---------------------------------------------------------------------------
00008EA4                            Obj11_BendData:	incbin	"misc\ghzbend1.bin"
00008FB4                            		even
00008FB4                            Obj11_BendData2:incbin	"misc\ghzbend2.bin"
000090B4                            		even
000090B4                            
000090B4                            ; ===========================================================================
000090B4                            
000090B4                            Bri_ChkDel:
000090D2 4E75                       		rts	
000090D4                            ; ===========================================================================
000090D4                            
000090D4                            @deletebridge:
000090D4 7400                       		moveq	#0,d2
000090D6 45E8 0028                  		lea	obSubtype(a0),a2 ; load bridge length
000090DA 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
000090DC 5302                       		subq.b	#1,d2		; subtract 1
000090DE 6500                       		bcs.s	@delparent
000090E0                            
000090E0                            	@loop:
000090E0 7000                       		moveq	#0,d0
000090E2 101A                       		move.b	(a2)+,d0
000090E4 ED48                       		lsl.w	#6,d0
000090E6 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000090EC 2240                       		movea.l	d0,a1
000090EE B048                       		cmp.w	a0,d0
000090F0 6700                       		beq.s	@skipdel
000090F2 6100 0000                  		bsr.w	DeleteChild
000090F6                            
000090F6                            	@skipdel:
000090F6 51CA FFE8                  		dbf	d2,@loop ; repeat d2 times (bridge length)
000090FA                            
000090FA                            @delparent:
000090FA 6100 0000                  		bsr.w	DeleteObject
000090FE 4E75                       		rts	
00009100                            ; ===========================================================================
00009100                            
00009100                            Bri_Delete:	; Routine 6, 8
00009100 6100 0000                  		bsr.w	DeleteObject
00009104 4E75                       		rts	
00009106                            ; ===========================================================================
00009106                            
00009106                            Bri_Display:	; Routine $A
00009106 6100 0000                  		bsr.w	DisplaySprite
0000910A 4E75                       		rts	
0000910A 4E75                       		rts	
0000910C                            Map_Bri:	include	"_maps\Bridge.asm"
0000910C                            ; ---------------------------------------------------------------------------
0000910C                            ; Sprite mappings - GHZ	bridge
0000910C                            ; ---------------------------------------------------------------------------
0000910C                            Map_Bri_internal:
0000910C 0000                       		dc.w M_Bri_Log-Map_Bri_internal
0000910E 0000                       		dc.w M_Bri_Stump-Map_Bri_internal
00009110 0000                       		dc.w M_Bri_Rope-Map_Bri_internal
00009112 01                         M_Bri_Log:	dc.b 1
00009113 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; log
00009118 02                         M_Bri_Stump:	dc.b 2
00009119 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0	; stump & rope
0000911E 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00009123 01                         M_Bri_Rope:	dc.b 1
00009124 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8	; rope only
0000912A 00                         		even
0000912A 00                         		even
0000912A                            
0000912A                            		include	"_incObj\15 Swinging Platforms (part 1).asm"
0000912A                            ; ---------------------------------------------------------------------------
0000912A                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
0000912A                            ;	    - spiked ball on a chain (SBZ)
0000912A                            ; ---------------------------------------------------------------------------
0000912A                            
0000912A                            SwingingPlatform:
0000912A 7000                       		moveq	#0,d0
0000912C 1028 0024                  		move.b	obRoutine(a0),d0
00009130 323B 0000                  		move.w	Swing_Index(pc,d0.w),d1
00009134 4EFB 1000                  		jmp	Swing_Index(pc,d1.w)
00009138                            ; ===========================================================================
00009138 0000 0000                  Swing_Index:	dc.w Swing_Main-Swing_Index, Swing_SetSolid-Swing_Index
0000913C 0000 0000                  		dc.w Swing_Action2-Swing_Index,	Swing_Delete-Swing_Index
00009140 0000 0000                  		dc.w Swing_Delete-Swing_Index, Swing_Display-Swing_Index
00009144 0000                       		dc.w Swing_Action-Swing_Index
00009146                            
00009146 =0000003A                  swing_origX:	equ $3A		; original x-axis position
00009146 =00000038                  swing_origY:	equ $38		; original y-axis position
00009146                            ; ===========================================================================
00009146                            
00009146                            Swing_Main:	; Routine 0
00009146 5428 0024                  		addq.b	#2,obRoutine(a0)
0000914A 217C 0000 0000 0004        		move.l	#Map_Swing_GHZ,obMap(a0) ; GHZ and MZ specific code
00009152 317C 4380 0002             		move.w	#$4380,obGfx(a0)
00009158 117C 0004 0001             		move.b	#4,obRender(a0)
0000915E 317C 0180 0018             		move.w	#$180,obPriority(a0)
00009164 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000916A 117C 0008 0016             		move.b	#8,obHeight(a0)
00009170 3168 000C 0038             		move.w	obY(a0),swing_origY(a0)
00009176 3168 0008 003A             		move.w	obX(a0),swing_origX(a0)
0000917C 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009182 6600                       		bne.s	@notSLZ
00009184                            
00009184 217C 0000 0000 0004        		move.l	#Map_Swing_SLZ,obMap(a0) ; SLZ specific code
0000918C 317C 43DC 0002             		move.w	#$43DC,obGfx(a0)
00009192 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009198 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000919E 117C 0099 0020             		move.b	#$99,obColType(a0)
000091A4                            
000091A4                            	@notSLZ:
000091A4 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
000091AA 6600                       		bne.s	@length
000091AC                            
000091AC 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0) ; SBZ specific code
000091B4 317C 0391 0002             		move.w	#$391,obGfx(a0)
000091BA 117C 0018 0014             		move.b	#$18,obActWid(a0)
000091C0 117C 0018 0016             		move.b	#$18,obHeight(a0)
000091C6 117C 0086 0020             		move.b	#$86,obColType(a0)
000091CC 117C 000C 0024             		move.b	#$C,obRoutine(a0) ; goto Swing_Action next
000091D2                            
000091D2                            @length:
000091D2 1810                       		move.b	0(a0),d4
000091D4 7200                       		moveq	#0,d1
000091D6 45E8 0028                  		lea	obSubtype(a0),a2 ; move chain length to a2
000091DA 1212                       		move.b	(a2),d1		; move a2 to d1
000091DC 3F01                       		move.w	d1,-(sp)
000091DE 0241 000F                  		andi.w	#$F,d1
000091E2 14FC 0000                  		move.b	#0,(a2)+
000091E6 3601                       		move.w	d1,d3
000091E8 E94B                       		lsl.w	#4,d3
000091EA 5003                       		addq.b	#8,d3
000091EC 1143 003C                  		move.b	d3,$3C(a0)
000091F0 5103                       		subq.b	#8,d3
000091F2 4A28 001A                  		tst.b	obFrame(a0)
000091F6 6700                       		beq.s	@makechain
000091F8 5003                       		addq.b	#8,d3
000091FA 5341                       		subq.w	#1,d1
000091FC                            
000091FC                            @makechain:
000091FC 6100 0000                  		bsr.w	FindFreeObj
00009200 6600                       		bne.s	@fail
00009202 5228 0028                  		addq.b	#1,obSubtype(a0)
00009206 3A09                       		move.w	a1,d5
00009208 0445 D000                  		subi.w	#$D000,d5
0000920C EC4D                       		lsr.w	#6,d5
0000920E 0245 007F                  		andi.w	#$7F,d5
00009212 14C5                       		move.b	d5,(a2)+
00009214 137C 000A 0024             		move.b	#$A,obRoutine(a1) ; goto Swing_Display next
0000921A 1284                       		move.b	d4,0(a1)	; load swinging	object
0000921C 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00009222 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009228 08A9 0006 0002             		bclr	#6,obGfx(a1)
0000922E 137C 0004 0001             		move.b	#4,obRender(a1)
00009234 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000923A 137C 0008 0014             		move.b	#8,obActWid(a1)
00009240 137C 0001 001A             		move.b	#1,obFrame(a1)
00009246 1343 003C                  		move.b	d3,$3C(a1)
0000924A 0403 0010                  		subi.b	#$10,d3
0000924E 6400                       		bcc.s	@notanchor
00009250 137C 0002 001A             		move.b	#2,obFrame(a1)
00009256 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000925C 08E9 0006 0002             		bset	#6,obGfx(a1)
00009262                            
00009262                            	@notanchor:
00009262 51C9 FF98                  		dbf	d1,@makechain ; repeat d1 times (chain length)
00009266                            
00009266                            	@fail:
00009266 3A08                       		move.w	a0,d5
00009268 0445 D000                  		subi.w	#$D000,d5
0000926C EC4D                       		lsr.w	#6,d5
0000926E 0245 007F                  		andi.w	#$7F,d5
00009272 14C5                       		move.b	d5,(a2)+
00009274 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0000927A 317C FE00 003E             		move.w	#-$200,$3E(a0)
00009280 321F                       		move.w	(sp)+,d1
00009282 0801 0004                  		btst	#4,d1		; is object type $1X ?
00009286 6700                       		beq.s	@not1X	; if not, branch
00009288 217C 0000 0000 0004        		move.l	#Map_GBall,obMap(a0) ; use GHZ ball mappings
00009290 317C 43AA 0002             		move.w	#$43AA,obGfx(a0)
00009296 117C 0001 001A             		move.b	#1,obFrame(a0)
0000929C 317C 0100 0018             		move.w	#$100,obPriority(a0)
000092A2 117C 0081 0020             		move.b	#$81,obColType(a0) ; make object hurt when touched
000092A8                            
000092A8                            	@not1X:
000092A8 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; is zone SBZ?
000092AE 6700                       		beq.s	Swing_Action	; if yes, branch
000092B0                            
000092B0                            Swing_SetSolid:	; Routine 2
000092B0 7200                       		moveq	#0,d1
000092B2 1228 0014                  		move.b	obActWid(a0),d1
000092B6 7600                       		moveq	#0,d3
000092B8 1628 0016                  		move.b	obHeight(a0),d3
000092BC 6100 FA76                  		bsr.w	Swing_Solid
000092C0                            
000092C0                            Swing_Action:	; Routine $C
000092C0 6100 0000                  		bsr.w	Swing_Move
000092C4 6100 0000                  		bsr.w	DisplaySprite
000092C8 6000 0000                  		bra.w	Swing_ChkDel
000092CC                            ; ===========================================================================
000092CC                            
000092CC                            Swing_Action2:	; Routine 4
000092CC 7200                       		moveq	#0,d1
000092CE 1228 0014                  		move.b	obActWid(a0),d1
000092D2 6100 FAC4                  		bsr.w	ExitPlatform
000092D6 3F28 0008                  		move.w	obX(a0),-(sp)
000092DA 6100 0000                  		bsr.w	Swing_Move
000092DE 341F                       		move.w	(sp)+,d2
000092E0 7600                       		moveq	#0,d3
000092E2 1628 0016                  		move.b	obHeight(a0),d3
000092E6 5203                       		addq.b	#1,d3
000092E8 6100 0000                  		bsr.w	MvSonicOnPtfm
000092EC 6100 0000                  		bsr.w	DisplaySprite
000092F0 6000 0000                  		bra.w	Swing_ChkDel
000092F4                            
000092F4 4E75                       		rts
000092F4 4E75                       		rts
000092F6                            
000092F6                            ; ---------------------------------------------------------------------------
000092F6                            ; Subroutine to	change Sonic's position with a platform
000092F6                            ; ---------------------------------------------------------------------------
000092F6                            
000092F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000092F6                            
000092F6                            
000092F6                            MvSonicOnPtfm:
000092F6 43F8 D000                  		lea	(v_player).w,a1
000092FA 3028 000C                  		move.w	obY(a0),d0
000092FE 9043                       		sub.w	d3,d0
00009300 6000                       		bra.s	MvSonic2
00009302                            ; End of function MvSonicOnPtfm
00009302                            
00009302                            ; ---------------------------------------------------------------------------
00009302                            ; Subroutine to	change Sonic's position with a platform
00009302                            ; ---------------------------------------------------------------------------
00009302                            
00009302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009302                            
00009302                            
00009302                            MvSonicOnPtfm2:
00009302 43F8 D000                  		lea	(v_player).w,a1
00009306 3028 000C                  		move.w	obY(a0),d0
0000930A 0440 0009                  		subi.w	#9,d0
0000930E                            
0000930E                            MvSonic2:
0000930E 4A38 F7C8                  		tst.b	(f_lockmulti).w
00009312 6B00                       		bmi.s	locret_7B62
00009314 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000931A 6400                       		bhs.s	locret_7B62
0000931C 4A78 FE08                  		tst.w	(v_debuguse).w
00009320 6600                       		bne.s	locret_7B62
00009322 7200                       		moveq	#0,d1
00009324 1229 0016                  		move.b	obHeight(a1),d1
00009328 9041                       		sub.w	d1,d0
0000932A 3340 000C                  		move.w	d0,obY(a1)
0000932E 9468 0008                  		sub.w	obX(a0),d2
00009332 9569 0008                  		sub.w	d2,obX(a1)
00009336                            
00009336                            locret_7B62:
00009336 4E75                       		rts	
00009338                            ; End of function MvSonicOnPtfm2
00009338                            
00009338                            		include	"_incObj\15 Swinging Platforms (part 2).asm"
00009338                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009338                            
00009338                            
00009338                            Swing_Move:
00009338 1038 FE78                  		move.b	(v_oscillate+$1A).w,d0
0000933C 323C 0080                  		move.w	#$80,d1
00009340 0828 0000 0022             		btst	#0,obStatus(a0)
00009346 6700                       		beq.s	loc_7B78
00009348 4440                       		neg.w	d0
0000934A D041                       		add.w	d1,d0
0000934C                            
0000934C                            loc_7B78:
0000934C 6000                       		bra.s	Swing_Move2
0000934E                            ; End of function Swing_Move
0000934E                            
0000934E                            
0000934E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000934E                            
0000934E                            
0000934E                            Obj48_Move:
0000934E 4A28 003D                  		tst.b	$3D(a0)
00009352 6600                       		bne.s	loc_7B9C
00009354 3028 003E                  		move.w	$3E(a0),d0
00009358 5040                       		addq.w	#8,d0
0000935A 3140 003E                  		move.w	d0,$3E(a0)
0000935E D168 0026                  		add.w	d0,obAngle(a0)
00009362 0C40 0200                  		cmpi.w	#$200,d0
00009366 6600                       		bne.s	loc_7BB6
00009368 117C 0001 003D             		move.b	#1,$3D(a0)
0000936E 6000                       		bra.s	loc_7BB6
00009370                            ; ===========================================================================
00009370                            
00009370                            loc_7B9C:
00009370 3028 003E                  		move.w	$3E(a0),d0
00009374 5140                       		subq.w	#8,d0
00009376 3140 003E                  		move.w	d0,$3E(a0)
0000937A D168 0026                  		add.w	d0,obAngle(a0)
0000937E 0C40 FE00                  		cmpi.w	#-$200,d0
00009382 6600                       		bne.s	loc_7BB6
00009384 117C 0000 003D             		move.b	#0,$3D(a0)
0000938A                            
0000938A                            loc_7BB6:
0000938A 1028 0026                  		move.b	obAngle(a0),d0
0000938E                            ; End of function Obj48_Move
0000938E                            
0000938E                            
0000938E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000938E                            
0000938E                            
0000938E                            Swing_Move2:
0000938E 6100 A93A                  		bsr.w	CalcSine
00009392 3428 0038                  		move.w	$38(a0),d2
00009396 3628 003A                  		move.w	$3A(a0),d3
0000939A 45E8 0028                  		lea	obSubtype(a0),a2
0000939E 7C00                       		moveq	#0,d6
000093A0 1C1A                       		move.b	(a2)+,d6
000093A2                            
000093A2                            loc_7BCE:
000093A2 7800                       		moveq	#0,d4
000093A4 181A                       		move.b	(a2)+,d4
000093A6 ED4C                       		lsl.w	#6,d4
000093A8 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
000093AE 2244                       		movea.l	d4,a1
000093B0 7800                       		moveq	#0,d4
000093B2 1829 003C                  		move.b	$3C(a1),d4
000093B6 2A04                       		move.l	d4,d5
000093B8 C9C0                       		muls.w	d0,d4
000093BA E084                       		asr.l	#8,d4
000093BC CBC1                       		muls.w	d1,d5
000093BE E085                       		asr.l	#8,d5
000093C0 D842                       		add.w	d2,d4
000093C2 DA43                       		add.w	d3,d5
000093C4 3344 000C                  		move.w	d4,obY(a1)
000093C8 3345 0008                  		move.w	d5,obX(a1)
000093CC 51CE FFD4                  		dbf	d6,loc_7BCE
000093D0 4E75                       		rts	
000093D2                            ; End of function Swing_Move2
000093D2                            
000093D2                            ; ===========================================================================
000093D2                            
000093D2                            Swing_ChkDel:
000093F0 4E75                       		rts	
000093F2                            ; ===========================================================================
000093F2                            
000093F2                            Swing_DelAll:
000093F2 7400                       		moveq	#0,d2
000093F4 45E8 0028                  		lea	obSubtype(a0),a2
000093F8 141A                       		move.b	(a2)+,d2
000093FA                            
000093FA                            Swing_DelLoop:
000093FA 7000                       		moveq	#0,d0
000093FC 101A                       		move.b	(a2)+,d0
000093FE ED48                       		lsl.w	#6,d0
00009400 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009406 2240                       		movea.l	d0,a1
00009408 6100 0000                  		bsr.w	DeleteChild
0000940C 51CA FFEC                  		dbf	d2,Swing_DelLoop ; repeat for length of	chain
00009410 4E75                       		rts	
00009412                            ; ===========================================================================
00009412                            
00009412                            Swing_Delete:	; Routine 6, 8
00009412 6100 0000                  		bsr.w	DeleteObject
00009416 4E75                       		rts	
00009418                            ; ===========================================================================
00009418                            
00009418                            Swing_Display:	; Routine $A
00009418 6000 0000                  		bra.w	DisplaySprite
00009418 6000 0000                  		bra.w	DisplaySprite
0000941C                            Map_Swing_GHZ:	include	"_maps\Swinging Platforms (GHZ).asm"
0000941C                            ; ---------------------------------------------------------------------------
0000941C                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000941C                            ; ---------------------------------------------------------------------------
0000941C                            Map_Swing_GHZ_internal:
0000941C 0000                       		dc.w @block-Map_Swing_GHZ_internal
0000941E 0000                       		dc.w @chain-Map_Swing_GHZ_internal
00009420 0000                       		dc.w @anchor-Map_Swing_GHZ_internal
00009422 02                         @block:		dc.b 2
00009423 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00009428 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
0000942D 01                         @chain:		dc.b 1
0000942E F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00009433 01                         @anchor:	dc.b 1
00009434 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000943A 00                         		even
0000943A 00                         		even
0000943A                            Map_Swing_SLZ:	include	"_maps\Swinging Platforms (SLZ).asm"
0000943A                            ; ---------------------------------------------------------------------------
0000943A                            ; Sprite mappings - SLZ	swinging platforms
0000943A                            ; ---------------------------------------------------------------------------
0000943A                            Map_Swing_SLZ_internal:
0000943A 0000                       		dc.w @block-Map_Swing_SLZ_internal
0000943C 0000                       		dc.w @chain-Map_Swing_SLZ_internal
0000943E 0000                       		dc.w @anchor-Map_Swing_SLZ_internal
00009440 08                         @block:		dc.b 8
00009441 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00009446 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000944B F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00009450 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00009455 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
0000945A 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
0000945F 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00009464 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00009469 01                         @chain:		dc.b 1
0000946A F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
0000946F 01                         @anchor:	dc.b 1
00009470 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00009476 00                         		even
00009476 00                         		even
00009476                            		include	"_incObj\17 Spiked Pole Helix.asm"
00009476                            ; ---------------------------------------------------------------------------
00009476                            ; Object 17 - helix of spikes on a pole	(GHZ)
00009476                            ; ---------------------------------------------------------------------------
00009476                            
00009476                            Helix:
00009476 7000                       		moveq	#0,d0
00009478 1028 0024                  		move.b	obRoutine(a0),d0
0000947C 323B 0000                  		move.w	Hel_Index(pc,d0.w),d1
00009480 4EFB 1000                  		jmp	Hel_Index(pc,d1.w)
00009484                            ; ===========================================================================
00009484 0000                       Hel_Index:	dc.w Hel_Main-Hel_Index
00009486 0000                       		dc.w Hel_Action-Hel_Index
00009488 0000                       		dc.w Hel_Action-Hel_Index
0000948A 0000                       		dc.w Hel_Delete-Hel_Index
0000948C 0000                       		dc.w Hel_Display-Hel_Index
0000948E                            
0000948E =0000003E                  hel_frame:	equ $3E		; start frame (different for each spike)
0000948E                            
0000948E                            ;		$29-38 are used for child object addresses
0000948E                            ; ===========================================================================
0000948E                            
0000948E                            Hel_Main:	; Routine 0
0000948E 5428 0024                  		addq.b	#2,obRoutine(a0)
00009492 217C 0000 0000 0004        		move.l	#Map_Hel,obMap(a0)
0000949A 317C 4398 0002             		move.w	#$4398,obGfx(a0)
000094A0 117C 0007 0022             		move.b	#7,obStatus(a0)
000094A6 117C 0004 0001             		move.b	#4,obRender(a0)
000094AC 317C 0180 0018             		move.w	#$180,obPriority(a0)
000094B2 117C 0008 0014             		move.b	#8,obActWid(a0)
000094B8 3428 000C                  		move.w	obY(a0),d2
000094BC 3628 0008                  		move.w	obX(a0),d3
000094C0 1810                       		move.b	0(a0),d4
000094C2 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
000094C6 7200                       		moveq	#0,d1
000094C8 1212                       		move.b	(a2),d1		; move helix length to d1
000094CA 14FC 0000                  		move.b	#0,(a2)+	; clear subtype
000094CE 3001                       		move.w	d1,d0
000094D0 E248                       		lsr.w	#1,d0
000094D2 E948                       		lsl.w	#4,d0
000094D4 9640                       		sub.w	d0,d3		; d3 is x-axis position of leftmost spike
000094D6 5501                       		subq.b	#2,d1
000094D8 6500                       		bcs.s	Hel_Action	; skip to action if length is only 1
000094DA 7C00                       		moveq	#0,d6
000094DC                            
000094DC                            Hel_Build:
000094DC 6100 0000                  		bsr.w	FindFreeObj
000094E0 6600                       		bne.s	Hel_Action
000094E2 5228 0028                  		addq.b	#1,obSubtype(a0)
000094E6 3A09                       		move.w	a1,d5
000094E8 0445 D000                  		subi.w	#$D000,d5
000094EC EC4D                       		lsr.w	#6,d5
000094EE 0245 007F                  		andi.w	#$7F,d5
000094F2 14C5                       		move.b	d5,(a2)+	; copy child address to parent RAM
000094F4 137C 0008 0024             		move.b	#8,obRoutine(a1)
000094FA 1284                       		move.b	d4,0(a1)
000094FC 3342 000C                  		move.w	d2,ObY(a1)
00009500 3343 0008                  		move.w	d3,obX(a1)
00009504 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
0000950A 337C 4398 0002             		move.w	#$4398,obGfx(a1)
00009510 137C 0004 0001             		move.b	#4,obRender(a1)
00009516 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000951C 137C 0008 0014             		move.b	#8,obActWid(a1)
00009522 1346 003E                  		move.b	d6,hel_frame(a1)
00009526 5206                       		addq.b	#1,d6
00009528 0206 0007                  		andi.b	#7,d6
0000952C 0643 0010                  		addi.w	#$10,d3
00009530 B668 0008                  		cmp.w	obX(a0),d3	; is this spike in the centre?
00009534 6600                       		bne.s	Hel_NotCentre	; if not, branch
00009536                            
00009536 1146 003E                  		move.b	d6,hel_frame(a0) ; set parent spike frame
0000953A 5206                       		addq.b	#1,d6
0000953C 0206 0007                  		andi.b	#7,d6
00009540 0643 0010                  		addi.w	#$10,d3		; skip to next spike
00009544 5228 0028                  		addq.b	#1,obSubtype(a0)
00009548                            
00009548                            	Hel_NotCentre:
00009548 51C9 FF92                  		dbf	d1,Hel_Build ; repeat d1 times (helix length)
0000954C                            
0000954C                            Hel_Action:	; Routine 2, 4
0000954C 6100 0000                  		bsr.w	Hel_RotateSpikes
00009550 6100 0000                  		bsr.w	DisplaySprite
00009554 6000 0000                  		bra.w	Hel_ChkDel
00009558                            
00009558                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009558                            
00009558                            
00009558                            Hel_RotateSpikes:
00009558 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0000955C 117C 0000 0020             		move.b	#0,obColType(a0) ; make object harmless
00009562 D028 003E                  		add.b	hel_frame(a0),d0
00009566 0200 0007                  		andi.b	#7,d0
0000956A 1140 001A                  		move.b	d0,obFrame(a0)	; change current frame
0000956E 6600                       		bne.s	locret_7DA6
00009570 117C 0084 0020             		move.b	#$84,obColType(a0) ; make object harmful
00009576                            
00009576                            locret_7DA6:
00009576 4E75                       		rts	
00009578                            ; End of function Hel_RotateSpikes
00009578                            
00009578                            ; ===========================================================================
00009578                            
00009578                            Hel_ChkDel:
00009596 4E75                       		rts	
00009598                            ; ===========================================================================
00009598                            
00009598                            Hel_DelAll:
00009598 7400                       		moveq	#0,d2
0000959A 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
0000959E 141A                       		move.b	(a2)+,d2	; move helix length to d2
000095A0 5502                       		subq.b	#2,d2
000095A2 6500                       		bcs.s	Hel_Delete
000095A4                            
000095A4                            	Hel_DelLoop:
000095A4 7000                       		moveq	#0,d0
000095A6 101A                       		move.b	(a2)+,d0
000095A8 ED48                       		lsl.w	#6,d0
000095AA 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000095B0 2240                       		movea.l	d0,a1		; get child address
000095B2 6100 0000                  		bsr.w	DeleteChild	; delete object
000095B6 51CA FFEC                  		dbf	d2,Hel_DelLoop ; repeat d2 times (helix length)
000095BA                            
000095BA                            Hel_Delete:	; Routine 6
000095BA 6100 0000                  		bsr.w	DeleteObject
000095BE 4E75                       		rts	
000095C0                            ; ===========================================================================
000095C0                            
000095C0                            Hel_Display:	; Routine 8
000095C0 6100 FF96                  		bsr.w	Hel_RotateSpikes
000095C4 6000 0000                  		bra.w	DisplaySprite
000095C4 6000 0000                  		bra.w	DisplaySprite
000095C8                            Map_Hel:	include	"_maps\Spiked Pole Helix.asm"
000095C8                            ; ---------------------------------------------------------------------------
000095C8                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000095C8                            ; ---------------------------------------------------------------------------
000095C8                            Map_Hel_internal:
000095C8 0000                       		dc.w byte_7E08-Map_Hel_internal
000095CA 0000                       		dc.w byte_7E0E-Map_Hel_internal
000095CC 0000                       		dc.w byte_7E14-Map_Hel_internal
000095CE 0000                       		dc.w byte_7E1A-Map_Hel_internal
000095D0 0000                       		dc.w byte_7E20-Map_Hel_internal
000095D2 0000                       		dc.w byte_7E26-Map_Hel_internal
000095D4 0000                       		dc.w byte_7E2E-Map_Hel_internal
000095D6 0000                       		dc.w byte_7E2C-Map_Hel_internal
000095D8 01                         byte_7E08:	dc.b 1
000095D9 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC	; points straight up (harmful)
000095DE 01                         byte_7E0E:	dc.b 1
000095DF F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8	; 45 degree
000095E4 01                         byte_7E14:	dc.b 1
000095E5 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8	; 90 degree
000095EA 01                         byte_7E1A:	dc.b 1
000095EB FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8	; 45 degree
000095F0 01                         byte_7E20:	dc.b 1
000095F1 0001 000E FC               		dc.b 0,	1, 0, $E, $FC	; straight down
000095F6 01                         byte_7E26:	dc.b 1
000095F7 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD	; 45 degree
000095FC 01                         byte_7E2C:	dc.b 1
000095FD F4                         		dc.b $F4
000095FE                            byte_7E2E:	; reads the 0 below	; not visible
000095FE 0000 11FD                  		dc.b 0, 0,	$11, $FD ; 45 degree
00009602                            		even
00009602                            		even
00009602                            		include	"_incObj\18 Platforms.asm"
00009602                            ; ---------------------------------------------------------------------------
00009602                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00009602                            ; ---------------------------------------------------------------------------
00009602                            
00009602                            BasicPlatform:
00009602 7000                       		moveq	#0,d0
00009604 1028 0024                  		move.b	obRoutine(a0),d0
00009608 323B 0000                  		move.w	Plat_Index(pc,d0.w),d1
0000960C 4EFB 1000                  		jmp	Plat_Index(pc,d1.w)
00009610                            ; ===========================================================================
00009610 0000                       Plat_Index:	dc.w Plat_Main-Plat_Index
00009612 0000                       		dc.w Plat_Solid-Plat_Index
00009614 0000                       		dc.w Plat_Action2-Plat_Index
00009616 0000                       		dc.w Plat_Delete-Plat_Index
00009618 0000                       		dc.w Plat_Action-Plat_Index
0000961A                            ; ===========================================================================
0000961A                            
0000961A                            Plat_Main:	; Routine 0
0000961A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000961E 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009624 217C 0000 0000 0004        		move.l	#Map_Plat_GHZ,obMap(a0)
0000962C 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009632 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SYZ
00009638 6600                       		bne.s	@notSYZ
0000963A                            
0000963A 217C 0000 0000 0004        		move.l	#Map_Plat_SYZ,obMap(a0) ; SYZ specific code
00009642 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009648                            
00009648                            	@notSYZ:
00009648 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
0000964E 6600                       		bne.s	@notSLZ
00009650 217C 0000 0000 0004        		move.l	#Map_Plat_SLZ,obMap(a0) ; SLZ specific code
00009658 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000965E 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009664 117C 0003 0028             		move.b	#3,obSubtype(a0)
0000966A                            
0000966A                            	@notSLZ:
0000966A 117C 0004 0001             		move.b	#4,obRender(a0)
00009670 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009676 3168 000C 002C             		move.w	obY(a0),$2C(a0)
0000967C 3168 000C 0034             		move.w	obY(a0),$34(a0)
00009682 3168 0008 0032             		move.w	obX(a0),$32(a0)
00009688 317C 0080 0026             		move.w	#$80,obAngle(a0)
0000968E 7200                       		moveq	#0,d1
00009690 1028 0028                  		move.b	obSubtype(a0),d0
00009694 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00009698 6600                       		bne.s	@setframe	; if not, branch
0000969A 5201                       		addq.b	#1,d1		; use frame #1
0000969C 117C 0020 0014             		move.b	#$20,obActWid(a0) ; set width
000096A2                            
000096A2                            	@setframe:
000096A2 1141 001A                  		move.b	d1,obFrame(a0)	; set frame to d1
000096A6                            
000096A6                            Plat_Solid:	; Routine 2
000096A6 4A28 0038                  		tst.b	$38(a0)
000096AA 6700                       		beq.s	loc_7EE0
000096AC 5928 0038                  		subq.b	#4,$38(a0)
000096B0                            
000096B0                            	loc_7EE0:
000096B0 7200                       		moveq	#0,d1
000096B2 1228 0014                  		move.b	obActWid(a0),d1
000096B6 6100 F56C                  		bsr.w	PlatformObject
000096BA                            
000096BA                            Plat_Action:	; Routine 8
000096BA 6100 0000                  		bsr.w	Plat_Move
000096BE 6100 0000                  		bsr.w	Plat_Nudge
000096C2 6100 0000                  		bsr.w	DisplaySprite
000096C6 6000 0000                  		bra.w	Plat_ChkDel
000096CA                            ; ===========================================================================
000096CA                            
000096CA                            Plat_Action2:	; Routine 4
000096CA 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000096D0 6700                       		beq.s	loc_7F06
000096D2 5828 0038                  		addq.b	#4,$38(a0)
000096D6                            
000096D6                            	loc_7F06:
000096D6 7200                       		moveq	#0,d1
000096D8 1228 0014                  		move.b	obActWid(a0),d1
000096DC 6100 F6BA                  		bsr.w	ExitPlatform
000096E0 3F28 0008                  		move.w	obX(a0),-(sp)
000096E4 6100 0000                  		bsr.w	Plat_Move
000096E8 6100 0000                  		bsr.w	Plat_Nudge
000096EC 341F                       		move.w	(sp)+,d2
000096EE 6100 FC12                  		bsr.w	MvSonicOnPtfm2
000096F2 6100 0000                  		bsr.w	DisplaySprite
000096F6 6000 0000                  		bra.w	Plat_ChkDel
000096FA                            
000096FA 4E75                       		rts
000096FC                            
000096FC                            ; ---------------------------------------------------------------------------
000096FC                            ; Subroutine to	move platform slightly when you	stand on it
000096FC                            ; ---------------------------------------------------------------------------
000096FC                            
000096FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000096FC                            
000096FC                            
000096FC                            Plat_Nudge:
000096FC 1028 0038                  		move.b	$38(a0),d0
00009700 6100 A5C8                  		bsr.w	CalcSine
00009704 323C 0400                  		move.w	#$400,d1
00009708 C1C1                       		muls.w	d1,d0
0000970A 4840                       		swap	d0
0000970C D068 002C                  		add.w	$2C(a0),d0
00009710 3140 000C                  		move.w	d0,obY(a0)
00009714 4E75                       		rts	
00009716                            ; End of function Plat_Nudge
00009716                            
00009716                            ; ---------------------------------------------------------------------------
00009716                            ; Subroutine to	move platforms
00009716                            ; ---------------------------------------------------------------------------
00009716                            
00009716                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009716                            
00009716                            
00009716                            Plat_Move:
00009716 7000                       		moveq	#0,d0
00009718 1028 0028                  		move.b	obSubtype(a0),d0
0000971C 0240 000F                  		andi.w	#$F,d0
00009720 D040                       		add.w	d0,d0
00009722 323B 0000                  		move.w	@index(pc,d0.w),d1
00009726 4EFB 1000                  		jmp	@index(pc,d1.w)
0000972A                            ; End of function Plat_Move
0000972A                            
0000972A                            ; ===========================================================================
0000972A 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
0000972E 0000 0000                  		dc.w @type02-@index, @type03-@index
00009732 0000 0000                  		dc.w @type04-@index, @type05-@index
00009736 0000 0000                  		dc.w @type06-@index, @type07-@index
0000973A 0000 0000                  		dc.w @type08-@index, @type00-@index
0000973E 0000 0000                  		dc.w @type0A-@index, @type0B-@index
00009742 0000                       		dc.w @type0C-@index
00009744                            ; ===========================================================================
00009744                            
00009744                            @type00:
00009744 4E75                       		rts			; platform 00 doesn't move
00009746                            ; ===========================================================================
00009746                            
00009746                            @type05:
00009746 3028 0032                  		move.w	$32(a0),d0
0000974A 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
0000974E 4401                       		neg.b	d1		; reverse platform-motion
00009750 0601 0040                  		addi.b	#$40,d1
00009754 6000                       		bra.s	@type01_move
00009756                            ; ===========================================================================
00009756                            
00009756                            @type01:
00009756 3028 0032                  		move.w	$32(a0),d0
0000975A 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
0000975E 0401 0040                  		subi.b	#$40,d1
00009762                            
00009762                            	@type01_move:
00009762 4881                       		ext.w	d1
00009764 D041                       		add.w	d1,d0
00009766 3140 0008                  		move.w	d0,obX(a0)	; change position on x-axis
0000976A 6000 0000                  		bra.w	@chgmotion
0000976E                            ; ===========================================================================
0000976E                            
0000976E                            @type0C:
0000976E 3028 0034                  		move.w	$34(a0),d0
00009772 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009776 4401                       		neg.b	d1		; reverse platform-motion
00009778 0601 0030                  		addi.b	#$30,d1
0000977C 6000                       		bra.s	@type02_move
0000977E                            ; ===========================================================================
0000977E                            
0000977E                            @type0B:
0000977E 3028 0034                  		move.w	$34(a0),d0
00009782 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009786 0401 0030                  		subi.b	#$30,d1
0000978A 6000                       		bra.s	@type02_move
0000978C                            ; ===========================================================================
0000978C                            
0000978C                            @type06:
0000978C 3028 0034                  		move.w	$34(a0),d0
00009790 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009794 4401                       		neg.b	d1		; reverse platform-motion
00009796 0601 0040                  		addi.b	#$40,d1
0000979A 6000                       		bra.s	@type02_move
0000979C                            ; ===========================================================================
0000979C                            
0000979C                            @type02:
0000979C 3028 0034                  		move.w	$34(a0),d0
000097A0 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
000097A4 0401 0040                  		subi.b	#$40,d1
000097A8                            
000097A8                            	@type02_move:
000097A8 4881                       		ext.w	d1
000097AA D041                       		add.w	d1,d0
000097AC 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000097B0 6000 0000                  		bra.w	@chgmotion
000097B4                            ; ===========================================================================
000097B4                            
000097B4                            @type03:
000097B4 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000097B8 6600                       		bne.s	@type03_wait	; if yes, branch
000097BA 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the platform?
000097C0 6700                       		beq.s	@type03_nomove	; if not, branch
000097C2 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000097C8                            
000097C8                            	@type03_nomove:
000097C8 4E75                       		rts	
000097CA                            
000097CA                            	@type03_wait:
000097CA 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000097CE 66F8                       		bne.s	@type03_nomove	; if time is > 0, branch
000097D0 317C 0020 003A             		move.w	#32,$3A(a0)
000097D6 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 04 (falling)
000097DA 4E75                       		rts	
000097DC                            ; ===========================================================================
000097DC                            
000097DC                            @type04:
000097DC 4A68 003A                  		tst.w	$3A(a0)
000097E0 6700                       		beq.s	@loc_8048
000097E2 5368 003A                  		subq.w	#1,$3A(a0)
000097E6 6600                       		bne.s	@loc_8048
000097E8 0828 0003 0022             		btst	#3,obStatus(a0)
000097EE 6700                       		beq.s	@loc_8042
000097F0 08E9 0001 0022             		bset	#1,obStatus(a1)
000097F6 08A9 0003 0022             		bclr	#3,obStatus(a1)
000097FC 137C 0002 0024             		move.b	#2,obRoutine(a1)
00009802 08A8 0003 0022             		bclr	#3,obStatus(a0)
00009808 4228 0025                  		clr.b	$25(a0)
0000980C 3368 0012 0012             		move.w	obVelY(a0),obVelY(a1)
00009812                            
00009812                            	@loc_8042:
00009812 117C 0008 0024             		move.b	#8,obRoutine(a0)
00009818                            
00009818                            	@loc_8048:
00009818 2628 002C                  		move.l	$2C(a0),d3
0000981C 3028 0012                  		move.w	obVelY(a0),d0
00009820 48C0                       		ext.l	d0
00009822 E180                       		asl.l	#8,d0
00009824 D680                       		add.l	d0,d3
00009826 2143 002C                  		move.l	d3,$2C(a0)
0000982A 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00009830 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00009834 0640 00E0                  		addi.w	#$E0,d0
00009838 B068 002C                  		cmp.w	$2C(a0),d0
0000983C 6400                       		bcc.s	@locret_8074
0000983E 117C 0006 0024             		move.b	#6,obRoutine(a0)
00009844                            
00009844                            	@locret_8074:
00009844 4E75                       		rts	
00009846                            ; ===========================================================================
00009846                            
00009846                            @type07:
00009846 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000984A 6600                       		bne.s	@type07_wait	; if yes, branch
0000984C 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
00009850 7000                       		moveq	#0,d0
00009852 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type ($x7) to d0
00009856 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00009858 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
0000985C 6700                       		beq.s	@type07_nomove	; if not, branch
0000985E 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00009864                            
00009864                            	@type07_nomove:
00009864 4E75                       		rts	
00009866                            
00009866                            	@type07_wait:
00009866 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0000986A 66F8                       		bne.s	@type07_nomove	; if time is > 0, branch
0000986C 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 08
00009870 4E75                       		rts	
00009872                            ; ===========================================================================
00009872                            
00009872                            @type08:
00009872 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00009876 3028 0034                  		move.w	$34(a0),d0
0000987A 0440 0200                  		subi.w	#$200,d0
0000987E B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00009882 6600                       		bne.s	@type08_nostop	; if not, branch
00009884 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (stop moving)
00009888                            
00009888                            	@type08_nostop:
00009888 4E75                       		rts	
0000988A                            ; ===========================================================================
0000988A                            
0000988A                            @type0A:
0000988A 3028 0034                  		move.w	$34(a0),d0
0000988E 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009892 0401 0040                  		subi.b	#$40,d1
00009896 4881                       		ext.w	d1
00009898 E241                       		asr.w	#1,d1
0000989A D041                       		add.w	d1,d0
0000989C 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000098A0                            
000098A0                            @chgmotion:
000098A0 1178 FE78 0026             		move.b	(v_oscillate+$1A).w,$26(a0) ; update platform-movement variable
000098A6 4E75                       		rts	
000098A8                            ; ===========================================================================
000098A8                            
000098A8                            Plat_ChkDel:
000098C4 4E75                       		rts	
000098C6                            ; ===========================================================================
000098C6                            
000098C6                            Plat_Delete:	; Routine 6
000098C6 6000 0000                  		bra.w	DeleteObject
000098C6 6000 0000                  		bra.w	DeleteObject
000098CA                            Map_Plat_Unused:include	"_maps\Platforms (unused).asm"
000098CA                            ; ---------------------------------------------------------------------------
000098CA                            ; Sprite mappings - unused
000098CA                            ; ---------------------------------------------------------------------------
000098CA                            Map_Plat_Unused_internal:
000098CA 0000                       		dc.w @small-Map_Plat_Unused_internal
000098CC 0000                       		dc.w @large-Map_Plat_Unused_internal
000098CE 02                         @small:		dc.b 2
000098CF F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
000098D4 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
000098D9 0A                         @large:		dc.b $A
000098DA F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
000098DF 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
000098E4 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000098E9 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
000098EE 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
000098F3 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
000098F8 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
000098FD 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009902 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00009907 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
0000990C                            		even
0000990C                            		even
0000990C                            Map_Plat_GHZ:	include	"_maps\Platforms (GHZ).asm"
0000990C                            ; ---------------------------------------------------------------------------
0000990C                            ; Sprite mappings - GHZ	platforms
0000990C                            ; ---------------------------------------------------------------------------
0000990C                            Map_Plat_GHZ_internal:
0000990C 0000                       		dc.w @small-Map_Plat_GHZ_internal
0000990E 0000                       		dc.w @large-Map_Plat_GHZ_internal
00009910 04                         @small:		dc.b 4
00009911 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00009916 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
0000991B F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009920 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00009925 0A                         @large:		dc.b $A
00009926 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
0000992B 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009930 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00009935 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
0000993A 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
0000993F F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00009944 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00009949 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
0000994E 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00009953 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00009958                            		even
00009958                            		even
00009958                            Map_Plat_SYZ:	include	"_maps\Platforms (SYZ).asm"
00009958                            ; ---------------------------------------------------------------------------
00009958                            ; Sprite mappings - SYZ	platforms
00009958                            ; ---------------------------------------------------------------------------
00009958                            Map_Plat_SYZ_internal:
00009958 0000                       		dc.w @platform-Map_Plat_SYZ_internal
0000995A 03                         @platform:	dc.b 3
0000995B F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00009960 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00009965 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
0000996A                            		even
0000996A                            		even
0000996A                            Map_Plat_SLZ:	include	"_maps\Platforms (SLZ).asm"
0000996A                            ; ---------------------------------------------------------------------------
0000996A                            ; Sprite mappings - SLZ	platforms
0000996A                            ; ---------------------------------------------------------------------------
0000996A                            Map_Plat_SLZ_internal:
0000996A 0000                       		dc.w @platform-Map_Plat_SLZ_internal
0000996C 02                         @platform:	dc.b 2
0000996D F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00009972 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009978 00                         		even
00009978 00                         		even
00009978                            Map_GBall:	include	"_maps\GHZ Ball.asm"
00009978                            ; ---------------------------------------------------------------------------
00009978                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009978                            ; ---------------------------------------------------------------------------
00009978                            Map_GBall_internal:
00009978 0000                       		dc.w @shiny-Map_GBall_internal
0000997A 0000                       		dc.w @check1-Map_GBall_internal
0000997C 0000                       		dc.w @check2-Map_GBall_internal
0000997E 0000                       		dc.w @check3-Map_GBall_internal
00009980 06                         @shiny:		dc.b 6
00009981 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009986 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
0000998B E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009990 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009995 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
0000999A 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000999F 04                         @check1:	dc.b 4
000099A0 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
000099A5 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
000099AA 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
000099AF 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
000099B4 04                         @check2:	dc.b 4
000099B5 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000099BA E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000099BF 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000099C4 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000099C9 04                         @check3:	dc.b 4
000099CA E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000099CF E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000099D4 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000099D9 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000099DE                            		even
000099DE                            		even
000099DE                            		include	"_incObj\1A Collapsing Ledge (part 1).asm"
000099DE                            ; ---------------------------------------------------------------------------
000099DE                            ; Object 1A - GHZ collapsing ledge
000099DE                            ; ---------------------------------------------------------------------------
000099DE                            
000099DE                            CollapseLedge:
000099DE 7000                       		moveq	#0,d0
000099E0 1028 0024                  		move.b	obRoutine(a0),d0
000099E4 323B 0000                  		move.w	Ledge_Index(pc,d0.w),d1
000099E8 4EFB 1000                  		jmp	Ledge_Index(pc,d1.w)
000099EC                            ; ===========================================================================
000099EC 0000 0000                  Ledge_Index:	dc.w Ledge_Main-Ledge_Index, Ledge_Touch-Ledge_Index
000099F0 0000 0000                  		dc.w Ledge_Collapse-Ledge_Index, Ledge_Display-Ledge_Index
000099F4 0000 0000                  		dc.w Ledge_Delete-Ledge_Index, Ledge_WalkOff-Ledge_Index
000099F8                            
000099F8 =00000038                  ledge_timedelay:	equ $38		; time between touching the ledge and it collapsing
000099F8 =0000003A                  ledge_collapse_flag:	equ $3A		; collapse flag
000099F8                            ; ===========================================================================
000099F8                            
000099F8                            Ledge_Main:	; Routine 0
000099F8 5428 0024                  		addq.b	#2,obRoutine(a0)
000099FC 217C 0000 0000 0004        		move.l	#Map_Ledge,obMap(a0)
00009A04 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009A0A 0028 0004 0001             		ori.b	#4,obRender(a0)
00009A10 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009A16 117C 0007 0038             		move.b	#7,ledge_timedelay(a0) ; set time delay for collapse
00009A1C 117C 0064 0014             		move.b	#$64,obActWid(a0)
00009A22 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00009A28 117C 0038 0016             		move.b	#$38,obHeight(a0)
00009A2E 08E8 0004 0001             		bset	#4,obRender(a0)
00009A34                            
00009A34                            Ledge_Touch:	; Routine 2
00009A34 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009A38 6700                       		beq.s	@slope		; if not, branch
00009A3A 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time reached zero?
00009A3E 6700 0000                  		beq.w	Ledge_Fragment	; if yes, branch
00009A42 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009A46                            
00009A46                            	@slope:
00009A46 323C 0030                  		move.w	#$30,d1
00009A4A 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009A50 6100 F2A6                  		bsr.w	SlopeObject
00009A54 6000 0000                  		bra.w	RememberState
00009A58                            ; ===========================================================================
00009A58                            
00009A58                            Ledge_Collapse:	; Routine 4
00009A58 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009A5C 6700 0000                  		beq.w	loc_847A
00009A60 117C 0001 003A             		move.b	#1,ledge_collapse_flag(a0)	; set collapse flag
00009A66 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009A6A                            
00009A6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009A6A                            
00009A6A                            
00009A6A                            Ledge_WalkOff:	; Routine $A
00009A6A 323C 0030                  		move.w	#$30,d1
00009A6E 6100 F328                  		bsr.w	ExitPlatform
00009A72 323C 0030                  		move.w	#$30,d1
00009A76 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009A7C 3428 0008                  		move.w	obX(a0),d2
00009A80 6100 0000                  		bsr.w	SlopeObject2
00009A84 6000 0000                  		bra.w	RememberState
00009A88                            ; End of function Ledge_WalkOff
00009A88                            
00009A88                            ; ===========================================================================
00009A88                            
00009A88                            Ledge_Display:	; Routine 6
00009A88 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time delay reached zero?
00009A8C 6700                       		beq.s	Ledge_TimeZero	; if yes, branch
00009A8E 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009A92 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009A96 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009A9A 6000 0000                  		bra.w	DisplaySprite
00009A9E                            ; ===========================================================================
00009A9E                            
00009A9E                            loc_82D0:
00009A9E 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009AA2 6100 FFC6                  		bsr.w	Ledge_WalkOff
00009AA6 43F8 D000                  		lea	(v_player).w,a1
00009AAA 0829 0003 0022             		btst	#3,obStatus(a1)
00009AB0 6700                       		beq.s	loc_82FC
00009AB2 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009AB6 6600                       		bne.s	locret_8308
00009AB8 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009ABE 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009AC4 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009ACA                            
00009ACA                            loc_82FC:
00009ACA 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009AD0 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "Ledge_Display" routine
00009AD6                            
00009AD6                            locret_8308:
00009AD6 4E75                       		rts	
00009AD8                            ; ===========================================================================
00009AD8                            
00009AD8                            Ledge_TimeZero:
00009AD8 6100 0000                  		bsr.w	ObjectFall
00009ADC 6100 0000                  		bsr.w	DisplaySprite
00009AE0 4A28 0001                  		tst.b	obRender(a0)
00009AE4 6A00                       		bpl.s	Ledge_Delete
00009AE6 4E75                       		rts	
00009AE8                            ; ===========================================================================
00009AE8                            
00009AE8                            Ledge_Delete:	; Routine 8
00009AE8 6100 0000                  		bsr.w	DeleteObject
00009AEC 4E75                       		rts	
00009AEC 4E75                       		rts	
00009AEE                            		include	"_incObj\53 Collapsing Floors.asm"
00009AEE                            ; ---------------------------------------------------------------------------
00009AEE                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00009AEE                            ; ---------------------------------------------------------------------------
00009AEE                            
00009AEE                            CollapseFloor:
00009AEE 7000                       		moveq	#0,d0
00009AF0 1028 0024                  		move.b	obRoutine(a0),d0
00009AF4 323B 0000                  		move.w	CFlo_Index(pc,d0.w),d1
00009AF8 4EFB 1000                  		jmp	CFlo_Index(pc,d1.w)
00009AFC                            ; ===========================================================================
00009AFC 0000 0000                  CFlo_Index:	dc.w CFlo_Main-CFlo_Index, CFlo_Touch-CFlo_Index
00009B00 0000 0000                  		dc.w CFlo_Collapse-CFlo_Index, CFlo_Display-CFlo_Index
00009B04 0000 0000                  		dc.w CFlo_Delete-CFlo_Index, CFlo_WalkOff-CFlo_Index
00009B08                            
00009B08 =00000038                  cflo_timedelay:		equ $38
00009B08 =0000003A                  cflo_collapse_flag:	equ $3A
00009B08                            ; ===========================================================================
00009B08                            
00009B08                            CFlo_Main:	; Routine 0
00009B08 5428 0024                  		addq.b	#2,obRoutine(a0)
00009B0C 217C 0000 0000 0004        		move.l	#Map_CFlo,obMap(a0)
00009B14 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00009B1A 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009B20 6600                       		bne.s	@notSLZ
00009B22                            
00009B22 317C 44E0 0002             		move.w	#$44E0,obGfx(a0) ; SLZ specific code
00009B28 5428 001A                  		addq.b	#2,obFrame(a0)
00009B2C                            
00009B2C                            	@notSLZ:
00009B2C 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SBZ
00009B32 6600                       		bne.s	@notSBZ
00009B34 317C 43C2 0002             		move.w	#$43C2,obGfx(a0) ; SBZ specific code
00009B3A                            
00009B3A                            	@notSBZ:
00009B3A 0028 0004 0001             		ori.b	#4,obRender(a0)
00009B40 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009B46 117C 0007 0038             		move.b	#7,cflo_timedelay(a0)
00009B4C 117C 0044 0014             		move.b	#$44,obActWid(a0)
00009B52                            
00009B52                            CFlo_Touch:	; Routine 2
00009B52 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009B56 6700                       		beq.s	@solid		; if not, branch
00009B58 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009B5C 6700 0000                  		beq.w	CFlo_Fragment	; if yes, branch
00009B60 5328 0038                  		subq.b	#1,cflo_timedelay(a0) ; subtract 1 from time
00009B64                            
00009B64                            	@solid:
00009B64 323C 0020                  		move.w	#$20,d1
00009B68 6100 F0BA                  		bsr.w	PlatformObject
00009B6C 4A28 0028                  		tst.b	obSubtype(a0)
00009B70 6A00                       		bpl.s	@remstate
00009B72 0829 0003 0022             		btst	#3,obStatus(a1)
00009B78 6700                       		beq.s	@remstate
00009B7A 08A8 0000 0001             		bclr	#0,obRender(a0)
00009B80 3029 0008                  		move.w	obX(a1),d0
00009B84 9068 0008                  		sub.w	obX(a0),d0
00009B88 6400                       		bcc.s	@remstate
00009B8A 08E8 0000 0001             		bset	#0,obRender(a0)
00009B90                            
00009B90                            	@remstate:
00009B90 6000 0000                  		bra.w	RememberState
00009B94                            ; ===========================================================================
00009B94                            
00009B94                            CFlo_Collapse:	; Routine 4
00009B94 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009B98 6700 0000                  		beq.w	loc_8458
00009B9C 117C 0001 003A             		move.b	#1,cflo_collapse_flag(a0)	; set object as	"touched"
00009BA2 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009BA6                            
00009BA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009BA6                            
00009BA6                            
00009BA6                            CFlo_WalkOff:	; Routine $A
00009BA6 323C 0020                  		move.w	#$20,d1
00009BAA 6100 F1EC                  		bsr.w	ExitPlatform
00009BAE 3428 0008                  		move.w	obX(a0),d2
00009BB2 6100 F74E                  		bsr.w	MvSonicOnPtfm2
00009BB6 6000 0000                  		bra.w	RememberState
00009BBA                            ; End of function CFlo_WalkOff
00009BBA                            
00009BBA                            ; ===========================================================================
00009BBA                            
00009BBA                            CFlo_Display:	; Routine 6
00009BBA 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009BBE 6700                       		beq.s	CFlo_TimeZero	; if yes, branch
00009BC0 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009BC4 6600 0000                  		bne.w	loc_8402	; if yes, branch
00009BC8 5328 0038                  		subq.b	#1,cflo_timedelay(a0); subtract 1 from time
00009BCC 6000 0000                  		bra.w	DisplaySprite
00009BD0                            ; ===========================================================================
00009BD0                            
00009BD0                            loc_8402:
00009BD0 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009BD4 6100 FFD0                  		bsr.w	CFlo_WalkOff
00009BD8 43F8 D000                  		lea	(v_player).w,a1
00009BDC 0829 0003 0022             		btst	#3,obStatus(a1)
00009BE2 6700                       		beq.s	loc_842E
00009BE4 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009BE8 6600                       		bne.s	locret_843A
00009BEA 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009BF0 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009BF6 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009BFC                            
00009BFC                            loc_842E:
00009BFC 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009C02 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "CFlo_Display" routine
00009C08                            
00009C08                            locret_843A:
00009C08 4E75                       		rts	
00009C0A                            ; ===========================================================================
00009C0A                            
00009C0A                            CFlo_TimeZero:
00009C0A 6100 0000                  		bsr.w	ObjectFall
00009C0E 6100 0000                  		bsr.w	DisplaySprite
00009C12 4A28 0001                  		tst.b	obRender(a0)
00009C16 6A00                       		bpl.s	CFlo_Delete
00009C18 4E75                       		rts	
00009C1A                            ; ===========================================================================
00009C1A                            
00009C1A                            CFlo_Delete:	; Routine 8
00009C1A 6100 0000                  		bsr.w	DeleteObject
00009C1E 4E75                       		rts	
00009C20                            ; ===========================================================================
00009C20                            
00009C20                            CFlo_Fragment:
00009C20 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009C26                            
00009C26                            loc_8458:
00009C26 49F9 0000 0000             		lea	(CFlo_Data2).l,a4
00009C2C 0828 0000 0028             		btst	#0,obSubtype(a0)
00009C32 6700                       		beq.s	loc_846C
00009C34 49F9 0000 0000             		lea	(CFlo_Data3).l,a4
00009C3A                            
00009C3A                            loc_846C:
00009C3A 7207                       		moveq	#7,d1
00009C3C 5228 001A                  		addq.b	#1,obFrame(a0)
00009C40 6000                       		bra.s	loc_8486
00009C40 6000                       		bra.s	loc_8486
00009C42                            
00009C42                            ; ===========================================================================
00009C42                            
00009C42                            Ledge_Fragment:
00009C42 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009C48                            
00009C48                            loc_847A:
00009C48 49F9 0000 0000             		lea	(CFlo_Data1).l,a4
00009C4E 7218                       		moveq	#$18,d1
00009C50 5428 001A                  		addq.b	#2,obFrame(a0)
00009C54                            
00009C54                            loc_8486:
00009C54 7000                       		moveq	#0,d0
00009C56 1028 001A                  		move.b	obFrame(a0),d0
00009C5A D040                       		add.w	d0,d0
00009C5C 2668 0004                  		movea.l	obMap(a0),a3
00009C60 D6F3 0000                  		adda.w	(a3,d0.w),a3
00009C64 524B                       		addq.w	#1,a3
00009C66 08E8 0005 0001             		bset	#5,obRender(a0)
00009C6C 1810                       		move.b	0(a0),d4
00009C6E 1A28 0001                  		move.b	obRender(a0),d5
00009C72 2248                       		movea.l	a0,a1
00009C74 137C 0006 0024             		move.b	#6,obRoutine(a1)
00009C7A 1284                       		move.b	d4,0(a1)
00009C7C 234B 0004                  		move.l	a3,obMap(a1)
00009C80 1345 0001                  		move.b	d5,obRender(a1)
00009C84 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009C8A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00009C90 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009C96 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00009C9C 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00009CA2 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
00009CA6 5341                       		subq.w	#1,d1
00009CA8 43F8 D800                  		lea		(v_lvlobjspace).w,a1
00009CAC 303C 005F                  		move.w	#$5F,d0
00009CB0                            ; ===========================================================================
00009CB0                            
00009CB0                            loc_84AA:
00009CB0 4A11                       		tst.b	(a1)
00009CB2 6700                       		beq.s	@cont		
00009CB4 43E9 0040                  		lea		$40(a1),a1
00009CB8 51C8 FFF6                  		dbf		d0,loc_84AA	
00009CBC 6600                       		bne.s	loc_84F2	
00009CBE                            	@cont:
00009CBE 5A4B                       		addq.w	#5,a3
00009CC0                            
00009CC0                            loc_84B2:
00009CC0 137C 0006 0024             		move.b	#6,obRoutine(a1)
00009CC6 1284                       		move.b	d4,0(a1)
00009CC8 234B 0004                  		move.l	a3,obMap(a1)
00009CCC 1345 0001                  		move.b	d5,obRender(a1)
00009CD0 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009CD6 3368 000C 000C             		move.w	obY(a0),obY(a1)
00009CDC 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009CE2 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00009CE8 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00009CEE 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
00009CF2 6100 0000                  		bsr.w	DisplaySprite1
00009CF6                            
00009CF6                            loc_84EE:
00009CF6 51C9 FFB8                  		dbf	d1,loc_84AA
00009CFA                            
00009CFA                            loc_84F2:
00009CFA 6100 0000                  		bsr.w	DisplaySprite
00009D08                            ; ===========================================================================
00009D08                            ; ---------------------------------------------------------------------------
00009D08                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00009D08                            ; ---------------------------------------------------------------------------
00009D08 1C18 1410 1A16 120E 0A06+  CFlo_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00009D18 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00009D22 1E16 0E06 1A12 0A02        CFlo_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00009D2A 161E 1A12 060E 0A02        CFlo_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00009D32                            
00009D32                            ; ---------------------------------------------------------------------------
00009D32                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00009D32                            ; ---------------------------------------------------------------------------
00009D32                            
00009D32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D32                            
00009D32                            
00009D32                            SlopeObject2:
00009D32 43F8 D000                  		lea	(v_player).w,a1
00009D36 0829 0003 0022             		btst	#3,obStatus(a1)
00009D3C 6700                       		beq.s	locret_856E
00009D3E 3029 0008                  		move.w	obX(a1),d0
00009D42 9068 0008                  		sub.w	obX(a0),d0
00009D46 D041                       		add.w	d1,d0
00009D48 E248                       		lsr.w	#1,d0
00009D4A 0828 0000 0001             		btst	#0,obRender(a0)
00009D50 6700                       		beq.s	loc_854E
00009D52 4640                       		not.w	d0
00009D54 D041                       		add.w	d1,d0
00009D56                            
00009D56                            loc_854E:
00009D56 7200                       		moveq	#0,d1
00009D58 1232 0000                  		move.b	(a2,d0.w),d1
00009D5C 3028 000C                  		move.w	obY(a0),d0
00009D60 9041                       		sub.w	d1,d0
00009D62 7200                       		moveq	#0,d1
00009D64 1229 0016                  		move.b	obHeight(a1),d1
00009D68 9041                       		sub.w	d1,d0
00009D6A 3340 000C                  		move.w	d0,obY(a1)
00009D6E 9468 0008                  		sub.w	obX(a0),d2
00009D72 9569 0008                  		sub.w	d2,obX(a1)
00009D76                            
00009D76                            locret_856E:
00009D76 4E75                       		rts	
00009D78                            ; End of function SlopeObject2
00009D78                            
00009D78                            ; ===========================================================================
00009D78                            ; ---------------------------------------------------------------------------
00009D78                            ; Collision data for GHZ collapsing ledge
00009D78                            ; ---------------------------------------------------------------------------
00009D78                            Ledge_SlopeData:
00009D78                            		incbin	"misc\GHZ Collapsing Ledge Heightmap.bin"
00009DA8                            		even
00009DA8                            
00009DA8                            Map_Ledge:	include	"_maps\Collapsing Ledge.asm"
00009DA8                            ; ---------------------------------------------------------------------------
00009DA8                            ; Sprite mappings - GHZ	collapsing ledge
00009DA8                            ; ---------------------------------------------------------------------------
00009DA8                            Map_Ledge_internal:
00009DA8 0000                       		dc.w @left-Map_Ledge_internal
00009DAA 0000                       		dc.w @right-Map_Ledge_internal
00009DAC 0000                       		dc.w @leftsmash-Map_Ledge_internal
00009DAE 0000                       		dc.w @rightsmash-Map_Ledge_internal
00009DB0 10                         @left:		dc.b $10
00009DB1 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00009DB6 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009DBB E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009DC0 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009DC5 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009DCA D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009DCF F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009DD4 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009DD9 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009DDE F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009DE3 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009DE8 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009DED 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009DF2 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009DF7 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009DFC 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009E01 10                         @right:		dc.b $10
00009E02 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00009E07 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009E0C E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009E11 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009E16 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009E1B D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009E20 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009E25 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009E2A F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009E2F F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009E34 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009E39 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009E3E 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009E43 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009E48 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009E4D 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009E52 19                         @leftsmash:	dc.b $19
00009E53 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00009E58 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009E5D D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009E62 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009E67 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009E6C E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009E71 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009E76 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009E7B D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009E80 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009E85 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009E8A F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009E8F F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009E94 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009E99 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009E9E F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009EA3 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009EA8 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009EAD 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009EB2 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009EB7 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009EBC 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009EC1 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009EC6 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009ECB 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009ED0 19                         @rightsmash:	dc.b $19
00009ED1 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00009ED6 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009EDB D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009EE0 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009EE5 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009EEA E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009EEF E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009EF4 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009EF9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009EFE D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009F03 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009F08 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009F0D F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009F12 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009F17 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009F1C F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009F21 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009F26 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009F2B 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009F30 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009F35 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009F3A 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009F3F 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009F44 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009F49 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009F4E                            		even
00009F4E                            		even
00009F4E                            Map_CFlo:	include	"_maps\Collapsing Floors.asm"
00009F4E                            ; --------------------------------------------------------------------------------
00009F4E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00009F4E                            ; --------------------------------------------------------------------------------
00009F4E                            
00009F4E                            SME_WNa9T:	
00009F4E 0000 0000                  		dc.w SME_WNa9T_8-SME_WNa9T, SME_WNa9T_31-SME_WNa9T	
00009F52 0000 0000                  		dc.w SME_WNa9T_5A-SME_WNa9T, SME_WNa9T_6F-SME_WNa9T	
00009F56 08                         SME_WNa9T_8:	dc.b 8	
00009F57 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00009F5C 0805 0004 E0               		dc.b 8, 5, 0, 4, $E0	
00009F61 F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
00009F66 0805 0004 F0               		dc.b 8, 5, 0, 4, $F0	
00009F6B F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
00009F70 0805 0004 00               		dc.b 8, 5, 0, 4, 0	
00009F75 F805 0000 10               		dc.b $F8, 5, 0, 0, $10	
00009F7A 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
00009F7F 08                         SME_WNa9T_31:	dc.b 8	
00009F80 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00009F85 0805 0004 E0               		dc.b 8, 5, 0, 4, $E0	
00009F8A F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
00009F8F 0805 0004 F0               		dc.b 8, 5, 0, 4, $F0	
00009F94 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
00009F99 0805 0004 00               		dc.b 8, 5, 0, 4, 0	
00009F9E F805 0000 10               		dc.b $F8, 5, 0, 0, $10	
00009FA3 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
00009FA8 04                         SME_WNa9T_5A:	dc.b 4	
00009FA9 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
00009FAE 080D 0008 E0               		dc.b 8, $D, 0, 8, $E0	
00009FB3 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
00009FB8 080D 0008 00               		dc.b 8, $D, 0, 8, 0	
00009FBD 08                         SME_WNa9T_6F:	dc.b 8	
00009FBE F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00009FC3 F805 0004 F0               		dc.b $F8, 5, 0, 4, $F0	
00009FC8 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
00009FCD F805 0004 10               		dc.b $F8, 5, 0, 4, $10	
00009FD2 0805 0008 E0               		dc.b 8, 5, 0, 8, $E0	
00009FD7 0805 000C F0               		dc.b 8, 5, 0, $C, $F0	
00009FDC 0805 0008 00               		dc.b 8, 5, 0, 8, 0	
00009FE1 0805 000C 10               		dc.b 8, 5, 0, $C, $10	
00009FE6                            		even
00009FE6                            		even
00009FE6                            
00009FE6                            		include	"_incObj\1C Scenery.asm"
00009FE6                            ; ---------------------------------------------------------------------------
00009FE6                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00009FE6                            ; ---------------------------------------------------------------------------
00009FE6                            
00009FE6                            Scenery:
00009FE6 7000                       		moveq	#0,d0
00009FE8 1028 0024                  		move.b	obRoutine(a0),d0
00009FEC 323B 0000                  		move.w	Scen_Index(pc,d0.w),d1
00009FF0 4EFB 1000                  		jmp	Scen_Index(pc,d1.w)
00009FF4                            ; ===========================================================================
00009FF4 0000                       Scen_Index:	dc.w Scen_Main-Scen_Index
00009FF6 0000                       		dc.w Scen_ChkDel-Scen_Index
00009FF8                            ; ===========================================================================
00009FF8                            
00009FF8                            Scen_Main:	; Routine 0
00009FF8 5428 0024                  		addq.b	#2,obRoutine(a0)
00009FFC 7000                       		moveq	#0,d0
00009FFE 1028 0028                  		move.b	obSubtype(a0),d0 ; copy object subtype to d0
0000A002 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000A006 43FB 0000                  		lea	Scen_Values(pc,d0.w),a1
0000A00A 2159 0004                  		move.l	(a1)+,obMap(a0)
0000A00E 3159 0002                  		move.w	(a1)+,obGfx(a0)
0000A012 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A018 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000A01C 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000A020 1159 0018                  		move.b	(a1)+,obPriority(a0)
0000A024 3028 0018                  		move.w obPriority(a0),d0 
0000A028 E248                       		lsr.w #1,d0 
0000A02A 0240 0380                  		andi.w #$380,d0 
0000A02E 3140 0018                  		move.w d0,obPriority(a0)		
0000A032 1159 0020                  		move.b	(a1)+,obColType(a0)
0000A036                            
0000A036                            Scen_ChkDel:	; Routine 2
0000A054 6000 0000                  		bra.w	DisplaySprite
0000A058                            ; ===========================================================================
0000A058                            ; ---------------------------------------------------------------------------
0000A058                            ; Variables for	object $1C are stored in an array
0000A058                            ; ---------------------------------------------------------------------------
0000A058 0000 0000                  Scen_Values:	dc.l Map_Scen		; mappings address
0000A05C 44D8                       		dc.w $44D8		; VRAM setting
0000A05E 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000A062 0000 0000                  		dc.l Map_Scen
0000A066 44D8                       		dc.w $44D8
0000A068 0008 0200                  		dc.b 0,	8, 2, 0
0000A06C 0000 0000                  		dc.l Map_Scen
0000A070 44D8                       		dc.w $44D8
0000A072 0008 0200                  		dc.b 0,	8, 2, 0
0000A076 0000 910C                  		dc.l Map_Bri
0000A07A 438E                       		dc.w $438E
0000A07C 0110 0100                  		dc.b 1,	$10, 1,	0
0000A080                            		even
0000A080                            		even
0000A080                            Map_Scen:	include	"_maps\Scenery.asm"
0000A080                            ; ---------------------------------------------------------------------------
0000A080                            ; Sprite mappings - SLZ	lava thrower
0000A080                            ; ---------------------------------------------------------------------------
0000A080                            Map_Scen_internal:
0000A080 0000                       		dc.w byte_8858-Map_Scen_internal
0000A082 01                         byte_8858:	dc.b 1
0000A083 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000A088                            		even
0000A088                            		even
0000A088                            
0000A088                            		include	"_incObj\1D Water Switcher.asm"
0000A088                            ; ----------------------------------------------------------------------------
0000A088                            ; Object 1D - Water Switcher
0000A088                            ; ----------------------------------------------------------------------------
0000A088                            ; Sprite_1FCDC:
0000A088                            WaterSwitcher:
0000A088 7000                       		moveq	#0,d0
0000A08A 1028 0024                  		move.b	obRoutine(a0),d0
0000A08E 323B 0000                  		move.w	PSwapper_Index(pc,d0.w),d1
0000A092 4EFB 1000                  		jmp	PSwapper_Index(pc,d1.w) ;TIS Don't Delete if out of range
0000A096                            	;if DebugPathSwappers
0000A096                            		;tst.w	(f_debugcheat).w
0000A096                            		;bne.w	RememberState
0000A096                            	;endif
0000A096                            		; like RememberState, but doesn't display (Sonic 2's MarkObjGone3)
0000A096                            		;out_of_range	@offscreen
0000A096                            		;rts
0000A096                            
0000A096                            	;@offscreen:
0000A096                            		;lea	(v_objstate).w,a2
0000A096                            		;moveq	#0,d0
0000A096                            		;move.b	obRespawnNo(a0),d0
0000A096                            		;beq.s	@delete
0000A096                            		;bclr	#7,2(a2,d0.w)
0000A096                            
0000A096                            	;@delete:
0000A096                            		;bra.w	DeleteObject
0000A096                            ; ===========================================================================
0000A096                            ; off_1FCF0:
0000A096                            PSwapper_Index:
0000A096 0000                       		dc.w PSwapper_Init-PSwapper_Index	; 0
0000A098 0000                       		dc.w PSwapper_MainX-PSwapper_Index	; 2
0000A09A 0000                       		dc.w PSwapper_MainY-PSwapper_Index	; 4
0000A09C                            ; ===========================================================================
0000A09C                            ; loc_1FCF6:
0000A09C                            PSwapper_Init:
0000A09C 5428 0024                  		addq.b	#2,obRoutine(a0) ; => PSwapper_MainX
0000A0A0 217C 0000 0000 0004        		move.l	#Map_WaterSwitcher,obMap(a0)
0000A0A8 317C 27B2 0002             		move.w	#$27B2,obGfx(a0)
0000A0AE 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A0B4 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000A0BA 117C 0005 0018             		move.b	#5,obPriority(a0)
0000A0C0 1028 0028                  		move.b	obSubtype(a0),d0
0000A0C4 0800 0002                  		btst	#2,d0
0000A0C8 6700                       		beq.s	PSwapper_Init_CheckX
0000A0CA                            ;PSwapper_Init_CheckY:
0000A0CA 5428 0024                  		addq.b	#2,obRoutine(a0) ; => PSwapper_MainY
0000A0CE 0240 0007                  		andi.w	#7,d0
0000A0D2 1140 001A                  		move.b	d0,obFrame(a0)
0000A0D6 0240 0003                  		andi.w	#3,d0
0000A0DA D040                       		add.w	d0,d0
0000A0DC 317B 0000 0032             		move.w	word_1FD68(pc,d0.w),$32(a0)
0000A0E2 3228 000C                  		move.w	obY(a0),d1
0000A0E6 43F8 D000                  		lea	(v_player).w,a1 ; a1=character
0000A0EA B269 000C                  		cmp.w	obY(a1),d1
0000A0EE 6400 0000                  		bhs.w	PSwapper_MainY
0000A0F2 117C 0001 0034             		move.b	#1,$34(a0)
0000A0F8 6000 0000                  		bra.w	PSwapper_MainY
0000A0FC                            ; ===========================================================================
0000A0FC                            word_1FD68:
0000A0FC 0020                       	dc.w   $20
0000A0FE 0040                       	dc.w   $40	; 1
0000A100 0080                       	dc.w   $80	; 2
0000A102 0100                       	dc.w  $100	; 3
0000A104                            ; ===========================================================================
0000A104                            ; loc_1FD70:
0000A104                            PSwapper_Init_CheckX:
0000A104 0240 0003                  		andi.w	#3,d0
0000A108 1140 001A                  		move.b	d0,obFrame(a0)
0000A10C D040                       		add.w	d0,d0
0000A10E 317B 00EC 0032             		move.w	word_1FD68(pc,d0.w),$32(a0)
0000A114 3228 0008                  		move.w	obX(a0),d1
0000A118 43F8 D000                  		lea	(v_player).w,a1 ; a1=character
0000A11C B269 0008                  		cmp.w	obX(a1),d1
0000A120 6400                       		bhs.s	@jump
0000A122 117C 0001 0034             		move.b	#1,$34(a0)
0000A128                            @jump:
0000A128                            
0000A128                            ; loc_1FDA4:
0000A128                            PSwapper_MainX:
0000A128 4A78 FE08                  		tst.w	(v_debuguse).w
0000A12C 6600 0000                  		bne.w	@locret
0000A130 3228 0008                  		move.w	obX(a0),d1
0000A134 45E8 0034                  		lea	$34(a0),a2
0000A138 43F8 D000                  		lea	(v_player).w,a1 ; a1=character
0000A13C 4A1A                       		tst.b	(a2)+
0000A13E 6600 0000                  		bne.w	PSwapper_MainX_Alt
0000A142 B269 0008                  		cmp.w	obX(a1),d1
0000A146 6200 0000                  		bhi.w	@locret	;TIS
0000A14A 157C 0001 FFFF             		move.b	#1,-1(a2)
0000A150 3428 000C                  		move.w	obY(a0),d2
0000A154 3602                       		move.w	d2,d3
0000A156 3828 0032                  		move.w	$32(a0),d4
0000A15A 9444                       		sub.w	d4,d2
0000A15C D644                       		add.w	d4,d3
0000A15E 3829 000C                  		move.w	obY(a1),d4
0000A162 B842                       		cmp.w	d2,d4
0000A164 6D00                       		blt.s	@locret
0000A166 B843                       		cmp.w	d3,d4
0000A168 6C00                       		bge.s	@locret
0000A16A 1028 0028                  		move.b	obSubtype(a0),d0
0000A16E 6A00                       		bpl.s	@jump
0000A170 0829 0001 0022             		btst	#1,obStatus(a1)
0000A176 6600                       		bne.s	@locret
0000A178                            @jump:
0000A178 0828 0000 0001             		btst	#0,obRender(a0)
0000A17E 6600                       		bne.s	@jump2
0000A180                            		;move.b	#$C,(v_top_solid_bit).w	; MJ: set collision to 1st
0000A180                            		;move.b	#$D,(v_lrb_solid_bit).w	; MJ: set collision to 1st
0000A180 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0000A186                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A186                            		;lea    (Pal_Sonic),a1  ;Palette location
0000A186                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A186                            		;jsr	Palload_Loop
0000A186                            
0000A186                            
0000A186 0800 0003                  		btst	#3,d0
0000A18A 6700                       		beq.s	@jump2
0000A18C                            		;move.b	#$E,(v_top_solid_bit).w	; MJ: set collision to 2nd
0000A18C                            		;move.b	#$F,(v_lrb_solid_bit).w	; MJ: set collision to 2nd
0000A18C 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0000A192                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A192                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
0000A192                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A192                            		;jsr	Palload_Loop
0000A192                            
0000A192                            @jump2:
0000A192 0269 7FFF 0002             		andi.w	#$7FFF,obGfx(a1)
0000A198 0800 0005                  		btst	#5,d0
0000A19C 6700                       		beq.s	@jump3
0000A19E 0069 8000 0002             		ori.w	#(1<<15),obGfx(a1)
0000A1A4                            @jump3:
0000A1A4                            	;if DebugPathSwappers
0000A1A4                            		;tst.b	(f_debugcheat).w
0000A1A4                            		;beq.s	@locret
0000A1A4                            		;sfx	sfx_Lamppost,1,0,1
0000A1A4                            	;endif
0000A1A4                            @locret:
0000A1A4 4E75                       		rts
0000A1A6                            ; ===========================================================================
0000A1A6                            ; loc_1FE38:
0000A1A6                            PSwapper_MainX_Alt:
0000A1A6 B269 0008                  		cmp.w	obX(a1),d1
0000A1AA 6300                       		bls.s	@locret
0000A1AC 157C 0000 FFFF             		move.b	#0,-1(a2)
0000A1B2 3428 000C                  		move.w	obY(a0),d2
0000A1B6 3602                       		move.w	d2,d3
0000A1B8 3828 0032                  		move.w	$32(a0),d4
0000A1BC 9444                       		sub.w	d4,d2
0000A1BE D644                       		add.w	d4,d3
0000A1C0 3829 000C                  		move.w	obY(a1),d4
0000A1C4 B842                       		cmp.w	d2,d4
0000A1C6 6D00                       		blt.s	@locret
0000A1C8 B843                       		cmp.w	d3,d4
0000A1CA 6C00                       		bge.s	@locret
0000A1CC 1028 0028                  		move.b	obSubtype(a0),d0
0000A1D0 6A00                       		bpl.s	@jump
0000A1D2 0829 0001 0022             		btst	#1,obStatus(a1)
0000A1D8 6600                       		bne.s	@locret
0000A1DA                            @jump:
0000A1DA 0828 0000 0001             		btst	#0,obRender(a0)
0000A1E0 6600                       		bne.s	@jump2
0000A1E2                            		;move.b	#$C,(v_top_solid_bit).w	; MJ: set collision to 1st
0000A1E2                            		;move.b	#$D,(v_lrb_solid_bit).w	; MJ: set collision to 1st
0000A1E2 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0000A1E8                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A1E8                            		;lea    (Pal_Sonic),a1  ;Palette location
0000A1E8                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A1E8                            		;jsr	Palload_Loop
0000A1E8                            
0000A1E8 0800 0004                  		btst	#4,d0
0000A1EC 6700                       		beq.s	@jump2
0000A1EE                            		;move.b	#$E,(v_top_solid_bit).w	; MJ: set collision to 2nd
0000A1EE                            		;move.b	#$F,(v_lrb_solid_bit).w	; MJ: set collision to 2nd
0000A1EE 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0000A1F4                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A1F4                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
0000A1F4                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A1F4                            		;jsr	Palload_Loop
0000A1F4                            @jump2:
0000A1F4 0269 7FFF 0002             		andi.w	#$7FFF,obGfx(a1)
0000A1FA 0800 0006                  		btst	#6,d0
0000A1FE 6700                       		beq.s	@jump3
0000A200 0069 8000 0002             		ori.w	#(1<<15),obGfx(a1)
0000A206                            @jump3:
0000A206                            	;if DebugPathSwappers
0000A206                            		;tst.b	(f_debugcheat).w
0000A206                            		;beq.s	@locret
0000A206                            		;sfx	sfx_Lamppost,1,0,1
0000A206                            	;endif
0000A206                            @locret:
0000A206 4E75                       		rts
0000A208                            ; ===========================================================================
0000A208                            
0000A208                            PSwapper_MainY:
0000A208 4A78 FE08                  		tst.w	(v_debuguse).w
0000A20C 6600 0000                  		bne.w	@locret
0000A210 3228 000C                  		move.w	obY(a0),d1
0000A214 45E8 0034                  		lea	$34(a0),a2
0000A218 43F8 D000                  		lea	(v_player).w,a1 ; a1=character
0000A21C 4A1A                       		tst.b	(a2)+
0000A21E 6600 0000                  		bne.w	PSwapper_MainY_Alt	;TIS
0000A222 B269 000C                  		cmp.w	obY(a1),d1
0000A226 6200                       		bhi.s	@locret
0000A228 157C 0001 FFFF             		move.b	#1,-1(a2)
0000A22E 3428 0008                  		move.w	obX(a0),d2
0000A232 3602                       		move.w	d2,d3
0000A234 3828 0032                  		move.w	$32(a0),d4
0000A238 9444                       		sub.w	d4,d2
0000A23A D644                       		add.w	d4,d3
0000A23C 3829 0008                  		move.w	obX(a1),d4
0000A240 B842                       		cmp.w	d2,d4
0000A242 6D00                       		blt.s	@locret
0000A244 B843                       		cmp.w	d3,d4
0000A246 6C00                       		bge.s	@locret
0000A248 1028 0028                  		move.b	obSubtype(a0),d0
0000A24C 6A00                       		bpl.s	@jump
0000A24E 0829 0001 0022             		btst	#1,obStatus(a1)
0000A254 6600                       		bne.s	@locret
0000A256                            @jump:
0000A256 0828 0000 0001             		btst	#0,obRender(a0)
0000A25C 6600                       		bne.s	@jump2
0000A25E                            		;move.b	#$C,(v_top_solid_bit).w	; MJ: set collision to 1st
0000A25E                            		;move.b	#$D,(v_lrb_solid_bit).w	; MJ: set collision to 1st
0000A25E 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0000A264                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A264                            		;lea    (Pal_Sonic),a1  ;Palette location
0000A264                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A264                            		;jsr	Palload_Loop
0000A264                            
0000A264 0800 0003                  		btst	#3,d0
0000A268 6700                       		beq.s	@jump2
0000A26A                            		;move.b	#$E,(v_top_solid_bit).w	; MJ: set collision to 2nd
0000A26A                            		;move.b	#$F,(v_lrb_solid_bit).w	; MJ: set collision to 2nd
0000A26A 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0000A270                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A270                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
0000A270                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A270                            		;jsr	Palload_Loop
0000A270                            @jump2:
0000A270 0269 7FFF 0002             		andi.w	#$7FFF,obGfx(a1)
0000A276 0800 0005                  		btst	#5,d0
0000A27A 6700                       		beq.s	@jump3
0000A27C 0069 8000 0002             		ori.w	#(1<<15),obGfx(a1)
0000A282                            @jump3:
0000A282                            	;if DebugPathSwappers
0000A282                            		;tst.b	(f_debugcheat).w
0000A282                            		;beq.s	@locret
0000A282                            		;sfx	sfx_Lamppost,1,0,1
0000A282                            	;endif
0000A282                            @locret:
0000A282 4E75                       		rts
0000A284                            ; ===========================================================================
0000A284                            ; loc_1FF42:
0000A284                            PSwapper_MainY_Alt:
0000A284 B269 000C                  		cmp.w	obY(a1),d1
0000A288 6300                       		bls.s	@locret
0000A28A 157C 0000 FFFF             		move.b	#0,-1(a2)
0000A290 3428 0008                  		move.w	obX(a0),d2
0000A294 3602                       		move.w	d2,d3
0000A296 3828 0032                  		move.w	$32(a0),d4
0000A29A 9444                       		sub.w	d4,d2
0000A29C D644                       		add.w	d4,d3
0000A29E 3829 0008                  		move.w	obX(a1),d4
0000A2A2 B842                       		cmp.w	d2,d4
0000A2A4 6D00                       		blt.s	@locret
0000A2A6 B843                       		cmp.w	d3,d4
0000A2A8 6C00                       		bge.s	@locret
0000A2AA 1028 0028                  		move.b	obSubtype(a0),d0
0000A2AE 6A00                       		bpl.s	@jump
0000A2B0 0829 0001 0022             		btst	#1,obStatus(a1)
0000A2B6 6600                       		bne.s	@locret
0000A2B8                            @jump:
0000A2B8 0828 0000 0001             		btst	#0,obRender(a0)
0000A2BE 6600                       		bne.s	@jump2
0000A2C0                            		;move.b	#$C,(v_top_solid_bit).w	; MJ: set collision to 1st
0000A2C0                            		;move.b	#$D,(v_lrb_solid_bit).w	; MJ: set collision to 1st
0000A2C0 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0000A2C6                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A2C6                            		;lea    (Pal_Sonic),a1  ;Palette location
0000A2C6                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A2C6                            		;jsr	Palload_Loop
0000A2C6                            
0000A2C6 0800 0004                  		btst	#4,d0
0000A2CA 6700                       		beq.s	@jump2
0000A2CC                            		;move.b	#$E,(v_top_solid_bit).w	; MJ: set collision to 2nd
0000A2CC                            		;move.b	#$F,(v_lrb_solid_bit).w	; MJ: set collision to 2nd
0000A2CC 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0000A2D2                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0000A2D2                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
0000A2D2                                    	;lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0000A2D2                            		;jsr	Palload_Loop
0000A2D2                            @jump2:
0000A2D2 0269 7FFF 0002             		andi.w	#$7FFF,obGfx(a1)
0000A2D8 0800 0006                  		btst	#6,d0
0000A2DC 6700                       		beq.s	@jump3
0000A2DE 0069 8000 0002             		ori.w	#(1<<15),obGfx(a1)
0000A2E4                            @jump3:
0000A2E4                            	;if DebugPathSwappers
0000A2E4                            		;tst.b	(f_debugcheat).w
0000A2E4                            		;beq.s	@locret
0000A2E4                            		;sfx	sfx_Lamppost,1,0,1
0000A2E4                            	;endif
0000A2E4                            @locret:
0000A2E4 4E75                       		rts
0000A2E6                            ; ===========================================================================
0000A2E6                            ; -------------------------------------------------------------------------------
0000A2E6                            ; sprite mappings
0000A2E6                            ; -------------------------------------------------------------------------------
0000A2E6                            Map_WaterSwitcher:	include "_maps\WaterSwitcher.asm"
0000A2E6                            WaterSwitcher_Map:
0000A2E6 0000                       	dc.w	WaterSwitcher_0010-WaterSwitcher
0000A2E8 0000                       	dc.w	WaterSwitcher_0032-WaterSwitcher
0000A2EA 0000                       	dc.w	WaterSwitcher_0054-WaterSwitcher
0000A2EC 0000                       	dc.w	WaterSwitcher_0054-WaterSwitcher
0000A2EE 0000                       	dc.w	WaterSwitcher_0076-WaterSwitcher
0000A2F0 0000                       	dc.w	WaterSwitcher_0098-WaterSwitcher
0000A2F2 0000                       	dc.w	WaterSwitcher_00BA-WaterSwitcher
0000A2F4 0000                       	dc.w	WaterSwitcher_00BA-WaterSwitcher
0000A2F6                            
0000A2F6 04                         WaterSwitcher_0010:	dc.b 4
0000A2F7 E005 0000 F8               	dc.b $E0, 5, 0, 0, $F8
0000A2FC F005 0000 F8               	dc.b $F0, 5, 0, 0, $F8
0000A301 0005 0000 F8               	dc.b 0, 5, 0, 0, $F8
0000A306 1005 0000 F8               	dc.b $10, 5, 0, 0, $F8
0000A30B                            
0000A30B 04                         WaterSwitcher_0032:	dc.b 4
0000A30C C005 0000 F8               	dc.b $C0, 5, 0, 0, $F8
0000A311 E005 0000 F8               	dc.b $E0, 5, 0, 0, $F8
0000A316 0005 0000 F8               	dc.b 0, 5, 0, 0, $F8
0000A31B 3005 0000 F8               	dc.b $30, 5, 0, 0, $F8
0000A320                            
0000A320 04                         WaterSwitcher_0054:	dc.b 4
0000A321 8005 0000 F8               	dc.b $80, 5, 0, 0, $F8
0000A326 E005 0000 F8               	dc.b $E0, 5, 0, 0, $F8
0000A32B 0005 0000 F8               	dc.b 0, 5, 0, 0, $F8
0000A330 7005 0000 F8               	dc.b $70, 5, 0, 0, $F8
0000A335                            
0000A335 04                         WaterSwitcher_0076:	dc.b 4
0000A336 F805 0000 E0               	dc.b $F8, 5, 0, 0, $E0
0000A33B F805 0000 F0               	dc.b $F8, 5, 0, 0, $F0
0000A340 F805 0000 00               	dc.b $F8, 5, 0, 0, 0
0000A345 F805 0000 10               	dc.b $F8, 5, 0, 0, $10
0000A34A                            
0000A34A 04                         WaterSwitcher_0098:	dc.b 4
0000A34B F805 0000 C0               	dc.b $F8, 5, 0, 0, $C0
0000A350 F805 0000 E0               	dc.b $F8, 5, 0, 0, $E0
0000A355 F805 0000 00               	dc.b $F8, 5, 0, 0, 0
0000A35A F805 0000 30               	dc.b $F8, 5, 0, 0, $30
0000A35F                            
0000A35F 04                         WaterSwitcher_00BA:	dc.b 4
0000A360 F805 0000 80               	dc.b $F8, 5, 0, 0, $80
0000A365 F805 0000 E0               	dc.b $F8, 5, 0, 0, $E0
0000A36A F805 0000 00               	dc.b $F8, 5, 0, 0, 0
0000A36F F805 0000 70               	dc.b $F8, 5, 0, 0, $70
0000A374                            
0000A374                            	even
0000A374                            	even
0000A374                            ; ===========================================================================
0000A374                            ; ===========================================================================
0000A374                            Map_Swi:	include	"_maps\Unused Switch.asm"
0000A374                            ; ---------------------------------------------------------------------------
0000A374                            ; Sprite mappings - Unused switch thingy
0000A374                            ; ---------------------------------------------------------------------------
0000A374                            Map_Swi_internal:
0000A374 0000                       		dc.w byte_891E-Map_Swi_internal
0000A376 04                         byte_891E:	dc.b 4
0000A377 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000A37C 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000A381 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000A386 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000A38C 00                         		even
0000A38C 00                         		even
0000A38C                            
0000A38C                            		include	"_incObj\2A SBZ Small Door.asm"
0000A38C                            ; ---------------------------------------------------------------------------
0000A38C                            ; Object 2A - small vertical door (SBZ)
0000A38C                            ; ---------------------------------------------------------------------------
0000A38C                            
0000A38C                            AutoDoor:
0000A38C 7000                       		moveq	#0,d0
0000A38E 1028 0024                  		move.b	obRoutine(a0),d0
0000A392 323B 0000                  		move.w	ADoor_Index(pc,d0.w),d1
0000A396 4EFB 1000                  		jmp	ADoor_Index(pc,d1.w)
0000A39A                            ; ===========================================================================
0000A39A 0000                       ADoor_Index:	dc.w ADoor_Main-ADoor_Index
0000A39C 0000                       		dc.w ADoor_OpenShut-ADoor_Index
0000A39E                            ; ===========================================================================
0000A39E                            
0000A39E                            ADoor_Main:	; Routine 0
0000A39E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A3A2 217C 0000 0000 0004        		move.l	#Map_ADoor,obMap(a0)
0000A3AA 317C 42EA 0002             		move.w	#$42EA,obGfx(a0)
0000A3B0 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A3B6 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A3BC                            		;move.b	#4,obPriority(a0)
0000A3BC                            
0000A3BC                            ADoor_OpenShut:	; Routine 2
0000A3BC 323C 0040                  		move.w	#$40,d1		; set range for door detection
0000A3C0 4228 001C                  		clr.b	obAnim(a0)	; use "closing"	animation
0000A3C4 3038 D008                  		move.w	(v_player+obX).w,d0
0000A3C8 D041                       		add.w	d1,d0
0000A3CA B068 0008                  		cmp.w	obX(a0),d0
0000A3CE 6500                       		bcs.s	ADoor_Animate
0000A3D0 9041                       		sub.w	d1,d0
0000A3D2 9041                       		sub.w	d1,d0
0000A3D4 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic > $40 pixels from door?
0000A3D8 6400                       		bcc.s	ADoor_Animate	; close door
0000A3DA D041                       		add.w	d1,d0
0000A3DC B068 0008                  		cmp.w	obX(a0),d0	; is Sonic left of the door?
0000A3E0 6400                       		bcc.s	loc_899A	; if yes, branch
0000A3E2 0828 0000 0022             		btst	#0,obStatus(a0)
0000A3E8 6600                       		bne.s	ADoor_Animate
0000A3EA 6000                       		bra.s	ADoor_Open
0000A3EC                            ; ===========================================================================
0000A3EC                            
0000A3EC                            loc_899A:
0000A3EC 0828 0000 0022             		btst	#0,obStatus(a0)
0000A3F2 6700                       		beq.s	ADoor_Animate
0000A3F4                            
0000A3F4                            ADoor_Open:
0000A3F4 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "opening"	animation
0000A3FA                            
0000A3FA                            ADoor_Animate:
0000A3FA 43F9 0000 0000             		lea	(Ani_ADoor).l,a1
0000A400 6100 0000                  		bsr.w	AnimateSprite
0000A404 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
0000A408 6600                       		bne.s	@remember	; if yes, branch
0000A40A 323C 0011                  		move.w	#$11,d1
0000A40E 343C 0020                  		move.w	#$20,d2
0000A412 3602                       		move.w	d2,d3
0000A414 5243                       		addq.w	#1,d3
0000A416 3828 0008                  		move.w	obX(a0),d4
0000A41A 6100 0000                  		bsr.w	SolidObject
0000A41E                            
0000A41E                            	@remember:
0000A41E 6000 0000                  		bra.w	RememberState
0000A41E 6000 0000                  		bra.w	RememberState
0000A422                            		include	"_anim\SBZ Small Door.asm"
0000A422                            ; ---------------------------------------------------------------------------
0000A422                            ; Animation script - doors (SBZ)
0000A422                            ; ---------------------------------------------------------------------------
0000A422 0000                       Ani_ADoor:	dc.w @close-Ani_ADoor
0000A424 0000                       		dc.w @open-Ani_ADoor
0000A426 0008 0706 0504 0302 0100+  @close:		dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, afBack, 1
0000A432 0000 0102 0304 0506 0708+  @open:		dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, afBack, 1
0000A43E                            		even
0000A43E                            		even
0000A43E                            Map_ADoor:	include	"_maps\SBZ Small Door.asm"
0000A43E                            ; --------------------------------------------------------------------------------
0000A43E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A43E                            ; --------------------------------------------------------------------------------
0000A43E                            
0000A43E                            SME_YnmwF:	
0000A43E 0000 0000                  		dc.w SME_YnmwF_12-SME_YnmwF, SME_YnmwF_1D-SME_YnmwF	
0000A442 0000 0000                  		dc.w SME_YnmwF_28-SME_YnmwF, SME_YnmwF_33-SME_YnmwF	
0000A446 0000 0000                  		dc.w SME_YnmwF_3E-SME_YnmwF, SME_YnmwF_49-SME_YnmwF	
0000A44A 0000 0000                  		dc.w SME_YnmwF_54-SME_YnmwF, SME_YnmwF_5F-SME_YnmwF	
0000A44E 0000                       		dc.w SME_YnmwF_6A-SME_YnmwF	
0000A450 02                         SME_YnmwF_12:	dc.b 2	
0000A451 E007 0800 F8               		dc.b $E0, 7, 8, 0, $F8	
0000A456 0007 0800 F8               		dc.b 0, 7, 8, 0, $F8	
0000A45B 02                         SME_YnmwF_1D:	dc.b 2	
0000A45C DC07 0800 F8               		dc.b $DC, 7, 8, 0, $F8	
0000A461 0407 0800 F8               		dc.b 4, 7, 8, 0, $F8	
0000A466 02                         SME_YnmwF_28:	dc.b 2	
0000A467 D807 0800 F8               		dc.b $D8, 7, 8, 0, $F8	
0000A46C 0807 0800 F8               		dc.b 8, 7, 8, 0, $F8	
0000A471 02                         SME_YnmwF_33:	dc.b 2	
0000A472 D407 0800 F8               		dc.b $D4, 7, 8, 0, $F8	
0000A477 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8	
0000A47C 02                         SME_YnmwF_3E:	dc.b 2	
0000A47D D007 0800 F8               		dc.b $D0, 7, 8, 0, $F8	
0000A482 1007 0800 F8               		dc.b $10, 7, 8, 0, $F8	
0000A487 02                         SME_YnmwF_49:	dc.b 2	
0000A488 CC07 0800 F8               		dc.b $CC, 7, 8, 0, $F8	
0000A48D 1407 0800 F8               		dc.b $14, 7, 8, 0, $F8	
0000A492 02                         SME_YnmwF_54:	dc.b 2	
0000A493 C807 0800 F8               		dc.b $C8, 7, 8, 0, $F8	
0000A498 1807 0800 F8               		dc.b $18, 7, 8, 0, $F8	
0000A49D 02                         SME_YnmwF_5F:	dc.b 2	
0000A49E C407 0800 F8               		dc.b $C4, 7, 8, 0, $F8	
0000A4A3 1C07 0800 F8               		dc.b $1C, 7, 8, 0, $F8	
0000A4A8 02                         SME_YnmwF_6A:	dc.b 2	
0000A4A9 C007 0800 F8               		dc.b $C0, 7, 8, 0, $F8	
0000A4AE 2007 0800 F8               		dc.b $20, 7, 8, 0, $F8	
0000A4B4 00                         		even
0000A4B4 00                         		even
0000A4B4                            
0000A4B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A4B4                            
0000A4B4                            
0000A4B4                            Obj44_SolidWall:
0000A4B4 6100 0000                  		bsr.w	Obj44_SolidWall2
0000A4B8 6700                       		beq.s	loc_8AA8
0000A4BA 6B00 0000                  		bmi.w	loc_8AC4
0000A4BE 4A40                       		tst.w	d0
0000A4C0 6700 0000                  		beq.w	loc_8A92
0000A4C4 6B00                       		bmi.s	loc_8A7C
0000A4C6 4A69 0010                  		tst.w	obVelX(a1)
0000A4CA 6B00                       		bmi.s	loc_8A92
0000A4CC 6000                       		bra.s	loc_8A82
0000A4CE                            ; ===========================================================================
0000A4CE                            
0000A4CE                            loc_8A7C:
0000A4CE 4A69 0010                  		tst.w	obVelX(a1)
0000A4D2 6A00                       		bpl.s	loc_8A92
0000A4D4                            
0000A4D4                            loc_8A82:
0000A4D4 9169 0008                  		sub.w	d0,obX(a1)
0000A4D8 337C 0000 0020             		move.w	#0,obInertia(a1)
0000A4DE 337C 0000 0010             		move.w	#0,obVelX(a1)
0000A4E4                            
0000A4E4                            loc_8A92:
0000A4E4 0829 0001 0022             		btst	#1,obStatus(a1)
0000A4EA 6600                       		bne.s	loc_8AB6
0000A4EC 08E9 0005 0022             		bset	#5,obStatus(a1)
0000A4F2 08E8 0005 0022             		bset	#5,obStatus(a0)
0000A4F8 4E75                       		rts	
0000A4FA                            ; ===========================================================================
0000A4FA                            
0000A4FA                            loc_8AA8:
0000A4FA 0828 0005 0022             		btst	#5,obStatus(a0)
0000A500 6700                       		beq.s	locret_8AC2
0000A502 337C 0000 001C             		move.w	#id_Run,obAnim(a1)
0000A508                            
0000A508                            loc_8AB6:
0000A508 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000A50E 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A514                            
0000A514                            locret_8AC2:
0000A514 4E75                       		rts	
0000A516                            ; ===========================================================================
0000A516                            
0000A516                            loc_8AC4:
0000A516 4A69 0012                  		tst.w	obVelY(a1)
0000A51A 6A00                       		bpl.s	locret_8AD8
0000A51C 4A43                       		tst.w	d3
0000A51E 6A00                       		bpl.s	locret_8AD8
0000A520 9769 000C                  		sub.w	d3,obY(a1)
0000A524 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A52A                            
0000A52A                            locret_8AD8:
0000A52A 4E75                       		rts	
0000A52C                            ; End of function Obj44_SolidWall
0000A52C                            
0000A52C                            
0000A52C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A52C                            
0000A52C                            
0000A52C                            Obj44_SolidWall2:
0000A52C 43F8 D000                  		lea	(v_player).w,a1
0000A530 3029 0008                  		move.w	obX(a1),d0
0000A534 9068 0008                  		sub.w	obX(a0),d0
0000A538 D041                       		add.w	d1,d0
0000A53A 6B00                       		bmi.s	loc_8B48
0000A53C 3601                       		move.w	d1,d3
0000A53E D643                       		add.w	d3,d3
0000A540 B043                       		cmp.w	d3,d0
0000A542 6200                       		bhi.s	loc_8B48
0000A544 1629 0016                  		move.b	obHeight(a1),d3
0000A548 4883                       		ext.w	d3
0000A54A D443                       		add.w	d3,d2
0000A54C 3629 000C                  		move.w	obY(a1),d3
0000A550 9668 000C                  		sub.w	obY(a0),d3
0000A554 D642                       		add.w	d2,d3
0000A556 6B00                       		bmi.s	loc_8B48
0000A558 3802                       		move.w	d2,d4
0000A55A D844                       		add.w	d4,d4
0000A55C B644                       		cmp.w	d4,d3
0000A55E 6400                       		bhs.s	loc_8B48
0000A560 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000A564 6B00                       		bmi.s	loc_8B48
0000A566 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000A56C 6400                       		bhs.s	loc_8B48
0000A56E 4A78 FE08                  		tst.w	(v_debuguse).w
0000A572 6600                       		bne.s	loc_8B48
0000A574 3A00                       		move.w	d0,d5
0000A576 B240                       		cmp.w	d0,d1
0000A578 6400                       		bhs.s	loc_8B30
0000A57A D241                       		add.w	d1,d1
0000A57C 9041                       		sub.w	d1,d0
0000A57E 3A00                       		move.w	d0,d5
0000A580 4445                       		neg.w	d5
0000A582                            
0000A582                            loc_8B30:
0000A582 3203                       		move.w	d3,d1
0000A584 B443                       		cmp.w	d3,d2
0000A586 6400                       		bhs.s	loc_8B3C
0000A588 9644                       		sub.w	d4,d3
0000A58A 3203                       		move.w	d3,d1
0000A58C 4441                       		neg.w	d1
0000A58E                            
0000A58E                            loc_8B3C:
0000A58E BA41                       		cmp.w	d1,d5
0000A590 6200                       		bhi.s	loc_8B44
0000A592 7801                       		moveq	#1,d4
0000A594 4E75                       		rts	
0000A596                            ; ===========================================================================
0000A596                            
0000A596                            loc_8B44:
0000A596 78FF                       		moveq	#-1,d4
0000A598 4E75                       		rts	
0000A59A                            ; ===========================================================================
0000A59A                            
0000A59A                            loc_8B48:
0000A59A 7800                       		moveq	#0,d4
0000A59C 4E75                       		rts	
0000A59E                            ; End of function Obj44_SolidWall2
0000A59E                            
0000A59E                            ; ===========================================================================
0000A59E                            
0000A59E                            		include	"_incObj\1E Ball Hog.asm"
0000A59E                            ; ---------------------------------------------------------------------------
0000A59E                            ; Object 1E - Ball Hog enemy (SBZ)
0000A59E                            ; ---------------------------------------------------------------------------
0000A59E                            
0000A59E                            BallHog:
0000A59E 7000                       		moveq	#0,d0
0000A5A0 1028 0024                  		move.b	obRoutine(a0),d0
0000A5A4 323B 0000                  		move.w	Hog_Index(pc,d0.w),d1
0000A5A8 4EFB 1000                  		jmp	Hog_Index(pc,d1.w)
0000A5AC                            ; ===========================================================================
0000A5AC 0000                       Hog_Index:	dc.w Hog_Main-Hog_Index
0000A5AE 0000                       		dc.w Hog_Action-Hog_Index
0000A5B0                            
0000A5B0 =00000032                  hog_launchflag:	equ $32		; 0 to launch a cannonball
0000A5B0                            ; ===========================================================================
0000A5B0                            
0000A5B0                            Hog_Main:	; Routine 0
0000A5B0 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000A5B6 117C 0008 0017             		move.b	#8,obWidth(a0)
0000A5BC 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A5C4 317C 0302 0002             		move.w	#$302,obGfx(a0)
0000A5CA 117C 0004 0001             		move.b	#4,obRender(a0)
0000A5D0 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000A5D6 117C 0005 0020             		move.b	#5,obColType(a0)
0000A5DC 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A5E2 6100 0000                  		bsr.w	ObjectFall
0000A5E6 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000A5EC 4A41                       		tst.w	d1
0000A5EE 6A00                       		bpl.s	@floornotfound
0000A5F0 D368 000C                  		add.w	d1,obY(a0)
0000A5F4 317C 0000 0012             		move.w	#0,obVelY(a0)
0000A5FA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A5FE                            
0000A5FE                            	@floornotfound:
0000A5FE 4E75                       		rts	
0000A600                            ; ===========================================================================
0000A600                            
0000A600                            Hog_Action:	; Routine 2
0000A600 43F9 0000 0000             		lea	(Ani_Hog).l,a1
0000A606 6100 0000                  		bsr.w	AnimateSprite
0000A60A 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is final frame (01) displayed?
0000A610 6600                       		bne.s	@setlaunchflag	; if not, branch
0000A612 4A28 0032                  		tst.b	hog_launchflag(a0)	; is it	set to launch cannonball?
0000A616 6700                       		beq.s	@makeball	; if yes, branch
0000A618 6000                       		bra.s	@remember
0000A61A                            ; ===========================================================================
0000A61A                            
0000A61A                            @setlaunchflag:
0000A61A 4228 0032                  		clr.b	hog_launchflag(a0)	; set to launch	cannonball
0000A61E                            
0000A61E                            @remember:
0000A61E 6000 0000                  		bra.w	RememberState
0000A622                            ; ===========================================================================
0000A622                            
0000A622                            @makeball:
0000A622 117C 0001 0032             		move.b	#1,hog_launchflag(a0)
0000A628 6100 0000                  		bsr.w	FindFreeObj
0000A62C 6600                       		bne.s	@fail
0000A62E 12BC 0000                  		move.b	#id_Cannonball,0(a1) ; load cannonball object ($20)
0000A632 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A638 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A63E 337C FF00 0010             		move.w	#-$100,obVelX(a1) ; cannonball bounces to the left
0000A644 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A64A 70FC                       		moveq	#-4,d0
0000A64C 0828 0000 0022             		btst	#0,obStatus(a0)	; is Ball Hog facing right?
0000A652 6700                       		beq.s	@noflip		; if not, branch
0000A654 4440                       		neg.w	d0
0000A656 4469 0010                  		neg.w	obVelX(a1)	; cannonball bounces to	the right
0000A65A                            
0000A65A                            	@noflip:
0000A65A D169 0008                  		add.w	d0,obX(a1)
0000A65E 0669 000C 000C             		addi.w	#$C,obY(a1)
0000A664 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1) ; copy object type from Ball Hog
0000A66A                            
0000A66A                            	@fail:
0000A66A 60B2                       		bra.s	@remember
0000A66A 60B2                       		bra.s	@remember
0000A66C                            		include	"_incObj\20 Cannonball.asm"
0000A66C                            ; ---------------------------------------------------------------------------
0000A66C                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A66C                            ; ---------------------------------------------------------------------------
0000A66C                            
0000A66C                            Cannonball:
0000A66C 7000                       		moveq	#0,d0
0000A66E 1028 0024                  		move.b	obRoutine(a0),d0
0000A672 323B 0000                  		move.w	Cbal_Index(pc,d0.w),d1
0000A676 4EFB 1000                  		jmp	Cbal_Index(pc,d1.w)
0000A67A                            ; ===========================================================================
0000A67A 0000                       Cbal_Index:	dc.w Cbal_Main-Cbal_Index
0000A67C 0000                       		dc.w Cbal_Bounce-Cbal_Index
0000A67E                            
0000A67E =00000030                  cbal_time:	equ $30		; time until the cannonball explodes (2 bytes)
0000A67E                            ; ===========================================================================
0000A67E                            
0000A67E                            Cbal_Main:	; Routine 0
0000A67E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A682 117C 0007 0016             		move.b	#7,obHeight(a0)
0000A688 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A690 317C 2302 0002             		move.w	#$2302,obGfx(a0)
0000A696 117C 0004 0001             		move.b	#4,obRender(a0)
0000A69C 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000A6A2 117C 0087 0020             		move.b	#$87,obColType(a0)
0000A6A8 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A6AE 7000                       		moveq	#0,d0
0000A6B0 1028 0028                  		move.b	obSubtype(a0),d0 ; move subtype to d0
0000A6B4 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A6B8 3140 0030                  		move.w	d0,cbal_time(a0) ; set explosion time
0000A6BC 117C 0004 001A             		move.b	#4,obFrame(a0)
0000A6C2                            
0000A6C2                            Cbal_Bounce:	; Routine 2
0000A6C2 4EB9 0000 0000             		jsr	(ObjectFall).l
0000A6C8 4A68 0012                  		tst.w	obVelY(a0)
0000A6CC 6B00                       		bmi.s	Cbal_ChkExplode
0000A6CE 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A6D4 4A41                       		tst.w	d1		; has ball hit the floor?
0000A6D6 6A00                       		bpl.s	Cbal_ChkExplode	; if not, branch
0000A6D8                            
0000A6D8 D368 000C                  		add.w	d1,obY(a0)
0000A6DC 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; bounce
0000A6E2 4A03                       		tst.b	d3
0000A6E4 6700                       		beq.s	Cbal_ChkExplode
0000A6E6 6B00                       		bmi.s	loc_8CA4
0000A6E8 4A68 0010                  		tst.w	obVelX(a0)
0000A6EC 6A00                       		bpl.s	Cbal_ChkExplode
0000A6EE 4468 0010                  		neg.w	obVelX(a0)
0000A6F2 6000                       		bra.s	Cbal_ChkExplode
0000A6F4                            ; ===========================================================================
0000A6F4                            
0000A6F4                            loc_8CA4:
0000A6F4 4A68 0010                  		tst.w	obVelX(a0)
0000A6F8 6B00                       		bmi.s	Cbal_ChkExplode
0000A6FA 4468 0010                  		neg.w	obVelX(a0)
0000A6FE                            
0000A6FE                            Cbal_ChkExplode:
0000A6FE 5368 0030                  		subq.w	#1,cbal_time(a0) ; subtract 1 from explosion time
0000A702 6A00                       		bpl.s	Cbal_Animate	; if time is > 0, branch
0000A704                            
0000A704                            	Cbal_Explode:
0000A704 10BC 0000                  		move.b	#id_MissileDissolve,0(a0)
0000A708 10BC 0000                  		move.b	#id_ExplosionBomb,0(a0)	; change object	to an explosion	($3F)
0000A70C 117C 0000 0024             		move.b	#0,obRoutine(a0) ; reset routine counter
0000A712 6000 0000                  		bra.w	ExplosionBomb	; jump to explosion code
0000A716                            ; ===========================================================================
0000A716                            
0000A716                            Cbal_Animate:
0000A716 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A71A 6A00                       		bpl.s	Cbal_Display
0000A71C 117C 0005 001E             		move.b	#5,obTimeFrame(a0) ; set frame duration to 5 frames
0000A722 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
0000A728                            
0000A728                            Cbal_Display:
0000A728 6100 0000                  		bsr.w	DisplaySprite
0000A72C 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000A730 0640 00E0                  		addi.w	#$E0,d0
0000A734 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen off	the level?
0000A738 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A73C 4E75                       		rts	
0000A73C 4E75                       		rts	
0000A73E                            		include	"_incObj\24, 27 & 3F Explosions.asm"
0000A73E                            ; ---------------------------------------------------------------------------
0000A73E                            ; Object 24 - buzz bomber missile vanishing (unused?)
0000A73E                            ; ---------------------------------------------------------------------------
0000A73E                            
0000A73E                            MissileDissolve:
0000A73E 7000                       		moveq	#0,d0
0000A740 1028 0024                  		move.b	obRoutine(a0),d0
0000A744 323B 0000                  		move.w	MDis_Index(pc,d0.w),d1
0000A748 4EFB 1000                  		jmp	MDis_Index(pc,d1.w)
0000A74C                            ; ===========================================================================
0000A74C 0000                       MDis_Index:	dc.w MDis_Main-MDis_Index
0000A74E 0000                       		dc.w MDis_Animate-MDis_Index
0000A750                            ; ===========================================================================
0000A750                            
0000A750                            MDis_Main:	; Routine 0
0000A750 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A754 217C 0000 0000 0004        		move.l	#Map_MisDissolve,obMap(a0)
0000A75C 317C 041C 0002             		move.w	#$41C,obGfx(a0)
0000A762 117C 0004 0001             		move.b	#4,obRender(a0)
0000A768 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A76E 117C 0000 0020             		move.b	#0,obColType(a0)
0000A774 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A77A 117C 0009 001E             		move.b	#9,obTimeFrame(a0)
0000A780 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A790                            
0000A790                            MDis_Animate:	; Routine 2
0000A790 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A794 6A00                       		bpl.s	@display
0000A796 117C 0009 001E             		move.b	#9,obTimeFrame(a0) ; set frame duration to 9 frames
0000A79C 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A7A0 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has animation completed?
0000A7A6 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A7AA                            
0000A7AA                            	@display:
0000A7AA 6000 0000                  		bra.w	DisplaySprite
0000A7AE                            ; ===========================================================================
0000A7AE                            
0000A7AE                            ; ---------------------------------------------------------------------------
0000A7AE                            ; Object 27 - explosion	from a destroyed enemy or monitor
0000A7AE                            ; ---------------------------------------------------------------------------
0000A7AE                            
0000A7AE                            ExplosionItem:
0000A7AE 7000                       		moveq	#0,d0
0000A7B0 1028 0024                  		move.b	obRoutine(a0),d0
0000A7B4 323B 0000                  		move.w	ExItem_Index(pc,d0.w),d1
0000A7B8 4EFB 1000                  		jmp	ExItem_Index(pc,d1.w)
0000A7BC                            ; ===========================================================================
0000A7BC 0000                       ExItem_Index:	dc.w ExItem_Animal-ExItem_Index
0000A7BE 0000                       		dc.w ExItem_Main-ExItem_Index
0000A7C0 0000                       		dc.w ExItem_Animate-ExItem_Index
0000A7C2                            ; ===========================================================================
0000A7C2                            
0000A7C2                            ExItem_Animal:	; Routine 0
0000A7C2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A7C6 6100 0000                  		bsr.w	FindFreeObj
0000A7CA 6600                       		bne.s	ExItem_Main
0000A7CC 12BC 0000                  		move.b	#id_Animals,0(a1) ; load animal object
0000A7D0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A7D6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A7DC 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000A7E2                            
0000A7E2                            ExItem_Main:	; Routine 2
0000A7E2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A7E6 217C 0000 0000 0004        		move.l	#Map_ExplodeItem,obMap(a0)
0000A7EE 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A7F4 117C 0004 0001             		move.b	#4,obRender(a0)
0000A7FA 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A800 117C 0000 0020             		move.b	#0,obColType(a0)
0000A806 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A80C 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A812 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A822                            
0000A822                            ExItem_Animate:	; Routine 4 (2 for ExplosionBomb)
0000A822 5528 001E                  		subq.b	#2,obTimeFrame(a0) ; subtract 1 from frame duration
0000A826 6A00                       		bpl.s	@display
0000A828 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A82E 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A832 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is the final frame (05) displayed?
0000A838 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A83C                            
0000A83C                            	@display:
0000A83C 6000 0000                  		bra.w	DisplaySprite
0000A840                            ; ===========================================================================
0000A840                            ; ---------------------------------------------------------------------------
0000A840                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000A840                            ; ---------------------------------------------------------------------------
0000A840                            
0000A840                            ExplosionBomb:
0000A840 7000                       		moveq	#0,d0
0000A842 1028 0024                  		move.b	obRoutine(a0),d0
0000A846 323B 0000                  		move.w	ExBom_Index(pc,d0.w),d1
0000A84A 4EFB 1000                  		jmp	ExBom_Index(pc,d1.w)
0000A84E                            ; ===========================================================================
0000A84E 0000                       ExBom_Index:	dc.w ExBom_Main-ExBom_Index
0000A850 FFD4                       		dc.w ExItem_Animate-ExBom_Index
0000A852                            ; ===========================================================================
0000A852                            
0000A852                            ExBom_Main:	; Routine 0
0000A852 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A856 217C 0000 0000 0004        		move.l	#Map_ExplodeBomb,obMap(a0)
0000A85E 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A864 117C 0004 0001             		move.b	#4,obRender(a0)
0000A86A 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A870 117C 0000 0020             		move.b	#0,obColType(a0)
0000A876 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A87C 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000A882 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A892                            		include	"_anim\Ball Hog.asm"
0000A892                            ; ---------------------------------------------------------------------------
0000A892                            ; Animation script - doors (SBZ)
0000A892                            ; ---------------------------------------------------------------------------
0000A892 0000                       Ani_Hog:	dc.w @hog-Ani_Hog
0000A894 0900 0002 0203 0200 0002+  @hog:		dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, afEnd
0000A8AC 00                         		even
0000A8AC 00                         		even
0000A8AC                            Map_Hog:	include	"_maps\Ball Hog.asm"
0000A8AC                            ; --------------------------------------------------------------------------------
0000A8AC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A8AC                            ; --------------------------------------------------------------------------------
0000A8AC                            
0000A8AC                            SME_ZER01:	
0000A8AC 0000 0000                  		dc.w SME_ZER01_C-SME_ZER01, SME_ZER01_17-SME_ZER01	
0000A8B0 0000 0000                  		dc.w SME_ZER01_22-SME_ZER01, SME_ZER01_2D-SME_ZER01	
0000A8B4 0000 0000                  		dc.w SME_ZER01_38-SME_ZER01, SME_ZER01_3E-SME_ZER01	
0000A8B8 02                         SME_ZER01_C:	dc.b 2	
0000A8B9 EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000A8BE FF0A 2006 F4               		dc.b $FF, $A, $20, 6, $F4	
0000A8C3 02                         SME_ZER01_17:	dc.b 2	
0000A8C4 EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000A8C9 FF0A 200F F4               		dc.b $FF, $A, $20, $F, $F4	
0000A8CE 02                         SME_ZER01_22:	dc.b 2	
0000A8CF F409 2000 F4               		dc.b $F4, 9, $20, 0, $F4	
0000A8D4 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000A8D9 02                         SME_ZER01_2D:	dc.b 2	
0000A8DA E409 2000 F4               		dc.b $E4, 9, $20, 0, $F4	
0000A8DF F40A 201E F4               		dc.b $F4, $A, $20, $1E, $F4	
0000A8E4 01                         SME_ZER01_38:	dc.b 1	
0000A8E5 F805 0027 F8               		dc.b $F8, 5, 0, $27, $F8	
0000A8EA 01                         SME_ZER01_3E:	dc.b 1	
0000A8EB F805 602B F8               		dc.b $F8, 5, $60, $2B, $F8	
0000A8F0                            		even
0000A8F0                            		even
0000A8F0                            Map_MisDissolve:include	"_maps\Buzz Bomber Missile Dissolve.asm"
0000A8F0                            ; ---------------------------------------------------------------------------
0000A8F0                            ; Sprite mappings - buzz bomber missile vanishing
0000A8F0                            ; ---------------------------------------------------------------------------
0000A8F0                            Map_MisDissolve_internal:
0000A8F0 0000                       		dc.w byte_8EAE-Map_MisDissolve_internal
0000A8F2 0000                       		dc.w byte_8EB4-Map_MisDissolve_internal
0000A8F4 0000                       		dc.w byte_8EBA-Map_MisDissolve_internal
0000A8F6 0000                       		dc.w byte_8EC0-Map_MisDissolve_internal
0000A8F8 01                         byte_8EAE:	dc.b 1
0000A8F9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000A8FE 01                         byte_8EB4:	dc.b 1
0000A8FF F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000A904 01                         byte_8EBA:	dc.b 1
0000A905 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000A90A 01                         byte_8EC0:	dc.b 1
0000A90B F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000A910                            		even
0000A910                            		even
0000A910                            		include	"_maps\Explosions.asm"
0000A910                            ; ---------------------------------------------------------------------------
0000A910                            ; Sprite mappings - explosion from a badnik or monitor
0000A910                            ; ---------------------------------------------------------------------------
0000A910 0000 0000                  Map_ExplodeItem:dc.w byte_8ED0-Map_ExplodeItem, byte_8ED6-Map_ExplodeItem
0000A914 0000 0000                  		dc.w byte_8EDC-Map_ExplodeItem, byte_8EE2-Map_ExplodeItem
0000A918 0000                       		dc.w byte_8EF7-Map_ExplodeItem
0000A91A 01                         byte_8ED0:	dc.b 1
0000A91B F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000A920 01                         byte_8ED6:	dc.b 1
0000A921 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000A926 01                         byte_8EDC:	dc.b 1
0000A927 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000A92C 04                         byte_8EE2:	dc.b 4
0000A92D EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000A932 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000A937 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000A93C FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000A941 04                         byte_8EF7:	dc.b 4
0000A942 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000A947 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000A94C 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000A951 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000A956                            		even
0000A956                            ; ---------------------------------------------------------------------------
0000A956                            ; Sprite mappings - explosion from when	a boss is destroyed
0000A956                            ; ---------------------------------------------------------------------------
0000A956 FFC4                       Map_ExplodeBomb:dc.w byte_8ED0-Map_ExplodeBomb
0000A958 0000                       		dc.w byte_8F16-Map_ExplodeBomb
0000A95A 0000                       		dc.w byte_8F1C-Map_ExplodeBomb
0000A95C FFD6                       		dc.w byte_8EE2-Map_ExplodeBomb
0000A95E FFEB                       		dc.w byte_8EF7-Map_ExplodeBomb
0000A960 01                         byte_8F16:	dc.b 1
0000A961 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000A966 01                         byte_8F1C:	dc.b 1
0000A967 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000A96C                            		even
0000A96C                            		even
0000A96C                            
0000A96C                            		include	"_incObj\28 Animals.asm"
0000A96C                            ; ---------------------------------------------------------------------------
0000A96C                            ; Object 28 - animals
0000A96C                            ; ---------------------------------------------------------------------------
0000A96C                            
0000A96C                            Animals:
0000A96C 7000                       		moveq	#0,d0
0000A96E 1028 0024                  		move.b	obRoutine(a0),d0
0000A972 323B 0000                  		move.w	Anml_Index(pc,d0.w),d1
0000A976 4EFB 1000                  		jmp	Anml_Index(pc,d1.w)
0000A97A                            ; ===========================================================================
0000A97A 0000 0000                  Anml_Index:	dc.w Anml_Ending-Anml_Index, loc_912A-Anml_Index
0000A97E 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000A982 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9184-Anml_Index
0000A986 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000A98A 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9240-Anml_Index
0000A98E 0000 0000                  		dc.w loc_9260-Anml_Index, loc_9260-Anml_Index
0000A992 0000 0000                  		dc.w loc_9280-Anml_Index, loc_92BA-Anml_Index
0000A996 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000A99A 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000A99E 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9370-Anml_Index
0000A9A2 0000                       		dc.w loc_92D6-Anml_Index
0000A9A4                            
0000A9A4 0005 0203 0603 0405 0401+  Anml_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000A9B0                            
0000A9B0 FE00 FC00                  Anml_Variables:	dc.w $FE00, $FC00
0000A9B4 0000 0000                  		dc.l Map_Animal1
0000A9B8 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000A9BC 0000 0000                  		dc.l Map_Animal2	; mappings address
0000A9C0 FE80 FD00                  		dc.w $FE80, $FD00
0000A9C4 0000 0000                  		dc.l Map_Animal1
0000A9C8 FEC0 FE80                  		dc.w $FEC0, $FE80
0000A9CC 0000 0000                  		dc.l Map_Animal2
0000A9D0 FE40 FD00                  		dc.w $FE40, $FD00
0000A9D4 0000 0000                  		dc.l Map_Animal3
0000A9D8 FD00 FC00                  		dc.w $FD00, $FC00
0000A9DC 0000 0000                  		dc.l Map_Animal2
0000A9E0 FD80 FC80                  		dc.w $FD80, $FC80
0000A9E4 0000 0000                  		dc.l Map_Animal3
0000A9E8                            
0000A9E8 FBC0 FC00 FBC0 FC00 FBC0+  Anml_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000A9F8 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000AA08 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000AA14                            
0000AA14 0000 0000 0000 0000 0000+  Anml_EndMap:	dc.l Map_Animal2, Map_Animal2, Map_Animal2, Map_Animal1, Map_Animal1
0000AA28 0000 0000 0000 0000 0000+  		dc.l Map_Animal1, Map_Animal1, Map_Animal2, Map_Animal3, Map_Animal2
0000AA3C 0000 0000                  		dc.l Map_Animal3
0000AA40                            
0000AA40 05A5 05A5 05A5 0553 0553+  Anml_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000AA52 0565 05B3                  		dc.w $565, $5B3
0000AA56                            ; ===========================================================================
0000AA56                            
0000AA56                            Anml_Ending:	; Routine 0
0000AA56 4A28 0028                  		tst.b	obSubtype(a0)	; did animal come from a destroyed enemy?
0000AA5A 6700 0000                  		beq.w	Anml_FromEnemy	; if yes, branch
0000AA5E 7000                       		moveq	#0,d0
0000AA60 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type to d0
0000AA64 D040                       		add.w	d0,d0		; multiply d0 by 2
0000AA66 1140 0024                  		move.b	d0,obRoutine(a0) ; move d0 to routine counter
0000AA6A 0440 0014                  		subi.w	#$14,d0
0000AA6E 317B 00D0 0002             		move.w	Anml_EndVram(pc,d0.w),obGfx(a0)
0000AA74 D040                       		add.w	d0,d0
0000AA76 217B 009C 0004             		move.l	Anml_EndMap(pc,d0.w),obMap(a0)
0000AA7C 43FA FF6A                  		lea	Anml_EndSpeed(pc),a1
0000AA80 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000AA86 3171 0000 0010             		move.w	(a1,d0.w),obVelX(a0)
0000AA8C 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000AA92 3171 0002 0012             		move.w	2(a1,d0.w),obVelY(a0)
0000AA98 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000AA9E 117C 0004 0001             		move.b	#4,obRender(a0)
0000AAA4 08E8 0000 0001             		bset	#0,obRender(a0)
0000AAAA 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000AAB0 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AAB6 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AABC 6000 0000                  		bra.w	DisplaySprite
0000AAC0                            ; ===========================================================================
0000AAC0                            
0000AAC0                            Anml_FromEnemy:
0000AAC0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AAC4 6100 91DE                  		bsr.w	RandomNumber
0000AAC8 0240 0001                  		andi.w	#1,d0
0000AACC 7200                       		moveq	#0,d1
0000AACE 1238 FE10                  		move.b	(v_zone).w,d1
0000AAD2 D241                       		add.w	d1,d1
0000AAD4 D240                       		add.w	d0,d1
0000AAD6 43FA FECC                  		lea	Anml_VarIndex(pc),a1
0000AADA 1031 1000                  		move.b	(a1,d1.w),d0
0000AADE 1140 0030                  		move.b	d0,$30(a0)
0000AAE2 E748                       		lsl.w	#3,d0
0000AAE4 43FA FECA                  		lea	Anml_Variables(pc),a1
0000AAE8 D2C0                       		adda.w	d0,a1
0000AAEA 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000AAEE 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000AAF2 2159 0004                  		move.l	(a1)+,obMap(a0)	; load mappings
0000AAF6 317C 0580 0002             		move.w	#$580,obGfx(a0)	; VRAM setting for 1st animal
0000AAFC 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000AB02 6700                       		beq.s	loc_90C0	; if yes, branch
0000AB04 317C 0592 0002             		move.w	#$592,obGfx(a0)	; VRAM setting for 2nd animal
0000AB0A                            
0000AB0A                            loc_90C0:
0000AB0A 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000AB10 117C 0004 0001             		move.b	#4,obRender(a0)
0000AB16 08E8 0000 0001             		bset	#0,obRender(a0)
0000AB1C 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000AB22 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AB28 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AB2E 117C 0002 001A             		move.b	#2,obFrame(a0)
0000AB34 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000AB3A 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000AB3E 6600                       		bne.s	loc_911C
0000AB40 6100 0000                  		bsr.w	FindFreeObj
0000AB44 6600                       		bne.s	Anml_Display
0000AB46 12BC 0000                  		move.b	#id_Points,0(a1) ; load points object
0000AB4A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000AB50 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AB56 3028 003E                  		move.w	$3E(a0),d0
0000AB5A E248                       		lsr.w	#1,d0
0000AB5C 1340 001A                  		move.b	d0,obFrame(a1)
0000AB60                            
0000AB60                            Anml_Display:
0000AB60 6000 0000                  		bra.w	DisplaySprite
0000AB64                            ; ===========================================================================
0000AB64                            
0000AB64                            loc_911C:
0000AB64 117C 0012 0024             		move.b	#$12,obRoutine(a0)
0000AB6A 4268 0010                  		clr.w	obVelX(a0)
0000AB6E 6000 0000                  		bra.w	DisplaySprite
0000AB72                            ; ===========================================================================
0000AB72                            
0000AB72                            loc_912A:
0000AB72 4A28 0001                  		tst.b	obRender(a0)
0000AB76 6A00 0000                  		bpl.w	DeleteObject
0000AB7A 6100 0000                  		bsr.w	ObjectFall
0000AB7E 4A68 0012                  		tst.w	obVelY(a0)
0000AB82 6B00                       		bmi.s	loc_9180
0000AB84 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AB8A 4A41                       		tst.w	d1
0000AB8C 6A00                       		bpl.s	loc_9180
0000AB8E D368 000C                  		add.w	d1,obY(a0)
0000AB92 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AB98 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AB9E 117C 0001 001A             		move.b	#1,obFrame(a0)
0000ABA4 1028 0030                  		move.b	$30(a0),d0
0000ABA8 D000                       		add.b	d0,d0
0000ABAA 5800                       		addq.b	#4,d0
0000ABAC 1140 0024                  		move.b	d0,obRoutine(a0)
0000ABB0 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000ABB4 6700                       		beq.s	loc_9180
0000ABB6 0838 0004 FE0F             		btst	#4,(v_vbla_byte).w
0000ABBC 6700                       		beq.s	loc_9180
0000ABBE 4468 0010                  		neg.w	obVelX(a0)
0000ABC2 0868 0000 0001             		bchg	#0,obRender(a0)
0000ABC8                            
0000ABC8                            loc_9180:
0000ABC8 6000 0000                  		bra.w	DisplaySprite
0000ABCC                            ; ===========================================================================
0000ABCC                            
0000ABCC                            loc_9184:
0000ABCC 6100 0000                  		bsr.w	ObjectFall
0000ABD0 117C 0001 001A             		move.b	#1,obFrame(a0)
0000ABD6 4A68 0012                  		tst.w	obVelY(a0)
0000ABDA 6B00                       		bmi.s	loc_91AE
0000ABDC 117C 0000 001A             		move.b	#0,obFrame(a0)
0000ABE2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000ABE8 4A41                       		tst.w	d1
0000ABEA 6A00                       		bpl.s	loc_91AE
0000ABEC D368 000C                  		add.w	d1,obY(a0)
0000ABF0 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ABF6                            
0000ABF6                            loc_91AE:
0000ABF6 4A28 0028                  		tst.b	obSubtype(a0)
0000ABFA 6600                       		bne.s	loc_9224
0000ABFC 4A28 0001                  		tst.b	obRender(a0)
0000AC00 6A00 0000                  		bpl.w	DeleteObject
0000AC04 6000 0000                  		bra.w	DisplaySprite
0000AC08                            ; ===========================================================================
0000AC08                            
0000AC08                            loc_91C0:
0000AC08 6100 0000                  		bsr.w	SpeedToPos
0000AC0C 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AC12 4A68 0012                  		tst.w	obVelY(a0)
0000AC16 6B00                       		bmi.s	loc_91FC
0000AC18 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AC1E 4A41                       		tst.w	d1
0000AC20 6A00                       		bpl.s	loc_91FC
0000AC22 D368 000C                  		add.w	d1,obY(a0)
0000AC26 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AC2C 4A28 0028                  		tst.b	obSubtype(a0)
0000AC30 6700                       		beq.s	loc_91FC
0000AC32 0C28 000A 0028             		cmpi.b	#$A,obSubtype(a0)
0000AC38 6700                       		beq.s	loc_91FC
0000AC3A 4468 0010                  		neg.w	obVelX(a0)
0000AC3E 0868 0000 0001             		bchg	#0,obRender(a0)
0000AC44                            
0000AC44                            loc_91FC:
0000AC44 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AC48 6A00                       		bpl.s	loc_9212
0000AC4A 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AC50 5228 001A                  		addq.b	#1,obFrame(a0)
0000AC54 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AC5A                            
0000AC5A                            loc_9212:
0000AC5A 4A28 0028                  		tst.b	obSubtype(a0)
0000AC5E 6600                       		bne.s	loc_9224
0000AC60 4A28 0001                  		tst.b	obRender(a0)
0000AC64 6A00 0000                  		bpl.w	DeleteObject
0000AC68 6000 0000                  		bra.w	DisplaySprite
0000AC6C                            ; ===========================================================================
0000AC6C                            
0000AC6C                            loc_9224:
0000AC6C 3028 0008                  		move.w	obX(a0),d0
0000AC70 9078 D008                  		sub.w	(v_player+obX).w,d0
0000AC74 6500                       		bcs.s	loc_923C
0000AC76 0440 0180                  		subi.w	#$180,d0
0000AC7A 6A00                       		bpl.s	loc_923C
0000AC7C 4A28 0001                  		tst.b	obRender(a0)
0000AC80 6A00 0000                  		bpl.w	DeleteObject
0000AC84                            
0000AC84                            loc_923C:
0000AC84 6000 0000                  		bra.w	DisplaySprite
0000AC88                            ; ===========================================================================
0000AC88                            
0000AC88                            loc_9240:
0000AC88 4A28 0001                  		tst.b	obRender(a0)
0000AC8C 6A00 0000                  		bpl.w	DeleteObject
0000AC90 5368 0036                  		subq.w	#1,$36(a0)
0000AC94 6600 0000                  		bne.w	loc_925C
0000AC98 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000AC9E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000ACA4                            
0000ACA4                            loc_925C:
0000ACA4 6000 0000                  		bra.w	DisplaySprite
0000ACA8                            ; ===========================================================================
0000ACA8                            
0000ACA8                            loc_9260:
0000ACA8 6100 0000                  		bsr.w	sub_9404
0000ACAC 6400                       		bcc.s	loc_927C
0000ACAE 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000ACB4 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ACBA 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000ACC0 6000 FF46                  		bra.w	loc_91C0
0000ACC4                            ; ===========================================================================
0000ACC4                            
0000ACC4                            loc_927C:
0000ACC4 6000 FFA6                  		bra.w	loc_9224
0000ACC8                            ; ===========================================================================
0000ACC8                            
0000ACC8                            loc_9280:
0000ACC8 6100 0000                  		bsr.w	sub_9404
0000ACCC 6A00                       		bpl.s	loc_92B6
0000ACCE 4268 0010                  		clr.w	obVelX(a0)
0000ACD2 4268 0032                  		clr.w	$32(a0)
0000ACD6 6100 0000                  		bsr.w	SpeedToPos
0000ACDA 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000ACE0 6100 0000                  		bsr.w	loc_93C4
0000ACE4 6100 0000                  		bsr.w	loc_93EC
0000ACE8 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000ACEC 6A00                       		bpl.s	loc_92B6
0000ACEE 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000ACF4 5228 001A                  		addq.b	#1,obFrame(a0)
0000ACF8 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000ACFE                            
0000ACFE                            loc_92B6:
0000ACFE 6000 FF6C                  		bra.w	loc_9224
0000AD02                            ; ===========================================================================
0000AD02                            
0000AD02                            loc_92BA:
0000AD02 6100 0000                  		bsr.w	sub_9404
0000AD06 6A00                       		bpl.s	loc_9310
0000AD08 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AD0E 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AD14 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000AD1A 6000 FEB0                  		bra.w	loc_9184
0000AD1E                            ; ===========================================================================
0000AD1E                            
0000AD1E                            loc_92D6:
0000AD1E 6100 0000                  		bsr.w	ObjectFall
0000AD22 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AD28 4A68 0012                  		tst.w	obVelY(a0)
0000AD2C 6B00                       		bmi.s	loc_9310
0000AD2E 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AD34 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AD3A 4A41                       		tst.w	d1
0000AD3C 6A00                       		bpl.s	loc_9310
0000AD3E 4628 0029                  		not.b	$29(a0)
0000AD42 6600                       		bne.s	loc_9306
0000AD44 4468 0010                  		neg.w	obVelX(a0)
0000AD48 0868 0000 0001             		bchg	#0,obRender(a0)
0000AD4E                            
0000AD4E                            loc_9306:
0000AD4E D368 000C                  		add.w	d1,obY(a0)
0000AD52 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AD58                            
0000AD58                            loc_9310:
0000AD58 6000 FF12                  		bra.w	loc_9224
0000AD5C                            ; ===========================================================================
0000AD5C                            
0000AD5C                            loc_9314:
0000AD5C 6100 0000                  		bsr.w	sub_9404
0000AD60 6A00                       		bpl.s	loc_932E
0000AD62 4268 0010                  		clr.w	obVelX(a0)
0000AD66 4268 0032                  		clr.w	$32(a0)
0000AD6A 6100 0000                  		bsr.w	ObjectFall
0000AD6E 6100 0000                  		bsr.w	loc_93C4
0000AD72 6100 0000                  		bsr.w	loc_93EC
0000AD76                            
0000AD76                            loc_932E:
0000AD76 6000 FEF4                  		bra.w	loc_9224
0000AD7A                            ; ===========================================================================
0000AD7A                            
0000AD7A                            loc_9332:
0000AD7A 6100 0000                  		bsr.w	sub_9404
0000AD7E 6A00                       		bpl.s	loc_936C
0000AD80 6100 0000                  		bsr.w	ObjectFall
0000AD84 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AD8A 4A68 0012                  		tst.w	obVelY(a0)
0000AD8E 6B00                       		bmi.s	loc_936C
0000AD90 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AD96 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AD9C 4A41                       		tst.w	d1
0000AD9E 6A00                       		bpl.s	loc_936C
0000ADA0 4468 0010                  		neg.w	obVelX(a0)
0000ADA4 0868 0000 0001             		bchg	#0,obRender(a0)
0000ADAA D368 000C                  		add.w	d1,obY(a0)
0000ADAE 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ADB4                            
0000ADB4                            loc_936C:
0000ADB4 6000 FEB6                  		bra.w	loc_9224
0000ADB8                            ; ===========================================================================
0000ADB8                            
0000ADB8                            loc_9370:
0000ADB8 6100 0000                  		bsr.w	sub_9404
0000ADBC 6A00                       		bpl.s	loc_93C0
0000ADBE 6100 0000                  		bsr.w	SpeedToPos
0000ADC2 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000ADC8 4A68 0012                  		tst.w	obVelY(a0)
0000ADCC 6B00                       		bmi.s	loc_93AA
0000ADCE 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000ADD4 4A41                       		tst.w	d1
0000ADD6 6A00                       		bpl.s	loc_93AA
0000ADD8 4628 0029                  		not.b	$29(a0)
0000ADDC 6600                       		bne.s	loc_93A0
0000ADDE 4468 0010                  		neg.w	obVelX(a0)
0000ADE2 0868 0000 0001             		bchg	#0,obRender(a0)
0000ADE8                            
0000ADE8                            loc_93A0:
0000ADE8 D368 000C                  		add.w	d1,obY(a0)
0000ADEC 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ADF2                            
0000ADF2                            loc_93AA:
0000ADF2 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000ADF6 6A00                       		bpl.s	loc_93C0
0000ADF8 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000ADFE 5228 001A                  		addq.b	#1,obFrame(a0)
0000AE02 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AE08                            
0000AE08                            loc_93C0:
0000AE08 6000 FE62                  		bra.w	loc_9224
0000AE0C                            ; ===========================================================================
0000AE0C                            
0000AE0C                            loc_93C4:
0000AE0C 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AE12 4A68 0012                  		tst.w	obVelY(a0)
0000AE16 6B00                       		bmi.s	locret_93EA
0000AE18 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AE1E 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AE24 4A41                       		tst.w	d1
0000AE26 6A00                       		bpl.s	locret_93EA
0000AE28 D368 000C                  		add.w	d1,obY(a0)
0000AE2C 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AE32                            
0000AE32                            locret_93EA:
0000AE32 4E75                       		rts	
0000AE34                            ; ===========================================================================
0000AE34                            
0000AE34                            loc_93EC:
0000AE34 08E8 0000 0001             		bset	#0,obRender(a0)
0000AE3A 3028 0008                  		move.w	obX(a0),d0
0000AE3E 9078 D008                  		sub.w	(v_player+obX).w,d0
0000AE42 6400                       		bcc.s	locret_9402
0000AE44 08A8 0000 0001             		bclr	#0,obRender(a0)
0000AE4A                            
0000AE4A                            locret_9402:
0000AE4A 4E75                       		rts	
0000AE4C                            
0000AE4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AE4C                            
0000AE4C                            
0000AE4C                            sub_9404:
0000AE4C 3038 D008                  		move.w	(v_player+obX).w,d0
0000AE50 9068 0008                  		sub.w	obX(a0),d0
0000AE54 0440 00B8                  		subi.w	#$B8,d0
0000AE58 4E75                       		rts	
0000AE5A                            ; End of function sub_9404
0000AE5A                            ; End of function sub_9404
0000AE5A                            		include	"_incObj\29 Points.asm"
0000AE5A                            ; ---------------------------------------------------------------------------
0000AE5A                            ; Object 29 - points that appear when you destroy something
0000AE5A                            ; ---------------------------------------------------------------------------
0000AE5A                            
0000AE5A                            Points:
0000AE5A 7000                       		moveq	#0,d0
0000AE5C 1028 0024                  		move.b	obRoutine(a0),d0
0000AE60 323B 0000                  		move.w	Poi_Index(pc,d0.w),d1
0000AE64 4EBB 1000                  		jsr	Poi_Index(pc,d1.w)
0000AE68 6000 0000                  		bra.w	DisplaySprite
0000AE6C                            ; ===========================================================================
0000AE6C 0000                       Poi_Index:	dc.w Poi_Main-Poi_Index
0000AE6E 0000                       		dc.w Poi_Slower-Poi_Index
0000AE70                            ; ===========================================================================
0000AE70                            
0000AE70                            Poi_Main:	; Routine 0
0000AE70 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AE74 217C 0000 0000 0004        		move.l	#Map_Poi,obMap(a0)
0000AE7C 317C 256D 0002             		move.w	#$256D,obGfx(a0)
0000AE82 117C 0004 0001             		move.b	#4,obRender(a0)
0000AE88 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AE8E 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AE94 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; move object upwards
0000AE9A                            
0000AE9A                            Poi_Slower:	; Routine 2
0000AE9A 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000AE9E 6A00 0000                  		bpl.w	DeleteObject	; if not, delete
0000AEA2 6100 0000                  		bsr.w	SpeedToPos
0000AEA6 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000AEAC 4E75                       		rts	
0000AEAC 4E75                       		rts	
0000AEAE                            Map_Animal1:	include	"_maps\Animals 1.asm"
0000AEAE                            ; ---------------------------------------------------------------------------
0000AEAE                            ; Sprite mappings - animals
0000AEAE                            ; ---------------------------------------------------------------------------
0000AEAE                            Map_Animal1_internal:
0000AEAE 0000                       		dc.w byte_9472-Map_Animal1_internal
0000AEB0 0000                       		dc.w byte_9478-Map_Animal1_internal
0000AEB2 0000                       		dc.w byte_946C-Map_Animal1_internal
0000AEB4 01                         byte_946C:	dc.b 1
0000AEB5 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AEBA 01                         byte_9472:	dc.b 1
0000AEBB F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000AEC0 01                         byte_9478:	dc.b 1
0000AEC1 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000AEC6                            		even
0000AEC6                            		even
0000AEC6                            Map_Animal2:	include	"_maps\Animals 2.asm"
0000AEC6                            ; ---------------------------------------------------------------------------
0000AEC6                            ; Sprite mappings - animals
0000AEC6                            ; ---------------------------------------------------------------------------
0000AEC6                            Map_Animal2_internal:
0000AEC6 0000                       		dc.w byte_948A-Map_Animal2_internal
0000AEC8 0000                       		dc.w byte_9490-Map_Animal2_internal
0000AECA 0000                       		dc.w byte_9484-Map_Animal2_internal
0000AECC 01                         byte_9484:	dc.b 1
0000AECD F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AED2 01                         byte_948A:	dc.b 1
0000AED3 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000AED8 01                         byte_9490:	dc.b 1
0000AED9 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000AEDE                            		even
0000AEDE                            		even
0000AEDE                            Map_Animal3:	include	"_maps\Animals 3.asm"
0000AEDE                            ; ---------------------------------------------------------------------------
0000AEDE                            ; Sprite mappings - animals
0000AEDE                            ; ---------------------------------------------------------------------------
0000AEDE                            Map_Animal3_internal:
0000AEDE 0000                       		dc.w byte_94A2-Map_Animal3_internal
0000AEE0 0000                       		dc.w byte_94A8-Map_Animal3_internal
0000AEE2 0000                       		dc.w byte_949C-Map_Animal3_internal
0000AEE4 01                         byte_949C:	dc.b 1
0000AEE5 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AEEA 01                         byte_94A2:	dc.b 1
0000AEEB FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000AEF0 01                         byte_94A8:	dc.b 1
0000AEF1 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000AEF6                            		even
0000AEF6                            		even
0000AEF6                            Map_Poi:	include	"_maps\Points.asm"
0000AEF6                            ; --------------------------------------------------------------------------------
0000AEF6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000AEF6                            ; --------------------------------------------------------------------------------
0000AEF6                            
0000AEF6                            SME_qLvsg:	
0000AEF6 0000 0000                  		dc.w SME_qLvsg_E-SME_qLvsg, SME_qLvsg_14-SME_qLvsg	
0000AEFA 0000 0000                  		dc.w SME_qLvsg_1A-SME_qLvsg, SME_qLvsg_20-SME_qLvsg	
0000AEFE 0000 0000                  		dc.w SME_qLvsg_26-SME_qLvsg, SME_qLvsg_2C-SME_qLvsg	
0000AF02 0000                       		dc.w SME_qLvsg_37-SME_qLvsg	
0000AF04 01                         SME_qLvsg_E:	dc.b 1	
0000AF05 FC04 0000 F8               		dc.b $FC, 4, 0, 0, $F8	
0000AF0A 01                         SME_qLvsg_14:	dc.b 1	
0000AF0B FC04 0002 F8               		dc.b $FC, 4, 0, 2, $F8	
0000AF10 01                         SME_qLvsg_1A:	dc.b 1	
0000AF11 FC04 0004 F8               		dc.b $FC, 4, 0, 4, $F8	
0000AF16 01                         SME_qLvsg_20:	dc.b 1	
0000AF17 FC04 0006 F8               		dc.b $FC, 4, 0, 6, $F8	
0000AF1C 01                         SME_qLvsg_26:	dc.b 1	
0000AF1D FC00 0006 FC               		dc.b $FC, 0, 0, 6, $FC	
0000AF22 02                         SME_qLvsg_2C:	dc.b 2	
0000AF23 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000AF28 FC04 0007 01               		dc.b $FC, 4, 0, 7, 1	
0000AF2D 02                         SME_qLvsg_37:	dc.b 2	
0000AF2E FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000AF33 FC04 0007 06               		dc.b $FC, 4, 0, 7, 6	
0000AF38                            		even
0000AF38                            		even
0000AF38                            
0000AF38                            		include	"_incObj\1F Crabmeat.asm"
0000AF38                            ; ---------------------------------------------------------------------------
0000AF38                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000AF38                            ; ---------------------------------------------------------------------------
0000AF38                            
0000AF38                            Crabmeat:
0000AF38 7000                       		moveq	#0,d0
0000AF3A 1028 0024                  		move.b	obRoutine(a0),d0
0000AF3E 323B 0000                  		move.w	Crab_Index(pc,d0.w),d1
0000AF42 4EFB 1000                  		jmp	Crab_Index(pc,d1.w)
0000AF46                            ; ===========================================================================
0000AF46                            Crab_Index:
0000AF46 0000                       ptr_Crab_Main:		dc.w Crab_Main-Crab_Index
0000AF48 0000                       ptr_Crab_Action:	dc.w Crab_Action-Crab_Index
0000AF4A 0000                       ptr_Crab_Delete:	dc.w Crab_Delete-Crab_Index
0000AF4C 0000                       ptr_Crab_BallMain:	dc.w Crab_BallMain-Crab_Index
0000AF4E 0000                       ptr_Crab_BallMove:	dc.w Crab_BallMove-Crab_Index
0000AF50                            
0000AF50 =00000000                  id_Crab_Main:		equ ptr_Crab_Main-Crab_Index	; 0
0000AF50 =00000002                  id_Crab_Action:		equ ptr_Crab_Action-Crab_Index	; 2
0000AF50 =00000004                  id_Crab_Delete:		equ ptr_Crab_Delete-Crab_Index	; 4
0000AF50 =00000006                  id_Crab_BallMain:	equ ptr_Crab_BallMain-Crab_Index	; 6
0000AF50 =00000008                  id_Crab_BallMove:	equ ptr_Crab_BallMove-Crab_Index	; 8
0000AF50                            
0000AF50 =00000030                  crab_timedelay:	equ $30
0000AF50 =00000032                  crab_mode:	equ $32
0000AF50                            ; ===========================================================================
0000AF50                            
0000AF50                            Crab_Main:	; Routine 0
0000AF50 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000AF56 117C 0008 0017             		move.b	#8,obWidth(a0)
0000AF5C 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000AF64 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000AF6A 117C 0004 0001             		move.b	#4,obRender(a0)
0000AF70 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AF76 117C 0006 0020             		move.b	#6,obColType(a0)
0000AF7C 117C 0015 0014             		move.b	#$15,obActWid(a0)
0000AF82 6100 0000                  		bsr.w	ObjectFall
0000AF86 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000AF8C 4A41                       		tst.w	d1
0000AF8E 6A00                       		bpl.s	@floornotfound
0000AF90 D368 000C                  		add.w	d1,obY(a0)
0000AF94 1143 0026                  		move.b	d3,obAngle(a0)
0000AF98 317C 0000 0012             		move.w	#0,obVelY(a0)
0000AF9E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AFA2                            
0000AFA2                            	@floornotfound:
0000AFA2 4E75                       		rts	
0000AFA4                            ; ===========================================================================
0000AFA4                            
0000AFA4                            Crab_Action:	; Routine 2
0000AFA4 7000                       		moveq	#0,d0
0000AFA6 1028 0025                  		move.b	ob2ndRout(a0),d0
0000AFAA 323B 0000                  		move.w	@index(pc,d0.w),d1
0000AFAE 4EBB 1000                  		jsr	@index(pc,d1.w)
0000AFB2 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000AFB8 6100 0000                  		bsr.w	AnimateSprite
0000AFBC 6000 0000                  		bra.w	RememberState
0000AFC0                            ; ===========================================================================
0000AFC0 0000                       @index:		dc.w @waittofire-@index
0000AFC2 0000                       		dc.w @walkonfloor-@index
0000AFC4                            ; ===========================================================================
0000AFC4                            
0000AFC4                            @waittofire:
0000AFC4 5368 0030                  		subq.w	#1,crab_timedelay(a0) ; subtract 1 from time delay
0000AFC8 6A00                       		bpl.s	@dontmove
0000AFCA 4A28 0001                  		tst.b	obRender(a0)
0000AFCE 6A00                       		bpl.s	@movecrab
0000AFD0 0868 0001 0032             		bchg	#1,crab_mode(a0)
0000AFD6 6600                       		bne.s	@fire
0000AFD8                            
0000AFD8                            	@movecrab:
0000AFD8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000AFDC 317C 007F 0030             		move.w	#127,crab_timedelay(a0) ; set time delay to approx 2 seconds
0000AFE2 317C 0080 0010             		move.w	#$80,obVelX(a0)	; move Crabmeat	to the right
0000AFE8 6100 0000                  		bsr.w	Crab_SetAni
0000AFEC 5600                       		addq.b	#3,d0
0000AFEE 1140 001C                  		move.b	d0,obAnim(a0)
0000AFF2 0868 0000 0022             		bchg	#0,obStatus(a0)
0000AFF8 6600                       		bne.s	@noflip
0000AFFA 4468 0010                  		neg.w	obVelX(a0)	; change direction
0000AFFE                            
0000AFFE                            	@dontmove:
0000AFFE                            	@noflip:
0000AFFE 4E75                       		rts	
0000B000                            ; ===========================================================================
0000B000                            
0000B000                            @fire:
0000B000 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B006 117C 0006 001C             		move.b	#6,obAnim(a0)	; use firing animation
0000B00C 6100 0000                  		bsr.w	FindFreeObj
0000B010 6600                       		bne.s	@failleft
0000B012 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load left fireball
0000B016 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B01C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B022 0469 0010 0008             		subi.w	#$10,obX(a1)
0000B028 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B02E 337C FF00 0010             		move.w	#-$100,obVelX(a1)
0000B034                            
0000B034                            	@failleft:
0000B034 6100 0000                  		bsr.w	FindFreeObj
0000B038 6600                       		bne.s	@failright
0000B03A 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load right fireball
0000B03E 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B044 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B04A 0669 0010 0008             		addi.w	#$10,obX(a1)
0000B050 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B056 337C 0100 0010             		move.w	#$100,obVelX(a1)
0000B05C                            
0000B05C                            	@failright:
0000B05C 4E75                       		rts	
0000B05E                            ; ===========================================================================
0000B05E                            
0000B05E                            @walkonfloor:
0000B05E 5368 0030                  		subq.w	#1,crab_timedelay(a0)
0000B062 6B00                       		bmi.s	loc_966E
0000B064 6100 0000                  		bsr.w	SpeedToPos
0000B068 0868 0000 0032             		bchg	#0,crab_mode(a0)
0000B06E 6600                       		bne.s	loc_9654
0000B070 3628 0008                  		move.w	obX(a0),d3
0000B074 0643 0010                  		addi.w	#$10,d3
0000B078 0828 0000 0022             		btst	#0,obStatus(a0)
0000B07E 6700                       		beq.s	loc_9640
0000B080 0443 0020                  		subi.w	#$20,d3
0000B084                            
0000B084                            loc_9640:
0000B084 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000B08A 0C41 FFF8                  		cmpi.w	#-8,d1
0000B08E 6D00                       		blt.s	loc_966E
0000B090 0C41 000C                  		cmpi.w	#$C,d1
0000B094 6C00                       		bge.s	loc_966E
0000B096 4E75                       		rts	
0000B098                            ; ===========================================================================
0000B098                            
0000B098                            loc_9654:
0000B098 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B09E D368 000C                  		add.w	d1,obY(a0)
0000B0A2 1143 0026                  		move.b	d3,obAngle(a0)
0000B0A6 6100 0000                  		bsr.w	Crab_SetAni
0000B0AA 5600                       		addq.b	#3,d0
0000B0AC 1140 001C                  		move.b	d0,obAnim(a0)
0000B0B0 4E75                       		rts	
0000B0B2                            ; ===========================================================================
0000B0B2                            
0000B0B2                            loc_966E:
0000B0B2 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B0B6 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B0BC 317C 0000 0010             		move.w	#0,obVelX(a0)
0000B0C2 6100 0000                  		bsr.w	Crab_SetAni
0000B0C6 1140 001C                  		move.b	d0,obAnim(a0)
0000B0CA 4E75                       		rts	
0000B0CC                            ; ---------------------------------------------------------------------------
0000B0CC                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000B0CC                            ; ---------------------------------------------------------------------------
0000B0CC                            
0000B0CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B0CC                            
0000B0CC                            
0000B0CC                            Crab_SetAni:
0000B0CC 7000                       		moveq	#0,d0
0000B0CE 1628 0026                  		move.b	obAngle(a0),d3
0000B0D2 6B00                       		bmi.s	loc_96A4
0000B0D4 0C03 0006                  		cmpi.b	#6,d3
0000B0D8 6500                       		bcs.s	locret_96A2
0000B0DA 7001                       		moveq	#1,d0
0000B0DC 0828 0000 0022             		btst	#0,obStatus(a0)
0000B0E2 6600                       		bne.s	locret_96A2
0000B0E4 7002                       		moveq	#2,d0
0000B0E6                            
0000B0E6                            locret_96A2:
0000B0E6 4E75                       		rts	
0000B0E8                            ; ===========================================================================
0000B0E8                            
0000B0E8                            loc_96A4:
0000B0E8 0C03 00FA                  		cmpi.b	#-6,d3
0000B0EC 6200                       		bhi.s	locret_96B6
0000B0EE 7002                       		moveq	#2,d0
0000B0F0 0828 0000 0022             		btst	#0,obStatus(a0)
0000B0F6 6600                       		bne.s	locret_96B6
0000B0F8 7001                       		moveq	#1,d0
0000B0FA                            
0000B0FA                            locret_96B6:
0000B0FA 4E75                       		rts	
0000B0FC                            ; End of function Crab_SetAni
0000B0FC                            
0000B0FC                            ; ===========================================================================
0000B0FC                            
0000B0FC                            Crab_Delete:	; Routine 4
0000B0FC 6100 0000                  		bsr.w	DeleteObject
0000B100 4E75                       		rts	
0000B102                            ; ===========================================================================
0000B102                            ; ---------------------------------------------------------------------------
0000B102                            ; Sub-object - missile that the	Crabmeat throws
0000B102                            ; ---------------------------------------------------------------------------
0000B102                            
0000B102                            Crab_BallMain:	; Routine 6
0000B102 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B106 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000B10E 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000B114 117C 0004 0001             		move.b	#4,obRender(a0)
0000B11A 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B120 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B126 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B12C 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000B132 117C 0007 001C             		move.b	#7,obAnim(a0)
0000B138                            
0000B138                            Crab_BallMove:	; Routine 8
0000B138 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B13E 6100 0000                  		bsr.w	AnimateSprite
0000B142 6100 0000                  		bsr.w	ObjectFall
0000B146 6100 0000                  		bsr.w	DisplaySprite
0000B14A 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B14E 0640 00E0                  		addi.w	#$E0,d0
0000B152 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B156 6500                       		bcs.s	@delete		; if yes, branch
0000B158 4E75                       		rts	
0000B15A                            
0000B15A                            	@delete:
0000B15A 6000 0000                  		bra.w	DeleteObject
0000B15A 6000 0000                  		bra.w	DeleteObject
0000B15E                            		include	"_anim\Crabmeat.asm"
0000B15E                            ; ---------------------------------------------------------------------------
0000B15E                            ; Animation script - Crabmeat enemy
0000B15E                            ; ---------------------------------------------------------------------------
0000B15E 0000 0000 0000             Ani_Crab:	dc.w @stand-Ani_Crab, @standslope-Ani_Crab, @standsloperev-Ani_Crab
0000B164 0000 0000 0000             		dc.w @walk-Ani_Crab, @walkslope-Ani_Crab, @walksloperev-Ani_Crab
0000B16A 0000 0000                  		dc.w @firing-Ani_Crab, @ball-Ani_Crab
0000B16E 0F00 FF                    @stand:		dc.b $F, 0, afEnd
0000B172 00                         		even
0000B172 0F02 FF                    @standslope:	dc.b $F, 2, afEnd
0000B176 00                         		even
0000B176 0F22 FF                    @standsloperev:	dc.b $F, $22, afEnd
0000B17A 00                         		even
0000B17A 0F01 2100 FF               @walk:		dc.b $F, 1, $21, 0, afEnd
0000B180 00                         		even
0000B180 0F21 0302 FF               @walkslope:	dc.b $F, $21, 3, 2, afEnd
0000B186 00                         		even
0000B186 0F01 2322 FF               @walksloperev:	dc.b $F, 1, $23, $22, afEnd
0000B18C 00                         		even
0000B18C 0F04 FF                    @firing:	dc.b $F, 4, afEnd
0000B190 00                         		even
0000B190 0105 06FF                  @ball:		dc.b 1,	5, 6, afEnd
0000B194                            		even
0000B194                            		even
0000B194                            Map_Crab:	include	"_maps\Crabmeat.asm"
0000B194                            ; ---------------------------------------------------------------------------
0000B194                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000B194                            ; ---------------------------------------------------------------------------
0000B194                            Map_Crab_internal:
0000B194 0000                       		dc.w @stand-Map_Crab_internal
0000B196 0000                       		dc.w @walk-Map_Crab_internal
0000B198 0000                       		dc.w @slope1-Map_Crab_internal
0000B19A 0000                       		dc.w @slope2-Map_Crab_internal
0000B19C 0000                       		dc.w @firing-Map_Crab_internal
0000B19E 0000                       		dc.w @ball1-Map_Crab_internal
0000B1A0 0000                       		dc.w @ball2-Map_Crab_internal
0000B1A2 04                         @stand:		dc.b 4
0000B1A3 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8	; standing/middle walking frame
0000B1A8 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000B1AD 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000B1B2 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000B1B7 04                         @walk:		dc.b 4
0000B1B8 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8	; walking
0000B1BD F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000B1C2 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000B1C7 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000B1CC 04                         @slope1:	dc.b 4
0000B1CD EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8	; walking on slope
0000B1D2 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000B1D7 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000B1DC FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000B1E1 04                         @slope2:	dc.b 4
0000B1E2 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8	; walking on slope
0000B1E7 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000B1EC FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000B1F1 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000B1F6 06                         @firing:	dc.b 6
0000B1F7 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0 ; firing projectiles
0000B1FC F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000B201 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000B206 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000B20B 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000B210 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000B215 01                         @ball1:		dc.b 1
0000B216 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8 ; projectile
0000B21B 01                         @ball2:		dc.b 1
0000B21C F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8 ; projectile
0000B222 00                         		even
0000B222 00                         		even
0000B222                            		include	"_incObj\06 Mozzietron.asm"
0000B222                            ; ===========================================================================
0000B222                            ; ---------------------------------------------------------------------------
0000B222                            ; Object 06 - Mozzietron enemy	(GHZ)
0000B222                            ; ---------------------------------------------------------------------------
0000B222                            
0000B222                            Mozzietron:					; XREF: Obj_Index
0000B222 7000                       		moveq	#0,d0
0000B224 1028 0024                  		move.b	$24(a0),d0
0000B228 323B 0000                  		move.w	MozIndex(pc,d0.w),d1
0000B22C 4EFB 1000                  		jmp	MozIndex(pc,d1.w)
0000B230                            ; ===========================================================================
0000B230 0000                       MozIndex:	dc.w MozMain-MozIndex
0000B232 0000                       		dc.w MozAction-MozIndex
0000B234 0000                       		dc.w MozDelete-MozIndex
0000B236                            ; ===========================================================================
0000B236                            
0000B236                            MozMain:				; XREF: MozIndex
0000B236 5428 0024                  		addq.b	#2,$24(a0)
0000B23A 217C 0000 0000 0004        		move.l	#Map_Mozzietron,4(a0)
0000B242 317C 0444 0002             		move.w	#$444,2(a0)
0000B248 117C 0004 0001             		move.b	#4,1(a0)
0000B24E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B254 117C 0005 0020             		move.b	#5,$20(a0) ; hit box
0000B25A 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B260                            MozAction:				; XREF: MozIndex
0000B260 7000                       		moveq	#0,d0
0000B262 1028 0025                  		move.b	$25(a0),d0
0000B266 323B 0000                  		move.w	MozIndex2(pc,d0.w),d1
0000B26A 4EBB 1000                  		jsr	MozIndex2(pc,d1.w)
0000B26E 43F9 0000 0000             		lea	(Ani_Mozzietron).l,a1
0000B274 6100 0000                  		bsr.w	AnimateSprite
0000B278 6000 0000                  		bra.w	RememberState
0000B27C                            ; ===========================================================================
0000B27C 0000                       MozIndex2:	dc.w MozMove-MozIndex2
0000B27E 0000                       		dc.w MozChkNrSonic-MozIndex2
0000B280 0000                       		dc.w MozPinned-MozIndex2
0000B282                            ; ===========================================================================
0000B282                            
0000B282                            MozMove:				; XREF: MozIndex2
0000B282 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B286 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000B288 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000B28E 6600                       		bne.s	MozFire	; if yes, branch
0000B290 5428 0025                  		addq.b	#2,$25(a0)
0000B294 317C 0064 0032             		move.w	#100,$32(a0)	; set time delay to just over 2	seconds
0000B29A 317C 0100 0010             		move.w	#$100,$10(a0)	; move Buzz Bomber to the right
0000B2A0 117C 0000 001C             		move.b	#0,$1C(a0)	; use "flying" animation
0000B2A6 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000B2AC 6600                       		bne.s	locret_986C	; if not, branch
0000B2AE 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000B2B2                            
0000B2B2                            locret_986C:
0000B2B2 4E75                       		rts	
0000B2B4                            ; ===========================================================================
0000B2B4                            
0000B2B4                            MozFire:				; XREF: MozMove
0000B2B4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "diving" animation
0000B2BA 6100 0000                  		bsr.w	ObjectFall
0000B2BE 4EB9 0000 0000             		jsr     ObjFloorDist ; check distance between object and floor
0000B2C4 4A41                       		tst.w	d1 ; is floor distance positive? 
0000B2C6 6A00                       		bpl.s   @return ; if yes, branch 
0000B2C8 303C 00B6                  		move.w    #$B6,d0
0000B2CC 4EB9 0000 12A0             		jsr    (PlaySound_Special).l ;    play "spikes moving" sound
0000B2D2 117C 0004 0025             		move.b #4,$25(a0) ; set 2nd state to pinned
0000B2D8 D368 000C                  		add.w	d1,$C(a0) ; snap to the ground
0000B2DC 4268 0012                  		clr.w	$12(a0) ; clear Y Velocity 
0000B2E0 4228 0015                  		clr.b	$15(a0) ; $15(a0) is unused in this object, except this line
0000B2E4                            		@return:
0000B2E4 4E75                       	    		rts
0000B2E6                            		
0000B2E6                            
0000B2E6                            ; ===========================================================================
0000B2E6                            
0000B2E6                            MozPinned:
0000B2E6 4E75                               rts
0000B2E8                                    
0000B2E8                            ; ===========================================================================
0000B2E8                            
0000B2E8                            MozChkDel:				; XREF: Obj55_DropFly
0000B2E8 4A28 0001                  		tst.b	1(a0)
0000B2EC 6A00 0000                  		bpl.w	DeleteObject
0000B2F0 4E75                       		rts	
0000B2F2                            ; ===========================================================================
0000B2F2                            
0000B2F2                            MozChkNrSonic:			; XREF: MozIndex2
0000B2F2                            ;		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B2F2 6B00                       		bmi.s	MozChgDir
0000B2F4 6100 0000                  		bsr.w	SpeedToPos
0000B2F8 4A28 0034                  		tst.b	$34(a0)
0000B2FC 6600                       		bne.s	locret_992A
0000B2FE 3038 D008                  		move.w	($FFFFD008).w,d0
0000B302 9068 0008                  		sub.w	8(a0),d0
0000B306 6A00                       		bpl.s	MozSetNrSonic
0000B308 4440                       		neg.w	d0
0000B30A                            
0000B30A                            MozSetNrSonic:
0000B30A 0C40 0005                  		cmpi.w	#$05,d0		; is Buzz Bomber within	$05 pixels of Sonic?
0000B30E 6400                       		bcc.s	locret_992A	; if not, branch
0000B310 4A28 0001                  		tst.b	1(a0)
0000B314 6A00                       		bpl.s	locret_992A
0000B316 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000B31C 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000B322 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000B328 6000                       		bra.s	MozStop
0000B32A                            ; ===========================================================================
0000B32A                            
0000B32A                            MozChgDir:				; XREF: MozChkNrSonic
0000B32A 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000B330 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000B336 317C 003B 0032             		move.w	#59,$32(a0)
0000B33C                            
0000B33C                            MozStop:				; XREF: MozSetNrSonic
0000B33C 5528 0025                  		subq.b	#2,$25(a0)	; run "MozFire" routine
0000B340 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000B346 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000B34C                            
0000B34C                            locret_992A:
0000B34C 4E75                       		rts	
0000B34E                            ; ===========================================================================
0000B34E                            
0000B34E                            MozDelete:				; XREF: MozIndex
0000B34E 6100 0000                  		bsr.w	DeleteObject
0000B352 4E75                       		rts	
0000B352 4E75                       		rts	
0000B354                            		include	"_incObj\22 Buzz Bomber.asm"
0000B354                            ; ===========================================================================
0000B354                            ; ---------------------------------------------------------------------------
0000B354                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000B354                            ; ---------------------------------------------------------------------------
0000B354                            
0000B354                            BuzzBomber:
0000B354 7000                       		moveq	#0,d0
0000B356 1028 0024                  		move.b	obRoutine(a0),d0
0000B35A 323B 0000                  		move.w	Buzz_Index(pc,d0.w),d1
0000B35E 4EFB 1000                  		jmp	Buzz_Index(pc,d1.w)
0000B362                            ; ===========================================================================
0000B362 0000                       Buzz_Index:	dc.w Buzz_Main-Buzz_Index
0000B364 0000                       		dc.w Buzz_Action-Buzz_Index
0000B366 0000                       		dc.w Buzz_Delete-Buzz_Index
0000B368                            
0000B368 =00000032                  buzz_timedelay:	equ $32
0000B368 =00000034                  buzz_buzzstatus:	equ $34
0000B368 =0000003C                  buzz_parent:	equ $3C
0000B368                            ; ===========================================================================
0000B368                            
0000B368                            Buzz_Main:	; Routine 0
0000B368 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B36C 217C 0000 0000 0004        		move.l	#Map_Buzz,obMap(a0)
0000B374 317C 0444 0002             		move.w	#$444,obGfx(a0)
0000B37A 117C 0004 0001             		move.b	#4,obRender(a0)
0000B380 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B386 117C 0008 0020             		move.b	#8,obColType(a0)
0000B38C 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B392                            
0000B392                            Buzz_Action:	; Routine 2
0000B392 7000                       		moveq	#0,d0
0000B394 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B398 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B39C 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B3A0 43F9 0000 0000             		lea	(Ani_Buzz).l,a1
0000B3A6 6100 0000                  		bsr.w	AnimateSprite
0000B3AA 6000 0000                  		bra.w	RememberState
0000B3AE                            ; ===========================================================================
0000B3AE 0000                       @index:		dc.w @move-@index
0000B3B0 0000                       		dc.w @chknearsonic-@index
0000B3B2                            ; ===========================================================================
0000B3B2                            
0000B3B2                            @move:
0000B3B2 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B3B6 6A00                       		bpl.s	@noflip		; if time remains, branch
0000B3B8 0828 0001 0034             		btst	#1,buzz_buzzstatus(a0) ; is Buzz Bomber near Sonic?
0000B3BE 6600                       		bne.s	@fire		; if yes, branch
0000B3C0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B3C4 317C 007F 0032             		move.w	#127,buzz_timedelay(a0) ; set time delay to just over 2 seconds
0000B3CA 317C 0400 0010             		move.w	#$400,obVelX(a0) ; move Buzz Bomber to the right
0000B3D0 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "flying" animation
0000B3D6 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B3DC 6600                       		bne.s	@noflip		; if not, branch
0000B3DE 4468 0010                  		neg.w	obVelX(a0)	; move Buzz Bomber to the left
0000B3E2                            
0000B3E2                            	@noflip:
0000B3E2 4E75                       		rts	
0000B3E4                            ; ===========================================================================
0000B3E4                            
0000B3E4                            	@fire:
0000B3E4 6100 0000                  		bsr.w	FindFreeObj
0000B3E8 6600                       		bne.s	@fail
0000B3EA 12BC 0000                  		move.b	#id_Missile,0(a1) ; load missile object
0000B3EE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B3F4 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B3FA 0669 001C 000C             		addi.w	#$1C,obY(a1)
0000B400 337C 0200 0012             		move.w	#$200,obVelY(a1) ; move missile downwards
0000B406 337C 0200 0010             		move.w	#$200,obVelX(a1) ; move missile to the right
0000B40C 303C 0018                  		move.w	#$18,d0
0000B410 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B416 6600                       		bne.s	@noflip2	; if not, branch
0000B418 4440                       		neg.w	d0
0000B41A 4469 0010                  		neg.w	obVelX(a1)	; move missile to the left
0000B41E                            
0000B41E                            	@noflip2:
0000B41E D169 0008                  		add.w	d0,obX(a1)
0000B422 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000B428 337C 000E 0032             		move.w	#$E,buzz_timedelay(a1)
0000B42E 2348 003C                  		move.l	a0,buzz_parent(a1)
0000B432 117C 0001 0034             		move.b	#1,buzz_buzzstatus(a0) ; set to "already fired" to prevent refiring
0000B438 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B43E 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "firing" animation
0000B444                            
0000B444                            	@fail:
0000B444 4E75                       		rts	
0000B446                            ; ===========================================================================
0000B446                            
0000B446                            @chknearsonic:
0000B446 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B44A 6B00                       		bmi.s	@chgdirection
0000B44C 6100 0000                  		bsr.w	SpeedToPos
0000B450 4A28 0034                  		tst.b	buzz_buzzstatus(a0)
0000B454 6600                       		bne.s	@keepgoing
0000B456 3038 D008                  		move.w	(v_player+obX).w,d0
0000B45A 9068 0008                  		sub.w	obX(a0),d0
0000B45E 6A00                       		bpl.s	@isleft
0000B460 4440                       		neg.w	d0
0000B462                            
0000B462                            	@isleft:
0000B462 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000B466 6400                       		bcc.s	@keepgoing	; if not, branch
0000B468 4A28 0001                  		tst.b	obRender(a0)
0000B46C 6A00                       		bpl.s	@keepgoing
0000B46E 117C 0002 0034             		move.b	#2,buzz_buzzstatus(a0) ; set Buzz Bomber to "near Sonic"
0000B474 317C 001D 0032             		move.w	#29,buzz_timedelay(a0) ; set time delay to half a second
0000B47A 6000                       		bra.s	@stop
0000B47C                            ; ===========================================================================
0000B47C                            
0000B47C                            	@chgdirection:
0000B47C 117C 0000 0034             		move.b	#0,buzz_buzzstatus(a0) ; set Buzz Bomber to "normal"
0000B482 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction
0000B488 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B48E                            
0000B48E                            	@stop:
0000B48E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B492 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Buzz Bomber moving
0000B498 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "hovering" animation
0000B49E                            
0000B49E                            @keepgoing:
0000B49E 4E75                       		rts	
0000B4A0                            ; ===========================================================================
0000B4A0                            
0000B4A0                            Buzz_Delete:	; Routine 4
0000B4A0 6100 0000                  		bsr.w	DeleteObject
0000B4A4 4E75                       		rts	
0000B4A4 4E75                       		rts	
0000B4A6                            		include	"_incObj\23 Buzz Bomber Missile.asm"
0000B4A6                            ; ---------------------------------------------------------------------------
0000B4A6                            ; Object 23 - missile that Buzz	Bomber throws
0000B4A6                            ; ---------------------------------------------------------------------------
0000B4A6                            
0000B4A6                            Missile:
0000B4A6 7000                       		moveq	#0,d0
0000B4A8 1028 0024                  		move.b	obRoutine(a0),d0
0000B4AC 323B 0000                  		move.w	Msl_Index(pc,d0.w),d1
0000B4B0 4EFB 1000                  		jmp	Msl_Index(pc,d1.w)
0000B4B4                            ; ===========================================================================
0000B4B4 0000                       Msl_Index:	dc.w Msl_Main-Msl_Index
0000B4B6 0000                       		dc.w Msl_Animate-Msl_Index
0000B4B8 0000                       		dc.w Msl_FromBuzz-Msl_Index
0000B4BA 0000                       		dc.w Msl_Delete-Msl_Index
0000B4BC 0000                       		dc.w Msl_FromNewt-Msl_Index
0000B4BE                            
0000B4BE =0000003C                  msl_parent:	equ $3C
0000B4BE                            ; ===========================================================================
0000B4BE                            
0000B4BE                            Msl_Main:	; Routine 0
0000B4BE 5368 0032                  		subq.w	#1,$32(a0)
0000B4C2 6A00                       		bpl.s	Msl_ChkCancel
0000B4C4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B4C8 217C 0000 0000 0004        		move.l	#Map_Missile,obMap(a0)
0000B4D0 317C 2444 0002             		move.w	#$2444,obGfx(a0)
0000B4D6 117C 0004 0001             		move.b	#4,obRender(a0)
0000B4DC 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B4E2 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B4E8 0228 0003 0022             		andi.b	#3,obStatus(a0)
0000B4EE 4A28 0028                  		tst.b	obSubtype(a0)	; was object created by	a Newtron?
0000B4F2 6700                       		beq.s	Msl_Animate	; if not, branch
0000B4F4                            
0000B4F4 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Msl_FromNewt" routine
0000B4FA 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B500 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B506 6000                       		bra.s	Msl_Animate2
0000B508                            ; ===========================================================================
0000B508                            
0000B508                            Msl_Animate:	; Routine 2
0000B508 6100                       		bsr.s	Msl_ChkCancel
0000B50A 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B510 6100 0000                  		bsr.w	AnimateSprite
0000B514 6000 0000                  		bra.w	DisplaySprite
0000B518                            
0000B518                            ; ---------------------------------------------------------------------------
0000B518                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000B518                            ; destroyed, and if it has, then cancel	the missile
0000B518                            ; ---------------------------------------------------------------------------
0000B518                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B518                            
0000B518                            
0000B518                            Msl_ChkCancel:
0000B518 2268 003C                  		movea.l	msl_parent(a0),a1
0000B51C 0C11 0000                  		cmpi.b	#id_ExplosionItem,0(a1) ; has Buzz Bomber been destroyed?
0000B520 6700                       		beq.s	Msl_Delete	; if yes, branch
0000B522 4E75                       		rts	
0000B524                            ; End of function Msl_ChkCancel
0000B524                            
0000B524                            ; ===========================================================================
0000B524                            
0000B524                            Msl_FromBuzz:	; Routine 4
0000B524 0828 0007 0022             		btst	#7,obStatus(a0)
0000B52A 6600                       		bne.s	@explode
0000B52C 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B532 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B538 6100 0000                  		bsr.w	SpeedToPos
0000B53C 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B542 6100 0000                  		bsr.w	AnimateSprite
0000B546 6100 0000                  		bsr.w	DisplaySprite
0000B54A 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B54E 0640 00E0                  		addi.w	#$E0,d0
0000B552 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B556 6500                       		bcs.s	Msl_Delete	; if yes, branch
0000B558 4E75                       		rts	
0000B55A                            ; ===========================================================================
0000B55A                            
0000B55A                            	@explode:
0000B55A 10BC 0000                  		move.b	#id_MissileDissolve,0(a0) ; change object to an explosion (Obj24)
0000B55E 117C 0000 0024             		move.b	#0,obRoutine(a0)
0000B564 6000 F1D8                  		bra.w	MissileDissolve
0000B568                            ; ===========================================================================
0000B568                            
0000B568                            Msl_Delete:	; Routine 6
0000B568 6100 0000                  		bsr.w	DeleteObject
0000B56C 4E75                       		rts	
0000B56E                            ; ===========================================================================
0000B56E                            
0000B56E                            Msl_FromNewt:	; Routine 8
0000B56E 4A28 0001                  		tst.b	obRender(a0)
0000B572 6AF4                       		bpl.s	Msl_Delete
0000B574 6100 0000                  		bsr.w	SpeedToPos
0000B578                            
0000B578                            Msl_Animate2:
0000B578 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B57E 6100 0000                  		bsr.w	AnimateSprite
0000B582 6100 0000                  		bsr.w	DisplaySprite
0000B586 4E75                       		rts	
0000B586 4E75                       		rts	
0000B588                            		include	"_anim\Mozzietron.asm"
0000B588                            ; ---------------------------------------------------------------------------
0000B588                            ; Animation script - Buzz Bomber enemy
0000B588                            ; ---------------------------------------------------------------------------
0000B588 0000                       Ani_Mozzietron:	dc.w byte_9A1E-Ani_Mozzietron;0
0000B58A 0000                       		dc.w byte_9A22-Ani_Mozzietron;1
0000B58C 0000                       		dc.w byte_9A26-Ani_Mozzietron;2
0000B58E 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000B592 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000B596 0502 0304 05FE 01          byte_9A26:	dc.b 5, 2, 3, 4, 5, $FE, 1
0000B59E 00                         		even
0000B59E 00                         		even
0000B59E                            		include	"_anim\Buzz Bomber.asm"
0000B59E                            ; ---------------------------------------------------------------------------
0000B59E                            ; Animation script - Buzz Bomber enemy
0000B59E                            ; ---------------------------------------------------------------------------
0000B59E 0000                       Ani_Buzz:	dc.w @fly1-Ani_Buzz
0000B5A0 0000                       		dc.w @fly2-Ani_Buzz
0000B5A2 0000                       		dc.w @fires-Ani_Buzz
0000B5A4 0100 01FF                  @fly1:		dc.b 1,	0, 1, afEnd
0000B5A8 0102 03FF                  @fly2:		dc.b 1,	2, 3, afEnd
0000B5AC 0104 05FF                  @fires:		dc.b 1,	4, 5, afEnd
0000B5B0                            		even
0000B5B0                            		even
0000B5B0                            		include	"_anim\Buzz Bomber Missile.asm"
0000B5B0                            ; ---------------------------------------------------------------------------
0000B5B0                            ; Animation script - missile that Buzz Bomber throws
0000B5B0                            ; ---------------------------------------------------------------------------
0000B5B0 0000                       Ani_Missile:	dc.w @flare-Ani_Missile
0000B5B2 0000                       		dc.w @missile-Ani_Missile
0000B5B4 0700 01FC                  @flare:		dc.b 7,	0, 1, afRoutine
0000B5B8 0102 03FF                  @missile:	dc.b 1,	2, 3, afEnd
0000B5BC                            		even
0000B5BC                            		even
0000B5BC                            Map_Mozzietron:	include	"_maps\Mozzietron.asm"
0000B5BC                            ; --------------------------------------------------------------------------------
0000B5BC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B5BC                            ; --------------------------------------------------------------------------------
0000B5BC                            
0000B5BC                            SME_qvHIs:	
0000B5BC 0000 0000                  		dc.w SME_qvHIs_C-SME_qvHIs, SME_qvHIs_17-SME_qvHIs	
0000B5C0 0000 0000                  		dc.w SME_qvHIs_1D-SME_qvHIs, SME_qvHIs_28-SME_qvHIs	
0000B5C4 0000 0000                  		dc.w SME_qvHIs_38-SME_qvHIs, SME_qvHIs_4D-SME_qvHIs	
0000B5C8 02                         SME_qvHIs_C:	dc.b 2	
0000B5C9 FD0C 2000 F0               		dc.b $FD, $C, $20, 0, $F0	
0000B5CE ED09 2004 F8               		dc.b $ED, 9, $20, 4, $F8	
0000B5D3 01                         SME_qvHIs_17:	dc.b 1	
0000B5D4 F80D 200A F0               		dc.b $F8, $D, $20, $A, $F0	
0000B5D9 02                         SME_qvHIs_1D:	dc.b 2	
0000B5DA E90A 2012 F8               		dc.b $E9, $A, $20, $12, $F8	
0000B5DF F901 201B F0               		dc.b $F9, 1, $20, $1B, $F0	
0000B5E4 03                         SME_qvHIs_28:	dc.b 3	
0000B5E5 DF07 2025 FB               		dc.b $DF, 7, $20, $25, $FB	
0000B5EA E700 2030 0B               		dc.b $E7, 0, $20, $30, $B	
0000B5EF FF00 002D FB               		dc.b $FF, 0, 0, $2D, $FB	
0000B5F4 04                         SME_qvHIs_38:	dc.b 4	
0000B5F5 E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B5FA F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B5FF F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B604 F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B609 04                         SME_qvHIs_4D:	dc.b 4	
0000B60A E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B60F F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B614 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B619 F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B61E                            		even
0000B61E                            		even
0000B61E                            Map_Buzz:	include	"_maps\Buzz Bomber.asm"
0000B61E                            ; --------------------------------------------------------------------------------
0000B61E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B61E                            ; --------------------------------------------------------------------------------
0000B61E                            
0000B61E                            SME_yccqJ:	
0000B61E 0000 0000                  		dc.w SME_yccqJ_C-SME_yccqJ, SME_yccqJ_2B-SME_yccqJ	
0000B622 0000 0000                  		dc.w SME_yccqJ_4A-SME_yccqJ, SME_yccqJ_69-SME_yccqJ	
0000B626 0000 0000                  		dc.w SME_yccqJ_88-SME_yccqJ, SME_yccqJ_AC-SME_yccqJ	
0000B62A 06                         SME_yccqJ_C:	dc.b 6	
0000B62B F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B630 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B635 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B63A 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B63F EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B644 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B649 06                         SME_yccqJ_2B:	dc.b 6	
0000B64A F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B64F F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B654 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B659 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B65E F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B663 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B668 06                         SME_yccqJ_4A:	dc.b 6	
0000B669 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B66E F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B673 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B678 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B67D EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B682 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B687 06                         SME_yccqJ_69:	dc.b 6	
0000B688 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B68D F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B692 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B697 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B69C F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B6A1 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B6A6 07                         SME_yccqJ_88:	dc.b 7	
0000B6A7 F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B6AC 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B6B1 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B6B6 EE04 201D 04               		dc.b $EE, 4, $20, $1D, 4	
0000B6BB 0C00 200E FC               		dc.b $C, 0, $20, $E, $FC	
0000B6C0 0C00 200D F4               		dc.b $C, 0, $20, $D, $F4	
0000B6C5 EE08 201A EC               		dc.b $EE, 8, $20, $1A, $EC	
0000B6CA 04                         SME_yccqJ_AC:	dc.b 4	
0000B6CB F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B6D0 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B6D5 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B6DA 0C04 200D F4               		dc.b $C, 4, $20, $D, $F4	
0000B6E0 00                         		even
0000B6E0 00                         		even
0000B6E0                            Map_Missile:	include	"_maps\Buzz Bomber Missile.asm"
0000B6E0                            ; ---------------------------------------------------------------------------
0000B6E0                            ; Sprite mappings - missile that Buzz Bomber throws
0000B6E0                            ; ---------------------------------------------------------------------------
0000B6E0                            Map_Missile_internal:
0000B6E0 0000                       		dc.w @Flare1-Map_Missile_internal
0000B6E2 0000                       		dc.w @Flare2-Map_Missile_internal
0000B6E4 0000                       		dc.w @Ball1-Map_Missile_internal
0000B6E6 0000                       		dc.w @Ball2-Map_Missile_internal
0000B6E8 01                         @Flare1:	dc.b 1
0000B6E9 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8 ; buzz bomber firing flare
0000B6EE 01                         @Flare2:	dc.b 1
0000B6EF F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B6F4 01                         @Ball1:		dc.b 1
0000B6F5 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8 ; missile itself
0000B6FA 01                         @Ball2:		dc.b 1
0000B6FB F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B700                            		even
0000B700                            		even
0000B700                            
0000B700                            		include	"_incObj\25 & 37 Rings.asm"
0000B700                            ; ---------------------------------------------------------------------------
0000B700                            ; Object 25 - rings
0000B700                            ; ---------------------------------------------------------------------------
0000B700                            
0000B700                            Rings:
0000B700 7000                       		moveq	#0,d0
0000B702 1028 0024                  		move.b	obRoutine(a0),d0
0000B706 323B 0000                  		move.w	Ring_Index(pc,d0.w),d1
0000B70A 4EFB 1000                  		jmp	Ring_Index(pc,d1.w)
0000B70E                            ; ===========================================================================
0000B70E                            Ring_Index:
0000B70E 0000                       ptr_Ring_Main:		dc.w Ring_Main-Ring_Index
0000B710 0000                       ptr_Ring_Animate:	dc.w Ring_Animate-Ring_Index
0000B712 0000                       ptr_Ring_Collect:	dc.w Ring_Collect-Ring_Index
0000B714 0000                       ptr_Ring_Sparkle:	dc.w Ring_Sparkle-Ring_Index
0000B716 0000                       ptr_Ring_Delete:	dc.w Ring_Delete-Ring_Index
0000B718 0000                       ptr_Ring_Attract:	dc.w Ring_Attract-Ring_Index
0000B71A 0000                       ptr_Ring_Collect1:	dc.w Ring_Collect-Ring_Index
0000B71C 0000                       ptr_Ring_Sparkle1:	dc.w Ring_Sparkle-Ring_Index
0000B71E 0000                       ptr_Ring_Delete1:	dc.w Ring_Delete-Ring_Index
0000B720                            
0000B720 =00000000                  id_Ring_Main:			equ ptr_Ring_Main-Ring_Index	; 0
0000B720 =00000002                  id_Ring_Animate:		equ ptr_Ring_Animate-Ring_Index	; 2
0000B720 =00000004                  id_Ring_Collect:		equ ptr_Ring_Collect-Ring_Index	; 4
0000B720 =00000006                  id_Ring_Sparkle:		equ ptr_Ring_Sparkle-Ring_Index	; 6
0000B720 =00000008                  id_Ring_Delete:			equ ptr_Ring_Delete-Ring_Index	; 8
0000B720 =0000000A                  id_Ring_Attract:		equ ptr_Ring_Attract-Ring_Index	; $A
0000B720 =00000004                  id_Ring_Collect1:		equ ptr_Ring_Collect-Ring_Index	; $C
0000B720 =00000006                  id_Ring_Sparkle1:		equ ptr_Ring_Sparkle-Ring_Index	; $E
0000B720 =00000008                  id_Ring_Delete1:		equ ptr_Ring_Delete-Ring_Index	; $10
0000B720                            ; ---------------------------------------------------------------------------
0000B720                            ; Distances between rings (format: horizontal, vertical)
0000B720                            ; ---------------------------------------------------------------------------
0000B720 1000                       Ring_PosData:	dc.b $10, 0		; horizontal tight
0000B722 1800                       		dc.b $18, 0		; horizontal normal
0000B724 2000                       		dc.b $20, 0		; horizontal wide
0000B726 0010                       		dc.b 0,	$10		; vertical tight
0000B728 0018                       		dc.b 0,	$18		; vertical normal
0000B72A 0020                       		dc.b 0,	$20		; vertical wide
0000B72C 1010                       		dc.b $10, $10		; diagonal
0000B72E 1818                       		dc.b $18, $18
0000B730 2020                       		dc.b $20, $20
0000B732 F010                       		dc.b $F0, $10
0000B734 E818                       		dc.b $E8, $18
0000B736 E020                       		dc.b $E0, $20
0000B738 1008                       		dc.b $10, 8
0000B73A 1810                       		dc.b $18, $10
0000B73C F008                       		dc.b $F0, 8
0000B73E E810                       		dc.b $E8, $10
0000B740                            ; ===========================================================================
0000B740                            
0000B740                            Ring_Main:	; Routine 0
0000B740 45F8 FC00                  		lea	(v_objstate).w,a2
0000B744 7000                       		moveq	#0,d0
0000B746 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B74A 45F2 0002                  		lea	2(a2,d0.w),a2
0000B74E 1812                       		move.b	(a2),d4
0000B750 1228 0028                  		move.b	obSubtype(a0),d1
0000B754 1001                       		move.b	d1,d0
0000B756 0241 0007                  		andi.w	#7,d1
0000B75A 0C41 0007                  		cmpi.w	#7,d1
0000B75E 6600                       		bne.s	loc_9B80
0000B760 7206                       		moveq	#6,d1
0000B762                            
0000B762                            	loc_9B80:
0000B762 4841                       		swap	d1
0000B764 323C 0000                  		move.w	#0,d1
0000B768 E808                       		lsr.b	#4,d0
0000B76A D040                       		add.w	d0,d0
0000B76C 1A3B 00B2                  		move.b	Ring_PosData(pc,d0.w),d5 ; load ring spacing data
0000B770 4885                       		ext.w	d5
0000B772 1C3B 00AD                  		move.b	Ring_PosData+1(pc,d0.w),d6
0000B776 4886                       		ext.w	d6
0000B778 2248                       		movea.l	a0,a1
0000B77A 3428 0008                  		move.w	obX(a0),d2
0000B77E 3628 000C                  		move.w	obY(a0),d3
0000B782 E20C                       		lsr.b	#1,d4
0000B784 6500                       		bcs.s	loc_9C02
0000B786 0892 0007                  		bclr	#7,(a2)
0000B78A 6000                       		bra.s	loc_9BBA
0000B78C                            ; ===========================================================================
0000B78C                            
0000B78C                            Ring_MakeRings:
0000B78C 4841                       		swap	d1
0000B78E E20C                       		lsr.b	#1,d4
0000B790 6500                       		bcs.s	loc_9C02
0000B792 0892 0007                  		bclr	#7,(a2)
0000B796 6100 0000                  		bsr.w	FindFreeObj
0000B79A 6600                       		bne.s	loc_9C0E
0000B79C                            
0000B79C                            loc_9BBA:
0000B79C 12BC 0000                  		move.b	#id_Rings,0(a1)	; load ring object
0000B7A0 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B7A4 3342 0008                  		move.w	d2,obX(a1)	; set x-axis position based on d2
0000B7A8 3368 0008 0032             		move.w	obX(a0),$32(a1)
0000B7AE 3343 000C                  		move.w	d3,obY(a1)	; set y-axis position based on d3
0000B7B2 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B7BA 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B7C0 137C 0004 0001             		move.b	#4,obRender(a1)
0000B7C6 337C 0100 0018             		move.w	#$100,obPriority(a1)
0000B7CC 137C 0047 0020             		move.b	#$47,obColType(a1)
0000B7D2 137C 0008 0014             		move.b	#8,obActWid(a1)
0000B7D8 1368 0023 0023             		move.b	obRespawnNo(a0),obRespawnNo(a1)
0000B7DE 1341 0034                  		move.b	d1,$34(a1)
0000B7E2                            
0000B7E2                            loc_9C02:
0000B7E2 5241                       		addq.w	#1,d1
0000B7E4 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000B7E6 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000B7E8 4841                       		swap	d1
0000B7EA 51C9 FFA0                  		dbf	d1,Ring_MakeRings ; repeat for	number of rings
0000B7EE                            
0000B7EE                            loc_9C0E:
0000B7EE 0812 0000                  		btst	#0,(a2)
0000B7F2 6600 0000                  		bne.w	DeleteObject
0000B7F6                            
0000B7F6                            Ring_Animate:	; Routine 2
0000B7F6 4A38 FE2C                  		tst.b	(v_shield).w
0000B7FA 6700                       		beq.s	@skip
0000B7FC 4A28 0001                  		tst.b	obRender(a0)
0000B800 6A00                       		bpl.s	@skip
0000B802                            		
0000B802 43F8 D000                  		lea (v_player).w,a1
0000B806                            		
0000B806 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000B80A 9068 0008                  		sub.w	obX(a0),d0
0000B80E 6A00                       		bpl.s	@a1
0000B810 4440                       		neg.w	d0
0000B812                            		
0000B812                            	@a1:
0000B812 0C40 0040                  		cmpi.w	#$40,d0
0000B816 6200                       		bhi.s	@skip
0000B818                            		
0000B818 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000B81C 9068 000C                  		sub.w	obY(a0),d0
0000B820 6A00                       		bpl.s	@a2
0000B822 4440                       		neg.w	d0
0000B824                            		
0000B824                            	@a2:
0000B824 0C40 0040                  		cmpi.w	#$40,d0
0000B828 6200                       		bhi.s	@skip
0000B82A                            		
0000B82A 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000B830 45F8 FC00                  		lea	(v_objstate).w,a2
0000B834 7000                       		moveq	#0,d0
0000B836 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B83A 1228 0034                  		move.b	$34(a0),d1
0000B83E 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B842                            		
0000B842                            	@skip:
0000B842 1178 FEC5 001A             		move.b	(v_ani2_frame).w,obFrame(a0) ; set frame
0000B848 6100 0000                  		bsr.w	DisplaySprite
0000B868 4E75                       		rts	
0000B86A                            ; ===========================================================================
0000B86A                            
0000B86A                            Ring_Collect:	; Routine 4
0000B86A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B86E 117C 0000 0020             		move.b	#0,obColType(a0)
0000B874 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000B87A 6100 0000                  		bsr.w	CollectRing
0000B87E 45F8 FC00                  		lea	(v_objstate).w,a2
0000B882 7000                       		moveq	#0,d0
0000B884 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B888 1228 0034                  		move.b	$34(a0),d1
0000B88C 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B890                            
0000B890                            Ring_Sparkle:	; Routine 6
0000B890 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000B896 6100 0000                  		bsr.w	AnimateSprite
0000B89A 6000 0000                  		bra.w	DisplaySprite
0000B89E                            ; ===========================================================================
0000B89E                            
0000B89E                            Ring_Delete:	; Routine 8
0000B89E 6000 0000                  		bra.w	DeleteObject
0000B8A2                            
0000B8A2                            Ring_Attract:	; Routine $A
0000B8A2 4A38 FE2C                  		tst.b	(v_shield).w
0000B8A6 6600                       		bne.s	@skip
0000B8A8 10BC 0000                  		move.b	#id_RingLoss,0(a0)
0000B8AC 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000B8B2 11FC 00FF FEC6             		move.b	#-1,(v_ani3_time).w
0000B8B8 6000                       		bra.s	@display
0000B8BA                            		
0000B8BA                            	@skip:
0000B8BA 323C 0030                  		move.w	#$30,d1	; horizontal
0000B8BE 3038 D008                  		move.w	(v_player+obX).w,d0
0000B8C2 B068 0008                  		cmp.w	obX(a0),d0
0000B8C6 6400                       		bcc.s	@a1
0000B8C8 4441                       		neg.w	d1
0000B8CA 4A68 0010                  		tst.w	obVelX(a0)
0000B8CE 6B00                       		bmi.s	@a2
0000B8D0 D241                       		add.w	d1,d1
0000B8D2 D241                       		add.w	d1,d1
0000B8D4 6000                       		bra.s	@a2
0000B8D6                            
0000B8D6                            	@a1:
0000B8D6 4A68 0010                  		tst.w	obVelX(a0)
0000B8DA 6A00                       		bpl.s	@a2
0000B8DC D241                       		add.w	d1,d1
0000B8DE D241                       		add.w	d1,d1
0000B8E0                            
0000B8E0                            	@a2:
0000B8E0 D368 0010                  		add.w	d1,obVelX(a0)
0000B8E4 323C 0030                  		move.w	#$30,d1	; vertical
0000B8E8 3038 D00C                  		move.w	(v_player+obY).w,d0
0000B8EC B068 000C                  		cmp.w	obY(a0),d0
0000B8F0 6400                       		bcc.s	@a3
0000B8F2 4441                       		neg.w	d1
0000B8F4 4A68 0012                  		tst.w	obVelY(a0)
0000B8F8 6B00                       		bmi.s	@a4
0000B8FA D241                       		add.w	d1,d1
0000B8FC D241                       		add.w	d1,d1
0000B8FE 6000                       		bra.s	@a4
0000B900                            
0000B900                            	@a3:
0000B900 4A68 0012                  		tst.w	obVelY(a0)
0000B904 6A00                       		bpl.s	@a4
0000B906 D241                       		add.w	d1,d1
0000B908 D241                       		add.w	d1,d1
0000B90A                            
0000B90A                            	@a4:
0000B90A D368 0012                  		add.w	d1,obVelY(a0)
0000B90E 6100 0000                  		bsr.w	SpeedToPos
0000B912                            		
0000B912                            	@display:
0000B912 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0) ; set frame
0000B918 6000 0000                  		bra.w	DisplaySprite
0000B91C                            
0000B91C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B91C                            
0000B91C                            
0000B91C                            CollectRing:
0000B91C 5278 FE20                  		addq.w	#1,(v_rings).w	; add 1 to rings
0000B920 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the rings counter
0000B926 303C 0000                  		move.w	#sfx_Ring,d0	; play ring sound
0000B92A 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; do you have < 100 rings?
0000B930 6500                       		bcs.s	@playsnd	; if yes, branch
0000B932 08F8 0001 FE1B             		bset	#1,(v_lifecount).w ; update lives counter
0000B938 6700                       		beq.s	@got100
0000B93A 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; do you have < 200 rings?
0000B940 6500                       		bcs.s	@playsnd	; if yes, branch
0000B942 08F8 0002 FE1B             		bset	#2,(v_lifecount).w ; update lives counter
0000B948 6600                       		bne.s	@playsnd
0000B94A                            
0000B94A                            	@got100:
0000B94A 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000B94E 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000B952 303C 0000                  		move.w	#bgm_ExtraLife,d0 ; play extra life music
0000B956                            		
0000B956                            
0000B956                            	@playsnd:
0000B956 4EF9 0000 12A0             		jmp	(PlaySound_Special).l
0000B95C                            ; End of function CollectRing
0000B95C                            
0000B95C                            ; ===========================================================================
0000B95C                            ; ---------------------------------------------------------------------------
0000B95C                            ; Object 37 - rings flying out of Sonic	when he's hit
0000B95C                            ; ---------------------------------------------------------------------------
0000B95C                            
0000B95C                            RingLoss:
0000B95C 7000                       		moveq	#0,d0
0000B95E 1028 0024                  		move.b	obRoutine(a0),d0
0000B962 323B 0000                  		move.w	RLoss_Index(pc,d0.w),d1
0000B966 4EFB 1000                  		jmp	RLoss_Index(pc,d1.w)
0000B96A                            ; ===========================================================================
0000B96A 0000                       RLoss_Index:	dc.w RLoss_Count-RLoss_Index
0000B96C 0000                       		dc.w RLoss_Bounce-RLoss_Index
0000B96E 0000                       		dc.w RLoss_Collect-RLoss_Index
0000B970 0000                       		dc.w RLoss_Sparkle-RLoss_Index
0000B972 0000                       		dc.w RLoss_Delete-RLoss_Index
0000B974                            ; ===========================================================================
0000B974                            
0000B974                            RLoss_Count:	; Routine 0
0000B974 2248                       		movea.l	a0,a1
0000B976 7A00                       		moveq	#0,d5
0000B978 3A38 FE20                  		move.w	(v_rings).w,d5	; check number of rings you have
0000B97C 47F9 0000 0000                     lea     SpillRingData,a3        ; load the address of the array in a3
0000B982 7018                               moveq   #24,d0                  ; lose a max of 24 rings
0000B984 45F8 D000                          lea     (v_player).w,a2    ; a2=character
0000B988 082A 0006 0022                     btst    #6,obStatus(a2)           ; is Sonic underwater?
0000B98E 6700                               beq.s   @cont                       ; if not, branch
0000B990 47F9 0000 0000                     lea    SpillRingData_Water,a3        ; load the UNDERWATER address of the array in a3
0000B996 7010                               moveq   #16,d0                   ; lose a max of 16 rings underwater
0000B998                            @cont:
0000B998 BA40                               cmp.w   d0,d5
0000B99A 6500                               bcs.s   @belowmax
0000B99C 3A00                               move.w  d0,d5
0000B99E                            
0000B99E                            @belowmax:
0000B99E 5345                               subq.w  #1,d5
0000B9A0 383C 0288                          move.w  #$288,d4
0000B9A4 6000                       		bra.s	@makerings
0000B9A6                            ; ===========================================================================
0000B9A6                            
0000B9A6                            	@loop:
0000B9A6 6100 0000                  		bsr.w	FindFreeObj
0000B9AA 6600 0000                  		bne.w	@resetcounter
0000B9AE                            
0000B9AE                            @makerings:
0000B9AE 12BC 0000                  		move.b	#id_RingLoss,0(a1) ; load bouncing ring object
0000B9B2 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B9B6 137C 0008 0016             		move.b	#8,obHeight(a1)
0000B9BC 137C 0008 0017             		move.b	#8,obWidth(a1)
0000B9C2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B9C8 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B9CE 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B9D6 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B9DC 137C 0004 0001             		move.b	#4,obRender(a1)
0000B9E2 137C 0047 0020             		move.b	#$47,obColType(a1)
0000B9E8 137C 0008 0014             		move.b	#8,obActWid(a1)
0000B9EE 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000B9F2 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000B9F4 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000B9F8 BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000B9FC 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000B9FE E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000BA00 E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000BA02                            @skiphalvingvel:
0000BA02 335B 0010                  		move.w  (a3)+,obVelX(a1)         ; move the data contained in the array to the x velocity and increment the address in a3
0000BA06 335B 0012                  		move.w  (a3)+,obVelY(a1)         ; move the data contained in the array to the y velocity and increment the address in a3	
0000BA0A 51CD FF9A                  		dbf	d5,@loop	; repeat for number of rings (max 31)
0000BA0E                            
0000BA0E                            @resetcounter:
0000BA0E 31FC 0000 FE20             		move.w	#0,(v_rings).w	; reset number of rings to zero
0000BA14 11FC 0080 FE1D             		move.b	#$80,(f_ringcount).w ; update ring counter
0000BA1A 11FC 0000 FE1B             		move.b	#0,(v_lifecount).w
0000BA20 70FF                               moveq   #-1,d0                  ; Move #-1 to d0
0000BA22 1140 001F                          move.b  d0,obDelayAni(a0)       ; Move d0 to new timer
0000BA26 11C0 FEC6                          move.b  d0,(v_ani3_time).w      ; Move d0 to old timer (for animated purposes)
0000BA34                            
0000BA34                            RLoss_Bounce:	; Routine 2
0000BA34 1178 FEC7 001A             		move.b	(v_ani3_frame).w,obFrame(a0)
0000BA3A 6100 0000                  		bsr.w	SpeedToPos
0000BA3E 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000BA44 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000BA48 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000BA4A 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000BA4E BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000BA52 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000BA54 0468 000E 0012             		subi.w	#$E,obVelY(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000BA5A                            	@skipbounceslow:
0000BA5A 6B00                       		bmi.s	@chkdel
0000BA5C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000BA60 D007                       		add.b	d7,d0
0000BA62 0200 0003                  		andi.b	#3,d0
0000BA66 6600                       		bne.s	@chkdel
0000BA68 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000BA6E 4A41                       		tst.w	d1
0000BA70 6A00                       		bpl.s	@chkdel
0000BA72 D368 000C                  		add.w	d1,obY(a0)
0000BA76 3028 0012                  		move.w	obVelY(a0),d0
0000BA7A E440                       		asr.w	#2,d0
0000BA7C 9168 0012                  		sub.w	d0,obVelY(a0)
0000BA80 4468 0012                  		neg.w	obVelY(a0)
0000BA84                            
0000BA84                            	@chkdel:
0000BA84 5328 001F                  		subq.b  #1,obDelayAni(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000BA88 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000BA8C 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000BA90 0640 00E0                  		addi.w	#$E0,d0
0000BA94 B068 000C                  		cmp.w	obY(a0),d0	   ; has object moved below level boundary?
0000BA98 6500 0000                  		bcs.w	RLoss_Delete	   ; if yes, branch
0000BA9C 4A38 FE2C                  		tst.b	(v_shield).w
0000BAA0 6700                       		beq.s	@skip
0000BAA2 4A28 0001                  		tst.b	obRender(a0)
0000BAA6 6A00                       		bpl.s	@skip
0000BAA8                            		
0000BAA8 43F8 D000                  		lea (v_player).w,a1
0000BAAC                            		
0000BAAC 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000BAB0 9068 0008                  		sub.w	obX(a0),d0
0000BAB4 6A00                       		bpl.s	@a1
0000BAB6 4440                       		neg.w	d0
0000BAB8                            		
0000BAB8                            	@a1:
0000BAB8 0C40 00A0                  		cmpi.w	#$A0,d0
0000BABC 6200                       		bhi.s	@skip
0000BABE                            		
0000BABE 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000BAC2 9068 000C                  		sub.w	obY(a0),d0
0000BAC6 6A00                       		bpl.s	@a2
0000BAC8 4440                       		neg.w	d0
0000BACA                            		
0000BACA                            	@a2:
0000BACA 0C40 00A0                  		cmpi.w	#$A0,d0
0000BACE 6200                       		bhi.s	@skip
0000BAD0                            		
0000BAD0 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000BAD6 10BC 0000                  		move.b	#id_Rings,0(a0)
0000BADA                            		
0000BADA                            	@skip:		
0000BADA 43F8 AD80                          lea     v_spritequeue+$180,a1
0000BADE D2FC 0080                          adda.w  #$80,a1
0000BAE2 0C51 007E                          cmpi.w  #$7E,(a1)
0000BAE6 6400                               bcc.s   @cont
0000BAE8 5451                               addq.w  #2,(a1)
0000BAEA D2D1                               adda.w  (a1),a1
0000BAEC 3288                               move.w  a0,(a1)
0000BAEE                            		
0000BAEE                            	@cont:
0000BAEE 4E75                               rts		
0000BAF0                            ; ===========================================================================
0000BAF0                            
0000BAF0                            RLoss_Collect:	; Routine 4
0000BAF0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BAF4 117C 0000 0020             		move.b	#0,obColType(a0)
0000BAFA 6100 FE20                  		bsr.w	CollectRing
0000BAFE                            
0000BAFE                            RLoss_Sparkle:	; Routine 6
0000BAFE 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000BB04 6100 0000                  		bsr.w	AnimateSprite
0000BB08 43F8 AD80                  		lea     v_spritequeue+$180,a1
0000BB0C 0C51 007E                          cmpi.w  #$7E,(a1)
0000BB10 6400                               bcc.s   @cont
0000BB12 5451                               addq.w  #2,(a1)
0000BB14 D2D1                               adda.w  (a1),a1
0000BB16 3288                               move.w  a0,(a1)
0000BB18                            			
0000BB18                            	@cont:
0000BB18 4E75                               rts
0000BB1A                            ; ===========================================================================
0000BB1A                            
0000BB1A                            RLoss_Delete:	; Routine 8
0000BB1A 6000 0000                  		bra.w	DeleteObject
0000BB1E                            
0000BB1E                            ; ----------------------------------------------------------------------------------------------
0000BB1E                            ; Ring Spawn Array 
0000BB1E                            ; ----------------------------------------------------------------------------------------------
0000BB1E                            
0000BB1E FF3C FC14 00C4 FC14 FDC8+  SpillRingData:  dc.w    $FF3C,$FC14, $00C4,$FC14, $FDC8,$FCB0, $0238,$FCB0 ; 4
0000BB2E FCB0 FDC8 0350 FDC8 FC14+                  dc.w    $FCB0,$FDC8, $0350,$FDC8, $FC14,$FF3C, $03EC,$FF3C ; 8
0000BB3E FC14 00C4 03EC 00C4 FCB0+                  dc.w    $FC14,$00C4, $03EC,$00C4, $FCB0,$0238, $0350,$0238 ; 12
0000BB4E FDC8 0350 0238 0350 FF3C+                  dc.w    $FDC8,$0350, $0238,$0350, $FF3C,$03EC, $00C4,$03EC ; 16
0000BB5E FF9E FE0A 0062 FE0A FEE4+                  dc.w    $FF9E,$FE0A, $0062,$FE0A, $FEE4,$FE58, $011C,$FE58 ; 20
0000BB6E FE58 FEE4 01A8 FEE4 FE0A+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE0A,$FF9E, $01F6,$FF9E ; 24
0000BB7E FE0A 0062 01F6 0062 FE58+                  dc.w    $FE0A,$0062, $01F6,$0062, $FE58,$011C, $01A8,$011C ; 28
0000BB8E FEE4 01A8 011C 01A8 FF9E+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9E,$0156, $0062,$0156 ; 32
0000BB9E                                            even
0000BB9E                            ; ===========================================================================
0000BB9E                            ; -------------------------------------------------------------------------------------
0000BB9E                            ; Ring Spawn Array - Underwater - same thing as I said above. Edit at your own risk!!!
0000BB9E                            ; -------------------------------------------------------------------------------------
0000BB9E                            
0000BB9E                            SpillRingData_Water:
0000BB9E FF9C FE08 0064 FE08 FEE4+  				dc.w    $FF9C,$FE08, $0064,$FE08, $FEE4,$FE58, $011C,$FE58 ; 4
0000BBAE FE58 FEE4 01A8 FEE4 FE08+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE08,$FF9C, $01F8,$FF9C ; 8
0000BBBE FE08 0060 01F8 0060 FE58+                  dc.w    $FE08,$0060, $01F8,$0060, $FE58,$011C, $01A8,$011C ; 12
0000BBCE FEE4 01A8 011C 01A8 FF9C+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9C,$01F4, $0064,$01F4 ; 16
0000BBDE FFCE FF04 0032 FF04 FF72+                  dc.w    $FFCE,$FF04, $0032,$FF04, $FF72,$FF2C, $008E,$FF2C ; 20
0000BBEE FF2C FF72 00D4 FF72 FF04+                  dc.w    $FF2C,$FF72, $00D4,$FF72, $FF04,$FFCE, $00FC,$FFCE ; 24
0000BBFE FF04 0030 00FC 0030 FF2C+                  dc.w    $FF04,$0030, $00FC,$0030, $FF2C,$008E, $00D4,$008E ; 28
0000BC0E FF72 00D4 008E 00D4 FFCE+                  dc.w    $FF72,$00D4, $008E,$00D4, $FFCE,$00FA, $0032,$00FA ; 32
0000BC1E                                            even
0000BC1E                            ; ===========================================================================				
0000BC1E                            ; ===========================================================================				
0000BC1E                            		include	"_incObj\4B Giant Ring.asm"
0000BC1E                            ; ---------------------------------------------------------------------------
0000BC1E                            ; Object 4B - giant ring for entry to special stage
0000BC1E                            ; ---------------------------------------------------------------------------
0000BC1E                            
0000BC1E                            GiantRing:
0000BC1E 7000                       		moveq	#0,d0
0000BC20 1028 0024                  		move.b	obRoutine(a0),d0
0000BC24 323B 0000                  		move.w	GRing_Index(pc,d0.w),d1
0000BC28 4EFB 1000                  		jmp	GRing_Index(pc,d1.w)
0000BC2C                            ; ===========================================================================
0000BC2C 0000                       GRing_Index:	dc.w GRing_Main-GRing_Index
0000BC2E 0000                       		dc.w GRing_Animate-GRing_Index
0000BC30 0000                       		dc.w GRing_Collect-GRing_Index
0000BC32 0000                       		dc.w GRing_Delete-GRing_Index
0000BC34                            ; ===========================================================================
0000BC34                            
0000BC34                            GRing_Main:    ; Routine 0
0000BC34 217C 0000 0000 0004        		move.l	#Map_GRing,obMap(a0)
0000BC3C 317C 2400 0002             		move.w	#$2400,obGfx(a0)
0000BC42 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BC48 117C 0040 0014             		move.b	#$40,obActWid(a0)
0000BC4E 4A28 0001                  		tst.b	obRender(a0)
0000BC52 6A00                       		bpl.s	GRing_Animate
0000BC54 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have 6 emeralds?
0000BC5A 6700 0000                  		beq.w	GRing_Delete    ; if yes, branch
0000BC5E 0C38 0002 F5C3             		cmpi.b	#2,(f_emeraldm).w    ;TIS Did you  hit the S-Monitor?
0000BC64 6700                       		beq.s	GRing_Okay    ; if yes, branch
0000BC66                            
0000BC66 4E75                       		rts    
0000BC68                            ; ===========================================================================
0000BC68                            
0000BC68                            GRing_Okay:
0000BC68 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BC6C 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000BC72 117C 0052 0020             		move.b	#$52,obColType(a0)
0000BC78 31FC 0C40 F7BE             		move.w	#$C40,(v_gfxbigring).w	; Signal that Art_BigRing should be loaded ($C40 is the size of Art_BigRing)
0000BC7E                            
0000BC7E                            GRing_Animate:	; Routine 2
0000BC7E 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0)
0000BCA2 6000 0000                  		bra.w	DisplaySprite
0000BCA6                            ; ===========================================================================
0000BCA6                            
0000BCA6                            GRing_Collect:	; Routine 4
0000BCA6 5528 0024                  		subq.b	#2,obRoutine(a0)
0000BCAA 117C 0000 0020             		move.b	#0,obColType(a0)
0000BCB0 6100 0000                  		bsr.w	FindFreeObj
0000BCB4 6600 0000                  		bne.w	GRing_PlaySnd
0000BCB8 12BC 0000                  		move.b	#id_RingFlash,0(a1) ; load giant ring flash object
0000BCBC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BCC2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BCC8 2348 003C                  		move.l	a0,$3C(a1)
0000BCCC 3038 D008                  		move.w	(v_player+obX).w,d0
0000BCD0 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic come from the left?
0000BCD4 6500                       		bcs.s	GRing_PlaySnd	; if yes, branch
0000BCD6 08E9 0000 0001             		bset	#0,obRender(a1)	; reverse flash	object	
0000BCDC 11FC 0001 FE57             		move.b  #1,(v_emeralds).w
0000BCE2 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000BCE8                            		
0000BCE8                            GRing_PlaySnd:
0000BCF2 608A                       		bra.s	GRing_Animate
0000BCF4                            ; ===========================================================================
0000BCF4                            
0000BCF4                            GRing_Delete:	; Routine 6
0000BCF4 6000 0000                  		bra.w	DeleteObject
0000BCF4 6000 0000                  		bra.w	DeleteObject
0000BCF8                            		include	"_incObj\7C Ring Flash.asm"
0000BCF8                            ; ---------------------------------------------------------------------------
0000BCF8                            ; Object 7C - flash effect when	you collect the	giant ring
0000BCF8                            ; ---------------------------------------------------------------------------
0000BCF8                            
0000BCF8                            RingFlash:
0000BCF8 7000                       		moveq	#0,d0
0000BCFA 1028 0024                  		move.b	obRoutine(a0),d0
0000BCFE 323B 0000                  		move.w	Flash_Index(pc,d0.w),d1
0000BD02 4EFB 1000                  		jmp	Flash_Index(pc,d1.w)
0000BD06                            ; ===========================================================================
0000BD06 0000                       Flash_Index:	dc.w Flash_Main-Flash_Index
0000BD08 0000                       		dc.w Flash_ChkDel-Flash_Index
0000BD0A 0000                       		dc.w Flash_Delete-Flash_Index
0000BD0C                            ; ===========================================================================
0000BD0C                            
0000BD0C                            Flash_Main:	; Routine 0
0000BD0C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BD10 217C 0000 0000 0004        		move.l	#Map_Flash,obMap(a0)
0000BD18 317C 2462 0002             		move.w	#$2462,obGfx(a0)
0000BD1E 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BD24 317C 0000 0018             		move.w	#0,obPriority(a0)
0000BD2A 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000BD30 117C 00FF 001A             		move.b	#$FF,obFrame(a0)
0000BD36                            
0000BD36                            Flash_ChkDel:	; Routine 2
0000BD36 6100                       		bsr.s	Flash_Collect
0000BD56 6000 0000                  		bra.w	DisplaySprite
0000BD5A                            
0000BD5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BD5A                            
0000BD5A                            
0000BD5A                            Flash_Collect:
0000BD5A 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000BD5E 6A00                       		bpl.s	locret_9F76
0000BD60 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000BD66 5228 001A                  		addq.b	#1,obFrame(a0)
0000BD6A 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)	; has animation	finished?
0000BD70 6400                       		bcc.s	Flash_End	; if yes, branch
0000BD72 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is 3rd frame displayed?
0000BD78 6600                       		bne.s	locret_9F76	; if not, branch
0000BD7A 2268 003C                  		movea.l	$3C(a0),a1	; get parent object address
0000BD7E 137C 0006 0024             		move.b	#6,obRoutine(a1) ; delete parent object
0000BD84 11FC 0000 D01C             		move.b	#id_Null,(v_player+obAnim).w ; make Sonic invisible
0000BD8A 11FC 0001 F7CD             		move.b	#1,(f_bigring).w ; stop	Sonic getting bonuses
0000BD90 4238 FE2D                  		clr.b	(v_invinc).w	; remove invincibility
0000BD94 4238 FE2C                  		clr.b	(v_shield).w	; remove shield
0000BD98                            
0000BD98                            locret_9F76:
0000BD98 4E75                       		rts	
0000BD9A                            ; ===========================================================================
0000BD9A                            
0000BD9A                            Flash_End:
0000BD9A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BD9E 31FC 0000 D000             		move.w	#0,(v_player).w ; remove Sonic object
0000BDA4 588F                       		addq.l	#4,sp
0000BDA6 4E75                       		rts	
0000BDA8                            ; End of function Flash_Collect
0000BDA8                            
0000BDA8                            ; ===========================================================================
0000BDA8                            
0000BDA8                            Flash_Delete:	; Routine 4
0000BDA8 6000 0000                  		bra.w	DeleteObject
0000BDA8 6000 0000                  		bra.w	DeleteObject
0000BDAC                            
0000BDAC                            		include	"_anim\Rings.asm"
0000BDAC                            ; ---------------------------------------------------------------------------
0000BDAC                            ; Animation script - ring
0000BDAC                            ; ---------------------------------------------------------------------------
0000BDAC 0000                       Ani_Ring:	dc.w @ring-Ani_Ring
0000BDAE 0706 0708 09FC             @ring:		dc.b 7,	6, 7, 8, 9, afRoutine
0000BDB4                            		even
0000BDB4                            		even
0000BDB4                            Map_Ring:		include	"_maps\Rings (JP1).asm"
0000BDB4                            ; --------------------------------------------------------------------------------
0000BDB4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BDB4                            ; --------------------------------------------------------------------------------
0000BDB4                            
0000BDB4                            SME_aSMQh:	
0000BDB4 0000 0000                  		dc.w SME_aSMQh_14-SME_aSMQh, SME_aSMQh_1A-SME_aSMQh	
0000BDB8 0000 0000                  		dc.w SME_aSMQh_20-SME_aSMQh, SME_aSMQh_26-SME_aSMQh	
0000BDBC 0000 0000                  		dc.w SME_aSMQh_2C-SME_aSMQh, SME_aSMQh_32-SME_aSMQh	
0000BDC0 0000 0000                  		dc.w SME_aSMQh_38-SME_aSMQh, SME_aSMQh_3E-SME_aSMQh	
0000BDC4 0000 0000                  		dc.w SME_aSMQh_44-SME_aSMQh, SME_aSMQh_4A-SME_aSMQh	
0000BDC8 01                         SME_aSMQh_14:	dc.b 1	
0000BDC9 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
0000BDCE 01                         SME_aSMQh_1A:	dc.b 1	
0000BDCF F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0000BDD4 01                         SME_aSMQh_20:	dc.b 1	
0000BDD5 F805 000A F8               		dc.b $F8, 5, 0, $A, $F8	
0000BDDA 01                         SME_aSMQh_26:	dc.b 1	
0000BDDB F801 0008 FC               		dc.b $F8, 1, 0, 8, $FC	
0000BDE0 01                         SME_aSMQh_2C:	dc.b 1	
0000BDE1 F805 080A F8               		dc.b $F8, 5, 8, $A, $F8	
0000BDE6 01                         SME_aSMQh_32:	dc.b 1	
0000BDE7 F805 0804 F8               		dc.b $F8, 5, 8, 4, $F8	
0000BDEC 01                         SME_aSMQh_38:	dc.b 1	
0000BDED F805 0010 F8               		dc.b $F8, 5, 0, $10, $F8	
0000BDF2 01                         SME_aSMQh_3E:	dc.b 1	
0000BDF3 F805 1810 F8               		dc.b $F8, 5, $18, $10, $F8	
0000BDF8 01                         SME_aSMQh_44:	dc.b 1	
0000BDF9 F805 0810 F8               		dc.b $F8, 5, 8, $10, $F8	
0000BDFE 01                         SME_aSMQh_4A:	dc.b 1	
0000BDFF F805 1010 F8               		dc.b $F8, 5, $10, $10, $F8	
0000BE04                            		even
0000BE04                            		even
0000BE04                            Map_GRing:	include	"_maps\Giant Ring.asm"
0000BE04                            ; ---------------------------------------------------------------------------
0000BE04                            ; Sprite mappings - giant ring
0000BE04                            ; ---------------------------------------------------------------------------
0000BE04                            Map_GRing_internal:
0000BE04 0000                       		dc.w byte_9FDA-Map_GRing_internal
0000BE06 0000                       		dc.w byte_A00D-Map_GRing_internal
0000BE08 0000                       		dc.w byte_A036-Map_GRing_internal
0000BE0A 0000                       		dc.w byte_A04B-Map_GRing_internal
0000BE0C 0A                         byte_9FDA:	dc.b $A
0000BE0D E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8	; ring front
0000BE12 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000BE17 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000BE1C E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000BE21 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000BE26 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000BE2B 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000BE30 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000BE35 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000BE3A 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000BE3F 08                         byte_A00D:	dc.b 8
0000BE40 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0 ; ring angle
0000BE45 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000BE4A E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000BE4F F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000BE54 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000BE59 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000BE5E 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000BE63 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000BE68 04                         byte_A036:	dc.b 4
0000BE69 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4 ; ring perpendicular
0000BE6E E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000BE73 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000BE78 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000BE7D 08                         byte_A04B:	dc.b 8
0000BE7E E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0 ; ring angle
0000BE83 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000BE88 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000BE8D F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000BE92 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000BE97 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000BE9C 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000BEA1 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000BEA6                            		even
0000BEA6                            		even
0000BEA6                            Map_Flash:	include	"_maps\Ring Flash.asm"
0000BEA6                            ; ---------------------------------------------------------------------------
0000BEA6                            ; Sprite mappings - flash effect when you collect the giant ring
0000BEA6                            ; ---------------------------------------------------------------------------
0000BEA6                            Map_Flash_internal:
0000BEA6 0000                       		dc.w byte_A084-Map_Flash_internal
0000BEA8 0000                       		dc.w byte_A08F-Map_Flash_internal
0000BEAA 0000                       		dc.w byte_A0A4-Map_Flash_internal
0000BEAC 0000                       		dc.w byte_A0B9-Map_Flash_internal
0000BEAE 0000                       		dc.w byte_A0CE-Map_Flash_internal
0000BEB0 0000                       		dc.w byte_A0E3-Map_Flash_internal
0000BEB2 0000                       		dc.w byte_A0F8-Map_Flash_internal
0000BEB4 0000                       		dc.w byte_A103-Map_Flash_internal
0000BEB6 02                         byte_A084:	dc.b 2
0000BEB7 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000BEBC 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000BEC1 04                         byte_A08F:	dc.b 4
0000BEC2 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000BEC7 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000BECC 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000BED1 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000BED6 04                         byte_A0A4:	dc.b 4
0000BED7 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000BEDC E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000BEE1 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000BEE6 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000BEEB 04                         byte_A0B9:	dc.b 4
0000BEEC E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000BEF1 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000BEF6 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000BEFB 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000BF00 04                         byte_A0CE:	dc.b 4
0000BF01 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000BF06 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000BF0B 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000BF10 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000BF15 04                         byte_A0E3:	dc.b 4
0000BF16 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000BF1B E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000BF20 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000BF25 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000BF2A 02                         byte_A0F8:	dc.b 2
0000BF2B E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000BF30 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000BF35 04                         byte_A103:	dc.b 4
0000BF36 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000BF3B E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000BF40 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000BF45 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000BF4A                            		even
0000BF4A                            		even
0000BF4A                            		include	"_incObj\26 Monitor.asm"
0000BF4A                            ; ---------------------------------------------------------------------------
0000BF4A                            ; Object 26 - monitors
0000BF4A                            ; ---------------------------------------------------------------------------
0000BF4A                            
0000BF4A                            Monitor:
0000BF4A 7000                       		moveq	#0,d0
0000BF4C 1028 0024                  		move.b	obRoutine(a0),d0
0000BF50 323B 0000                  		move.w	Mon_Index(pc,d0.w),d1
0000BF54 4EFB 1000                  		jmp	Mon_Index(pc,d1.w)
0000BF58                            ; ===========================================================================
0000BF58 0000                       Mon_Index:	dc.w Mon_Main-Mon_Index
0000BF5A 0000                       		dc.w Mon_Solid-Mon_Index
0000BF5C 0000                       		dc.w Mon_BreakOpen-Mon_Index
0000BF5E 0000                       		dc.w Mon_Animate-Mon_Index
0000BF60 0000                       		dc.w Mon_Display-Mon_Index
0000BF62                            ; ===========================================================================
0000BF62                            
0000BF62                            Mon_Main:	; Routine 0
0000BF62 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BF66 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000BF6C 117C 000E 0017             		move.b	#$E,obWidth(a0)
0000BF72 217C 0000 0000 0004        		move.l	#Map_Monitor,obMap(a0)
0000BF7A 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000BF80 117C 0004 0001             		move.b	#4,obRender(a0)
0000BF86 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000BF8C 117C 000F 0014             		move.b	#$F,obActWid(a0)
0000BF92 45F8 FC00                  		lea	(v_objstate).w,a2
0000BF96 7000                       		moveq	#0,d0
0000BF98 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BF9C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000BFA2 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000BFA8 6700                       		beq.s	@notbroken	; if not, branch
0000BFAA 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Mon_Display" routine
0000BFB0 117C 000B 001A             		move.b	#$B,obFrame(a0)	; use broken monitor frame
0000BFB6 4E75                       		rts	
0000BFB8                            ; ===========================================================================
0000BFB8                            
0000BFB8                            	@notbroken:
0000BFB8 117C 0046 0020             		move.b	#$46,obColType(a0)
0000BFBE 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0)
0000BFC4                            
0000BFC4                            Mon_Solid:	; Routine 2
0000BFC4 1028 0025                  		move.b	ob2ndRout(a0),d0 ; is monitor set to fall?
0000BFC8 6700                       		beq.s	@normal		; if not, branch
0000BFCA 5500                       		subq.b	#2,d0
0000BFCC 6600                       		bne.s	@fall
0000BFCE                            
0000BFCE                            		; 2nd Routine 2
0000BFCE 7200                       		moveq	#0,d1
0000BFD0 1228 0014                  		move.b	obActWid(a0),d1
0000BFD4 0641 000B                  		addi.w	#$B,d1
0000BFD8 6100 CDBE                  		bsr.w	ExitPlatform
0000BFDC 0829 0003 0022             		btst	#3,obStatus(a1) ; is Sonic on top of the monitor?
0000BFE2 6600 0000                  		bne.w	@ontop		; if yes, branch
0000BFE6 4228 0025                  		clr.b	ob2ndRout(a0)
0000BFEA 6000 0000                  		bra.w	Mon_Animate
0000BFEE                            ; ===========================================================================
0000BFEE                            
0000BFEE                            	@ontop:
0000BFEE 363C 0010                  		move.w	#$10,d3
0000BFF2 3428 0008                  		move.w	obX(a0),d2
0000BFF6 6100 D2FE                  		bsr.w	MvSonicOnPtfm
0000BFFA 6000 0000                  		bra.w	Mon_Animate
0000BFFE                            ; ===========================================================================
0000BFFE                            
0000BFFE                            @fall:		; 2nd Routine 4
0000BFFE 6100 0000                  		bsr.w	ObjectFall
0000C002 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000C008 4A41                       		tst.w	d1
0000C00A 6A00 0000                  		bpl.w	Mon_Animate
0000C00E D368 000C                  		add.w	d1,obY(a0)
0000C012 4268 0012                  		clr.w	obVelY(a0)
0000C016 4228 0025                  		clr.b	ob2ndRout(a0)
0000C01A 6000 0000                  		bra.w	Mon_Animate
0000C01E                            ; ===========================================================================
0000C01E                            
0000C01E                            @normal:	; 2nd Routine 0
0000C01E 323C 001A                  		move.w	#$1A,d1
0000C022 343C 000F                  		move.w	#$F,d2
0000C026 6100 0000                  		bsr.w	Mon_SolidSides
0000C02A 6700 0000                  		beq.w	loc_A25C
0000C02E 4A69 0012                  		tst.w	obVelY(a1)
0000C032 6B00                       		bmi.s	loc_A20A
0000C034 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000C03A 6700                       		beq.s	loc_A25C	; if yes, branch
0000C03C 0C29 0000 001C             		cmpi.b	#id_SpinDash,obAnim(a1) ; is Sonic Spindashing?
0000C042 6700                       		beq.s	loc_A25C	; if yes, branch
0000C044 0C29 0000 001C             		cmpi.b	#id_Peelout,obAnim(a1) ; is Sonic Spindashing?
0000C04A 6700                       		beq.s	loc_A25C	; if yes, branch
0000C04C                            
0000C04C                            loc_A20A:
0000C04C 4A41                       		tst.w	d1
0000C04E 6A00                       		bpl.s	loc_A220
0000C050 9769 000C                  		sub.w	d3,obY(a1)
0000C054 6100 CC30                  		bsr.w	loc_74AE
0000C058 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0000C05E 6000 0000                  		bra.w	Mon_Animate
0000C062                            ; ===========================================================================
0000C062                            
0000C062                            loc_A220:
0000C062 4A40                       		tst.w	d0
0000C064 6700 0000                  		beq.w	loc_A246
0000C068 6B00                       		bmi.s	loc_A230
0000C06A 4A69 0010                  		tst.w	obVelX(a1)
0000C06E 6B00                       		bmi.s	loc_A246
0000C070 6000                       		bra.s	loc_A236
0000C072                            ; ===========================================================================
0000C072                            
0000C072                            loc_A230:
0000C072 4A69 0010                  		tst.w	obVelX(a1)
0000C076 6A00                       		bpl.s	loc_A246
0000C078                            
0000C078                            loc_A236:
0000C078 9169 0008                  		sub.w	d0,obX(a1)
0000C07C 337C 0000 0020             		move.w	#0,obInertia(a1)
0000C082 337C 0000 0010             		move.w	#0,obVelX(a1)
0000C088                            
0000C088                            loc_A246:
0000C088 0829 0001 0022             		btst	#1,obStatus(a1)
0000C08E 6600                       		bne.s	loc_A26A
0000C090 08E9 0005 0022             		bset	#5,obStatus(a1)
0000C096 08E8 0005 0022             		bset	#5,obStatus(a0)
0000C09C 6000                       		bra.s	Mon_Animate
0000C09E                            ; ===========================================================================
0000C09E                            
0000C09E                            loc_A25C:
0000C09E 0828 0005 0022             		btst	#5,obStatus(a0)
0000C0A4 6700                       		beq.s	Mon_Animate
0000C0A6 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
0000C0AC 6700                       		beq.s	loc_A26A	; if so, branch
0000C0AE 337C 0001 001C             		move.w	#1,obAnim(a1)	; clear obAnim and set obNextAni to 1, putting Sonic in his walking animation
0000C0B4                            
0000C0B4                            loc_A26A:
0000C0B4 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000C0BA 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000C0C0                            
0000C0C0                            Mon_Animate:	; Routine 6
0000C0C0 43F9 0000 0000             		lea	(Ani_Monitor).l,a1
0000C0C6 6100 0000                  		bsr.w	AnimateSprite
0000C0CA                            
0000C0CA                            Mon_Display:	; Routine 8
0000C0CA 6100 0000                  		bsr.w	DisplaySprite
0000C0EC 4E75                       		rts	
0000C0EE                            ; ===========================================================================
0000C0EE                            
0000C0EE                            Mon_BreakOpen:	; Routine 4
0000C0EE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C0F2 117C 0000 0020             		move.b	#0,obColType(a0)
0000C0F8 6100 0000                  		bsr.w	FindFreeObj
0000C0FC 6600                       		bne.s	Mon_Explode
0000C0FE 12BC 0000                  		move.b	#id_PowerUp,0(a1) ; load monitor contents object
0000C102 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C108 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C10E 1368 001C 001C             		move.b	obAnim(a0),obAnim(a1)
0000C114                            
0000C114                            Mon_Explode:
0000C114 6100 0000                  		bsr.w	FindFreeObj
0000C118 6600                       		bne.s	@fail
0000C11A 12BC 0000                  		move.b	#id_ExplosionItem,0(a1) ; load explosion object
0000C11E 5429 0024                  		addq.b	#2,obRoutine(a1) ; don't create an animal
0000C122 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C128 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C12E                            
0000C12E                            	@fail:
0000C12E 45F8 FC00                  		lea	(v_objstate).w,a2
0000C132 7000                       		moveq	#0,d0
0000C134 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C138 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C13E 117C 0009 001C             		move.b	#9,obAnim(a0)	; set monitor type to broken
0000C144 6000 0000                  		bra.w	DisplaySprite
0000C144 6000 0000                  		bra.w	DisplaySprite
0000C148                            		include	"_incObj\2E Monitor Content Power-Up.asm"
0000C148                            ; ---------------------------------------------------------------------------
0000C148                            ; Object 2E - contents of monitors
0000C148                            ; ---------------------------------------------------------------------------
0000C148                            
0000C148                            PowerUp:
0000C148 7000                       		moveq	#0,d0
0000C14A 1028 0024                  		move.b	obRoutine(a0),d0
0000C14E 323B 0000                  		move.w	Pow_Index(pc,d0.w),d1
0000C152 4EBB 1000                  		jsr	Pow_Index(pc,d1.w)
0000C156 6000 0000                  		bra.w	DisplaySprite
0000C15A                            ; ===========================================================================
0000C15A 0000                       Pow_Index:	dc.w Pow_Main-Pow_Index
0000C15C 0000                       		dc.w Pow_Move-Pow_Index
0000C15E 0000                       		dc.w Pow_Delete-Pow_Index
0000C160                            ; ===========================================================================
0000C160                            
0000C160                            Pow_Main:	; Routine 0
0000C160 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C164 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C16A 117C 0024 0001             		move.b	#$24,obRender(a0)
0000C170 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C176 117C 0008 0014             		move.b	#8,obActWid(a0)
0000C17C 317C FD00 0012             		move.w	#-$300,obVelY(a0)
0000C182 7000                       		moveq	#0,d0
0000C184 1028 001C                  		move.b	obAnim(a0),d0	; get subtype
0000C188 5400                       		addq.b	#2,d0
0000C18A 1140 001A                  		move.b	d0,obFrame(a0)	; use correct frame
0000C18E 227C 0000 0000             		movea.l	#Map_Monitor,a1
0000C194 D000                       		add.b	d0,d0
0000C196 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000C19A 5249                       		addq.w	#1,a1
0000C19C 2149 0004                  		move.l	a1,obMap(a0)
0000C1A0                            
0000C1A0                            Pow_Move:	; Routine 2
0000C1A0 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000C1A4 6A00 0000                  		bpl.w	Pow_Checks	; if not, branch
0000C1A8 6100 0000                  		bsr.w	SpeedToPos
0000C1AC 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000C1B2 4E75                       		rts	
0000C1B4                            ; ===========================================================================
0000C1B4                            
0000C1B4                            Pow_Checks:
0000C1B4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C1B8 317C 001D 001E             		move.w	#29,obTimeFrame(a0) ; display icon for half a second
0000C1BE                            
0000C1BE                            Pow_ChkEggman:
0000C1BE 1028 001C                  		move.b	obAnim(a0),d0
0000C1C2 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000C1C6 6600                       		bne.s	Pow_ChkSonic
0000C1C8                            		
0000C1C8 4EF9 0000 0000             		jmp	Spik_Hurt
0000C1CE                            		
0000C1CE 4E75                       		rts
0000C1D0                            ; ===========================================================================
0000C1D0                            
0000C1D0                            Pow_ChkSonic:
0000C1D0 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000C1D4 6600                       		bne.s	Pow_ChkShoes
0000C1D6                            
0000C1D6                            	ExtraLife:
0000C1D6 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000C1DA 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000C1E8                            
0000C1E8                            ; ===========================================================================
0000C1E8                            
0000C1E8                            Pow_ChkShoes:
0000C1E8 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000C1EC 6600                       		bne.s	Pow_ChkShield
0000C1EE 0C38 0001 FE19             		cmpi.b #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0000C1F4 6700 0000                  		beq 	Pow_NoMus
0000C1F8 11FC 0001 FE2E             		move.b	#1,(v_shoes).w	; speed up the BG music
0000C1FE 31FC 04B0 D034             		move.w	#$4B0,(v_player+$34).w	; time limit for the power-up
0000C204 31FC 0C00 F760             		move.w	#$C00,(v_sonspeedmax).w ; change Sonic's top speed
0000C20A 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w	; change Sonic's acceleration
0000C210 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w	; change Sonic's deceleration
0000C216 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C21A 6600                       		bne.s	Pow_NoMus	; if yes, branch
0000C21C 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C222 6300                       			bls.s	Pow_NoMus
0000C22E                            ; ===========================================================================
0000C22E                            
0000C22E                            Pow_NoMus:
0000C22E 4E75                       		rts	
0000C230                            ; ===========================================================================
0000C230                            
0000C230                            Pow_ChkShield:
0000C230 0C00 0004                          cmpi.b    #4,d0        ; does monitor contain a shield?
0000C234 6600                               bne.s    Pow_ChkInvinc
0000C236                            
0000C236 11FC 0001 FE2C                     move.b    #1,(v_shield).w    ; give Sonic a shield
0000C23C 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove red shield
0000C242 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C248 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C24E 11FC 0000 D180                     move.b    #id_ShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C254 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C258 303C 0000                          move.w    #sfx_Shield,d0
0000C25C 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000C262                            ; ===========================================================================
0000C262                            
0000C262                            Pow_ChkInvinc:
0000C262 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000C266 6600                       		bne.s	Pow_ChkRings
0000C268 0C38 0001 FE19             		cmpi.b #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0000C26E 6700 0000                  		beq 	Pow_NoMusic
0000C272 11FC 0001 FE2D             		move.b	#1,(v_invinc).w	; make Sonic invincible
0000C278 31FC 0560 D032             		move.w	#$560,(v_player+$32).w ; time limit for the power-up
0000C27E 11FC 0000 D200             		move.b	#id_InvStars,(v_objspace+$200).w ; load stars object ($3801)
0000C284 11FC 0001 D21C             		move.b	#1,(v_objspace+$200+obAnim).w
0000C28A 11FC 0000 D240             		move.b	#id_InvStars,(v_objspace+$240).w ; load stars object ($3802)
0000C290 11FC 0002 D25C             		move.b	#2,(v_objspace+$240+obAnim).w
0000C296 11FC 0000 D280             		move.b	#id_InvStars,(v_objspace+$280).w ; load stars object ($3803)
0000C29C 11FC 0003 D29C             		move.b	#3,(v_objspace+$280+obAnim).w
0000C2A2 11FC 0000 D2C0             		move.b	#id_InvStars,(v_objspace+$2C0).w ; load stars object ($3804)
0000C2A8 11FC 0004 D2DC             		move.b	#4,(v_objspace+$2C0+obAnim).w
0000C2AE 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C2B2 6600                       		bne.s	Pow_NoMusic	; if yes, branch
0000C2B4 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C2BA 6300                       			bls.s	Pow_NoMusic
0000C2C6                            ; ===========================================================================
0000C2C6                            
0000C2C6                            Pow_NoMusic:
0000C2C6 4E75                       		rts	
0000C2C8                            ; ===========================================================================
0000C2C8                            
0000C2C8                            Pow_ChkRings:
0000C2C8 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000C2CC 6600                       		bne.s	Pow_ChkS
0000C2CE                            
0000C2CE 0678 000A FE20             		addi.w	#10,(v_rings).w	; add 10 rings to the number of rings you have
0000C2D4 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the ring counter
0000C2DA 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C2E0 6500                       		bcs.s	Pow_RingSound
0000C2E2 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C2E8 6700 FEEC                  		beq.w	ExtraLife
0000C2EC 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C2F2 6500                       		bcs.s	Pow_RingSound
0000C2F4 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C2FA 6700 FEDA                  		beq.w	ExtraLife
0000C2FE                            
0000C2FE                            	Pow_RingSound:
0000C308                            ; ===========================================================================
0000C308                            
0000C308                            Pow_ChkS:
0000C308 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'?
0000C30C 6600                       		bne.s	Pow_ChkSRing
0000C30E                            		
0000C30E 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0000C314 6700                       		beq.s	PowS2	; if yes, branch
0000C316 0404 003B                  		subi.b	#$3B,d4
0000C31A 7000                       		moveq	#0,d0
0000C31C 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000C322 11FC 0001 F5C3             		move.b	#1,(f_emeraldm).w
0000C328 6000                       		bra.s	PowSPlay
0000C32A                            
0000C32A                            PowS2:
0000C32A 0678 0032 FE20             		addi.w	#50,(v_rings).w	; add 50 rings to the number of rings you have
0000C330 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000C336 0038 0005 FE1D             		ori.b	#5,(f_ringcount).w ; update the ring counter
0000C33C 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C342 6500                       		bcs.s	PowSPlay
0000C344 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C34A 6700 FE8A                  		beq.w	ExtraLife
0000C34E 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C354 6500                       		bcs.s	PowSPlay
0000C356 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C35C 6700 FE78                  		beq.w	ExtraLife	
0000C360                            
0000C360                            PowSPlay:
0000C36A                            
0000C36A                            		
0000C36A                            
0000C36A                            
0000C36A                            Pow_ChkSRing:
0000C36A 0C00 0008                  		cmpi.b	#8,d0		; does monitor contain 'S'?
0000C36E 6600                       		bne.s	Pow_ChkRShield
0000C370                            
0000C370                            		
0000C370 0678 0014 FE20             		addi.w	#20,(v_rings).w	; add 20 rings to the number of rings you have
0000C376 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C37C 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C382 6500                       		bcs.s	Pow_ChkSRingSound
0000C384 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C38A 6700 FE4A                  		beq.w	ExtraLife
0000C38E 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C394 6500                       		bcs.s	Pow_ChkSRingSound
0000C396 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C39C 6700 FE38                  		beq.w	ExtraLife	
0000C3A0                            
0000C3A0                            Pow_ChkSRingSound:
0000C3AA                            
0000C3AA                            
0000C3AA                            Pow_ChkRShield:
0000C3AA 0C00 000A                          cmpi.b    #10,d0        ; does monitor contain a shield?
0000C3AE 6600                               bne.s    Pow_ChkGShield
0000C3B0                            
0000C3B0 11FC 0002 F5C8                     move.b    #2,(v_rshield).w    ; give Sonic a shield
0000C3B6 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C3BC 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C3C2 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C3C8 11FC 0000 D180                     move.b    #id_RShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C3CE 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C3D2 303C 0000                          move.w    #sfx_FireShield,d0
0000C3D6 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000C3DC                            
0000C3DC                            Pow_ChkGShield:
0000C3DC 0C00 000B                          cmpi.b    #11,d0        ; does monitor contain a shield?
0000C3E0 6600                               bne.s    Pow_ChkSpShield
0000C3E2                            
0000C3E2 11FC 0001 F5C9                     move.b    #1,(v_gshield).w    ; give Sonic a shield
0000C3E8 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C3EE 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove g shield
0000C3F4 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C3FA 11FC 0000 D180                     move.b    #id_GShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C400 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C404 303C 0000                          move.w    #sfx_LightningShield,d0
0000C408 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000C40E                            
0000C40E                            Pow_ChkSpShield:
0000C40E 0C00 000C                         cmpi.b    #12,d0        ; does monitor contain a shield?
0000C412 66FA                               bne.s    Pow_ChkSpShield
0000C414                            
0000C414 11FC 0001 F5CA                     move.b    #1,(v_spshield).w    ; give Sonic a shield
0000C41A 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C420 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove g shield
0000C426 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove s shield
0000C42C 11FC 0000 D180                     move.b    #id_SpShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C432 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C436 303C 0000                          move.w    #sfx_SpikesMove,d0
0000C43A 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000C440                            
0000C440                            Pow_ChkEnd:
0000C440 4E75                       		rts
0000C442                            ; ===========================================================================
0000C442                            
0000C442                            Pow_Delete:	; Routine 4
0000C442 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0000C446 6B00 0000                  		bmi.w	DeleteObject	; delete after half a second
0000C44A 4E75                       		rts	
0000C44A 4E75                       		rts	
0000C44C                            		include	"_incObj\26 Monitor (SolidSides subroutine).asm"
0000C44C                            ; ---------------------------------------------------------------------------
0000C44C                            ; Subroutine to	make the sides of a monitor solid
0000C44C                            ; ---------------------------------------------------------------------------
0000C44C                            
0000C44C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C44C                            
0000C44C                            
0000C44C                            Mon_SolidSides:
0000C44C 43F8 D000                  		lea	(v_player).w,a1
0000C450 3029 0008                  		move.w	obX(a1),d0
0000C454 9068 0008                  		sub.w	obX(a0),d0
0000C458 D041                       		add.w	d1,d0
0000C45A 6B00                       		bmi.s	loc_A4E6
0000C45C 3601                       		move.w	d1,d3
0000C45E D643                       		add.w	d3,d3
0000C460 B043                       		cmp.w	d3,d0
0000C462 6200                       		bhi.s	loc_A4E6
0000C464 1629 0016                  		move.b	obHeight(a1),d3
0000C468 4883                       		ext.w	d3
0000C46A D443                       		add.w	d3,d2
0000C46C 3629 000C                  		move.w	obY(a1),d3
0000C470 9668 000C                  		sub.w	obY(a0),d3
0000C474 D642                       		add.w	d2,d3
0000C476 6B00                       		bmi.s	loc_A4E6
0000C478 D442                       		add.w	d2,d2
0000C47A B642                       		cmp.w	d2,d3
0000C47C 6400                       		bcc.s	loc_A4E6
0000C47E 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000C482 6B00                       		bmi.s	loc_A4E6
0000C484 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000C48A 6400                       		bcc.s	loc_A4E6
0000C48C 4A78 FE08                  		tst.w	(v_debuguse).w
0000C490 6600                       		bne.s	loc_A4E6
0000C492 B240                       		cmp.w	d0,d1
0000C494 6400                       		bcc.s	loc_A4DC
0000C496 D241                       		add.w	d1,d1
0000C498 9041                       		sub.w	d1,d0
0000C49A                            
0000C49A                            loc_A4DC:
0000C49A 0C43 0010                  		cmpi.w	#$10,d3
0000C49E 6500                       		bcs.s	loc_A4EA
0000C4A0                            
0000C4A0                            loc_A4E2:
0000C4A0 7201                       		moveq	#1,d1
0000C4A2 4E75                       		rts	
0000C4A4                            ; ===========================================================================
0000C4A4                            
0000C4A4                            loc_A4E6:
0000C4A4 7200                       		moveq	#0,d1
0000C4A6 4E75                       		rts	
0000C4A8                            ; ===========================================================================
0000C4A8                            
0000C4A8                            loc_A4EA:
0000C4A8 7200                       		moveq	#0,d1
0000C4AA 1228 0014                  		move.b	obActWid(a0),d1
0000C4AE 5841                       		addq.w	#4,d1
0000C4B0 3401                       		move.w	d1,d2
0000C4B2 D442                       		add.w	d2,d2
0000C4B4 D269 0008                  		add.w	obX(a1),d1
0000C4B8 9268 0008                  		sub.w	obX(a0),d1
0000C4BC 6BE2                       		bmi.s	loc_A4E2
0000C4BE B242                       		cmp.w	d2,d1
0000C4C0 64DE                       		bcc.s	loc_A4E2
0000C4C2 72FF                       		moveq	#-1,d1
0000C4C4 4E75                       		rts	
0000C4C6                            ; End of function Obj26_SolidSides
0000C4C6                            ; End of function Obj26_SolidSides
0000C4C6                            		include	"_anim\Monitor.asm"
0000C4C6                            ; ---------------------------------------------------------------------------
0000C4C6                            ; Animation script - monitors
0000C4C6                            ; ---------------------------------------------------------------------------
0000C4C6 0000 0000 0000             Ani_Monitor:	dc.w @static-Ani_Monitor, @eggman-Ani_Monitor, @sonic-Ani_Monitor
0000C4CC 0000 0000 0000             		dc.w @shoes-Ani_Monitor, @shield-Ani_Monitor, @invincible-Ani_Monitor
0000C4D2 0000 0000 0000             		dc.w @rings-Ani_Monitor, @s-Ani_Monitor, @goggles-Ani_Monitor
0000C4D8 0000 0000 0000             		dc.w @breaking-Ani_Monitor, @rshield-Ani_Monitor, @yshield-Ani_Monitor
0000C4DE 0000                       		dc.w @spshield-Ani_Monitor
0000C4E0                            		
0000C4E0 0100 0102 FF               @static:	dc.b 1,	0, 1, 2, afEnd
0000C4E6 00                         		even
0000C4E6 0100 0303 0103 0302 0303+  @eggman:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, afEnd
0000C4F2 00                         		even
0000C4F2 0100 0404 0104 0402 0404+  @sonic:		dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, afEnd
0000C4FE 00                         		even
0000C4FE 0100 0505 0105 0502 0505+  @shoes:		dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, afEnd
0000C50A 00                         		even
0000C50A 0100 0606 0106 0602 0606+  @shield:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, afEnd
0000C516 00                         		even
0000C516 0100 0707 0107 0702 0707+  @invincible:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, afEnd
0000C522 00                         		even
0000C522 0100 0808 0108 0802 0808+  @rings:		dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, afEnd
0000C52E 00                         		even
0000C52E 0100 0909 0109 0902 0909+  @s:		dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, afEnd
0000C53A 00                         		even
0000C53A 0100 0A0A 010A 0A02 0A0A+  @goggles:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, afEnd
0000C546 00                         		even
0000C546 0200 0102 0BFE 01          @breaking:	dc.b 2,	0, 1, 2, $B, afBack, 1
0000C54E 00                         		even
0000C54E 0100 0C0C 010C 0C02 0C0C+  @rshield:	dc.b 1,	0, $C, $C, 1, $C, $C, 2, $C, $C, afEnd
0000C55A 00                         		even
0000C55A 0100 0D0D 010D 0D02 0D0D+  @yshield:	dc.b 1,	0, $D, $D, 1, $D, $D, 2, $D, $D, afEnd
0000C566 00                         		even
0000C566 0100 0E0E 010E 0E02 0E0E+  @spshield:	dc.b 1,	0, $E, $E, 1, $E, $E, 2, $E, $E, afEnd
0000C572 00                         		even
0000C572 00                         		even
0000C572                            Map_Monitor:	include	"_maps\Monitor.asm"
0000C572                            ; --------------------------------------------------------------------------------
0000C572                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C572                            ; --------------------------------------------------------------------------------
0000C572                            
0000C572                            SME_0IgQe:	
0000C572 0000 0000                  		dc.w SME_0IgQe_1E-SME_0IgQe, SME_0IgQe_24-SME_0IgQe	
0000C576 0000 0000                  		dc.w SME_0IgQe_2F-SME_0IgQe, SME_0IgQe_3A-SME_0IgQe	
0000C57A 0000 0000                  		dc.w SME_0IgQe_45-SME_0IgQe, SME_0IgQe_50-SME_0IgQe	
0000C57E 0000 0000                  		dc.w SME_0IgQe_5B-SME_0IgQe, SME_0IgQe_66-SME_0IgQe	
0000C582 0000 0000                  		dc.w SME_0IgQe_71-SME_0IgQe, SME_0IgQe_7C-SME_0IgQe	
0000C586 0000 0000                  		dc.w SME_0IgQe_87-SME_0IgQe, SME_0IgQe_92-SME_0IgQe	
0000C58A 0000 0000                  		dc.w SME_0IgQe_AC-SME_0IgQe, SME_0IgQe_B7-SME_0IgQe	
0000C58E 0000                       		dc.w SME_0IgQe_C2-SME_0IgQe	
0000C590 01                         SME_0IgQe_1E:	dc.b 1	
0000C591 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C596 02                         SME_0IgQe_24:	dc.b 2	
0000C597 F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000C59C F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5A1 02                         SME_0IgQe_2F:	dc.b 2	
0000C5A2 F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000C5A7 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5AC 02                         SME_0IgQe_3A:	dc.b 2	
0000C5AD F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000C5B2 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5B7 02                         SME_0IgQe_45:	dc.b 2	
0000C5B8 F505 0154 F8               		dc.b $F5, 5, 1, $54, $F8	
0000C5BD F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5C2 02                         SME_0IgQe_50:	dc.b 2	
0000C5C3 F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000C5C8 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5CD 02                         SME_0IgQe_5B:	dc.b 2	
0000C5CE F505 2028 F8               		dc.b $F5, 5, $20, $28, $F8	
0000C5D3 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5D8 02                         SME_0IgQe_66:	dc.b 2	
0000C5D9 F505 002C F8               		dc.b $F5, 5, 0, $2C, $F8	
0000C5DE F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5E3 02                         SME_0IgQe_71:	dc.b 2	
0000C5E4 F505 2030 F8               		dc.b $F5, 5, $20, $30, $F8	
0000C5E9 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5EE 02                         SME_0IgQe_7C:	dc.b 2	
0000C5EF F505 0034 F8               		dc.b $F5, 5, 0, $34, $F8	
0000C5F4 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5F9 02                         SME_0IgQe_87:	dc.b 2	
0000C5FA F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000C5FF F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C604 05                         SME_0IgQe_92:	dc.b 5	
0000C605 010C 0038 F0               		dc.b 1, $C, 0, $38, $F0	
0000C60A 0900 0003 F0               		dc.b 9, 0, 0, 3, $F0	
0000C60F 0900 0007 F8               		dc.b 9, 0, 0, 7, $F8	
0000C614 0900 000B 00               		dc.b 9, 0, 0, $B, 0	
0000C619 0900 000F 08               		dc.b 9, 0, 0, $F, 8	
0000C61E 02                         SME_0IgQe_AC:	dc.b 2	
0000C61F F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000C624 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C629 02                         SME_0IgQe_B7:	dc.b 2	
0000C62A F505 201C F8               		dc.b $F5, 5, $20, $1C, $F8	
0000C62F F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C634 02                         SME_0IgQe_C2:	dc.b 2	
0000C635 F505 003C F8               		dc.b $F5, 5, 0, $3C, $F8	
0000C63A F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C640 00                         		even
0000C640 00                         		even
0000C640                            
0000C640                            		include	"_incObj\0E Title Screen Sonic.asm"
0000C640                            ; ---------------------------------------------------------------------------
0000C640                            ; Object 0E - Sonic on the title screen
0000C640                            ; ---------------------------------------------------------------------------
0000C640                            
0000C640                            TitleSonic:
0000C640 7000                       		moveq	#0,d0
0000C642 1028 0024                  		move.b	obRoutine(a0),d0
0000C646 323B 0000                  		move.w	TSon_Index(pc,d0.w),d1
0000C64A 4EFB 1000                  		jmp	TSon_Index(pc,d1.w)
0000C64E                            ; ===========================================================================
0000C64E 0000                       TSon_Index:	dc.w TSon_Main-TSon_Index
0000C650 0000                       		dc.w TSon_Delay-TSon_Index
0000C652 0000                       		dc.w TSon_Move-TSon_Index
0000C654 0000                       		dc.w TSon_Animate-TSon_Index
0000C656                            ; ===========================================================================
0000C656                            
0000C656                            TSon_Main:	; Routine 0
0000C656 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C65A 317C 00F0 0008             		move.w	#$F0,obX(a0)
0000C660 317C 00DE 000A             		move.w	#$DE,obScreenY(a0) ; position is fixed to screen
0000C666 217C 0000 0000 0004        		move.l	#Map_TSon,obMap(a0)
0000C66E 317C 2348 0002             		move.w	#$2348,obGfx(a0)
0000C674 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000C67A 117C 001D 001F             		move.b	#29,obDelayAni(a0) ; set time delay to 0.5 seconds
0000C680 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C686 6100 0000                  		bsr.w	AnimateSprite
0000C68A                            
0000C68A                            TSon_Delay:	;Routine 2
0000C68A 5328 001F                  		subq.b	#1,obDelayAni(a0) ; subtract 1 from time delay
0000C68E 6A00                       		bpl.s	@wait		; if time remains, branch
0000C690 5428 0024                  		addq.b	#2,obRoutine(a0) ; go to next routine
0000C694 6000 0000                  		bra.w	DisplaySprite
0000C698                            
0000C698                            	@wait:
0000C698 4E75                       		rts	
0000C69A                            ; ===========================================================================
0000C69A                            
0000C69A                            TSon_Move:	; Routine 4
0000C69A 5168 000A                  		subq.w	#8,obScreenY(a0) ; move Sonic up
0000C69E 0C68 0096 000A             		cmpi.w	#$96,obScreenY(a0) ; has Sonic reached final position?
0000C6A4 6600                       		bne.s	@display	; if not, branch
0000C6A6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C6AA                            
0000C6AA                            	@display:
0000C6AA 6000 0000                  		bra.w	DisplaySprite
0000C6AE                            
0000C6AE 4E75                       		rts	
0000C6B0                            ; ===========================================================================
0000C6B0                            
0000C6B0                            TSon_Animate:	; Routine 6
0000C6B0 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C6B6 6100 0000                  		bsr.w	AnimateSprite
0000C6BA 6000 0000                  		bra.w	DisplaySprite
0000C6BE                            
0000C6BE 4E75                       		rts	
0000C6BE 4E75                       		rts	
0000C6C0                            		include	"_incObj\0F Press Start and TM.asm"
0000C6C0                            ; ---------------------------------------------------------------------------
0000C6C0                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000C6C0                            ; ---------------------------------------------------------------------------
0000C6C0                            
0000C6C0                            PSBTM:
0000C6C0 7000                       		moveq	#0,d0
0000C6C2 1028 0024                  		move.b	obRoutine(a0),d0
0000C6C6 323B 0000                  		move.w	PSB_Index(pc,d0.w),d1
0000C6CA 4EBB 1000                  		jsr	PSB_Index(pc,d1.w)
0000C6CE 6000 0000                  		bra.w	DisplaySprite
0000C6D2                            ; ===========================================================================
0000C6D2 0000                       PSB_Index:	dc.w PSB_Main-PSB_Index
0000C6D4 0000                       		dc.w PSB_PrsStart-PSB_Index
0000C6D6 0000                       		dc.w PSB_Exit-PSB_Index
0000C6D8 0000                       		dc.w PSB_Menu-PSB_Index		
0000C6DA                            ; ===========================================================================
0000C6DA                            
0000C6DA                            PSB_Main:	; Routine 0
0000C6DA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C6DE 317C 00D0 0008             		move.w	#$D0,obX(a0)
0000C6E4 317C 0130 000A             		move.w	#$130,obScreenY(a0)
0000C6EA 217C 0000 0000 0004        		move.l	#Map_PSB,obMap(a0)
0000C6F2 317C 0200 0002             		move.w	#$200,obGfx(a0)
0000C6F8 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)	; is object "PRESS START"?
0000C6FE 6500                       		bcs.s	PSB_PrsStart	; if yes, branch
0000C700                            
0000C700 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C704 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is the object	"TM"?
0000C70A 6600                       		bne.s	PSB_Exit	; if not, branch
0000C70C                            
0000C70C 317C 2510 0002             		move.w	#$2510,obGfx(a0) ; "TM" specific code
0000C712 317C 0170 0008             		move.w	#$170,obX(a0)
0000C718 317C 00F8 000A             		move.w	#$F8,obScreenY(a0)
0000C71E                            
0000C71E                            PSB_Exit:	; Routine 4
0000C71E 4E75                       		rts	
0000C720                            ; ===========================================================================
0000C720                            
0000C720                            PSB_PrsStart:	; Routine 2
0000C720 0838 0007 F605             		btst   #7,(v_jpadpress1).w   ; check if Start is pressed
0000C726 6700                       		beq.s   PSB_PrsStart_Show   ; if not, branch
0000C728 5828 0024                  		addq.b   #4,obRoutine(a0)      ; go to Menu in next frame
0000C72C 303C 00A1                  		move.w   #$A1,d0 
0000C730 4EB8 12A0                  		jsr   PlaySound_Special
0000C734 317C 056F 0002             		move.w   #$56F,obGfx(a0)
0000C73A 217C 0000 0000 0004        		move.l   #Map_TitleMenu,obMap(a0) 
0000C742 317C 00F8 0008             		move.w	#$F8,obX(a0)
0000C748 317C 0150 000A             		move.w	#$150,obScreenY(a0)
0000C74E 4E75                       		rts
0000C750                            
0000C750                            PSB_PrsStart_Show:
0000C750 43F9 0000 0000             		lea	(Ani_PSBTM).l,a1
0000C756 6000 0000                  		bra.w	AnimateSprite	; "PRESS START" is animated
0000C75A                            
0000C75A                            PSB_Menu:
0000C75A 7400                             moveq   #0,d2
0000C75C 1438 FFB0                        move.b   (Title_screen_option).w,d2
0000C760 1038 F605                        move.b   (v_jpadpress1).w,d0
0000C764 0800 0000                        btst   #0,d0
0000C768 6700                             beq.s   MAIN2
0000C76A 5302                             subq.b   #1,d2
0000C76C 6400                             bcc.s   MAIN2
0000C76E 143C 0001                        move.b   #1,d2
0000C772                            
0000C772                            MAIN2:
0000C772 0800 0001                        btst   #1,d0
0000C776 6700                             beq.s   MAIN3
0000C778 5202                             addq.b   #1,d2
0000C77A 0C02 0002                        cmpi.b   #2,d2
0000C77E 6500                             blo.s   MAIN3
0000C780 7400                             moveq   #0,d2
0000C782                            
0000C782                            MAIN3:
0000C782 1142 001A                        move.b   d2,$1A(a0)
0000C786 11C2 FFB0                        move.b   d2,(Title_screen_option).w
0000C78A 0200 0003                        andi.b   #3,d0
0000C78E 6700                             beq.s   MAIN4   
0000C790 303C 00CD                        move.w   #$CD,d0 ; selection blip sound
0000C794 4EB8 12A0                        jsr   PlaySound_Special
0000C798                            
0000C798                            MAIN4:
0000C798 0838 0007 F605                   btst   #7,(v_jpadpress1).w   ; check if Start is pressed
0000C79E 6700                             beq.s   MENURTS   ; if not, branch
0000C7A0 4EF9 0000 0000                   jmp   DeleteObject   ; if yes, delete the Title Screen Menu
0000C7A6                            
0000C7A6                            MENURTS:
0000C7A6 4E75                             rts															 
0000C7A8                            ; ===========================================================================
0000C7A8                            
0000C7A8                            
0000C7A8                            Map_TitleMenu:
0000C7A8                            		include "_maps\Title Screen Menu.asm"		
0000C7A8                            ; --------------------------------------------------------------------------------
0000C7A8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C7A8                            ; --------------------------------------------------------------------------------
0000C7A8                            
0000C7A8                            SME_g2Qfx:	
0000C7A8 0000 0000                  		dc.w SME_g2Qfx_6-SME_g2Qfx, SME_g2Qfx_6B-SME_g2Qfx	
0000C7AC 10                         SME_g2Qfx_6:	dc.b $10	
0000C7AD E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C7B2 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C7B7 E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C7BC E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C7C1 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C7C6 E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C7CB E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C7D0 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C7D5 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C7DA F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C7DF F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C7E4 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C7E9 F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C7EE F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C7F3 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C7F8 E004 0028 E0               		dc.b $E0, 4, 0, $28, $E0	
0000C7FD 10                         SME_g2Qfx_6B:	dc.b $10	
0000C7FE E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C803 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C808 E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C80D E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C812 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C817 E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C81C E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C821 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C826 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C82B F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C830 F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C835 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C83A F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C83F F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C844 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C849 F004 0028 E0               		dc.b $F0, 4, 0, $28, $E0
0000C84E                            		even
0000C84E                            		even
0000C84E                            		even
0000C84E                            
0000C84E                            		include	"_anim\Title Screen Sonic.asm"
0000C84E                            ; ---------------------------------------------------------------------------
0000C84E                            ; Animation script - Sonic on the title screen
0000C84E                            ; ---------------------------------------------------------------------------
0000C84E 0000                       Ani_TSon:	dc.w byte_A706-Ani_TSon
0000C850 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	afBack, 2
0000C85C 00                         		even
0000C85C 00                         		even
0000C85C                            		include	"_anim\Press Start and TM.asm"
0000C85C                            ; ---------------------------------------------------------------------------
0000C85C                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000C85C                            ; ---------------------------------------------------------------------------
0000C85C 0000                       Ani_PSBTM:	dc.w @flash-Ani_PSBTM
0000C85E 1F00 01FF                  @flash:		dc.b $1F, 0, 1,	afEnd
0000C862                            		even
0000C862                            		even
0000C862                            
0000C862                            		include	"_incObj\sub AnimateSprite.asm"
0000C862                            ; ---------------------------------------------------------------------------
0000C862                            ; Subroutine to	animate	a sprite using an animation script
0000C862                            ; ---------------------------------------------------------------------------
0000C862                            
0000C862                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C862                            
0000C862                            
0000C862                            AnimateSprite:
0000C862 7000                       		moveq	#0,d0
0000C864 1028 001C                  		move.b	obAnim(a0),d0	; move animation number	to d0
0000C868 B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
0000C86C 6700                       		beq.s	Anim_Run	; if not, branch
0000C86E                            
0000C86E 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
0000C872 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C878 117C 0000 001E             		move.b	#0,obTimeFrame(a0) ; reset frame duration
0000C87E                            
0000C87E                            Anim_Run:
0000C87E 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000C882 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000C884 D040                       		add.w	d0,d0
0000C886 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000C88A 1151 001E                  		move.b	(a1),obTimeFrame(a0) ; load frame duration
0000C88E 7200                       		moveq	#0,d1
0000C890 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0000C894 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000C898 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000C89A                            
0000C89A                            Anim_Next:
0000C89A 1200                       		move.b	d0,d1
0000C89C 0200 001F                  		andi.b	#$1F,d0
0000C8A0 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0000C8A4 1028 0022                  		move.b	obStatus(a0),d0
0000C8A8 E719                       		rol.b	#3,d1
0000C8AA B101                       		eor.b	d0,d1
0000C8AC 0201 0003                  		andi.b	#3,d1
0000C8B0 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0000C8B6 8328 0001                  		or.b	d1,obRender(a0)
0000C8BA 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
0000C8BE                            
0000C8BE                            Anim_Wait:
0000C8BE 4E75                       		rts	
0000C8C0                            ; ===========================================================================
0000C8C0                            
0000C8C0                            Anim_End_FF:
0000C8C0 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000C8C2 6600                       		bne.s	Anim_End_FE	; if not, branch
0000C8C4 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; restart the animation
0000C8CA 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000C8CE 60CA                       		bra.s	Anim_Next
0000C8D0                            ; ===========================================================================
0000C8D0                            
0000C8D0                            Anim_End_FE:
0000C8D0 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000C8D2 6600                       		bne.s	Anim_End_FD	; if not, branch
0000C8D4 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000C8D8 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0000C8DC 9200                       		sub.b	d0,d1
0000C8DE 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000C8E2 60B6                       		bra.s	Anim_Next
0000C8E4                            ; ===========================================================================
0000C8E4                            
0000C8E4                            Anim_End_FD:
0000C8E4 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000C8E6 6600                       		bne.s	Anim_End_FC	; if not, branch
0000C8E8 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0000C8EE                            
0000C8EE                            Anim_End_FC:
0000C8EE 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000C8F0 6600                       		bne.s	Anim_End_FB	; if not, branch
0000C8F2 5428 0024                  		addq.b	#2,obRoutine(a0) ; jump to next routine
0000C8F6                            
0000C8F6                            Anim_End_FB:
0000C8F6 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000C8F8 6600                       		bne.s	Anim_End_FA	; if not, branch
0000C8FA 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C900 4228 0025                  		clr.b	ob2ndRout(a0)	; reset	2nd routine counter
0000C904                            
0000C904                            Anim_End_FA:
0000C904 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000C906 6600                       		bne.s	Anim_End	; if not, branch
0000C908 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; jump to next routine
0000C90C                            
0000C90C                            Anim_End:
0000C90C 4E75                       		rts	
0000C90E                            ; End of function AnimateSprite
0000C90E                            ; End of function AnimateSprite
0000C90E                            
0000C90E                            Map_PSB:	include	"_maps\Press Start and TM.asm"
0000C90E                            ; ---------------------------------------------------------------------------
0000C90E                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000C90E                            ; ---------------------------------------------------------------------------
0000C90E                            Map_PSB_internal:
0000C90E 0000                       		dc.w byte_A7CD-Map_PSB_internal
0000C910 0000                       		dc.w M_PSB_PSB-Map_PSB_internal
0000C912 0000                       		dc.w M_PSB_Limiter-Map_PSB_internal
0000C914 0000                       		dc.w M_PSB_TM-Map_PSB_internal
0000C916 06                         M_PSB_PSB:	dc.b 6			; "PRESS START BUTTON"
0000C917 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000C91C 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000C921 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000C926 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000C92B 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000C930 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000C935 1E                         M_PSB_Limiter:	dc.b $1E		; sprite line limiter
0000C936 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C93B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C940 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C945 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C94A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C94F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C954 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C959 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C95E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C963 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C968 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C96D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C972 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C977 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C97C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C981 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C986 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C98B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C990 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C995 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C99A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C99F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9A4 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9A9 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9AE F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9B3 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9B8 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9BD F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9C2 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9C7 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C9CC 01                         M_PSB_TM:	dc.b 1			; "TM"
0000C9CD FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000C9D2                            		even
0000C9D2                            		even
0000C9D2                            Map_TSon:	include	"_maps\Title Screen Sonic.asm"
0000C9D2                            ; ---------------------------------------------------------------------------
0000C9D2                            ; Sprite mappings - Sonic on the title screen
0000C9D2                            ; ---------------------------------------------------------------------------
0000C9D2                            Map_TSon_internal:
0000C9D2 0000                       		dc.w byte_A898-Map_TSon_internal
0000C9D4 0000                       		dc.w byte_A8CB-Map_TSon_internal
0000C9D6 0000                       		dc.w byte_A917-Map_TSon_internal
0000C9D8 0000                       		dc.w byte_A96D-Map_TSon_internal
0000C9DA 0000                       		dc.w byte_A9AF-Map_TSon_internal
0000C9DC 0000                       		dc.w byte_A9E7-Map_TSon_internal
0000C9DE 0000                       		dc.w byte_AA47-Map_TSon_internal
0000C9E0 0000                       		dc.w byte_AAB1-Map_TSon_internal
0000C9E2 0A                         byte_A898:	dc.b $A
0000C9E3 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000C9E8 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000C9ED 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000C9F2 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000C9F7 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000C9FC 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000CA01 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000CA06 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000CA0B 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000CA10 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000CA15 0F                         byte_A8CB:	dc.b $F
0000CA16 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000CA1B 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000CA20 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000CA25 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000CA2A 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000CA2F 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CA34 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CA39 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CA3E 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CA43 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CA48 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CA4D 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CA52 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CA57 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CA5C 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CA61 11                         byte_A917:	dc.b $11
0000CA62 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000CA67 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000CA6C 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000CA71 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000CA76 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000CA7B 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000CA80 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000CA85 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CA8A 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CA8F 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CA94 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CA99 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CA9E 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CAA3 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CAA8 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CAAD 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CAB2 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CAB7 0D                         byte_A96D:	dc.b $D
0000CAB8 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000CABD 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000CAC2 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000CAC7 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000CACC 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000CAD1 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000CAD6 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000CADB 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000CAE0 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000CAE5 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000CAEA 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000CAEF 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000CAF4 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000CAF9 0B                         byte_A9AF:	dc.b $B
0000CAFA 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000CAFF 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000CB04 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000CB09 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000CB0E 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000CB13 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000CB18 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000CB1D 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000CB22 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000CB27 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000CB2C 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000CB31 13                         byte_A9E7:	dc.b $13
0000CB32 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CB37 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CB3C 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CB41 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CB46 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CB4B 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CB50 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CB55 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CB5A 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CB5F 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CB64 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CB69 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CB6E 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CB73 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CB78 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CB7D 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CB82 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CB87 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CB8C 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CB91 15                         byte_AA47:	dc.b $15
0000CB92 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CB97 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CB9C 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CBA1 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CBA6 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CBAB 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CBB0 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CBB5 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CBBA 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CBBF 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CBC4 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CBC9 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CBCE 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CBD3 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CBD8 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CBDD 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CBE2 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CBE7 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CBEC 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CBF1 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CBF6 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CBFB 16                         byte_AAB1:	dc.b $16
0000CBFC 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000CC01 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000CC06 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000CC0B 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000CC10 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000CC15 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CC1A 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CC1F 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CC24 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CC29 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CC2E 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CC33 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CC38 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CC3D 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CC42 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CC47 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CC4C 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CC51 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CC56 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CC5B 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CC60 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CC65 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CC6A                            		even
0000CC6A                            		even
0000CC6A                            
0000CC6A                            		include	"_incObj\2B Chopper.asm"
0000CC6A                            ; ---------------------------------------------------------------------------
0000CC6A                            ; Object 2B - Chopper enemy (GHZ)
0000CC6A                            ; ---------------------------------------------------------------------------
0000CC6A                            
0000CC6A                            Chopper:
0000CC6A 7000                       		moveq	#0,d0
0000CC6C 1028 0024                  		move.b	obRoutine(a0),d0
0000CC70 323B 0000                  		move.w	Chop_Index(pc,d0.w),d1
0000CC74 4EBB 1000                  		jsr	Chop_Index(pc,d1.w)
0000CC78 6000 0000                  		bra.w	RememberState
0000CC7C                            ; ===========================================================================
0000CC7C 0000                       Chop_Index:	dc.w Chop_Main-Chop_Index
0000CC7E 0000                       		dc.w Chop_ChgSpeed-Chop_Index
0000CC80                            
0000CC80 =00000030                  chop_origY:	equ $30
0000CC80                            ; ===========================================================================
0000CC80                            
0000CC80                            Chop_Main:	; Routine 0
0000CC80 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CC84 217C 0000 0000 0004        		move.l	#Map_Chop,obMap(a0)
0000CC8C 317C 047B 0002             		move.w	#$47B,obGfx(a0)
0000CC92 117C 0004 0001             		move.b	#4,obRender(a0)
0000CC98 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CC9E 117C 0009 0020             		move.b	#9,obColType(a0)
0000CCA4 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CCAA 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CCB0 3168 000C 0030             		move.w	obY(a0),chop_origY(a0) ; save original position
0000CCB6                            
0000CCB6                            Chop_ChgSpeed:	; Routine 2
0000CCB6 43F9 0000 0000             		lea	(Ani_Chop).l,a1
0000CCBC 6100 FBA4                  		bsr.w	AnimateSprite
0000CCC0 6100 0000                  		bsr.w	SpeedToPos
0000CCC4 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce speed
0000CCCA 3028 0030                  		move.w	chop_origY(a0),d0
0000CCCE B068 000C                  		cmp.w	obY(a0),d0	; has Chopper returned to its original position?
0000CCD2 6400                       		bcc.s	@chganimation	; if not, branch
0000CCD4 3140 000C                  		move.w	d0,obY(a0)
0000CCD8 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CCDE                            
0000CCDE                            	@chganimation:
0000CCDE 117C 0001 001C             		move.b	#1,obAnim(a0)	; use fast animation
0000CCE4 0440 00C0                  		subi.w	#$C0,d0
0000CCE8 B068 000C                  		cmp.w	obY(a0),d0
0000CCEC 6400                       		bcc.s	@nochg
0000CCEE 117C 0000 001C             		move.b	#0,obAnim(a0)	; use slow animation
0000CCF4 4A68 0012                  		tst.w	obVelY(a0)	; is Chopper at	its highest point?
0000CCF8 6B00                       		bmi.s	@nochg		; if not, branch
0000CCFA 117C 0002 001C             		move.b	#2,obAnim(a0)	; use stationary animation
0000CD00                            
0000CD00                            	@nochg:
0000CD00 4E75                       		rts	
0000CD00 4E75                       		rts	
0000CD02                            		include	"_anim\Chopper.asm"
0000CD02                            ; ---------------------------------------------------------------------------
0000CD02                            ; Animation script - Chopper enemy
0000CD02                            ; ---------------------------------------------------------------------------
0000CD02 0000                       Ani_Chop:	dc.w @slow-Ani_Chop
0000CD04 0000                       		dc.w @fast-Ani_Chop
0000CD06 0000                       		dc.w @still-Ani_Chop
0000CD08 0700 01FF                  @slow:		dc.b 7,	0, 1, afEnd
0000CD0C 0300 01FF                  @fast:		dc.b 3,	0, 1, afEnd
0000CD10 0700 FF                    @still:		dc.b 7,	0, afEnd
0000CD14 00                         		even
0000CD14 00                         		even
0000CD14                            Map_Chop:	include	"_maps\Chopper.asm"
0000CD14                            ; ---------------------------------------------------------------------------
0000CD14                            ; Sprite mappings - Chopper enemy (GHZ)
0000CD14                            ; ---------------------------------------------------------------------------
0000CD14                            Map_Chop_internal:
0000CD14 0000                       		dc.w @mouthshut-Map_Chop_internal
0000CD16 0000                       		dc.w @mouthopen-Map_Chop_internal
0000CD18 01                         @mouthshut:	dc.b 1
0000CD19 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000CD1E 01                         @mouthopen:	dc.b 1
0000CD1F F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000CD24                            		even
0000CD24                            		even
0000CD24                            		include	"_incObj\2C Jaws.asm"
0000CD24                            ; ---------------------------------------------------------------------------
0000CD24                            ; Object 2C - Jaws enemy (LZ)
0000CD24                            ; ---------------------------------------------------------------------------
0000CD24                            
0000CD24                            Jaws:
0000CD24 7000                       		moveq	#0,d0
0000CD26 1028 0024                  		move.b	obRoutine(a0),d0
0000CD2A 323B 0000                  		move.w	Jaws_Index(pc,d0.w),d1
0000CD2E 4EFB 1000                  		jmp	Jaws_Index(pc,d1.w)
0000CD32                            ; ===========================================================================
0000CD32 0000                       Jaws_Index:	dc.w Jaws_Main-Jaws_Index
0000CD34 0000                       		dc.w Jaws_Turn-Jaws_Index
0000CD36                            
0000CD36 =00000030                  jaws_timecount:	equ $30
0000CD36 =00000032                  jaws_timedelay:	equ $32
0000CD36                            ; ===========================================================================
0000CD36                            
0000CD36                            Jaws_Main:	; Routine 0
0000CD36 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CD3A 217C 0000 0000 0004        		move.l	#Map_Jaws,obMap(a0)
0000CD42 317C 2486 0002             		move.w	#$2486,obGfx(a0)
0000CD48 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CD4E 117C 000A 0020             		move.b	#$A,obColType(a0)
0000CD54 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CD5A 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CD60 7000                       		moveq	#0,d0
0000CD62 1028 0028                  		move.b	obSubtype(a0),d0 ; load object subtype number
0000CD66 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000CD68 5340                       		subq.w	#1,d0
0000CD6A 3140 0030                  		move.w	d0,jaws_timecount(a0) ; set turn delay time
0000CD6E 3140 0032                  		move.w	d0,jaws_timedelay(a0)
0000CD72 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move Jaws to the left
0000CD78 0828 0000 0022             		btst	#0,obStatus(a0)	; is Jaws facing left?
0000CD7E 6700                       		beq.s	Jaws_Turn	; if yes, branch
0000CD80 4468 0010                  		neg.w	obVelX(a0)	; move Jaws to the right
0000CD84                            
0000CD84                            Jaws_Turn:	; Routine 2
0000CD84 5368 0030                  		subq.w	#1,jaws_timecount(a0) ; subtract 1 from turn delay time
0000CD88 6A00                       		bpl.s	@animate	; if time remains, branch
0000CD8A 3168 0032 0030             		move.w	jaws_timedelay(a0),jaws_timecount(a0) ; reset turn delay time
0000CD90 4468 0010                  		neg.w	obVelX(a0)	; change speed direction
0000CD94 0868 0000 0022             		bchg	#0,obStatus(a0)	; change Jaws facing direction
0000CD9A 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000CDA0                            
0000CDA0                            	@animate:
0000CDA0 43F9 0000 0000             		lea	(Ani_Jaws).l,a1
0000CDA6 6100 FABA                  		bsr.w	AnimateSprite
0000CDAA 6100 0000                  		bsr.w	SpeedToPos
0000CDAE 6000 0000                  		bra.w	RememberState
0000CDAE 6000 0000                  		bra.w	RememberState
0000CDB2                            		include	"_anim\Jaws.asm"
0000CDB2                            ; ---------------------------------------------------------------------------
0000CDB2                            ; Animation script - Jaws enemy
0000CDB2                            ; ---------------------------------------------------------------------------
0000CDB2 0000                       Ani_Jaws:	dc.w @swim-Ani_Jaws
0000CDB4 0700 0102 03FF             @swim:		dc.b 7,	0, 1, 2, 3, afEnd
0000CDBA                            		even
0000CDBA                            		even
0000CDBA                            Map_Jaws:	include	"_maps\Jaws.asm"
0000CDBA                            ; --------------------------------------------------------------------------------
0000CDBA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CDBA                            ; --------------------------------------------------------------------------------
0000CDBA                            
0000CDBA                            SME_O5C0c:	
0000CDBA 0000 0000                  		dc.w SME_O5C0c_8-SME_O5C0c, SME_O5C0c_13-SME_O5C0c	
0000CDBE 0000 0000                  		dc.w SME_O5C0c_1E-SME_O5C0c, SME_O5C0c_29-SME_O5C0c	
0000CDC2 02                         SME_O5C0c_8:	dc.b 2	
0000CDC3 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CDC8 F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CDCD 02                         SME_O5C0c_13:	dc.b 2	
0000CDCE F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CDD3 F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CDD8 02                         SME_O5C0c_1E:	dc.b 2	
0000CDD9 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CDDE F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CDE3 02                         SME_O5C0c_29:	dc.b 2	
0000CDE4 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CDE9 F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CDEE                            		even
0000CDEE                            		even
0000CDEE                            		include	"_incObj\2D Burrobot.asm"
0000CDEE                            ; ---------------------------------------------------------------------------
0000CDEE                            ; Object 2D - Burrobot enemy (LZ)
0000CDEE                            ; ---------------------------------------------------------------------------
0000CDEE                            
0000CDEE                            Burrobot:
0000CDEE 7000                       		moveq	#0,d0
0000CDF0 1028 0024                  		move.b	obRoutine(a0),d0
0000CDF4 323B 0000                  		move.w	Burro_Index(pc,d0.w),d1
0000CDF8 4EFB 1000                  		jmp	Burro_Index(pc,d1.w)
0000CDFC                            ; ===========================================================================
0000CDFC 0000                       Burro_Index:	dc.w Burro_Main-Burro_Index
0000CDFE 0000                       		dc.w Burro_Action-Burro_Index
0000CE00                            
0000CE00 =00000030                  burro_timedelay:	equ $30		; time between direction changes
0000CE00                            ; ===========================================================================
0000CE00                            
0000CE00                            Burro_Main:	; Routine 0
0000CE00 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CE04 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000CE0A 117C 0008 0017             		move.b	#8,obWidth(a0)
0000CE10 217C 0000 0000 0004        		move.l	#Map_Burro,obMap(a0)
0000CE18 317C 04A6 0002             		move.w	#$4A6,obGfx(a0)
0000CE1E 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CE24 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CE2A 117C 0005 0020             		move.b	#5,obColType(a0)
0000CE30 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000CE36 5C28 0025                  		addq.b	#6,ob2ndRout(a0) ; run "Burro_ChkSonic" routine
0000CE3A 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CE40                            
0000CE40                            Burro_Action:	; Routine 2
0000CE40 7000                       		moveq	#0,d0
0000CE42 1028 0025                  		move.b	ob2ndRout(a0),d0
0000CE46 323B 0000                  		move.w	@index(pc,d0.w),d1
0000CE4A 4EBB 1000                  		jsr	@index(pc,d1.w)
0000CE4E 43F9 0000 0000             		lea	(Ani_Burro).l,a1
0000CE54 6100 FA0C                  		bsr.w	AnimateSprite
0000CE58 6000 0000                  		bra.w	RememberState
0000CE5C                            ; ===========================================================================
0000CE5C 0000                       @index:		dc.w @changedir-@index
0000CE5E 0000                       		dc.w Burro_Move-@index
0000CE60 0000                       		dc.w Burro_Jump-@index
0000CE62 0000                       		dc.w Burro_ChkSonic-@index
0000CE64                            ; ===========================================================================
0000CE64                            
0000CE64                            @changedir:
0000CE64 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CE68 6A00                       		bpl.s	@nochg
0000CE6A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CE6E 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CE74 317C 0080 0010             		move.w	#$80,obVelX(a0)
0000CE7A 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CE80 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction the Burrobot	is facing
0000CE86 6700                       		beq.s	@nochg
0000CE88 4468 0010                  		neg.w	obVelX(a0)	; change direction the Burrobot	is moving
0000CE8C                            
0000CE8C                            	@nochg:
0000CE8C 4E75                       		rts	
0000CE8E                            ; ===========================================================================
0000CE8E                            
0000CE8E                            Burro_Move:
0000CE8E 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CE92 6B00                       		bmi.s	loc_AD84
0000CE94 6100 0000                  		bsr.w	SpeedToPos
0000CE98 0868 0000 0032             		bchg	#0,$32(a0)
0000CE9E 6600                       		bne.s	loc_AD78
0000CEA0 3628 0008                  		move.w	obX(a0),d3
0000CEA4 0643 000C                  		addi.w	#$C,d3
0000CEA8 0828 0000 0022             		btst	#0,obStatus(a0)
0000CEAE 6600                       		bne.s	loc_AD6A
0000CEB0 0443 0018                  		subi.w	#$18,d3
0000CEB4                            
0000CEB4                            loc_AD6A:
0000CEB4 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000CEBA 0C41 000C                  		cmpi.w	#$C,d1
0000CEBE 6C00                       		bge.s	loc_AD84
0000CEC0 4E75                       		rts	
0000CEC2                            ; ===========================================================================
0000CEC2                            
0000CEC2                            loc_AD78:
0000CEC2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CEC8 D368 000C                  		add.w	d1,obY(a0)
0000CECC 4E75                       		rts	
0000CECE                            ; ===========================================================================
0000CECE                            
0000CECE                            loc_AD84:
0000CECE 0838 0002 FE0F             		btst	#2,(v_vbla_byte).w
0000CED4 6700                       		beq.s	loc_ADA4
0000CED6 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CEDA 317C 003B 0030             		move.w	#59,burro_timedelay(a0)
0000CEE0 317C 0000 0010             		move.w	#0,obVelX(a0)
0000CEE6 117C 0000 001C             		move.b	#0,obAnim(a0)
0000CEEC 4E75                       		rts	
0000CEEE                            ; ===========================================================================
0000CEEE                            
0000CEEE                            loc_ADA4:
0000CEEE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CEF2 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CEF8 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CEFE 4E75                       		rts	
0000CF00                            ; ===========================================================================
0000CF00                            
0000CF00                            Burro_Jump:
0000CF00 6100 0000                  		bsr.w	SpeedToPos
0000CF04 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000CF0A 6B00                       		bmi.s	locret_ADF0
0000CF0C 117C 0003 001C             		move.b	#3,obAnim(a0)
0000CF12 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CF18 4A41                       		tst.w	d1
0000CF1A 6A00                       		bpl.s	locret_ADF0
0000CF1C D368 000C                  		add.w	d1,obY(a0)
0000CF20 317C 0000 0012             		move.w	#0,obVelY(a0)
0000CF26 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CF2C 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CF32 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CF36 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CF3A                            
0000CF3A                            locret_ADF0:
0000CF3A 4E75                       		rts	
0000CF3C                            ; ===========================================================================
0000CF3C                            
0000CF3C                            Burro_ChkSonic:
0000CF3C 343C 0060                  		move.w	#$60,d2
0000CF40 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CF44 6400                       		bcc.s	locret_AE20
0000CF46 3038 D00C                  		move.w	(v_player+obY).w,d0
0000CF4A 9068 000C                  		sub.w	obY(a0),d0
0000CF4E 6400                       		bcc.s	locret_AE20
0000CF50 0C40 FF80                  		cmpi.w	#-$80,d0
0000CF54 6500                       		bcs.s	locret_AE20
0000CF56 4A78 FE08                  		tst.w	(v_debuguse).w
0000CF5A 6600                       		bne.s	locret_AE20
0000CF5C 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CF60 3141 0010                  		move.w	d1,obVelX(a0)
0000CF64 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CF6A                            
0000CF6A                            locret_AE20:
0000CF6A 4E75                       		rts	
0000CF6C                            
0000CF6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CF6C                            
0000CF6C                            
0000CF6C                            Burro_ChkSonic2:
0000CF6C 323C 0080                  		move.w	#$80,d1
0000CF70 08E8 0000 0022             		bset	#0,obStatus(a0)
0000CF76 3038 D008                  		move.w	(v_player+obX).w,d0
0000CF7A 9068 0008                  		sub.w	obX(a0),d0
0000CF7E 6400                       		bcc.s	loc_AE40
0000CF80 4440                       		neg.w	d0
0000CF82 4441                       		neg.w	d1
0000CF84 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000CF8A                            
0000CF8A                            loc_AE40:
0000CF8A B042                       		cmp.w	d2,d0
0000CF8C 4E75                       		rts	
0000CF8E                            ; End of function Burro_ChkSonic2
0000CF8E                            ; End of function Burro_ChkSonic2
0000CF8E                            		include	"_anim\Burrobot.asm"
0000CF8E                            ; ---------------------------------------------------------------------------
0000CF8E                            ; Animation script - Burrobot enemy
0000CF8E                            ; ---------------------------------------------------------------------------
0000CF8E 0000                       Ani_Burro:	dc.w @walk1-Ani_Burro
0000CF90 0000                       		dc.w @walk2-Ani_Burro
0000CF92 0000                       		dc.w @digging-Ani_Burro
0000CF94 0000                       		dc.w @fall-Ani_Burro
0000CF96 0300 06FF                  @walk1:		dc.b 3,	0, 6, afEnd
0000CF9A 0300 01FF                  @walk2:		dc.b 3,	0, 1, afEnd
0000CF9E 0302 03FF                  @digging:	dc.b 3,	2, 3, afEnd
0000CFA2 0304 FF                    @fall:		dc.b 3,	4, afEnd
0000CFA6 00                         		even
0000CFA6 00                         		even
0000CFA6                            Map_Burro:	include	"_maps\Burrobot.asm"
0000CFA6                            ; --------------------------------------------------------------------------------
0000CFA6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CFA6                            ; --------------------------------------------------------------------------------
0000CFA6                            
0000CFA6                            SME_Ag_86:	
0000CFA6 0000 0000                  		dc.w SME_Ag_86_E-SME_Ag_86, SME_Ag_86_19-SME_Ag_86	
0000CFAA 0000 0000                  		dc.w SME_Ag_86_24-SME_Ag_86, SME_Ag_86_2F-SME_Ag_86	
0000CFAE 0000 0000                  		dc.w SME_Ag_86_3A-SME_Ag_86, SME_Ag_86_45-SME_Ag_86	
0000CFB2 0000                       		dc.w SME_Ag_86_50-SME_Ag_86	
0000CFB4 02                         SME_Ag_86_E:	dc.b 2	
0000CFB5 EC0A 2000 F0               		dc.b $EC, $A, $20, 0, $F0	
0000CFBA 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000CFBF 02                         SME_Ag_86_19:	dc.b 2	
0000CFC0 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000CFC5 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000CFCA 02                         SME_Ag_86_24:	dc.b 2	
0000CFCB E80A 201E F4               		dc.b $E8, $A, $20, $1E, $F4	
0000CFD0 000A 2027 F4               		dc.b 0, $A, $20, $27, $F4	
0000CFD5 02                         SME_Ag_86_2F:	dc.b 2	
0000CFD6 E80A 2030 F4               		dc.b $E8, $A, $20, $30, $F4	
0000CFDB 000A 2039 F4               		dc.b 0, $A, $20, $39, $F4	
0000CFE0 02                         SME_Ag_86_3A:	dc.b 2	
0000CFE1 E80A 200F F0               		dc.b $E8, $A, $20, $F, $F0	
0000CFE6 000A 2042 F4               		dc.b 0, $A, $20, $42, $F4	
0000CFEB 02                         SME_Ag_86_45:	dc.b 2	
0000CFEC F406 204B E8               		dc.b $F4, 6, $20, $4B, $E8	
0000CFF1 F40A 2051 F8               		dc.b $F4, $A, $20, $51, $F8	
0000CFF6 02                         SME_Ag_86_50:	dc.b 2	
0000CFF7 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000CFFC 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000D002 00                         		even
0000D002 00                         		even
0000D002                            
0000D002                            		include	"_incObj\2F MZ Large Grassy Platforms.asm"
0000D002                            ; ---------------------------------------------------------------------------
0000D002                            ; Object 2F - large grass-covered platforms (MZ)
0000D002                            ; ---------------------------------------------------------------------------
0000D002                            
0000D002                            LargeGrass:
0000D002 7000                       		moveq	#0,d0
0000D004 1028 0024                  		move.b	obRoutine(a0),d0
0000D008 323B 0000                  		move.w	LGrass_Index(pc,d0.w),d1
0000D00C 4EFB 1000                  		jmp	LGrass_Index(pc,d1.w)
0000D010                            ; ===========================================================================
0000D010 0000                       LGrass_Index:	dc.w LGrass_Main-LGrass_Index
0000D012 0000                       		dc.w LGrass_Action-LGrass_Index
0000D014                            
0000D014 =0000002A                  lgrass_origX:	equ $2A
0000D014 =0000002C                  lgrass_origY:	equ $2C
0000D014                            
0000D014 0000                       LGrass_Data:	dc.w LGrass_Data1-LGrass_Data 	; collision angle data
0000D016 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000D018 0000                       		dc.w LGrass_Data3-LGrass_Data
0000D01A 0140                       		dc.b 1,	$40
0000D01C 0000                       		dc.w LGrass_Data2-LGrass_Data
0000D01E 0220                       		dc.b 2,	$20
0000D020                            ; ===========================================================================
0000D020                            
0000D020                            LGrass_Main:	; Routine 0
0000D020 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D024 217C 0000 0000 0004        		move.l	#Map_LGrass,obMap(a0)
0000D02C 317C C000 0002             		move.w	#$C000,obGfx(a0)
0000D032 117C 0004 0001             		move.b	#4,obRender(a0)
0000D038 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000D03E 3168 000C 002C             		move.w	obY(a0),lgrass_origY(a0)
0000D044 3168 0008 002A             		move.w	obX(a0),lgrass_origX(a0)
0000D04A 7000                       		moveq	#0,d0
0000D04C 1028 0028                  		move.b	obSubtype(a0),d0
0000D050 E448                       		lsr.w	#2,d0
0000D052 0240 001C                  		andi.w	#$1C,d0
0000D056 43FB 00BC                  		lea	LGrass_Data(pc,d0.w),a1
0000D05A 3019                       		move.w	(a1)+,d0
0000D05C 45FB 00B6                  		lea	LGrass_Data(pc,d0.w),a2
0000D060 214A 0030                  		move.l	a2,$30(a0)
0000D064 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000D068 1151 0014                  		move.b	(a1),obActWid(a0)
0000D06C 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000D072 117C 0040 0016             		move.b	#$40,obHeight(a0)
0000D078 08E8 0004 0001             		bset	#4,1(a0)
0000D07E                            
0000D07E                            LGrass_Action:	; Routine 2
0000D07E 6100 0000                  		bsr.w	LGrass_Types
0000D082 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D086 6700                       		beq.s	LGrass_Solid
0000D088 7200                       		moveq	#0,d1
0000D08A 1228 0014                  		move.b	obActWid(a0),d1
0000D08E 0641 000B                  		addi.w	#$B,d1
0000D092 6100 BD04                  		bsr.w	ExitPlatform
0000D096 0829 0003 0022             		btst	#3,obStatus(a1)
0000D09C 6600 0000                  		bne.w	LGrass_Slope
0000D0A0 4228 0025                  		clr.b	ob2ndRout(a0)
0000D0A4 6000                       		bra.s	LGrass_Display
0000D0A6                            ; ===========================================================================
0000D0A6                            
0000D0A6                            LGrass_Slope:
0000D0A6 7200                       		moveq	#0,d1
0000D0A8 1228 0014                  		move.b	obActWid(a0),d1
0000D0AC 0641 000B                  		addi.w	#$B,d1
0000D0B0 2468 0030                  		movea.l	$30(a0),a2
0000D0B4 3428 0008                  		move.w	obX(a0),d2
0000D0B8 6100 CC78                  		bsr.w	SlopeObject2
0000D0BC 6000                       		bra.s	LGrass_Display
0000D0BE                            ; ===========================================================================
0000D0BE                            
0000D0BE                            LGrass_Solid:
0000D0BE 7200                       		moveq	#0,d1
0000D0C0 1228 0014                  		move.b	obActWid(a0),d1
0000D0C4 0641 000B                  		addi.w	#$B,d1
0000D0C8 343C 0020                  		move.w	#$20,d2
0000D0CC 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000D0D2 6600                       		bne.s	loc_AF8E
0000D0D4 343C 0030                  		move.w	#$30,d2
0000D0D8                            
0000D0D8                            loc_AF8E:
0000D0D8 2468 0030                  		movea.l	$30(a0),a2
0000D0DC 6100 0000                  		bsr.w	SolidObject2F
0000D0E0                            
0000D0E0                            LGrass_Display:
0000D0E0 6100 0000                  		bsr.w	DisplaySprite
0000D0E4 6000 0000                  		bra.w	LGrass_ChkDel
0000D0E8                            
0000D0E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D0E8                            
0000D0E8                            
0000D0E8                            LGrass_Types:
0000D0E8 7000                       		moveq	#0,d0
0000D0EA 1028 0028                  		move.b	obSubtype(a0),d0
0000D0EE 0240 0007                  		andi.w	#7,d0
0000D0F2 D040                       		add.w	d0,d0
0000D0F4 323B 0000                  		move.w	LGrass_TypeIndex(pc,d0.w),d1
0000D0F8 4EFB 1000                  		jmp	LGrass_TypeIndex(pc,d1.w)
0000D0FC                            ; End of function LGrass_Types
0000D0FC                            
0000D0FC                            ; ===========================================================================
0000D0FC 0000                       LGrass_TypeIndex:dc.w LGrass_Type00-LGrass_TypeIndex
0000D0FE 0000                       		dc.w LGrass_Type01-LGrass_TypeIndex
0000D100 0000                       		dc.w LGrass_Type02-LGrass_TypeIndex
0000D102 0000                       		dc.w LGrass_Type03-LGrass_TypeIndex
0000D104 0000                       		dc.w LGrass_Type04-LGrass_TypeIndex
0000D106 0000                       		dc.w LGrass_Type05-LGrass_TypeIndex
0000D108                            ; ===========================================================================
0000D108                            
0000D108                            LGrass_Type00:
0000D108 4E75                       		rts			; type 00 platform doesn't move
0000D10A                            ; ===========================================================================
0000D10A                            
0000D10A                            LGrass_Type01:
0000D10A 1038 FE60                  		move.b	(v_oscillate+2).w,d0
0000D10E 323C 0020                  		move.w	#$20,d1
0000D112 6000                       		bra.s	LGrass_Move
0000D114                            ; ===========================================================================
0000D114                            
0000D114                            LGrass_Type02:
0000D114 1038 FE64                  		move.b	(v_oscillate+6).w,d0
0000D118 323C 0030                  		move.w	#$30,d1
0000D11C 6000                       		bra.s	LGrass_Move
0000D11E                            ; ===========================================================================
0000D11E                            
0000D11E                            LGrass_Type03:
0000D11E 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0000D122 323C 0040                  		move.w	#$40,d1
0000D126 6000                       		bra.s	LGrass_Move
0000D128                            ; ===========================================================================
0000D128                            
0000D128                            LGrass_Type04:
0000D128 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0000D12C 323C 0060                  		move.w	#$60,d1
0000D130                            
0000D130                            LGrass_Move:
0000D130 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D136 6700                       		beq.s	loc_AFF2
0000D138 4440                       		neg.w	d0
0000D13A D041                       		add.w	d1,d0
0000D13C                            
0000D13C                            loc_AFF2:
0000D13C 3228 002C                  		move.w	lgrass_origY(a0),d1
0000D140 9240                       		sub.w	d0,d1
0000D142 3141 000C                  		move.w	d1,obY(a0)	; update position on y-axis
0000D146 4E75                       		rts	
0000D148                            ; ===========================================================================
0000D148                            
0000D148                            LGrass_Type05:
0000D148 1028 0034                  		move.b	$34(a0),d0
0000D14C 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D150 6600                       		bne.s	loc_B010
0000D152 5500                       		subq.b	#2,d0
0000D154 6400                       		bcc.s	loc_B01C
0000D156 7000                       		moveq	#0,d0
0000D158 6000                       		bra.s	loc_B01C
0000D15A                            ; ===========================================================================
0000D15A                            
0000D15A                            loc_B010:
0000D15A 5800                       		addq.b	#4,d0
0000D15C 0C00 0040                  		cmpi.b	#$40,d0
0000D160 6500                       		bcs.s	loc_B01C
0000D162 103C 0040                  		move.b	#$40,d0
0000D166                            
0000D166                            loc_B01C:
0000D166 1140 0034                  		move.b	d0,$34(a0)
0000D16A 4EB9 0000 3CCA             		jsr	(CalcSine).l
0000D170 E848                       		lsr.w	#4,d0
0000D172 3200                       		move.w	d0,d1
0000D174 D068 002C                  		add.w	lgrass_origY(a0),d0
0000D178 3140 000C                  		move.w	d0,obY(a0)
0000D17C 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000D182 6600                       		bne.s	loc_B07A
0000D184 4A28 0035                  		tst.b	$35(a0)
0000D188 6600                       		bne.s	loc_B07A
0000D18A 117C 0001 0035             		move.b	#1,$35(a0)
0000D190 6100 0000                  		bsr.w	FindNextFreeObj
0000D194 6600                       		bne.s	loc_B07A
0000D196 12BC 0000                  		move.b	#id_GrassFire,0(a1) ; load sitting flame object
0000D19A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D1A0 3368 002C 002C             		move.w	lgrass_origY(a0),lgrass_origY(a1)
0000D1A6 5069 002C                  		addq.w	#8,lgrass_origY(a1)
0000D1AA 5769 002C                  		subq.w	#3,lgrass_origY(a1)
0000D1AE 0469 0040 0008             		subi.w	#$40,obX(a1)
0000D1B4 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000D1BA 2348 0038                  		move.l	a0,$38(a1)
0000D1BE 2448                       		movea.l	a0,a2
0000D1C0 6100                       		bsr.s	sub_B09C
0000D1C2                            
0000D1C2                            loc_B07A:
0000D1C2 7400                       		moveq	#0,d2
0000D1C4 45E8 0036                  		lea	$36(a0),a2
0000D1C8 141A                       		move.b	(a2)+,d2
0000D1CA 5302                       		subq.b	#1,d2
0000D1CC 6500                       		bcs.s	locret_B09A
0000D1CE                            
0000D1CE                            loc_B086:
0000D1CE 7000                       		moveq	#0,d0
0000D1D0 101A                       		move.b	(a2)+,d0
0000D1D2 ED48                       		lsl.w	#6,d0
0000D1D4 0640 D000                  		addi.w	#$D000,d0
0000D1D8 3240                       		movea.w	d0,a1
0000D1DA 3341 003C                  		move.w	d1,$3C(a1)
0000D1DE 51CA FFEE                  		dbf	d2,loc_B086
0000D1E2                            
0000D1E2                            locret_B09A:
0000D1E2 4E75                       		rts	
0000D1E4                            
0000D1E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D1E4                            
0000D1E4                            
0000D1E4                            sub_B09C:
0000D1E4 45EA 0036                  		lea	$36(a2),a2
0000D1E8 7000                       		moveq	#0,d0
0000D1EA 1012                       		move.b	(a2),d0
0000D1EC 5212                       		addq.b	#1,(a2)
0000D1EE 45F2 0001                  		lea	1(a2,d0.w),a2
0000D1F2 3009                       		move.w	a1,d0
0000D1F4 0440 D000                  		subi.w	#$D000,d0
0000D1F8 EC48                       		lsr.w	#6,d0
0000D1FA 0240 007F                  		andi.w	#$7F,d0
0000D1FE 1480                       		move.b	d0,(a2)
0000D200 4E75                       		rts	
0000D202                            ; End of function sub_B09C
0000D202                            
0000D202                            ; ===========================================================================
0000D202                            
0000D202                            LGrass_ChkDel:
0000D202 4A28 0035                  		tst.b	$35(a0)
0000D206 6700                       		beq.s	loc_B0C6
0000D208 4A28 0001                  		tst.b	obRender(a0)
0000D20C 6A00                       		bpl.s	LGrass_DelFlames
0000D20E                            
0000D20E                            loc_B0C6:
0000D22C 4E75                       		rts	
0000D22E                            ; ===========================================================================
0000D22E                            
0000D22E                            LGrass_DelFlames:
0000D22E 7400                       		moveq	#0,d2
0000D230                            
0000D230                            loc_B0E8:
0000D230 45E8 0036                  		lea	$36(a0),a2
0000D234 1412                       		move.b	(a2),d2
0000D236 421A                       		clr.b	(a2)+
0000D238 5302                       		subq.b	#1,d2
0000D23A 6500                       		bcs.s	locret_B116
0000D23C                            
0000D23C                            loc_B0F4:
0000D23C 7000                       		moveq	#0,d0
0000D23E 1012                       		move.b	(a2),d0
0000D240 421A                       		clr.b	(a2)+
0000D242 ED48                       		lsl.w	#6,d0
0000D244 0640 D000                  		addi.w	#$D000,d0
0000D248 3240                       		movea.w	d0,a1
0000D24A 6100 0000                  		bsr.w	DeleteChild
0000D24E 51CA FFEC                  		dbf	d2,loc_B0F4
0000D252 117C 0000 0035             		move.b	#0,$35(a0)
0000D258 117C 0000 0034             		move.b	#0,$34(a0)
0000D25E                            
0000D25E                            locret_B116:
0000D25E 4E75                       		rts	
0000D260                            ; ===========================================================================
0000D260                            ; ---------------------------------------------------------------------------
0000D260                            ; Collision data for large moving platforms (MZ)
0000D260                            ; ---------------------------------------------------------------------------
0000D260                            LGrass_Data1:	incbin	"misc\mz_pfm1.bin"
0000D2AC                            		even
0000D2AC                            LGrass_Data2:	incbin	"misc\mz_pfm2.bin"
0000D2D8                            		even
0000D2D8                            LGrass_Data3:	incbin	"misc\mz_pfm3.bin"
0000D324                            		even
0000D324                            		even
0000D324                            		include	"_incObj\35 Burning Grass.asm"
0000D324                            ; ---------------------------------------------------------------------------
0000D324                            ; Object 35 - fireball that sits on the	floor (MZ)
0000D324                            ; (appears when	you walk on sinking platforms)
0000D324                            ; ---------------------------------------------------------------------------
0000D324                            
0000D324                            GrassFire:
0000D324 7000                       		moveq	#0,d0
0000D326 1028 0024                  		move.b	obRoutine(a0),d0
0000D32A 323B 0000                  		move.w	GFire_Index(pc,d0.w),d1
0000D32E 4EFB 1000                  		jmp	GFire_Index(pc,d1.w)
0000D332                            ; ===========================================================================
0000D332 0000                       GFire_Index:	dc.w GFire_Main-GFire_Index
0000D334 0000                       		dc.w loc_B238-GFire_Index
0000D336 0000                       		dc.w GFire_Move-GFire_Index
0000D338                            
0000D338 =0000002A                  gfire_origX:	equ $2A
0000D338                            ; ===========================================================================
0000D338                            
0000D338                            GFire_Main:	; Routine 0
0000D338 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D33C 217C 0000 0000 0004        		move.l	#Map_Fire,obMap(a0)
0000D344 317C 0345 0002             		move.w	#$345,obGfx(a0)
0000D34A 3168 0008 002A             		move.w	obX(a0),gfire_origX(a0)
0000D350 117C 0004 0001             		move.b	#4,obRender(a0)
0000D356 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000D35C 117C 008B 0020             		move.b	#$8B,obColType(a0)
0000D362 117C 0008 0014             		move.b	#8,obActWid(a0)
0000D372 4A28 0028                  		tst.b	obSubtype(a0)
0000D376 6700                       		beq.s	loc_B238
0000D378 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D37C 6000 0000                  		bra.w	GFire_Move
0000D380                            ; ===========================================================================
0000D380                            
0000D380                            loc_B238:	; Routine 2
0000D380 2268 0030                  		movea.l	$30(a0),a1
0000D384 3228 0008                  		move.w	obX(a0),d1
0000D388 9268 002A                  		sub.w	gfire_origX(a0),d1
0000D38C 0641 000C                  		addi.w	#$C,d1
0000D390 3001                       		move.w	d1,d0
0000D392 E248                       		lsr.w	#1,d0
0000D394 1031 0000                  		move.b	(a1,d0.w),d0
0000D398 4440                       		neg.w	d0
0000D39A D068 002C                  		add.w	$2C(a0),d0
0000D39E 3400                       		move.w	d0,d2
0000D3A0 D068 003C                  		add.w	$3C(a0),d0
0000D3A4 3140 000C                  		move.w	d0,obY(a0)
0000D3A8 0C41 0084                  		cmpi.w	#$84,d1
0000D3AC 6400                       		bcc.s	loc_B2B0
0000D3AE 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000D3B6 0C41 0080                  		cmpi.w	#$80,d1
0000D3BA 6400                       		bcc.s	loc_B2B0
0000D3BC 2028 0008                  		move.l	obX(a0),d0
0000D3C0 0680 0008 0000             		addi.l	#$80000,d0
0000D3C6 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000D3CC 6600                       		bne.s	loc_B2B0
0000D3CE 6100 0000                  		bsr.w	FindNextFreeObj
0000D3D2 6600                       		bne.s	loc_B2B0
0000D3D4 12BC 0000                  		move.b	#id_GrassFire,0(a1)
0000D3D8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D3DE 3342 002C                  		move.w	d2,$2C(a1)
0000D3E2 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000D3E8 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000D3EE 2468 0038                  		movea.l	$38(a0),a2
0000D3F2 6100 FDF0                  		bsr.w	sub_B09C
0000D3F6                            
0000D3F6                            loc_B2B0:
0000D3F6 6000                       		bra.s	GFire_Animate
0000D3F8                            ; ===========================================================================
0000D3F8                            
0000D3F8                            GFire_Move:	; Routine 4
0000D3F8 3028 002C                  		move.w	$2C(a0),d0
0000D3FC D068 003C                  		add.w	$3C(a0),d0
0000D400 3140 000C                  		move.w	d0,obY(a0)
0000D404                            
0000D404                            GFire_Animate:
0000D404 43F9 0000 0000             		lea	(Ani_GFire).l,a1
0000D40A 6100 F456                  		bsr.w	AnimateSprite
0000D40E 6000 0000                  		bra.w	DisplaySprite
0000D40E 6000 0000                  		bra.w	DisplaySprite
0000D412                            		include	"_anim\Burning Grass.asm"
0000D412                            ; ---------------------------------------------------------------------------
0000D412                            ; Animation script - burning grass that sits on the floor (MZ)
0000D412                            ; ---------------------------------------------------------------------------
0000D412 0000                       Ani_GFire:	dc.w @burn-Ani_GFire
0000D414 0500 2001 21FF             @burn:		dc.b 5,	0, $20,	1, $21,	afEnd
0000D41A                            		even
0000D41A                            		even
0000D41A                            Map_LGrass:	include	"_maps\MZ Large Grassy Platforms.asm"
0000D41A                            ; ---------------------------------------------------------------------------
0000D41A                            ; Sprite mappings - large moving grass-covered platforms (MZ)
0000D41A                            ; ---------------------------------------------------------------------------
0000D41A                            Map_LGrass_internal:
0000D41A 0000                       		dc.w @wide-Map_LGrass_internal
0000D41C 0000                       		dc.w @sloped-Map_LGrass_internal
0000D41E 0000                       		dc.w @narrow-Map_LGrass_internal
0000D420 0D                         @wide:		dc.b $D
0000D421 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0 ; wide platform
0000D426 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000D42B 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D430 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000D435 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000D43A F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D43F D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000D444 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000D449 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000D44E F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D453 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000D458 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000D45D F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000D462 0A                         @sloped:	dc.b $A
0000D463 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0 ; sloped platform (catches fire)
0000D468 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000D46D 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D472 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000D477 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000D47C F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D481 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000D486 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000D48B C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000D490 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000D495 06                         @narrow:	dc.b 6
0000D496 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0 ; narrow platform
0000D49B F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D4A0 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000D4A5 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000D4AA F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D4AF 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000D4B4                            		even
0000D4B4                            		even
0000D4B4                            Map_Fire:	include	"_maps\Fireballs.asm"
0000D4B4                            ; --------------------------------------------------------------------------------
0000D4B4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D4B4                            ; --------------------------------------------------------------------------------
0000D4B4                            
0000D4B4                            SME_gyvTV:	
0000D4B4 0000 0000                  		dc.w SME_gyvTV_C-SME_gyvTV, SME_gyvTV_12-SME_gyvTV	
0000D4B8 0000 0000                  		dc.w SME_gyvTV_18-SME_gyvTV, SME_gyvTV_1E-SME_gyvTV	
0000D4BC 0000 0000                  		dc.w SME_gyvTV_24-SME_gyvTV, SME_gyvTV_2A-SME_gyvTV	
0000D4C0 01                         SME_gyvTV_C:	dc.b 1	
0000D4C1 E807 6000 F8               		dc.b $E8, 7, $60, 0, $F8	
0000D4C6 01                         SME_gyvTV_12:	dc.b 1	
0000D4C7 E807 6008 F8               		dc.b $E8, 7, $60, 8, $F8	
0000D4CC 01                         SME_gyvTV_18:	dc.b 1	
0000D4CD F006 6010 F8               		dc.b $F0, 6, $60, $10, $F8	
0000D4D2 01                         SME_gyvTV_1E:	dc.b 1	
0000D4D3 F80D 6016 E8               		dc.b $F8, $D, $60, $16, $E8	
0000D4D8 01                         SME_gyvTV_24:	dc.b 1	
0000D4D9 F80D 601E E8               		dc.b $F8, $D, $60, $1E, $E8	
0000D4DE 01                         SME_gyvTV_2A:	dc.b 1	
0000D4DF F809 6026 F0               		dc.b $F8, 9, $60, $26, $F0	
0000D4E4                            		even
0000D4E4                            		even
0000D4E4                            		include	"_incObj\30 MZ Large Green Glass Blocks.asm"
0000D4E4                            ; ---------------------------------------------------------------------------
0000D4E4                            ; Object 30 - large green glass blocks (MZ)
0000D4E4                            ; ---------------------------------------------------------------------------
0000D4E4                            
0000D4E4                            GlassBlock:
0000D4E4 7000                       		moveq	#0,d0
0000D4E6 1028 0024                  		move.b	obRoutine(a0),d0
0000D4EA 323B 0000                  		move.w	Glass_Index(pc,d0.w),d1
0000D4EE 4EBB 1000                  		jsr	Glass_Index(pc,d1.w)
0000D510 6000 0000                  		bra.w	DisplaySprite
0000D514                            ; ===========================================================================
0000D514                            
0000D514                            Glass_Delete:
0000D514 6000 0000                  		bra.w	DeleteObject
0000D518                            ; ===========================================================================
0000D518 0000                       Glass_Index:	dc.w Glass_Main-Glass_Index
0000D51A 0000                       		dc.w Glass_Block012-Glass_Index
0000D51C 0000                       		dc.w Glass_Reflect012-Glass_Index
0000D51E 0000                       		dc.w Glass_Block34-Glass_Index
0000D520 0000                       		dc.w Glass_Reflect34-Glass_Index
0000D522                            
0000D522 =00000032                  glass_dist:	equ $32		; distance block moves when switch is pressed
0000D522 =0000003C                  glass_parent:	equ $3C		; address of parent object
0000D522                            
0000D522 0200 00                    Glass_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000D525 0400 01                    		dc.b 4,	0, 1
0000D528 0600 02                    Glass_Vars2:	dc.b 6,	0, 2
0000D52B 0800 01                    		dc.b 8,	0, 1
0000D52E                            ; ===========================================================================
0000D52E                            
0000D52E                            Glass_Main:	; Routine 0
0000D52E 45F9 0000 D522             		lea	(Glass_Vars1).l,a2
0000D534 7201                       		moveq	#1,d1
0000D536 117C 0048 0016             		move.b	#$48,obHeight(a0)
0000D53C 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object type 0/1/2 ?
0000D542 6500                       		bcs.s	@IsType012	; if yes, branch
0000D544                            
0000D544 45F9 0000 D528             		lea	(Glass_Vars2).l,a2
0000D54A 7201                       		moveq	#1,d1
0000D54C 117C 0038 0016             		move.b	#$38,obHeight(a0)
0000D552                            
0000D552                            	@IsType012:
0000D552 2248                       		movea.l	a0,a1
0000D554 6000                       		bra.s	@Load		; load main object
0000D556                            ; ===========================================================================
0000D556                            
0000D556                            	@Repeat:
0000D556 6100 0000                  		bsr.w	FindNextFreeObj
0000D55A 6600                       		bne.s	@Fail
0000D55C                            
0000D55C                            @Load:
0000D55C 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D560 12BC 0000                  		move.b	#id_GlassBlock,0(a1)
0000D564 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D56A 101A                       		move.b	(a2)+,d0
0000D56C 4880                       		ext.w	d0
0000D56E D068 000C                  		add.w	obY(a0),d0
0000D572 3340 000C                  		move.w	d0,obY(a1)
0000D576 237C 0000 0000 0004        		move.l	#Map_Glass,obMap(a1)
0000D57E 337C C38E 0002             		move.w	#$C38E,obGfx(a1)
0000D584 137C 0004 0001             		move.b	#4,obRender(a1)
0000D58A 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D590 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D596 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000D59C 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D5A2 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D5A6 2348 003C                  		move.l	a0,glass_parent(a1)
0000D5AA 51C9 FFAA                  		dbf	d1,@Repeat	; repeat once to load "reflection object"
0000D5AE                            
0000D5AE 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D5B4 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D5BA 5029 0028                  		addq.b	#8,obSubtype(a1)
0000D5BE 0229 000F 0028             		andi.b	#$F,obSubtype(a1)
0000D5C4                            
0000D5C4                            	@Fail:
0000D5C4 317C 0090 0032             		move.w	#$90,glass_dist(a0)
0000D5CA 08E8 0004 0001             		bset	#4,obRender(a0)
0000D5D0                            
0000D5D0                            Glass_Block012:	; Routine 2
0000D5D0 6100 0000                  		bsr.w	Glass_Types
0000D5D4 323C 002B                  		move.w	#$2B,d1
0000D5D8 343C 0048                  		move.w	#$48,d2
0000D5DC 363C 0049                  		move.w	#$49,d3
0000D5E0 3828 0008                  		move.w	obX(a0),d4
0000D5E4 6000 0000                  		bra.w	SolidObject
0000D5E8                            ; ===========================================================================
0000D5E8                            
0000D5E8                            Glass_Reflect012:
0000D5E8                            		; Routine 4
0000D5E8 2268 003C                  		movea.l	$3C(a0),a1
0000D5EC 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D5F2 6000 0000                  		bra.w	Glass_Types
0000D5F6                            ; ===========================================================================
0000D5F6                            
0000D5F6                            Glass_Block34:	; Routine 6
0000D5F6 6100 0000                  		bsr.w	Glass_Types
0000D5FA 323C 002B                  		move.w	#$2B,d1
0000D5FE 343C 0038                  		move.w	#$38,d2
0000D602 363C 0039                  		move.w	#$39,d3
0000D606 3828 0008                  		move.w	obX(a0),d4
0000D60A 6000 0000                  		bra.w	SolidObject
0000D60E                            ; ===========================================================================
0000D60E                            
0000D60E                            Glass_Reflect34:
0000D60E                            		; Routine 8
0000D60E 2268 003C                  		movea.l	$3C(a0),a1
0000D612 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D618 3169 000C 0030             		move.w	obY(a1),$30(a0)
0000D61E 6000 0000                  		bra.w	Glass_Types
0000D622                            
0000D622                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D622                            
0000D622                            
0000D622                            Glass_Types:
0000D622 7000                       		moveq	#0,d0
0000D624 1028 0028                  		move.b	obSubtype(a0),d0
0000D628 0240 0007                  		andi.w	#7,d0
0000D62C D040                       		add.w	d0,d0
0000D62E 323B 0000                  		move.w	Glass_TypeIndex(pc,d0.w),d1
0000D632 4EFB 1000                  		jmp	Glass_TypeIndex(pc,d1.w)
0000D636                            ; End of function Glass_Types
0000D636                            
0000D636                            ; ===========================================================================
0000D636 0000                       Glass_TypeIndex:dc.w Glass_Type00-Glass_TypeIndex
0000D638 0000                       		dc.w Glass_Type01-Glass_TypeIndex
0000D63A 0000                       		dc.w Glass_Type02-Glass_TypeIndex
0000D63C 0000                       		dc.w Glass_Type03-Glass_TypeIndex
0000D63E 0000                       		dc.w Glass_Type04-Glass_TypeIndex
0000D640                            ; ===========================================================================
0000D640                            
0000D640                            Glass_Type00:
0000D640 4E75                       		rts	
0000D642                            ; ===========================================================================
0000D642                            
0000D642                            Glass_Type01:
0000D642 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D646 323C 0040                  		move.w	#$40,d1
0000D64A 6000                       		bra.s	loc_B514
0000D64C                            ; ===========================================================================
0000D64C                            
0000D64C                            Glass_Type02:
0000D64C 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D650 323C 0040                  		move.w	#$40,d1
0000D654 4440                       		neg.w	d0
0000D656 D041                       		add.w	d1,d0
0000D658                            
0000D658                            loc_B514:
0000D658 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D65E 6700                       		beq.s	loc_B526
0000D660 4440                       		neg.w	d0
0000D662 D041                       		add.w	d1,d0
0000D664 E208                       		lsr.b	#1,d0
0000D666 0640 0020                  		addi.w	#$20,d0
0000D66A                            
0000D66A                            loc_B526:
0000D66A 6000 0000                  		bra.w	loc_B5EE
0000D66E                            ; ===========================================================================
0000D66E                            
0000D66E                            Glass_Type03:
0000D66E 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D674 6700                       		beq.s	loc_B53E
0000D676 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D67A 0440 0010                  		subi.w	#$10,d0
0000D67E 6000 0000                  		bra.w	loc_B5EE
0000D682                            ; ===========================================================================
0000D682                            
0000D682                            loc_B53E:
0000D682 0828 0003 0022             		btst	#3,obStatus(a0)
0000D688 6600                       		bne.s	loc_B54E
0000D68A 08A8 0000 0034             		bclr	#0,$34(a0)
0000D690 6000                       		bra.s	loc_B582
0000D692                            ; ===========================================================================
0000D692                            
0000D692                            loc_B54E:
0000D692 4A28 0034                  		tst.b	$34(a0)
0000D696 6600                       		bne.s	loc_B582
0000D698 117C 0001 0034             		move.b	#1,$34(a0)
0000D69E 08E8 0000 0035             		bset	#0,$35(a0)
0000D6A4 6700                       		beq.s	loc_B582
0000D6A6 08E8 0007 0034             		bset	#7,$34(a0)
0000D6AC 317C 0010 0036             		move.w	#$10,$36(a0)
0000D6B2 117C 000A 0038             		move.b	#$A,$38(a0)
0000D6B8 0C68 0040 0032             		cmpi.w	#$40,glass_dist(a0)
0000D6BE 6600                       		bne.s	loc_B582
0000D6C0 317C 0040 0036             		move.w	#$40,$36(a0)
0000D6C6                            
0000D6C6                            loc_B582:
0000D6C6 4A28 0034                  		tst.b	$34(a0)
0000D6CA 6A00                       		bpl.s	loc_B5AA
0000D6CC 4A28 0038                  		tst.b	$38(a0)
0000D6D0 6700                       		beq.s	loc_B594
0000D6D2 5328 0038                  		subq.b	#1,$38(a0)
0000D6D6 6600                       		bne.s	loc_B5AA
0000D6D8                            
0000D6D8                            loc_B594:
0000D6D8 4A68 0032                  		tst.w	glass_dist(a0)
0000D6DC 6700                       		beq.s	loc_B5A4
0000D6DE 5368 0032                  		subq.w	#1,glass_dist(a0)
0000D6E2 5368 0036                  		subq.w	#1,$36(a0)
0000D6E6 6600                       		bne.s	loc_B5AA
0000D6E8                            
0000D6E8                            loc_B5A4:
0000D6E8 08A8 0007 0034             		bclr	#7,$34(a0)
0000D6EE                            
0000D6EE                            loc_B5AA:
0000D6EE 3028 0032                  		move.w	glass_dist(a0),d0
0000D6F2 6000                       		bra.s	loc_B5EE
0000D6F4                            ; ===========================================================================
0000D6F4                            
0000D6F4                            Glass_Type04:
0000D6F4 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D6FA 6700                       		beq.s	Glass_ChkSwitch
0000D6FC 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D700 0440 0010                  		subi.w	#$10,d0
0000D704 6000                       		bra.s	loc_B5EE
0000D706                            ; ===========================================================================
0000D706                            
0000D706                            Glass_ChkSwitch:
0000D706 4A28 0034                  		tst.b	$34(a0)
0000D70A 6600                       		bne.s	loc_B5E0
0000D70C 45F8 F7E0                  		lea	(f_switch).w,a2
0000D710 7000                       		moveq	#0,d0
0000D712 1028 0028                  		move.b	obSubtype(a0),d0 ; load object type number
0000D716 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000D718 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000D71C 6700                       		beq.s	loc_B5EA	; if not, branch
0000D71E 117C 0001 0034             		move.b	#1,$34(a0)
0000D724                            
0000D724                            loc_B5E0:
0000D724 4A68 0032                  		tst.w	glass_dist(a0)
0000D728 6700                       		beq.s	loc_B5EA
0000D72A 5568 0032                  		subq.w	#2,glass_dist(a0)
0000D72E                            
0000D72E                            loc_B5EA:
0000D72E 3028 0032                  		move.w	glass_dist(a0),d0
0000D732                            
0000D732                            loc_B5EE:
0000D732 3228 0030                  		move.w	$30(a0),d1
0000D736 9240                       		sub.w	d0,d1
0000D738 3141 000C                  		move.w	d1,obY(a0)
0000D73C 4E75                       		rts	
0000D73C 4E75                       		rts	
0000D73E                            Map_Glass:	include	"_maps\MZ Large Green Glass Blocks.asm"
0000D73E                            ; --------------------------------------------------------------------------------
0000D73E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D73E                            ; --------------------------------------------------------------------------------
0000D73E                            
0000D73E                            SME_NEyTf:	
0000D73E 0000 0000                  		dc.w SME_NEyTf_6-SME_NEyTf, SME_NEyTf_43-SME_NEyTf	
0000D742 0000                       		dc.w SME_NEyTf_4E-SME_NEyTf	
0000D744 0C                         SME_NEyTf_6:	dc.b $C	
0000D745 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0	
0000D74A B80C 0800 00               		dc.b $B8, $C, 8, 0, 0	
0000D74F C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0	
0000D754 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0	
0000D759 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0	
0000D75E E00F 0804 00               		dc.b $E0, $F, 8, 4, 0	
0000D763 000F 0004 E0               		dc.b 0, $F, 0, 4, $E0	
0000D768 000F 0804 00               		dc.b 0, $F, 8, 4, 0	
0000D76D 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0	
0000D772 200F 0804 00               		dc.b $20, $F, 8, 4, 0	
0000D777 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0	
0000D77C 400C 1800 00               		dc.b $40, $C, $18, 0, 0	
0000D781 02                         SME_NEyTf_43:	dc.b 2	
0000D782 0806 6014 F0               		dc.b 8, 6, $60, $14, $F0	
0000D787 0006 6014 00               		dc.b 0, 6, $60, $14, 0	
0000D78C 0A                         SME_NEyTf_4E:	dc.b $A	
0000D78D C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0	
0000D792 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0	
0000D797 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0	
0000D79C D00F 0804 00               		dc.b $D0, $F, 8, 4, 0	
0000D7A1 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0	
0000D7A6 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0	
0000D7AB 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0	
0000D7B0 100F 0804 00               		dc.b $10, $F, 8, 4, 0	
0000D7B5 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0	
0000D7BA 300C 1800 00               		dc.b $30, $C, $18, 0, 0	
0000D7C0 00                         		even
0000D7C0 00                         		even
0000D7C0                            		include	"_incObj\31 Chained Stompers.asm"
0000D7C0                            ; ---------------------------------------------------------------------------
0000D7C0                            ; Object 31 - stomping metal blocks on chains (MZ)
0000D7C0                            ; ---------------------------------------------------------------------------
0000D7C0                            
0000D7C0                            ChainStomp:
0000D7C0 7000                       		moveq	#0,d0
0000D7C2 1028 0024                  		move.b	obRoutine(a0),d0
0000D7C6 323B 0000                  		move.w	CStom_Index(pc,d0.w),d1
0000D7CA 4EFB 1000                  		jmp	CStom_Index(pc,d1.w)
0000D7CE                            ; ===========================================================================
0000D7CE 0000                       CStom_Index:	dc.w CStom_Main-CStom_Index
0000D7D0 0000                       		dc.w loc_B798-CStom_Index
0000D7D2 0000                       		dc.w loc_B7FE-CStom_Index
0000D7D4 0000                       		dc.w CStom_Display2-CStom_Index
0000D7D6 0000                       		dc.w loc_B7E2-CStom_Index
0000D7D8                            
0000D7D8 =0000003A                  CStom_switch:	equ $3A			; switch number for the current stomper
0000D7D8                            
0000D7D8 0000                       CStom_SwchNums:	dc.b 0,	0		; switch number, obj number
0000D7DA 0100                       		dc.b 1,	0
0000D7DC                            
0000D7DC 0200 00                    CStom_Var:	dc.b 2,	0, 0		; routine number, y-position, frame number
0000D7DF 041C 01                    		dc.b 4,	$1C, 1
0000D7E2 08CC 03                    		dc.b 8,	$CC, 3
0000D7E5 06F0 02                    		dc.b 6,	$F0, 2
0000D7E8                            
0000D7E8 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000D7EC 5000 7800                  		dc.w $5000, $7800
0000D7F0 3800 5800                  		dc.w $3800, $5800
0000D7F4 B800                       		dc.w $B800
0000D7F6                            ; ===========================================================================
0000D7F6                            
0000D7F6                            CStom_Main:	; Routine 0
0000D7F6 7000                       		moveq	#0,d0
0000D7F8 1028 0028                  		move.b	obSubtype(a0),d0
0000D7FC 6A00                       		bpl.s	loc_B6CE
0000D7FE 0240 007F                  		andi.w	#$7F,d0
0000D802 D040                       		add.w	d0,d0
0000D804 45FB 00D2                  		lea	CStom_SwchNums(pc,d0.w),a2
0000D808 115A 003A                  		move.b	(a2)+,CStom_switch(a0)
0000D80C 101A                       		move.b	(a2)+,d0
0000D80E 1140 0028                  		move.b	d0,obSubtype(a0)
0000D812                            
0000D812                            loc_B6CE:
0000D812 0200 000F                  		andi.b	#$F,d0
0000D816 D040                       		add.w	d0,d0
0000D818 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000D81C 4A40                       		tst.w	d0
0000D81E 6600                       		bne.s	loc_B6E0
0000D820 3142 0032                  		move.w	d2,$32(a0)
0000D824                            
0000D824                            loc_B6E0:
0000D824 45F9 0000 D7DC             		lea	(CStom_Var).l,a2
0000D82A 2248                       		movea.l	a0,a1
0000D82C 7203                       		moveq	#3,d1
0000D82E 6000                       		bra.s	CStom_MakeStomper
0000D830                            ; ===========================================================================
0000D830                            
0000D830                            CStom_Loop:
0000D830 6100 0000                  		bsr.w	FindNextFreeObj
0000D834 6600 0000                  		bne.w	CStom_SetSize
0000D838                            
0000D838                            CStom_MakeStomper:
0000D838 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D83C 12BC 0000                  		move.b	#id_ChainStomp,0(a1)
0000D840 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D846 101A                       		move.b	(a2)+,d0
0000D848 4880                       		ext.w	d0
0000D84A D068 000C                  		add.w	obY(a0),d0
0000D84E 3340 000C                  		move.w	d0,obY(a1)
0000D852 237C 0000 0000 0004        		move.l	#Map_CStom,obMap(a1)
0000D85A 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000D860 137C 0004 0001             		move.b	#4,obRender(a1)
0000D866 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D86C 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D872 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D878 3342 0034                  		move.w	d2,$34(a1)
0000D87C 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D882 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D886 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0000D88C 6600                       		bne.s	loc_B76A
0000D88E 5341                       		subq.w	#1,d1
0000D890 1028 0028                  		move.b	obSubtype(a0),d0
0000D894 0240 00F0                  		andi.w	#$F0,d0
0000D898 0C40 0020                  		cmpi.w	#$20,d0
0000D89C 679A                       		beq.s	CStom_MakeStomper
0000D89E 137C 0038 0014             		move.b	#$38,obActWid(a1)
0000D8A4 137C 0090 0020             		move.b	#$90,obColType(a1)
0000D8AA 5241                       		addq.w	#1,d1
0000D8AC                            
0000D8AC                            loc_B76A:
0000D8AC 2348 003C                  		move.l	a0,$3C(a1)
0000D8B0 51C9 FF7E                  		dbf	d1,CStom_Loop
0000D8B4                            
0000D8B4 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D8BA                            
0000D8BA                            CStom_SetSize:
0000D8BA 7000                       		moveq	#0,d0
0000D8BC 1028 0028                  		move.b	obSubtype(a0),d0
0000D8C0 E648                       		lsr.w	#3,d0
0000D8C2 0200 000E                  		andi.b	#$E,d0
0000D8C6 45FB 0000                  		lea	CStom_Var2(pc,d0.w),a2
0000D8CA 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000D8CE 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000D8D2 6000                       		bra.s	loc_B798
0000D8D4                            ; ===========================================================================
0000D8D4 3800                       CStom_Var2:	dc.b $38, 0		; width, frame number
0000D8D6 3009                       		dc.b $30, 9
0000D8D8 100A                       		dc.b $10, $A
0000D8DA                            ; ===========================================================================
0000D8DA                            
0000D8DA                            loc_B798:	; Routine 2
0000D8DA 6100 0000                  		bsr.w	CStom_Types
0000D8DE 31E8 000C F7A4             		move.w	obY(a0),(v_obj31ypos).w
0000D8E4 7200                       		moveq	#0,d1
0000D8E6 1228 0014                  		move.b	obActWid(a0),d1
0000D8EA 0641 000B                  		addi.w	#$B,d1
0000D8EE 343C 000C                  		move.w	#$C,d2
0000D8F2 363C 000D                  		move.w	#$D,d3
0000D8F6 3828 0008                  		move.w	obX(a0),d4
0000D8FA 6100 0000                  		bsr.w	SolidObject
0000D8FE 0828 0003 0022             		btst	#3,obStatus(a0)
0000D904 6700                       		beq.s	CStom_Display
0000D906 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D90C 6400                       		bcc.s	CStom_Display
0000D90E 2448                       		movea.l	a0,a2
0000D910 41F8 D000                  		lea	(v_player).w,a0
0000D914 4EB9 0000 0000             		jsr	(KillSonic).l
0000D91A 204A                       		movea.l	a2,a0
0000D91C                            
0000D91C                            CStom_Display:
0000D91C 6100 0000                  		bsr.w	DisplaySprite
0000D920 6000 0000                  		bra.w	CStom_ChkDel
0000D924                            ; ===========================================================================
0000D924                            
0000D924                            loc_B7E2:	; Routine 8
0000D924 117C 0080 0016             		move.b	#$80,obHeight(a0)
0000D92A 08E8 0004 0001             		bset	#4,obRender(a0)
0000D930 2268 003C                  		movea.l	$3C(a0),a1
0000D934 1029 0032                  		move.b	$32(a1),d0
0000D938 EA08                       		lsr.b	#5,d0
0000D93A 5600                       		addq.b	#3,d0
0000D93C 1140 001A                  		move.b	d0,obFrame(a0)
0000D940                            
0000D940                            loc_B7FE:	; Routine 4
0000D940 2268 003C                  		movea.l	$3C(a0),a1
0000D944 7000                       		moveq	#0,d0
0000D946 1029 0032                  		move.b	$32(a1),d0
0000D94A D068 0030                  		add.w	$30(a0),d0
0000D94E 3140 000C                  		move.w	d0,obY(a0)
0000D952                            
0000D952                            CStom_Display2:	; Routine 6
0000D952 6100 0000                  		bsr.w	DisplaySprite
0000D956                            
0000D956                            CStom_ChkDel:
0000D974 4E75                       		rts	
0000D976                            ; ===========================================================================
0000D976                            
0000D976                            CStom_Types:
0000D976 1028 0028                  		move.b	obSubtype(a0),d0
0000D97A 0240 000F                  		andi.w	#$F,d0
0000D97E D040                       		add.w	d0,d0
0000D980 323B 0000                  		move.w	CStom_TypeIndex(pc,d0.w),d1
0000D984 4EFB 1000                  		jmp	CStom_TypeIndex(pc,d1.w)
0000D988                            ; ===========================================================================
0000D988 0000                       CStom_TypeIndex:dc.w CStom_Type00-CStom_TypeIndex
0000D98A 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D98C 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D98E 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000D990 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D992 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000D994 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D996                            ; ===========================================================================
0000D996                            
0000D996                            CStom_Type00:
0000D996 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
0000D99A 7000                       		moveq	#0,d0
0000D99C 1028 003A                  		move.b	CStom_switch(a0),d0 ; move number 0 or 1 to d0
0000D9A0 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000D9A4 6700                       		beq.s	loc_B8A8	; if not, branch
0000D9A6 4A78 F7A4                  		tst.w	(v_obj31ypos).w
0000D9AA 6A00                       		bpl.s	loc_B872
0000D9AC 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D9B2 6700                       		beq.s	loc_B8A0
0000D9B4                            
0000D9B4                            loc_B872:
0000D9B4 4A68 0032                  		tst.w	$32(a0)
0000D9B8 6700                       		beq.s	loc_B8A0
0000D9BA 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000D9BE 0200 000F                  		andi.b	#$F,d0
0000D9C2 6600                       		bne.s	loc_B892
0000D9C4 4A28 0001                  		tst.b	1(a0)
0000D9C8 6A00                       		bpl.s	loc_B892
0000D9D4                            
0000D9D4                            loc_B892:
0000D9D4 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D9DA 6400                       		bcc.s	CStom_Restart
0000D9DC 317C 0000 0032             		move.w	#0,$32(a0)
0000D9E2                            
0000D9E2                            loc_B8A0:
0000D9E2 317C 0000 0012             		move.w	#0,obVelY(a0)
0000D9E8 6000                       		bra.s	CStom_Restart
0000D9EA                            ; ===========================================================================
0000D9EA                            
0000D9EA                            loc_B8A8:
0000D9EA 3228 0034                  		move.w	$34(a0),d1
0000D9EE B268 0032                  		cmp.w	$32(a0),d1
0000D9F2 6700                       		beq.s	CStom_Restart
0000D9F4 3028 0012                  		move.w	obVelY(a0),d0
0000D9F8 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000D9FE D168 0032                  		add.w	d0,$32(a0)
0000DA02 B268 0032                  		cmp.w	$32(a0),d1
0000DA06 6200                       		bhi.s	CStom_Restart
0000DA08 3141 0032                  		move.w	d1,$32(a0)
0000DA0C 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000DA12 4A28 0001                  		tst.b	obRender(a0)
0000DA16 6A00                       		bpl.s	CStom_Restart
0000DA22                            
0000DA22                            CStom_Restart:
0000DA22 7000                       		moveq	#0,d0
0000DA24 1028 0032                  		move.b	$32(a0),d0
0000DA28 D068 0030                  		add.w	$30(a0),d0
0000DA2C 3140 000C                  		move.w	d0,obY(a0)
0000DA30 4E75                       		rts	
0000DA32                            ; ===========================================================================
0000DA32                            
0000DA32                            CStom_Type01:
0000DA32 4A68 0036                  		tst.w	$36(a0)
0000DA36 6700                       		beq.s	loc_B938
0000DA38 4A68 0038                  		tst.w	$38(a0)
0000DA3C 6700                       		beq.s	loc_B902
0000DA3E 5368 0038                  		subq.w	#1,$38(a0)
0000DA42 6000                       		bra.s	loc_B97C
0000DA44                            ; ===========================================================================
0000DA44                            
0000DA44                            loc_B902:
0000DA44 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000DA48 0200 000F                  		andi.b	#$F,d0
0000DA4C 6600                       		bne.s	loc_B91C
0000DA4E 4A28 0001                  		tst.b	obRender(a0)
0000DA52 6A00                       		bpl.s	loc_B91C
0000DA5E                            
0000DA5E                            loc_B91C:
0000DA5E 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DA64 6400                       		bcc.s	loc_B97C
0000DA66 317C 0000 0032             		move.w	#0,$32(a0)
0000DA6C 317C 0000 0012             		move.w	#0,obVelY(a0)
0000DA72 317C 0000 0036             		move.w	#0,$36(a0)
0000DA78 6000                       		bra.s	loc_B97C
0000DA7A                            ; ===========================================================================
0000DA7A                            
0000DA7A                            loc_B938:
0000DA7A 3228 0034                  		move.w	$34(a0),d1
0000DA7E B268 0032                  		cmp.w	$32(a0),d1
0000DA82 6700                       		beq.s	loc_B97C
0000DA84 3028 0012                  		move.w	obVelY(a0),d0
0000DA88 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000DA8E D168 0032                  		add.w	d0,$32(a0)
0000DA92 B268 0032                  		cmp.w	$32(a0),d1
0000DA96 6200                       		bhi.s	loc_B97C
0000DA98 3141 0032                  		move.w	d1,$32(a0)
0000DA9C 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000DAA2 317C 0001 0036             		move.w	#1,$36(a0)
0000DAA8 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DAAE 4A28 0001                  		tst.b	obRender(a0)
0000DAB2 6A00                       		bpl.s	loc_B97C
0000DABE                            
0000DABE                            loc_B97C:
0000DABE 6000 FF62                  		bra.w	CStom_Restart
0000DAC2                            ; ===========================================================================
0000DAC2                            
0000DAC2                            CStom_Type03:
0000DAC2 3038 D008                  		move.w	(v_player+obX).w,d0
0000DAC6 9068 0008                  		sub.w	obX(a0),d0
0000DACA 6400                       		bcc.s	loc_B98C
0000DACC 4440                       		neg.w	d0
0000DACE                            
0000DACE                            loc_B98C:
0000DACE 0C40 0090                  		cmpi.w	#$90,d0
0000DAD2 6400                       		bcc.s	loc_B996
0000DAD4 5228 0028                  		addq.b	#1,obSubtype(a0)
0000DAD8                            
0000DAD8                            loc_B996:
0000DAD8 6000 FF48                  		bra.w	CStom_Restart
0000DAD8 6000 FF48                  		bra.w	CStom_Restart
0000DADC                            		include	"_incObj\45 Sideways Stomper.asm"
0000DADC                            ; ---------------------------------------------------------------------------
0000DADC                            ; Object 45 - spiked metal block from beta version (MZ)
0000DADC                            ; ---------------------------------------------------------------------------
0000DADC                            
0000DADC                            SideStomp:
0000DADC 7000                       		moveq	#0,d0
0000DADE 1028 0024                  		move.b	obRoutine(a0),d0
0000DAE2 323B 0000                  		move.w	SStom_Index(pc,d0.w),d1
0000DAE6 4EFB 1000                  		jmp	SStom_Index(pc,d1.w)
0000DAEA                            ; ===========================================================================
0000DAEA 0000                       SStom_Index:	dc.w SStom_Main-SStom_Index
0000DAEC 0000                       		dc.w SStom_Solid-SStom_Index
0000DAEE 0000                       		dc.w loc_BA8E-SStom_Index
0000DAF0 0000                       		dc.w SStom_Display-SStom_Index
0000DAF2 0000                       		dc.w SStom_Pole-SStom_Index
0000DAF4                            
0000DAF4                            		;	routine		frame
0000DAF4                            		;		 xpos
0000DAF4 0204 00                    SStom_Var:	dc.b	2,  	 4,	0	; main block
0000DAF7 04E4 01                    		dc.b	4,	-$1C,	1	; spikes
0000DAFA 0834 03                    		dc.b	8,	 $34,	3	; pole
0000DAFD 0628 02                    		dc.b	6,	 $28,	2	; wall bracket
0000DB00                            
0000DB00                            ;word_B9BE:	; Note that this indicates three subtypes
0000DB00 3800                       SStom_Len:	dc.w $3800	; short
0000DB02 A000                       		dc.w $A000	; long
0000DB04 5000                       		dc.w $5000	; medium
0000DB06                            ; ===========================================================================
0000DB06                            
0000DB06                            SStom_Main:	; Routine 0
0000DB06 7000                       		moveq	#0,d0
0000DB08 1028 0028                  		move.b	obSubtype(a0),d0
0000DB0C D040                       		add.w	d0,d0
0000DB0E 343B 00F0                  		move.w	SStom_Len(pc,d0.w),d2
0000DB12 45F9 0000 DAF4             		lea	(SStom_Var).l,a2
0000DB18 2248                       		movea.l	a0,a1
0000DB1A 7203                       		moveq	#3,d1
0000DB1C 6000                       		bra.s	@load
0000DB1E                            
0000DB1E                            	@loop:
0000DB1E 6100 0000                  		bsr.w	FindNextFreeObj
0000DB22 6600                       		bne.s	@fail
0000DB24                            
0000DB24                            	@load:
0000DB24 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000DB28 12BC 0000                  		move.b	#id_SideStomp,0(a1)
0000DB2C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000DB32 101A                       		move.b	(a2)+,d0
0000DB34 4880                       		ext.w	d0
0000DB36 D068 0008                  		add.w	obX(a0),d0
0000DB3A 3340 0008                  		move.w	d0,obX(a1)
0000DB3E 237C 0000 0000 0004        		move.l	#Map_SStom,obMap(a1)
0000DB46 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000DB4C 137C 0004 0001             		move.b	#4,obRender(a1)
0000DB52 3369 0008 0030             		move.w	obX(a1),$30(a1)
0000DB58 3368 0008 003A             		move.w	obX(a0),$3A(a1)
0000DB5E 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000DB64 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000DB6A 3342 0034                  		move.w	d2,$34(a1)
0000DB6E 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000DB74 0C12 0001                  		cmpi.b	#1,(a2)		; is subobject spikes?
0000DB78 6600                       		bne.s	@notspikes	; if not, branch
0000DB7A 137C 0091 0020             		move.b	#$91,obColType(a1) ; use harmful collision type
0000DB80                            
0000DB80                            	@notspikes:
0000DB80 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000DB84 2348 003C                  		move.l	a0,$3C(a1)
0000DB88 51C9 FF94                  		dbf	d1,@loop	; repeat 3 times
0000DB8C                            
0000DB8C 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000DB92                            
0000DB92                            	@fail:
0000DB92 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DB98                            
0000DB98                            SStom_Solid:	; Routine 2
0000DB98 3F28 0008                  		move.w	obX(a0),-(sp)
0000DB9C 6100 0000                  		bsr.w	SStom_Move
0000DBA0 323C 0017                  		move.w	#$17,d1
0000DBA4 343C 0020                  		move.w	#$20,d2
0000DBA8 363C 0020                  		move.w	#$20,d3
0000DBAC 381F                       		move.w	(sp)+,d4
0000DBAE 6100 0000                  		bsr.w	SolidObject
0000DBB2 6100 0000                  		bsr.w	DisplaySprite
0000DBB6 6000 0000                  		bra.w	SStom_ChkDel
0000DBBA                            ; ===========================================================================
0000DBBA                            
0000DBBA                            SStom_Pole:	; Routine 8
0000DBBA 2268 003C                  		movea.l	$3C(a0),a1
0000DBBE 1029 0032                  		move.b	$32(a1),d0
0000DBC2 0600 0010                  		addi.b	#$10,d0
0000DBC6 EA08                       		lsr.b	#5,d0
0000DBC8 5600                       		addq.b	#3,d0
0000DBCA 1140 001A                  		move.b	d0,obFrame(a0)
0000DBCE                            
0000DBCE                            loc_BA8E:	; Routine 4
0000DBCE 2268 003C                  		movea.l	$3C(a0),a1
0000DBD2 7000                       		moveq	#0,d0
0000DBD4 1029 0032                  		move.b	$32(a1),d0
0000DBD8 4440                       		neg.w	d0
0000DBDA D068 0030                  		add.w	$30(a0),d0
0000DBDE 3140 0008                  		move.w	d0,obX(a0)
0000DBE2                            
0000DBE2                            SStom_Display:	; Routine 6
0000DBE2 6100 0000                  		bsr.w	DisplaySprite
0000DBE6                            
0000DBE6                            SStom_ChkDel:
0000DC04 4E75                       		rts	
0000DC06                            
0000DC06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC06                            
0000DC06                            
0000DC06                            SStom_Move:
0000DC06 7000                       		moveq	#0,d0
0000DC08 1028 0028                  		move.b	obSubtype(a0),d0
0000DC0C D040                       		add.w	d0,d0
0000DC0E 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000DC12 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000DC16                            ; End of function SStom_Move
0000DC16                            
0000DC16                            ; ===========================================================================
0000DC16                            		; This indicates only two subtypes... that do the same thing
0000DC16                            		; Compare to SStom_Len. This breaks subtype 02
0000DC16 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000DC18 0000                       		dc.w loc_BADA-off_BAD6
0000DC1A                            ; ===========================================================================
0000DC1A                            
0000DC1A                            loc_BADA:
0000DC1A 4A68 0036                  		tst.w	$36(a0)
0000DC1E 6700                       		beq.s	loc_BB08
0000DC20 4A68 0038                  		tst.w	$38(a0)
0000DC24 6700                       		beq.s	loc_BAEC
0000DC26 5368 0038                  		subq.w	#1,$38(a0)
0000DC2A 6000                       		bra.s	loc_BB3C
0000DC2C                            ; ===========================================================================
0000DC2C                            
0000DC2C                            loc_BAEC:
0000DC2C 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DC32 6400                       		bcc.s	loc_BB3C
0000DC34 317C 0000 0032             		move.w	#0,$32(a0)
0000DC3A 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DC40 317C 0000 0036             		move.w	#0,$36(a0)
0000DC46 6000                       		bra.s	loc_BB3C
0000DC48                            ; ===========================================================================
0000DC48                            
0000DC48                            loc_BB08:
0000DC48 3228 0034                  		move.w	$34(a0),d1
0000DC4C B268 0032                  		cmp.w	$32(a0),d1
0000DC50 6700                       		beq.s	loc_BB3C
0000DC52 3028 0010                  		move.w	obVelX(a0),d0
0000DC56 0668 0070 0010             		addi.w	#$70,obVelX(a0)
0000DC5C D168 0032                  		add.w	d0,$32(a0)
0000DC60 B268 0032                  		cmp.w	$32(a0),d1
0000DC64 6200                       		bhi.s	loc_BB3C
0000DC66 3141 0032                  		move.w	d1,$32(a0)
0000DC6A 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DC70 317C 0001 0036             		move.w	#1,$36(a0)
0000DC76 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DC7C                            
0000DC7C                            loc_BB3C:
0000DC7C 7000                       		moveq	#0,d0
0000DC7E 1028 0032                  		move.b	$32(a0),d0
0000DC82 4440                       		neg.w	d0
0000DC84 D068 0030                  		add.w	$30(a0),d0
0000DC88 3140 0008                  		move.w	d0,obX(a0)
0000DC8C 4E75                       		rts	
0000DC8C 4E75                       		rts	
0000DC8E                            Map_CStom:	include	"_maps\Chained Stompers.asm"
0000DC8E                            ; ---------------------------------------------------------------------------
0000DC8E                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000DC8E                            ; ---------------------------------------------------------------------------
0000DC8E                            Map_CStom_internal:
0000DC8E 0000                       		dc.w @wideblock-Map_CStom_internal
0000DC90 0000                       		dc.w @spikes-Map_CStom_internal
0000DC92 0000                       		dc.w @ceiling-Map_CStom_internal
0000DC94 0000                       		dc.w @chain1-Map_CStom_internal
0000DC96 0000                       		dc.w @chain2-Map_CStom_internal
0000DC98 0000                       		dc.w @chain3-Map_CStom_internal
0000DC9A 0000                       		dc.w @chain4-Map_CStom_internal
0000DC9C 0000                       		dc.w @chain5-Map_CStom_internal
0000DC9E 0000                       		dc.w @chain5-Map_CStom_internal
0000DCA0 0000                       		dc.w @mediumblock-Map_CStom_internal
0000DCA2 0000                       		dc.w @smallblock-Map_CStom_internal
0000DCA4 05                         @wideblock:	dc.b 5
0000DCA5 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000DCAA F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000DCAF EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DCB4 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000DCB9 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000DCBE 05                         @spikes:	dc.b 5
0000DCBF F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000DCC4 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000DCC9 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000DCCE F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000DCD3 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000DCD8 01                         @ceiling:	dc.b 1
0000DCD9 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000DCDE 02                         @chain1:	dc.b 2
0000DCDF 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DCE4 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DCE9 04                         @chain2:	dc.b 4
0000DCEA E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DCEF F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DCF4 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DCF9 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DCFE 06                         @chain3:	dc.b 6
0000DCFF C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DD04 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DD09 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DD0E F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DD13 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DD18 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DD1D 08                         @chain4:	dc.b 8
0000DD1E A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DD23 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DD28 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DD2D D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DD32 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DD37 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DD3C 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DD41 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DD46 0A                         @chain5:	dc.b $A
0000DD47 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000DD4C 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000DD51 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DD56 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DD5B C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DD60 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DD65 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DD6A F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DD6F 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DD74 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DD79 05                         @mediumblock:	dc.b 5
0000DD7A F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000DD7F F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000DD84 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000DD89 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000DD8E EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DD93 01                         @smallblock:	dc.b 1
0000DD94 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000DD9A 00                         		even
0000DD9A 00                         		even
0000DD9A                            Map_SStom:	include	"_maps\Sideways Stomper.asm"
0000DD9A                            ; ---------------------------------------------------------------------------
0000DD9A                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000DD9A                            ; ---------------------------------------------------------------------------
0000DD9A                            Map_SStom_internal:
0000DD9A 0000                       		dc.w @block-Map_SStom_internal
0000DD9C 0000                       		dc.w @spikes-Map_SStom_internal
0000DD9E 0000                       		dc.w @wallbracket-Map_SStom_internal
0000DDA0 0000                       		dc.w @pole1-Map_SStom_internal
0000DDA2 0000                       		dc.w @pole2-Map_SStom_internal
0000DDA4 0000                       		dc.w @pole3-Map_SStom_internal
0000DDA6 0000                       		dc.w @pole4-Map_SStom_internal
0000DDA8 0000                       		dc.w @pole5-Map_SStom_internal
0000DDAA 0000                       		dc.w @pole5-Map_SStom_internal
0000DDAC 03                         @block:		dc.b 3
0000DDAD E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4 ; main metal block
0000DDB2 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000DDB7 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000DDBC 03                         @spikes:	dc.b 3
0000DDBD E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0 ; three spikes
0000DDC2 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000DDC7 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000DDCC 01                         @wallbracket:	dc.b 1
0000DDCD F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC ; thing holding it to the wall
0000DDD2 02                         @pole1:		dc.b 2
0000DDD3 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0 ; poles of various lengths
0000DDD8 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DDDD 04                         @pole2:		dc.b 4
0000DDDE F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DDE3 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DDE8 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DDED F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DDF2 06                         @pole3:		dc.b 6
0000DDF3 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DDF8 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DDFD F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DE02 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DE07 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DE0C F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DE11 08                         @pole4:		dc.b 8
0000DE12 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DE17 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DE1C F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DE21 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DE26 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DE2B F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DE30 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DE35 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DE3A 08                         @pole5:		dc.b 8		; Incorrect: this should be $A
0000DE3B F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DE40 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DE45 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DE4A F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DE4F F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DE54 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DE59 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DE5E F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DE63 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000DE68 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000DE6D                            		; @pole6 should be here, but it isn't...
0000DE6E 00                         		even
0000DE6E 00                         		even
0000DE6E                            
0000DE6E                            		include	"_incObj\32 Button.asm"
0000DE6E                            ; ---------------------------------------------------------------------------
0000DE6E                            ; Object 32 - buttons (MZ, SYZ, LZ, SBZ)
0000DE6E                            ; ---------------------------------------------------------------------------
0000DE6E                            
0000DE6E                            Button:
0000DE6E 7000                       		moveq	#0,d0
0000DE70 1028 0024                  		move.b	obRoutine(a0),d0
0000DE74 323B 0000                  		move.w	But_Index(pc,d0.w),d1
0000DE78 4EFB 1000                  		jmp	But_Index(pc,d1.w)
0000DE7C                            ; ===========================================================================
0000DE7C 0000                       But_Index:	dc.w But_Main-But_Index
0000DE7E 0000                       		dc.w But_Pressed-But_Index
0000DE80                            ; ===========================================================================
0000DE80                            
0000DE80                            But_Main:	; Routine 0
0000DE80 5428 0024                  		addq.b	#2,obRoutine(a0)
0000DE84 217C 0000 0000 0004        		move.l	#Map_But,obMap(a0)
0000DE8C 317C 4513 0002             		move.w	#$4513,obGfx(a0) ; MZ specific code
0000DE92 0C38 0002 FE10             		cmpi.b	#id_MZ,(v_zone).w ; is level Marble Zone?
0000DE98 6700                       		beq.s	But_IsMZ	; if yes, branch
0000DE9A                            
0000DE9A 317C 0513 0002             		move.w	#$513,obGfx(a0)	; SYZ, LZ and SBZ specific code
0000DEA0                            
0000DEA0                            	But_IsMZ:
0000DEA0 117C 0004 0001             		move.b	#4,obRender(a0)
0000DEA6 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DEAC 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000DEB2 5668 000C                  		addq.w	#3,obY(a0)
0000DEB6                            
0000DEB6                            But_Pressed:	; Routine 2
0000DEB6 4A28 0001                  		tst.b	obRender(a0)
0000DEBA 6A00                       		bpl.s	But_Display
0000DEBC 323C 001B                  		move.w	#$1B,d1
0000DEC0 343C 0005                  		move.w	#5,d2
0000DEC4 363C 0005                  		move.w	#5,d3
0000DEC8 3828 0008                  		move.w	obX(a0),d4
0000DECC 6100 0000                  		bsr.w	SolidObject
0000DED0 08A8 0000 001A             		bclr	#0,obFrame(a0)	; use "unpressed" frame
0000DED6 1028 0028                  		move.b	obSubtype(a0),d0
0000DEDA 0240 000F                  		andi.w	#$F,d0
0000DEDE 47F8 F7E0                  		lea	(f_switch).w,a3
0000DEE2 47F3 0000                  		lea	(a3,d0.w),a3
0000DEE6 7600                       		moveq	#0,d3
0000DEE8 0828 0006 0028             		btst	#6,obSubtype(a0)
0000DEEE 6700                       		beq.s	loc_BDB2
0000DEF0 7607                       		moveq	#7,d3
0000DEF2                            
0000DEF2                            loc_BDB2:
0000DEF2 4A28 0028                  		tst.b	obSubtype(a0)
0000DEF6 6A00                       		bpl.s	loc_BDBE
0000DEF8 6100 0000                  		bsr.w	But_MZBlock
0000DEFC 6600                       		bne.s	loc_BDC8
0000DEFE                            
0000DEFE                            loc_BDBE:
0000DEFE 4A28 0025                  		tst.b	ob2ndRout(a0)
0000DF02 6600                       		bne.s	loc_BDC8
0000DF04 0793                       		bclr	d3,(a3)
0000DF06 6000                       		bra.s	loc_BDDE
0000DF08                            ; ===========================================================================
0000DF08                            
0000DF08                            loc_BDC8:
0000DF08 4A13                       		tst.b	(a3)
0000DF0A 6600                       		bne.s	loc_BDD6
0000DF16                            
0000DF16                            loc_BDD6:
0000DF16 07D3                       		bset	d3,(a3)
0000DF18 08E8 0000 001A             		bset	#0,obFrame(a0)	; use "pressed"	frame
0000DF1E                            
0000DF1E                            loc_BDDE:
0000DF1E 0828 0005 0028             		btst	#5,obSubtype(a0)
0000DF24 6700                       		beq.s	But_Display
0000DF26 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000DF2A 6A00                       		bpl.s	But_Display
0000DF2C 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000DF32 0868 0001 001A             		bchg	#1,obFrame(a0)
0000DF38                            
0000DF38                            But_Display:
0000DF38 6100 0000                  		bsr.w	DisplaySprite
0000DF5A 4E75                       		rts	
0000DF5C                            ; ===========================================================================
0000DF5C                            
0000DF5C                            But_Delete:
0000DF5C 6100 0000                  		bsr.w	DeleteObject
0000DF60 4E75                       		rts	
0000DF62                            
0000DF62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF62                            
0000DF62                            
0000DF62                            But_MZBlock:
0000DF62 3F03                       		move.w	d3,-(sp)
0000DF64 3428 0008                  		move.w	obX(a0),d2
0000DF68 3628 000C                  		move.w	obY(a0),d3
0000DF6C 0442 0010                  		subi.w	#$10,d2
0000DF70 5143                       		subq.w	#8,d3
0000DF72 383C 0020                  		move.w	#$20,d4
0000DF76 3A3C 0010                  		move.w	#$10,d5
0000DF7A 43F8 D800                  		lea	(v_lvlobjspace).w,a1 ; begin checking object RAM
0000DF7E 3C3C 005F                  		move.w	#$5F,d6
0000DF82                            
0000DF82                            But_MZLoop:
0000DF82 4A29 0001                  		tst.b	obRender(a1)
0000DF86 6A00                       		bpl.s	loc_BE4E
0000DF88 0C11 0000                  		cmpi.b	#id_PushBlock,(a1) ; is the object a green MZ block?
0000DF8C 6700                       		beq.s	loc_BE5E	; if yes, branch
0000DF8E                            
0000DF8E                            loc_BE4E:
0000DF8E 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000DF92 51CE FFEE                  		dbf	d6,But_MZLoop	; repeat $5F times
0000DF96                            
0000DF96 361F                       		move.w	(sp)+,d3
0000DF98 7000                       		moveq	#0,d0
0000DF9A                            
0000DF9A                            locret_BE5A:
0000DF9A 4E75                       		rts	
0000DF9C                            ; ===========================================================================
0000DF9C 1010                       But_MZData:	dc.b $10, $10
0000DF9E                            ; ===========================================================================
0000DF9E                            
0000DF9E                            loc_BE5E:
0000DF9E 7001                       		moveq	#1,d0
0000DFA0 0240 003F                  		andi.w	#$3F,d0
0000DFA4 D040                       		add.w	d0,d0
0000DFA6 45FB 00F2                  		lea	But_MZData-2(pc,d0.w),a2
0000DFAA 121A                       		move.b	(a2)+,d1
0000DFAC 4881                       		ext.w	d1
0000DFAE 3029 0008                  		move.w	obX(a1),d0
0000DFB2 9041                       		sub.w	d1,d0
0000DFB4 9042                       		sub.w	d2,d0
0000DFB6 6400                       		bcc.s	loc_BE80
0000DFB8 D241                       		add.w	d1,d1
0000DFBA D041                       		add.w	d1,d0
0000DFBC 6500                       		bcs.s	loc_BE84
0000DFBE 60CE                       		bra.s	loc_BE4E
0000DFC0                            ; ===========================================================================
0000DFC0                            
0000DFC0                            loc_BE80:
0000DFC0 B044                       		cmp.w	d4,d0
0000DFC2 62CA                       		bhi.s	loc_BE4E
0000DFC4                            
0000DFC4                            loc_BE84:
0000DFC4 121A                       		move.b	(a2)+,d1
0000DFC6 4881                       		ext.w	d1
0000DFC8 3029 000C                  		move.w	obY(a1),d0
0000DFCC 9041                       		sub.w	d1,d0
0000DFCE 9043                       		sub.w	d3,d0
0000DFD0 6400                       		bcc.s	loc_BE9A
0000DFD2 D241                       		add.w	d1,d1
0000DFD4 D041                       		add.w	d1,d0
0000DFD6 6500                       		bcs.s	loc_BE9E
0000DFD8 60B4                       		bra.s	loc_BE4E
0000DFDA                            ; ===========================================================================
0000DFDA                            
0000DFDA                            loc_BE9A:
0000DFDA B045                       		cmp.w	d5,d0
0000DFDC 62B0                       		bhi.s	loc_BE4E
0000DFDE                            
0000DFDE                            loc_BE9E:
0000DFDE 361F                       		move.w	(sp)+,d3
0000DFE0 7001                       		moveq	#1,d0
0000DFE2 4E75                       		rts	
0000DFE4                            ; End of function But_MZBlock
0000DFE4                            ; End of function But_MZBlock
0000DFE4                            Map_But:	include	"_maps\Button.asm"
0000DFE4                            ; ---------------------------------------------------------------------------
0000DFE4                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000DFE4                            ; ---------------------------------------------------------------------------
0000DFE4                            Map_But_internal:
0000DFE4 0000                       		dc.w byte_BEAC-Map_But_internal
0000DFE6 0000                       		dc.w byte_BEB7-Map_But_internal
0000DFE8 0000                       		dc.w byte_BEC2-Map_But_internal
0000DFEA 0000                       		dc.w byte_BEB7-Map_But_internal
0000DFEC 02                         byte_BEAC:	dc.b 2
0000DFED F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000DFF2 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000DFF7 02                         byte_BEB7:	dc.b 2
0000DFF8 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000DFFD F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000E002 02                         byte_BEC2:	dc.b 2
0000E003 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000E008 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000E00D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000E012                            		even
0000E012                            		even
0000E012                            
0000E012                            		include	"_incObj\33 Pushable Blocks.asm"
0000E012                            ; ---------------------------------------------------------------------------
0000E012                            ; Object 33 - pushable blocks (MZ, LZ)
0000E012                            ; ---------------------------------------------------------------------------
0000E012                            
0000E012                            PushBlock:
0000E012 7000                       		moveq	#0,d0
0000E014 1028 0024                  		move.b	obRoutine(a0),d0
0000E018 323B 0000                  		move.w	PushB_Index(pc,d0.w),d1
0000E01C 4EFB 1000                  		jmp	PushB_Index(pc,d1.w)
0000E020                            ; ===========================================================================
0000E020 0000                       PushB_Index:	dc.w PushB_Main-PushB_Index
0000E022 0000                       		dc.w loc_BF6E-PushB_Index
0000E024 0000                       		dc.w loc_C02C-PushB_Index
0000E026                            
0000E026 1000                       PushB_Var:	dc.b $10, 0	; object width,	frame number
0000E028 4001                       		dc.b $40, 1
0000E02A                            ; ===========================================================================
0000E02A                            
0000E02A                            PushB_Main:	; Routine 0
0000E02A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E02E 117C 000F 0016             		move.b	#$F,obHeight(a0)
0000E034 117C 000F 0017             		move.b	#$F,obWidth(a0)
0000E03A 217C 0000 0000 0004        		move.l	#Map_Push,obMap(a0)
0000E042 317C 42B8 0002             		move.w	#$42B8,obGfx(a0) ; MZ specific code
0000E048 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w
0000E04E 6600                       		bne.s	@notLZ
0000E050 317C 43DE 0002             		move.w	#$43DE,obGfx(a0) ; LZ specific code
0000E056                            
0000E056                            	@notLZ:
0000E056 117C 0004 0001             		move.b	#4,obRender(a0)
0000E05C 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000E062 3168 0008 0034             		move.w	obX(a0),$34(a0)
0000E068 3168 000C 0036             		move.w	obY(a0),$36(a0)
0000E06E 7000                       		moveq	#0,d0
0000E070 1028 0028                  		move.b	obSubtype(a0),d0
0000E074 D040                       		add.w	d0,d0
0000E076 0240 000E                  		andi.w	#$E,d0
0000E07A 45FB 00AA                  		lea	PushB_Var(pc,d0.w),a2
0000E07E 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000E082 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000E086 4A28 0028                  		tst.b	obSubtype(a0)
0000E08A 6700                       		beq.s	@chkgone
0000E08C 317C C2B8 0002             		move.w	#$C2B8,obGfx(a0)
0000E092                            
0000E092                            	@chkgone:
0000E092 45F8 FC00                  		lea	(v_objstate).w,a2
0000E096 7000                       		moveq	#0,d0
0000E098 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E09C 6700                       		beq.s	loc_BF6E
0000E09E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E0A4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000E0AA 6600 0000                  		bne.w	DeleteObject
0000E0AE                            
0000E0AE                            loc_BF6E:	; Routine 2
0000E0AE 4A28 0032                  		tst.b	$32(a0)
0000E0B2 6600 0000                  		bne.w	loc_C046
0000E0B6 7200                       		moveq	#0,d1
0000E0B8 1228 0014                  		move.b	obActWid(a0),d1
0000E0BC 0641 000B                  		addi.w	#$B,d1
0000E0C0 343C 0010                  		move.w	#$10,d2
0000E0C4 363C 0011                  		move.w	#$11,d3
0000E0C8 3828 0008                  		move.w	obX(a0),d4
0000E0CC 6100 0000                  		bsr.w	loc_C186
0000E0D0 0C78 0200 FE10             		cmpi.w	#(id_MZ<<8)+0,(v_zone).w ; is the level MZ act 1?
0000E0D6 6600                       		bne.s	loc_BFC6	; if not, branch
0000E0D8 08A8 0007 0028             		bclr	#7,obSubtype(a0)
0000E0DE 3028 0008                  		move.w	obX(a0),d0
0000E0E2 0C40 0A20                  		cmpi.w	#$A20,d0
0000E0E6 6500                       		bcs.s	loc_BFC6
0000E0E8 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000E0EC 6400                       		bcc.s	loc_BFC6
0000E0EE 3038 F7A4                  		move.w	(v_obj31ypos).w,d0
0000E0F2 0440 001C                  		subi.w	#$1C,d0
0000E0F6 3140 000C                  		move.w	d0,obY(a0)
0000E0FA 08F8 0007 F7A4             		bset	#7,(v_obj31ypos).w
0000E100 08E8 0007 0028             		bset	#7,obSubtype(a0)
0000E106                            
0000E106                            	loc_BFC6:
0000E122 6000 0000                  		bra.w	DisplaySprite
0000E126                            ; ===========================================================================
0000E126                            
0000E126                            loc_ppppp:
0000E142 3168 0034 0008             		move.w	$34(a0),obX(a0)
0000E148 3168 0036 000C             		move.w	$36(a0),obY(a0)
0000E14E 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000E154 6000                       		bra.s	loc_C02C
0000E156                            ; ===========================================================================
0000E156                            
0000E156                            loc_C016:
0000E156 45F8 FC00                  		lea	(v_objstate).w,a2
0000E15A 7000                       		moveq	#0,d0
0000E15C 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E160 6700                       		beq.s	loc_C028
0000E162 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000E168                            
0000E168                            loc_C028:
0000E168 6000 0000                  		bra.w	DeleteObject
0000E16C                            ; ===========================================================================
0000E16C                            
0000E16C                            loc_C02C:	; Routine 4
0000E16C 6100 0000                  		bsr.w	ChkPartiallyVisible
0000E170 6700                       		beq.s	locret_C044
0000E172 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000E178 4228 0032                  		clr.b	$32(a0)
0000E17C 4268 0010                  		clr.w	obVelX(a0)
0000E180 4268 0012                  		clr.w	obVelY(a0)
0000E184                            
0000E184                            locret_C044:
0000E184 4E75                       		rts	
0000E186                            ; ===========================================================================
0000E186                            
0000E186                            loc_C046:
0000E186 3F28 0008                  		move.w	obX(a0),-(sp)
0000E18A 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0000E190 6400                       		bcc.s	loc_C056
0000E192 6100 0000                  		bsr.w	SpeedToPos
0000E196                            
0000E196                            loc_C056:
0000E196 0828 0001 0022             		btst	#1,obStatus(a0)
0000E19C 6700                       		beq.s	loc_C0A0
0000E19E 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E1A4 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E1AA 4A41                       		tst.w	d1
0000E1AC 6A00 0000                  		bpl.w	loc_C09E
0000E1B0 D368 000C                  		add.w	d1,obY(a0)
0000E1B4 4268 0012                  		clr.w	obVelY(a0)
0000E1B8 08A8 0001 0022             		bclr	#1,obStatus(a0)
0000E1BE 3011                       		move.w	(a1),d0
0000E1C0 0240 03FF                  		andi.w	#$3FF,d0
0000E1C4 0C40 016A                  		cmpi.w	#$16A,d0
0000E1C8 6500                       		bcs.s	loc_C09E
0000E1CA 3028 0030                  		move.w	$30(a0),d0
0000E1CE E640                       		asr.w	#3,d0
0000E1D0 3140 0010                  		move.w	d0,obVelX(a0)
0000E1D4 117C 0001 0032             		move.b	#1,$32(a0)
0000E1DA 4268 000E                  		clr.w	$E(a0)
0000E1DE                            
0000E1DE                            loc_C09E:
0000E1DE 6000                       		bra.s	loc_C0E6
0000E1E0                            ; ===========================================================================
0000E1E0                            
0000E1E0                            loc_C0A0:
0000E1E0 4A68 0010                  		tst.w	obVelX(a0)
0000E1E4 6700 0000                  		beq.w	loc_C0D6
0000E1E8 6B00                       		bmi.s	loc_C0BC
0000E1EA 7600                       		moveq	#0,d3
0000E1EC 1628 0014                  		move.b	obActWid(a0),d3
0000E1F0 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E1F6 4A41                       		tst.w	d1		; has block touched a wall?
0000E1F8 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E1FA 6000                       		bra.s	loc_C0E6
0000E1FC                            ; ===========================================================================
0000E1FC                            
0000E1FC                            loc_C0BC:
0000E1FC 7600                       		moveq	#0,d3
0000E1FE 1628 0014                  		move.b	obActWid(a0),d3
0000E202 4643                       		not.w	d3
0000E204 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E20A 4A41                       		tst.w	d1		; has block touched a wall?
0000E20C 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E20E 6000                       		bra.s	loc_C0E6
0000E210                            ; ===========================================================================
0000E210                            
0000E210                            PushB_StopPush:
0000E210 4268 0010                  		clr.w	obVelX(a0)		; stop block moving
0000E214 6000                       		bra.s	loc_C0E6
0000E216                            ; ===========================================================================
0000E216                            
0000E216                            loc_C0D6:
0000E216 06A8 0000 2001 000C        		addi.l	#$2001,obY(a0)
0000E21E 0C28 00A0 000F             		cmpi.b	#$A0,obY+3(a0)
0000E224 6400                       		bcc.s	loc_C104
0000E226                            
0000E226                            loc_C0E6:
0000E226 7200                       		moveq	#0,d1
0000E228 1228 0014                  		move.b	obActWid(a0),d1
0000E22C 0641 000B                  		addi.w	#$B,d1
0000E230 343C 0010                  		move.w	#$10,d2
0000E234 363C 0011                  		move.w	#$11,d3
0000E238 381F                       		move.w	(sp)+,d4
0000E23A 6100 0000                  		bsr.w	loc_C186
0000E23E 6100                       		bsr.s	PushB_ChkLava
0000E240 6000 FEC4                  		bra.w	loc_BFC6
0000E244                            ; ===========================================================================
0000E244                            
0000E244                            loc_C104:
0000E244 381F                       		move.w	(sp)+,d4
0000E246 43F8 D000                  		lea	(v_player).w,a1
0000E24A 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000E250 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000E256 6000 FECE                  		bra.w	loc_ppppp
0000E25A                            ; ===========================================================================
0000E25A                            
0000E25A                            PushB_ChkLava:
0000E25A 0C78 0201 FE10             		cmpi.w	#(id_MZ<<8)+1,(v_zone).w ; is the level MZ act 2?
0000E260 6600                       		bne.s	PushB_ChkLava2	; if not, branch
0000E262 343C FFE0                  		move.w	#-$20,d2
0000E266 0C68 0DD0 0008             		cmpi.w	#$DD0,obX(a0)
0000E26C 6700                       		beq.s	PushB_LoadLava
0000E26E 0C68 0CC0 0008             		cmpi.w	#$CC0,obX(a0)
0000E274 6700                       		beq.s	PushB_LoadLava
0000E276 0C68 0BA0 0008             		cmpi.w	#$BA0,obX(a0)
0000E27C 6700                       		beq.s	PushB_LoadLava
0000E27E 4E75                       		rts	
0000E280                            ; ===========================================================================
0000E280                            
0000E280                            PushB_ChkLava2:
0000E280 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is the level MZ act 3?
0000E286 6600                       		bne.s	PushB_NoLava	; if not, branch
0000E288 343C 0020                  		move.w	#$20,d2
0000E28C 0C68 0560 0008             		cmpi.w	#$560,obX(a0)
0000E292 6700                       		beq.s	PushB_LoadLava
0000E294 0C68 05C0 0008             		cmpi.w	#$5C0,obX(a0)
0000E29A 6700                       		beq.s	PushB_LoadLava
0000E29C                            
0000E29C                            PushB_NoLava:
0000E29C 4E75                       		rts	
0000E29E                            ; ===========================================================================
0000E29E                            
0000E29E                            PushB_LoadLava:
0000E29E 6100 0000                  		bsr.w	FindFreeObj
0000E2A2 6600                       		bne.s	locret_C184
0000E2A4 12BC 0000                  		move.b	#id_GeyserMaker,0(a1) ; load lava geyser object
0000E2A8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000E2AE D569 0008                  		add.w	d2,obX(a1)
0000E2B2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000E2B8 0669 0010 000C             		addi.w	#$10,obY(a1)
0000E2BE 2348 003C                  		move.l	a0,$3C(a1)
0000E2C2                            
0000E2C2                            locret_C184:
0000E2C2 4E75                       		rts	
0000E2C4                            ; ===========================================================================
0000E2C4                            
0000E2C4                            loc_C186:
0000E2C4 1028 0025                  		move.b	ob2ndRout(a0),d0
0000E2C8 6700 0000                  		beq.w	loc_C218
0000E2CC 5500                       		subq.b	#2,d0
0000E2CE 6600                       		bne.s	loc_C1AA
0000E2D0 6100 AAC6                  		bsr.w	ExitPlatform
0000E2D4 0829 0003 0022             		btst	#3,obStatus(a1)
0000E2DA 6600                       		bne.s	loc_C1A4
0000E2DC 4228 0025                  		clr.b	ob2ndRout(a0)
0000E2E0 4E75                       		rts	
0000E2E2                            ; ===========================================================================
0000E2E2                            
0000E2E2                            loc_C1A4:
0000E2E2 3404                       		move.w	d4,d2
0000E2E4 6000 B010                  		bra.w	MvSonicOnPtfm
0000E2E8                            ; ===========================================================================
0000E2E8                            
0000E2E8                            loc_C1AA:
0000E2E8 5500                       		subq.b	#2,d0
0000E2EA 6600                       		bne.s	loc_C1F2
0000E2EC 6100 0000                  		bsr.w	SpeedToPos
0000E2F0 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E2F6 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E2FC 4A41                       		tst.w	d1
0000E2FE 6A00 0000                  		bpl.w	locret_C1F0
0000E302 D368 000C                  		add.w	d1,obY(a0)
0000E306 4268 0012                  		clr.w	obVelY(a0)
0000E30A 4228 0025                  		clr.b	ob2ndRout(a0)
0000E30E 3011                       		move.w	(a1),d0
0000E310 0240 03FF                  		andi.w	#$3FF,d0
0000E314 0C40 016A                  		cmpi.w	#$16A,d0
0000E318 6500                       		bcs.s	locret_C1F0
0000E31A 3028 0030                  		move.w	$30(a0),d0
0000E31E E640                       		asr.w	#3,d0
0000E320 3140 0010                  		move.w	d0,obVelX(a0)
0000E324 117C 0001 0032             		move.b	#1,$32(a0)
0000E32A 4268 000E                  		clr.w	obY+2(a0)
0000E32E                            
0000E32E                            locret_C1F0:
0000E32E 4E75                       		rts	
0000E330                            ; ===========================================================================
0000E330                            
0000E330                            loc_C1F2:
0000E330 6100 0000                  		bsr.w	SpeedToPos
0000E334 3028 0008                  		move.w	obX(a0),d0
0000E338 0240 000C                  		andi.w	#$C,d0
0000E33C 6600 0000                  		bne.w	locret_C2E4
0000E340 0268 FFF0 0008             		andi.w	#-$10,obX(a0)
0000E346 3168 0010 0030             		move.w	obVelX(a0),$30(a0)
0000E34C 4268 0010                  		clr.w	obVelX(a0)
0000E350 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000E354 4E75                       		rts	
0000E356                            ; ===========================================================================
0000E356                            
0000E356                            loc_C218:
0000E356 6100 0000                  		bsr.w	Solid_ChkEnter
0000E35A 4A44                       		tst.w	d4
0000E35C 6700 0000                  		beq.w	locret_C2E4
0000E360 6B00 0000                  		bmi.w	locret_C2E4
0000E364 4A28 0032                  		tst.b	$32(a0)
0000E368 6700                       		beq.s	loc_C230
0000E36A 6000 0000                  		bra.w	locret_C2E4
0000E36E                            ; ===========================================================================
0000E36E                            
0000E36E                            loc_C230:
0000E36E 4A40                       		tst.w	d0
0000E370 6700 0000                  		beq.w	locret_C2E4
0000E374 6B00                       		bmi.s	loc_C268
0000E376 0829 0000 0022             		btst	#0,obStatus(a1)
0000E37C 6600 0000                  		bne.w	locret_C2E4
0000E380 3F00                       		move.w	d0,-(sp)
0000E382 7600                       		moveq	#0,d3
0000E384 1628 0014                  		move.b	obActWid(a0),d3
0000E388 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E38E 301F                       		move.w	(sp)+,d0
0000E390 4A41                       		tst.w	d1
0000E392 6B00 0000                  		bmi.w	locret_C2E4
0000E396 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000E39E 7001                       		moveq	#1,d0
0000E3A0 323C 0040                  		move.w	#$40,d1
0000E3A4 6000                       		bra.s	loc_C294
0000E3A6                            ; ===========================================================================
0000E3A6                            
0000E3A6                            loc_C268:
0000E3A6 0829 0000 0022             		btst	#0,obStatus(a1)
0000E3AC 6700                       		beq.s	locret_C2E4
0000E3AE 3F00                       		move.w	d0,-(sp)
0000E3B0 7600                       		moveq	#0,d3
0000E3B2 1628 0014                  		move.b	obActWid(a0),d3
0000E3B6 4643                       		not.w	d3
0000E3B8 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E3BE 301F                       		move.w	(sp)+,d0
0000E3C0 4A41                       		tst.w	d1
0000E3C2 6B00                       		bmi.s	locret_C2E4
0000E3C4 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
0000E3CC 70FF                       		moveq	#-1,d0
0000E3CE 323C FFC0                  		move.w	#-$40,d1
0000E3D2                            
0000E3D2                            loc_C294:
0000E3D2 43F8 D000                  		lea	(v_player).w,a1
0000E3D6 D169 0008                  		add.w	d0,obX(a1)
0000E3DA 3341 0020                  		move.w	d1,obInertia(a1)
0000E3DE 337C 0000 0010             		move.w	#0,obVelX(a1)
0000E3E4 3F00                       		move.w	d0,-(sp)
0000E3F0 301F                       		move.w	(sp)+,d0
0000E3F2 4A28 0028                  		tst.b	obSubtype(a0)
0000E3F6 6B00                       		bmi.s	locret_C2E4
0000E3F8 3F00                       		move.w	d0,-(sp)
0000E3FA 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E400 301F                       		move.w	(sp)+,d0
0000E402 0C41 0004                  		cmpi.w	#4,d1
0000E406 6F00                       		ble.s	loc_C2E0
0000E408 317C 0400 0010             		move.w	#$400,obVelX(a0)
0000E40E 4A40                       		tst.w	d0
0000E410 6A00                       		bpl.s	loc_C2D8
0000E412 4468 0010                  		neg.w	obVelX(a0)
0000E416                            
0000E416                            loc_C2D8:
0000E416 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0000E41C 6000                       		bra.s	locret_C2E4
0000E41E                            ; ===========================================================================
0000E41E                            
0000E41E                            loc_C2E0:
0000E41E D368 000C                  		add.w	d1,obY(a0)
0000E422                            
0000E422                            locret_C2E4:
0000E422 4E75                       		rts	
0000E422 4E75                       		rts	
0000E424                            Map_Push:	include	"_maps\Pushable Blocks.asm"
0000E424                            ; ---------------------------------------------------------------------------
0000E424                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000E424                            ; ---------------------------------------------------------------------------
0000E424                            Map_Push_internal:
0000E424 0000                       		dc.w @single-Map_Push_internal
0000E426 0000                       		dc.w @four-Map_Push_internal
0000E428 01                         @single:	dc.b 1
0000E429 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000E42E 04                         @four:		dc.b 4
0000E42F F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000E434 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000E439 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000E43E F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000E444 00                         		even
0000E444 00                         		even
0000E444                            
0000E444                            		include	"_incObj\34 Title Cards.asm"
0000E444                            ; ---------------------------------------------------------------------------
0000E444                            ; Object 34 - zone title cards
0000E444                            ; ---------------------------------------------------------------------------
0000E444                            
0000E444                            TitleCard:
0000E444 7000                       		moveq	#0,d0
0000E446 1028 0024                  		move.b	obRoutine(a0),d0
0000E44A 323B 0000                  		move.w	Card_Index(pc,d0.w),d1
0000E44E 4EFB 1000                  		jmp	Card_Index(pc,d1.w)
0000E452                            ; ===========================================================================
0000E452 0000                       Card_Index:	dc.w Card_CheckSBZ3-Card_Index
0000E454 0000                       		dc.w Card_ChkPos-Card_Index
0000E456 0000                       		dc.w Card_Wait-Card_Index
0000E458 0000                       		dc.w Card_Wait-Card_Index
0000E45A                            
0000E45A =00000030                  card_mainX:	equ $30		; position for card to display on
0000E45A =00000032                  card_finalX:	equ $32		; position for card to finish on
0000E45A                            ; ===========================================================================
0000E45A                            
0000E45A                            Card_CheckSBZ3:	; Routine 0
0000E45A 2248                       		movea.l	a0,a1
0000E45C 7000                       		moveq	#0,d0
0000E45E 1038 FE10                  		move.b	(v_zone).w,d0
0000E462 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; check if level is SBZ 3
0000E468 6600                       		bne.s	Card_CheckFZ
0000E46A 7001                       		moveq	#1,d0		; load title card number 6 (FZ)
0000E46C                            
0000E46C                            	Card_CheckFZ:
0000E46C 3400                       		move.w	d0,d2
0000E46E 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; check if level is FZ
0000E474 6600                       		bne.s	Card_LoadConfig
0000E476 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000E478 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000E47A                            
0000E47A                            	Card_LoadConfig:
0000E47A 47F9 0000 0000             		lea	(Card_ConData).l,a3
0000E480 E948                       		lsl.w	#4,d0
0000E482 D6C0                       		adda.w	d0,a3
0000E484 45F9 0000 0000             		lea	(Card_ItemData).l,a2
0000E48A 7203                       		moveq	#3,d1
0000E48C                            
0000E48C                            Card_Loop:
0000E48C 12BC 0000                  		move.b	#id_TitleCard,0(a1)
0000E490 3353 0008                  		move.w	(a3),obX(a1)	; load start x-position
0000E494 335B 0032                  		move.w	(a3)+,card_finalX(a1) ; load finish x-position (same as start)
0000E498 335B 0030                  		move.w	(a3)+,card_mainX(a1) ; load main x-position
0000E49C 335A 000A                  		move.w	(a2)+,obScreenY(a1)
0000E4A0 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E4A4 101A                       		move.b	(a2)+,d0
0000E4A6 6600                       		bne.s	Card_ActNumber
0000E4A8 1002                       		move.b	d2,d0
0000E4AA                            
0000E4AA                            	Card_ActNumber:
0000E4AA 0C00 0007                  		cmpi.b	#7,d0
0000E4AE 6600                       		bne.s	Card_MakeSprite
0000E4B0 D038 FE11                  		add.b	(v_act).w,d0
0000E4B4 0C38 0003 FE11             		cmpi.b	#3,(v_act).w
0000E4BA 6600                       		bne.s	Card_MakeSprite
0000E4BC 5300                       		subq.b	#1,d0
0000E4BE                            
0000E4BE                            	Card_MakeSprite:
0000E4BE 1340 001A                  		move.b	d0,obFrame(a1)	; display frame	number d0
0000E4C2 237C 0000 0000 0004        		move.l	#Map_Card,obMap(a1)
0000E4CA 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E4D0 137C 0078 0014             		move.b	#$78,obActWid(a1)
0000E4D6 137C 0000 0001             		move.b	#0,obRender(a1)
0000E4DC 337C 0000 0018             		move.w	#0,obPriority(a1)
0000E4E2 337C 003C 001E             		move.w	#60,obTimeFrame(a1) ; set time delay to 1 second
0000E4E8 43E9 0040                  		lea	$40(a1),a1	; next object
0000E4EC 51C9 FF9E                  		dbf	d1,Card_Loop	; repeat sequence another 3 times
0000E4F0                            
0000E4F0                            Card_ChkPos:	; Routine 2
0000E4F0 7210                       		moveq	#$10,d1		; set horizontal speed
0000E4F2 3028 0030                  		move.w	card_mainX(a0),d0
0000E4F6 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the target position?
0000E4FA 6700                       		beq.s	Card_NoMove	; if yes, branch
0000E4FC 6C00                       		bge.s	Card_Move
0000E4FE 4441                       		neg.w	d1
0000E500                            
0000E500                            Card_Move:
0000E500 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E504                            
0000E504                            Card_NoMove:
0000E504 3028 0008                  		move.w	obX(a0),d0
0000E508 6B00                       		bmi.s	locret_C3D8
0000E50A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E50E 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000E510 6000 0000                  		bra.w	DisplaySprite
0000E514                            ; ===========================================================================
0000E514                            
0000E514                            locret_C3D8:
0000E514 4E75                       		rts	
0000E516                            ; ===========================================================================
0000E516                            
0000E516                            Card_Wait:	; Routine 4/6
0000E516 4A68 001E                  		tst.w	obTimeFrame(a0)	; is time remaining zero?
0000E51A 6700                       		beq.s	Card_ChkPos2	; if yes, branch
0000E51C 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time
0000E520 6000 0000                  		bra.w	DisplaySprite
0000E524                            ; ===========================================================================
0000E524                            
0000E524                            Card_ChkPos2:
0000E524 4A28 0001                  		tst.b	obRender(a0)
0000E528 6A00                       		bpl.s	Card_ChangeArt
0000E52A 7220                       		moveq	#$20,d1
0000E52C 3028 0032                  		move.w	card_finalX(a0),d0
0000E530 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the finish position?
0000E534 6700                       		beq.s	Card_ChangeArt	; if yes, branch
0000E536 6C00                       		bge.s	Card_Move2
0000E538 4441                       		neg.w	d1
0000E53A                            
0000E53A                            Card_Move2:
0000E53A D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E53E 3028 0008                  		move.w	obX(a0),d0
0000E542 6B00                       		bmi.s	locret_C412
0000E544 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E548 6400                       		bcc.s	locret_C412	; if yes, branch
0000E54A 6000 0000                  		bra.w	DisplaySprite
0000E54E                            ; ===========================================================================
0000E54E                            
0000E54E                            locret_C412:
0000E54E 4E75                       		rts	
0000E550                            ; ===========================================================================
0000E550                            
0000E550                            Card_ChangeArt:
0000E550 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000E556 6600                       		bne.s	Card_Delete
0000E558 7000                       		moveq	#plcid_Explode,d0
0000E55A 4EB9 0000 173A             		jsr	(AddPLC).l	; load explosion patterns
0000E560 7000                       		moveq	#0,d0
0000E562 1038 FE10                  		move.b	(v_zone).w,d0
0000E566 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
0000E56A 4EB9 0000 173A             		jsr	(AddPLC).l	; load animal patterns
0000E570                            
0000E570                            Card_Delete:
0000E570 6000 0000                  		bra.w	DeleteObject
0000E574                            ; ===========================================================================
0000E574 00D0                       Card_ItemData:	dc.w $D0	; y-axis position
0000E576 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000E578 00E4                       		dc.w $E4
0000E57A 0206                       		dc.b 2,	6
0000E57C 00EA                       		dc.w $EA
0000E57E 0207                       		dc.b 2,	7
0000E580 00E0                       		dc.w $E0
0000E582 020A                       		dc.b 2,	$A
0000E584                            ; ---------------------------------------------------------------------------
0000E584                            ; Title	card configuration data
0000E584                            ; Format:
0000E584                            ; 4 bytes per item (YYYY XXXX)
0000E584                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000E584                            ; ---------------------------------------------------------------------------
0000E584 0000 0120 FEFC 013C 0414+  Card_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000E594 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000E5A4 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000E5B4 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000E5C4 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000E5D4 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000E5E4 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000E5F4                            ; ===========================================================================
0000E5F4                            ; ===========================================================================
0000E5F4                            		include	"_incObj\39 Game Over.asm"
0000E5F4                            ; ---------------------------------------------------------------------------
0000E5F4                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000E5F4                            ; ---------------------------------------------------------------------------
0000E5F4                            
0000E5F4                            GameOverCard:
0000E5F4 7000                       		moveq	#0,d0
0000E5F6 1028 0024                  		move.b	obRoutine(a0),d0
0000E5FA 323B 0000                  		move.w	Over_Index(pc,d0.w),d1
0000E5FE 4EFB 1000                  		jmp	Over_Index(pc,d1.w)
0000E602                            ; ===========================================================================
0000E602 0000                       Over_Index:	dc.w Over_ChkPLC-Over_Index
0000E604 0000                       		dc.w Over_Move-Over_Index
0000E606 0000                       		dc.w Over_Wait-Over_Index
0000E608                            ; ===========================================================================
0000E608                            
0000E608                            Over_ChkPLC:	; Routine 0
0000E608 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E60C 6700                       		beq.s	Over_Main	; if yes, branch
0000E60E 4E75                       		rts	
0000E610                            ; ===========================================================================
0000E610                            
0000E610                            Over_Main:
0000E610 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E614 317C 0050 0008             		move.w	#$50,obX(a0)	; set x-position
0000E61A 0828 0000 001A             		btst	#0,obFrame(a0)	; is the object	"OVER"?
0000E620 6700                       		beq.s	Over_1stWord	; if not, branch
0000E622 317C 01F0 0008             		move.w	#$1F0,obX(a0)	; set x-position for "OVER"
0000E628                            
0000E628                            	Over_1stWord:
0000E628 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0000E62E 217C 0000 0000 0004        		move.l	#Map_Over,obMap(a0)
0000E636 317C 855E 0002             		move.w	#$855E,obGfx(a0)
0000E63C 117C 0000 0001             		move.b	#0,obRender(a0)
0000E642 317C 0000 0018             		move.w	#0,obPriority(a0)
0000E648                            
0000E648                            Over_Move:	; Routine 2
0000E648 7210                       		moveq	#$10,d1		; set horizontal speed
0000E64A 0C68 0120 0008             		cmpi.w	#$120,obX(a0)	; has item reached its target position?
0000E650 6700                       		beq.s	Over_SetWait	; if yes, branch
0000E652 6500                       		bcs.s	Over_UpdatePos
0000E654 4441                       		neg.w	d1
0000E656                            
0000E656                            	Over_UpdatePos:
0000E656 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E65A 6000 0000                  		bra.w	DisplaySprite
0000E65E                            ; ===========================================================================
0000E65E                            
0000E65E                            Over_SetWait:
0000E65E 317C 02D0 001E             		move.w	#720,obTimeFrame(a0) ; set time delay to 12 seconds
0000E664 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E668 4E75                       		rts	
0000E66A                            ; ===========================================================================
0000E66A                            
0000E66A                            Over_Wait:	; Routine 4
0000E66A 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000E66E 0200 0070                  		andi.b	#btnABC,d0	; is button A, B or C pressed?
0000E672 6600                       		bne.s	Over_ChgMode	; if yes, branch
0000E674 0828 0000 001A             		btst	#0,obFrame(a0)
0000E67A 6600                       		bne.s	Over_Display
0000E67C 4A68 001E                  		tst.w	obTimeFrame(a0)	; has time delay reached zero?
0000E680 6700                       		beq.s	Over_ChgMode	; if yes, branch
0000E682 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E686 6000 0000                  		bra.w	DisplaySprite
0000E68A                            ; ===========================================================================
0000E68A                            
0000E68A                            Over_ChgMode:
0000E68A 4A38 FE1A                  		tst.b	(f_timeover).w	; is time over flag set?
0000E68E 6600                       		bne.s	Over_ResetLvl	; if yes, branch
0000E690 11FC 0000 F600             		move.b	#id_Continue,(v_gamemode).w ; set mode to $14 (continue screen)
0000E696 4A38 FE18                  		tst.b	(v_continues).w	; do you have any continues?
0000E69A 6600                       		bne.s	Over_Display	; if yes, branch
0000E69C 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set mode to 0 (Sega screen)
0000E6A2 6000                       		bra.s	Over_Display
0000E6A4                            ; ===========================================================================
0000E6A4                            
0000E6A4                            Over_ResetLvl:
0000E6A4 42B8 FE38                  			clr.l	(v_lamp_time).w
0000E6A8 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E6AE                            
0000E6AE                            Over_Display:
0000E6AE 6000 0000                  		bra.w	DisplaySprite
0000E6AE 6000 0000                  		bra.w	DisplaySprite
0000E6B2                            		include	"_incObj\3A Got Through Card.asm"
0000E6B2                            ; ---------------------------------------------------------------------------
0000E6B2                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000E6B2                            ; ---------------------------------------------------------------------------
0000E6B2                            
0000E6B2                            GotThroughCard:
0000E6B2 7000                       		moveq	#0,d0
0000E6B4 1028 0024                  		move.b	obRoutine(a0),d0
0000E6B8 323B 0000                  		move.w	Got_Index(pc,d0.w),d1
0000E6BC 4EFB 1000                  		jmp	Got_Index(pc,d1.w)
0000E6C0                            ; ===========================================================================
0000E6C0 0000                       Got_Index:	dc.w Got_ChkPLC-Got_Index
0000E6C2 0000                       		dc.w Got_Move-Got_Index
0000E6C4 0000                       		dc.w Got_Wait-Got_Index
0000E6C6 0000                       		dc.w Got_TimeBonus-Got_Index
0000E6C8 0000                       		dc.w Got_Wait-Got_Index
0000E6CA 0000                       		dc.w Got_NextLevel-Got_Index
0000E6CC 0000                       		dc.w Got_Wait-Got_Index
0000E6CE 0000                       		dc.w Got_Move2-Got_Index
0000E6D0 0000                       		dc.w loc_C766-Got_Index
0000E6D2                            
0000E6D2 =00000030                  got_mainX:	equ $30		; position for card to display on
0000E6D2 =00000032                  got_finalX:	equ $32		; position for card to finish on
0000E6D2                            ; ===========================================================================
0000E6D2                            
0000E6D2                            Got_ChkPLC:	; Routine 0
0000E6D2 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E6D6 6700                       		beq.s	Got_Main	; if yes, branch
0000E6D8 4E75                       		rts	
0000E6DA                            ; ===========================================================================
0000E6DA                            
0000E6DA                            Got_Main:
0000E6DA 2248                       		movea.l	a0,a1
0000E6DC 45F9 0000 0000             		lea	(Got_Config).l,a2
0000E6E2 7206                       		moveq	#6,d1
0000E6E4                            
0000E6E4                            Got_Loop:
0000E6E4 12BC 0000                  		move.b	#id_GotThroughCard,0(a1)
0000E6E8 3352 0008                  		move.w	(a2),obX(a1)	; load start x-position
0000E6EC 335A 0032                  		move.w	(a2)+,got_finalX(a1) ; load finish x-position (same as start)
0000E6F0 335A 0030                  		move.w	(a2)+,got_mainX(a1) ; load main x-position
0000E6F4 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E6F8 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E6FC 101A                       		move.b	(a2)+,d0
0000E6FE 0C00 0006                  		cmpi.b	#6,d0
0000E702 6600                       		bne.s	loc_C5CA
0000E704 D038 FE11                  		add.b	(v_act).w,d0	; add act number to frame number
0000E708                            
0000E708                            	loc_C5CA:
0000E708 1340 001A                  		move.b	d0,obFrame(a1)
0000E70C 237C 0000 0000 0004        		move.l	#Map_Got,obMap(a1)
0000E714 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E71A 137C 0000 0001             		move.b	#0,obRender(a1)
0000E720 43E9 0040                  		lea	$40(a1),a1
0000E724 51C9 FFBE                  		dbf	d1,Got_Loop	; repeat 6 times
0000E728                            
0000E728                            Got_Move:	; Routine 2
0000E728 7210                       		moveq	#$10,d1		; set horizontal speed
0000E72A 3028 0030                  		move.w	got_mainX(a0),d0
0000E72E B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E732 6700                       		beq.s	loc_C61A	; if yes, branch
0000E734 6C00                       		bge.s	Got_ChgPos
0000E736 4441                       		neg.w	d1
0000E738                            
0000E738                            	Got_ChgPos:
0000E738 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E73C                            
0000E73C                            	loc_C5FE:
0000E73C 3028 0008                  		move.w	obX(a0),d0
0000E740 6B00                       		bmi.s	locret_C60E
0000E742 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E746 6400                       		bcc.s	locret_C60E	; if yes, branch
0000E748 6000 0000                  		bra.w	DisplaySprite
0000E74C                            ; ===========================================================================
0000E74C                            
0000E74C                            locret_C60E:
0000E74C 4E75                       		rts	
0000E74E                            ; ===========================================================================
0000E74E                            
0000E74E                            loc_C610:
0000E74E 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000E754 6000 0000                  		bra.w	Got_Move2
0000E758                            ; ===========================================================================
0000E758                            
0000E758                            loc_C61A:
0000E758 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000E75E 67EE                       		beq.s	loc_C610
0000E760 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E766 66D4                       		bne.s	loc_C5FE
0000E768 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E76C 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E772                            		;move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E772                            
0000E772                            Got_Wait:	; Routine 4, 8, $C
0000E772 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E776 6600                       		bne.s	Got_Display
0000E778 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E77C                            
0000E77C                            Got_Display:
0000E77C 6000 0000                  		bra.w	DisplaySprite
0000E780                            ; ===========================================================================
0000E780                            
0000E780                            Got_TimeBonus:	; Routine 6
0000E780 6100 0000                  		bsr.w	DisplaySprite
0000E784 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set time/ring bonus update flag
0000E78A 7000                       		moveq	#0,d0
0000E78C 4A78 F7D2                  		tst.w	(v_timebonus).w	; is time bonus	= zero?
0000E790 6700                       		beq.s	Got_RingBonus	; if yes, branch
0000E792 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E796 0478 000A F7D2             		subi.w	#10,(v_timebonus).w ; subtract 10 from time bonus
0000E79C                            
0000E79C                            Got_RingBonus:
0000E79C 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E7A0 6700                       		beq.s	Got_ChkBonus	; if yes, branch
0000E7A2 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E7A6 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E7AC                            
0000E7AC                            Got_ChkBonus:
0000E7AC 4A40                       		tst.w	d0		; is there any bonus?
0000E7AE 6600                       		bne.s	Got_AddBonus	; if yes, branch
0000E7BA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E7BE 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w
0000E7C4 6600                       		bne.s	Got_SetDelay
0000E7C6 5828 0024                  		addq.b	#4,obRoutine(a0)
0000E7CA                            
0000E7CA                            Got_SetDelay:
0000E7CA 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E7D0                            
0000E7D0                            locret_C692:
0000E7D0 4E75                       		rts	
0000E7D2                            ; ===========================================================================
0000E7D2                            
0000E7D2                            Got_AddBonus:
0000E7D2 4EB9 0000 0000             		jsr	(AddPoints).l
0000E7D8 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E7DC 0200 0003                  		andi.b	#3,d0
0000E7E0 66EE                       		bne.s	locret_C692
0000E7EC                            ; ===========================================================================
0000E7EC                            
0000E7EC                            Got_NextLevel:	; Routine $A
0000E7EC 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E7F2 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E7F8 1038 FE10                  		move.b	(v_zone).w,d0
0000E7FC 0240 0007                  		andi.w	#7,d0
0000E800 E748                       		lsl.w	#3,d0
0000E802 1238 FE11                  		move.b	(v_act).w,d1
0000E806 0241 0003                  		andi.w	#3,d1
0000E80A D241                       		add.w	d1,d1
0000E80C D041                       		add.w	d1,d0
0000E80E 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000E812 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
0000E816 4A40                       		tst.w	d0
0000E818 6600                       		bne.s	Got_ChkSS
0000E81A 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
0000E820 6000                       		bra.s	Got_Display2
0000E822                            ; ===========================================================================
0000E822                            
0000E822                            Got_ChkSS:	
0000E822 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
0000E826                            		;tst.b	(f_emeraldm).w
0000E826                            		;beq.s	VBla_08A
0000E826                            		;addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0000E826                            		;sfx		bgm_Emerald,1,0,0 ;	play emerald music
0000E826                            		;bra.s	Got_Display2
0000E826 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E82C                            		
0000E82C                            ; ===========================================================================
0000E82C                            
0000E82C                            VBla_08A:
0000E82C 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E832                            
0000E832                            Got_Display2:
0000E832 6000 0000                  		bra.w	DisplaySprite
0000E836                            ; ===========================================================================
0000E836                            ; ---------------------------------------------------------------------------
0000E836                            ; Level	order array
0000E836                            ; ---------------------------------------------------------------------------
0000E836                            LevelOrder:
0000E836                            		; Green Hill Zone
0000E836 0001                       		dc.b id_GHZ, 1	; Act 2
0000E838 0002                       		dc.b id_GHZ, 2	; Act 2
0000E83A 0400                       		dc.b id_SYZ, 0	; Act 3
0000E83C 0000                       		dc.b 0, 0
0000E83E                            
0000E83E                            		; Labyrinth Zone
0000E83E 0101                       		dc.b id_LZ, 1	; Act 1
0000E840 0102                       		dc.b id_LZ, 2	; Act 2
0000E842 0000                       		dc.b id_GHZ, 0 	; Act 3
0000E844 0502                       		dc.b id_SBZ, 2	; Scrap Brain Zone Act 3
0000E846                            
0000E846                            		; Marble Zone
0000E846 0201                       		dc.b id_MZ, 1	; Act 1
0000E848 0202                       		dc.b id_MZ, 2	; Act 2
0000E84A 0502                       		dc.b id_SBZ, 2	; Act 3
0000E84C 0000                       		dc.b 0, 0
0000E84E                            
0000E84E                            		; Star Light Zone
0000E84E 0301                       		dc.b id_SLZ, 1	; Act 1
0000E850 0302                       		dc.b id_SLZ, 2	; Act 2
0000E852 0500                       		dc.b id_SBZ, 0	; Act 3
0000E854 0000                       		dc.b 0, 0
0000E856                            
0000E856                            		; Spring Yard Zone
0000E856 0401                       		dc.b id_SYZ, 1	; Act 1
0000E858 0200                       		dc.b id_MZ,  0	; Act 2
0000E85A 0200                       		dc.b id_MZ,	 0	; Act 3
0000E85C 0000                       		dc.b 0, 0
0000E85E                            
0000E85E                            		; Scrap Brain Zone
0000E85E 0501                       		dc.b id_SBZ, 1	; Act 1
0000E860 0103                       		dc.b id_LZ, 3	; Act 2
0000E862 0000                       		dc.b 0, 0	; Final Zone
0000E864 0000                       		dc.b 0, 0
0000E866                            		even
0000E866                            ; ===========================================================================
0000E866                            
0000E866                            Got_Move2:	; Routine $E
0000E866 7220                       		moveq	#$20,d1		; set horizontal speed
0000E868 3028 0032                  		move.w	got_finalX(a0),d0
0000E86C B068 0008                  		cmp.w	obX(a0),d0	; has item reached its finish position?
0000E870 6700                       		beq.s	Got_SBZ2	; if yes, branch
0000E872 6C00                       		bge.s	Got_ChgPos2
0000E874 4441                       		neg.w	d1
0000E876                            
0000E876                            	Got_ChgPos2:
0000E876 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E87A 3028 0008                  		move.w	obX(a0),d0
0000E87E 6B00                       		bmi.s	locret_C748
0000E880 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E884 6400                       		bcc.s	locret_C748	; if yes, branch
0000E886 6000 0000                  		bra.w	DisplaySprite
0000E88A                            ; ===========================================================================
0000E88A                            
0000E88A                            locret_C748:
0000E88A 4E75                       		rts	
0000E88C                            ; ===========================================================================
0000E88C                            
0000E88C                            Got_SBZ2:
0000E88C 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E892 6600 0000                  		bne.w	DeleteObject
0000E896 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E89A 4238 F7CC                  		clr.b	(f_lockctrl).w	; unlock controls
0000E89E 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E8A4                            ; ===========================================================================
0000E8A4                            
0000E8A4                            loc_C766:	; Routine $10
0000E8A4 5478 F72A                  		addq.w	#2,(v_limitright2).w
0000E8A8 0C78 2100 F72A             		cmpi.w	#$2100,(v_limitright2).w
0000E8AE 6700 0000                  		beq.w	DeleteObject
0000E8B2 4E75                       		rts	
0000E8B4                            ; ===========================================================================
0000E8B4                            		;    x-start,	x-main,	y-main,
0000E8B4                            		;				routine, frame number
0000E8B4                            
0000E8B4 0004 0124 00BC             Got_Config:	dc.w 4,		$124,	$BC			; "SONIC HAS"
0000E8BA 0200                       		dc.b 				2,	0
0000E8BC                            
0000E8BC FEE0 0120 00D0             		dc.w -$120,	$120,	$D0			; "PASSED"
0000E8C2 0201                       		dc.b 				2,	1
0000E8C4                            
0000E8C4 040C 014C 00D6             		dc.w $40C,	$14C,	$D6			; "ACT" 1/2/3
0000E8CA 0206                       		dc.b 				2,	6
0000E8CC                            
0000E8CC 0520 0120 0112             		dc.w $520,	$120,	$112			; score
0000E8D2 0202                       		dc.b 				2,	2
0000E8D4                            
0000E8D4 0540 0120 00F2             		dc.w $540,	$120,	$F2			; time bonus
0000E8DA 0203                       		dc.b 				2,	3
0000E8DC                            
0000E8DC 0560 0120 0102             		dc.w $560,	$120,	$102			; ring bonus
0000E8E2 0204                       		dc.b 				2,	4
0000E8E4                            
0000E8E4 020C 014C 00CC             		dc.w $20C,	$14C,	$CC			; oval
0000E8EA 0205                       		dc.b 				2,	5
0000E8EA 0205                       		dc.b 				2,	5
0000E8EC                            		include	"_incObj\7E Special Stage Results.asm"
0000E8EC                            ; ---------------------------------------------------------------------------
0000E8EC                            ; Object 7E - special stage results screen
0000E8EC                            ; ---------------------------------------------------------------------------
0000E8EC                            
0000E8EC                            SSResult:
0000E8EC 7000                       		moveq	#0,d0
0000E8EE 1028 0024                  		move.b	obRoutine(a0),d0
0000E8F2 323B 0000                  		move.w	SSR_Index(pc,d0.w),d1
0000E8F6 4EFB 1000                  		jmp	SSR_Index(pc,d1.w)
0000E8FA                            ; ===========================================================================
0000E8FA 0000                       SSR_Index:	dc.w SSR_ChkPLC-SSR_Index
0000E8FC 0000                       		dc.w SSR_Move-SSR_Index
0000E8FE 0000                       		dc.w SSR_Wait-SSR_Index
0000E900 0000                       		dc.w SSR_RingBonus-SSR_Index
0000E902 0000                       		dc.w SSR_Wait-SSR_Index
0000E904 0000                       		dc.w SSR_Exit-SSR_Index
0000E906 0000                       		dc.w SSR_Wait-SSR_Index
0000E908 0000                       		dc.w SSR_Continue-SSR_Index
0000E90A 0000                       		dc.w SSR_Wait-SSR_Index
0000E90C 0000                       		dc.w SSR_Exit-SSR_Index
0000E90E 0000                       		dc.w loc_C91A-SSR_Index
0000E910                            
0000E910 =00000030                  ssr_mainX:	equ $30		; position for card to display on
0000E910                            ; ===========================================================================
0000E910                            
0000E910                            SSR_ChkPLC:	; Routine 0
0000E910 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E914 6700                       		beq.s	SSR_Main	; if yes, branch
0000E916 4E75                       		rts	
0000E918                            ; ===========================================================================
0000E918                            
0000E918                            SSR_Main:
0000E918 2248                       		movea.l	a0,a1
0000E91A 45F9 0000 0000             		lea	(SSR_Config).l,a2
0000E920 7203                       		moveq	#3,d1
0000E922 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have 50 or more rings?
0000E928 6500                       		bcs.s	SSR_Loop	; if no, branch
0000E92A 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000E92C                            
0000E92C                            	SSR_Loop:
0000E92C 12BC 0000                  		move.b	#id_SSResult,0(a1)
0000E930 335A 0008                  		move.w	(a2)+,obX(a1)	; load start x-position
0000E934 335A 0030                  		move.w	(a2)+,ssr_mainX(a1) ; load main x-position
0000E938 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E93C 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E940 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000E944 237C 0000 0000 0004        		move.l	#Map_SSR,obMap(a1)
0000E94C 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E952 137C 0000 0001             		move.b	#0,obRender(a1)
0000E958 43E9 0040                  		lea	$40(a1),a1
0000E95C 51C9 FFCE                  		dbf	d1,SSR_Loop	; repeat sequence 3 or 4 times
0000E960                            
0000E960 7007                       		moveq	#7,d0
0000E962 1238 FE57                  		move.b	(v_emeralds).w,d1
0000E966 6700                       		beq.s	loc_C842
0000E968 7000                       		moveq	#0,d0
0000E96A 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000E96E 6600                       		bne.s	loc_C842	; if not, branch
0000E970 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000E972 317C 0018 0008             		move.w	#$18,obX(a0)
0000E978 317C 0118 0030             		move.w	#$118,ssr_mainX(a0) ; change position of text
0000E97E                            
0000E97E                            loc_C842:
0000E97E 1140 001A                  		move.b	d0,obFrame(a0)
0000E982                            
0000E982                            SSR_Move:	; Routine 2
0000E982 7210                       		moveq	#$10,d1		; set horizontal speed
0000E984 3028 0030                  		move.w	ssr_mainX(a0),d0
0000E988 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E98C 6700                       		beq.s	loc_C86C	; if yes, branch
0000E98E 6C00                       		bge.s	SSR_ChgPos
0000E990 4441                       		neg.w	d1
0000E992                            
0000E992                            SSR_ChgPos:
0000E992 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E996                            
0000E996                            loc_C85A:
0000E996 3028 0008                  		move.w	obX(a0),d0
0000E99A 6B00                       		bmi.s	locret_C86A
0000E99C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E9A0 6400                       		bcc.s	locret_C86A	; if yes, branch
0000E9A2 6000 0000                  		bra.w	DisplaySprite
0000E9A6                            ; ===========================================================================
0000E9A6                            
0000E9A6                            locret_C86A:
0000E9A6 4E75                       		rts	
0000E9A8                            ; ===========================================================================
0000E9A8                            
0000E9A8                            loc_C86C:
0000E9A8 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000E9AE 66E6                       		bne.s	loc_C85A
0000E9B0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E9B4 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E9BA 11FC 0000 D800             		move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E9C0                            
0000E9C0                            SSR_Wait:	; Routine 4, 8, $C, $10
0000E9C0 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E9C4 6600                       		bne.s	SSR_Display
0000E9C6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E9CA                            
0000E9CA                            SSR_Display:
0000E9CA 6000 0000                  		bra.w	DisplaySprite
0000E9CE                            ; ===========================================================================
0000E9CE                            
0000E9CE                            SSR_RingBonus:	; Routine 6
0000E9CE 6100 0000                  		bsr.w	DisplaySprite
0000E9D2 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set ring bonus update flag
0000E9D8 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E9DC 6700                       		beq.s	loc_C8C4	; if yes, branch
0000E9DE 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E9E4 700A                       		moveq	#10,d0		; add 10 to score
0000E9E6 4EB9 0000 0000             		jsr	(AddPoints).l
0000E9EC 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E9F0 0200 0003                  		andi.b	#3,d0
0000E9F4 6600                       		bne.s	locret_C8EA
0000EA00                            ; ===========================================================================
0000EA00                            
0000EA00                            loc_C8C4:
0000EA0A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EA0E 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000EA14 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have at least 50 rings?
0000EA1A 6500                       		bcs.s	locret_C8EA	; if not, branch
0000EA1C 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time delay to 1 second
0000EA22 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto "SSR_Continue" routine
0000EA26                            
0000EA26                            locret_C8EA:
0000EA26 4E75                       		rts	
0000EA28                            ; ===========================================================================
0000EA28                            
0000EA28                            SSR_Exit:	; Routine $A, $12
0000EA28 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000EA2E 6000 0000                  		bra.w	DisplaySprite
0000EA32                            ; ===========================================================================
0000EA32                            
0000EA32                            SSR_Continue:	; Routine $E
0000EA32 11FC 0004 D6DA             		move.b	#4,(v_objspace+$6C0+obFrame).w
0000EA38 11FC 0014 D6E4             		move.b	#$14,(v_objspace+$6C0+obRoutine).w
0000EA48 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EA4C 317C 0168 001E             		move.w	#360,obTimeFrame(a0) ; set time delay to 6 seconds
0000EA52 6000 0000                  		bra.w	DisplaySprite
0000EA56                            ; ===========================================================================
0000EA56                            
0000EA56                            loc_C91A:	; Routine $14
0000EA56 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000EA5A 0200 000F                  		andi.b	#$F,d0
0000EA5E 6600                       		bne.s	SSR_Display2
0000EA60 0868 0000 001A             		bchg	#0,obFrame(a0)
0000EA66                            
0000EA66                            SSR_Display2:
0000EA66 6000 0000                  		bra.w	DisplaySprite
0000EA6A                            ; ===========================================================================
0000EA6A 0020 0120 00C4             SSR_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000EA70 0200                       		dc.b 2,	0		; rountine number, frame number
0000EA72 0320 0120 0118             		dc.w $320, $120, $118
0000EA78 0201                       		dc.b 2,	1
0000EA7A 0360 0120 0128             		dc.w $360, $120, $128
0000EA80 0202                       		dc.b 2,	2
0000EA82 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000EA88 0203                       		dc.b 2,	3
0000EA8A 03A0 0120 0138             		dc.w $3A0, $120, $138
0000EA90 0206                       		dc.b 2,	6
0000EA90 0206                       		dc.b 2,	6
0000EA92                            		include	"_incObj\7F SS Result Chaos Emeralds.asm"
0000EA92                            ; ---------------------------------------------------------------------------
0000EA92                            ; Object 7F - chaos emeralds from the special stage results screen
0000EA92                            ; ---------------------------------------------------------------------------
0000EA92                            
0000EA92                            SSRChaos:
0000EA92 7000                       		moveq	#0,d0
0000EA94 1028 0024                  		move.b	obRoutine(a0),d0
0000EA98 323B 0000                  		move.w	SSRC_Index(pc,d0.w),d1
0000EA9C 4EFB 1000                  		jmp	SSRC_Index(pc,d1.w)
0000EAA0                            ; ===========================================================================
0000EAA0 0000                       SSRC_Index:	dc.w SSRC_Main-SSRC_Index
0000EAA2 0000                       		dc.w SSRC_Flash-SSRC_Index
0000EAA4                            
0000EAA4                            ; ---------------------------------------------------------------------------
0000EAA4                            ; X-axis positions for chaos emeralds
0000EAA4                            ; ---------------------------------------------------------------------------
0000EAA4 0110 0128 00F8 0140 00E0+  SSRC_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000EAB0                            ; ===========================================================================
0000EAB0                            
0000EAB0                            SSRC_Main:	; Routine 0
0000EAB0 2248                       		movea.l	a0,a1
0000EAB2 45F9 0000 EAA4             		lea	(SSRC_PosData).l,a2
0000EAB8 7400                       		moveq	#0,d2
0000EABA 7200                       		moveq	#0,d1
0000EABC 1238 FE57                  		move.b	(v_emeralds).w,d1 ; d1 is number of emeralds
0000EAC0 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000EAC2 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000EAC6                            
0000EAC6                            	SSRC_Loop:
0000EAC6 12BC 0000                  		move.b	#id_SSRChaos,0(a1)
0000EACA 335A 0008                  		move.w	(a2)+,obX(a1)	; set x-position
0000EACE 337C 00F0 000A             		move.w	#$F0,obScreenY(a1) ; set y-position
0000EAD4 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0000EAD8 1633 2000                  		move.b	(a3,d2.w),d3
0000EADC 1343 001A                  		move.b	d3,obFrame(a1)
0000EAE0 1343 001C                  		move.b	d3,obAnim(a1)
0000EAE4 5202                       		addq.b	#1,d2
0000EAE6 5429 0024                  		addq.b	#2,obRoutine(a1)
0000EAEA 237C 0000 0000 0004        		move.l	#Map_SSRC,obMap(a1)
0000EAF2 337C 8541 0002             		move.w	#$8541,obGfx(a1)
0000EAF8 137C 0000 0001             		move.b	#0,obRender(a1)
0000EAFE 43E9 0040                  		lea	$40(a1),a1	; next object
0000EB02 51C9 FFC2                  		dbf	d1,SSRC_Loop	; loop for d1 number of	emeralds
0000EB06                            
0000EB06                            SSRC_Flash:	; Routine 2
0000EB06 1028 001A                  		move.b	obFrame(a0),d0
0000EB0A 117C 0006 001A             		move.b	#6,obFrame(a0)	; load 6th frame (blank)
0000EB10 0C00 0006                  		cmpi.b	#6,d0
0000EB14 6600                       		bne.s	SSRC_Display
0000EB16 1168 001C 001A             		move.b	obAnim(a0),obFrame(a0) ; load visible frame
0000EB1C                            
0000EB1C                            	SSRC_Display:
0000EB1C 6000 0000                  		bra.w	DisplaySprite
0000EB1C 6000 0000                  		bra.w	DisplaySprite
0000EB20                            
0000EB20                            ; ---------------------------------------------------------------------------
0000EB20                            ; Sprite mappings - zone title cards
0000EB20                            ; ---------------------------------------------------------------------------
0000EB20 0000                       Map_Card:	dc.w M_Card_GHZ-Map_Card
0000EB22 0000                       		dc.w M_Card_LZ-Map_Card
0000EB24 0000                       		dc.w M_Card_MZ-Map_Card
0000EB26 0000                       		dc.w M_Card_SLZ-Map_Card
0000EB28 0000                       		dc.w M_Card_SYZ-Map_Card
0000EB2A 0000                       		dc.w M_Card_SBZ-Map_Card
0000EB2C 0000                       		dc.w M_Card_Zone-Map_Card
0000EB2E 0000                       		dc.w M_Card_Act1-Map_Card
0000EB30 0000                       		dc.w M_Card_Act2-Map_Card
0000EB32 0000                       		dc.w M_Card_Act3-Map_Card
0000EB34 0000                       		dc.w M_Card_Oval-Map_Card
0000EB36 0000                       		dc.w M_Card_FZ-Map_Card
0000EB38 09                         M_Card_GHZ:	dc.b 9 			; GREEN HILL
0000EB39 F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000EB3E F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000EB43 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000EB48 F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000EB4D F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000EB52 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000EB57 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000EB5C F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000EB61 F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000EB66                            		even
0000EB66 0D                         M_Card_LZ:	dc.b $D	;  LABYRINTH | ROBOTIC ABYSS
0000EB67 F805 003A 9C               		dc.b $F8, 5, 0, $3A, $9C	; R
0000EB6C F805 0032 AC               		dc.b $F8, 5, 0, $32, $AC	; O
0000EB71 F805 0004 BC               		dc.b $F8, 5, 0, 4, $BC		; B
0000EB76 F805 0032 CC               		dc.b $F8, 5, 0, $32, $CC	; O
0000EB7B F805 0042 DC               		dc.b $F8, 5, 0, $42, $DC	; T
0000EB80 F801 0020 EC               		dc.b $F8, 1, 0, $20, $EC	; I
0000EB85 F805 0008 F4               		dc.b $F8, 5, 0, 8, $F4		; C
0000EB8A F800 0056 04               		dc.b $F8, 0, 0, $56, $4	; Space
0000EB8F F805 0000 14               		dc.b $F8, 5, 0, 0, $14		; A
0000EB94 F805 0004 24               		dc.b $F8, 5, 0, 4, $24		; B
0000EB99 F805 004A 34               		dc.b $F8, 5, 0, $4A, $34	; Y
0000EB9E F805 003E 44               		dc.b $F8, 5, 0, $3E, $44	; S
0000EBA3 F805 003E 54               		dc.b $F8, 5, 0, $3E, $54	; S
0000EBA8 0B                         M_Card_MZ:	dc.b $B	;  MARBLE | SCRAP RUINS
0000EBA9 F805 003E A4               		dc.b $F8, 5, 0, $3E, $A4	; S
0000EBAE F805 0008 B4               		dc.b $F8, 5, 0, 8, $B4		; C
0000EBB3 F805 003A C4               		dc.b $F8, 5, 0, $3A, $C4	; R
0000EBB8 F805 0000 D4               		dc.b $F8, 5, 0, 0, $D4		; A
0000EBBD F805 0036 E4               		dc.b $F8, 5, 0, $36, $E4	; P
0000EBC2 F800 0056 F4               		dc.b $F8, 0, 0, $56, $F4	; Space
0000EBC7 F805 003A 04               		dc.b $F8, 5, 0, $3A, $4	; R
0000EBCC F805 0046 14               		dc.b $F8, 5, 0, $46, $14	; U
0000EBD1 F801 0020 24               		dc.b $F8, 1, 0, $20, $24	; I
0000EBD6 F805 002E 2C               		dc.b $F8, 5, 0, $2E, $2C	; N
0000EBDB F805 003E 3C               		dc.b $F8, 5, 0, $3E, $3C	; S
0000EBE0 09                         M_Card_SLZ:	dc.b 9			; STAR LIGHT
0000EBE1 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000EBE6 F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000EBEB F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000EBF0 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000EBF5 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000EBFA F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000EBFF F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000EC04 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000EC09 F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000EC0E                            		even
0000EC0E 0A                         M_Card_SYZ:	dc.b $A	;  SPRING YARD | FUTURE BAY
0000EC0F F805 0014 AC               		dc.b $F8, 5, 0, $14, $AC	; F
0000EC14 F805 0046 BC               		dc.b $F8, 5, 0, $46, $BC	; U
0000EC19 F805 0042 CC               		dc.b $F8, 5, 0, $42, $CC	; T
0000EC1E F805 0046 DC               		dc.b $F8, 5, 0, $46, $DC	; U
0000EC23 F805 003A EC               		dc.b $F8, 5, 0, $3A, $EC	; R
0000EC28 F805 0010 FC               		dc.b $F8, 5, 0, $10, $FC	; E
0000EC2D F800 0056 0C               		dc.b $F8, 0, 0, $56, $C	; Space
0000EC32 F805 0004 1C               		dc.b $F8, 5, 0, 4, $1C		; B
0000EC37 F805 0000 2C               		dc.b $F8, 5, 0, 0, $2C		; A
0000EC3C F805 004A 3C               		dc.b $F8, 5, 0, $4A, $3C	; Y
0000EC41 0A                         M_Card_SBZ:	dc.b $A			; SCRAP BRAIN
0000EC42 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000EC47 F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000EC4C F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000EC51 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000EC56 F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000EC5B F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000EC60 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000EC65 F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000EC6A F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000EC6F F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000EC74                            		even
0000EC74 04                         M_Card_Zone:	dc.b 4			; ZONE
0000EC75 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000EC7A F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000EC7F F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000EC84 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EC8A 00                         		even
0000EC8A 02                         M_Card_Act1:	dc.b 2			; ACT 1
0000EC8B 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EC90 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000EC95 02                         M_Card_Act2:	dc.b 2			; ACT 2
0000EC96 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EC9B F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000ECA0 02                         M_Card_Act3:	dc.b 2			; ACT 3
0000ECA1 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000ECA6 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000ECAB 0D                         M_Card_Oval:	dc.b $D			; Oval
0000ECAC E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000ECB1 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000ECB6 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000ECBB F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000ECC0 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000ECC5 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000ECCA 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000ECCF FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000ECD4 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000ECD9 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000ECDE FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000ECE3 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000ECE8 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000ECEE 00                         		even
0000ECEE 05                         M_Card_FZ:	dc.b 5			; FINAL
0000ECEF F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000ECF4 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000ECF9 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000ECFE F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000ED03 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000ED08                            		even
0000ED08                            
0000ED08                            Map_Over:	include	"_maps\Game Over.asm"
0000ED08                            ; ---------------------------------------------------------------------------
0000ED08                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000ED08                            ; ---------------------------------------------------------------------------
0000ED08                            Map_Over_internal:
0000ED08 0000                       		dc.w byte_CBAC-Map_Over_internal
0000ED0A 0000                       		dc.w byte_CBB7-Map_Over_internal
0000ED0C 0000                       		dc.w byte_CBC2-Map_Over_internal
0000ED0E 0000                       		dc.w byte_CBCD-Map_Over_internal
0000ED10 02                         byte_CBAC:	dc.b 2			; GAME
0000ED11 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000ED16 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000ED1B 02                         byte_CBB7:	dc.b 2			; OVER
0000ED1C F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000ED21 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000ED26 02                         byte_CBC2:	dc.b 2			; TIME
0000ED27 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000ED2C F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000ED31 02                         byte_CBCD:	dc.b 2			; OVER
0000ED32 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000ED37 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000ED3C                            		even
0000ED3C                            		even
0000ED3C                            
0000ED3C                            ; ---------------------------------------------------------------------------
0000ED3C                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000ED3C                            ; ---------------------------------------------------------------------------
0000ED3C 0000                       Map_Got:	dc.w M_Got_SonicHas-Map_Got
0000ED3E 0000                       		dc.w M_Got_Passed-Map_Got
0000ED40 0000                       		dc.w M_Got_Score-Map_Got
0000ED42 0000                       		dc.w M_Got_TBonus-Map_Got
0000ED44 0000                       		dc.w M_Got_RBonus-Map_Got
0000ED46 FF6F                       		dc.w M_Card_Oval-Map_Got
0000ED48 FF4E                       		dc.w M_Card_Act1-Map_Got
0000ED4A FF59                       		dc.w M_Card_Act2-Map_Got
0000ED4C FF64                       		dc.w M_Card_Act3-Map_Got
0000ED4E 08                         M_Got_SonicHas:	dc.b 8			; SONIC HAS
0000ED4F F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000ED54 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000ED59 F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000ED5E F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000ED63 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000ED68 F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000ED6D F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000ED72 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000ED77 06                         M_Got_Passed:	dc.b 6			; PASSED
0000ED78 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000ED7D F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000ED82 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000ED87 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000ED8C F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000ED91 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000ED96 06                         M_Got_Score:	dc.b 6			; SCORE
0000ED97 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000ED9C F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EDA1 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EDA6 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EDAB F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EDB0 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EDB5 07                         M_Got_TBonus:	dc.b 7			; TIME BONUS
0000EDB6 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000EDBB F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EDC0 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EDC5 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EDCA FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EDCF F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000EDD4 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EDD9 07                         M_Got_RBonus:	dc.b 7			; RING BONUS
0000EDDA F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EDDF F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EDE4 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EDE9 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EDEE FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EDF3 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EDF8 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EDFE 00                         		even
0000EDFE                            ; ---------------------------------------------------------------------------
0000EDFE                            ; Sprite mappings - special stage results screen
0000EDFE                            ; ---------------------------------------------------------------------------
0000EDFE 0000                       Map_SSR:	dc.w M_SSR_Chaos-Map_SSR
0000EE00 0000                       		dc.w M_SSR_Score-Map_SSR
0000EE02 0000                       		dc.w byte_CD0D-Map_SSR
0000EE04 FEAD                       		dc.w M_Card_Oval-Map_SSR
0000EE06 0000                       		dc.w byte_CD31-Map_SSR
0000EE08 0000                       		dc.w byte_CD46-Map_SSR
0000EE0A 0000                       		dc.w byte_CD5B-Map_SSR
0000EE0C 0000                       		dc.w byte_CD6B-Map_SSR
0000EE0E 0000                       		dc.w byte_CDA8-Map_SSR
0000EE10 0D                         M_SSR_Chaos:	dc.b $D			; "CHAOS EMERALDS"
0000EE11 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000EE16 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000EE1B F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000EE20 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000EE25 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000EE2A F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000EE2F F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000EE34 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EE39 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000EE3E F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000EE43 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000EE48 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000EE4D F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000EE52 06                         M_SSR_Score:	dc.b 6			; "SCORE"
0000EE53 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EE58 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EE5D F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EE62 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EE67 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EE6C FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EE71 07                         byte_CD0D:	dc.b 7
0000EE72 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EE77 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EE7C F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EE81 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EE86 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EE8B F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EE90 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EE95 04                         byte_CD31:	dc.b 4
0000EE96 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EE9B F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EEA0 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EEA5 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000EEAA 04                         byte_CD46:	dc.b 4
0000EEAB F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EEB0 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EEB5 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EEBA F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000EEBF 03                         byte_CD5B:	dc.b 3
0000EEC0 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EEC5 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EECA F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EECF 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000EED0 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000EED5 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000EEDA F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000EEDF F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000EEE4 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000EEE9 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000EEEE F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000EEF3 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000EEF8 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000EEFD F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000EF02 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000EF07 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000EF0C 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000EF0D F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000EF12 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000EF17 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000EF1C F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000EF21 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000EF26 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000EF2B F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000EF30 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000EF35 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000EF3A F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000EF3F F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000EF44 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000EF49 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000EF4E F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000EF53 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000EF58                            		even
0000EF58                            
0000EF58                            Map_SSRC:	include	"_maps\SS Result Chaos Emeralds.asm"
0000EF58                            ; ---------------------------------------------------------------------------
0000EF58                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000EF58                            ; ---------------------------------------------------------------------------
0000EF58                            Map_SSRC_internal:
0000EF58 0000                       		dc.w byte_CE02-Map_SSRC_internal
0000EF5A 0000                       		dc.w byte_CE08-Map_SSRC_internal
0000EF5C 0000                       		dc.w byte_CE0E-Map_SSRC_internal
0000EF5E 0000                       		dc.w byte_CE14-Map_SSRC_internal
0000EF60 0000                       		dc.w byte_CE1A-Map_SSRC_internal
0000EF62 0000                       		dc.w byte_CE20-Map_SSRC_internal
0000EF64 0000                       		dc.w byte_CE26-Map_SSRC_internal
0000EF66 01                         byte_CE02:	dc.b 1
0000EF67 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000EF6C 01                         byte_CE08:	dc.b 1
0000EF6D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000EF72 01                         byte_CE0E:	dc.b 1
0000EF73 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000EF78 01                         byte_CE14:	dc.b 1
0000EF79 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000EF7E 01                         byte_CE1A:	dc.b 1
0000EF7F F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000EF84 01                         byte_CE20:	dc.b 1
0000EF85 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000EF8A 00                         byte_CE26:	dc.b 0			; Blank frame
0000EF8C 00                         		even
0000EF8C 00                         		even
0000EF8C                            
0000EF8C                            		include	"_incObj\36 Spikes.asm"
0000EF8C                            ; ---------------------------------------------------------------------------
0000EF8C                            ; Object 36 - spikes
0000EF8C                            ; ---------------------------------------------------------------------------
0000EF8C                            
0000EF8C                            Spikes:
0000EF8C 7000                       		moveq	#0,d0
0000EF8E 1028 0024                  		move.b	obRoutine(a0),d0
0000EF92 323B 0000                  		move.w	Spik_Index(pc,d0.w),d1
0000EF96 4EFB 1000                  		jmp	Spik_Index(pc,d1.w)
0000EF9A                            ; ===========================================================================
0000EF9A 0000                       Spik_Index:	dc.w Spik_Main-Spik_Index
0000EF9C 0000                       		dc.w Spik_Solid-Spik_Index
0000EF9E                            
0000EF9E =00000030                  spik_origX:	equ $30		; start X position
0000EF9E =00000032                  spik_origY:	equ $32		; start Y position
0000EF9E                            
0000EF9E 0014                       Spik_Var:	dc.b 0,	$14		; frame	number,	object width
0000EFA0 0110                       		dc.b 1,	$10
0000EFA2 0204                       		dc.b 2,	4
0000EFA4 031C                       		dc.b 3,	$1C
0000EFA6 0440                       		dc.b 4,	$40
0000EFA8 0510                       		dc.b 5,	$10
0000EFAA                            ; ===========================================================================
0000EFAA                            
0000EFAA                            Spik_Main:	; Routine 0
0000EFAA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EFAE 217C 0000 0000 0004        		move.l	#Map_Spike,obMap(a0)
0000EFB6 317C 051B 0002             		move.w	#$51B,obGfx(a0)
0000EFBC 0028 0004 0001             		ori.b	#4,obRender(a0)
0000EFC2 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000EFC8 1028 0028                  		move.b	obSubtype(a0),d0
0000EFCC 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000EFD2 0240 00F0                  		andi.w	#$F0,d0
0000EFD6 43F9 0000 EF9E             		lea	(Spik_Var).l,a1
0000EFDC E648                       		lsr.w	#3,d0
0000EFDE D2C0                       		adda.w	d0,a1
0000EFE0 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000EFE4 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000EFE8 3168 0008 0030             		move.w	obX(a0),spik_origX(a0)
0000EFEE 3168 000C 0032             		move.w	obY(a0),spik_origY(a0)
0000EFF4                            
0000EFF4                            Spik_Solid:	; Routine 2
0000EFF4 6100 0000                  		bsr.w	Spik_Type0x	; make the object move
0000EFF8 343C 0004                  		move.w	#4,d2
0000EFFC 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is object type $5x ?
0000F002 6700                       		beq.s	Spik_SideWays	; if yes, branch
0000F004 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is object type $1x ?
0000F00A 6600                       		bne.s	Spik_Upright	; if not, branch
0000F00C 343C 0014                  		move.w	#$14,d2
0000F010                            
0000F010                            ; Spikes types $1x and $5x face	sideways
0000F010                            
0000F010                            Spik_SideWays:
0000F010 323C 001B                  		move.w	#$1B,d1
0000F014 3602                       		move.w	d2,d3
0000F016 5243                       		addq.w	#1,d3
0000F018 3828 0008                  		move.w	obX(a0),d4
0000F01C 6100 0000                  		bsr.w	SolidObject
0000F020 0828 0003 0022             		btst	#3,obStatus(a0)
0000F026 6600                       		bne.s	Spik_Display
0000F028 0C44 0001                  		cmpi.w	#1,d4
0000F02C 6700                       		beq.s	Spik_Hurt
0000F02E 6000                       		bra.s	Spik_Display
0000F030                            ; ===========================================================================
0000F030                            
0000F030                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000F030                            
0000F030                            Spik_Upright:
0000F030 7200                       		moveq	#0,d1
0000F032 1228 0014                  		move.b	obActWid(a0),d1
0000F036 0641 000B                  		addi.w	#$B,d1
0000F03A 343C 0010                  		move.w	#$10,d2
0000F03E 363C 0011                  		move.w	#$11,d3
0000F042 3828 0008                  		move.w	obX(a0),d4
0000F046 6100 0000                  		bsr.w	SolidObject
0000F04A 0828 0003 0022             		btst	#3,obStatus(a0)
0000F050 6600                       		bne.s	Spik_Hurt
0000F052 4A44                       		tst.w	d4
0000F054 6A00                       		bpl.s	Spik_Display
0000F056                            
0000F056                            Spik_Hurt:
0000F056 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0000F05A 6600                       		bne.s	Spik_Display	; if yes, branch
0000F05C 4A78 D030                  		tst.w	(v_player+$30).w ; +++ is Sonic invulnerable?
0000F060 6600                       		bne.s	Spik_Display	; +++ if yes, branch
0000F062 2F08                       		move.l	a0,-(sp)
0000F064 2448                       		movea.l	a0,a2
0000F066 41F8 D000                  		lea	(v_player).w,a0
0000F06A 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000F070 6400                       		bcc.s	loc_CF20
0000F072                            		; This fixes the infamous "spike bug"
0000F072 4A68 0030                  		tst.w	flashtime(a0)	; Is Sonic flashing after being hurt?
0000F076 6600                       		bne.s	loc_CF20	; If so, skip getting hurt
0000F078 4EF9 0000 00E0             		jmp	(loc_E0).l	; This is a copy of the above code that was pushed aside for this
0000F07E                            loc_D5A2:
0000F07E 9680                       		sub.l	d0,d3
0000F080 2143 000C                  		move.l	d3,obY(a0)
0000F084 4EB9 0000 0000             		jsr	(HurtSonic).l
0000F08A                            
0000F08A                            loc_CF20:
0000F08A 205F                       		movea.l	(sp)+,a0
0000F08C                            
0000F08C                            Spik_Display:
0000F08C 6100 0000                  		bsr.w	DisplaySprite
0000F0AE 4E75                       		rts	
0000F0B0                            ; ===========================================================================
0000F0B0                            
0000F0B0                            Spik_Type0x:
0000F0B0 7000                       		moveq	#0,d0
0000F0B2 1028 0028                  		move.b	obSubtype(a0),d0
0000F0B6 D040                       		add.w	d0,d0
0000F0B8 323B 0000                  		move.w	Spik_TypeIndex(pc,d0.w),d1
0000F0BC 4EFB 1000                  		jmp	Spik_TypeIndex(pc,d1.w)
0000F0C0                            ; ===========================================================================
0000F0C0 0000                       Spik_TypeIndex:	dc.w Spik_Type00-Spik_TypeIndex
0000F0C2 0000                       		dc.w Spik_Type01-Spik_TypeIndex
0000F0C4 0000                       		dc.w Spik_Type02-Spik_TypeIndex
0000F0C6                            ; ===========================================================================
0000F0C6                            
0000F0C6                            Spik_Type00:
0000F0C6 4E75                       		rts			; don't move the object
0000F0C8                            ; ===========================================================================
0000F0C8                            
0000F0C8                            Spik_Type01:
0000F0C8 6100 0000                  		bsr.w	Spik_Wait
0000F0CC 7000                       		moveq	#0,d0
0000F0CE 1028 0034                  		move.b	$34(a0),d0
0000F0D2 D068 0032                  		add.w	spik_origY(a0),d0
0000F0D6 3140 000C                  		move.w	d0,obY(a0)	; move the object vertically
0000F0DA 4E75                       		rts	
0000F0DC                            ; ===========================================================================
0000F0DC                            
0000F0DC                            Spik_Type02:
0000F0DC 6100 0000                  		bsr.w	Spik_Wait
0000F0E0 7000                       		moveq	#0,d0
0000F0E2 1028 0034                  		move.b	$34(a0),d0
0000F0E6 D068 0030                  		add.w	spik_origX(a0),d0
0000F0EA 3140 0008                  		move.w	d0,obX(a0)	; move the object horizontally
0000F0EE 4E75                       		rts	
0000F0F0                            ; ===========================================================================
0000F0F0                            
0000F0F0                            Spik_Wait:
0000F0F0 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000F0F4 6700                       		beq.s	loc_CFA4	; if yes, branch
0000F0F6 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000F0FA 6600                       		bne.s	locret_CFE6
0000F0FC 4A28 0001                  		tst.b	obRender(a0)
0000F100 6A00                       		bpl.s	locret_CFE6
0000F10C 6000                       		bra.s	locret_CFE6
0000F10E                            ; ===========================================================================
0000F10E                            
0000F10E                            loc_CFA4:
0000F10E 4A68 0036                  		tst.w	$36(a0)
0000F112 6700                       		beq.s	loc_CFC6
0000F114 0468 0800 0034             		subi.w	#$800,$34(a0)
0000F11A 6400                       		bcc.s	locret_CFE6
0000F11C 317C 0000 0034             		move.w	#0,$34(a0)
0000F122 317C 0000 0036             		move.w	#0,$36(a0)
0000F128 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F12E 6000                       		bra.s	locret_CFE6
0000F130                            ; ===========================================================================
0000F130                            
0000F130                            loc_CFC6:
0000F130 0668 0800 0034             		addi.w	#$800,$34(a0)
0000F136 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000F13C 6500                       		bcs.s	locret_CFE6
0000F13E 317C 2000 0034             		move.w	#$2000,$34(a0)
0000F144 317C 0001 0036             		move.w	#1,$36(a0)
0000F14A 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F150                            
0000F150                            locret_CFE6:
0000F150 4E75                       		rts	
0000F150 4E75                       		rts	
0000F152                            Map_Spike:	include	"_maps\Spikes.asm"
0000F152                            ; --------------------------------------------------------------------------------
0000F152                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000F152                            ; --------------------------------------------------------------------------------
0000F152                            
0000F152                            SME_XgeaQ:	
0000F152 0000 0000                  		dc.w SME_XgeaQ_C-SME_XgeaQ, SME_XgeaQ_1C-SME_XgeaQ	
0000F156 0000 0000                  		dc.w SME_XgeaQ_2C-SME_XgeaQ, SME_XgeaQ_32-SME_XgeaQ	
0000F15A 0000 0000                  		dc.w SME_XgeaQ_42-SME_XgeaQ, SME_XgeaQ_61-SME_XgeaQ	
0000F15E 03                         SME_XgeaQ_C:	dc.b 3	
0000F15F F003 2004 EC               		dc.b $F0, 3, $20, 4, $EC	
0000F164 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F169 F003 2004 0C               		dc.b $F0, 3, $20, 4, $C	
0000F16E 03                         SME_XgeaQ_1C:	dc.b 3	
0000F16F EC0C 2000 F0               		dc.b $EC, $C, $20, 0, $F0	
0000F174 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F179 0C0C 2000 F0               		dc.b $C, $C, $20, 0, $F0	
0000F17E 01                         SME_XgeaQ_2C:	dc.b 1	
0000F17F F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F184 03                         SME_XgeaQ_32:	dc.b 3	
0000F185 F003 2004 E4               		dc.b $F0, 3, $20, 4, $E4	
0000F18A F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F18F F003 2004 14               		dc.b $F0, 3, $20, 4, $14	
0000F194 06                         SME_XgeaQ_42:	dc.b 6	
0000F195 F003 2004 C0               		dc.b $F0, 3, $20, 4, $C0	
0000F19A F003 2004 D8               		dc.b $F0, 3, $20, 4, $D8	
0000F19F F003 2004 F0               		dc.b $F0, 3, $20, 4, $F0	
0000F1A4 F003 2004 08               		dc.b $F0, 3, $20, 4, 8	
0000F1A9 F003 2004 20               		dc.b $F0, 3, $20, 4, $20	
0000F1AE F003 2004 38               		dc.b $F0, 3, $20, 4, $38	
0000F1B3 01                         SME_XgeaQ_61:	dc.b 1	
0000F1B4 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F1BA 00                         		even
0000F1BA 00                         		even
0000F1BA                            		include	"_incObj\3B Purple Rock.asm"
0000F1BA                            ; ---------------------------------------------------------------------------
0000F1BA                            ; Object 3B - purple rock (GHZ)
0000F1BA                            ; ---------------------------------------------------------------------------
0000F1BA                            
0000F1BA                            PurpleRock:
0000F1BA 7000                       		moveq	#0,d0
0000F1BC 1028 0024                  		move.b	obRoutine(a0),d0
0000F1C0 323B 0000                  		move.w	Rock_Index(pc,d0.w),d1
0000F1C4 4EFB 1000                  		jmp	Rock_Index(pc,d1.w)
0000F1C8                            ; ===========================================================================
0000F1C8 0000                       Rock_Index:	dc.w Rock_Main-Rock_Index
0000F1CA 0000                       		dc.w Rock_Solid-Rock_Index
0000F1CC                            ; ===========================================================================
0000F1CC                            
0000F1CC                            Rock_Main:	; Routine 0
0000F1CC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F1D0 217C 0000 0000 0004        		move.l	#Map_PRock,obMap(a0)
0000F1D8 317C 63D0 0002             		move.w	#$63D0,obGfx(a0)
0000F1DE 117C 0004 0001             		move.b	#4,obRender(a0)
0000F1E4 117C 0013 0014             		move.b	#$13,obActWid(a0)
0000F1EA 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F1F0                            
0000F1F0                            Rock_Solid:	; Routine 2
0000F1F0 323C 001B                  		move.w	#$1B,d1
0000F1F4 343C 0010                  		move.w	#$10,d2
0000F1F8 363C 0010                  		move.w	#$10,d3
0000F1FC 3828 0008                  		move.w	obX(a0),d4
0000F200 6100 0000                  		bsr.w	SolidObject
0000F204 6100 0000                  		bsr.w	DisplaySprite
0000F226 4E75                       		rts	
0000F226 4E75                       		rts	
0000F228                            		include	"_incObj\49 Waterfall Sound.asm"
0000F228                            ; ---------------------------------------------------------------------------
0000F228                            ; Object 49 - waterfall	sound effect (GHZ)
0000F228                            ; ---------------------------------------------------------------------------
0000F228                            
0000F228                            WaterSound:
0000F228 7000                       		moveq	#0,d0
0000F22A 1028 0024                  		move.b	obRoutine(a0),d0
0000F22E 323B 0000                  		move.w	WSnd_Index(pc,d0.w),d1
0000F232 4EFB 1000                  		jmp	WSnd_Index(pc,d1.w)
0000F236                            ; ===========================================================================
0000F236 0000                       WSnd_Index:	dc.w WSnd_Main-WSnd_Index
0000F238 0000                       		dc.w WSnd_PlaySnd-WSnd_Index
0000F23A                            ; ===========================================================================
0000F23A                            
0000F23A                            WSnd_Main:	; Routine 0
0000F23A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F23E 117C 0004 0001             		move.b	#4,obRender(a0)
0000F244                            
0000F244                            WSnd_PlaySnd:	; Routine 2
0000F244 1038 FE0F                  		move.b	(v_vbla_byte).w,d0 ; get low byte of VBlank counter
0000F248 0200 003F                  		andi.b	#$3F,d0
0000F24C 6600                       		bne.s	WSnd_ChkDel
0000F258                            
0000F258                            	WSnd_ChkDel:
0000F276 4E75                       		rts	
0000F276 4E75                       		rts	
0000F278                            Map_PRock:	include	"_maps\Purple Rock.asm"
0000F278                            ; ---------------------------------------------------------------------------
0000F278                            ; Sprite mappings - purple rock	(GHZ)
0000F278                            ; ---------------------------------------------------------------------------
0000F278                            Map_PRock_internal:
0000F278 0000                       		dc.w byte_D110-Map_PRock_internal
0000F27A 02                         byte_D110:	dc.b 2
0000F27B F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F280 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000F286 00                         		even
0000F286 00                         		even
0000F286                            		include	"_incObj\3C Smashable Wall.asm"
0000F286                            ; ---------------------------------------------------------------------------
0000F286                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000F286                            ; ---------------------------------------------------------------------------
0000F286                            
0000F286                            SmashWall:
0000F286 7000                       		moveq	#0,d0
0000F288 1028 0024                  		move.b	obRoutine(a0),d0
0000F28C 323B 0000                  		move.w	Smash_Index(pc,d0.w),d1
0000F290 4EBB 1000                  		jsr	Smash_Index(pc,d1.w)
0000F294 6000 0000                  		bra.w	RememberState
0000F298                            ; ===========================================================================
0000F298 0000                       Smash_Index:	dc.w Smash_Main-Smash_Index
0000F29A 0000                       		dc.w Smash_Solid-Smash_Index
0000F29C 0000                       		dc.w Smash_FragMove-Smash_Index
0000F29E                            
0000F29E =00000030                  smash_speed:	equ $30		; Sonic's horizontal speed
0000F29E                            ; ===========================================================================
0000F29E                            
0000F29E                            Smash_Main:	; Routine 0
0000F29E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F2A2 217C 0000 0000 0004        		move.l	#Map_Smash,obMap(a0)
0000F2AA 317C 450F 0002             		move.w	#$450F,obGfx(a0)
0000F2B0 117C 0004 0001             		move.b	#4,obRender(a0)
0000F2B6 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000F2BC 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F2C2 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0000F2C8                            
0000F2C8                            Smash_Solid:	; Routine 2
0000F2C8 3178 D010 0030             		move.w	(v_player+obVelX).w,smash_speed(a0) ; load Sonic's horizontal speed
0000F2CE 323C 001B                  		move.w	#$1B,d1
0000F2D2 343C 0020                  		move.w	#$20,d2
0000F2D6 363C 0020                  		move.w	#$20,d3
0000F2DA 3828 0008                  		move.w	obX(a0),d4
0000F2DE 6100 0000                  		bsr.w	SolidObject	
0000F2E2 4A04                       		tst.b	d4
0000F2E4 6E00 0000                  		bgt.w	@chkroll	
0000F2E8 6700 0000                  		beq.w	@donothing								
0000F2EC 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing against the wall?
0000F2F2 6700 0000                  		beq.w	@donothing	; if yes, branch
0000F2F6                            ; ===========================================================================
0000F2F6                            
0000F2F6                            @chkroll:
0000F2F6 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000F2FC 6600                       		bne.s	@donothing	; if not, branch	
0000F2FE 3028 0030                  		move.w	smash_speed(a0),d0
0000F302 6A00                       		bpl.s	@chkspeed
0000F304 4440                       		neg.w	d0
0000F306                            
0000F306                            	@chkspeed:
0000F306 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000F30A 6500                       		bcs.s	@donothing	; if not, branch	
0000F30C                            		
0000F30C                            	@continue:	
0000F30C 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000F312 3368 0030 0010             		move.w	smash_speed(a0),obVelX(a1)
0000F318 49F9 0000 0000             		lea	(Smash_FragSpd1).l,a4 ;	use fragments that move	right
0000F31E 3028 0008                  		move.w	obX(a0),d0
0000F322 B069 0008                  		cmp.w	obX(a1),d0	; is Sonic to the right	of the block?
0000F326 6500                       		bcs.s	@smash		; if yes, branch
0000F328 49F9 0000 0000             		lea	(Smash_FragSpd2).l,a4 ;	use fragments that move	left
0000F32E                            
0000F32E                            	@smash:
0000F32E 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000F334 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000F33A 7206                       		moveq	#6,d1		; load 7 fragments
0000F33C 343C 0070                  		move.w	#$70,d2
0000F340 6100                       		bsr.s	SmashObject
0000F342                            
0000F342                            @donothing:
0000F342 4E75                       		rts	
0000F344                            
0000F344                            Smash_FragMove:	; Routine 4
0000F344 588F                       		addq.l	#4,sp
0000F346 6100 0000                  		bsr.w	SpeedToPos
0000F34A 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make fragment	fall faster
0000F350 4A28 0001                  		tst.b	obRender(a0)
0000F354 6A00 0000                  		bpl.w	DeleteObject
0000F358 6000 0000                  		bra.w	DisplaySprite
0000F35C                            
0000F35C                            
0000F35C                            
0000F35C                            		include	"_incObj\sub SmashObject.asm"
0000F35C                            ; ---------------------------------------------------------------------------
0000F35C                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000F35C                            ; ---------------------------------------------------------------------------
0000F35C                            
0000F35C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F35C                            
0000F35C                            
0000F35C                            SmashObject:
0000F35C 7000                       		moveq	#0,d0
0000F35E 1028 001A                  		move.b	obFrame(a0),d0
0000F362 D040                       		add.w	d0,d0
0000F364 2668 0004                  		movea.l	obMap(a0),a3
0000F368 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000F36C 524B                       		addq.w	#1,a3
0000F36E 08E8 0005 0001             		bset	#5,obRender(a0)
0000F374 1810                       		move.b	0(a0),d4
0000F376 1A28 0001                  		move.b	obRender(a0),d5
0000F37A 2248                       		movea.l	a0,a1
0000F37C 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F382 1284                       		move.b	d4,0(a1)
0000F384 234B 0004                  		move.l	a3,obMap(a1)
0000F388 1345 0001                  		move.b	d5,obRender(a1)
0000F38C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F392 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F398 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F39E 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F3A4 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F3AA 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F3AE 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F3B2 5341                       		subq.w #1,d1
0000F3B4 43F8 D800                  		lea (v_lvlobjspace).w,a1
0000F3B8 303C 005F                  		move.w #$5F,d0
0000F3BC                            ; ===========================================================================
0000F3BC                            
0000F3BC                            Smash_Loop:
0000F3BC 4A11                       		tst.b	(a1)
0000F3BE 6700                       		beq.s	@cont
0000F3C0 43E9 0040                  		lea		$40(a1),a1
0000F3C4 51C8 FFF6                  		dbf 	d0,Smash_Loop 
0000F3C8 6600                       		bne.s	Smash_PlaySnd
0000F3CA                            
0000F3CA                            	@cont:
0000F3CA 5A4B                       		addq.w #5,a3
0000F3CC                            
0000F3CC                            Smash_LoadFrag:				; XREF: SmashObject
0000F3CC 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F3D2 1284                       		move.b	d4,0(a1)
0000F3D4 234B 0004                  		move.l	a3,obMap(a1)
0000F3D8 1345 0001                  		move.b	d5,obRender(a1)
0000F3DC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F3E2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F3E8 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F3EE 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F3F4 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F3FA 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F3FE 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F402 51C9 FFB8                  		dbf	d1,Smash_Loop
0000F406                            
0000F406                            Smash_PlaySnd:
0000F406 303C 0000                  		move.w	#sfx_WallSmash,d0
0000F40A 4EF9 0000 12A0             		jmp	(PlaySound_Special).l ; play smashing sound
0000F410                            
0000F410                            ; End of function SmashObject
0000F410                            ; End of function SmashObject
0000F410                            
0000F410                            ; ===========================================================================
0000F410                            ; Smashed block	fragment speeds
0000F410                            ;
0000F410 0400 FB00                  Smash_FragSpd1:	dc.w $400, -$500	; x-move speed,	y-move speed
0000F414 0600 FF00                  		dc.w $600, -$100
0000F418 0600 0100                  		dc.w $600, $100
0000F41C 0400 0500                  		dc.w $400, $500
0000F420 0600 FA00                  		dc.w $600, -$600
0000F424 0800 FE00                  		dc.w $800, -$200
0000F428 0800 0200                  		dc.w $800, $200
0000F42C 0600 0600                  		dc.w $600, $600
0000F430                            
0000F430 FA00 FA00                  Smash_FragSpd2:	dc.w -$600, -$600
0000F434 F800 FE00                  		dc.w -$800, -$200
0000F438 F800 0200                  		dc.w -$800, $200
0000F43C FA00 0600                  		dc.w -$600, $600
0000F440 FC00 FB00                  		dc.w -$400, -$500
0000F444 FA00 FF00                  		dc.w -$600, -$100
0000F448 FA00 0100                  		dc.w -$600, $100
0000F44C FC00 0500                  		dc.w -$400, $500
0000F450                            
0000F450                            Map_Smash:	include	"_maps\Smashable Walls.asm"
0000F450                            ; ---------------------------------------------------------------------------
0000F450                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000F450                            ; ---------------------------------------------------------------------------
0000F450                            Map_Smash_internal:
0000F450 0000                       		dc.w @left-Map_Smash_internal
0000F452 0000                       		dc.w @middle-Map_Smash_internal
0000F454 0000                       		dc.w @right-Map_Smash_internal
0000F456 08                         @left:		dc.b 8
0000F457 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000F45C F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000F461 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000F466 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000F46B E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F470 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F475 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F47A 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F47F 08                         @middle:	dc.b 8
0000F480 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F485 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F48A 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F48F 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F494 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F499 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F49E 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F4A3 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F4A8 08                         @right:		dc.b 8
0000F4A9 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F4AE F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F4B3 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F4B8 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F4BD E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000F4C2 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000F4C7 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000F4CC 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000F4D2 00                         		even
0000F4D2 00                         		even
0000F4D2                            
0000F4D2                            ; ---------------------------------------------------------------------------
0000F4D2                            ; Object code execution subroutine
0000F4D2                            ; ---------------------------------------------------------------------------
0000F4D2                            
0000F4D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F4D2                            
0000F4D2                            
0000F4D2                            
0000F4D2                            ExecuteObjects: ; XREF: GM_Title; et al
0000F4D2 41F8 D000                  		lea (v_objspace).w,a0 ; set address for object RAM
0000F4D6 7E7F                       		moveq #$7F,d7
0000F4D8 7000                       		moveq #0,d0
0000F4DA 0C38 0006 D024             		cmpi.b #6,(v_player+obRoutine).w
0000F4E0 6400                       		bcc.s loc_D362
0000F4E2                            
0000F4E2                            loc_D348:
0000F4E2 1010                       		move.b (a0),d0 ; load object number from RAM
0000F4E4 6700                       		beq.s loc_D358
0000F4E6 D040                       		add.w d0,d0
0000F4E8 D040                       		add.w d0,d0
0000F4EA 227B 0000                  		movea.l Obj_Index-4(pc,d0.w),a1
0000F4EE 4E91                       		jsr (a1) ; run the object's code
0000F4F0 7000                       		moveq #0,d0
0000F4F2                            
0000F4F2                            loc_D358:
0000F4F2 41E8 0040                  		lea $40(a0),a0 ; next object
0000F4F6 51CF FFEA                  		dbf d7,loc_D348
0000F4FA 4E75                       		rts
0000F4FC                            ; ===========================================================================
0000F4FC                            
0000F4FC                            loc_D362:
0000F4FC 7E1F                       		moveq #$1F,d7
0000F4FE 61E2                       		bsr.s loc_D348
0000F500 7E5F                       		moveq #$5F,d7
0000F502                            
0000F502                            loc_D368:
0000F502 7000                       		moveq #0,d0 ; Clear d0 quickly
0000F504 1010                       		move.b (a0),d0 ; get the object's ID
0000F506 6700                       		beq.s loc_D37C ; if it's obj00, skip it
0000F508 4A28 0001                  		tst.b obRender(a0) ; should we render it?
0000F50C 6A00                       		bpl.s loc_D37C ; if not, skip it
0000F50E 3028 0018                  		move.w obpriority(a0),d0 ; move object's priority to d0
0000F512 0828 0006 0001             		btst #6,obRender(a0) ; is the compound sprites flag set?
0000F518 6700                       		beq.s loc_D378 ; if not, branch
0000F51A 303C 0200                  		move.w #$200,d0 ; move $200 to d0
0000F51E                            
0000F51E                            loc_D378:
0000F51E 6100 0000                  		bsr.w DisplaySprite2
0000F522                            		
0000F522                            loc_D37C:
0000F522 41E8 0040                  		lea $40(a0),a0
0000F526 51CF FFDA                  		dbf d7,loc_D368
0000F52A 4E75                       		rts
0000F52C                            ; End of function ExecuteObjects
0000F52C                            
0000F52C                            ; ===========================================================================
0000F52C                            ; ---------------------------------------------------------------------------
0000F52C                            ; Object pointers
0000F52C                            ; ---------------------------------------------------------------------------
0000F52C                            Obj_Index:
0000F52C                            		include	"_inc\Object Pointers.asm"
0000F52C                            ; ---------------------------------------------------------------------------
0000F52C                            ; Object pointers
0000F52C                            ; ---------------------------------------------------------------------------
0000F52C 0000 0000                  ptr_SonicPlayer:	dc.l SonicPlayer	; $01
0000F530 0000 0000                  ptr_Obj02:			dc.l ObjectFall
0000F534 0000 0000                  ptr_Obj03:			dc.l Obj03
0000F538 0000 0000                  ptr_GShieldItem:	dc.l GShieldItem
0000F53C 0000 0000                  ptr_Obj05:		dc.l Spindash_dust
0000F540 0000 B222                  ptr_Mozzietron:		dc.l Mozzietron
0000F544 0000 0000                  ptr_RShieldItem:	dc.l RShieldItem	
0000F548 0000 0000                  ptr_Splash:		dc.l Splash		; $08
0000F54C 0000 0000                  ptr_SonicSpecial:	dc.l SonicSpecial
0000F550 0000 0000                  ptr_DrownCount:		dc.l DrownCount
0000F554 0000 0000                  ptr_Pole:		dc.l Pole
0000F558 0000 0000                  ptr_FlapDoor:		dc.l FlapDoor
0000F55C 0000 0000                  ptr_Signpost:		dc.l Signpost
0000F560 0000 C640                  ptr_TitleSonic:		dc.l TitleSonic
0000F564 0000 C6C0                  ptr_PSBTM:		dc.l PSBTM
0000F568 0000 0000                  ptr_Obj10:		dc.l Obj10		; $10
0000F56C 0000 8B04                  ptr_Bridge:		dc.l Bridge
0000F570 0000 0000                  ptr_SpinningLight:	dc.l SpinningLight
0000F574 0000 0000                  ptr_LavaMaker:		dc.l LavaMaker
0000F578 0000 0000                  ptr_LavaBall:		dc.l LavaBall
0000F57C 0000 912A                  ptr_SwingingPlatform:	dc.l SwingingPlatform
0000F580 0000 0000                  ptr_Harpoon:		dc.l Harpoon
0000F584 0000 9476                  ptr_Helix:		dc.l Helix
0000F588 0000 9602                  ptr_BasicPlatform:	dc.l BasicPlatform	; $18
0000F58C 0000 0000                  ptr_InvStars:		dc.l InvStarsObj
0000F590 0000 99DE                  ptr_CollapseLedge:	dc.l CollapseLedge
0000F594 0000 0000                  ptr_WaterSurface:	dc.l WaterSurface
0000F598 0000 9FE6                  ptr_Scenery:		dc.l Scenery
0000F59C 0000 A088                  ptr_WaterSwitcher:	dc.l WaterSwitcher
0000F5A0 0000 A59E                  ptr_BallHog:		dc.l BallHog
0000F5A4 0000 AF38                  ptr_Crabmeat:		dc.l Crabmeat
0000F5A8 0000 A66C                  ptr_Cannonball:		dc.l Cannonball		; $20
0000F5AC 0000 0000                  ptr_HUD:		dc.l HUD
0000F5B0 0000 B354                  ptr_BuzzBomber:		dc.l BuzzBomber
0000F5B4 0000 B4A6                  ptr_Missile:		dc.l Missile
0000F5B8 0000 A73E                  ptr_MissileDissolve:	dc.l MissileDissolve
0000F5BC 0000 B700                  ptr_Rings:		dc.l Rings
0000F5C0 0000 BF4A                  ptr_Monitor:		dc.l Monitor
0000F5C4 0000 A7AE                  ptr_ExplosionItem:	dc.l ExplosionItem
0000F5C8 0000 A96C                  ptr_Animals:		dc.l Animals		; $28
0000F5CC 0000 AE5A                  ptr_Points:		dc.l Points
0000F5D0 0000 A38C                  ptr_AutoDoor:		dc.l AutoDoor
0000F5D4 0000 CC6A                  ptr_Chopper:		dc.l Chopper
0000F5D8 0000 CD24                  ptr_Jaws:		dc.l Jaws
0000F5DC 0000 CDEE                  ptr_Burrobot:		dc.l Burrobot
0000F5E0 0000 C148                  ptr_PowerUp:		dc.l PowerUp
0000F5E4 0000 D002                  ptr_LargeGrass:		dc.l LargeGrass
0000F5E8 0000 D4E4                  ptr_GlassBlock:		dc.l GlassBlock		; $30
0000F5EC 0000 D7C0                  ptr_ChainStomp:		dc.l ChainStomp
0000F5F0 0000 DE6E                  ptr_Button:		dc.l Button
0000F5F4 0000 E012                  ptr_PushBlock:		dc.l PushBlock
0000F5F8 0000 E444                  ptr_TitleCard:		dc.l TitleCard
0000F5FC 0000 D324                  ptr_GrassFire:		dc.l GrassFire
0000F600 0000 EF8C                  ptr_Spikes:		dc.l Spikes
0000F604 0000 B95C                  ptr_RingLoss:		dc.l RingLoss
0000F608 0000 0000                  ptr_ShieldItem:		dc.l ShieldItem		; $38
0000F60C 0000 E5F4                  ptr_GameOverCard:	dc.l GameOverCard
0000F610 0000 E6B2                  ptr_GotThroughCard:	dc.l GotThroughCard
0000F614 0000 F1BA                  ptr_PurpleRock:		dc.l PurpleRock
0000F618 0000 F286                  ptr_SmashWall:		dc.l SmashWall
0000F61C 0000 0000                  ptr_BossGreenHill:	dc.l BossGreenHill
0000F620 0000 0000                  ptr_Prison:		dc.l Prison
0000F624 0000 A840                  ptr_ExplosionBomb:	dc.l ExplosionBomb
0000F628 0000 0000                  ptr_MotoBug:		dc.l MotoBug		; $40
0000F62C 0000 0000                  ptr_Springs:		dc.l Springs
0000F630 0000 0000                  ptr_Newtron:		dc.l Newtron
0000F634 0000 0000                  ptr_Roller:		dc.l Roller
0000F638 0000 0000                  ptr_EdgeWalls:		dc.l EdgeWalls
0000F63C 0000 DADC                  ptr_SideStomp:		dc.l SideStomp
0000F640 0000 0000                  ptr_MarbleBrick:	dc.l MarbleBrick
0000F644 0000 0000                  ptr_Bumper:		dc.l Bumper
0000F648 0000 0000                  ptr_BossBall:		dc.l BossBall		; $48
0000F64C 0000 F228                  ptr_WaterSound:		dc.l WaterSound
0000F650 0000 0000                  ptr_VanishSonic:	dc.l VanishSonic
0000F654 0000 BC1E                  ptr_GiantRing:		dc.l GiantRing
0000F658 0000 0000                  ptr_GeyserMaker:	dc.l GeyserMaker
0000F65C 0000 0000                  ptr_LavaGeyser:		dc.l LavaGeyser
0000F660 0000 0000                  ptr_SpShieldItem:	dc.l SpShieldItem
0000F664 0000 0000                  ptr_Obj4F:		dc.l Obj4F
0000F668 0000 0000                  ptr_Yadrin:		dc.l Yadrin		; $50
0000F66C 0000 0000                  ptr_SmashBlock:		dc.l SmashBlock
0000F670 0000 0000                  ptr_MovingBlock:	dc.l MovingBlock
0000F674 0000 9AEE                  ptr_CollapseFloor:	dc.l CollapseFloor
0000F678 0000 0000                  ptr_LavaTag:		dc.l LavaTag
0000F67C 0000 0000                  ptr_Basaran:		dc.l Basaran
0000F680 0000 0000                  ptr_FloatingBlock:	dc.l FloatingBlock
0000F684 0000 0000                  ptr_SpikeBall:		dc.l SpikeBall
0000F688 0000 0000                  ptr_BigSpikeBall:	dc.l BigSpikeBall	; $58
0000F68C 0000 0000                  ptr_Elevator:		dc.l Elevator
0000F690 0000 0000                  ptr_CirclingPlatform:	dc.l CirclingPlatform
0000F694 0000 0000                  ptr_Staircase:		dc.l Staircase
0000F698 0000 0000                  ptr_Pylon:		dc.l Pylon
0000F69C 0000 0000                  ptr_Fan:		dc.l Fan
0000F6A0 0000 0000                  ptr_Seesaw:		dc.l Seesaw
0000F6A4 0000 0000                  ptr_Bomb:		dc.l Bomb
0000F6A8 0000 0000                  ptr_Orbinaut:		dc.l Orbinaut		; $60
0000F6AC 0000 0000                  ptr_LabyrinthBlock:	dc.l LabyrinthBlock
0000F6B0 0000 0000                  ptr_Gargoyle:		dc.l Gargoyle
0000F6B4 0000 0000                  ptr_LabyrinthConvey:	dc.l LabyrinthConvey
0000F6B8 0000 0000                  ptr_Bubble:		dc.l Bubble
0000F6BC 0000 0000                  ptr_Waterfall:		dc.l Waterfall
0000F6C0 0000 0000                  ptr_Junction:		dc.l Junction
0000F6C4 0000 0000                  ptr_RunningDisc:	dc.l RunningDisc
0000F6C8 0000 0000                  ptr_Conveyor:		dc.l Conveyor		; $68
0000F6CC 0000 0000                  ptr_SpinPlatform:	dc.l SpinPlatform
0000F6D0 0000 0000                  ptr_Saws:		dc.l Saws
0000F6D4 0000 0000                  ptr_ScrapStomp:		dc.l ScrapStomp
0000F6D8 0000 0000                  ptr_VanishPlatform:	dc.l VanishPlatform
0000F6DC 0000 0000                  ptr_Flamethrower:	dc.l Flamethrower
0000F6E0 0000 0000                  ptr_Electro:		dc.l Electro
0000F6E4 0000 0000                  ptr_SpinConvey:		dc.l SpinConvey
0000F6E8 0000 0000                  ptr_Girder:		dc.l Girder		; $70
0000F6EC 0000 0000                  ptr_Invisibarrier:	dc.l Invisibarrier
0000F6F0 0000 0000                  ptr_Teleport:		dc.l Teleport
0000F6F4 0000 0000                  ptr_BossMarble:		dc.l BossMarble
0000F6F8 0000 0000                  ptr_BossFire:		dc.l BossFire
0000F6FC 0000 0000                  ptr_BossSpringYard:	dc.l BossSpringYard
0000F700 0000 0000                  ptr_BossBlock:		dc.l BossBlock
0000F704 0000 0000                  ptr_BossLabyrinth:	dc.l BossLabyrinth
0000F708 0000 0000                  ptr_Caterkiller:	dc.l Caterkiller	; $78
0000F70C 0000 0000                  ptr_Lamppost:		dc.l Lamppost
0000F710 0000 0000                  ptr_BossStarLight:	dc.l BossStarLight
0000F714 0000 0000                  ptr_BossSpikeball:	dc.l BossSpikeball
0000F718 0000 BCF8                  ptr_RingFlash:		dc.l RingFlash
0000F71C 0000 0000                  ptr_HiddenBonus:	dc.l HiddenBonus
0000F720 0000 E8EC                  ptr_SSResult:		dc.l SSResult
0000F724 0000 EA92                  ptr_SSRChaos:		dc.l SSRChaos
0000F728 0000 606E                  ptr_ContScrItem:	dc.l ContScrItem	; $80
0000F72C 0000 6186                  ptr_ContSonic:		dc.l ContSonic
0000F730 0000 0000                  ptr_ScrapEggman:	dc.l ScrapEggman
0000F734 0000 0000                  ptr_FalseFloor:		dc.l FalseFloor
0000F738 0000 0000                  ptr_EggmanCylinder:	dc.l EggmanCylinder
0000F73C 0000 0000                  ptr_BossFinal:		dc.l BossFinal
0000F740 0000 0000                  ptr_BossPlasma:		dc.l BossPlasma
0000F744 0000 660C                  ptr_EndSonic:		dc.l EndSonic
0000F748 0000 6766                  ptr_EndChaos:		dc.l EndChaos		; $88
0000F74C 0000 6840                  ptr_EndSTH:		dc.l EndSTH
0000F750 0000 0000                  ptr_CreditsText:	dc.l CreditsText
0000F754 0000 6ABA                  ptr_EndEggman:		dc.l EndEggman
0000F758 0000 6B9A                  ptr_TryChaos:		dc.l TryChaos
0000F75C 0000 0000                  ptr_SuperStars:		dc.l SuperStars
0000F760                            
0000F760                            NullObject:
0000F760                            		;jmp	(DeleteObject).l	; It would be safer to have this instruction here, but instead it just falls through to ObjectFall
0000F760                            
0000F760 =00000001                  id_SonicPlayer:		equ ((ptr_SonicPlayer-Obj_Index)/4)+1		; $01
0000F760 =00000002                  id_Obj02:		equ ((ptr_Obj02-Obj_Index)/4)+1
0000F760 =00000003                  id_Obj03:		equ ((ptr_Obj03-Obj_Index)/4)+1
0000F760 =00000004                  id_GShielditem:		equ ((ptr_GShieldItem-Obj_Index)/4)+1
0000F760 =00000005                  id_Obj05:		equ ((ptr_Obj05-Obj_Index)/4)+1
0000F760 =00000006                  id_Mozzietron:		equ ((ptr_Mozzietron-Obj_Index)/4)+1
0000F760 =00000007                  id_RShieldItem:		equ ((ptr_RShieldItem-Obj_Index)/4)+1	
0000F760 =00000008                  id_Splash:		equ ((ptr_Splash-Obj_Index)/4)+1		; $08
0000F760 =00000009                  id_SonicSpecial:	equ ((ptr_SonicSpecial-Obj_Index)/4)+1
0000F760 =0000000A                  id_DrownCount:		equ ((ptr_DrownCount-Obj_Index)/4)+1
0000F760 =0000000B                  id_Pole:		equ ((ptr_Pole-Obj_Index)/4)+1
0000F760 =0000000C                  id_FlapDoor:		equ ((ptr_FlapDoor-Obj_Index)/4)+1
0000F760 =0000000D                  id_Signpost:		equ ((ptr_Signpost-Obj_Index)/4)+1
0000F760 =0000000E                  id_TitleSonic:		equ ((ptr_TitleSonic-Obj_Index)/4)+1
0000F760 =0000000F                  id_PSBTM:		equ ((ptr_PSBTM-Obj_Index)/4)+1
0000F760 =00000010                  id_Obj10:		equ ((ptr_Obj10-Obj_Index)/4)+1			; $10
0000F760 =00000011                  id_Bridge:		equ ((ptr_Bridge-Obj_Index)/4)+1
0000F760 =00000012                  id_SpinningLight:	equ ((ptr_SpinningLight-Obj_Index)/4)+1
0000F760 =00000013                  id_LavaMaker:		equ ((ptr_LavaMaker-Obj_Index)/4)+1
0000F760 =00000014                  id_LavaBall:		equ ((ptr_LavaBall-Obj_Index)/4)+1
0000F760 =00000015                  id_SwingingPlatform:	equ ((ptr_SwingingPlatform-Obj_Index)/4)+1
0000F760 =00000016                  id_Harpoon:		equ ((ptr_Harpoon-Obj_Index)/4)+1
0000F760 =00000017                  id_Helix:		equ ((ptr_Helix-Obj_Index)/4)+1
0000F760 =00000018                  id_BasicPlatform:	equ ((ptr_BasicPlatform-Obj_Index)/4)+1		; $18
0000F760 =00000019                  id_InvStars:		equ ((ptr_InvStars-Obj_Index)/4)+1
0000F760 =0000001A                  id_CollapseLedge:	equ ((ptr_CollapseLedge-Obj_Index)/4)+1
0000F760 =0000001B                  id_WaterSurface:	equ ((ptr_WaterSurface-Obj_Index)/4)+1
0000F760 =0000001C                  id_Scenery:		equ ((ptr_Scenery-Obj_Index)/4)+1
0000F760 =0000001D                  id_WaterSwitcher:		equ ((ptr_WaterSwitcher-Obj_Index)/4)+1
0000F760 =0000001E                  id_BallHog:		equ ((ptr_BallHog-Obj_Index)/4)+1
0000F760 =0000001F                  id_Crabmeat:		equ ((ptr_Crabmeat-Obj_Index)/4)+1
0000F760 =00000020                  id_Cannonball:		equ ((ptr_Cannonball-Obj_Index)/4)+1		; $20
0000F760 =00000021                  id_HUD:			equ ((ptr_HUD-Obj_Index)/4)+1
0000F760 =00000022                  id_BuzzBomber:		equ ((ptr_BuzzBomber-Obj_Index)/4)+1
0000F760 =00000023                  id_Missile:		equ ((ptr_Missile-Obj_Index)/4)+1
0000F760 =00000024                  id_MissileDissolve:	equ ((ptr_MissileDissolve-Obj_Index)/4)+1
0000F760 =00000025                  id_Rings:		equ ((ptr_Rings-Obj_Index)/4)+1
0000F760 =00000026                  id_Monitor:		equ ((ptr_Monitor-Obj_Index)/4)+1
0000F760 =00000027                  id_ExplosionItem:	equ ((ptr_ExplosionItem-Obj_Index)/4)+1
0000F760 =00000028                  id_Animals:		equ ((ptr_Animals-Obj_Index)/4)+1		; $28
0000F760 =00000029                  id_Points:		equ ((ptr_Points-Obj_Index)/4)+1
0000F760 =0000002A                  id_AutoDoor:		equ ((ptr_AutoDoor-Obj_Index)/4)+1
0000F760 =0000002B                  id_Chopper:		equ ((ptr_Chopper-Obj_Index)/4)+1
0000F760 =0000002C                  id_Jaws:		equ ((ptr_Jaws-Obj_Index)/4)+1
0000F760 =0000002D                  id_Burrobot:		equ ((ptr_Burrobot-Obj_Index)/4)+1
0000F760 =0000002E                  id_PowerUp:		equ ((ptr_PowerUp-Obj_Index)/4)+1
0000F760 =0000002F                  id_LargeGrass:		equ ((ptr_LargeGrass-Obj_Index)/4)+1
0000F760 =00000030                  id_GlassBlock:		equ ((ptr_GlassBlock-Obj_Index)/4)+1		; $30
0000F760 =00000031                  id_ChainStomp:		equ ((ptr_ChainStomp-Obj_Index)/4)+1
0000F760 =00000032                  id_Button:		equ ((ptr_Button-Obj_Index)/4)+1
0000F760 =00000033                  id_PushBlock:		equ ((ptr_PushBlock-Obj_Index)/4)+1
0000F760 =00000034                  id_TitleCard:		equ ((ptr_TitleCard-Obj_Index)/4)+1
0000F760 =00000035                  id_GrassFire:		equ ((ptr_GrassFire-Obj_Index)/4)+1
0000F760 =00000036                  id_Spikes:		equ ((ptr_Spikes-Obj_Index)/4)+1
0000F760 =00000037                  id_RingLoss:		equ ((ptr_RingLoss-Obj_Index)/4)+1
0000F760 =00000038                  id_ShieldItem:		equ ((ptr_ShieldItem-Obj_Index)/4)+1		; $38
0000F760 =00000039                  id_GameOverCard:	equ ((ptr_GameOverCard-Obj_Index)/4)+1
0000F760 =0000003A                  id_GotThroughCard:	equ ((ptr_GotThroughCard-Obj_Index)/4)+1
0000F760 =0000003B                  id_PurpleRock:		equ ((ptr_PurpleRock-Obj_Index)/4)+1
0000F760 =0000003C                  id_SmashWall:		equ ((ptr_SmashWall-Obj_Index)/4)+1
0000F760 =0000003D                  id_BossGreenHill:	equ ((ptr_BossGreenHill-Obj_Index)/4)+1
0000F760 =0000003E                  id_Prison:		equ ((ptr_Prison-Obj_Index)/4)+1
0000F760 =0000003F                  id_ExplosionBomb:	equ ((ptr_ExplosionBomb-Obj_Index)/4)+1
0000F760 =00000040                  id_MotoBug:		equ ((ptr_MotoBug-Obj_Index)/4)+1		; $40
0000F760 =00000041                  id_Springs:		equ ((ptr_Springs-Obj_Index)/4)+1
0000F760 =00000042                  id_Newtron:		equ ((ptr_Newtron-Obj_Index)/4)+1
0000F760 =00000043                  id_Roller:		equ ((ptr_Roller-Obj_Index)/4)+1
0000F760 =00000044                  id_EdgeWalls:		equ ((ptr_EdgeWalls-Obj_Index)/4)+1
0000F760 =00000045                  id_SideStomp:		equ ((ptr_SideStomp-Obj_Index)/4)+1
0000F760 =00000046                  id_MarbleBrick:		equ ((ptr_MarbleBrick-Obj_Index)/4)+1
0000F760 =00000047                  id_Bumper:		equ ((ptr_Bumper-Obj_Index)/4)+1
0000F760 =00000048                  id_BossBall:		equ ((ptr_BossBall-Obj_Index)/4)+1		; $48
0000F760 =00000049                  id_WaterSound:		equ ((ptr_WaterSound-Obj_Index)/4)+1
0000F760 =0000004A                  id_VanishSonic:		equ ((ptr_VanishSonic-Obj_Index)/4)+1
0000F760 =0000004B                  id_GiantRing:		equ ((ptr_GiantRing-Obj_Index)/4)+1
0000F760 =0000004C                  id_GeyserMaker:		equ ((ptr_GeyserMaker-Obj_Index)/4)+1
0000F760 =0000004D                  id_LavaGeyser:		equ ((ptr_LavaGeyser-Obj_Index)/4)+1
0000F760 =0000004E                  id_SpShieldItem:		equ ((ptr_SpShieldItem-Obj_Index)/4)+1
0000F760 =0000004F                  id_Obj4F:		equ ((ptr_Obj4F-Obj_Index)/4)+1
0000F760 =00000050                  id_Yadrin:		equ ((ptr_Yadrin-Obj_Index)/4)+1		; $50
0000F760 =00000051                  id_SmashBlock:		equ ((ptr_SmashBlock-Obj_Index)/4)+1
0000F760 =00000052                  id_MovingBlock:		equ ((ptr_MovingBlock-Obj_Index)/4)+1
0000F760 =00000053                  id_CollapseFloor:	equ ((ptr_CollapseFloor-Obj_Index)/4)+1
0000F760 =00000054                  id_LavaTag:		equ ((ptr_LavaTag-Obj_Index)/4)+1
0000F760 =00000055                  id_Basaran:		equ ((ptr_Basaran-Obj_Index)/4)+1
0000F760 =00000056                  id_FloatingBlock:	equ ((ptr_FloatingBlock-Obj_Index)/4)+1
0000F760 =00000057                  id_SpikeBall:		equ ((ptr_SpikeBall-Obj_Index)/4)+1
0000F760 =00000058                  id_BigSpikeBall:	equ ((ptr_BigSpikeBall-Obj_Index)/4)+1		; $58
0000F760 =00000059                  id_Elevator:		equ ((ptr_Elevator-Obj_Index)/4)+1
0000F760 =0000005A                  id_CirclingPlatform:	equ ((ptr_CirclingPlatform-Obj_Index)/4)+1
0000F760 =0000005B                  id_Staircase:		equ ((ptr_Staircase-Obj_Index)/4)+1
0000F760 =0000005C                  id_Pylon:		equ ((ptr_Pylon-Obj_Index)/4)+1
0000F760 =0000005D                  id_Fan:			equ ((ptr_Fan-Obj_Index)/4)+1
0000F760 =0000005E                  id_Seesaw:		equ ((ptr_Seesaw-Obj_Index)/4)+1
0000F760 =0000005F                  id_Bomb:		equ ((ptr_Bomb-Obj_Index)/4)+1
0000F760 =00000060                  id_Orbinaut:		equ ((ptr_Orbinaut-Obj_Index)/4)+1		; $60
0000F760 =00000061                  id_LabyrinthBlock:	equ ((ptr_LabyrinthBlock-Obj_Index)/4)+1
0000F760 =00000062                  id_Gargoyle:		equ ((ptr_Gargoyle-Obj_Index)/4)+1
0000F760 =00000063                  id_LabyrinthConvey:	equ ((ptr_LabyrinthConvey-Obj_Index)/4)+1
0000F760 =00000064                  id_Bubble:		equ ((ptr_Bubble-Obj_Index)/4)+1
0000F760 =00000065                  id_Waterfall:		equ ((ptr_Waterfall-Obj_Index)/4)+1
0000F760 =00000066                  id_Junction:		equ ((ptr_Junction-Obj_Index)/4)+1
0000F760 =00000067                  id_RunningDisc:		equ ((ptr_RunningDisc-Obj_Index)/4)+1
0000F760 =00000068                  id_Conveyor:		equ ((ptr_Conveyor-Obj_Index)/4)+1		; $68
0000F760 =00000069                  id_SpinPlatform:	equ ((ptr_SpinPlatform-Obj_Index)/4)+1
0000F760 =0000006A                  id_Saws:		equ ((ptr_Saws-Obj_Index)/4)+1
0000F760 =0000006B                  id_ScrapStomp:		equ ((ptr_ScrapStomp-Obj_Index)/4)+1
0000F760 =0000006C                  id_VanishPlatform:	equ ((ptr_VanishPlatform-Obj_Index)/4)+1
0000F760 =0000006D                  id_Flamethrower:	equ ((ptr_Flamethrower-Obj_Index)/4)+1
0000F760 =0000006E                  id_Electro:		equ ((ptr_Electro-Obj_Index)/4)+1
0000F760 =0000006F                  id_SpinConvey:		equ ((ptr_SpinConvey-Obj_Index)/4)+1
0000F760 =00000070                  id_Girder:		equ ((ptr_Girder-Obj_Index)/4)+1		; $70
0000F760 =00000071                  id_Invisibarrier:	equ ((ptr_Invisibarrier-Obj_Index)/4)+1
0000F760 =00000072                  id_Teleport:		equ ((ptr_Teleport-Obj_Index)/4)+1
0000F760 =00000073                  id_BossMarble:		equ ((ptr_BossMarble-Obj_Index)/4)+1
0000F760 =00000074                  id_BossFire:		equ ((ptr_BossFire-Obj_Index)/4)+1
0000F760 =00000075                  id_BossSpringYard:	equ ((ptr_BossSpringYard-Obj_Index)/4)+1
0000F760 =00000076                  id_BossBlock:		equ ((ptr_BossBlock-Obj_Index)/4)+1
0000F760 =00000077                  id_BossLabyrinth:	equ ((ptr_BossLabyrinth-Obj_Index)/4)+1
0000F760 =00000078                  id_Caterkiller:		equ ((ptr_Caterkiller-Obj_Index)/4)+1		; $78
0000F760 =00000079                  id_Lamppost:		equ ((ptr_Lamppost-Obj_Index)/4)+1
0000F760 =0000007A                  id_BossStarLight:	equ ((ptr_BossStarLight-Obj_Index)/4)+1
0000F760 =0000007B                  id_BossSpikeball:	equ ((ptr_BossSpikeball-Obj_Index)/4)+1
0000F760 =0000007C                  id_RingFlash:		equ ((ptr_RingFlash-Obj_Index)/4)+1
0000F760 =0000007D                  id_HiddenBonus:		equ ((ptr_HiddenBonus-Obj_Index)/4)+1
0000F760 =0000007E                  id_SSResult:		equ ((ptr_SSResult-Obj_Index)/4)+1
0000F760 =0000007F                  id_SSRChaos:		equ ((ptr_SSRChaos-Obj_Index)/4)+1
0000F760 =00000080                  id_ContScrItem:		equ ((ptr_ContScrItem-Obj_Index)/4)+1		; $80
0000F760 =00000081                  id_ContSonic:		equ ((ptr_ContSonic-Obj_Index)/4)+1
0000F760 =00000082                  id_ScrapEggman:		equ ((ptr_ScrapEggman-Obj_Index)/4)+1
0000F760 =00000083                  id_FalseFloor:		equ ((ptr_FalseFloor-Obj_Index)/4)+1
0000F760 =00000084                  id_EggmanCylinder:	equ ((ptr_EggmanCylinder-Obj_Index)/4)+1
0000F760 =00000085                  id_BossFinal:		equ ((ptr_BossFinal-Obj_Index)/4)+1
0000F760 =00000086                  id_BossPlasma:		equ ((ptr_BossPlasma-Obj_Index)/4)+1
0000F760 =00000087                  id_EndSonic:		equ ((ptr_EndSonic-Obj_Index)/4)+1
0000F760 =00000088                  id_EndChaos:		equ ((ptr_EndChaos-Obj_Index)/4)+1		; $88
0000F760 =00000089                  id_EndSTH:		equ ((ptr_EndSTH-Obj_Index)/4)+1
0000F760 =0000008A                  id_CreditsText:		equ ((ptr_CreditsText-Obj_Index)/4)+1
0000F760 =0000008B                  id_EndEggman:		equ ((ptr_EndEggman-Obj_Index)/4)+1
0000F760 =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F760 =0000008D                  id_SuperStars:		equ ((ptr_SuperStars-Obj_Index)/4)+1
0000F760 =0000008D                  id_SuperStars:		equ ((ptr_SuperStars-Obj_Index)/4)+1
0000F760                            
0000F760                            		include	"_incObj\sub ObjectFall.asm"
0000F760                            ; ---------------------------------------------------------------------------
0000F760                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000F760                            ; ---------------------------------------------------------------------------
0000F760                            
0000F760                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F760                            
0000F760                            
0000F760                            ObjectFall:
0000F760 0C28 0050 0012             		cmpi.b	#$50,obVelY(a0)
0000F766 6700                       		beq.s	@donothing
0000F768 3028 0010                  		move.w	obVelX(a0),d0
0000F76C 48C0                       		ext.l	d0
0000F76E E188                       		lsl.l	#8,d0
0000F770 D1A8 0008                  		add.l	d0,obX(a0)
0000F774 0C68 0FC8 0012                     cmp.w   #$FC8,obVelY(a0)   ; check if Sonic's Y speed is lower than this value
0000F77A 6F00                               ble.s   @skipline       ; if yes, branch
0000F77C 317C 0FC8 0012                     move.w  #$FC8,obVelY(a0)    ; alter Sonic's Y speed
0000F782                                @skipline:		
0000F782 3028 0012                  		move.w	obVelY(a0),d0
0000F786 0668 0038 0012             		addi.w	#$38,obVelY(a0)	; increase vertical speed
0000F78C 48C0                       		ext.l	d0
0000F78E E188                       		lsl.l	#8,d0
0000F790 D1A8 000C                  		add.l	d0,obY(a0)
0000F794 4E75                       		rts	
0000F796                            	
0000F796                            	@donothing:
0000F796 4E75                       		rts
0000F798                            
0000F798                            ; End of function ObjectFall
0000F798                            ; End of function ObjectFall
0000F798                            		include	"_incObj\sub SpeedToPos.asm"
0000F798                            ; ---------------------------------------------------------------------------
0000F798                            ; Subroutine translating object	speed to update	object position
0000F798                            ; ---------------------------------------------------------------------------
0000F798                            
0000F798                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F798                            
0000F798                            
0000F798                            SpeedToPos:
0000F798 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0000F79E E188                       		lsl.l	#8,d0
0000F7A0 D1A8 0008                  		add.l	d0,obX(a0)
0000F7A4 E18A                       		lsl.l	#8,d2
0000F7A6 D5A8 000C                  		add.l	d2,obY(a0)
0000F7AA 4E75                       		rts
0000F7AC                            ; End of function SpeedToPos
0000F7AC                            ; End of function SpeedToPos
0000F7AC                            		include	"_incObj\sub DisplaySprite.asm"
0000F7AC                            ; ---------------------------------------------------------------------------
0000F7AC                            ; Subroutine to    display    a sprite/object, when a0 is the    object RAM
0000F7AC                            ; ---------------------------------------------------------------------------
0000F7AC                            
0000F7AC                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F7AC                            
0000F7AC                            
0000F7AC                            DisplaySprite:
0000F7AC 43F8 AC00                          lea    (v_spritequeue).w,a1
0000F7B0 D2E8 0018                          adda.w  obpriority(a0),a1 ; get sprite priority
0000F7B4 0C51 007E                          cmpi.w    #$7E,(a1)    ; is this part of the queue full?
0000F7B8 6400                               bcc.s    DSpr_Full    ; if yes, branch
0000F7BA 5451                               addq.w    #2,(a1)        ; increment sprite count
0000F7BC D2D1                               adda.w    (a1),a1        ; jump to empty position
0000F7BE 3288                               move.w    a0,(a1)        ; insert RAM address for object
0000F7C0                            
0000F7C0                                DSpr_Full:
0000F7C0 4E75                               rts    
0000F7C2                            
0000F7C2                            ; End of function DisplaySprite
0000F7C2                            
0000F7C2                            
0000F7C2                            ; ---------------------------------------------------------------------------
0000F7C2                            ; Subroutine to    display    a 2nd sprite/object, when a1 is    the object RAM
0000F7C2                            ; ---------------------------------------------------------------------------
0000F7C2                            
0000F7C2                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F7C2                            
0000F7C2                            
0000F7C2                            DisplaySprite1:
0000F7C2 45F8 AC00                          lea    (v_spritequeue).w,a2
0000F7C6 D4E9 0018                          adda.w  obpriority(a1),a2
0000F7CA 0C52 007E                          cmpi.w    #$7E,(a2)
0000F7CE 6400                               bcc.s    DSpr1_Full
0000F7D0 5452                               addq.w    #2,(a2)
0000F7D2 D4D2                               adda.w    (a2),a2
0000F7D4 3489                               move.w    a1,(a2)
0000F7D6                            
0000F7D6                                DSpr1_Full:
0000F7D6 4E75                               rts    
0000F7D8                            
0000F7D8                            ; End of function DisplaySprite1
0000F7D8                            
0000F7D8                            ; ---------------------------------------------------------------------------
0000F7D8                            ; Subroutine to display a sprite/object, when a0 is the object RAM
0000F7D8                            ; and d0 is already (priority/2)&$380
0000F7D8                            ; ---------------------------------------------------------------------------
0000F7D8                            
0000F7D8                            ; loc_16530:
0000F7D8                            DisplaySprite2:
0000F7D8 43F8 AC00                      lea    (v_spritequeue).w,a1
0000F7DC D2C0                           adda.w    d0,a1
0000F7DE 0C51 007E                      cmpi.w    #$7E,(a1)
0000F7E2 6400                           bhs.s    return_16542
0000F7E4 5451                           addq.w    #2,(a1)
0000F7E6 D2D1                           adda.w    (a1),a1
0000F7E8 3288                           move.w    a0,(a1)
0000F7EA                            
0000F7EA                            return_16542:
0000F7EA 4E75                           rts
0000F7EA 4E75                           rts
0000F7EC                            		include	"_incObj\sub DeleteObject.asm"
0000F7EC                            ; ---------------------------------------------------------------------------
0000F7EC                            ; Subroutine to	delete an object
0000F7EC                            ; ---------------------------------------------------------------------------
0000F7EC                            
0000F7EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F7EC                            
0000F7EC                            
0000F7EC                            DeleteObject:
0000F7EC 2248                       		movea.l	a0,a1		; move object RAM address to (a1)
0000F7EE                            
0000F7EE                            DeleteChild:				; child objects are already in (a1)
0000F7EE 7200                       		moveq	#0,d1
0000F7F0 700F                       		moveq	#$F,d0
0000F7F2                            
0000F7F2                            	DelObj_Loop:
0000F7F2 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000F7F4 51C8 FFFC                  		dbf	d0,DelObj_Loop	; repeat for length of object RAM
0000F7F8 4E75                       		rts	
0000F7FA                            
0000F7FA                            ; End of function DeleteObject
0000F7FA                            ; End of function DeleteObject
0000F7FA                            
0000F7FA                            ; ===========================================================================
0000F7FA 0000 0000                  BldSpr_ScrPos:	dc.l 0				; blank
0000F7FE 00FF F700                  		dc.l v_screenposx&$FFFFFF	; main screen x-position
0000F802 00FF F708                  		dc.l v_bgscreenposx&$FFFFFF	; background x-position	1
0000F806 00FF F718                  		dc.l v_bg3screenposx&$FFFFFF	; background x-position	2
0000F80A                            ; ---------------------------------------------------------------------------
0000F80A                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000F80A                            ; ---------------------------------------------------------------------------
0000F80A                            
0000F80A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F80A                            BuildSprites:                ; XREF: TitleScreen; et al
0000F80A 45F8 F800                  		lea	(v_spritetablebuffer).w,a2 ; set address for sprite table
0000F80E 7A00                       		moveq	#0,d5
0000F810 49F8 AC00                  		lea	(v_spritequeue).w,a4
0000F814 7E07                       		moveq	#7,d7
0000F816                            		
0000F816                            loc_D66A:
0000F816 4A54                       		tst.w	(a4)
0000F818 6700 0000                  		beq.w	loc_D72E
0000F81C 7C02                       		moveq	#2,d6
0000F81E                            
0000F81E                            loc_D672:
0000F81E 3074 6000                          movea.w    (a4,d6.w),a0
0000F822 4A10                               tst.b    (a0)
0000F824 6700 0000                          beq.w    loc_D726
0000F828 08A8 0007 0001                     bclr    #7,1(a0)
0000F82E 1028 0001                          move.b    1(a0),d0
0000F832 1800                               move.b    d0,d4
0000F834 0C10 0001                          cmpi.b    #1,(a0)    ; is this object is Sonic
0000F838 6700                               beq.s    @skip    ; if it is, branch
0000F83A 0800 0006                          btst    #6,d0    ; is the multi-draw flag set?
0000F83E 6600 0000                          bne.w   BuildSprites_MultiDraw    ; if it is, branch
0000F842                               @skip:
0000F842 0240 000C                  		andi.w	#$C,d0
0000F846 6700                       		beq.s	loc_D6DE
0000F848 227B 00B0                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000F84C 7000                       		moveq	#0,d0
0000F84E 1028 0014                  		move.b	width_pixels(a0),d0
0000F852 3628 0008                  		move.w	8(a0),d3
0000F856 9651                       		sub.w	(a1),d3
0000F858 3203                       		move.w	d3,d1
0000F85A D240                       		add.w	d0,d1
0000F85C 6B00 0000                  		bmi.w	loc_D726
0000F860 3203                       		move.w	d3,d1
0000F862 9240                       		sub.w	d0,d1
0000F864 0C41 0140                  		cmpi.w	#$140,d1
0000F868 6C00                       		bge.s	loc_D726
0000F86A 0643 0080                  		addi.w	#$80,d3
0000F86E 0804 0004                  		btst	#4,d4
0000F872 6700                       		beq.s	loc_D6E8
0000F874 7000                       		moveq	#0,d0
0000F876 1028 0016                  		move.b	$16(a0),d0
0000F87A 3428 000C                  		move.w	$C(a0),d2
0000F87E 9469 0004                  		sub.w	4(a1),d2
0000F882 3202                       		move.w	d2,d1
0000F884 D240                       		add.w	d0,d1
0000F886 6B00                       		bmi.s	loc_D726
0000F888 3202                       		move.w	d2,d1
0000F88A 9240                       		sub.w	d0,d1
0000F88C 0C41 00E0                  		cmpi.w	#$E0,d1
0000F890 6C00                       		bge.s	loc_D726
0000F892 0642 0080                  		addi.w	#$80,d2
0000F896 6000                       		bra.s	loc_D700
0000F898                            ; ===========================================================================
0000F898                            
0000F898                            loc_D6DE:
0000F898 3428 000A                  		move.w	$A(a0),d2
0000F89C 3628 0008                  		move.w	8(a0),d3
0000F8A0 6000                       		bra.s	loc_D700
0000F8A2                            ; ===========================================================================
0000F8A2                            
0000F8A2                            loc_D6E8:
0000F8A2 3428 000C                  		move.w	$C(a0),d2
0000F8A6 9469 0004                  		sub.w	4(a1),d2
0000F8AA 0642 0080                  		addi.w	#$80,d2
0000F8AE 0C42 0060                  		cmpi.w	#$60,d2
0000F8B2 6500                       		bcs.s	loc_D726
0000F8B4 0C42 0180                  		cmpi.w	#$180,d2
0000F8B8 6400                       		bcc.s	loc_D726
0000F8BA                            
0000F8BA                            loc_D700:
0000F8BA 2268 0004                  		movea.l	4(a0),a1
0000F8BE 7200                       		moveq	#0,d1
0000F8C0 0804 0005                  		btst	#5,d4
0000F8C4 6600                       		bne.s	loc_D71C
0000F8C6 1228 001A                  		move.b	$1A(a0),d1
0000F8CA D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000F8CC D2F1 1000                  		adda.w	(a1,d1.w),a1
0000F8D0 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000F8D2 1219                       		move.b	(a1)+,d1
0000F8D4 5301                       		subq.b	#1,d1
0000F8D6 6B00                       		bmi.s	loc_D720
0000F8D8                            
0000F8D8                            loc_D71C:
0000F8D8 4EB9 0000 0000             		jsr	sub_D750
0000F8DE                            
0000F8DE                            loc_D720:
0000F8DE 08E8 0007 0001             		bset	#7,1(a0)
0000F8E4                            
0000F8E4                            loc_D726:
0000F8E4 5446                       		addq.w	#2,d6
0000F8E6 5554                       		subq.w	#2,(a4)
0000F8E8 6600 FF34                  		bne.w	loc_D672
0000F8EC                            
0000F8EC                            loc_D72E:
0000F8EC 49EC 0080                  		lea	$80(a4),a4
0000F8F0 51CF FF24                  		dbf	d7,loc_D66A
0000F8F4 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000F8F8 0C05 0050                  		cmpi.b	#$50,d5
0000F8FC 6700                       		beq.s	loc_D748
0000F8FE 24BC 0000 0000             		move.l	#0,(a2)
0000F904 4E75                       		rts	
0000F906                            ; ===========================================================================
0000F906                            
0000F906                            loc_D748:
0000F906 157C 0000 FFFB             		move.b	#0,-5(a2)
0000F90C 4E75                       		rts	
0000F90E                            ; End of function BuildSprites
0000F90E                            
0000F90E                            BuildSprites_MultiDraw:
0000F90E 2F0C                       	move.l	a4,-(sp)
0000F910 49F8 F700                  	lea	($FFFFF700).w,a4
0000F914 3668 0002                  	movea.w	art_tile(a0),a3
0000F918 2A68 0004                  	movea.l	mappings(a0),a5
0000F91C 7000                       	moveq	#0,d0
0000F91E                            
0000F91E                            	; check if object is within X bounds
0000F91E 1028 000E                  	move.b	mainspr_width(a0),d0	; load pixel width
0000F922 3628 0008                  	move.w	x_pos(a0),d3
0000F926 9654                       	sub.w	(a4),d3
0000F928 3203                       	move.w	d3,d1                            
0000F92A D240                       	add.w	d0,d1                            ; is the object right edge to the left of the screen? 
0000F92C 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000F930 3203                       	move.w	d3,d1
0000F932 9240                       	sub.w	d0,d1
0000F934 0C41 0140                  	cmpi.w	#320,d1                          ; is the object left edge to the right of the screen?
0000F938 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000F93C 0643 0080                  	addi.w	#128,d3
0000F940                            
0000F940                            	; check if object is within Y bounds
0000F940 0804 0004                  	btst	#4,d4                            ; is the accurate Y check flag set?
0000F944 6700                       	beq.s	BuildSpritesMulti_ApproxYCheck
0000F946 7000                       	moveq	#0,d0
0000F948 1028 0014                  	move.b	mainspr_height(a0),d0	         ; load pixel height
0000F94C 3428 000C                  	move.w	y_pos(a0),d2
0000F950 946C 0004                  	sub.w	4(a4),d2
0000F954 3202                       	move.w	d2,d1
0000F956 D240                       	add.w	d0,d1
0000F958 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj  ; if the object is above the screen
0000F95C 3202                       	move.w	d2,d1
0000F95E 9240                       	sub.w	d0,d1
0000F960 0C41 00E0                  	cmpi.w	#224,d1
0000F964 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj  ; if the object is below the screen
0000F968 0642 0080                  	addi.w	#128,d2
0000F96C 6000                       	bra.s	BuildSpritesMulti_DrawSprite
0000F96E                            BuildSpritesMulti_ApproxYCheck:
0000F96E 3428 000C                  	move.w	y_pos(a0),d2
0000F972 946C 0004                  	sub.w	4(a4),d2
0000F976 0642 0080                  	addi.w	#128,d2
0000F97A 0242 07FF                  	andi.w	#$7FF,d2
0000F97E 0C42 0060                  	cmpi.w	#-32+128,d2
0000F982 6500                       	blo.s	BuildSprites_MultiDraw_NextObj
0000F984 0C42 0180                  	cmpi.w	#32+128+224,d2
0000F988 6400                       	bhs.s	BuildSprites_MultiDraw_NextObj
0000F98A                            BuildSpritesMulti_DrawSprite:
0000F98A 7200                       	moveq	#0,d1
0000F98C 1228 000B                  	move.b	mainspr_mapframe(a0),d1	         ; get current frame
0000F990 6700                       	beq.s	.noparenttodraw
0000F992 D241                       	add.w	d1,d1
0000F994 224D                       	movea.l	a5,a1                            ; a5 is mappings(a0), copy to a1
0000F996 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000F99A 7200                       	moveq	#0,d1
0000F99C 1219                       	move.b	(a1)+,d1
0000F99E 5301                       	subq.b	#1,d1                            ; get number of pieces
0000F9A0 6B00                       	bmi.s	.noparenttodraw                  ; if there are 0 pieces, branch
0000F9A2 3F04                       	move.w	d4,-(sp)
0000F9A4 4EB9 0000 0000             	jsr	ChkDrawSprite	                 ; draw the sprite
0000F9AA 381F                       	move.w	(sp)+,d4
0000F9AC                            .noparenttodraw:
0000F9AC 0028 0080 0001             	ori.b	#$80,render_flags(a0)	         ; set onscreen flag
0000F9B2 4DE8 0010                  	lea	sub2_x_pos(a0),a6                ; address of first child sprite info
0000F9B6 7000                       	moveq	#0,d0
0000F9B8 1028 000F                  	move.b	mainspr_childsprites(a0),d0	 ; get child sprite count
0000F9BC 5340                       	subq.w	#1,d0		                 ; if there are 0, go to next object
0000F9BE 6500                       	bcs.s	BuildSprites_MultiDraw_NextObj
0000F9C0                            
0000F9C0                            @drawchildloop:
0000F9C0 4840                       	swap	d0
0000F9C2 361E                       	move.w	(a6)+,d3	                 ; get X pos
0000F9C4 9654                       	sub.w	(a4),d3                          ; subtract the screen's x position
0000F9C6 0643 0080                  	addi.w	#128,d3
0000F9CA 341E                       	move.w	(a6)+,d2	                 ; get Y pos
0000F9CC 946C 0004                  	sub.w	4(a4),d2   ; subtract the screen's y position
0000F9D0 0642 0080                  	addi.w	#128,d2
0000F9D4 0242 07FF                  	andi.w	#$7FF,d2
0000F9D8 524E                       	addq.w	#1,a6
0000F9DA 7200                       	moveq	#0,d1
0000F9DC 121E                       	move.b	(a6)+,d1	                 ; get mapping frame
0000F9DE D241                       	add.w	d1,d1
0000F9E0 224D                       	movea.l	a5,a1
0000F9E2 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000F9E6 7200                       	moveq	#0,d1
0000F9E8 1219                       	move.b	(a1)+,d1
0000F9EA 5301                       	subq.b	#1,d1                            ; get number of pieces
0000F9EC 6B00                       	bmi.s	@nochildleft                     ; if there are 0 pieces, branch
0000F9EE 3F04                       	move.w	d4,-(sp)
0000F9F0 4EB9 0000 0000             	jsr	ChkDrawSprite
0000F9F6 381F                       	move.w	(sp)+,d4
0000F9F8                            @nochildleft:
0000F9F8 4840                       	swap	d0
0000F9FA 51C8 FFC4                  	dbf	d0,@drawchildloop	         ; repeat for number of child sprites
0000F9FE                            ; loc_16804:
0000F9FE                            BuildSprites_MultiDraw_NextObj:
0000F9FE 285F                       	movea.l	(sp)+,a4
0000FA00 6000 FEE2                  	bra.w	loc_D726; End of function BuildSprites
0000FA04                            
0000FA04                            
0000FA04                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000FA04                            
0000FA04                            ; sub_1680A:
0000FA04                            ChkDrawSprite:
0000FA04 0C05 0050                  	cmpi.b	#80,d5		; has the sprite limit been reached?
0000FA08 6500                       	blo.s	loc_1681C	; if it hasn't, branch
0000FA0A 4E75                       	rts	; otherwise, return
0000FA0C                            
0000FA0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FA0C                            
0000FA0C                            
0000FA0C                            sub_D750:				; XREF: BuildSprites
0000FA0C 3668 0002                  		movea.w	2(a0),a3
0000FA10                            loc_1681C:
0000FA10 0804 0000                  		btst	#0,d4
0000FA14 6600                       		bne.s	loc_D796
0000FA16 0804 0001                  		btst	#1,d4
0000FA1A 6600 0000                  		bne.w	loc_D7E4
0000FA1E                            ; End of function sub_D750
0000FA1E                            
0000FA1E                            
0000FA1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FA1E                            
0000FA1E                            
0000FA1E                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000FA1E 0C05 0050                  		cmpi.b	#$50,d5
0000FA22 6700                       		beq.s	locret_D794
0000FA24                            sub_D762_2:				; XREF: sub_D762; SS_ShowLayout
0000FA24 1019                       		move.b	(a1)+,d0
0000FA26 4880                       		ext.w	d0
0000FA28 D042                       		add.w	d2,d0
0000FA2A 34C0                       		move.w	d0,(a2)+
0000FA2C 14D9                       		move.b	(a1)+,(a2)+
0000FA2E 5205                       		addq.b	#1,d5
0000FA30 14C5                       		move.b	d5,(a2)+
0000FA32 1019                       		move.b	(a1)+,d0
0000FA34 E148                       		lsl.w	#8,d0
0000FA36 1019                       		move.b	(a1)+,d0
0000FA38 D04B                       		add.w	a3,d0
0000FA3A 34C0                       		move.w	d0,(a2)+
0000FA3C 1019                       		move.b	(a1)+,d0
0000FA3E 4880                       		ext.w	d0
0000FA40 D043                       		add.w	d3,d0
0000FA42 0240 01FF                  		andi.w	#$1FF,d0
0000FA46 6600                       		bne.s	loc_D78E
0000FA48 5240                       		addq.w	#1,d0
0000FA4A                            
0000FA4A                            loc_D78E:
0000FA4A 34C0                       		move.w	d0,(a2)+
0000FA4C 51C9 FFD0                  		dbf	d1,sub_D762
0000FA50                            
0000FA50                            locret_D794:
0000FA50 4E75                       		rts
0000FA52                            ; End of function sub_D762
0000FA52                            
0000FA52                            ; ===========================================================================
0000FA52                            
0000FA52                            loc_D796:
0000FA52 0804 0001                  		btst	#1,d4
0000FA56 6600 0000                  		bne.w	loc_D82A
0000FA5A                            
0000FA5A                            loc_D79E:
0000FA5A 0C05 0050                  		cmpi.b	#$50,d5
0000FA5E 6700                       		beq.s	locret_D7E2
0000FA60 1019                       		move.b	(a1)+,d0
0000FA62 4880                       		ext.w	d0
0000FA64 D042                       		add.w	d2,d0
0000FA66 34C0                       		move.w	d0,(a2)+
0000FA68 1819                       		move.b	(a1)+,d4
0000FA6A 14C4                       		move.b	d4,(a2)+
0000FA6C 5205                       		addq.b	#1,d5
0000FA6E 14C5                       		move.b	d5,(a2)+
0000FA70 1019                       		move.b	(a1)+,d0
0000FA72 E148                       		lsl.w	#8,d0
0000FA74 1019                       		move.b	(a1)+,d0
0000FA76 D04B                       		add.w	a3,d0
0000FA78 0A40 0800                  		eori.w	#$800,d0
0000FA7C 34C0                       		move.w	d0,(a2)+
0000FA7E 1019                       		move.b	(a1)+,d0
0000FA80 4880                       		ext.w	d0
0000FA82 4440                       		neg.w	d0
0000FA84 D804                       		add.b	d4,d4
0000FA86 0244 0018                  		andi.w	#$18,d4
0000FA8A 5044                       		addq.w	#8,d4
0000FA8C 9044                       		sub.w	d4,d0
0000FA8E D043                       		add.w	d3,d0
0000FA90 0240 01FF                  		andi.w	#$1FF,d0
0000FA94 6600                       		bne.s	loc_D7DC
0000FA96 5240                       		addq.w	#1,d0
0000FA98                            
0000FA98                            loc_D7DC:
0000FA98 34C0                       		move.w	d0,(a2)+
0000FA9A 51C9 FFBE                  		dbf	d1,loc_D79E
0000FA9E                            
0000FA9E                            locret_D7E2:
0000FA9E 4E75                       		rts
0000FAA0                            ; ===========================================================================
0000FAA0                            
0000FAA0                            loc_D7E4:				; XREF: sub_D750
0000FAA0 0C05 0050                  		cmpi.b	#$50,d5
0000FAA4 6700                       		beq.s	locret_D828
0000FAA6 1019                       		move.b	(a1)+,d0
0000FAA8 1811                       		move.b	(a1),d4
0000FAAA 4880                       		ext.w	d0
0000FAAC 4440                       		neg.w	d0
0000FAAE E70C                       		lsl.b	#3,d4
0000FAB0 0244 0018                  		andi.w	#$18,d4
0000FAB4 5044                       		addq.w	#8,d4
0000FAB6 9044                       		sub.w	d4,d0
0000FAB8 D042                       		add.w	d2,d0
0000FABA 34C0                       		move.w	d0,(a2)+
0000FABC 14D9                       		move.b	(a1)+,(a2)+
0000FABE 5205                       		addq.b	#1,d5
0000FAC0 14C5                       		move.b	d5,(a2)+
0000FAC2 1019                       		move.b	(a1)+,d0
0000FAC4 E148                       		lsl.w	#8,d0
0000FAC6 1019                       		move.b	(a1)+,d0
0000FAC8 D04B                       		add.w	a3,d0
0000FACA 0A40 1000                  		eori.w	#$1000,d0
0000FACE 34C0                       		move.w	d0,(a2)+
0000FAD0 1019                       		move.b	(a1)+,d0
0000FAD2 4880                       		ext.w	d0
0000FAD4 D043                       		add.w	d3,d0
0000FAD6 0240 01FF                  		andi.w	#$1FF,d0
0000FADA 6600                       		bne.s	loc_D822
0000FADC 5240                       		addq.w	#1,d0
0000FADE                            
0000FADE                            loc_D822:
0000FADE 34C0                       		move.w	d0,(a2)+
0000FAE0 51C9 FFBE                  		dbf	d1,loc_D7E4
0000FAE4                            
0000FAE4                            locret_D828:
0000FAE4 4E75                       		rts
0000FAE6                            ; ===========================================================================
0000FAE6                            
0000FAE6                            loc_D82A:
0000FAE6 0C05 0050                  		cmpi.b	#$50,d5
0000FAEA 6700                       		beq.s	locret_D87C
0000FAEC 1019                       		move.b	(a1)+,d0
0000FAEE 1811                       		move.b	(a1),d4
0000FAF0 4880                       		ext.w	d0
0000FAF2 4440                       		neg.w	d0
0000FAF4 E70C                       		lsl.b	#3,d4
0000FAF6 0244 0018                  		andi.w	#$18,d4
0000FAFA 5044                       		addq.w	#8,d4
0000FAFC 9044                       		sub.w	d4,d0
0000FAFE D042                       		add.w	d2,d0
0000FB00 34C0                       		move.w	d0,(a2)+
0000FB02 1819                       		move.b	(a1)+,d4
0000FB04 14C4                       		move.b	d4,(a2)+
0000FB06 5205                       		addq.b	#1,d5
0000FB08 14C5                       		move.b	d5,(a2)+
0000FB0A 1019                       		move.b	(a1)+,d0
0000FB0C E148                       		lsl.w	#8,d0
0000FB0E 1019                       		move.b	(a1)+,d0
0000FB10 D04B                       		add.w	a3,d0
0000FB12 0A40 1800                  		eori.w	#$1800,d0
0000FB16 34C0                       		move.w	d0,(a2)+
0000FB18 1019                       		move.b	(a1)+,d0
0000FB1A 4880                       		ext.w	d0
0000FB1C 4440                       		neg.w	d0
0000FB1E D804                       		add.b	d4,d4
0000FB20 0244 0018                  		andi.w	#$18,d4
0000FB24 5044                       		addq.w	#8,d4
0000FB26 9044                       		sub.w	d4,d0
0000FB28 D043                       		add.w	d3,d0
0000FB2A 0240 01FF                  		andi.w	#$1FF,d0
0000FB2E 6600                       		bne.s	loc_D876
0000FB30 5240                       		addq.w	#1,d0
0000FB32                            
0000FB32                            loc_D876:
0000FB32 34C0                       		move.w	d0,(a2)+
0000FB34 51C9 FFB0                  		dbf	d1,loc_D82A
0000FB38                            
0000FB38                            locret_D87C:
0000FB38 4E75                       		rts
0000FB3A                            ; End of function BuildSpr_Normal
0000FB3A                            
0000FB3A                            ; ===========================================================================
0000FB3A                            
0000FB3A                            		include	"_incObj\sub ChkObjectVisible.asm"
0000FB3A                            ; ---------------------------------------------------------------------------
0000FB3A                            ; Subroutine to	check if an object is off screen
0000FB3A                            
0000FB3A                            ; output:
0000FB3A                            ;	d0 = flag set if object is off screen
0000FB3A                            ; ---------------------------------------------------------------------------
0000FB3A                            
0000FB3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FB3A                            
0000FB3A                            
0000FB3A                            ChkObjectVisible:
0000FB3A 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000FB3E 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000FB42 6B00                       		bmi.s	@offscreen
0000FB44 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000FB48 6C00                       		bge.s	@offscreen	; if not, branch
0000FB4A                            
0000FB4A 3228 000C                  		move.w	obY(a0),d1	; get object y-position
0000FB4E 9278 F704                  		sub.w	(v_screenposy).w,d1 ; subtract screen y-position
0000FB52 6B00                       		bmi.s	@offscreen
0000FB54 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000FB58 6C00                       		bge.s	@offscreen	; if not, branch
0000FB5A                            
0000FB5A 7000                       		moveq	#0,d0		; set flag to 0
0000FB5C 4E75                       		rts	
0000FB5E                            
0000FB5E                            	@offscreen:
0000FB5E 7001                       		moveq	#1,d0		; set flag to 1
0000FB60 4E75                       		rts	
0000FB62                            ; End of function ChkObjectVisible
0000FB62                            
0000FB62                            ; ---------------------------------------------------------------------------
0000FB62                            ; Subroutine to	check if an object is off screen
0000FB62                            ; More precise than above subroutine, taking width into account
0000FB62                            
0000FB62                            ; output:
0000FB62                            ;	d0 = flag set if object is off screen
0000FB62                            ; ---------------------------------------------------------------------------
0000FB62                            
0000FB62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FB62                            
0000FB62                            
0000FB62                            ChkPartiallyVisible:
0000FB62 7200                       		moveq	#0,d1
0000FB64 1228 0014                  		move.b	obActWid(a0),d1
0000FB68 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000FB6C 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000FB70 D041                       		add.w	d1,d0		; add object width
0000FB72 6B00                       		bmi.s	@offscreen2
0000FB74 D241                       		add.w	d1,d1
0000FB76 9041                       		sub.w	d1,d0
0000FB78 0C40 0140                  		cmpi.w	#320,d0
0000FB7C 6C00                       		bge.s	@offscreen2
0000FB7E                            
0000FB7E 3228 000C                  		move.w	obY(a0),d1
0000FB82 9278 F704                  		sub.w	(v_screenposy).w,d1
0000FB86 6B00                       		bmi.s	@offscreen2
0000FB88 0C41 00E0                  		cmpi.w	#224,d1
0000FB8C 6C00                       		bge.s	@offscreen2
0000FB8E                            
0000FB8E 7000                       		moveq	#0,d0
0000FB90 4E75                       		rts	
0000FB92                            
0000FB92                            	@offscreen2:
0000FB92 7001                       		moveq	#1,d0
0000FB94 4E75                       		rts	
0000FB96                            ; End of function ChkPartiallyVisible
0000FB96                            ; End of function ChkPartiallyVisible
0000FB96                            
0000FB96                            ; ---------------------------------------------------------------------------
0000FB96                            ; Subroutine to	load a level's objects
0000FB96                            ; ---------------------------------------------------------------------------
0000FB96                            
0000FB96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FB96                            
0000FB96                            
0000FB96                            ObjPosLoad:
0000FB96 7000                       		moveq	#0,d0
0000FB98 1038 F76C                  		move.b	(v_opl_routine).w,d0
0000FB9C 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000FBA0 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000FBA4                            ; End of function ObjPosLoad
0000FBA4                            
0000FBA4                            ; ===========================================================================
0000FBA4 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000FBA6 0000                       		dc.w OPL_Next-OPL_Index
0000FBA8                            ; ===========================================================================
0000FBA8                            
0000FBA8                            OPL_Main:
0000FBA8 5438 F76C                  		addq.b	#2,(v_opl_routine).w
0000FBAC 3038 FE10                  		move.w	(v_zone).w,d0
0000FBB0 ED08                       		lsl.b	#6,d0
0000FBB2 E848                       		lsr.w	#4,d0
0000FBB4 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000FBBA 2248                       		movea.l	a0,a1
0000FBBC D0F0 0000                  		adda.w	(a0,d0.w),a0
0000FBC0 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FBC4 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FBC8 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000FBCC 21C9 F778                  		move.l	a1,(v_opl_data+8).w
0000FBD0 21C9 F77C                  		move.l	a1,(v_opl_data+$C).w
0000FBD4 45F8 FC00                  		lea	(v_objstate).w,a2
0000FBD8 34FC 0101                  		move.w	#$101,(a2)+
0000FBDC 303C 005E                  		move.w	#$5E,d0
0000FBE0                            
0000FBE0                            OPL_ClrList:
0000FBE0 429A                       		clr.l	(a2)+
0000FBE2 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000FBE6                            
0000FBE6 45F8 FC00                  		lea	(v_objstate).w,a2
0000FBEA 7400                       		moveq	#0,d2
0000FBEC 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FBF0 0446 0080                  		subi.w	#$80,d6
0000FBF4 6400                       		bhs.s	loc_D93C
0000FBF6 7C00                       		moveq	#0,d6
0000FBF8                            
0000FBF8                            loc_D93C:
0000FBF8 0246 FF80                  		andi.w	#$FF80,d6
0000FBFC 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FC00                            
0000FC00                            loc_D944:
0000FC00 BC50                       		cmp.w	(a0),d6
0000FC02 6300                       		bls.s	loc_D956
0000FC04 4A28 0004                  		tst.b	4(a0)
0000FC08 6A00                       		bpl.s	loc_D952
0000FC0A 1412                       		move.b	(a2),d2
0000FC0C 5212                       		addq.b	#1,(a2)
0000FC0E                            
0000FC0E                            loc_D952:
0000FC0E 5C48                       		addq.w	#6,a0
0000FC10 60EE                       		bra.s	loc_D944
0000FC12                            ; ===========================================================================
0000FC12                            
0000FC12                            loc_D956:
0000FC12 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FC16 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FC1A 0446 0080                  		subi.w	#$80,d6
0000FC1E 6500                       		blo.s	loc_D976
0000FC20                            
0000FC20                            loc_D964:
0000FC20 BC50                       		cmp.w	(a0),d6
0000FC22 6300                       		bls.s	loc_D976
0000FC24 4A28 0004                  		tst.b	4(a0)
0000FC28 6A00                       		bpl.s	loc_D972
0000FC2A 522A 0001                  		addq.b	#1,1(a2)
0000FC2E                            
0000FC2E                            loc_D972:
0000FC2E 5C48                       		addq.w	#6,a0
0000FC30 60EE                       		bra.s	loc_D964
0000FC32                            ; ===========================================================================
0000FC32                            
0000FC32                            loc_D976:
0000FC32 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FC36 31FC FFFF F76E             		move.w	#-1,(v_opl_screen).w
0000FC3C                            
0000FC3C                            OPL_Next:
0000FC3C 45F8 FC00                  		lea	(v_objstate).w,a2
0000FC40 7400                       		moveq	#0,d2
0000FC42 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FC46 0246 FF80                  		andi.w	#$FF80,d6
0000FC4A BC78 F76E                  		cmp.w	(v_opl_screen).w,d6
0000FC4E 6700 0000                  		beq.w	locret_DA3A
0000FC52 6C00                       		bge.s	loc_D9F6
0000FC54 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FC58 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FC5C 0446 0080                  		subi.w	#$80,d6
0000FC60 6500                       		blo.s	loc_D9D2
0000FC62                            
0000FC62                            loc_D9A6:
0000FC62 BC68 FFFA                  		cmp.w	-6(a0),d6
0000FC66 6C00                       		bge.s	loc_D9D2
0000FC68 5D48                       		subq.w	#6,a0
0000FC6A 4A28 0004                  		tst.b	4(a0)
0000FC6E 6A00                       		bpl.s	loc_D9BC
0000FC70 532A 0001                  		subq.b	#1,1(a2)
0000FC74 142A 0001                  		move.b	1(a2),d2
0000FC78                            
0000FC78                            loc_D9BC:
0000FC78 6100 0000                  		bsr.w	loc_DA3C
0000FC7C 6600                       		bne.s	loc_D9C6
0000FC7E 5D48                       		subq.w	#6,a0
0000FC80 60E0                       		bra.s	loc_D9A6
0000FC82                            ; ===========================================================================
0000FC82                            
0000FC82                            loc_D9C6:
0000FC82 4A28 0004                  		tst.b	4(a0)
0000FC86 6A00                       		bpl.s	loc_D9D0
0000FC88 522A 0001                  		addq.b	#1,1(a2)
0000FC8C                            
0000FC8C                            loc_D9D0:
0000FC8C 5C48                       		addq.w	#6,a0
0000FC8E                            
0000FC8E                            loc_D9D2:
0000FC8E 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FC92 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FC96 0646 0300                  		addi.w	#$300,d6
0000FC9A                            
0000FC9A                            loc_D9DE:
0000FC9A BC68 FFFA                  		cmp.w	-6(a0),d6
0000FC9E 6E00                       		bgt.s	loc_D9F0
0000FCA0 4A28 FFFE                  		tst.b	-2(a0)
0000FCA4 6A00                       		bpl.s	loc_D9EC
0000FCA6 5312                       		subq.b	#1,(a2)
0000FCA8                            
0000FCA8                            loc_D9EC:
0000FCA8 5D48                       		subq.w	#6,a0
0000FCAA 60EE                       		bra.s	loc_D9DE
0000FCAC                            ; ===========================================================================
0000FCAC                            
0000FCAC                            loc_D9F0:
0000FCAC 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FCB0 4E75                       		rts	
0000FCB2                            ; ===========================================================================
0000FCB2                            
0000FCB2                            loc_D9F6:
0000FCB2 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FCB6 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FCBA 0646 0280                  		addi.w	#$280,d6
0000FCBE                            
0000FCBE                            loc_DA02:
0000FCBE BC50                       		cmp.w	(a0),d6
0000FCC0 6300                       		bls.s	loc_DA16
0000FCC2 4A28 0004                  		tst.b	4(a0)
0000FCC6 6A00                       		bpl.s	loc_DA10
0000FCC8 1412                       		move.b	(a2),d2
0000FCCA 5212                       		addq.b	#1,(a2)
0000FCCC                            
0000FCCC                            loc_DA10:
0000FCCC 6100 0000                  		bsr.w	loc_DA3C
0000FCD0 67EC                       		beq.s	loc_DA02
0000FCD2                            
0000FCD2                            loc_DA16:
0000FCD2 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FCD6 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FCDA 0446 0300                  		subi.w	#$300,d6
0000FCDE 6500                       		blo.s	loc_DA36
0000FCE0                            
0000FCE0                            loc_DA24:
0000FCE0 BC50                       		cmp.w	(a0),d6
0000FCE2 6300                       		bls.s	loc_DA36
0000FCE4 4A28 0004                  		tst.b	4(a0)
0000FCE8 6A00                       		bpl.s	loc_DA32
0000FCEA 522A 0001                  		addq.b	#1,1(a2)
0000FCEE                            
0000FCEE                            loc_DA32:
0000FCEE 5C48                       		addq.w	#6,a0
0000FCF0 60EE                       		bra.s	loc_DA24
0000FCF2                            ; ===========================================================================
0000FCF2                            
0000FCF2                            loc_DA36:
0000FCF2 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FCF6                            
0000FCF6                            locret_DA3A:
0000FCF6 4E75                       		rts	
0000FCF8                            ; ===========================================================================
0000FCF8                            
0000FCF8                            loc_DA3C:
0000FCF8 4A28 0004                  		tst.b	4(a0)
0000FCFC 6A00                       		bpl.s	OPL_MakeItem
0000FCFE 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000FD04 6700                       		beq.s	OPL_MakeItem
0000FD06 5C48                       		addq.w	#6,a0
0000FD08 7000                       		moveq	#0,d0
0000FD0A 4E75                       		rts	
0000FD0C                            ; ===========================================================================
0000FD0C                            
0000FD0C                            OPL_MakeItem:
0000FD0C 6100 0000                  		bsr.w	FindFreeObj
0000FD10 6600                       		bne.s	locret_DA8A
0000FD12 3358 0008                  		move.w	(a0)+,obX(a1)
0000FD16 3018                       		move.w	(a0)+,d0
0000FD18 3200                       		move.w	d0,d1
0000FD1A 0240 0FFF                  		andi.w	#$FFF,d0
0000FD1E 3340 000C                  		move.w	d0,obY(a1)
0000FD22 E559                       		rol.w	#2,d1
0000FD24 0201 0003                  		andi.b	#3,d1
0000FD28 1341 0001                  		move.b	d1,obRender(a1)
0000FD2C 1341 0022                  		move.b	d1,obStatus(a1)
0000FD30 1018                       		move.b	(a0)+,d0
0000FD32 6A00                       		bpl.s	loc_DA80
0000FD34 0200 007F                  		andi.b	#$7F,d0
0000FD38 1342 0023                  		move.b	d2,obRespawnNo(a1)
0000FD3C                            
0000FD3C                            loc_DA80:
0000FD3C 1280                       		move.b	d0,0(a1)
0000FD3E 1358 0028                  		move.b	(a0)+,obSubtype(a1)
0000FD42 7000                       		moveq	#0,d0
0000FD44                            
0000FD44                            locret_DA8A:
0000FD44 4E75                       		rts	
0000FD46                            
0000FD46                            		include	"_incObj\sub FindFreeObj.asm"
0000FD46                            ; ---------------------------------------------------------------------------
0000FD46                            ; Subroutine to find a free object space
0000FD46                            
0000FD46                            ; output:
0000FD46                            ;	a1 = free position in object RAM
0000FD46                            ; ---------------------------------------------------------------------------
0000FD46                            
0000FD46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FD46                            
0000FD46                            
0000FD46                            FindFreeObj:
0000FD46 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; start address for object RAM
0000FD4A 303C 005F                  		move.w	#$5F,d0
0000FD4E                            
0000FD4E                            	FFree_Loop:
0000FD4E 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000FD50 6700                       		beq.s	FFree_Found	; if yes, branch
0000FD52 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000FD56 51C8 FFF6                  		dbf	d0,FFree_Loop	; repeat $5F times
0000FD5A                            
0000FD5A                            	FFree_Found:
0000FD5A 4E75                       		rts	
0000FD5C                            
0000FD5C                            ; End of function FindFreeObj
0000FD5C                            
0000FD5C                            
0000FD5C                            ; ---------------------------------------------------------------------------
0000FD5C                            ; Subroutine to find a free object space AFTER the current one
0000FD5C                            
0000FD5C                            ; output:
0000FD5C                            ;	a1 = free position in object RAM
0000FD5C                            ; ---------------------------------------------------------------------------
0000FD5C                            
0000FD5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FD5C                            
0000FD5C                            
0000FD5C                            FindNextFreeObj:
0000FD5C 2248                       		movea.l	a0,a1
0000FD5E 303C F000                  		move.w	#$F000,d0
0000FD62 9048                       		sub.w	a0,d0
0000FD64 EC48                       		lsr.w	#6,d0
0000FD66 5340                       		subq.w	#1,d0
0000FD68 6500                       		bcs.s	NFree_Found
0000FD6A                            
0000FD6A                            	NFree_Loop:
0000FD6A 4A11                       		tst.b	(a1)
0000FD6C 6700                       		beq.s	NFree_Found
0000FD6E 43E9 0040                  		lea	$40(a1),a1
0000FD72 51C8 FFF6                  		dbf	d0,NFree_Loop
0000FD76                            
0000FD76                            	NFree_Found:
0000FD76 4E75                       		rts	
0000FD78                            
0000FD78                            ; End of function FindNextFreeObj
0000FD78                            ; End of function FindNextFreeObj
0000FD78                            		include	"_incObj\41 Springs.asm"
0000FD78                            ; ---------------------------------------------------------------------------
0000FD78                            ; Object 41 - springs
0000FD78                            ; ---------------------------------------------------------------------------
0000FD78                            
0000FD78                            Springs:
0000FD78 7000                       		moveq	#0,d0
0000FD7A 1028 0024                  		move.b	obRoutine(a0),d0
0000FD7E 323B 0000                  		move.w	Spring_Index(pc,d0.w),d1
0000FD82 4EBB 1000                  		jsr	Spring_Index(pc,d1.w)
0000FD86 6100 FA24                  		bsr.w	DisplaySprite
0000FDA8 4E75                       		rts	
0000FDAA                            ; ===========================================================================
0000FDAA 0000                       Spring_Index:	dc.w Spring_Main-Spring_Index
0000FDAC 0000                       		dc.w Spring_Up-Spring_Index
0000FDAE 0000                       		dc.w Spring_AniUp-Spring_Index
0000FDB0 0000                       		dc.w Spring_ResetUp-Spring_Index
0000FDB2 0000                       		dc.w Spring_LR-Spring_Index
0000FDB4 0000                       		dc.w Spring_AniLR-Spring_Index
0000FDB6 0000                       		dc.w Spring_ResetLR-Spring_Index
0000FDB8 0000                       		dc.w Spring_Dwn-Spring_Index
0000FDBA 0000                       		dc.w Spring_AniDwn-Spring_Index
0000FDBC 0000                       		dc.w Spring_ResetDwn-Spring_Index
0000FDBE                            
0000FDBE =00000030                  spring_pow:	equ $30			; power of current spring
0000FDBE                            
0000FDBE F000                       Spring_Powers:	dc.w -$1000		; power	of red spring
0000FDC0 F600                       		dc.w -$A00		; power	of yellow spring
0000FDC2                            ; ===========================================================================
0000FDC2                            
0000FDC2                            Spring_Main:	; Routine 0
0000FDC2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FDC6 217C 0000 0000 0004        		move.l	#Map_Spring,obMap(a0)
0000FDCE 317C 0523 0002             		move.w	#$523,obGfx(a0)
0000FDD4 0028 0004 0001             		ori.b	#4,obRender(a0)
0000FDDA 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000FDE0 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FDE6 1028 0028                  		move.b	obSubtype(a0),d0
0000FDEA 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000FDEE 6700                       		beq.s	Spring_NotLR	; if not, branch
0000FDF0                            
0000FDF0 117C 0008 0024             		move.b	#8,obRoutine(a0) ; use "Spring_LR" routine
0000FDF6 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FDFC 117C 0003 001A             		move.b	#3,obFrame(a0)
0000FE02 317C 0533 0002             		move.w	#$533,obGfx(a0)
0000FE08 117C 0008 0014             		move.b	#8,obActWid(a0)
0000FE0E                            
0000FE0E                            	Spring_NotLR:
0000FE0E 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000FE12 6700                       		beq.s	Spring_NotDwn	; if not, branch
0000FE14                            
0000FE14 117C 000E 0024             		move.b	#$E,obRoutine(a0) ; use "Spring_Dwn" routine
0000FE1A 08E8 0001 0022             		bset	#1,obStatus(a0)
0000FE20                            
0000FE20                            	Spring_NotDwn:
0000FE20 0800 0001                  		btst	#1,d0
0000FE24 6700                       		beq.s	loc_DB72
0000FE26 08E8 0005 0002             		bset	#5,obGfx(a0)
0000FE2C                            
0000FE2C                            loc_DB72:
0000FE2C 0240 000F                  		andi.w	#$F,d0
0000FE30 317B 008C 0030             		move.w	Spring_Powers(pc,d0.w),spring_pow(a0)
0000FE36 4E75                       		rts	
0000FE38                            ; ===========================================================================
0000FE38                            
0000FE38                            Spring_Up:	; Routine 2
0000FE38 323C 001B                  		move.w	#$1B,d1
0000FE3C 343C 0008                  		move.w	#8,d2
0000FE40 363C 0010                  		move.w	#$10,d3
0000FE44 3828 0008                  		move.w	obX(a0),d4
0000FE48 6100 0000                  		bsr.w	SolidObject
0000FE4C 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic on top of the spring?
0000FE50 6600                       		bne.s	Spring_BounceUp	; if yes, branch
0000FE52 4E75                       		rts	
0000FE54                            ; ===========================================================================
0000FE54                            
0000FE54                            Spring_BounceUp:
0000FE54 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FE58 5069 000C                  		addq.w	#8,obY(a1)
0000FE5C 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1) ; move Sonic upwards
0000FE62 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FE68 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FE6E 137C 0000 001C             		move.b	#id_Spring,obAnim(a1) ; use "bouncing" animation
0000FE74 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FE7A 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FE80 4228 0025                  		clr.b	obSolid(a0)
0000FE8E                            
0000FE8E                            Spring_AniUp:	; Routine 4
0000FE8E 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FE94 6000 C9CC                  		bra.w	AnimateSprite
0000FE98                            ; ===========================================================================
0000FE98                            
0000FE98                            Spring_ResetUp:	; Routine 6
0000FE98 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FE9E 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Up" routine
0000FEA2 4E75                       		rts	
0000FEA4                            ; ===========================================================================
0000FEA4                            
0000FEA4                            Spring_LR:	; Routine 8
0000FEA4 323C 0013                  		move.w	#$13,d1
0000FEA8 343C 000E                  		move.w	#$E,d2
0000FEAC 363C 000F                  		move.w	#$F,d3
0000FEB0 3828 0008                  		move.w	obX(a0),d4
0000FEB4 6100 0000                  		bsr.w	SolidObject
0000FEB8 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FEBE 6600                       		bne.s	loc_DC0C
0000FEC0 117C 0008 0024             		move.b	#8,obRoutine(a0)
0000FEC6                            
0000FEC6                            loc_DC0C:
0000FEC6 0828 0005 0022             		btst	#5,obStatus(a0)
0000FECC 6600                       		bne.s	Spring_BounceLR
0000FECE 4E75                       		rts	
0000FED0                            ; ===========================================================================
0000FED0                            
0000FED0                            Spring_BounceLR:
0000FED0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FED4 3368 0030 0010             		move.w	spring_pow(a0),obVelX(a1) ; move Sonic to the left
0000FEDA 5069 0008                  		addq.w	#8,obX(a1)
0000FEDE 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
0000FEE4 6600                       		bne.s	Spring_Flipped	; if yes, branch
0000FEE6 0469 0010 0008             		subi.w	#$10,obX(a1)
0000FEEC 4469 0010                  		neg.w	obVelX(a1)	; move Sonic to	the right
0000FEF0                            
0000FEF0                            	Spring_Flipped:
0000FEF0 337C 000F 003E             		move.w	#$F,$3E(a1)
0000FEF6 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000FEFC 0869 0000 0022             		bchg	#0,obStatus(a1)
0000FF02 0829 0002 0022             		btst	#2,obStatus(a1)
0000FF08 6600                       		bne.s	loc_DC56
0000FF0A 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
0000FF10                            
0000FF10                            loc_DC56:
0000FF10 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000FF16 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000FF26                            
0000FF26                            Spring_AniLR:	; Routine $A
0000FF26 4278 C904                  		clr.w ($FFFFC904).w	; clear screen delay counter
0000FF2A 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FF30 6000 C930                  		bra.w	AnimateSprite
0000FF34                            ; ===========================================================================
0000FF34                            
0000FF34                            Spring_ResetLR:	; Routine $C
0000FF34 117C 0002 001D             		move.b	#2,obNextAni(a0) ; reset animation
0000FF3A 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_LR" routine
0000FF3E 4E75                       		rts	
0000FF40                            ; ===========================================================================
0000FF40                            
0000FF40                            Spring_Dwn:	; Routine $E
0000FF40 323C 001B                  		move.w	#$1B,d1
0000FF44 343C 0008                  		move.w	#8,d2
0000FF48 363C 0010                  		move.w	#$10,d3
0000FF4C 3828 0008                  		move.w	obX(a0),d4
0000FF50 6100 0000                  		bsr.w	SolidObject
0000FF54 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FF5A 6600                       		bne.s	loc_DCA4
0000FF5C 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000FF62                            
0000FF62                            loc_DCA4:
0000FF62 4A28 0025                  		tst.b	obSolid(a0)
0000FF66 6600                       		bne.s	locret_DCAE
0000FF68 4A44                       		tst.w	d4
0000FF6A 6B00                       		bmi.s	Spring_BounceDwn
0000FF6C                            
0000FF6C                            locret_DCAE:
0000FF6C 4E75                       		rts	
0000FF6E                            ; ===========================================================================
0000FF6E                            
0000FF6E                            Spring_BounceDwn:
0000FF6E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FF72 5169 000C                  		subq.w	#8,obY(a1)
0000FF76 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1)
0000FF7C 4469 0012                  		neg.w	obVelY(a1)	; move Sonic downwards
0000FF80 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FF86 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FF8C 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FF92 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FF98 4228 0025                  		clr.b	obSolid(a0)
0000FFA6                            
0000FFA6                            Spring_AniDwn:	; Routine $10
0000FFA6 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FFAC 6000 C8B4                  		bra.w	AnimateSprite
0000FFB0                            ; ===========================================================================
0000FFB0                            
0000FFB0                            Spring_ResetDwn:
0000FFB0                            		; Routine $12
0000FFB0 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FFB6 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Dwn" routine
0000FFBA 4E75                       		rts	
0000FFBA 4E75                       		rts	
0000FFBC                            		include	"_anim\Springs.asm"
0000FFBC                            ; ---------------------------------------------------------------------------
0000FFBC                            ; Animation script - springs
0000FFBC                            ; ---------------------------------------------------------------------------
0000FFBC 0000                       Ani_Spring:	dc.w byte_DD02-Ani_Spring
0000FFBE 0000                       		dc.w byte_DD0E-Ani_Spring
0000FFC0 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, afRoutine
0000FFCC 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, afRoutine
0000FFD8                            		even
0000FFD8                            		even
0000FFD8                            Map_Spring:	include	"_maps\Springs.asm"
0000FFD8                            ; ---------------------------------------------------------------------------
0000FFD8                            ; Sprite mappings - springs
0000FFD8                            ; ---------------------------------------------------------------------------
0000FFD8                            Map_Spring_internal:
0000FFD8 0000                       		dc.w M_Spg_Up-Map_Spring_internal
0000FFDA 0000                       		dc.w M_Spg_UpFlat-Map_Spring_internal
0000FFDC 0000                       		dc.w M_Spg_UpExt-Map_Spring_internal
0000FFDE 0000                       		dc.w M_Spg_Left-Map_Spring_internal
0000FFE0 0000                       		dc.w M_Spg_LeftFlat-Map_Spring_internal
0000FFE2 0000                       		dc.w M_Spg_LeftExt-Map_Spring_internal
0000FFE4 02                         M_Spg_Up:	dc.b 2			; facing up
0000FFE5 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000FFEA 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000FFEF 01                         M_Spg_UpFlat:	dc.b 1			; facing up, flattened
0000FFF0 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000FFF5 03                         M_Spg_UpExt:	dc.b 3			; facing up, extended
0000FFF6 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000FFFB F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
00010000 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
00010005 01                         M_Spg_Left:	dc.b 1			; facing left
00010006 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0001000B 01                         M_Spg_LeftFlat:	dc.b 1			; facing left, flattened
0001000C F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
00010011 04                         M_Spg_LeftExt:	dc.b 4			; facing left, extended
00010012 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
00010017 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0001001C F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
00010021 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
00010026                            		even
00010026                            		even
00010026                            
00010026                            		include	"_incObj\42 Newtron.asm"
00010026                            ; ---------------------------------------------------------------------------
00010026                            ; Object 42 - Newtron enemy (GHZ)
00010026                            ; ---------------------------------------------------------------------------
00010026                            
00010026                            Newtron:
00010026 7000                       		moveq	#0,d0
00010028 1028 0024                  		move.b	obRoutine(a0),d0
0001002C 323B 0000                  		move.w	Newt_Index(pc,d0.w),d1
00010030 4EFB 1000                  		jmp	Newt_Index(pc,d1.w)
00010034                            ; ===========================================================================
00010034 0000                       Newt_Index:	dc.w Newt_Main-Newt_Index
00010036 0000                       		dc.w Newt_Action-Newt_Index
00010038 0000                       		dc.w Newt_Delete-Newt_Index
0001003A                            ; ===========================================================================
0001003A                            
0001003A                            Newt_Main:	; Routine 0
0001003A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001003E 217C 0000 0000 0004        		move.l	#Map_Newt,obMap(a0)
00010046 317C 049B 0002             		move.w	#$49B,obGfx(a0)
0001004C 117C 0004 0001             		move.b	#4,obRender(a0)
00010052 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010058 117C 0014 0014             		move.b	#$14,obActWid(a0)
0001005E 117C 0010 0016             		move.b	#$10,obHeight(a0)
00010064 117C 0008 0017             		move.b	#8,obWidth(a0)
0001006A                            
0001006A                            Newt_Action:	; Routine 2
0001006A 7000                       		moveq	#0,d0
0001006C 1028 0025                  		move.b	ob2ndRout(a0),d0
00010070 323B 0000                  		move.w	@index(pc,d0.w),d1
00010074 4EBB 1000                  		jsr	@index(pc,d1.w)
00010078 43F9 0000 0000             		lea	(Ani_Newt).l,a1
0001007E 6100 C7E2                  		bsr.w	AnimateSprite
00010082 6000 0000                  		bra.w	RememberState
00010086                            ; ===========================================================================
00010086 0000                       @index:		dc.w @chkdistance-@index
00010088 0000                       		dc.w @type00-@index
0001008A 0000                       		dc.w @matchfloor-@index
0001008C 0000                       		dc.w @speed-@index
0001008E 0000                       		dc.w @type01-@index
00010090                            ; ===========================================================================
00010090                            
00010090                            @chkdistance:
00010090 08E8 0000 0022             		bset	#0,obStatus(a0)
00010096 3038 D008                  		move.w	(v_player+obX).w,d0
0001009A 9068 0008                  		sub.w	obX(a0),d0
0001009E 6400                       		bcc.s	@sonicisright
000100A0 4440                       		neg.w	d0
000100A2 08A8 0000 0022             		bclr	#0,obStatus(a0)
000100A8                            
000100A8                            	@sonicisright:
000100A8 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
000100AC 6400                       		bcc.s	@outofrange	; if not, branch
000100AE 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @type00 next
000100B2 117C 0001 001C             		move.b	#1,obAnim(a0)
000100B8 4A28 0028                  		tst.b	obSubtype(a0)	; check	object type
000100BC 6700                       		beq.s	@istype00	; if type is 00, branch
000100BE                            
000100BE 317C 249B 0002             		move.w	#$249B,obGfx(a0)
000100C4 117C 0008 0025             		move.b	#8,ob2ndRout(a0) ; goto @type01 next
000100CA 117C 0004 001C             		move.b	#4,obAnim(a0)	; use different	animation
000100D0                            
000100D0                            	@outofrange:
000100D0                            	@istype00:
000100D0 4E75                       		rts	
000100D2                            ; ===========================================================================
000100D2                            
000100D2                            @type00:
000100D2 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has "appearing" animation finished?
000100D8 6400                       		bcc.s	@fall		; is yes, branch
000100DA 08E8 0000 0022             		bset	#0,obStatus(a0)
000100E0 3038 D008                  		move.w	(v_player+obX).w,d0
000100E4 9068 0008                  		sub.w	obX(a0),d0
000100E8 6400                       		bcc.s	@sonicisright2
000100EA 08A8 0000 0022             		bclr	#0,obStatus(a0)
000100F0                            
000100F0                            	@sonicisright2:
000100F0 4E75                       		rts	
000100F2                            ; ===========================================================================
000100F2                            
000100F2                            	@fall:
000100F2 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
000100F8 6600                       		bne.s	@loc_DE42
000100FA 117C 000C 0020             		move.b	#$C,obColType(a0)
00010100                            
00010100                            	@loc_DE42:
00010100 6100 F65E                  		bsr.w	ObjectFall
00010104 4EB9 0000 0000             		jsr		ObjFloorDist
0001010A 4A41                       		tst.w	d1		; has newtron hit the floor?
0001010C 6A00                       		bpl.s	@keepfalling	; if not, branch
0001010E                            
0001010E D368 000C                  		add.w	d1,obY(a0)
00010112 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop newtron falling
00010118 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001011C 117C 0002 001C             		move.b	#2,obAnim(a0)
00010122 0828 0005 0002             		btst	#5,obGfx(a0)
00010128 6700                       		beq.s	@pppppppp
0001012A 5228 001C                  		addq.b	#1,obAnim(a0)
0001012E                            
0001012E                            	@pppppppp:
0001012E 117C 000D 0020             		move.b	#$D,obColType(a0)
00010134 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move newtron horizontally
0001013A 0828 0000 0022             		btst	#0,obStatus(a0)
00010140 6600                       		bne.s	@keepfalling
00010142 4468 0010                  		neg.w	obVelX(a0)
00010146                            
00010146                            	@keepfalling:
00010146 4E75                       		rts	
00010148                            ; ===========================================================================
00010148                            
00010148                            @matchfloor:
00010148 6100 F64E                  		bsr.w	SpeedToPos
0001014C 4EB9 0000 0000             		jsr		ObjFloorDist
00010152 0C41 FFF8                  		cmpi.w	#-8,d1
00010156 6D00                       		blt.s	@nextroutine
00010158 0C41 000C                  		cmpi.w	#$C,d1
0001015C 6C00                       		bge.s	@nextroutine
0001015E D368 000C                  		add.w	d1,obY(a0)	; match	newtron's position with floor
00010162 4E75                       		rts	
00010164                            ; ===========================================================================
00010164                            
00010164                            	@nextroutine:
00010164 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @speed next
00010168 4E75                       		rts	
0001016A                            ; ===========================================================================
0001016A                            
0001016A                            @speed:
0001016A 6100 F62C                  		bsr.w	SpeedToPos
0001016E 4E75                       		rts	
00010170                            ; ===========================================================================
00010170                            
00010170                            @type01:
00010170 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
00010176 6600                       		bne.s	@firemissile
00010178 117C 000C 0020             		move.b	#$C,obColType(a0)
0001017E                            
0001017E                            	@firemissile:
0001017E 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
00010184 6600                       		bne.s	@fail
00010186 4A28 0032                  		tst.b	$32(a0)
0001018A 6600                       		bne.s	@fail
0001018C 117C 0001 0032             		move.b	#1,$32(a0)
00010192 6100 FBB2                  		bsr.w	FindFreeObj
00010196 6600                       		bne.s	@fail
00010198 12BC 0023                  		move.b	#id_Missile,0(a1) ; load missile object
0001019C 3368 0008 0008             		move.w	obX(a0),obX(a1)
000101A2 3368 000C 000C             		move.w	obY(a0),obY(a1)
000101A8 5169 000C                  		subq.w	#8,obY(a1)
000101AC 337C 0200 0010             		move.w	#$200,obVelX(a1)
000101B2 303C 0014                  		move.w	#$14,d0
000101B6 0828 0000 0022             		btst	#0,obStatus(a0)
000101BC 6600                       		bne.s	@noflip
000101BE 4440                       		neg.w	d0
000101C0 4469 0010                  		neg.w	obVelX(a1)
000101C4                            
000101C4                            	@noflip:
000101C4 D169 0008                  		add.w	d0,obX(a1)
000101C8 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
000101CE 137C 0001 0028             		move.b	#1,obSubtype(a1)
000101D4                            
000101D4                            	@fail:
000101D4 4E75                       		rts	
000101D6                            ; ===========================================================================
000101D6                            
000101D6                            Newt_Delete:	; Routine 4
000101D6 6000 F614                  		bra.w	DeleteObject
000101D6 6000 F614                  		bra.w	DeleteObject
000101DA                            		include	"_anim\Newtron.asm"
000101DA                            ; ---------------------------------------------------------------------------
000101DA                            ; Animation script - Newtron enemy
000101DA                            ; ---------------------------------------------------------------------------
000101DA 0000                       Ani_Newt:	dc.w A_Newt_Blank-Ani_Newt
000101DC 0000                       		dc.w A_Newt_Drop-Ani_Newt
000101DE 0000                       		dc.w A_Newt_Fly1-Ani_Newt
000101E0 0000                       		dc.w A_Newt_Fly2-Ani_Newt
000101E2 0000                       		dc.w A_Newt_Fires-Ani_Newt
000101E4 0F0A FF                    A_Newt_Blank:	dc.b $F, $A, afEnd
000101E8 00                         		even
000101E8 1300 0103 0405 FE01        A_Newt_Drop:	dc.b $13, 0, 1,	3, 4, 5, afBack, 1
000101F0 0206 07FF                  A_Newt_Fly1:	dc.b 2,	6, 7, afEnd
000101F4 0208 09FF                  A_Newt_Fly2:	dc.b 2,	8, 9, afEnd
000101F8 1300 0101 0201 0100 FC     A_Newt_Fires:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, afRoutine
00010202 00                         		even
00010202 00                         		even
00010202                            Map_Newt:	include	"_maps\Newtron.asm"
00010202                            ; ---------------------------------------------------------------------------
00010202                            ; Sprite mappings - Newtron enemy (GHZ)
00010202                            ; ---------------------------------------------------------------------------
00010202                            Map_Newt_internal:
00010202 0000                       		dc.w M_Newt_Trans-Map_Newt_internal
00010204 0000                       		dc.w M_Newt_Norm-Map_Newt_internal
00010206 0000                       		dc.w M_Newt_Fires-Map_Newt_internal
00010208 0000                       		dc.w M_Newt_Drop1-Map_Newt_internal
0001020A 0000                       		dc.w M_Newt_Drop2-Map_Newt_internal
0001020C 0000                       		dc.w M_Newt_Drop3-Map_Newt_internal
0001020E 0000                       		dc.w M_Newt_Fly1a-Map_Newt_internal
00010210 0000                       		dc.w M_Newt_Fly1b-Map_Newt_internal
00010212 0000                       		dc.w M_Newt_Fly2a-Map_Newt_internal
00010214 0000                       		dc.w M_Newt_Fly2b-Map_Newt_internal
00010216 0000                       		dc.w M_Newt_Blank-Map_Newt_internal
00010218 03                         M_Newt_Trans:	dc.b 3
00010219 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC	; partially visible
0001021E F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
00010223 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
00010228 03                         M_Newt_Norm:	dc.b 3
00010229 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC ; visible
0001022E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00010233 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00010238 03                         M_Newt_Fires:	dc.b 3
00010239 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC ; open mouth, firing
0001023E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00010243 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00010248 04                         M_Newt_Drop1:	dc.b 4
00010249 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC ; dropping
0001024E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00010253 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
00010258 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0001025D 03                         M_Newt_Drop2:	dc.b 3
0001025E F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
00010263 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
00010268 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0001026D 02                         M_Newt_Drop3:	dc.b 2
0001026E F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010273 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010278 03                         M_Newt_Fly1a:	dc.b 3
00010279 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC ; flying
0001027E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010283 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
00010288 03                         M_Newt_Fly1b:	dc.b 3
00010289 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0001028E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010293 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
00010298 03                         M_Newt_Fly2a:	dc.b 3
00010299 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0001029E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000102A3 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
000102A8 03                         M_Newt_Fly2b:	dc.b 3
000102A9 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000102AE F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000102B3 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
000102B8 00                         M_Newt_Blank:	dc.b 0
000102BA 00                         		even
000102BA 00                         		even
000102BA                            		include	"_incObj\43 Roller.asm"
000102BA                            ; ---------------------------------------------------------------------------
000102BA                            ; Object 43 - Roller enemy (SYZ)
000102BA                            ; ---------------------------------------------------------------------------
000102BA                            
000102BA                            Roller:
000102BA 7000                       		moveq	#0,d0
000102BC 1028 0024                  		move.b	obRoutine(a0),d0
000102C0 323B 0000                  		move.w	Roll_Index(pc,d0.w),d1
000102C4 4EFB 1000                  		jmp	Roll_Index(pc,d1.w)
000102C8                            ; ===========================================================================
000102C8 0000                       Roll_Index:	dc.w Roll_Main-Roll_Index
000102CA 0000                       		dc.w Roll_Action-Roll_Index
000102CC                            ; ===========================================================================
000102CC                            
000102CC                            Roll_Main:	; Routine 0
000102CC 117C 000E 0016             		move.b	#$E,obHeight(a0)
000102D2 117C 0008 0017             		move.b	#8,obWidth(a0)
000102D8 6100 F486                  		bsr.w	ObjectFall
000102DC 4EB9 0000 0000             		jsr	ObjFloorDist
000102E2 4A41                       		tst.w	d1
000102E4 6A00                       		bpl.s	locret_E052
000102E6 D368 000C                  		add.w	d1,obY(a0)	; match	roller's position with the floor
000102EA 317C 0000 0012             		move.w	#0,obVelY(a0)
000102F0 5428 0024                  		addq.b	#2,obRoutine(a0)
000102F4 217C 0000 0000 0004        		move.l	#Map_Roll,obMap(a0)
000102FC 317C 04B8 0002             		move.w	#$4B8,obGfx(a0)
00010302 117C 0004 0001             		move.b	#4,obRender(a0)
00010308 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001030E 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010314                            
00010314                            	locret_E052:
00010314 4E75                       		rts	
00010316                            ; ===========================================================================
00010316                            
00010316                            Roll_Action:	; Routine 2
00010316 7000                       		moveq	#0,d0
00010318 1028 0025                  		move.b	ob2ndRout(a0),d0
0001031C 323B 0000                  		move.w	Roll_Index2(pc,d0.w),d1
00010320 4EBB 1000                  		jsr	Roll_Index2(pc,d1.w)
00010324 43F9 0000 0000             		lea	(Ani_Roll).l,a1
0001032A 6100 C536                  		bsr.w	AnimateSprite
0001032E 3028 0008                  		move.w	obX(a0),d0
00010332 0240 FF80                  		andi.w	#$FF80,d0
00010336 3238 F700                  		move.w	(v_screenposx).w,d1
0001033A 0441 0080                  		subi.w	#$80,d1
0001033E 0241 FF80                  		andi.w	#$FF80,d1
00010342 9041                       		sub.w	d1,d0
00010344 0C40 0280                  		cmpi.w	#$280,d0
00010348 6E00 0000                  		bgt.w	Roll_ChkGone
0001034C 6000 F45E                  		bra.w	DisplaySprite
00010350                            ; ===========================================================================
00010350                            
00010350                            Roll_ChkGone:
00010350 45F8 FC00                  		lea	(v_objstate).w,a2
00010354 7000                       		moveq	#0,d0
00010356 1028 0023                  		move.b	obRespawnNo(a0),d0
0001035A 6700                       		beq.s	Roll_Delete
0001035C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010362                            
00010362                            Roll_Delete:
00010362 6000 F488                  		bra.w	DeleteObject
00010366                            ; ===========================================================================
00010366 0000                       Roll_Index2:	dc.w Roll_RollChk-Roll_Index2
00010368 0000                       		dc.w Roll_RollNoChk-Roll_Index2
0001036A 0000                       		dc.w Roll_ChkJump-Roll_Index2
0001036C 0000                       		dc.w Roll_MatchFloor-Roll_Index2
0001036E                            ; ===========================================================================
0001036E                            
0001036E                            Roll_RollChk:
0001036E 3038 D008                  		move.w	(v_player+obX).w,d0
00010372 0440 0100                  		subi.w	#$100,d0
00010376 6500                       		bcs.s	loc_E0D2
00010378 9068 0008                  		sub.w	obX(a0),d0	; check	distance between Roller	and Sonic
0001037C 6500                       		bcs.s	loc_E0D2
0001037E 5828 0025                  		addq.b	#4,ob2ndRout(a0)
00010382 117C 0002 001C             		move.b	#2,obAnim(a0)
00010388 317C 0700 0010             		move.w	#$700,obVelX(a0) ; move Roller horizontally
0001038E 117C 008E 0020             		move.b	#$8E,obColType(a0) ; make Roller invincible
00010394                            
00010394                            loc_E0D2:
00010394 588F                       		addq.l	#4,sp
00010396 4E75                       		rts	
00010398                            ; ===========================================================================
00010398                            
00010398                            Roll_RollNoChk:
00010398 0C28 0002 001C             		cmpi.b	#2,obAnim(a0)
0001039E 6700                       		beq.s	loc_E0F8
000103A0 5368 0030                  		subq.w	#1,$30(a0)
000103A4 6A00                       		bpl.s	locret_E0F6
000103A6 117C 0001 001C             		move.b	#1,obAnim(a0)
000103AC 317C 0700 0010             		move.w	#$700,obVelX(a0)
000103B2 117C 008E 0020             		move.b	#$8E,obColType(a0)
000103B8                            
000103B8                            locret_E0F6:
000103B8 4E75                       		rts	
000103BA                            ; ===========================================================================
000103BA                            
000103BA                            loc_E0F8:
000103BA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000103BE 4E75                       		rts	
000103C0                            ; ===========================================================================
000103C0                            
000103C0                            Roll_ChkJump:
000103C0 6100 0000                  		bsr.w	Roll_Stop
000103C4 6100 F3D2                  		bsr.w	SpeedToPos
000103C8 4EB9 0000 0000             		jsr	ObjFloorDist
000103CE 0C41 FFF8                  		cmpi.w	#-8,d1
000103D2 6D00                       		blt.s	Roll_Jump
000103D4 0C41 000C                  		cmpi.w	#$C,d1
000103D8 6C00                       		bge.s	Roll_Jump
000103DA D368 000C                  		add.w	d1,obY(a0)
000103DE 4E75                       		rts	
000103E0                            ; ===========================================================================
000103E0                            
000103E0                            Roll_Jump:
000103E0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000103E4 08E8 0000 0032             		bset	#0,$32(a0)
000103EA 6700                       		beq.s	locret_E12E
000103EC 317C FA00 0012             		move.w	#-$600,obVelY(a0)	; move Roller vertically
000103F2                            
000103F2                            locret_E12E:
000103F2 4E75                       		rts	
000103F4                            ; ===========================================================================
000103F4                            
000103F4                            Roll_MatchFloor:
000103F4 6100 F36A                  		bsr.w	ObjectFall
000103F8 4A68 0012                  		tst.w	obVelY(a0)
000103FC 6B00                       		bmi.s	locret_E150
000103FE 4EB9 0000 0000             		jsr	ObjFloorDist
00010404 4A41                       		tst.w	d1
00010406 6A00                       		bpl.s	locret_E150
00010408 D368 000C                  		add.w	d1,obY(a0)	; match	Roller's position with the floor
0001040C 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00010410 317C 0000 0012             		move.w	#0,obVelY(a0)
00010416                            
00010416                            locret_E150:
00010416 4E75                       		rts	
00010418                            
00010418                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010418                            
00010418                            
00010418                            Roll_Stop:
00010418 4A28 0032                  		tst.b	$32(a0)
0001041C 6B00                       		bmi.s	locret_E188
0001041E 3038 D008                  		move.w	(v_player+obX).w,d0
00010422 0440 0030                  		subi.w	#$30,d0
00010426 9068 0008                  		sub.w	obX(a0),d0
0001042A 6400                       		bcc.s	locret_E188
0001042C 117C 0000 001C             		move.b	#0,obAnim(a0)
00010432 117C 000E 0020             		move.b	#$E,obColType(a0)
00010438 4268 0010                  		clr.w	obVelX(a0)
0001043C 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
00010442 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
00010448 08E8 0007 0032             		bset	#7,$32(a0)
0001044E                            
0001044E                            locret_E188:
0001044E 4E75                       		rts	
00010450                            ; End of function Roll_Stop
00010450                            ; End of function Roll_Stop
00010450                            		include	"_anim\Roller.asm"
00010450                            ; ---------------------------------------------------------------------------
00010450                            ; Animation script - Roller enemy
00010450                            ; ---------------------------------------------------------------------------
00010450 0000                       Ani_Roll:	dc.w A_Roll_Unfold-Ani_Roll
00010452 0000                       		dc.w A_Roll_Fold-Ani_Roll
00010454 0000                       		dc.w A_Roll_Roll-Ani_Roll
00010456 0F02 0100 FE01             A_Roll_Unfold:	dc.b $F, 2, 1, 0, afBack, 1
0001045C 0F01 02FD 02               A_Roll_Fold:	dc.b $F, 1, 2, afChange, 2
00010462 00                         		even
00010462 0303 0402 FF               A_Roll_Roll:	dc.b 3,	3, 4, 2, afEnd
00010468 00                         		even
00010468 00                         		even
00010468                            Map_Roll:	include	"_maps\Roller.asm"
00010468                            ; --------------------------------------------------------------------------------
00010468                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010468                            ; --------------------------------------------------------------------------------
00010468                            
00010468                            SME_q3BmU:	
00010468 0000 0000                  		dc.w SME_q3BmU_A-SME_q3BmU, SME_q3BmU_15-SME_q3BmU	
0001046C 0000 0000                  		dc.w SME_q3BmU_20-SME_q3BmU, SME_q3BmU_26-SME_q3BmU	
00010470 0000                       		dc.w SME_q3BmU_2C-SME_q3BmU	
00010472 02                         SME_q3BmU_A:	dc.b 2	
00010473 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0	
00010478 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0	
0001047D 02                         SME_q3BmU_15:	dc.b 2	
0001047E E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
00010483 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0	
00010488 01                         SME_q3BmU_20:	dc.b 1	
00010489 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0	
0001048E 01                         SME_q3BmU_26:	dc.b 1	
0001048F F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0	
00010494 01                         SME_q3BmU_2C:	dc.b 1	
00010495 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0	
0001049A                            		even
0001049A                            		even
0001049A                            
0001049A                            		include	"_incObj\44 GHZ Edge Walls.asm"
0001049A                            ; ---------------------------------------------------------------------------
0001049A                            ; Object 44 - edge walls (GHZ)
0001049A                            ; ---------------------------------------------------------------------------
0001049A                            
0001049A                            EdgeWalls:
0001049A 7000                       		moveq	#0,d0
0001049C 1028 0024                  		move.b	obRoutine(a0),d0
000104A0 323B 0000                  		move.w	Edge_Index(pc,d0.w),d1
000104A4 4EFB 1000                  		jmp	Edge_Index(pc,d1.w)
000104A8                            ; ===========================================================================
000104A8 0000                       Edge_Index:	dc.w Edge_Main-Edge_Index
000104AA 0000                       		dc.w Edge_Solid-Edge_Index
000104AC 0000                       		dc.w Edge_Display-Edge_Index
000104AE                            ; ===========================================================================
000104AE                            
000104AE                            Edge_Main:	; Routine 0
000104AE 5428 0024                  		addq.b	#2,obRoutine(a0)
000104B2 217C 0000 0000 0004        		move.l	#Map_Edge,obMap(a0)
000104BA 317C 434C 0002             		move.w	#$434C,obGfx(a0)
000104C0 0028 0004 0001             		ori.b	#4,obRender(a0)
000104C6 117C 0008 0014             		move.b	#8,obActWid(a0)
000104CC 317C 0300 0018             		move.w	#$300,obPriority(a0)
000104D2 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0) ; copy object type number to frame number
000104D8 08A8 0004 001A             		bclr	#4,obFrame(a0)	; clear	4th bit	(deduct	$10)
000104DE 6700                       		beq.s	Edge_Solid	; make object solid if 4th bit = 0
000104E0 5428 0024                  		addq.b	#2,obRoutine(a0)
000104E4 6000                       		bra.s	Edge_Display	; don't make it solid if 4th bit = 1
000104E6                            ; ===========================================================================
000104E6                            
000104E6                            Edge_Solid:	; Routine 2
000104E6 323C 0013                  		move.w	#$13,d1
000104EA 343C 0028                  		move.w	#$28,d2
000104EE 6100 9FC4                  		bsr.w	Obj44_SolidWall
000104F2                            
000104F2                            Edge_Display:	; Routine 4
000104F2 6100 F2B8                  		bsr.w	DisplaySprite
00010514 4E75                       		rts	
00010514 4E75                       		rts	
00010516                            Map_Edge:	include	"_maps\GHZ Edge Walls.asm"
00010516                            ; ---------------------------------------------------------------------------
00010516                            ; Sprite mappings - walls (GHZ)
00010516                            ; ---------------------------------------------------------------------------
00010516                            Map_Edge_internal:
00010516 0000                       		dc.w M_Edge_Shadow-Map_Edge_internal
00010518 0000                       		dc.w M_Edge_Light-Map_Edge_internal
0001051A 0000                       		dc.w M_Edge_Dark-Map_Edge_internal
0001051C 04                         M_Edge_Shadow:	dc.b 4
0001051D E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8	; light with shadow
00010522 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
00010527 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0001052C 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
00010531 04                         M_Edge_Light:	dc.b 4
00010532 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8	; light with no shadow
00010537 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0001053C 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
00010541 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
00010546 04                         M_Edge_Dark:	dc.b 4
00010547 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8	; all shadow
0001054C F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
00010551 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
00010556 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0001055C 00                         		even
0001055C 00                         		even
0001055C                            
0001055C                            		include	"_incObj\13 Lava Ball Maker.asm"
0001055C                            ; ---------------------------------------------------------------------------
0001055C                            ; Object 13 - lava ball	maker (MZ, SLZ)
0001055C                            ; ---------------------------------------------------------------------------
0001055C                            
0001055C                            LavaMaker:
0001055C 7000                       		moveq	#0,d0
0001055E 1028 0024                  		move.b	obRoutine(a0),d0
00010562 323B 0000                  		move.w	LavaM_Index(pc,d0.w),d1
00010566 4EBB 1000                  		jsr	LavaM_Index(pc,d1.w)
0001056A 6000 0000                  		bra.w	LBall_ChkDel
0001056E                            ; ===========================================================================
0001056E 0000                       LavaM_Index:	dc.w LavaM_Main-LavaM_Index
00010570 0000                       		dc.w LavaM_MakeLava-LavaM_Index
00010572                            ; ---------------------------------------------------------------------------
00010572                            ;
00010572                            ; Lava ball production rates
00010572                            ;
00010572 1E3C 5A78 96B4             LavaM_Rates:	dc.b 30, 60, 90, 120, 150, 180
00010578                            ; ===========================================================================
00010578                            
00010578                            LavaM_Main:	; Routine 0
00010578 5428 0024                  		addq.b	#2,obRoutine(a0)
0001057C 1028 0028                  		move.b	obSubtype(a0),d0
00010580 E848                       		lsr.w	#4,d0
00010582 0240 000F                  		andi.w	#$F,d0
00010586 117B 00EA 001F             		move.b	LavaM_Rates(pc,d0.w),obDelayAni(a0)
0001058C 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; set time delay for lava balls
00010592 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00010598                            
00010598                            LavaM_MakeLava:	; Routine 2
00010598 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from time delay
0001059C 6600                       		bne.s	LavaM_Wait	; if time still	remains, branch
0001059E 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset time delay
000105A4 6100 F594                  		bsr.w	ChkObjectVisible
000105A8 6600                       		bne.s	LavaM_Wait
000105AA 6100 F79A                  		bsr.w	FindFreeObj
000105AE 6600                       		bne.s	LavaM_Wait
000105B0 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
000105B4 3368 0008 0008             		move.w	obX(a0),obX(a1)
000105BA 3368 000C 000C             		move.w	obY(a0),obY(a1)
000105C0 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
000105C6                            
000105C6                            	LavaM_Wait:
000105C6 4E75                       		rts	
000105C6 4E75                       		rts	
000105C8                            		include	"_incObj\14 Lava Ball.asm"
000105C8                            ; ---------------------------------------------------------------------------
000105C8                            ; Object 14 - lava balls (MZ, SLZ)
000105C8                            ; ---------------------------------------------------------------------------
000105C8                            
000105C8                            LavaBall:
000105C8 7000                       		moveq	#0,d0
000105CA 1028 0024                  		move.b	obRoutine(a0),d0
000105CE 323B 0000                  		move.w	LBall_Index(pc,d0.w),d1
000105D2 4EBB 1000                  		jsr	LBall_Index(pc,d1.w)
000105D6 6000 F1D4                  		bra.w	DisplaySprite
000105DA                            ; ===========================================================================
000105DA 0000                       LBall_Index:	dc.w LBall_Main-LBall_Index
000105DC 0000                       		dc.w LBall_Action-LBall_Index
000105DE 0000                       		dc.w LBall_Delete-LBall_Index
000105E0                            
000105E0 FC00 FB00 FA00 F900 FE00   LBall_Speeds:	dc.w -$400, -$500, -$600, -$700, -$200
000105EA 0200 FE00 0200 0000        		dc.w $200, -$200, $200,	0
000105F2                            ; ===========================================================================
000105F2                            
000105F2                            LBall_Main:	; Routine 0
000105F2 5428 0024                  		addq.b	#2,obRoutine(a0)
000105F6 117C 0008 0016             		move.b	#8,obHeight(a0)
000105FC 117C 0008 0017             		move.b	#8,obWidth(a0)
00010602 217C 0000 D4B4 0004        		move.l	#Map_Fire,obMap(a0)
0001060A 317C 0345 0002             		move.w	#$345,obGfx(a0)
00010610 0C38 0003 FE10             		cmpi.b	#3,(v_zone).w	; check if level is SLZ
00010616 6600                       		bne.s	@notSLZ
00010618 317C 0480 0002             		move.w	#$480,obGfx(a0)	; SLZ specific code
0001061E                            
0001061E                            	@notSLZ:
0001061E 117C 0004 0001             		move.b	#4,obRender(a0)
00010624 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001062A 117C 008B 0020             		move.b	#$8B,obColType(a0)
00010630 3168 000C 0030             		move.w	obY(a0),$30(a0)
00010636 4A28 0029                  		tst.b	$29(a0)
0001063A 6700                       		beq.s	@speed
0001063C 5428 0018                  		addq.b	#2,obPriority(a0)
00010640                            
00010640                            	@speed:
00010640 7000                       		moveq	#0,d0
00010642 1028 0028                  		move.b	obSubtype(a0),d0
00010646 D040                       		add.w	d0,d0
00010648 317B 0096 0012             		move.w	LBall_Speeds(pc,d0.w),obVelY(a0) ; load object speed (vertical)
0001064E 117C 0008 0014             		move.b	#8,obActWid(a0)
00010654 0C28 0006 0028             		cmpi.b	#6,obSubtype(a0) ; is object type below $6 ?
0001065A 6500                       		bcs.s	@sound		; if yes, branch
0001065C                            
0001065C 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010662 117C 0002 001C             		move.b	#2,obAnim(a0)	; use horizontal animation
00010668 3168 0012 0010             		move.w	obVelY(a0),obVelX(a0) ; set horizontal speed
0001066E 317C 0000 0012             		move.w	#0,obVelY(a0)	; delete vertical speed
00010674                            
00010674                            	@sound:
0001067E                            
0001067E                            LBall_Action:	; Routine 2
0001067E 7000                       		moveq	#0,d0
00010680 1028 0028                  		move.b	obSubtype(a0),d0
00010684 D040                       		add.w	d0,d0
00010686 323B 0000                  		move.w	LBall_TypeIndex(pc,d0.w),d1
0001068A 4EBB 1000                  		jsr	LBall_TypeIndex(pc,d1.w)
0001068E 6100 F108                  		bsr.w	SpeedToPos
00010692 43F9 0000 0000             		lea	(Ani_Fire).l,a1
00010698 6100 C1C8                  		bsr.w	AnimateSprite
0001069C                            
0001069C                            LBall_ChkDel:
000106BA 4E75                       		rts	
000106BC                            ; ===========================================================================
000106BC 0000 0000                  LBall_TypeIndex:dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
000106C0 0000 0000                  		dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
000106C4 0000 0000                  		dc.w LBall_Type04-LBall_TypeIndex, LBall_Type05-LBall_TypeIndex
000106C8 0000 0000                  		dc.w LBall_Type06-LBall_TypeIndex, LBall_Type07-LBall_TypeIndex
000106CC 0000                       		dc.w LBall_Type08-LBall_TypeIndex
000106CE                            ; ===========================================================================
000106CE                            ; lavaball types 00-03 fly up and fall back down
000106CE                            
000106CE                            LBall_Type00:
000106CE 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's downward speed
000106D4 3028 0030                  		move.w	$30(a0),d0
000106D8 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen back to its	original position?
000106DC 6400                       		bcc.s	loc_E41E	; if not, branch
000106DE 5428 0024                  		addq.b	#2,obRoutine(a0)	; goto "LBall_Delete" routine
000106E2                            
000106E2                            loc_E41E:
000106E2 08A8 0001 0022             		bclr	#1,obStatus(a0)
000106E8 4A68 0012                  		tst.w	obVelY(a0)
000106EC 6A00                       		bpl.s	locret_E430
000106EE 08E8 0001 0022             		bset	#1,obStatus(a0)
000106F4                            
000106F4                            locret_E430:
000106F4 4E75                       		rts	
000106F6                            ; ===========================================================================
000106F6                            ; lavaball type	04 flies up until it hits the ceiling
000106F6                            
000106F6                            LBall_Type04:
000106F6 08E8 0001 0022             		bset	#1,obStatus(a0)
000106FC 4EB9 0000 0000             		jsr	ObjHitCeiling
00010702 4A41                       		tst.w	d1
00010704 6A00                       		bpl.s	locret_E452
00010706 117C 0008 0028             		move.b	#8,obSubtype(a0)
0001070C 117C 0001 001C             		move.b	#1,obAnim(a0)
00010712 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the ceiling
00010718                            
00010718                            locret_E452:
00010718 4E75                       		rts	
0001071A                            ; ===========================================================================
0001071A                            ; lavaball type	05 falls down until it hits the	floor
0001071A                            
0001071A                            LBall_Type05:
0001071A 08A8 0001 0022             		bclr	#1,obStatus(a0)
00010720 4EB9 0000 0000             		jsr	ObjFloorDist
00010726 4A41                       		tst.w	d1
00010728 6A00                       		bpl.s	locret_E474
0001072A 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010730 117C 0001 001C             		move.b	#1,obAnim(a0)
00010736 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the floor
0001073C                            
0001073C                            locret_E474:
0001073C 4E75                       		rts	
0001073E                            ; ===========================================================================
0001073E                            ; lavaball types 06-07 move sideways
0001073E                            
0001073E                            LBall_Type06:
0001073E 08E8 0000 0022             		bset	#0,obStatus(a0)
00010744 76F8                       		moveq	#-8,d3
00010746 4EB9 0000 0000             		jsr	ObjHitWallLeft
0001074C 4A41                       		tst.w	d1
0001074E 6A00                       		bpl.s	locret_E498
00010750 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010756 117C 0003 001C             		move.b	#3,obAnim(a0)
0001075C 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
00010762                            
00010762                            locret_E498:
00010762 4E75                       		rts	
00010764                            ; ===========================================================================
00010764                            
00010764                            LBall_Type07:
00010764 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001076A 7608                       		moveq	#8,d3
0001076C 4EB9 0000 0000             		jsr	ObjHitWallRight
00010772 4A41                       		tst.w	d1
00010774 6A00                       		bpl.s	locret_E4BC
00010776 117C 0008 0028             		move.b	#8,obSubtype(a0)
0001077C 117C 0003 001C             		move.b	#3,obAnim(a0)
00010782 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
00010788                            
00010788                            locret_E4BC:
00010788 4E75                       		rts	
0001078A                            ; ===========================================================================
0001078A                            
0001078A                            LBall_Type08:
0001078A 4E75                       		rts	
0001078C                            ; ===========================================================================
0001078C                            
0001078C                            LBall_Delete:
0001078C 6000 F05E                  		bra.w	DeleteObject
0001078C 6000 F05E                  		bra.w	DeleteObject
00010790                            		include	"_anim\Fireballs.asm"
00010790                            ; ---------------------------------------------------------------------------
00010790                            ; Animation script - lava balls
00010790                            ; ---------------------------------------------------------------------------
00010790 0000                       Ani_Fire:	dc.w @vertical-Ani_Fire
00010792 0000                       		dc.w @vertcollide-Ani_Fire
00010794 0000                       		dc.w @horizontal-Ani_Fire
00010796 0000                       		dc.w @horicollide-Ani_Fire
00010798 0500 2001 21FF             @vertical:	dc.b 5,	0, $20,	1, $21,	afEnd
0001079E 0502 FC                    @vertcollide:	dc.b 5,	2, afRoutine
000107A2 00                         		even
000107A2 0503 4304 44FF             @horizontal:	dc.b 5,	3, $43,	4, $44,	afEnd
000107A8 0505 FC                    @horicollide:	dc.b 5,	5, afRoutine
000107AC 00                         		even
000107AC 00                         		even
000107AC                            
000107AC                            		include	"_incObj\6D Flamethrower.asm"
000107AC                            ; ---------------------------------------------------------------------------
000107AC                            ; Object 6D - flame thrower (SBZ)
000107AC                            ; ---------------------------------------------------------------------------
000107AC                            
000107AC                            Flamethrower:
000107AC 7000                       		moveq	#0,d0
000107AE 1028 0024                  		move.b	obRoutine(a0),d0
000107B2 323B 0000                  		move.w	Flame_Index(pc,d0.w),d1
000107B6 4EFB 1000                  		jmp	Flame_Index(pc,d1.w)
000107BA                            ; ===========================================================================
000107BA 0000                       Flame_Index:	dc.w Flame_Main-Flame_Index
000107BC 0000                       		dc.w Flame_Action-Flame_Index
000107BE                            ; ===========================================================================
000107BE                            
000107BE                            Flame_Main:	; Routine 0
000107BE 5428 0024                  		addq.b	#2,obRoutine(a0)
000107C2 217C 0000 0000 0004        		move.l	#Map_Flame,obMap(a0)
000107CA 317C 83D9 0002             		move.w	#$83D9,obGfx(a0)
000107D0 0028 0004 0001             		ori.b	#4,obRender(a0)
000107D6 317C 0080 0018             		move.w	#$80,obPriority(a0)
000107DC 3168 000C 0030             		move.w	obY(a0),$30(a0)	; store obY (gets overwritten later though)
000107E2 117C 000C 0014             		move.b	#$C,obActWid(a0)
000107E8 1028 0028                  		move.b	obSubtype(a0),d0
000107EC 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
000107F0 D040                       		add.w	d0,d0		; multiply by 2
000107F2 3140 0030                  		move.w	d0,$30(a0)
000107F6 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
000107FA 1028 0028                  		move.b	obSubtype(a0),d0
000107FE 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
00010802 EB48                       		lsl.w	#5,d0		; multiply by $20
00010804 3140 0034                  		move.w	d0,$34(a0)	; set pause time
00010808 117C 000A 0036             		move.b	#$A,$36(a0)
0001080E 0828 0001 0022             		btst	#1,obStatus(a0)
00010814 6700                       		beq.s	Flame_Action
00010816 117C 0002 001C             		move.b	#2,obAnim(a0)
0001081C 117C 0015 0036             		move.b	#$15,$36(a0)
00010822                            
00010822                            Flame_Action:	; Routine 2
00010822 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00010826 6A00                       		bpl.s	loc_E57A	; if time remains, branch
00010828 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0001082E 0868 0000 001C             		bchg	#0,obAnim(a0)
00010834 6700                       		beq.s	loc_E57A
00010836 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
00010846                            
00010846                            loc_E57A:
00010846 43F9 0000 0000             		lea	(Ani_Flame).l,a1
0001084C 6100 C014                  		bsr.w	AnimateSprite
00010850 117C 0000 0020             		move.b	#0,obColType(a0)
00010856 1028 0036                  		move.b	$36(a0),d0
0001085A B028 001A                  		cmp.b	obFrame(a0),d0
0001085E 6600                       		bne.s	Flame_ChkDel
00010860 117C 00A3 0020             		move.b	#$A3,obColType(a0)
00010866                            
00010866                            Flame_ChkDel:
00010884 6000 EF26                  		bra.w	DisplaySprite
00010884 6000 EF26                  		bra.w	DisplaySprite
00010888                            		include	"_anim\Flamethrower.asm"
00010888                            ; ---------------------------------------------------------------------------
00010888                            ; Animation script - flamethrower (SBZ)
00010888                            ; ---------------------------------------------------------------------------
00010888 0000                       Ani_Flame:	dc.w @pipe1-Ani_Flame
0001088A 0000                       		dc.w @pipe2-Ani_Flame
0001088C 0000                       		dc.w @valve1-Ani_Flame
0001088E 0000                       		dc.w @valve2-Ani_Flame
00010890 0300 0102 0304 0506 0708+  @pipe1:		dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, afBack, 2
0001089E 0009 0705 0301 00FE 01     @pipe2:		dc.b 0,	9, 7, 5, 3, 1, 0, afBack, 1
000108A8 00                         		even
000108A8 030B 0C0D 0E0F 1011 1213+  @valve1:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, afBack, 2
000108B6 0014 1211 0F0D 0BFE 01     @valve2:	dc.b 0,	$14, $12, $11, $F, $D, $B, afBack, 1
000108C0 00                         		even
000108C0 00                         		even
000108C0                            Map_Flame:	include	"_maps\Flamethrower.asm"
000108C0                            ; ---------------------------------------------------------------------------
000108C0                            ; Sprite mappings - flame thrower (SBZ)
000108C0                            ; ---------------------------------------------------------------------------
000108C0                            Map_Flame_internal:
000108C0 0000                       		dc.w @pipe1-Map_Flame_internal
000108C2 0000                       		dc.w @pipe2-Map_Flame_internal
000108C4 0000                       		dc.w @pipe3-Map_Flame_internal
000108C6 0000                       		dc.w @pipe4-Map_Flame_internal
000108C8 0000                       		dc.w @pipe5-Map_Flame_internal
000108CA 0000                       		dc.w @pipe6-Map_Flame_internal
000108CC 0000                       		dc.w @pipe7-Map_Flame_internal
000108CE 0000                       		dc.w @pipe8-Map_Flame_internal
000108D0 0000                       		dc.w @pipe9-Map_Flame_internal
000108D2 0000                       		dc.w @pipe10-Map_Flame_internal
000108D4 0000                       		dc.w @pipe11-Map_Flame_internal
000108D6 0000                       		dc.w @valve1-Map_Flame_internal
000108D8 0000                       		dc.w @valve2-Map_Flame_internal
000108DA 0000                       		dc.w @valve3-Map_Flame_internal
000108DC 0000                       		dc.w @valve4-Map_Flame_internal
000108DE 0000                       		dc.w @valve5-Map_Flame_internal
000108E0 0000                       		dc.w @valve6-Map_Flame_internal
000108E2 0000                       		dc.w @valve7-Map_Flame_internal
000108E4 0000                       		dc.w @valve8-Map_Flame_internal
000108E6 0000                       		dc.w @valve9-Map_Flame_internal
000108E8 0000                       		dc.w @valve10-Map_Flame_internal
000108EA 0000                       		dc.w @valve11-Map_Flame_internal
000108EC 01                         @pipe1:		dc.b 1
000108ED 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB ; broken pipe style flamethrower
000108F2 02                         @pipe2:		dc.b 2
000108F3 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000108F8 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000108FD 02                         @pipe3:		dc.b 2
000108FE 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010903 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010908 03                         @pipe4:		dc.b 3
00010909 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001090E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010913 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010918 03                         @pipe5:		dc.b 3
00010919 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001091E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010923 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010928 04                         @pipe6:		dc.b 4
00010929 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001092E 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010933 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010938 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001093D 04                         @pipe7:		dc.b 4
0001093E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010943 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010948 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001094D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010952 05                         @pipe8:		dc.b 5
00010953 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010958 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001095D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010962 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010967 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001096C 05                         @pipe9:		dc.b 5
0001096D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010972 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010977 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001097C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010981 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010986 06                         @pipe10:	dc.b 6
00010987 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0001098C F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010991 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010996 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0001099B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000109A0 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109A5 06                         @pipe11:	dc.b 6
000109A6 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
000109AB F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000109B0 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
000109B5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000109BA 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000109BF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109C4 01                         @valve1:	dc.b 1
000109C5 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9 ; valve style flamethrower
000109CA 02                         @valve2:	dc.b 2
000109CB 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000109D0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000109D5 02                         @valve3:	dc.b 2
000109D6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000109DB 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000109E0 03                         @valve4:	dc.b 3
000109E1 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000109E6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000109EB 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000109F0 03                         @valve5:	dc.b 3
000109F1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000109F6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000109FB 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A00 04                         @valve6:	dc.b 4
00010A01 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010A06 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010A0B 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A10 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A15 04                         @valve7:	dc.b 4
00010A16 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010A1B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010A20 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A25 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A2A 05                         @valve8:	dc.b 5
00010A2B F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010A30 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010A35 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010A3A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A3F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A44 05                         @valve9:	dc.b 5
00010A45 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010A4A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010A4F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010A54 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A59 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A5E 06                         @valve10:	dc.b 6
00010A5F E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010A64 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010A69 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010A6E 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010A73 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A78 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A7D 06                         @valve11:	dc.b 6
00010A7E E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010A83 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010A88 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010A8D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010A92 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A97 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A9C                            		even
00010A9C                            		even
00010A9C                            
00010A9C                            		include	"_incObj\46 MZ Bricks.asm"
00010A9C                            ; ---------------------------------------------------------------------------
00010A9C                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
00010A9C                            ; ---------------------------------------------------------------------------
00010A9C                            
00010A9C                            MarbleBrick:
00010A9C 7000                       		moveq	#0,d0
00010A9E 1028 0024                  		move.b	obRoutine(a0),d0
00010AA2 323B 0000                  		move.w	Brick_Index(pc,d0.w),d1
00010AA6 4EFB 1000                  		jmp	Brick_Index(pc,d1.w)
00010AAA                            ; ===========================================================================
00010AAA 0000                       Brick_Index:	dc.w Brick_Main-Brick_Index
00010AAC 0000                       		dc.w Brick_Action-Brick_Index
00010AAE                            
00010AAE =00000030                  brick_origY:	equ $30
00010AAE                            ; ===========================================================================
00010AAE                            
00010AAE                            Brick_Main:	; Routine 0
00010AAE 5428 0024                  		addq.b	#2,obRoutine(a0)
00010AB2 117C 000F 0016             		move.b	#$F,obHeight(a0)
00010AB8 117C 000F 0017             		move.b	#$F,obWidth(a0)
00010ABE 217C 0000 0000 0004        		move.l	#Map_Brick,obMap(a0)
00010AC6 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00010ACC 117C 0004 0001             		move.b	#4,obRender(a0)
00010AD2 317C 0180 0018             		move.w	#$180,obPriority(a0)
00010AD8 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010ADE 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010AE4 317C 05C0 0032             		move.w	#$5C0,$32(a0)
00010AEA                            
00010AEA                            Brick_Action:	; Routine 2
00010AEA 4A28 0001                  		tst.b	obRender(a0)
00010AEE 6A00                       		bpl.s	@chkdel
00010AF0 7000                       		moveq	#0,d0
00010AF2 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00010AF6 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
00010AFA D040                       		add.w	d0,d0
00010AFC 323B 0000                  		move.w	Brick_TypeIndex(pc,d0.w),d1
00010B00 4EBB 1000                  		jsr	Brick_TypeIndex(pc,d1.w)
00010B04 323C 001B                  		move.w	#$1B,d1
00010B08 343C 0010                  		move.w	#$10,d2
00010B0C 363C 0011                  		move.w	#$11,d3
00010B10 3828 0008                  		move.w	obX(a0),d4
00010B14 6100 0000                  		bsr.w	SolidObject
00010B18                            
00010B18                            	@chkdel:
00010B36 6000 EC74                  			bra.w	DisplaySprite
00010B3A                            ; ===========================================================================
00010B3A 0000                       Brick_TypeIndex:dc.w Brick_Type00-Brick_TypeIndex
00010B3C 0000                       		dc.w Brick_Type01-Brick_TypeIndex
00010B3E 0000                       		dc.w Brick_Type02-Brick_TypeIndex
00010B40 0000                       		dc.w Brick_Type03-Brick_TypeIndex
00010B42 0000                       		dc.w Brick_Type04-Brick_TypeIndex
00010B44                            ; ===========================================================================
00010B44                            
00010B44                            Brick_Type00:
00010B44 4E75                       		rts	
00010B46                            ; ===========================================================================
00010B46                            
00010B46                            Brick_Type02:
00010B46 3038 D008                  		move.w	(v_player+obX).w,d0
00010B4A 9068 0008                  		sub.w	obX(a0),d0
00010B4E 6400                       		bcc.s	loc_E888
00010B50 4440                       		neg.w	d0
00010B52                            
00010B52                            loc_E888:
00010B52 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00010B56 6400                       		bcc.s	Brick_Type01	; if not, resume wobbling
00010B58 117C 0003 0028             		move.b	#3,obSubtype(a0)	; if yes, make the block fall
00010B5E                            
00010B5E                            Brick_Type01:
00010B5E 7000                       		moveq	#0,d0
00010B60 1038 FE74                  		move.b	(v_oscillate+$16).w,d0
00010B64 0828 0003 0028             		btst	#3,obSubtype(a0)
00010B6A 6700                       		beq.s	loc_E8A8
00010B6C 4440                       		neg.w	d0
00010B6E 0640 0010                  		addi.w	#$10,d0
00010B72                            
00010B72                            loc_E8A8:
00010B72 3228 0030                  		move.w	brick_origY(a0),d1
00010B76 9240                       		sub.w	d0,d1
00010B78 3141 000C                  		move.w	d1,obY(a0)	; update the block's position to make it wobble
00010B7C 4E75                       		rts	
00010B7E                            ; ===========================================================================
00010B7E                            
00010B7E                            Brick_Type03:
00010B7E 6100 EC18                  		bsr.w	SpeedToPos
00010B82 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase falling speed
00010B88 6100 0000                  		bsr.w	ObjFloorDist
00010B8C 4A41                       		tst.w	d1		; has the block	hit the	floor?
00010B8E 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00010B92 D368 000C                  		add.w	d1,obY(a0)
00010B96 4268 0012                  		clr.w	obVelY(a0)	; stop the block falling
00010B9A 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010BA0 117C 0004 0028             		move.b	#4,obSubtype(a0)
00010BA6 3011                       		move.w	(a1),d0
00010BA8 0240 03FF                  		andi.w	#$3FF,d0
00010BAC 0C40 016A                  			cmpi.w	#$16A,d0
00010BB0 6400                       		bcc.s	locret_E8EE
00010BB2 117C 0000 0028             		move.b	#0,obSubtype(a0)
00010BB8                            
00010BB8                            locret_E8EE:
00010BB8 4E75                       		rts	
00010BBA                            ; ===========================================================================
00010BBA                            
00010BBA                            Brick_Type04:
00010BBA 7000                       		moveq	#0,d0
00010BBC 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
00010BC0 E648                       		lsr.w	#3,d0
00010BC2 3228 0030                  		move.w	brick_origY(a0),d1
00010BC6 9240                       		sub.w	d0,d1
00010BC8 3141 000C                  		move.w	d1,obY(a0)	; make the block wobble
00010BCC 4E75                       		rts	
00010BCC 4E75                       		rts	
00010BCE                            Map_Brick:	include	"_maps\MZ Bricks.asm"
00010BCE                            ; ---------------------------------------------------------------------------
00010BCE                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
00010BCE                            ; ---------------------------------------------------------------------------
00010BCE                            Map_Brick_internal:
00010BCE 0000                       		dc.w @brick-Map_Brick_internal
00010BD0 01                         @brick:		dc.b 1
00010BD1 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00010BD6                            		even
00010BD6                            		even
00010BD6                            
00010BD6                            		include	"_incObj\12 Light.asm"
00010BD6                            ; ---------------------------------------------------------------------------
00010BD6                            ; Object 12 - lamp (SYZ)
00010BD6                            ; ---------------------------------------------------------------------------
00010BD6                            
00010BD6                            SpinningLight:
00010BD6 7000                       		moveq	#0,d0
00010BD8 1028 0024                  		move.b	obRoutine(a0),d0
00010BDC 323B 0000                  		move.w	Light_Index(pc,d0.w),d1
00010BE0 4EFB 1000                  		jmp	Light_Index(pc,d1.w)
00010BE4                            ; ===========================================================================
00010BE4 0000                       Light_Index:	dc.w Light_Main-Light_Index
00010BE6 0000                       		dc.w Light_Animate-Light_Index
00010BE8                            ; ===========================================================================
00010BE8                            
00010BE8                            Light_Main:	; Routine 0
00010BE8 5428 0024                  		addq.b	#2,obRoutine(a0)
00010BEC 217C 0000 0000 0004        		move.l	#Map_Light,obMap(a0)
00010BF4 317C 0000 0002             		move.w	#0,obGfx(a0)
00010BFA 117C 0004 0001             		move.b	#4,obRender(a0)
00010C00 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010C06 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010C0C                            
00010C0C                            Light_Animate:	; Routine 2
00010C0C 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00010C10 6A00                       		bpl.s	@chkdel
00010C12 117C 000C 001E             		move.b	#12,obTimeFrame(a0)
00010C18 5228 001A                  		addq.b	#1,obFrame(a0)
00010C1C 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
00010C22 6500                       		bcs.s	@chkdel
00010C24 117C 0000 001A             		move.b	#0,obFrame(a0)
00010C2A                            
00010C2A                            	@chkdel:
00010C48 6000 EB62                  		bra.w	DisplaySprite
00010C48 6000 EB62                  		bra.w	DisplaySprite
00010C4C                            Map_Light	include	"_maps\Light.asm"
00010C4C                            ; --------------------------------------------------------------------------------
00010C4C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010C4C                            ; --------------------------------------------------------------------------------
00010C4C                            
00010C4C                            SME_FBl1X:	
00010C4C 0000 0000                  		dc.w SME_FBl1X_8-SME_FBl1X, SME_FBl1X_22-SME_FBl1X	
00010C50 0000 0000                  		dc.w SME_FBl1X_3C-SME_FBl1X, SME_FBl1X_5B-SME_FBl1X	
00010C54 05                         SME_FBl1X_8:	dc.b 5	
00010C55 E004 006D 00               		dc.b $E0, 4, 0, $6D, 0	
00010C5A E80C 006F F8               		dc.b $E8, $C, 0, $6F, $F8	
00010C5F F00C 0073 F8               		dc.b $F0, $C, 0, $73, $F8	
00010C64 F800 0090 00               		dc.b $F8, 0, 0, $90, 0	
00010C69 F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010C6E 05                         SME_FBl1X_22:	dc.b 5	
00010C6F E004 0077 00               		dc.b $E0, 4, 0, $77, 0	
00010C74 E804 0079 00               		dc.b $E8, 4, 0, $79, 0	
00010C79 E800 007B 10               		dc.b $E8, 0, 0, $7B, $10	
00010C7E F008 007C F8               		dc.b $F0, 8, 0, $7C, $F8	
00010C83 F804 0091 00               		dc.b $F8, 4, 0, $91, 0	
00010C88 06                         SME_FBl1X_3C:	dc.b 6	
00010C89 E000 007F 00               		dc.b $E0, 0, 0, $7F, 0	
00010C8E E000 0078 08               		dc.b $E0, 0, 0, $78, 8	
00010C93 E80C 0080 F8               		dc.b $E8, $C, 0, $80, $F8	
00010C98 F00C 0084 F8               		dc.b $F0, $C, 0, $84, $F8	
00010C9D F800 0093 08               		dc.b $F8, 0, 0, $93, 8	
00010CA2 F800 0091 00               		dc.b $F8, 0, 0, $91, 0	
00010CA7 05                         SME_FBl1X_5B:	dc.b 5	
00010CA8 E004 0088 00               		dc.b $E0, 4, 0, $88, 0	
00010CAD E808 008A F8               		dc.b $E8, 8, 0, $8A, $F8	
00010CB2 F008 008D 00               		dc.b $F0, 8, 0, $8D, 0	
00010CB7 F800 0094 00               		dc.b $F8, 0, 0, $94, 0	
00010CBC F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010CC2 00                         		even
00010CC2 00                         		even
00010CC2                            		include	"_incObj\47 Bumper.asm"
00010CC2                            ; ---------------------------------------------------------------------------
00010CC2                            ; Object 47 - pinball bumper (SYZ)
00010CC2                            ; ---------------------------------------------------------------------------
00010CC2                            
00010CC2                            Bumper:
00010CC2 7000                       		moveq	#0,d0
00010CC4 1028 0024                  		move.b	obRoutine(a0),d0
00010CC8 323B 0000                  		move.w	Bump_Index(pc,d0.w),d1
00010CCC 4EFB 1000                  		jmp	Bump_Index(pc,d1.w)
00010CD0                            ; ===========================================================================
00010CD0 0000                       Bump_Index:	dc.w Bump_Main-Bump_Index
00010CD2 0000                       		dc.w Bump_Hit-Bump_Index
00010CD4                            ; ===========================================================================
00010CD4                            
00010CD4                            Bump_Main:	; Routine 0
00010CD4 5428 0024                  		addq.b	#2,obRoutine(a0)
00010CD8 217C 0000 0000 0004        		move.l	#Map_Bump,obMap(a0)
00010CE0 317C 0380 0002             		move.w	#$380,obGfx(a0)
00010CE6 117C 0004 0001             		move.b	#4,obRender(a0)
00010CEC 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010CF2 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010CF8 117C 00D7 0020             		move.b	#$D7,obColType(a0)
00010CFE                            
00010CFE                            Bump_Hit:	; Routine 2
00010CFE 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	bumper?
00010D02 6700 0000                  		beq.w	@display	; if not, branch
00010D06 4228 0021                  		clr.b	obColProp(a0)
00010D0A 43F8 D000                  		lea	(v_player).w,a1
00010D0E 3228 0008                  		move.w	obX(a0),d1
00010D12 3428 000C                  		move.w	obY(a0),d2
00010D16 9269 0008                  		sub.w	obX(a1),d1
00010D1A 9469 000C                  		sub.w	obY(a1),d2
00010D1E 4EB9 0000 3F5C             		jsr	(CalcAngle).l
00010D24 4EB9 0000 3CCA             		jsr	(CalcSine).l
00010D2A C3FC F900                  		muls.w	#-$700,d1
00010D2E E081                       		asr.l	#8,d1
00010D30 3341 0010                  		move.w	d1,obVelX(a1)	; bounce Sonic away
00010D34 C1FC F900                  		muls.w	#-$700,d0
00010D38 E080                       		asr.l	#8,d0
00010D3A 3340 0012                  		move.w	d0,obVelY(a1)	; bounce Sonic away
00010D3E 08E9 0001 0022             		bset	#1,obStatus(a1)
00010D44 08A9 0004 0022             		bclr	#4,obStatus(a1)
00010D4A 08A9 0005 0022             		bclr	#5,obStatus(a1)
00010D50 4229 003C                  		clr.b	$3C(a1)
00010D54 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "hit" animation
00010D64 45F8 FC00                  		lea	(v_objstate).w,a2
00010D68 7000                       		moveq	#0,d0
00010D6A 1028 0023                  		move.b	obRespawnNo(a0),d0
00010D6E 6700                       		beq.s	@addscore
00010D70 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit 10 times?
00010D76 6400                       		bcc.s	@display	; if yes, Sonic	gets no	points
00010D78 5232 0002                  		addq.b	#1,2(a2,d0.w)
00010D7C                            
00010D7C                            	@addscore:
00010D7C 7001                       		moveq	#1,d0
00010D7E 4EB9 0000 0000             		jsr	(AddPoints).l	; add 10 to score
00010D84 6100 EFC0                  		bsr.w	FindFreeObj
00010D88 6600                       		bne.s	@display
00010D8A 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00010D8E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010D94 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010D9A 137C 0004 001A             		move.b	#4,obFrame(a1)
00010DA0                            
00010DA0                            	@display:
00010DA0 43F9 0000 0000             		lea	(Ani_Bump).l,a1
00010DA6 6100 BABA                  		bsr.w	AnimateSprite
00010DC6 6000 E9E4                  		bra.w	DisplaySprite
00010DCA                            ; ===========================================================================
00010DCA                            
00010DCA                            @resetcount:
00010DCA 45F8 FC00                  		lea	(v_objstate).w,a2
00010DCE 7000                       		moveq	#0,d0
00010DD0 1028 0023                  		move.b	obRespawnNo(a0),d0
00010DD4 6700                       		beq.s	@delete
00010DD6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010DDC                            
00010DDC                            	@delete:
00010DDC 6000 EA0E                  		bra.w	DeleteObject
00010DDC 6000 EA0E                  		bra.w	DeleteObject
00010DE0                            		include	"_anim\Bumper.asm"
00010DE0                            ; ---------------------------------------------------------------------------
00010DE0                            ; Animation script - flamethrower (SBZ)
00010DE0                            ; ---------------------------------------------------------------------------
00010DE0 0000                       Ani_Bump:	dc.w byte_EAF4-Ani_Bump
00010DE2 0000                       		dc.w byte_EAF8-Ani_Bump
00010DE4 0F00 FF                    byte_EAF4:	dc.b $F, 0, afEnd
00010DE8 00                         		even
00010DE8 0301 0201 02FD 00          byte_EAF8:	dc.b 3,	1, 2, 1, 2, afChange, 0
00010DF0 00                         		even
00010DF0 00                         		even
00010DF0                            Map_Bump:	include	"_maps\Bumper.asm"
00010DF0                            ; ---------------------------------------------------------------------------
00010DF0                            ; Sprite mappings - pinball bumper (SYZ)
00010DF0                            ; ---------------------------------------------------------------------------
00010DF0                            Map_Bump_internal:
00010DF0 0000                       		dc.w @normal-Map_Bump_internal
00010DF2 0000                       		dc.w @bumped1-Map_Bump_internal
00010DF4 0000                       		dc.w @bumped2-Map_Bump_internal
00010DF6 02                         @normal:	dc.b 2
00010DF7 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00010DFC F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00010E01 02                         @bumped1:	dc.b 2
00010E02 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
00010E07 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
00010E0C 02                         @bumped2:	dc.b 2
00010E0D F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00010E12 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
00010E18 00                         		even
00010E18 00                         		even
00010E18                            
00010E18                            		include	"_incObj\0D Signpost.asm" ; includes "GotThroughAct" subroutine
00010E18                            ; ---------------------------------------------------------------------------
00010E18                            ; Object 0D - signpost at the end of a level
00010E18                            ; ---------------------------------------------------------------------------
00010E18                            
00010E18                            Signpost:
00010E18 7000                       		moveq	#0,d0
00010E1A 1028 0024                  		move.b	obRoutine(a0),d0
00010E1E 323B 0000                  		move.w	Sign_Index(pc,d0.w),d1
00010E22 4EBB 1000                  		jsr	Sign_Index(pc,d1.w)
00010E26 43F9 0000 0000             		lea	(Ani_Sign).l,a1
00010E2C 6100 BA34                  		bsr.w	AnimateSprite
00010E30 6100 E97A                  		bsr.w	DisplaySprite
00010E52 4E75                       		rts	
00010E54                            ; ===========================================================================
00010E54 0000                       Sign_Index:	dc.w Sign_Main-Sign_Index
00010E56 0000                       		dc.w Sign_Touch-Sign_Index
00010E58 0000                       		dc.w Sign_Spin-Sign_Index
00010E5A 0000                       		dc.w Sign_SonicRun-Sign_Index
00010E5C 0000                       		dc.w Sign_Exit-Sign_Index
00010E5E                            
00010E5E =00000030                  spintime:	equ $30		; time for signpost to spin
00010E5E =00000032                  sparkletime:	equ $32		; time between sparkles
00010E5E =00000034                  sparkle_id:	equ $34		; counter to keep track of sparkles
00010E5E                            ; ===========================================================================
00010E5E                            
00010E5E                            Sign_Main:	; Routine 0
00010E5E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010E62 217C 0000 0000 0004        		move.l	#Map_Sign,obMap(a0)
00010E6A 317C 0680 0002             		move.w	#$680,obGfx(a0)
00010E70 117C 0004 0001             		move.b	#4,obRender(a0)
00010E76 117C 0018 0014             		move.b	#$18,obActWid(a0)
00010E7C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010E82                            
00010E82                            Sign_Touch:	; Routine 2
00010E82 3038 D008                  		move.w	(v_player+obX).w,d0
00010E86 9068 0008                  		sub.w	obX(a0),d0
00010E8A 6500                       		bcs.s	@notouch
00010E8C 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010E90 6400                       		bcc.s	@notouch	; if not, branch
00010E92 11FC 0001 F7AA             		move.b  #1,($FFFFF7AA).w ; Lock the screen
00010EA2 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010EA6 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w ; lock screen position
00010EAC 5428 0024                  		addq.b	#2,obRoutine(a0)
00010EB0                            		;cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is level MZ3?
00010EB0                            		;beq.s	@normal
00010EB0                            		;move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010EB0                            
00010EB0                            	@normal:
00010EB0 4A38 F5C3                  		tst.b	(f_emeraldm).w
00010EB4 6700                       		beq.s	@notouch
00010EB6 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
00010EC4                            
00010EC4                            	@notouch:
00010EC4 4E75                       		rts	
00010EC6                            	
00010EC6                            ; ===========================================================================
00010EC6                            
00010EC6                            Sign_Spin:	; Routine 4
00010EC6 4238 FE19                  		clr.b (Super_Sonic_Flag).w ; Revert Sonic to Normal
00010ECA 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w
00010ED0 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w
00010ED6 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w
00010EDC 5368 0030                  		subq.w	#1,spintime(a0)	; subtract 1 from spin time
00010EE0 6A00                       		bpl.s	@chksparkle	; if time remains, branch
00010EE2 317C 003C 0030             		move.w	#60,spintime(a0) ; set spin cycle time to 1 second
00010EE8 5228 001C                  		addq.b	#1,obAnim(a0)	; next spin cycle
00010EEC 0C28 0003 001C             		cmpi.b	#3,obAnim(a0)	; have 3 spin cycles completed?
00010EF2 6600                       		bne.s	@chksparkle	; if not, branch
00010EF4 5428 0024                  		addq.b	#2,obRoutine(a0)
00010EF8                            
00010EF8                            	@chksparkle:
00010EF8 5368 0032                  		subq.w	#1,sparkletime(a0) ; subtract 1 from time delay
00010EFC 6A00                       		bpl.s	@fail		; if time remains, branch
00010EFE 317C 000B 0032             		move.w	#$B,sparkletime(a0) ; set time between sparkles to $B frames
00010F04 7000                       		moveq	#0,d0
00010F06 1028 0034                  		move.b	sparkle_id(a0),d0 ; get sparkle id
00010F0A 5428 0034                  		addq.b	#2,sparkle_id(a0) ; increment sparkle counter
00010F0E 0228 000E 0034             		andi.b	#$E,sparkle_id(a0)
00010F14 45FB 0000                  		lea	Sign_SparkPos(pc,d0.w),a2 ; load sparkle position data
00010F18 6100 EE2C                  		bsr.w	FindFreeObj
00010F1C 6600                       		bne.s	@fail
00010F1E 12BC 0025                  		move.b	#id_Rings,0(a1)	; load rings object
00010F22 137C 0006 0024             		move.b	#id_Ring_Sparkle,obRoutine(a1) ; jump to ring sparkle subroutine
00010F28 101A                       		move.b	(a2)+,d0
00010F2A 4880                       		ext.w	d0
00010F2C D068 0008                  		add.w	obX(a0),d0
00010F30 3340 0008                  		move.w	d0,obX(a1)
00010F34 101A                       		move.b	(a2)+,d0
00010F36 4880                       		ext.w	d0
00010F38 D068 000C                  		add.w	obY(a0),d0
00010F3C 3340 000C                  		move.w	d0,obY(a1)
00010F40 237C 0000 BDB4 0004        		move.l	#Map_Ring,obMap(a1)
00010F48 337C 2798 0002             		move.w	#$2798,obGfx(a1)
00010F4E 137C 0004 0001             		move.b	#4,obRender(a1)
00010F54 337C 0100 0018             		move.w	#$100,obPriority(a1)
00010F5A 137C 0008 0014             		move.b	#8,obActWid(a1)
00010F60                            
00010F60                            	@fail:
00010F60 4E75                       		rts	
00010F62                            ; ===========================================================================
00010F62 E8F0                       Sign_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00010F64 0808                       		dc.b	8,   8
00010F66 F000                       		dc.b -$10,   0
00010F68 18F8                       		dc.b  $18,  -8
00010F6A 00F8                       		dc.b	0,  -8
00010F6C 1000                       		dc.b  $10,   0
00010F6E E808                       		dc.b -$18,   8
00010F70 1810                       		dc.b  $18, $10
00010F72                            ; ===========================================================================
00010F72                            
00010F72                            Sign_SonicRun:	; Routine 6
00010F72 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00010F76 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
00010F7A                            		;move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010F7A                            		
00010F7A                            
00010F7A                            	loc_EC86:
00010F7A 5428 0024                  		addq.b	#2,obRoutine(a0)
00010F7E                            
00010F7E                            ; ---------------------------------------------------------------------------
00010F7E                            ; Subroutine to	set up bonuses at the end of an	act
00010F7E                            ; ---------------------------------------------------------------------------
00010F7E                            
00010F7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010F7E                            
00010F7E                            
00010F7E                            GotThroughAct:
00010F7E 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00010F82 6600                       		bne.s	locret_ECEE
00010F84 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00010F8A 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00010F8E 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00010F92 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010F96 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00010F9C 7000                       		moveq	#plcid_TitleCard,d0
00010F9E 4EB9 0000 176C             		jsr	(NewPLC).l	; load title card patterns
00010FA4 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00010FAA 7000                       		moveq	#0,d0
00010FAC 1038 FE23                  		move.b	(v_timemin).w,d0
00010FB0 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010FB4 7200                       		moveq	#0,d1
00010FB6 1238 FE24                  		move.b	(v_timesec).w,d1
00010FBA D041                       		add.w	d1,d0		; add up your time
00010FBC 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010FC0 7214                       		moveq	#$14,d1
00010FC2 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010FC4 6500                       		bcs.s	hastimebonus	; if not, branch
00010FC6 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010FC8                            
00010FC8                            	hastimebonus:
00010FC8 D040                       		add.w	d0,d0
00010FCA 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),(v_timebonus).w ; set time bonus
00010FD0 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00010FD4 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010FD8 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00010FE6 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00010FEC                            
00010FEC                            locret_ECEE:
00010FEC 4E75                       		rts	
00010FEE                            
00010FEE                            ; End of function GotThroughAct
00010FEE                            
00010FEE                            ; ===========================================================================
00010FEE 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00011002 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00011018                            ; ===========================================================================
00011018                            
00011018                            Sign_Exit:	; Routine 8
00011018 4E75                       		rts	
0001101A                            
0001101A                            ; ---------------------------------------------------------------------------
0001101A                            ; Subroutine to	set up bonuses at the end of an	zone
0001101A                            ; ---------------------------------------------------------------------------
0001101A                            
0001101A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001101A                            
0001101A                            
0001101A                            GotThroughAct1:
0001101A 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
0001101E 6600                       		bne.s	locret_ECEE1
00011020 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00011026 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
0001102A 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
0001102E 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00011032 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00011038 7000                       		moveq	#plcid_TitleCard,d0
0001103A 4EB9 0000 176C             		jsr	(NewPLC).l	; load title card patterns
00011040 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00011046 7000                       		moveq	#0,d0
00011048 1038 FE23                  		move.b	(v_timemin).w,d0
0001104C C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00011050 7200                       		moveq	#0,d1
00011052 1238 FE24                  		move.b	(v_timesec).w,d1
00011056 D041                       		add.w	d1,d0		; add up your time
00011058 80FC 000F                  		divu.w	#15,d0		; divide by 15
0001105C 7214                       		moveq	#$14,d1
0001105E B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00011060 6500 0000                  		bcs.w	hastimebonus2	; if not, branch
00011064 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00011066                            
00011066                            	hastimebonus2:
00011066 D040                       		add.w	d0,d0
00011068 31FB 0000 F7D2             		move.w	TimeBonuses1(pc,d0.w),(v_timebonus).w ; set time bonus
0001106E 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00011072 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00011076 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00011084 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
0001108A                            
0001108A                            locret_ECEE1:
0001108A 4E75                       		rts	
0001108C                            
0001108C                            ; End of function GotThroughAct		
0001108C                            
0001108C 1388 1388 03E8 01F4 0190+  TimeBonuses1:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
000110A0 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
000110A0 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
000110B6                            		include	"_anim\Signpost.asm"
000110B6                            ; ---------------------------------------------------------------------------
000110B6                            ; Animation script - signpost
000110B6                            ; ---------------------------------------------------------------------------
000110B6 0000                       Ani_Sign:	dc.w @eggman-Ani_Sign
000110B8 0000                       		dc.w @spin1-Ani_Sign
000110BA 0000                       		dc.w @spin2-Ani_Sign
000110BC 0000                       		dc.w @sonic-Ani_Sign
000110BE 0F00 FF                    @eggman:	dc.b $F, 0, afEnd
000110C2 00                         		even
000110C2 0100 0102 03FF             @spin1:		dc.b 1,	0, 1, 2, 3, afEnd
000110C8 0104 0102 03FF             @spin2:		dc.b 1,	4, 1, 2, 3, afEnd
000110CE 0F04 FF                    @sonic:		dc.b $F, 4, afEnd
000110D2 00                         		even
000110D2 00                         		even
000110D2                            Map_Sign:	include	"_maps\Signpost.asm"
000110D2                            ; --------------------------------------------------------------------------------
000110D2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000110D2                            ; --------------------------------------------------------------------------------
000110D2                            
000110D2                            SME_KvSue:	
000110D2 0000 0000                  		dc.w SME_KvSue_A-SME_KvSue, SME_KvSue_1F-SME_KvSue	
000110D6 0000 0000                  		dc.w SME_KvSue_2F-SME_KvSue, SME_KvSue_3F-SME_KvSue	
000110DA 0000                       		dc.w SME_KvSue_4F-SME_KvSue	
000110DC 04                         SME_KvSue_A:	dc.b 4	
000110DD F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8	
000110E2 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0	
000110E7 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
000110EC 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
000110F1 03                         SME_KvSue_1F:	dc.b 3	
000110F2 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0	
000110F7 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
000110FC 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00011101 03                         SME_KvSue_2F:	dc.b 3	
00011102 F003 001C FC               		dc.b $F0, 3, 0, $1C, $FC	
00011107 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
0001110C 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00011111 03                         SME_KvSue_3F:	dc.b 3	
00011112 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0	
00011117 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
0001111C 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00011121 04                         SME_KvSue_4F:	dc.b 4	
00011122 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8	
00011127 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0	
0001112C 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00011131 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00011136                            		even
00011136                            		even
00011136                            
00011136                            		include	"_incObj\4C & 4D Lava Geyser Maker.asm"
00011136                            ; ---------------------------------------------------------------------------
00011136                            ; Object 4C - lava geyser / lavafall producer (MZ)
00011136                            ; ---------------------------------------------------------------------------
00011136                            
00011136                            GeyserMaker:
00011136 7000                       		moveq	#0,d0
00011138 1028 0024                  		move.b	obRoutine(a0),d0
0001113C 323B 0000                  		move.w	GMake_Index(pc,d0.w),d1
00011140 4EBB 1000                  		jsr	GMake_Index(pc,d1.w)
00011144 6000 0000                  		bra.w	Geyser_ChkDel
00011148                            ; ===========================================================================
00011148 0000                       GMake_Index:	dc.w GMake_Main-GMake_Index
0001114A 0000                       		dc.w GMake_Wait-GMake_Index
0001114C 0000                       		dc.w GMake_ChkType-GMake_Index
0001114E 0000                       		dc.w GMake_MakeLava-GMake_Index
00011150 0000                       		dc.w GMake_Display-GMake_Index
00011152 0000                       		dc.w GMake_Delete-GMake_Index
00011154                            
00011154 =00000034                  gmake_time:	equ $34		; time delay (2 bytes)
00011154 =00000032                  gmake_timer:	equ $32		; current time remaining (2 bytes)
00011154 =0000003C                  gmake_parent:	equ $3C		; address of parent object
00011154                            ; ===========================================================================
00011154                            
00011154                            GMake_Main:	; Routine 0
00011154 5428 0024                  		addq.b	#2,obRoutine(a0)
00011158 217C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a0)
00011160 317C E3A8 0002             		move.w	#$E3A8,obGfx(a0)
00011166 117C 0004 0001             		move.b	#4,obRender(a0)
0001116C 317C 0080 0018             		move.w	#$80,obPriority(a0)
00011172 117C 0038 0014             		move.b	#$38,obActWid(a0)
00011178 317C 0078 0034             		move.w	#120,gmake_time(a0) ; set time delay to 2 seconds
0001117E                            
0001117E                            GMake_Wait:	; Routine 2
0001117E 5368 0032                  		subq.w	#1,gmake_timer(a0) ; decrement timer
00011182 6A00                       		bpl.s	@cancel		; if time remains, branch
00011184                            
00011184 3168 0034 0032             		move.w	gmake_time(a0),gmake_timer(a0) ; reset timer
0001118A 3038 D00C                  		move.w	(v_player+obY).w,d0
0001118E 3228 000C                  		move.w	obY(a0),d1
00011192 B041                       		cmp.w	d1,d0
00011194 6400                       		bcc.s	@cancel
00011196 0441 0170                  		subi.w	#$170,d1
0001119A B041                       		cmp.w	d1,d0
0001119C 6500                       		bcs.s	@cancel
0001119E 5428 0024                  		addq.b	#2,obRoutine(a0) ; if Sonic is within range, goto GMake_ChkType
000111A2                            
000111A2                            	@cancel:
000111A2 4E75                       		rts	
000111A4                            ; ===========================================================================
000111A4                            
000111A4                            GMake_MakeLava:	; Routine 6
000111A4 5428 0024                  		addq.b	#2,obRoutine(a0)
000111A8 6100 EBB2                  		bsr.w	FindNextFreeObj
000111AC 6600                       		bne.s	@fail
000111AE 12BC 004D                  		move.b	#id_LavaGeyser,0(a1) ; load lavafall object
000111B2 3368 0008 0008             		move.w	obX(a0),obX(a1)
000111B8 3368 000C 000C             		move.w	obY(a0),obY(a1)
000111BE 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
000111C4 2348 003C                  		move.l	a0,gmake_parent(a1)
000111C8                            
000111C8                            	@fail:
000111C8 117C 0001 001C             		move.b	#1,obAnim(a0)
000111CE 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 0 (geyser) ?
000111D2 6700                       		beq.s	@isgeyser	; if yes, branch
000111D4 117C 0004 001C             		move.b	#4,obAnim(a0)
000111DA 6000                       		bra.s	GMake_Display
000111DC                            ; ===========================================================================
000111DC                            
000111DC                            	@isgeyser:
000111DC 2268 003C                  		movea.l	gmake_parent(a0),a1 ; get parent object address
000111E0 08E9 0001 0022             		bset	#1,obStatus(a1)
000111E6 337C FA80 0012             		move.w	#-$580,obVelY(a1)
000111EC 6000                       		bra.s	GMake_Display
000111EE                            ; ===========================================================================
000111EE                            
000111EE                            GMake_ChkType:	; Routine 4
000111EE 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 (geyser) ?
000111F2 6700                       		beq.s	GMake_Display	; if yes, branch
000111F4 5428 0024                  		addq.b	#2,obRoutine(a0)
000111F8 4E75                       		rts	
000111FA                            ; ===========================================================================
000111FA                            
000111FA                            GMake_Display:	; Routine 8
000111FA 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
00011200 6100 B660                  		bsr.w	AnimateSprite
00011204 6100 E5A6                  		bsr.w	DisplaySprite
00011208 4E75                       		rts	
0001120A                            ; ===========================================================================
0001120A                            
0001120A                            GMake_Delete:	; Routine $A
0001120A 117C 0000 001C             		move.b	#0,obAnim(a0)
00011210 117C 0002 0024             		move.b	#2,obRoutine(a0)
00011216 4A28 0028                  		tst.b	obSubtype(a0)
0001121A 6700 E5D0                  		beq.w	DeleteObject
0001121E 4E75                       		rts	
00011220                            
00011220                            
00011220                            ; ---------------------------------------------------------------------------
00011220                            ; Object 4D - lava geyser / lavafall (MZ)
00011220                            ; ---------------------------------------------------------------------------
00011220                            
00011220                            LavaGeyser:
00011220 7000                       		moveq	#0,d0
00011222 1028 0024                  		move.b	obRoutine(a0),d0
00011226 323B 0000                  		move.w	Geyser_Index(pc,d0.w),d1
0001122A 4EBB 1000                  		jsr	Geyser_Index(pc,d1.w)
0001122E 6000 E57C                  		bra.w	DisplaySprite
00011232                            ; ===========================================================================
00011232 0000                       Geyser_Index:	dc.w Geyser_Main-Geyser_Index
00011234 0000                       		dc.w Geyser_Action-Geyser_Index
00011236 0000                       		dc.w loc_EFFC-Geyser_Index
00011238 0000                       		dc.w Geyser_Delete-Geyser_Index
0001123A                            
0001123A FB00 0000                  Geyser_Speeds:	dc.w $FB00, 0
0001123E                            ; ===========================================================================
0001123E                            
0001123E                            Geyser_Main:	; Routine 0
0001123E 5428 0024                  		addq.b	#2,obRoutine(a0)
00011242 3168 000C 0030             		move.w	obY(a0),$30(a0)
00011248 4A28 0028                  		tst.b	obSubtype(a0)
0001124C 6700                       		beq.s	@isgeyser
0001124E 0468 0250 000C             		subi.w	#$250,obY(a0)
00011254                            
00011254                            	@isgeyser:
00011254 7000                       		moveq	#0,d0
00011256 1028 0028                  		move.b	obSubtype(a0),d0
0001125A D040                       		add.w	d0,d0
0001125C 317B 00DC 0012             		move.w	Geyser_Speeds(pc,d0.w),obVelY(a0)
00011262 2248                       		movea.l	a0,a1
00011264 7201                       		moveq	#1,d1
00011266 6100                       		bsr.s	@makelava
00011268 6000                       		bra.s	@activate
0001126A                            ; ===========================================================================
0001126A                            
0001126A                            	@loop:
0001126A 6100 EAF0                  		bsr.w	FindNextFreeObj
0001126E 6600                       		bne.s	@fail
00011270                            
00011270                            @makelava:
00011270 12BC 004D                  		move.b	#id_LavaGeyser,0(a1)
00011274 237C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a1)
0001127C 337C 63A8 0002             		move.w	#$63A8,obGfx(a1)
00011282 137C 0004 0001             		move.b	#4,obRender(a1)
00011288 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001128E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011294 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001129A 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
000112A0 337C 0080 0018             		move.w	#$80,obPriority(a1)
000112A6 137C 0005 001C             		move.b	#5,obAnim(a1)
000112AC 4A28 0028                  		tst.b	obSubtype(a0)
000112B0 6700                       		beq.s	@fail
000112B2 137C 0002 001C             		move.b	#2,obAnim(a1)
000112B8                            
000112B8                            	@fail:
000112B8 51C9 FFB0                  		dbf	d1,@loop
000112BC 4E75                       		rts	
000112BE                            ; ===========================================================================
000112BE                            
000112BE                            @activate:
000112BE 0669 0060 000C             		addi.w	#$60,obY(a1)
000112C4 3368 0030 0030             		move.w	$30(a0),$30(a1)
000112CA 0669 0060 0030             		addi.w	#$60,$30(a1)
000112D0 137C 0093 0020             		move.b	#$93,obColType(a1)
000112D6 137C 0080 0016             		move.b	#$80,obHeight(a1)
000112DC 08E9 0004 0001             		bset	#4,obRender(a1)
000112E2 5829 0024                  		addq.b	#4,obRoutine(a1)
000112E6 2348 003C                  		move.l	a0,$3C(a1)
000112EA 4A28 0028                  		tst.b	obSubtype(a0)
000112EE 6700                       		beq.s	@sound
000112F0 7200                       		moveq	#0,d1
000112F2 6100 FF76                  		bsr.w	@loop
000112F6 5429 0024                  		addq.b	#2,obRoutine(a1)
000112FA 08E9 0004 0002             		bset	#4,obGfx(a1)
00011300 0669 0100 000C             		addi.w	#$100,obY(a1)
00011306 337C 0000 0018             		move.w	#0,obPriority(a1)
0001130C 3368 0030 0030             		move.w	$30(a0),$30(a1)
00011312 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
00011318 117C 0000 0028             		move.b	#0,obSubtype(a0)
0001131E                            
0001131E                            	@sound:
00011328                            
00011328                            Geyser_Action:	; Routine 2
00011328 7000                       		moveq	#0,d0
0001132A 1028 0028                  		move.b	obSubtype(a0),d0
0001132E D040                       		add.w	d0,d0
00011330 323B 0000                  		move.w	Geyser_Types(pc,d0.w),d1
00011334 4EBB 1000                  		jsr	Geyser_Types(pc,d1.w)
00011338 6100 E45E                  		bsr.w	SpeedToPos
0001133C 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
00011342 6100 B51E                  		bsr.w	AnimateSprite
00011346                            
00011346                            Geyser_ChkDel:
00011364 4E75                       		rts	
00011366                            ; ===========================================================================
00011366 0000                       Geyser_Types:	dc.w Geyser_Type00-Geyser_Types
00011368 0000                       		dc.w Geyser_Type01-Geyser_Types
0001136A                            ; ===========================================================================
0001136A                            
0001136A                            Geyser_Type00:
0001136A 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
00011370 3028 0030                  		move.w	$30(a0),d0
00011374 B068 000C                  		cmp.w	obY(a0),d0
00011378 6400                       		bcc.s	locret_EFDA
0001137A 5828 0024                  		addq.b	#4,obRoutine(a0)
0001137E 2268 003C                  		movea.l	$3C(a0),a1
00011382 137C 0003 001C             		move.b	#3,obAnim(a1)
00011388                            
00011388                            locret_EFDA:
00011388 4E75                       		rts	
0001138A                            ; ===========================================================================
0001138A                            
0001138A                            Geyser_Type01:
0001138A 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
00011390 3028 0030                  		move.w	$30(a0),d0
00011394 B068 000C                  		cmp.w	obY(a0),d0
00011398 6400                       		bcc.s	locret_EFFA
0001139A 5828 0024                  		addq.b	#4,obRoutine(a0)
0001139E 2268 003C                  		movea.l	$3C(a0),a1
000113A2 137C 0001 001C             		move.b	#1,obAnim(a1)
000113A8                            
000113A8                            locret_EFFA:
000113A8 4E75                       		rts	
000113AA                            ; ===========================================================================
000113AA                            
000113AA                            loc_EFFC:	; Routine 4
000113AA 2268 003C                  		movea.l	$3C(a0),a1
000113AE 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
000113B4 6700 0000                  		beq.w	Geyser_Delete
000113B8 3029 000C                  		move.w	obY(a1),d0
000113BC 0640 0060                  		addi.w	#$60,d0
000113C0 3140 000C                  		move.w	d0,obY(a0)
000113C4 9068 0030                  		sub.w	$30(a0),d0
000113C8 4440                       		neg.w	d0
000113CA 7208                       		moveq	#8,d1
000113CC 0C40 0040                  		cmpi.w	#$40,d0
000113D0 6C00                       		bge.s	loc_F026
000113D2 720B                       		moveq	#$B,d1
000113D4                            
000113D4                            loc_F026:
000113D4 0C40 0080                  		cmpi.w	#$80,d0
000113D8 6F00                       		ble.s	loc_F02E
000113DA 720E                       		moveq	#$E,d1
000113DC                            
000113DC                            loc_F02E:
000113DC 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000113E0 6A00                       		bpl.s	loc_F04C
000113E2 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
000113E8 5228 001B                  		addq.b	#1,obAniFrame(a0)
000113EC 0C28 0002 001B             		cmpi.b	#2,obAniFrame(a0)
000113F2 6500                       		bcs.s	loc_F04C
000113F4 117C 0000 001B             		move.b	#0,obAniFrame(a0)
000113FA                            
000113FA                            loc_F04C:
000113FA 1028 001B                  		move.b	obAniFrame(a0),d0
000113FE D001                       		add.b	d1,d0
00011400 1140 001A                  		move.b	d0,obFrame(a0)
00011404 6000 FF40                  		bra.w	Geyser_ChkDel
00011408                            ; ===========================================================================
00011408                            
00011408                            Geyser_Delete:	; Routine 6
00011408 6000 E3E2                  		bra.w	DeleteObject
00011408 6000 E3E2                  		bra.w	DeleteObject
0001140C                            		include	"_incObj\54 Lava Tag.asm"
0001140C                            ; ---------------------------------------------------------------------------
0001140C                            ; Object 54 - invisible	lava tag (MZ)
0001140C                            ; ---------------------------------------------------------------------------
0001140C                            
0001140C                            LavaTag:
0001140C 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)	;TIS
00011412 6E00 0000                  		bgt	WaterTag	;TIS
00011416 7000                       		moveq	#0,d0
00011418 1028 0024                  		move.b	obRoutine(a0),d0
0001141C 323B 0000                  		move.w	LTag_Index(pc,d0.w),d1
00011420 4EFB 1000                  		jmp	LTag_Index(pc,d1.w)
00011424                            ; ===========================================================================
00011424 0000                       LTag_Index:	dc.w LTag_Main-LTag_Index
00011426 0000                       		dc.w LTag_ChkDel-LTag_Index
00011428                            
00011428 9694 95                    LTag_ColTypes:	dc.b $96, $94, $95
0001142C 00                         		even
0001142C                            ; ===========================================================================
0001142C                            
0001142C                            LTag_Main:	; Routine 0
0001142C 5428 0024                  		addq.b	#2,obRoutine(a0)
00011430 7000                       		moveq	#0,d0
00011432 1028 0028                  		move.b	obSubtype(a0),d0
00011436 117B 00F0 0020             		move.b	LTag_ColTypes(pc,d0.w),obColType(a0)
0001143C 217C 0000 0000 0004        		move.l	#Map_LTag,obMap(a0)
00011444 117C 0084 0001             		move.b	#$84,obRender(a0)
0001144A                            
0001144A                            LTag_ChkDel:	; Routine 2
0001144A 3028 0008                  		move.w	obX(a0),d0
0001144E 0240 FF80                  		andi.w	#$FF80,d0
00011452 3238 F700                  		move.w	(v_screenposx).w,d1
00011456 0441 0080                  		subi.w	#$80,d1
0001145A 0241 FF80                  		andi.w	#$FF80,d1
0001145E 9041                       		sub.w	d1,d0
00011460 6B00 E38A                  		bmi.w	DeleteObject
00011464 0C40 0280                  		cmpi.w	#$280,d0
00011468 6200 E382                  		bhi.w	DeleteObject
0001146C 4E75                       		rts
0001146E                            
0001146E                            
0001146E                            ; ---------------------------------------------------------------------------
0001146E                            ; Object 54a - invisible	water tag (MZ) - TIS
0001146E                            ; ---------------------------------------------------------------------------
0001146E                            
0001146E                            WaterTag:	
0001146E 7000                       		moveq	#0,d0
00011470 1028 0024                  		move.b	obRoutine(a0),d0
00011474 323B 0000                  		move.w	WTag_Index(pc,d0.w),d1
00011478 4EFB 1000                  		jmp	WTag_Index(pc,d1.w)
0001147C                            ; ===========================================================================
0001147C 0000                       WTag_Index:	dc.w WTag_Main-WTag_Index
0001147E 0000                       		dc.w WTag_ChkDel-WTag_Index
00011480                            
00011480 9694 95                    WTag_ColTypes:	dc.b $96, $94, $95
00011484 00                         		even
00011484                            ; ===========================================================================
00011484                            
00011484                            
00011484                            WTag_Main:	; Routine 0
00011484 5428 0024                  		addq.b	#2,obRoutine(a0)
00011488 7000                       		moveq	#0,d0
0001148A                            		;move.b	obSubtype(a0),d0
0001148A                            		;move.b	WTag_ColTypes(pc,d0.w),obColType(a0)
0001148A 0400 00F0                  		sub.b	#$F0,d0
0001148E 1178 0096 0020             		move.b	$96,obColType(a0)							
00011494                            		;move.l	#Map_LTag,obMap(a0)
00011494                            		;move.b	#$84,obRender(a0)
00011494                            
00011494                            WTag_ChkDel:	; Routine 2
00011494 3028 0008                  		move.w	obX(a0),d0
00011498 0240 FF80                  		andi.w	#$FF80,d0
0001149C 3238 F700                  		move.w	(v_screenposx).w,d1
000114A0 0441 0080                  		subi.w	#$80,d1
000114A4 0241 FF80                  		andi.w	#$FF80,d1
000114A8 9041                       		sub.w	d1,d0
000114AA 6B00 E340                  		bmi.w	DeleteObject
000114AE 0C40 0280                  		cmpi.w	#$280,d0
000114B2 6200 E338                  		bhi.w	DeleteObject
000114B6 4E75                       		rts
000114B8                            
000114B8                            
000114B8                            Map_LTag:	include	"_maps\Lava Tag.asm"
000114B8                            ; ---------------------------------------------------------------------------
000114B8                            ; Sprite mappings - invisible lava tag (MZ)
000114B8                            ; ---------------------------------------------------------------------------
000114B8                            Map_LTag_internal:
000114B8 0000                       		dc.w @0-Map_LTag_internal
000114BA 00                         @0:		dc.b 0		; no sprite, because the tag is invisible!
000114BC 00                         		even
000114BC 00                         		even
000114BC                            		include	"_anim\Lava Geyser.asm"
000114BC                            ; ---------------------------------------------------------------------------
000114BC                            ; Animation script - geyser of lava (MZ)
000114BC                            ; ---------------------------------------------------------------------------
000114BC 0000                       Ani_Geyser:	dc.w @bubble1-Ani_Geyser
000114BE 0000                       		dc.w @bubble2-Ani_Geyser
000114C0 0000                       		dc.w @end-Ani_Geyser
000114C2 0000                       		dc.w @bubble3-Ani_Geyser
000114C4 0000                       		dc.w @blank-Ani_Geyser
000114C6 0000                       		dc.w @bubble4-Ani_Geyser
000114C8 0200 0100 0104 0504 05FC   @bubble1:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	afRoutine
000114D2 0202 03FF                  @bubble2:	dc.b 2,	2, 3, afEnd
000114D6 0206 07FF                  @end:		dc.b 2,	6, 7, afEnd
000114DA 0202 0300 0100 01FC        @bubble3:	dc.b 2,	2, 3, 0, 1, 0, 1, afRoutine
000114E2 0F13 FF                    @blank:		dc.b $F, $13, afEnd
000114E6 00                         		even
000114E6 0211 12FF                  @bubble4:	dc.b 2,	$11, $12, afEnd
000114EA                            		even
000114EA                            		even
000114EA                            Map_Geyser:	include	"_maps\Lava Geyser.asm"
000114EA                            ; ---------------------------------------------------------------------------
000114EA                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
000114EA                            ; ---------------------------------------------------------------------------
000114EA                            Map_Geyser_internal:
000114EA 0000                       		dc.w @bubble1-Map_Geyser_internal
000114EC 0000                       		dc.w @bubble2-Map_Geyser_internal
000114EE 0000                       		dc.w @bubble3-Map_Geyser_internal
000114F0 0000                       		dc.w @bubble4-Map_Geyser_internal
000114F2 0000                       		dc.w @bubble5-Map_Geyser_internal
000114F4 0000                       		dc.w @bubble6-Map_Geyser_internal
000114F6 0000                       		dc.w @end1-Map_Geyser_internal
000114F8 0000                       		dc.w @end2-Map_Geyser_internal
000114FA 0000                       		dc.w @medcolumn1-Map_Geyser_internal
000114FC 0000                       		dc.w @medcolumn2-Map_Geyser_internal
000114FE 0000                       		dc.w @medcolumn3-Map_Geyser_internal
00011500 0000                       		dc.w @shortcolumn1-Map_Geyser_internal
00011502 0000                       		dc.w @shortcolumn2-Map_Geyser_internal
00011504 0000                       		dc.w @shortcolumn3-Map_Geyser_internal
00011506 0000                       		dc.w @longcolumn1-Map_Geyser_internal
00011508 0000                       		dc.w @longcolumn2-Map_Geyser_internal
0001150A 0000                       		dc.w @longcolumn3-Map_Geyser_internal
0001150C 0000                       		dc.w @bubble7-Map_Geyser_internal
0001150E 0000                       		dc.w @bubble8-Map_Geyser_internal
00011510 0000                       		dc.w @blank-Map_Geyser_internal
00011512 02                         @bubble1:	dc.b 2
00011513 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
00011518 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0001151D 02                         @bubble2:	dc.b 2
0001151E EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
00011523 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
00011528 04                         @bubble3:	dc.b 4
00011529 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0001152E F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00011533 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00011538 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0001153D 04                         @bubble4:	dc.b 4
0001153E EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00011543 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00011548 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0001154D EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00011552 06                         @bubble5:	dc.b 6
00011553 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00011558 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0001155D F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00011562 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00011567 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0001156C E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
00011571 06                         @bubble6:	dc.b 6
00011572 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00011577 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0001157C F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00011581 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00011586 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0001158B E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
00011590 02                         @end1:		dc.b 2
00011591 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00011596 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0001159B 02                         @end2:		dc.b 2
0001159C E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
000115A1 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
000115A6 0A                         @medcolumn1:	dc.b $A
000115A7 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000115AC 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000115B1 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000115B6 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000115BB D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000115C0 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000115C5 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
000115CA F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
000115CF 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
000115D4 100F 0840 00               		dc.b $10, $F, 8, $40, 0
000115D9 0A                         @medcolumn2:	dc.b $A
000115DA 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000115DF 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000115E4 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000115E9 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000115EE D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000115F3 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000115F8 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
000115FD F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00011602 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00011607 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0001160C 0A                         @medcolumn3:	dc.b $A
0001160D 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011612 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011617 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001161C B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00011621 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011626 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001162B F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00011630 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00011635 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0001163A 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0001163F 06                         @shortcolumn1:	dc.b 6
00011640 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00011645 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0001164A B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0001164F B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00011654 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00011659 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0001165E 06                         @shortcolumn2:	dc.b 6
0001165F 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011664 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011669 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001166E B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011673 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011678 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001167D 06                         @shortcolumn3:	dc.b 6
0001167E 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011683 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011688 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001168D B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00011692 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011697 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001169C 10                         @longcolumn1:	dc.b $10
0001169D 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000116A2 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000116A7 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000116AC B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000116B1 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000116B6 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000116BB F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
000116C0 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
000116C5 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
000116CA 100F 0840 00               		dc.b $10, $F, 8, $40, 0
000116CF 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
000116D4 300F 0840 00               		dc.b $30, $F, 8, $40, 0
000116D9 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
000116DE 500F 0840 00               		dc.b $50, $F, 8, $40, 0
000116E3 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
000116E8 700F 0840 00               		dc.b $70, $F, 8, $40, 0
000116ED 10                         @longcolumn2:	dc.b $10
000116EE 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000116F3 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000116F8 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000116FD B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011702 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011707 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001170C F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00011711 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00011716 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0001171B 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00011720 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00011725 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0001172A 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0001172F 500F 0850 00               		dc.b $50, $F, 8, $50, 0
00011734 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
00011739 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0001173E 10                         @longcolumn3:	dc.b $10
0001173F 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011744 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011749 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001174E B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00011753 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011758 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001175D F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00011762 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00011767 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0001176C 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00011771 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00011776 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0001177B 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00011780 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00011785 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0001178A 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0001178F 06                         @bubble7:	dc.b 6
00011790 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00011795 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0001179A E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0001179F E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
000117A4 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
000117A9 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
000117AE 06                         @bubble8:	dc.b 6
000117AF E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
000117B4 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
000117B9 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
000117BE E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
000117C3 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
000117C8 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
000117CD 00                         @blank:	dc.b 0
000117CE                            		even
000117CE                            		even
000117CE                            
000117CE                            		include	"_incObj\40 Moto Bug.asm" ; includes "_incObj\sub RememberState.asm"
000117CE                            ; ---------------------------------------------------------------------------
000117CE                            ; Object 40 - Moto Bug enemy (GHZ)
000117CE                            ; ---------------------------------------------------------------------------
000117CE                            
000117CE                            MotoBug:
000117CE 7000                       		moveq	#0,d0
000117D0 1028 0024                  		move.b	obRoutine(a0),d0
000117D4 323B 0000                  		move.w	Moto_Index(pc,d0.w),d1
000117D8 4EFB 1000                  		jmp	Moto_Index(pc,d1.w)
000117DC                            ; ===========================================================================
000117DC 0000                       Moto_Index:	dc.w Moto_Main-Moto_Index
000117DE 0000                       		dc.w Moto_Action-Moto_Index
000117E0 0000                       		dc.w Moto_Animate-Moto_Index
000117E2 0000                       		dc.w Moto_Delete-Moto_Index
000117E4                            ; ===========================================================================
000117E4                            
000117E4                            Moto_Main:	; Routine 0
000117E4 217C 0000 0000 0004        		move.l	#Map_Moto,obMap(a0)
000117EC 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
000117F2 117C 0004 0001             		move.b	#4,obRender(a0)
000117F8 317C 0200 0018             		move.w	#$200,obPriority(a0)
000117FE 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011804 4A28 001C                  		tst.b	obAnim(a0)	; is object a smoke trail?
00011808 6600                       		bne.s	@smoke		; if yes, branch
0001180A 117C 000E 0016             		move.b	#$E,obHeight(a0)
00011810 117C 0008 0017             		move.b	#8,obWidth(a0)
00011816 117C 000C 0020             		move.b	#$C,obColType(a0)
0001181C 6100 DF42                  		bsr.w	ObjectFall
00011820 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00011826 4A41                       		tst.w	d1
00011828 6A00                       		bpl.s	@notonfloor
0001182A D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
0001182E 317C 0000 0012             		move.w	#0,obVelY(a0)
00011834 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Moto_Action next
00011838 0868 0000 0022             		bchg	#0,obStatus(a0)
0001183E                            
0001183E                            	@notonfloor:
0001183E 4E75                       		rts	
00011840                            ; ===========================================================================
00011840                            
00011840                            @smoke:
00011840 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Moto_Animate next
00011844 6000 0000                  		bra.w	Moto_Animate
00011848                            ; ===========================================================================
00011848                            
00011848                            Moto_Action:	; Routine 2
00011848 7000                       		moveq	#0,d0
0001184A 1028 0025                  		move.b	ob2ndRout(a0),d0
0001184E 323B 0000                  		move.w	Moto_ActIndex(pc,d0.w),d1
00011852 4EBB 1000                  		jsr	Moto_ActIndex(pc,d1.w)
00011856 43F9 0000 0000             		lea	(Ani_Moto).l,a1
0001185C 6100 B004                  		bsr.w	AnimateSprite
00011860                            
00011860                            		include	"_incObj\sub RememberState.asm" ; Moto_Action terminates in this file
00011860                            ; ---------------------------------------------------------------------------
00011860                            ; Subroutine to remember whether an object is destroyed/collected
00011860                            ; ---------------------------------------------------------------------------
00011860                            
00011860                            RememberState:
0001187E 6000 DF2C                  		bra.w	DisplaySprite
00011882                            
00011882                            	@offscreen:
00011882 45F8 FC00                  		lea	(v_objstate).w,a2
00011886 7000                       		moveq	#0,d0
00011888 1028 0023                  		move.b	obRespawnNo(a0),d0
0001188C 6700                       		beq.s	@delete
0001188E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011894                            
00011894                            	@delete:
00011894 6000 DF56                  		bra.w	DeleteObject
00011894 6000 DF56                  		bra.w	DeleteObject
00011898                            
00011898                            ; ===========================================================================
00011898 0000                       Moto_ActIndex:	dc.w @move-Moto_ActIndex
0001189A 0000                       		dc.w @findfloor-Moto_ActIndex
0001189C                            
0001189C =00000030                  @time:		equ $30
0001189C =00000033                  @smokedelay:	equ $33
0001189C                            ; ===========================================================================
0001189C                            
0001189C                            @move:
0001189C 5368 0030                  		subq.w	#1,@time(a0)	; subtract 1 from pause	time
000118A0 6A00                       		bpl.s	@wait		; if time remains, branch
000118A2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000118A6 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object to the left
000118AC 117C 0001 001C             		move.b	#1,obAnim(a0)
000118B2 0868 0000 0022             		bchg	#0,obStatus(a0)
000118B8 6600                       		bne.s	@wait
000118BA 4468 0010                  		neg.w	obVelX(a0)	; change direction
000118BE                            
000118BE                            	@wait:
000118BE 4E75                       		rts	
000118C0                            ; ===========================================================================
000118C0                            
000118C0                            @findfloor:
000118C0 6100 DED6                  		bsr.w	SpeedToPos
000118C4 4EB9 0000 0000             		jsr	(ObjFloorDist).l
000118CA 0C41 FFF8                  		cmpi.w	#-8,d1
000118CE 6D00                       		blt.s	@pause
000118D0 0C41 000C                  		cmpi.w	#$C,d1
000118D4 6C00                       		bge.s	@pause
000118D6 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
000118DA 5328 0033                  		subq.b	#1,@smokedelay(a0)
000118DE 6A00                       		bpl.s	@nosmoke
000118E0 117C 000F 0033             		move.b	#$F,@smokedelay(a0)
000118E6 6100 E45E                  		bsr.w	FindFreeObj
000118EA 6600                       		bne.s	@nosmoke
000118EC 12BC 0040                  		move.b	#id_MotoBug,0(a1) ; load exhaust smoke object
000118F0 3368 0008 0008             		move.w	obX(a0),obX(a1)
000118F6 3368 000C 000C             		move.w	obY(a0),obY(a1)
000118FC 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00011902 137C 0002 001C             		move.b	#2,obAnim(a1)
00011908                            
00011908                            	@nosmoke:
00011908 4E75                       		rts	
0001190A                            
0001190A                            @pause:
0001190A 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001190E 317C 003B 0030             		move.w	#59,@time(a0)	; set pause time to 1 second
00011914 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop the object moving
0001191A 117C 0000 001C             		move.b	#0,obAnim(a0)
00011920 4E75                       		rts	
00011922                            ; ===========================================================================
00011922                            
00011922                            Moto_Animate:	; Routine 4
00011922 43F9 0000 0000             		lea	(Ani_Moto).l,a1
00011928 6100 AF38                  		bsr.w	AnimateSprite
0001192C 6000 DE7E                  		bra.w	DisplaySprite
00011930                            ; ===========================================================================
00011930                            
00011930                            Moto_Delete:	; Routine 6
00011930 6000 DEBA                  		bra.w	DeleteObject
00011930 6000 DEBA                  		bra.w	DeleteObject
00011934                            		include	"_anim\Moto Bug.asm"
00011934                            ; ---------------------------------------------------------------------------
00011934                            ; Animation script - Motobug enemy
00011934                            ; ---------------------------------------------------------------------------
00011934 0000                       Ani_Moto:	dc.w @stand-Ani_Moto
00011936 0000                       		dc.w @walk-Ani_Moto
00011938 0000                       		dc.w @smoke-Ani_Moto
0001193A                            
0001193A 0F02 FF                    @stand:		dc.b $F, 2, afEnd
0001193E 00                         		even
0001193E 0700 0100 02FF             @walk:		dc.b 7,	0, 1, 0, 2, afEnd
00011944 0103 0603 0604 0604 0604+  @smoke:		dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, afRoutine
00011952 00                         		even
00011952 00                         		even
00011952                            Map_Moto:	include	"_maps\Moto Bug.asm"
00011952                            ; --------------------------------------------------------------------------------
00011952                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011952                            ; --------------------------------------------------------------------------------
00011952                            
00011952                            SME_TTY9T:	
00011952 0000 0000                  		dc.w SME_TTY9T_E-SME_TTY9T, SME_TTY9T_23-SME_TTY9T	
00011956 0000 0000                  		dc.w SME_TTY9T_38-SME_TTY9T, SME_TTY9T_52-SME_TTY9T	
0001195A 0000 0000                  		dc.w SME_TTY9T_58-SME_TTY9T, SME_TTY9T_5E-SME_TTY9T	
0001195E 0000                       		dc.w SME_TTY9T_64-SME_TTY9T	
00011960 04                         SME_TTY9T_E:	dc.b 4	
00011961 F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
00011966 000C 2008 EC               		dc.b 0, $C, $20, 8, $EC	
0001196B F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
00011970 0808 200E F4               		dc.b 8, 8, $20, $E, $F4	
00011975 04                         SME_TTY9T_23:	dc.b 4	
00011976 F10D 2000 EC               		dc.b $F1, $D, $20, 0, $EC	
0001197B 010C 2008 EC               		dc.b 1, $C, $20, 8, $EC	
00011980 F901 200C 0C               		dc.b $F9, 1, $20, $C, $C	
00011985 0908 2011 F4               		dc.b 9, 8, $20, $11, $F4	
0001198A 05                         SME_TTY9T_38:	dc.b 5	
0001198B F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
00011990 000C 2014 EC               		dc.b 0, $C, $20, $14, $EC	
00011995 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
0001199A 0804 2018 EC               		dc.b 8, 4, $20, $18, $EC	
0001199F 0804 2012 FC               		dc.b 8, 4, $20, $12, $FC	
000119A4 01                         SME_TTY9T_52:	dc.b 1	
000119A5 FA00 001A 10               		dc.b $FA, 0, 0, $1A, $10	
000119AA 01                         SME_TTY9T_58:	dc.b 1	
000119AB FA00 001B 10               		dc.b $FA, 0, 0, $1B, $10	
000119B0 01                         SME_TTY9T_5E:	dc.b 1	
000119B1 FA00 001C 10               		dc.b $FA, 0, 0, $1C, $10	
000119B6 00                         SME_TTY9T_64:	dc.b 0	
000119B8 00                         		even
000119B8 00                         		even
000119B8                            		include	"_incObj\4F.asm"
000119B8                            ; ---------------------------------------------------------------------------
000119B8                            ; Object 4F - Splats
000119B8                            ; ---------------------------------------------------------------------------
000119B8                            
000119B8                            Obj4F:
000119B8 7000                                       moveq   #0,d0
000119BA 1028 0024                                  move.b  $24(a0),d0
000119BE 323B 0000                                  move.w  ObjSplats_Index(pc,d0.w),d1
000119C2 4EFB 1000                                  jmp     ObjSplats_Index(pc,d1.w)
000119C6                            ; ---------------------------------------------------------------------------
000119C6 0000                       ObjSplats_Index:dc.w ObjSplats_Init-*
000119C8 0000                                       dc.w loc_D246-ObjSplats_Index
000119CA 0000                                       dc.w ObjSplats_Bounce-ObjSplats_Index
000119CC 0000                                       dc.w loc_D2C8-ObjSplats_Index
000119CE                            ; ---------------------------------------------------------------------------
000119CE                            
000119CE                            ObjSplats_Init:
000119CE 5428 0024                                  addq.b  #2,$24(a0)
000119D2 217C 0000 0000 0004                        move.l  #Map_Splats,4(a0)
000119DA 317C 24E4 0002                             move.w  #$24E4,2(a0)
000119E0 117C 0004 0001                             move.b  #4,1(a0)
000119E6 117C 0004 0014                             move.b  #4,obActWid(a0)
000119EC 317C 0200 0018             				move.w	#$200,obPriority(a0)
000119F2 117C 0014 0016                             move.b  #$14,$16(a0)
000119F8 117C 0002 0020                             move.b  #2,$20(a0)
000119FE 4A28 0028                                  tst.b   $28(a0)
00011A02 6700                                       beq.s   loc_D246
00011A04 343C 0300                                  move.w  #$300,d2
00011A08 6000                                       bra.s   ObjSplats_FaceRight
00011A0A                            ; ---------------------------------------------------------------------------
00011A0A                            
00011A0A                            loc_D246:
00011A0A 343C 00E0                                  move.w  #$E0,d2
00011A0E                            
00011A0E                            ObjSplats_FaceRight:
00011A0E 323C 0100                                  move.w  #$100,d1
00011A12 08E8 0000 0001                             bset    #0,1(a0)
00011A18 3038 D008                                  move.w  ($FFFFD008).w,d0
00011A1C 9068 0008                                  sub.w   8(a0),d0
00011A20 6400                                       bcc.s   ObjSplats_Move
00011A22 4440                                       neg.w   d0
00011A24 4441                                       neg.w   d1
00011A26 08A8 0000 0001                             bclr    #0,1(a0)
00011A2C                            
00011A2C                            ObjSplats_Move:
00011A2C B042                                       cmp.w   d2,d0
00011A2E 6400                                       bcc.s   ObjSplats_Bounce
00011A30 3141 0010                                  move.w  d1,$10(a0)
00011A34 5428 0024                                  addq.b  #2,$24(a0)
00011A38                            
00011A38                            ObjSplats_Bounce:
00011A38 6100 DD26                                  bsr.w   ObjectFall
00011A3C 117C 0001 001A                             move.b  #1,$1A(a0)
00011A42 4A68 0012                                  tst.w   $12(a0)
00011A46 6B00                                       bmi.s   ObjSplats_Turn
00011A48 117C 0000 001A                             move.b  #0,$1A(a0)
00011A4E 6100 0000                                  bsr.w   ObjFloorDist
00011A52 4A41                                       tst.w   d1
00011A54 6A00                                       bpl.s   ObjSplats_Turn
00011A56 3011                                       move.w  (a1),d0
00011A58 0240 03FF                                  andi.w  #$3FF,d0
00011A5C 0C40 02D2                                  cmpi.w  #$2D2,d0
00011A60 6500                                       bcs.s   ObjSplats_Fall
00011A62 5428 0024                                  addq.b  #2,$24(a0)
00011A66 6000                                       bra.s   ObjSplats_Turn
00011A68                            ; ---------------------------------------------------------------------------
00011A68                            
00011A68                            ObjSplats_Fall:
00011A68 D368 000C                                  add.w   d1,$C(a0)
00011A6C 317C FC00 0012                             move.w  #$FC00,$12(a0)
00011A72                            
00011A72                            ObjSplats_Turn:
00011A72 6100 0000                                  bsr.w   Yad_ChkWall
00011A76 6700                                       beq.s   loc_D2C4
00011A78 4468 0010                                  neg.w   $10(a0)
00011A7C 0868 0000 0001                             bchg    #0,1(a0)
00011A82 0868 0000 0022                             bchg    #0,$22(a0)
00011A88                            
00011A88                            loc_D2C4:
00011A88 6000 FDD6                                  bra.w   RememberState
00011A8C                            ; ---------------------------------------------------------------------------
00011A8C                            
00011A8C                            loc_D2C8:
00011A8C 6100 DCD2                                  bsr.w   ObjectFall
00011A90 6100 DD1A                                  bsr.w   DisplaySprite
00011A94 4A28 0001                                  tst.b   1(a0)
00011A98 6A00 DD52                                  bpl.w   DeleteObject
00011A9C 4E75                                       rts
00011A9C 4E75                                       rts
00011A9E                            Map_Splats:	include	"_maps\Splats.asm"
00011A9E 0000                       Map_Splats_internal:     dc.w unk_D310-*
00011AA0 0000                                       dc.w unk_D31B-Map_Splats_internal
00011AA2 02                         unk_D310:       dc.b   2
00011AA3 EC0B 0000 F40C 0800 0CF4                   dc.b $EC, $B, 0, 0, $F4, $C, 8, 0, $C, $F4
00011AAD 02                         unk_D31B:       dc.b   2
00011AAE EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011AAE EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011AB8                            
00011AB8                            		include	"_incObj\50 Yadrin.asm"
00011AB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011AB8                            
00011AB8                            
00011AB8                            Yad_ChkWall:
00011AB8 3038 FE04                  		move.w	(v_framecount).w,d0
00011ABC D047                       		add.w	d7,d0
00011ABE 0240 0003                  		andi.w	#3,d0
00011AC2 6600                       		bne.s	loc_F836
00011AC4 7600                       		moveq	#0,d3
00011AC6 1628 0014                  		move.b	obActWid(a0),d3
00011ACA 4A68 0010                  		tst.w	obVelX(a0)
00011ACE 6B00                       		bmi.s	loc_F82C
00011AD0 6100 0000                  		bsr.w	ObjHitWallRight
00011AD4 4A41                       		tst.w	d1
00011AD6 6A00                       		bpl.s	loc_F836
00011AD8                            
00011AD8                            loc_F828:
00011AD8 7001                       		moveq	#1,d0
00011ADA 4E75                       		rts	
00011ADC                            ; ===========================================================================
00011ADC                            
00011ADC                            loc_F82C:
00011ADC 4643                       		not.w	d3
00011ADE 6100 0000                  		bsr.w	ObjHitWallLeft
00011AE2 4A41                       		tst.w	d1
00011AE4 6BF2                       		bmi.s	loc_F828
00011AE6                            
00011AE6                            loc_F836:
00011AE6 7000                       		moveq	#0,d0
00011AE8 4E75                       		rts	
00011AEA                            ; End of function Yad_ChkWall
00011AEA                            
00011AEA                            ; ===========================================================================
00011AEA                            ; ---------------------------------------------------------------------------
00011AEA                            ; Object 50 - Yadrin enemy (SYZ)
00011AEA                            ; ---------------------------------------------------------------------------
00011AEA                            
00011AEA                            Yadrin:
00011AEA 7000                       		moveq	#0,d0
00011AEC 1028 0024                  		move.b	obRoutine(a0),d0
00011AF0 323B 0000                  		move.w	Yad_Index(pc,d0.w),d1
00011AF4 4EFB 1000                  		jmp	Yad_Index(pc,d1.w)
00011AF8                            ; ===========================================================================
00011AF8 0000                       Yad_Index:	dc.w Yad_Main-Yad_Index
00011AFA 0000                       		dc.w Yad_Action-Yad_Index
00011AFC                            
00011AFC =00000030                  yad_timedelay:	equ $30
00011AFC                            ; ===========================================================================
00011AFC                            
00011AFC                            Yad_Main:	; Routine 0
00011AFC 217C 0000 0000 0004        		move.l	#Map_Yad,obMap(a0)
00011B04 317C 247B 0002             		move.w	#$247B,obGfx(a0)
00011B0A 117C 0004 0001             		move.b	#4,obRender(a0)
00011B10 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011B16 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011B1C 117C 0011 0016             		move.b	#$11,obHeight(a0)
00011B22 117C 0008 0017             		move.b	#8,obWidth(a0)
00011B28 117C 00CC 0020             		move.b	#$CC,obColType(a0)
00011B2E 6100 DC30                  		bsr.w	ObjectFall
00011B32 6100 0000                  		bsr.w	ObjFloorDist
00011B36 4A41                       		tst.w	d1
00011B38 6A00                       		bpl.s	locret_F89E
00011B3A D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011B3E 317C 0000 0012             		move.w	#0,obVelY(a0)
00011B44 5428 0024                  		addq.b	#2,obRoutine(a0)
00011B48 0868 0000 0022             		bchg	#0,obStatus(a0)
00011B4E                            
00011B4E                            	locret_F89E:
00011B4E 4E75                       		rts	
00011B50                            ; ===========================================================================
00011B50                            
00011B50                            Yad_Action:	; Routine 2
00011B50 7000                       		moveq	#0,d0
00011B52 1028 0025                  		move.b	ob2ndRout(a0),d0
00011B56 323B 0000                  		move.w	Yad_Index2(pc,d0.w),d1
00011B5A 4EBB 1000                  		jsr	Yad_Index2(pc,d1.w)
00011B5E 43F9 0000 0000             		lea	(Ani_Yad).l,a1
00011B64 6100 ACFC                  		bsr.w	AnimateSprite
00011B68 6000 FCF6                  		bra.w	RememberState
00011B6C                            ; ===========================================================================
00011B6C 0000                       Yad_Index2:	dc.w Yad_Move-Yad_Index2
00011B6E 0000                       		dc.w Yad_FixToFloor-Yad_Index2
00011B70                            ; ===========================================================================
00011B70                            
00011B70                            Yad_Move:
00011B70 5368 0030                  		subq.w	#1,yad_timedelay(a0) ; subtract 1 from pause time
00011B74 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00011B76 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011B7A 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object
00011B80 117C 0001 001C             		move.b	#1,obAnim(a0)
00011B86 0868 0000 0022             		bchg	#0,obStatus(a0)
00011B8C 6600                       		bne.s	locret_F8E2
00011B8E 4468 0010                  		neg.w	obVelX(a0)	; change direction
00011B92                            
00011B92                            	locret_F8E2:
00011B92 4E75                       		rts	
00011B94                            ; ===========================================================================
00011B94                            
00011B94                            Yad_FixToFloor:
00011B94 6100 DC02                  		bsr.w	SpeedToPos
00011B98 6100 0000                  		bsr.w	ObjFloorDist
00011B9C 0C41 FFF8                  		cmpi.w	#-8,d1
00011BA0 6D00                       		blt.s	Yad_Pause
00011BA2 0C41 000C                  		cmpi.w	#$C,d1
00011BA6 6C00                       		bge.s	Yad_Pause
00011BA8 D368 000C                  		add.w	d1,obY(a0)	; match	object's position to the floor
00011BAC 6100 FF0A                  		bsr.w	Yad_ChkWall
00011BB0 6600                       		bne.s	Yad_Pause
00011BB2 4E75                       		rts	
00011BB4                            ; ===========================================================================
00011BB4                            
00011BB4                            Yad_Pause:
00011BB4 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00011BB8 317C 003B 0030             		move.w	#59,yad_timedelay(a0) ; set pause time to 1 second
00011BBE 317C 0000 0010             		move.w	#0,obVelX(a0)
00011BC4 117C 0000 001C             		move.b	#0,obAnim(a0)
00011BCA 4E75                       		rts	
00011BCA 4E75                       		rts	
00011BCC                            		include	"_anim\Yadrin.asm"
00011BCC                            ; ---------------------------------------------------------------------------
00011BCC                            ; Animation script - Yadrin enemy
00011BCC                            ; ---------------------------------------------------------------------------
00011BCC 0000                       Ani_Yad:	dc.w @stand-Ani_Yad
00011BCE 0000                       		dc.w @walk-Ani_Yad
00011BD0                            
00011BD0 0800 FF                    @stand:		dc.b 8,	0, afEnd
00011BD4 00                         		even
00011BD4 0800 0002 0000 0101 0103+  @walk:		dc.b 8, 0, 0, 2, 0, 0, 1, 1, 1, 3, 1, 1, 1, afEnd
00011BE2                            		even
00011BE2                            		even
00011BE2                            Map_Yad:	include	"_maps\Yadrin.asm"
00011BE2                            ; --------------------------------------------------------------------------------
00011BE2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011BE2                            ; --------------------------------------------------------------------------------
00011BE2                            
00011BE2                            SME_4WhIu:	
00011BE2 0000 0000                  		dc.w SME_4WhIu_C-SME_4WhIu, SME_4WhIu_3A-SME_4WhIu	
00011BE6 0000 0000                  		dc.w SME_4WhIu_68-SME_4WhIu, SME_4WhIu_A5-SME_4WhIu	
00011BEA 0000 0000                  		dc.w SME_4WhIu_E2-SME_4WhIu, SME_4WhIu_FC-SME_4WhIu	
00011BEE 09                         SME_4WhIu_C:	dc.b 9	
00011BEF F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011BF4 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011BF9 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011BFE FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011C03 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011C08 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011C0D FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011C12 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011C17 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011C1C 09                         SME_4WhIu_3A:	dc.b 9	
00011C1D F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011C22 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011C27 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011C2C FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011C31 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011C36 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011C3B F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011C40 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011C45 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011C4A 0C                         SME_4WhIu_68:	dc.b $C	
00011C4B EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011C50 FB00 601D FC               		dc.b $FB, 0, $60, $1D, $FC	
00011C55 FB00 6020 04               		dc.b $FB, 0, $60, $20, 4	
00011C5A 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011C5F FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011C64 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011C69 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011C6E FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011C73 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011C78 F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011C7D 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011C82 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011C87 0C                         SME_4WhIu_A5:	dc.b $C	
00011C88 F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011C8D FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011C92 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011C97 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011C9C 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011CA1 F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011CA6 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011CAB EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011CB0 FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011CB5 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011CBA 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011CBF 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011CC4 05                         SME_4WhIu_E2:	dc.b 5	
00011CC5 F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011CCA 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011CCF EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011CD4 F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011CD9 0409 0031 FC               		dc.b 4, 9, 0, $31, $FC	
00011CDE 05                         SME_4WhIu_FC:	dc.b 5	
00011CDF F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011CE4 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011CE9 EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011CEE F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011CF3 0409 0037 FC               		dc.b 4, 9, 0, $37, $FC	
00011CF8                            		even
00011CF8                            		even
00011CF8                            
00011CF8                            		include	"_incObj\sub SolidObject.asm"
00011CF8                            ; ---------------------------------------------------------------------------
00011CF8                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00011CF8                            ;
00011CF8                            ; input:
00011CF8                            ;	d1 = width
00011CF8                            ;	d2 = height / 2 (when jumping)
00011CF8                            ;	d3 = height / 2 (when walking)
00011CF8                            ;	d4 = x-axis position
00011CF8                            ; ---------------------------------------------------------------------------
00011CF8                            
00011CF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011CF8                            
00011CF8                            
00011CF8                            SolidObject:
00011CF8 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic standing on the object?
00011CFC 6700 0000                  		beq.w	Solid_ChkEnter	; if not, branch
00011D00 3401                       		move.w	d1,d2
00011D02 D442                       		add.w	d2,d2
00011D04 43F8 D000                  		lea	(v_player).w,a1
00011D08 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011D0E 6600                       		bne.s	@leave		; if yes, branch
00011D10 3029 0008                  		move.w	obX(a1),d0
00011D14 9068 0008                  		sub.w	obX(a0),d0
00011D18 D041                       		add.w	d1,d0
00011D1A 6B00                       		bmi.s	@leave		; if Sonic moves off the left, branch
00011D1C B042                       		cmp.w	d2,d0		; has Sonic moved off the right?
00011D1E 6500                       		bcs.s	@stand		; if not, branch
00011D20                            
00011D20                            	@leave:
00011D20 08A9 0003 0022             		bclr	#3,obStatus(a1)	; clear Sonic's standing flag
00011D26 08A8 0003 0022             		bclr	#3,obStatus(a0)	; clear object's standing flag
00011D2C 4228 0025                  		clr.b	obSolid(a0)
00011D30 7800                       		moveq	#0,d4
00011D32 4E75                       		rts	
00011D34                            
00011D34                            	@stand:
00011D34 3404                       		move.w	d4,d2
00011D36 4EB9 0000 92F6             		jsr	MvSonicOnPtfm
00011D3C 7800                       		moveq	#0,d4
00011D3E 4E75                       		rts	
00011D40                            ; ===========================================================================
00011D40                            
00011D40                            SolidObject71:
00011D40 4A28 0025                  		tst.b	obSolid(a0)
00011D44 6700 0000                  		beq.w	loc_FAD0
00011D48 3401                       		move.w	d1,d2
00011D4A D442                       		add.w	d2,d2
00011D4C 43F8 D000                  		lea	(v_player).w,a1
00011D50 0829 0001 0022             		btst	#1,obStatus(a1)
00011D56 6600                       		bne.s	@leave
00011D58 3029 0008                  		move.w	obX(a1),d0
00011D5C 9068 0008                  		sub.w	obX(a0),d0
00011D60 D041                       		add.w	d1,d0
00011D62 6B00                       		bmi.s	@leave
00011D64 B042                       		cmp.w	d2,d0
00011D66 6500                       		bcs.s	@stand
00011D68                            
00011D68                            	@leave:
00011D68 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011D6E 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011D74 4228 0025                  		clr.b	obSolid(a0)
00011D78 7800                       		moveq	#0,d4
00011D7A 4E75                       		rts	
00011D7C                            
00011D7C                            	@stand:
00011D7C 3404                       		move.w	d4,d2
00011D7E 4EB9 0000 92F6             		jsr	MvSonicOnPtfm
00011D84 7800                       		moveq	#0,d4
00011D86 4E75                       		rts	
00011D88                            ; ===========================================================================
00011D88                            
00011D88                            SolidObject2F:
00011D88 43F8 D000                  		lea	(v_player).w,a1
00011D8C 4A28 0001                  		tst.b	obRender(a0)
00011D90 6A00 0000                  		bpl.w	Solid_Ignore
00011D94 3029 0008                  		move.w	obX(a1),d0
00011D98 9068 0008                  		sub.w	obX(a0),d0
00011D9C D041                       		add.w	d1,d0
00011D9E 6B00 0000                  		bmi.w	Solid_Ignore
00011DA2 3601                       		move.w	d1,d3
00011DA4 D643                       		add.w	d3,d3
00011DA6 B043                       		cmp.w	d3,d0
00011DA8 6200 0000                  		bhi.w	Solid_Ignore
00011DAC 3A00                       		move.w	d0,d5
00011DAE 0828 0000 0001             		btst	#0,obRender(a0)	; is object horizontally flipped?
00011DB4 6700                       		beq.s	@notflipped	; if not, branch
00011DB6 4645                       		not.w	d5
00011DB8 DA43                       		add.w	d3,d5
00011DBA                            
00011DBA                            	@notflipped:
00011DBA E24D                       		lsr.w	#1,d5
00011DBC 7600                       		moveq	#0,d3
00011DBE 1632 5000                  		move.b	(a2,d5.w),d3
00011DC2 9612                       		sub.b	(a2),d3
00011DC4 3A28 000C                  		move.w	obY(a0),d5
00011DC8 9A43                       		sub.w	d3,d5
00011DCA 1629 0016                  		move.b	obHeight(a1),d3
00011DCE 4883                       		ext.w	d3
00011DD0 D443                       		add.w	d3,d2
00011DD2 3629 000C                  		move.w	obY(a1),d3
00011DD6 9645                       		sub.w	d5,d3
00011DD8 5843                       		addq.w	#4,d3
00011DDA D642                       		add.w	d2,d3
00011DDC 6B00 0000                  		bmi.w	Solid_Ignore
00011DE0 3802                       		move.w	d2,d4
00011DE2 D844                       		add.w	d4,d4
00011DE4 B644                       		cmp.w	d4,d3
00011DE6 6400 0000                  		bcc.w	Solid_Ignore
00011DEA 6000 0000                  		bra.w	loc_FB0E
00011DEE                            ; ===========================================================================
00011DEE                            
00011DEE                            Solid_ChkEnter:
00011DEE 4A28 0001                  		tst.b	obRender(a0)
00011DF2 6A00 0000                  		bpl.w	Solid_Ignore
00011DF6                            
00011DF6                            loc_FAD0:
00011DF6 43F8 D000                  		lea	(v_player).w,a1
00011DFA 3029 0008                  		move.w	obX(a1),d0
00011DFE 9068 0008                  		sub.w	obX(a0),d0
00011E02 D041                       		add.w	d1,d0
00011E04 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves off the left, branch
00011E08 3601                       		move.w	d1,d3
00011E0A D643                       		add.w	d3,d3
00011E0C B043                       		cmp.w	d3,d0		; has Sonic moved off the right?
00011E0E 6200 0000                  		bhi.w	Solid_Ignore	; if yes, branch
00011E12 1629 0016                  		move.b	obHeight(a1),d3
00011E16 4883                       		ext.w	d3
00011E18 D443                       		add.w	d3,d2
00011E1A 3629 000C                  		move.w	obY(a1),d3
00011E1E 9668 000C                  		sub.w	obY(a0),d3
00011E22 5843                       		addq.w	#4,d3
00011E24 D642                       		add.w	d2,d3
00011E26 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves above, branch
00011E2A 3802                       		move.w	d2,d4
00011E2C D844                       		add.w	d4,d4
00011E2E B644                       		cmp.w	d4,d3		; has Sonic moved below?
00011E30 6400 0000                  		bcc.w	Solid_Ignore	; if yes, branch
00011E34                            
00011E34                            loc_FB0E:
00011E34 4A38 F7C8                  		tst.b	(f_lockmulti).w	; are controls locked?
00011E38 6B00 0000                  		bmi.w	Solid_Ignore	; if yes, branch
00011E3C 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic dying?
00011E42 6400 0000                  			bcc.w	Solid_Debug
00011E46 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00011E4A 6600 0000                  		bne.w	Solid_Debug	; if yes, branch
00011E4E 3A00                       		move.w	d0,d5
00011E50 B240                       		cmp.w	d0,d1		; is Sonic right of centre of object?
00011E52 6400                       		bcc.s	@isright	; if yes, branch
00011E54 D241                       		add.w	d1,d1
00011E56 9041                       		sub.w	d1,d0
00011E58 3A00                       		move.w	d0,d5
00011E5A 4445                       		neg.w	d5
00011E5C                            
00011E5C                            	@isright:
00011E5C 3203                       		move.w	d3,d1
00011E5E B443                       		cmp.w	d3,d2		; is Sonic below centre of object?
00011E60 6400                       		bcc.s	@isbelow	; if yes, branch
00011E62                            
00011E62 5943                       		subq.w	#4,d3
00011E64 9644                       		sub.w	d4,d3
00011E66 3203                       		move.w	d3,d1
00011E68 4441                       		neg.w	d1
00011E6A                            
00011E6A                            	@isbelow:
00011E6A BA41                       		cmp.w	d1,d5
00011E6C 6200 0000                  		bhi.w	Solid_TopBottom	; if Sonic hits top or bottom, branch
00011E70 0C41 0004                  		cmpi.w	#4,d1
00011E74 6300                       		bls.s	Solid_SideAir
00011E76 4A40                       		tst.w	d0		; where is Sonic?
00011E78 6700                       		beq.s	Solid_Centre	; if inside the object, branch
00011E7A 6B00                       		bmi.s	Solid_Right	; if right of the object, branch
00011E7C 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving left?
00011E80 6B00                       		bmi.s	Solid_Centre	; if yes, branch
00011E82 6000                       		bra.s	Solid_Left
00011E84                            ; ===========================================================================
00011E84                            
00011E84                            Solid_Right:
00011E84 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving right?
00011E88 6A00                       		bpl.s	Solid_Centre	; if yes, branch
00011E8A                            
00011E8A                            Solid_Left:
00011E8A 337C 0000 0020             		move.w	#0,obInertia(a1)
00011E90 337C 0000 0010             		move.w	#0,obVelX(a1)	; stop Sonic moving
00011E96                            
00011E96                            Solid_Centre:
00011E96 9169 0008                  		sub.w	d0,obX(a1)	; correct Sonic's position
00011E9A 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011EA0 6600                       		bne.s	Solid_SideAir	; if yes, branch
00011EA2 08E9 0005 0022             		bset	#5,obStatus(a1)	; make Sonic push object
00011EA8 08E8 0005 0022             		bset	#5,obStatus(a0)	; make object be pushed
00011EAE 7801                       		moveq	#1,d4		; return side collision
00011EB0 4E75                       		rts	
00011EB2                            ; ===========================================================================
00011EB2                            
00011EB2                            Solid_SideAir:
00011EB2 6100                       		bsr.s	Solid_NotPushing
00011EB4 7801                       		moveq	#1,d4		; return side collision
00011EB6 4E75                       		rts	
00011EB8                            ; ===========================================================================
00011EB8                            
00011EB8                            Solid_Ignore:
00011EB8 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing?
00011EBE 6700                       		beq.s	Solid_Debug	; if not, branch
00011EC0 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
00011EC6 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011EC8 0C29 0000 001C             		cmpi.b	#id_Drown,obAnim(a1)	; is Sonic in his drowning animation?
00011ECE 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011ED0 0C29 0000 001C             		cmpi.b	#id_Hurt,obAnim(a1)	; is Sonic in his hurt animation?
00011ED6 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011ED8 337C 0000 001C             		move.w	#id_Run,obAnim(a1) ; use running animation
00011EDE                            
00011EDE                            
00011EDE                            Solid_NotPushing:
00011EDE 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag
00011EE4 08A9 0005 0022             		bclr	#5,obStatus(a1)	; clear Sonic's pushing flag
00011EEA                            
00011EEA                            Solid_Debug:
00011EEA 7800                       		moveq	#0,d4		; return no collision
00011EEC 4E75                       		rts	
00011EEE                            ; ===========================================================================
00011EEE                            
00011EEE                            Solid_TopBottom:
00011EEE 4A43                       		tst.w	d3		; is Sonic below the object?
00011EF0 6B00                       		bmi.s	Solid_Below	; if yes, branch
00011EF2 0C43 0010                  		cmpi.w	#$10,d3		; has Sonic landed on the object?
00011EF6 6500                       		bcs.s	Solid_Landed	; if yes, branch
00011EF8 60BE                       		bra.s	Solid_Ignore
00011EFA                            ; ===========================================================================
00011EFA                            
00011EFA                            Solid_Below:
00011EFA 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving vertically?
00011EFE 6700                       		beq.s	Solid_Squash	; if not, branch
00011F00 6A00                       		bpl.s	Solid_TopBtmAir	; if moving downwards, branch
00011F02 4A43                       		tst.w	d3		; is Sonic above the object?
00011F04 6A00                       		bpl.s	Solid_TopBtmAir	; if yes, branch
00011F06 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011F0A 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic moving
00011F10                            
00011F10                            Solid_TopBtmAir:
00011F10 78FF                       		moveq	#-1,d4
00011F12 4E75                       		rts	
00011F14                            ; ===========================================================================
00011F14                            
00011F14                            Solid_Squash:
00011F14 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011F1A 66F4                       		bne.s	Solid_TopBtmAir	; if yes, branch
00011F1C 2F08                       		move.l	a0,-(sp)
00011F1E 2049                       		movea.l	a1,a0
00011F20 4EB9 0000 0000             		jsr	(KillSonic).l	; kill Sonic
00011F26 205F                       		movea.l	(sp)+,a0
00011F28 78FF                       		moveq	#-1,d4
00011F2A 4E75                       		rts	
00011F2C                            ; ===========================================================================
00011F2C                            
00011F2C                            Solid_Landed:
00011F2C 5943                       		subq.w	#4,d3
00011F2E 7200                       		moveq	#0,d1
00011F30 1228 0014                  		move.b	obActWid(a0),d1
00011F34 3401                       		move.w	d1,d2
00011F36 D442                       		add.w	d2,d2
00011F38 D269 0008                  		add.w	obX(a1),d1
00011F3C 9268 0008                  		sub.w	obX(a0),d1
00011F40 6B00                       		bmi.s	Solid_Miss	; if Sonic is right of object, branch
00011F42 B242                       		cmp.w	d2,d1		; is Sonic left of object?
00011F44 6400                       		bcc.s	Solid_Miss	; if yes, branch
00011F46 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving upwards?
00011F4A 6B00                       		bmi.s	Solid_Miss	; if yes, branch
00011F4C 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011F50 5369 000C                  		subq.w	#1,obY(a1)
00011F54 6100                       		bsr.s	Solid_ResetFloor
00011F56 117C 0002 0025             		move.b	#2,obSolid(a0) ; set standing flags
00011F5C 08E8 0003 0022             		bset	#3,obStatus(a0)
00011F62 78FF                       		moveq	#-1,d4		; return top/bottom collision
00011F64 4E75                       		rts	
00011F66                            ; ===========================================================================
00011F66                            
00011F66                            Solid_Miss:
00011F66 7800                       		moveq	#0,d4
00011F68 4E75                       		rts	
00011F6A                            ; End of function SolidObject
00011F6A                            
00011F6A                            
00011F6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011F6A                            
00011F6A                            
00011F6A                            Solid_ResetFloor:
00011F6A 0829 0003 0022             		btst	#3,obStatus(a1)	; is Sonic standing on something?
00011F70 6700                       		beq.s	@notonobj	; if not, branch
00011F72                            
00011F72 7000                       		moveq	#0,d0
00011F74 1029 003D                  		move.b	$3D(a1),d0	; get object being stood on
00011F78 ED48                       		lsl.w	#6,d0
00011F7A 0680 00FF D000             		addi.l	#(v_objspace&$FFFFFF),d0
00011F80 2440                       		movea.l	d0,a2
00011F82 08AA 0003 0022             		bclr	#3,obStatus(a2)	; clear object's standing flags
00011F88 422A 0025                  		clr.b	obSolid(a2)
00011F8C                            
00011F8C                            	@notonobj:
00011F8C 3008                       		move.w	a0,d0
00011F8E 0440 D000                  		subi.w	#$D000,d0
00011F92 EC48                       		lsr.w	#6,d0
00011F94 0240 007F                  		andi.w	#$7F,d0
00011F98 1340 003D                  		move.b	d0,$3D(a1)	; set object being stood on
00011F9C 137C 0000 0026             		move.b	#0,obAngle(a1)	; clear Sonic's angle
00011FA2 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic
00011FA8 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00011FAE 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011FB4 6700                       		beq.s	@notinair	; if not, branch
00011FB6 2F08                       		move.l	a0,-(sp)
00011FB8 2049                       		movea.l	a1,a0
00011FBA 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l ; reset Sonic as if on floor
00011FC0 205F                       		movea.l	(sp)+,a0
00011FC2                            
00011FC2                            	@notinair:
00011FC2 08E9 0003 0022             		bset	#3,obStatus(a1)	; set object standing flag
00011FC8 08E8 0003 0022             		bset	#3,obStatus(a0)	; set Sonic standing on object flag
00011FCE 4E75                       		rts	
00011FD0                            ; End of function Solid_ResetFloor
00011FD0                            ; End of function Solid_ResetFloor
00011FD0                            
00011FD0                            		include	"_incObj\51 Smashable Green Block.asm"
00011FD0                            ; ---------------------------------------------------------------------------
00011FD0                            ; Object 51 - smashable	green block (MZ)
00011FD0                            ; ---------------------------------------------------------------------------
00011FD0                            
00011FD0                            SmashBlock:
00011FD0 7000                       		moveq	#0,d0
00011FD2 1028 0024                  		move.b	obRoutine(a0),d0
00011FD6 323B 0000                  		move.w	Smab_Index(pc,d0.w),d1
00011FDA 4EBB 1000                  		jsr	Smab_Index(pc,d1.w)
00011FDE 6000 F880                  		bra.w	RememberState
00011FE2                            ; ===========================================================================
00011FE2 0000                       Smab_Index:	dc.w Smab_Main-Smab_Index
00011FE4 0000                       		dc.w Smab_Solid-Smab_Index
00011FE6 0000                       		dc.w Smab_Points-Smab_Index
00011FE8                            ; ===========================================================================
00011FE8                            
00011FE8                            Smab_Main:	; Routine 0
00011FE8 5428 0024                  		addq.b	#2,obRoutine(a0)
00011FEC 217C 0000 0000 0004        		move.l	#Map_Smab,obMap(a0)
00011FF4 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00011FFA 117C 0004 0001             		move.b	#4,obRender(a0)
00012000 117C 0010 0014             		move.b	#$10,obActWid(a0)
00012006 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001200C 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00012012                            
00012012                            Smab_Solid:	; Routine 2
00012012                            
00012012 =00000032                  sonicAniFrame:	equ $32		; Sonic's current animation number
00012012 =00000034                  @count:		equ $34		; number of blocks hit + previous stuff
00012012                            
00012012 3178 F7D0 0034             		move.w	(v_itembonus).w,$34(a0)
00012018 1178 D01C 0032             		move.b	(v_player+obAnim).w,sonicAniFrame(a0) ; load Sonic's animation number
0001201E 323C 001B                  		move.w	#$1B,d1
00012022 343C 0010                  		move.w	#$10,d2
00012026 363C 0011                  		move.w	#$11,d3
0001202A 3828 0008                  		move.w	obX(a0),d4
0001202E 6100 FCC8                  		bsr.w	SolidObject
00012032 0828 0003 0022             		btst	#3,obStatus(a0)	; has Sonic landed on the block?
00012038 6600                       		bne.s	@smash		; if yes, branch
0001203A                            
0001203A                            	@notspinning:
0001203A 4E75                       		rts	
0001203C                            ; ===========================================================================
0001203C                            
0001203C                            @smash:
0001203C 0C28 0000 0032             		cmpi.b	#id_Roll,sonicAniFrame(a0) ; is Sonic rolling/jumping?
00012042 66F6                       		bne.s	@notspinning	; if not, branch
00012044 31E8 0034 F7D0             		move.w	@count(a0),(v_itembonus).w
0001204A 08E9 0002 0022             		bset	#2,obStatus(a1)
00012050 137C 000E 0016             		move.b	#$E,obHeight(a1)
00012056 137C 0007 0017             		move.b	#7,obWidth(a1)
0001205C 137C 0000 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic roll
00012062 337C FD00 0012             		move.w	#-$300,obVelY(a1) ; rebound Sonic
00012068 08E9 0001 0022             		bset	#1,obStatus(a1)
0001206E 08A9 0003 0022             		bclr	#3,obStatus(a1)
00012074 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001207A 08A8 0003 0022             		bclr	#3,obStatus(a0)
00012080 4228 0025                  		clr.b	obSolid(a0)
00012084 117C 0001 001A             		move.b	#1,obFrame(a0)
0001208A 49F9 0000 0000             		lea	(Smab_Speeds).l,a4 ; load broken fragment speed data
00012090 7203                       		moveq	#3,d1		; set number of	fragments to 4
00012092 343C 0038                  		move.w	#$38,d2
00012096 6100 D2C4                  		bsr.w	SmashObject
0001209A 6100 DCAA                  		bsr.w	FindFreeObj
0001209E 6600                       		bne.s	Smab_Points
000120A0 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
000120A4 3368 0008 0008             		move.w	obX(a0),obX(a1)
000120AA 3368 000C 000C             		move.w	obY(a0),obY(a1)
000120B0 3438 F7D0                  		move.w	(v_itembonus).w,d2
000120B4 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; increment bonus counter
000120B8 0C42 0006                  		cmpi.w	#6,d2		; have fewer than 3 blocks broken?
000120BC 6500                       		bcs.s	@bonus		; if yes, branch
000120BE 7406                       		moveq	#6,d2		; set cap for points
000120C0                            
000120C0                            	@bonus:
000120C0 7000                       		moveq	#0,d0
000120C2 303B 2000                  		move.w	Smab_Scores(pc,d2.w),d0
000120C6 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 blocks been smashed?
000120CC 6500                       		bcs.s	@givepoints	; if not, branch
000120CE 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
000120D2 740A                       		moveq	#10,d2
000120D4                            
000120D4                            	@givepoints:
000120D4 4EB9 0000 0000             		jsr	(AddPoints).l
000120DA E24A                       		lsr.w	#1,d2
000120DC 1342 001A                  		move.b	d2,obFrame(a1)
000120E0                            
000120E0                            Smab_Points:	; Routine 4
000120E0 6100 D6B6                  		bsr.w	SpeedToPos
000120E4 0668 0038 0012             		addi.w	#$38,obVelY(a0)
000120EA 6100 D6C0                  		bsr.w	DisplaySprite
000120EE 4A28 0001                  		tst.b	obRender(a0)
000120F2 6A00 D6F8                  		bpl.w	DeleteObject
000120F6 4E75                       		rts	
000120F8                            ; ===========================================================================
000120F8 FE00 FE00                  Smab_Speeds:	dc.w -$200, -$200	; x-speed, y-speed
000120FC FF00 FF00                  		dc.w -$100, -$100
00012100 0200 FE00                  		dc.w $200, -$200
00012104 0100 FF00                  		dc.w $100, -$100
00012108                            
00012108 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
00012108 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
00012110                            Map_Smab:	include	"_maps\Smashable Green Block.asm"
00012110                            ; --------------------------------------------------------------------------------
00012110                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012110                            ; --------------------------------------------------------------------------------
00012110                            
00012110                            SME_wdHTM:	
00012110 0000 0000                  		dc.w SME_wdHTM_6-SME_wdHTM, SME_wdHTM_1B-SME_wdHTM	
00012114 0000                       		dc.w SME_wdHTM_30-SME_wdHTM	
00012116 04                         SME_wdHTM_6:	dc.b 4	
00012117 F005 0000 00               		dc.b $F0, 5, 0, 0, 0	
0001211C 0005 0000 00               		dc.b 0, 5, 0, 0, 0	
00012121 0005 0000 F0               		dc.b 0, 5, 0, 0, $F0	
00012126 F005 0000 F0               		dc.b $F0, 5, 0, 0, $F0	
0001212B 04                         SME_wdHTM_1B:	dc.b 4	
0001212C F005 0000 00               		dc.b $F0, 5, 0, 0, 0	
00012131 0005 0000 00               		dc.b 0, 5, 0, 0, 0	
00012136 0005 0000 F0               		dc.b 0, 5, 0, 0, $F0	
0001213B F005 0000 F0               		dc.b $F0, 5, 0, 0, $F0	
00012140 00                         SME_wdHTM_30:	dc.b 0	
00012142 00                         		even
00012142 00                         		even
00012142                            
00012142                            		include	"_incObj\52 Moving Blocks.asm"
00012142                            ; ---------------------------------------------------------------------------
00012142                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00012142                            ; ---------------------------------------------------------------------------
00012142                            
00012142                            MovingBlock:
00012142 7000                       		moveq	#0,d0
00012144 1028 0024                  		move.b	obRoutine(a0),d0
00012148 323B 0000                  		move.w	MBlock_Index(pc,d0.w),d1
0001214C 4EFB 1000                  		jmp	MBlock_Index(pc,d1.w)
00012150                            ; ===========================================================================
00012150 0000                       MBlock_Index:	dc.w MBlock_Main-MBlock_Index
00012152 0000                       		dc.w MBlock_Platform-MBlock_Index
00012154 0000                       		dc.w MBlock_StandOn-MBlock_Index
00012156                            
00012156 =00000030                  mblock_origX:	equ $30
00012156 =00000032                  mblock_origY:	equ $32
00012156                            
00012156 1000                       MBlock_Var:	dc.b $10, 0		; object width,	frame number
00012158 2001                       		dc.b $20, 1
0001215A 2002                       		dc.b $20, 2
0001215C 4003                       		dc.b $40, 3
0001215E 3004                       		dc.b $30, 4
00012160                            ; ===========================================================================
00012160                            
00012160                            MBlock_Main:	; Routine 0
00012160 5428 0024                  		addq.b	#2,obRoutine(a0)
00012164 217C 0000 0000 0004        		move.l	#Map_MBlock,obMap(a0)
0001216C 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00012172 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012178 6600                       		bne.s	loc_FE44
0001217A 217C 0000 0000 0004        		move.l	#Map_MBlockLZ,obMap(a0) ; LZ specific code
00012182 317C 43BC 0002             		move.w	#$43BC,obGfx(a0)
00012188 117C 0007 0016             		move.b	#7,obHeight(a0)
0001218E                            
0001218E                            loc_FE44:
0001218E 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00012194 6600                       		bne.s	loc_FE60
00012196 317C 22C0 0002             		move.w	#$22C0,obGfx(a0) ; SBZ specific code (object 5228)
0001219C 0C28 0028 0028             		cmpi.b	#$28,obSubtype(a0) ; is object 5228 ?
000121A2 6700                       		beq.s	loc_FE60	; if yes, branch
000121A4 317C 4460 0002             		move.w	#$4460,obGfx(a0) ; SBZ specific code (object 523x)
000121AA                            
000121AA                            loc_FE60:
000121AA 117C 0004 0001             		move.b	#4,obRender(a0)
000121B0 7000                       		moveq	#0,d0
000121B2 1028 0028                  		move.b	obSubtype(a0),d0
000121B6 E648                       		lsr.w	#3,d0
000121B8 0240 001E                  		andi.w	#$1E,d0
000121BC 45FB 0098                  		lea	MBlock_Var(pc,d0.w),a2
000121C0 115A 0014                  		move.b	(a2)+,obActWid(a0)
000121C4 115A 001A                  		move.b	(a2)+,obFrame(a0)
000121C8 317C 0200 0018             		move.w	#$200,obPriority(a0)
000121CE 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
000121D4 3168 000C 0032             		move.w	obY(a0),mblock_origY(a0)
000121DA 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
000121E0                            
000121E0                            MBlock_Platform: ; Routine 2
000121E0 6100 0000                  		bsr.w	MBlock_Move
000121E4 7200                       		moveq	#0,d1
000121E6 1228 0014                  		move.b	obActWid(a0),d1
000121EA 4EB9 0000 8C24             		jsr	(PlatformObject).l
000121F0 6000                       		bra.s	MBlock_ChkDel
000121F2                            ; ===========================================================================
000121F2                            
000121F2                            MBlock_StandOn:	; Routine 4
000121F2 7200                       		moveq	#0,d1
000121F4 1228 0014                  		move.b	obActWid(a0),d1
000121F8 4EB9 0000 8D98             		jsr	(ExitPlatform).l
000121FE 3F28 0008                  		move.w	obX(a0),-(sp)
00012202 6100 0000                  		bsr.w	MBlock_Move
00012206 341F                       		move.w	(sp)+,d2
00012208 4EB9 0000 9302             		jsr	(MvSonicOnPtfm2).l
0001220E                            
0001220E                            MBlock_ChkDel:
0001222C 6000 D57E                  		bra.w	DisplaySprite
00012230                            ; ===========================================================================
00012230                            
00012230                            MBlock_Move:
00012230 7000                       		moveq	#0,d0
00012232 1028 0028                  		move.b	obSubtype(a0),d0
00012236 0240 000F                  		andi.w	#$F,d0
0001223A D040                       		add.w	d0,d0
0001223C 323B 0000                  		move.w	MBlock_TypeIndex(pc,d0.w),d1
00012240 4EFB 1000                  		jmp	MBlock_TypeIndex(pc,d1.w)
00012244                            ; ===========================================================================
00012244 0000 0000                  MBlock_TypeIndex:dc.w MBlock_Type00-MBlock_TypeIndex, MBlock_Type01-MBlock_TypeIndex
00012248 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type03-MBlock_TypeIndex
0001224C 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type05-MBlock_TypeIndex
00012250 0000 0000                  		dc.w MBlock_Type06-MBlock_TypeIndex, MBlock_Type07-MBlock_TypeIndex
00012254 0000 0000                  		dc.w MBlock_Type08-MBlock_TypeIndex, MBlock_Type02-MBlock_TypeIndex
00012258 0000                       		dc.w MBlock_Type0A-MBlock_TypeIndex
0001225A                            ; ===========================================================================
0001225A                            
0001225A                            MBlock_Type00:
0001225A 4E75                       		rts	
0001225C                            ; ===========================================================================
0001225C                            
0001225C                            MBlock_Type01:
0001225C 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012260 323C 0060                  		move.w	#$60,d1
00012264 0828 0000 0022             		btst	#0,obStatus(a0)
0001226A 6700                       		beq.s	loc_FF26
0001226C 4440                       		neg.w	d0
0001226E D041                       		add.w	d1,d0
00012270                            
00012270                            loc_FF26:
00012270 3228 0030                  		move.w	mblock_origX(a0),d1
00012274 9240                       		sub.w	d0,d1
00012276 3141 0008                  		move.w	d1,obX(a0)
0001227A 4E75                       		rts	
0001227C                            ; ===========================================================================
0001227C                            
0001227C                            MBlock_Type02:
0001227C 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; is Sonic standing on the platform?
00012282 6600                       		bne.s	MBlock_02_Wait
00012284 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
00012288                            
00012288                            MBlock_02_Wait:
00012288 4E75                       		rts	
0001228A                            ; ===========================================================================
0001228A                            
0001228A                            MBlock_Type03:
0001228A 7600                       		moveq	#0,d3
0001228C 1628 0014                  		move.b	obActWid(a0),d3
00012290 6100 0000                  		bsr.w	ObjHitWallRight
00012294 4A41                       		tst.w	d1		; has the platform hit a wall?
00012296 6B00                       		bmi.s	MBlock_03_End	; if yes, branch
00012298 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
0001229C 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
000122A2 4E75                       		rts	
000122A4                            ; ===========================================================================
000122A4                            
000122A4                            MBlock_03_End:
000122A4 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving	type)
000122A8 4E75                       		rts	
000122AA                            ; ===========================================================================
000122AA                            
000122AA                            MBlock_Type05:
000122AA 7600                       		moveq	#0,d3
000122AC 1628 0014                  		move.b	obActWid(a0),d3
000122B0 6100 0000                  		bsr.w	ObjHitWallRight
000122B4 4A41                       		tst.w	d1		; has the platform hit a wall?
000122B6 6B00                       		bmi.s	MBlock_05_End	; if yes, branch
000122B8 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
000122BC 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
000122C2 4E75                       		rts	
000122C4                            ; ===========================================================================
000122C4                            
000122C4                            MBlock_05_End:
000122C4 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 06 (falling)
000122C8 4E75                       		rts	
000122CA                            ; ===========================================================================
000122CA                            
000122CA                            MBlock_Type06:
000122CA 6100 D4CC                  		bsr.w	SpeedToPos
000122CE 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make the platform fall
000122D4 6100 0000                  		bsr.w	ObjFloorDist
000122D8 4A41                       		tst.w	d1		; has platform hit the floor?
000122DA 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000122DE D368 000C                  		add.w	d1,obY(a0)
000122E2 4268 0012                  		clr.w	obVelY(a0)	; stop platform	falling
000122E6 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving)
000122EA                            
000122EA                            locret_FFA0:
000122EA 4E75                       		rts	
000122EC                            ; ===========================================================================
000122EC                            
000122EC                            MBlock_Type07:
000122EC 4A38 F7E2                  		tst.b	(f_switch+2).w	; has switch number 02 been pressed?
000122F0 6700                       		beq.s	MBlock_07_ChkDel
000122F2 5728 0028                  		subq.b	#3,obSubtype(a0) ; if yes, change object type to 04
000122F6                            
000122F6                            MBlock_07_ChkDel:
000122F6 588F                       		addq.l	#4,sp
00012316 4E75                       		rts	
00012318                            ; ===========================================================================
00012318                            
00012318                            MBlock_Type08:
00012318 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
0001231C 323C 0080                  		move.w	#$80,d1
00012320 0828 0000 0022             		btst	#0,obStatus(a0)
00012326 6700                       		beq.s	loc_FFE2
00012328 4440                       		neg.w	d0
0001232A D041                       		add.w	d1,d0
0001232C                            
0001232C                            loc_FFE2:
0001232C 3228 0032                  		move.w	mblock_origY(a0),d1
00012330 9240                       		sub.w	d0,d1
00012332 3141 000C                  		move.w	d1,obY(a0)
00012336 4E75                       		rts	
00012338                            ; ===========================================================================
00012338                            
00012338                            MBlock_Type0A:
00012338 7600                       		moveq	#0,d3
0001233A 1628 0014                  		move.b	obActWid(a0),d3
0001233E D643                       		add.w	d3,d3
00012340 7208                       		moveq	#8,d1
00012342 0828 0000 0022             		btst	#0,obStatus(a0)
00012348 6700                       		beq.s	loc_10004
0001234A 4441                       		neg.w	d1
0001234C 4443                       		neg.w	d3
0001234E                            
0001234E                            loc_10004:
0001234E 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00012352 6600                       		bne.s	MBlock_0A_Back	; if yes, branch
00012354 3028 0008                  		move.w	obX(a0),d0
00012358 9068 0030                  		sub.w	mblock_origX(a0),d0
0001235C B043                       		cmp.w	d3,d0
0001235E 6700                       		beq.s	MBlock_0A_Wait
00012360 D368 0008                  		add.w	d1,obX(a0)	; move platform
00012364 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
0001236A 4E75                       		rts	
0001236C                            ; ===========================================================================
0001236C                            
0001236C                            MBlock_0A_Wait:
0001236C 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00012370 6600                       		bne.s	locret_1002E	; if time remains, branch
00012372 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00012378                            
00012378                            locret_1002E:
00012378 4E75                       		rts	
0001237A                            ; ===========================================================================
0001237A                            
0001237A                            MBlock_0A_Back:
0001237A 3028 0008                  		move.w	obX(a0),d0
0001237E 9068 0030                  		sub.w	mblock_origX(a0),d0
00012382 6700                       		beq.s	MBlock_0A_Reset
00012384 9368 0008                  		sub.w	d1,obX(a0)	; return platform to its original position
00012388 4E75                       		rts	
0001238A                            ; ===========================================================================
0001238A                            
0001238A                            MBlock_0A_Reset:
0001238A 4268 0036                  		clr.w	$36(a0)
0001238E 5328 0028                  		subq.b	#1,obSubtype(a0)
00012392 4E75                       		rts	
00012392 4E75                       		rts	
00012394                            Map_MBlock:	include	"_maps\Moving Blocks (MZ and SBZ).asm"
00012394                            ; ---------------------------------------------------------------------------
00012394                            ; Sprite mappings - moving blocks (MZ, SBZ)
00012394                            ; ---------------------------------------------------------------------------
00012394                            Map_MBlock_internal:
00012394 0000                       		dc.w @mz1-Map_MBlock_internal
00012396 0000                       		dc.w @mz2-Map_MBlock_internal
00012398 0000                       		dc.w @sbz-Map_MBlock_internal
0001239A 0000                       		dc.w @sbzwide-Map_MBlock_internal
0001239C 0000                       		dc.w @mz3-Map_MBlock_internal
0001239E 01                         @mz1:		dc.b 1
0001239F F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000123A4 02                         @mz2:		dc.b 2
000123A5 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000123AA F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000123AF 04                         @sbz:		dc.b 4
000123B0 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000123B5 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000123BA F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000123BF 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000123C4 04                         @sbzwide:	dc.b 4
000123C5 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000123CA F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000123CF F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000123D4 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000123D9 03                         @mz3:		dc.b 3
000123DA F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
000123DF F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000123E4 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
000123EA 00                         		even
000123EA 00                         		even
000123EA                            Map_MBlockLZ:	include	"_maps\Moving Blocks (LZ).asm"
000123EA                            ; ---------------------------------------------------------------------------
000123EA                            ; Sprite mappings - moving block (LZ)
000123EA                            ; ---------------------------------------------------------------------------
000123EA                            Map_MBlockLZ_internal:
000123EA 0000                       		dc.w @0-Map_MBlockLZ_internal
000123EC 01                         @0:		dc.b 1
000123ED F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
000123F2                            		even
000123F2                            		even
000123F2                            
000123F2                            		include	"_incObj\55 Basaran.asm"
000123F2                            ; ---------------------------------------------------------------------------
000123F2                            ; Object 55 - Basaran enemy (MZ)
000123F2                            ; ---------------------------------------------------------------------------
000123F2                            
000123F2                            Basaran:
000123F2 7000                       		moveq	#0,d0
000123F4 1028 0024                  		move.b	obRoutine(a0),d0
000123F8 323B 0000                  		move.w	Bas_Index(pc,d0.w),d1
000123FC 4EFB 1000                  		jmp	Bas_Index(pc,d1.w)
00012400                            ; ===========================================================================
00012400 0000                       Bas_Index:	dc.w Bas_Main-Bas_Index
00012402 0000                       		dc.w Bas_Action-Bas_Index
00012404                            ; ===========================================================================
00012404                            
00012404                            Bas_Main:	; Routine 0
00012404 5428 0024                  		addq.b	#2,obRoutine(a0)
00012408 217C 0000 0000 0004        		move.l	#Map_Bas,obMap(a0)
00012410 317C 84B8 0002             		move.w	#$84B8,obGfx(a0)
00012416 117C 0004 0001             		move.b	#4,obRender(a0)
0001241C 117C 000C 0016             		move.b	#$C,obHeight(a0)
00012422 317C 0100 0018             		move.w	#$100,obPriority(a0)
00012428 117C 000B 0020             		move.b	#$B,obColType(a0)
0001242E 117C 0010 0014             		move.b	#$10,obActWid(a0)
00012434                            
00012434                            Bas_Action:	; Routine 2
00012434 7000                       		moveq	#0,d0
00012436 1028 0025                  		move.b	ob2ndRout(a0),d0
0001243A 323B 0000                  		move.w	@index(pc,d0.w),d1
0001243E 4EBB 1000                  		jsr	@index(pc,d1.w)
00012442 43F9 0000 0000             		lea	(Ani_Bas).l,a1
00012448 6100 A418                  		bsr.w	AnimateSprite
0001244C 6000 F412                  		bra.w	RememberState
00012450                            ; ===========================================================================
00012450 0000                       @index:		dc.w @dropcheck-@index
00012452 0000                       		dc.w @dropfly-@index
00012454 0000                       		dc.w @flapsound-@index
00012456 0000                       		dc.w @flyup-@index
00012458                            ; ===========================================================================
00012458                            
00012458                            @dropcheck:
00012458 343C 0080                  		move.w	#$80,d2
0001245C 6100 0000                  		bsr.w	@chkdistance	; is Sonic < $80 pixels from basaran?
00012460 6400                       		bcc.s	@nodrop		; if not, branch
00012462 3038 D00C                  		move.w	(v_player+obY).w,d0
00012466 3140 0036                  		move.w	d0,$36(a0)
0001246A 9068 000C                  		sub.w	obY(a0),d0
0001246E 6500                       		bcs.s	@nodrop
00012470 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic < $80 pixels from basaran?
00012474 6400                       		bcc.s	@nodrop		; if not, branch
00012476 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
0001247A 6600                       		bne.s	@nodrop		; if yes, branch
0001247C                            
0001247C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012480 D007                       		add.b	d7,d0
00012482 0200 0007                  		andi.b	#7,d0
00012486 6600                       		bne.s	@nodrop
00012488 117C 0001 001C             		move.b	#1,obAnim(a0)
0001248E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012492                            
00012492                            	@nodrop:
00012492 4E75                       		rts	
00012494                            ; ===========================================================================
00012494                            
00012494                            @dropfly:
00012494 6100 D302                  		bsr.w	SpeedToPos
00012498 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make basaran fall
0001249E 343C 0080                  		move.w	#$80,d2
000124A2 6100 0000                  		bsr.w	@chkdistance
000124A6 3028 0036                  		move.w	$36(a0),d0
000124AA 9068 000C                  		sub.w	obY(a0),d0
000124AE 6500                       		bcs.s	@chkdel
000124B0 0C40 0010                  		cmpi.w	#$10,d0		; is basaran close to Sonic vertically?
000124B4 6400                       		bcc.s	@dropmore	; if not, branch
000124B6 3141 0010                  		move.w	d1,obVelX(a0)	; make basaran fly horizontally
000124BA 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop basaran falling
000124C0 117C 0002 001C             		move.b	#2,obAnim(a0)
000124C6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000124CA                            
000124CA                            	@dropmore:
000124CA 4E75                       		rts	
000124CC                            
000124CC                            	@chkdel:
000124CC 4A28 0001                  		tst.b	obRender(a0)
000124D0 6A00 D31A                  		bpl.w	DeleteObject
000124D4 4E75                       		rts	
000124D6                            ; ===========================================================================
000124D6                            
000124D6                            @flapsound:
000124D6 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000124DA 0200 000F                  		andi.b	#$F,d0
000124DE 6600                       		bne.s	@nosound
000124EA                            
000124EA                            	@nosound:
000124EA 6100 D2AC                  		bsr.w	SpeedToPos
000124EE 3038 D008                  		move.w	(v_player+obX).w,d0
000124F2 9068 0008                  		sub.w	obX(a0),d0
000124F6 6400                       		bcc.s	@isright	; if Sonic is right of basaran, branch
000124F8 4440                       		neg.w	d0
000124FA                            
000124FA                            	@isright:
000124FA 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of basaran?
000124FE 6500                       		bcs.s	@dontflyup	; if yes, branch
00012500 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012504 D007                       		add.b	d7,d0
00012506 0200 0007                  		andi.b	#7,d0
0001250A 6600                       		bne.s	@dontflyup
0001250C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012510                            
00012510                            @dontflyup:
00012510 4E75                       		rts	
00012512                            ; ===========================================================================
00012512                            
00012512                            @flyup:
00012512 6100 D284                  		bsr.w	SpeedToPos
00012516 0468 0018 0012             		subi.w	#$18,obVelY(a0)	; make basaran fly upwards
0001251C 6100 0000                  		bsr.w	ObjHitCeiling
00012520 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00012522 6A00                       		bpl.s	@noceiling	; if not, branch
00012524 9368 000C                  		sub.w	d1,obY(a0)
00012528 0268 FFF8 0008             		andi.w	#$FFF8,obX(a0)
0001252E 4268 0010                  		clr.w	obVelX(a0)	; stop basaran moving
00012532 4268 0012                  		clr.w	obVelY(a0)
00012536 4228 001C                  		clr.b	obAnim(a0)
0001253A 4228 0025                  		clr.b	ob2ndRout(a0)
0001253E                            
0001253E                            	@noceiling:
0001253E 4E75                       		rts	
00012540                            ; ===========================================================================
00012540                            
00012540                            ; Subroutine to check Sonic's distance from the basaran
00012540                            
00012540                            ; input:
00012540                            ;	d2 = distance to compare
00012540                            
00012540                            ; output:
00012540                            ;	d0 = distance between Sonic and basaran
00012540                            ;	d1 = speed/direction for basaran to fly
00012540                            
00012540                            @chkdistance:
00012540 323C 0100                  		move.w	#$100,d1
00012544 08E8 0000 0022             		bset	#0,obStatus(a0)
0001254A 3038 D008                  		move.w	(v_player+obX).w,d0
0001254E 9068 0008                  		sub.w	obX(a0),d0
00012552 6400                       		bcc.s	@right		; if Sonic is right of basaran, branch
00012554 4440                       		neg.w	d0
00012556 4441                       		neg.w	d1
00012558 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001255E                            
0001255E                            	@right:
0001255E B042                       		cmp.w	d2,d0
00012560 4E75                       		rts	
00012562                            ; ===========================================================================
00012562                            ; unused crap
00012562 6100 D234                  		bsr.w	SpeedToPos
00012566 6100 D244                  		bsr.w	DisplaySprite
0001256A 4A28 0001                  		tst.b	obRender(a0)
0001256E 6A00 D27C                  		bpl.w	DeleteObject
00012572 4E75                       		rts	
00012572 4E75                       		rts	
00012574                            		include	"_anim\Basaran.asm"
00012574                            ; ---------------------------------------------------------------------------
00012574                            ; Animation script - Basaran enemy
00012574                            ; ---------------------------------------------------------------------------
00012574 0000                       Ani_Bas:	dc.w @still-Ani_Bas
00012576 0000                       		dc.w @fall-Ani_Bas
00012578 0000                       		dc.w @fly-Ani_Bas
0001257A 0F00 FF                    @still:		dc.b $F, 0, afEnd
0001257E 00                         		even
0001257E 0F01 FF                    @fall:		dc.b $F, 1, afEnd
00012582 00                         		even
00012582 0301 0203 02FF             @fly:		dc.b 3,	1, 2, 3, 2, afEnd
00012588                            		even
00012588                            		even
00012588                            Map_Bas:	include	"_maps\Basaran.asm"
00012588                            ; --------------------------------------------------------------------------------
00012588                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012588                            ; --------------------------------------------------------------------------------
00012588                            
00012588                            SME_RhYYA:	
00012588 0000 0000                  		dc.w SME_RhYYA_8-SME_RhYYA, SME_RhYYA_E-SME_RhYYA	
0001258C 0000 0000                  		dc.w SME_RhYYA_1E-SME_RhYYA, SME_RhYYA_33-SME_RhYYA	
00012590 01                         SME_RhYYA_8:	dc.b 1	
00012591 F406 2000 F8               		dc.b $F4, 6, $20, 0, $F8	
00012596 03                         SME_RhYYA_E:	dc.b 3	
00012597 F20E 2006 F4               		dc.b $F2, $E, $20, 6, $F4	
0001259C 0A04 2012 FC               		dc.b $A, 4, $20, $12, $FC	
000125A1 0200 2027 0C               		dc.b 2, 0, $20, $27, $C	
000125A6 04                         SME_RhYYA_1E:	dc.b 4	
000125A7 F804 2014 F8               		dc.b $F8, 4, $20, $14, $F8	
000125AC 000C 2016 F0               		dc.b 0, $C, $20, $16, $F0	
000125B1 0804 201A 00               		dc.b 8, 4, $20, $1A, 0	
000125B6 0000 2028 0C               		dc.b 0, 0, $20, $28, $C	
000125BB 04                         SME_RhYYA_33:	dc.b 4	
000125BC F609 201C F5               		dc.b $F6, 9, $20, $1C, $F5	
000125C1 0608 2022 F4               		dc.b 6, 8, $20, $22, $F4	
000125C6 0E04 2025 F4               		dc.b $E, 4, $20, $25, $F4	
000125CB FE00 2027 0C               		dc.b $FE, 0, $20, $27, $C	
000125D0                            		even
000125D0                            		even
000125D0                            
000125D0                            		include	"_incObj\56 Floating Blocks and Doors.asm"
000125D0                            ; ---------------------------------------------------------------------------
000125D0                            ; Object 56 - floating blocks (SYZ/SLZ), large doors (LZ)
000125D0                            ; ---------------------------------------------------------------------------
000125D0                            
000125D0                            FloatingBlock:
000125D0 7000                       		moveq	#0,d0
000125D2 1028 0024                  		move.b	obRoutine(a0),d0
000125D6 323B 0000                  		move.w	FBlock_Index(pc,d0.w),d1
000125DA 4EFB 1000                  		jmp	FBlock_Index(pc,d1.w)
000125DE                            ; ===========================================================================
000125DE 0000                       FBlock_Index:	dc.w FBlock_Main-FBlock_Index
000125E0 0000                       		dc.w FBlock_Action-FBlock_Index
000125E2                            
000125E2 =00000034                  fb_origX:	equ $34		; original x-axis position
000125E2 =00000030                  fb_origY:	equ $30		; original y-axis position
000125E2 =0000003A                  fb_height:	equ $3A		; total object height
000125E2 =0000003C                  fb_type:		equ $3C		; subtype (2nd digit only)
000125E2                            
000125E2                            FBlock_Var:	; width/2, height/2
000125E2 1010                       		dc.b  $10, $10	; subtype 0x/8x
000125E4 2020                       		dc.b  $20, $20	; subtype 1x/9x
000125E6 1020                       		dc.b  $10, $20	; subtype 2x/Ax
000125E8 201A                       		dc.b  $20, $1A	; subtype 3x/Bx
000125EA 1027                       		dc.b  $10, $27	; subtype 4x/Cx
000125EC 1010                       		dc.b  $10, $10	; subtype 5x/Dx
000125EE 0820                       		dc.b	8, $20	; subtype 6x/Ex
000125F0 4010                       		dc.b  $40, $10	; subtype 7x/Fx
000125F2                            ; ===========================================================================
000125F2                            
000125F2                            FBlock_Main:	; Routine 0
000125F2 5428 0024                  		addq.b	#2,obRoutine(a0)
000125F6 217C 0000 0000 0004        		move.l	#Map_FBlock,obMap(a0)
000125FE 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012604 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
0001260A 6600                       		bne.s	@notLZ
0001260C 317C 43C4 0002             		move.w	#$43C4,obGfx(a0) ; LZ specific code
00012612                            
00012612                            	@notLZ:
00012612 117C 0004 0001             		move.b	#4,obRender(a0)
00012618 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001261E 7000                       		moveq	#0,d0
00012620 1028 0028                  		move.b	obSubtype(a0),d0 ; get subtype
00012624 E648                       		lsr.w	#3,d0
00012626 0240 000E                  		andi.w	#$E,d0		; read only the 1st digit
0001262A 45FB 00B6                  		lea	FBlock_Var(pc,d0.w),a2 ; get size data
0001262E 115A 0014                  		move.b	(a2)+,obActWid(a0)
00012632 1152 0016                  		move.b	(a2),obHeight(a0)
00012636 E248                       		lsr.w	#1,d0
00012638 1140 001A                  		move.b	d0,obFrame(a0)
0001263C 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
00012642 3168 000C 0030             		move.w	obY(a0),fb_origY(a0)
00012648 7000                       		moveq	#0,d0
0001264A 1012                       		move.b	(a2),d0
0001264C D040                       		add.w	d0,d0
0001264E 3140 003A                  		move.w	d0,fb_height(a0)
00012652 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
00012658 6600                       			bne.s	@dontdelete
0001265A 0C68 1BB8 0008             			cmpi.w	#$1BB8,obX(a0)
00012660 6600                       			bne.s	@notatpos
00012662 4A38 F7CE                  			tst.b	($FFFFF7CE).w
00012666 6700                       			beq.s	@dontdelete
00012668 4EF9 0000 F7EC             			jmp	(DeleteObject).l
0001266E                            	@notatpos:
0001266E 4228 0028                  			clr.b	obSubtype(a0)
00012672 4A38 F7CE                  			tst.b	($FFFFF7CE).w
00012676 6600                       			bne.s	@dontdelete
00012678 4EF9 0000 F7EC             			jmp	(DeleteObject).l
0001267E                            	@dontdelete:
0001267E 7000                       		moveq	#0,d0
00012680 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012686 6700                       		beq.s	@stillnotLZ
00012688 1028 0028                  		move.b	obSubtype(a0),d0 ; SYZ/SLZ specific code
0001268C 0240 000F                  		andi.w	#$F,d0
00012690 5140                       		subq.w	#8,d0
00012692 6500                       		bcs.s	@stillnotLZ
00012694 E548                       		lsl.w	#2,d0
00012696 45F8 FE8A                  		lea	(v_oscillate+$2C).w,a2
0001269A 45F2 0000                  		lea	(a2,d0.w),a2
0001269E 4A52                       		tst.w	(a2)
000126A0 6A00                       		bpl.s	@stillnotLZ
000126A2 0868 0000 0022             		bchg	#0,obStatus(a0)
000126A8                            
000126A8                            	@stillnotLZ:
000126A8 1028 0028                  		move.b	obSubtype(a0),d0
000126AC 6A00                       		bpl.s	FBlock_Action
000126AE 0200 000F                  		andi.b	#$F,d0
000126B2 1140 003C                  		move.b	d0,fb_type(a0)
000126B6 117C 0005 0028             		move.b	#5,obSubtype(a0)
000126BC 0C28 0007 001A             		cmpi.b	#7,obFrame(a0)
000126C2 6600                       		bne.s	@chkstate
000126C4 117C 000C 0028             		move.b	#$C,obSubtype(a0)
000126CA 317C 0080 003A             		move.w	#$80,fb_height(a0)
000126D0                            
000126D0                            @chkstate:
000126D0 45F8 FC00                  		lea	(v_objstate).w,a2
000126D4 7000                       		moveq	#0,d0
000126D6 1028 0023                  		move.b	obRespawnNo(a0),d0
000126DA 6700                       		beq.s	FBlock_Action
000126DC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000126E2 0832 0000 0002             		btst	#0,2(a2,d0.w)
000126E8 6700                       		beq.s	FBlock_Action
000126EA 5228 0028                  		addq.b	#1,obSubtype(a0)
000126EE 4268 003A                  		clr.w	fb_height(a0)
000126F2                            
000126F2                            FBlock_Action:	; Routine 2
000126F2 3F28 0008                  		move.w	obX(a0),-(sp)
000126F6 7000                       		moveq	#0,d0
000126F8 1028 0028                  		move.b	obSubtype(a0),d0 ; get object subtype
000126FC 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012700 D040                       		add.w	d0,d0
00012702 323B 0000                  		move.w	@index(pc,d0.w),d1
00012706 4EBB 1000                  		jsr	@index(pc,d1.w)	; move block subroutines
0001270A 381F                       		move.w	(sp)+,d4
0001270C 4A28 0001                  		tst.b	obRender(a0)
00012710 6A00                       		bpl.s	@chkdel
00012712 7200                       		moveq	#0,d1
00012714 1228 0014                  		move.b	obActWid(a0),d1
00012718 0641 000B                  		addi.w	#$B,d1
0001271C 7400                       		moveq	#0,d2
0001271E 1428 0016                  		move.b	obHeight(a0),d2
00012722 3602                       		move.w	d2,d3
00012724 5243                       		addq.w	#1,d3
00012726 6100 F5D0                  		bsr.w	SolidObject
0001272A                            
0001272A                            	@chkdel:
00012746                            		@display:
00012746 6000 D064                  			bra.w	DisplaySprite
0001274A                            		@chkdel2:
0001274A 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
00012750 6600                       			bne.s	@delete
00012752 4A28 0038                  			tst.b	$38(a0)
00012756 66EE                       			bne.s	@display
00012758                            		@delete:
00012758 4EF9 0000 F7EC             			jmp	(DeleteObject).l
0001275E                            ; ===========================================================================
0001275E 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00012762 0000 0000                  		dc.w @type02-@index, @type03-@index
00012766 0000 0000                  		dc.w @type04-@index, @type05-@index
0001276A 0000 0000                  		dc.w @type06-@index, @type07-@index
0001276E 0000 0000                  		dc.w @type08-@index, @type09-@index
00012772 0000 0000                  		dc.w @type0A-@index, @type0B-@index
00012776 0000 0000                  		dc.w @type0C-@index, @type0D-@index
0001277A                            ; ===========================================================================
0001277A                            
0001277A                            @type00:
0001277A                            ; doesn't move
0001277A 4E75                       		rts	
0001277C                            ; ===========================================================================
0001277C                            
0001277C                            @type01:
0001277C                            ; moves side-to-side
0001277C 323C 0040                  		move.w	#$40,d1		; set move distance
00012780 7000                       		moveq	#0,d0
00012782 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
00012786 6000                       		bra.s	@moveLR
00012788                            ; ===========================================================================
00012788                            
00012788                            @type02:
00012788                            ; moves side-to-side
00012788 323C 0080                  		move.w	#$80,d1		; set move distance
0001278C 7000                       		moveq	#0,d0
0001278E 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00012792                            
00012792                            	@moveLR:
00012792 0828 0000 0022             		btst	#0,obStatus(a0)
00012798 6700                       		beq.s	@noflip
0001279A 4440                       		neg.w	d0
0001279C D041                       		add.w	d1,d0
0001279E                            
0001279E                            	@noflip:
0001279E 3228 0034                  		move.w	fb_origX(a0),d1
000127A2 9240                       		sub.w	d0,d1
000127A4 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
000127A8 4E75                       		rts	
000127AA                            ; ===========================================================================
000127AA                            
000127AA                            @type03:
000127AA                            ; moves up/down
000127AA 323C 0040                  		move.w	#$40,d1		; set move distance
000127AE 7000                       		moveq	#0,d0
000127B0 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
000127B4 6000                       		bra.s	@moveUD
000127B6                            ; ===========================================================================
000127B6                            
000127B6                            @type04:
000127B6                            ; moves up/down
000127B6 323C 0080                  		move.w	#$80,d1		; set move distance
000127BA 7000                       		moveq	#0,d0
000127BC 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
000127C0                            
000127C0                            	@moveUD:
000127C0 0828 0000 0022             		btst	#0,obStatus(a0)
000127C6 6700                       		beq.s	@noflip04
000127C8 4440                       		neg.w	d0
000127CA D041                       		add.w	d1,d0
000127CC                            
000127CC                            	@noflip04:
000127CC 3228 0030                  		move.w	fb_origY(a0),d1
000127D0 9240                       		sub.w	d0,d1
000127D2 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
000127D6 4E75                       		rts	
000127D8                            ; ===========================================================================
000127D8                            
000127D8                            @type05:
000127D8                            ; moves up when a switch is pressed
000127D8 4A28 0038                  		tst.b	$38(a0)
000127DC 6600                       		bne.s	@loc_104A4
000127DE 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
000127E4 6600                       		bne.s	@aaa		; if not, branch
000127E6 0C28 0003 003C             		cmpi.b	#3,fb_type(a0)
000127EC 6600                       		bne.s	@aaa
000127EE 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000127F2 3038 D008                  		move.w	(v_player+obX).w,d0
000127F6 B068 0008                  		cmp.w	obX(a0),d0
000127FA 6400                       		bcc.s	@aaa
000127FC 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w
00012802                            
00012802                            	@aaa:
00012802 45F8 F7E0                  		lea	(f_switch).w,a2
00012806 7000                       		moveq	#0,d0
00012808 1028 003C                  		move.b	fb_type(a0),d0
0001280C 0832 0000 0000             		btst	#0,(a2,d0.w)
00012812 6700                       		beq.s	@loc_104AE
00012814 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
0001281A 6600                       		bne.s	@loc_1049E	; if not, branch
0001281C 0C00 0003                  		cmpi.b	#3,d0
00012820 6600                       		bne.s	@loc_1049E
00012822 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00012826                            
00012826                            @loc_1049E:
00012826 117C 0001 0038             		move.b	#1,$38(a0)
0001282C                            
0001282C                            @loc_104A4:
0001282C 4A68 003A                  		tst.w	fb_height(a0)
00012830 6700                       		beq.s	@loc_104C8
00012832 5568 003A                  		subq.w	#2,fb_height(a0)
00012836                            
00012836                            @loc_104AE:
00012836 3028 003A                  		move.w	fb_height(a0),d0
0001283A 0828 0000 0022             		btst	#0,$22(a0)
00012840 6700                       		beq.s	@loc_104BC
00012842 4440                       		neg.w	d0
00012844                            
00012844                            @loc_104BC:
00012844 3228 0030                  		move.w	fb_origY(a0),d1
00012848 D240                       		add.w	d0,d1
0001284A 3141 000C                  		move.w	d1,obY(a0)
0001284E 4E75                       		rts	
00012850                            ; ===========================================================================
00012850                            
00012850                            @loc_104C8:
00012850 5228 0028                  		addq.b	#1,$28(a0)
00012854 4228 0038                  		clr.b	$38(a0)
00012858 45F8 FC00                  		lea	(v_objstate).w,a2
0001285C 7000                       		moveq	#0,d0
0001285E 1028 0023                  		move.b	obRespawnNo(a0),d0
00012862 67D2                       		beq.s	@loc_104AE
00012864 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001286A 60CA                       		bra.s	@loc_104AE
0001286C                            ; ===========================================================================
0001286C                            
0001286C                            @type06:
0001286C 4A28 0038                  		tst.b	$38(a0)
00012870 6600                       		bne.s	@loc_10500
00012872 45F8 F7E0                  		lea	(f_switch).w,a2
00012876 7000                       		moveq	#0,d0
00012878 1028 003C                  		move.b	fb_type(a0),d0
0001287C 4A32 0000                  		tst.b	(a2,d0.w)
00012880 6A00                       		bpl.s	@loc_10512
00012882 117C 0001 0038             		move.b	#1,$38(a0)
00012888                            
00012888                            @loc_10500:
00012888 7000                       		moveq	#0,d0
0001288A 1028 0016                  		move.b	obHeight(a0),d0
0001288E D040                       		add.w	d0,d0
00012890 B068 003A                  		cmp.w	fb_height(a0),d0
00012894 6700                       		beq.s	@loc_1052C
00012896 5468 003A                  		addq.w	#2,fb_height(a0)
0001289A                            
0001289A                            @loc_10512:
0001289A 3028 003A                  		move.w	fb_height(a0),d0
0001289E 0828 0000 0022             		btst	#0,obStatus(a0)
000128A4 6700                       		beq.s	@loc_10520
000128A6 4440                       		neg.w	d0
000128A8                            
000128A8                            @loc_10520:
000128A8 3228 0030                  		move.w	fb_origY(a0),d1
000128AC D240                       		add.w	d0,d1
000128AE 3141 000C                  		move.w	d1,obY(a0)
000128B2 4E75                       		rts	
000128B4                            ; ===========================================================================
000128B4                            
000128B4                            @loc_1052C:
000128B4 5328 0028                  		subq.b	#1,obSubtype(a0)
000128B8 4228 0038                  		clr.b	$38(a0)
000128BC 45F8 FC00                  		lea	(v_objstate).w,a2
000128C0 7000                       		moveq	#0,d0
000128C2 1028 0023                  		move.b	obRespawnNo(a0),d0
000128C6 67D2                       		beq.s	@loc_10512
000128C8 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000128CE 60CA                       		bra.s	@loc_10512
000128D0                            ; ===========================================================================
000128D0                            
000128D0                            @type07:
000128D0 4A28 0038                  		tst.b	$38(a0)
000128D4 6600                       		bne.s	@loc_1055E
000128D6 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch number $F been pressed?
000128DA 6700                       		beq.s	@locret_10578
000128DC 117C 0001 0038             		move.b	#1,$38(a0)
000128E2 4268 003A                  		clr.w	fb_height(a0)
000128E6                            
000128E6                            @loc_1055E:
000128E6 5268 0008                  		addq.w	#1,obX(a0)
000128EA 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
000128F0 5268 003A                  		addq.w	#1,fb_height(a0)
000128F4 0C68 0380 003A             		cmpi.w	#$380,fb_height(a0)
000128FA 6600                       		bne.s	@locret_10578
000128FC 11FC 0001 F7CE             			move.b	#1,($FFFFF7CE).w
00012902 4228 0038                  			clr.b	$38(a0)
00012906 4228 0028                  		clr.b	obSubtype(a0)
0001290A                            
0001290A                            @locret_10578:
0001290A 4E75                       		rts	
0001290C                            ; ===========================================================================
0001290C                            
0001290C                            @type0C:
0001290C 4A28 0038                  		tst.b	$38(a0)
00012910 6600                       		bne.s	@loc_10598
00012912 45F8 F7E0                  		lea	(f_switch).w,a2
00012916 7000                       		moveq	#0,d0
00012918 1028 003C                  		move.b	fb_type(a0),d0
0001291C 0832 0000 0000             		btst	#0,(a2,d0.w)
00012922 6700                       		beq.s	@loc_105A2
00012924 117C 0001 0038             		move.b	#1,$38(a0)
0001292A                            
0001292A                            @loc_10598:
0001292A 4A68 003A                  		tst.w	fb_height(a0)
0001292E 6700                       		beq.s	@loc_105C0
00012930 5568 003A                  		subq.w	#2,fb_height(a0)
00012934                            
00012934                            @loc_105A2:
00012934 3028 003A                  		move.w	fb_height(a0),d0
00012938 0828 0000 0022             		btst	#0,obStatus(a0)
0001293E 6700                       		beq.s	@loc_105B4
00012940 4440                       		neg.w	d0
00012942 0640 0080                  		addi.w	#$80,d0
00012946                            
00012946                            @loc_105B4:
00012946 3228 0034                  		move.w	fb_origX(a0),d1
0001294A D240                       		add.w	d0,d1
0001294C 3141 0008                  		move.w	d1,obX(a0)
00012950 4E75                       		rts	
00012952                            ; ===========================================================================
00012952                            
00012952                            @loc_105C0:
00012952 5228 0028                  		addq.b	#1,obSubtype(a0)
00012956 4228 0038                  		clr.b	$38(a0)
0001295A 45F8 FC00                  		lea	(v_objstate).w,a2
0001295E 7000                       		moveq	#0,d0
00012960 1028 0023                  		move.b	obRespawnNo(a0),d0
00012964 67CE                       		beq.s	@loc_105A2
00012966 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001296C 60C6                       		bra.s	@loc_105A2
0001296E                            ; ===========================================================================
0001296E                            
0001296E                            @type0D:
0001296E 4A28 0038                  		tst.b	$38(a0)
00012972 6600                       		bne.s	@loc_105F8
00012974 45F8 F7E0                  		lea	(f_switch).w,a2
00012978 7000                       		moveq	#0,d0
0001297A 1028 003C                  		move.b	fb_type(a0),d0
0001297E 4A32 0000                  		tst.b	(a2,d0.w)
00012982 6A00                       		bpl.s	@wtf
00012984 117C 0001 0038             		move.b	#1,$38(a0)
0001298A                            
0001298A                            @loc_105F8:
0001298A 303C 0080                  		move.w	#$80,d0
0001298E B068 003A                  		cmp.w	fb_height(a0),d0
00012992 6700                       		beq.s	@loc_10624
00012994 5468 003A                  		addq.w	#2,fb_height(a0)
00012998                            
00012998                            @wtf:
00012998 3028 003A                  		move.w	fb_height(a0),d0
0001299C 0828 0000 0022             		btst	#0,obStatus(a0)
000129A2 6700                       		beq.s	@loc_10618
000129A4 4440                       		neg.w	d0
000129A6 0640 0080                  		addi.w	#$80,d0
000129AA                            
000129AA                            @loc_10618:
000129AA 3228 0034                  		move.w	fb_origX(a0),d1
000129AE D240                       		add.w	d0,d1
000129B0 3141 0008                  		move.w	d1,obX(a0)
000129B4 4E75                       		rts	
000129B6                            ; ===========================================================================
000129B6                            
000129B6                            @loc_10624:
000129B6 5328 0028                  		subq.b	#1,obSubtype(a0)
000129BA 4228 0038                  		clr.b	$38(a0)
000129BE 45F8 FC00                  		lea	(v_objstate).w,a2
000129C2 7000                       		moveq	#0,d0
000129C4 1028 0023                  		move.b	obRespawnNo(a0),d0
000129C8 67CE                       		beq.s	@wtf
000129CA 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000129D0 60C6                       		bra.s	@wtf
000129D2                            ; ===========================================================================
000129D2                            
000129D2                            @type08:
000129D2 323C 0010                  		move.w	#$10,d1
000129D6 7000                       		moveq	#0,d0
000129D8 1038 FE88                  		move.b	(v_oscillate+$2A).w,d0
000129DC E248                       		lsr.w	#1,d0
000129DE 3638 FE8A                  		move.w	(v_oscillate+$2C).w,d3
000129E2 6000                       		bra.s	@square
000129E4                            ; ===========================================================================
000129E4                            
000129E4                            @type09:
000129E4 323C 0030                  		move.w	#$30,d1
000129E8 7000                       		moveq	#0,d0
000129EA 1038 FE8C                  		move.b	(v_oscillate+$2E).w,d0
000129EE 3638 FE8E                  		move.w	(v_oscillate+$30).w,d3
000129F2 6000                       		bra.s	@square
000129F4                            ; ===========================================================================
000129F4                            
000129F4                            @type0A:
000129F4 323C 0050                  		move.w	#$50,d1
000129F8 7000                       		moveq	#0,d0
000129FA 1038 FE90                  		move.b	(v_oscillate+$32).w,d0
000129FE 3638 FE92                  		move.w	(v_oscillate+$34).w,d3
00012A02 6000                       		bra.s	@square
00012A04                            ; ===========================================================================
00012A04                            
00012A04                            @type0B:
00012A04 323C 0070                  		move.w	#$70,d1
00012A08 7000                       		moveq	#0,d0
00012A0A 1038 FE94                  		move.b	(v_oscillate+$36).w,d0
00012A0E 3638 FE96                  		move.w	(v_oscillate+$38).w,d3
00012A12                            
00012A12                            @square:
00012A12 4A43                       		tst.w	d3
00012A14 6600                       		bne.s	@loc_1068E
00012A16 5228 0022                  		addq.b	#1,obStatus(a0)
00012A1A 0228 0003 0022             		andi.b	#3,obStatus(a0)
00012A20                            
00012A20                            @loc_1068E:
00012A20 1428 0022                  		move.b	obStatus(a0),d2
00012A24 0202 0003                  		andi.b	#3,d2
00012A28 6600                       		bne.s	@loc_106AE
00012A2A 9041                       		sub.w	d1,d0
00012A2C D068 0034                  		add.w	fb_origX(a0),d0
00012A30 3140 0008                  		move.w	d0,obX(a0)
00012A34 4441                       		neg.w	d1
00012A36 D268 0030                  		add.w	fb_origY(a0),d1
00012A3A 3141 000C                  		move.w	d1,obY(a0)
00012A3E 4E75                       		rts	
00012A40                            ; ===========================================================================
00012A40                            
00012A40                            @loc_106AE:
00012A40 5302                       		subq.b	#1,d2
00012A42 6600                       		bne.s	@loc_106CC
00012A44 5341                       		subq.w	#1,d1
00012A46 9041                       		sub.w	d1,d0
00012A48 4440                       		neg.w	d0
00012A4A D068 0030                  		add.w	fb_origY(a0),d0
00012A4E 3140 000C                  		move.w	d0,obY(a0)
00012A52 5241                       		addq.w	#1,d1
00012A54 D268 0034                  		add.w	fb_origX(a0),d1
00012A58 3141 0008                  		move.w	d1,obX(a0)
00012A5C 4E75                       		rts	
00012A5E                            ; ===========================================================================
00012A5E                            
00012A5E                            @loc_106CC:
00012A5E 5302                       		subq.b	#1,d2
00012A60 6600                       		bne.s	@loc_106EA
00012A62 5341                       		subq.w	#1,d1
00012A64 9041                       		sub.w	d1,d0
00012A66 4440                       		neg.w	d0
00012A68 D068 0034                  		add.w	fb_origX(a0),d0
00012A6C 3140 0008                  		move.w	d0,obX(a0)
00012A70 5241                       		addq.w	#1,d1
00012A72 D268 0030                  		add.w	fb_origY(a0),d1
00012A76 3141 000C                  		move.w	d1,obY(a0)
00012A7A 4E75                       		rts	
00012A7C                            ; ===========================================================================
00012A7C                            
00012A7C                            @loc_106EA:
00012A7C 9041                       		sub.w	d1,d0
00012A7E D068 0030                  		add.w	fb_origY(a0),d0
00012A82 3140 000C                  		move.w	d0,obY(a0)
00012A86 4441                       		neg.w	d1
00012A88 D268 0034                  		add.w	fb_origX(a0),d1
00012A8C 3141 0008                  		move.w	d1,obX(a0)
00012A90 4E75                       		rts	
00012A90 4E75                       		rts	
00012A92                            Map_FBlock:	include	"_maps\Floating Blocks and Doors.asm"
00012A92                            ; ---------------------------------------------------------------------------
00012A92                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00012A92                            ; ---------------------------------------------------------------------------
00012A92                            Map_FBlock_internal:
00012A92 0000                       		dc.w @syz1x1-Map_FBlock_internal
00012A94 0000                       		dc.w @syz2x2-Map_FBlock_internal
00012A96 0000                       		dc.w @syz1x2-Map_FBlock_internal
00012A98 0000                       		dc.w @syzrect2x2-Map_FBlock_internal
00012A9A 0000                       		dc.w @syzrect1x3-Map_FBlock_internal
00012A9C 0000                       		dc.w @slz-Map_FBlock_internal
00012A9E 0000                       		dc.w @lzvert-Map_FBlock_internal
00012AA0 0000                       		dc.w @lzhoriz-Map_FBlock_internal
00012AA2 01                         @syz1x1:	dc.b 1
00012AA3 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0 ; SYZ - 1x1 square block
00012AA8 04                         @syz2x2:	dc.b 4
00012AA9 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0 ; SYZ - 2x2 square blocks
00012AAE E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00012AB3 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00012AB8 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00012ABD 02                         @syz1x2:	dc.b 2
00012ABE E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0 ; SYZ - 1x2 square blocks
00012AC3 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00012AC8 04                         @syzrect2x2:	dc.b 4
00012AC9 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0 ; SYZ - 2x2 rectangular blocks
00012ACE E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00012AD3 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00012AD8 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00012ADD 03                         @syzrect1x3:	dc.b 3
00012ADE D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0 ; SYZ - 1x3 rectangular blocks
00012AE3 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00012AE8 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00012AED 01                         @slz:		dc.b 1
00012AEE F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0 ; SLZ - 1x1 square block
00012AF3 02                         @lzvert:	dc.b 2
00012AF4 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8	; LZ - small vertical door
00012AF9 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012AFE 04                         @lzhoriz:	dc.b 4
00012AFF F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0 ; LZ - large horizontal door
00012B04 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00012B09 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00012B0E F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00012B14 00                         		even
00012B14 00                         		even
00012B14                            
00012B14                            		include	"_incObj\57 Spiked Ball and Chain.asm"
00012B14                            ; ---------------------------------------------------------------------------
00012B14                            ; Object 57 - spiked balls (SYZ, LZ)
00012B14                            ; ---------------------------------------------------------------------------
00012B14                            
00012B14                            SpikeBall:
00012B14 7000                       		moveq	#0,d0
00012B16 1028 0024                  		move.b	obRoutine(a0),d0
00012B1A 323B 0000                  		move.w	SBall_Index(pc,d0.w),d1
00012B1E 4EFB 1000                  		jmp	SBall_Index(pc,d1.w)
00012B22                            ; ===========================================================================
00012B22 0000                       SBall_Index:	dc.w SBall_Main-SBall_Index
00012B24 0000                       		dc.w SBall_Move-SBall_Index
00012B26 0000                       		dc.w SBall_Display-SBall_Index
00012B28                            
00012B28 =00000029                  sball_childs:	equ $29		; number of child objects (1 byte)
00012B28                            		; $30-$37	; object RAM numbers of childs (1 byte each)
00012B28 =0000003A                  sball_origX:	equ $3A		; centre x-axis position (2 bytes)
00012B28 =00000038                  sball_origY:	equ $38		; centre y-axis position (2 bytes)
00012B28 =0000003C                  sball_radius:	equ $3C		; radius (1 byte)
00012B28 =0000003E                  sball_speed:	equ $3E		; rate of spin (2 bytes)
00012B28                            ; ===========================================================================
00012B28                            
00012B28                            SBall_Main:	; Routine 0
00012B28 5428 0024                  		addq.b	#2,obRoutine(a0)
00012B2C 217C 0000 0000 0004        		move.l	#Map_SBall,obMap(a0)
00012B34 317C 03BA 0002             		move.w	#$3BA,obGfx(a0)
00012B3A 117C 0004 0001             		move.b	#4,obRender(a0)
00012B40 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012B46 117C 0008 0014             		move.b	#8,obActWid(a0)
00012B4C 3168 0008 003A             		move.w	obX(a0),sball_origX(a0)
00012B52 3168 000C 0038             		move.w	obY(a0),sball_origY(a0)
00012B58 117C 0098 0020             		move.b	#$98,obColType(a0) ; SYZ specific code (chain hurts Sonic)
00012B5E 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012B64 6600                       		bne.s	@notlz
00012B66                            
00012B66 117C 0000 0020             		move.b	#0,obColType(a0) ; LZ specific code (chain doesn't hurt)
00012B6C 317C 0310 0002             		move.w	#$310,obGfx(a0)
00012B72 217C 0000 0000 0004        		move.l	#Map_SBall2,obMap(a0)
00012B7A                            
00012B7A                            	@notlz:
00012B7A 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012B7E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012B82 4881                       		ext.w	d1
00012B84 E741                       		asl.w	#3,d1		; multiply by 8
00012B86 3141 003E                  		move.w	d1,sball_speed(a0) ; set object twirl speed
00012B8A 1028 0022                  		move.b	obStatus(a0),d0
00012B8E E418                       		ror.b	#2,d0
00012B90 0200 00C0                  		andi.b	#$C0,d0
00012B94 1140 0026                  		move.b	d0,obAngle(a0)
00012B98 45E8 0029                  		lea	sball_childs(a0),a2
00012B9C 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012BA0 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00012BA4 14FC 0000                  		move.b	#0,(a2)+
00012BA8 3601                       		move.w	d1,d3
00012BAA E94B                       		lsl.w	#4,d3
00012BAC 1143 003C                  		move.b	d3,sball_radius(a0)
00012BB0 5341                       		subq.w	#1,d1		; set chain length (type-1)
00012BB2 6500                       		bcs.s	@fail
00012BB4 0828 0003 0028             		btst	#3,obSubtype(a0)
00012BBA 6700                       		beq.s	@makechain
00012BBC 5341                       		subq.w	#1,d1
00012BBE 6500                       		bcs.s	@fail
00012BC0                            
00012BC0                            @makechain:
00012BC0 6100 D184                  		bsr.w	FindFreeObj
00012BC4 6600                       		bne.s	@fail
00012BC6 5228 0029                  		addq.b	#1,sball_childs(a0) ; increment child object counter
00012BCA 3A09                       		move.w	a1,d5		; get child object RAM address
00012BCC 0445 D000                  		subi.w	#$D000,d5	; subtract $D000
00012BD0 EC4D                       		lsr.w	#6,d5		; divide by $40
00012BD2 0245 007F                  		andi.w	#$7F,d5
00012BD6 14C5                       		move.b	d5,(a2)+	; copy child RAM number
00012BD8 137C 0004 0024             		move.b	#4,obRoutine(a1)
00012BDE 1290                       		move.b	0(a0),0(a1)
00012BE0 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00012BE6 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00012BEC 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00012BF2 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00012BF8 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00012BFE 1368 0020 0020             		move.b	obColType(a0),obColType(a1)
00012C04 0403 0010                  		subi.b	#$10,d3
00012C08 1343 003C                  		move.b	d3,sball_radius(a1)
00012C0C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012C12 6600                       		bne.s	@notlzagain
00012C14                            
00012C14 4A03                       		tst.b	d3
00012C16 6600                       		bne.s	@notlzagain
00012C18 137C 0002 001A             		move.b	#2,obFrame(a1)	; use different frame for LZ chain
00012C1E                            
00012C1E                            	@notlzagain:
00012C1E 51C9 FFA0                  		dbf	d1,@makechain ; repeat for length of chain
00012C22                            
00012C22                            	@fail:
00012C22 3A08                       		move.w	a0,d5
00012C24 0445 D000                  		subi.w	#$D000,d5
00012C28 EC4D                       		lsr.w	#6,d5
00012C2A 0245 007F                  		andi.w	#$7F,d5
00012C2E 14C5                       		move.b	d5,(a2)+
00012C30 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012C36 6600                       		bne.s	SBall_Move
00012C38                            
00012C38 117C 008B 0020             		move.b	#$8B,obColType(a0) ; if yes, make last spikeball larger
00012C3E 117C 0001 001A             		move.b	#1,obFrame(a0)	; use different	frame
00012C44                            
00012C44                            SBall_Move:	; Routine 2
00012C44 6100 0000                  		bsr.w	@movesub
00012C48 6000 0000                  		bra.w	@chkdel
00012C4C                            ; ===========================================================================
00012C4C                            
00012C4C                            @movesub:
00012C4C 3028 003E                  		move.w	sball_speed(a0),d0
00012C50 D168 0026                  		add.w	d0,obAngle(a0)
00012C54 1028 0026                  		move.b	obAngle(a0),d0
00012C58 4EB9 0000 3CCA             		jsr	(CalcSine).l
00012C5E 3428 0038                  		move.w	sball_origY(a0),d2
00012C62 3628 003A                  		move.w	sball_origX(a0),d3
00012C66 45E8 0029                  		lea	sball_childs(a0),a2
00012C6A 7C00                       		moveq	#0,d6
00012C6C 1C1A                       		move.b	(a2)+,d6
00012C6E                            
00012C6E                            	@loop:
00012C6E 7800                       		moveq	#0,d4
00012C70 181A                       		move.b	(a2)+,d4
00012C72 ED4C                       		lsl.w	#6,d4
00012C74 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00012C7A 2244                       		movea.l	d4,a1
00012C7C 7800                       		moveq	#0,d4
00012C7E 1829 003C                  		move.b	sball_radius(a1),d4
00012C82 2A04                       		move.l	d4,d5
00012C84 C9C0                       		muls.w	d0,d4
00012C86 E084                       		asr.l	#8,d4
00012C88 CBC1                       		muls.w	d1,d5
00012C8A E085                       		asr.l	#8,d5
00012C8C D842                       		add.w	d2,d4
00012C8E DA43                       		add.w	d3,d5
00012C90 3344 000C                  		move.w	d4,obY(a1)
00012C94 3345 0008                  		move.w	d5,obX(a1)
00012C98 51CE FFD4                  		dbf	d6,@loop
00012C9C 4E75                       		rts	
00012C9E                            ; ===========================================================================
00012C9E                            
00012C9E                            @chkdel:
00012CBC 6000 CAEE                  		bra.w	DisplaySprite
00012CC0                            ; ===========================================================================
00012CC0                            
00012CC0                            @delete:
00012CC0 7400                       		moveq	#0,d2
00012CC2 45E8 0029                  		lea	sball_childs(a0),a2
00012CC6 141A                       		move.b	(a2)+,d2
00012CC8                            
00012CC8                            	@deleteloop:
00012CC8 7000                       		moveq	#0,d0
00012CCA 101A                       		move.b	(a2)+,d0
00012CCC ED48                       		lsl.w	#6,d0
00012CCE 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00012CD4 2240                       		movea.l	d0,a1
00012CD6 6100 CB16                  		bsr.w	DeleteChild
00012CDA 51CA FFEC                  		dbf	d2,@deleteloop ; delete all pieces of	chain
00012CDE                            
00012CDE 4E75                       		rts	
00012CE0                            ; ===========================================================================
00012CE0                            
00012CE0                            SBall_Display:	; Routine 4
00012CE0 6000 CACA                  		bra.w	DisplaySprite
00012CE0 6000 CACA                  		bra.w	DisplaySprite
00012CE4                            Map_SBall:	include	"_maps\Spiked Ball and Chain (SYZ).asm"
00012CE4                            ; ---------------------------------------------------------------------------
00012CE4                            ; Sprite mappings - chain of spiked balls (SYZ)
00012CE4                            ; ---------------------------------------------------------------------------
00012CE4                            Map_SBall_internal:
00012CE4 0000                       		dc.w @0-Map_SBall_internal
00012CE6 01                         @0:		dc.b 1
00012CE7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012CEC                            		even
00012CEC                            		even
00012CEC                            Map_SBall2:	include	"_maps\Spiked Ball and Chain (LZ).asm"
00012CEC                            ; ---------------------------------------------------------------------------
00012CEC                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012CEC                            ; ---------------------------------------------------------------------------
00012CEC                            Map_SBall2_internal:
00012CEC 0000                       		dc.w @chain-Map_SBall2_internal
00012CEE 0000                       		dc.w @spikeball-Map_SBall2_internal
00012CF0 0000                       		dc.w @base-Map_SBall2_internal
00012CF2 01                         @chain:		dc.b 1
00012CF3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; chain link
00012CF8 01                         @spikeball:	dc.b 1
00012CF9 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0	; spikeball
00012CFE 01                         @base:		dc.b 1
00012CFF F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8 ; wall attachment
00012D04                            		even
00012D04                            		even
00012D04                            		include	"_incObj\58 Big Spiked Ball.asm"
00012D04                            ; ---------------------------------------------------------------------------
00012D04                            ; Object 58 - giant spiked balls (SYZ)
00012D04                            ; ---------------------------------------------------------------------------
00012D04                            
00012D04                            BigSpikeBall:
00012D04 7000                       		moveq	#0,d0
00012D06 1028 0024                  		move.b	obRoutine(a0),d0
00012D0A 323B 0000                  		move.w	BBall_Index(pc,d0.w),d1
00012D0E 4EFB 1000                  		jmp	BBall_Index(pc,d1.w)
00012D12                            ; ===========================================================================
00012D12 0000                       BBall_Index:	dc.w BBall_Main-BBall_Index
00012D14 0000                       		dc.w BBall_Move-BBall_Index
00012D16                            
00012D16 =0000003A                  bball_origX:	equ $3A		; original x-axis position
00012D16 =00000038                  bball_origY:	equ $38		; original y-axis position
00012D16 =0000003C                  bball_radius:	equ $3C		; radius of circle
00012D16 =0000003E                  bball_speed:	equ $3E		; speed
00012D16                            ; ===========================================================================
00012D16                            
00012D16                            BBall_Main:	; Routine 0
00012D16 5428 0024                  		addq.b	#2,obRoutine(a0)
00012D1A 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0)
00012D22 317C 0396 0002             		move.w	#$396,obGfx(a0)
00012D28 117C 0004 0001             		move.b	#4,obRender(a0)
00012D2E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012D34 117C 0018 0014             		move.b	#$18,obActWid(a0)
00012D3A 3168 0008 003A             		move.w	obX(a0),bball_origX(a0)
00012D40 3168 000C 0038             		move.w	obY(a0),bball_origY(a0)
00012D46 117C 0086 0020             		move.b	#$86,obColType(a0)
00012D4C 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012D50 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012D54 4881                       		ext.w	d1
00012D56 E741                       		asl.w	#3,d1		; multiply by 8
00012D58 3141 003E                  		move.w	d1,bball_speed(a0) ; set object speed
00012D5C 1028 0022                  		move.b	obStatus(a0),d0
00012D60 E418                       		ror.b	#2,d0
00012D62 0200 00C0                  		andi.b	#$C0,d0
00012D66 1140 0026                  		move.b	d0,obAngle(a0)
00012D6A 117C 0050 003C             		move.b	#$50,bball_radius(a0) ; set radius of circle motion
00012D70                            
00012D70                            BBall_Move:	; Routine 2
00012D70 7000                       		moveq	#0,d0
00012D72 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00012D76 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00012D7A D040                       		add.w	d0,d0
00012D7C 323B 0000                  		move.w	@index(pc,d0.w),d1
00012D80 4EBB 1000                  		jsr	@index(pc,d1.w)
00012DA2 6000 CA08                  		bra.w	DisplaySprite
00012DA6                            ; ===========================================================================
00012DA6 0000                       @index:		dc.w @type00-@index
00012DA8 0000                       		dc.w @type01-@index
00012DAA 0000                       		dc.w @type02-@index
00012DAC 0000                       		dc.w @type03-@index
00012DAE                            ; ===========================================================================
00012DAE                            
00012DAE                            @type00:
00012DAE 4E75                       		rts	
00012DB0                            ; ===========================================================================
00012DB0                            
00012DB0                            @type01:
00012DB0 323C 0060                  		move.w	#$60,d1
00012DB4 7000                       		moveq	#0,d0
00012DB6 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012DBA 0828 0000 0022             		btst	#0,obStatus(a0)
00012DC0 6700                       		beq.s	@noflip1
00012DC2 4440                       		neg.w	d0
00012DC4 D041                       		add.w	d1,d0
00012DC6                            
00012DC6                            	@noflip1:
00012DC6 3228 003A                  		move.w	bball_origX(a0),d1
00012DCA 9240                       		sub.w	d0,d1
00012DCC 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00012DD0 4E75                       		rts	
00012DD2                            ; ===========================================================================
00012DD2                            
00012DD2                            @type02:
00012DD2 323C 0060                  		move.w	#$60,d1
00012DD6 7000                       		moveq	#0,d0
00012DD8 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012DDC 0828 0000 0022             		btst	#0,obStatus(a0)
00012DE2 6700                       		beq.s	@noflip2
00012DE4 4440                       		neg.w	d0
00012DE6 0640 0080                  		addi.w	#$80,d0
00012DEA                            
00012DEA                            	@noflip2:
00012DEA 3228 0038                  		move.w	bball_origY(a0),d1
00012DEE 9240                       		sub.w	d0,d1
00012DF0 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012DF4 4E75                       		rts	
00012DF6                            ; ===========================================================================
00012DF6                            
00012DF6                            @type03:
00012DF6 3028 003E                  		move.w	bball_speed(a0),d0
00012DFA D168 0026                  		add.w	d0,obAngle(a0)
00012DFE 1028 0026                  		move.b	obAngle(a0),d0
00012E02 4EB9 0000 3CCA             		jsr	(CalcSine).l
00012E08 3428 0038                  		move.w	bball_origY(a0),d2
00012E0C 3628 003A                  		move.w	bball_origX(a0),d3
00012E10 7800                       		moveq	#0,d4
00012E12 1828 003C                  		move.b	bball_radius(a0),d4
00012E16 2A04                       		move.l	d4,d5
00012E18 C9C0                       		muls.w	d0,d4
00012E1A E084                       		asr.l	#8,d4
00012E1C CBC1                       		muls.w	d1,d5
00012E1E E085                       		asr.l	#8,d5
00012E20 D842                       		add.w	d2,d4
00012E22 DA43                       		add.w	d3,d5
00012E24 3144 000C                  		move.w	d4,obY(a0)	; move object circularly
00012E28 3145 0008                  		move.w	d5,obX(a0)
00012E2C 4E75                       		rts	
00012E2C 4E75                       		rts	
00012E2E                            Map_BBall:	include	"_maps\Big Spiked Ball.asm"
00012E2E                            ; --------------------------------------------------------------------------------
00012E2E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012E2E                            ; --------------------------------------------------------------------------------
00012E2E                            
00012E2E                            SME_u_DKx:	
00012E2E 0000 0000                  		dc.w SME_u_DKx_6-SME_u_DKx, SME_u_DKx_20-SME_u_DKx	
00012E32 0000                       		dc.w SME_u_DKx_26-SME_u_DKx	
00012E34 05                         SME_u_DKx_6:	dc.b 5	
00012E35 E804 0000 F8               		dc.b $E8, 4, 0, 0, $F8	
00012E3A F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0	
00012E3F F801 0012 E8               		dc.b $F8, 1, 0, $12, $E8	
00012E44 F801 0014 10               		dc.b $F8, 1, 0, $14, $10	
00012E49 1004 0016 F8               		dc.b $10, 4, 0, $16, $F8	
00012E4E 01                         SME_u_DKx_20:	dc.b 1	
00012E4F F805 0020 F8               		dc.b $F8, 5, 0, $20, $F8	
00012E54 02                         SME_u_DKx_26:	dc.b 2	
00012E55 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0	
00012E5A E80D 1018 F0               		dc.b $E8, $D, $10, $18, $F0	
00012E60 00                         		even
00012E60 00                         		even
00012E60                            		include	"_incObj\59 SLZ Elevators.asm"
00012E60                            ; ---------------------------------------------------------------------------
00012E60                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00012E60                            ; ---------------------------------------------------------------------------
00012E60                            
00012E60                            Elevator:
00012E60 7000                       		moveq	#0,d0
00012E62 1028 0024                  		move.b	obRoutine(a0),d0
00012E66 323B 0000                  		move.w	Elev_Index(pc,d0.w),d1
00012E6A 4EBB 1000                  		jsr	Elev_Index(pc,d1.w)
00012E8C 6000 C91E                  		bra.w	DisplaySprite
00012E90                            ; ===========================================================================
00012E90 0000                       Elev_Index:	dc.w Elev_Main-Elev_Index
00012E92 0000                       		dc.w Elev_Platform-Elev_Index
00012E94 0000                       		dc.w Elev_Action-Elev_Index
00012E96 0000                       		dc.w Elev_MakeMulti-Elev_Index
00012E98                            
00012E98 =00000032                  elev_origX:	equ $32		; original x-axis position
00012E98 =00000030                  elev_origY:	equ $30		; original y-axis position
00012E98 =0000003C                  elev_dist:	equ $3C		; distance to move (2 bytes)
00012E98                            
00012E98 2800                       Elev_Var1:	dc.b $28, 0		; width, frame number
00012E9A                            
00012E9A 1001                       Elev_Var2:	dc.b $10, 1		; distance to move, action type
00012E9C 2001                       		dc.b $20, 1
00012E9E 3401                       		dc.b $34, 1
00012EA0 1003                       		dc.b $10, 3
00012EA2 2003                       		dc.b $20, 3
00012EA4 3403                       		dc.b $34, 3
00012EA6 1401                       		dc.b $14, 1
00012EA8 2401                       		dc.b $24, 1
00012EAA 2C01                       		dc.b $2C, 1
00012EAC 1403                       		dc.b $14, 3
00012EAE 2403                       		dc.b $24, 3
00012EB0 2C03                       		dc.b $2C, 3
00012EB2 2005                       		dc.b $20, 5
00012EB4 2007                       		dc.b $20, 7
00012EB6 3009                       		dc.b $30, 9
00012EB8                            ; ===========================================================================
00012EB8                            
00012EB8                            Elev_Main:	; Routine 0
00012EB8 5428 0024                  		addq.b	#2,obRoutine(a0)
00012EBC 7000                       		moveq	#0,d0
00012EBE 1028 0028                  		move.b	obSubtype(a0),d0
00012EC2 6A00                       		bpl.s	@normal		; branch for types 00-7F
00012EC4 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Elev_MakeMulti next
00012EC8 0240 007F                  		andi.w	#$7F,d0
00012ECC C0FC 0006                  		mulu.w	#6,d0
00012ED0 3140 003C                  		move.w	d0,elev_dist(a0)
00012ED4 3140 003E                  		move.w	d0,$3E(a0)
00012ED8 588F                       		addq.l	#4,sp
00012EDA 4E75                       		rts	
00012EDC                            ; ===========================================================================
00012EDC                            
00012EDC                            	@normal:
00012EDC E648                       		lsr.w	#3,d0
00012EDE 0240 001E                  		andi.w	#$1E,d0
00012EE2 45FB 00B4                  		lea	Elev_Var1(pc,d0.w),a2
00012EE6 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00012EEA 115A 001A                  		move.b	(a2)+,obFrame(a0) ; set frame
00012EEE 7000                       		moveq	#0,d0
00012EF0 1028 0028                  		move.b	obSubtype(a0),d0
00012EF4 D040                       		add.w	d0,d0
00012EF6 0240 001E                  		andi.w	#$1E,d0
00012EFA 45FB 009E                  		lea	Elev_Var2(pc,d0.w),a2
00012EFE 101A                       		move.b	(a2)+,d0
00012F00 E548                       		lsl.w	#2,d0
00012F02 3140 003C                  		move.w	d0,elev_dist(a0)	; set distance to move
00012F06 115A 0028                  		move.b	(a2)+,obSubtype(a0)	; set type
00012F0A 217C 0000 0000 0004        		move.l	#Map_Elev,obMap(a0)
00012F12 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012F18 117C 0004 0001             		move.b	#4,obRender(a0)
00012F1E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012F24 3168 0008 0032             		move.w	obX(a0),elev_origX(a0)
00012F2A 3168 000C 0030             		move.w	obY(a0),elev_origY(a0)
00012F30                            
00012F30                            Elev_Platform:	; Routine 2
00012F30 7200                       		moveq	#0,d1
00012F32 1228 0014                  		move.b	obActWid(a0),d1
00012F36 4EB9 0000 8C24             		jsr	(PlatformObject).l
00012F3C 6000 0000                  		bra.w	Elev_Types
00012F40                            ; ===========================================================================
00012F40                            
00012F40                            Elev_Action:	; Routine 4
00012F40 7200                       		moveq	#0,d1
00012F42 1228 0014                  		move.b	obActWid(a0),d1
00012F46 4EB9 0000 8D98             		jsr	(ExitPlatform).l
00012F4C 3F28 0008                  		move.w	obX(a0),-(sp)
00012F50 6100 0000                  		bsr.w	Elev_Types
00012F54 341F                       		move.w	(sp)+,d2
00012F56 4A10                       		tst.b	0(a0)
00012F58 6700                       		beq.s	@deleted
00012F5A 4EF9 0000 9302             		jmp	(MvSonicOnPtfm2).l
00012F60                            
00012F60                            	@deleted:
00012F60 4E75                       		rts	
00012F62                            ; ===========================================================================
00012F62                            
00012F62                            Elev_Types:
00012F62 7000                       		moveq	#0,d0
00012F64 1028 0028                  		move.b	obSubtype(a0),d0
00012F68 0240 000F                  		andi.w	#$F,d0
00012F6C D040                       		add.w	d0,d0
00012F6E 323B 0000                  		move.w	@index(pc,d0.w),d1
00012F72 4EFB 1000                  		jmp	@index(pc,d1.w)
00012F76                            ; ===========================================================================
00012F76 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00012F7A 0000 0000                  		dc.w @type02-@index, @type01-@index
00012F7E 0000 0000                  		dc.w @type04-@index, @type01-@index
00012F82 0000 0000                  		dc.w @type06-@index, @type01-@index
00012F86 0000 0000                  		dc.w @type08-@index, @type09-@index
00012F8A                            ; ===========================================================================
00012F8A                            
00012F8A                            @type00:
00012F8A 4E75                       		rts	
00012F8C                            ; ===========================================================================
00012F8C                            
00012F8C                            @type01:
00012F8C 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; check if Sonic is standing on the object
00012F92 6600                       		bne.s	@notstanding
00012F94 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
00012F98                            
00012F98                            	@notstanding:
00012F98 4E75                       		rts	
00012F9A                            ; ===========================================================================
00012F9A                            
00012F9A                            @type02:
00012F9A 6100 0000                  		bsr.w	Elev_Move
00012F9E 3028 0034                  		move.w	$34(a0),d0
00012FA2 4440                       		neg.w	d0
00012FA4 D068 0030                  		add.w	elev_origY(a0),d0
00012FA8 3140 000C                  		move.w	d0,obY(a0)
00012FAC 4E75                       		rts	
00012FAE                            ; ===========================================================================
00012FAE                            
00012FAE                            @type04:
00012FAE 6100 0000                  		bsr.w	Elev_Move
00012FB2 3028 0034                  		move.w	$34(a0),d0
00012FB6 D068 0030                  		add.w	elev_origY(a0),d0
00012FBA 3140 000C                  		move.w	d0,obY(a0)
00012FBE 4E75                       		rts	
00012FC0                            ; ===========================================================================
00012FC0                            
00012FC0                            @type06:
00012FC0 6100 0000                  		bsr.w	Elev_Move
00012FC4 3028 0034                  		move.w	$34(a0),d0
00012FC8 E240                       		asr.w	#1,d0
00012FCA 4440                       		neg.w	d0
00012FCC D068 0030                  		add.w	elev_origY(a0),d0
00012FD0 3140 000C                  		move.w	d0,obY(a0)
00012FD4 3028 0034                  		move.w	$34(a0),d0
00012FD8 D068 0032                  		add.w	elev_origX(a0),d0
00012FDC 3140 0008                  		move.w	d0,obX(a0)
00012FE0 4E75                       		rts	
00012FE2                            ; ===========================================================================
00012FE2                            
00012FE2                            @type08:
00012FE2 6100 0000                  		bsr.w	Elev_Move
00012FE6 3028 0034                  		move.w	$34(a0),d0
00012FEA E240                       		asr.w	#1,d0
00012FEC D068 0030                  		add.w	elev_origY(a0),d0
00012FF0 3140 000C                  		move.w	d0,obY(a0)
00012FF4 3028 0034                  		move.w	$34(a0),d0
00012FF8 4440                       		neg.w	d0
00012FFA D068 0032                  		add.w	elev_origX(a0),d0
00012FFE 3140 0008                  		move.w	d0,obX(a0)
00013002 4E75                       		rts	
00013004                            ; ===========================================================================
00013004                            
00013004                            @type09:
00013004 6100 0000                  		bsr.w	Elev_Move
00013008 3028 0034                  		move.w	$34(a0),d0
0001300C 4440                       		neg.w	d0
0001300E D068 0030                  		add.w	elev_origY(a0),d0
00013012 3140 000C                  		move.w	d0,obY(a0)
00013016 4A28 0028                  		tst.b	obSubtype(a0)
0001301A 6700 0000                  		beq.w	@typereset
0001301E 4E75                       		rts	
00013020                            ; ===========================================================================
00013020                            
00013020                            	@typereset:
00013020 0828 0003 0022             		btst	#3,obStatus(a0)
00013026 6700                       		beq.s	@delete
00013028 08E9 0001 0022             		bset	#1,obStatus(a1)
0001302E 08A9 0003 0022             		bclr	#3,obStatus(a1)
00013034 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001303A                            
0001303A                            	@delete:
0001303A 6000 C7B0                  		bra.w	DeleteObject
0001303E                            
0001303E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001303E                            
0001303E                            
0001303E                            Elev_Move:
0001303E 3028 0038                  		move.w	$38(a0),d0
00013042 4A28 003A                  		tst.b	$3A(a0)
00013046 6600                       		bne.s	loc_10CC8
00013048 0C40 0800                  		cmpi.w	#$800,d0
0001304C 6400                       		bcc.s	loc_10CD0
0001304E 0640 0010                  		addi.w	#$10,d0
00013052 6000                       		bra.s	loc_10CD0
00013054                            ; ===========================================================================
00013054                            
00013054                            loc_10CC8:
00013054 4A40                       		tst.w	d0
00013056 6700                       		beq.s	loc_10CD0
00013058 0440 0010                  		subi.w	#$10,d0
0001305C                            
0001305C                            loc_10CD0:
0001305C 3140 0038                  		move.w	d0,$38(a0)
00013060 48C0                       		ext.l	d0
00013062 E180                       		asl.l	#8,d0
00013064 D0A8 0034                  		add.l	$34(a0),d0
00013068 2140 0034                  		move.l	d0,$34(a0)
0001306C 4840                       		swap	d0
0001306E 3428 003C                  		move.w	elev_dist(a0),d2
00013072 B042                       		cmp.w	d2,d0
00013074 6300                       		bls.s	loc_10CF0
00013076 117C 0001 003A             		move.b	#1,$3A(a0)
0001307C                            
0001307C                            loc_10CF0:
0001307C D442                       		add.w	d2,d2
0001307E B042                       		cmp.w	d2,d0
00013080 6600                       		bne.s	locret_10CFA
00013082 4228 0028                  		clr.b	obSubtype(a0)
00013086                            
00013086                            locret_10CFA:
00013086 4E75                       		rts	
00013088                            ; End of function Elev_Move
00013088                            
00013088                            ; ===========================================================================
00013088                            
00013088                            Elev_MakeMulti:	; Routine 6
00013088 5368 003C                  		subq.w	#1,elev_dist(a0)
0001308C 6600                       		bne.s	@chkdel
0001308E 3168 003E 003C             		move.w	$3E(a0),elev_dist(a0)
00013094 6100 CCB0                  		bsr.w	FindFreeObj
00013098 6600                       		bne.s	@chkdel
0001309A 12BC 0059                  		move.b	#id_Elevator,0(a1) ; duplicate the object
0001309E 3368 0008 0008             		move.w	obX(a0),obX(a1)
000130A4 3368 000C 000C             		move.w	obY(a0),obY(a1)
000130AA 137C 000E 0028             		move.b	#$E,obSubtype(a1)
000130B0                            
000130B0                            @chkdel:
000130B0 588F                       		addq.l	#4,sp
000130D0 4E75                       		rts	
000130D0 4E75                       		rts	
000130D2                            Map_Elev:	include	"_maps\SLZ Elevators.asm"
000130D2                            ; ---------------------------------------------------------------------------
000130D2                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000130D2                            ; ---------------------------------------------------------------------------
000130D2                            Map_Elev_internal:
000130D2 0000                       		dc.w @elevator-Map_Elev_internal
000130D4 03                         @elevator:	dc.b 3
000130D5 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
000130DA F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
000130DF F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
000130E4                            		even
000130E4                            		even
000130E4                            		include	"_incObj\5A SLZ Circling Platform.asm"
000130E4                            ; ---------------------------------------------------------------------------
000130E4                            ; Object 5A - platforms	moving in circles (SLZ)
000130E4                            ; ---------------------------------------------------------------------------
000130E4                            
000130E4                            CirclingPlatform:
000130E4 7000                       		moveq	#0,d0
000130E6 1028 0024                  		move.b	obRoutine(a0),d0
000130EA 323B 0000                  		move.w	Circ_Index(pc,d0.w),d1
000130EE 4EBB 1000                  		jsr	Circ_Index(pc,d1.w)
00013110 6000 C69A                  		bra.w	DisplaySprite
00013114                            ; ===========================================================================
00013114 0000                       Circ_Index:	dc.w Circ_Main-Circ_Index
00013116 0000                       		dc.w Circ_Platform-Circ_Index
00013118 0000                       		dc.w Circ_Action-Circ_Index
0001311A                            
0001311A =00000032                  circ_origX:	equ $32		; original x-axis position
0001311A =00000030                  circ_origY:	equ $30		; original y-axis position
0001311A                            ; ===========================================================================
0001311A                            
0001311A                            Circ_Main:	; Routine 0
0001311A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001311E 217C 0000 0000 0004        		move.l	#Map_Circ,obMap(a0)
00013126 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0001312C 117C 0004 0001             		move.b	#4,obRender(a0)
00013132 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013138 117C 0018 0014             		move.b	#$18,obActWid(a0)
0001313E 3168 0008 0032             		move.w	obX(a0),circ_origX(a0)
00013144 3168 000C 0030             		move.w	obY(a0),circ_origY(a0)
0001314A                            
0001314A                            Circ_Platform:	; Routine 2
0001314A 7200                       		moveq	#0,d1
0001314C 1228 0014                  		move.b	obActWid(a0),d1
00013150 4EB9 0000 8C24             		jsr	(PlatformObject).l
00013156 6000 0000                  		bra.w	Circ_Types
0001315A                            ; ===========================================================================
0001315A                            
0001315A                            Circ_Action:	; Routine 4
0001315A 7200                       		moveq	#0,d1
0001315C 1228 0014                  		move.b	obActWid(a0),d1
00013160 4EB9 0000 8D98             		jsr	(ExitPlatform).l
00013166 3F28 0008                  		move.w	obX(a0),-(sp)
0001316A 6100 0000                  		bsr.w	Circ_Types
0001316E 341F                       		move.w	(sp)+,d2
00013170 4EF9 0000 9302             		jmp	(MvSonicOnPtfm2).l
00013176                            ; ===========================================================================
00013176                            
00013176                            Circ_Types:
00013176 7000                       		moveq	#0,d0
00013178 1028 0028                  		move.b	obSubtype(a0),d0
0001317C 0240 000C                  		andi.w	#$C,d0
00013180 E248                       		lsr.w	#1,d0
00013182 323B 0000                  		move.w	@index(pc,d0.w),d1
00013186 4EFB 1000                  		jmp	@index(pc,d1.w)
0001318A                            ; ===========================================================================
0001318A 0000                       @index:		dc.w @type00-@index
0001318C 0000                       		dc.w @type04-@index
0001318E                            ; ===========================================================================
0001318E                            
0001318E                            @type00:
0001318E 1238 FE80                  		move.b	(v_oscillate+$22).w,d1 ; get rotating value
00013192 0401 0050                  		subi.b	#$50,d1		; set radius of circle
00013196 4881                       		ext.w	d1
00013198 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
0001319C 0402 0050                  		subi.b	#$50,d2
000131A0 4882                       		ext.w	d2
000131A2 0828 0000 0028             		btst	#0,obSubtype(a0)
000131A8 6700                       		beq.s	@noshift00a
000131AA 4441                       		neg.w	d1
000131AC 4442                       		neg.w	d2
000131AE                            
000131AE                            	@noshift00a:
000131AE 0828 0001 0028             		btst	#1,obSubtype(a0)
000131B4 6700                       		beq.s	@noshift00b
000131B6 4441                       		neg.w	d1
000131B8 C342                       		exg	d1,d2
000131BA                            
000131BA                            	@noshift00b:
000131BA D268 0032                  		add.w	circ_origX(a0),d1
000131BE 3141 0008                  		move.w	d1,obX(a0)
000131C2 D468 0030                  		add.w	circ_origY(a0),d2
000131C6 3142 000C                  		move.w	d2,obY(a0)
000131CA 4E75                       		rts	
000131CC                            ; ===========================================================================
000131CC                            
000131CC                            @type04:
000131CC 1238 FE80                  		move.b	(v_oscillate+$22).w,d1
000131D0 0401 0050                  		subi.b	#$50,d1
000131D4 4881                       		ext.w	d1
000131D6 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
000131DA 0402 0050                  		subi.b	#$50,d2
000131DE 4882                       		ext.w	d2
000131E0 0828 0000 0028             		btst	#0,obSubtype(a0)
000131E6 6700                       		beq.s	@noshift04a
000131E8 4441                       		neg.w	d1
000131EA 4442                       		neg.w	d2
000131EC                            
000131EC                            	@noshift04a:
000131EC 0828 0001 0028             		btst	#1,obSubtype(a0)
000131F2 6700                       		beq.s	@noshift04b
000131F4 4441                       		neg.w	d1
000131F6 C342                       		exg	d1,d2
000131F8                            
000131F8                            	@noshift04b:
000131F8 4441                       		neg.w	d1
000131FA D268 0032                  		add.w	circ_origX(a0),d1
000131FE 3141 0008                  		move.w	d1,obX(a0)
00013202 D468 0030                  		add.w	circ_origY(a0),d2
00013206 3142 000C                  		move.w	d2,obY(a0)
0001320A 4E75                       		rts	
0001320A 4E75                       		rts	
0001320C                            Map_Circ:	include	"_maps\SLZ Circling Platform.asm"
0001320C                            ; ---------------------------------------------------------------------------
0001320C                            ; Sprite mappings - platforms that move	in circles (SLZ)
0001320C                            ; ---------------------------------------------------------------------------
0001320C                            Map_Circ_internal:
0001320C 0000                       		dc.w @platform-Map_Circ_internal
0001320E 02                         @platform:	dc.b 2
0001320F F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00013214 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
0001321A 00                         		even
0001321A 00                         		even
0001321A                            		include	"_incObj\5B Staircase.asm"
0001321A                            ; ---------------------------------------------------------------------------
0001321A                            ; Object 5B - blocks that form a staircase (SLZ)
0001321A                            ; ---------------------------------------------------------------------------
0001321A                            
0001321A                            Staircase:
0001321A 7000                       		moveq	#0,d0
0001321C 1028 0024                  		move.b	obRoutine(a0),d0
00013220 323B 0000                  		move.w	Stair_Index(pc,d0.w),d1
00013224 4EBB 1000                  		jsr	Stair_Index(pc,d1.w)
00013246 6000 C564                  		bra.w	DisplaySprite
0001324A                            ; ===========================================================================
0001324A 0000                       Stair_Index:	dc.w Stair_Main-Stair_Index
0001324C 0000                       		dc.w Stair_Move-Stair_Index
0001324E 0000                       		dc.w Stair_Solid-Stair_Index
00013250                            
00013250 =00000030                  stair_origX:	equ $30		; original x-axis position
00013250 =00000032                  stair_origY:	equ $32		; original y-axis position
00013250                            
00013250 =0000003C                  stair_parent:	equ $3C		; address of parent object (4 bytes)
00013250                            ; ===========================================================================
00013250                            
00013250                            Stair_Main:	; Routine 0
00013250 5428 0024                  		addq.b	#2,obRoutine(a0)
00013254 7638                       		moveq	#$38,d3
00013256 7801                       		moveq	#1,d4
00013258 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
0001325E 6700                       		beq.s	@notflipped	; if not, branch
00013260 763B                       		moveq	#$3B,d3
00013262 78FF                       		moveq	#-1,d4
00013264                            
00013264                            	@notflipped:
00013264 3428 0008                  		move.w	obX(a0),d2
00013268 2248                       		movea.l	a0,a1
0001326A 7203                       		moveq	#3,d1
0001326C 6000                       		bra.s	@makeblocks
0001326E                            ; ===========================================================================
0001326E                            
0001326E                            @loop:
0001326E 6100 CAEC                  		bsr.w	FindNextFreeObj
00013272 6600 0000                  		bne.w	@fail
00013276 137C 0004 0024             		move.b	#4,obRoutine(a1)
0001327C                            
0001327C                            @makeblocks:
0001327C 12BC 005B                  		move.b	#id_Staircase,0(a1) ; load another block object
00013280 237C 0000 0000 0004        		move.l	#Map_Stair,obMap(a1)
00013288 337C 4000 0002             		move.w	#$4000,obGfx(a1)
0001328E 137C 0004 0001             		move.b	#4,obRender(a1)
00013294 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001329A 137C 0010 0014             		move.b	#$10,obActWid(a1)
000132A0 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
000132A6 3342 0008                  		move.w	d2,obX(a1)
000132AA 3368 000C 000C             		move.w	obY(a0),obY(a1)
000132B0 3368 0008 0030             		move.w	obX(a0),stair_origX(a1)
000132B6 3369 000C 0032             		move.w	obY(a1),stair_origY(a1)
000132BC 0642 0020                  		addi.w	#$20,d2
000132C0 1343 0037                  		move.b	d3,$37(a1)
000132C4 2348 003C                  		move.l	a0,stair_parent(a1)
000132C8 D604                       		add.b	d4,d3
000132CA 51C9 FFA2                  		dbf	d1,@loop	; repeat sequence 3 times
000132CE                            
000132CE                            	@fail:
000132CE                            
000132CE                            Stair_Move:	; Routine 2
000132CE 7000                       		moveq	#0,d0
000132D0 1028 0028                  		move.b	obSubtype(a0),d0
000132D4 0240 0007                  		andi.w	#7,d0
000132D8 D040                       		add.w	d0,d0
000132DA 323B 0000                  		move.w	Stair_TypeIndex(pc,d0.w),d1
000132DE 4EBB 1000                  		jsr	Stair_TypeIndex(pc,d1.w)
000132E2                            
000132E2                            Stair_Solid:	; Routine 4
000132E2 2468 003C                  		movea.l	stair_parent(a0),a2
000132E6 7000                       		moveq	#0,d0
000132E8 1028 0037                  		move.b	$37(a0),d0
000132EC 1032 0000                  		move.b	(a2,d0.w),d0
000132F0 D068 0032                  		add.w	stair_origY(a0),d0
000132F4 3140 000C                  		move.w	d0,obY(a0)
000132F8 7200                       		moveq	#0,d1
000132FA 1228 0014                  		move.b	obActWid(a0),d1
000132FE 0641 000B                  		addi.w	#$B,d1
00013302 343C 0010                  		move.w	#$10,d2
00013306 363C 0011                  		move.w	#$11,d3
0001330A 3828 0008                  		move.w	obX(a0),d4
0001330E 6100 E9E8                  		bsr.w	SolidObject
00013312 4A04                       		tst.b	d4
00013314 6A00                       		bpl.s	loc_10F92
00013316 1544 0036                  		move.b	d4,$36(a2)
0001331A                            
0001331A                            loc_10F92:
0001331A 0828 0003 0022             		btst	#3,obStatus(a0)
00013320 6700                       		beq.s	locret_10FA0
00013322 157C 0001 0036             		move.b	#1,$36(a2)
00013328                            
00013328                            locret_10FA0:
00013328 4E75                       		rts	
0001332A                            ; ===========================================================================
0001332A 0000                       Stair_TypeIndex:dc.w Stair_Type00-Stair_TypeIndex
0001332C 0000                       		dc.w Stair_Type01-Stair_TypeIndex
0001332E 0000                       		dc.w Stair_Type02-Stair_TypeIndex
00013330 0000                       		dc.w Stair_Type01-Stair_TypeIndex
00013332                            ; ===========================================================================
00013332                            
00013332                            Stair_Type00:
00013332 4A68 0034                  		tst.w	$34(a0)
00013336 6600                       		bne.s	loc_10FC0
00013338 0C28 0001 0036             		cmpi.b	#1,$36(a0)
0001333E 6600                       		bne.s	locret_10FBE
00013340 317C 001E 0034             		move.w	#$1E,$34(a0)
00013346                            
00013346                            locret_10FBE:
00013346 4E75                       		rts	
00013348                            ; ===========================================================================
00013348                            
00013348                            loc_10FC0:
00013348 5368 0034                  		subq.w	#1,$34(a0)
0001334C 66F8                       		bne.s	locret_10FBE
0001334E 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
00013352 4E75                       		rts	
00013354                            ; ===========================================================================
00013354                            
00013354                            Stair_Type02:
00013354 4A68 0034                  		tst.w	$34(a0)
00013358 6600                       		bne.s	loc_10FE0
0001335A 4A28 0036                  		tst.b	$36(a0)
0001335E 6A00                       		bpl.s	locret_10FDE
00013360 317C 003C 0034             		move.w	#$3C,$34(a0)
00013366                            
00013366                            locret_10FDE:
00013366 4E75                       		rts	
00013368                            ; ===========================================================================
00013368                            
00013368                            loc_10FE0:
00013368 5368 0034                  		subq.w	#1,$34(a0)
0001336C 6600                       		bne.s	loc_10FEC
0001336E 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
00013372 4E75                       		rts	
00013374                            ; ===========================================================================
00013374                            
00013374                            loc_10FEC:
00013374 43E8 0038                  		lea	$38(a0),a1
00013378 3028 0034                  		move.w	$34(a0),d0
0001337C E408                       		lsr.b	#2,d0
0001337E 0200 0001                  		andi.b	#1,d0
00013382 12C0                       		move.b	d0,(a1)+
00013384 0A00 0001                  		eori.b	#1,d0
00013388 12C0                       		move.b	d0,(a1)+
0001338A 0A00 0001                  		eori.b	#1,d0
0001338E 12C0                       		move.b	d0,(a1)+
00013390 0A00 0001                  		eori.b	#1,d0
00013394 12C0                       		move.b	d0,(a1)+
00013396 4E75                       		rts	
00013398                            ; ===========================================================================
00013398                            
00013398                            Stair_Type01:
00013398 43E8 0038                  		lea	$38(a0),a1
0001339C 0C11 0080                  		cmpi.b	#$80,(a1)
000133A0 6700                       		beq.s	locret_11038
000133A2 5211                       		addq.b	#1,(a1)
000133A4 7200                       		moveq	#0,d1
000133A6 1219                       		move.b	(a1)+,d1
000133A8 4841                       		swap	d1
000133AA E289                       		lsr.l	#1,d1
000133AC 2401                       		move.l	d1,d2
000133AE E289                       		lsr.l	#1,d1
000133B0 2601                       		move.l	d1,d3
000133B2 D682                       		add.l	d2,d3
000133B4 4841                       		swap	d1
000133B6 4842                       		swap	d2
000133B8 4843                       		swap	d3
000133BA 12C3                       		move.b	d3,(a1)+
000133BC 12C2                       		move.b	d2,(a1)+
000133BE 12C1                       		move.b	d1,(a1)+
000133C0                            
000133C0                            locret_11038:
000133C0 4E75                       		rts	
000133C2 4E75                       		rts	
000133C2 4E75                       		rts	
000133C4                            Map_Stair:	include	"_maps\Staircase.asm"
000133C4                            ; ---------------------------------------------------------------------------
000133C4                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000133C4                            ; ---------------------------------------------------------------------------
000133C4                            Map_Stair_internal:
000133C4 0000                       		dc.w @block-Map_Stair_internal
000133C6 01                         @block:		dc.b 1
000133C7 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000133CC                            		even
000133CC                            		even
000133CC                            		include	"_incObj\5C Pylon.asm"
000133CC                            ; ---------------------------------------------------------------------------
000133CC                            ; Object 5C - metal pylons in foreground (SLZ)
000133CC                            ; ---------------------------------------------------------------------------
000133CC                            
000133CC                            Pylon:
000133CC 7000                       		moveq	#0,d0
000133CE 1028 0024                  		move.b	obRoutine(a0),d0
000133D2 323B 0000                  		move.w	Pyl_Index(pc,d0.w),d1
000133D6 4EFB 1000                  		jmp	Pyl_Index(pc,d1.w)
000133DA                            ; ===========================================================================
000133DA 0000                       Pyl_Index:	dc.w Pyl_Main-Pyl_Index
000133DC 0000                       		dc.w Pyl_Display-Pyl_Index
000133DE                            ; ===========================================================================
000133DE                            
000133DE                            Pyl_Main:	; Routine 0
000133DE 5428 0024                  		addq.b	#2,obRoutine(a0)
000133E2 217C 0000 0000 0004        		move.l	#Map_Pylon,obMap(a0)
000133EA 317C 83CC 0002             		move.w	#$83CC,obGfx(a0)
000133F0 117C 0010 0014             		move.b	#$10,obActWid(a0)
000133F6                            
000133F6                            Pyl_Display:	; Routine 2
000133F6 2238 F700                  		move.l	(v_screenposx).w,d1
000133FA D281                       		add.l	d1,d1
000133FC 4841                       		swap	d1
000133FE 4441                       		neg.w	d1
00013400 3141 0008                  		move.w	d1,obX(a0)
00013404 2238 F704                  		move.l	(v_screenposy).w,d1
00013408 D281                       		add.l	d1,d1
0001340A 4841                       		swap	d1
0001340C 0241 003F                  		andi.w	#$3F,d1
00013410 4441                       		neg.w	d1
00013412 0641 0100                  		addi.w	#$100,d1
00013416 3141 000A                  		move.w	d1,obScreenY(a0)
0001341A 6000 C390                  		bra.w	DisplaySprite
0001341A 6000 C390                  		bra.w	DisplaySprite
0001341E                            Map_Pylon:	include	"_maps\Pylon.asm"
0001341E                            ; ---------------------------------------------------------------------------
0001341E                            ; Sprite mappings - metal pylons in foreground (SLZ)
0001341E                            ; ---------------------------------------------------------------------------
0001341E                            Map_Pylon_internal:
0001341E 0000                       		dc.w @pylon-Map_Pylon_internal
00013420 09                         @pylon:		dc.b 9
00013421 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00013426 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
0001342B C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00013430 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00013435 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
0001343A 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
0001343F 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00013444 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00013449 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
0001344E                            		even
0001344E                            		even
0001344E                            
0001344E                            		include	"_incObj\1B Water Surface.asm"
0001344E                            ; ---------------------------------------------------------------------------
0001344E                            ; Object 1B - water surface (LZ)
0001344E                            ; ---------------------------------------------------------------------------
0001344E                            
0001344E                            WaterSurface:
0001344E 7000                       		moveq	#0,d0
00013450 1028 0024                  		move.b	obRoutine(a0),d0
00013454 323B 0000                  		move.w	Surf_Index(pc,d0.w),d1
00013458 4EFB 1000                  		jmp	Surf_Index(pc,d1.w)
0001345C                            ; ===========================================================================
0001345C 0000                       Surf_Index:	dc.w Surf_Main-Surf_Index
0001345E 0000                       		dc.w Surf_Action-Surf_Index
00013460                            
00013460 =00000030                  surf_origX:	equ $30		; original x-axis position
00013460 =00000032                  surf_freeze:	equ $32		; flag to freeze animation
00013460                            ; ===========================================================================
00013460                            
00013460                            Surf_Main:	; Routine 0
00013460 5428 0024                  		addq.b	#2,obRoutine(a0)
00013464 217C 0000 0000 0004        		move.l	#Map_Surf,obMap(a0)
0001346C 317C C300 0002             		move.w	#$C300,obGfx(a0)
00013472 117C 0004 0001             		move.b	#4,obRender(a0)
00013478 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001347E 3168 0008 0030             		move.w	obX(a0),surf_origX(a0)
00013484                            
00013484                            Surf_Action:	; Routine 2
00013484 3238 F700                  		move.w	(v_screenposx).w,d1
00013488 0241 FFE0                  		andi.w	#$FFE0,d1
0001348C D268 0030                  		add.w	surf_origX(a0),d1
00013490 0838 0000 FE05             		btst	#0,(v_framebyte).w
00013496 6700                       		beq.s	@even		; branch on even frames
00013498 0641 0020                  		addi.w	#$20,d1
0001349C                            
0001349C                            	@even:
0001349C 3141 0008                  		move.w	d1,obX(a0)	; match	obj x-position to screen position
000134A0 3238 F646                  		move.w	(v_waterpos1).w,d1
000134A4 3141 000C                  		move.w	d1,obY(a0)	; match	obj y-position to water	height
000134A8 4A28 0032                  		tst.b	surf_freeze(a0)
000134AC 6600                       		bne.s	@stopped
000134AE 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
000134B4 6700                       		beq.s	@animate	; if not, branch
000134B6 5628 001A                  		addq.b	#3,obFrame(a0)	; use different	frames
000134BA 117C 0001 0032             		move.b	#1,surf_freeze(a0) ; stop animation
000134C0 6000                       		bra.s	@display
000134C2                            ; ===========================================================================
000134C2                            
000134C2                            @stopped:
000134C2 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
000134C6 6600                       		bne.s	@display	; if yes, branch
000134C8 117C 0000 0032             		move.b	#0,surf_freeze(a0) ; resume animation
000134CE 5728 001A                  		subq.b	#3,obFrame(a0)	; use normal frames
000134D2                            
000134D2                            @animate:
000134D2 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000134D6 6A00                       		bpl.s	@display
000134D8 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
000134DE 5228 001A                  		addq.b	#1,obFrame(a0)
000134E2 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)
000134E8 6500                       		bcs.s	@display
000134EA 117C 0000 001A             		move.b	#0,obFrame(a0)
000134F0                            
000134F0                            @display:
000134F0 6000 C2BA                  		bra.w	DisplaySprite
000134F0 6000 C2BA                  		bra.w	DisplaySprite
000134F4                            Map_Surf:	include	"_maps\Water Surface.asm"
000134F4                            ; --------------------------------------------------------------------------------
000134F4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000134F4                            ; --------------------------------------------------------------------------------
000134F4                            
000134F4                            SME_LGSi8:	
000134F4 0000 0000                  		dc.w SME_LGSi8_C-SME_LGSi8, SME_LGSi8_1C-SME_LGSi8	
000134F8 0000 0000                  		dc.w SME_LGSi8_2C-SME_LGSi8, SME_LGSi8_3C-SME_LGSi8	
000134FC 0000 0000                  		dc.w SME_LGSi8_5B-SME_LGSi8, SME_LGSi8_7A-SME_LGSi8	
00013500 03                         SME_LGSi8_C:	dc.b 3	
00013501 F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
00013506 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
0001350B F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
00013510 03                         SME_LGSi8_1C:	dc.b 3	
00013511 F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
00013516 F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
0001351B F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
00013520 03                         SME_LGSi8_2C:	dc.b 3	
00013521 F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
00013526 F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
0001352B F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
00013530 06                         SME_LGSi8_3C:	dc.b 6	
00013531 F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
00013536 F80D 0000 C0               		dc.b $F8, $D, 0, 0, $C0	
0001353B F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
00013540 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
00013545 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
0001354A F80D 0000 40               		dc.b $F8, $D, 0, 0, $40	
0001354F 06                         SME_LGSi8_5B:	dc.b 6	
00013550 F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
00013555 F80D 0008 C0               		dc.b $F8, $D, 0, 8, $C0	
0001355A F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
0001355F F80D 0008 00               		dc.b $F8, $D, 0, 8, 0	
00013564 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
00013569 F80D 0008 40               		dc.b $F8, $D, 0, 8, $40	
0001356E 06                         SME_LGSi8_7A:	dc.b 6	
0001356F F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
00013574 F80D 0800 C0               		dc.b $F8, $D, 8, 0, $C0	
00013579 F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
0001357E F80D 0800 00               		dc.b $F8, $D, 8, 0, 0	
00013583 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
00013588 F80D 0800 40               		dc.b $F8, $D, 8, 0, $40	
0001358E 00                         		even
0001358E 00                         		even
0001358E                            		include	"_incObj\0B Pole that Breaks.asm"
0001358E                            ; ---------------------------------------------------------------------------
0001358E                            ; Object 0B - pole that	breaks (LZ)
0001358E                            ; ---------------------------------------------------------------------------
0001358E                            
0001358E                            Pole:
0001358E 7000                       		moveq	#0,d0
00013590 1028 0024                  		move.b	obRoutine(a0),d0
00013594 323B 0000                  		move.w	Pole_Index(pc,d0.w),d1
00013598 4EFB 1000                  		jmp	Pole_Index(pc,d1.w)
0001359C                            ; ===========================================================================
0001359C 0000                       Pole_Index:	dc.w Pole_Main-Pole_Index
0001359E 0000                       		dc.w Pole_Action-Pole_Index
000135A0 0000                       		dc.w Pole_Display-Pole_Index
000135A2                            
000135A2 =00000030                  pole_time:	equ $30		; time between grabbing the pole & breaking
000135A2 =00000032                  pole_grabbed:	equ $32		; flag set when Sonic grabs the pole
000135A2                            ; ===========================================================================
000135A2                            
000135A2                            Pole_Main:	; Routine 0
000135A2 5428 0024                  		addq.b	#2,obRoutine(a0)
000135A6 217C 0000 0000 0004        		move.l	#Map_Pole,obMap(a0)
000135AE 317C 43DE 0002             		move.w	#$43DE,obGfx(a0)
000135B4 117C 0004 0001             		move.b	#4,obRender(a0)
000135BA 117C 0008 0014             		move.b	#8,obActWid(a0)
000135C0 317C 0200 0018             		move.w	#$200,obPriority(a0)
000135C6 117C 00E1 0020             		move.b	#$E1,obColType(a0)
000135CC 7000                       		moveq	#0,d0
000135CE 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000135D2 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000135D6 3140 0030                  		move.w	d0,pole_time(a0) ; set breakage time
000135DA                            
000135DA                            Pole_Action:	; Routine 2
000135DA 4A28 0032                  		tst.b	pole_grabbed(a0) ; has pole already been grabbed?
000135DE 6700                       		beq.s	@grab		; if not, branch
000135E0 4A68 0030                  		tst.w	pole_time(a0)
000135E4 6700                       		beq.s	@moveup
000135E6 5368 0030                  		subq.w	#1,pole_time(a0) ; decrement time until break
000135EA 6600                       		bne.s	@moveup
000135EC 117C 0001 001A             		move.b	#1,obFrame(a0)	; break	the pole
000135F2 6000                       		bra.s	@release
000135F4                            ; ===========================================================================
000135F4                            
000135F4                            @moveup:
000135F4 43F8 D000                  		lea	(v_player).w,a1
000135F8 3028 000C                  		move.w	obY(a0),d0
000135FC 0440 0018                  		subi.w	#$18,d0
00013600 0838 0000 F604             		btst	#bitUp,(v_jpadhold1).w ; is "up" pressed?
00013606 6700                       		beq.s	@movedown	; if not, branch
00013608 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up
0001360C B069 000C                  		cmp.w	obY(a1),d0
00013610 6500                       		bcs.s	@movedown
00013612 3340 000C                  		move.w	d0,obY(a1)
00013616                            
00013616                            @movedown:
00013616 0640 0024                  		addi.w	#$24,d0
0001361A 0838 0001 F604             		btst	#bitDn,(v_jpadhold1).w ; is "down" pressed?
00013620 6700                       		beq.s	@letgo		; if not, branch
00013622 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down
00013626 B069 000C                  		cmp.w	obY(a1),d0
0001362A 6400                       		bcc.s	@letgo
0001362C 3340 000C                  		move.w	d0,obY(a1)
00013630                            
00013630                            @letgo:
00013630 1038 F603                  		move.b	(v_jpadpress2).w,d0
00013634 0240 0070                  		andi.w	#btnABC,d0	; is A/B/C pressed?
00013638 6700                       		beq.s	Pole_Display	; if not, branch
0001363A                            
0001363A                            @release:
0001363A 4228 0020                  		clr.b	obColType(a0)
0001363E 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Pole_Display next
00013642 4238 F7C8                  		clr.b	(f_lockmulti).w
00013646 4238 F7C9                  		clr.b	(f_wtunnelallow).w
0001364A 4228 0032                  		clr.b	pole_grabbed(a0)
0001364E 6000                       		bra.s	Pole_Display
00013650                            ; ===========================================================================
00013650                            
00013650                            @grab:
00013650 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	pole?
00013654 6700                       		beq.s	Pole_Display	; if not, branch
00013656 43F8 D000                  		lea	(v_player).w,a1
0001365A 3028 0008                  		move.w	obX(a0),d0
0001365E 0640 0014                  		addi.w	#$14,d0
00013662 B069 0008                  		cmp.w	obX(a1),d0
00013666 6400                       		bcc.s	Pole_Display
00013668 4228 0021                  		clr.b	obColProp(a0)
0001366C 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1)
00013672 6400                       		bcc.s	Pole_Display
00013674 4269 0010                  		clr.w	obVelX(a1)	; stop Sonic moving
00013678 4269 0012                  		clr.w	obVelY(a1)	; stop Sonic moving
0001367C 3028 0008                  		move.w	obX(a0),d0
00013680 0640 0014                  		addi.w	#$14,d0
00013684 3340 0008                  		move.w	d0,obX(a1)
00013688 08A9 0000 0022             		bclr	#0,obStatus(a1)
0001368E 137C 0000 001C             		move.b	#id_Hang,obAnim(a1) ; set Sonic's animation to "hanging" ($11)
00013694 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
0001369A 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
000136A0 117C 0001 0032             		move.b	#1,pole_grabbed(a0) ; begin countdown to breakage
000136A6                            
000136A6                            Pole_Display:	; Routine 4
000136A6 6000 E1B8                  		bra.w	RememberState
000136A6 6000 E1B8                  		bra.w	RememberState
000136AA                            Map_Pole:	include	"_maps\Pole that Breaks.asm"
000136AA                            ; ---------------------------------------------------------------------------
000136AA                            ; Sprite mappings - pole that breaks (LZ)
000136AA                            ; ---------------------------------------------------------------------------
000136AA                            Map_Pole_internal:
000136AA 0000                       		dc.w @normal-Map_Pole_internal
000136AC 0000                       		dc.w @broken-Map_Pole_internal
000136AE 02                         @normal:	dc.b 2			; normal pole
000136AF E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
000136B4 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
000136B9 04                         @broken:	dc.b 4			; broken pole
000136BA E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
000136BF F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
000136C4 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
000136C9 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
000136CE                            		even
000136CE                            		even
000136CE                            		include	"_incObj\0C Flapping Door.asm"
000136CE                            ; ---------------------------------------------------------------------------
000136CE                            ; Object 0C - flapping door (LZ)
000136CE                            ; ---------------------------------------------------------------------------
000136CE                            
000136CE                            FlapDoor:
000136CE 7000                       		moveq	#0,d0
000136D0 1028 0024                  		move.b	obRoutine(a0),d0
000136D4 323B 0000                  		move.w	Flap_Index(pc,d0.w),d1
000136D8 4EFB 1000                  		jmp	Flap_Index(pc,d1.w)
000136DC                            ; ===========================================================================
000136DC 0000                       Flap_Index:	dc.w Flap_Main-Flap_Index
000136DE 0000                       		dc.w Flap_OpenClose-Flap_Index
000136E0                            
000136E0 =00000032                  flap_time:	equ $32		; time between opening/closing
000136E0 =00000030                  flap_wait:	equ $30		; time until change
000136E0                            ; ===========================================================================
000136E0                            
000136E0                            Flap_Main:	; Routine 0
000136E0 5428 0024                  		addq.b	#2,obRoutine(a0)
000136E4 217C 0000 0000 0004        		move.l	#Map_Flap,obMap(a0)
000136EC 317C 4328 0002             		move.w	#$4328,obGfx(a0)
000136F2 0028 0004 0001             		ori.b	#4,obRender(a0)
000136F8 117C 0028 0014             		move.b	#$28,obActWid(a0)
000136FE 7000                       		moveq	#0,d0
00013700 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013704 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00013708 3140 0032                  		move.w	d0,flap_time(a0) ; set flap delay time
0001370C                            
0001370C                            Flap_OpenClose:	; Routine 2
0001370C 5368 0030                  		subq.w	#1,flap_wait(a0) ; decrement time delay
00013710 6A00                       		bpl.s	@wait		; if time remains, branch
00013712 3168 0032 0030             		move.w	flap_time(a0),flap_wait(a0) ; reset time delay
00013718 0868 0000 001C             		bchg	#0,obAnim(a0)	; open/close door
0001371E 4A28 0001                  		tst.b	obRender(a0)
00013722 6A00                       		bpl.s	@nosound
0001372E                            
0001372E                            	@wait:
0001372E                            	@nosound:
0001372E 43F9 0000 0000             		lea	(Ani_Flap).l,a1
00013734 6100 912C                  		bsr.w	AnimateSprite
00013738 4238 F7C9                  		clr.b	(f_wtunnelallow).w ; enable wind tunnel
0001373C 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
00013740 6600                       		bne.s	@display	; if yes, branch
00013742 3038 D008                  		move.w	(v_player+obX).w,d0
00013746 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic passed through the door?
0001374A 6400                       		bcc.s	@display	; if yes, branch
0001374C 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
00013752 323C 0013                  		move.w	#$13,d1
00013756 343C 0020                  		move.w	#$20,d2
0001375A 3602                       		move.w	d2,d3
0001375C 5243                       		addq.w	#1,d3
0001375E 3828 0008                  		move.w	obX(a0),d4
00013762 6100 E594                  		bsr.w	SolidObject	; make the door	solid
00013766                            
00013766                            	@display:
00013766 6000 E0F8                  		bra.w	RememberState
00013766 6000 E0F8                  		bra.w	RememberState
0001376A                            		include	"_anim\Flapping Door.asm"
0001376A                            ; ---------------------------------------------------------------------------
0001376A                            ; Animation script - flapping door (LZ)
0001376A                            ; ---------------------------------------------------------------------------
0001376A 0000                       Ani_Flap:	dc.w @opening-Ani_Flap
0001376C 0000                       		dc.w @closing-Ani_Flap
0001376E 0300 0102 FE01             @opening:	dc.b 3,	0, 1, 2, afBack, 1
00013774 0302 0100 FE01             @closing:	dc.b 3,	2, 1, 0, afBack, 1
0001377A                            		even
0001377A                            		even
0001377A                            Map_Flap:	include	"_maps\Flapping Door.asm"
0001377A                            ; ---------------------------------------------------------------------------
0001377A                            ; Sprite mappings - flapping door (LZ)
0001377A                            ; ---------------------------------------------------------------------------
0001377A                            Map_Flap_internal:
0001377A 0000                       		dc.w @closed-Map_Flap_internal
0001377C 0000                       		dc.w @halfway-Map_Flap_internal
0001377E 0000                       		dc.w @open-Map_Flap_internal
00013780 02                         @closed:	dc.b 2
00013781 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00013786 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001378B 02                         @halfway:	dc.b 2
0001378C DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00013791 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00013796 02                         @open:		dc.b 2
00013797 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
0001379C 180D 1018 00               		dc.b $18, $D, $10, $18,	0
000137A2 00                         		even
000137A2 00                         		even
000137A2                            
000137A2                            		include	"_incObj\71 Invisible Barriers.asm"
000137A2                            ; ---------------------------------------------------------------------------
000137A2                            ; Object 71 - invisible	solid barriers
000137A2                            ; ---------------------------------------------------------------------------
000137A2                            
000137A2                            Invisibarrier:
000137A2 7000                       		moveq	#0,d0
000137A4 1028 0024                  		move.b	obRoutine(a0),d0
000137A8 323B 0000                  		move.w	Invis_Index(pc,d0.w),d1
000137AC 4EFB 1000                  		jmp	Invis_Index(pc,d1.w)
000137B0                            ; ===========================================================================
000137B0 0000                       Invis_Index:	dc.w Invis_Main-Invis_Index
000137B2 0000                       		dc.w Invis_Solid-Invis_Index
000137B4                            
000137B4 =00000016                  invis_height:	equ $16		; height in pixels
000137B4                            ; ===========================================================================
000137B4                            
000137B4                            Invis_Main:	; Routine 0
000137B4 5428 0024                  		addq.b	#2,obRoutine(a0)
000137B8 217C 0000 0000 0004        		move.l	#Map_Invis,obMap(a0)
000137C0 317C 8680 0002             		move.w	#$8680,obGfx(a0)
000137C6 0028 0004 0001             		ori.b	#4,obRender(a0)
000137CC 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000137D0 1200                       		move.b	d0,d1
000137D2 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
000137D6 0640 0010                  		addi.w	#$10,d0
000137DA E248                       		lsr.w	#1,d0
000137DC 1140 0014                  		move.b	d0,obActWid(a0)	; set object width
000137E0 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
000137E4 5241                       		addq.w	#1,d1
000137E6 E749                       		lsl.w	#3,d1
000137E8 1141 0016                  		move.b	d1,invis_height(a0) ; set object height
000137EC                            
000137EC                            Invis_Solid:	; Routine 2
000137EC 6100 C34C                  		bsr.w	ChkObjectVisible
000137F0 6600                       		bne.s	@chkdel
000137F2 7200                       		moveq	#0,d1
000137F4 1228 0014                  		move.b	obActWid(a0),d1
000137F8 0641 000B                  		addi.w	#$B,d1
000137FC 7400                       		moveq	#0,d2
000137FE 1428 0016                  		move.b	invis_height(a0),d2
00013802 3602                       		move.w	d2,d3
00013804 5243                       		addq.w	#1,d3
00013806 3828 0008                  		move.w	obX(a0),d4
0001380A 6100 E534                  		bsr.w	SolidObject71
0001380E                            
0001380E                            @chkdel:
0001382A 4A78 FE08                  		tst.w	(v_debuguse).w	; are you using	debug mode?
0001382E 6700                       		beq.s	@nodisplay	; if not, branch
00013830 4EF9 0000 F7AC             		jmp	(DisplaySprite).l	; if yes, display the object
00013836                            
00013836                            	@nodisplay:
00013836 4E75                       		rts	
00013838                            
00013838                            	@delete:
00013838 4EF9 0000 F7EC             		jmp	(DeleteObject).l
00013838 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001383E                            Map_Invis:	include	"_maps\Invisible Barriers.asm"
0001383E                            ; --------------------------------------------------------------------------------
0001383E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001383E                            ; --------------------------------------------------------------------------------
0001383E                            
0001383E                            SME_t60cE:	
0001383E 0000 0000                  		dc.w SME_t60cE_6-SME_t60cE, SME_t60cE_1B-SME_t60cE	
00013842 0000                       		dc.w SME_t60cE_30-SME_t60cE	
00013844 04                         SME_t60cE_6:	dc.b 4	
00013845 0005 0028 F0               		dc.b 0, 5, 0, $28, $F0	
0001384A 0005 0028 00               		dc.b 0, 5, 0, $28, 0	
0001384F F005 0028 00               		dc.b $F0, 5, 0, $28, 0	
00013854 F005 0028 F0               		dc.b $F0, 5, 0, $28, $F0	
00013859 04                         SME_t60cE_1B:	dc.b 4	
0001385A E005 0028 C0               		dc.b $E0, 5, 0, $28, $C0	
0001385F E005 0028 30               		dc.b $E0, 5, 0, $28, $30	
00013864 1005 0028 30               		dc.b $10, 5, 0, $28, $30	
00013869 1005 0028 C0               		dc.b $10, 5, 0, $28, $C0	
0001386E 04                         SME_t60cE_30:	dc.b 4	
0001386F E005 0028 80               		dc.b $E0, 5, 0, $28, $80	
00013874 E005 0028 70               		dc.b $E0, 5, 0, $28, $70	
00013879 1005 0028 70               		dc.b $10, 5, 0, $28, $70	
0001387E 1005 0028 80               		dc.b $10, 5, 0, $28, $80	
00013884 00                         		even
00013884 00                         		even
00013884                            
00013884                            		include	"_incObj\5D Fan.asm"
00013884                            ; ---------------------------------------------------------------------------
00013884                            ; Object 5D - fans (SLZ)
00013884                            ; ---------------------------------------------------------------------------
00013884                            
00013884                            Fan:
00013884 7000                       		moveq	#0,d0
00013886 1028 0024                  		move.b	obRoutine(a0),d0
0001388A 323B 0000                  		move.w	Fan_Index(pc,d0.w),d1
0001388E 4EFB 1000                  		jmp	Fan_Index(pc,d1.w)
00013892                            ; ===========================================================================
00013892 0000                       Fan_Index:	dc.w Fan_Main-Fan_Index
00013894 0000                       		dc.w Fan_Delay-Fan_Index
00013896                            
00013896 =00000030                  fan_time:	equ $30		; time between switching on/off
00013896 =00000032                  fan_switch:	equ $32		; on/off switch
00013896                            ; ===========================================================================
00013896                            
00013896                            Fan_Main:	; Routine 0
00013896 5428 0024                  		addq.b	#2,obRoutine(a0)
0001389A 217C 0000 0000 0004        		move.l	#Map_Fan,obMap(a0)
000138A2 317C 43A0 0002             		move.w	#$43A0,obGfx(a0)
000138A8 0028 0004 0001             		ori.b	#4,obRender(a0)
000138AE 117C 0010 0014             		move.b	#$10,obActWid(a0)
000138B4 317C 0200 0018             		move.w	#$200,obPriority(a0)
000138BA                            
000138BA                            Fan_Delay:	; Routine 2
000138BA 0828 0001 0028             		btst	#1,obSubtype(a0) ; is object type 02/03 (always on)?
000138C0 6600                       		bne.s	@blow		; if yes, branch
000138C2 5368 0030                  		subq.w	#1,fan_time(a0)	; subtract 1 from time delay
000138C6 6A00                       		bpl.s	@blow		; if time remains, branch
000138C8 317C 0078 0030             		move.w	#120,fan_time(a0) ; set delay to 2 seconds
000138CE 0868 0000 0032             		bchg	#0,fan_switch(a0) ; switch fan on/off
000138D4 6700                       		beq.s	@blow		; if fan is off, branch
000138D6 317C 00B4 0030             		move.w	#180,fan_time(a0) ; set delay to 3 seconds
000138DC                            
000138DC                            @blow:
000138DC 4A28 0032                  		tst.b	fan_switch(a0)	; is fan switched on?
000138E0 6600 0000                  		bne.w	@chkdel		; if not, branch
000138E4 43F8 D000                  		lea	(v_player).w,a1
000138E8 3029 0008                  		move.w	obX(a1),d0
000138EC 9068 0008                  		sub.w	obX(a0),d0
000138F0 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
000138F6 6600                       		bne.s	@chksonic	; if yes, branch
000138F8 4440                       		neg.w	d0
000138FA                            
000138FA                            @chksonic:
000138FA 0640 0050                  		addi.w	#$50,d0
000138FE 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00013902 6400                       		bcc.s	@animate	; if yes, branch
00013904 3229 000C                  		move.w	obY(a1),d1
00013908 0641 0060                  		addi.w	#$60,d1
0001390C 9268 000C                  		sub.w	obY(a0),d1
00013910 6500                       		bcs.s	@animate	; branch if Sonic is too low
00013912 0C41 0070                  		cmpi.w	#$70,d1
00013916 6400                       		bcc.s	@animate	; branch if Sonic is too high
00013918 0440 0050                  		subi.w	#$50,d0		; is Sonic more than $50 pixels from the fan?
0001391C 6400                       		bcc.s	@faraway	; if yes, branch
0001391E 4640                       		not.w	d0
00013920 D040                       		add.w	d0,d0
00013922                            
00013922                            	@faraway:
00013922 0640 0060                  		addi.w	#$60,d0
00013926 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
0001392C 6600                       		bne.s	@right		; if yes, branch
0001392E 4440                       		neg.w	d0
00013930                            
00013930                            	@right:
00013930 4400                       		neg.b	d0
00013932 E840                       		asr.w	#4,d0
00013934 0828 0000 0028             		btst	#0,obSubtype(a0)
0001393A 6700                       		beq.s	@movesonic
0001393C 4440                       		neg.w	d0
0001393E                            
0001393E                            	@movesonic:
0001393E D169 0008                  		add.w	d0,obX(a1)	; push Sonic away from the fan
00013942                            
00013942                            @animate:
00013942 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00013946 6A00                       		bpl.s	@chkdel
00013948 117C 0000 001E             		move.b	#0,obTimeFrame(a0)
0001394E 5228 001B                  		addq.b	#1,obAniFrame(a0)
00013952 0C28 0003 001B             		cmpi.b	#3,obAniFrame(a0)
00013958 6500                       		bcs.s	@noreset
0001395A 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset after 4 frames
00013960                            
00013960                            	@noreset:
00013960 7000                       		moveq	#0,d0
00013962 0828 0000 0028             		btst	#0,obSubtype(a0)
00013968 6700                       		beq.s	@noflip
0001396A 7002                       		moveq	#2,d0
0001396C                            
0001396C                            	@noflip:
0001396C D028 001B                  		add.b	obAniFrame(a0),d0
00013970 1140 001A                  		move.b	d0,obFrame(a0)
00013974                            
00013974                            @chkdel:
00013974 6100 BE36                  		bsr.w	DisplaySprite
00013996 4E75                       		rts	
00013996 4E75                       		rts	
00013998                            Map_Fan:	include	"_maps\Fan.asm"
00013998                            ; ---------------------------------------------------------------------------
00013998                            ; Sprite mappings - fans (SLZ)
00013998                            ; ---------------------------------------------------------------------------
00013998                            Map_Fan_internal:
00013998 0000                       		dc.w @fan1-Map_Fan_internal
0001399A 0000                       		dc.w @fan2-Map_Fan_internal
0001399C 0000                       		dc.w @fan3-Map_Fan_internal
0001399E 0000                       		dc.w @fan2-Map_Fan_internal
000139A0 0000                       		dc.w @fan1-Map_Fan_internal
000139A2 02                         @fan1:		dc.b 2
000139A3 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
000139A8 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
000139AD 02                         @fan2:		dc.b 2
000139AE F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
000139B3 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
000139B8 02                         @fan3:		dc.b 2
000139B9 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
000139BE 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
000139C4 00                         		even
000139C4 00                         		even
000139C4                            		include	"_incObj\5E Seesaw.asm"
000139C4                            ; ---------------------------------------------------------------------------
000139C4                            ; Object 5E - seesaws (SLZ)
000139C4                            ; ---------------------------------------------------------------------------
000139C4                            
000139C4                            Seesaw:
000139C4 7000                       		moveq	#0,d0
000139C6 1028 0024                  		move.b	obRoutine(a0),d0
000139CA 323B 0000                  		move.w	See_Index(pc,d0.w),d1
000139CE 4EBB 1000                  		jsr	See_Index(pc,d1.w)
000139D2 3028 0000                  		move.w	see_origX(a0),d0
000139D6 0240 FF80                  		andi.w	#$FF80,d0
000139DA 3238 F700                  		move.w	(v_screenposx).w,d1
000139DE 0441 0080                  		subi.w	#$80,d1
000139E2 0241 FF80                  		andi.w	#$FF80,d1
000139E6 9041                       		sub.w	d1,d0
000139E8 6B00 BE02                  		bmi.w	DeleteObject
000139EC 0C40 0280                  		cmpi.w	#$280,d0
000139F0 6200 BDFA                  		bhi.w	DeleteObject
000139F4 6000 BDB6                  		bra.w	DisplaySprite
000139F8                            ; ===========================================================================
000139F8 0000                       See_Index:	dc.w See_Main-See_Index
000139FA 0000                       		dc.w See_Slope-See_Index
000139FC 0000                       		dc.w See_Slope2-See_Index
000139FE 0000                       		dc.w See_Spikeball-See_Index
00013A00 0000                       		dc.w See_MoveSpike-See_Index
00013A02 0000                       		dc.w See_SpikeFall-See_Index
00013A04                            
00013A04 =00000030                  see_origX:	equ $30		; original x-axis position
00013A04 =00000034                  see_origY:	equ $34		; original y-axis position
00013A04 =00000038                  see_speed:	equ $38		; speed of collision
00013A04 =0000003A                  see_frame:	equ $3A		; 
00013A04 =0000003C                  see_parent:	equ $3C		; RAM address of parent object
00013A04                            ; ===========================================================================
00013A04                            
00013A04                            See_Main:	; Routine 0
00013A04 5428 0024                  		addq.b	#2,obRoutine(a0)
00013A08 217C 0000 0000 0004        		move.l	#Map_Seesaw,obMap(a0)
00013A10 317C 0374 0002             		move.w	#$374,obGfx(a0)
00013A16 0028 0004 0001             		ori.b	#4,obRender(a0)
00013A1C 117C 0004 0018             		move.b	#4,obPriority(a0)
00013A22 117C 0030 0014             		move.b	#$30,obActWid(a0)
00013A28 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013A2E 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 ?
00013A32 6600                       		bne.s	@noball		; if not, branch
00013A34                            
00013A34 6100 C326                  		bsr.w	FindNextFreeObj
00013A38 6600                       		bne.s	@noball
00013A3A 12BC 005E                  		move.b	#id_Seesaw,0(a1) ; load spikeball object
00013A3E 5C29 0024                  		addq.b	#6,obRoutine(a1) ; use See_Spikeball routine
00013A42 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013A48 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013A4E 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013A54 2348 003C                  		move.l	a0,see_parent(a1)
00013A58                            
00013A58                            	@noball:
00013A58 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013A5E 6700                       		beq.s	@noflip		; if not, branch
00013A60 117C 0002 001A             		move.b	#2,obFrame(a0)	; use different frame
00013A66                            
00013A66                            	@noflip:
00013A66 1168 001A 003A             		move.b	obFrame(a0),see_frame(a0)
00013A6C                            
00013A6C                            See_Slope:	; Routine 2
00013A6C 1228 003A                  		move.b	see_frame(a0),d1
00013A70 6100 0000                  		bsr.w	See_ChgFrame
00013A74 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013A7A 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013A80 6700                       		beq.s	@notflat	; if not, branch
00013A82 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013A88                            
00013A88                            	@notflat:
00013A88 43F8 D000                  		lea	(v_player).w,a1
00013A8C 3169 0012 0038             		move.w	obVelY(a1),see_speed(a0)
00013A92 323C 0030                  		move.w	#$30,d1
00013A96 4EB9 0000 8CF8             		jsr	(SlopeObject).l
00013A9C 4E75                       		rts	
00013A9E                            ; ===========================================================================
00013A9E                            
00013A9E                            See_Slope2:	; Routine 4
00013A9E 6100 0000                  		bsr.w	See_ChkSide
00013AA2 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013AA8 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013AAE 6700                       		beq.s	@notflat	; if not, branch
00013AB0 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013AB6                            
00013AB6                            	@notflat:
00013AB6 323C 0030                  		move.w	#$30,d1
00013ABA 4EB9 0000 8D98             		jsr	(ExitPlatform).l
00013AC0 323C 0030                  		move.w	#$30,d1
00013AC4 3428 0008                  		move.w	obX(a0),d2
00013AC8 4EB9 0000 9D32             		jsr	(SlopeObject2).l
00013ACE 4E75                       		rts	
00013AD0                            ; ===========================================================================
00013AD0                            
00013AD0                            See_ChkSide:
00013AD0 7202                       		moveq	#2,d1
00013AD2 43F8 D000                  		lea	(v_player).w,a1
00013AD6 3028 0008                  		move.w	obX(a0),d0
00013ADA 9069 0008                  		sub.w	obX(a1),d0	; is Sonic on the left side of the seesaw?
00013ADE 6400                       		bcc.s	@leftside	; if yes, branch
00013AE0 4440                       		neg.w	d0
00013AE2 7200                       		moveq	#0,d1
00013AE4                            
00013AE4                            	@leftside:
00013AE4 0C40 0008                  		cmpi.w	#8,d0
00013AE8 6400                       		bcc.s	See_ChgFrame
00013AEA 7201                       		moveq	#1,d1
00013AEC                            
00013AEC                            See_ChgFrame:
00013AEC 1028 001A                  		move.b	obFrame(a0),d0
00013AF0 B001                       		cmp.b	d1,d0		; does frame need to change?
00013AF2 6700                       		beq.s	@noflip		; if not, branch
00013AF4 6400                       		bcc.s	@loc_11772
00013AF6 5400                       		addq.b	#2,d0
00013AF8                            
00013AF8                            	@loc_11772:
00013AF8 5300                       		subq.b	#1,d0
00013AFA 1140 001A                  		move.b	d0,obFrame(a0)
00013AFE 1141 003A                  		move.b	d1,see_frame(a0)
00013B02 08A8 0000 0001             		bclr	#0,obRender(a0)
00013B08 0828 0001 001A             		btst	#1,obFrame(a0)
00013B0E 6700                       		beq.s	@noflip
00013B10 08E8 0000 0001             		bset	#0,obRender(a0)
00013B16                            
00013B16                            	@noflip:
00013B16 4E75                       		rts	
00013B18                            ; ===========================================================================
00013B18                            
00013B18                            See_Spikeball:	; Routine 6
00013B18 5428 0024                  		addq.b	#2,obRoutine(a0)
00013B1C 217C 0000 0000 0004        		move.l	#Map_SSawBall,obMap(a0)
00013B24 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00013B2A 0028 0004 0001             		ori.b	#4,obRender(a0)
00013B30 117C 0004 0018             		move.b	#4,obPriority(a0)
00013B36 117C 008B 0020             		move.b	#$8B,obColType(a0)
00013B3C 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013B42 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013B48 0668 0028 0008             		addi.w	#$28,obX(a0)
00013B4E 3168 000C 0034             		move.w	obY(a0),see_origY(a0)
00013B54 117C 0001 001A             		move.b	#1,obFrame(a0)
00013B5A 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013B60 6700                       		beq.s	See_MoveSpike	; if not, branch
00013B62 0468 0050 0008             		subi.w	#$50,obX(a0)	; move spikeball to the other side
00013B68 117C 0002 003A             		move.b	#2,see_frame(a0)
00013B6E                            
00013B6E                            See_MoveSpike:	; Routine 8
00013B6E 2268 003C                  		movea.l	see_parent(a0),a1
00013B72 7000                       		moveq	#0,d0
00013B74 1028 003A                  		move.b	see_frame(a0),d0
00013B78 9029 003A                  		sub.b	see_frame(a1),d0
00013B7C 6700                       		beq.s	loc_1183E
00013B7E 6400                       		bcc.s	loc_117FC
00013B80 4400                       		neg.b	d0
00013B82                            
00013B82                            loc_117FC:
00013B82 323C F7E8                  		move.w	#-$818,d1
00013B86 343C FEEC                  		move.w	#-$114,d2
00013B8A 0C00 0001                  		cmpi.b	#1,d0
00013B8E 6700                       		beq.s	loc_11822
00013B90 323C F510                  		move.w	#-$AF0,d1
00013B94 343C FF34                  		move.w	#-$CC,d2
00013B98 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00013B9E 6D00                       		blt.s	loc_11822
00013BA0 323C F200                  		move.w	#-$E00,d1
00013BA4 343C FF60                  		move.w	#-$A0,d2
00013BA8                            
00013BA8                            loc_11822:
00013BA8 3141 0012                  		move.w	d1,obVelY(a0)
00013BAC 3142 0010                  		move.w	d2,obVelX(a0)
00013BB0 3028 0008                  		move.w	obX(a0),d0
00013BB4 9068 0030                  		sub.w	see_origX(a0),d0
00013BB8 6400                       		bcc.s	loc_11838
00013BBA 4468 0010                  		neg.w	obVelX(a0)
00013BBE                            
00013BBE                            loc_11838:
00013BBE 5428 0024                  		addq.b	#2,obRoutine(a0)
00013BC2 6000                       		bra.s	See_SpikeFall
00013BC4                            ; ===========================================================================
00013BC4                            
00013BC4                            loc_1183E:
00013BC4 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013BCA 7000                       		moveq	#0,d0
00013BCC 1029 001A                  		move.b	obFrame(a1),d0
00013BD0 343C 0028                  		move.w	#$28,d2
00013BD4 3228 0008                  		move.w	obX(a0),d1
00013BD8 9268 0030                  		sub.w	see_origX(a0),d1
00013BDC 6400                       		bcc.s	loc_1185C
00013BDE 4442                       		neg.w	d2
00013BE0 5440                       		addq.w	#2,d0
00013BE2                            
00013BE2                            loc_1185C:
00013BE2 D040                       		add.w	d0,d0
00013BE4 3228 0034                  		move.w	see_origY(a0),d1
00013BE8 D272 0000                  		add.w	(a2,d0.w),d1
00013BEC 3141 000C                  		move.w	d1,obY(a0)
00013BF0 D468 0030                  		add.w	see_origX(a0),d2
00013BF4 3142 0008                  		move.w	d2,obX(a0)
00013BF8 4268 000E                  		clr.w	obY+2(a0)
00013BFC 4268 000A                  		clr.w	obX+2(a0)
00013C00 4E75                       		rts	
00013C02                            ; ===========================================================================
00013C02                            
00013C02                            See_SpikeFall:	; Routine $A
00013C02 4A68 0012                  		tst.w	obVelY(a0)	; is spikeball falling down?
00013C06 6A00                       		bpl.s	loc_1189A	; if yes, branch
00013C08 6100 BB56                  		bsr.w	ObjectFall
00013C0C 3028 0034                  		move.w	see_origY(a0),d0
00013C10 0440 002F                  		subi.w	#$2F,d0
00013C14 B068 000C                  		cmp.w	obY(a0),d0
00013C18 6E00                       		bgt.s	locret_11898
00013C1A 6100 BB44                  		bsr.w	ObjectFall
00013C1E                            
00013C1E                            locret_11898:
00013C1E 4E75                       		rts	
00013C20                            ; ===========================================================================
00013C20                            
00013C20                            loc_1189A:
00013C20 6100 BB3E                  		bsr.w	ObjectFall
00013C24 2268 003C                  		movea.l	see_parent(a0),a1
00013C28 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013C2E 7000                       		moveq	#0,d0
00013C30 1029 001A                  		move.b	obFrame(a1),d0
00013C34 3228 0008                  		move.w	obX(a0),d1
00013C38 9268 0030                  		sub.w	see_origX(a0),d1
00013C3C 6400                       		bcc.s	loc_118BA
00013C3E 5440                       		addq.w	#2,d0
00013C40                            
00013C40                            loc_118BA:
00013C40 D040                       		add.w	d0,d0
00013C42 3228 0034                  		move.w	see_origY(a0),d1
00013C46 D272 0000                  		add.w	(a2,d0.w),d1
00013C4A B268 000C                  		cmp.w	obY(a0),d1
00013C4E 6E00                       		bgt.s	locret_11938
00013C50 2268 003C                  		movea.l	see_parent(a0),a1
00013C54 7202                       		moveq	#2,d1
00013C56 4A68 0010                  		tst.w	obVelX(a0)
00013C5A 6B00                       		bmi.s	See_Spring
00013C5C 7200                       		moveq	#0,d1
00013C5E                            
00013C5E                            See_Spring:
00013C5E 1341 003A                  		move.b	d1,$3A(a1)
00013C62 1141 003A                  		move.b	d1,see_frame(a0)
00013C66 B229 001A                  		cmp.b	obFrame(a1),d1
00013C6A 6700                       		beq.s	loc_1192C
00013C6C 08A9 0003 0022             		bclr	#3,obStatus(a1)
00013C72 6700                       		beq.s	loc_1192C
00013C74 4229 0025                  		clr.b	ob2ndRout(a1)
00013C78 137C 0002 0024             		move.b	#2,obRoutine(a1)
00013C7E 45F8 D000                  		lea	(v_player).w,a2
00013C82 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
00013C88 446A 0012                  		neg.w	obVelY(a2)
00013C8C 08EA 0001 0022             		bset	#1,obStatus(a2)
00013C92 08AA 0003 0022             		bclr	#3,obStatus(a2)
00013C98 422A 003C                  		clr.b	$3C(a2)
00013C9C 157C 0000 001C             		move.b	#id_Spring,obAnim(a2) ; change Sonic's animation to "spring" ($10)
00013CA2 157C 0002 0024             		move.b	#2,obRoutine(a2)
00013CB2                            
00013CB2                            loc_1192C:
00013CB2 4268 0010                  		clr.w	obVelX(a0)
00013CB6 4268 0012                  		clr.w	obVelY(a0)
00013CBA 5528 0024                  		subq.b	#2,obRoutine(a0)
00013CBE                            
00013CBE                            locret_11938:
00013CBE 4E75                       		rts	
00013CC0                            ; ===========================================================================
00013CC0 FFF8 FFE4 FFD1 FFE4 FFF8   See_Speeds:	dc.w -8, -$1C, -$2F, -$1C, -8
00013CCA                            
00013CCA                            See_DataSlope:	incbin	"misc\slzssaw1.bin"
00013CFA                            		even
00013CFA                            See_DataFlat:	incbin	"misc\slzssaw2.bin"
00013D2A                            		even
00013D2A                            		even
00013D2A                            Map_Seesaw:	include	"_maps\Seesaw.asm"
00013D2A                            ; ---------------------------------------------------------------------------
00013D2A                            ; Sprite mappings - seesaws (SLZ)
00013D2A                            ; ---------------------------------------------------------------------------
00013D2A                            Map_Seesaw_internal:
00013D2A 0000                       		dc.w @sloping-Map_Seesaw_internal
00013D2C 0000                       		dc.w @flat-Map_Seesaw_internal
00013D2E 0000                       		dc.w @sloping-Map_Seesaw_internal
00013D30 0000                       		dc.w @flat-Map_Seesaw_internal
00013D32 07                         @sloping:	dc.b 7
00013D33 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00013D38 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00013D3D E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00013D42 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00013D47 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00013D4C F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00013D51 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00013D56 04                         @flat:		dc.b 4
00013D57 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00013D5C E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00013D61 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00013D66 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00013D6C 00                         		even
00013D6C 00                         		even
00013D6C                            Map_SSawBall:	include	"_maps\Seesaw Ball.asm"
00013D6C                            ; ---------------------------------------------------------------------------
00013D6C                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00013D6C                            ; ---------------------------------------------------------------------------
00013D6C                            Map_SSawBall_internal:
00013D6C 0000                       		dc.w @red-Map_SSawBall_internal
00013D6E 0000                       		dc.w @silver-Map_SSawBall_internal
00013D70 01                         @red:		dc.b 1
00013D71 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013D76 01                         @silver:	dc.b 1
00013D77 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00013D7C                            		even
00013D7C                            		even
00013D7C                            		include	"_incObj\5F Bomb Enemy.asm"
00013D7C                            ; ---------------------------------------------------------------------------
00013D7C                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00013D7C                            ; ---------------------------------------------------------------------------
00013D7C                            
00013D7C                            Bomb:
00013D7C 7000                       		moveq	#0,d0
00013D7E 1028 0024                  		move.b	obRoutine(a0),d0
00013D82 323B 0000                  		move.w	Bom_Index(pc,d0.w),d1
00013D86 4EFB 1000                  		jmp	Bom_Index(pc,d1.w)
00013D8A                            ; ===========================================================================
00013D8A 0000                       Bom_Index:	dc.w Bom_Main-Bom_Index
00013D8C 0000                       		dc.w Bom_Action-Bom_Index
00013D8E 0000                       		dc.w Bom_Display-Bom_Index
00013D90 0000                       		dc.w Bom_End-Bom_Index
00013D92                            
00013D92 =00000030                  bom_time:	equ $30		; time of fuse
00013D92 =00000034                  bom_origY:	equ $34		; original y-axis position
00013D92 =0000003C                  bom_parent:	equ $3C		; address of parent object
00013D92                            ; ===========================================================================
00013D92                            
00013D92                            Bom_Main:	; Routine 0
00013D92 5428 0024                  		addq.b	#2,obRoutine(a0)
00013D96 217C 0000 0000 0004        		move.l	#Map_Bomb,obMap(a0)
00013D9E 317C 0400 0002             		move.w	#$400,obGfx(a0)
00013DA4 0028 0004 0001             		ori.b	#4,obRender(a0)
00013DAA 317C 0180 0018             		move.w	#$180,obPriority(a0)
00013DB0 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013DB6 1028 0028                  		move.b	obSubtype(a0),d0
00013DBA 6700                       		beq.s	loc_11A3C
00013DBC 1140 0024                  		move.b	d0,obRoutine(a0)
00013DC0 4E75                       		rts	
00013DC2                            ; ===========================================================================
00013DC2                            
00013DC2                            loc_11A3C:
00013DC2 117C 009A 0020             		move.b	#$9A,obColType(a0)
00013DC8 0868 0000 0022             		bchg	#0,obStatus(a0)
00013DCE                            
00013DCE                            Bom_Action:	; Routine 2
00013DCE 7000                       		moveq	#0,d0
00013DD0 1028 0025                  		move.b	ob2ndRout(a0),d0
00013DD4 323B 0000                  		move.w	@index(pc,d0.w),d1
00013DD8 4EBB 1000                  		jsr	@index(pc,d1.w)
00013DDC 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013DE2 6100 8A7E                  		bsr.w	AnimateSprite
00013DE6 6000 DA78                  		bra.w	RememberState
00013DEA                            ; ===========================================================================
00013DEA 0000                       @index:		dc.w @walk-@index
00013DEC 0000                       		dc.w @wait-@index
00013DEE 0000                       		dc.w @explode-@index
00013DF0                            ; ===========================================================================
00013DF0                            
00013DF0                            @walk:
00013DF0 6100 0000                  		bsr.w	@chksonic
00013DF4 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013DF8 6A00                       		bpl.s	@noflip		; if time remains, branch
00013DFA 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @wait
00013DFE 317C 05FF 0030             		move.w	#1535,bom_time(a0) ; set time delay to 25 seconds
00013E04 317C 0010 0010             		move.w	#$10,obVelX(a0)
00013E0A 117C 0001 001C             		move.b	#1,obAnim(a0)	; use walking animation
00013E10 0868 0000 0022             		bchg	#0,obStatus(a0)
00013E16 6700                       		beq.s	@noflip
00013E18 4468 0010                  		neg.w	obVelX(a0)	; change direction
00013E1C                            
00013E1C                            	@noflip:
00013E1C 4E75                       		rts	
00013E1E                            ; ===========================================================================
00013E1E                            
00013E1E                            @wait:
00013E1E 6100 0000                  		bsr.w	@chksonic
00013E22 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013E26 6B00                       		bmi.s	@stopwalking	; if time expires, branch
00013E28 6100 B96E                  		bsr.w	SpeedToPos
00013E2C 4E75                       		rts	
00013E2E                            ; ===========================================================================
00013E2E                            
00013E2E                            	@stopwalking:
00013E2E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00013E32 317C 00B3 0030             		move.w	#179,bom_time(a0) ; set time delay to 3 seconds
00013E38 4268 0010                  		clr.w	obVelX(a0)	; stop walking
00013E3C 117C 0000 001C             		move.b	#0,obAnim(a0)	; use waiting animation
00013E42 4E75                       		rts	
00013E44                            ; ===========================================================================
00013E44                            
00013E44                            @explode:
00013E44 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013E48 6A00                       		bpl.s	@noexplode	; if time remains, branch
00013E4A 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0) ; change bomb into an explosion
00013E4E 117C 0000 0024             		move.b	#0,obRoutine(a0)
00013E54                            
00013E54                            	@noexplode:
00013E54 4E75                       		rts	
00013E56                            ; ===========================================================================
00013E56                            
00013E56                            @chksonic:
00013E56 3038 D008                  		move.w	(v_player+obX).w,d0
00013E5A 9068 0008                  		sub.w	obX(a0),d0
00013E5E 6400                       		bcc.s	@isleft
00013E60 4440                       		neg.w	d0
00013E62                            
00013E62                            	@isleft:
00013E62 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels?
00013E66 6400                       		bcc.s	@outofrange	; if not, branch
00013E68 3038 D00C                  		move.w	(v_player+obY).w,d0
00013E6C 9068 000C                  		sub.w	obY(a0),d0
00013E70 6400                       		bcc.s	@isabove
00013E72 4440                       		neg.w	d0
00013E74                            
00013E74                            	@isabove:
00013E74 0C40 0060                  		cmpi.w	#$60,d0
00013E78 6400                       		bcc.s	@outofrange
00013E7A 4A78 FE08                  		tst.w	(v_debuguse).w
00013E7E 6600                       		bne.s	@outofrange
00013E80                            
00013E80 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
00013E86 317C 008F 0030             		move.w	#143,bom_time(a0) ; set fuse time
00013E8C 4268 0010                  		clr.w	obVelX(a0)
00013E90 117C 0002 001C             		move.b	#2,obAnim(a0)	; use activated animation
00013E96 6100 BEC4                  		bsr.w	FindNextFreeObj
00013E9A 6600                       		bne.s	@outofrange
00013E9C 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load fuse object
00013EA0 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013EA6 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013EAC 3368 000C 0034             		move.w	obY(a0),bom_origY(a1)
00013EB2 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013EB8 137C 0004 0028             		move.b	#4,obSubtype(a1)
00013EBE 137C 0003 001C             		move.b	#3,obAnim(a1)
00013EC4 337C 0010 0012             		move.w	#$10,obVelY(a1)
00013ECA 0828 0001 0022             		btst	#1,obStatus(a0)	; is bomb upside-down?
00013ED0 6700                       		beq.s	@normal		; if not, branch
00013ED2 4469 0012                  		neg.w	obVelY(a1)	; reverse direction for fuse
00013ED6                            
00013ED6                            	@normal:
00013ED6 337C 008F 0030             		move.w	#143,bom_time(a1) ; set fuse time
00013EDC 2348 003C                  		move.l	a0,bom_parent(a1)
00013EE0                            
00013EE0                            @outofrange:
00013EE0 4E75                       		rts	
00013EE2                            ; ===========================================================================
00013EE2                            
00013EE2                            Bom_Display:	; Routine 4
00013EE2 6100                       		bsr.s	loc_11B70
00013EE4 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013EEA 6100 8976                  		bsr.w	AnimateSprite
00013EEE 6000 D970                  		bra.w	RememberState
00013EF2                            ; ===========================================================================
00013EF2                            
00013EF2                            loc_11B70:
00013EF2 5368 0030                  		subq.w	#1,bom_time(a0)
00013EF6 6B00                       		bmi.s	loc_11B7C
00013EF8 6100 B89E                  		bsr.w	SpeedToPos
00013EFC 4E75                       		rts	
00013EFE                            ; ===========================================================================
00013EFE                            
00013EFE                            loc_11B7C:
00013EFE 4268 0030                  		clr.w	bom_time(a0)
00013F02 4228 0024                  		clr.b	obRoutine(a0)
00013F06 3168 0034 000C             		move.w	bom_origY(a0),obY(a0)
00013F0C 7203                       		moveq	#3,d1
00013F0E 2248                       		movea.l	a0,a1
00013F10 45F9 0000 0000             		lea	(Bom_ShrSpeed).l,a2 ; load shrapnel speed data
00013F16 6000                       		bra.s	@makeshrapnel
00013F18                            ; ===========================================================================
00013F18                            
00013F18                            	@loop:
00013F18 6100 BE42                  		bsr.w	FindNextFreeObj
00013F1C 6600                       		bne.s	@fail
00013F1E                            
00013F1E                            @makeshrapnel:
00013F1E 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load shrapnel	object
00013F22 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013F28 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013F2E 137C 0006 0028             		move.b	#6,obSubtype(a1)
00013F34 137C 0004 001C             		move.b	#4,obAnim(a1)
00013F3A 335A 0010                  		move.w	(a2)+,obVelX(a1)
00013F3E 335A 0012                  		move.w	(a2)+,obVelY(a1)
00013F42 137C 0098 0020             		move.b	#$98,obColType(a1)
00013F48 08E9 0007 0001             		bset	#7,obRender(a1)
00013F4E                            
00013F4E                            	@fail:
00013F4E 51C9 FFC8                  		dbf	d1,@loop	; repeat 3 more	times
00013F52                            
00013F52 117C 0006 0024             		move.b	#6,obRoutine(a0)
00013F58                            
00013F58                            Bom_End:	; Routine 6
00013F58 6100 B83E                  		bsr.w	SpeedToPos
00013F5C 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00013F62 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013F68 6100 88F8                  		bsr.w	AnimateSprite
00013F6C 4A28 0001                  		tst.b	obRender(a0)
00013F70 6A00 B87A                  		bpl.w	DeleteObject
00013F74 6000 B836                  		bra.w	DisplaySprite
00013F78                            ; ===========================================================================
00013F78 FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013F78 FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013F88                            		include	"_anim\Bomb Enemy.asm"
00013F88                            ; ---------------------------------------------------------------------------
00013F88                            ; Animation script - Bomb enemy
00013F88                            ; ---------------------------------------------------------------------------
00013F88 0000                       Ani_Bomb:	dc.w @stand-Ani_Bomb
00013F8A 0000                       		dc.w @walk-Ani_Bomb
00013F8C 0000                       		dc.w @activated-Ani_Bomb
00013F8E 0000                       		dc.w @fuse-Ani_Bomb
00013F90 0000                       		dc.w @shrapnel-Ani_Bomb
00013F92 1301 00FF                  @stand:		dc.b $13, 1, 0,	afEnd
00013F96 1305 0403 02FF             @walk:		dc.b $13, 5, 4,	3, 2, afEnd
00013F9C 1307 06FF                  @activated:	dc.b $13, 7, 6,	afEnd
00013FA0 0308 09FF                  @fuse:		dc.b 3,	8, 9, afEnd
00013FA4 030A 0BFF                  @shrapnel:	dc.b 3,	$A, $B,	afEnd
00013FA8                            		even
00013FA8                            		even
00013FA8                            Map_Bomb:	include	"_maps\Bomb Enemy.asm"
00013FA8                            ; ---------------------------------------------------------------------------
00013FA8                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00013FA8                            ; ---------------------------------------------------------------------------
00013FA8                            Map_Bomb_internal:
00013FA8 0000                       		dc.w @stand1-Map_Bomb_internal
00013FAA 0000                       		dc.w @stand2-Map_Bomb_internal
00013FAC 0000                       		dc.w @walk1-Map_Bomb_internal
00013FAE 0000                       		dc.w @walk2-Map_Bomb_internal
00013FB0 0000                       		dc.w @walk3-Map_Bomb_internal
00013FB2 0000                       		dc.w @walk4-Map_Bomb_internal
00013FB4 0000                       		dc.w @activate1-Map_Bomb_internal
00013FB6 0000                       		dc.w @activate2-Map_Bomb_internal
00013FB8 0000                       		dc.w @fuse1-Map_Bomb_internal
00013FBA 0000                       		dc.w @fuse2-Map_Bomb_internal
00013FBC 0000                       		dc.w @shrapnel1-Map_Bomb_internal
00013FBE 0000                       		dc.w @shrapnel2-Map_Bomb_internal
00013FC0 03                         @stand1:	dc.b 3
00013FC1 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb standing still
00013FC6 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013FCB E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013FD0 03                         @stand2:	dc.b 3
00013FD1 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013FD6 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013FDB E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013FE0 03                         @walk1:		dc.b 3
00013FE1 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4	; bomb walking
00013FE6 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00013FEB E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013FF0 03                         @walk2:		dc.b 3
00013FF1 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013FF6 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00013FFB E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00014000 03                         @walk3:		dc.b 3
00014001 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00014006 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
0001400B E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00014010 03                         @walk4:		dc.b 3
00014011 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014016 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
0001401B E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00014020 02                         @activate1:	dc.b 2
00014021 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb during detonation countdown
00014026 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001402B 02                         @activate2:	dc.b 2
0001402C F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014031 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00014036 01                         @fuse1:		dc.b 1
00014037 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC ; fuse	(just before it	explodes)
0001403C 01                         @fuse2:		dc.b 1
0001403D E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00014042 01                         @shrapnel1:	dc.b 1
00014043 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC ; shrapnel (after it exploded)
00014048 01                         @shrapnel2:	dc.b 1
00014049 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001404E                            		even
0001404E                            		even
0001404E                            
0001404E                            		include	"_incObj\60 Orbinaut.asm"
0001404E                            ; ---------------------------------------------------------------------------
0001404E                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
0001404E                            ; ---------------------------------------------------------------------------
0001404E                            
0001404E                            Orbinaut:
0001404E 7000                       		moveq	#0,d0
00014050 1028 0024                  		move.b	obRoutine(a0),d0
00014054 323B 0000                  		move.w	Orb_Index(pc,d0.w),d1
00014058 4EFB 1000                  		jmp	Orb_Index(pc,d1.w)
0001405C                            ; ===========================================================================
0001405C 0000                       Orb_Index:	dc.w Orb_Main-Orb_Index
0001405E 0000                       		dc.w Orb_ChkSonic-Orb_Index
00014060 0000                       		dc.w Orb_Display-Orb_Index
00014062 0000                       		dc.w Orb_MoveOrb-Orb_Index
00014064 0000                       		dc.w Orb_ChkDel2-Orb_Index
00014066                            
00014066 =0000003C                  orb_parent:	equ $3C		; address of parent object
00014066                            ; ===========================================================================
00014066                            
00014066                            Orb_Main:	; Routine 0
00014066 217C 0000 0000 0004        		move.l	#Map_Orb,obMap(a0)
0001406E 317C 0429 0002             		move.w	#$429,obGfx(a0)	; SBZ specific code
00014074 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
0001407A 6700                       		beq.s	@isscrap
0001407C 317C 2429 0002             		move.w	#$2429,obGfx(a0) ; SLZ specific code
00014082                            
00014082                            	@isscrap:
00014082 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00014088 6600                       		bne.s	@notlabyrinth
0001408A 317C 0467 0002             		move.w	#$467,obGfx(a0)	; LZ specific code
00014090                            
00014090                            	@notlabyrinth:
00014090 0028 0004 0001             		ori.b	#4,obRender(a0)
00014096 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001409C 117C 000B 0020             		move.b	#$B,obColType(a0)
000140A2 117C 000C 0014             		move.b	#$C,obActWid(a0)
000140A8 7400                       		moveq	#0,d2
000140AA 45E8 0037                  		lea	$37(a0),a2
000140AE 264A                       		movea.l	a2,a3
000140B0 524A                       		addq.w	#1,a2
000140B2 7203                       		moveq	#3,d1
000140B4                            
000140B4                            @makesatellites:
000140B4 6100 BCA6                  		bsr.w	FindNextFreeObj
000140B8 6600                       		bne.s	@fail
000140BA 5213                       		addq.b	#1,(a3)
000140BC 3A09                       		move.w	a1,d5
000140BE 0445 D000                  		subi.w	#$D000,d5
000140C2 EC4D                       		lsr.w	#6,d5
000140C4 0245 007F                  		andi.w	#$7F,d5
000140C8 14C5                       		move.b	d5,(a2)+
000140CA 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
000140CC 137C 0006 0024             		move.b	#6,obRoutine(a1) ; use Orb_MoveOrb routine
000140D2 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
000140D8 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
000140DE 0029 0004 0001             		ori.b	#4,obRender(a1)
000140E4 337C 0200 0018             		move.w	#$200,obPriority(a1)
000140EA 137C 0008 0014             		move.b	#8,obActWid(a1)
000140F0 137C 0003 001A             		move.b	#3,obFrame(a1)
000140F6 137C 0098 0020             		move.b	#$98,obColType(a1)
000140FC 1342 0026                  		move.b	d2,obAngle(a1)
00014100 0602 0040                  		addi.b	#$40,d2
00014104 2348 003C                  		move.l	a0,orb_parent(a1)
00014108 51C9 FFAA                  		dbf	d1,@makesatellites ; repeat sequence 3 more times
0001410C                            
0001410C                            	@fail:
0001410C 7001                       		moveq	#1,d0
0001410E 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left?
00014114 6700                       		beq.s	@noflip		; if not, branch
00014116 4440                       		neg.w	d0
00014118                            
00014118                            	@noflip:
00014118 1140 0036                  		move.b	d0,$36(a0)
0001411C 1168 0028 0024             		move.b	obSubtype(a0),obRoutine(a0) ; if type is 02, skip Orb_ChkSonic
00014122 5428 0024                  		addq.b	#2,obRoutine(a0)
00014126 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move orbinaut to the left
0001412C 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left??
00014132 6700                       		beq.s	@noflip2	; if not, branch
00014134 4468 0010                  		neg.w	obVelX(a0)	; move orbinaut	to the right
00014138                            
00014138                            	@noflip2:
00014138 4E75                       		rts	
0001413A                            ; ===========================================================================
0001413A                            
0001413A                            Orb_ChkSonic:	; Routine 2
0001413A 3038 D008                  		move.w	(v_player+obX).w,d0
0001413E 9068 0008                  		sub.w	obX(a0),d0	; is Sonic to the right of the orbinaut?
00014142 6400                       		bcc.s	@isright	; if yes, branch
00014144 4440                       		neg.w	d0
00014146                            
00014146                            	@isright:
00014146 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
0001414A 6400                       		bcc.s	@animate	; if not, branch
0001414C 3038 D00C                  		move.w	(v_player+obY).w,d0
00014150 9068 000C                  		sub.w	obY(a0),d0	; is Sonic above the orbinaut?
00014154 6400                       		bcc.s	@isabove	; if yes, branch
00014156 4440                       		neg.w	d0
00014158                            
00014158                            	@isabove:
00014158 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
0001415C 6400                       		bcc.s	@animate	; if not, branch
0001415E 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00014162 6600                       		bne.s	@animate	; if yes, branch
00014164 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "angry" animation
0001416A                            
0001416A                            @animate:
0001416A 43F9 0000 0000             		lea	(Ani_Orb).l,a1
00014170 6100 86F0                  		bsr.w	AnimateSprite
00014174 6000 0000                  		bra.w	Orb_ChkDel
00014178                            ; ===========================================================================
00014178                            
00014178                            Orb_Display:	; Routine 4
00014178 6100 B61E                  		bsr.w	SpeedToPos
0001417C                            
0001417C                            Orb_ChkDel:
0001419A 6000 B610                  		bra.w	DisplaySprite
0001419E                            
0001419E                            @chkgone:
0001419E 45F8 FC00                  		lea	(v_objstate).w,a2
000141A2 7000                       		moveq	#0,d0
000141A4 1028 0023                  		move.b	obRespawnNo(a0),d0
000141A8 6700                       		beq.s	loc_11E34
000141AA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000141B0                            
000141B0                            loc_11E34:
000141B0 45E8 0037                  		lea	$37(a0),a2
000141B4 7400                       		moveq	#0,d2
000141B6 141A                       		move.b	(a2)+,d2
000141B8 5342                       		subq.w	#1,d2
000141BA 6500                       		bcs.s	Orb_Delete
000141BC                            
000141BC                            loc_11E40:
000141BC 7000                       		moveq	#0,d0
000141BE 101A                       		move.b	(a2)+,d0
000141C0 ED48                       		lsl.w	#6,d0
000141C2 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000141C8 2240                       		movea.l	d0,a1
000141CA 6100 B622                  		bsr.w	DeleteChild
000141CE 51CA FFEC                  		dbf	d2,loc_11E40
000141D2                            
000141D2                            Orb_Delete:
000141D2 6000 B618                  		bra.w	DeleteObject
000141D6                            ; ===========================================================================
000141D6                            
000141D6                            Orb_MoveOrb:	; Routine 6
000141D6 2268 003C                  		movea.l	orb_parent(a0),a1
000141DA 0C11 0060                  		cmpi.b	#id_Orbinaut,0(a1) ; does parent object still exist?
000141DE 6600 B60C                  		bne.w	DeleteObject	; if not, delete
000141E2 0C29 0002 001A             		cmpi.b	#2,obFrame(a1)	; is orbinaut angry?
000141E8 6600                       		bne.s	@circle		; if not, branch
000141EA 0C28 0040 0026             		cmpi.b	#$40,obAngle(a0) ; is spikeorb directly under the orbinaut?
000141F0 6600                       		bne.s	@circle		; if not, branch
000141F2 5428 0024                  		addq.b	#2,obRoutine(a0)
000141F6 5329 0037                  		subq.b	#1,$37(a1)
000141FA 6600                       		bne.s	@fire
000141FC 5429 0024                  		addq.b	#2,obRoutine(a1)
00014200                            
00014200                            	@fire:
00014200 317C FE00 0010             		move.w	#-$200,obVelX(a0) ; move orb to the left (quickly)
00014206 0829 0000 0022             		btst	#0,obStatus(a1)
0001420C 6700                       		beq.s	@noflip
0001420E 4468 0010                  		neg.w	obVelX(a0)
00014212                            
00014212                            	@noflip:
00014212 6000 B598                  		bra.w	DisplaySprite
00014216                            ; ===========================================================================
00014216                            
00014216                            @circle:
00014216 1028 0026                  		move.b	obAngle(a0),d0
0001421A 4EB9 0000 3CCA             		jsr	(CalcSine).l
00014220 E841                       		asr.w	#4,d1
00014222 D269 0008                  		add.w	obX(a1),d1
00014226 3141 0008                  		move.w	d1,obX(a0)
0001422A E840                       		asr.w	#4,d0
0001422C D069 000C                  		add.w	obY(a1),d0
00014230 3140 000C                  		move.w	d0,obY(a0)
00014234 1029 0036                  		move.b	$36(a1),d0
00014238 D128 0026                  		add.b	d0,obAngle(a0)
0001423C 6000 B56E                  		bra.w	DisplaySprite
00014240                            ; ===========================================================================
00014240                            
00014240                            Orb_ChkDel2:	; Routine 8
00014240 6100 B556                  		bsr.w	SpeedToPos
00014244 4A28 0001                  		tst.b	obRender(a0)
00014248 6A00 B5A2                  		bpl.w	DeleteObject
0001424C 6000 B55E                  		bra.w	DisplaySprite
0001424C 6000 B55E                  		bra.w	DisplaySprite
00014250                            		include	"_anim\Orbinaut.asm"
00014250                            ; ---------------------------------------------------------------------------
00014250                            ; Animation script - Orbinaut enemy
00014250                            ; ---------------------------------------------------------------------------
00014250 0000                       Ani_Orb:	dc.w @normal-Ani_Orb
00014252 0000                       		dc.w @angers-Ani_Orb
00014254 0F00 FF                    @normal:	dc.b $F, 0, afEnd
00014258 00                         		even
00014258 0F01 02FE 01               @angers:	dc.b $F, 1, 2, afBack, 1
0001425E 00                         		even
0001425E 00                         		even
0001425E                            Map_Orb:	include	"_maps\Orbinaut.asm"
0001425E                            ; ---------------------------------------------------------------------------
0001425E                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001425E                            ; ---------------------------------------------------------------------------
0001425E                            Map_Orb_internal:
0001425E 0000                       		dc.w @normal-Map_Orb_internal
00014260 0000                       		dc.w @medium-Map_Orb_internal
00014262 0000                       		dc.w @angry-Map_Orb_internal
00014264 0000                       		dc.w @spikeball-Map_Orb_internal
00014266 01                         @normal:	dc.b 1
00014267 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001426C 01                         @medium:	dc.b 1
0001426D F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00014272 01                         @angry:		dc.b 1
00014273 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00014278 01                         @spikeball:	dc.b 1
00014279 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
0001427E                            		even
0001427E                            		even
0001427E                            
0001427E                            		include	"_incObj\16 Harpoon.asm"
0001427E                            ; ---------------------------------------------------------------------------
0001427E                            ; Object 16 - harpoon (LZ)
0001427E                            ; ---------------------------------------------------------------------------
0001427E                            
0001427E                            Harpoon:
0001427E 7000                       		moveq	#0,d0
00014280 1028 0024                  		move.b	obRoutine(a0),d0
00014284 323B 0000                  		move.w	Harp_Index(pc,d0.w),d1
00014288 4EFB 1000                  		jmp	Harp_Index(pc,d1.w)
0001428C                            ; ===========================================================================
0001428C 0000                       Harp_Index:	dc.w Harp_Main-Harp_Index
0001428E 0000                       		dc.w Harp_Move-Harp_Index
00014290 0000                       		dc.w Harp_Wait-Harp_Index
00014292                            
00014292 =00000030                  harp_time:	equ $30		; time between stabbing/retracting
00014292                            ; ===========================================================================
00014292                            
00014292                            Harp_Main:	; Routine 0
00014292 5428 0024                  		addq.b	#2,obRoutine(a0)
00014296 217C 0000 0000 0004        		move.l	#Map_Harp,obMap(a0)
0001429E 317C 03CC 0002             		move.w	#$3CC,obGfx(a0)
000142A4 0028 0004 0001             		ori.b	#4,obRender(a0)
000142AA 317C 0200 0018             		move.w	#$200,obPriority(a0)
000142B0 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0) ; get type (vert/horiz)
000142B6 117C 0014 0014             		move.b	#$14,obActWid(a0)
000142BC 317C 003C 0030             		move.w	#60,harp_time(a0) ; set time to 1 second
000142C2                            
000142C2                            Harp_Move:	; Routine 2
000142C2 43F9 0000 0000             		lea	(Ani_Harp).l,a1
000142C8 6100 8598                  		bsr.w	AnimateSprite
000142CC 7000                       		moveq	#0,d0
000142CE 1028 001A                  		move.b	obFrame(a0),d0	; get frame number
000142D2 117B 0000 0020             		move.b	@types(pc,d0.w),obColType(a0) ; get collision type
000142D8 6000 D586                  		bra.w	RememberState
000142DC                            
000142DC                            	@types:
000142DC 9B9C 9D9E 9FA0             		dc.b $9B, $9C, $9D, $9E, $9F, $A0
000142E2                            		even
000142E2                            
000142E2                            Harp_Wait:	; Routine 4
000142E2 5368 0030                  		subq.w	#1,harp_time(a0) ; decrement timer
000142E6 6A00                       		bpl.s	@chkdel		; branch if time remains
000142E8 317C 003C 0030             		move.w	#60,harp_time(a0) ; reset timer
000142EE 5528 0024                  		subq.b	#2,obRoutine(a0) ; run "Harp_Move" subroutine
000142F2 0868 0000 001C             		bchg	#0,obAnim(a0)	; reverse animation
000142F8                            
000142F8                            	@chkdel:
000142F8 6000 D566                  		bra.w	RememberState
000142F8 6000 D566                  		bra.w	RememberState
000142FC                            		include	"_anim\Harpoon.asm"
000142FC                            ; ---------------------------------------------------------------------------
000142FC                            ; Animation script - harpoon (LZ)
000142FC                            ; ---------------------------------------------------------------------------
000142FC 0000                       Ani_Harp:	dc.w @h_extending-Ani_Harp
000142FE 0000                       		dc.w @h_retracting-Ani_Harp
00014300 0000                       		dc.w @v_extending-Ani_Harp
00014302 0000                       		dc.w @v_retracting-Ani_Harp
00014304 0301 02FC                  @h_extending:	dc.b 3,	1, 2, afRoutine
00014308 0301 00FC                  @h_retracting:	dc.b 3,	1, 0, afRoutine
0001430C 0304 05FC                  @v_extending:	dc.b 3,	4, 5, afRoutine
00014310 0304 03FC                  @v_retracting:	dc.b 3,	4, 3, afRoutine
00014314                            		even
00014314                            		even
00014314                            Map_Harp:	include	"_maps\Harpoon.asm"
00014314                            ; --------------------------------------------------------------------------------
00014314                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00014314                            ; --------------------------------------------------------------------------------
00014314                            
00014314                            SME_JPFHb:	
00014314 0000 0000                  		dc.w SME_JPFHb_C-SME_JPFHb, SME_JPFHb_12-SME_JPFHb	
00014318 0000 0000                  		dc.w SME_JPFHb_18-SME_JPFHb, SME_JPFHb_23-SME_JPFHb	
0001431C 0000 0000                  		dc.w SME_JPFHb_29-SME_JPFHb, SME_JPFHb_2F-SME_JPFHb	
00014320 01                         SME_JPFHb_C:	dc.b 1	
00014321 FC04 2000 F8               		dc.b $FC, 4, $20, 0, $F8	
00014326 01                         SME_JPFHb_12:	dc.b 1	
00014327 FC0C 2002 F8               		dc.b $FC, $C, $20, 2, $F8	
0001432C 02                         SME_JPFHb_18:	dc.b 2	
0001432D FC08 2006 F8               		dc.b $FC, 8, $20, 6, $F8	
00014332 FC08 2003 10               		dc.b $FC, 8, $20, 3, $10	
00014337 01                         SME_JPFHb_23:	dc.b 1	
00014338 F801 2009 FC               		dc.b $F8, 1, $20, 9, $FC	
0001433D 01                         SME_JPFHb_29:	dc.b 1	
0001433E E803 200B FC               		dc.b $E8, 3, $20, $B, $FC	
00014343 02                         SME_JPFHb_2F:	dc.b 2	
00014344 D802 200B FC               		dc.b $D8, 2, $20, $B, $FC	
00014349 F002 200F FC               		dc.b $F0, 2, $20, $F, $FC	
0001434E                            		even
0001434E                            		even
0001434E                            		include	"_incObj\61 LZ Blocks.asm"
0001434E                            ; ---------------------------------------------------------------------------
0001434E                            ; Object 61 - blocks (LZ)
0001434E                            ; ---------------------------------------------------------------------------
0001434E                            
0001434E                            LabyrinthBlock:
0001434E 7000                       		moveq	#0,d0
00014350 1028 0024                  		move.b	obRoutine(a0),d0
00014354 323B 0000                  		move.w	LBlk_Index(pc,d0.w),d1
00014358 4EFB 1000                  		jmp	LBlk_Index(pc,d1.w)
0001435C                            ; ===========================================================================
0001435C 0000                       LBlk_Index:	dc.w LBlk_Main-LBlk_Index
0001435E 0000                       		dc.w LBlk_Action-LBlk_Index
00014360                            
00014360 1010                       LBlk_Var:	dc.b $10, $10		; width, height
00014362 200C                       		dc.b $20, $C
00014364 1010                       		dc.b $10, $10
00014366 1010                       		dc.b $10, $10
00014368                            
00014368 =00000016                  lblk_height:	equ $16		; block height
00014368 =00000034                  lblk_origX:	equ $34		; original x-axis position
00014368 =00000030                  lblk_origY:	equ $30		; original y-axis position
00014368 =00000036                  lblk_time:	equ $36		; time delay for block movement
00014368 =00000038                  lblk_untouched:	equ $38		; flag block as untouched
00014368                            ; ===========================================================================
00014368                            
00014368                            LBlk_Main:	; Routine 0
00014368 5428 0024                  		addq.b	#2,obRoutine(a0)
0001436C 217C 0000 0000 0004        		move.l	#Map_LBlock,obMap(a0)
00014374 317C 43E6 0002             		move.w	#$43E6,obGfx(a0)
0001437A 117C 0004 0001             		move.b	#4,obRender(a0)
00014380 317C 0180 0018             		move.w	#$180,obPriority(a0)
00014386 7000                       		moveq	#0,d0
00014388 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
0001438C E648                       		lsr.w	#3,d0		; read only the 1st digit
0001438E 0240 000E                  		andi.w	#$E,d0
00014392 45FB 00CC                  		lea	LBlk_Var(pc,d0.w),a2
00014396 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
0001439A 1152 0016                  		move.b	(a2),lblk_height(a0) ; set height
0001439E E248                       		lsr.w	#1,d0
000143A0 1140 001A                  		move.b	d0,obFrame(a0)
000143A4 3168 0008 0034             		move.w	obX(a0),lblk_origX(a0)
000143AA 3168 000C 0030             		move.w	obY(a0),lblk_origY(a0)
000143B0 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
000143B4 0200 000F                  		andi.b	#$F,d0		; read only the 2nd digit
000143B8 6700                       		beq.s	LBlk_Action	; branch if 0
000143BA 0C00 0007                  		cmpi.b	#7,d0
000143BE 6700                       		beq.s	LBlk_Action	; branch if 7
000143C0 117C 0001 0038             		move.b	#1,lblk_untouched(a0)
000143C6                            
000143C6                            LBlk_Action:	; Routine 2
000143C6 3F28 0008                  		move.w	obX(a0),-(sp)
000143CA 7000                       		moveq	#0,d0
000143CC 1028 0028                  		move.b	obSubtype(a0),d0
000143D0 0240 000F                  		andi.w	#$F,d0
000143D4 D040                       		add.w	d0,d0
000143D6 323B 0000                  		move.w	@index(pc,d0.w),d1
000143DA 4EBB 1000                  		jsr	@index(pc,d1.w)
000143DE 381F                       		move.w	(sp)+,d4
000143E0 4A28 0001                  		tst.b	obRender(a0)
000143E4 6A00                       		bpl.s	@chkdel
000143E6 7200                       		moveq	#0,d1
000143E8 1228 0014                  		move.b	obActWid(a0),d1
000143EC 0641 000B                  		addi.w	#$B,d1
000143F0 7400                       		moveq	#0,d2
000143F2 1428 0016                  		move.b	lblk_height(a0),d2
000143F6 3602                       		move.w	d2,d3
000143F8 5243                       		addq.w	#1,d3
000143FA 6100 D8FC                  		bsr.w	SolidObject
000143FE 1144 003F                  		move.b	d4,$3F(a0)
00014402 6100 0000                  		bsr.w	loc_12180
00014406                            
00014406                            @chkdel:
00014424 6000 B386                  		bra.w	DisplaySprite
00014428                            ; ===========================================================================
00014428 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
0001442C 0000 0000                  		dc.w @type02-@index, @type03-@index
00014430 0000 0000                  		dc.w @type04-@index, @type05-@index
00014434 0000 0000                  		dc.w @type06-@index, @type07-@index
00014438                            ; ===========================================================================
00014438                            
00014438                            @type00:
00014438 4E75                       		rts	
0001443A                            ; ===========================================================================
0001443A                            
0001443A                            @type01:
0001443A                            @type03:
0001443A 4A68 0036                  		tst.w	lblk_time(a0)	; does time remain?
0001443E 6600                       		bne.s	@wait01		; if yes, branch
00014440 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the object?
00014446 6700                       		beq.s	@donothing01	; if not, branch
00014448 317C 001E 0036             		move.w	#30,lblk_time(a0) ; wait for half second
0001444E                            
0001444E                            	@donothing01:
0001444E 4E75                       		rts	
00014450                            ; ===========================================================================
00014450                            
00014450                            	@wait01:
00014450 5368 0036                  		subq.w	#1,lblk_time(a0); decrement waiting time
00014454 66F8                       		bne.s	@donothing01	; if time remains, branch
00014456 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type02 or @type04
0001445A 4228 0038                  		clr.b	lblk_untouched(a0) ; flag block as touched
0001445E 4E75                       		rts	
00014460                            ; ===========================================================================
00014460                            
00014460                            @type02:
00014460                            @type06:
00014460 6100 B336                  		bsr.w	SpeedToPos
00014464 5068 0012                  		addq.w	#8,obVelY(a0)	; make block fall
00014468 6100 0000                  		bsr.w	ObjFloorDist
0001446C 4A41                       		tst.w	d1		; has block hit the floor?
0001446E 6A00 0000                  		bpl.w	@nofloor02	; if not, branch
00014472 5241                       		addq.w	#1,d1
00014474 D368 000C                  		add.w	d1,obY(a0)
00014478 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the floor
0001447C 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
00014480                            
00014480                            	@nofloor02:
00014480 4E75                       		rts	
00014482                            ; ===========================================================================
00014482                            
00014482                            @type04:
00014482 6100 B314                  		bsr.w	SpeedToPos
00014486 5168 0012                  		subq.w	#8,obVelY(a0)	; make block rise
0001448A 6100 0000                  		bsr.w	ObjHitCeiling
0001448E 4A41                       		tst.w	d1		; has block hit the ceiling?
00014490 6A00 0000                  		bpl.w	@noceiling04	; if not, branch
00014494 9368 000C                  		sub.w	d1,obY(a0)
00014498 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the ceiling
0001449C 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
000144A0                            
000144A0                            	@noceiling04:
000144A0 4E75                       		rts	
000144A2                            ; ===========================================================================
000144A2                            
000144A2                            @type05:
000144A2 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	block?
000144A8 6600                       		bne.s	@notouch05	; if not, branch
000144AA 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type06
000144AE 4228 0038                  		clr.b	lblk_untouched(a0)
000144B2                            
000144B2                            	@notouch05:
000144B2 4E75                       		rts	
000144B4                            ; ===========================================================================
000144B4                            
000144B4                            @type07:
000144B4 3038 F646                  		move.w	(v_waterpos1).w,d0
000144B8 9068 000C                  		sub.w	obY(a0),d0	; is block level with water?
000144BC 6700                       		beq.s	@stop07		; if yes, branch
000144BE 6400                       		bcc.s	@fall07		; branch if block is above water
000144C0 0C40 FFFE                  		cmpi.w	#-2,d0
000144C4 6C00                       		bge.s	@loc_1214E
000144C6 70FE                       		moveq	#-2,d0
000144C8                            
000144C8                            	@loc_1214E:
000144C8 D168 000C                  		add.w	d0,obY(a0)	; make the block rise with water level
000144CC 6100 0000                  		bsr.w	ObjHitCeiling
000144D0 4A41                       		tst.w	d1		; has block hit the ceiling?
000144D2 6A00 0000                  		bpl.w	@noceiling07	; if not, branch
000144D6 9368 000C                  		sub.w	d1,obY(a0)	; stop block
000144DA                            
000144DA                            	@noceiling07:
000144DA 4E75                       		rts	
000144DC                            ; ===========================================================================
000144DC                            
000144DC                            @fall07:
000144DC 0C40 0002                  		cmpi.w	#2,d0
000144E0 6F00                       		ble.s	@loc_1216A
000144E2 7002                       		moveq	#2,d0
000144E4                            
000144E4                            	@loc_1216A:
000144E4 D168 000C                  		add.w	d0,obY(a0)	; make the block sink with water level
000144E8 6100 0000                  		bsr.w	ObjFloorDist
000144EC 4A41                       		tst.w	d1
000144EE 6A00 0000                  		bpl.w	@stop07
000144F2 5241                       		addq.w	#1,d1
000144F4 D368 000C                  		add.w	d1,obY(a0)
000144F8                            
000144F8                            	@stop07:
000144F8 4E75                       		rts	
000144FA                            ; ===========================================================================
000144FA                            
000144FA                            loc_12180:
000144FA 4A28 0038                  		tst.b	lblk_untouched(a0) ; has block been stood on or touched?
000144FE 6700                       		beq.s	locret_121C0	; if yes, branch
00014500 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on it now?
00014506 6600                       		bne.s	loc_1219A	; if yes, branch
00014508 4A28 003E                  		tst.b	$3E(a0)
0001450C 6700                       		beq.s	locret_121C0
0001450E 5928 003E                  		subq.b	#4,$3E(a0)
00014512 6000                       		bra.s	loc_121A6
00014514                            ; ===========================================================================
00014514                            
00014514                            loc_1219A:
00014514 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
0001451A 6700                       		beq.s	locret_121C0
0001451C 5828 003E                  		addq.b	#4,$3E(a0)
00014520                            
00014520                            loc_121A6:
00014520 1028 003E                  		move.b	$3E(a0),d0
00014524 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001452A 323C 0400                  		move.w	#$400,d1
0001452E C1C1                       		muls.w	d1,d0
00014530 4840                       		swap	d0
00014532 D068 0030                  		add.w	lblk_origY(a0),d0
00014536 3140 000C                  		move.w	d0,obY(a0)
0001453A                            
0001453A                            locret_121C0:
0001453A 4E75                       		rts	
0001453A 4E75                       		rts	
0001453C                            Map_LBlock:	include	"_maps\LZ Blocks.asm"
0001453C                            Map_6865:
0001453C 0000                       Map_6865_0: 	dc.w Map_6865_8-Map_6865
0001453E 0000                       Map_6865_2: 	dc.w Map_6865_E-Map_6865
00014540 0000                       Map_6865_4: 	dc.w Map_6865_19-Map_6865
00014542 0000                       Map_6865_6: 	dc.w Map_6865_1F-Map_6865
00014544 01                         Map_6865_8: 	dc.b $1
00014545 F00F 2000 F0               	dc.b $F0, $F, $20, $0, $F0
0001454A 02                         Map_6865_E: 	dc.b $2
0001454B F40E 0069 E0               	dc.b $F4, $E, $0, $69, $E0
00014550 F40E 0075 00               	dc.b $F4, $E, $0, $75, $0
00014555 01                         Map_6865_19: 	dc.b $1
00014556 F00F 011A F0               	dc.b $F0, $F, $1, $1A, $F0
0001455B 01                         Map_6865_1F: 	dc.b $1
0001455C F00F FDFA F0               	dc.b $F0, $F, $FD, $FA, $F0
00014562 00                         	even
00014562 00                         	even
00014562                            		include	"_incObj\62 Gargoyle.asm"
00014562                            ; ---------------------------------------------------------------------------
00014562                            ; Object 62 - gargoyle head (LZ)
00014562                            ; ---------------------------------------------------------------------------
00014562                            
00014562                            Gargoyle:
00014562 7000                       		moveq	#0,d0
00014564 1028 0024                  		move.b	obRoutine(a0),d0
00014568 323B 0000                  		move.w	Gar_Index(pc,d0.w),d1
0001456C 4EBB 1000                  		jsr	Gar_Index(pc,d1.w)
00014570 6000 D2EE                  		bra.w	RememberState
00014574                            ; ===========================================================================
00014574 0000                       Gar_Index:	dc.w Gar_Main-Gar_Index
00014576 0000                       		dc.w Gar_MakeFire-Gar_Index
00014578 0000                       		dc.w Gar_FireBall-Gar_Index
0001457A 0000                       		dc.w Gar_AniFire-Gar_Index
0001457C                            
0001457C 1E3C 5A78 96B4 D2F0        Gar_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00014584                            ; ===========================================================================
00014584                            
00014584                            Gar_Main:	; Routine 0
00014584 5428 0024                  		addq.b	#2,obRoutine(a0)
00014588 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
00014590 317C 42E9 0002             		move.w	#$42E9,obGfx(a0)
00014596 0028 0004 0001             		ori.b	#4,obRender(a0)
0001459C 317C 0180 0018             		move.w	#$180,obPriority(a0)
000145A2 117C 0010 0014             		move.b	#$10,obActWid(a0)
000145A8 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000145AC 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000145B0 117B 00CA 001F             		move.b	Gar_SpitRate(pc,d0.w),obDelayAni(a0) ; set fireball spit rate
000145B6 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
000145BC 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
000145C2                            
000145C2                            Gar_MakeFire:	; Routine 2
000145C2 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement timer
000145C6 6600                       		bne.s	@nofire		; if time remains, branch
000145C8                            
000145C8 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset timer
000145CE 6100 B56A                  		bsr.w	ChkObjectVisible
000145D2 6600                       		bne.s	@nofire
000145D4 6100 B770                  		bsr.w	FindFreeObj
000145D8 6600                       		bne.s	@nofire
000145DA 12BC 0062                  		move.b	#id_Gargoyle,0(a1) ; load fireball object
000145DE 5829 0024                  		addq.b	#4,obRoutine(a1) ; use Gar_FireBall routine
000145E2 3368 0008 0008             		move.w	obX(a0),obX(a1)
000145E8 3368 000C 000C             		move.w	obY(a0),obY(a1)
000145EE 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
000145F4 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
000145FA                            
000145FA                            	@nofire:
000145FA 4E75                       		rts	
000145FC                            ; ===========================================================================
000145FC                            
000145FC                            Gar_FireBall:	; Routine 4
000145FC 5428 0024                  		addq.b	#2,obRoutine(a0)
00014600 117C 0008 0016             		move.b	#8,obHeight(a0)
00014606 117C 0008 0017             		move.b	#8,obWidth(a0)
0001460C 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
00014614 317C 02E9 0002             		move.w	#$2E9,obGfx(a0)
0001461A 0028 0004 0001             		ori.b	#4,obRender(a0)
00014620 317C 0200 0018             		move.w	#$200,obPriority(a0)
00014626 117C 0098 0020             		move.b	#$98,obColType(a0)
0001462C 117C 0008 0014             		move.b	#8,obActWid(a0)
00014632 117C 0002 001A             		move.b	#2,obFrame(a0)
00014638 5068 000C                  		addq.w	#8,obY(a0)
0001463C 317C 0200 0010             		move.w	#$200,obVelX(a0)
00014642 0828 0000 0022             		btst	#0,obStatus(a0)	; is gargoyle facing left?
00014648 6600                       		bne.s	@noflip		; if not, branch
0001464A 4468 0010                  		neg.w	obVelX(a0)
0001464E                            
0001464E                            	@noflip:
00014658                            
00014658                            Gar_AniFire:	; Routine 6
00014658 1038 FE05                  		move.b	(v_framebyte).w,d0
0001465C 0200 0007                  		andi.b	#7,d0
00014660 6600                       		bne.s	@nochg
00014662 0868 0000 001A             		bchg	#0,obFrame(a0)	; change every 8 frames
00014668                            
00014668                            	@nochg:
00014668 6100 B12E                  		bsr.w	SpeedToPos
0001466C 0828 0000 0022             		btst	#0,obStatus(a0) ; is fireball moving left?
00014672 6600                       		bne.s	@isright	; if not, branch
00014674 76F8                       		moveq	#-8,d3
00014676 6100 0000                  		bsr.w	ObjHitWallLeft
0001467A 4A41                       		tst.w	d1
0001467C 6B00 B16E                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00014680 4E75                       		rts	
00014682                            
00014682                            	@isright:
00014682 7608                       		moveq	#8,d3
00014684 6100 0000                  		bsr.w	ObjHitWallRight
00014688 4A41                       		tst.w	d1
0001468A 6B00 B160                  		bmi.w	DeleteObject
0001468E 4E75                       		rts	
0001468E 4E75                       		rts	
00014690                            Map_Gar:	include	"_maps\Gargoyle.asm"
00014690                            ; ---------------------------------------------------------------------------
00014690                            ; Sprite mappings - gargoyle head (LZ)
00014690                            ; ---------------------------------------------------------------------------
00014690                            Map_Gar_internal:
00014690 0000                       		dc.w @head-Map_Gar_internal
00014692 0000                       		dc.w @head-Map_Gar_internal
00014694 0000                       		dc.w @fireball1-Map_Gar_internal
00014696 0000                       		dc.w @fireball2-Map_Gar_internal
00014698 03                         @head:		dc.b 3
00014699 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
0001469E F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
000146A3 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
000146A8 01                         @fireball1:	dc.b 1
000146A9 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
000146AE 01                         @fireball2:	dc.b 1
000146AF FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
000146B4                            		even
000146B4                            		even
000146B4                            		include	"_incObj\63 LZ Conveyor.asm"
000146B4                            ; ---------------------------------------------------------------------------
000146B4                            ; Object 63 - platforms	on a conveyor belt (LZ)
000146B4                            ; ---------------------------------------------------------------------------
000146B4                            
000146B4                            LabyrinthConvey:
000146B4 7000                       		moveq	#0,d0
000146B6 1028 0024                  		move.b	obRoutine(a0),d0
000146BA 323B 0000                  		move.w	LCon_Index(pc,d0.w),d1
000146BE 4EBB 1000                  		jsr	LCon_Index(pc,d1.w)
000146DE                            
000146DE                            LCon_Display:
000146DE 6000 B0CC                  		bra.w	DisplaySprite
000146E2                            ; ===========================================================================
000146E2                            
000146E2                            loc_1236A:
000146E2 0C38 0002 FE11             		cmpi.b	#2,(v_act).w
000146E8 6600                       		bne.s	loc_12378
000146EA 0C40 FF80                  		cmpi.w	#-$80,d0
000146EE 64EE                       		bcc.s	LCon_Display
000146F0                            
000146F0                            loc_12378:
000146F0 1028 002F                  		move.b	$2F(a0),d0
000146F4 6A00 B0F6                  		bpl.w	DeleteObject
000146F8 0240 007F                  		andi.w	#$7F,d0
000146FC 45F8 F7C1                  		lea	(v_obj63).w,a2
00014700 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00014706 6000 B0E4                  		bra.w	DeleteObject
0001470A                            ; ===========================================================================
0001470A 0000                       LCon_Index:	dc.w LCon_Main-LCon_Index
0001470C 0000                       		dc.w loc_124B2-LCon_Index
0001470E 0000                       		dc.w loc_124C2-LCon_Index
00014710 0000                       		dc.w loc_124DE-LCon_Index
00014712                            ; ===========================================================================
00014712                            
00014712                            LCon_Main:	; Routine 0
00014712 1028 0028                  		move.b	obSubtype(a0),d0
00014716 6B00 0000                  		bmi.w	loc_12460
0001471A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001471E 217C 0000 0000 0004        		move.l	#Map_LConv,obMap(a0)
00014726 317C 43F6 0002             		move.w	#$43F6,obGfx(a0)
0001472C 0028 0004 0001             		ori.b	#4,obRender(a0)
00014732 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014738 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001473E 0C28 007F 0028             		cmpi.b	#$7F,obSubtype(a0)
00014744 6600                       		bne.s	loc_123E2
00014746 5828 0024                  		addq.b	#4,obRoutine(a0)
0001474A 317C 03F6 0002             		move.w	#$3F6,obGfx(a0)
00014750 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014756 6000 0000                  		bra.w	loc_124DE
0001475A                            ; ===========================================================================
0001475A                            
0001475A                            loc_123E2:
0001475A 117C 0004 001A             		move.b	#4,obFrame(a0)
00014760 7000                       		moveq	#0,d0
00014762 1028 0028                  		move.b	obSubtype(a0),d0
00014766 3200                       		move.w	d0,d1
00014768 E648                       		lsr.w	#3,d0
0001476A 0240 001E                  		andi.w	#$1E,d0
0001476E 45FA 0000                  		lea	LCon_Data(pc),a2
00014772 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014776 315A 0038                  		move.w	(a2)+,$38(a0)
0001477A 315A 0030                  		move.w	(a2)+,$30(a0)
0001477E 214A 003C                  		move.l	a2,$3C(a0)
00014782 0241 000F                  		andi.w	#$F,d1
00014786 E549                       		lsl.w	#2,d1
00014788 1141 0038                  		move.b	d1,$38(a0)
0001478C 117C 0004 003A             		move.b	#4,$3A(a0)
00014792 4A38 F7C0                  		tst.b	(f_conveyrev).w
00014796 6700                       		beq.s	loc_1244C
00014798 117C 0001 003B             		move.b	#1,$3B(a0)
0001479E 4428 003A                  		neg.b	$3A(a0)
000147A2 7200                       		moveq	#0,d1
000147A4 1228 0038                  		move.b	$38(a0),d1
000147A8 D228 003A                  		add.b	$3A(a0),d1
000147AC B228 0039                  		cmp.b	$39(a0),d1
000147B0 6500                       		bcs.s	loc_12448
000147B2 1001                       		move.b	d1,d0
000147B4 7200                       		moveq	#0,d1
000147B6 4A00                       		tst.b	d0
000147B8 6A00                       		bpl.s	loc_12448
000147BA 1228 0039                  		move.b	$39(a0),d1
000147BE 5901                       		subq.b	#4,d1
000147C0                            
000147C0                            loc_12448:
000147C0 1141 0038                  		move.b	d1,$38(a0)
000147C4                            
000147C4                            loc_1244C:
000147C4 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000147CA 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000147D0 6100 0000                  		bsr.w	LCon_ChangeDir
000147D4 6000 0000                  		bra.w	loc_124B2
000147D8                            ; ===========================================================================
000147D8                            
000147D8                            loc_12460:
000147D8 1140 002F                  		move.b	d0,$2F(a0)
000147DC 0240 007F                  		andi.w	#$7F,d0
000147E0 45F8 F7C1                  		lea	(v_obj63).w,a2
000147E4 08F2 0000 0000             		bset	#0,(a2,d0.w)
000147EA 6600 B000                  		bne.w	DeleteObject
000147EE D040                       		add.w	d0,d0
000147F0 0240 001E                  		andi.w	#$1E,d0
000147F4 0640 0000                  		addi.w	#ObjPosLZPlatform_Index-ObjPos_Index,d0
000147F8 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000147FE D4F2 0000                  		adda.w	(a2,d0.w),a2
00014802 321A                       		move.w	(a2)+,d1
00014804 2248                       		movea.l	a0,a1
00014806 6000                       		bra.s	LCon_MakePtfms
00014808                            ; ===========================================================================
00014808                            
00014808                            LCon_Loop:
00014808 6100 B53C                  		bsr.w	FindFreeObj
0001480C 6600                       		bne.s	loc_124AA
0001480E                            
0001480E                            LCon_MakePtfms:
0001480E 12BC 0063                  		move.b	#id_LabyrinthConvey,0(a1)
00014812 335A 0008                  		move.w	(a2)+,obX(a1)
00014816 335A 000C                  		move.w	(a2)+,obY(a1)
0001481A 301A                       		move.w	(a2)+,d0
0001481C 1340 0028                  		move.b	d0,obSubtype(a1)
00014820                            
00014820                            loc_124AA:
00014820 51C9 FFE6                  		dbf	d1,LCon_Loop
00014824                            
00014824 588F                       		addq.l	#4,sp
00014826 4E75                       		rts	
00014828                            ; ===========================================================================
00014828                            
00014828                            loc_124B2:	; Routine 2
00014828 7200                       		moveq	#0,d1
0001482A 1228 0014                  		move.b	obActWid(a0),d1
0001482E 4EB9 0000 8C24             		jsr	(PlatformObject).l
00014834 6000 0000                  		bra.w	sub_12502
00014838                            ; ===========================================================================
00014838                            
00014838                            loc_124C2:	; Routine 4
00014838 7200                       		moveq	#0,d1
0001483A 1228 0014                  		move.b	obActWid(a0),d1
0001483E 4EB9 0000 8D98             		jsr	(ExitPlatform).l
00014844 3F28 0008                  		move.w	obX(a0),-(sp)
00014848 6100 0000                  		bsr.w	sub_12502
0001484C 341F                       		move.w	(sp)+,d2
0001484E 4EF9 0000 9302             		jmp	(MvSonicOnPtfm2).l
00014854                            ; ===========================================================================
00014854                            
00014854                            loc_124DE:	; Routine 6
00014854 3038 FE04                  		move.w	(v_framecount).w,d0
00014858 0240 0003                  		andi.w	#3,d0
0001485C 6600                       		bne.s	loc_124FC
0001485E 7201                       		moveq	#1,d1
00014860 4A38 F7C0                  		tst.b	(f_conveyrev).w
00014864 6700                       		beq.s	loc_124F2
00014866 4401                       		neg.b	d1
00014868                            
00014868                            loc_124F2:
00014868 D328 001A                  		add.b	d1,obFrame(a0)
0001486C 0228 0003 001A             		andi.b	#3,obFrame(a0)
00014872                            
00014872                            loc_124FC:
00014872 588F                       		addq.l	#4,sp
00014874 6000 CFEA                  		bra.w	RememberState
00014878                            
00014878                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014878                            
00014878                            
00014878                            sub_12502:
00014878 4A38 F7EE                  		tst.b	(f_switch+$E).w
0001487C 6700                       		beq.s	loc_12520
0001487E 4A28 003B                  		tst.b	$3B(a0)
00014882 6600                       		bne.s	loc_12520
00014884 117C 0001 003B             		move.b	#1,$3B(a0)
0001488A 11FC 0001 F7C0             		move.b	#1,(f_conveyrev).w
00014890 4428 003A                  		neg.b	$3A(a0)
00014894 6000                       		bra.s	loc_12534
00014896                            ; ===========================================================================
00014896                            
00014896                            loc_12520:
00014896 3028 0008                  		move.w	obX(a0),d0
0001489A B068 0034                  		cmp.w	$34(a0),d0
0001489E 6600                       		bne.s	loc_1256A
000148A0 3028 000C                  		move.w	obY(a0),d0
000148A4 B068 0036                  		cmp.w	$36(a0),d0
000148A8 6600                       		bne.s	loc_1256A
000148AA                            
000148AA                            loc_12534:
000148AA 7200                       		moveq	#0,d1
000148AC 1228 0038                  		move.b	$38(a0),d1
000148B0 D228 003A                  		add.b	$3A(a0),d1
000148B4 B228 0039                  		cmp.b	$39(a0),d1
000148B8 6500                       		bcs.s	loc_12552
000148BA 1001                       		move.b	d1,d0
000148BC 7200                       		moveq	#0,d1
000148BE 4A00                       		tst.b	d0
000148C0 6A00                       		bpl.s	loc_12552
000148C2 1228 0039                  		move.b	$39(a0),d1
000148C6 5901                       		subq.b	#4,d1
000148C8                            
000148C8                            loc_12552:
000148C8 1141 0038                  		move.b	d1,$38(a0)
000148CC 2268 003C                  		movea.l	$3C(a0),a1
000148D0 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000148D6 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000148DC 6100 0000                  		bsr.w	LCon_ChangeDir
000148E0                            
000148E0                            loc_1256A:
000148E0 6100 AEB6                  		bsr.w	SpeedToPos
000148E4 4E75                       		rts	
000148E6                            ; End of function sub_12502
000148E6                            
000148E6                            
000148E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000148E6                            
000148E6                            
000148E6                            LCon_ChangeDir:
000148E6 7000                       		moveq	#0,d0
000148E8 343C FF00                  		move.w	#-$100,d2
000148EC 3028 0008                  		move.w	obX(a0),d0
000148F0 9068 0034                  		sub.w	$34(a0),d0
000148F4 6400                       		bcc.s	loc_12584
000148F6 4440                       		neg.w	d0
000148F8 4442                       		neg.w	d2
000148FA                            
000148FA                            loc_12584:
000148FA 7200                       		moveq	#0,d1
000148FC 363C FF00                  		move.w	#-$100,d3
00014900 3228 000C                  		move.w	obY(a0),d1
00014904 9268 0036                  		sub.w	$36(a0),d1
00014908 6400                       		bcc.s	loc_12598
0001490A 4441                       		neg.w	d1
0001490C 4443                       		neg.w	d3
0001490E                            
0001490E                            loc_12598:
0001490E B240                       		cmp.w	d0,d1
00014910 6500                       		bcs.s	loc_125C2
00014912 3028 0008                  		move.w	obX(a0),d0
00014916 9068 0034                  		sub.w	$34(a0),d0
0001491A 6700                       		beq.s	loc_125AE
0001491C 48C0                       		ext.l	d0
0001491E E180                       		asl.l	#8,d0
00014920 81C1                       		divs.w	d1,d0
00014922 4440                       		neg.w	d0
00014924                            
00014924                            loc_125AE:
00014924 3140 0010                  		move.w	d0,obVelX(a0)
00014928 3143 0012                  		move.w	d3,obVelY(a0)
0001492C 4840                       		swap	d0
0001492E 3140 000A                  		move.w	d0,obX+2(a0)
00014932 4268 000E                  		clr.w	obY+2(a0)
00014936 4E75                       		rts	
00014938                            ; ===========================================================================
00014938                            
00014938                            loc_125C2:
00014938 3228 000C                  		move.w	obY(a0),d1
0001493C 9268 0036                  		sub.w	$36(a0),d1
00014940 6700                       		beq.s	loc_125D4
00014942 48C1                       		ext.l	d1
00014944 E181                       		asl.l	#8,d1
00014946 83C0                       		divs.w	d0,d1
00014948 4441                       		neg.w	d1
0001494A                            
0001494A                            loc_125D4:
0001494A 3141 0012                  		move.w	d1,obVelY(a0)
0001494E 3142 0010                  		move.w	d2,obVelX(a0)
00014952 4841                       		swap	d1
00014954 3141 000E                  		move.w	d1,obY+2(a0)
00014958 4268 000A                  		clr.w	obX+2(a0)
0001495C 4E75                       		rts	
0001495E                            ; End of function LCon_ChangeDir
0001495E                            
0001495E                            ; ===========================================================================
0001495E 0000                       LCon_Data:	dc.w word_125F4-LCon_Data
00014960 0000                       		dc.w word_12610-LCon_Data
00014962 0000                       		dc.w word_12628-LCon_Data
00014964 0000                       		dc.w word_1263C-LCon_Data
00014966 0000                       		dc.w word_12650-LCon_Data
00014968 0000                       		dc.w word_12668-LCon_Data
0001496A 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
0001497A 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00014986 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00014996 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
0001499E 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
000149B2 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
000149C6 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
000149DE 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
000149DE 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
000149F2                            Map_LConv:	include	"_maps\LZ Conveyor.asm"
000149F2                            ; ---------------------------------------------------------------------------
000149F2                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000149F2                            ; ---------------------------------------------------------------------------
000149F2                            Map_LConv_internal:
000149F2 0000                       		dc.w @wheel1-Map_LConv_internal
000149F4 0000                       		dc.w @wheel2-Map_LConv_internal
000149F6 0000                       		dc.w @wheel3-Map_LConv_internal
000149F8 0000                       		dc.w @wheel4-Map_LConv_internal
000149FA 0000                       		dc.w @platform-Map_LConv_internal
000149FC 01                         @wheel1:	dc.b 1
000149FD F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00014A02 01                         @wheel2:	dc.b 1
00014A03 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00014A08 01                         @wheel3:	dc.b 1
00014A09 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00014A0E 01                         @wheel4:	dc.b 1
00014A0F F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00014A14 01                         @platform:	dc.b 1
00014A15 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00014A1A                            		even
00014A1A                            		even
00014A1A                            		include	"_incObj\64 Bubbles.asm"
00014A1A                            ; ---------------------------------------------------------------------------
00014A1A                            ; Object 64 - bubbles (LZ)
00014A1A                            ; ---------------------------------------------------------------------------
00014A1A                            
00014A1A                            Bubble:
00014A1A 7000                       		moveq	#0,d0
00014A1C 1028 0024                  		move.b	obRoutine(a0),d0
00014A20 323B 0000                  		move.w	Bub_Index(pc,d0.w),d1
00014A24 4EFB 1000                  		jmp	Bub_Index(pc,d1.w)
00014A28                            ; ===========================================================================
00014A28 0000                       Bub_Index:	dc.w Bub_Main-Bub_Index
00014A2A 0000                       		dc.w Bub_Animate-Bub_Index
00014A2C 0000                       		dc.w Bub_ChkWater-Bub_Index
00014A2E 0000                       		dc.w Bub_Display-Bub_Index
00014A30 0000                       		dc.w Bub_Delete-Bub_Index
00014A32 0000                       		dc.w Bub_BblMaker-Bub_Index
00014A34                            
00014A34 =0000002E                  bub_inhalable:	equ $2E		; flag set when bubble is collectable
00014A34 =00000030                  bub_origX:	equ $30		; original x-axis position
00014A34 =00000032                  bub_time:	equ $32		; time until next bubble spawn
00014A34 =00000033                  bub_freq:	equ $33		; frequency of bubble spawn
00014A34                            ; ===========================================================================
00014A34                            
00014A34                            Bub_Main:	; Routine 0
00014A34 5428 0024                  		addq.b	#2,obRoutine(a0)
00014A38 217C 0000 0000 0004        		move.l	#Map_Bub,obMap(a0)
00014A40 317C 8348 0002             		move.w	#$8348,obGfx(a0)
00014A46 117C 0084 0001             		move.b	#$84,obRender(a0)
00014A4C 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014A52 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014A58 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00014A5C 6A00                       		bpl.s	@bubble		; if type is $0-$7F, branch
00014A5E                            
00014A5E 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Bub_BblMaker next
00014A62 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00014A66 1140 0032                  		move.b	d0,bub_time(a0)
00014A6A 1140 0033                  		move.b	d0,bub_freq(a0)	; set bubble frequency
00014A6E 117C 0006 001C             		move.b	#6,obAnim(a0)
00014A74 6000 0000                  		bra.w	Bub_BblMaker
00014A78                            ; ===========================================================================
00014A78                            
00014A78                            @bubble:
00014A78 1140 001C                  		move.b	d0,obAnim(a0)
00014A7C 3168 0008 0030             		move.w	obX(a0),bub_origX(a0)
00014A82 317C FF78 0012             		move.w	#-$88,obVelY(a0) ; float bubble upwards
00014A88 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00014A8E 1140 0026                  		move.b	d0,obAngle(a0)
00014A92                            
00014A92                            Bub_Animate:	; Routine 2
00014A92 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014A98 4EB9 0000 C862             		jsr	(AnimateSprite).l
00014A9E 0C28 0006 001A             		cmpi.b	#6,obFrame(a0)	; is bubble full-size?
00014AA4 6600                       		bne.s	Bub_ChkWater	; if not, branch
00014AA6                            
00014AA6 117C 0001 002E             		move.b	#1,bub_inhalable(a0) ; set "inhalable" flag
00014AAC                            
00014AAC                            Bub_ChkWater:	; Routine 4
00014AAC 3038 F646                  		move.w	(v_waterpos1).w,d0
00014AB0 B068 000C                  		cmp.w	obY(a0),d0	; is bubble underwater?
00014AB4 6500                       		bcs.s	@wobble		; if yes, branch
00014AB6                            
00014AB6                            @burst:
00014AB6 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto Bub_Display next
00014ABC 5628 001C                  		addq.b	#3,obAnim(a0)	; run "bursting" animation
00014AC0 6000 0000                  		bra.w	Bub_Display
00014AC4                            ; ===========================================================================
00014AC4                            
00014AC4                            @wobble:
00014AC4 1028 0026                  		move.b	obAngle(a0),d0
00014AC8 5228 0026                  		addq.b	#1,obAngle(a0)
00014ACC 0240 007F                  		andi.w	#$7F,d0
00014AD0 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00014AD6 1031 0000                  		move.b	(a1,d0.w),d0
00014ADA 4880                       		ext.w	d0
00014ADC D068 0030                  		add.w	bub_origX(a0),d0
00014AE0 3140 0008                  		move.w	d0,obX(a0)	; change bubble's x-axis position
00014AE4 4A28 002E                  		tst.b	bub_inhalable(a0)
00014AE8 6700                       		beq.s	@display
00014AEA 6100 0000                  		bsr.w	Bub_ChkSonic	; has Sonic touched the	bubble?
00014AEE 6700                       		beq.s	@display	; if not, branch
00014AF0                            
00014AF0 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00014AFE 43F8 D000                  		lea	(v_player).w,a1
00014B02 4269 0010                  		clr.w	obVelX(a1)
00014B06 4269 0012                  		clr.w	obVelY(a1)
00014B0A 4269 0020                  		clr.w	obInertia(a1)	; stop Sonic
00014B0E 137C 0000 001C             		move.b	#id_GetAir,obAnim(a1) ; use bubble-collecting animation
00014B14 337C 0023 003E             		move.w	#$23,$3E(a1)
00014B1A 137C 0000 003C             		move.b	#0,$3C(a1)
00014B20 08A9 0005 0022             		bclr	#5,obStatus(a1)
00014B26 08A9 0004 0022             		bclr	#4,obStatus(a1)
00014B2C 0829 0002 0022             		btst	#2,obStatus(a1)
00014B32 6700 FF82                  		beq.w	@burst
00014B36 08A9 0002 0022             		bclr	#2,obStatus(a1)
00014B3C 137C 0013 0016             		move.b	#$13,obHeight(a1)
00014B42 137C 0009 0017             		move.b	#9,obWidth(a1)
00014B48 5B69 000C                  		subq.w	#5,obY(a1)
00014B4C 6000 FF68                  		bra.w	@burst
00014B50                            ; ===========================================================================
00014B50                            
00014B50                            @display:
00014B50 6100 AC46                  		bsr.w	SpeedToPos
00014B54 4A28 0001                  		tst.b	obRender(a0)
00014B58 6A00                       		bpl.s	@delete
00014B5A 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
00014B60                            
00014B60                            	@delete:
00014B60 4EF9 0000 F7EC             		jmp	(DeleteObject).l
00014B66                            ; ===========================================================================
00014B66                            
00014B66                            Bub_Display:	; Routine 6
00014B66 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014B6C 4EB9 0000 C862             		jsr	(AnimateSprite).l
00014B72 4A28 0001                  		tst.b	obRender(a0)
00014B76 6A00                       		bpl.s	@delete
00014B78 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
00014B7E                            
00014B7E                            	@delete:
00014B7E 4EF9 0000 F7EC             		jmp	(DeleteObject).l
00014B84                            ; ===========================================================================
00014B84                            
00014B84                            Bub_Delete:	; Routine 8
00014B84 6000 AC66                  		bra.w	DeleteObject
00014B88                            ; ===========================================================================
00014B88                            
00014B88                            Bub_BblMaker:	; Routine $A
00014B88 4A68 0036                  		tst.w	$36(a0)
00014B8C 6600                       		bne.s	@loc_12874
00014B8E 3038 F646                  		move.w	(v_waterpos1).w,d0
00014B92 B068 000C                  		cmp.w	obY(a0),d0	; is bubble maker underwater?
00014B96 6400 0000                  		bcc.w	@chkdel		; if not, branch
00014B9A 4A28 0001                  		tst.b	obRender(a0)
00014B9E 6A00 0000                  		bpl.w	@chkdel
00014BA2 5368 0038                  		subq.w	#1,$38(a0)
00014BA6 6A00 0000                  		bpl.w	@loc_12914
00014BAA 317C 0001 0036             		move.w	#1,$36(a0)
00014BB0                            
00014BB0                            	@tryagain:
00014BB0 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00014BB6 3200                       		move.w	d0,d1
00014BB8 0240 0007                  		andi.w	#7,d0
00014BBC 0C40 0006                  		cmpi.w	#6,d0		; random number over 6?
00014BC0 64EE                       		bcc.s	@tryagain	; if yes, branch
00014BC2                            
00014BC2 1140 0034                  		move.b	d0,$34(a0)
00014BC6 0241 000C                  		andi.w	#$C,d1
00014BCA 43F9 0000 0000             		lea	(Bub_BblTypes).l,a1
00014BD0 D2C1                       		adda.w	d1,a1
00014BD2 2149 003C                  		move.l	a1,$3C(a0)
00014BD6 5328 0032                  		subq.b	#1,bub_time(a0)
00014BDA 6A00                       		bpl.s	@loc_12872
00014BDC 1168 0033 0032             		move.b	bub_freq(a0),bub_time(a0)
00014BE2 08E8 0007 0036             		bset	#7,$36(a0)
00014BE8                            
00014BE8                            @loc_12872:
00014BE8 6000                       		bra.s	@loc_1287C
00014BEA                            ; ===========================================================================
00014BEA                            
00014BEA                            @loc_12874:
00014BEA 5368 0038                  		subq.w	#1,$38(a0)
00014BEE 6A00 0000                  		bpl.w	@loc_12914
00014BF2                            
00014BF2                            @loc_1287C:
00014BF2 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00014BF8 0240 001F                  		andi.w	#$1F,d0
00014BFC 3140 0038                  		move.w	d0,$38(a0)
00014C00 6100 B144                  		bsr.w	FindFreeObj
00014C04 6600                       		bne.s	@fail
00014C06 12BC 0064                  		move.b	#id_Bubble,0(a1) ; load bubble object
00014C0A 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014C10 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00014C16 0240 000F                  		andi.w	#$F,d0
00014C1A 5140                       		subq.w	#8,d0
00014C1C D169 0008                  		add.w	d0,obX(a1)
00014C20 3368 000C 000C             		move.w	obY(a0),obY(a1)
00014C26 7000                       		moveq	#0,d0
00014C28 1028 0034                  		move.b	$34(a0),d0
00014C2C 2468 003C                  		movea.l	$3C(a0),a2
00014C30 1372 0000 0028             		move.b	(a2,d0.w),obSubtype(a1)
00014C36 0828 0007 0036             		btst	#7,$36(a0)
00014C3C 6700                       		beq.s	@fail
00014C3E 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00014C44 0240 0003                  		andi.w	#3,d0
00014C48 6600                       		bne.s	@loc_buh
00014C4A 08E8 0006 0036             		bset	#6,$36(a0)
00014C50 6600                       		bne.s	@fail
00014C52 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014C58                            
00014C58                            @loc_buh:
00014C58 4A28 0034                  		tst.b	$34(a0)
00014C5C 6600                       		bne.s	@fail
00014C5E 08E8 0006 0036             		bset	#6,$36(a0)
00014C64 6600                       		bne.s	@fail
00014C66 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014C6C                            
00014C6C                            	@fail:
00014C6C 5328 0034                  		subq.b	#1,$34(a0)
00014C70 6A00                       		bpl.s	@loc_12914
00014C72 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00014C78 0240 007F                  		andi.w	#$7F,d0
00014C7C 0640 0080                  		addi.w	#$80,d0
00014C80 D168 0038                  		add.w	d0,$38(a0)
00014C84 4268 0036                  		clr.w	$36(a0)
00014C88                            
00014C88                            @loc_12914:
00014C88 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014C8E 4EB9 0000 C862             		jsr	(AnimateSprite).l
00014C94                            
00014C94                            @chkdel:
00014CB2 3038 F646                  		move.w	(v_waterpos1).w,d0
00014CB6 B068 000C                  		cmp.w	obY(a0),d0
00014CBA 6500 AAF0                  		bcs.w	DisplaySprite
00014CBE 4E75                       		rts	
00014CC0                            ; ===========================================================================
00014CC0                            ; bubble production sequence
00014CC0                            
00014CC0                            ; 0 = small bubble, 1 =	large bubble
00014CC0                            
00014CC0 0001 0000 0000 0100 0000+  Bub_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00014CD2                            
00014CD2                            ; ===========================================================================
00014CD2                            
00014CD2                            Bub_ChkSonic:
00014CD2 4A38 F7C8                  		tst.b	(f_lockmulti).w
00014CD6 6B00                       		bmi.s	@loc_12998
00014CD8 43F8 D000                  		lea	(v_player).w,a1
00014CDC 3029 0008                  		move.w	obX(a1),d0
00014CE0 3228 0008                  		move.w	obX(a0),d1
00014CE4 0441 0010                  		subi.w	#$10,d1
00014CE8 B240                       		cmp.w	d0,d1
00014CEA 6400                       		bcc.s	@loc_12998
00014CEC 0641 0020                  		addi.w	#$20,d1
00014CF0 B240                       		cmp.w	d0,d1
00014CF2 6500                       		bcs.s	@loc_12998
00014CF4 3029 000C                  		move.w	obY(a1),d0
00014CF8 3228 000C                  		move.w	obY(a0),d1
00014CFC B240                       		cmp.w	d0,d1
00014CFE 6400                       		bcc.s	@loc_12998
00014D00 0641 0010                  		addi.w	#$10,d1
00014D04 B240                       		cmp.w	d0,d1
00014D06 6500                       		bcs.s	@loc_12998
00014D08 7001                       		moveq	#1,d0
00014D0A 4E75                       		rts	
00014D0C                            ; ===========================================================================
00014D0C                            
00014D0C                            @loc_12998:
00014D0C 7000                       		moveq	#0,d0
00014D0E 4E75                       		rts	
00014D0E 4E75                       		rts	
00014D10                            		include	"_anim\Bubbles.asm"
00014D10                            ; ---------------------------------------------------------------------------
00014D10                            ; Animation script - bubbles (LZ)
00014D10                            ; ---------------------------------------------------------------------------
00014D10 0000                       Ani_Bub:	dc.w @small-Ani_Bub
00014D12 0000                       		dc.w @medium-Ani_Bub
00014D14 0000                       		dc.w @large-Ani_Bub
00014D16 0000                       		dc.w @incroutine-Ani_Bub
00014D18 0000                       		dc.w @incroutine-Ani_Bub
00014D1A 0000                       		dc.w @burst-Ani_Bub
00014D1C 0000                       		dc.w @bubmaker-Ani_Bub
00014D1E 0D00 0102 FC               @small:		dc.b $D, 0, 1, 2, afRoutine ; small bubble forming
00014D24 00                         		even
00014D24 0D01 0203 04FC             @medium:	dc.b $D, 1, 2, 3, 4, afRoutine ; medium bubble forming
00014D2A 0D02 0304 0506 FC          @large:		dc.b $D, 2, 3, 4, 5, 6,	afRoutine ; full size bubble forming
00014D32 00                         		even
00014D32 04FC                       @incroutine:	dc.b 4,	afRoutine	; increment routine counter (no animation)
00014D34 0406 0708 FC               @burst:		dc.b 4,	6, 7, 8, afRoutine ; large bubble bursts
00014D3A 00                         		even
00014D3A 0E13 1415 FF               @bubmaker:	dc.b $E, $13, $14, $15,	afEnd ; bubble maker on the floor
00014D40 00                         		even
00014D40 00                         		even
00014D40                            Map_Bub:	include	"_maps\Bubbles.asm"
00014D40                            ; ---------------------------------------------------------------------------
00014D40                            ; Sprite mappings - bubbles (LZ)
00014D40                            ; ---------------------------------------------------------------------------
00014D40                            Map_Bub_internal:
00014D40 0000                       		dc.w @bubble1-Map_Bub_internal
00014D42 0000                       		dc.w @bubble2-Map_Bub_internal
00014D44 0000                       		dc.w @bubble3-Map_Bub_internal
00014D46 0000                       		dc.w @bubble4-Map_Bub_internal
00014D48 0000                       		dc.w @bubble5-Map_Bub_internal
00014D4A 0000                       		dc.w @bubble6-Map_Bub_internal
00014D4C 0000                       		dc.w @bubblefull-Map_Bub_internal
00014D4E 0000                       		dc.w @burst1-Map_Bub_internal
00014D50 0000                       		dc.w @burst2-Map_Bub_internal
00014D52 0000                       		dc.w @zero_sm-Map_Bub_internal
00014D54 0000                       		dc.w @five_sm-Map_Bub_internal
00014D56 0000                       		dc.w @three_sm-Map_Bub_internal
00014D58 0000                       		dc.w @one_sm-Map_Bub_internal
00014D5A 0000                       		dc.w @zero-Map_Bub_internal
00014D5C 0000                       		dc.w @five-Map_Bub_internal
00014D5E 0000                       		dc.w @four-Map_Bub_internal
00014D60 0000                       		dc.w @three-Map_Bub_internal
00014D62 0000                       		dc.w @two-Map_Bub_internal
00014D64 0000                       		dc.w @one-Map_Bub_internal
00014D66 0000                       		dc.w @bubmaker1-Map_Bub_internal
00014D68 0000                       		dc.w @bubmaker2-Map_Bub_internal
00014D6A 0000                       		dc.w @bubmaker3-Map_Bub_internal
00014D6C 0000                       		dc.w @blank-Map_Bub_internal
00014D6E 01                         @bubble1:	dc.b 1
00014D6F FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC	; bubbles, increasing in size
00014D74 01                         @bubble2:	dc.b 1
00014D75 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00014D7A 01                         @bubble3:	dc.b 1
00014D7B FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00014D80 01                         @bubble4:	dc.b 1
00014D81 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00014D86 01                         @bubble5:	dc.b 1
00014D87 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00014D8C 01                         @bubble6:	dc.b 1
00014D8D F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00014D92 01                         @bubblefull:	dc.b 1
00014D93 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00014D98 04                         @burst1:	dc.b 4
00014D99 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0 ; large bubble bursting
00014D9E F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00014DA3 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00014DA8 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00014DAD 04                         @burst2:	dc.b 4
00014DAE F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00014DB3 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00014DB8 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00014DBD 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00014DC2 01                         @zero_sm:	dc.b 1
00014DC3 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8 ; small, partially-formed countdown numbers
00014DC8 01                         @five_sm:	dc.b 1
00014DC9 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00014DCE 01                         @three_sm:	dc.b 1
00014DCF F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00014DD4 01                         @one_sm:	dc.b 1
00014DD5 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00014DDA 01                         @zero:		dc.b 1
00014DDB F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8 ; fully-formed countdown numbers
00014DE0 01                         @five:		dc.b 1
00014DE1 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00014DE6 01                         @four:		dc.b 1
00014DE7 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00014DEC 01                         @three:		dc.b 1
00014DED F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00014DF2 01                         @two:		dc.b 1
00014DF3 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00014DF8 01                         @one:		dc.b 1
00014DF9 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00014DFE 01                         @bubmaker1:	dc.b 1
00014DFF F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00014E04 01                         @bubmaker2:	dc.b 1
00014E05 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00014E0A 01                         @bubmaker3:	dc.b 1
00014E0B F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00014E10 00                         @blank:		dc.b 0
00014E12 00                         		even
00014E12 00                         		even
00014E12                            		include	"_incObj\65 Waterfalls.asm"
00014E12                            ; ---------------------------------------------------------------------------
00014E12                            ; Object 65 - waterfalls (LZ)
00014E12                            ; ---------------------------------------------------------------------------
00014E12                            
00014E12                            Waterfall:
00014E12 7000                       		moveq	#0,d0
00014E14 1028 0024                  		move.b	obRoutine(a0),d0
00014E18 323B 0000                  		move.w	WFall_Index(pc,d0.w),d1
00014E1C 4EFB 1000                  		jmp	WFall_Index(pc,d1.w)
00014E20                            ; ===========================================================================
00014E20 0000                       WFall_Index:	dc.w WFall_Main-WFall_Index
00014E22 0000                       		dc.w WFall_Animate-WFall_Index
00014E24 0000                       		dc.w WFall_ChkDel-WFall_Index
00014E26 0000                       		dc.w WFall_OnWater-WFall_Index
00014E28 0000                       		dc.w loc_12B36-WFall_Index
00014E2A                            ; ===========================================================================
00014E2A                            
00014E2A                            WFall_Main:	; Routine 0
00014E2A 5828 0024                  		addq.b	#4,obRoutine(a0)
00014E2E 217C 0000 0000 0004        		move.l	#Map_WFall,obMap(a0)
00014E36 317C 4259 0002             		move.w	#$4259,obGfx(a0)
00014E3C 0028 0004 0001             		ori.b	#4,obRender(a0)
00014E42 117C 0018 0014             		move.b	#$18,obActWid(a0)
00014E48 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014E4E 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014E52 6A00                       		bpl.s	@under80	; branch if $00-$7F
00014E54 08E8 0007 0002             		bset	#7,obGfx(a0)
00014E5A                            
00014E5A                            	@under80:
00014E5A 0200 000F                  		andi.b	#$F,d0		; read only the	2nd digit
00014E5E 1140 001A                  		move.b	d0,obFrame(a0)	; set frame number
00014E62 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00014E66 6600                       		bne.s	WFall_ChkDel	; if not, branch
00014E68                            
00014E68 4228 0018                  		clr.b	obPriority(a0)	; object is in front of Sonic
00014E6C 5528 0024                  		subq.b	#2,obRoutine(a0) ; goto WFall_Animate next
00014E70 0828 0006 0028             		btst	#6,obSubtype(a0) ; is object type $49 ?
00014E76 6700                       		beq.s	@not49		; if not, branch
00014E78                            
00014E78 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto WFall_OnWater next
00014E7E                            
00014E7E                            	@not49:
00014E7E 0828 0005 0028             		btst	#5,obSubtype(a0) ; is object type $A9 ?
00014E84 6700                       		beq.s	WFall_Animate	; if not, branch
00014E86 117C 0008 0024             		move.b	#8,obRoutine(a0) ; goto loc_12B36 next
00014E8C                            
00014E8C                            WFall_Animate:	; Routine 2
00014E8C 43F9 0000 0000             		lea	(Ani_WFall).l,a1
00014E92 4EB9 0000 C862             		jsr	(AnimateSprite).l
00014E98                            
00014E98                            WFall_ChkDel:	; Routine 4
00014E98 6000 C9C6                  		bra.w	RememberState
00014E9C                            ; ===========================================================================
00014E9C                            
00014E9C                            WFall_OnWater:	; Routine 6
00014E9C 3038 F646                  		move.w	(v_waterpos1).w,d0
00014EA0 0440 0010                  		subi.w	#$10,d0
00014EA4 3140 000C                  		move.w	d0,obY(a0)	; match	object position	to water height
00014EA8 60E2                       		bra.s	WFall_Animate
00014EAA                            ; ===========================================================================
00014EAA                            
00014EAA                            loc_12B36:	; Routine 8
00014EAA 08A8 0007 0002             		bclr	#7,obGfx(a0)
00014EB0 0C38 0007 A506             		cmpi.b	#7,(v_lvllayout+$106).w
00014EB6 6600                       		bne.s	@animate
00014EB8 08E8 0007 0002             		bset	#7,obGfx(a0)
00014EBE                            
00014EBE                            	@animate:
00014EBE 60CC                       		bra.s	WFall_Animate
00014EBE 60CC                       		bra.s	WFall_Animate
00014EC0                            		include	"_anim\Waterfalls.asm"
00014EC0                            ; ---------------------------------------------------------------------------
00014EC0                            ; Animation script - waterfall (LZ)
00014EC0                            ; ---------------------------------------------------------------------------
00014EC0 0000                       Ani_WFall:	dc.w @splash-Ani_WFall
00014EC2 0509 0A0B FF               @splash:	dc.b 5,	9, $A, $B, afEnd
00014EC8 00                         		even
00014EC8 00                         		even
00014EC8                            Map_WFall	include	"_maps\Waterfalls.asm"
00014EC8                            ; ---------------------------------------------------------------------------
00014EC8                            ; Sprite mappings - waterfalls (LZ)
00014EC8                            ; ---------------------------------------------------------------------------
00014EC8                            Map_WFall_internal:
00014EC8 0000                       		dc.w @vertnarrow-Map_WFall_internal
00014ECA 0000                       		dc.w @cornerwide-Map_WFall_internal
00014ECC 0000                       		dc.w @cornermedium-Map_WFall_internal
00014ECE 0000                       		dc.w @cornernarrow-Map_WFall_internal
00014ED0 0000                       		dc.w @cornermedium2-Map_WFall_internal
00014ED2 0000                       		dc.w @cornernarrow2-Map_WFall_internal
00014ED4 0000                       		dc.w @cornernarrow3-Map_WFall_internal
00014ED6 0000                       		dc.w @vertwide-Map_WFall_internal
00014ED8 0000                       		dc.w @diagonal-Map_WFall_internal
00014EDA 0000                       		dc.w @splash1-Map_WFall_internal
00014EDC 0000                       		dc.w @splash2-Map_WFall_internal
00014EDE 0000                       		dc.w @splash3-Map_WFall_internal
00014EE0 01                         @vertnarrow:	dc.b 1
00014EE1 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014EE6 02                         @cornerwide:	dc.b 2
00014EE7 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00014EEC 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00014EF1 02                         @cornermedium:	dc.b 2
00014EF2 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014EF7 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014EFC 01                         @cornernarrow:	dc.b 1
00014EFD F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00014F02 02                         @cornermedium2:	dc.b 2
00014F03 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014F08 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014F0D 01                         @cornernarrow2:	dc.b 1
00014F0E F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00014F13 01                         @cornernarrow3:	dc.b 1
00014F14 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014F19 01                         @vertwide:	dc.b 1
00014F1A F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00014F1F 02                         @diagonal:	dc.b 2
00014F20 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00014F25 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00014F2A 02                         @splash1:	dc.b 2
00014F2B F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00014F30 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00014F35 02                         @splash2:	dc.b 2
00014F36 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00014F3B F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00014F40 02                         @splash3:	dc.b 2
00014F41 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00014F46 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00014F4C 00                         		even
00014F4C 00                         		even
00014F4C                            
00014F4C                            
00014F4C                            SpinDash_dust:				;TIS - Changed to allow for dynamic positioning
00014F4C                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00014F4C 7000                       		moveq	#0,d0
00014F4E 1028 0024                  		move.b	$24(a0),d0
00014F52 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00014F56 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00014F5A                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014F5A 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00014F5C 0000                       		dc loc_1DD90-off_1DD2E; 1
00014F5E 0000                       		dc loc_1DE46-off_1DD2E; 2
00014F60 0000                       		dc loc_1DE4A-off_1DD2E; 3
00014F62                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014F62                            
00014F62                            loc_1DD36:				; DATA XREF: h+6DBA?o
00014F62 5428 0024                  		addq.b	#2,$24(a0)
00014F66 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00014F6E 0028 0004 0001             		or.b	#4,1(a0)
00014F74 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014F7A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014F80 317C 07AC 0002             		move	#$7AC,2(a0)
00014F86 317C D000 003E             		move	#-$3000,$3E(a0)
00014F8C 317C F580 003C             		move	#$F580,$3C(a0)
00014F92 B0FC D1C0                  		cmp	#-$2E40,a0
00014F96 6700                       		beq.s	loc_1DD8C
00014F98 117C 0001 0034             		move.b	#1,$34(a0)
00014F9E                            ;		cmp	#2,($FFFFFF70).w
00014F9E                            ;		beq.s	loc_1DD8C
00014F9E                            ;		move	#$48C,2(a0)
00014F9E                            ;		move	#-$4FC0,$3E(a0)
00014F9E                            ;		move	#-$6E80,$3C(a0)
00014F9E                            
00014F9E                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
00014F9E                            ;		bsr.w	sub_16D6E
00014F9E                            
00014F9E                            loc_1DD90:				; DATA XREF: h+6DBA?o
00014F9E 3468 003E                  		movea.w	$3E(a0),a2
00014FA2 7000                       		moveq	#0,d0
00014FA4 1028 001C                  		move.b	$1C(a0),d0
00014FA8 D040                       		add	d0,d0
00014FAA 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
00014FAE 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
00014FB2                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014FB2 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
00014FB4 0000                       		dc loc_1DDAC-off_1DDA4; 1
00014FB6 0000                       		dc loc_1DDCC-off_1DDA4; 2
00014FB8 0000                       		dc loc_1DE20-off_1DDA4; 3
00014FBA                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014FBA                            
00014FBA                            loc_1DDAC:				; DATA XREF: h+6E30?o
00014FBA 3178 F646 000C             		move	(v_waterpos1).w,$C(a0)	;TIS - Changed to variable name
00014FC0 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	;TIS is level LZ?
00014FC6 6700                       		beq.s	StandardWaterLevel	;TIS - if no, branch
00014FC8 3178 FF92 000C             		move	(v_watersplashpos).w,$C(a0)	;TIS - Dynamic water position
00014FCE                            	StandardWaterLevel:
00014FCE 4A28 001D                  		tst.b	$1D(a0)
00014FD2 6600                       		bne.s	loc_1DE28
00014FD4 316A 0008 0008             		move	8(a2),8(a0)
00014FDA 117C 0000 0022             		move.b	#0,$22(a0)
00014FE0 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014FE6 6000                       		bra.s	loc_1DE28
00014FE8                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014FE8                            
00014FE8                            loc_1DDCC:				; DATA XREF: h+6E30?o
00014FE8                            ;		cmp.b	#$C,$28(a2)
00014FE8                            ;		bcs.s	loc_1DE3E
00014FE8 0C2A 0004 0024             		cmp.b	#4,$24(a2)
00014FEE 6400                       		bcc.s	loc_1DE3E
00014FF0 4A2A 0039                  		tst.b	$39(a2)
00014FF4 6700                       		beq.s	loc_1DE3E
00014FF6 316A 0008 0008             		move	8(a2),8(a0)
00014FFC 316A 000C 000C             		move	$C(a2),$C(a0)
00015002 116A 0022 0022             		move.b	$22(a2),$22(a0)
00015008 0228 0001 0022             		and.b	#1,$22(a0)
0001500E 4A28 0034                  		tst.b	$34(a0)
00015012 6700                       		beq.s	loc_1DE06
00015014 5968 000C                  		sub	#4,$C(a0)
00015018                            
00015018                            loc_1DE06:				; CODE XREF: h+6E8A?j
00015018 4A28 001D                  		tst.b	$1D(a0)
0001501C 6600                       		bne.s	loc_1DE28
0001501E 0268 7FFF 0002             		and	#$7FFF,2(a0)
00015024 4A6A 0002                  		tst	2(a2)
00015028 6A00                       		bpl.s	loc_1DE28
0001502A 0068 8000 0002             		or	#-$8000,2(a0)
00015030                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015030                            
00015030                            loc_1DE20:				; DATA XREF: h+6E30?o
00015030                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
00015030 43F9 0000 0000             		lea	(off_1DF38).l,a1
00015036 4EB9 0000 C862             		jsr	AnimateSprite
0001503C 6100 0000                  		bsr.w	loc_1DEE4
00015040 4EFA A76A                  		jmp	DisplaySprite
00015044                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015044                            
00015044                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
00015044 117C 0000 001C             		move.b	#0,$1C(a0)
0001504A 4E75                       		rts	
0001504C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001504C                            
0001504C                            loc_1DE46:				; DATA XREF: h+6DBA?o
0001504C 6000 A79E                  		bra.w	DeleteObject
00015050                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015050                            
00015050                            
00015050                            
00015050                            loc_1DE4A:
00015050 3468 003E                  	movea.w	$3E(a0),a2
00015054 7210                       	moveq	#$10,d1
00015056 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
0001505C 6700                       	beq.s	loc_1DE64
0001505E 7206                       	moveq	#$6,d1
00015060 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
00015066 6700                       	beq.s	loc_1DE64
00015068 117C 0002 0024             	move.b	#2,$24(a0)
0001506E 117C 0000 0032             	move.b	#0,$32(a0)
00015074 4E75                       	rts
00015076                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015076                            
00015076                            loc_1DE64:				; CODE XREF: h+6EE0?j
00015076 5328 0032                  		subq.b	#1,$32(a0)
0001507A 6A00                       		bpl.s	loc_1DEE0
0001507C 117C 0003 0032             		move.b	#3,$32(a0)
00015082 4EBA ACC2                  		jsr	FindFreeObj
00015086 6600                       		bne.s	loc_1DEE0
00015088 1290                       		move.b	0(a0),0(a1)
0001508A 336A 0008 0008             		move	8(a2),8(a1)
00015090 336A 000C 000C             		move	$C(a2),$C(a1)
00015096 4A28 0034                  		tst.b	$34(a0)
0001509A 6700                       		beq.s	loc_1DE9A
0001509C 5941                       		sub	#4,d1
0001509E                            
0001509E                            loc_1DE9A:				; CODE XREF: h+6F1E?j
0001509E D369 000C                  		add	d1,$C(a1)
000150A2 137C 0000 0022             		move.b	#0,$22(a1)
000150A8 137C 0003 001C             		move.b	#3,$1C(a1)
000150AE 5429 0024                  		addq.b	#2,$24(a1)
000150B2 2368 0004 0004             		move.l	4(a0),4(a1)
000150B8 1368 0001 0001             		move.b	1(a0),1(a1)
000150BE 337C 0080 0018             		move.w	#$80,obPriority(a1)
000150C4 137C 0004 0014             		move.b	#4,obActWid(a1)
000150CA 3368 0002 0002             		move	2(a0),2(a1)
000150D0 3368 003E 003E             		move	$3E(a0),$3E(a1)
000150D6 0269 7FFF 0002             		and	#$7FFF,2(a1)
000150DC 4A6A 0002                  		tst	2(a2)
000150E0 6A00                       		bpl.s	loc_1DEE0
000150E2 0069 8000 0002             		or	#-$8000,2(a1)
000150E8                            
000150E8                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
000150E8 6100                       		bsr.s	loc_1DEE4
000150EA 4E75                       		rts	
000150EC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150EC                            
000150EC                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
000150EC 7000                       		moveq	#0,d0
000150EE 1028 001A                  		move.b	$1A(a0),d0
000150F2 B028 0030                  		cmp.b	$30(a0),d0
000150F6 6700 0000                  		beq.w	locret_1DF36
000150FA 1140 0030                  		move.b	d0,$30(a0)
000150FE 45F9 0000 0000             		lea	(off_1E074).l,a2
00015104 D040                       		add	d0,d0
00015106 D4F2 0000                  		add	(a2,d0.w),a2
0001510A 3A1A                       		move	(a2)+,d5
0001510C 5345                       		subq	#1,d5
0001510E 6B00 0000                  		bmi.w	locret_1DF36
00015112 3828 003C                  		move $3C(a0),d4
00015116                            
00015116                            loc_1DF0A:				; CODE XREF: h+6FBE?j
00015116 7200                       		moveq	#0,d1
00015118 321A                       		move	(a2)+,d1
0001511A 3601                       		move	d1,d3
0001511C E04B                       		lsr.w	#8,d3
0001511E 0243 00F0                  		and	#$F0,d3	; 'ð'
00015122 0643 0010                  		add	#$10,d3
00015126 0241 0FFF                  		and	#$FFF,d1
0001512A EB89                       		lsl.l	#5,d1
0001512C 0681 0000 0000             		add.l	#Art_Dust,d1
00015132 3404                       		move	d4,d2
00015134 D843                       		add	d3,d4
00015136 D843                       		add	d3,d4
00015138 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
0001513E 51CD FFD6                  		dbf	d5,loc_1DF0A
00015142 4E75                           rts
00015144                            
00015144                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
00015144 4E75                       		rts	
00015146                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015146 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
00015148 0000                       		dc byte_1DF43-off_1DF38; 1
0001514A 0000                       		dc byte_1DF4F-off_1DF38; 2
0001514C 0000                       		dc byte_1DF58-off_1DF38; 3
0001514E 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
00015151 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
0001515D 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
00015166 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
0001516C                            ; -------------------------------------------------------------------------------
0001516C                            ; Unknown Sprite Mappings
0001516C                            ; -------------------------------------------------------------------------------
0001516C                            MapUnc_1DF5E:
0001516C 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
0001516E 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
00015170 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
00015172 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
00015174 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
00015176 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
00015178 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
0001517A 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
0001517C 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
0001517E 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
00015180 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
00015182 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
00015184 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
00015186 0000                       	dc word_1E004-MapUnc_1DF5E; 13
00015188 0000                       	dc word_1E016-MapUnc_1DF5E; 14
0001518A 0000                       	dc word_1E028-MapUnc_1DF5E; 15
0001518C 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
0001518E 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
00015190 0000                       	dc word_1E056-MapUnc_1DF5E; 18
00015192 0000                       	dc word_1E060-MapUnc_1DF5E; 19
00015194 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
00015196 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
00015198 00                         word_1DF8A:	dc.b 0
00015199 01                         word_1DF8C:	dc.b 1
0001519A F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001519F 01                         word_1DF96:	dc.b 1
000151A0 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000151A5 01                         word_1DFA0:	dc.b 1
000151A6 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000151AB 01                         word_1DFAA:	dc.b 1
000151AC E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000151B1 01                         word_1DFB4:	dc.b 1
000151B2 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000151B7 01                         word_1DFBE:	dc.b 1
000151B8 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000151BD 01                         word_1DFC8:	dc.b 1
000151BE F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000151C3 01                         word_1DFD2:	dc.b 1
000151C4 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000151C9 01                         word_1DFDC:	dc.b 1
000151CA F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000151CF 01                         word_1DFE6:	dc.b 1
000151D0 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000151D5 01                         word_1DFF0:	dc.b 1
000151D6 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000151DB 01                         word_1DFFA:	dc.b 1
000151DC 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000151E1 02                         word_1E004:	dc.b 2
000151E2 F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
000151E7 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
000151EC 02                         word_1E016:	dc.b 2
000151ED F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
000151F2 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
000151F7 02                         word_1E028:	dc.b 2
000151F8 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
000151FD 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00015202 02                         word_1E03A:	dc.b 2
00015203 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00015208 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
0001520D 01                         word_1E04C:	dc.b 1
0001520E F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00015213 01                         word_1E056:	dc.b 1
00015214 F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
00015219 01                         word_1E060:	dc.b 1
0001521A F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
0001521F 01                         word_1E06A:	dc.b 1
00015220 F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
00015225 00                         	dc.b 0
00015226 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
00015228 0000                       	dc word_1E0A2-off_1E074; 1
0001522A 0000                       	dc word_1E0A6-off_1E074; 2
0001522C 0000                       	dc word_1E0AA-off_1E074; 3
0001522E 0000                       	dc word_1E0AE-off_1E074; 4
00015230 0000                       	dc word_1E0B2-off_1E074; 5
00015232 0000                       	dc word_1E0B6-off_1E074; 6
00015234 0000                       	dc word_1E0BA-off_1E074; 7
00015236 0000                       	dc word_1E0BE-off_1E074; 8
00015238 0000                       	dc word_1E0C2-off_1E074; 9
0001523A 0000                       	dc word_1E0C6-off_1E074; 10
0001523C 0000                       	dc word_1E0CA-off_1E074; 11
0001523E 0000                       	dc word_1E0CE-off_1E074; 12
00015240 0000                       	dc word_1E0D2-off_1E074; 13
00015242 0000                       	dc word_1E0D8-off_1E074; 14
00015244 0000                       	dc word_1E0DE-off_1E074; 15
00015246 0000                       	dc word_1E0E4-off_1E074; 16
00015248 0000                       	dc word_1E0EA-off_1E074; 17
0001524A 0000                       	dc word_1E0EA-off_1E074; 18
0001524C 0000                       	dc word_1E0EA-off_1E074; 19
0001524E 0000                       	dc word_1E0EA-off_1E074; 20
00015250 0000                       	dc word_1E0EC-off_1E074; 21
00015252 0000                       word_1E0A0:	dc 0
00015254 0001                       word_1E0A2:	dc 1
00015256 7000                       	dc $7000
00015258 0001                       word_1E0A6:	dc 1
0001525A F008                       	dc $F008
0001525C 0001                       word_1E0AA:	dc 1
0001525E F018                       	dc $F018
00015260 0001                       word_1E0AE:	dc 1
00015262 F028                       	dc $F028
00015264 0001                       word_1E0B2:	dc 1
00015266 F038                       	dc $F038
00015268 0001                       word_1E0B6:	dc 1
0001526A F048                       	dc $F048
0001526C 0001                       word_1E0BA:	dc 1
0001526E 7058                       	dc $7058
00015270 0001                       word_1E0BE:	dc 1
00015272 7060                       	dc $7060
00015274 0001                       word_1E0C2:	dc 1
00015276 7068                       	dc $7068
00015278 0001                       word_1E0C6:	dc 1
0001527A 7070                       	dc $7070
0001527C 0001                       word_1E0CA:	dc 1
0001527E 7078                       	dc $7078
00015280 0001                       word_1E0CE:	dc 1
00015282 7080                       	dc $7080
00015284 0002                       word_1E0D2:	dc 2
00015286 1088                       	dc $1088
00015288 708A                       	dc $708A
0001528A 0002                       word_1E0D8:	dc 2
0001528C 3092                       	dc $3092
0001528E 7096                       	dc $7096
00015290 0002                       word_1E0DE:	dc 2
00015292 509E                       	dc $509E
00015294 70A4                       	dc $70A4
00015296 0002                       word_1E0E4:	dc 2
00015298 50AC                       	dc $50AC
0001529A 70B2                       	dc $70B2
0001529C 0000                       word_1E0EA:	dc 0
0001529E 0001                       word_1E0EC:	dc 1
000152A0 F0BA                       	dc $F0BA
000152A2                            	even
000152A2                            
000152A2                            ; ===========================================================================
000152A2                            
000152A2                            LoadPlayerPal:
000152A2 7000                       		moveq	#0,d0
000152A4 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
000152A8 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
000152AC 4E75                       		rts
000152AE                            
000152AE                            	@palLUT:
000152AE 0316 1718 19               		dc.b	palid_Sonic, palid_Sonic2, palid_Sonic3, palid_Sonic4, palid_Sonic5
000152B3 1A1B 1C1D 1E1F             		dc.b	palid_Sonic6, palid_Sonic7, palid_Sonic8, palid_Sonic9, palid_Sonic10, palid_Sonic11
000152BA 00                         		even
000152BA                            
000152BA                            LoadPlayerWaterPal:
000152BA 7000                       		moveq	#0,d0
000152BC 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
000152C0 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
000152C4 4E75                       		rts
000152C6                            
000152C6                            	@palLUT:
000152C6 1020 2122 23               		dc.b	palid_SBZ3SonWat, palid_SonWater2, palid_SonWater3, palid_SonWater4, palid_SonWater5
000152CB 2425 2627 2829             		dc.b	palid_SonWater6, palid_SonWater7, palid_SonWater8, palid_SonWater9, palid_SonWater10, palid_SonWater11
000152D2 00                         		even
000152D2                            
000152D2                            LoadLifeIcon:
000152D2 7000                       		moveq	#0,d0
000152D4 3038 FE10                  		move.w	(v_zone).w,d0	
000152D8 E418                       		ror.b	#2,d0
000152DA EC48                               lsr.w 	#6,d0		
000152DC 103B 0000                  		move.b	LoadLifeIcon_Table(pc,d0.w),d0	
000152E0 4EB8 173A                  		jsr		AddPLC	
000152E4 4E75                       		rts
000152E6                            
000152E6                            LoadLifeIcon_Table:
000152E6                            		; GHZ
000152E6 00                         		dc.b	plcid_LifeIcon
000152E7 00                         		dc.b	plcid_LifeIcon
000152E8 00                         		dc.b	plcid_LifeIcon	
000152E9 00                         		dc.b	plcid_LifeIcon	
000152EA                            		; LZ
000152EA 00                         		dc.b	plcid_LifeIcon
000152EB 00                         		dc.b	plcid_LifeIcon
000152EC 00                         		dc.b	plcid_LifeIcon	
000152ED 00                         		dc.b	plcid_LifeIconF	
000152EE                            		; MZ
000152EE 00                         		dc.b	plcid_LifeIconF
000152EF 00                         		dc.b	plcid_LifeIconF
000152F0 00                         		dc.b	plcid_LifeIconF
000152F1 00                         		dc.b	plcid_LifeIconF
000152F2                            		; SLZ
000152F2 00                         		dc.b	plcid_LifeIcon
000152F3 00                         		dc.b	plcid_LifeIcon
000152F4 00                         		dc.b	plcid_LifeIcon	
000152F5 00                         		dc.b	plcid_LifeIcon	
000152F6                            		; SYZ
000152F6 00                         		dc.b	plcid_LifeIconF
000152F7 00                         		dc.b	plcid_LifeIconF
000152F8 00                         		dc.b	plcid_LifeIconF
000152F9 00                         		dc.b	plcid_LifeIconF	
000152FA                            		; SBZ
000152FA 00                         		dc.b	plcid_LifeIconF
000152FB 00                         		dc.b	plcid_LifeIconF
000152FC 00                         		dc.b	plcid_LifeIconF
000152FD 00                         		dc.b	plcid_LifeIconF	
000152FE                            		even
000152FE                            
000152FE                            ; ---------------------------------------------------------------------------
000152FE                            ; Object 01 - Sonic
000152FE                            ; ---------------------------------------------------------------------------
000152FE                            
000152FE                            SonicPlayer:
000152FE 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00015302 6700                       		beq.s	Sonic_Normal	; if not, branch
00015304 4EF9 0000 0000             		jmp	(DebugMode).l
0001530A                            ; ===========================================================================
0001530A                            
0001530A                            Sonic_Normal:
0001530A 7000                       		moveq	#0,d0
0001530C 1028 0024                  		move.b	obRoutine(a0),d0
00015310 323B 0000                  		move.w	Sonic_Index(pc,d0.w),d1
00015314 4EFB 1000                  		jmp	Sonic_Index(pc,d1.w)
00015318                            ; ===========================================================================
00015318 0000                       Sonic_Index:	dc.w Sonic_Main-Sonic_Index
0001531A 0000                       		dc.w Sonic_Control-Sonic_Index
0001531C 0000                       		dc.w Sonic_Hurt-Sonic_Index
0001531E 0000                       		dc.w Sonic_Death-Sonic_Index
00015320 0000                       		dc.w Sonic_ResetLevel-Sonic_Index
00015322                            ; ===========================================================================
00015322                            
00015322                            Sonic_Main:	; Routine 0
00015322 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
00015328 5428 0024                  		addq.b	#2,obRoutine(a0)
0001532C 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015332 117C 0009 0017             		move.b	#9,obWidth(a0)
00015338 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00015340 317C 0780 0002             		move.w	#$780,obGfx(a0)
00015346 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001534C 117C 0018 0014             		move.b	#$18,obActWid(a0)
00015352 117C 0004 0001             		move.b	#4,obRender(a0)
00015358 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; Sonic's top speed
0001535E 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; Sonic's acceleration
00015364 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; Sonic's deceleration
0001536A 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
00015370 11FC 0000 FE19             		move.b	#0,(Super_Sonic_flag).w
00015376                            		
00015376                            Sonic_Control:    ; Routine 2
00015376 4A38 FF8B                   		tst.b	($FFFFFF8B).w
0001537A 6700 0000                  		beq.w	@cont    
0001537E 6100                       		bsr.s    Sonic_PanCamera    ; ++add this++
00015380                             
00015380                            	@cont: 
00015380 4A78 FFFA                  		tst.w    (f_debugmode).w    ; is debug cheat enabled?
00015384 6700                       		beq.s    loc_12C58    ; if not, branch
00015386 0838 0004 F605             		btst    #bitB,(v_jpadpress1).w ; is button B pressed?
0001538C 6700                       		beq.s    loc_12C58    ; if not, branch
0001538E 31FC 0001 FE08             		move.w    #1,(v_debuguse).w ; change Sonic into a ring/item
00015394 4238 F7CC                  		clr.b    (f_lockctrl).w
00015398 4E75                       		rts
0001539A                            		
0001539A                            		include    "_incObj\Sonic PanCamera.asm"    ; ++add this++
0001539A                            ; ---------------------------------------------------------------------------
0001539A                            ; Subroutine to    horizontally pan the camera view ahead of the player
0001539A                            ; (Ported from the US version of Sonic CD's "R11A__.MMD" by Nat The Porcupine)
0001539A                            ; ---------------------------------------------------------------------------
0001539A                            
0001539A                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0001539A                            
0001539A                            
0001539A                            Sonic_PanCamera:
0001539A 3238 F7A0                          move.w    (v_camera_pan).w,d1        ; get the current camera pan value
0001539E 3028 0020                          move.w    obInertia(a0),d0        ; get sonic's inertia
000153A2 6A00                               bpl.s    @abs_inertia            ; if sonic's inertia is positive, branch ahead
000153A4 4440                               neg.w    d0                        ; otherwise, we negate it to get the absolute value
000153A6                            
000153A6                                @abs_inertia:
000153A6                            
000153A6                            ; These lines were intended to prevent the Camera from panning while
000153A6                            ; going up the very first giant ramp in Palmtree Panic Zone Act 1.
000153A6                            ; However, given that no such object exists in Sonic 1, I just went
000153A6                            ; ahead and commented these out.
000153A6                                    ;tst.b	($FFFFF5C2).w               ; is sonic going up a giant ramp in PPZ?
000153A6                                   ; bne.s	@reset_pan                   ; if not, branch
000153A6                                    ;cmpi.w 	#$1B00,obX(a0)            ; is sonic's x position lower than $1B00?
000153A6                                    ;bcs.s    @reset_pan                ; if so, branch
000153A6                            
000153A6                            ; These lines aren't part of the original routine; I added them myself.
000153A6                            ; If you've ported the Spin Dash, uncomment the following lines of code
000153A6                            ; to allow the camera to pan ahead while charging the Spin Dash:
000153A6 4A28 0039                          tst.b    $39(a0)                    ; is sonic charging up a spin dash?
000153AA 6700                               beq.s    @skip                    ; if not, branch
000153AC 0828 0000 0022                     btst    #0,obStatus(a0)            ; check the direction that sonic is facing
000153B2 6600                               bne.s    @pan_right                ; if he's facing right, pan the camera to the right
000153B4 6000                               bra.s    @pan_left                ; otherwise, pan the camera to the left
000153B6                            
000153B6                                @skip:
000153B6 0C40 0600                          cmpi.w    #$600,d0                ; is sonic's inertia greater than $600
000153BA 6500                               bcs.s    @reset_pan                ; if not, recenter the screen (if needed)
000153BC 4A68 0020                          tst.w    obInertia(a0)            ; otherwise, check the direction of inertia (by subtracting it from 0)
000153C0 6A00                               bpl.s    @pan_left                ; if the result was positive, then inertia was negative, so we pan the screen left
000153C2                            
000153C2                                @pan_right:
000153C2 5441                               addq.w    #2,d1                    ; add 2 to the pan value
000153C4 0C41 00E0                          cmpi.w    #224,d1                    ; is the pan value greater than 224 pixels?
000153C8 6500                               bcs.s    @update_pan                ; if not, branch
000153CA 323C 00E0                          move.w    #224,d1                    ; otherwise, cap the value at the maximum of 224 pixels
000153CE 6000                               bra.s    @update_pan                ; branch
000153D0                            ; ---------------------------------------------------------------------------
000153D0                            
000153D0                                @pan_left:
000153D0 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
000153D2 0C41 0060                          cmpi.w    #96,d1                    ; is the pan value less than 96 pixels?
000153D6 6400                               bcc.s    @update_pan                ; if not, branch
000153D8 323C 0060                          move.w    #96,d1                    ; otherwise, cap the value at the minimum of 96 pixels
000153DC 6000                               bra.s    @update_pan                ; branch
000153DE                            ; ---------------------------------------------------------------------------
000153DE                            
000153DE                                @reset_pan:
000153DE 0C41 00A0                          cmpi.w    #160,d1                    ; is the pan value 160 pixels?
000153E2 6700                               beq.s    @update_pan                ; if so, branch
000153E4 6400                               bcc.s    @reset_left                ; otherwise, branch if it greater than 160
000153E6                                 
000153E6                                @reset_right:
000153E6 5441                               addq.w    #2,d1                    ; add 2 to the pan value
000153E8 6000                               bra.s    @update_pan                ; branch
000153EA                            ; ---------------------------------------------------------------------------
000153EA                            
000153EA                                @reset_left:
000153EA 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
000153EC                            
000153EC                                @update_pan:
000153EC 31C1 F7A0                          move.w    d1,(v_camera_pan).w        ; update the camera pan value
000153F0 4E75                               rts                                ; return
000153F2                                 
000153F2                            ; End of function Sonic_PanCamera
000153F2                            
000153F2                            
000153F2                            ; ===========================================================================
000153F2                            
000153F2                            loc_12C58:
000153F2 4A38 F7CC                  		tst.b	(f_lockctrl).w	; are controls locked?
000153F6 6600                       		bne.s	loc_12C64	; if yes, branch
000153F8 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w ; enable joypad control
000153FE                            
000153FE                            loc_12C64:
000153FE 0838 0000 F7C8             		btst	#0,(f_lockmulti).w ; are controls locked?
00015404 6600                       		bne.s	loc_12C7E	; if yes, branch
00015406 7000                       		moveq	#0,d0
00015408 1028 0022                  		move.b	obStatus(a0),d0
0001540C 0240 0006                  		andi.w	#6,d0
00015410 323B 0000                  		move.w	Sonic_Modes(pc,d0.w),d1
00015414 4EBB 1000                  		jsr	Sonic_Modes(pc,d1.w)
00015418                            
00015418                            loc_12C7E:
00015418 6100                       		bsr.s	Sonic_Display
0001541A 6100 0000                  		bsr.w	Sonic_Super
0001541E 6100 0000                  		bsr.w	Sonic_RecordPosition
00015422 6100 0000                  		bsr.w	Sonic_Water
00015426 1178 F768 0036             		move.b	(v_anglebuffer).w,$36(a0)
0001542C 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00015432 4A38 F7C7                  		tst.b	(f_wtunnelmode).w
00015436 6700                       		beq.s	loc_12CA6
00015438 4A28 001C                  		tst.b	obAnim(a0)
0001543C 6600                       		bne.s	loc_12CA6
0001543E 1168 001D 001C             		move.b	obNextAni(a0),obAnim(a0)
00015444                            
00015444                            loc_12CA6:
00015444 6100 0000                  		bsr.w	Sonic_Animate
00015448 4A38 F7C8                  		tst.b	(f_lockmulti).w
0001544C 6B00                       		bmi.s	loc_12CB6
0001544E 4EB9 0000 0000             		jsr	(ReactToItem).l
00015454                            
00015454                            loc_12CB6:
00015454 6100 0000                  		bsr.w	Sonic_Loops
00015458 6100 0000                  		bsr.w	Sonic_LoadGfx
0001545C 4E75                       		rts	
0001545E                            ; ===========================================================================
0001545E 0000                       Sonic_Modes:	dc.w Sonic_MdNormal-Sonic_Modes
00015460 0000                       		dc.w Sonic_MdJump-Sonic_Modes
00015462 0000                       		dc.w Sonic_MdRoll-Sonic_Modes
00015464 0000                       		dc.w Sonic_MdJump2-Sonic_Modes
00015466                            ; ---------------------------------------------------------------------------
00015466                            ; Music	to play	after invincibility wears off
00015466                            ; ---------------------------------------------------------------------------
00015466                            MusicList2:
00015466 00                         		dc.b bgm_GHZ
00015467 00                         		dc.b bgm_LZ
00015468 00                         		dc.b bgm_MZ
00015469 00                         		dc.b bgm_SLZ
0001546A 00                         		dc.b bgm_SYZ
0001546B 00                         		dc.b bgm_SBZ
0001546C                            		; The ending doesn't get an entry
0001546C                            		even
0001546C                            
0001546C                            		include	"_incObj\Sonic Display.asm"
0001546C                            ; ---------------------------------------------------------------------------
0001546C                            ; Subroutine to display Sonic and set music
0001546C                            ; ---------------------------------------------------------------------------
0001546C                            
0001546C                            Sonic_Display:
0001546C 3028 0030                  		move.w    flashtime(a0),d0
00015470 6700                       		beq.s    @showAfterImage
00015472 5368 0030                  		subq.w    #1,flashtime(a0)
00015476 E648                               	lsr.w    #3,d0
00015478 6400                               	bcc.s    @chkinvincible
0001547A                            
0001547A                            	@showAfterImage:
0001547A 3028 0020                          	move.w    obInertia(a0),d0            ; get inertia
0001547E 4A40                       		tst.w    d0                    ; is inertia greater than 0?
00015480 6C00                       		bge.s    @AfterImage_Start    ; if yes, don't negate it
00015482 4440                       		neg        d0                    ; if not, negate it
00015484                            
00015484                            	@AfterImage_Start:        
00015484 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
00015488 6700                       		beq.s	@display	; if not, don't show the After Image
0001548A                            		;cmpi.w    #$900,d0	; is the sonic inertia greater than A00?
0001548A                            		;blt.s    @display	; if not, don't show the After Image
0001548A                            	
0001548A                            	@AfterImage_Start2:    
0001548A 6100 A8BA                          	bsr.w    FindFreeObj    ; search a free space in object RAM
0001548E 6600                               	bne.s    @display    ; if not have, don't load the After Image
00015490 12BC 0010                          	move.b  #$10,0(a1)        ; load after-image object
00015494 2368 0004 0004                     	move.l    obMap(a0),obMap(a1)        ; copy Sonic mappings to after-image mappings
0001549A 3368 0008 0008                     	move.w    obX(a0),obX(a1)        ; copy Sonic x-pos to after-image x-pos
000154A0 3368 000C 000C                     	move.w    obY(a0),obY(a1)    ; copy Sonic y-pos to after-image y-pos
000154A6                            
000154A6                                	@display:
000154A6 4EB9 0000 F7AC                     	jsr    (DisplaySprite).l
000154AC                            
000154AC                            	@chkinvincible:
000154AC 4A38 FE2D                  		tst.b	(v_invinc).w	; does Sonic have invincibility?
000154B0 6700                       		beq.s	@chkshoes	; if not, branch
000154B2 0C38 0001 FE19             		cmpi.b	 #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
000154B8 6700 0000                          beq		 @exit		
000154BC 4A68 0032                  		tst.w	invtime(a0)	; check	time remaining for invinciblity
000154C0 6700                       		beq.s	@chkshoes	; if no	time remains, branch
000154C2 5368 0032                  		subq.w	#1,invtime(a0)	; subtract 1 from time
000154C6 6600                       		bne.s	@chkshoes
000154C8 4A38 F7AA                  		tst.b	(f_lockscreen).w
000154CC 6600                       		bne.s	@removeinvincible
000154CE 0C78 000C FE14             		cmpi.w	#$C,(v_air).w
000154D4 6500                       		bcs.s	@removeinvincible	
000154D6 0C38 0001 F7AA             		cmpi.b	#$1,(f_lockscreen).w	
000154DC 6700                       		beq.s	@removeinvincible	
000154DE 0C38 0001 FE2E             		cmpi.b	#$1,(v_shoes).w	; does Sonic have speed shoes?
000154E4 6600                       		bne.s	@haveshoes	; if no, branch, and load regular stage music
000154E6 103C 008B                  		move.b	#$8B,d0		; if yes, load regular speed shoes music
000154EA 6000                       		bra.s	@playtune
000154EC                            		
000154EC                            @haveshoes:		
000154EC 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
000154F0                            
000154F0                            @playtune: 
000154F0 4EB9 0000 129A             		jsr	(PlaySound).l    ; play normal music
000154F6                            
000154F6                            	@removeinvincible:
000154F6 11FC 0000 FE2D             		move.b	#0,(v_invinc).w ; cancel invincibility
000154FC                            
000154FC                            	@chkshoes:
000154FC 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
00015500 6700                       		beq.s	@exit		; if not, branch
00015502 0C38 0001 FE19             		cmpi.b	 #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
00015508 6700 0000                          beq		 @exit			
0001550C 4A68 0034                  		tst.w	shoetime(a0)	; check	time remaining
00015510 6700                       		beq.s	@exit
00015512 5368 0034                  		subq.w	#1,shoetime(a0)	; subtract 1 from time
00015516 6600                       		bne.s	@exit
00015518 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
0001551E 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
00015524 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
0001552A 11FC 0000 FE2E             		move.b	#0,(v_shoes).w	; cancel speed shoes
00015530 0C38 0001 F7AA             		cmpi.b	#$1,(f_lockscreen).w	
00015536 6700                       		beq.s	@exit
00015538 0C38 0001 FE2D             		cmpi.b	#$1,($FFFFFE2D).w	; does Sonic have invincibility?
0001553E 6600                       		bne.s	@isinvincible	; if no, branch, and load regular stage music
00015540 103C 0087                  		move.b	#$87,d0		; if yes, load regular invincibility music
00015544 6000                       		bra.b	@playtune2
00015546                            @isinvincible:		
00015546 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
0001554A                            @playtune2:
0001554A 4EB9 0000 129A             		jsr	(PlaySound).l    ; play normal music
00015550                            		
00015550                            	@exit:
00015550 4E75                       		rts	
00015550 4E75                       		rts	
00015552                            		include	"_incObj\Sonic RecordPosition.asm"
00015552                            ; ---------------------------------------------------------------------------
00015552                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00015552                            ; ---------------------------------------------------------------------------
00015552                            
00015552                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015552                            
00015552                            
00015552                            Sonic_RecordPosition:
00015552 3038 F7A8                  		move.w	(v_trackpos).w,d0
00015556 43F8 CB00                  		lea	(v_tracksonic).w,a1
0001555A 43F1 0000                  		lea	(a1,d0.w),a1
0001555E 32E8 0008                  		move.w	obX(a0),(a1)+
00015562 32E8 000C                  		move.w	obY(a0),(a1)+
00015566 5838 F7A9                  		addq.b	#4,(v_trackbyte).w
0001556A 4E75                       		rts	
0001556C                            ; End of function Sonic_RecordPosition
0001556C                            ; End of function Sonic_RecordPosition
0001556C                            		include	"_incObj\Sonic Water.asm"
0001556C                            ; ---------------------------------------------------------------------------
0001556C                            ; Subroutine for Sonic when he's underwater
0001556C                            ; ---------------------------------------------------------------------------
0001556C                            
0001556C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001556C                            
0001556C                            
0001556C                            Sonic_Water:
0001556C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	;TIS is level LZ?
00015572 6600                       		bne.s	WaterTagforMZ	; if no, branch
00015574 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level LZ?
0001557A 6700                       		beq.s	Sonic_Water_LZ	; if yes, branch
0001557C                            
0001557C                            	Sonic_Water_Exit:
0001557C 4E75                       		rts	
0001557E                            ; ===========================================================================
0001557E                            
0001557E                            	Sonic_Water_LZ:
0001557E 3038 F646                  		move.w	(v_waterpos1).w,d0
00015582 B068 000C                  		cmp.w	obY(a0),d0	; is Sonic above the water?
00015586 6C00 0000                  		bge.w	Abovewater	; if yes, branch
0001558A 6000 0000                  		bra	WaterStatus
0001558E                            	WaterTagforMZ:
0001558E 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
00015594 6700 0000                  		beq.w	Abovewater	; if yes, branch
00015598                            		;move.w #$F,d0             ;TIS Length ($F = full line)
00015598                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
00015598                                ;    	lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
00015598                            	;	jsr	Palload_Loop
00015598                            	WaterStatus:
00015598 08E8 0006 0022             		bset	#6,obStatus(a0)
0001559E 6600 FFDC                  		bne.w	Sonic_Water_Exit
000155A2 6100 0000                  		bsr.w	ResumeMusic
000155A6 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000155AC 11FC 000A D340             		move.b	#id_DrownCount,(v_objspace+$340).w ; load bubbles object from Sonic's mouth
000155B2 11FC 0081 D368             		move.b	#$81,(v_objspace+$340+obSubtype).w
000155B8 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w ; change Sonic's top speed
000155BE 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w ; change Sonic's acceleration
000155C4 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w ; change Sonic's deceleration
000155CA 4A38 FE19                  		tst.b	(Super_Sonic_flag).w	; Is Sonic Super?
000155CE 6700                       		beq.s	@Skip			; If not branch
000155D0 31FC 0500 F760             		move.w	#$500,(v_sonspeedmax).w
000155D6 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w
000155DC 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w
000155E2                            @Skip		
000155E2 E0E8 0010                  		asr	obVelX(a0)
000155E6 E0E8 0012                  		asr	obVelY(a0)
000155EA E0E8 0012                  		asr	obVelY(a0)	; slow Sonic
000155EE 6700 FF8C                  		beq.w	Sonic_Water_Exit		; branch if Sonic stops moving
000155F2                            		;move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000155F2 31FC 0100 D1DC                     	move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
00015602 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
00015608 6600 0000                  		bne.w	@return
0001560C                            		
0001560C                            		
0001560C                            	@return:
0001560C 4E75                       		rts
0001560E                            ; ===========================================================================
0001560E                            
0001560E                            Abovewater:
0001560E 08A8 0006 0022             		bclr	#6,obStatus(a0)
00015614 6700 FF66                  		beq.w	Sonic_Water_Exit
00015618 6100 0000                  		bsr.w	ResumeMusic
0001561C 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
00015622                            
00015622 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
00015628 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
0001562E 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
00015634 4A38 FE19                  		tst.b	(Super_Sonic_flag).w	; Is Sonic Super?
00015638 6700                       		beq.s	@Skip			; If not branch
0001563A 31FC 0A00 F760             		move.w	#$A00,(v_sonspeedmax).w
00015640 31FC 0030 F762             		move.w	#$30,(v_sonspeedacc).w
00015646 31FC 0100 F764             		move.w	#$100,(v_sonspeeddec).w
0001564C                            @Skip		
0001564C E1E8 0012                  		asl	obVelY(a0)
00015650 6700 FF2A                  		beq.w	Sonic_Water_Exit
00015654 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
0001565A 0C68 F000 0012             		cmpi.w	#-$1000,obVelY(a0)
00015660 6E00                       		bgt.s	@belowmaxspeed
00015662 317C F000 0012             		move.w	#-$1000,obVelY(a0) ; set maximum speed on leaving water
00015668                            
00015668                            	@belowmaxspeed:
00015672                            ; End of function Sonic_Water
00015672                            ; End of function Sonic_Water
00015672                            		include "_incObj\03 Hangable Sprite.asm"
00015672                            ; ===========================================================================
00015672                            ; ----------------------------------------------------------------------------
00015672                            ; Object 03 - Invisible sprite that you can hang on to
00015672                            ; ----------------------------------------------------------------------------
00015672                            ; Sprite_2C92C:
00015672                            Obj03:
00015672 7000                       	moveq    #0,d0
00015674 1028 0024                      move.b    obRoutine(a0),d0            ;just use s1 version of this variable
00015678 323B 0000                      move.w    Obj03_Index(pc,d0.w),d1
0001567C 4EFB 1000                      jmp    Obj03_Index(pc,d1.w)
00015680                            ; ===========================================================================
00015680                            ; off_2C93A:
00015680                            Obj03_Index:
00015680 0000                           dc.w Obj03_Main-Obj03_Index
00015682 0000                               dc.w Obj03_Init-Obj03_Index
00015684                            ; ===========================================================================
00015684                            ; loc_2C93E:
00015684                            Obj03_Init:
00015684 5428 0024                      addq.b    #2,obRoutine(a0)        ;just use s1 version of this variable
00015688 117C 0004 0001                 move.b    #4,obRender(a0)    ;just use s1 version of this variable
0001568E 117C 0018 0014                 move.b    #$18,obActWid(a0)    ;just use s1 version of this variable
00015694 317C 0200 0018                 move.w    #$200,obPriority(a0)            ;just use s1 version of this variable
0001569A                            ; loc_2C954:
0001569A                            Obj03_Main:
0001569A 45E8 0030                      lea    $30(a0),a2
0001569E 43F8 D000                      lea    (v_player).w,a1 ; a1=character
000156A2 3038 F604                      move.w    (v_jpadhold1).w,d0 			;S1 has same ram address for controller as S2 just different variable name like on the line above
000156A6 6100                           bsr.s    Obj03_Check
000156A8                            ;    lea    (Sidekick).w,a1 ; a1=character  ;disabled
000156A8                            ;    addq.w    #1,a2                          ;disabled
000156A8                            ;    move.w    (Ctrl_2).w,d0                    ;disabled
000156A8                            ;    bsr.s    Obj03_Check         	;disabled
000156A8 4EF9 0000 0000             	jmp		bonu_chkdel
000156AE                            ; ===========================================================================
000156AE                            ; loc_2C972:
000156AE                            Obj03_Check:
000156AE 4A12                       		tst.b	(a2)
000156B0 6700                       		beq.s	loc_2C9A0
000156B2 0200 0070                  		andi.b	#btnABC,d0
000156B6 6700 0000                  		beq.w	Obj03_Check_End
000156BA 4238 F7C8                  		clr.b	f_lockmulti.w
000156BE 4212                       		clr.b	(a2)
000156C0 157C 0012 0002             		move.b	#$12,2(a2)
000156C6 0240 0F00                  		andi.w	#$F00,d0
000156CA 6700                       		beq.s	loc_2C954
000156CC 157C 003C 0002             		move.b	#$3C,2(a2)
000156D2                            	
000156D2                            loc_2C954:
000156D2 337C FD00 0012             		move.w	#-$300,y_vel(a1)
000156D8 6000 0000                  		bra.w	Obj03_Check_End
000156DC                            ; ===========================================================================
000156DC                            
000156DC                            loc_2C9A0:
000156DC 4A2A 0002                  		tst.b	2(a2)
000156E0 6700                       		beq.s	loc_2C972
000156E2 532A 0002                  		subq.b	#1,2(a2)
000156E6 6600 0000                  		bne.w	Obj03_Check_End
000156EA                            
000156EA                            loc_2C972:
000156EA 3029 0008                  		move.w	obX(a1),d0
000156EE 9068 0008                  		sub.w	obX(a0),d0
000156F2 0640 0018                  		addi.w	#$18,d0
000156F6 0C40 0030                  		cmpi.w	#$30,d0
000156FA 6400 0000                  		bhs.w	Obj03_Check_End
000156FE 3229 000C                  		move.w	obY(a1),d1
00015702 9268 000C                  		sub.w	obY(a0),d1
00015706 0C41 0010                  		cmpi.w	#$10,d1
0001570A 6400 0000                  		bhs.w	Obj03_Check_End
0001570E 4A38 F7C8                  		tst.b	f_lockmulti.w
00015712 6B00                       		bmi.s	Obj03_Check_End
00015714 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
0001571A 6400                       		bhs.s	Obj03_Check_End
0001571C 4A78 FFFA                  		tst.w	(f_debugmode).w
00015720 6600                       		bne.s	Obj03_Check_End
00015722 4269 0010                  		clr.w	x_vel(a1)
00015726 4269 0012                  		clr.w	y_vel(a1)
0001572A 4269 0020                  		clr.w	obInertia(a1)
0001572E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00015734 137C 0000 001C             		move.b	#id_Hang2,obAnim(a1)
0001573A 11FC 0001 F7C8             		move.b	#1,f_lockmulti.w
00015740 14BC 0001                  		move.b	#1,(a2)
00015744                            
00015744                            ; return_2CA08:
00015744                            Obj03_Check_End:
00015744 4E75                       		rts
00015744 4E75                       		rts
00015746                            
00015746                            ; ===========================================================================
00015746                            ; ---------------------------------------------------------------------------
00015746                            ; Modes	for controlling	Sonic
00015746                            ; ---------------------------------------------------------------------------
00015746                            
00015746                            Sonic_MdNormal:
00015746                            		;bsr.w	Sonic_Peelout
00015746                            		;bsr.w	Sonic_SpinDash
00015746 6100 0000                  		bsr.w	Sonic_Jump
0001574A 6100 0000                  		bsr.w	Sonic_SlopeResist
0001574E 6100 0000                  		bsr.w	Sonic_Move
00015752 6100 0000                  		bsr.w	Sonic_Roll
00015756 6100 0000                  		bsr.w	Sonic_LevelBound
0001575A 4EB9 0000 F798             		jsr	(SpeedToPos).l
00015760 6100 0000                  		bsr.w	Sonic_AnglePos
00015764 6100 0000                  		bsr.w	Sonic_SlopeRepel
00015768 4E75                       		rts	
0001576A                            
0001576A                            ; ===========================================================================
0001576A                            
0001576A                            Sonic_MdJump:
0001576A 6100 0000                  		bsr.w   Sonic_AirRoll
0001576E 6100 0000                  		bsr.w	Sonic_JumpHeight
00015772 6100 0000                  		bsr.w	Sonic_JumpDirection
00015776 6100 0000                  		bsr.w	Sonic_LevelBound
0001577A 4EB9 0000 F760             		jsr	(ObjectFall).l
00015780 0828 0006 0022             		btst	#6,obStatus(a0)
00015786 6700                       		beq.s	loc_12E5C
00015788 0468 0028 0012             		subi.w	#$28,obVelY(a0)
0001578E                            
0001578E                            loc_12E5C:
0001578E 6100 0000                  		bsr.w	Sonic_JumpAngle
00015792 6100 0000                  		bsr.w	Sonic_Floor
00015796 4E75                       		rts	
00015798                            ; ===========================================================================
00015798                            
00015798                            Sonic_MdRoll:
00015798 6100 0000                  		bsr.w	Sonic_Jump
0001579C 6100 0000                  		bsr.w	Sonic_RollRepel
000157A0 6100 0000                  		bsr.w	Sonic_RollSpeed
000157A4 6100 0000                  		bsr.w	Sonic_LevelBound
000157A8 4EB9 0000 F798             		jsr	(SpeedToPos).l
000157AE 6100 0000                  		bsr.w	Sonic_AnglePos
000157B2 6100 0000                  		bsr.w	Sonic_SlopeRepel
000157B6 4E75                       		rts	
000157B8                            ; ===========================================================================
000157B8                            
000157B8                            Sonic_MdJump2:
000157B8 6100 0000                  		bsr.w	Sonic_HomingAttack
000157BC 6100 0000                  		bsr.w	Sonic_JumpHeight
000157C0 6100 0000                  		bsr.w	Sonic_JumpDirection
000157C4 6100 0000                  		bsr.w	Sonic_LevelBound
000157C8 4EB9 0000 F760             		jsr	(ObjectFall).l
000157CE 0828 0006 0022             		btst	#6,obStatus(a0)
000157D4 6700                       		beq.s	loc_12EA6
000157D6 0468 0028 0012             		subi.w	#$28,obVelY(a0)
000157DC                            
000157DC                            loc_12EA6:
000157DC 6100 0000                  		bsr.w	Sonic_JumpAngle
000157E0 6100 0000                  		bsr.w	Sonic_Floor
000157E4 4E75                       		rts	
000157E6                            
000157E6                            		include	"_incObj\Sonic Move.asm"
000157E6                            ; ---------------------------------------------------------------------------
000157E6                            ; Subroutine to	make Sonic walk/run
000157E6                            ; ---------------------------------------------------------------------------
000157E6                            
000157E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157E6                            
000157E6                            
000157E6                            Sonic_Move:
000157E6 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
000157EA 3A38 F762                  		move.w	(v_sonspeedacc).w,d5
000157EE 3838 F764                  		move.w	(v_sonspeeddec).w,d4
000157F2 4A38 F7CA                  		tst.b	(f_jumponly).w
000157F6 6600 0000                  		bne.w	loc_12FEE
000157FA 4A68 003E                  		tst.w	$3E(a0)
000157FE 6600 0000                  		bne.w	Sonic_ResetScr
00015802 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
00015808 6700                       		beq.s	@notleft	; if not, branch
0001580A 6100 0000                  		bsr.w	Sonic_MoveLeft
0001580E                            
0001580E                            	@notleft:
0001580E 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
00015814 6700                       		beq.s	@notright	; if not, branch
00015816 6100 0000                  		bsr.w	Sonic_MoveRight
0001581A                            
0001581A                            	@notright:
0001581A 1028 0026                  		move.b	obAngle(a0),d0
0001581E 0600 0020                  		addi.b	#$20,d0
00015822 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00015826 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
0001582A 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
0001582E 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
00015832 08A8 0005 0022             		bclr	#5,obStatus(a0)
00015838 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
0001583E 0828 0003 0022             		btst	#3,obStatus(a0)
00015844 6700                       		beq.s	Sonic_Balance
00015846 7000                       		moveq	#0,d0
00015848 1028 003D                  		move.b	$3D(a0),d0
0001584C ED48                       		lsl.w	#6,d0
0001584E 43F8 D000                  		lea	(v_objspace).w,a1
00015852 43F1 0000                  		lea	(a1,d0.w),a1
00015856 4A29 0022                  		tst.b	obStatus(a1)
0001585A 6B00                       		bmi.s	Sonic_LookUp
0001585C 7200                       		moveq	#0,d1
0001585E 1229 0014                  		move.b	obActWid(a1),d1
00015862 3401                       		move.w	d1,d2
00015864 D442                       		add.w	d2,d2
00015866 5942                       		subq.w	#4,d2
00015868 D268 0008                  		add.w	obX(a0),d1
0001586C 9269 0008                  		sub.w	obX(a1),d1
00015870 0C41 0004                  		cmpi.w	#4,d1
00015874 6D00                       		blt.s	loc_12F6A
00015876 B242                       		cmp.w	d2,d1
00015878 6C00                       		bge.s	loc_12F5A
0001587A 6000                       		bra.s	Sonic_LookUp
0001587C                            ; ===========================================================================
0001587C                            
0001587C                            Sonic_Balance:
0001587C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00015882 0C41 000C                  		cmpi.w	#$C,d1
00015886 6D00                       		blt.s	Sonic_LookUp
00015888 0C28 0003 0036             		cmpi.b	#3,$36(a0)
0001588E 6600                       		bne.s	loc_12F62
00015890                            
00015890                            loc_12F5A:
00015890 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015896 6000                       		bra.s	loc_12F70
00015898                            ; ===========================================================================
00015898                            
00015898                            loc_12F62:
00015898 0C28 0003 0037             		cmpi.b	#3,$37(a0)
0001589E 6600                       		bne.s	Sonic_LookUp
000158A0                            
000158A0                            loc_12F6A:
000158A0 08E8 0000 0022             		bset	#0,obStatus(a0)
000158A6                            
000158A6                            loc_12F70:
000158A6 117C 0000 001C             		move.b	#id_Balance,obAnim(a0) ; use "balancing" animation
000158AC 6000 0000                  		bra.w	Sonic_ResetScr
000158B0                            ; ===========================================================================
000158B0                            
000158B0                            Sonic_LookUp:
000158B0 0838 0000 F602             		btst	#bitUp,(v_jpadhold2).w ; is up being pressed?
000158B6 6700                       		beq.s	Sonic_Duck	; if not, branch
000158B8 117C 0000 001C             		move.b	#id_LookUp,obAnim(a0) ; use "looking up" animation
000158BE 0C78 00C8 F73E             		cmpi.w	#$C8,(v_lookshift).w
000158C4 6700                       		beq.s	loc_12FC2
000158C6 5478 F73E                  		addq.w	#2,(v_lookshift).w
000158CA 6000                       		bra.s	loc_12FC2
000158CC                            ; ===========================================================================
000158CC                            
000158CC                            Sonic_Duck:
000158CC 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
000158D2 6700                       		beq.s	Sonic_ResetScr	; if not, branch
000158D4 117C 0000 001C             		move.b	#id_Duck,obAnim(a0) ; use "ducking" animation
000158DA 0C78 0008 F73E             		cmpi.w	#8,(v_lookshift).w
000158E0 6700                       		beq.s	loc_12FC2
000158E2 5578 F73E                  		subq.w	#2,(v_lookshift).w
000158E6 6000                       		bra.s	loc_12FC2
000158E8                            ; =============================================
000158E8                            ; ===========================================================================
000158E8                            
000158E8                            Sonic_ResetScr:
000158E8 11FC 0000 C903             		move.b	#0,($FFFFC903).w
000158EE                            		
000158EE                            Sonic_ResetScr_Part2:
000158EE 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000158F4 6700                       		beq.s	loc_12FC2	; if yes, branch
000158F6 6400                       		bcc.s	loc_12FBE
000158F8 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000158FC                            
000158FC                            loc_12FBE:
000158FC 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00015900                            
00015900                            loc_12FC2:
00015900 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015904 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	pressed?
00015908 6600                       		bne.s	loc_12FEE	; if yes, branch
0001590A 3028 0020                  		move.w	obInertia(a0),d0
0001590E 6700                       		beq.s	loc_12FEE
00015910 6B00                       		bmi.s	loc_12FE2
00015912 9045                       		sub.w	d5,d0
00015914 6400                       		bcc.s	loc_12FDC
00015916 303C 0000                  		move.w	#0,d0
0001591A                            
0001591A                            loc_12FDC:
0001591A 3140 0020                  		move.w	d0,obInertia(a0)
0001591E 6000                       		bra.s	loc_12FEE
00015920                            ; ===========================================================================
00015920                            
00015920                            loc_12FE2:
00015920 D045                       		add.w	d5,d0
00015922 6400                       		bcc.s	loc_12FEA
00015924 303C 0000                  		move.w	#0,d0
00015928                            
00015928                            loc_12FEA:
00015928 3140 0020                  		move.w	d0,obInertia(a0)
0001592C                            
0001592C                            loc_12FEE:
0001592C 4A28 0039                  		tst.b	$39(a0) 	;Peelout
00015930 6600                       		bne.s	loc_1300C 	;Peelout
00015932 1028 0026                  		move.b	obAngle(a0),d0
00015936 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001593C C3E8 0020                  		muls.w	obInertia(a0),d1
00015940 E081                       		asr.l	#8,d1
00015942 3141 0010                  		move.w	d1,obVelX(a0)
00015946 C1E8 0020                  		muls.w	obInertia(a0),d0
0001594A E080                       		asr.l	#8,d0
0001594C 3140 0012                  		move.w	d0,obVelY(a0)
00015950                            
00015950                            loc_1300C:
00015950 1028 0026                  		move.b	obAngle(a0),d0
00015954 0600 0040                  		addi.b	#$40,d0
00015958 6B00                       		bmi.s	locret_1307C
0001595A 123C 0040                  		move.b	#$40,d1
0001595E 4A68 0020                  		tst.w	obInertia(a0)
00015962 6700                       		beq.s	locret_1307C
00015964 6B00                       		bmi.s	loc_13024
00015966 4441                       		neg.w	d1
00015968                            
00015968                            loc_13024:
00015968 1028 0026                  		move.b	obAngle(a0),d0
0001596C D001                       		add.b	d1,d0
0001596E 3F00                       		move.w	d0,-(sp)
00015970 6100 0000                  		bsr.w	Sonic_WalkSpeed
00015974 301F                       		move.w	(sp)+,d0
00015976 4A41                       		tst.w	d1
00015978 6A00                       		bpl.s	locret_1307C
0001597A E141                       		asl.w	#8,d1
0001597C 0600 0020                  		addi.b	#$20,d0
00015980 0200 00C0                  		andi.b	#$C0,d0
00015984 6700                       		beq.s	loc_13078
00015986 0C00 0040                  		cmpi.b	#$40,d0
0001598A 6700                       		beq.s	loc_13066
0001598C 0C00 0080                  		cmpi.b	#$80,d0
00015990 6700                       		beq.s	loc_13060
00015992 D368 0010                  		add.w	d1,obVelX(a0)
00015996 08E8 0005 0022             		bset	#5,obStatus(a0)
0001599C 317C 0000 0020             		move.w	#0,obInertia(a0)
000159A2 4E75                       		rts	
000159A4                            ; ===========================================================================
000159A4                            
000159A4                            loc_13060:
000159A4 9368 0012                  		sub.w	d1,obVelY(a0)
000159A8 4E75                       		rts	
000159AA                            ; ===========================================================================
000159AA                            
000159AA                            loc_13066:
000159AA 9368 0010                  		sub.w	d1,obVelX(a0)
000159AE 08E8 0005 0022             		bset	#5,obStatus(a0)
000159B4 317C 0000 0020             		move.w	#0,obInertia(a0)
000159BA 4E75                       		rts	
000159BC                            ; ===========================================================================
000159BC                            
000159BC                            loc_13078:
000159BC D368 0012                  		add.w	d1,obVelY(a0)
000159C0                            
000159C0                            locret_1307C:
000159C0 4E75                       		rts	
000159C2                            ; End of function Sonic_Move
000159C2                            
000159C2                            
000159C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159C2                            
000159C2                            
000159C2                            Sonic_MoveLeft:
000159C2 3028 0020                  		move.w	obInertia(a0),d0
000159C6 6700                       		beq.s	loc_13086
000159C8 6A00                       		bpl.s	loc_130B2
000159CA                            
000159CA                            loc_13086:
000159CA 08E8 0000 0022             		bset	#0,$22(a0)
000159D0 6600                       		bne.s	loc_1309A
000159D2 08A8 0005 0022             		bclr	#5,$22(a0)
000159D8 117C 0001 001D             		move.b	#1,$1D(a0)
000159DE                            
000159DE                            loc_1309A:
000159DE 9045                       		sub.w	d5,d0
000159E0 3206                       		move.w	d6,d1
000159E2 4441                       		neg.w	d1
000159E4 B041                       		cmp.w	d1,d0
000159E6 6E00                       		bgt.s	loc_130A6
000159E8 D045                       		add.w	d5,d0
000159EA B041                       		cmp.w	d1,d0
000159EC 6F00                       		ble.s	loc_130A6
000159EE 3001                       		move.w	d1,d0
000159F0                            
000159F0                            loc_130A6:
000159F0 3140 0020                  		move.w	d0,obInertia(a0)
000159F4 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
000159FA 4E75                       		rts
000159FC                            ; ===========================================================================
000159FC                            
000159FC                            loc_130B2:
000159FC 9044                       		sub.w	d4,d0
000159FE 6400                       		bcc.s	loc_130BA
00015A00 303C FF80                  		move.w	#-$80,d0
00015A04                            
00015A04                            loc_130BA:
00015A04 3140 0020                  		move.w	d0,obInertia(a0)
00015A08 1228 0026                  		move.b	obAngle(a0),d1
00015A0C 0601 0020                  		addi.b	#$20,d1
00015A10 0201 00C0                  		andi.b	#$C0,d1
00015A14 6600                       		bne.s	locret_130E8
00015A16 0C40 0400                  		cmpi.w	#$400,d0
00015A1A 6D00                       		blt.s	locret_130E8
00015A1C 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015A22 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015A32 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015A38 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015A3E                            		
00015A3E                            locret_130E8:
00015A3E 4E75                       		rts	
00015A40                            ; End of function Sonic_MoveLeft
00015A40                            
00015A40                            
00015A40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A40                            
00015A40                            
00015A40                            Sonic_MoveRight:
00015A40 3028 0020                  		move.w	obInertia(a0),d0
00015A44 6B00                       		bmi.s	loc_13118
00015A46 08A8 0000 0022             		bclr	#0,$22(a0)
00015A4C 6700                       		beq.s	loc_13104
00015A4E 08A8 0005 0022             		bclr	#5,$22(a0)
00015A54 117C 0001 001D             		move.b	#1,$1D(a0)
00015A5A                            
00015A5A                            loc_13104:
00015A5A D045                       		add.w	d5,d0
00015A5C B046                       		cmp.w	d6,d0
00015A5E 6D00                       		blt.s	loc_1310C
00015A60 9045                       		sub.w	d5,d0
00015A62 B046                       		cmp.w	d6,d0
00015A64 6C00                       		bge.s	loc_1310C
00015A66 3006                       		move.w	d6,d0
00015A68                            
00015A68                            loc_1310C:
00015A68 3140 0020                  		move.w	d0,obInertia(a0)
00015A6C 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00015A72 4E75                       		rts
00015A74                            ; ===========================================================================
00015A74                            
00015A74                            loc_13118:
00015A74 D044                       		add.w	d4,d0
00015A76 6400                       		bcc.s	loc_13120
00015A78 303C 0080                  		move.w	#$80,d0
00015A7C                            
00015A7C                            loc_13120:
00015A7C 3140 0020                  		move.w	d0,obInertia(a0)
00015A80 1228 0026                  		move.b	obAngle(a0),d1
00015A84 0601 0020                  		addi.b	#$20,d1
00015A88 0201 00C0                  		andi.b	#$C0,d1
00015A8C 6600                       		bne.s	locret_1314E
00015A8E 0C40 FC00                  		cmpi.w	#-$400,d0
00015A92 6E00                       		bgt.s	locret_1314E
00015A94 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015A9A 08E8 0000 0022             		bset	#0,obStatus(a0)
00015AAA 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015AB0 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015AB6                            		
00015AB6                            locret_1314E:
00015AB6 4E75                       		rts	
00015AB8                            ; End of function Sonic_MoveRight
00015AB8                            ; End of function Sonic_MoveRight
00015AB8                            		include	"_incObj\Sonic RollSpeed.asm"
00015AB8                            ; ---------------------------------------------------------------------------
00015AB8                            ; Subroutine to	change Sonic's speed as he rolls
00015AB8                            ; ---------------------------------------------------------------------------
00015AB8                            
00015AB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AB8                            
00015AB8                            
00015AB8                            Sonic_RollSpeed:
00015AB8 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
00015ABC E346                       		asl.w	#1,d6
00015ABE 7A06                       		moveq	#6,d5	; natural roll deceleration = 1/2 normal acceleration
00015AC0 3838 F764                  		move.w	(v_sonspeeddec).w,d4
00015AC4 E444                       		asr.w	#2,d4
00015AC6 4A38 F7CA                  		tst.b	(f_jumponly).w
00015ACA 6600 0000                  		bne.w	loc_131CC
00015ACE 4A68 003E                  		tst.w	$3E(a0)
00015AD2 6600                       		bne.s	@notright
00015AD4 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
00015ADA 6700                       		beq.s	@notleft	; if not, branch
00015ADC 6100 0000                  		bsr.w	Sonic_RollLeft
00015AE0                            
00015AE0                            	@notleft:
00015AE0 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
00015AE6 6700                       		beq.s	@notright	; if not, branch
00015AE8 6100 0000                  		bsr.w	Sonic_RollRight
00015AEC                            
00015AEC                            	@notright:
00015AEC 3028 0020                  		move.w	obInertia(a0),d0
00015AF0 6700                       		beq.s	loc_131AA
00015AF2 6B00                       		bmi.s	loc_1319E
00015AF4 9045                       		sub.w	d5,d0
00015AF6 6400                       		bcc.s	loc_13198
00015AF8 303C 0000                  		move.w	#0,d0
00015AFC                            
00015AFC                            loc_13198:
00015AFC 3140 0020                  		move.w	d0,obInertia(a0)
00015B00 6000                       		bra.s	loc_131AA
00015B02                            ; ===========================================================================
00015B02                            
00015B02                            loc_1319E:
00015B02 D045                       		add.w	d5,d0
00015B04 6400                       		bcc.s	loc_131A6
00015B06 303C 0000                  		move.w	#0,d0
00015B0A                            
00015B0A                            loc_131A6:
00015B0A 3140 0020                  		move.w	d0,obInertia(a0)
00015B0E                            
00015B0E                            loc_131AA:
00015B0E 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
00015B12 6600                       		bne.s	loc_131CC	; if yes, branch
00015B14 08A8 0002 0022             		bclr	#2,obStatus(a0)
00015B1A 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015B20 117C 0009 0017             		move.b	#9,obWidth(a0)
00015B26 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
00015B2C 5B68 000C                  		subq.w	#5,obY(a0)
00015B30                            
00015B30                            loc_131CC:
00015B30 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
00015B36 6700                       		beq.s	@cont2
00015B38 6400                       		bcc.s	@cont1
00015B3A 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015B3E                            		
00015B3E                            @cont1:
00015B3E 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015B42                            		
00015B42                            @cont2:
00015B42 1028 0026                  		move.b	obAngle(a0),d0
00015B46 4EB9 0000 3CCA             		jsr	(CalcSine).l
00015B4C C1E8 0020                  		muls.w	obInertia(a0),d0
00015B50 E080                       		asr.l	#8,d0
00015B52 3140 0012                  		move.w	d0,obVelY(a0)
00015B56 C3E8 0020                  		muls.w	obInertia(a0),d1
00015B5A E081                       		asr.l	#8,d1
00015B5C 0C41 1000                  		cmpi.w	#$1000,d1
00015B60 6F00                       		ble.s	loc_131F0
00015B62 323C 1000                  		move.w	#$1000,d1
00015B66                            
00015B66                            loc_131F0:
00015B66 0C41 F000                  		cmpi.w	#-$1000,d1
00015B6A 6C00                       		bge.s	loc_131FA
00015B6C 323C F000                  		move.w	#-$1000,d1
00015B70                            
00015B70                            loc_131FA:
00015B70 3141 0010                  		move.w	d1,obVelX(a0)
00015B74 6000 FDDA                  		bra.w	loc_1300C
00015B78                            ; End of function Sonic_RollSpeed
00015B78                            
00015B78                            
00015B78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B78                            
00015B78                            
00015B78                            Sonic_RollLeft:
00015B78 3028 0020                  		move.w	obInertia(a0),d0
00015B7C 6700                       		beq.s	loc_1320A
00015B7E 6A00                       		bpl.s	loc_13218
00015B80                            
00015B80                            loc_1320A:
00015B80 08E8 0000 0022             		bset	#0,obStatus(a0)
00015B86 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015B8C 4E75                       		rts	
00015B8E                            ; ===========================================================================
00015B8E                            
00015B8E                            loc_13218:
00015B8E 9044                       		sub.w	d4,d0
00015B90 6400                       		bcc.s	loc_13220
00015B92 303C FF80                  		move.w	#-$80,d0
00015B96                            
00015B96                            loc_13220:
00015B96 3140 0020                  		move.w	d0,obInertia(a0)
00015B9A 4E75                       		rts	
00015B9C                            ; End of function Sonic_RollLeft
00015B9C                            
00015B9C                            
00015B9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B9C                            
00015B9C                            
00015B9C                            Sonic_RollRight:
00015B9C 3028 0020                  		move.w	obInertia(a0),d0
00015BA0 6B00                       		bmi.s	loc_1323A
00015BA2 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015BA8 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015BAE 4E75                       		rts	
00015BB0                            ; ===========================================================================
00015BB0                            
00015BB0                            loc_1323A:
00015BB0 D044                       		add.w	d4,d0
00015BB2 6400                       		bcc.s	loc_13242
00015BB4 303C 0080                  		move.w	#$80,d0
00015BB8                            
00015BB8                            loc_13242:
00015BB8 3140 0020                  		move.w	d0,obInertia(a0)
00015BBC 4E75                       		rts	
00015BBE                            ; End of function Sonic_RollRight
00015BBE                            ; End of function Sonic_RollRight
00015BBE                            		include	"_incObj\Sonic JumpDirection.asm"
00015BBE                            ; ---------------------------------------------------------------------------
00015BBE                            ; Subroutine to	change Sonic's direction while jumping
00015BBE                            ; ---------------------------------------------------------------------------
00015BBE                            
00015BBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BBE                            
00015BBE                            
00015BBE                            Sonic_JumpDirection:
00015BBE 3C38 F760                  		move.w	($FFFFF760).w,d6
00015BC2 3A38 F762                  		move.w	($FFFFF762).w,d5
00015BC6 E345                       		asl.w	#1,d5
00015BC8 3028 0010                  		move.w	$10(a0),d0	
00015BCC 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
00015BD2 6700                       		beq.s	loc_13278; if not, branch	
00015BD4 08E8 0000 0022             		bset	#0,$22(a0)	
00015BDA 9045                       		sub.w	d5,d0	
00015BDC 3206                       		move.w	d6,d1	
00015BDE 4441                       		neg.w	d1	
00015BE0 B041                       		cmp.w	d1,d0	
00015BE2 6E00                       		bgt.s	loc_13278	
00015BE4 D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
00015BE6 B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
00015BE8 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
00015BEA 3001                       		move.w	d1,d0
00015BEC                            
00015BEC                            loc_13278:
00015BEC 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00015BF2 6700                       		beq.s	Obj01_JumpMove; if not, branch	
00015BF4 08A8 0000 0022             		bclr	#0,$22(a0)	
00015BFA D045                       		add.w	d5,d0	
00015BFC B046                       		cmp.w	d6,d0	
00015BFE 6D00                       		blt.s	Obj01_JumpMove
00015C00 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00015C02 B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
00015C04 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
00015C06 3006                       		move.w	d6,d0
00015C08                            
00015C08                            Obj01_JumpMove:
00015C08 3140 0010                  		move.w	d0,obVelX(a0)	; change Sonic's horizontal speed
00015C0C                            
00015C0C                            Obj01_ResetScr2:
00015C0C 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w ; is the screen in its default position?
00015C12 6700                       		beq.s	loc_132A4	; if yes, branch
00015C14 6400                       		bcc.s	loc_132A0
00015C16 5878 F73E                  		addq.w	#4,(v_lookshift).w
00015C1A                            
00015C1A                            loc_132A0:
00015C1A 5578 F73E                  		subq.w	#2,(v_lookshift).w
00015C1E                            
00015C1E                            loc_132A4:
00015C1E 0C68 FC00 0012             		cmpi.w	#-$400,obVelY(a0) ; is Sonic moving faster than -$400 upwards?
00015C24 6500                       		bcs.s	locret_132D2	; if yes, branch
00015C26 3028 0010                  		move.w	obVelX(a0),d0
00015C2A 3200                       		move.w	d0,d1
00015C2C EA41                       		asr.w	#5,d1
00015C2E 6700                       		beq.s	locret_132D2
00015C30 6B00                       		bmi.s	loc_132C6
00015C32 9041                       		sub.w	d1,d0
00015C34 6400                       		bcc.s	loc_132C0
00015C36 303C 0000                  		move.w	#0,d0
00015C3A                            
00015C3A                            loc_132C0:
00015C3A 3140 0010                  		move.w	d0,obVelX(a0)
00015C3E 4E75                       		rts	
00015C40                            ; ===========================================================================
00015C40                            
00015C40                            loc_132C6:
00015C40 9041                       		sub.w	d1,d0
00015C42 6500                       		bcs.s	loc_132CE
00015C44 303C 0000                  		move.w	#0,d0
00015C48                            
00015C48                            loc_132CE:
00015C48 3140 0010                  		move.w	d0,obVelX(a0)
00015C4C                            
00015C4C                            locret_132D2:
00015C4C 4E75                       		rts	
00015C4E                            ; End of function Sonic_JumpDirection
00015C4E                            ; End of function Sonic_JumpDirection
00015C4E                            		include "_incObj\Sonic Peelout.asm"
00015C4E                            ; ---------------------------------------------------------------------------
00015C4E                            ; Subroutine to make Sonic perform a peelout
00015C4E                            ; ---------------------------------------------------------------------------
00015C4E                            ; If you use this makes sure to search for ;Peelout in Sonic1.asm
00015C4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C4E                            
00015C4E                            Sonic_Peelout:
00015C4E 0828 0001 0039             		btst	#1,$39(a0)
00015C54 6600                       		bne.s	SCDPeelout_Launch
00015C56 0C28 0007 001C             		cmpi.b	#7,$1C(a0) ;check to see if your looking up
00015C5C 6600                       		bne.s	@return
00015C5E 1038 F603                  		move.b	($FFFFF603).w,d0
00015C62 0200 0070                  		andi.b	#%01110000,d0
00015C66 6700 0000                  		beq.w	@return
00015C6A 117C 0001 001C             		move.b	#1,$1C(a0)
00015C70 317C 0000 003A             		move.w	#0,$3A(a0)
00015C76 303C 00D2                  		move.w	#$D2,d0
00015C7A 4EB9 0000 12A0             		jsr	(PlaySound_Special).l 		; Play peelout charge sound
00015C80                            	;	sfx 	sfx_PeeloutCharge 		; These are if you use AMPS
00015C80 588F                       		addq.l	#4,sp
00015C82 08E8 0001 0039             		bset	#1,$39(a0)
00015C88                            		
00015C88 4268 0020                  		clr.w	obInertia(a0)
00015C8C                             
00015C8C 6100 0000                  		bsr.w	Sonic_LevelBound
00015C90 6100 0000                  		bsr.w	Sonic_AnglePos
00015C94                             
00015C94                            	@return:
00015C94 4E75                       		rts	
00015C96                            ; ---------------------------------------------------------------------------
00015C96                             
00015C96                            SCDPeelout_Launch:
00015C96 0828 0001 0039             		btst	#1,$39(a0)
00015C9C 1038 F602                  		move.b	($FFFFF602).w,d0
00015CA0 0800 0000                  		btst	#0,d0
00015CA4 6600 0000                  		bne.w	SCDPeelout_Charge
00015CA8 08A8 0001 0039             		bclr	#1,$39(a0)	; stop Dashing
00015CAE 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)	; have we been charging long enough?
00015CB4 6600 0000                  		bne.w	SCDPeelout_Stop_Sound
00015CB8 117C 0000 001C             		move.b	#0,$1C(a0)	; launches here (peelout sprites)
00015CBE 317C 0001 0010             		move.w	#1,$10(a0)	; force X speed to nonzero for camera lag's benefit
00015CC4 3028 0020                  		move.w	obInertia(a0),d0
00015CC8 0440 0800                  		subi.w	#$800,d0
00015CCC D040                       		add.w	d0,d0
00015CCE 0240 1F00                  		andi.w	#$1F00,d0
00015CD2 4440                       		neg.w	d0
00015CD4 0640 2000                  		addi.w	#$2000,d0
00015CD8 31C0 C904                  		move.w	d0,($FFFFC904).w
00015CDC 0828 0000 0022             		btst	#0,$22(a0)
00015CE2 6700                       		beq.s	@dontflip
00015CE4 4468 0020                  		neg.w	obInertia(a0)
00015CE8                             
00015CE8                            @dontflip:
00015CE8 08A8 0007 0022             		bclr	#7,$22(a0)
00015CEE 303C 00D3                  		move.w	#$D3,d0
00015CF2 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
00015CF8                            	;	sfx 	sfx_PeeloutRelease
00015CF8 1028 0026                  		move.b	obAngle(a0),d0
00015CFC 4EB9 0000 3CCA             		jsr	(CalcSine).l
00015D02 C3E8 0020                  		muls.w	obInertia(a0),d1
00015D06 E081                       		asr.l	#8,d1
00015D08 3141 0010                  		move.w	d1,obVelX(a0)
00015D0C C1E8 0020                  		muls.w	obInertia(a0),d0
00015D10 E080                       		asr.l	#8,d0
00015D12 3140 0012                  		move.w	d0,obVelY(a0)	
00015D16 6000 0000                  		bra.w	SCDPeelout_ResetScr
00015D1A                            ; ---------------------------------------------------------------------------
00015D1A                             
00015D1A                            SCDPeelout_Charge:				; If still charging the dash...
00015D1A 3238 F760                  		move.w	($FFFFF760).w,d1	; get top peelout speed
00015D1E 3401                       		move.w	d1,d2
00015D20 D241                       		add.w	d1,d1
00015D22 4A38 FE2E                  		tst.b   ($FFFFFE2E).w 		; test for speed shoes
00015D26 6700                       		beq.s	@noshoes
00015D28 E242                       		asr.w	#1,d2
00015D2A 9242                       		sub.w	d2,d1
00015D2C                            
00015D2C                            @noshoes:
00015D2C 0668 0064 0020             		addi.w	#$64,obInertia(a0)		; increment speed
00015D32 B268 0020                  		cmp.w	obInertia(a0),d1
00015D36 6E00                       		bgt.s	@inctimer
00015D38 3141 0020                  		move.w	d1,obInertia(a0)
00015D3C                            
00015D3C                            @inctimer:
00015D3C 5228 003A                  		addq.b	#1,$3A(a0)		; increment timer
00015D40 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)
00015D46 6500                       		bcs.s	SCDPeelout_ResetScr
00015D48 117C 001E 003A             		move.b	#$1E,$3A(a0)
00015D4E 4EF9 0000 0000             		jmp 	SCDPeelout_ResetScr
00015D54                            		
00015D54                            SCDPeelout_Stop_Sound:
00015D54 303C 00D4                  		move.w	#$D4,d0
00015D58 4EB9 0000 12A0             		jsr		(PlaySound_Special).l
00015D5E                            	;	sfx 	sfx_PeeloutStop
00015D5E 4268 0020                  		clr.w	obInertia(a0)
00015D62                            
00015D62                            SCDPeelout_ResetScr:
00015D62 588F                       		addq.l	#4,sp			; increase stack ptr ; was 4
00015D64 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00015D6A 6700                       		beq.s	@finish
00015D6C 6400                       		bcc.s	@skip
00015D6E 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015D72                             
00015D72                            	@skip:
00015D72 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015D76                             
00015D76                            	@finish:
00015D76 6100 0000                  		bsr.w	Sonic_LevelBound
00015D7A 6100 0000                  		bsr.w	Sonic_AnglePos
00015D7E 4E75                       		rts
00015D80                            		
00015D80                            		
00015D80                            		include "_incObj\Sonic Spindash.asm"
00015D80                            ; ---------------------------------------------------------------------------
00015D80                            ; Subroutine to make Sonic perform a spindash
00015D80                            ; ---------------------------------------------------------------------------
00015D80                             
00015D80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D80                             
00015D80                             
00015D80                            Sonic_SpinDash:
00015D80 4A28 0039                  		tst.b	f_spindash(a0)			; already Spin Dashing?
00015D84 6600                       		bne.s	loc2_1AC8E		; if set, branch
00015D86 0C28 0000 001C             		cmpi.b	#id_duck,obAnim(a0)		; is anim duck
00015D8C 6600                       		bne.s	locret2_1AC8C		; if not, return
00015D8E 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015D92 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
00015D96 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
00015D9A 117C 0000 001C             		move.b	#id_spindash,obAnim(a0)		; set Spin Dash anim (9 in s2)
00015DA0 303C 00D5                  		move.w	#$D5,d0			; spin sound ($E0 in s2)
00015DA4 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play spin sound
00015DAA 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015DAC 117C 0001 0039             		move.b	#1,f_spindash(a0)		; set Spin Dash flag
00015DB2 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
00015DB8                            		;cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
00015DB8                            		;bcs.s	loc2_1AC84		; ??? branch if carry
00015DB8 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
00015DBE                            						; the smoke/dust object
00015DBE                            loc2_1AC84:
00015DBE 6100 0000                  		bsr.w	Sonic_LevelBound
00015DC2 6100 0000                  		bsr.w	Sonic_AnglePos
00015DC6                            
00015DC6                            locret2_1AC8C:
00015DC6 4E75                       		rts	
00015DC8                            ; ---------------------------------------------------------------------------
00015DC8                            
00015DC8                            loc2_1AC8E:	
00015DC8 117C 001F 001C             		move.b	#$1F,$1C(a0)
00015DCE 1038 F602                  		move.b	(v_jpadhold2).w,d0	; read controller
00015DD2 0800 0001                  		btst	#1,d0			; check down button
00015DD6 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
00015DDA 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
00015DE0 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
00015DE6 117C 0000 001C             		move.b	#id_roll,obAnim(a0)		; set animation to roll
00015DEC 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
00015DF0 117C 0000 0039             		move.b	#0,f_spindash(a0)		; clear Spin Dash flag
00015DF6 7000                       		moveq	#0,d0
00015DF8 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
00015DFC D040                       		add.w	d0,d0			; double it
00015DFE 317B 0000 0020             		move.w	Dash_Speeds(pc,d0.w),obInertia(a0) ; get normal speed
00015E04 3028 0020                  		move.w	obInertia(a0),d0		; get inertia
00015E08 0440 0800                  		subi.w	#$800,d0		; subtract $800
00015E0C D040                       		add.w	d0,d0			; double it
00015E0E 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
00015E12 4440                       		neg.w	d0			; negate it
00015E14 0640 2000                  		addi.w	#$2000,d0		; add $2000
00015E18 31C0 C904                  		move.w	d0,($FFFFC904).w	; move to $EED0
00015E1C 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
00015E22 6700                       		beq.s	loc2_1ACF4		; if not, branch
00015E24 4468 0020                  		neg.w	obInertia(a0)			; negate inertia
00015E28                            
00015E28                            loc2_1ACF4:
00015E28 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
00015E2E 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
00015E34 303C 00BC                  		move.w	#$BC,d0			; spin release sound
00015E38 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play it!
00015E3E 1028 0026                  		move.b	obAngle(a0),d0
00015E42 4EB9 0000 3CCA             		jsr	(CalcSine).l
00015E48 C3E8 0020                  		muls.w	obInertia(a0),d1
00015E4C E081                       		asr.l	#8,d1
00015E4E 3141 0010                  		move.w	d1,obVelX(a0)
00015E52 C1E8 0020                  		muls.w	obInertia(a0),d0
00015E56 E080                       		asr.l	#8,d0
00015E58 3140 0012                  		move.w	d0,obVelY(a0)
00015E5C                            	
00015E5C 6000                       		bra.s	loc2_1AD78
00015E5E                            ; ===========================================================================
00015E5E                            Dash_Speeds:
00015E5E 0700                       		dc.w  $700		; 0
00015E60 0780                       		dc.w  $780		; 1
00015E62 0800                       		dc.w  $800		; 2
00015E64 0880                       		dc.w  $880		; 3
00015E66 0900                       		dc.w  $900		; 4
00015E68 0980                       		dc.w  $980		; 5
00015E6A 0A00                       		dc.w  $A00		; 6
00015E6C 0A80                       		dc.w  $A80		; 7
00015E6E 0B00                       		dc.w  $B00		; 8
00015E70                            ; ===========================================================================
00015E70                            
00015E70                            loc2_1AD30:				; If still charging the dash...
00015E70 4A68 003A                  		tst.w	$3A(a0)		; check charge count
00015E74 6700                       		beq.s	loc2_1AD48	; if zero, branch
00015E76 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
00015E7A EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
00015E7C 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
00015E80 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
00015E82 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
00015E88                            
00015E88                            loc2_1AD48:
00015E88 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015E8C 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
00015E90 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
00015E94 317C 1F00 001C             		move.w	#$1F00,obAnim(a0)	; reset spdsh animation
00015E9A 303C 00D5                  		move.w	#$D5,d0			; was $E0 in sonic 2
00015E9E 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w		; Set the Spin Dash dust animation to $2.
00015EA4 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play charge sound
00015EAA 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
00015EB0 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
00015EB6 6500                       		bcs.s	loc2_1AD78		; if not, then branch
00015EB8 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
00015EBE                            
00015EBE                            loc2_1AD78:
00015EBE 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015EC0 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w	; $EED8 only ever seems
00015EC6 6700                       		beq.s	loc2_1AD8C		; to be used in Spin Dash
00015EC8 6400                       		bcc.s	loc2_1AD88
00015ECA 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015ECE                            
00015ECE                            loc2_1AD88:
00015ECE 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015ED2                            
00015ED2                            loc2_1AD8C:
00015ED2 6100 0000                  		bsr.w	Sonic_LevelBound
00015ED6 6100 0000                  		bsr.w	Sonic_AnglePos
00015EDA                            		;move.w	#$60,(v_lookshift).w	; reset looking up/down
00015EDA 4E75                       		rts
00015EDC                            ; End of subroutine Sonic_SpinDash
00015EDC                            ; End of subroutine Sonic_SpinDash
00015EDC                            		include	"_incObj\Sonic HomingAttack.asm"
00015EDC                            ; ===========================================================================
00015EDC                            ; ---------------------------------------------------------------------------
00015EDC                            ; Subroutine to perform Homing Attack
00015EDC                            ; ---------------------------------------------------------------------------
00015EDC                            
00015EDC                            ;HomingAttackType = 1 ; 0 is Sonic Winter Adventures, 1 is Sonic and the Mystic Gems
00015EDC                            
00015EDC                            Sonic_HomingAttack:     
00015EDC 4A38 F5C9                  		tst.b	(v_gshield)
00015EE0 6700                       		beq.s	@Return2
00015EE2 0C38 0002 F5CD             		cmpi.b	#2,(v_homingattack).w	; already Homing?
00015EE8 6700                       		beq.s	@Homing_Process		; if yes, branch
00015EEA 0238 0070 F603             		andi.b	#btnABC,(v_jpadpress2).w	; is A, B or C pressed?
00015EF0 6600                       		bne.s	@Homing_Perform
00015EF2 4E75                       		rts
00015EF4                            	@Return2:
00015EF4 4E75                       		rts
00015EF6                            ; ---------------------------------------------------------------------------
00015EF6                            @Homing_Process:
00015EF6 5328 001E                  		subq.b	#1,obTimeFrame(a0)		; is timer over?
00015EFA 6600                       		bne.s	@SetSpeeds		; if not, branch
00015EFC 4238 F5CD                  		clr.b	(v_homingattack).w
00015F00 4E75                       		rts
00015F02                            
00015F02                            	@SetSpeeds:
00015F02 3268 003A                  		movea.w	$3A(a0),a1		; load object to follow
00015F06                            
00015F06                            			
00015F06                            
00015F06 3229 000C                  		move.w	obY(a1),d1
00015F0A 9268 000C                  		sub.w	obY(a0),d1		; d1 -> Ydist
00015F0E 3429 0008                  		move.w	obX(a1),d2
00015F12 9468 0008                  		sub.w	obX(a0),d2		; d2 -> Xdist
00015F16 4EB9 0000 3F5C                             jsr     (CalcAngle).l		; Calcuate Angle
00015F1C 4EB9 0000 3CCA                             jsr     (CalcSine).l		; Get Sine
00015F22 363C 0000                                  move.w	#$0,d3		; d3 -> Homing Attack Speed
00015F26 363C 0A00                                  move.w	#$A00,d3		; d3 -> Homing Attack Speed
00015F2A C1C3                       		muls.w	d3,d0
00015F2C C3C3                       		muls.w	d3,d1
00015F2E E080                       		asr.l	#8,d0
00015F30 E081                       		asr.l	#8,d1
00015F32 3141 0012                                  move.w  d1,obVelY(a0)		; set speed
00015F36 3140 0010                                  move.w  d0,obVelX(a0)		; set speed
00015F3A 3140 0020                  		move.w	d0,obInertia(a0)
00015F3E 4E75                       		rts
00015F40                            
00015F40                            ; ---------------------------------------------------------------------------
00015F40                            @Homing_Perform:
00015F40 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015F46 76FF                       		moveq	#-1,d3			; d3 will contain the direct distance for current d4,d5 (Piphagor yay)
00015F48 78FF                       		moveq	#-1,d4			; d4 will contain the shortest X-dist
00015F4A 7AFF                       		moveq	#-1,d5			; d5 will contain the shortest Y-dist
00015F4C 3C3C 005F                  		move.w	#$5F,d6
00015F50 43F8 D800                  		lea	(v_lvlobjspace).w,a1	; Load in-level objects RAM
00015F54 3C3C 005F                  		move.w	#$5F,d6			; do $60 objects
00015F58                            		
00015F58                            	@ObjectsLoop:                  
00015F58 4A29 0001                  		tst.b	1(a1)			; is object on-screen?
00015F5C 6A00                       		bpl.s	@NextObject		; if yes, branch
00015F5E 4A29 0020                  		tst.b	obColType(a1)			; load touch response
00015F62 6600                       		bne.s	@Homing_TestObject	; if touch response is not zero, branch
00015F64                            
00015F64                            	@NextObject:
00015F64 43E9 0040                  		lea	$40(a1),a1		; load next object slot
00015F68 51CE FFEE                  		dbf	d6,@ObjectsLoop		; repeat for all objects in RAM
00015F6C                            		
00015F6C 0C83 0000 6400             		cmpi.l	#$A0*$A0,d3		; if Distance ^ 2 > $A0 ^ 2, quit
00015F72 6200 0000                  		bhi.w	Sonic_JumpDash
00015F76                            
00015F76                            
00015F76                            
00015F76 117C 003C 001E             		move.b	#60,obTimeFrame(a0)		; follow object for 60 frames
00015F7C 11FC 0002 F5CD             		move.b  #2,(v_homingattack).w	; set flag as #2 (Homing Attack)
00015F82 303C 00BC                  		move.w	#$BC,d0			; play JD sound
00015F86 4EF9 0000 12A0             		jmp	(PlaySound_Special).l   ;
00015F8C                            
00015F8C                            
00015F8C                            ; ---------------------------------------------------------------------------
00015F8C                            @Homing_TestObject:
00015F8C 45FA 0000                  		lea	@Homing_ObjectList(pc),a2
00015F90 1011                       		move.b	(a1),d0
00015F92                            		
00015F92                            	@CheckID:
00015F92 B01A                       		cmp.b	(a2)+,d0		; compare current obj ID to one in list
00015F94 6700                       		beq.s	@CalcXDist		; if object is in list, branch
00015F96 62FA                       		bhi.s	@CheckID		; if current obj ID is higer, go on looking
00015F98 60CA                       		bra.s	@NextObject		; the object is not in list, quit
00015F9A                            		
00015F9A                            	@CalcXDist:
00015F9A 3229 0008                  		move.w	obX(a1),d1		; d1 -> ObjX
00015F9E 9268 0008                  		sub.w	obX(a0),d1		; d1 -> ObjX - SonX
00015FA2 6A00                       		bpl.s	@ObjAhead
00015FA4                            
00015FA4                            	; Object is behind Sonic
00015FA4 0828 0000 0022             		btst	#0,obStatus(a0)		; is Sonic faced left?
00015FAA 67B8                       		beq.s	@NextObject		; if not, we can't home at object
00015FAC 6000                       		bra.s	@CalcYDist
00015FAE                            
00015FAE                            	@ObjAhead:
00015FAE 0828 0000 0022             		btst	#0,obStatus(a0)		; is Sonic faced right?
00015FB4 66AE                       		bne.s	@NextObject		; if not, we can't home at object
00015FB6                            
00015FB6                            	@CalcYDist:
00015FB6 3429 000C                  		move.w	obY(a1),d2		; d2 -> ObjY
00015FBA 9468 000C                  		sub.w	obY(a0),d2		; d2 -> ObjY - SonY
00015FBE                            		
00015FBE                            	; Calculate absolute distance ( d1 * d1 + d2 * d2 )
00015FBE 3002                       		move.w	d2,d0			; d0 -> d2
00015FC0 4840                       		swap	d0
00015FC2 3001                       		move.w	d1,d0			; d0 -> d2 d1
00015FC4 C3C1                       		muls.w	d1,d1			; d1 -> d1 * d1
00015FC6 C5C2                       		muls.w	d2,d2			; d2 -> d2 * d2
00015FC8 D481                       		add.l	d1,d2			; d2 -> d1 * d1 + d2 * d2
00015FCA B483                       		cmp.l	d3,d2			; is new distance shorter after all?
00015FCC 6400 FF96                  		bcc.w	@NextObject		; if not, branch
00015FD0                            
00015FD0 2602                       		move.l	d2,d3			; set new distance
00015FD2 3800                       		move.w	d0,d4			; set new Xdist
00015FD4 4840                       		swap	d0
00015FD6 3A00                       		move.w	d0,d5			; set new Ydist
00015FD8 3149 003A                  		move.w	a1,$3A(a0)		; save obj ID
00015FDC 6000 FF86                  		bra.w	@NextObject
00015FE0                            
00015FE0                            
00015FE0                            ; ---------------------------------------------------------------------------
00015FE0                            ; Object ids that are available for homming
00015FE0                            ; NOTE: They should go in increasing order (1,2,3..)
00015FE0                            ; ---------------------------------------------------------------------------
00015FE0                            
00015FE0                            @Homing_ObjectList:
00015FE0 1E1F 2226 2B2C 2D40 4243   		dc.b	$1E, $1F, $22, $26, $2B, $2C, $2D, $40, $42, $43
00015FEA 5055 6078                  		dc.b	$50, $55, $60, $78
00015FEE FF                         		dc.b	-1	; mark end of list
00015FF0 00                         		even
00015FF0                            
00015FF0                            
00015FF0                            ; ===========================================================================
00015FF0                            ; ---------------------------------------------------------------------------
00015FF0                            ; Subroutine to perform Jump Dash
00015FF0                            ; ---------------------------------------------------------------------------
00015FF0                            
00015FF0                            Sonic_JumpDash:
00015FF0 4A38 F5CD                  		tst.b	(v_homingattack).w		; already Jump Dashing?
00015FF4 6600                       		bne.s	@Return			; if yes, branch
00015FF6 11FC 0001 F5CD             		move.b	#1,(v_homingattack).w
00015FFC 303C 0800                  		move.w	#$800,d0		; set Jump Dash speed
00016000 0828 0006 0022             		btst	#6,obStatus(a0)		; is Sonic underwater
00016006 6700                       		beq.s	@ChkShoes
00016008 303C 0600                  		move.w	#$600,d0		; set JD speed for underwater
0001600C                            	
0001600C                            	@ChkShoes:
0001600C 4A38 FE2E                  		tst.b	(v_shoes).w		; does Sonic have speed	shoes?
00016010 6700                       		beq.s	@SetSpeeds		; if not, branch
00016012 0640 0200                  		addi.w	#$200,d0
00016016                            
00016016                            	;@ChkOrientation:
00016016                            		;btst	#0,obStatus(a0)
00016016                            		;beq.s	@SetSpeeds
00016016                            		;neg.w	d0
00016016                            
00016016                            	@SetSpeeds:
00016016 3140 0012                  		move.w	d0,obVelY(a0)
0001601A 3140 0020                  		move.w	d0,obInertia(a0)
0001601E                            		;move.w	#0,obVelY(a0)
0001601E 303C 00BC                  		move.w	#$BC,d0			; play JD sound
00016022 4EF9 0000 12A0             		jmp	(PlaySound_Special).l   ;
00016028                            
00016028                            	@Return:
00016028 4E75                       		rts
0001602A                            
0001602A                            ; -------------------------------------------------------------------------
0001602A                            ; Subroutine to stop Sonic, bounce him up and to give him the ability to
0001602A                            ; Jumpdash again when he has performed a Jumpdash
0001602A                            ; -------------------------------------------------------------------------
0001602A                            
0001602A                            BounceJD:
0001602A 0C38 0002 F5CD             		cmp.b	#2,(v_homingattack).w; was HA flag set?
00016030 6600                       		bne.s	BounceJD_End	; if not, branch
00016032 4238 F5CD                  		clr.b	(v_homingattack).w	; if yes, clear HA flag (allow Sonic to HA again)
00016036 4268 0010                  		clr.w	obVelX(a0)		; clear X-velocity (stop sonic)
0001603A 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00016040 303C FF10                  		move.w	#-$F0,d0
00016044 0828 0000 0022             		btst	#0,obStatus(a0)		; is Sonic faced left?
0001604A 6600                       		bne.s	@MoveAhead		; if not, we can't move right
0001604C 4440                       		neg.w	d0
0001604E                            
0001604E                            	@MoveAhead:
0001604E 3140 0010                  		move.w	d0,obVelX(a0)
00016052                            	@Cont:
00016052 317C F810 0012             		move.w	#-$7F0,obVelY(a0)	; move sonic upwards
00016058 0828 0006 0022             		btst	#6,obStatus(a0)	; is sonic underwater?
0001605E 6700                       		beq.s	BounceJD_Shoes	; if not, branch
00016060 317C FAE0 0012             		move.w	#-$520,obVelY(a0)
00016066                            		
00016066                            BounceJD_Shoes:
00016066 4A38 FE2E                  		tst.b	(v_shoes).w	; does sonic has speed shoes?
0001606A 6700                       		beq.s	BounceJD_End	; if not, branch
0001606C 317C F7E0 0012             		move.w	#-$820,obVelY(a0)	; use -$620 for Y-velocity (move sonic upwards)
00016072                            		
00016072                            BounceJD_End:
00016072 4E75                       		rts			; return
00016074                            ; End of function BounceJD
00016074                            ; End of function BounceJD
00016074                            
00016074                            Sonic_AirRoll:
00016074 0C28 0000 001C             	cmpi.b  #id_spring,$1C(a0)      ; is sonic in the spring animation?
0001607A 6600                               bne.s   AirRoll_Return   ; if not, return
0001607C                            
0001607C                            AirRoll_CheckBtn:
0001607C 1038 F603                          move.b	($FFFFF603).w,d0 ; Move $FFFFF603 to d0
00016080 0200 0070                          andi.b	#btnABC,d0 ; Has A/B/C been pressed?
00016084 6700                               beq.s	AirRoll_Return
00016086 117C 0000 001C             	move.b	#id_roll,$1C(a0) ; Set Sonic's animation to rolling.
0001608C                                   ; move.w	#$BC,d0
0001608C                                   ; jsr	(PlaySound_Special).l ;    play Sonic rolling sound
0001608C                            
0001608C                            AirRoll_Return:
0001608C 4E75                               rts
0001608E                            ; ===========================================================================
0001608E                            ; ---------------------------------------------------------------------------
0001608E                            ; Unused subroutine to squash Sonic
0001608E                            ; ---------------------------------------------------------------------------
0001608E 1028 0026                  		move.b	obAngle(a0),d0
00016092 0600 0020                  		addi.b	#$20,d0
00016096 0200 00C0                  		andi.b	#$C0,d0
0001609A 6600                       		bne.s	locret_13302
0001609C 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000160A0 4A41                       		tst.w	d1
000160A2 6A00                       		bpl.s	locret_13302
000160A4 317C 0000 0020             		move.w	#0,obInertia(a0) ; stop Sonic moving
000160AA 317C 0000 0010             		move.w	#0,obVelX(a0)
000160B0 317C 0000 0012             		move.w	#0,obVelY(a0)
000160B6 117C 0000 001C             		move.b	#id_Warp3,obAnim(a0) ; use "warping" animation
000160BC                            
000160BC                            locret_13302:
000160BC 4E75                       		rts		
000160BE                            		include	"_incObj\Sonic LevelBound.asm"
000160BE                            ; ---------------------------------------------------------------------------
000160BE                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
000160BE                            ; ---------------------------------------------------------------------------
000160BE                            
000160BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000160BE                            
000160BE                            
000160BE                            Sonic_LevelBound:
000160BE 2228 0008                  		move.l	obX(a0),d1
000160C2 3028 0010                  		move.w	obVelX(a0),d0
000160C6 48C0                       		ext.l	d0
000160C8 E180                       		asl.l	#8,d0
000160CA D280                       		add.l	d0,d1
000160CC 4841                       		swap	d1
000160CE 3038 F728                  		move.w	(v_limitleft2).w,d0
000160D2 0640 0010                  		addi.w	#$10,d0
000160D6 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000160D8 6200                       		bhi.s	@sides		; if yes, branch
000160DA 3038 F72A                  		move.w	(v_limitright2).w,d0
000160DE 0640 0128                  		addi.w	#$128,d0
000160E2 4A38 F7AA                  		tst.b	(f_lockscreen).w
000160E6 6600                       		bne.s	@screenlocked
000160E8 0640 0040                  		addi.w	#$40,d0
000160EC                            
000160EC                            	@screenlocked:
000160EC B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000160EE 6300                       		bls.s	@sides		; if yes, branch
000160F0                            
000160F0                            	@chkbottom:
000160F0 3038 F72E                  		move.w	(v_limitbtm2).w,d0
000160F4 0640 00E0                  		addi.w	#$E0,d0
000160F8 B068 000C                  		cmp.w	obY(a0),d0	; has Sonic touched the	bottom boundary?
000160FC 6D00                       		blt.s	@bottom		; if yes, branch
000160FE 4E75                       		rts	
00016100                            ; ===========================================================================
00016100                            
00016100                            @bottom:
00016100 3038 F726                  		move.w (v_limitbtm1).w,d0 
00016104 3238 F72E                  		move.w (v_limitbtm2).w,d1 
00016108 B240                       		cmp.w d0,d1 ; screen still scrolling down? 
0001610A 6D00                       		blt.s @dontkill; if so, don't kill Sonic 
0001610C 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is level SBZ2 ?
00016112 6600 0000                  		bne.w	Kill_transport	; if not, kill Sonic
00016116 0C78 1B00 D008             		cmpi.w	#$1B00,(v_player+obX).w
0001611C 6500 0000                  		bcs.w	Kill_transport
00016120 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
00016124 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
0001612A 31FC 0103 FE10             		move.w	#(id_LZ<<8)+3,(v_zone).w ; set level to SBZ3 (LZ4)
00016130 4E75                       		rts	
00016132                            @dontkill: 
00016132 4E75                       		rts
00016134                            ; ===========================================================================
00016134                            
00016134                            @sides:
00016134 3140 0008                  		move.w	d0,obX(a0)
00016138 317C 0000 000A             		move.w	#0,obX+2(a0)
0001613E 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Sonic moving
00016144 317C 0000 0020             		move.w	#0,obInertia(a0)
0001614A 60A4                       		bra.s	@chkbottom
0001614C                            
0001614C                            Kill_transport: 
0001614C 4EF9 0000 0000                     	jmp        (KillSonic).l
00016152                            
00016152                            ; End of function Sonic_LevelBound
00016152                            ; End of function Sonic_LevelBound
00016152                            		include	"_incObj\Sonic Roll.asm"
00016152                            ; ---------------------------------------------------------------------------
00016152                            ; Subroutine allowing Sonic to roll when he's moving
00016152                            ; ---------------------------------------------------------------------------
00016152                            
00016152                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016152                            
00016152                            
00016152                            Sonic_Roll:
00016152 4A38 F7CA                  		tst.b	(f_jumponly).w
00016156 6600                       		bne.s	@noroll
00016158 3028 0020                  		move.w	obInertia(a0),d0
0001615C 6A00                       		bpl.s	@ispositive
0001615E 4440                       		neg.w	d0
00016160                            
00016160                            	@ispositive:
00016160 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00016164 6500                       		bcs.s	@noroll		; if not, branch
00016166 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001616A 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	being pressed?
0001616E 6600                       		bne.s	@noroll		; if yes, branch
00016170 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
00016176 6600                       		bne.s	Sonic_ChkRoll	; if yes, branch
00016178                            
00016178                            	@noroll:
00016178 4E75                       		rts	
0001617A                            ; ===========================================================================
0001617A                            
0001617A                            Sonic_ChkRoll:
0001617A 0828 0002 0022             		btst	#2,obStatus(a0)	; is Sonic already rolling?
00016180 6700                       		beq.s	@roll		; if not, branch
00016182 4E75                       		rts	
00016184                            ; ===========================================================================
00016184                            
00016184                            @roll:
00016184 08E8 0002 0022             		bset	#2,obStatus(a0)
0001618A 117C 000E 0016             		move.b	#$E,obHeight(a0)
00016190 117C 0007 0017             		move.b	#7,obWidth(a0)
00016196 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
0001619C 5A68 000C                  		addq.w	#5,obY(a0)
000161AA 4A68 0020                  		tst.w	obInertia(a0)
000161AE 6600                       		bne.s	@ismoving
000161B0 317C 0200 0020             		move.w	#$200,obInertia(a0) ; set inertia if 0
000161B6                            
000161B6                            	@ismoving:
000161B6 4E75                       		rts	
000161B8                            ; End of function Sonic_Roll
000161B8                            ; End of function Sonic_Roll
000161B8                            		include	"_incObj\Sonic Jump.asm"
000161B8                            ; ---------------------------------------------------------------------------
000161B8                            ; Subroutine allowing Sonic to jump
000161B8                            ; ---------------------------------------------------------------------------
000161B8                            
000161B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161B8                            
000161B8                            
000161B8                            Sonic_Jump:
000161B8 1038 F603                  		move.b	(v_jpadpress2).w,d0
000161BC 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
000161C0 6700 0000                  		beq.w	locret_1348E	; if not, branch
000161C4 7000                       		moveq	#0,d0
000161C6 1028 0026                  		move.b	obAngle(a0),d0
000161CA 0600 0080                  		addi.b	#$80,d0
000161CE 6100 0000                  		bsr.w	sub_14D48
000161D2 0C41 0006                  		cmpi.w	#6,d1
000161D6 6D00 0000                  		blt.w	locret_1348E
000161DA 343C 0680                  		move.w	#$680,d2
000161DE 0828 0006 0022             		btst	#6,obStatus(a0)
000161E4 6700                       		beq.s	loc_1341C
000161E6 343C 0380                  		move.w	#$380,d2
000161EA                            
000161EA                            loc_1341C:
000161EA 7000                       		moveq	#0,d0
000161EC 1028 0026                  		move.b	obAngle(a0),d0
000161F0 0400 0040                  		subi.b	#$40,d0
000161F4 4EB9 0000 3CCA             		jsr	(CalcSine).l
000161FA C3C2                       		muls.w	d2,d1
000161FC E081                       		asr.l	#8,d1
000161FE D368 0010                  		add.w	d1,obVelX(a0)	; make Sonic jump
00016202 C1C2                       		muls.w	d2,d0
00016204 E080                       		asr.l	#8,d0
00016206 D168 0012                  		add.w	d0,obVelY(a0)	; make Sonic jump
0001620A 08E8 0001 0022             		bset	#1,obStatus(a0)
00016210 08A8 0005 0022             		bclr	#5,obStatus(a0)
00016216 588F                       		addq.l	#4,sp
00016218 117C 0001 003C             		move.b	#1,$3C(a0)
0001621E 4228 0038                  		clr.b	$38(a0)
0001622C 117C 0013 0016             		move.b	#$13,obHeight(a0)
00016232 117C 0009 0017             		move.b	#9,obWidth(a0)
00016238 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001623E 117C 0007 0017             		move.b	#7,obWidth(a0)
00016244                            Result_Check:
00016244 4A38 F5C2                  		tst.b   ($FFFFF5C2).w ; Has the victory animation flag been set?
00016248 6700                       		beq.s   NormalJump ; If not, branch
0001624A 117C 0000 001C             		move.b  #id_Leap2,$1C(a0) ; Play the victory animation
00016250 6000                       		bra.s   cont ; Continue
00016252                            NormalJump:
00016252 117C 0002 001C             		move.b  #2,$1C(a0)    ; use "jumping"    animation
00016258                            cont:
00016258 08E8 0002 0022             		bset	#2,obStatus(a0)
0001625E 5A68 000C                  		addq.w	#5,obY(a0)
00016262                            
00016262                            locret_1348E:
00016262 4E75                       		rts	
00016264                            ; ===========================================================================
00016264                            
00016264                            ; End of function Sonic_Jump
00016264                            ; End of function Sonic_Jump
00016264                            		include	"_incObj\Sonic JumpHeight.asm"
00016264                            ; ---------------------------------------------------------------------------
00016264                            ; Subroutine controlling Sonic's jump height/duration
00016264                            ; ---------------------------------------------------------------------------
00016264                            
00016264                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016264                            
00016264                            
00016264                            Sonic_JumpHeight:
00016264 4A28 003C                  		tst.b	$3C(a0)
00016268 6700                       		beq.s	loc_134C4
0001626A 323C FC00                  		move.w	#-$400,d1
0001626E 0828 0006 0022             		btst	#6,obStatus(a0)
00016274 6700                       		beq.s	loc_134AE
00016276 323C FE00                  		move.w	#-$200,d1
0001627A                            
0001627A                            loc_134AE:
0001627A B268 0012                  		cmp.w	obVelY(a0),d1
0001627E 6F00                       		ble.s	locret_134C2
00016280 1038 F602                  		move.b	(v_jpadhold2).w,d0
00016284 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00016288 6600                       		bne.s	locret_134C2	; if yes, branch
0001628A 3141 0012                  		move.w	d1,obVelY(a0)
0001628E                            
0001628E                            locret_134C2:
0001628E 4A38 F7C8                          tst.b   (f_lockmulti).w      ; Are Controls locked?
00016292 66FA                               bne.s   locret_134C2            ; If so, branch, and do not bother with Super code
00016294 1038 F603                          move.b  (v_jpadpress2).w,d0
00016298 0200 0010                          andi.b  #btnB,d0 ; is a jump button pressed?
0001629C 6600 0000                  		bne.w	Sonic_CheckGoSuper
000162A0 4E75                       		rts	
000162A2                            ; ===========================================================================
000162A2                            
000162A2                            loc_134C4:
000162A2 0C68 F040 0012             		cmpi.w	#-$FC0,obVelY(a0)
000162A8 6C00                       		bge.s	locret_134D2
000162AA 317C F040 0012             		move.w	#-$FC0,obVelY(a0)
000162B0                            
000162B0                            locret_134D2:		
000162B0 4E75                       		rts	
000162B2                            ; End of function Sonic_JumpHeight
000162B2                            
000162B2                            
000162B2                            ; ---------------------------------------------------------------------------
000162B2                            ; Subroutine called at the peak of a jump that transforms Sonic into Super Sonic
000162B2                            ; if he has enough rings and emeralds
000162B2                            ; ---------------------------------------------------------------------------
000162B2                            
000162B2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000162B2                            
000162B2                            Sonic_CheckGoSuper:
000162B2 4A38 FE19                  		tst.b	(Super_Sonic_flag).w	; is Sonic already Super?
000162B6 6600 0000                  		bne.w	Sonic_RevertToNormal			; if yes, branch	
000162BA 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; does Sonic have at least 50 rings?
000162C0 6500                       		bcs.s	return_1ABA4		; if not, branch	
000162C2 11FC 0001 F5D8             		move.b	#1,(Super_Sonic_palette).w
000162C8 11FC 000F F5DE             		move.b	#$F,(Palette_timer).w
000162CE 11FC 0001 FE19             		move.b	#1,(Super_Sonic_flag).w
000162D4 4238 FE2E                  		clr.b	(v_shoes).w ; clear speed shoes
000162D8 11FC 0001 F7C8             		move.b    #$1,(f_lockmulti).w
000162DE 117C 0000 001C             		move.b    #id_Transform,obAnim(a0)   
000162E4 4EB9 0000 0000             		jsr		Super_and_Invincibility_Stars				
000162EA 11FC 008D D200             		move.b	#id_SuperStars,($FFFFD200).w				
000162F0 31FC 0A00 F760             		move.w	#$A00,(v_sonspeedmax).w
000162F6 31FC 0030 F762             		move.w	#$30,(v_sonspeedacc).w
000162FC 31FC 0100 F764             		move.w	#$100,(v_sonspeeddec).w
00016302 317C 0000 0032             		move.w	#0,invtime(a0)
00016308 11FC 0001 FE2D             		move.b #1,(v_invinc).w ; make Sonic invincible	
0001630E 303C 00D6                  		move.w	#$D6,d0         ; 
00016312 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; Play transformation sound effect.
00016318 303C 0087                  		move.w	#$87,d0         
0001631C 4EF9 0000 129A             		jmp	(PlaySound).l	; load the invincibility song and return also playmusic doesn't exist
00016322                            
00016322                            ; ---------------------------------------------------------------------------
00016322                            return_1ABA4:
00016322 4E75                       		rts
00016324                            		
00016324                            ; End of subroutine Sonic_CheckGoSuper		
00016324                            ; ---------------------------------------------------------------------------
00016324                            ; Subroutine doing the extra logic for Super Sonic
00016324                            ; ---------------------------------------------------------------------------
00016324                            
00016324                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00016324                            
00016324                            ; loc_1ABA6:
00016324                            Sonic_Super:
00016324 4A38 FE19                  		tst.b	(Super_Sonic_flag).w	; Ignore all this code if not Super Sonic
00016328 6700 0000                  		beq.w	return_1AC3C
0001632C 4A38 FE1E                  		tst.b	(f_timecount).w
00016330 6700                       		beq.s	Sonic_RevertToNormal ; ?
00016332 5378 F670                  		subq.w	#1,(v_pal_buffer+$20).w
00016336 6A00 0000                  		bpl.w	return_1AC3C
0001633A 31FC 003C F670             		move.w	#60,(v_pal_buffer+$20).w	; Reset frame counter to 60
00016340 4A78 FE20                  		tst.w	(v_rings).w
00016344 6700                       		beq.s	Sonic_RevertToNormal
00016346 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w
0001634C 0C78 0001 FE20             		cmpi.w	#1,(v_rings).w
00016352 6700                       		beq.s	@update
00016354 0C78 000A FE20             		cmpi.w	#10,(v_rings).w
0001635A 6700                       		beq.s	@update
0001635C 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w
00016362 6600                       		bne.s	@update2
00016364                            @update
00016364 0038 0080 FE1D             		ori.b	#$80,(f_ringcount).w
0001636A                            @update2
0001636A 5378 FE20                  		subq.w	#1,(v_rings).w
0001636E 6600                       		bne.s	return_1AC3C
00016370                            ; loc_1ABF2:
00016370                            Sonic_RevertToNormal:
00016370 4238 F7C8                  		clr.b   (f_lockmulti).w
00016374 11FC 0002 F5D8             		move.b	#2,(Super_Sonic_palette).w	; Remove rotating palette
0001637A 31FC 0028 F5CC             		move.w	#$28,($FFFFF5CC).w	; Unknown
00016380 11FC 0000 FE19             		move.b	#0,(Super_Sonic_flag).w
00016386 11FC 0000 F7C8             		move.b    #0,(f_lockmulti).w	
0001638C 317C 0001 0032             		move.w	#1,invtime(a0)				
00016392 117C 0001 001D             		move.b	#1,next_anim(a0)	; Change animation back to normal ?
00016398 4238 D200                  		clr.b	($FFFFD200).w	; clear Obj7E (super sonic stars object) at $FFFFD200		
0001639C 4238 FE2D                  		clr.b 	(v_invinc).w
000163A0 4238 FE2E                  		clr.b 	(v_shoes).w 
000163A4 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
000163A8 4EB9 0000 129A             		jsr		(PlaySound).l    ; play normal music		
000163AE 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w
000163B4 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w
000163BA 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w
000163C0 0828 0006 0022             		btst	#6,obStatus(a0)	; Check if underwater, return if not
000163C6 6700                       		beq.s	return_1AC3C
000163C8 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w
000163CE 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w
000163D4 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w
000163DA                            		
000163DA                            return_1AC3C:
000163DA 4E75                       		rts
000163DC                            ; End of subroutine Sonic_Super	
000163DC                            
000163DC                            
000163DC                            ; ---------------------------------------------------------------------------
000163DC                            ; Subroutine to	delete the Super Stars and the Invincibility Stars
000163DC                            ; ---------------------------------------------------------------------------
000163DC                            
000163DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000163DC                            
000163DC                            
000163DC                            Super_and_Invincibility_Stars:
000163DC 4278 D032                  		clr.w	($FFFFD032).w		; clear time limit of the invincibility
000163E0 2F08                       		move.l	a0,-(sp)
000163E2 41F8 D200                  		lea		($FFFFD200).w,a0	; stars object ($3801 and $8F)
000163E6 4EBA 9404                  		jsr		DeleteObject		; delete stars
000163EA 41F8 D240                  		lea		($FFFFD240).w,a0	; stars object ($3802)
000163EE 4EBA 93FC                  		jsr		DeleteObject		; delete stars
000163F2 41F8 D280                  		lea		($FFFFD280).w,a0	; stars object ($3803)
000163F6 4EBA 93F4                  		jsr		DeleteObject		; delete stars
000163FA 41F8 D2C0                  		lea		($FFFFD2C0).w,a0	; stars object ($3804)
000163FE 4EBA 93EC                  		jsr		DeleteObject		; delete stars
00016402 205F                       		move.l	(sp)+,a0
00016404 4E75                       		rts
00016406                            ; End of function Super_and_Invincibility_Stars
00016406                            ; End of function Super_and_Invincibility_Stars
00016406                            		include	"_incObj\Sonic SlopeResist.asm"
00016406                            ; ---------------------------------------------------------------------------
00016406                            ; Subroutine to	slow Sonic walking up a	slope
00016406                            ; ---------------------------------------------------------------------------
00016406                            
00016406                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016406                            
00016406                            
00016406                            Sonic_SlopeResist:
00016406 1028 0026                  		move.b	obAngle(a0),d0
0001640A 0600 0060                  		addi.b	#$60,d0
0001640E 0C00 00C0                  		cmpi.b	#$C0,d0
00016412 6400                       		bcc.s	locret_13508
00016414 1028 0026                  		move.b	obAngle(a0),d0
00016418 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001641E C1FC 0020                  		muls.w	#$20,d0
00016422 E080                       		asr.l	#8,d0
00016424 4A68 0020                  		tst.w	obInertia(a0)
00016428 6700                       		beq.s	locret_13508
0001642A 6B00                       		bmi.s	loc_13504
0001642C 4A40                       		tst.w	d0
0001642E 6700                       		beq.s	locret_13502
00016430 D168 0020                  		add.w	d0,obInertia(a0) ; change Sonic's inertia
00016434                            
00016434                            locret_13502:
00016434 4E75                       		rts	
00016436                            ; ===========================================================================
00016436                            
00016436                            loc_13504:
00016436 D168 0020                  		add.w	d0,obInertia(a0)
0001643A                            
0001643A                            locret_13508:
0001643A 4E75                       		rts	
0001643C                            ; End of function Sonic_SlopeResist
0001643C                            ; End of function Sonic_SlopeResist
0001643C                            		include	"_incObj\Sonic RollRepel.asm"
0001643C                            ; ---------------------------------------------------------------------------
0001643C                            ; Subroutine to	push Sonic down	a slope	while he's rolling
0001643C                            ; ---------------------------------------------------------------------------
0001643C                            
0001643C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001643C                            
0001643C                            
0001643C                            Sonic_RollRepel:
0001643C 1028 0026                  		move.b	obAngle(a0),d0
00016440 0600 0060                  		addi.b	#$60,d0
00016444 0C00 00C0                  		cmpi.b	#-$40,d0
00016448 6400                       		bcc.s	locret_13544
0001644A 1028 0026                  		move.b	obAngle(a0),d0
0001644E 4EB9 0000 3CCA             		jsr	(CalcSine).l
00016454 C1FC 0050                  		muls.w	#$50,d0
00016458 E080                       		asr.l	#8,d0
0001645A 4A68 0020                  		tst.w	obInertia(a0)
0001645E 6B00                       		bmi.s	loc_1353A
00016460 4A40                       		tst.w	d0
00016462 6A00                       		bpl.s	loc_13534
00016464 E480                       		asr.l	#2,d0
00016466                            
00016466                            loc_13534:
00016466 D168 0020                  		add.w	d0,obInertia(a0)
0001646A 4E75                       		rts	
0001646C                            ; ===========================================================================
0001646C                            
0001646C                            loc_1353A:
0001646C 4A40                       		tst.w	d0
0001646E 6B00                       		bmi.s	loc_13540
00016470 E480                       		asr.l	#2,d0
00016472                            
00016472                            loc_13540:
00016472 D168 0020                  		add.w	d0,obInertia(a0)
00016476                            
00016476                            locret_13544:
00016476 4E75                       		rts	
00016478                            ; End of function Sonic_RollRepel
00016478                            ; End of function Sonic_RollRepel
00016478                            		include	"_incObj\Sonic SlopeRepel.asm"
00016478                            ; ---------------------------------------------------------------------------
00016478                            ; Subroutine to	push Sonic down	a slope
00016478                            ; ---------------------------------------------------------------------------
00016478                            
00016478                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016478                            
00016478                            
00016478                            Sonic_SlopeRepel:
00016478 4E71                       		nop	
0001647A 4A28 0038                  		tst.b	$38(a0)
0001647E 6600                       		bne.s	locret_13580
00016480 4A68 003E                  		tst.w	$3E(a0)
00016484 6600                       		bne.s	loc_13582
00016486 1028 0026                  		move.b	obAngle(a0),d0
0001648A 0600 0020                  		addi.b	#$20,d0
0001648E 0200 00C0                  		andi.b	#$C0,d0
00016492 6700                       		beq.s	locret_13580
00016494 3028 0020                  		move.w	obInertia(a0),d0
00016498 6A00                       		bpl.s	loc_1356A
0001649A 4440                       		neg.w	d0
0001649C                            
0001649C                            loc_1356A:
0001649C 0C40 0280                  		cmpi.w	#$280,d0
000164A0 6400                       		bcc.s	locret_13580
000164A2 4268 0020                  		clr.w	obInertia(a0)
000164A6 08E8 0001 0022             		bset	#1,obStatus(a0)
000164AC 317C 001E 003E             		move.w	#$1E,$3E(a0)
000164B2                            
000164B2                            locret_13580:
000164B2 4E75                       		rts	
000164B4                            ; ===========================================================================
000164B4                            
000164B4                            loc_13582:
000164B4 5368 003E                  		subq.w	#1,$3E(a0)
000164B8 4E75                       		rts	
000164BA                            ; End of function Sonic_SlopeRepel
000164BA                            ; End of function Sonic_SlopeRepel
000164BA                            		include	"_incObj\Sonic JumpAngle.asm"
000164BA                            ; ---------------------------------------------------------------------------
000164BA                            ; Subroutine to	return Sonic's angle to 0 as he jumps
000164BA                            ; ---------------------------------------------------------------------------
000164BA                            
000164BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000164BA                            
000164BA                            
000164BA                            Sonic_JumpAngle:
000164BA 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
000164BE 6700                       		beq.s	locret_135A2	; if already 0,	branch
000164C0 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
000164C2                            
000164C2 5400                       		addq.b	#2,d0		; increase angle
000164C4 6400                       		bcc.s	loc_13596
000164C6 7000                       		moveq	#0,d0
000164C8                            
000164C8                            loc_13596:
000164C8 6000                       		bra.s	loc_1359E
000164CA                            ; ===========================================================================
000164CA                            
000164CA                            loc_13598:
000164CA 5500                       		subq.b	#2,d0		; decrease angle
000164CC 6400                       		bcc.s	loc_1359E
000164CE 7000                       		moveq	#0,d0
000164D0                            
000164D0                            loc_1359E:
000164D0 1140 0026                  		move.b	d0,obAngle(a0)
000164D4                            
000164D4                            locret_135A2:
000164D4 4E75                       		rts	
000164D6                            ; End of function Sonic_JumpAngle
000164D6                            ; End of function Sonic_JumpAngle
000164D6                            		include	"_incObj\Sonic Floor.asm"
000164D6                            ; ---------------------------------------------------------------------------
000164D6                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
000164D6                            ; ---------------------------------------------------------------------------
000164D6                            
000164D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000164D6                            
000164D6                            
000164D6                            Sonic_Floor:
000164D6 3228 0010                  		move.w	obVelX(a0),d1
000164DA 3428 0012                  		move.w	obVelY(a0),d2
000164DE 4EB9 0000 3F5C             		jsr	(CalcAngle).l
000164E4 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
000164E8 0400 0020                  		subi.b	#$20,d0
000164EC 11C0 FFED                  		move.b	d0,($FFFFFFED).w
000164F0 0200 00C0                  		andi.b	#$C0,d0
000164F4 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
000164F8 0C00 0040                  		cmpi.b	#$40,d0
000164FC 6700 0000                  		beq.w	loc_13680
00016500 0C00 0080                  		cmpi.b	#$80,d0
00016504 6700 0000                  		beq.w	loc_136E2
00016508 0C00 00C0                  		cmpi.b	#$C0,d0
0001650C 6700 0000                  		beq.w	loc_1373E
00016510 6100 0000                  		bsr.w	Sonic_HitWall
00016514 4A41                       		tst.w	d1
00016516 6A00                       		bpl.s	loc_135F0
00016518 9368 0008                  		sub.w	d1,obX(a0)
0001651C 317C 0000 0010             		move.w	#0,obVelX(a0)
00016522                            
00016522                            loc_135F0:
00016522 6100 0000                  		bsr.w	sub_14EB4
00016526 4A41                       		tst.w	d1
00016528 6A00                       		bpl.s	loc_13602
0001652A D368 0008                  		add.w	d1,obX(a0)
0001652E 317C 0000 0010             		move.w	#0,obVelX(a0)
00016534                            
00016534                            loc_13602:
00016534 6100 0000                  		bsr.w	Sonic_HitFloor
00016538 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
0001653C 4A41                       		tst.w	d1
0001653E 6A00                       		bpl.s	locret_1367E
00016540 1428 0012                  		move.b	obVelY(a0),d2
00016544 5002                       		addq.b	#8,d2
00016546 4402                       		neg.b	d2
00016548 B202                       		cmp.b	d2,d1
0001654A 6C00                       		bge.s	loc_1361E
0001654C B002                       		cmp.b	d2,d0
0001654E 6D00                       		blt.s	locret_1367E
00016550                            
00016550                            loc_1361E:
00016550 D368 000C                  		add.w	d1,obY(a0)
00016554 1143 0026                  		move.b	d3,obAngle(a0)
00016558 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001655C 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016562 1003                       		move.b	d3,d0
00016564 0600 0020                  		addi.b	#$20,d0
00016568 0200 0040                  		andi.b	#$40,d0
0001656C 6600                       		bne.s	loc_1365C
0001656E 1003                       		move.b	d3,d0
00016570 0600 0010                  		addi.b	#$10,d0
00016574 0200 0020                  		andi.b	#$20,d0
00016578 6700                       		beq.s	loc_1364E
0001657A E0E8 0012                  		asr	obVelY(a0)
0001657E 6000                       		bra.s	loc_13670
00016580                            ; ===========================================================================
00016580                            
00016580                            loc_1364E:
00016580 317C 0000 0012             		move.w	#0,obVelY(a0)
00016586 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
0001658C 4E75                       		rts	
0001658E                            ; ===========================================================================
0001658E                            
0001658E                            loc_1365C:
0001658E 317C 0000 0010             		move.w	#0,obVelX(a0)
00016594 0C68 0FC0 0012             		cmpi.w	#$FC0,obVelY(a0)
0001659A 6F00                       		ble.s	loc_13670
0001659C 317C 0FC0 0012             		move.w	#$FC0,obVelY(a0)
000165A2                            
000165A2                            loc_13670:
000165A2 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000165A8 4A03                       		tst.b	d3
000165AA 6A00                       		bpl.s	locret_1367E
000165AC 4468 0020                  		neg.w	obInertia(a0)
000165B0                            
000165B0                            locret_1367E:
000165B0 4E75                       		rts	
000165B2                            ; ===========================================================================
000165B2                            
000165B2                            loc_13680:
000165B2 6100 0000                  		bsr.w	Sonic_HitWall
000165B6 4A41                       		tst.w	d1
000165B8 6A00                       		bpl.s	loc_1369A
000165BA 9368 0008                  		sub.w	d1,obX(a0)
000165BE 317C 0000 0010             		move.w	#0,obVelX(a0)
000165C4 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000165CA 4E75                       		rts	
000165CC                            ; ===========================================================================
000165CC                            
000165CC                            loc_1369A:
000165CC 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000165D0 4A41                       		tst.w	d1
000165D2 6A00                       		bpl.s	loc_136B4
000165D4 9368 000C                  		sub.w	d1,obY(a0)
000165D8 4A68 0012                  		tst.w	obVelY(a0)
000165DC 6A00                       		bpl.s	locret_136B2
000165DE 317C 0000 0012             		move.w	#0,obVelY(a0)
000165E4                            
000165E4                            locret_136B2:
000165E4 4E75                       		rts	
000165E6                            ; ===========================================================================
000165E6                            
000165E6                            loc_136B4:
000165E6 4A68 0012                  		tst.w	obVelY(a0)
000165EA 6B00                       		bmi.s	locret_136E0
000165EC 6100 0000                  		bsr.w	Sonic_HitFloor
000165F0 4A41                       		tst.w	d1
000165F2 6A00                       		bpl.s	locret_136E0
000165F4 D368 000C                  		add.w	d1,obY(a0)
000165F8 1143 0026                  		move.b	d3,obAngle(a0)
000165FC 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016600 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016606 317C 0000 0012             		move.w	#0,obVelY(a0)
0001660C 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
00016612                            
00016612                            locret_136E0:
00016612 4E75                       		rts	
00016614                            ; ===========================================================================
00016614                            
00016614                            loc_136E2:
00016614 6100 0000                  		bsr.w	Sonic_HitWall
00016618 4A41                       		tst.w	d1
0001661A 6A00                       		bpl.s	loc_136F4
0001661C 9368 0008                  		sub.w	d1,obX(a0)
00016620 317C 0000 0010             		move.w	#0,obVelX(a0)
00016626                            
00016626                            loc_136F4:
00016626 6100 0000                  		bsr.w	sub_14EB4
0001662A 4A41                       		tst.w	d1
0001662C 6A00                       		bpl.s	loc_13706
0001662E D368 0008                  		add.w	d1,obX(a0)
00016632 317C 0000 0010             		move.w	#0,obVelX(a0)
00016638                            
00016638                            loc_13706:
00016638 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001663C 4A41                       		tst.w	d1
0001663E 6A00                       		bpl.s	locret_1373C
00016640 9368 000C                  		sub.w	d1,obY(a0)
00016644 1003                       		move.b	d3,d0
00016646 0600 0020                  		addi.b	#$20,d0
0001664A 0200 0040                  		andi.b	#$40,d0
0001664E 6600                       		bne.s	loc_13726
00016650 317C 0000 0012             		move.w	#0,obVelY(a0)
00016656 4E75                       		rts	
00016658                            ; ===========================================================================
00016658                            
00016658                            loc_13726:
00016658 1143 0026                  		move.b	d3,obAngle(a0)
0001665C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016660 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016666 4A03                       		tst.b	d3
00016668 6A00                       		bpl.s	locret_1373C
0001666A 4468 0020                  		neg.w	obInertia(a0)
0001666E                            
0001666E                            locret_1373C:
0001666E 4E75                       		rts	
00016670                            ; ===========================================================================
00016670                            
00016670                            loc_1373E:
00016670 6100 0000                  		bsr.w	sub_14EB4
00016674 4A41                       		tst.w	d1
00016676 6A00                       		bpl.s	loc_13758
00016678 D368 0008                  		add.w	d1,obX(a0)
0001667C 317C 0000 0010             		move.w	#0,obVelX(a0)
00016682 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016688 4E75                       		rts	
0001668A                            ; ===========================================================================
0001668A                            
0001668A                            loc_13758:
0001668A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001668E 4A41                       		tst.w	d1
00016690 6A00                       		bpl.s	loc_13772
00016692 9368 000C                  		sub.w	d1,obY(a0)
00016696 4A68 0012                  		tst.w	obVelY(a0)
0001669A 6A00                       		bpl.s	locret_13770
0001669C 317C 0000 0012             		move.w	#0,obVelY(a0)
000166A2                            
000166A2                            locret_13770:
000166A2 4E75                       		rts	
000166A4                            ; ===========================================================================
000166A4                            
000166A4                            loc_13772:
000166A4 4A68 0012                  		tst.w	obVelY(a0)
000166A8 6B00                       		bmi.s	locret_1379E
000166AA 6100 0000                  		bsr.w	Sonic_HitFloor
000166AE 4A41                       		tst.w	d1
000166B0 6A00                       		bpl.s	locret_1379E
000166B2 D368 000C                  		add.w	d1,obY(a0)
000166B6 1143 0026                  		move.b	d3,obAngle(a0)
000166BA 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000166BE 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000166C4 317C 0000 0012             		move.w	#0,obVelY(a0)
000166CA 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
000166D0                            
000166D0                            locret_1379E:
000166D0 4E75                       		rts	
000166D2                            ; End of function Sonic_Floor
000166D2                            ; End of function Sonic_Floor
000166D2                            		include	"_incObj\Sonic ResetOnFloor.asm"
000166D2                            ; ---------------------------------------------------------------------------
000166D2                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000166D2                            ; ---------------------------------------------------------------------------
000166D2                            
000166D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000166D2                            
000166D2                            
000166D2                            Sonic_ResetOnFloor:            ; XREF: PlatformObject; et al
000166D2 4238 F5CD                  		clr.b	(v_homingattack).w
000166D6 08A8 0005 0022                     	bclr    #5,$22(a0)
000166DC 08A8 0001 0022                     	bclr    #1,$22(a0)
000166E2 0828 0002 0022                     	btst    #2,$22(a0)
000166E8 6700                               	beq.s    loc_137E4
000166EA 08A8 0002 0022             		bclr	#2,obStatus(a0)
000166F0 117C 0013 0016             		move.b	#$13,obHeight(a0)
000166F6 117C 0009 0017             		move.b	#9,obWidth(a0)
000166FC 117C 0000 001C             		move.b	#id_Walk,obAnim(a0) ; use running/walking animation
00016702 5B68 000C                  		subq.w	#5,obY(a0)
00016706                            
00016706                            loc_137E4:
00016706 117C 0000 003C             		move.b	#0,$3C(a0)
0001670C 31FC 0000 F7D0             		move.w	#0,(v_itembonus).w
00016712 4E75                       		rts	
00016714                            ; End of function Sonic_ResetOnFloor
00016714                            ; End of function Sonic_ResetOnFloor
00016714                            		include	"_incObj\Sonic (part 2).asm"
00016714                            ; ---------------------------------------------------------------------------
00016714                            ; Sonic	when he	gets hurt
00016714                            ; ---------------------------------------------------------------------------
00016714                            
00016714                            Sonic_Hurt:	; Routine 4
00016714 4EB9 0000 F798             		jsr	(SpeedToPos).l
0001671A 0668 0030 0012             		addi.w	#$30,obVelY(a0)
00016720 0828 0006 0022             		btst	#6,obStatus(a0)
00016726 6700                       		beq.s	loc_1380C
00016728 0468 0020 0012             		subi.w	#$20,obVelY(a0)
0001672E                            
0001672E                            loc_1380C:
0001672E 6100 0000                  		bsr.w	Sonic_HurtStop
00016732 6100 F98A                  		bsr.w	Sonic_LevelBound
00016736 6100 EE1A                  		bsr.w	Sonic_RecordPosition
0001673A 6100 0000                  		bsr.w	Sonic_Animate
0001673E 6100 0000                  		bsr.w	Sonic_LoadGfx
00016742 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
00016748                            
00016748                            ; ---------------------------------------------------------------------------
00016748                            ; Subroutine to	stop Sonic falling after he's been hurt
00016748                            ; ---------------------------------------------------------------------------
00016748                            
00016748                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016748                            
00016748                            
00016748                            Sonic_HurtStop:
00016748 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0001674C 0640 00E0                  		addi.w	#$E0,d0
00016750                            		;cmp.w	obY(a0),d0
00016750                            		;bcs.w	KillSonic
00016750 6100 FD84                  		bsr.w	Sonic_Floor
00016754 0828 0001 0022             		btst	#1,obStatus(a0)
0001675A 6600                       		bne.s	locret_13860
0001675C 7000                       		moveq	#0,d0
0001675E 3140 0012                  		move.w	d0,obVelY(a0)
00016762 3140 0010                  		move.w	d0,obVelX(a0)
00016766 3140 0020                  		move.w	d0,obInertia(a0)
0001676A 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016770 5528 0024                  		subq.b	#2,obRoutine(a0)
00016774 317C 0078 0030             		move.w	#$78,$30(a0)
0001677A                            
0001677A                            locret_13860:
0001677A 4E75                       		rts	
0001677C                            ; End of function Sonic_HurtStop
0001677C                            
0001677C                            ; ---------------------------------------------------------------------------
0001677C                            ; Sonic	when he	dies
0001677C                            ; ---------------------------------------------------------------------------
0001677C                            
0001677C                            Sonic_Death:	; Routine 6
0001677C 6100 0000                  		bsr.w	GameOver
00016780 4EB9 0000 F760             		jsr	(ObjectFall).l
00016786 6100 EDCA                  		bsr.w	Sonic_RecordPosition
0001678A 6100 0000                  		bsr.w	Sonic_Animate
0001678E 6100 0000                  		bsr.w	Sonic_LoadGfx
00016792 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
00016798                            
00016798                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016798                            
00016798                            GameOver:
00016798 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0001679C 0640 0100                  		addi.w	#$100,d0
000167A0 B068 000C                  		cmp.w	obY(a0),d0
000167A4 6400 0000                  		bcc.w	locret_13900
000167A8 317C FFC8 0012             		move.w	#-$38,obVelY(a0)
000167AE 5428 0024                  		addq.b	#2,obRoutine(a0)
000167B2 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
000167B6 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update lives counter
000167BA 5338 FE12                  		subq.b	#1,(v_lives).w	; subtract 1 from number of lives
000167BE 6600                       		bne.s	loc_138D4
000167C0 317C 0000 003A             		move.w	#0,$3A(a0)
000167C6 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load GAME object
000167CC 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
000167D2 11FC 0001 D0DA             		move.b	#1,(v_objspace+$C0+obFrame).w ; set OVER object to correct frame
000167D8 4238 FE1A                  		clr.b	(f_timeover).w
000167DC                            
000167DC                            loc_138C2:
000167E6 7003                       		moveq	#3,d0
000167E8 4EF9 0000 173A             		jmp	(AddPLC).l	; load game over patterns
000167EE                            		
000167EE                            loc_138C3:
000167F8 7003                       		moveq	#3,d0
000167FA 4EF9 0000 173A             		jmp	(AddPLC).l	; load game over patterns
00016800                            ; ===========================================================================
00016800                            
00016800                            loc_138D4:
00016800 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00016806 4A38 FE1A                  		tst.b	(f_timeover).w	; is TIME OVER tag set?
0001680A 6700                       		beq.s	locret_13900	; if not, branch
0001680C 317C 0000 003A             		move.w	#0,$3A(a0)
00016812 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load TIME object
00016818 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
0001681E 11FC 0002 D09A             		move.b	#2,(v_objspace+$80+obFrame).w
00016824 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
0001682A 60B0                       		bra.s	loc_138C2
0001682C                            		
0001682C                            
0001682C                            ; ===========================================================================
0001682C                            
0001682C                            locret_13900:
0001682C 4E75                       		rts	
0001682E                            ; End of function GameOver
0001682E                            
0001682E                            ; ---------------------------------------------------------------------------
0001682E                            ; Sonic	when the level is restarted
0001682E                            ; ---------------------------------------------------------------------------
0001682E                            
0001682E                            Sonic_ResetLevel:; Routine 8
0001682E 4A68 003A                  		tst.w	$3A(a0)
00016832 6700                       		beq.s	locret_13914
00016834 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00016838 6600                       		bne.s	locret_13914
0001683A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
00016840                            
00016840                            	locret_13914:
00016840 4E75                       		rts	
00016840 4E75                       		rts	
00016842                            		include	"_incObj\Sonic Loops.asm"
00016842                            ; ---------------------------------------------------------------------------
00016842                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00016842                            ; ---------------------------------------------------------------------------
00016842                            
00016842                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016842                            
00016842                            
00016842                            Sonic_Loops:
00016842 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; is level SLZ ?
00016848 6700                       		beq.s	@isstarlight	; if yes, branch
0001684A 4A38 FE10                  		tst.b	(v_zone).w	; is level GHZ ?
0001684E 6600 0000                  		bne.w	@noloops	; if not, branch
00016852                            
00016852                            	@isstarlight:
00016852 3028 000C                  		move.w	obY(a0),d0
00016856 E248                       		lsr.w	#1,d0
00016858 0240 0380                  		andi.w	#$380,d0
0001685C 1228 0008                  		move.b	obX(a0),d1
00016860 0241 007F                  		andi.w	#$7F,d1
00016864 D041                       		add.w	d1,d0
00016866 43F8 A400                  		lea	(v_lvllayout).w,a1
0001686A 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
0001686E                            
0001686E B238 F7AE                  		cmp.b	(v_256roll1).w,d1 ; is Sonic on a "roll tunnel" tile?
00016872 6700 F906                  		beq.w	Sonic_ChkRoll	; if yes, branch
00016876 B238 F7AF                  		cmp.b	(v_256roll2).w,d1
0001687A 6700 F8FE                  		beq.w	Sonic_ChkRoll
0001687E                            
0001687E B238 F7AC                  		cmp.b	(v_256loop1).w,d1 ; is Sonic on a loop tile?
00016882 6700                       		beq.s	@chkifleft	; if yes, branch
00016884 B238 F7AD                  		cmp.b	(v_256loop2).w,d1
00016888 6700                       		beq.s	@chkifinair
0001688A 08A8 0006 0001             		bclr	#6,obRender(a0) ; return Sonic to high plane
00016890 4E75                       		rts	
00016892                            ; ===========================================================================
00016892                            
00016892                            @chkifinair:
00016892 0828 0001 0022             		btst	#1,obStatus(a0)	; is Sonic in the air?
00016898 6700                       		beq.s	@chkifleft	; if not, branch
0001689A                            
0001689A 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
000168A0 4E75                       		rts	
000168A2                            ; ===========================================================================
000168A2                            
000168A2                            @chkifleft:
000168A2 3428 0008                  		move.w	obX(a0),d2
000168A6 0C02 002C                  		cmpi.b	#$2C,d2
000168AA 6400                       		bcc.s	@chkifright
000168AC                            
000168AC 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
000168B2 4E75                       		rts	
000168B4                            ; ===========================================================================
000168B4                            
000168B4                            @chkifright:
000168B4 0C02 00E0                  		cmpi.b	#$E0,d2
000168B8 6500                       		bcs.s	@chkangle1
000168BA                            
000168BA 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
000168C0 4E75                       		rts	
000168C2                            ; ===========================================================================
000168C2                            
000168C2                            @chkangle1:
000168C2 0828 0006 0001             		btst	#6,obRender(a0) ; is Sonic on low plane?
000168C8 6600                       		bne.s	@chkangle2	; if yes, branch
000168CA                            
000168CA 1228 0026                  		move.b	obAngle(a0),d1
000168CE 6700                       		beq.s	@done
000168D0 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upside-down?
000168D4 6200                       		bhi.s	@done		; if yes, branch
000168D6 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
000168DC 4E75                       		rts	
000168DE                            ; ===========================================================================
000168DE                            
000168DE                            @chkangle2:
000168DE 1228 0026                  		move.b	obAngle(a0),d1
000168E2 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upright?
000168E6 6300                       		bls.s	@done		; if yes, branch
000168E8 08A8 0006 0001             		bclr	#6,obRender(a0)	; send Sonic to	high plane
000168EE                            
000168EE                            @noloops:
000168EE                            @done:
000168EE 4E75                       		rts	
000168F0                            ; End of function Sonic_Loops
000168F0                            ; End of function Sonic_Loops
000168F0                            		include	"_incObj\Sonic Animate.asm"
000168F0                            ; ---------------------------------------------------------------------------
000168F0                            ; Subroutine to	animate	Sonic's sprites
000168F0                            ; ---------------------------------------------------------------------------
000168F0                            
000168F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000168F0                            
000168F0                            
000168F0                            Sonic_Animate:				; XREF: Obj01_Control; et al
000168F0 43F9 0000 0000             		lea	(Ani_Sonic).l,a1
000168F6 4A38 FE19                          tst.b	(Super_Sonic_flag).w	    ; is sonic super?
000168FA 6700                       		beq.s	 Sonic_Animatecont	    ; if not, branch
000168FC 43F9 0000 0000             		lea	(Ani_SuperSonic).l,a1	
00016902                            
00016902                            Sonic_Animatecont:	
00016902 7000                       		moveq	#0,d0
00016904 1028 001C                  		move.b	obAnim(a0),d0
00016908 B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
0001690C 6700                       		beq.s	@do		; if not, branch
0001690E 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
00016912 4228 001B                  		clr.b	obAniFrame(a0) ; reset animation
00016916 4228 001E                  		clr.b	obTimeFrame(a0) ; reset frame duration
0001691A                            		
0001691A 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag	;Mercury Pushing While Walking Fix	;Mercury Constants
00016920                            
00016920                            	@do:
00016920 D040                       		add.w	d0,d0
00016922 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00016926 1011                       		move.b	(a1),d0
00016928 6B00                       		bmi.s	@walkrunroll	; if animation is walk/run/roll/jump, branch
0001692A 1228 0022                  		move.b	obStatus(a0),d1
0001692E 0201 0001                  		andi.b	#1,d1
00016932 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016938 8328 0001                  		or.b	d1,obRender(a0)
0001693C 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016940 6A00                       		bpl.s	@delay		; if time remains, branch
00016942 1140 001E                  		move.b	d0,obTimeFrame(a0) ; load frame duration
00016946                            
00016946                            @loadframe:
00016946 7200                       		moveq	#0,d1
00016948 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0001694C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00016950 0C00 00FD                  		cmp.b	#$FD,d0				; MJ: is it a flag from FD to FF?
00016954 6400 0000                  		bhs		@end_FF				; MJ: if so, branch to flag routines
00016958                            
00016958                            	@next:
00016958 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0001695C 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
00016960                            
00016960                            	@delay:
00016960 4E75                       		rts	
00016962                            ; ===========================================================================
00016962                            
00016962                            @end_FF:
00016962 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00016964 6600                       		bne.s	@end_FE		; if not, branch
00016966 4228 001B                  		clr.b	obAniFrame(a0) ; restart the animation
0001696A 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001696E 60E8                       		bra.s	@next
00016970                            ; ===========================================================================
00016970                            
00016970                            @end_FE:
00016970 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00016972 6600                       		bne.s	@end_FD		; if not, branch
00016974 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00016978 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0001697C 9200                       		sub.b	d0,d1
0001697E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00016982 60D4                       		bra.s	@next
00016984                            ; ===========================================================================
00016984                            
00016984                            @end_FD:
00016984 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00016986 6600                       		bne.s	@end		; if not, branch
00016988 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0001698E                            
0001698E                            	@end:
0001698E 4E75                       		rts	
00016990                            ; ===========================================================================
00016990                            
00016990                            @walkrunroll:
00016990 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016994 6ACA                       		bpl.s	@delay		; if time remains, branch
00016996 5200                       		addq.b	#1,d0		; is animation walking/running?
00016998 6600 0000                  		bne.w	@rolljump	; if not, branch
0001699C 7200                       		moveq	#0,d1
0001699E 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
000169A2 6B00                       		bmi.s	@ble 			; better handling of angles
000169A4 6700                       		beq.s	@ble
000169A6 5300                       		subq.b	#1,d0
000169A8                            
000169A8                            	@ble:																
000169A8 1428 0022                  		move.b	obStatus(a0),d2
000169AC 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
000169B0 6600                       		bne.s	@flip		; if yes, branch
000169B2 4600                       		not.b	d0		; reverse angle
000169B4                            
000169B4                            	@flip:
000169B4 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
000169B8 6A00                       		bpl.s	@noinvert	; if angle is $0-$7F, branch
000169BA 7203                       		moveq	#3,d1
000169BC                            
000169BC                            	@noinvert:
000169BC 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
000169C2 B302                       		eor.b	d1,d2
000169C4 8528 0001                  		or.b	d2,obRender(a0)
000169C8 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing something?	;Mercury Constants
000169CE 6600 0000                  		bne.w	@push		; if yes, branch
000169D2                            
000169D2 E808                       		lsr.b	#4,d0		; divide angle by $10
000169D4 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000169D8 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
000169DC 6A00                       		bpl.s	@nomodspeed
000169DE 4442                       		neg.w	d2		; modulus speed
000169E0                            
000169E0                            	@nomodspeed:
000169E0 4A38 FE19                  		tst.b	(Super_Sonic_flag).w		; is sonic super?
000169E4 6700                       		beq.s	@cont		; if not, branch
000169E6 43F9 0000 0000             		lea	(SuperSonAni_Run).l,a1 ; use	running	animation
000169EC 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000169F0 6400                       		bcc.s	@running	; if yes, branch
000169F2 43F9 0000 0000             		lea	(SuperSonAni_Walk).l,a1 ; use walking animation
000169F8                            	
000169F8                            	@cont:	
000169F8 43F9 0000 0000             		lea	(SonAni_MaxRun).l,a1 ; use Dashing animation
000169FE 0C42 0A00                  		cmpi.w	#$A00,d2	; is Sonic at Dashing speed?
00016A02 6400                       		bcc.s	@running	; if yes, branch
00016A04                            
00016A04 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00016A0A 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00016A0E 6400                       		bcc.s	@running	; if yes, branch
00016A10                            
00016A10 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00016A16                            
00016A16                            	@running:
00016A16 D000                       		add.b	d0,d0
00016A18 D000                       		add.b	d0,d0
00016A1A 1600                       		move.b	d0,d3
00016A1C 4442                       		neg.w	d2
00016A1E 0642 0780                  		addi.w	#$780,d2
00016A22 6A00                       		bpl.s	@belowmax
00016A24 7400                       		moveq	#0,d2		; max animation speed
00016A26 6000                       		bra.s	@belowmax
00016A28                            
00016A28                            	@maxrunning:
00016A28 D000                       		add.b d0,d0
00016A2A 1600                       		move.b d0,d3
00016A2C 4442                       		neg.w d2
00016A2E 0642 0800                  		addi.w #$800, d2
00016A32 6A00                       		bpl.s @belowmax
00016A34 7400                       		moveq #0, d2 
00016A36                            
00016A36                            	@belowmax:
00016A36 E04A                       		lsr.w	#8,d2
00016A38 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016A3C 6100 FF08                  		bsr.w	@loadframe
00016A40 D728 001A                  		add.b	d3,obFrame(a0)	; modify frame number
00016A44 4E75                       		rts	
00016A46                            ; ===========================================================================
00016A46                            
00016A46                            @rolljump:
00016A46 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00016A48 6600                       		bne.s	@push		; if not, branch
00016A4A 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016A4E 6A00                       		bpl.s	@nomodspeed2
00016A50 4442                       		neg.w	d2
00016A52                            
00016A52                            	@nomodspeed2:
00016A52 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00016A58 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00016A5C 6400                       		bcc.s	@rollfast	; if yes, branch
00016A5E 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00016A64                            
00016A64                            	@rollfast:
00016A64 4442                       		neg.w	d2
00016A66 0642 0400                  		addi.w	#$400,d2
00016A6A 6A00                       		bpl.s	@belowmax2
00016A6C 7400                       		moveq	#0,d2
00016A6E                            
00016A6E                            	@belowmax2:
00016A6E E04A                       		lsr.w	#8,d2
00016A70 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016A74 1228 0022                  		move.b	obStatus(a0),d1
00016A78 0201 0001                  		andi.b	#1,d1
00016A7C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016A82 8328 0001                  		or.b	d1,obRender(a0)
00016A86 6000 FEBE                  		bra.w	@loadframe
00016A8A                            ; ===========================================================================
00016A8A                            
00016A8A                            @push:
00016A8A 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016A8E 6B00                       		bmi.s	@negspeed
00016A90 4442                       		neg.w	d2
00016A92                            
00016A92                            	@negspeed:
00016A92 0642 0800                  		addi.w	#$800,d2
00016A96 6A00                       		bpl.s	@belowmax3	
00016A98 7400                       		moveq	#0,d2
00016A9A                            
00016A9A                            	@belowmax3:
00016A9A EC4A                       		lsr.w	#6,d2
00016A9C 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016AA0 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00016AA6 1228 0022                  		move.b	obStatus(a0),d1
00016AAA 0201 0001                  		andi.b	#1,d1
00016AAE 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016AB4 8328 0001                  		or.b	d1,obRender(a0)
00016AB8 6000 FE8C                  		bra.w	@loadframe
00016ABC                            
00016ABC                            ; End of function Sonic_Animate
00016ABC                            ; End of function Sonic_Animate
00016ABC                            		include	"_anim\Sonic.asm"
00016ABC                            ; ---------------------------------------------------------------------------
00016ABC                            ; Animation script - Sonic
00016ABC                            ; ---------------------------------------------------------------------------
00016ABC                            Ani_Sonic:
00016ABC                            
00016ABC 0000                       ptr_Walk:	dc.w SonAni_Walk-Ani_Sonic
00016ABE 0000                       ptr_Run:	dc.w SonAni_Run-Ani_Sonic
00016AC0 0000                       ptr_Roll:	dc.w SonAni_Roll-Ani_Sonic
00016AC2 0000                       ptr_Roll2:	dc.w SonAni_Roll2-Ani_Sonic
00016AC4 0000                       ptr_Push:	dc.w SonAni_Push-Ani_Sonic
00016AC6 0000                       ptr_Wait:	dc.w SonAni_Wait-Ani_Sonic
00016AC8 0000                       ptr_Balance:	dc.w SonAni_Balance-Ani_Sonic
00016ACA 0000                       ptr_LookUp:	dc.w SonAni_LookUp-Ani_Sonic
00016ACC 0000                       ptr_Duck:	dc.w SonAni_Duck-Ani_Sonic
00016ACE 0000                       ptr_Warp1:	dc.w SonAni_Warp1-Ani_Sonic
00016AD0 0000                       ptr_Warp2:	dc.w SonAni_Warp2-Ani_Sonic
00016AD2 0000                       ptr_Warp3:	dc.w SonAni_Warp3-Ani_Sonic
00016AD4 0000                       ptr_Warp4:	dc.w SonAni_Warp4-Ani_Sonic
00016AD6 0000                       ptr_Stop:	dc.w SonAni_Stop-Ani_Sonic
00016AD8 0000                       ptr_Float1:	dc.w SonAni_Float1-Ani_Sonic
00016ADA 0000                       ptr_Float2:	dc.w SonAni_Float2-Ani_Sonic
00016ADC 0000                       ptr_Spring:	dc.w SonAni_Spring-Ani_Sonic
00016ADE 0000                       ptr_Hang:	dc.w SonAni_Hang-Ani_Sonic
00016AE0 0000                       ptr_Leap1:	dc.w SonAni_Leap1-Ani_Sonic
00016AE2 0000                       ptr_Leap2:	dc.w SonAni_Leap2-Ani_Sonic
00016AE4 0000                       ptr_Surf:	dc.w SonAni_Surf-Ani_Sonic
00016AE6 0000                       ptr_GetAir:	dc.w SonAni_GetAir-Ani_Sonic
00016AE8 0000                       ptr_Burnt:	dc.w SonAni_Burnt-Ani_Sonic
00016AEA 0000                       ptr_Drown:	dc.w SonAni_Drown-Ani_Sonic
00016AEC 0000                       ptr_Death:	dc.w SonAni_Death-Ani_Sonic
00016AEE 0000                       ptr_Hurt:	dc.w SonAni_Hurt-Ani_Sonic
00016AF0 0000                       ptr_WaterSlide:	dc.w SonAni_WaterSlide-Ani_Sonic
00016AF2 0000                       ptr_Null:	dc.w SonAni_Null-Ani_Sonic
00016AF4 0000                       ptr_Float3:	dc.w SonAni_Float3-Ani_Sonic
00016AF6 0000                       ptr_Float4:	dc.w SonAni_Float4-Ani_Sonic
00016AF8 0000                       ptr_MaxRun:	dc.w SonAni_MaxRun-Ani_Sonic
00016AFA 0000                       ptr_Spindash:	dc.w SonAni_SpinDash-Ani_Sonic ;1F
00016AFC 0000                       ptr_Hurt2:	dc.w SonAni_Hurt2-Ani_Sonic
00016AFE 0000                       ptr_GetUp:	dc.w SonAni_GetUp-Ani_Sonic
00016B00 0000                       ptr_Blink:	dc.w SonAni_Blink-Ani_Sonic
00016B02 0000                       ptr_Sit:	dc.w SonAni_Sit-Ani_Sonic
00016B04 0000                       ptr_Peelout:	dc.w SonAni_Peelout-Ani_Sonic
00016B06 0000                       ptr_Hang2:	dc.w SonAni_Hang2-Ani_Sonic
00016B08 0000                       ptr_GetAir2:	dc.w SonAni_GetAir2-Ani_Sonic
00016B0A 0000                       ptr_Transform:	dc.w SonAni_Transform-Ani_Sonic
00016B0C                            
00016B0C FF10 1112 1314 150E 0FFF+  SonAni_Walk:	dc.b $FF, fr_walk13, fr_walk14,	fr_walk15, fr_walk16, fr_walk17, fr_walk18, fr_walk11, fr_walk12, afEnd, afEnd, afEnd, afEnd
00016B1A 00                         		even
00016B1A FF2E 2F30 3132 3334 35FF+  SonAni_Run:	dc.b $FF, fr_run11,  fr_run12,  fr_run13,  fr_run14, fr_run15,  fr_run16,  fr_run17,  fr_run18, afEnd, afEnd, afEnd, afEnd
00016B28 00                         		even
00016B28 FE5E 5F60 6162 66          SonAni_Roll:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016B2F 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016B36 00                         		even
00016B36 FE5E 5F60 6162 66          SonAni_Roll2:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016B3D 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016B44 00                         		even
00016B44 0D89 8A8B 8C8D 8E8F 90FF+  SonAni_Push:	dc.b $D,  fr_push1,  fr_push2,  fr_push3,  fr_push4, fr_push5,  fr_push6,  fr_push7,  fr_push8, afEnd, afEnd, afEnd, afEnd
00016B52 00                         		even
00016B52                            SonAni_Wait:	
00016B52 0501 0101 0101 0101 0102+  		dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016B61 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016B70 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016B7F 0203 0303 0404 0505 0506+  		dc.b   2,  3,  3,  3,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  7
00016B8E 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016B9D 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016BAC 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016BBB 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016BCA 0808 0909 0A0A FE04        		dc.b   8,  8,  9,  9,  $A, $A, $FE, 4
00016BD2                            		even
00016BD2 0F72 7374 75FF             SonAni_Balance:	dc.b $F, fr_balance1, fr_balance2, fr_balance3, fr_balance4, afEnd
00016BD8                            		even
00016BD8 030C 0DFE 01               SonAni_LookUp:	dc.b $3, fr_lookup1, fr_lookup2, afBack, 1
00016BDE 00                         		even
00016BDE 0270 71FE 01               SonAni_Duck:	dc.b $2, fr_duck2, fr_duck, afBack, 1
00016BE4 00                         		even
00016BE4 3F67 FF                    SonAni_Warp1:	dc.b $3F, fr_warp1, afEnd
00016BE8 00                         		even
00016BE8 3F68 FF                    SonAni_Warp2:	dc.b $3F, fr_warp2, afEnd
00016BEC 00                         		even
00016BEC 3F69 FF                    SonAni_Warp3:	dc.b $3F, fr_warp3, afEnd
00016BF0 00                         		even
00016BF0 3F6A FF                    SonAni_Warp4:	dc.b $3F, fr_warp4, afEnd
00016BF4 00                         		even
00016BF4 026B 6C6C 6D6D 6E6E FD00   SonAni_Stop:	dc.b 2,	fr_stop1, fr_stop2, fr_stop2, fr_stop3, fr_stop3, fr_stop4, fr_stop4, $FD,  0
00016BFE                            		even
00016BFE 077C 82FE 02               SonAni_Float1:	dc.b 7,	fr_float1, fr_float4, afBack, 2
00016C04 00                         		even
00016C04 037C 7D7E 7F80 817B FF     SonAni_Float2:	dc.b 3,	fr_float1, fr_float7, fr_float2, fr_float8, fr_float5, fr_float3, fr_float6, afEnd
00016C0E 00                         		even
00016C0E 0783 8483 8483 84FD 00     SonAni_Spring:	dc.b 7, fr_spring, fr_spring2, fr_spring, fr_spring2, fr_spring, fr_spring2, afChange, id_Walk
00016C18 00                         		even
00016C18 0485 86FF                  SonAni_Hang:	dc.b 4,	fr_hang1, fr_hang2, afEnd
00016C1C                            		even
00016C1C 036F 8888 8888 8888 6F87+  SonAni_Leap1:	dc.b $3, fr_leap3, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap3, fr_leap1, afBack, 1
00016C28                            		even
00016C28 0D87 FD00                  SonAni_Leap2:	dc.b $D, fr_leap1, afChange, id_Leap1
00016C2C                            		even
00016C2C 3F91 FF                    SonAni_Surf:	dc.b $3F, fr_surf, afEnd
00016C30 00                         		even
00016C30 0B95 FD00                  SonAni_GetAir:	dc.b $B, fr_getair, afChange, id_GetAir2
00016C34                            		even
00016C34 2092 FF                    SonAni_Burnt:	dc.b $20, fr_burnt, afEnd
00016C38 00                         		even
00016C38 2F93 FF                    SonAni_Drown:	dc.b $2F, fr_drown, afEnd
00016C3C 00                         		even
00016C3C 0394 FF                    SonAni_Death:	dc.b 3,	fr_death, afEnd
00016C40 00                         		even
00016C40 0396 FF                    SonAni_Hurt:	dc.b 3,	fr_injury, afEnd
00016C44 00                         		even
00016C44                            SonAni_WaterSlide:
00016C44 0796 97FF                  		dc.b 7, fr_injury, fr_waterslide, afEnd
00016C48                            		even
00016C48 7700 FD00                  SonAni_Null:	dc.b $77, fr_null, afChange, id_Walk
00016C4C                            		even
00016C4C 037C 7E80 817B FF          SonAni_Float3:	dc.b 3,	fr_float1, fr_float2, fr_float5, fr_float3, fr_float6, afEnd
00016C54 00                         		even
00016C54 037C FD00                  SonAni_Float4:	dc.b 3,	fr_float1, afChange, id_Walk
00016C58                            		even
00016C58 FF4E 4F50 51FF FFFF FFFF+  SonAni_MaxRun:  dc.b $FF, fr_peelout11, fr_peelout12, fr_peelout13, fr_peelout14, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd
00016C66 00                         		even
00016C66 009B 9C9B 9D9B 9E9B 9F9B+  SonAni_SpinDash: dc.b 0, fr_Spindash1, fr_spindash2, fr_spindash1, fr_spindash3, fr_spindash1, fr_spindash4, fr_spindash1, fr_spindash5, fr_spindash1, fr_spindash6, afEnd
00016C72                            		even
00016C72 0298 9699 FF               SonAni_Hurt2:	dc.b 2, fr_skele1, fr_injury, fr_skele2, afEnd	
00016C78 00                         		even
00016C78 030B FD00                  SonAni_GetUp:	dc.b 3, $B,$FD,  0
00016C7C                            		even
00016C7C 0102 FD00                  SonAni_Blink:	dc.b   1,  2,$FD,  0
00016C80                            		even
00016C80 0808 0909 0A0A 09FE 05     SonAni_Sit:	dc.b   8, 8, 9, 9, $A, $A,  9, $FE, 5
00016C8A 00                         		even
00016C8A 000E 0E0E 0E0E 0E0F 0F     SonAni_Peelout: dc.b 	0, $E, $E, $E, $E, $E, $E, $F, $F
00016C93 0F0F 1010 1111 1213        		dc.b	$F, $F, $10, $10, $11, $11, $12, $13
00016C9B 1415 2E2F 3031 32          		dc.b	$14, $15, $2E, $2F, $30, $31, $32
00016CA2 3334 35                    		dc.b	$33, $34, $35
00016CA5 4E4F 5051 FE04 FE          		dc.b	$4E, $4F, $50,  $51, -2, 4, $FE
00016CAC                            		even
00016CAC 137A 7879 78FF             SonAni_Hang2:	dc.b $13, fr_vhang3, fr_vhang1, fr_vhang2, fr_vhang1, $FF	
00016CB2                            		even
00016CB2 0576 FD00                  SonAni_GetAir2: dc.b $5, fr_getair2, afChange, id_Roll
00016CB6                            		even
00016CB6                            SonAni_Transform:
00016CB6 02A1 A1A2 A3A3 A4A4 A4A5   				dc.b 2, $A1,$A1,$A2,$A3,$A3,$A4,$A4,$A4,$A5
00016CC0 A6A5 A7A7 A9A8 A9A8 A9A8+  		dc.b	$A6,$A5,$A7,$A7,$A9,$A8,$A9,$A8,$A9,$A8, afchange, id_Walk
00016CCC                            		even
00016CCC                            
00016CCC =00000000                  id_Walk:	equ (ptr_Walk-Ani_Sonic)/2	; 0
00016CCC =00000001                  id_Run:		equ (ptr_Run-Ani_Sonic)/2	; 1
00016CCC =00000002                  id_Roll:	equ (ptr_Roll-Ani_Sonic)/2	; 2
00016CCC =00000003                  id_Roll2:	equ (ptr_Roll2-Ani_Sonic)/2	; 3
00016CCC =00000004                  id_Push:	equ (ptr_Push-Ani_Sonic)/2	; 4
00016CCC =00000005                  id_Wait:	equ (ptr_Wait-Ani_Sonic)/2	; 5
00016CCC =00000006                  id_Balance:	equ (ptr_Balance-Ani_Sonic)/2	; 6
00016CCC =00000007                  id_LookUp:	equ (ptr_LookUp-Ani_Sonic)/2	; 7
00016CCC =00000008                  id_Duck:	equ (ptr_Duck-Ani_Sonic)/2	; 8
00016CCC =00000009                  id_Warp1:	equ (ptr_Warp1-Ani_Sonic)/2	; 9
00016CCC =0000000A                  id_Warp2:	equ (ptr_Warp2-Ani_Sonic)/2	; $A
00016CCC =0000000B                  id_Warp3:	equ (ptr_Warp3-Ani_Sonic)/2	; $B
00016CCC =0000000C                  id_Warp4:	equ (ptr_Warp4-Ani_Sonic)/2	; $C
00016CCC =0000000D                  id_Stop:	equ (ptr_Stop-Ani_Sonic)/2	; $D
00016CCC =0000000E                  id_Float1:	equ (ptr_Float1-Ani_Sonic)/2	; $E
00016CCC =0000000F                  id_Float2:	equ (ptr_Float2-Ani_Sonic)/2	; $F
00016CCC =00000010                  id_Spring:	equ (ptr_Spring-Ani_Sonic)/2	; $10
00016CCC =00000011                  id_Hang:	equ (ptr_Hang-Ani_Sonic)/2	; $11
00016CCC =00000012                  id_Leap1:	equ (ptr_Leap1-Ani_Sonic)/2	; $12
00016CCC =00000013                  id_Leap2:	equ (ptr_Leap2-Ani_Sonic)/2	; $13
00016CCC =00000014                  id_Surf:	equ (ptr_Surf-Ani_Sonic)/2	; $14
00016CCC =00000015                  id_GetAir:	equ (ptr_GetAir-Ani_Sonic)/2	; $15
00016CCC =00000016                  id_Burnt:	equ (ptr_Burnt-Ani_Sonic)/2	; $16
00016CCC =00000017                  id_Drown:	equ (ptr_Drown-Ani_Sonic)/2	; $17
00016CCC =00000018                  id_Death:	equ (ptr_Death-Ani_Sonic)/2	; $18
00016CCC =00000019                  id_Hurt:	equ (ptr_Hurt-Ani_Sonic)/2	; $19
00016CCC =0000001A                  id_WaterSlide:	equ (ptr_WaterSlide-Ani_Sonic)/2 ; $1A
00016CCC =0000001B                  id_Null:	equ (ptr_Null-Ani_Sonic)/2	; $1B
00016CCC =0000001C                  id_Float3:	equ (ptr_Float3-Ani_Sonic)/2	; $1C
00016CCC =0000001D                  id_Float4:	equ (ptr_Float4-Ani_Sonic)/2	; $1D
00016CCC =0000001E                  id_MaxRun:	equ (ptr_MaxRun-Ani_Sonic)/2	; $1E
00016CCC =0000001F                  id_Spindash:	equ (ptr_Spindash-Ani_Sonic)/2	; $1F
00016CCC =00000020                  id_Hurt2:	equ (ptr_Hurt2-Ani_Sonic)/2	; $21
00016CCC =00000021                  id_GetUp:	equ (ptr_GetUp-Ani_Sonic)/2	; $22
00016CCC =00000022                  id_Blink:	equ (ptr_Blink-Ani_Sonic)/2	; $23
00016CCC =00000023                  id_Sit:		equ (ptr_Sit-Ani_Sonic)/2	; $24
00016CCC =00000024                  id_Peelout:	equ (ptr_Peelout-Ani_Sonic)/2	; $25
00016CCC =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
00016CCC =00000026                  id_GetAir2:	equ (ptr_GetAir2-Ani_Sonic)/2
00016CCC =00000027                  id_Transform:		equ	(ptr_Transform-Ani_Sonic)/2
00016CCC =00000027                  id_Transform:		equ	(ptr_Transform-Ani_Sonic)/2
00016CCC                            		include	"_anim\Super Sonic.asm"		
00016CCC                            ; ---------------------------------------------------------------------------
00016CCC                            ; Animation script - Super Sonic
00016CCC                            ; ---------------------------------------------------------------------------
00016CCC                            Ani_SuperSonic:
00016CCC                            
00016CCC 0000                       ptr_SuperWalk:	dc.w SuperSonAni_Walk-Ani_SuperSonic
00016CCE 0000                       ptr_SuperRun:	dc.w SuperSonAni_Run-Ani_SuperSonic
00016CD0 0000                       ptr_SuperRoll:	dc.w SuperSonAni_Roll-Ani_Sonic
00016CD2 0000                       ptr_SuperRoll2:	dc.w SuperSonAni_Roll2-Ani_Sonic
00016CD4 0000                       ptr_SuperPush:	dc.w SuperSonAni_Push-Ani_SuperSonic
00016CD6 0000                       ptr_SuperWait:	dc.w SuperSonAni_Wait-Ani_SuperSonic
00016CD8 0000                       ptr_SuperBalance:	dc.w SuperSonAni_Balance-Ani_SuperSonic
00016CDA 0000                       ptr_SuperLookUp:	dc.w SuperSonAni_LookUp-Ani_SuperSonic
00016CDC 0000                       ptr_SuperDuck:	dc.w SuperSonAni_Duck-Ani_SuperSonic
00016CDE 0000                       ptr_SuperWarp1:	dc.w SuperSonAni_Warp1-Ani_Sonic
00016CE0 0000                       ptr_SuperWarp2:	dc.w SuperSonAni_Warp2-Ani_Sonic
00016CE2 0000                       ptr_SuperWarp3:	dc.w SuperSonAni_Warp3-Ani_Sonic
00016CE4 0000                       ptr_SuperWarp4:	dc.w SuperSonAni_Warp4-Ani_Sonic
00016CE6 0000                       ptr_SuperStop:	dc.w SuperSonAni_Stop-Ani_SuperSonic
00016CE8 0000                       ptr_SuperFloat1:	dc.w SuperSonAni_Float1-Ani_SuperSonic
00016CEA 0000                       ptr_SuperFloat2:	dc.w SuperSonAni_Float2-Ani_SuperSonic
00016CEC 0000                       ptr_SuperSpring:	dc.w SuperSonAni_Spring-Ani_SuperSonic
00016CEE 0000                       ptr_SuperHang:	dc.w SuperSonAni_Hang-Ani_SuperSonic
00016CF0 0000                       ptr_SuperLeap1:	dc.w SuperSonAni_Leap1-Ani_Sonic
00016CF2 0000                       ptr_SuperLeap2:	dc.w SuperSonAni_Leap2-Ani_Sonic
00016CF4 0000                       ptr_SuperSurf:	dc.w SuperSonAni_Surf-Ani_SuperSonic
00016CF6 0000                       ptr_SuperGetAir:	dc.w SuperSonAni_GetAir-Ani_SuperSonic
00016CF8 0000                       ptr_SuperBurnt:	dc.w SuperSonAni_Burnt-Ani_Sonic
00016CFA 0000                       ptr_SuperDrown:	dc.w SuperSonAni_Drown-Ani_Sonic
00016CFC 0000                       ptr_SuperDeath:	dc.w SuperSonAni_Death-Ani_Sonic
00016CFE 0000                       ptr_SuperHurt:	dc.w SuperSonAni_Hurt-Ani_Sonic
00016D00 0000                       ptr_SuperWaterSlide:	dc.w SuperSonAni_WaterSlide-Ani_Sonic
00016D02 0000                       ptr_SuperNull:	dc.w SuperSonAni_Null-Ani_Sonic
00016D04 0000                       ptr_SuperFloat3:	dc.w SuperSonAni_Float3-Ani_SuperSonic
00016D06 0000                       ptr_SuperFloat4:	dc.w SuperSonAni_Float4-Ani_SuperSonic
00016D08 0000                       ptr_SuperMaxRun:	dc.w SuperSonAni_MaxRun-Ani_SuperSonic
00016D0A 0000                       ptr_SuperSpindash:	dc.w SuperSonAni_SpinDash-Ani_Sonic ;1F
00016D0C 0000                       ptr_SuperHurt2:	dc.w SuperSonAni_Hurt2-Ani_Sonic
00016D0E 0000                       ptr_SuperGetUp:	dc.w SuperSonAni_GetUp-Ani_Sonic
00016D10 0000                       ptr_SuperBlink:	dc.w SuperSonAni_Blink-Ani_SuperSonic
00016D12 0000                       ptr_SuperSit:	dc.w SuperSonAni_Sit-Ani_Sonic
00016D14 0000                       ptr_SuperPeelout:	dc.w SuperSonAni_Peelout-Ani_SuperSonic
00016D16 0000                       ptr_SuperHang2:	dc.w SuperSonAni_Hang2-Ani_SuperSonic
00016D18 0000                       ptr_SuperTransform:	dc.w SuperSonAni_Transform-Ani_SuperSonic
00016D1A                            
00016D1A FF10 1112 1314 150E 0FFF+  SuperSonAni_Walk:	dc.b $FF, fr_walk13, fr_walk14,	fr_walk15, fr_walk16, fr_walk17, fr_walk18, fr_walk11, fr_walk12, afEnd, afEnd, afEnd, afEnd
00016D28 00                         		even
00016D28 FF2E 2F30 3132 3334 35FF+  SuperSonAni_Run:	dc.b $FF, fr_run11,  fr_run12,  fr_run13,  fr_run14, fr_run15,  fr_run16,  fr_run17,  fr_run18, afEnd, afEnd, afEnd, afEnd
00016D36 00                         		even
00016D36 FE5E 5F60 6162 66          SuperSonAni_Roll:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016D3D 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016D44 00                         		even
00016D44 FE5E 5F60 6162 66          SuperSonAni_Roll2:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016D4B 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016D52 00                         		even
00016D52 FD89 8A8B 8C8D 8E8F 90FF+  SuperSonAni_Push:	dc.b $FD,  fr_push1,  fr_push2,  fr_push3,  fr_push4, fr_push5,  fr_push6,  fr_push7,  fr_push8, afEnd, afEnd, afEnd, afEnd
00016D60 00                         		even
00016D60                            SuperSonAni_Wait:	
00016D60 0501 0101 0101 0101 0102+  		dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016D6F 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016D7E 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016D8D 0203 0303 0404 0505 0506+  		dc.b   2,  3,  3,  3,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  7
00016D9C 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016DAB 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016DBA 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016DC9 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016DD8 0808 0909 0A0A FE04        		dc.b   8,  8,  9,  9,  $A, $A, $FE, 4
00016DE0                            		even
00016DE0 0F72 7374 75FF             SuperSonAni_Balance:	dc.b $F, fr_balance1, fr_balance2, fr_balance3, fr_balance4, afEnd
00016DE6                            		even
00016DE6 030C 0DFE 01               SuperSonAni_LookUp:	dc.b $3, fr_lookup1, fr_lookup2, afBack, 1
00016DEC 00                         		even
00016DEC 0270 71FE 01               SuperSonAni_Duck:	dc.b $2, fr_duck2, fr_duck, afBack, 1
00016DF2 00                         		even
00016DF2 3F67 FF                    SuperSonAni_Warp1:	dc.b $3F, fr_warp1, afEnd
00016DF6 00                         		even
00016DF6 3F68 FF                    SuperSonAni_Warp2:	dc.b $3F, fr_warp2, afEnd
00016DFA 00                         		even
00016DFA 3F69 FF                    SuperSonAni_Warp3:	dc.b $3F, fr_warp3, afEnd
00016DFE 00                         		even
00016DFE 3F6A FF                    SuperSonAni_Warp4:	dc.b $3F, fr_warp4, afEnd
00016E02 00                         		even
00016E02 026B 6C6C 6D6D 6E6E FD00   SuperSonAni_Stop:	dc.b 2,	fr_stop1, fr_stop2, fr_stop2, fr_stop3, fr_stop3, fr_stop4, fr_stop4, $FD,  0
00016E0C                            		even
00016E0C 077C 82FE 02               SuperSonAni_Float1:	dc.b 7,	fr_float1, fr_float4, afBack, 2
00016E12 00                         		even
00016E12 037C 7D7E 7F80 817B FF     SuperSonAni_Float2:	dc.b 3,	fr_float1, fr_float7, fr_float2, fr_float8, fr_float5, fr_float3, fr_float6, afEnd
00016E1C 00                         		even
00016E1C 0783 8483 8483 84FD 00     SuperSonAni_Spring:	dc.b 7, fr_spring, fr_spring2, fr_spring, fr_spring2, fr_spring, fr_spring2, afChange, id_Walk
00016E26 00                         		even
00016E26 0485 86FF                  SuperSonAni_Hang:	dc.b 4,	fr_hang1, fr_hang2, afEnd
00016E2A                            		even
00016E2A 0F87 8787 FE01             SuperSonAni_Leap1:	dc.b $F, fr_leap1, fr_leap1, fr_leap1,	afBack, 1
00016E30                            		even
00016E30 0F87 88FE 01               SuperSonAni_Leap2:	dc.b $F, fr_leap1, fr_leap2, afBack, 1
00016E36 00                         		even
00016E36 3F91 FF                    SuperSonAni_Surf:	dc.b $3F, fr_surf, afEnd
00016E3A 00                         		even
00016E3A 0B95 9512 13FD 00          SuperSonAni_GetAir:	dc.b $B, fr_getair, fr_getair, fr_walk15, fr_walk16, afChange, id_Walk
00016E42 00                         		even
00016E42 2092 FF                    SuperSonAni_Burnt:	dc.b $20, fr_burnt, afEnd
00016E46 00                         		even
00016E46 2F93 FF                    SuperSonAni_Drown:	dc.b $2F, fr_drown, afEnd
00016E4A 00                         		even
00016E4A 0394 FF                    SuperSonAni_Death:	dc.b 3,	fr_death, afEnd
00016E4E 00                         		even
00016E4E 0396 FF                    SuperSonAni_Hurt:	dc.b 3,	fr_injury, afEnd
00016E52 00                         		even
00016E52                            SuperSonAni_WaterSlide:
00016E52 0796 97FF                  		dc.b 7, fr_injury, fr_waterslide, afEnd
00016E56                            		even
00016E56 7700 FD00                  SuperSonAni_Null:	dc.b $77, fr_null, afChange, id_Walk
00016E5A                            		even
00016E5A 037C 7E80 817B FF          SuperSonAni_Float3:	dc.b 3,	fr_float1, fr_float2, fr_float5, fr_float3, fr_float6, afEnd
00016E62 00                         		even
00016E62 037C FD00                  SuperSonAni_Float4:	dc.b 3,	fr_float1, afChange, id_Walk
00016E66                            		even
00016E66 FF4E 4F50 51FF FFFF FFFF+  SuperSonAni_MaxRun:  dc.b $FF, fr_peelout11, fr_peelout12, fr_peelout13, fr_peelout14, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd
00016E74 00                         		even
00016E74 009B 9C9B 9D9B 9E9B 9F9B+  SuperSonAni_SpinDash: dc.b 0, fr_Spindash1, fr_spindash2, fr_spindash1, fr_spindash3, fr_spindash1, fr_spindash4, fr_spindash1, fr_spindash5, fr_spindash1, fr_spindash6, afEnd
00016E80                            		even
00016E80 0298 9699 FF               SuperSonAni_Hurt2:	dc.b 2, fr_skele1, fr_injury, fr_skele2, afEnd	
00016E86 00                         		even
00016E86 030B FD00                  SuperSonAni_GetUp:	dc.b 3, $B,$FD,  0
00016E8A                            		even
00016E8A 0102 FD00                  SuperSonAni_Blink:	dc.b   1,  2,$FD,  0
00016E8E                            		even
00016E8E 0808 0909 0A0A 09FE 05     SuperSonAni_Sit:	dc.b   8, 8, 9, 9, $A, $A,  9, $FE, 5
00016E98 00                         		even
00016E98 000E 0E0E 0E0E 0E0F 0F     SuperSonAni_Peelout: dc.b 	0, $E, $E, $E, $E, $E, $E, $F, $F
00016EA1 0F0F 1010 1111 1213        		dc.b	$F, $F, $10, $10, $11, $11, $12, $13
00016EA9 1415 2E2F 3031 32          		dc.b	$14, $15, $2E, $2F, $30, $31, $32
00016EB0 3334 35                    		dc.b	$33, $34, $35
00016EB3 4E4F 5051 FE04 FE          		dc.b	$4E, $4F, $50,  $51, -2, 4, $FE
00016EBA                            		even
00016EBA 137A 7879 78FF             SuperSonAni_Hang2:	dc.b $13, fr_vhang3, fr_vhang1, fr_vhang2, fr_vhang1, $FF	
00016EC0                            		even
00016EC0                            SuperSonAni_Transform:
00016EC0 02A1 A1A2 A3A3 A4A4 A4A5   				dc.b 2, $A1,$A1,$A2,$A3,$A3,$A4,$A4,$A4,$A5
00016ECA A6A5 A7A7 A9A8 A9A8 A9A8+  		dc.b	$A6,$A5,$A7,$A7,$A9,$A8,$A9,$A8,$A9,$A8, afchange, id_Walk
00016ED6                            		even		
00016ED6                            		even		
00016ED6                            		include	"_incObj\Sonic LoadGfx.asm"
00016ED6                            ; ---------------------------------------------------------------------------
00016ED6                            ; Sonic	graphics loading subroutine
00016ED6                            ; ---------------------------------------------------------------------------
00016ED6                            
00016ED6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016ED6                            
00016ED6                            
00016ED6                            Sonic_LoadGfx:			; XREF: Obj01_Control; et al
00016ED6 7000                       		moveq	#0,d0
00016ED8 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00016EDC B038 F766                  		cmp.b	($FFFFF766).w,d0
00016EE0 6700                       		beq.s	locret_13C96
00016EE2 11C0 F766                  		move.b	d0,($FFFFF766).w
00016EE6 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00016EEC D040                       		add.w	d0,d0
00016EEE D4F2 0000                  		adda.w	(a2,d0.w),a2
00016EF2 7A00                       		moveq	#0,d5
00016EF4 1A1A                       		move.b	(a2)+,d5
00016EF6 5345                       		subq.w	#1,d5
00016EF8 6B00                       		bmi.s	locret_13C96
00016EFA 383C F000                  		move.w	#$F000,d4
00016EFE 2C3C 0000 0000             		move.l	#Art_Sonic,d6
00016F04                            
00016F04                            SPLC_ReadEntry:
00016F04 7200                       		moveq	#0,d1
00016F06 121A                       		move.b	(a2)+,d1
00016F08 E149                       		lsl.w	#8,d1
00016F0A 121A                       		move.b	(a2)+,d1
00016F0C 3601                       		move.w	d1,d3
00016F0E E04B                       		lsr.w	#8,d3
00016F10 0243 00F0                  		andi.w	#$F0,d3
00016F14 0643 0010                  		addi.w	#$10,d3
00016F18 0241 0FFF                  		andi.w	#$FFF,d1
00016F1C EB89                       		lsl.l	#5,d1
00016F1E D286                       		add.l	d6,d1
00016F20 3404                       		move.w	d4,d2
00016F22 D843                       		add.w	d3,d4
00016F24 D843                       		add.w	d3,d4
00016F26 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
00016F2C 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
00016F30                            
00016F30                            locret_13C96:
00016F30 4E75                       		rts	
00016F32                            ; End of function Sonic_LoadGfx
00016F32                            ; End of function Sonic_LoadGfx
00016F32                            
00016F32                            		include	"_incObj\0A Drowning Countdown.asm"
00016F32                            ; ---------------------------------------------------------------------------
00016F32                            ; Object 0A - drowning countdown numbers and small bubbles that float out of
00016F32                            ; Sonic's mouth (LZ)
00016F32                            ; ---------------------------------------------------------------------------
00016F32                            
00016F32                            DrownCount:
00016F32 7000                       		moveq	#0,d0
00016F34 1028 0024                  		move.b	obRoutine(a0),d0
00016F38 323B 0000                  		move.w	Drown_Index(pc,d0.w),d1
00016F3C 4EFB 1000                  		jmp	Drown_Index(pc,d1.w)
00016F40                            ; ===========================================================================
00016F40                            Drown_Index:
00016F40 0000                       ptr_Drown_Main:		dc.w Drown_Main-Drown_Index
00016F42 0000                       ptr_Drown_Animate:	dc.w Drown_Animate-Drown_Index
00016F44 0000                       ptr_Drown_ChkWater:	dc.w Drown_ChkWater-Drown_Index
00016F46 0000                       ptr_Drown_Display:	dc.w Drown_Display-Drown_Index
00016F48 0000                       ptr_Drown_Delete:	dc.w Drown_Delete-Drown_Index
00016F4A 0000                       ptr_Drown_Countdown:	dc.w Drown_Countdown-Drown_Index
00016F4C 0000                       ptr_Drown_AirLeft:	dc.w Drown_AirLeft-Drown_Index
00016F4E 0000                       			dc.w Drown_Display-Drown_Index
00016F50 0000                       			dc.w Drown_Delete-Drown_Index
00016F52                            
00016F52 =00000030                  drown_origX:		equ $30		; original x-axis position
00016F52 =00000038                  drown_time:		equ $38		; time between each number changes
00016F52                            
00016F52 =00000000                  id_Drown_Main:		equ ptr_Drown_Main-Drown_Index		; 0
00016F52 =00000002                  id_Drown_Animate:	equ ptr_Drown_Animate-Drown_Index		; 2
00016F52 =00000004                  id_Drown_ChkWater:	equ ptr_Drown_ChkWater-Drown_Index	; 4
00016F52 =00000006                  id_Drown_Display:	equ ptr_Drown_Display-Drown_Index		; 6
00016F52 =00000008                  id_Drown_Delete:		equ ptr_Drown_Delete-Drown_Index		; 8
00016F52 =0000000A                  id_Drown_Countdown:	equ ptr_Drown_Countdown-Drown_Index	; $A
00016F52 =0000000C                  id_Drown_AirLeft:	equ ptr_Drown_AirLeft-Drown_Index		; $C
00016F52                            ; ===========================================================================
00016F52                            
00016F52                            Drown_Main:	; Routine 0
00016F52 5428 0024                  		addq.b	#2,obRoutine(a0)
00016F56 217C 0001 4D40 0004        		move.l	#Map_Bub,obMap(a0)
00016F5E 317C 83F5 0002             		move.w	#$83F5,obGfx(a0)
00016F64 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone?
00016F6A 6700                       		beq.s	Drown_IsSYZ	; if yes, branch
00016F6C 317C 8348 0002             		move.w	#$8348,obGfx(a0)	; LZ
00016F72                            
00016F72                            	Drown_IsSYZ:	
00016F72 117C 0084 0001             		move.b	#$84,obRender(a0)
00016F78 117C 0010 0014             		move.b	#$10,obActWid(a0)
00016F7E 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016F84 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00016F88 6A00                       		bpl.s	@smallbubble	; branch if $00-$7F
00016F8A                            
00016F8A 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Drown_Countdown next
00016F8E 217C 0000 0000 0004        		move.l	#Map_Drown,obMap(a0)
00016F96 317C 0440 0002             		move.w	#$440,obGfx(a0)
00016F9C 0240 007F                  		andi.w	#$7F,d0
00016FA0 1140 0033                  		move.b	d0,$33(a0)
00016FA4 6000 0000                  		bra.w	Drown_Countdown
00016FA8                            ; ===========================================================================
00016FA8                            
00016FA8                            @smallbubble:
00016FA8 1140 001C                  		move.b	d0,obAnim(a0)
00016FAC 3168 0008 0030             		move.w	obX(a0),drown_origX(a0)
00016FB2 317C FF78 0012             		move.w	#-$88,obVelY(a0)
00016FB8                            
00016FB8                            Drown_Animate:	; Routine 2
00016FB8 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016FBE 4EB9 0000 C862             		jsr	(AnimateSprite).l
00016FC4                            
00016FC4                            Drown_ChkWater:	; Routine 4
00016FC4 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone? TIS
00016FCA 6600                       		bne.s	Normal_Water_Level	; if not, branch TIS
00016FCC 3038 FF92                  		move.w	(v_watersplashpos).w,d0	;TIS
00016FD0 0640 0010                  		add.w	#$10,d0	;Lower it a little - TIS
00016FD4 B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water tag surface? - TIS
00016FD8 6200                       		bhi.s	Display_Next		; if so, branch TIS
00016FDA                            		
00016FDA                            
00016FDA                            Normal_Water_Level:
00016FDA 3038 F646                  		move.w	(v_waterpos1).w,d0
00016FDE B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water surface?
00016FE2 6500                       		bcs.s	Wobble		; if not, branch
00016FE4                            Display_Next:	;TIS		
00016FE4 117C 0006 0024             		move.b	#id_Drown_Display,obRoutine(a0) ; goto Drown_Display next
00016FEA 5E28 001C                  		addq.b	#7,obAnim(a0)
00016FEE 0C28 000D 001C             		cmpi.b	#$D,obAnim(a0)
00016FF4 6700                       		beq.s	Drown_Display
00016FF6 6000                       		bra.s	Drown_Display
00016FF8                            ; ===========================================================================
00016FF8                            
00016FF8                            Wobble:
00016FF8 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic in a water tunnel?
00016FFC 6700                       		beq.s	@notunnel	; if not, branch
00016FFE 5868 0030                  		addq.w	#4,drown_origX(a0)
00017002                            
00017002                            	@notunnel:
00017002 1028 0026                  		move.b	obAngle(a0),d0
00017006 5228 0026                  		addq.b	#1,obAngle(a0)
0001700A 0240 007F                  		andi.w	#$7F,d0
0001700E 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00017014 1031 0000                  		move.b	(a1,d0.w),d0
00017018 4880                       		ext.w	d0
0001701A D068 0030                  		add.w	drown_origX(a0),d0
0001701E 3140 0008                  		move.w	d0,obX(a0)
00017022 6100                       		bsr.s	Drown_ShowNumber
00017024 4EB9 0000 F798             		jsr	(SpeedToPos).l
0001702A 4A28 0001                  		tst.b	obRender(a0)
0001702E 6A00                       		bpl.s	@delete
00017030 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
00017036                            
00017036                            	@delete:
00017036 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001703C                            ; ===========================================================================
0001703C                            
0001703C                            Drown_Display:	; Routine 6, Routine $E
0001703C 6100                       		bsr.s	Drown_ShowNumber
0001703E 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00017044 4EB9 0000 C862             		jsr	(AnimateSprite).l
0001704A 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
00017050                            ; ===========================================================================
00017050                            
00017050                            Drown_Delete:	; Routine 8, Routine $10
00017050 4EF9 0000 F7EC             		jmp	(DeleteObject).l
00017056                            ; ===========================================================================
00017056                            
00017056                            Drown_AirLeft:	; Routine $C
00017056 0C78 000C FE14             		cmpi.w	#$C,(v_air).w	; check air remaining
0001705C 6200                       		bhi.s	Drown_AirLeft_Delete		; if higher than $C, branch
0001705E 5368 0038                  		subq.w	#1,drown_time(a0)
00017062 6600                       		bne.s	@display
00017064 117C 000E 0024             		move.b	#id_Drown_Display+8,obRoutine(a0) ; goto Drown_Display next
0001706A 5E28 001C                  		addq.b	#7,obAnim(a0)
0001706E 60CC                       		bra.s	Drown_Display
00017070                            ; ===========================================================================
00017070                            
00017070                            	@display:
00017070 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00017076 4EB9 0000 C862             		jsr	(AnimateSprite).l
0001707C 4A28 0001                  		tst.b	obRender(a0)
00017080 6A00                       		bpl.s	Drown_AirLeft_Delete
00017082 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
00017088                            
00017088                            Drown_AirLeft_Delete:	
00017088 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001708E                            ; ===========================================================================
0001708E                            
0001708E                            Drown_ShowNumber:
0001708E 4A68 0038                  		tst.w	drown_time(a0)
00017092 6700                       		beq.s	@nonumber
00017094 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
00017098 6600                       		bne.s	@nonumber	; if time remains, branch
0001709A 0C28 0007 001C             		cmpi.b	#7,obAnim(a0)
000170A0 6400                       		bcc.s	@nonumber
000170A2                            
000170A2 317C 000F 0038             		move.w	#15,drown_time(a0)
000170A8 4268 0012                  		clr.w	obVelY(a0)
000170AC 117C 0080 0001             		move.b	#$80,obRender(a0)
000170B2 3028 0008                  		move.w	obX(a0),d0
000170B6 9078 F700                  		sub.w	(v_screenposx).w,d0
000170BA 0640 0080                  		addi.w	#$80,d0
000170BE 3140 0008                  		move.w	d0,obX(a0)
000170C2 3028 000C                  		move.w	obY(a0),d0
000170C6 9078 F704                  		sub.w	(v_screenposy).w,d0
000170CA 0640 0080                  		addi.w	#$80,d0
000170CE 3140 000A                  		move.w	d0,obScreenY(a0)
000170D2 117C 000C 0024             		move.b	#id_Drown_AirLeft,obRoutine(a0) ; goto Drown_AirLeft next
000170D8                            
000170D8                            	@nonumber:
000170D8 4E75                       		rts	
000170DA                            ; ===========================================================================
000170DA                            Drown_WobbleData:
000170DA 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
000170EA 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
000170FA 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
0001710A 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
0001711A 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001712A FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001713A FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
0001714A FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
0001715A 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
0001716A 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
0001717A 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
0001718A 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
0001719A 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000171AA FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000171BA FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
000171CA FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
000171DA                            ; ===========================================================================
000171DA                            
000171DA                            Drown_Countdown:; Routine $A
000171DA 4A68 002C                  		tst.w	$2C(a0)
000171DE 6600 0000                  		bne.w	@loc_13F86
000171E2 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
000171E8 6400 0000                  		bcc.w	@nocountdown
000171EC 0838 0006 D022             		btst	#6,(v_player+obStatus).w ; is Sonic underwater?
000171F2 6700 0000                  		beq.w	@nocountdown	; if not, branch
000171F6                            
000171F6 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
000171FA 6A00 0000                  		bpl.w	@nochange	; branch if time remains
000171FE 317C 003B 0038             		move.w	#59,drown_time(a0)
00017204 317C 0001 0036             		move.w	#1,$36(a0)
0001720A 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00017210 0240 0001                  		andi.w	#1,d0
00017214 1140 0034                  		move.b	d0,$34(a0)
00017218 3038 FE14                  		move.w	(v_air).w,d0	; check air remaining
0001721C 0C40 0019                  		cmpi.w	#25,d0
00017220 6700                       		beq.s	@warnsound	; play sound if	air is 25
00017222 0C40 0014                  		cmpi.w	#20,d0
00017226 6700                       		beq.s	@warnsound
00017228 0C40 000F                  		cmpi.w	#15,d0
0001722C 6700                       		beq.s	@warnsound
0001722E 0C40 000C                  		cmpi.w	#12,d0
00017232 6200                       		bhi.s	@reduceair	; if air is above 12, branch
00017234                            
00017234                            	@skipmusic:
0001723E 5328 0032                  		subq.b	#1,$32(a0)
00017242 6A00                       		bpl.s	@reduceair
00017244 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001724A 08E8 0007 0036             		bset	#7,$36(a0)
00017250 6000                       		bra.s	@reduceair
00017252                            ; ===========================================================================
00017252                            
00017252                            @warnsound:
0001725C                            
0001725C                            @reduceair:
0001725C 5378 FE14                  		subq.w	#1,(v_air).w	; subtract 1 from air remaining
00017260 6400 0000                  		bcc.w	@gotomakenum	; if air is above 0, branch
00017264                            
00017264                            		; Sonic drowns here
00017264 6100 0000                  		bsr.w	ResumeMusic
00017268 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
00017278 31FC 0000 FF92             		move.w	#0,(v_watersplashpos).w	;max it out for now - TIS
0001727E 117C 000A 0034             		move.b	#$A,$34(a0)
00017284 317C 0001 0036             		move.w	#1,$36(a0)
0001728A 317C 0078 002C             		move.w	#$78,$2C(a0)
00017290 2F08                       		move.l	a0,-(sp)
00017292 41F8 D000                  		lea	(v_player).w,a0
00017296 6100 F43A                  		bsr.w	Sonic_ResetOnFloor
0001729A 117C 0017 001C             		move.b	#id_Drown,obAnim(a0)	; use Sonic's drowning animation
000172A0 08E8 0001 0022             		bset	#1,obStatus(a0)
000172A6 08E8 0007 0002             		bset	#7,obGfx(a0)
000172AC 317C 0000 0012             		move.w	#0,obVelY(a0)
000172B2 317C 0000 0010             		move.w	#0,obVelX(a0)
000172B8 317C 0000 0020             		move.w	#0,obInertia(a0)
000172BE 11FC 0001 F744             		move.b	#1,(f_nobgscroll).w
000172C4 205F                       		movea.l	(sp)+,a0
000172C6 4E75                       		rts	
000172C8                            ; ===========================================================================
000172C8                            
000172C8                            @loc_13F86:
000172C8 5368 002C                  		subq.w	#1,$2C(a0)
000172CC 6600                       		bne.s	@loc_13F94
000172CE 11FC 0006 D024             		move.b	#6,(v_player+obRoutine).w
000172D4 4E75                       		rts	
000172D6                            ; ===========================================================================
000172D6                            
000172D6                            	@loc_13F94:
000172D6 2F08                       		move.l	a0,-(sp)
000172D8 41F8 D000                  		lea	(v_player).w,a0
000172DC 4EB9 0000 F798             		jsr	(SpeedToPos).l
000172E2 0668 0010 0012             		addi.w	#$10,obVelY(a0)
000172E8 205F                       		movea.l	(sp)+,a0
000172EA 6000                       		bra.s	@nochange
000172EC                            ; ===========================================================================
000172EC                            
000172EC                            @gotomakenum:
000172EC 6000                       		bra.s	@makenum
000172EE                            ; ===========================================================================
000172EE                            
000172EE                            @nochange:
000172EE 4A68 0036                  		tst.w	$36(a0)
000172F2 6700 0000                  		beq.w	@nocountdown
000172F6 5368 003A                  		subq.w	#1,$3A(a0)
000172FA 6A00 0000                  		bpl.w	@nocountdown
000172FE                            
000172FE                            @makenum:
000172FE 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00017304 0240 000F                  		andi.w	#$F,d0
00017308 3140 003A                  		move.w	d0,$3A(a0)
0001730C 4EB9 0000 FD46             		jsr	(FindFreeObj).l
00017312 6600 0000                  		bne.w	@nocountdown
00017316 12BC 000A                  		move.b	#id_DrownCount,0(a1) ; load object
0001731A 3378 D008 0008             		move.w	(v_player+obX).w,obX(a1) ; match X position to Sonic
00017320 7006                       		moveq	#6,d0
00017322 0838 0000 D022             		btst	#0,(v_player+obStatus).w
00017328 6700                       		beq.s	@noflip
0001732A 4440                       		neg.w	d0
0001732C 137C 0040 0026             		move.b	#$40,obAngle(a1)
00017332                            
00017332                            	@noflip:
00017332 D169 0008                  		add.w	d0,obX(a1)
00017336 3378 D00C 000C             		move.w	(v_player+obY).w,obY(a1)
0001733C 137C 0006 0028             		move.b	#6,obSubtype(a1)
00017342 4A68 002C                  		tst.w	$2C(a0)
00017346 6700 0000                  		beq.w	@loc_1403E
0001734A 0268 0007 003A             		andi.w	#7,$3A(a0)
00017350 0668 0000 003A             		addi.w	#0,$3A(a0)
00017356 3038 D00C                  		move.w	(v_player+obY).w,d0
0001735A 0440 000C                  		subi.w	#$C,d0
0001735E 3340 000C                  		move.w	d0,obY(a1)
00017362 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00017368 1340 0026                  		move.b	d0,obAngle(a1)
0001736C 3038 FE04                  		move.w	(v_framecount).w,d0
00017370 0200 0003                  		andi.b	#3,d0
00017374 6600                       		bne.s	@loc_14082
00017376 137C 000E 0028             		move.b	#$E,obSubtype(a1)
0001737C 6000                       		bra.s	@loc_14082
0001737E                            ; ===========================================================================
0001737E                            
0001737E                            @loc_1403E:
0001737E 0828 0007 0036             		btst	#7,$36(a0)
00017384 6700                       		beq.s	@loc_14082
00017386 3438 FE14                  		move.w	(v_air).w,d2
0001738A E24A                       		lsr.w	#1,d2
0001738C 4EB9 0000 3CA4             		jsr	(RandomNumber).l
00017392 0240 0003                  		andi.w	#3,d0
00017396 6600                       		bne.s	@loc_1406A
00017398 08E8 0006 0036             		bset	#6,$36(a0)
0001739E 6600                       		bne.s	@loc_14082
000173A0 1342 0028                  		move.b	d2,obSubtype(a1)
000173A4 337C 001C 0038             		move.w	#$1C,drown_time(a1)
000173AA                            
000173AA                            	@loc_1406A:
000173AA 4A28 0034                  		tst.b	$34(a0)
000173AE 6600                       		bne.s	@loc_14082
000173B0 08E8 0006 0036             		bset	#6,$36(a0)
000173B6 6600                       		bne.s	@loc_14082
000173B8 1342 0028                  		move.b	d2,obSubtype(a1)
000173BC 337C 001C 0038             		move.w	#$1C,drown_time(a1)
000173C2                            
000173C2                            @loc_14082:
000173C2 5328 0034                  		subq.b	#1,$34(a0)
000173C6 6A00                       		bpl.s	@nocountdown
000173C8 4268 0036                  		clr.w	$36(a0)
000173CC                            
000173CC                            @nocountdown:
000173CC 4E75                       		rts	
000173CC 4E75                       		rts	
000173CE                            
000173CE                            
000173CE                            ; ---------------------------------------------------------------------------
000173CE                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
000173CE                            ; ---------------------------------------------------------------------------
000173CE                            
000173CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000173CE                            
000173CE                            
000173CE                            ResumeMusic:
000173CE                            		;cmpi.w	#12,(v_air).w	; more than 12 seconds of air left?
000173CE                            		;bhi.s	@over12		; if yes, branch
000173CE                            		;move.b	(v_Saved_music),d0
000173CE                            		;tst.b	(v_invinc).w ; is Sonic invincible?
000173CE                            		;beq.s	@notinvinc ; if not, branch
000173CE                            		;move.w	#bgm_Invincible,d0
000173CE                            		;tst.b	(v_shoes).w ; is Sonic speed shoes?
000173CE                            		;beq.s	@notinvinc	; if not, branch
000173CE                            		;move.w	#bgm_Ending,d0
000173CE                            
000173CE                            	;@notinvinc:
000173CE                            		;tst.b	(f_lockscreen).w ; is Sonic at a boss?
000173CE                            		;beq.s	@playselected ; if not, branch
000173CE                            		;move.w	#bgm_Boss,d0
000173CE                            
000173CE                            	;@playselected:
000173CE                            		;jsr	(PlaySound).l
000173CE                            
000173CE                            	;@over12:
000173CE 31FC 001E FE14             		move.w	#30,(v_air).w	; reset air to 30 seconds
000173D4 4238 D372                  		clr.b	(v_objspace+$340+$32).w
000173D8 4E75                       		rts	
000173DA                            
000173DA                            ;End of function ResumeMusic
000173DA                            
000173DA                            ; ===========================================================================
000173DA                            
000173DA                            		include	"_anim\Drowning Countdown.asm"
000173DA                            ; ---------------------------------------------------------------------------
000173DA                            ; Animation script - countdown numbers and bubbles (LZ)
000173DA                            ; ---------------------------------------------------------------------------
000173DA 0000                       Ani_Drown:	dc.w @zeroappear-Ani_Drown
000173DC 0000                       		dc.w @oneappear-Ani_Drown
000173DE 0000                       		dc.w @twoappear-Ani_Drown
000173E0 0000                       		dc.w @threeappear-Ani_Drown
000173E2 0000                       		dc.w @fourappear-Ani_Drown
000173E4 0000                       		dc.w @fiveappear-Ani_Drown
000173E6 0000                       		dc.w @smallbubble-Ani_Drown
000173E8 0000                       		dc.w @zeroflash-Ani_Drown
000173EA 0000                       		dc.w @oneflash-Ani_Drown
000173EC 0000                       		dc.w @twoflash-Ani_Drown
000173EE 0000                       		dc.w @threeflash-Ani_Drown
000173F0 0000                       		dc.w @fourflash-Ani_Drown
000173F2 0000                       		dc.w @fiveflash-Ani_Drown
000173F4 0000                       		dc.w @blank-Ani_Drown
000173F6 0000                       		dc.w @mediumbubble-Ani_Drown
000173F8 0500 0102 0304 090D FC     @zeroappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, afRoutine
00017402 00                         		even
00017402 0500 0102 0304 0C12 FC     @oneappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	afRoutine
0001740C 00                         		even
0001740C 0500 0102 0304 0C11 FC     @twoappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	afRoutine
00017416 00                         		even
00017416 0500 0102 0304 0B10 FC     @threeappear:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	afRoutine
00017420 00                         		even
00017420 0500 0102 0304 090F FC     @fourappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, afRoutine
0001742A 00                         		even
0001742A 0500 0102 0304 0A0E FC     @fiveappear:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, afRoutine
00017434 00                         		even
00017434 0E00 0102 FC               @smallbubble:	dc.b $E, 0, 1, 2, afRoutine
0001743A 00                         		even
0001743A 0716 0D16 0D16 0DFC        @zeroflash:	dc.b 7,	$16, $D, $16, $D, $16, $D, afRoutine
00017442 0716 1216 1216 12FC        @oneflash:	dc.b 7,	$16, $12, $16, $12, $16, $12, afRoutine
0001744A 0716 1116 1116 11FC        @twoflash:	dc.b 7,	$16, $11, $16, $11, $16, $11, afRoutine
00017452 0716 1016 1016 10FC        @threeflash:	dc.b 7,	$16, $10, $16, $10, $16, $10, afRoutine
0001745A 0716 0F16 0F16 0FFC        @fourflash:	dc.b 7,	$16, $F, $16, $F, $16, $F, afRoutine
00017462 0716 0E16 0E16 0EFC        @fiveflash:	dc.b 7,	$16, $E, $16, $E, $16, $E, afRoutine
0001746A 0EFC                       @blank:		dc.b $E, afRoutine
0001746C 0E01 0203 04FC             @mediumbubble:	dc.b $E, 1, 2, 3, 4, afRoutine
00017472                            		even
00017472                            		even
00017472                            Map_Drown:	include	"_maps\Drowning Countdown.asm"
00017472                            ; ---------------------------------------------------------------------------
00017472                            ; Sprite mappings - drowning countdown numbers (LZ)
00017472                            ; ---------------------------------------------------------------------------
00017472                            Map_Drown_internal:
00017472 0000                       		dc.w @num-Map_Drown_internal
00017474 01                         @num:		dc.b 1
00017475 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
0001747A                            		even
0001747A                            		even
0001747A                            
0001747A                            ; --------------------------------------------------
0001747A                            ; Subroutine to load the shield's art over DMA
0001747A                            ; --------------------------------------------------
0001747A                            
0001747A                            PLCLoad_Shields:
0001747A 7000                       		moveq	#0,d0
0001747C 1028 001A                  		move.b	obFrame(a0),d0	; load frame number
00017480 B028 0033                  		cmp.b	shield_LastLoadedDPLC(a0),d0
00017484 6700                       		beq.s	locret2_13C96
00017486 1140 0033                  		move.b	d0,shield_LastLoadedDPLC(a0)
0001748A 2468 003C                  		move.l  shield_DPLC_Address(A0),a2
0001748E D040                       		add.w   d0,d0
00017490 D4F2 0000                  		adda.w  (a2,D0),a2
00017494 3A1A                       		move.w  (a2)+,d5
00017496 5345                       		subq.w  #1,d5
00017498 6B00                       		bmi.s	locret2_13C96
0001749A 3828 0036                  		move.w  shield_vram_art(A0),d4
0001749E                            
0001749E                            loc_199BE:
0001749E 7200                       		moveq	#0,d1
000174A0 121A                       		move.b	(a2)+,d1
000174A2 E149                       		lsl.w	#8,d1
000174A4 121A                       		move.b	(a2)+,d1
000174A6 3601                       		move.w	d1,d3
000174A8 E04B                       		lsr.w	#8,d3
000174AA 0243 00F0                  		andi.w	#$F0,d3
000174AE 0643 0010                  		addi.w	#$10,d3
000174B2 0241 0FFF                  		andi.w	#$FFF,d1
000174B6 EB89                       		lsl.l	#5,d1
000174B8 D2A8 0038                  		add.l   shield_Art_Address(a0),d1
000174BC 3404                       		move.w  d4,d2
000174BE D843                       		add.w   d3,d4
000174C0 D843                       		add.w   d3,d4
000174C2 4EB9 0000 1476             		jsr     (QueueDMATransfer).l
000174C8 51CD FFD4                  		dbf     d5,loc_199BE	; repeat for number of entries
000174CC                            
000174CC                            locret2_13C96:
000174CC 4E75                       		rts	
000174CE                            ; End of function PLCLoad_Shields
000174CE                            
000174CE                            		include	"_incObj\4E Silver Shield.asm"
000174CE                            ; ---------------------------------------------------------------------------
000174CE                            ; Object 4E - Silver Shield
000174CE                            ; ---------------------------------------------------------------------------
000174CE                            SPShieldItem: ; XREF: Obj_Index
000174CE 7000                       		moveq	#0,d0
000174D0 1028 0024                  		move.b	obRoutine(a0),d0
000174D4 323B 0000                  		move.w	SPShieldItem_Index(pc,d0.w),d1
000174D8 4EFB 1000                  		jmp	SPShieldItem_Index(pc,d1.w)
000174DC                            ; ===========================================================================
000174DC                            ; off_1D900:
000174DC                            SPShieldItem_Index:
000174DC 0000                       		dc.w SPShieldItem_Init-SPShieldItem_Index	; 0
000174DE 0000                       		dc.w SPShieldItem_Main-SPShieldItem_Index	; 2
000174E0                            ; ===========================================================================
000174E0                            ; loc_1D904:
000174E0                            SPShieldItem_Init:
000174E0 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
000174E8 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
000174F0 217C 0000 0000 0038        		move.l	#Art_SpShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
000174F8 117C 0004 0001             		move.b	#4,obRender(a0)
000174FE 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017504 117C 0018 0014             		move.b	#$18,obActWid(a0)
0001750A 317C 0541 0002             		move.w	#$541,obGfx(a0)
00017510 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
00017516 0838 0007 D002             		btst	#7,(v_player+obGfx).w
0001751C 6700                       		beq.s	@animclear
0001751E 08E8 0007 0002             		bset	#7,obGfx(a0)
00017524                            
00017524                            @animclear:
00017524 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
0001752A 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
00017530 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
00017534                            ; loc_1D92C:
00017534                            SPShieldItem_Main:
00017534 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
00017538 4A38 FE2D                  		tst.b	(v_invinc).w
0001753C 6600                       		bne.s	@return
0001753E                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
0001753E                            		;beq.s	@return	; If so, do not display and do not update variables
0001753E 4A38 F5CA                  		tst.b	(v_SpShield).w
00017542 6700 0000                  		beq.w	SPShieldItem_Destroy	; If not, change to Insta-Shield
00017546 316A 0008 0008             		move.w	obX(a2),obX(a0)
0001754C 316A 000C 000C             		move.w	obY(a2),obY(a0)
00017552 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
00017558 4A6A 0002                  		tst.w	obGFX(a2)
0001755C 6A00                       		bpl.s	@nothighpriority
0001755E 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
00017564                            
00017564                            		@nothighpriority:
00017564 43F9 0000 0000             		lea	(Ani_Shield).l,a1
0001756A 4EB9 0000 C862             		jsr	(AnimateSprite).l
00017570 4EB9 0001 747A             		jsr	(PLCLoad_Shields).l
00017576 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001757C                            ; ---------------------------------------------------------------------------
0001757C                            ; ===========================================================================
0001757C                            
0001757C                            @return:
0001757C 4E75                       		rts
0001757E                            
0001757E                            SPShieldItem_Destroy:
0001757E 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
00017582 4E75                       		rts
00017584                            ; ===========================================================================
00017584                            ; ===========================================================================
00017584                            		include	"_incObj\04 Gold Shield.asm"
00017584                            ; ---------------------------------------------------------------------------
00017584                            ; Object 04 - Gold Shield
00017584                            ; ---------------------------------------------------------------------------
00017584                            GShieldItem: ; XREF: Obj_Index
00017584 7000                       		moveq	#0,d0
00017586 1028 0024                  		move.b	obRoutine(a0),d0
0001758A 323B 0000                  		move.w	GShieldItem_Index(pc,d0.w),d1
0001758E 4EFB 1000                  		jmp	GShieldItem_Index(pc,d1.w)
00017592                            ; ===========================================================================
00017592                            ; off_1D900:
00017592                            GShieldItem_Index:
00017592 0000                       		dc.w GShieldItem_Init-GShieldItem_Index	; 0
00017594 0000                       		dc.w GShieldItem_Main-GShieldItem_Index	; 2
00017596                            ; ===========================================================================
00017596                            ; loc_1D904:
00017596                            GShieldItem_Init:
00017596 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
0001759E 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
000175A6 217C 0000 0000 0038        		move.l	#Art_GShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
000175AE 117C 0004 0001             		move.b	#4,obRender(a0)
000175B4 317C 0080 0018             		move.w	#$80,obPriority(a0)
000175BA 117C 0018 0014             		move.b	#$18,obActWid(a0)
000175C0 317C 0541 0002             		move.w	#$541,obGfx(a0)
000175C6 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
000175CC 0838 0007 D002             		btst	#7,(v_player+obGfx).w
000175D2 6700                       		beq.s	@animclear
000175D4 08E8 0007 0002             		bset	#7,obGfx(a0)
000175DA                            
000175DA                            @animclear:
000175DA 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
000175E0 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
000175E6 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
000175EA                            ; loc_1D92C:
000175EA                            GShieldItem_Main:
000175EA 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
000175EE 4A38 FE2D                  		tst.b	(v_invinc).w
000175F2 6600                       		bne.s	@return
000175F4                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
000175F4                            		;beq.s	@return	; If so, do not display and do not update variables
000175F4 4A38 F5C9                  		tst.b	(v_GShield).w
000175F8 6700 0000                  		beq.w	GShieldItem_Destroy	; If not, change to Insta-Shield
000175FC 316A 0008 0008             		move.w	obX(a2),obX(a0)
00017602 316A 000C 000C             		move.w	obY(a2),obY(a0)
00017608 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
0001760E 4A6A 0002                  		tst.w	obGFX(a2)
00017612 6A00                       		bpl.s	@nothighpriority
00017614 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
0001761A                            
0001761A                            		@nothighpriority:
0001761A 43F9 0000 0000             		lea	(Ani_Shield).l,a1
00017620 4EB9 0000 C862             		jsr	(AnimateSprite).l
00017626 4EB9 0001 747A             		jsr	(PLCLoad_Shields).l
0001762C 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
00017632                            ; ---------------------------------------------------------------------------
00017632                            ; ===========================================================================
00017632                            
00017632                            @return:
00017632 4E75                       		rts
00017634                            
00017634                            GShieldItem_Destroy:
00017634 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
00017638 4E75                       		rts
0001763A                            ; ===========================================================================
0001763A                            ; ===========================================================================
0001763A                            		include	"_incObj\07 Red Shield.asm"
0001763A                            ; ---------------------------------------------------------------------------
0001763A                            ; Object 07 - Red Shield
0001763A                            ; ---------------------------------------------------------------------------
0001763A                            RShieldItem: ; XREF: Obj_Index
0001763A 7000                       		moveq	#0,d0
0001763C 1028 0024                  		move.b	obRoutine(a0),d0
00017640 323B 0000                  		move.w	RShieldItem_Index(pc,d0.w),d1
00017644 4EFB 1000                  		jmp	RShieldItem_Index(pc,d1.w)
00017648                            ; ===========================================================================
00017648                            ; off_1D900:
00017648                            RShieldItem_Index:
00017648 0000                       		dc.w RShieldItem_Init-RShieldItem_Index	; 0
0001764A 0000                       		dc.w RShieldItem_Main-RShieldItem_Index	; 2
0001764C                            ; ===========================================================================
0001764C                            ; loc_1D904:
0001764C                            RShieldItem_Init:
0001764C 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
00017654 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
0001765C 217C 0000 0000 0038        		move.l	#Art_RedShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
00017664 117C 0004 0001             		move.b	#4,obRender(a0)
0001766A 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017670 117C 0018 0014             		move.b	#$18,obActWid(a0)
00017676 317C 0541 0002             		move.w	#$541,obGfx(a0)
0001767C 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
00017682 0838 0007 D002             		btst	#7,(v_player+obGfx).w
00017688 6700                       		beq.s	@animclear
0001768A 08E8 0007 0002             		bset	#7,obGfx(a0)
00017690                            
00017690                            @animclear:
00017690 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
00017696 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
0001769C 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
000176A0                            ; loc_1D92C:
000176A0                            RShieldItem_Main:
000176A0 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
000176A4 4A38 FE2D                  		tst.b	(v_invinc).w
000176A8 6600                       		bne.s	@return
000176AA                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
000176AA                            		;beq.s	@return	; If so, do not display and do not update variables
000176AA 4A38 F5C8                  		tst.b	(v_RShield).w
000176AE 6700 0000                  		beq.w	RShieldItem_Destroy	; If not, change to Insta-Shield
000176B2 316A 0008 0008             		move.w	obX(a2),obX(a0)
000176B8 316A 000C 000C             		move.w	obY(a2),obY(a0)
000176BE 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
000176C4 4A6A 0002                  		tst.w	obGFX(a2)
000176C8 6A00                       		bpl.s	@nothighpriority
000176CA 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
000176D0                            
000176D0                            		@nothighpriority:
000176D0 43F9 0000 0000             		lea	(Ani_Shield).l,a1
000176D6 4EB9 0000 C862             		jsr	(AnimateSprite).l
000176DC 4EB9 0001 747A             		jsr	(PLCLoad_Shields).l
000176E2 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
000176E8                            ; ---------------------------------------------------------------------------
000176E8                            ; ===========================================================================
000176E8                            
000176E8                            @return:
000176E8 4E75                       		rts
000176EA                            
000176EA                            RShieldItem_Destroy:
000176EA 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
000176EE 4E75                       		rts
000176F0                            ; ===========================================================================
000176F0                            ; ===========================================================================
000176F0                            		include	"_incObj\38 Shield.asm"
000176F0                            ; ---------------------------------------------------------------------------
000176F0                            ; Object 38 - Shield
000176F0                            ; ---------------------------------------------------------------------------
000176F0                            ShieldItem: ; XREF: Obj_Index
000176F0 7000                       		moveq	#0,d0
000176F2 1028 0024                  		move.b	obRoutine(a0),d0
000176F6 323B 0000                  		move.w	ShieldItem_Index(pc,d0.w),d1
000176FA 4EFB 1000                  		jmp	ShieldItem_Index(pc,d1.w)
000176FE                            ; ===========================================================================
000176FE                            ; off_1D900:
000176FE                            ShieldItem_Index:
000176FE 0000                       		dc.w ShieldItem_Init-ShieldItem_Index	; 0
00017700 0000                       		dc.w ShieldItem_Main-ShieldItem_Index	; 2
00017702                            ; ===========================================================================
00017702                            ; loc_1D904:
00017702                            ShieldItem_Init:
00017702 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
0001770A 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
00017712 217C 0000 0000 0038        		move.l	#Art_Shield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
0001771A 117C 0004 0001             		move.b	#4,obRender(a0)
00017720 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017726 117C 0018 0014             		move.b	#$18,obActWid(a0)
0001772C 317C 0541 0002             		move.w	#$541,obGfx(a0)
00017732 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
00017738 0838 0007 D002             		btst	#7,(v_player+obGfx).w
0001773E 6700                       		beq.s	loc_195F0S
00017740 08E8 0007 0002             		bset	#7,obGfx(a0)
00017746                            
00017746                            loc_195F0S:
00017746 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
0001774C 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
00017752 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
00017756                            ; loc_1D92C:
00017756                            ShieldItem_Main:
00017756 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
0001775A 4A38 FE2D                  		tst.b	(v_invinc).w
0001775E 6600                       		bne.s	return_1D976
00017760                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
00017760                            		;beq.s	return_1D976	; If so, do not display and do not update variables
00017760 4A38 FE2C                  		tst.b	(v_shield).w
00017764 6700 0000                  		beq.w	ShieldItem_Destroy	; If not, change to Insta-Shield
00017768 316A 0008 0008             		move.w	obX(a2),obX(a0)
0001776E 316A 000C 000C             		move.w	obY(a2),obY(a0)
00017774 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
0001777A 4A6A 0002                  		tst.w	obGFX(a2)
0001777E 6A00                       		bpl.s	@nothighpriority
00017780 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
00017786                            
00017786                            		@nothighpriority:
00017786 43F9 0000 0000             		lea	(Ani_Shield).l,a1
0001778C 4EB9 0000 C862             		jsr	(AnimateSprite).l
00017792 4EB9 0001 747A             		jsr	(PLCLoad_Shields).l
00017798 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001779E                            ; ---------------------------------------------------------------------------
0001779E                            ; ===========================================================================
0001779E                            
0001779E                            return_1D976:
0001779E 4E75                       		rts
000177A0                            
000177A0                            ShieldItem_Destroy:
000177A0 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
000177A4 4E75                       		rts
000177A6                            ; ===========================================================================
000177A6                            ; ===========================================================================
000177A6                            		include	"_incObj\19 Invincibility Stars.asm"	
000177A6                            ; ---------------------------------------------------------------------------
000177A6                            ; Object 10 - invincibility stars
000177A6                            ; ---------------------------------------------------------------------------
000177A6 =00000024                  invstars_obroutine: equ obRoutine ; the same as routine in other objects
000177A6 =00000030                  InvStars_AniScript: equ $30 ; animation script used by sub-objects(in main object it's clear and unused) (4 bytes)
000177A6 =00000034                  InvStars_SpeedIndex: equ $34  ; (2 bytes)
000177A6 =00000036                  InvStars_PrevPosIndex: equ $36 ; clear and unused in main object
000177A6                            
000177A6                            InvStarsObj: 
000177A6 7000                       		moveq	#0,d0
000177A8 1028 0024                  		move.b	InvStars_obRoutine(a0),d0
000177AC 323B 0000                  		move.w	InvStars_Index(pc,d0.w),d1
000177B0 4EFB 1000                  		jmp	InvStars_Index(pc,d1.w)
000177B4                            ; ===========================================================================
000177B4 0000                       InvStars_Index:	dc.w @InitObjects-InvStars_Index
000177B6 0000                       		dc.w @MainObject-InvStars_Index
000177B8 0000                       		dc.w @SubObject-InvStars_Index
000177BA                            ; ===========================================================================
000177BA                            
000177BA                            	@SubObjectsData:
000177BA 0000 0000                  		dc.l Ani_InvStars2 ; animation script
000177BE 0B00                       		dc.w $0B00 ; speed index,sub3 anim
000177C0 0000 0000                  		dc.l Ani_InvStars3
000177C4 160D                       		dc.w $160D
000177C6 0000 0000                  		dc.l Ani_InvStars4
000177CA 2C0D                       		dc.w $2C0D
000177CC                            ; ===========================================================================
000177CC                            
000177CC                            	@InitObjects:
000177CC 223C 0000 0000             		move.l	#Unc_Stars,d1
000177D2 343C ABC0                  		move.w	#$ABC0,d2
000177D6 363C 0220                  		move.w	#$220,d3
000177DA 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
000177E0 7400                       		moveq	#0,d2
000177E2 45FA FFD0                  		lea	@SubObjectsData-6(pc),a2
000177E6 43D0                       		lea	(a0),a1
000177E8 7203                       		moveq	#3,d1
000177EA                            		
000177EA                            	@initStars:
000177EA 1290                       		move.b	(a0),(a1) ; load obj35
000177EC 137C 0004 0024             		move.b	#4,InvStars_obRoutine(a1)		; => @SubObject
000177F2 237C 0000 0000 0004        		move.l	#Map_InvStars,obMap(a1)
000177FA 337C 055E 0002             		move.w	#$55E,obGfx(a1)
00017800 137C 0044 0001             		move.b  #%001000100,obRender(a1)
00017806 137C 0010 000E             		move.b	#$10,mainspr_width(a1)
0001780C 137C 0002 000F             		move.b	#2,mainspr_childsprites(a1)							 
00017812 1342 0036                  		move.b	d2,InvStars_PrevPosIndex(a1)
00017816 5242                       		addq.w	#1,d2
00017818 235A 0030                  		move.l	(a2)+,InvStars_AniScript(a1)
0001781C 335A 0034                  		move.w	(a2)+,InvStars_SpeedIndex(a1)
00017820 43E9 0040                  		lea	$40(a1),a1 ; a1=object
00017824 51C9 FFC4                  		dbf	d1,@initStars
00017828                            
00017828 117C 0002 0024             		move.b	#2,InvStars_obRoutine(a0)		; => @MainObject
0001782E 117C 0004 0034             		move.b	#4,InvStars_SpeedIndex(a0)
00017834                            
00017834                            	@MainObject:
00017834 43F8 D000                  		lea (v_player).w,a1 ; a1=character
00017838 4A38 FE2D                  		tst.b   (v_invinc).w
0001783C 6700 0000                  		beq.w	JmpTo_DeleteObject
00017840 3029 0008                  		move.w	obX(a1),d0
00017844 3140 0008                  		move.w	d0,obX(a0)
00017848 3229 000C                  		move.w	obY(a1),d1
0001784C 3141 000C                  		move.w	d1,obY(a0)
00017850 45E8 0010                  		lea	sub2_x_pos(a0),a2
00017854 47F9 0000 0000             		lea	Ani_InvStars1,a3
0001785A 7A00                       		moveq	#0,d5
0001785C                            
0001785C                            	@getFrame_main:
0001785C 3428 0038                  		move.w	$38(a0),d2
00017860 1A33 2000                  		move.b	(a3,d2.w),d5
00017864 6A00                       		bpl.s	@setFrameAndPosition_main
00017866 4268 0038                  		clr.w	$38(a0)
0001786A 60F0                       		bra.s	@getFrame_main
0001786C                            ; ===========================================================================
0001786C                            
0001786C                            	@setFrameAndPosition_main:
0001786C 5268 0038                  		addq.w	#1,$38(a0)
00017870 4DF9 0000 0000             		lea	InvStars_Speeds,a6
00017876 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
0001787A 6100 0000                  		bsr.w	InvStars_get_speed
0001787E 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
00017880 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
00017882 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
00017884 0646 0020                  		addi.w	#$20,d6
00017888 6100 0000                  		bsr.w	InvStars_get_speed
0001788C 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
0001788E 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
00017890 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
00017892 7012                       		moveq	#$12,d0
00017894 0829 0000 0022             		btst	#0,obStatus(a1)
0001789A 6700                       		beq.s	@display_main
0001789C 4440                       		neg.w	d0
0001789E                            
0001789E                            	@display_main:
0001789E D128 0034                  		add.b	d0,InvStars_SpeedIndex(a0)
000178A2 303C 0080                  		move.w	#(1*$80),d0
000178A6 4EF9 0000 F7D8             		jmp	DisplaySprite2
000178AC                            ; ===========================================================================
000178AC                            
000178AC                            	@SubObject:
000178AC 43F8 D000                  		lea 	(v_player).w,a1 ; a1=character
000178B0 4A38 FE2D                  		tst.b   (v_invinc).w
000178B4 6700 0000                  		beq.w	JmpTo_DeleteObject
000178B8 4BF8 F7A8                  		lea		(v_trackpos).w,a5
000178BC 4DF8 CB00                  		lea		(v_tracksonic).w,a6
000178C0                            
000178C0                            	@getPosition_sub:
000178C0 1228 0036                  		move.b	InvStars_PrevPosIndex(a0),d1
000178C4 E509                       		lsl.b	#2,d1
000178C6 3401                       		move.w	d1,d2
000178C8 D241                       		add.w	d1,d1
000178CA D242                       		add.w	d2,d1
000178CC 3015                       		move.w	(a5),d0
000178CE 9001                       		sub.b	d1,d0
000178D0 45F6 0000                  		lea	(a6,d0.w),a2
000178D4 301A                       		move.w	(a2)+,d0
000178D6 321A                       		move.w	(a2)+,d1
000178D8 3140 0008                  		move.w	d0,obX(a0)
000178DC 3141 000C                  		move.w	d1,obY(a0)
000178E0 45E8 0010                  		lea	sub2_x_pos(a0),a2
000178E4 2668 0030                  		movea.l	InvStars_AniScript(a0),a3
000178E8                            
000178E8                            	@getFrame_sub:
000178E8 3428 0038                  		move.w	$38(a0),d2
000178EC 1A33 2000                  		move.b	(a3,d2.w),d5
000178F0 6A00                       		bpl.s	@setFrameAndPosition_sub
000178F2 4268 0038                  		clr.w	$38(a0)
000178F6 60F0                       		bra.s	@getFrame_sub
000178F8                            ; ===========================================================================
000178F8                            
000178F8                            	@setFrameAndPosition_sub:
000178F8 4845                       		swap	d5
000178FA D428 0035                  		add.b	$35(a0),d2
000178FE 1A33 2000                  		move.b	(a3,d2.w),d5
00017902 5268 0038                  		addq.w	#1,$38(a0)
00017906 4DFA 0000                  		lea	InvStars_Speeds(pc),a6
0001790A 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
0001790E 6100                       		bsr.s	InvStars_get_speed
00017910 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
00017912 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
00017914 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
00017916 0646 0020                  		addi.w	#$20,d6
0001791A 4845                       		swap	d5
0001791C 6100                       		bsr.s	InvStars_get_speed
0001791E 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
00017920 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
00017922 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
00017924 7002                       		moveq	#2,d0
00017926 0829 0000 0022             		btst	#0,obStatus(a1)
0001792C 6700                       		beq.s	loc_1DB20
0001792E 4440                       		neg.w	d0
00017930                            
00017930                            loc_1DB20:
00017930 D128 0034                  		add.b    d0,InvStars_SpeedIndex(a0)
00017934 303C 0080                  		move.w    #(1*$80),d0
00017938 4EF9 0000 F7D8             		jmp    DisplaySprite2
0001793E                            ; ===========================================================================
0001793E                            
0001793E                            InvStars_get_speed:
0001793E 0246 003E                  		andi.w	#$3E,d6 ; limit to 6 bits and clear first bit
00017942 1436 6000                  		move.b	(a6,d6.w),d2 ; move x-move speed to d2
00017946 1636 6001                  		move.b	1(a6,d6.w),d3 ; move y-move speed to d3
0001794A 4882                       		ext.w	d2
0001794C 4883                       		ext.w	d3
0001794E D440                       		add.w	d0,d2 ; add object x position to x-move speed
00017950 D641                       		add.w	d1,d3 ; add object y position to y-move speed
00017952 4E75                       		rts
00017954                            
00017954                            InvStars_Speeds: ; x-move speed,	y-move speed	
00017954 0F00 0F03 0E06 0D08 0B0B+  		dc.w   $F00,  $F03,  $E06,  $D08,  $B0B,  $80D,  $60E,  $30F
00017964 0010 FC0F F90E F70D F40B+  		dc.w    $10, -$3F1, -$6F2, -$8F3, -$BF5, -$DF8, -$EFA, -$FFD
00017974 F000 F0FC F1F9 F2F7 F4F4+  		dc.w  $F000, -$F04, -$E07, -$D09, -$B0C, -$80E, -$60F, -$310
00017984 FFF0 03F0 06F1 08F2 0BF4+  		dc.w   -$10,  $3F0,  $6F1,  $8F2,  $BF4,  $DF7,  $EF9,  $FFC
00017994                            
00017994                            ; ---------------------------------------------------------------------------
00017994                            ; Animation script - invincibility stars
00017994                            ; ---------------------------------------------------------------------------
00017994                            
00017994                            ; The animation script differs from the animate_sprite subroutine
00017994                            ; Every positive byte - mapping
00017994                            ; Every negative byte - loop flag 
00017994                            
00017994 0805 0706 0607 0508 0607+  Ani_InvStars1:	dc.b   8,  5,  7,  6,  6,  7,  5,  8,  6,  7,  7,  6,$FF
000179A2 00                         		even
000179A2 0807 0605 0403 0405 0607+  Ani_InvStars2:	dc.b   8,  7,  6,  5,  4,  3,  4,  5,  6,  7,$FF
000179AD 0304 0506 0708 0706 0504   		dc.b   3,  4,  5,  6,  7,  8,  7,  6,  5,  4
000179B8 00                         		even
000179B8 0807 0605 0403 0203 0405+  Ani_InvStars3:	dc.b   8,  7,  6,  5,  4,  3,  2,  3,  4,  5,  6,  7,$FF
000179C5 0203 0405 0607 0807 0605+  		dc.b   2,  3,  4,  5,  6,  7,  8,  7,  6,  5,  4,  3
000179D2 00                         		even
000179D2 0706 0504 0302 0102 0304+  Ani_InvStars4:	dc.b   7,  6,  5,  4,  3,  2,  1,  2,  3,  4,  5,  6,$FF
000179DF 0102 0304 0506 0706 0504+  		dc.b   1,  2,  3,  4,  5,  6,  7,  6,  5,  4,  3,  2
000179EC 00                         		even			
000179EC                            ; ---------------------------------------------------------------------------
000179EC                            JmpTo_DeleteObject:
000179EC 4EF9 0000 F7EC             		jmp		(DeleteObject).l
000179EC 4EF9 0000 F7EC             		jmp		(DeleteObject).l
000179F2                            		include	"_incObj\8D Super Stars.asm"			
000179F2                            ; ---------------------------------------------------------------------------
000179F2                            ; Object 91 - Super Sonic Stars
000179F2                            ; ---------------------------------------------------------------------------
000179F2                            
000179F2                            SuperStars:					; XREF: Obj_Index					  ; ...
000179F2 223C 0000 0000             		move.l	#Unc_SuperSonic_stars,d1			        ; Call for Regular Shield Art
000179F8 343C ABC0                  		move.w	#$ABC0,d2			        ; Load Art from this location (VRAM location*20)
000179FC                            								; In this case, VRAM = $541*20
000179FC 363C 0100                  		move.w	#$100,d3
00017A00 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
00017A06 7000                       		moveq	#0,d0
00017A08 1028 0024                  		move.b	obRoutine(a0),d0
00017A0C 323B 0000                  		move.w	SuperStars_States(pc,d0.w),d1
00017A10 4EFB 1000                  		jmp	SuperStars_States(pc,d1.w)
00017A14                            ; ---------------------------------------------------------------------------
00017A14 0000 0000                  SuperStars_States:	dc.w SuperStars_Init-SuperStars_States,SuperStars_Main-SuperStars_States; 0	; ...
00017A18                            ; ---------------------------------------------------------------------------
00017A18                            
00017A18                            SuperStars_Init:					  ; ...
00017A18 5428 0024                  		addq.b	#2,obRoutine(a0)
00017A1C 217C 0000 0000 0004        		move.l	#SuperStars_MapUnc_1E1BE,4(a0)
00017A24 117C 0004 0001             		move.b	#4,obRender(a0)
00017A2A 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017A30 117C 0018 0014             		move.b	#$18,obActWid(a0)
00017A36 317C 055E 0002             		move.w	#$55E,art_tile(a0)
00017A3C 0838 0007 D002             		btst	#7,(v_player+art_tile).w
00017A42 6700                       		beq.s	SuperStars_Main
00017A44 08E8 0007 0002             		bset	#7,art_tile(a0)
00017A4A                            ; loc_1E138:
00017A4A                            SuperStars_Main:
00017A4A 4A38 FE19                  		tst.b	(Super_Sonic_flag).w
00017A4E 6700                       		beq.s	JmpTo8_DeleteObject
00017A50 4A28 0030                  		tst.b	$30(a0)
00017A54 6700                       		beq.s	loc_1E188
00017A56 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
00017A5A 6A00                       		bpl.s	loc_1E170
00017A5C 117C 0001 001E             		move.b	#1,anim_frame_duration(a0)
00017A62 5228 001A                  		addq.b	#1,mapping_frame(a0)
00017A66 0C28 0006 001A             		cmpi.b	#6,mapping_frame(a0)
00017A6C 6500                       		bcs.s	loc_1E170
00017A6E 117C 0000 001A             		move.b	#0,mapping_frame(a0)
00017A74 117C 0000 0030             		move.b	#0,$30(a0)
00017A7A 117C 0001 0031             		move.b	#1,$31(a0)
00017A80 4E75                       		rts
00017A82                            ; ===========================================================================
00017A82                            
00017A82                            loc_1E170:
00017A82 4A28 0031                  		tst.b	$31(a0)
00017A86 6600                       		bne.s	JmpTo6_DisplaySprite
00017A88                            
00017A88                            loc_1E176:
00017A88 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
00017A8E 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
00017A94                            
00017A94                            JmpTo6_DisplaySprite:
00017A94 4EF9 0000 F7AC             		jmp	DisplaySprite
00017A9A                            ; ===========================================================================
00017A9A                            
00017A9A                            loc_1E188:
00017A9A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017A9E 6600                       		bne.s	loc_1E1AA
00017AA0 3038 D020                  		move.w	(v_player+obInertia).w,d0
00017AA4 6A00                       		bpl.s	loc_1E196
00017AA6 4440                       		neg.w	d0
00017AA8                            
00017AA8                            loc_1E196:
00017AA8 0C40 0800                  		cmpi.w	#$800,d0
00017AAC 6500                       		bcs.s	loc_1E1AA
00017AAE 117C 0000 001A             		move.b	#0,mapping_frame(a0)
00017AB4 117C 0001 0030             		move.b	#1,$30(a0)
00017ABA 60CC                       		bra.s	loc_1E176
00017ABC                            ; ===========================================================================
00017ABC                            
00017ABC                            loc_1E1AA:
00017ABC 117C 0000 0030             		move.b	#0,$30(a0)
00017AC2 117C 0000 0031             		move.b	#0,$31(a0)
00017AC8 4E75                       		rts
00017ACA                            ; ===========================================================================
00017ACA                            
00017ACA                            JmpTo8_DeleteObject:
00017ACA 4EF9 0000 F7EC             		jmp	DeleteObject
00017AD0                            ; ===========================================================================
00017AD0                            
00017AD0                            ; -------------------------------------------------------------------------------
00017AD0                            ; sprite mappings
00017AD0                            ; -------------------------------------------------------------------------------
00017AD0                            ;Obj8F_MapUnc_1E1BE:
00017AD0                            SuperStars_MapUnc_1E1BE:	include "_maps/Super Stars.asm"	
00017AD0                            ; --------------------------------------------------------------------------------
00017AD0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017AD0                            ; --------------------------------------------------------------------------------
00017AD0                            
00017AD0                            SME_fq6vL:	
00017AD0 0000 0000                  		dc.w SME_fq6vL_C-SME_fq6vL, SME_fq6vL_21-SME_fq6vL	
00017AD4 0000 0000                  		dc.w SME_fq6vL_36-SME_fq6vL, SME_fq6vL_4B-SME_fq6vL	
00017AD8 0000 0000                  		dc.w SME_fq6vL_60-SME_fq6vL, SME_fq6vL_75-SME_fq6vL	
00017ADC 04                         SME_fq6vL_C:	dc.b 4	
00017ADD F800 0000 F8               		dc.b $F8, 0, 0, 0, $F8	
00017AE2 F800 0800 00               		dc.b $F8, 0, 8, 0, 0	
00017AE7 0000 1000 F8               		dc.b 0, 0, $10, 0, $F8	
00017AEC 0000 1800 00               		dc.b 0, 0, $18, 0, 0	
00017AF1 04                         SME_fq6vL_21:	dc.b 4	
00017AF2 F005 0001 F0               		dc.b $F0, 5, 0, 1, $F0	
00017AF7 F005 0801 00               		dc.b $F0, 5, 8, 1, 0	
00017AFC 0005 1001 F0               		dc.b 0, 5, $10, 1, $F0	
00017B01 0005 1801 00               		dc.b 0, 5, $18, 1, 0	
00017B06 04                         SME_fq6vL_36:	dc.b 4	
00017B07 E80A 0005 E8               		dc.b $E8, $A, 0, 5, $E8	
00017B0C E80A 0805 00               		dc.b $E8, $A, 8, 5, 0	
00017B11 000A 1005 E8               		dc.b 0, $A, $10, 5, $E8	
00017B16 000A 1805 00               		dc.b 0, $A, $18, 5, 0	
00017B1B 04                         SME_fq6vL_4B:	dc.b 4	
00017B1C F005 0001 F0               		dc.b $F0, 5, 0, 1, $F0	
00017B21 F005 0801 00               		dc.b $F0, 5, 8, 1, 0	
00017B26 0005 1001 F0               		dc.b 0, 5, $10, 1, $F0	
00017B2B 0005 1801 00               		dc.b 0, 5, $18, 1, 0	
00017B30 04                         SME_fq6vL_60:	dc.b 4	
00017B31 F800 0000 F8               		dc.b $F8, 0, 0, 0, $F8	
00017B36 F800 0800 00               		dc.b $F8, 0, 8, 0, 0	
00017B3B 0000 1000 F8               		dc.b 0, 0, $10, 0, $F8	
00017B40 0000 1800 00               		dc.b 0, 0, $18, 0, 0	
00017B45 00                         SME_fq6vL_75:	dc.b 0	
00017B46                            		even
00017B46                            		even
00017B46                            
00017B46                            Unc_SuperSonic_stars:	incbin "artunc/Super Stars.bin"
00017D06                            			even
00017D06                            			even
00017D06                            		include	"_incObj\4A Special Stage Entry (Unused).asm"
00017D06                            ; ---------------------------------------------------------------------------
00017D06                            ; Object 4A - special stage entry from beta
00017D06                            ; ---------------------------------------------------------------------------
00017D06                            
00017D06                            VanishSonic:
00017D06 7000                       		moveq	#0,d0
00017D08 1028 0024                  		move.b	obRoutine(a0),d0
00017D0C 323B 0000                  		move.w	Van_Index(pc,d0.w),d1
00017D10 4EFB 1000                  		jmp	Van_Index(pc,d1.w)
00017D14                            ; ===========================================================================
00017D14 0000                       Van_Index:	dc.w Van_Main-Van_Index
00017D16 0000                       		dc.w Van_RmvSonic-Van_Index
00017D18 0000                       		dc.w Van_LoadSonic-Van_Index
00017D1A                            
00017D1A =00000030                  van_time:	equ $30		; time for Sonic to disappear
00017D1A                            ; ===========================================================================
00017D1A                            
00017D1A                            Van_Main:	; Routine 0
00017D1A 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are pattern load cues empty?
00017D1E 6700                       		beq.s	@isempty	; if yes, branch
00017D20 4E75                       		rts	
00017D22                            
00017D22                            	@isempty:
00017D22 5428 0024                  		addq.b	#2,obRoutine(a0)
00017D26 217C 0000 0000 0004        		move.l	#Map_Vanish,obMap(a0)
00017D2E 117C 0004 0001             		move.b	#4,obRender(a0)
00017D34 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017D3A 117C 0038 0014             		move.b	#$38,obActWid(a0)
00017D40 317C 0541 0002             		move.w	#$541,obGfx(a0)
00017D46 317C 0078 0030             		move.w	#120,van_time(a0) ; set time for Sonic's disappearance to 2 seconds
00017D4C                            
00017D4C                            Van_RmvSonic:	; Routine 2
00017D4C 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
00017D52 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
00017D58 1178 D022 0022             		move.b	(v_player+obStatus).w,obStatus(a0)
00017D5E 43F9 0000 0000             		lea	(Ani_Vanish).l,a1
00017D64 4EB9 0000 C862             		jsr	(AnimateSprite).l
00017D6A 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
00017D70 6600                       		bne.s	@display
00017D72 4A38 D000                  		tst.b	(v_player).w
00017D76 6700                       		beq.s	@display
00017D78 11FC 0000 D000             		move.b	#0,(v_player).w	; remove Sonic
00017D88                            
00017D88                            	@display:
00017D88 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
00017D8E                            ; ===========================================================================
00017D8E                            
00017D8E                            Van_LoadSonic:	; Routine 4
00017D8E 5368 0030                  		subq.w	#1,van_time(a0)	; subtract 1 from time
00017D92 6600                       		bne.s	@wait		; if time remains, branch
00017D94 11FC 0001 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00017D9A 4EF9 0000 F7EC             		jmp	(DeleteObject).l
00017DA0                            
00017DA0                            	@wait:
00017DA0 4E75                       		rts	
00017DA0 4E75                       		rts	
00017DA2                            		include	"_incObj\08 Water Splash.asm"
00017DA2                            ; ---------------------------------------------------------------------------
00017DA2                            ; Object 08 - water splash (LZ)
00017DA2                            ; ---------------------------------------------------------------------------
00017DA2                            
00017DA2                            Splash:
00017DA2 7000                       		moveq	#0,d0
00017DA4 1028 0024                  		move.b	obRoutine(a0),d0
00017DA8 323B 0000                  		move.w	Spla_Index(pc,d0.w),d1
00017DAC 4EFB 1000                  		jmp	Spla_Index(pc,d1.w)
00017DB0                            ; ===========================================================================
00017DB0 0000                       Spla_Index:	dc.w Spla_Main-Spla_Index
00017DB2 0000                       		dc.w Spla_Display-Spla_Index
00017DB4 0000                       		dc.w Spla_Delete-Spla_Index
00017DB6                            ; ===========================================================================
00017DB6                            
00017DB6                            Spla_Main:    ; Routine 0
00017DB6 5428 0024                          addq.b    #2,obRoutine(a0)
00017DBA 217C 0000 0000 0004                move.l    #Map_Splash,obMap(a0)
00017DC2 0028 0004 0001                     ori.b    #4,obRender(a0)
00017DC8 117C 0001 0018                     move.b    #1,obPriority(a0)
00017DCE 117C 0010 0014                     move.b    #$10,obActWid(a0)
00017DD4 317C 4259 0002                     move.w    #$4259,obGfx(a0)
00017DDA 3178 D008 0008                     move.w    (v_player+obX).w,obX(a0) ; copy x-position from Sonic
00017DE0                            
00017DE0                            Spla_Display:    ; Routine 2
00017DE0                                    ;move.w    (v_waterpos1).w,obY(a0) ; copy y-position from water height
00017DE0 3178 FF92 000C                     move.w    (v_watersplashpos).w,obY(a0) ;TIS copy y-position from player
00017DE6 43F9 0000 0000                     lea    (Ani_Splash).l,a1
00017DEC 4EB9 0000 C862                     jsr    (AnimateSprite).l
00017DF2 4EF9 0000 F7AC                     jmp    (DisplaySprite).l
00017DF8                            ; ===========================================================================
00017DF8                            
00017DF8                            Spla_Delete:	; Routine 4
00017DF8 4EF9 0000 F7EC             		jmp	(DeleteObject).l	; delete when animation	is complete
00017DF8 4EF9 0000 F7EC             		jmp	(DeleteObject).l	; delete when animation	is complete
00017DFE                            		include	"_anim\Shield and Invincibility.asm"
00017DFE                            ; ---------------------------------------------------------------------------
00017DFE                            ; Animation script - shield and invincibility stars
00017DFE                            ; ---------------------------------------------------------------------------
00017DFE 0000                       Ani_Shield:	dc.w @shield-Ani_Shield
00017E00 0101 0002 0003 0004 0005+  @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, $A, 0, $B, 0, $C, 0, afEnd
00017E00 0101 0002 0003 0004 0005+  @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, $A, 0, $B, 0, $C, 0, afEnd
00017E1A                            Map_Shield:	include	"_maps\Shield.asm"
00017E1A                            ; --------------------------------------------------------------------------------
00017E1A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017E1A                            ; --------------------------------------------------------------------------------
00017E1A                            
00017E1A                            SME_ocN6K:	
00017E1A 0000 0000                  		dc.w SME_ocN6K_1A-SME_ocN6K, SME_ocN6K_1B-SME_ocN6K	
00017E1E 0000 0000                  		dc.w SME_ocN6K_30-SME_ocN6K, SME_ocN6K_45-SME_ocN6K	
00017E22 0000 0000                  		dc.w SME_ocN6K_5A-SME_ocN6K, SME_ocN6K_6F-SME_ocN6K	
00017E26 0000 0000                  		dc.w SME_ocN6K_7A-SME_ocN6K, SME_ocN6K_85-SME_ocN6K	
00017E2A 0000 0000                  		dc.w SME_ocN6K_90-SME_ocN6K, SME_ocN6K_9B-SME_ocN6K	
00017E2E 0000 0000                  		dc.w SME_ocN6K_A6-SME_ocN6K, SME_ocN6K_BB-SME_ocN6K	
00017E32 0000                       		dc.w SME_ocN6K_D0-SME_ocN6K	
00017E34 00                         SME_ocN6K_1A:	dc.b 0	
00017E35 04                         SME_ocN6K_1B:	dc.b 4	
00017E36 E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
00017E3B E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
00017E40 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
00017E45 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
00017E4A 04                         SME_ocN6K_30:	dc.b 4	
00017E4B E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
00017E50 E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
00017E55 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
00017E5A 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
00017E5F 04                         SME_ocN6K_45:	dc.b 4	
00017E60 E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
00017E65 E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
00017E6A 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
00017E6F 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
00017E74 04                         SME_ocN6K_5A:	dc.b 4	
00017E75 E80E 2000 EB               		dc.b $E8, $E, $20, 0, $EB	
00017E7A E802 200C 0B               		dc.b $E8, 2, $20, $C, $B	
00017E7F 000E 300F EB               		dc.b 0, $E, $30, $F, $EB	
00017E84 0002 301B 0B               		dc.b 0, 2, $30, $1B, $B	
00017E89 02                         SME_ocN6K_6F:	dc.b 2	
00017E8A E80E 2000 EC               		dc.b $E8, $E, $20, 0, $EC	
00017E8F 000E 300C EC               		dc.b 0, $E, $30, $C, $EC	
00017E94 02                         SME_ocN6K_7A:	dc.b 2	
00017E95 E80A 2000 F1               		dc.b $E8, $A, $20, 0, $F1	
00017E9A 000A 3009 F1               		dc.b 0, $A, $30, 9, $F1	
00017E9F 02                         SME_ocN6K_85:	dc.b 2	
00017EA0 E802 2000 F9               		dc.b $E8, 2, $20, 0, $F9	
00017EA5 0002 3003 F9               		dc.b 0, 2, $30, 3, $F9	
00017EAA 02                         SME_ocN6K_90:	dc.b 2	
00017EAB E80A 2800 F1               		dc.b $E8, $A, $28, 0, $F1	
00017EB0 000A 3809 F1               		dc.b 0, $A, $38, 9, $F1	
00017EB5 02                         SME_ocN6K_9B:	dc.b 2	
00017EB6 E80E 2800 EC               		dc.b $E8, $E, $28, 0, $EC	
00017EBB 000E 380C EC               		dc.b 0, $E, $38, $C, $EC	
00017EC0 04                         SME_ocN6K_A6:	dc.b 4	
00017EC1 E80E 2800 F3               		dc.b $E8, $E, $28, 0, $F3	
00017EC6 E802 280C EB               		dc.b $E8, 2, $28, $C, $EB	
00017ECB 000E 380F F3               		dc.b 0, $E, $38, $F, $F3	
00017ED0 0002 381B EB               		dc.b 0, 2, $38, $1B, $EB	
00017ED5 04                         SME_ocN6K_BB:	dc.b 4	
00017ED6 E80E 2800 FB               		dc.b $E8, $E, $28, 0, $FB	
00017EDB E80A 280C E3               		dc.b $E8, $A, $28, $C, $E3	
00017EE0 000A 3815 E3               		dc.b 0, $A, $38, $15, $E3	
00017EE5 000E 381E FB               		dc.b 0, $E, $38, $1E, $FB	
00017EEA 04                         SME_ocN6K_D0:	dc.b 4	
00017EEB E80E 2800 FB               		dc.b $E8, $E, $28, 0, $FB	
00017EF0 E80A 280C E3               		dc.b $E8, $A, $28, $C, $E3	
00017EF5 000A 3815 E3               		dc.b 0, $A, $38, $15, $E3	
00017EFA 000E 381E FB               		dc.b 0, $E, $38, $1E, $FB	
00017F00 00                         		even
00017F00 00                         		even
00017F00                            DPLC_Shield:	include	"_maps\Shield - Dynamic Gfx Script.asm"
00017F00                            ; --------------------------------------------------------------------------------
00017F00                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 3 & Knuckles format; --------------------------------------------------------------------------------
00017F00                            
00017F00                            SME_yRIsY:	
00017F00 0000 0000                  		dc.w SME_yRIsY_1A-SME_yRIsY, SME_yRIsY_1C-SME_yRIsY	
00017F04 0000 0000                  		dc.w SME_yRIsY_26-SME_yRIsY, SME_yRIsY_30-SME_yRIsY	
00017F08 0000 0000                  		dc.w SME_yRIsY_3A-SME_yRIsY, SME_yRIsY_44-SME_yRIsY	
00017F0C 0000 0000                  		dc.w SME_yRIsY_4A-SME_yRIsY, SME_yRIsY_50-SME_yRIsY	
00017F10 0000 0000                  		dc.w SME_yRIsY_56-SME_yRIsY, SME_yRIsY_5C-SME_yRIsY	
00017F14 0000 0000                  		dc.w SME_yRIsY_62-SME_yRIsY, SME_yRIsY_6C-SME_yRIsY	
00017F18 0000                       		dc.w SME_yRIsY_76-SME_yRIsY	
00017F1A 0000                       SME_yRIsY_1A:	dc.b 0, 0	
00017F1C 0004 B000 800C 800C B000   SME_yRIsY_1C:	dc.b 0, 4, $B0, 0, $80, $C, $80, $C, $B0, 0	
00017F26 0004 B015 8021 8021 B015   SME_yRIsY_26:	dc.b 0, 4, $B0, $15, $80, $21, $80, $21, $B0, $15	
00017F30 0004 B02A 8036 8036 B02A   SME_yRIsY_30:	dc.b 0, 4, $B0, $2A, $80, $36, $80, $36, $B0, $2A	
00017F3A 0004 B03F 204B B03F 204B   SME_yRIsY_3A:	dc.b 0, 4, $B0, $3F, $20, $4B, $B0, $3F, $20, $4B	
00017F44 0002 B04E B04E             SME_yRIsY_44:	dc.b 0, 2, $B0, $4E, $B0, $4E	
00017F4A 0002 805A 805A             SME_yRIsY_4A:	dc.b 0, 2, $80, $5A, $80, $5A	
00017F50 0002 2063 2063             SME_yRIsY_50:	dc.b 0, 2, $20, $63, $20, $63	
00017F56 0002 805A 805A             SME_yRIsY_56:	dc.b 0, 2, $80, $5A, $80, $5A	
00017F5C 0002 B04E B04E             SME_yRIsY_5C:	dc.b 0, 2, $B0, $4E, $B0, $4E	
00017F62 0004 B03F 204B B03F 204B   SME_yRIsY_62:	dc.b 0, 4, $B0, $3F, $20, $4B, $B0, $3F, $20, $4B	
00017F6C 0004 B02A 8036 8036 B02A   SME_yRIsY_6C:	dc.b 0, 4, $B0, $2A, $80, $36, $80, $36, $B0, $2A	
00017F76 0004 B015 8021 8021 B015   SME_yRIsY_76:	dc.b 0, 4, $B0, $15, $80, $21, $80, $21, $B0, $15	
00017F80                            		even
00017F80                            		even
00017F80                            Map_InvStars:	include	"_maps\Invincibility Stars.asm"
00017F80                            ; ================================================================================
00017F80                            ; Sprite Mappings - generated by Flex 2 Thu Apr 23 2020 12:30:36 GMT+0300 (RTZ 2 (зима))
00017F80                            ; ================================================================================
00017F80                            
00017F80                            InvStarMap:
00017F80 0000 0000                  	dc.w $0, InvStarMap_1-InvStarMap
00017F84 0000 0000                  	dc.w InvStarMap_2-InvStarMap, InvStarMap_3-InvStarMap
00017F88 0000 0000                  	dc.w InvStarMap_4-InvStarMap, InvStarMap_5-InvStarMap
00017F8C 0000 0000                  	dc.w InvStarMap_6-InvStarMap, InvStarMap_7-InvStarMap
00017F90 0000                       	dc.w InvStarMap_8-InvStarMap
00017F92 01                         InvStarMap_1: dc.b $1
00017F93 F800 0000 FC               	dc.b $F8, $0, $0, $0, $FC
00017F98 01                         InvStarMap_2: dc.b $1
00017F99 F800 0001 FC               	dc.b $F8, $0, $0, $1, $FC
00017F9E 01                         InvStarMap_3: dc.b $1
00017F9F F801 0002 FC               	dc.b $F8, $1, $0, $2, $FC
00017FA4 01                         InvStarMap_4: dc.b $1
00017FA5 F801 0004 FC               	dc.b $F8, $1, $0, $4, $FC
00017FAA 01                         InvStarMap_5: dc.b $1
00017FAB F801 0006 FC               	dc.b $F8, $1, $0, $6, $FC
00017FB0 01                         InvStarMap_6: dc.b $1
00017FB1 F805 0008 F8               	dc.b $F8, $5, $0, $8, $F8
00017FB6 01                         InvStarMap_7: dc.b $1
00017FB7 F805 000C F8               	dc.b $F8, $5, $0, $C, $F8
00017FBC 01                         InvStarMap_8: dc.b $1
00017FBD F00F 0010 F0               	dc.b $F0, $F, $0, $10, $F0
00017FC2                            	even
00017FC2                            	even
00017FC2                            		include	"_anim\Special Stage Entry (Unused).asm"
00017FC2                            ; ---------------------------------------------------------------------------
00017FC2                            ; Animation script - special stage entry effect from beta
00017FC2                            ; ---------------------------------------------------------------------------
00017FC2 0000                       Ani_Vanish:	dc.w @vanish-Ani_Vanish
00017FC4 0500 0100 0100 0701 0702+  @vanish:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, afRoutine
00017FD8                            		even
00017FD8                            		even
00017FD8                            Map_Vanish:	include	"_maps\Special Stage Entry (Unused).asm"
00017FD8                            ; ---------------------------------------------------------------------------
00017FD8                            ; Sprite mappings - special stage entry	from beta
00017FD8                            ; ---------------------------------------------------------------------------
00017FD8                            Map_Vanish_internal:
00017FD8 0000                       		dc.w @flash1-Map_Vanish_internal
00017FDA 0000                       		dc.w @flash2-Map_Vanish_internal
00017FDC 0000                       		dc.w @flash3-Map_Vanish_internal
00017FDE 0000                       		dc.w @sparkle1-Map_Vanish_internal
00017FE0 0000                       		dc.w @sparkle2-Map_Vanish_internal
00017FE2 0000                       		dc.w @sparkle3-Map_Vanish_internal
00017FE4 0000                       		dc.w @sparkle4-Map_Vanish_internal
00017FE6 0000                       		dc.w @blank-Map_Vanish_internal
00017FE8 03                         @flash1:	dc.b 3
00017FE9 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00017FEE 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00017FF3 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00017FF8 03                         @flash2:	dc.b 3
00017FF9 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00017FFE 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00018003 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00018008 05                         @flash3:	dc.b 5
00018009 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
0001800E EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00018013 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00018018 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
0001801D 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00018022 09                         @sparkle1:	dc.b 9
00018023 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00018028 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
0001802D 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00018032 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00018037 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
0001803C F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00018041 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00018046 0000 0825 28               		dc.b 0,	0, 8, $25, $28
0001804B F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00018050 12                         @sparkle2:	dc.b $12
00018051 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00018056 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
0001805B F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00018060 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00018065 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
0001806A 1000 1026 00               		dc.b $10, 0, $10, $26, 0
0001806F 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00018074 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00018079 0000 0026 10               		dc.b 0,	0, 0, $26, $10
0001807E 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00018083 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00018088 0800 0029 20               		dc.b 8,	0, 0, $29, $20
0001808D F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00018092 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00018097 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
0001809C F800 1826 30               		dc.b $F8, 0, $18, $26, $30
000180A1 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
000180A6 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
000180AB 11                         @sparkle3:	dc.b $11
000180AC F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
000180B1 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
000180B6 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
000180BB 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
000180C0 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
000180C5 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000180CA 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
000180CF F800 1025 30               		dc.b $F8, 0, $10, $25, $30
000180D4 0000 0025 30               		dc.b 0,	0, 0, $25, $30
000180D9 0800 0825 30               		dc.b 8,	0, 8, $25, $30
000180DE 0000 0826 38               		dc.b 0,	0, 8, $26, $38
000180E3 0800 0029 38               		dc.b 8,	0, 0, $29, $38
000180E8 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
000180ED 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
000180F2 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
000180F7 0000 0025 48               		dc.b 0,	0, 0, $25, $48
000180FC 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00018101 09                         @sparkle4:	dc.b 9
00018102 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00018107 0400 0825 28               		dc.b 4,	0, 8, $25, $28
0001810C 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00018111 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00018116 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
0001811B FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00018120 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00018125 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
0001812A 04                         		dc.b 4
0001812B 0008 2758 00               @blank:		dc.b 0,	8, $27,	$58, 0
00018130                            		even
00018130                            		even
00018130                            		include	"_anim\Water Splash.asm"
00018130                            ; ---------------------------------------------------------------------------
00018130                            ; Animation script - water splash (LZ)
00018130                            ; ---------------------------------------------------------------------------
00018130 0000                       Ani_Splash:	dc.w @splash-Ani_Splash
00018132 0400 0102 FC               @splash:	dc.b 4,	0, 1, 2, afRoutine
00018138 00                         		even
00018138 00                         		even
00018138                            Map_Splash:	include	"_maps\Water Splash.asm"
00018138                            ; ---------------------------------------------------------------------------
00018138                            ; Sprite mappings - water splash (LZ)
00018138                            ; ---------------------------------------------------------------------------
00018138                            Map_Splash_internal:
00018138 0000                       		dc.w @splash1-Map_Splash_internal
0001813A 0000                       		dc.w @splash2-Map_Splash_internal
0001813C 0000                       		dc.w @splash3-Map_Splash_internal
0001813E 02                         @splash1:	dc.b 2
0001813F F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00018144 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00018149 02                         @splash2:	dc.b 2
0001814A E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
0001814F EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00018154 01                         @splash3:	dc.b 1
00018155 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
0001815A                            		even
0001815A                            		even
0001815A                            
0001815A                            		include	"_incObj\Sonic AnglePos.asm"
0001815A                            ; ---------------------------------------------------------------------------
0001815A                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
0001815A                            ; ---------------------------------------------------------------------------
0001815A                            
0001815A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001815A                            
0001815A                            
0001815A                            Sonic_AnglePos:
0001815A 0828 0003 0022             		btst	#3,obStatus(a0)
00018160 6700                       		beq.s	loc_14602
00018162 7000                       		moveq	#0,d0
00018164 11C0 F768                  		move.b	d0,($FFFFF768).w
00018168 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001816C 4E75                       		rts	
0001816E                            ; ===========================================================================
0001816E                            
0001816E                            loc_14602:
0001816E 7003                       		moveq	#3,d0
00018170 11C0 F768                  		move.b	d0,($FFFFF768).w
00018174 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00018178 1028 0026                  		move.b	obAngle(a0),d0
0001817C 0600 0020                  		addi.b	#$20,d0
00018180 6A00                       		bpl.s	loc_14624
00018182 1028 0026                  		move.b	obAngle(a0),d0
00018186 6A00                       		bpl.s	loc_1461E
00018188 5300                       		subq.b	#1,d0
0001818A                            
0001818A                            loc_1461E:
0001818A 0600 0020                  		addi.b	#$20,d0
0001818E 6000                       		bra.s	loc_14630
00018190                            ; ===========================================================================
00018190                            
00018190                            loc_14624:
00018190 1028 0026                  		move.b	obAngle(a0),d0
00018194 6A00                       		bpl.s	loc_1462C
00018196 5200                       		addq.b	#1,d0
00018198                            
00018198                            loc_1462C:
00018198 0600 001F                  		addi.b	#$1F,d0
0001819C                            
0001819C                            loc_14630:
0001819C 0200 00C0                  		andi.b	#$C0,d0
000181A0 0C00 0040                  		cmpi.b	#$40,d0
000181A4 6700 0000                  		beq.w	Sonic_WalkVertL
000181A8 0C00 0080                  		cmpi.b	#$80,d0
000181AC 6700 0000                  		beq.w	Sonic_WalkCeiling
000181B0 0C00 00C0                  		cmpi.b	#$C0,d0
000181B4 6700 0000                  		beq.w	Sonic_WalkVertR
000181B8 3428 000C                  		move.w	obY(a0),d2
000181BC 3628 0008                  		move.w	obX(a0),d3
000181C0 7000                       		moveq	#0,d0
000181C2 1028 0016                  		move.b	obHeight(a0),d0
000181C6 4880                       		ext.w	d0
000181C8 D440                       		add.w	d0,d2
000181CA 1028 0017                  		move.b	obWidth(a0),d0
000181CE 4880                       		ext.w	d0
000181D0 D640                       		add.w	d0,d3
000181D2 49F8 F768                  		lea	($FFFFF768).w,a4
000181D6 367C 0010                  		movea.w	#$10,a3
000181DA 3C3C 0000                  		move.w	#0,d6
000181DE 7A0D                       		moveq	#$D,d5
000181E0 6100 0000                  		bsr.w	FindFloor
000181E4 3F01                       		move.w	d1,-(sp)
000181E6 3428 000C                  		move.w	obY(a0),d2
000181EA 3628 0008                  		move.w	obX(a0),d3
000181EE 7000                       		moveq	#0,d0
000181F0 1028 0016                  		move.b	obHeight(a0),d0
000181F4 4880                       		ext.w	d0
000181F6 D440                       		add.w	d0,d2
000181F8 1028 0017                  		move.b	obWidth(a0),d0
000181FC 4880                       		ext.w	d0
000181FE 4440                       		neg.w	d0
00018200 D640                       		add.w	d0,d3
00018202 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018206 367C 0010                  		movea.w	#$10,a3
0001820A 3C3C 0000                  		move.w	#0,d6
0001820E 7A0D                       		moveq	#$D,d5
00018210 6100 0000                  		bsr.w	FindFloor
00018214 301F                       		move.w	(sp)+,d0
00018216 6100 0000                  		bsr.w	Sonic_Angle
0001821A 4A41                       		tst.w	d1
0001821C 6700                       		beq.s	locret_146BE
0001821E 6A00                       		bpl.s	loc_146C0
00018220 0C41 FFF2                  		cmpi.w	#-$E,d1
00018224 6D00                       		blt.s	locret_146E6
00018226 D368 000C                  		add.w	d1,obY(a0)
0001822A                            
0001822A                            locret_146BE:
0001822A 4E75                       		rts	
0001822C                            ; ===========================================================================
0001822C                            
0001822C                            loc_146C0:
0001822C 0C41 000E                  		cmpi.w	#$E,d1
00018230 6E00                       		bgt.s	loc_146CC
00018232                            
00018232                            loc_146C6:
00018232 D368 000C                  		add.w	d1,obY(a0)
00018236 4E75                       		rts	
00018238                            ; ===========================================================================
00018238                            
00018238                            loc_146CC:
00018238 4A28 0038                  		tst.b	$38(a0)
0001823C 66F4                       		bne.s	loc_146C6
0001823E 08E8 0001 0022             		bset	#1,obStatus(a0)
00018244 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001824A 117C 0001 001D             		move.b	#1,obNextAni(a0)
00018250 4E75                       		rts	
00018252                            ; ===========================================================================
00018252                            
00018252                            locret_146E6:
00018252 4E75                       		rts	
00018254                            ; End of function Sonic_AnglePos
00018254                            
00018254                            ; ===========================================================================
00018254 2428 0008                  		move.l	obX(a0),d2
00018258 3028 0010                  		move.w	obVelX(a0),d0
0001825C 48C0                       		ext.l	d0
0001825E E180                       		asl.l	#8,d0
00018260 9480                       		sub.l	d0,d2
00018262 2142 0008                  		move.l	d2,obX(a0)
00018266 303C 0038                  		move.w	#$38,d0
0001826A 48C0                       		ext.l	d0
0001826C E180                       		asl.l	#8,d0
0001826E 9680                       		sub.l	d0,d3
00018270 2143 000C                  		move.l	d3,obY(a0)
00018274 4E75                       		rts	
00018276                            ; ===========================================================================
00018276                            
00018276                            locret_1470A:
00018276 4E75                       		rts	
00018278                            ; ===========================================================================
00018278 2628 000C                  		move.l	obY(a0),d3
0001827C 3028 0012                  		move.w	obVelY(a0),d0
00018280 0440 0038                  		subi.w	#$38,d0
00018284 3140 0012                  		move.w	d0,obVelY(a0)
00018288 48C0                       		ext.l	d0
0001828A E180                       		asl.l	#8,d0
0001828C 9680                       		sub.l	d0,d3
0001828E 2143 000C                  		move.l	d3,obY(a0)
00018292 4E75                       		rts	
00018294 4E75                       		rts	
00018296                            ; ===========================================================================
00018296 2428 0008                  		move.l	obX(a0),d2
0001829A 2628 000C                  		move.l	obY(a0),d3
0001829E 3028 0010                  		move.w	obVelX(a0),d0
000182A2 48C0                       		ext.l	d0
000182A4 E180                       		asl.l	#8,d0
000182A6 9480                       		sub.l	d0,d2
000182A8 3028 0012                  		move.w	obVelY(a0),d0
000182AC 48C0                       		ext.l	d0
000182AE E180                       		asl.l	#8,d0
000182B0 9680                       		sub.l	d0,d3
000182B2 2142 0008                  		move.l	d2,obX(a0)
000182B6 2143 000C                  		move.l	d3,obY(a0)
000182BA 4E75                       		rts	
000182BC                            
000182BC                            ; ---------------------------------------------------------------------------
000182BC                            ; Subroutine to	change Sonic's angle as he walks along the floor
000182BC                            ; ---------------------------------------------------------------------------
000182BC                            
000182BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000182BC                            
000182BC                            
000182BC                            Sonic_Angle:
000182BC 1438 F76A                  		move.b	($FFFFF76A).w,d2
000182C0 B240                       		cmp.w	d0,d1
000182C2 6F00                       		ble.s	loc_1475E
000182C4 1438 F768                  		move.b	($FFFFF768).w,d2
000182C8 3200                       		move.w	d0,d1
000182CA                            
000182CA                            loc_1475E:
000182CA 0802 0000                  		btst	#0,d2
000182CE 6600                       		bne.s	loc_1476A
000182D0 1142 0026                  		move.b	d2,obAngle(a0)
000182D4 4E75                       		rts	
000182D6                            ; ===========================================================================
000182D6                            
000182D6                            loc_1476A:
000182D6 1428 0026                  		move.b	obAngle(a0),d2
000182DA 0602 0020                  		addi.b	#$20,d2
000182DE 0202 00C0                  		andi.b	#$C0,d2
000182E2 1142 0026                  		move.b	d2,obAngle(a0)
000182E6 4E75                       		rts	
000182E8                            ; End of function Sonic_Angle
000182E8                            
000182E8                            ; ---------------------------------------------------------------------------
000182E8                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000182E8                            ; ---------------------------------------------------------------------------
000182E8                            
000182E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000182E8                            
000182E8                            
000182E8                            Sonic_WalkVertR:
000182E8 3428 000C                  		move.w	obY(a0),d2
000182EC 3628 0008                  		move.w	obX(a0),d3
000182F0 7000                       		moveq	#0,d0
000182F2 1028 0017                  		move.b	obWidth(a0),d0
000182F6 4880                       		ext.w	d0
000182F8 4440                       		neg.w	d0
000182FA D440                       		add.w	d0,d2
000182FC 1028 0016                  		move.b	obHeight(a0),d0
00018300 4880                       		ext.w	d0
00018302 D640                       		add.w	d0,d3
00018304 49F8 F768                  		lea	($FFFFF768).w,a4
00018308 367C 0010                  		movea.w	#$10,a3
0001830C 3C3C 0000                  		move.w	#0,d6
00018310 7A0D                       		moveq	#$D,d5
00018312 6100 0000                  		bsr.w	FindWall
00018316 3F01                       		move.w	d1,-(sp)
00018318 3428 000C                  		move.w	obY(a0),d2
0001831C 3628 0008                  		move.w	obX(a0),d3
00018320 7000                       		moveq	#0,d0
00018322 1028 0017                  		move.b	obWidth(a0),d0
00018326 4880                       		ext.w	d0
00018328 D440                       		add.w	d0,d2
0001832A 1028 0016                  		move.b	obHeight(a0),d0
0001832E 4880                       		ext.w	d0
00018330 D640                       		add.w	d0,d3
00018332 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018336 367C 0010                  		movea.w	#$10,a3
0001833A 3C3C 0000                  		move.w	#0,d6
0001833E 7A0D                       		moveq	#$D,d5
00018340 6100 0000                  		bsr.w	FindWall
00018344 301F                       		move.w	(sp)+,d0
00018346 6100 FF74                  		bsr.w	Sonic_Angle
0001834A 4A41                       		tst.w	d1
0001834C 6700                       		beq.s	locret_147F0
0001834E 6A00                       		bpl.s	loc_147F2
00018350 0C41 FFF2                  		cmpi.w	#-$E,d1
00018354 6D00 FF20                  		blt.w	locret_1470A
00018358 D368 0008                  		add.w	d1,obX(a0)
0001835C                            
0001835C                            locret_147F0:
0001835C 4E75                       		rts	
0001835E                            ; ===========================================================================
0001835E                            
0001835E                            loc_147F2:
0001835E 0C41 000E                  		cmpi.w	#$E,d1
00018362 6E00                       		bgt.s	loc_147FE
00018364                            
00018364                            loc_147F8:
00018364 D368 0008                  		add.w	d1,obX(a0)
00018368 4E75                       		rts	
0001836A                            ; ===========================================================================
0001836A                            
0001836A                            loc_147FE:
0001836A 4A28 0038                  		tst.b	$38(a0)
0001836E 66F4                       		bne.s	loc_147F8
00018370 08E8 0001 0022             		bset	#1,obStatus(a0)
00018376 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001837C 117C 0001 001D             		move.b	#1,obNextAni(a0)
00018382 4E75                       		rts	
00018384                            ; End of function Sonic_WalkVertR
00018384                            
00018384                            ; ---------------------------------------------------------------------------
00018384                            ; Subroutine allowing Sonic to walk upside-down
00018384                            ; ---------------------------------------------------------------------------
00018384                            
00018384                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018384                            
00018384                            
00018384                            Sonic_WalkCeiling:
00018384 3428 000C                  		move.w	obY(a0),d2
00018388 3628 0008                  		move.w	obX(a0),d3
0001838C 7000                       		moveq	#0,d0
0001838E 1028 0016                  		move.b	obHeight(a0),d0
00018392 4880                       		ext.w	d0
00018394 9440                       		sub.w	d0,d2
00018396 0A42 000F                  		eori.w	#$F,d2
0001839A 1028 0017                  		move.b	obWidth(a0),d0
0001839E 4880                       		ext.w	d0
000183A0 D640                       		add.w	d0,d3
000183A2 49F8 F768                  		lea	($FFFFF768).w,a4
000183A6 367C FFF0                  		movea.w	#-$10,a3
000183AA 3C3C 1000                  		move.w	#$1000,d6
000183AE 7A0D                       		moveq	#$D,d5
000183B0 6100 0000                  		bsr.w	FindFloor
000183B4 3F01                       		move.w	d1,-(sp)
000183B6 3428 000C                  		move.w	obY(a0),d2
000183BA 3628 0008                  		move.w	obX(a0),d3
000183BE 7000                       		moveq	#0,d0
000183C0 1028 0016                  		move.b	obHeight(a0),d0
000183C4 4880                       		ext.w	d0
000183C6 9440                       		sub.w	d0,d2
000183C8 0A42 000F                  		eori.w	#$F,d2
000183CC 1028 0017                  		move.b	obWidth(a0),d0
000183D0 4880                       		ext.w	d0
000183D2 9640                       		sub.w	d0,d3
000183D4 49F8 F76A                  		lea	($FFFFF76A).w,a4
000183D8 367C FFF0                  		movea.w	#-$10,a3
000183DC 3C3C 1000                  		move.w	#$1000,d6
000183E0 7A0D                       		moveq	#$D,d5
000183E2 6100 0000                  		bsr.w	FindFloor
000183E6 301F                       		move.w	(sp)+,d0
000183E8 6100 FED2                  		bsr.w	Sonic_Angle
000183EC 4A41                       		tst.w	d1
000183EE 6700                       		beq.s	locret_14892
000183F0 6A00                       		bpl.s	loc_14894
000183F2 0C41 FFF2                  		cmpi.w	#-$E,d1
000183F6 6D00 FE5A                  		blt.w	locret_146E6
000183FA 9368 000C                  		sub.w	d1,obY(a0)
000183FE                            
000183FE                            locret_14892:
000183FE 4E75                       		rts	
00018400                            ; ===========================================================================
00018400                            
00018400                            loc_14894:
00018400 0C41 000E                  		cmpi.w	#$E,d1
00018404 6E00                       		bgt.s	loc_148A0
00018406                            
00018406                            loc_1489A:
00018406 9368 000C                  		sub.w	d1,obY(a0)
0001840A 4E75                       		rts	
0001840C                            ; ===========================================================================
0001840C                            
0001840C                            loc_148A0:
0001840C 4A28 0038                  		tst.b	$38(a0)
00018410 66F4                       		bne.s	loc_1489A
00018412 08E8 0001 0022             		bset	#1,obStatus(a0)
00018418 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001841E 117C 0001 001D             		move.b	#1,obNextAni(a0)
00018424 4E75                       		rts	
00018426                            ; End of function Sonic_WalkCeiling
00018426                            
00018426                            ; ---------------------------------------------------------------------------
00018426                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00018426                            ; ---------------------------------------------------------------------------
00018426                            
00018426                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018426                            
00018426                            
00018426                            Sonic_WalkVertL:
00018426 3428 000C                  		move.w	obY(a0),d2
0001842A 3628 0008                  		move.w	obX(a0),d3
0001842E 7000                       		moveq	#0,d0
00018430 1028 0017                  		move.b	obWidth(a0),d0
00018434 4880                       		ext.w	d0
00018436 9440                       		sub.w	d0,d2
00018438 1028 0016                  		move.b	obHeight(a0),d0
0001843C 4880                       		ext.w	d0
0001843E 9640                       		sub.w	d0,d3
00018440 0A43 000F                  		eori.w	#$F,d3
00018444 49F8 F768                  		lea	($FFFFF768).w,a4
00018448 367C FFF0                  		movea.w	#-$10,a3
0001844C 3C3C 0800                  		move.w	#$800,d6
00018450 7A0D                       		moveq	#$D,d5
00018452 6100 0000                  		bsr.w	FindWall
00018456 3F01                       		move.w	d1,-(sp)
00018458 3428 000C                  		move.w	obY(a0),d2
0001845C 3628 0008                  		move.w	obX(a0),d3
00018460 7000                       		moveq	#0,d0
00018462 1028 0017                  		move.b	obWidth(a0),d0
00018466 4880                       		ext.w	d0
00018468 D440                       		add.w	d0,d2
0001846A 1028 0016                  		move.b	obHeight(a0),d0
0001846E 4880                       		ext.w	d0
00018470 9640                       		sub.w	d0,d3
00018472 0A43 000F                  		eori.w	#$F,d3
00018476 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001847A 367C FFF0                  		movea.w	#-$10,a3
0001847E 3C3C 0800                  		move.w	#$800,d6
00018482 7A0D                       		moveq	#$D,d5
00018484 6100 0000                  		bsr.w	FindWall
00018488 301F                       		move.w	(sp)+,d0
0001848A 6100 FE30                  		bsr.w	Sonic_Angle
0001848E 4A41                       		tst.w	d1
00018490 6700                       		beq.s	locret_14934
00018492 6A00                       		bpl.s	loc_14936
00018494 0C41 FFF2                  		cmpi.w	#-$E,d1
00018498 6D00 FDDC                  		blt.w	locret_1470A
0001849C 9368 0008                  		sub.w	d1,obX(a0)
000184A0                            
000184A0                            locret_14934:
000184A0 4E75                       		rts	
000184A2                            ; ===========================================================================
000184A2                            
000184A2                            loc_14936:
000184A2 0C41 000E                  		cmpi.w	#$E,d1
000184A6 6E00                       		bgt.s	loc_14942
000184A8                            
000184A8                            loc_1493C:
000184A8 9368 0008                  		sub.w	d1,obX(a0)
000184AC 4E75                       		rts	
000184AE                            ; ===========================================================================
000184AE                            
000184AE                            loc_14942:
000184AE 4A28 0038                  		tst.b	$38(a0)
000184B2 66F4                       		bne.s	loc_1493C
000184B4 08E8 0001 0022             		bset	#1,obStatus(a0)
000184BA 08A8 0005 0022             		bclr	#5,obStatus(a0)
000184C0 117C 0001 001D             		move.b	#1,obNextAni(a0)
000184C6 4E75                       		rts	
000184C8                            ; End of function Sonic_WalkVertL
000184C8                            ; End of function Sonic_WalkVertL
000184C8                            
000184C8                            		include	"_incObj\sub FindNearestTile.asm"
000184C8                            ; ---------------------------------------------------------------------------
000184C8                            ; Subroutine to	find which tile	the object is standing on
000184C8                            
000184C8                            ; input:
000184C8                            ;	d2 = y-position of object's bottom edge
000184C8                            ;	d3 = x-position of object
000184C8                            
000184C8                            ; output:
000184C8                            ;	a1 = address within 256x256 mappings where object is standing
000184C8                            ;	     (refers to a 16x16 tile number)
000184C8                            ; ---------------------------------------------------------------------------
000184C8                            
000184C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000184C8                            
000184C8                            
000184C8                            FindNearestTile:
000184C8 3002                       		move.w	d2,d0		; get y-pos. of bottom edge of object
000184CA E248                       		lsr.w	#1,d0
000184CC 0240 0380                  		andi.w	#$380,d0
000184D0 3203                       		move.w	d3,d1		; get x-pos. of object
000184D2 E049                       		lsr.w	#8,d1
000184D4 0241 007F                  		andi.w	#$7F,d1
000184D8 D041                       		add.w	d1,d0		; combine
000184DA 72FF                       		moveq	#-1,d1
000184DC 43F8 A400                  		lea	(v_lvllayout).w,a1
000184E0 1231 0000                  		move.b	(a1,d0.w),d1	; get 256x256 tile number
000184E4 6700                       		beq.s	@blanktile	; branch if 0
000184E6 6B00                       		bmi.s	@specialtile	; branch if >$7F
000184E8 5301                       		subq.b	#1,d1
000184EA 4881                       		ext.w	d1
000184EC EE59                       		ror.w	#7,d1
000184EE 3002                       		move.w	d2,d0
000184F0 D040                       		add.w	d0,d0
000184F2 0240 01E0                  		andi.w	#$1E0,d0
000184F6 D240                       		add.w	d0,d1
000184F8 3003                       		move.w	d3,d0
000184FA E648                       		lsr.w	#3,d0
000184FC 0240 001E                  		andi.w	#$1E,d0
00018500 D240                       		add.w	d0,d1
00018502                            
00018502                            @blanktile:
00018502 2241                       		movea.l	d1,a1
00018504 4E75                       		rts	
00018506                            ; ===========================================================================
00018506                            
00018506                            @specialtile:
00018506 0241 007F                  		andi.w	#$7F,d1
0001850A 0828 0006 0001             		btst	#6,obRender(a0) ; is object "behind a loop"?
00018510 6700                       		beq.s	@treatasnormal	; if not, branch
00018512 5241                       		addq.w	#1,d1
00018514 0C41 0029                  		cmpi.w	#$29,d1
00018518 6600                       		bne.s	@treatasnormal
0001851A 323C 0051                  		move.w	#$51,d1
0001851E                            
0001851E                            	@treatasnormal:
0001851E 5301                       		subq.b	#1,d1
00018520 EE59                       		ror.w	#7,d1
00018522 3002                       		move.w	d2,d0
00018524 D040                       		add.w	d0,d0
00018526 0240 01E0                  		andi.w	#$1E0,d0
0001852A D240                       		add.w	d0,d1
0001852C 3003                       		move.w	d3,d0
0001852E E648                       		lsr.w	#3,d0
00018530 0240 001E                  		andi.w	#$1E,d0
00018534 D240                       		add.w	d0,d1
00018536 2241                       		movea.l	d1,a1
00018538 4E75                       		rts	
0001853A                            ; End of function FindNearestTile
0001853A                            ; End of function FindNearestTile
0001853A                            		include	"_incObj\sub FindFloor.asm"
0001853A                            ; ---------------------------------------------------------------------------
0001853A                            ; Subroutine to	find the floor
0001853A                            
0001853A                            ; input:
0001853A                            ;	d2 = y-position of object's bottom edge
0001853A                            ;	d3 = x-position of object
0001853A                            ;	d5 = bit to test for solidness
0001853A                            
0001853A                            ; output:
0001853A                            ;	d1 = distance to the floor
0001853A                            ;	a1 = address within 256x256 mappings where object is standing
0001853A                            ;	     (refers to a 16x16 tile number)
0001853A                            ;	(a4) = floor angle
0001853A                            ; ---------------------------------------------------------------------------
0001853A                            
0001853A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001853A                            
0001853A                            
0001853A                            FindFloor:
0001853A 618C                       		bsr.s	FindNearestTile
0001853C 3011                       		move.w	(a1),d0		; get value for solidness, orientation and 16x16 tile number
0001853E 3800                       		move.w	d0,d4
00018540 0240 07FF                  		andi.w	#$7FF,d0
00018544 6700                       		beq.s	@isblank	; branch if tile is blank
00018546 0B04                       		btst	d5,d4		; is the tile solid?
00018548 6600                       		bne.s	@issolid	; if yes, branch
0001854A                            
0001854A                            @isblank:
0001854A D44B                       		add.w	a3,d2
0001854C 6100 0000                  		bsr.w	FindFloor2	; try tile below the nearest
00018550 944B                       		sub.w	a3,d2
00018552 0641 0010                  		addi.w	#$10,d1		; return distance to floor
00018556 4E75                       		rts	
00018558                            ; ===========================================================================
00018558                            
00018558                            @issolid:
00018558 2478 F796                  		movea.l	(v_collindex).w,a2
0001855C 1032 0000                  		move.b	(a2,d0.w),d0	; get collision block number
00018560 0240 00FF                  		andi.w	#$FF,d0
00018564 67E4                       		beq.s	@isblank	; branch if 0
00018566 45F9 0000 0000             		lea	(AngleMap).l,a2
0001856C 18B2 0000                  		move.b	(a2,d0.w),(a4)	; get collision angle value
00018570 E948                       		lsl.w	#4,d0
00018572 3203                       		move.w	d3,d1		; get x-pos. of object
00018574 0804 000B                  		btst	#$B,d4		; is block flipped horizontally?
00018578 6700                       		beq.s	@noflip		; if not, branch
0001857A 4641                       		not.w	d1
0001857C 4414                       		neg.b	(a4)
0001857E                            
0001857E                            	@noflip:
0001857E 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00018582 6700                       		beq.s	@noflip2	; if not, branch
00018584 0614 0040                  		addi.b	#$40,(a4)
00018588 4414                       		neg.b	(a4)
0001858A 0414 0040                  		subi.b	#$40,(a4)
0001858E                            
0001858E                            	@noflip2:
0001858E 0241 000F                  		andi.w	#$F,d1
00018592 D240                       		add.w	d0,d1		; (block num. * $10) + x-pos. = place in array
00018594 45F9 0000 0000             		lea	(CollArray1).l,a2
0001859A 1032 1000                  		move.b	(a2,d1.w),d0	; get collision height
0001859E 4880                       		ext.w	d0
000185A0 BD44                       		eor.w	d6,d4
000185A2 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
000185A6 6700                       		beq.s	@noflip3	; if not, branch
000185A8 4440                       		neg.w	d0
000185AA                            
000185AA                            	@noflip3:
000185AA 4A40                       		tst.w	d0
000185AC 679C                       		beq.s	@isblank	; branch if height is 0
000185AE 6B00                       		bmi.s	@negfloor	; branch if height is negative
000185B0 0C00 0010                  		cmpi.b	#$10,d0
000185B4 6700                       		beq.s	@maxfloor	; branch if height is $10 (max)
000185B6 3202                       		move.w	d2,d1		; get y-pos. of object
000185B8 0241 000F                  		andi.w	#$F,d1
000185BC D041                       		add.w	d1,d0
000185BE 323C 000F                  		move.w	#$F,d1
000185C2 9240                       		sub.w	d0,d1		; return distance to floor
000185C4 4E75                       		rts	
000185C6                            ; ===========================================================================
000185C6                            
000185C6                            @negfloor:
000185C6 3202                       		move.w	d2,d1
000185C8 0241 000F                  		andi.w	#$F,d1
000185CC D041                       		add.w	d1,d0
000185CE 6A00 FF7A                  		bpl.w	@isblank
000185D2                            
000185D2                            @maxfloor:
000185D2 944B                       		sub.w	a3,d2
000185D4 6100 0000                  		bsr.w	FindFloor2	; try tile above the nearest
000185D8 D44B                       		add.w	a3,d2
000185DA 0441 0010                  		subi.w	#$10,d1		; return distance to floor
000185DE 4E75                       		rts	
000185E0                            ; End of function FindFloor
000185E0                            
000185E0                            
000185E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000185E0                            
000185E0                            
000185E0                            FindFloor2:
000185E0 6100 FEE6                  		bsr.w	FindNearestTile
000185E4 3011                       		move.w	(a1),d0
000185E6 3800                       		move.w	d0,d4
000185E8 0240 07FF                  		andi.w	#$7FF,d0
000185EC 6700                       		beq.s	@isblank2
000185EE 0B04                       		btst	d5,d4
000185F0 6600                       		bne.s	@issolid
000185F2                            
000185F2                            @isblank2:
000185F2 323C 000F                  		move.w	#$F,d1
000185F6 3002                       		move.w	d2,d0
000185F8 0240 000F                  		andi.w	#$F,d0
000185FC 9240                       		sub.w	d0,d1
000185FE 4E75                       		rts	
00018600                            ; ===========================================================================
00018600                            
00018600                            @issolid:
00018600 2478 F796                  		movea.l	(v_collindex).w,a2
00018604 1032 0000                  		move.b	(a2,d0.w),d0
00018608 0240 00FF                  		andi.w	#$FF,d0
0001860C 67E4                       		beq.s	@isblank2
0001860E 45F9 0000 0000             		lea	(AngleMap).l,a2
00018614 18B2 0000                  		move.b	(a2,d0.w),(a4)
00018618 E948                       		lsl.w	#4,d0
0001861A 3203                       		move.w	d3,d1
0001861C 0804 000B                  		btst	#$B,d4
00018620 6700                       		beq.s	@noflip
00018622 4641                       		not.w	d1
00018624 4414                       		neg.b	(a4)
00018626                            
00018626                            	@noflip:
00018626 0804 000C                  		btst	#$C,d4
0001862A 6700                       		beq.s	@noflip2
0001862C 0614 0040                  		addi.b	#$40,(a4)
00018630 4414                       		neg.b	(a4)
00018632 0414 0040                  		subi.b	#$40,(a4)
00018636                            
00018636                            	@noflip2:
00018636 0241 000F                  		andi.w	#$F,d1
0001863A D240                       		add.w	d0,d1
0001863C 45F9 0000 0000             		lea	(CollArray1).l,a2
00018642 1032 1000                  		move.b	(a2,d1.w),d0
00018646 4880                       		ext.w	d0
00018648 BD44                       		eor.w	d6,d4
0001864A 0804 000C                  		btst	#$C,d4
0001864E 6700                       		beq.s	@noflip3
00018650 4440                       		neg.w	d0
00018652                            
00018652                            	@noflip3:
00018652 4A40                       		tst.w	d0
00018654 679C                       		beq.s	@isblank2
00018656 6B00                       		bmi.s	@negfloor
00018658 3202                       		move.w	d2,d1
0001865A 0241 000F                  		andi.w	#$F,d1
0001865E D041                       		add.w	d1,d0
00018660 323C 000F                  		move.w	#$F,d1
00018664 9240                       		sub.w	d0,d1
00018666 4E75                       		rts	
00018668                            ; ===========================================================================
00018668                            
00018668                            @negfloor:
00018668 3202                       		move.w	d2,d1
0001866A 0241 000F                  		andi.w	#$F,d1
0001866E D041                       		add.w	d1,d0
00018670 6A00 FF80                  		bpl.w	@isblank2
00018674 4641                       		not.w	d1
00018676 4E75                       		rts	
00018678                            ; End of function FindFloor2
00018678                            ; End of function FindFloor2
00018678                            		include	"_incObj\sub FindWall.asm"
00018678                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018678                            
00018678                            
00018678                            FindWall:
00018678 6100 FE4E                  		bsr.w	FindNearestTile
0001867C 3011                       		move.w	(a1),d0
0001867E 3800                       		move.w	d0,d4
00018680 0240 07FF                  		andi.w	#$7FF,d0
00018684 6700                       		beq.s	loc_14B1E
00018686 0B04                       		btst	d5,d4
00018688 6600                       		bne.s	loc_14B2C
0001868A                            
0001868A                            loc_14B1E:
0001868A D64B                       		add.w	a3,d3
0001868C 6100 0000                  		bsr.w	FindWall2
00018690 964B                       		sub.w	a3,d3
00018692 0641 0010                  		addi.w	#$10,d1
00018696 4E75                       		rts	
00018698                            ; ===========================================================================
00018698                            
00018698                            loc_14B2C:
00018698 2478 F796                  		movea.l	(v_collindex).w,a2
0001869C 1032 0000                  		move.b	(a2,d0.w),d0
000186A0 0240 00FF                  		andi.w	#$FF,d0
000186A4 67E4                       		beq.s	loc_14B1E
000186A6 45F9 0000 0000             		lea	(AngleMap).l,a2
000186AC 18B2 0000                  		move.b	(a2,d0.w),(a4)
000186B0 E948                       		lsl.w	#4,d0
000186B2 3202                       		move.w	d2,d1
000186B4 0804 000C                  		btst	#$C,d4
000186B8 6700                       		beq.s	loc_14B5A
000186BA 4641                       		not.w	d1
000186BC 0614 0040                  		addi.b	#$40,(a4)
000186C0 4414                       		neg.b	(a4)
000186C2 0414 0040                  		subi.b	#$40,(a4)
000186C6                            
000186C6                            loc_14B5A:
000186C6 0804 000B                  		btst	#$B,d4
000186CA 6700                       		beq.s	loc_14B62
000186CC 4414                       		neg.b	(a4)
000186CE                            
000186CE                            loc_14B62:
000186CE 0241 000F                  		andi.w	#$F,d1
000186D2 D240                       		add.w	d0,d1
000186D4 45F9 0000 0000             		lea	(CollArray2).l,a2
000186DA 1032 1000                  		move.b	(a2,d1.w),d0
000186DE 4880                       		ext.w	d0
000186E0 BD44                       		eor.w	d6,d4
000186E2 0804 000B                  		btst	#$B,d4
000186E6 6700                       		beq.s	loc_14B7E
000186E8 4440                       		neg.w	d0
000186EA                            
000186EA                            loc_14B7E:
000186EA 4A40                       		tst.w	d0
000186EC 679C                       		beq.s	loc_14B1E
000186EE 6B00                       		bmi.s	loc_14B9A
000186F0 0C00 0010                  		cmpi.b	#$10,d0
000186F4 6700                       		beq.s	loc_14BA6
000186F6 3203                       		move.w	d3,d1
000186F8 0241 000F                  		andi.w	#$F,d1
000186FC D041                       		add.w	d1,d0
000186FE 323C 000F                  		move.w	#$F,d1
00018702 9240                       		sub.w	d0,d1
00018704 4E75                       		rts	
00018706                            ; ===========================================================================
00018706                            
00018706                            loc_14B9A:
00018706 3203                       		move.w	d3,d1
00018708 0241 000F                  		andi.w	#$F,d1
0001870C D041                       		add.w	d1,d0
0001870E 6A00 FF7A                  		bpl.w	loc_14B1E
00018712                            
00018712                            loc_14BA6:
00018712 964B                       		sub.w	a3,d3
00018714 6100 0000                  		bsr.w	FindWall2
00018718 D64B                       		add.w	a3,d3
0001871A 0441 0010                  		subi.w	#$10,d1
0001871E 4E75                       		rts	
00018720                            ; End of function FindWall
00018720                            
00018720                            
00018720                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018720                            
00018720                            
00018720                            FindWall2:
00018720 6100 FDA6                  		bsr.w	FindNearestTile
00018724 3011                       		move.w	(a1),d0
00018726 3800                       		move.w	d0,d4
00018728 0240 07FF                  		andi.w	#$7FF,d0
0001872C 6700                       		beq.s	loc_14BC6
0001872E 0B04                       		btst	d5,d4
00018730 6600                       		bne.s	loc_14BD4
00018732                            
00018732                            loc_14BC6:
00018732 323C 000F                  		move.w	#$F,d1
00018736 3003                       		move.w	d3,d0
00018738 0240 000F                  		andi.w	#$F,d0
0001873C 9240                       		sub.w	d0,d1
0001873E 4E75                       		rts	
00018740                            ; ===========================================================================
00018740                            
00018740                            loc_14BD4:
00018740 2478 F796                  		movea.l	(v_collindex).w,a2
00018744 1032 0000                  		move.b	(a2,d0.w),d0
00018748 0240 00FF                  		andi.w	#$FF,d0
0001874C 67E4                       		beq.s	loc_14BC6
0001874E 45F9 0000 0000             		lea	(AngleMap).l,a2
00018754 18B2 0000                  		move.b	(a2,d0.w),(a4)
00018758 E948                       		lsl.w	#4,d0
0001875A 3202                       		move.w	d2,d1
0001875C 0804 000C                  		btst	#$C,d4
00018760 6700                       		beq.s	loc_14C02
00018762 4641                       		not.w	d1
00018764 0614 0040                  		addi.b	#$40,(a4)
00018768 4414                       		neg.b	(a4)
0001876A 0414 0040                  		subi.b	#$40,(a4)
0001876E                            
0001876E                            loc_14C02:
0001876E 0804 000B                  		btst	#$B,d4
00018772 6700                       		beq.s	loc_14C0A
00018774 4414                       		neg.b	(a4)
00018776                            
00018776                            loc_14C0A:
00018776 0241 000F                  		andi.w	#$F,d1
0001877A D240                       		add.w	d0,d1
0001877C 45F9 0000 0000             		lea	(CollArray2).l,a2
00018782 1032 1000                  		move.b	(a2,d1.w),d0
00018786 4880                       		ext.w	d0
00018788 BD44                       		eor.w	d6,d4
0001878A 0804 000B                  		btst	#$B,d4
0001878E 6700                       		beq.s	loc_14C26
00018790 4440                       		neg.w	d0
00018792                            
00018792                            loc_14C26:
00018792 4A40                       		tst.w	d0
00018794 679C                       		beq.s	loc_14BC6
00018796 6B00                       		bmi.s	loc_14C3C
00018798 3203                       		move.w	d3,d1
0001879A 0241 000F                  		andi.w	#$F,d1
0001879E D041                       		add.w	d1,d0
000187A0 323C 000F                  		move.w	#$F,d1
000187A4 9240                       		sub.w	d0,d1
000187A6 4E75                       		rts	
000187A8                            ; ===========================================================================
000187A8                            
000187A8                            loc_14C3C:
000187A8 3203                       		move.w	d3,d1
000187AA 0241 000F                  		andi.w	#$F,d1
000187AE D041                       		add.w	d1,d0
000187B0 6A00 FF80                  		bpl.w	loc_14BC6
000187B4 4641                       		not.w	d1
000187B6 4E75                       		rts	
000187B8                            ; End of function FindWall2
000187B8                            ; End of function FindWall2
000187B8                            
000187B8                            ; ---------------------------------------------------------------------------
000187B8                            ; Unused floor/wall subroutine - logs something	to do with collision
000187B8                            ; ---------------------------------------------------------------------------
000187B8                            
000187B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000187B8                            
000187B8                            
000187B8                            FloorLog_Unk:
000187B8 4E75                       		rts	
000187BA                            
000187BA 43F9 0000 0000             		lea	(CollArray1).l,a1
000187C0 45F9 0000 0000             		lea	(CollArray1).l,a2
000187C6 363C 00FF                  		move.w	#$FF,d3
000187CA                            
000187CA                            loc_14C5E:
000187CA 7A10                       		moveq	#$10,d5
000187CC 343C 000F                  		move.w	#$F,d2
000187D0                            
000187D0                            loc_14C64:
000187D0 7800                       		moveq	#0,d4
000187D2 323C 000F                  		move.w	#$F,d1
000187D6                            
000187D6                            loc_14C6A:
000187D6 3019                       		move.w	(a1)+,d0
000187D8 EAA8                       		lsr.l	d5,d0
000187DA D944                       		addx.w	d4,d4
000187DC 51C9 FFF8                  		dbf	d1,loc_14C6A
000187E0                            
000187E0 34C4                       		move.w	d4,(a2)+
000187E2 92FC 0020                  		suba.w	#$20,a1
000187E6 5345                       		subq.w	#1,d5
000187E8 51CA FFE6                  		dbf	d2,loc_14C64
000187EC                            
000187EC D2FC 0020                  		adda.w	#$20,a1
000187F0 51CB FFD8                  		dbf	d3,loc_14C5E
000187F4                            
000187F4 43F9 0000 0000             		lea	(CollArray1).l,a1
000187FA 45F9 0000 0000             		lea	(CollArray2).l,a2
00018800 6100                       		bsr.s	FloorLog_Unk2
00018802 43F9 0000 0000             		lea	(CollArray1).l,a1
00018808 45F9 0000 0000             		lea	(CollArray1).l,a2
0001880E                            
0001880E                            ; End of function FloorLog_Unk
0001880E                            
0001880E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001880E                            
0001880E                            
0001880E                            FloorLog_Unk2:
0001880E 363C 0FFF                  		move.w	#$FFF,d3
00018812                            
00018812                            loc_14CA6:
00018812 7400                       		moveq	#0,d2
00018814 323C 000F                  		move.w	#$F,d1
00018818 3019                       		move.w	(a1)+,d0
0001881A 6700                       		beq.s	loc_14CD4
0001881C 6B00                       		bmi.s	loc_14CBE
0001881E                            
0001881E                            loc_14CB2:
0001881E E248                       		lsr.w	#1,d0
00018820 6400                       		bhs.s	loc_14CB8
00018822 5202                       		addq.b	#1,d2
00018824                            
00018824                            loc_14CB8:
00018824 51C9 FFF8                  		dbf	d1,loc_14CB2
00018828                            
00018828 6000                       		bra.s	loc_14CD6
0001882A                            ; ===========================================================================
0001882A                            
0001882A                            loc_14CBE:
0001882A 0C40 FFFF                  		cmpi.w	#-1,d0
0001882E 6700                       		beq.s	loc_14CD0
00018830                            
00018830                            loc_14CC4:
00018830 E348                       		lsl.w	#1,d0
00018832 6400                       		bhs.s	loc_14CCA
00018834 5302                       		subq.b	#1,d2
00018836                            
00018836                            loc_14CCA:
00018836 51C9 FFF8                  		dbf	d1,loc_14CC4
0001883A                            
0001883A 6000                       		bra.s	loc_14CD6
0001883C                            ; ===========================================================================
0001883C                            
0001883C                            loc_14CD0:
0001883C 303C 0010                  		move.w	#$10,d0
00018840                            
00018840                            loc_14CD4:
00018840 3400                       		move.w	d0,d2
00018842                            
00018842                            loc_14CD6:
00018842 14C2                       		move.b	d2,(a2)+
00018844 51CB FFCC                  		dbf	d3,loc_14CA6
00018848                            
00018848 4E75                       		rts	
0001884A                            
0001884A                            ; End of function FloorLog_Unk2
0001884A                            
0001884A                            
0001884A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001884A                            
0001884A                            
0001884A                            Sonic_WalkSpeed:
0001884A 2628 0008                  		move.l	obX(a0),d3
0001884E 2428 000C                  		move.l	obY(a0),d2
00018852 3228 0010                  		move.w	obVelX(a0),d1
00018856 48C1                       		ext.l	d1
00018858 E181                       		asl.l	#8,d1
0001885A D681                       		add.l	d1,d3
0001885C 3228 0012                  		move.w	obVelY(a0),d1
00018860 48C1                       		ext.l	d1
00018862 E181                       		asl.l	#8,d1
00018864 D481                       		add.l	d1,d2
00018866 4842                       		swap	d2
00018868 4843                       		swap	d3
0001886A 11C0 F768                  		move.b	d0,(v_anglebuffer).w
0001886E 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00018872 1200                       		move.b	d0,d1
00018874 0600 0020                  		addi.b	#$20,d0
00018878 6A00                       		bpl.s	loc_14D1A
0001887A 1001                       		move.b	d1,d0
0001887C 6A00                       		bpl.s	loc_14D14
0001887E 5300                       		subq.b	#1,d0
00018880                            
00018880                            loc_14D14:
00018880 0600 0020                  		addi.b	#$20,d0
00018884 6000                       		bra.s	loc_14D24
00018886                            ; ===========================================================================
00018886                            
00018886                            loc_14D1A:
00018886 1001                       		move.b	d1,d0
00018888 6A00                       		bpl.s	loc_14D20
0001888A 5200                       		addq.b	#1,d0
0001888C                            
0001888C                            loc_14D20:
0001888C 0600 001F                  		addi.b	#$1F,d0
00018890                            
00018890                            loc_14D24:
00018890 0200 00C0                  		andi.b	#$C0,d0
00018894 6700 0000                  		beq.w	loc_14DF0
00018898 0C00 0080                  		cmpi.b	#$80,d0
0001889C 6700 0000                  		beq.w	loc_14F7C
000188A0 0201 0038                  		andi.b	#$38,d1
000188A4 6600                       		bne.s	loc_14D3C
000188A6 5042                       		addq.w	#8,d2
000188A8                            
000188A8                            loc_14D3C:
000188A8 0C00 0040                  		cmpi.b	#$40,d0
000188AC 6700 0000                  		beq.w	loc_1504A
000188B0 6000 0000                  		bra.w	loc_14EBC
000188B4                            
000188B4                            ; End of function Sonic_WalkSpeed
000188B4                            
000188B4                            
000188B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000188B4                            
000188B4                            
000188B4                            sub_14D48:
000188B4 11C0 F768                  		move.b	d0,(v_anglebuffer).w
000188B8 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000188BC 0600 0020                  		addi.b	#$20,d0
000188C0 0200 00C0                  		andi.b	#$C0,d0
000188C4 0C00 0040                  		cmpi.b	#$40,d0
000188C8 6700 0000                  		beq.w	loc_14FD6
000188CC 0C00 0080                  		cmpi.b	#$80,d0
000188D0 6700 0000                  		beq.w	Sonic_DontRunOnWalls
000188D4 0C00 00C0                  		cmpi.b	#$C0,d0
000188D8 6700 0000                  		beq.w	sub_14E50
000188DC                            
000188DC                            ; End of function sub_14D48
000188DC                            
000188DC                            ; ---------------------------------------------------------------------------
000188DC                            ; Subroutine to	make Sonic land	on the floor after jumping
000188DC                            ; ---------------------------------------------------------------------------
000188DC                            
000188DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000188DC                            
000188DC                            
000188DC                            Sonic_HitFloor:
000188DC 3428 000C                  		move.w	obY(a0),d2
000188E0 3628 0008                  		move.w	obX(a0),d3
000188E4 7000                       		moveq	#0,d0
000188E6 1028 0016                  		move.b	obHeight(a0),d0
000188EA 4880                       		ext.w	d0
000188EC D440                       		add.w	d0,d2
000188EE 1028 0017                  		move.b	obWidth(a0),d0
000188F2 4880                       		ext.w	d0
000188F4 D640                       		add.w	d0,d3
000188F6 49F8 F768                  		lea	(v_anglebuffer).w,a4
000188FA 367C 0010                  		movea.w	#$10,a3
000188FE 3C3C 0000                  		move.w	#0,d6
00018902 7A0D                       		moveq	#$D,d5
00018904 6100 FC34                  		bsr.w	FindFloor
00018908 3F01                       		move.w	d1,-(sp)
0001890A 3428 000C                  		move.w	obY(a0),d2
0001890E 3628 0008                  		move.w	obX(a0),d3
00018912 7000                       		moveq	#0,d0
00018914 1028 0016                  		move.b	obHeight(a0),d0
00018918 4880                       		ext.w	d0
0001891A D440                       		add.w	d0,d2
0001891C 1028 0017                  		move.b	obWidth(a0),d0
00018920 4880                       		ext.w	d0
00018922 9640                       		sub.w	d0,d3
00018924 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018928 367C 0010                  		movea.w	#$10,a3
0001892C 3C3C 0000                  		move.w	#0,d6
00018930 7A0D                       		moveq	#$D,d5
00018932 6100 FC06                  		bsr.w	FindFloor
00018936 301F                       		move.w	(sp)+,d0
00018938 143C 0000                  		move.b	#0,d2
0001893C                            
0001893C                            loc_14DD0:
0001893C 1638 F76A                  		move.b	($FFFFF76A).w,d3
00018940 B240                       		cmp.w	d0,d1
00018942 6F00                       		ble.s	loc_14DDE
00018944 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018948 C141                       		exg	d0,d1
0001894A                            
0001894A                            loc_14DDE:
0001894A 0803 0000                  		btst	#0,d3
0001894E 6700                       		beq.s	locret_14DE6
00018950 1602                       		move.b	d2,d3
00018952                            
00018952                            locret_14DE6:
00018952 4E75                       		rts	
00018954                            
00018954                            ; End of function Sonic_HitFloor
00018954                            
00018954                            ; ===========================================================================
00018954 3428 000C                  		move.w	obY(a0),d2
00018958 3628 0008                  		move.w	obX(a0),d3
0001895C                            
0001895C                            loc_14DF0:
0001895C 0642 000A                  		addi.w	#$A,d2
00018960 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018964 367C 0010                  		movea.w	#$10,a3
00018968 3C3C 0000                  		move.w	#0,d6
0001896C 7A0E                       		moveq	#$E,d5
0001896E 6100 FBCA                  		bsr.w	FindFloor
00018972 143C 0000                  		move.b	#0,d2
00018976                            
00018976                            loc_14E0A:
00018976 1638 F768                  		move.b	(v_anglebuffer).w,d3
0001897A 0803 0000                  		btst	#0,d3
0001897E 6700                       		beq.s	locret_14E16
00018980 1602                       		move.b	d2,d3
00018982                            
00018982                            locret_14E16:
00018982 4E75                       		rts	
00018984                            
00018984                            		include	"_incObj\sub ObjFloorDist.asm"
00018984                            ; ---------------------------------------------------------------------------
00018984                            ; Subroutine to find the distance of an object to the floor
00018984                            
00018984                            ; input:
00018984                            ;	d3 = x-pos. of object (ObjFloorDist2 only)
00018984                            
00018984                            ; output:
00018984                            ;	d1 = distance to the floor
00018984                            ;	d3 = floor angle
00018984                            ;	a1 = address within 256x256 mappings where object is standing
00018984                            ;	     (refers to a 16x16 tile number)
00018984                            ;	(a4) = floor angle
00018984                            ; ---------------------------------------------------------------------------
00018984                            
00018984                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018984                            
00018984                            
00018984                            ObjFloorDist:
00018984 3628 0008                  		move.w	obX(a0),d3
00018988                            
00018988                            
00018988                            ObjFloorDist2:
00018988 3428 000C                  		move.w	obY(a0),d2
0001898C 7000                       		moveq	#0,d0
0001898E 1028 0016                  		move.b	obHeight(a0),d0
00018992 4880                       		ext.w	d0
00018994 D440                       		add.w	d0,d2
00018996 49F8 F768                  		lea	(v_anglebuffer).w,a4
0001899A 18BC 0000                  		move.b	#0,(a4)
0001899E 367C 0010                  		movea.w	#$10,a3		; height of a 16x16 tile
000189A2 3C3C 0000                  		move.w	#0,d6
000189A6 7A0D                       		moveq	#$D,d5		; bit to test for solidness
000189A8 6100 FB90                  		bsr.w	FindFloor
000189AC 1638 F768                  		move.b	(v_anglebuffer).w,d3
000189B0 0803 0000                  		btst	#0,d3
000189B4 6700                       		beq.s	locret_14E4E
000189B6 163C 0000                  		move.b	#0,d3
000189BA                            
000189BA                            	locret_14E4E:
000189BA 4E75                       		rts	
000189BC                            
000189BC                            ; End of function ObjFloorDist2
000189BC                            ; End of function ObjFloorDist2
000189BC                            
000189BC                            
000189BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000189BC                            
000189BC                            
000189BC                            sub_14E50:
000189BC 3428 000C                  		move.w	obY(a0),d2
000189C0 3628 0008                  		move.w	obX(a0),d3
000189C4 7000                       		moveq	#0,d0
000189C6 1028 0017                  		move.b	obWidth(a0),d0
000189CA 4880                       		ext.w	d0
000189CC 9440                       		sub.w	d0,d2
000189CE 1028 0016                  		move.b	obHeight(a0),d0
000189D2 4880                       		ext.w	d0
000189D4 D640                       		add.w	d0,d3
000189D6 49F8 F768                  		lea	(v_anglebuffer).w,a4
000189DA 367C 0010                  		movea.w	#$10,a3
000189DE 3C3C 0000                  		move.w	#0,d6
000189E2 7A0E                       		moveq	#$E,d5
000189E4 6100 FC92                  		bsr.w	FindWall
000189E8 3F01                       		move.w	d1,-(sp)
000189EA 3428 000C                  		move.w	obY(a0),d2
000189EE 3628 0008                  		move.w	obX(a0),d3
000189F2 7000                       		moveq	#0,d0
000189F4 1028 0017                  		move.b	obWidth(a0),d0
000189F8 4880                       		ext.w	d0
000189FA D440                       		add.w	d0,d2
000189FC 1028 0016                  		move.b	obHeight(a0),d0
00018A00 4880                       		ext.w	d0
00018A02 D640                       		add.w	d0,d3
00018A04 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018A08 367C 0010                  		movea.w	#$10,a3
00018A0C 3C3C 0000                  		move.w	#0,d6
00018A10 7A0E                       		moveq	#$E,d5
00018A12 6100 FC64                  		bsr.w	FindWall
00018A16 301F                       		move.w	(sp)+,d0
00018A18 143C 00C0                  		move.b	#-$40,d2
00018A1C 6000 FF1E                  		bra.w	loc_14DD0
00018A20                            
00018A20                            ; End of function sub_14E50
00018A20                            
00018A20                            
00018A20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018A20                            
00018A20                            
00018A20                            sub_14EB4:
00018A20 3428 000C                  		move.w	obY(a0),d2
00018A24 3628 0008                  		move.w	obX(a0),d3
00018A28                            
00018A28                            loc_14EBC:
00018A28 0643 000A                  		addi.w	#$A,d3
00018A2C 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018A30 367C 0010                  		movea.w	#$10,a3
00018A34 3C3C 0000                  		move.w	#0,d6
00018A38 7A0E                       		moveq	#$E,d5
00018A3A 6100 FC3C                  		bsr.w	FindWall
00018A3E 143C 00C0                  		move.b	#-$40,d2
00018A42 6000 FF32                  		bra.w	loc_14E0A
00018A46                            
00018A46                            ; End of function sub_14EB4
00018A46                            
00018A46                            ; ---------------------------------------------------------------------------
00018A46                            ; Subroutine to	detect when an object hits a wall to its right
00018A46                            ; ---------------------------------------------------------------------------
00018A46                            
00018A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018A46                            
00018A46                            
00018A46                            ObjHitWallRight:
00018A46 D668 0008                  		add.w	obX(a0),d3
00018A4A 3428 000C                  		move.w	obY(a0),d2
00018A4E 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018A52 18BC 0000                  		move.b	#0,(a4)
00018A56 367C 0010                  		movea.w	#$10,a3
00018A5A 3C3C 0000                  		move.w	#0,d6
00018A5E 7A0E                       		moveq	#$E,d5
00018A60 6100 FC16                  		bsr.w	FindWall
00018A64 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018A68 0803 0000                  		btst	#0,d3
00018A6C 6700                       		beq.s	locret_14F06
00018A6E 163C 00C0                  		move.b	#-$40,d3
00018A72                            
00018A72                            locret_14F06:
00018A72 4E75                       		rts	
00018A74                            
00018A74                            ; End of function ObjHitWallRight
00018A74                            
00018A74                            ; ---------------------------------------------------------------------------
00018A74                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00018A74                            ; touches them
00018A74                            ; ---------------------------------------------------------------------------
00018A74                            
00018A74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018A74                            
00018A74                            
00018A74                            Sonic_DontRunOnWalls:
00018A74 3428 000C                  		move.w	obY(a0),d2
00018A78 3628 0008                  		move.w	obX(a0),d3
00018A7C 7000                       		moveq	#0,d0
00018A7E 1028 0016                  		move.b	obHeight(a0),d0
00018A82 4880                       		ext.w	d0
00018A84 9440                       		sub.w	d0,d2
00018A86 0A42 000F                  		eori.w	#$F,d2
00018A8A 1028 0017                  		move.b	obWidth(a0),d0
00018A8E 4880                       		ext.w	d0
00018A90 D640                       		add.w	d0,d3
00018A92 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018A96 367C FFF0                  		movea.w	#-$10,a3
00018A9A 3C3C 1000                  		move.w	#$1000,d6
00018A9E 7A0E                       		moveq	#$E,d5
00018AA0 6100 FA98                  		bsr.w	FindFloor
00018AA4 3F01                       		move.w	d1,-(sp)
00018AA6 3428 000C                  		move.w	obY(a0),d2
00018AAA 3628 0008                  		move.w	obX(a0),d3
00018AAE 7000                       		moveq	#0,d0
00018AB0 1028 0016                  		move.b	obHeight(a0),d0
00018AB4 4880                       		ext.w	d0
00018AB6 9440                       		sub.w	d0,d2
00018AB8 0A42 000F                  		eori.w	#$F,d2
00018ABC 1028 0017                  		move.b	obWidth(a0),d0
00018AC0 4880                       		ext.w	d0
00018AC2 9640                       		sub.w	d0,d3
00018AC4 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018AC8 367C FFF0                  		movea.w	#-$10,a3
00018ACC 3C3C 1000                  		move.w	#$1000,d6
00018AD0 7A0E                       		moveq	#$E,d5
00018AD2 6100 FA66                  		bsr.w	FindFloor
00018AD6 301F                       		move.w	(sp)+,d0
00018AD8 143C 0080                  		move.b	#-$80,d2
00018ADC 6000 FE5E                  		bra.w	loc_14DD0
00018AE0                            ; End of function Sonic_DontRunOnWalls
00018AE0                            
00018AE0                            ; ===========================================================================
00018AE0 3428 000C                  		move.w	obY(a0),d2
00018AE4 3628 0008                  		move.w	obX(a0),d3
00018AE8                            
00018AE8                            loc_14F7C:
00018AE8 0442 000A                  		subi.w	#$A,d2
00018AEC 0A42 000F                  		eori.w	#$F,d2
00018AF0 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018AF4 367C FFF0                  		movea.w	#-$10,a3
00018AF8 3C3C 1000                  		move.w	#$1000,d6
00018AFC 7A0E                       		moveq	#$E,d5
00018AFE 6100 FA3A                  		bsr.w	FindFloor
00018B02 143C 0080                  		move.b	#-$80,d2
00018B06 6000 FE6E                  		bra.w	loc_14E0A
00018B0A                            
00018B0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018B0A                            
00018B0A                            
00018B0A                            ObjHitCeiling:
00018B0A 3428 000C                  		move.w	obY(a0),d2
00018B0E 3628 0008                  		move.w	obX(a0),d3
00018B12 7000                       		moveq	#0,d0
00018B14 1028 0016                  		move.b	obHeight(a0),d0
00018B18 4880                       		ext.w	d0
00018B1A 9440                       		sub.w	d0,d2
00018B1C 0A42 000F                  		eori.w	#$F,d2
00018B20 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018B24 367C FFF0                  		movea.w	#-$10,a3
00018B28 3C3C 1000                  		move.w	#$1000,d6
00018B2C 7A0E                       		moveq	#$E,d5
00018B2E 6100 FA0A                  		bsr.w	FindFloor
00018B32 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018B36 0803 0000                  		btst	#0,d3
00018B3A 6700                       		beq.s	locret_14FD4
00018B3C 163C 0080                  		move.b	#-$80,d3
00018B40                            
00018B40                            locret_14FD4:
00018B40 4E75                       		rts	
00018B42                            ; End of function ObjHitCeiling
00018B42                            
00018B42                            ; ===========================================================================
00018B42                            
00018B42                            loc_14FD6:
00018B42 3428 000C                  		move.w	obY(a0),d2
00018B46 3628 0008                  		move.w	obX(a0),d3
00018B4A 7000                       		moveq	#0,d0
00018B4C 1028 0017                  		move.b	obWidth(a0),d0
00018B50 4880                       		ext.w	d0
00018B52 9440                       		sub.w	d0,d2
00018B54 1028 0016                  		move.b	obHeight(a0),d0
00018B58 4880                       		ext.w	d0
00018B5A 9640                       		sub.w	d0,d3
00018B5C 0A43 000F                  		eori.w	#$F,d3
00018B60 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018B64 367C FFF0                  		movea.w	#-$10,a3
00018B68 3C3C 0800                  		move.w	#$800,d6
00018B6C 7A0E                       		moveq	#$E,d5
00018B6E 6100 FB08                  		bsr.w	FindWall
00018B72 3F01                       		move.w	d1,-(sp)
00018B74 3428 000C                  		move.w	obY(a0),d2
00018B78 3628 0008                  		move.w	obX(a0),d3
00018B7C 7000                       		moveq	#0,d0
00018B7E 1028 0017                  		move.b	obWidth(a0),d0
00018B82 4880                       		ext.w	d0
00018B84 D440                       		add.w	d0,d2
00018B86 1028 0016                  		move.b	obHeight(a0),d0
00018B8A 4880                       		ext.w	d0
00018B8C 9640                       		sub.w	d0,d3
00018B8E 0A43 000F                  		eori.w	#$F,d3
00018B92 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018B96 367C FFF0                  		movea.w	#-$10,a3
00018B9A 3C3C 0800                  		move.w	#$800,d6
00018B9E 7A0E                       		moveq	#$E,d5
00018BA0 6100 FAD6                  		bsr.w	FindWall
00018BA4 301F                       		move.w	(sp)+,d0
00018BA6 143C 0040                  		move.b	#$40,d2
00018BAA 6000 FD90                  		bra.w	loc_14DD0
00018BAE                            
00018BAE                            ; ---------------------------------------------------------------------------
00018BAE                            ; Subroutine to	stop Sonic when	he jumps at a wall
00018BAE                            ; ---------------------------------------------------------------------------
00018BAE                            
00018BAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018BAE                            
00018BAE                            
00018BAE                            Sonic_HitWall:
00018BAE 3428 000C                  		move.w	obY(a0),d2
00018BB2 3628 0008                  		move.w	obX(a0),d3
00018BB6                            
00018BB6                            loc_1504A:
00018BB6 0443 000A                  		subi.w	#$A,d3
00018BBA 0A43 000F                  		eori.w	#$F,d3
00018BBE 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018BC2 367C FFF0                  		movea.w	#-$10,a3
00018BC6 3C3C 0800                  		move.w	#$800,d6
00018BCA 7A0E                       		moveq	#$E,d5
00018BCC 6100 FAAA                  		bsr.w	FindWall
00018BD0 143C 0040                  		move.b	#$40,d2
00018BD4 6000 FDA0                  		bra.w	loc_14E0A
00018BD8                            ; End of function Sonic_HitWall
00018BD8                            
00018BD8                            ; ---------------------------------------------------------------------------
00018BD8                            ; Subroutine to	detect when an object hits a wall to its left
00018BD8                            ; ---------------------------------------------------------------------------
00018BD8                            
00018BD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018BD8                            
00018BD8                            
00018BD8                            ObjHitWallLeft:
00018BD8 D668 0008                  		add.w	obX(a0),d3
00018BDC 3428 000C                  		move.w	obY(a0),d2
00018BE0                            		; Engine bug: colliding with left walls is erratic with this function.
00018BE0                            		; The cause is this: a missing instruction to flip collision on the found
00018BE0                            		; 16x16 block; this one:
00018BE0                            		;eori.w	#$F,d3
00018BE0 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018BE4 18BC 0000                  		move.b	#0,(a4)
00018BE8 367C FFF0                  		movea.w	#-$10,a3
00018BEC 3C3C 0800                  		move.w	#$800,d6
00018BF0 7A0E                       		moveq	#$E,d5
00018BF2 6100 FA84                  		bsr.w	FindWall
00018BF6 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018BFA 0803 0000                  		btst	#0,d3
00018BFE 6700                       		beq.s	locret_15098
00018C00 163C 0040                  		move.b	#$40,d3
00018C04                            
00018C04                            locret_15098:
00018C04 4E75                       		rts	
00018C06                            ; End of function ObjHitWallLeft
00018C06                            
00018C06                            ; ===========================================================================
00018C06                            
00018C06                            		include	"_incObj\66 Rotating Junction.asm"
00018C06                            ; ---------------------------------------------------------------------------
00018C06                            ; Object 66 - rotating disc junction that grabs Sonic (SBZ)
00018C06                            ; ---------------------------------------------------------------------------
00018C06                            
00018C06                            Junction:
00018C06 7000                       		moveq	#0,d0
00018C08 1028 0024                  		move.b	obRoutine(a0),d0
00018C0C 323B 0000                  		move.w	Jun_Index(pc,d0.w),d1
00018C10 4EFB 1000                  		jmp	Jun_Index(pc,d1.w)
00018C14                            ; ===========================================================================
00018C14 0000                       Jun_Index:	dc.w Jun_Main-Jun_Index
00018C16 0000                       		dc.w Jun_Action-Jun_Index
00018C18 0000                       		dc.w Jun_Display-Jun_Index
00018C1A 0000                       		dc.w Jun_Release-Jun_Index
00018C1C                            
00018C1C =00000034                  jun_frame:	equ $34		; current frame
00018C1C =00000036                  jun_reverse:	equ $36		; flag set when switch is pressed
00018C1C =00000038                  jun_switch:	equ $38		; which switch will reverse the disc
00018C1C                            ; ===========================================================================
00018C1C                            
00018C1C                            Jun_Main:	; Routine 0
00018C1C 5428 0024                  		addq.b	#2,obRoutine(a0)
00018C20 323C 0001                  		move.w	#1,d1
00018C24 2248                       		movea.l	a0,a1
00018C26 6000                       		bra.s	@makeitem
00018C28                            ; ===========================================================================
00018C28                            
00018C28                            	@repeat:
00018C28 4EB9 0000 FD46             		jsr	FindFreeObj
00018C2E 6600                       		bne.s	@fail
00018C30 12BC 0066                  		move.b	#id_Junction,0(a1)
00018C34 5829 0024                  		addq.b	#4,obRoutine(a1) ; goto Jun_Display next
00018C38 3368 0008 0008             		move.w	obX(a0),obX(a1)
00018C3E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00018C44 337C 0180 0018             		move.w	#$180,obPriority(a1)
00018C4A 137C 0010 001A             		move.b	#$10,obFrame(a1) ; use large circular sprite
00018C50                            
00018C50                            @makeitem:
00018C50 237C 0000 0000 0004        		move.l	#Map_Jun,obMap(a1)
00018C58 337C 4348 0002             		move.w	#$4348,obGfx(a1)
00018C5E 0029 0004 0001             		ori.b	#4,obRender(a1)
00018C64 137C 0038 0014             		move.b	#$38,obActWid(a1)
00018C6A                            
00018C6A                            	@fail:
00018C6A 51C9 FFBC                  		dbf	d1,@repeat
00018C6E                            
00018C6E 117C 0030 0014             		move.b	#$30,obActWid(a0)
00018C74 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018C7A 317C 003C 0030             		move.w	#$3C,$30(a0)
00018C80 117C 0001 0034             		move.b	#1,jun_frame(a0)
00018C86 1168 0028 0038             		move.b	obSubtype(a0),jun_switch(a0)
00018C8C                            
00018C8C                            Jun_Action:	; Routine 2
00018C8C 6100 0000                  		bsr.w	Jun_ChkSwitch
00018C90 4A28 0001                  		tst.b	obRender(a0)
00018C94 6A00 0000                  		bpl.w	Jun_Display
00018C98 323C 0030                  		move.w	#$30,d1
00018C9C 3401                       		move.w	d1,d2
00018C9E 3602                       		move.w	d2,d3
00018CA0 5243                       		addq.w	#1,d3
00018CA2 3828 0008                  		move.w	obX(a0),d4
00018CA6 6100 9050                  		bsr.w	SolidObject
00018CAA 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing the disc?
00018CB0 6700 0000                  		beq.w	Jun_Display	; if not, branch
00018CB4                            
00018CB4 43F8 D000                  		lea	(v_player).w,a1
00018CB8 720E                       		moveq	#$E,d1
00018CBA 3029 0008                  		move.w	obX(a1),d0
00018CBE B068 0008                  		cmp.w	obX(a0),d0	; is Sonic to the left of the disc?
00018CC2 6500                       		bcs.s	@isleft		; if yes, branch
00018CC4 7207                       		moveq	#7,d1		
00018CC6                            
00018CC6                            	@isleft:
00018CC6 B228 001A                  		cmp.b	obFrame(a0),d1	; is the gap next to Sonic?
00018CCA 6600                       		bne.s	Jun_Display	; if not, branch
00018CCC                            
00018CCC 1141 0032                  		move.b	d1,$32(a0)
00018CD0 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Jun_Release next
00018CD4 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
00018CDA 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic use "rolling" animation
00018CE0 337C 0800 0020             		move.w	#$800,obInertia(a1)
00018CE6 337C 0000 0010             		move.w	#0,obVelX(a1)
00018CEC 337C 0000 0012             		move.w	#0,obVelY(a1)
00018CF2 08A8 0005 0022             		bclr	#5,obStatus(a0)
00018CF8 08A9 0005 0022             		bclr	#5,obStatus(a1)
00018CFE 08E9 0001 0022             		bset	#1,obStatus(a1)
00018D04 3429 0008                  		move.w	obX(a1),d2
00018D08 3629 000C                  		move.w	obY(a1),d3
00018D0C 6100 0000                  		bsr.w	Jun_ChgPos
00018D10 D569 0008                  		add.w	d2,obX(a1)
00018D14 D769 000C                  		add.w	d3,obY(a1)
00018D18 E0E9 0008                  		asr	obX(a1)
00018D1C E0E9 000C                  		asr	obY(a1)
00018D20                            
00018D20                            Jun_Display:	; Routine 4
00018D20 6000 8B3E                  		bra.w	RememberState
00018D24                            ; ===========================================================================
00018D24                            
00018D24                            Jun_Release:	; Routine 6
00018D24 1028 001A                  		move.b	obFrame(a0),d0
00018D28 0C00 0004                  		cmpi.b	#4,d0		; is gap pointing down?
00018D2C 6700                       		beq.s	@release	; if yes, branch
00018D2E 0C00 0007                  		cmpi.b	#7,d0		; is gap pointing right?
00018D32 6600                       		bne.s	@dontrelease	; if not, branch
00018D34                            
00018D34                            	@release:
00018D34 B028 0032                  		cmp.b	$32(a0),d0
00018D38 6700                       		beq.s	@dontrelease
00018D3A 43F8 D000                  		lea	(v_player).w,a1
00018D3E 337C 0000 0010             		move.w	#0,obVelX(a1)
00018D44 337C 0800 0012             		move.w	#$800,obVelY(a1)
00018D4A 0C00 0004                  		cmpi.b	#4,d0
00018D4E 6700                       		beq.s	@isdown
00018D50 337C 0800 0010             		move.w	#$800,obVelX(a1)
00018D56 337C 0800 0012             		move.w	#$800,obVelY(a1)
00018D5C                            
00018D5C                            	@isdown:
00018D5C 4238 F7C8                  		clr.b	(f_lockmulti).w	; unlock controls
00018D60 5928 0024                  		subq.b	#4,obRoutine(a0)
00018D64                            
00018D64                            	@dontrelease:
00018D64 6100                       		bsr.s	Jun_ChkSwitch
00018D66 6100                       		bsr.s	Jun_ChgPos
00018D68 6000 8AF6                  		bra.w	RememberState
00018D6C                            
00018D6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018D6C                            
00018D6C                            
00018D6C                            Jun_ChkSwitch:
00018D6C 45F8 F7E0                  		lea	(f_switch).w,a2
00018D70 7000                       		moveq	#0,d0
00018D72 1028 0038                  		move.b	jun_switch(a0),d0
00018D76 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00018D7C 6700                       		beq.s	@unpressed	; if not, branch
00018D7E                            
00018D7E 4A28 0036                  		tst.b	jun_reverse(a0)	; has switch previously	been pressed?
00018D82 6600                       		bne.s	@animate	; if yes, branch
00018D84 4428 0034                  		neg.b	jun_frame(a0)
00018D88 117C 0001 0036             		move.b	#1,jun_reverse(a0) ; set to "previously pressed"
00018D8E 6000                       		bra.s	@animate
00018D90                            ; ===========================================================================
00018D90                            
00018D90                            @unpressed:
00018D90 4228 0036                  		clr.b	jun_reverse(a0)	; set to "not yet pressed"
00018D94                            
00018D94                            @animate:
00018D94 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement frame timer
00018D98 6A00                       		bpl.s	@nochange	; if time remains, branch
00018D9A 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00018DA0 1228 0034                  		move.b	jun_frame(a0),d1
00018DA4 1028 001A                  		move.b	obFrame(a0),d0
00018DA8 D001                       		add.b	d1,d0
00018DAA 0200 000F                  		andi.b	#$F,d0
00018DAE 1140 001A                  		move.b	d0,obFrame(a0)	; update frame
00018DB2                            
00018DB2                            	@nochange:
00018DB2 4E75                       		rts	
00018DB4                            ; End of function Jun_ChkSwitch
00018DB4                            
00018DB4                            
00018DB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018DB4                            
00018DB4                            
00018DB4                            Jun_ChgPos:
00018DB4 43F8 D000                  		lea	(v_player).w,a1
00018DB8 7000                       		moveq	#0,d0
00018DBA 1028 001A                  		move.b	obFrame(a0),d0
00018DBE D040                       		add.w	d0,d0
00018DC0 45FB 0000                  		lea	@data(pc,d0.w),a2
00018DC4 101A                       		move.b	(a2)+,d0
00018DC6 4880                       		ext.w	d0
00018DC8 D068 0008                  		add.w	obX(a0),d0
00018DCC 3340 0008                  		move.w	d0,obX(a1)
00018DD0 101A                       		move.b	(a2)+,d0
00018DD2 4880                       		ext.w	d0
00018DD4 D068 000C                  		add.w	obY(a0),d0
00018DD8 3340 000C                  		move.w	d0,obY(a1)
00018DDC 4E75                       		rts	
00018DDE                            
00018DDE                            
00018DDE E000 E20E                  @data:		dc.b -$20,    0, -$1E,   $E ; disc x-pos, Sonic x-pos, disc y-pos, Sonic y-pos
00018DE2 E818 F21E                  		dc.b -$18,  $18,  -$E,  $1E
00018DE6 0020 0E1E                  		dc.b    0,  $20,   $E,  $1E
00018DEA 1818 1E0E                  		dc.b  $18,  $18,  $1E,   $E
00018DEE 2000 1EF2                  		dc.b  $20,    0,  $1E,  -$E
00018DF2 18E8 0EE2                  		dc.b  $18, -$18,   $E, -$1E
00018DF6 00E0 F2E2                  		dc.b    0, -$20,  -$E, -$1E
00018DFA E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
00018DFA E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
00018DFE                            Map_Jun:	include	"_maps\Rotating Junction.asm"
00018DFE                            ; ---------------------------------------------------------------------------
00018DFE                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00018DFE                            ; ---------------------------------------------------------------------------
00018DFE                            Map_Jun_internal:
00018DFE 0000                       		dc.w @gap0-Map_Jun_internal
00018E00 0000                       		dc.w @gap1-Map_Jun_internal
00018E02 0000                       		dc.w @gap2-Map_Jun_internal
00018E04 0000                       		dc.w @gap3-Map_Jun_internal
00018E06 0000                       		dc.w @gap4-Map_Jun_internal
00018E08 0000                       		dc.w @gap5-Map_Jun_internal
00018E0A 0000                       		dc.w @gap6-Map_Jun_internal
00018E0C 0000                       		dc.w @gap7-Map_Jun_internal
00018E0E 0000                       		dc.w @gap8-Map_Jun_internal
00018E10 0000                       		dc.w @gap9-Map_Jun_internal
00018E12 0000                       		dc.w @gapA-Map_Jun_internal
00018E14 0000                       		dc.w @gapB-Map_Jun_internal
00018E16 0000                       		dc.w @gapC-Map_Jun_internal
00018E18 0000                       		dc.w @gapD-Map_Jun_internal
00018E1A 0000                       		dc.w @gapE-Map_Jun_internal
00018E1C 0000                       		dc.w @gapF-Map_Jun_internal
00018E1E 0000                       		dc.w @circle-Map_Jun_internal
00018E20 06                         @gap0:		dc.b 6
00018E21 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00018E26 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00018E2B E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00018E30 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00018E35 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00018E3A 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00018E3F 06                         @gap1:		dc.b 6
00018E40 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00018E45 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00018E4A F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00018E4F F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00018E54 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00018E59 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00018E5E 06                         @gap2:		dc.b 6
00018E5F 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00018E64 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00018E69 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00018E6E 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00018E73 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00018E78 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00018E7D 06                         @gap3:		dc.b 6
00018E7E 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00018E83 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00018E88 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00018E8D 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00018E92 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00018E97 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00018E9C 06                         @gap4:		dc.b 6
00018E9D 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00018EA2 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00018EA7 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00018EAC 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00018EB1 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00018EB6 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00018EBB 06                         @gap5:		dc.b 6
00018EBC 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00018EC1 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00018EC6 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00018ECB 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00018ED0 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00018ED5 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00018EDA 06                         @gap6:		dc.b 6
00018EDB 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00018EE0 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00018EE5 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00018EEA 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00018EEF 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00018EF4 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00018EF9 06                         @gap7:		dc.b 6
00018EFA 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00018EFF F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00018F04 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00018F09 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00018F0E 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00018F13 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00018F18 06                         @gap8:		dc.b 6
00018F19 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00018F1E 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00018F23 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00018F28 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00018F2D 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00018F32 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00018F37 06                         @gap9:		dc.b 6
00018F38 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00018F3D E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00018F42 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00018F47 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00018F4C F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00018F51 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00018F56 06                         @gapA:		dc.b 6
00018F57 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00018F5C E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00018F61 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00018F66 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00018F6B E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00018F70 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00018F75 06                         @gapB:		dc.b 6
00018F76 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00018F7B D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00018F80 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00018F85 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00018F8A E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00018F8F E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00018F94 06                         @gapC:		dc.b 6
00018F95 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00018F9A D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00018F9F C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00018FA4 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00018FA9 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00018FAE E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00018FB3 06                         @gapD:		dc.b 6
00018FB4 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00018FB9 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00018FBE CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00018FC3 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00018FC8 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00018FCD E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00018FD2 06                         @gapE:		dc.b 6
00018FD3 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00018FD8 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00018FDD D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00018FE2 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00018FE7 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00018FEC E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00018FF1 06                         @gapF:		dc.b 6
00018FF2 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00018FF7 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00018FFC DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00019001 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00019006 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
0001900B F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00019010 0C                         @circle:	dc.b $C
00019011 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00019016 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
0001901B E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00019020 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00019025 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
0001902A E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
0001902F 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00019034 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00019039 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
0001903E 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00019043 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00019048 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
0001904E 00                         		even
0001904E 00                         		even
0001904E                            		include	"_incObj\67 Running Disc.asm"
0001904E                            ; ---------------------------------------------------------------------------
0001904E                            ; Object 67 - disc that	you run	around (SBZ)
0001904E                            ; ---------------------------------------------------------------------------
0001904E                            
0001904E                            RunningDisc:
0001904E 7000                       		moveq	#0,d0
00019050 1028 0024                  		move.b	obRoutine(a0),d0
00019054 323B 0000                  		move.w	Disc_Index(pc,d0.w),d1
00019058 4EFB 1000                  		jmp	Disc_Index(pc,d1.w)
0001905C                            ; ===========================================================================
0001905C 0000                       Disc_Index:	dc.w Disc_Main-Disc_Index
0001905E 0000                       		dc.w Disc_Action-Disc_Index
00019060                            
00019060 =00000032                  disc_origX:	equ $32		; original x-axis position
00019060 =00000030                  disc_origY:	equ $30		; original y-axis position
00019060                            ; ===========================================================================
00019060                            
00019060                            Disc_Main:	; Routine 0
00019060 5428 0024                  		addq.b	#2,obRoutine(a0)
00019064 217C 0000 0000 0004        		move.l	#Map_Disc,obMap(a0)
0001906C 317C C344 0002             		move.w	#$C344,obGfx(a0)
00019072 117C 0004 0001             		move.b	#4,obRender(a0)
00019078 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001907E 117C 0008 0014             		move.b	#8,obActWid(a0)
00019084 3168 0008 0032             		move.w	obX(a0),disc_origX(a0)
0001908A 3168 000C 0030             		move.w	obY(a0),disc_origY(a0)
00019090 117C 0018 0034             		move.b	#$18,$34(a0)
00019096 117C 0048 0038             		move.b	#$48,$38(a0)
0001909C 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000190A0 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000190A4 6700                       		beq.s	@typeis0	; branch if 0
000190A6 117C 0010 0034             		move.b	#$10,$34(a0)
000190AC 117C 0038 0038             		move.b	#$38,$38(a0)
000190B2                            
000190B2                            	@typeis0:
000190B2 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000190B6 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000190BA 4881                       		ext.w	d1
000190BC E741                       		asl.w	#3,d1
000190BE 3141 0036                  		move.w	d1,$36(a0)
000190C2 1028 0022                  		move.b	obStatus(a0),d0
000190C6 E418                       		ror.b	#2,d0
000190C8 0200 00C0                  		andi.b	#$C0,d0
000190CC 1140 0026                  		move.b	d0,obAngle(a0)
000190D0                            
000190D0                            Disc_Action:	; Routine 2
000190D0 6100 0000                  		bsr.w	Disc_MoveSonic
000190D4 6100 0000                  		bsr.w	Disc_MoveSpot
000190D8 6000 0000                  		bra.w	Disc_ChkDel
000190DC                            ; ===========================================================================
000190DC                            
000190DC                            Disc_MoveSonic:
000190DC 7400                       		moveq	#0,d2
000190DE 1428 0038                  		move.b	$38(a0),d2
000190E2 3602                       		move.w	d2,d3
000190E4 D643                       		add.w	d3,d3
000190E6 43F8 D000                  		lea	(v_player).w,a1
000190EA 3029 0008                  		move.w	obX(a1),d0
000190EE 9068 0032                  		sub.w	disc_origX(a0),d0
000190F2 D042                       		add.w	d2,d0
000190F4 B043                       		cmp.w	d3,d0
000190F6 6400                       		bcc.s	loc_155A8
000190F8 3229 000C                  		move.w	obY(a1),d1
000190FC 9268 0030                  		sub.w	disc_origY(a0),d1
00019100 D242                       		add.w	d2,d1
00019102 B243                       		cmp.w	d3,d1
00019104 6400                       		bcc.s	loc_155A8
00019106 0829 0001 0022             		btst	#1,obStatus(a1)
0001910C 6700                       		beq.s	loc_155B8
0001910E 4228 003A                  		clr.b	$3A(a0)
00019112 4E75                       		rts	
00019114                            ; ===========================================================================
00019114                            
00019114                            loc_155A8:
00019114 4A28 003A                  		tst.b	$3A(a0)
00019118 6700                       		beq.s	locret_155B6
0001911A 4229 0038                  		clr.b	$38(a1)
0001911E 4228 003A                  		clr.b	$3A(a0)
00019122                            
00019122                            locret_155B6:
00019122 4E75                       		rts	
00019124                            ; ===========================================================================
00019124                            
00019124                            loc_155B8:
00019124 4A28 003A                  		tst.b	$3A(a0)
00019128 6600                       		bne.s	loc_155E2
0001912A 117C 0001 003A             		move.b	#1,$3A(a0)
00019130 0829 0002 0022             		btst	#2,obStatus(a1)
00019136 6600                       		bne.s	loc_155D0
00019138 4229 001C                  		clr.b	obAnim(a1)
0001913C                            
0001913C                            loc_155D0:
0001913C 08A9 0005 0022             		bclr	#5,obStatus(a1)
00019142 137C 0001 001D             		move.b	#1,obNextAni(a1)
00019148 137C 0001 0038             		move.b	#1,$38(a1)
0001914E                            
0001914E                            loc_155E2:
0001914E 3029 0020                  		move.w	obInertia(a1),d0
00019152 4A68 0036                  		tst.w	$36(a0)
00019156 6A00                       		bpl.s	loc_15608
00019158 0C40 FC00                  		cmpi.w	#-$400,d0
0001915C 6F00                       		ble.s	loc_155FA
0001915E 337C FC00 0020             		move.w	#-$400,obInertia(a1)
00019164 4E75                       		rts	
00019166                            ; ===========================================================================
00019166                            
00019166                            loc_155FA:
00019166 0C40 F100                  		cmpi.w	#-$F00,d0
0001916A 6C00                       		bge.s	locret_15606
0001916C 337C F100 0020             		move.w	#-$F00,obInertia(a1)
00019172                            
00019172                            locret_15606:
00019172 4E75                       		rts	
00019174                            ; ===========================================================================
00019174                            
00019174                            loc_15608:
00019174 0C40 0400                  		cmpi.w	#$400,d0
00019178 6C00                       		bge.s	loc_15616
0001917A 337C 0400 0020             		move.w	#$400,obInertia(a1)
00019180 4E75                       		rts	
00019182                            ; ===========================================================================
00019182                            
00019182                            loc_15616:
00019182 0C40 0F00                  		cmpi.w	#$F00,d0
00019186 6F00                       		ble.s	locret_15622
00019188 337C 0F00 0020             		move.w	#$F00,obInertia(a1)
0001918E                            
0001918E                            locret_15622:
0001918E 4E75                       		rts	
00019190                            ; ===========================================================================
00019190                            
00019190                            Disc_MoveSpot:
00019190 3028 0036                  		move.w	$36(a0),d0
00019194 D168 0026                  		add.w	d0,obAngle(a0)
00019198 1028 0026                  		move.b	obAngle(a0),d0
0001919C 4EB9 0000 3CCA             		jsr	(CalcSine).l
000191A2 3428 0030                  		move.w	disc_origY(a0),d2
000191A6 3628 0032                  		move.w	disc_origX(a0),d3
000191AA 7800                       		moveq	#0,d4
000191AC 1828 0034                  		move.b	$34(a0),d4
000191B0 E14C                       		lsl.w	#8,d4
000191B2 2A04                       		move.l	d4,d5
000191B4 C9C0                       		muls.w	d0,d4
000191B6 4844                       		swap	d4
000191B8 CBC1                       		muls.w	d1,d5
000191BA 4845                       		swap	d5
000191BC D842                       		add.w	d2,d4
000191BE DA43                       		add.w	d3,d5
000191C0 3144 000C                  		move.w	d4,obY(a0)
000191C4 3145 0008                  		move.w	d5,obX(a0)
000191C8 4E75                       		rts	
000191CA                            ; ===========================================================================
000191CA                            
000191CA                            Disc_ChkDel:
000191E6 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
000191EC                            
000191EC                            	@delete:
000191EC 4EF9 0000 F7EC             		jmp	(DeleteObject).l
000191EC 4EF9 0000 F7EC             		jmp	(DeleteObject).l
000191F2                            Map_Disc:	include	"_maps\Running Disc.asm"
000191F2                            ; ---------------------------------------------------------------------------
000191F2                            ; Sprite mappings - disc that you run around (SBZ)
000191F2                            ; (It's just a small blob that moves around in a circle. The disc itself is
000191F2                            ; part of the level tiles.)
000191F2                            ; ---------------------------------------------------------------------------
000191F2                            Map_Disc_internal:
000191F2 0000                       		dc.w @spot-Map_Disc_internal
000191F4 01                         @spot:		dc.b 1
000191F5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000191FA                            		even
000191FA                            		even
000191FA                            		include	"_incObj\68 Conveyor Belt.asm"
000191FA                            ; ---------------------------------------------------------------------------
000191FA                            ; Object 68 - conveyor belts (SBZ)
000191FA                            ; ---------------------------------------------------------------------------
000191FA                            
000191FA                            Conveyor:
000191FA 7000                       		moveq	#0,d0
000191FC 1028 0024                  		move.b	obRoutine(a0),d0
00019200 323B 0000                  		move.w	Conv_Index(pc,d0.w),d1
00019204 4EFB 1000                  		jmp	Conv_Index(pc,d1.w)
00019208                            ; ===========================================================================
00019208 0000                       Conv_Index:	dc.w Conv_Main-Conv_Index
0001920A 0000                       		dc.w Conv_Action-Conv_Index
0001920C                            
0001920C =00000036                  conv_speed:	equ $36
0001920C =00000038                  conv_width:	equ $38
0001920C                            ; ===========================================================================
0001920C                            
0001920C                            Conv_Main:	; Routine 0
0001920C 5428 0024                  		addq.b	#2,obRoutine(a0)
00019210 117C 0080 0038             		move.b	#128,conv_width(a0) ; set width to 128 pixels
00019216 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
0001921A 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001921E 6700                       		beq.s	@typeis0	; if zero, branch
00019220 117C 0038 0038             		move.b	#56,conv_width(a0) ; set width to 56 pixels
00019226                            
00019226                            	@typeis0:
00019226 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
0001922A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001922E 4881                       		ext.w	d1
00019230 E841                       		asr.w	#4,d1
00019232 3141 0036                  		move.w	d1,conv_speed(a0) ; set belt speed
00019236                            
00019236                            Conv_Action:	; Routine 2
00019236 6100                       		bsr.s	@movesonic
00019254 4E75                       		rts	
00019256                            
00019256                            	@delete:
00019256 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001925C                            ; ===========================================================================
0001925C                            
0001925C                            @movesonic:
0001925C 7400                       		moveq	#0,d2
0001925E 1428 0038                  		move.b	conv_width(a0),d2
00019262 3602                       		move.w	d2,d3
00019264 D643                       		add.w	d3,d3
00019266 43F8 D000                  		lea	(v_player).w,a1
0001926A 3029 0008                  		move.w	obX(a1),d0
0001926E 9068 0008                  		sub.w	obX(a0),d0
00019272 D042                       		add.w	d2,d0
00019274 B043                       		cmp.w	d3,d0
00019276 6400                       		bcc.s	@notonconveyor
00019278 3229 000C                  		move.w	obY(a1),d1
0001927C 9268 000C                  		sub.w	obY(a0),d1
00019280 0641 0030                  		addi.w	#$30,d1
00019284 0C41 0030                  		cmpi.w	#$30,d1
00019288 6400                       		bcc.s	@notonconveyor
0001928A 0829 0001 0022             		btst	#1,obStatus(a1)
00019290 6600                       		bne.s	@notonconveyor
00019292 3028 0036                  		move.w	conv_speed(a0),d0
00019296 D169 0008                  		add.w	d0,obX(a1)
0001929A                            
0001929A                            	@notonconveyor:
0001929A 4E75                       		rts	
0001929A 4E75                       		rts	
0001929C                            		include	"_incObj\69 SBZ Spinning Platforms.asm"
0001929C                            ; ---------------------------------------------------------------------------
0001929C                            ; Object 69 - spinning platforms and trapdoors (SBZ)
0001929C                            ; ---------------------------------------------------------------------------
0001929C                            
0001929C                            SpinPlatform:
0001929C 7000                       		moveq	#0,d0
0001929E 1028 0024                  		move.b	obRoutine(a0),d0
000192A2 323B 0000                  		move.w	Spin_Index(pc,d0.w),d1
000192A6 4EFB 1000                  		jmp	Spin_Index(pc,d1.w)
000192AA                            ; ===========================================================================
000192AA 0000                       Spin_Index:	dc.w Spin_Main-Spin_Index
000192AC 0000                       		dc.w Spin_Trapdoor-Spin_Index
000192AE 0000                       		dc.w Spin_Spinner-Spin_Index
000192B0                            
000192B0 =00000030                  spin_timer:	equ $30		; time counter until change
000192B0 =00000032                  spin_timelen:	equ $32		; time between changes (general)
000192B0                            ; ===========================================================================
000192B0                            
000192B0                            Spin_Main:	; Routine 0
000192B0 5428 0024                  		addq.b	#2,obRoutine(a0)
000192B4 217C 0000 0000 0004        		move.l	#Map_Trap,obMap(a0)
000192BC 317C 4492 0002             		move.w	#$4492,obGfx(a0)
000192C2 0028 0004 0001             		ori.b	#4,obRender(a0)
000192C8 117C 0080 0014             		move.b	#$80,obActWid(a0)
000192CE 7000                       		moveq	#0,d0
000192D0 1028 0028                  		move.b	obSubtype(a0),d0
000192D4 0240 000F                  		andi.w	#$F,d0
000192D8 C0FC 003C                  		mulu.w	#$3C,d0
000192DC 3140 0032                  		move.w	d0,spin_timelen(a0)
000192E0 4A28 0028                  		tst.b	obSubtype(a0)	; is subtype $8x?
000192E4 6A00                       		bpl.s	Spin_Trapdoor	; if not, branch
000192E6                            
000192E6 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Spin_Spinner next
000192EA 217C 0000 0000 0004        		move.l	#Map_Spin,obMap(a0)
000192F2 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
000192F8 117C 0010 0014             		move.b	#$10,obActWid(a0)
000192FE 117C 0002 001C             		move.b	#2,obAnim(a0)
00019304 7000                       		moveq	#0,d0
00019306 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001930A 3200                       		move.w	d0,d1
0001930C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00019310 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00019314 3140 0030                  		move.w	d0,spin_timer(a0)
00019318 3140 0032                  		move.w	d0,spin_timelen(a0) ; set time delay
0001931C 0241 0070                  		andi.w	#$70,d1
00019320 0641 0010                  		addi.w	#$10,d1
00019324 E549                       		lsl.w	#2,d1
00019326 5341                       		subq.w	#1,d1
00019328 3141 0036                  		move.w	d1,$36(a0)
0001932C 6000                       		bra.s	Spin_Spinner
0001932E                            ; ===========================================================================
0001932E                            
0001932E                            Spin_Trapdoor:	; Routine 2
0001932E 5368 0030                  		subq.w	#1,spin_timer(a0) ; decrement timer
00019332 6A00                       		bpl.s	@animate	; if time remains, branch
00019334                            
00019334 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
0001933A 0868 0000 001C             		bchg	#0,obAnim(a0)
00019340 4A28 0001                  		tst.b	obRender(a0)
00019344 6A00                       		bpl.s	@animate
00019350                            
00019350                            	@animate:
00019350 43F9 0000 0000             		lea	(Ani_Spin).l,a1
00019356 4EB9 0000 C862             		jsr	(AnimateSprite).l
0001935C 4A28 001A                  		tst.b	obFrame(a0)	; is frame number 0 displayed?
00019360 6600                       		bne.s	@notsolid	; if not, branch
00019362 323C 004B                  		move.w	#$4B,d1
00019366 343C 000C                  		move.w	#$C,d2
0001936A 3602                       		move.w	d2,d3
0001936C 5243                       		addq.w	#1,d3
0001936E 3828 0008                  		move.w	obX(a0),d4
00019372 6100 8984                  		bsr.w	SolidObject
00019376 6000 84E8                  		bra.w	RememberState
0001937A                            ; ===========================================================================
0001937A                            
0001937A                            @notsolid:
0001937A 0828 0003 0022             		btst	#3,obStatus(a0) ; is Sonic standing on the trapdoor?
00019380 6700                       		beq.s	@display	; if not, branch
00019382 43F8 D000                  		lea	(v_player).w,a1
00019386 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001938C 08A8 0003 0022             		bclr	#3,obStatus(a0)
00019392 4228 0025                  		clr.b	obSolid(a0)
00019396                            
00019396                            	@display:
00019396 6000 84C8                  		bra.w	RememberState
0001939A                            ; ===========================================================================
0001939A                            
0001939A                            Spin_Spinner:	; Routine 4
0001939A 3038 FE04                  		move.w	(v_framecount).w,d0
0001939E C068 0036                  		and.w	$36(a0),d0
000193A2 6600                       		bne.s	@delay
000193A4 117C 0001 0034             		move.b	#1,$34(a0)
000193AA                            
000193AA                            	@delay:
000193AA 4A28 0034                  		tst.b	$34(a0)
000193AE 6700                       		beq.s	@animate
000193B0 5368 0030                  		subq.w	#1,spin_timer(a0)
000193B4 6A00                       		bpl.s	@animate
000193B6 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
000193BC 4228 0034                  		clr.b	$34(a0)
000193C0 0868 0000 001C             		bchg	#0,obAnim(a0)
000193C6                            
000193C6                            	@animate:
000193C6 43F9 0000 0000             		lea	(Ani_Spin).l,a1
000193CC 4EB9 0000 C862             		jsr	(AnimateSprite).l
000193D2 4A28 001A                  		tst.b	obFrame(a0)	; check	if frame number	0 is displayed
000193D6 6600                       		bne.s	@notsolid2	; if not, branch
000193D8 323C 001B                  		move.w	#$1B,d1
000193DC 343C 0007                  		move.w	#7,d2
000193E0 3602                       		move.w	d2,d3
000193E2 5243                       		addq.w	#1,d3
000193E4 3828 0008                  		move.w	obX(a0),d4
000193E8 6100 890E                  		bsr.w	SolidObject
000193EC 6000 8472                  		bra.w	RememberState
000193F0                            ; ===========================================================================
000193F0                            
000193F0                            @notsolid2:
000193F0 0828 0003 0022             		btst	#3,obStatus(a0)
000193F6 6700                       		beq.s	@display
000193F8 43F8 D000                  		lea	(v_player).w,a1
000193FC 08A9 0003 0022             		bclr	#3,obStatus(a1)
00019402 08A8 0003 0022             		bclr	#3,obStatus(a0)
00019408 4228 0025                  		clr.b	obSolid(a0)
0001940C                            
0001940C                            	@display:
0001940C 6000 8452                  		bra.w	RememberState
0001940C 6000 8452                  		bra.w	RememberState
00019410                            		include	"_anim\SBZ Spinning Platforms.asm"
00019410                            ; ---------------------------------------------------------------------------
00019410                            ; Animation script - trapdoor (SBZ)
00019410                            ; ---------------------------------------------------------------------------
00019410 0000                       Ani_Spin:	dc.w @trapopen-Ani_Spin
00019412 0000                       		dc.w @trapclose-Ani_Spin
00019414 0000                       		dc.w @spin1-Ani_Spin
00019416 0000                       		dc.w @spin2-Ani_Spin
00019418 0300 0102 FE01             @trapopen:	dc.b 3,	0, 1, 2, afBack, 1
0001941E 0302 0100 FE01             @trapclose:	dc.b 3,	2, 1, 0, afBack, 1
00019424 0100 0102 0304 4342 4140+  @spin1:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
00019438 0100 0102 0304 4342 4140+  @spin2:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
0001944C                            		even
0001944C                            		even
0001944C                            Map_Trap:	include	"_maps\Trapdoor.asm"
0001944C                            ; ---------------------------------------------------------------------------
0001944C                            ; Sprite mappings - trapdoor (SBZ)
0001944C                            ; ---------------------------------------------------------------------------
0001944C                            Map_Trap_internal:
0001944C 0000                       		dc.w @closed-Map_Trap_internal
0001944E 0000                       		dc.w @half-Map_Trap_internal
00019450 0000                       		dc.w @open-Map_Trap_internal
00019452 04                         @closed:	dc.b 4
00019453 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00019458 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
0001945D F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00019462 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00019467 08                         @half:		dc.b 8
00019468 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
0001946D 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00019472 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00019477 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
0001947C F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00019481 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00019486 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
0001948B 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00019490 04                         @open:		dc.b 4
00019491 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00019496 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
0001949B 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
000194A0 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
000194A6 00                         		even
000194A6 00                         		even
000194A6                            Map_Spin:	include	"_maps\SBZ Spinning Platforms.asm"
000194A6                            ; ---------------------------------------------------------------------------
000194A6                            ; Sprite mappings - spinning platforms (SBZ)
000194A6                            ; ---------------------------------------------------------------------------
000194A6                            Map_Spin_internal:
000194A6 0000                       		dc.w @flat-Map_Spin_internal
000194A8 0000                       		dc.w @spin1-Map_Spin_internal
000194AA 0000                       		dc.w @spin2-Map_Spin_internal
000194AC 0000                       		dc.w @spin3-Map_Spin_internal
000194AE 0000                       		dc.w @spin4-Map_Spin_internal
000194B0 02                         @flat:		dc.b 2
000194B1 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000194B6 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
000194BB 02                         @spin1:		dc.b 2
000194BC F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
000194C1 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
000194C6 02                         @spin2:		dc.b 2
000194C7 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
000194CC 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000194D1 02                         @spin3:		dc.b 2
000194D2 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000194D7 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000194DC 02                         @spin4:		dc.b 2
000194DD F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000194E2 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000194E8 00                         		even
000194E8 00                         		even
000194E8                            		include	"_incObj\6A Saws and Pizza Cutters.asm"
000194E8                            ; ---------------------------------------------------------------------------
000194E8                            ; Object 6A - ground saws and pizza cutters (SBZ)
000194E8                            ; ---------------------------------------------------------------------------
000194E8                            
000194E8                            Saws:
000194E8 7000                       		moveq	#0,d0
000194EA 1028 0024                  		move.b	obRoutine(a0),d0
000194EE 323B 0000                  		move.w	Saw_Index(pc,d0.w),d1
000194F2 4EFB 1000                  		jmp	Saw_Index(pc,d1.w)
000194F6                            ; ===========================================================================
000194F6 0000                       Saw_Index:	dc.w Saw_Main-Saw_Index
000194F8 0000                       		dc.w Saw_Action-Saw_Index
000194FA                            
000194FA =0000003A                  saw_origX:	equ $3A		; original x-axis position
000194FA =00000038                  saw_origY:	equ $38		; original y-axis position
000194FA =0000003D                  saw_here:	equ $3D		; flag set when the ground saw appears
000194FA                            ; ===========================================================================
000194FA                            
000194FA                            Saw_Main:	; Routine 0
000194FA 5428 0024                  		addq.b	#2,obRoutine(a0)
000194FE 217C 0000 0000 0004        		move.l	#Map_Saw,obMap(a0)
00019506 317C 43AD 0002             		move.w	#$43AD,obGfx(a0)
0001950C 117C 0004 0001             		move.b	#4,obRender(a0)
00019512 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019518 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001951E 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00019524 3168 000C 0038             		move.w	obY(a0),saw_origY(a0)
0001952A 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object a ground saw?
00019530 6400                       		bcc.s	Saw_Action	; if yes, branch
00019532 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00019538                            
00019538                            Saw_Action:	; Routine 2
00019538 7000                       		moveq	#0,d0
0001953A 1028 0028                  		move.b	obSubtype(a0),d0
0001953E 0240 0007                  		andi.w	#7,d0
00019542 D040                       		add.w	d0,d0
00019544 323B 0000                  		move.w	@index(pc,d0.w),d1
00019548 4EBB 1000                  		jsr	@index(pc,d1.w)
00019568 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001956E                            
0001956E                            	@delete:
0001956E 4EF9 0000 F7EC             		jmp	(DeleteObject).l
00019574                            ; ===========================================================================
00019574 0000 0000 0000             @index:		dc.w @type00-@index, @type01-@index, @type02-@index ; pizza cutters
0001957A 0000 0000                  		dc.w @type03-@index, @type04-@index ; ground saws
0001957E                            ; ===========================================================================
0001957E                            
0001957E                            @type00:
0001957E 4E75                       		rts			; doesn't move
00019580                            ; ===========================================================================
00019580                            
00019580                            @type01:
00019580 323C 0060                  		move.w	#$60,d1
00019584 7000                       		moveq	#0,d0
00019586 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0001958A 0828 0000 0022             		btst	#0,obStatus(a0)
00019590 6700                       		beq.s	@noflip01
00019592 4440                       		neg.w	d0
00019594 D041                       		add.w	d1,d0
00019596                            
00019596                            	@noflip01:
00019596 3228 003A                  		move.w	saw_origX(a0),d1
0001959A 9240                       		sub.w	d0,d1
0001959C 3141 0008                  		move.w	d1,obX(a0)	; move saw sideways
000195A0                            
000195A0 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000195A4 6A00                       		bpl.s	@sameframe01
000195A6 117C 0002 001E             		move.b	#2,obTimeFrame(a0) ; time between frame changes
000195AC 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
000195B2                            
000195B2                            	@sameframe01:
000195B2 4A28 0001                  		tst.b	obRender(a0)
000195B6 6A00                       		bpl.s	@nosound01
000195B8 3038 FE04                  		move.w	(v_framecount).w,d0
000195BC 0240 000F                  		andi.w	#$F,d0
000195C0 6600                       		bne.s	@nosound01
000195CC                            
000195CC                            	@nosound01:
000195CC 4E75                       		rts	
000195CE                            ; ===========================================================================
000195CE                            
000195CE                            @type02:
000195CE 323C 0030                  		move.w	#$30,d1
000195D2 7000                       		moveq	#0,d0
000195D4 1038 FE64                  		move.b	(v_oscillate+6).w,d0
000195D8 0828 0000 0022             		btst	#0,obStatus(a0)
000195DE 6700                       		beq.s	@noflip02
000195E0 4440                       		neg.w	d0
000195E2 0640 0080                  		addi.w	#$80,d0
000195E6                            
000195E6                            	@noflip02:
000195E6 3228 0038                  		move.w	saw_origY(a0),d1
000195EA 9240                       		sub.w	d0,d1
000195EC 3141 000C                  		move.w	d1,obY(a0)	; move saw vertically
000195F0 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000195F4 6A00                       		bpl.s	@sameframe02
000195F6 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
000195FC 0868 0000 001A             		bchg	#0,obFrame(a0)
00019602                            
00019602                            	@sameframe02:
00019602 4A28 0001                  		tst.b	obRender(a0)
00019606 6A00                       		bpl.s	@nosound02
00019608 1038 FE64                  		move.b	(v_oscillate+6).w,d0
0001960C 0C00 0018                  		cmpi.b	#$18,d0
00019610 6600                       		bne.s	@nosound02
0001961C                            
0001961C                            	@nosound02:
0001961C 4E75                       		rts	
0001961E                            ; ===========================================================================
0001961E                            
0001961E                            @type03:
0001961E 4A28 003D                  		tst.b	saw_here(a0)	; has the saw appeared already?
00019622 6600                       		bne.s	@here03		; if yes, branch
00019624                            
00019624 3038 D008                  		move.w	(v_player+obX).w,d0
00019628 0440 00C0                  		subi.w	#$C0,d0
0001962C 6500                       		bcs.s	@nosaw03x
0001962E 9068 0008                  		sub.w	obX(a0),d0
00019632 6500                       		bcs.s	@nosaw03x
00019634 3038 D00C                  		move.w	(v_player+obY).w,d0
00019638 0440 0080                  		subi.w	#$80,d0
0001963C B068 000C                  		cmp.w	obY(a0),d0
00019640 6400                       		bcc.s	@nosaw03y
00019642 0640 0100                  		addi.w	#$100,d0
00019646 B068 000C                  		cmp.w	obY(a0),d0
0001964A 6500                       		bcs.s	@nosaw03y
0001964C 117C 0001 003D             		move.b	#1,saw_here(a0)
00019652 317C 0600 0010             		move.w	#$600,obVelX(a0) ; move object to the right
00019658 117C 00A2 0020             		move.b	#$A2,obColType(a0)
0001965E 117C 0002 001A             		move.b	#2,obFrame(a0)
0001966E                            
0001966E                            	@nosaw03x:
0001966E 588F                       		addq.l	#4,sp
00019670                            
00019670                            	@nosaw03y:
00019670 4E75                       		rts	
00019672                            ; ===========================================================================
00019672                            
00019672                            @here03:
00019672 4EB9 0000 F798             		jsr	(SpeedToPos).l
00019678 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
0001967E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00019682 6A00                       		bpl.s	@sameframe03
00019684 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
0001968A 0868 0000 001A             		bchg	#0,obFrame(a0)
00019690                            
00019690                            	@sameframe03:
00019690 4E75                       		rts	
00019692                            ; ===========================================================================
00019692                            
00019692                            @type04:
00019692 4A28 003D                  		tst.b	saw_here(a0)
00019696 6600                       		bne.s	@here04
00019698 3038 D008                  		move.w	(v_player+obX).w,d0
0001969C 0640 00E0                  		addi.w	#$E0,d0
000196A0 9068 0008                  		sub.w	obX(a0),d0
000196A4 6400                       		bcc.s	@nosaw04x
000196A6 3038 D00C                  		move.w	(v_player+obY).w,d0
000196AA 0440 0080                  		subi.w	#$80,d0
000196AE B068 000C                  		cmp.w	obY(a0),d0
000196B2 6400                       		bcc.s	@nosaw04y
000196B4 0640 0100                  		addi.w	#$100,d0
000196B8 B068 000C                  		cmp.w	obY(a0),d0
000196BC 6500                       		bcs.s	@nosaw04y
000196BE 117C 0001 003D             		move.b	#1,saw_here(a0)
000196C4 317C FA00 0010             		move.w	#-$600,obVelX(a0) ; move object to the left
000196CA 117C 00A2 0020             		move.b	#$A2,obColType(a0)
000196D0 117C 0002 001A             		move.b	#2,obFrame(a0)
000196E0                            
000196E0                            	@nosaw04x:
000196E0 588F                       		addq.l	#4,sp
000196E2                            
000196E2                            	@nosaw04y:
000196E2 4E75                       		rts	
000196E4                            ; ===========================================================================
000196E4                            
000196E4                            @here04:
000196E4 4EB9 0000 F798             		jsr	(SpeedToPos).l
000196EA 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
000196F0 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000196F4 6A00                       		bpl.s	@sameframe04
000196F6 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
000196FC 0868 0000 001A             		bchg	#0,obFrame(a0)
00019702                            
00019702                            	@sameframe04:
00019702 4E75                       		rts	
00019702 4E75                       		rts	
00019704                            Map_Saw:	include	"_maps\Saws and Pizza Cutters.asm"
00019704                            ; ---------------------------------------------------------------------------
00019704                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00019704                            ; ---------------------------------------------------------------------------
00019704                            Map_Saw_internal:
00019704 0000                       		dc.w @pizzacutter1-Map_Saw_internal
00019706 0000                       		dc.w @pizzacutter2-Map_Saw_internal
00019708 0000                       		dc.w @groundsaw1-Map_Saw_internal
0001970A 0000                       		dc.w @groundsaw2-Map_Saw_internal
0001970C 07                         @pizzacutter1:	dc.b 7
0001970D C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00019712 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00019717 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001971C E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00019721 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00019726 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001972B 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00019730 07                         @pizzacutter2:	dc.b 7
00019731 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00019736 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
0001973B E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00019740 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00019745 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
0001974A 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
0001974F 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00019754 04                         @groundsaw1:	dc.b 4
00019755 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0001975A E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
0001975F 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00019764 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00019769 04                         @groundsaw2:	dc.b 4
0001976A E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
0001976F E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00019774 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00019779 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
0001977E                            		even
0001977E                            		even
0001977E                            		include	"_incObj\6B SBZ Stomper and Door.asm"
0001977E                            ; ---------------------------------------------------------------------------
0001977E                            ; Object 6B - stomper and sliding door (SBZ)
0001977E                            ; ---------------------------------------------------------------------------
0001977E                            
0001977E                            ScrapStomp:
0001977E 7000                       		moveq	#0,d0
00019780 1028 0024                  		move.b	obRoutine(a0),d0
00019784 323B 0000                  		move.w	Sto_Index(pc,d0.w),d1
00019788 4EFB 1000                  		jmp	Sto_Index(pc,d1.w)
0001978C                            ; ===========================================================================
0001978C 0000                       Sto_Index:	dc.w Sto_Main-Sto_Index
0001978E 0000                       		dc.w Sto_Action-Sto_Index
00019790                            
00019790 =00000016                  sto_height:	equ $16
00019790 =00000034                  sto_origX:	equ $34		; original x-axis position
00019790 =00000030                  sto_origY:	equ $30		; original y-axis position
00019790 =00000038                  sto_active:	equ $38		; flag set when a switch is pressed
00019790                            
00019790 400C 8001                  Sto_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00019794 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00019798 1C20 4004                  		dc.b  $1C, $20,	$40,   4
0001979C 1C20 6004                  		dc.b  $1C, $20,	$60,   4
000197A0 8040 0005                  		dc.b  $80, $40,	  0,   5
000197A4                            ; ===========================================================================
000197A4                            
000197A4                            Sto_Main:	; Routine 0
000197A4 5428 0024                  		addq.b	#2,obRoutine(a0)
000197A8 7000                       		moveq	#0,d0
000197AA 1028 0028                  		move.b	obSubtype(a0),d0
000197AE E448                       		lsr.w	#2,d0
000197B0 0240 001C                  		andi.w	#$1C,d0
000197B4 47FB 00DA                  		lea	Sto_Var(pc,d0.w),a3
000197B8 115B 0014                  		move.b	(a3)+,obActWid(a0)
000197BC 115B 0016                  		move.b	(a3)+,sto_height(a0)
000197C0 E448                       		lsr.w	#2,d0
000197C2 1140 001A                  		move.b	d0,obFrame(a0)
000197C6 217C 0000 0000 0004        		move.l	#Map_Stomp,obMap(a0)
000197CE 317C 22C0 0002             		move.w	#$22C0,obGfx(a0)
000197D4 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ/SBZ3
000197DA 6600                       		bne.s	@isSBZ12	; if not, branch
000197DC 08F8 0000 F7CB             		bset	#0,(v_obj6B).w
000197E2 6700                       		beq.s	@isSBZ3
000197E4                            
000197E4                            @chkdel:
000197E4 45F8 FC00                  		lea	(v_objstate).w,a2
000197E8 7000                       		moveq	#0,d0
000197EA 1028 0023                  		move.b	obRespawnNo(a0),d0
000197EE 6700                       		beq.s	@delete
000197F0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000197F6                            
000197F6                            	@delete:
000197F6 4EF9 0000 F7EC             		jmp	(DeleteObject).l
000197FC                            ; ===========================================================================
000197FC                            
000197FC                            @isSBZ3:
000197FC 317C 41F0 0002             		move.w	#$41F0,obGfx(a0)
00019802 0C68 0A80 0008             		cmpi.w	#$A80,obX(a0)
00019808 6600                       		bne.s	@isSBZ12
0001980A 45F8 FC00                  		lea	(v_objstate).w,a2
0001980E 7000                       		moveq	#0,d0
00019810 1028 0023                  		move.b	obRespawnNo(a0),d0
00019814 6700                       		beq.s	@isSBZ12
00019816 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001981C 6700                       		beq.s	@isSBZ12
0001981E 4238 F7CB                  		clr.b	(v_obj6B).w
00019822 60C0                       		bra.s	@chkdel
00019824                            ; ===========================================================================
00019824                            
00019824                            @isSBZ12:
00019824 0028 0004 0001             		ori.b	#4,obRender(a0)
0001982A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019830 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00019836 3168 000C 0030             		move.w	obY(a0),sto_origY(a0)
0001983C 7000                       		moveq	#0,d0
0001983E 101B                       		move.b	(a3)+,d0
00019840 3140 003C                  		move.w	d0,$3C(a0)
00019844 7000                       		moveq	#0,d0
00019846 1028 0028                  		move.b	obSubtype(a0),d0
0001984A 6A00                       		bpl.s	Sto_Action
0001984C 0200 000F                  		andi.b	#$F,d0
00019850 1140 003E                  		move.b	d0,$3E(a0)
00019854 1153 0028                  		move.b	(a3),obSubtype(a0)
00019858 0C13 0005                  		cmpi.b	#5,(a3)
0001985C 6600                       		bne.s	@chkgone
0001985E 08E8 0004 0001             		bset	#4,obRender(a0)
00019864                            
00019864                            	@chkgone:
00019864 45F8 FC00                  		lea	(v_objstate).w,a2
00019868 7000                       		moveq	#0,d0
0001986A 1028 0023                  		move.b	obRespawnNo(a0),d0
0001986E 6700                       		beq.s	Sto_Action
00019870 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019876                            
00019876                            Sto_Action:	; Routine 2
00019876 3F28 0008                  		move.w	obX(a0),-(sp)
0001987A 7000                       		moveq	#0,d0
0001987C 1028 0028                  		move.b	obSubtype(a0),d0
00019880 0240 000F                  		andi.w	#$F,d0
00019884 D040                       		add.w	d0,d0
00019886 323B 0000                  		move.w	@index(pc,d0.w),d1
0001988A 4EBB 1000                  		jsr	@index(pc,d1.w)
0001988E 381F                       		move.w	(sp)+,d4
00019890 4A28 0001                  		tst.b	obRender(a0)
00019894 6A00                       		bpl.s	@chkdel
00019896 7200                       		moveq	#0,d1
00019898 1228 0014                  		move.b	obActWid(a0),d1
0001989C 0641 000B                  		addi.w	#$B,d1
000198A0 7400                       		moveq	#0,d2
000198A2 1428 0016                  		move.b	sto_height(a0),d2
000198A6 3602                       		move.w	d2,d3
000198A8 5243                       		addq.w	#1,d3
000198AA 6100 844C                  		bsr.w	SolidObject
000198AE                            
000198AE                            	@chkdel:
000198CA 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
000198D0                            
000198D0                            	@chkgone:
000198D0 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w
000198D6 6600                       		bne.s	@delete
000198D8 4238 F7CB                  		clr.b	(v_obj6B).w
000198DC 45F8 FC00                  		lea	(v_objstate).w,a2
000198E0 7000                       		moveq	#0,d0
000198E2 1028 0023                  		move.b	obRespawnNo(a0),d0
000198E6 6700                       		beq.s	@delete
000198E8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000198EE                            
000198EE                            	@delete:
000198EE 4EF9 0000 F7EC             		jmp	(DeleteObject).l
000198F4                            ; ===========================================================================
000198F4 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000198F8 0000 0000                  		dc.w @type02-@index, @type03-@index
000198FC 0000 0000                  		dc.w @type04-@index, @type05-@index
00019900                            ; ===========================================================================
00019900                            
00019900                            @type00:
00019900 4E75                       		rts
00019902                            ; ===========================================================================
00019902                            
00019902                            @type01:
00019902 4A28 0038                  		tst.b	sto_active(a0)
00019906 6600                       		bne.s	@isactive01
00019908 45F8 F7E0                  		lea	(f_switch).w,a2
0001990C 7000                       		moveq	#0,d0
0001990E 1028 003E                  		move.b	$3E(a0),d0
00019912 0832 0000 0000             		btst	#0,(a2,d0.w)
00019918 6700                       		beq.s	@loc_15DC2
0001991A 117C 0001 0038             		move.b	#1,sto_active(a0)
00019920                            
00019920                            	@isactive01:
00019920 3028 003C                  		move.w	$3C(a0),d0
00019924 B068 003A                  		cmp.w	$3A(a0),d0
00019928 6700                       		beq.s	@loc_15DE0
0001992A 5468 003A                  		addq.w	#2,$3A(a0)
0001992E                            
0001992E                            	@loc_15DC2:
0001992E 3028 003A                  		move.w	$3A(a0),d0
00019932 0828 0000 0022             		btst	#0,obStatus(a0)
00019938 6700                       		beq.s	@noflip01
0001993A 4440                       		neg.w	d0
0001993C 0640 0080                  		addi.w	#$80,d0
00019940                            
00019940                            	@noflip01:
00019940 3228 0034                  		move.w	sto_origX(a0),d1
00019944 9240                       		sub.w	d0,d1
00019946 3141 0008                  		move.w	d1,obX(a0)
0001994A 4E75                       		rts	
0001994C                            ; ===========================================================================
0001994C                            
0001994C                            @loc_15DE0:
0001994C 5228 0028                  		addq.b	#1,obSubtype(a0)
00019950 317C 00B4 0036             		move.w	#$B4,$36(a0)
00019956 4228 0038                  		clr.b	sto_active(a0)
0001995A 45F8 FC00                  		lea	(v_objstate).w,a2
0001995E 7000                       		moveq	#0,d0
00019960 1028 0023                  		move.b	obRespawnNo(a0),d0
00019964 67C8                       		beq.s	@loc_15DC2
00019966 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001996C 60C0                       		bra.s	@loc_15DC2
0001996E                            ; ===========================================================================
0001996E                            
0001996E                            @type02:
0001996E 4A28 0038                  		tst.b	sto_active(a0)
00019972 6600                       		bne.s	@isactive02
00019974 5368 0036                  		subq.w	#1,$36(a0)
00019978 6600                       		bne.s	@loc_15E1E
0001997A 117C 0001 0038             		move.b	#1,sto_active(a0)
00019980                            
00019980                            	@isactive02:
00019980 4A68 003A                  		tst.w	$3A(a0)
00019984 6700                       		beq.s	@loc_15E3C
00019986 5568 003A                  		subq.w	#2,$3A(a0)
0001998A                            
0001998A                            	@loc_15E1E:
0001998A 3028 003A                  		move.w	$3A(a0),d0
0001998E 0828 0000 0022             		btst	#0,obStatus(a0)
00019994 6700                       		beq.s	@noflip02
00019996 4440                       		neg.w	d0
00019998 0640 0080                  		addi.w	#$80,d0
0001999C                            
0001999C                            	@noflip02:
0001999C 3228 0034                  		move.w	sto_origX(a0),d1
000199A0 9240                       		sub.w	d0,d1
000199A2 3141 0008                  		move.w	d1,obX(a0)
000199A6 4E75                       		rts	
000199A8                            ; ===========================================================================
000199A8                            
000199A8                            @loc_15E3C:
000199A8 5328 0028                  		subq.b	#1,obSubtype(a0)
000199AC 4228 0038                  		clr.b	sto_active(a0)
000199B0 45F8 FC00                  		lea	(v_objstate).w,a2
000199B4 7000                       		moveq	#0,d0
000199B6 1028 0023                  		move.b	obRespawnNo(a0),d0
000199BA 67CE                       		beq.s	@loc_15E1E
000199BC 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000199C2 60C6                       		bra.s	@loc_15E1E
000199C4                            ; ===========================================================================
000199C4                            
000199C4                            @type03:
000199C4 4A28 0038                  		tst.b	sto_active(a0)
000199C8 6600                       		bne.s	@isactive03
000199CA 4A68 003A                  		tst.w	$3A(a0)
000199CE 6700                       		beq.s	@loc_15E6A
000199D0 5368 003A                  		subq.w	#1,$3A(a0)
000199D4 6000                       		bra.s	@loc_15E8E
000199D6                            ; ===========================================================================
000199D6                            
000199D6                            @loc_15E6A:
000199D6 5368 0036                  		subq.w	#1,$36(a0)
000199DA 6A00                       		bpl.s	@loc_15E8E
000199DC 317C 003C 0036             		move.w	#$3C,$36(a0)
000199E2 117C 0001 0038             		move.b	#1,sto_active(a0)
000199E8                            
000199E8                            @isactive03:
000199E8 5068 003A                  		addq.w	#8,$3A(a0)
000199EC 3028 003A                  		move.w	$3A(a0),d0
000199F0 B068 003C                  		cmp.w	$3C(a0),d0
000199F4 6600                       		bne.s	@loc_15E8E
000199F6 4228 0038                  		clr.b	sto_active(a0)
000199FA                            
000199FA                            @loc_15E8E:
000199FA 3028 003A                  		move.w	$3A(a0),d0
000199FE 0828 0000 0022             		btst	#0,obStatus(a0)
00019A04 6700                       		beq.s	@noflip03
00019A06 4440                       		neg.w	d0
00019A08 0640 0038                  		addi.w	#$38,d0
00019A0C                            
00019A0C                            	@noflip03:
00019A0C 3228 0030                  		move.w	sto_origY(a0),d1
00019A10 D240                       		add.w	d0,d1
00019A12 3141 000C                  		move.w	d1,obY(a0)
00019A16 4E75                       		rts	
00019A18                            ; ===========================================================================
00019A18                            
00019A18                            @type04:
00019A18 4A28 0038                  		tst.b	sto_active(a0)
00019A1C 6600                       		bne.s	@isactive04
00019A1E 4A68 003A                  		tst.w	$3A(a0)
00019A22 6700                       		beq.s	@loc_15EBE
00019A24 5168 003A                  		subq.w	#8,$3A(a0)
00019A28 6000                       		bra.s	@loc_15EF0
00019A2A                            ; ===========================================================================
00019A2A                            
00019A2A                            @loc_15EBE:
00019A2A 5368 0036                  		subq.w	#1,$36(a0)
00019A2E 6A00                       		bpl.s	@loc_15EF0
00019A30 317C 003C 0036             		move.w	#$3C,$36(a0)
00019A36 117C 0001 0038             		move.b	#1,sto_active(a0)
00019A3C                            
00019A3C                            @isactive04:
00019A3C 3028 003A                  		move.w	$3A(a0),d0
00019A40 B068 003C                  		cmp.w	$3C(a0),d0
00019A44 6700                       		beq.s	@loc_15EE0
00019A46 5068 003A                  		addq.w	#8,$3A(a0)
00019A4A 6000                       		bra.s	@loc_15EF0
00019A4C                            ; ===========================================================================
00019A4C                            
00019A4C                            @loc_15EE0:
00019A4C 5368 0036                  		subq.w	#1,$36(a0)
00019A50 6A00                       		bpl.s	@loc_15EF0
00019A52 317C 003C 0036             		move.w	#$3C,$36(a0)
00019A58 4228 0038                  		clr.b	sto_active(a0)
00019A5C                            
00019A5C                            @loc_15EF0:
00019A5C 3028 003A                  		move.w	$3A(a0),d0
00019A60 0828 0000 0022             		btst	#0,obStatus(a0)
00019A66 6700                       		beq.s	@noflip04
00019A68 4440                       		neg.w	d0
00019A6A 0640 0038                  		addi.w	#$38,d0
00019A6E                            
00019A6E                            	@noflip04:
00019A6E 3228 0030                  		move.w	sto_origY(a0),d1
00019A72 D240                       		add.w	d0,d1
00019A74 3141 000C                  		move.w	d1,obY(a0)
00019A78 4E75                       		rts	
00019A7A                            ; ===========================================================================
00019A7A                            
00019A7A                            @type05:
00019A7A 4A28 0038                  		tst.b	sto_active(a0)
00019A7E 6600                       		bne.s	@loc_15F3E
00019A80 45F8 F7E0                  		lea	(f_switch).w,a2
00019A84 7000                       		moveq	#0,d0
00019A86 1028 003E                  		move.b	$3E(a0),d0
00019A8A 0832 0000 0000             		btst	#0,(a2,d0.w)
00019A90 6700                       		beq.s	@locret_15F5C
00019A92 117C 0001 0038             		move.b	#1,sto_active(a0)
00019A98 45F8 FC00                  		lea	(v_objstate).w,a2
00019A9C 7000                       		moveq	#0,d0
00019A9E 1028 0023                  		move.b	obRespawnNo(a0),d0
00019AA2 6700                       		beq.s	@loc_15F3E
00019AA4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019AAA                            
00019AAA                            @loc_15F3E:
00019AAA 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
00019AB2 06A8 0000 8000 000C        		addi.l	#$8000,obY(a0)
00019ABA 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00019AC0 0C68 0980 0008             		cmpi.w	#$980,obX(a0)
00019AC6 6700                       		beq.s	@loc_15F5E
00019AC8                            
00019AC8                            @locret_15F5C:
00019AC8 4E75                       		rts	
00019ACA                            ; ===========================================================================
00019ACA                            
00019ACA                            @loc_15F5E:
00019ACA 4228 0028                  		clr.b	obSubtype(a0)
00019ACE 4228 0038                  		clr.b	sto_active(a0)
00019AD2 4E75                       		rts	
00019AD2 4E75                       		rts	
00019AD4                            Map_Stomp:	include	"_maps\SBZ Stomper and Door.asm"
00019AD4                            ; ---------------------------------------------------------------------------
00019AD4                            ; Sprite mappings - stomper and	platforms (SBZ)
00019AD4                            ; ---------------------------------------------------------------------------
00019AD4                            Map_Stomp_internal:
00019AD4 0000                       		dc.w @door-Map_Stomp_internal
00019AD6 0000                       		dc.w @stomper-Map_Stomp_internal
00019AD8 0000                       		dc.w @stomper-Map_Stomp_internal
00019ADA 0000                       		dc.w @stomper-Map_Stomp_internal
00019ADC 0000                       		dc.w @bigdoor-Map_Stomp_internal
00019ADE 04                         @door:		dc.b 4
00019ADF F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0 ; horizontal sliding door
00019AE4 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00019AE9 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00019AEE F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00019AF3 08                         @stomper:	dc.b 8
00019AF4 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4 ; stomper block with yellow/black stripes
00019AF9 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00019AFE E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00019B03 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00019B08 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00019B0D 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00019B12 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00019B17 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00019B1C 0E                         @bigdoor:	dc.b $E
00019B1D C00F 0000 80               		dc.b $C0, $F, 0, 0, $80	; huge diagonal sliding door from SBZ3
00019B22 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00019B27 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00019B2C C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00019B31 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00019B36 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00019B3B C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00019B40 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00019B45 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00019B4A E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00019B4F E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00019B54 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00019B59 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00019B5E 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00019B64 00                         		even
00019B64 00                         		even
00019B64                            		include	"_incObj\6C SBZ Vanishing Platforms.asm"
00019B64                            ; ---------------------------------------------------------------------------
00019B64                            ; Object 6C - vanishing	platforms (SBZ)
00019B64                            ; ---------------------------------------------------------------------------
00019B64                            
00019B64                            VanishPlatform:
00019B64 7000                       		moveq	#0,d0
00019B66 1028 0024                  		move.b	obRoutine(a0),d0
00019B6A 323B 0000                  		move.w	VanP_Index(pc,d0.w),d1
00019B6E 4EFB 1000                  		jmp	VanP_Index(pc,d1.w)
00019B72                            ; ===========================================================================
00019B72 0000                       VanP_Index:	dc.w VanP_Main-VanP_Index
00019B74 0000                       		dc.w VanP_Vanish-VanP_Index
00019B76 0000                       		dc.w VanP_Appear-VanP_Index
00019B78 0000                       		dc.w loc_16068-VanP_Index
00019B7A                            
00019B7A =00000030                  vanp_timer:	equ $30		; counter for time until event
00019B7A =00000032                  vanp_timelen:	equ $32		; time between events (general)
00019B7A                            ; ===========================================================================
00019B7A                            
00019B7A                            VanP_Main:	; Routine 0
00019B7A 5C28 0024                  		addq.b	#6,obRoutine(a0)
00019B7E 217C 0000 0000 0004        		move.l	#Map_VanP,obMap(a0)
00019B86 317C 445D 0002             		move.w	#$445D,obGfx(a0)
00019B8C 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone?
00019B92 6700                       		beq.s	VanP_IsSYZ	; if yes, branch
00019B94 317C 44C3 0002             		move.w	#$44C3,obGfx(a0)	; SBZ
00019B9A                            
00019B9A                            	VanP_IsSYZ:	
00019B9A 0028 0004 0001             		ori.b	#4,obRender(a0)
00019BA0 117C 0010 0014             		move.b	#$10,obActWid(a0)
00019BA6 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019BAC 7000                       		moveq	#0,d0
00019BAE 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00019BB2 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00019BB6 5240                       		addq.w	#1,d0		; add 1
00019BB8 EF48                       		lsl.w	#7,d0		; multiply by $80
00019BBA 3200                       		move.w	d0,d1
00019BBC 5340                       		subq.w	#1,d0
00019BBE 3140 0030                  		move.w	d0,vanp_timer(a0)
00019BC2 3140 0032                  		move.w	d0,vanp_timelen(a0)
00019BC6 7000                       		moveq	#0,d0
00019BC8 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00019BCC 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00019BD0 0641 0080                  		addi.w	#$80,d1
00019BD4 C0C1                       		mulu.w	d1,d0
00019BD6 E088                       		lsr.l	#8,d0
00019BD8 3140 0036                  		move.w	d0,$36(a0)
00019BDC 5341                       		subq.w	#1,d1
00019BDE 3141 0038                  		move.w	d1,$38(a0)
00019BE2                            
00019BE2                            loc_16068:	; Routine 6
00019BE2 3038 FE04                  		move.w	(v_framecount).w,d0
00019BE6 9068 0036                  		sub.w	$36(a0),d0
00019BEA C068 0038                  		and.w	$38(a0),d0
00019BEE 6600                       		bne.s	@animate
00019BF0 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto VanP_Vanish next
00019BF4 6000                       		bra.s	VanP_Vanish
00019BF6                            ; ===========================================================================
00019BF6                            
00019BF6                            @animate:
00019BF6 43F9 0000 0000             		lea	(Ani_Van).l,a1
00019BFC 4EB9 0000 C862             		jsr	(AnimateSprite).l
00019C02 4EF9 0001 1860             		jmp	RememberState
00019C08                            ; ===========================================================================
00019C08                            
00019C08                            VanP_Vanish:	; Routine 2
00019C08                            VanP_Appear:	; Routine 4
00019C08 5368 0030                  		subq.w	#1,vanp_timer(a0)
00019C0C 6A00                       		bpl.s	@wait
00019C0E 317C 007F 0030             		move.w	#127,vanp_timer(a0)
00019C14 4A28 001C                  		tst.b	obAnim(a0)	; is platform vanishing?
00019C18 6700                       		beq.s	@isvanishing	; if yes, branch
00019C1A 3168 0032 0030             		move.w	vanp_timelen(a0),vanp_timer(a0)
00019C20                            
00019C20                            	@isvanishing:
00019C20 0868 0000 001C             		bchg	#0,obAnim(a0)
00019C26                            
00019C26                            	@wait:
00019C26 43F9 0000 0000             		lea	(Ani_Van).l,a1
00019C2C 4EB9 0000 C862             		jsr	(AnimateSprite).l
00019C32 0828 0001 001A             		btst	#1,obFrame(a0)	; has platform vanished?
00019C38 6600                       		bne.s	@notsolid	; if yes, branch
00019C3A 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
00019C40 6600                       		bne.s	@loc_160D6
00019C42 7200                       		moveq	#0,d1
00019C44 1228 0014                  		move.b	obActWid(a0),d1
00019C48 4EB9 0000 8C24             		jsr	(PlatformObject).l
00019C4E 4EF9 0001 1860             		jmp	RememberState
00019C54                            ; ===========================================================================
00019C54                            
00019C54                            @loc_160D6:
00019C54 7200                       		moveq	#0,d1
00019C56 1228 0014                  		move.b	obActWid(a0),d1
00019C5A 4EB9 0000 8D98             		jsr	(ExitPlatform).l
00019C60 3428 0008                  		move.w	obX(a0),d2
00019C64 4EB9 0000 9302             		jsr	(MvSonicOnPtfm2).l
00019C6A 4EF9 0001 1860             		jmp	RememberState
00019C70                            ; ===========================================================================
00019C70                            
00019C70                            @notsolid:
00019C70 0828 0003 0022             		btst	#3,obStatus(a0)
00019C76 6700                       		beq.s	@display
00019C78 43F8 D000                  		lea	(v_player).w,a1
00019C7C 08A9 0003 0022             		bclr	#3,obStatus(a1)
00019C82 08A8 0003 0022             		bclr	#3,obStatus(a0)
00019C88 117C 0002 0024             		move.b	#2,obRoutine(a0)
00019C8E 4228 0025                  		clr.b	obSolid(a0)
00019C92                            
00019C92                            	@display:
00019C92 4EF9 0001 1860             		jmp	RememberState
00019C92 4EF9 0001 1860             		jmp	RememberState
00019C98                            		include	"_anim\SBZ Vanishing Platforms.asm"
00019C98                            ; ---------------------------------------------------------------------------
00019C98                            ; Animation script - vanishing platforms (SBZ)
00019C98                            ; ---------------------------------------------------------------------------
00019C98 0000                       Ani_Van:	dc.w @vanish-Ani_Van
00019C9A 0000                       		dc.w @appear-Ani_Van
00019C9C 0300 0102 0304 0506 FE01   @vanish:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, afBack, 1
00019CA6                            		even
00019CA6 0306 0504 0302 0100 FE01   @appear:	dc.b 3,	6, 5, 4, 3, 2, 1, 0, afBack, 1
00019CB0                            		even
00019CB0                            		even
00019CB0                            Map_VanP:	include	"_maps\SBZ Vanishing Platforms.asm"
00019CB0                            ; --------------------------------------------------------------------------------
00019CB0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00019CB0                            ; --------------------------------------------------------------------------------
00019CB0                            
00019CB0                            SME_Mrcg1:	
00019CB0 0000 0000                  		dc.w SME_Mrcg1_E-SME_Mrcg1, SME_Mrcg1_14-SME_Mrcg1	
00019CB4 0000 0000                  		dc.w SME_Mrcg1_29-SME_Mrcg1, SME_Mrcg1_2F-SME_Mrcg1	
00019CB8 0000 0000                  		dc.w SME_Mrcg1_3A-SME_Mrcg1, SME_Mrcg1_40-SME_Mrcg1	
00019CBC 0000                       		dc.w SME_Mrcg1_46-SME_Mrcg1	
00019CBE 01                         SME_Mrcg1_E:	dc.b 1	
00019CBF F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00019CC4 04                         SME_Mrcg1_14:	dc.b 4	
00019CC5 F803 0010 F8               		dc.b $F8, 3, 0, $10, $F8	
00019CCA F803 0010 00               		dc.b $F8, 3, 0, $10, 0	
00019CCF F803 0010 F0               		dc.b $F8, 3, 0, $10, $F0	
00019CD4 F803 0010 08               		dc.b $F8, 3, 0, $10, 8	
00019CD9 01                         SME_Mrcg1_29:	dc.b 1	
00019CDA F807 0000 F8               		dc.b $F8, 7, 0, 0, $F8	
00019CDF 02                         SME_Mrcg1_2F:	dc.b 2	
00019CE0 F803 0010 F8               		dc.b $F8, 3, 0, $10, $F8	
00019CE5 F803 0010 00               		dc.b $F8, 3, 0, $10, 0	
00019CEA 01                         SME_Mrcg1_3A:	dc.b 1	
00019CEB F803 0000 FD               		dc.b $F8, 3, 0, 0, $FD	
00019CF0 01                         SME_Mrcg1_40:	dc.b 1	
00019CF1 F803 0010 FD               		dc.b $F8, 3, 0, $10, $FD	
00019CF6 00                         SME_Mrcg1_46:	dc.b 0	
00019CF8 00                         		even
00019CF8 00                         		even
00019CF8                            		include	"_incObj\6E Electrocuter.asm"
00019CF8                            ; ---------------------------------------------------------------------------
00019CF8                            ; Object 6E - electrocution orbs (SBZ)
00019CF8                            ; ---------------------------------------------------------------------------
00019CF8                            
00019CF8                            Electro:
00019CF8 7000                       		moveq	#0,d0
00019CFA 1028 0024                  		move.b	obRoutine(a0),d0
00019CFE 323B 0000                  		move.w	Elec_Index(pc,d0.w),d1
00019D02 4EFB 1000                  		jmp	Elec_Index(pc,d1.w)
00019D06                            ; ===========================================================================
00019D06 0000                       Elec_Index:	dc.w Elec_Main-Elec_Index
00019D08 0000                       		dc.w Elec_Shock-Elec_Index
00019D0A                            
00019D0A =00000034                  elec_freq:	equ $34		; frequency
00019D0A                            ; ===========================================================================
00019D0A                            
00019D0A                            Elec_Main:	; Routine 0
00019D0A 5428 0024                  		addq.b	#2,obRoutine(a0)
00019D0E 217C 0000 0000 0004        		move.l	#Map_Elec,obMap(a0)
00019D16 317C 047E 0002             		move.w	#$47E,obGfx(a0)
00019D1C 0028 0004 0001             		ori.b	#4,obRender(a0)
00019D22 117C 0028 0014             		move.b	#$28,obActWid(a0)
00019D28 7000                       		moveq	#0,d0
00019D2A 1028 0028                  		move.b	obSubtype(a0),d0 ; read object type
00019D2E E948                       		lsl.w	#4,d0		; multiply by $10
00019D30 5340                       		subq.w	#1,d0
00019D32 3140 0034                  		move.w	d0,elec_freq(a0)
00019D36                            
00019D36                            Elec_Shock:	; Routine 2
00019D36 3038 FE04                  		move.w	(v_framecount).w,d0
00019D3A C068 0034                  		and.w	elec_freq(a0),d0 ; is it time to zap?
00019D3E 6600                       		bne.s	@animate	; if not, branch
00019D40                            
00019D40 117C 0001 001C             		move.b	#1,obAnim(a0)	; run "zap" animation
00019D46 4A28 0001                  		tst.b	obRender(a0)
00019D4A 6A00                       		bpl.s	@animate
00019D56                            
00019D56                            	@animate:
00019D56 43F9 0000 0000             		lea	(Ani_Elec).l,a1
00019D5C 4EB9 0000 C862             		jsr	(AnimateSprite).l
00019D62 117C 0000 0020             		move.b	#0,obColType(a0)
00019D68 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; is 4th frame displayed?
00019D6E 6600                       		bne.s	@display	; if not, branch
00019D70 117C 00A4 0020             		move.b	#$A4,obColType(a0) ; if yes, make object hurt Sonic
00019D76                            
00019D76                            	@display:
00019D76 4EF9 0001 1860             		jmp	RememberState
00019D76 4EF9 0001 1860             		jmp	RememberState
00019D7C                            		include	"_anim\Electrocuter.asm"
00019D7C                            ; ---------------------------------------------------------------------------
00019D7C                            ; Animation script - electrocution orbs (SBZ)
00019D7C                            ; ---------------------------------------------------------------------------
00019D7C 0000                       Ani_Elec:	dc.w byte_161CC-Ani_Elec
00019D7E 0000                       		dc.w byte_161D0-Ani_Elec
00019D80 0700 FF                    byte_161CC:	dc.b 7,	0, afEnd
00019D84 00                         		even
00019D84 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, afChange, 0
00019D94                            		even
00019D94                            		even
00019D94                            Map_Elec:	include	"_maps\Electrocuter.asm"
00019D94                            ; --------------------------------------------------------------------------------
00019D94                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00019D94                            ; --------------------------------------------------------------------------------
00019D94                            
00019D94                            SME_KiF9w:	
00019D94 0000 0000                  		dc.w SME_KiF9w_C-SME_KiF9w, SME_KiF9w_17-SME_KiF9w	
00019D98 0000 0000                  		dc.w SME_KiF9w_27-SME_KiF9w, SME_KiF9w_41-SME_KiF9w	
00019D9C 0000 0000                  		dc.w SME_KiF9w_56-SME_KiF9w, SME_KiF9w_75-SME_KiF9w	
00019DA0 02                         SME_KiF9w_C:	dc.b 2	
00019DA1 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019DA6 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019DAB 03                         SME_KiF9w_17:	dc.b 3	
00019DAC F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019DB1 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
00019DB6 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019DBB 05                         SME_KiF9w_27:	dc.b 5	
00019DBC F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019DC1 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
00019DC6 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019DCB F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
00019DD0 F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
00019DD5 04                         SME_KiF9w_41:	dc.b 4	
00019DD6 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019DDB 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019DE0 F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
00019DE5 F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
00019DEA 06                         SME_KiF9w_56:	dc.b 6	
00019DEB F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019DF0 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019DF5 F60D 300C 08               		dc.b $F6, $D, $30, $C, 8	
00019DFA F60D 380C DC               		dc.b $F6, $D, $38, $C, $DC	
00019DFF F60D 200C 24               		dc.b $F6, $D, $20, $C, $24	
00019E04 F60D 280C C0               		dc.b $F6, $D, $28, $C, $C0	
00019E09 04                         SME_KiF9w_75:	dc.b 4	
00019E0A F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019E0F 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019E14 F60D 300C 24               		dc.b $F6, $D, $30, $C, $24	
00019E19 F60D 380C C0               		dc.b $F6, $D, $38, $C, $C0	
00019E1E                            		even
00019E1E                            		even
00019E1E                            		include	"_incObj\6F SBZ Spin Platform Conveyor.asm"
00019E1E                            ; ---------------------------------------------------------------------------
00019E1E                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00019E1E                            ; ---------------------------------------------------------------------------
00019E1E                            
00019E1E                            SpinConvey:
00019E1E 7000                       		moveq	#0,d0
00019E20 1028 0024                  		move.b	obRoutine(a0),d0
00019E24 323B 0000                  		move.w	SpinC_Index(pc,d0.w),d1
00019E28 4EBB 1000                  		jsr	SpinC_Index(pc,d1.w)
00019E48                            
00019E48                            SpinC_Display:
00019E48 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
00019E4E                            ; ===========================================================================
00019E4E                            
00019E4E                            loc_1629A:
00019E4E 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; check if act is 3
00019E54 6600                       		bne.s	SpinC_Act1or2	; if not, branch
00019E56 0C40 FF80                  		cmpi.w	#-$80,d0
00019E5A 64EC                       		bcc.s	SpinC_Display
00019E5C                            
00019E5C                            SpinC_Act1or2:
00019E5C 1028 002F                  		move.b	$2F(a0),d0
00019E60 6A00                       		bpl.s	SpinC_Delete
00019E62 0240 007F                  		andi.w	#$7F,d0
00019E66 45F8 F7C1                  		lea	(v_obj63).w,a2
00019E6A 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00019E70                            
00019E70                            SpinC_Delete:
00019E70 4EF9 0000 F7EC             		jmp	(DeleteObject).l
00019E76                            ; ===========================================================================
00019E76 0000                       SpinC_Index:	dc.w SpinC_Main-SpinC_Index
00019E78 0000                       		dc.w loc_163D8-SpinC_Index
00019E7A                            ; ===========================================================================
00019E7A                            
00019E7A                            SpinC_Main:	; Routine 0
00019E7A 1028 0028                  		move.b	obSubtype(a0),d0
00019E7E 6B00 0000                  		bmi.w	loc_16380
00019E82 5428 0024                  		addq.b	#2,obRoutine(a0)
00019E86 217C 0001 94A6 0004        		move.l	#Map_Spin,obMap(a0)
00019E8E 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
00019E94 117C 0010 0014             		move.b	#$10,obActWid(a0)
00019E9A 0028 0004 0001             		ori.b	#4,obRender(a0)
00019EA0 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019EA6 7000                       		moveq	#0,d0
00019EA8 1028 0028                  		move.b	obSubtype(a0),d0
00019EAC 3200                       		move.w	d0,d1
00019EAE E648                       		lsr.w	#3,d0
00019EB0 0240 001E                  		andi.w	#$1E,d0
00019EB4 45FA 0000                  		lea	off_164A6(pc),a2
00019EB8 D4F2 0000                  		adda.w	(a2,d0.w),a2
00019EBC 315A 0038                  		move.w	(a2)+,$38(a0)
00019EC0 315A 0030                  		move.w	(a2)+,$30(a0)
00019EC4 214A 003C                  		move.l	a2,$3C(a0)
00019EC8 0241 000F                  		andi.w	#$F,d1
00019ECC E549                       		lsl.w	#2,d1
00019ECE 1141 0038                  		move.b	d1,$38(a0)
00019ED2 117C 0004 003A             		move.b	#4,$3A(a0)
00019ED8 4A38 F7C0                  		tst.b	(f_conveyrev).w
00019EDC 6700                       		beq.s	loc_16356
00019EDE 117C 0001 003B             		move.b	#1,$3B(a0)
00019EE4 4428 003A                  		neg.b	$3A(a0)
00019EE8 7200                       		moveq	#0,d1
00019EEA 1228 0038                  		move.b	$38(a0),d1
00019EEE D228 003A                  		add.b	$3A(a0),d1
00019EF2 B228 0039                  		cmp.b	$39(a0),d1
00019EF6 6500                       		bcs.s	loc_16352
00019EF8 1001                       		move.b	d1,d0
00019EFA 7200                       		moveq	#0,d1
00019EFC 4A00                       		tst.b	d0
00019EFE 6A00                       		bpl.s	loc_16352
00019F00 1228 0039                  		move.b	$39(a0),d1
00019F04 5901                       		subq.b	#4,d1
00019F06                            
00019F06                            loc_16352:
00019F06 1141 0038                  		move.b	d1,$38(a0)
00019F0A                            
00019F0A                            loc_16356:
00019F0A 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00019F10 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00019F16 4A41                       		tst.w	d1
00019F18 6600                       		bne.s	loc_1636C
00019F1A 117C 0001 001C             		move.b	#1,obAnim(a0)
00019F20                            
00019F20                            loc_1636C:
00019F20 0C41 0008                  		cmpi.w	#8,d1
00019F24 6600                       		bne.s	loc_16378
00019F26 117C 0000 001C             		move.b	#0,obAnim(a0)
00019F2C                            
00019F2C                            loc_16378:
00019F2C 6100 A9B8                  		bsr.w	LCon_ChangeDir
00019F30 6000 0000                  		bra.w	loc_163D8
00019F34                            ; ===========================================================================
00019F34                            
00019F34                            loc_16380:
00019F34 1140 002F                  		move.b	d0,$2F(a0)
00019F38 0240 007F                  		andi.w	#$7F,d0
00019F3C 45F8 F7C1                  		lea	(v_obj63).w,a2
00019F40 08F2 0000 0000             		bset	#0,(a2,d0.w)
00019F46 6700                       		beq.s	loc_1639A
00019F48 4EF9 0000 F7EC             		jmp	(DeleteObject).l
00019F4E                            ; ===========================================================================
00019F4E                            
00019F4E                            loc_1639A:
00019F4E D040                       		add.w	d0,d0
00019F50 0240 001E                  		andi.w	#$1E,d0
00019F54 0640 0000                  		addi.w	#ObjPosSBZPlatform_Index-ObjPos_Index,d0
00019F58 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00019F5E D4F2 0000                  		adda.w	(a2,d0.w),a2
00019F62 321A                       		move.w	(a2)+,d1
00019F64 2248                       		movea.l	a0,a1
00019F66 6000                       		bra.s	SpinC_LoadPform
00019F68                            ; ===========================================================================
00019F68                            
00019F68                            SpinC_Loop:
00019F68 4EB9 0000 FD46             		jsr	(FindFreeObj).l
00019F6E 6600                       		bne.s	loc_163D0
00019F70                            
00019F70                            SpinC_LoadPform:
00019F70 12BC 006F                  		move.b	#id_SpinConvey,0(a1)
00019F74 335A 0008                  		move.w	(a2)+,obX(a1)
00019F78 335A 000C                  		move.w	(a2)+,obY(a1)
00019F7C 301A                       		move.w	(a2)+,d0
00019F7E 1340 0028                  		move.b	d0,obSubtype(a1)
00019F82                            
00019F82                            loc_163D0:
00019F82 51C9 FFE4                  		dbf	d1,SpinC_Loop
00019F86                            
00019F86 588F                       		addq.l	#4,sp
00019F88 4E75                       		rts	
00019F8A                            ; ===========================================================================
00019F8A                            
00019F8A                            loc_163D8:	; Routine 2
00019F8A 43F9 0000 0000             		lea	(Ani_SpinConvey).l,a1
00019F90 4EB9 0000 C862             		jsr	(AnimateSprite).l
00019F96 4A28 001A                  		tst.b	obFrame(a0)
00019F9A 6600                       		bne.s	loc_16404
00019F9C 3F28 0008                  		move.w	obX(a0),-(sp)
00019FA0 6100 0000                  		bsr.w	loc_16424
00019FA4 323C 001B                  		move.w	#$1B,d1
00019FA8 343C 0007                  		move.w	#7,d2
00019FAC 3602                       		move.w	d2,d3
00019FAE 5243                       		addq.w	#1,d3
00019FB0 381F                       		move.w	(sp)+,d4
00019FB2 4EF9 0001 1CF8             		jmp	SolidObject
00019FB8                            ; ===========================================================================
00019FB8                            
00019FB8                            loc_16404:
00019FB8 0828 0003 0022             		btst	#3,obStatus(a0)
00019FBE 6700                       		beq.s	loc_16420
00019FC0 43F8 D000                  		lea	(v_objspace).w,a1
00019FC4 08A9 0003 0022             		bclr	#3,obStatus(a1)
00019FCA 08A8 0003 0022             		bclr	#3,obStatus(a0)
00019FD0 4228 0025                  		clr.b	obSolid(a0)
00019FD4                            
00019FD4                            loc_16420:
00019FD4 6000 0000                  		bra.w	loc_16424
00019FD8                            
00019FD8                            loc_16424:
00019FD8 3028 0008                  		move.w	obX(a0),d0
00019FDC B068 0034                  		cmp.w	$34(a0),d0
00019FE0 6600                       		bne.s	loc_16484
00019FE2 3028 000C                  		move.w	obY(a0),d0
00019FE6 B068 0036                  		cmp.w	$36(a0),d0
00019FEA 6600                       		bne.s	loc_16484
00019FEC 7200                       		moveq	#0,d1
00019FEE 1228 0038                  		move.b	$38(a0),d1
00019FF2 D228 003A                  		add.b	$3A(a0),d1
00019FF6 B228 0039                  		cmp.b	$39(a0),d1
00019FFA 6500                       		bcs.s	loc_16456
00019FFC 1001                       		move.b	d1,d0
00019FFE 7200                       		moveq	#0,d1
0001A000 4A00                       		tst.b	d0
0001A002 6A00                       		bpl.s	loc_16456
0001A004 1228 0039                  		move.b	$39(a0),d1
0001A008 5901                       		subq.b	#4,d1
0001A00A                            
0001A00A                            loc_16456:
0001A00A 1141 0038                  		move.b	d1,$38(a0)
0001A00E 2268 003C                  		movea.l	$3C(a0),a1
0001A012 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001A018 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001A01E 4A41                       		tst.w	d1
0001A020 6600                       		bne.s	loc_16474
0001A022 117C 0001 001C             		move.b	#1,obAnim(a0)
0001A028                            
0001A028                            loc_16474:
0001A028 0C41 0008                  		cmpi.w	#8,d1
0001A02C 6600                       		bne.s	loc_16480
0001A02E 117C 0000 001C             		move.b	#0,obAnim(a0)
0001A034                            
0001A034                            loc_16480:
0001A034 6100 A8B0                  		bsr.w	LCon_ChangeDir
0001A038                            
0001A038                            loc_16484:
0001A038 4EF9 0000 F798             		jmp	(SpeedToPos).l
0001A038 4EF9 0000 F798             		jmp	(SpeedToPos).l
0001A03E                            		include	"_anim\SBZ Spin Platform Conveyor.asm"
0001A03E                            ; ---------------------------------------------------------------------------
0001A03E                            ; Animation script - platform on conveyor belt (SBZ)
0001A03E                            ; ---------------------------------------------------------------------------
0001A03E 0000                       Ani_SpinConvey:	dc.w @spin-Ani_SpinConvey
0001A040 0000                       		dc.w @still-Ani_SpinConvey
0001A042 0000 0102 0304 4342 4140+  @spin:		dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001A04F 6423 2221 00FF             		dc.b $64, $23, $22, $21, 0, afEnd
0001A056 00                         		even
0001A056 0F00 FF                    @still:		dc.b $F, 0, afEnd
0001A05A 00                         		even
0001A05A 00                         		even
0001A05A                            
0001A05A 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
0001A060 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
0001A066 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
0001A07A 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
0001A08E 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
0001A0A2 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
0001A0B6 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
0001A0CA 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
0001A0DE                            ; ===========================================================================
0001A0DE                            
0001A0DE                            		include	"_incObj\70 Girder Block.asm"
0001A0DE                            ; ---------------------------------------------------------------------------
0001A0DE                            ; Object 70 - large girder block (SBZ)
0001A0DE                            ; ---------------------------------------------------------------------------
0001A0DE                            
0001A0DE                            Girder:
0001A0DE 7000                       		moveq	#0,d0
0001A0E0 1028 0024                  		move.b	obRoutine(a0),d0
0001A0E4 323B 0000                  		move.w	Gird_Index(pc,d0.w),d1
0001A0E8 4EFB 1000                  		jmp	Gird_Index(pc,d1.w)
0001A0EC                            ; ===========================================================================
0001A0EC 0000                       Gird_Index:	dc.w Gird_Main-Gird_Index
0001A0EE 0000                       		dc.w Gird_Action-Gird_Index
0001A0F0                            
0001A0F0 =00000016                  gird_height:	equ $16
0001A0F0 =00000032                  gird_origX:	equ $32		; original x-axis position
0001A0F0 =00000030                  gird_origY:	equ $30		; original y-axis position
0001A0F0 =00000034                  gird_time:	equ $34		; duration for movement in a direction
0001A0F0 =00000038                  gird_set:	equ $38		; which movement settings to use (0/8/16/24)
0001A0F0 =0000003A                  gird_delay:	equ $3A		; delay for movement
0001A0F0                            ; ===========================================================================
0001A0F0                            
0001A0F0                            Gird_Main:	; Routine 0
0001A0F0 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A0F4 217C 0000 0000 0004        		move.l	#Map_Gird,obMap(a0)
0001A0FC 317C 42F0 0002             		move.w	#$42F0,obGfx(a0)
0001A102 0028 0004 0001             		ori.b	#4,obRender(a0)
0001A108 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001A10E 117C 0060 0014             		move.b	#$60,obActWid(a0)
0001A114 117C 0018 0016             		move.b	#$18,gird_height(a0)
0001A11A 3168 0008 0032             		move.w	obX(a0),gird_origX(a0)
0001A120 3168 000C 0030             		move.w	obY(a0),gird_origY(a0)
0001A126 6100 0000                  		bsr.w	Gird_ChgMove
0001A12A                            
0001A12A                            Gird_Action:	; Routine 2
0001A12A 3F28 0008                  		move.w	obX(a0),-(sp)
0001A12E 4A68 003A                  		tst.w	gird_delay(a0)
0001A132 6700                       		beq.s	@beginmove
0001A134 5368 003A                  		subq.w	#1,gird_delay(a0)
0001A138 6600                       		bne.s	@solid
0001A13A                            
0001A13A                            	@beginmove:
0001A13A 4EB9 0000 F798             		jsr	(SpeedToPos).l
0001A140 5368 0034                  		subq.w	#1,gird_time(a0) ; decrement movement duration
0001A144 6600                       		bne.s	@solid		; if time remains, branch
0001A146 6100 0000                  		bsr.w	Gird_ChgMove	; if time is zero, branch
0001A14A                            
0001A14A                            	@solid:
0001A14A 381F                       		move.w	(sp)+,d4
0001A14C 4A28 0001                  		tst.b	obRender(a0)
0001A150 6A00                       		bpl.s	@chkdel
0001A152 7200                       		moveq	#0,d1
0001A154 1228 0014                  		move.b	obActWid(a0),d1
0001A158 0641 000B                  		addi.w	#$B,d1
0001A15C 7400                       		moveq	#0,d2
0001A15E 1428 0016                  		move.b	gird_height(a0),d2
0001A162 3602                       		move.w	d2,d3
0001A164 5243                       		addq.w	#1,d3
0001A166 4EB9 0001 1CF8             		jsr	SolidObject
0001A16C                            
0001A16C                            	@chkdel:
0001A188 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001A18E                            
0001A18E                            	@delete:
0001A18E 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001A194                            ; ===========================================================================
0001A194                            
0001A194                            Gird_ChgMove:
0001A194 1028 0038                  		move.b	gird_set(a0),d0
0001A198 0240 0018                  		andi.w	#$18,d0
0001A19C 43F9 0000 0000             		lea	(@settings).l,a1
0001A1A2 43F1 0000                  		lea	(a1,d0.w),a1
0001A1A6 3159 0010                  		move.w	(a1)+,obVelX(a0)
0001A1AA 3159 0012                  		move.w	(a1)+,obVelY(a0)
0001A1AE 3159 0034                  		move.w	(a1)+,gird_time(a0)
0001A1B2 5028 0038                  		addq.b	#8,gird_set(a0)	; use next settings
0001A1B6 317C 0007 003A             		move.w	#7,gird_delay(a0)
0001A1BC 4E75                       		rts	
0001A1BE                            ; ===========================================================================
0001A1BE                            @settings:	;   x-speed, y-speed, duration
0001A1BE 0100 0000 0060 0000        		dc.w   $100,	 0,   $60,     0 ; right
0001A1C6 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0 ; down
0001A1CE FF00 FFC0 0060 0000        		dc.w  -$100,  -$40,   $60,     0 ; up/left
0001A1D6 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
0001A1D6 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
0001A1DE                            Map_Gird:	include	"_maps\Girder Block.asm"
0001A1DE                            ; ---------------------------------------------------------------------------
0001A1DE                            ; Sprite mappings - large girder block (SBZ)
0001A1DE                            ; ---------------------------------------------------------------------------
0001A1DE                            Map_Gird_internal:
0001A1DE 0000                       		dc.w @girder-Map_Gird_internal
0001A1E0 0C                         @girder:	dc.b $C
0001A1E1 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
0001A1E6 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
0001A1EB E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
0001A1F0 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
0001A1F5 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
0001A1FA 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
0001A1FF E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
0001A204 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
0001A209 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
0001A20E 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
0001A213 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
0001A218 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
0001A21E 00                         		even
0001A21E 00                         		even
0001A21E                            		include	"_incObj\72 Teleporter.asm"
0001A21E                            ; ---------------------------------------------------------------------------
0001A21E                            ; Object 72 - teleporter (SBZ)
0001A21E                            ; ---------------------------------------------------------------------------
0001A21E                            
0001A21E                            Teleport:
0001A21E 7000                       		moveq	#0,d0
0001A220 1028 0024                  		move.b	obRoutine(a0),d0
0001A224 323B 0000                  		move.w	Tele_Index(pc,d0.w),d1
0001A228 4EBB 1000                  		jsr	Tele_Index(pc,d1.w)
0001A248 4E75                       		rts	
0001A24A                            
0001A24A                            	@delete:
0001A24A 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001A250                            ; ===========================================================================
0001A250 0000                       Tele_Index:	dc.w Tele_Main-Tele_Index
0001A252 0000                       		dc.w loc_166C8-Tele_Index
0001A254 0000                       		dc.w loc_1675E-Tele_Index
0001A256 0000                       		dc.w loc_16798-Tele_Index
0001A258                            ; ===========================================================================
0001A258                            
0001A258                            Tele_Main:	; Routine 0
0001A258 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A25C 1028 0028                  		move.b	obSubtype(a0),d0
0001A260 D040                       		add.w	d0,d0
0001A262 0240 001E                  		andi.w	#$1E,d0
0001A266 45FA 0000                  		lea	Tele_Data(pc),a2
0001A26A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001A26E 315A 003A                  		move.w	(a2)+,$3A(a0)
0001A272 214A 003C                  		move.l	a2,$3C(a0)
0001A276 315A 0036                  		move.w	(a2)+,$36(a0)
0001A27A 315A 0038                  		move.w	(a2)+,$38(a0)
0001A27E                            
0001A27E                            loc_166C8:	; Routine 2
0001A27E 43F8 D000                  		lea	(v_player).w,a1
0001A282 3029 0008                  		move.w	obX(a1),d0
0001A286 9068 0008                  		sub.w	obX(a0),d0
0001A28A 0828 0000 0022             		btst	#0,obStatus(a0)
0001A290 6700                       		beq.s	loc_166E0
0001A292 0640 000F                  		addi.w	#$F,d0
0001A296                            
0001A296                            loc_166E0:
0001A296 0C40 0010                  		cmpi.w	#$10,d0
0001A29A 6400                       		bcc.s	locret_1675C
0001A29C 3229 000C                  		move.w	obY(a1),d1
0001A2A0 9268 000C                  		sub.w	obY(a0),d1
0001A2A4 0641 0020                  		addi.w	#$20,d1
0001A2A8 0C41 0040                  		cmpi.w	#$40,d1
0001A2AC 6400                       		bcc.s	locret_1675C
0001A2AE 4A38 F7C8                  		tst.b	(f_lockmulti).w
0001A2B2 6600                       		bne.s	locret_1675C
0001A2B4 0C28 0007 0028             		cmpi.b	#7,obSubtype(a0)
0001A2BA 6600                       		bne.s	loc_1670E
0001A2BC 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w
0001A2C2 6500                       		bcs.s	locret_1675C
0001A2C4                            
0001A2C4                            loc_1670E:
0001A2C4 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A2C8 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
0001A2CE 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; use Sonic's rolling animation
0001A2D4 337C 0800 0020             		move.w	#$800,obInertia(a1)
0001A2DA 337C 0000 0010             		move.w	#0,obVelX(a1)
0001A2E0 337C 0000 0012             		move.w	#0,obVelY(a1)
0001A2E6 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001A2EC 08A9 0005 0022             		bclr	#5,obStatus(a1)
0001A2F2 08E9 0001 0022             		bset	#1,obStatus(a1)
0001A2F8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A2FE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A304 4228 0032                  		clr.b	$32(a0)
0001A312                            
0001A312                            locret_1675C:
0001A312 4E75                       		rts	
0001A314                            ; ===========================================================================
0001A314                            
0001A314                            loc_1675E:	; Routine 4
0001A314 43F8 D000                  		lea	(v_player).w,a1
0001A318 1028 0032                  		move.b	$32(a0),d0
0001A31C 5428 0032                  		addq.b	#2,$32(a0)
0001A320 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001A326 EA40                       		asr.w	#5,d0
0001A328 3428 000C                  		move.w	obY(a0),d2
0001A32C 9440                       		sub.w	d0,d2
0001A32E 3342 000C                  		move.w	d2,obY(a1)
0001A332 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
0001A338 6600                       		bne.s	locret_16796
0001A33A 6100 0000                  		bsr.w	sub_1681C
0001A33E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A34C                            
0001A34C                            locret_16796:
0001A34C 4E75                       		rts	
0001A34E                            ; ===========================================================================
0001A34E                            
0001A34E                            loc_16798:	; Routine 6
0001A34E 588F                       		addq.l	#4,sp
0001A350 43F8 D000                  		lea	(v_player).w,a1
0001A354 5328 002E                  		subq.b	#1,$2E(a0)
0001A358 6A00                       		bpl.s	loc_167DA
0001A35A 3368 0036 0008             		move.w	$36(a0),obX(a1)
0001A360 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001A366 7200                       		moveq	#0,d1
0001A368 1228 003A                  		move.b	$3A(a0),d1
0001A36C 5801                       		addq.b	#4,d1
0001A36E B228 003B                  		cmp.b	$3B(a0),d1
0001A372 6500                       		bcs.s	loc_167C2
0001A374 7200                       		moveq	#0,d1
0001A376 6000                       		bra.s	loc_16800
0001A378                            ; ===========================================================================
0001A378                            
0001A378                            loc_167C2:
0001A378 1141 003A                  		move.b	d1,$3A(a0)
0001A37C 2468 003C                  		movea.l	$3C(a0),a2
0001A380 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
0001A386 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
0001A38C 6000 0000                  		bra.w	sub_1681C
0001A390                            ; ===========================================================================
0001A390                            
0001A390                            loc_167DA:
0001A390 2429 0008                  		move.l	obX(a1),d2
0001A394 2629 000C                  		move.l	obY(a1),d3
0001A398 3029 0010                  		move.w	obVelX(a1),d0
0001A39C 48C0                       		ext.l	d0
0001A39E E180                       		asl.l	#8,d0
0001A3A0 D480                       		add.l	d0,d2
0001A3A2 3029 0012                  		move.w	obVelY(a1),d0
0001A3A6 48C0                       		ext.l	d0
0001A3A8 E180                       		asl.l	#8,d0
0001A3AA D680                       		add.l	d0,d3
0001A3AC 2342 0008                  		move.l	d2,obX(a1)
0001A3B0 2343 000C                  		move.l	d3,obY(a1)
0001A3B4 4E75                       		rts	
0001A3B6                            ; ===========================================================================
0001A3B6                            
0001A3B6                            loc_16800:
0001A3B6 0269 07FF 000C             		andi.w	#$7FF,obY(a1)
0001A3BC 4228 0024                  		clr.b	obRoutine(a0)
0001A3C0 4238 F7C8                  		clr.b	(f_lockmulti).w
0001A3C4 337C 0000 0010             		move.w	#0,obVelX(a1)
0001A3CA 337C 0200 0012             		move.w	#$200,obVelY(a1)
0001A3D0 4E75                       		rts	
0001A3D2                            
0001A3D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A3D2                            
0001A3D2                            
0001A3D2                            sub_1681C:
0001A3D2 7000                       		moveq	#0,d0
0001A3D4 343C 1000                  		move.w	#$1000,d2
0001A3D8 3028 0036                  		move.w	$36(a0),d0
0001A3DC 9069 0008                  		sub.w	obX(a1),d0
0001A3E0 6C00                       		bge.s	loc_16830
0001A3E2 4440                       		neg.w	d0
0001A3E4 4442                       		neg.w	d2
0001A3E6                            
0001A3E6                            loc_16830:
0001A3E6 7200                       		moveq	#0,d1
0001A3E8 363C 1000                  		move.w	#$1000,d3
0001A3EC 3228 0038                  		move.w	$38(a0),d1
0001A3F0 9269 000C                  		sub.w	obY(a1),d1
0001A3F4 6C00                       		bge.s	loc_16844
0001A3F6 4441                       		neg.w	d1
0001A3F8 4443                       		neg.w	d3
0001A3FA                            
0001A3FA                            loc_16844:
0001A3FA B240                       		cmp.w	d0,d1
0001A3FC 6500                       		bcs.s	loc_1687A
0001A3FE 7200                       		moveq	#0,d1
0001A400 3228 0038                  		move.w	$38(a0),d1
0001A404 9269 000C                  		sub.w	obY(a1),d1
0001A408 4841                       		swap	d1
0001A40A 83C3                       		divs.w	d3,d1
0001A40C 7000                       		moveq	#0,d0
0001A40E 3028 0036                  		move.w	$36(a0),d0
0001A412 9069 0008                  		sub.w	obX(a1),d0
0001A416 6700                       		beq.s	loc_16866
0001A418 4840                       		swap	d0
0001A41A 81C1                       		divs.w	d1,d0
0001A41C                            
0001A41C                            loc_16866:
0001A41C 3340 0010                  		move.w	d0,obVelX(a1)
0001A420 3343 0012                  		move.w	d3,obVelY(a1)
0001A424 4A41                       		tst.w	d1
0001A426 6A00                       		bpl.s	loc_16874
0001A428 4441                       		neg.w	d1
0001A42A                            
0001A42A                            loc_16874:
0001A42A 3141 002E                  		move.w	d1,$2E(a0)
0001A42E 4E75                       		rts	
0001A430                            ; ===========================================================================
0001A430                            
0001A430                            loc_1687A:
0001A430 7000                       		moveq	#0,d0
0001A432 3028 0036                  		move.w	$36(a0),d0
0001A436 9069 0008                  		sub.w	obX(a1),d0
0001A43A 4840                       		swap	d0
0001A43C 81C2                       		divs.w	d2,d0
0001A43E 7200                       		moveq	#0,d1
0001A440 3228 0038                  		move.w	$38(a0),d1
0001A444 9269 000C                  		sub.w	obY(a1),d1
0001A448 6700                       		beq.s	loc_16898
0001A44A 4841                       		swap	d1
0001A44C 83C0                       		divs.w	d0,d1
0001A44E                            
0001A44E                            loc_16898:
0001A44E 3341 0012                  		move.w	d1,obVelY(a1)
0001A452 3342 0010                  		move.w	d2,obVelX(a1)
0001A456 4A40                       		tst.w	d0
0001A458 6A00                       		bpl.s	loc_168A6
0001A45A 4440                       		neg.w	d0
0001A45C                            
0001A45C                            loc_168A6:
0001A45C 3140 002E                  		move.w	d0,$2E(a0)
0001A460 4E75                       		rts	
0001A462                            ; End of function sub_1681C
0001A462                            
0001A462                            ; ===========================================================================
0001A462 0000 0000 0000             Tele_Data:	dc.w @type00-Tele_Data, @type01-Tele_Data, @type02-Tele_Data
0001A468 0000 0000 0000             		dc.w @type03-Tele_Data, @type04-Tele_Data, @type05-Tele_Data
0001A46E 0000 0000                  		dc.w @type06-Tele_Data, @type07-Tele_Data
0001A472 0004 0794 098C             @type00:	dc.w 4,	$794, $98C
0001A478 0004 0094 038C             @type01:	dc.w 4,	$94, $38C
0001A47E 001C 0794 02E8             @type02:	dc.w $1C, $794,	$2E8
0001A484 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
0001A48A 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
0001A490 0884 0298 0894             		dc.w $884, $298, $894
0001A496 0270 0894 0190             		dc.w $270, $894, $190
0001A49C 0004 0894 0690             @type03:	dc.w 4,	$894, $690
0001A4A2 001C 1194 0470             @type04:	dc.w $1C, $1194, $470
0001A4A8 1184 0498 1158             		dc.w $1184, $498, $1158
0001A4AE 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
0001A4B4 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
0001A4BA 04E8 0F94 0590             		dc.w $4E8, $F94, $590
0001A4C0 0004 1294 0490             @type05:	dc.w 4,	$1294, $490
0001A4C6 001C 1594 FFE8             @type06:	dc.w $1C, $1594, $FFE8
0001A4CC 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
0001A4D2 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
0001A4D8 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
0001A4DE FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001A4E4 0004 0894 0090             @type07:	dc.w 4,	$894, $90
0001A4E4 0004 0894 0090             @type07:	dc.w 4,	$894, $90
0001A4EA                            
0001A4EA                            		include	"_incObj\78 Caterkiller.asm"
0001A4EA                            ; ---------------------------------------------------------------------------
0001A4EA                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
0001A4EA                            ; ---------------------------------------------------------------------------
0001A4EA                            
0001A4EA                            Caterkiller:
0001A4EA 7000                       		moveq	#0,d0
0001A4EC 1028 0024                  		move.b	obRoutine(a0),d0
0001A4F0 323B 0000                  		move.w	Cat_Index(pc,d0.w),d1
0001A4F4 4EFB 1000                  		jmp	Cat_Index(pc,d1.w)
0001A4F8                            ; ===========================================================================
0001A4F8 0000                       Cat_Index:	dc.w Cat_Main-Cat_Index
0001A4FA 0000                       		dc.w Cat_Head-Cat_Index
0001A4FC 0000                       		dc.w Cat_BodySeg1-Cat_Index
0001A4FE 0000                       		dc.w Cat_BodySeg2-Cat_Index
0001A500 0000                       		dc.w Cat_BodySeg1-Cat_Index
0001A502 0000                       		dc.w Cat_Delete-Cat_Index
0001A504 0000                       		dc.w loc_16CC0-Cat_Index
0001A506                            
0001A506 =0000003C                  cat_parent:	equ $3C		; address of parent object
0001A506                            ; ===========================================================================
0001A506                            
0001A506                            locret_16950:
0001A506 4E75                       		rts	
0001A508                            ; ===========================================================================
0001A508                            
0001A508                            Cat_Main:	; Routine 0
0001A508 117C 0007 0016             		move.b	#7,obHeight(a0)
0001A50E 117C 0008 0017             		move.b	#8,obWidth(a0)
0001A514 4EB9 0000 F760             		jsr	(ObjectFall).l
0001A51A 4EB9 0001 8984             		jsr	(ObjFloorDist).l
0001A520 4A41                       		tst.w	d1
0001A522 6AE2                       		bpl.s	locret_16950
0001A524 D368 000C                  		add.w	d1,obY(a0)
0001A528 4268 0012                  		clr.w	obVelY(a0)
0001A52C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A530 217C 0000 0000 0004        		move.l	#Map_Cat,obMap(a0)
0001A538 317C 22B0 0002             		move.w	#$22B0,obGfx(a0)
0001A53E 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; if level is SBZ, branch
0001A544 6700                       		beq.s	@isscrapbrain
0001A546 317C 24FF 0002             		move.w	#$24FF,obGfx(a0) ; MZ specific code
0001A54C                            
0001A54C                            	@isscrapbrain:
0001A54C 0228 0003 0001             		andi.b	#3,obRender(a0)
0001A552 0028 0004 0001             		ori.b	#4,obRender(a0)
0001A558 1168 0001 0022             		move.b	obRender(a0),obStatus(a0)
0001A55E 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001A564 117C 0008 0014             		move.b	#8,obActWid(a0)
0001A56A 117C 000B 0020             		move.b	#$B,obColType(a0)
0001A570 3428 0008                  		move.w	obX(a0),d2
0001A574 7A0C                       		moveq	#$C,d5
0001A576 0828 0000 0022             		btst	#0,obStatus(a0)
0001A57C 6700                       		beq.s	@noflip
0001A57E 4445                       		neg.w	d5
0001A580                            
0001A580                            	@noflip:
0001A580 1C3C 0004                  		move.b	#4,d6
0001A584 7600                       		moveq	#0,d3
0001A586 7804                       		moveq	#4,d4
0001A588 2448                       		movea.l	a0,a2
0001A58A 7202                       		moveq	#2,d1
0001A58C                            
0001A58C                            Cat_Loop:
0001A58C 4EB9 0000 FD5C             		jsr	(FindNextFreeObj).l
0001A592 6600 0000                  			bne.w	Cat_ChkGone
0001A596 12BC 0078                  		move.b	#id_Caterkiller,0(a1) ; load body segment object
0001A59A 1346 0024                  		move.b	d6,obRoutine(a1) ; goto Cat_BodySeg1 or Cat_BodySeg2 next
0001A59E 5406                       		addq.b	#2,d6		; alternate between the two
0001A5A0 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
0001A5A6 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0001A5AC 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001A5B2 137C 0008 0014             		move.b	#8,obActWid(a1)
0001A5B8 137C 00CB 0020             		move.b	#$CB,obColType(a1)
0001A5BE D445                       		add.w	d5,d2
0001A5C0 3342 0008                  		move.w	d2,obX(a1)
0001A5C4 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A5CA 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001A5D0 1368 0022 0001             		move.b	obStatus(a0),obRender(a1)
0001A5D6 137C 0008 001A             		move.b	#8,obFrame(a1)
0001A5DC 234A 003C                  		move.l	a2,cat_parent(a1)
0001A5E0 1344 003C                  		move.b	d4,cat_parent(a1)
0001A5E4 5804                       		addq.b	#4,d4
0001A5E6 2449                       		movea.l	a1,a2
0001A5E8                            
0001A5E8                            	@fail:
0001A5E8 51C9 FFA2                  		dbf	d1,Cat_Loop	; repeat sequence 2 more times
0001A5EC                            
0001A5EC 117C 0007 002A             		move.b	#7,$2A(a0)
0001A5F2 4228 003C                  		clr.b	cat_parent(a0)
0001A5F6                            
0001A5F6                            Cat_Head:	; Routine 2
0001A5F6 4A28 0022                  		tst.b	obStatus(a0)
0001A5FA 6B00 0000                  		bmi.w	loc_16C96
0001A5FE 7000                       		moveq	#0,d0
0001A600 1028 0025                  		move.b	ob2ndRout(a0),d0
0001A604 323B 0000                  		move.w	Cat_Index2(pc,d0.w),d1
0001A608 4EBB 1000                  		jsr	Cat_Index2(pc,d1.w)
0001A60C 1228 002B                  		move.b	$2B(a0),d1
0001A610 6A00                       		bpl.s	@display
0001A612 43F9 0000 0000             		lea	(Ani_Cat).l,a1
0001A618 1028 0026                  		move.b	obAngle(a0),d0
0001A61C 0240 007F                  		andi.w	#$7F,d0
0001A620 5828 0026                  		addq.b	#4,obAngle(a0)
0001A624 1031 0000                  		move.b	(a1,d0.w),d0
0001A628 6A00                       		bpl.s	@animate
0001A62A 08A8 0007 002B             		bclr	#7,$2B(a0)
0001A630 6000                       		bra.s	@display
0001A632                            
0001A632                            	@animate:
0001A632 0201 0010                  		andi.b	#$10,d1
0001A636 D001                       		add.b	d1,d0
0001A638 1140 001A                  		move.b	d0,obFrame(a0)
0001A63C                            
0001A63C                            	@display:
0001A65A 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001A660                            
0001A660                            	Cat_ChkGone:
0001A660 45F8 FC00                  		lea	(v_objstate).w,a2
0001A664 7000                       		moveq	#0,d0
0001A666 1028 0023                  		move.b	obRespawnNo(a0),d0
0001A66A 6700                       		beq.s	@delete
0001A66C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001A672                            
0001A672                            	@delete:
0001A672 117C 000A 0024             		move.b	#$A,obRoutine(a0)	; goto Cat_Delete next
0001A678 4E75                       		rts	
0001A67A                            ; ===========================================================================
0001A67A                            
0001A67A                            Cat_Delete:	; Routine $A
0001A67A 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001A680                            ; ===========================================================================
0001A680 0000                       Cat_Index2:	dc.w @wait-Cat_Index2
0001A682 0000                       		dc.w loc_16B02-Cat_Index2
0001A684                            ; ===========================================================================
0001A684                            
0001A684                            @wait:
0001A684 5328 002A                  		subq.b	#1,$2A(a0)
0001A688 6B00                       		bmi.s	@move
0001A68A 4E75                       		rts	
0001A68C                            ; ===========================================================================
0001A68C                            
0001A68C                            @move:
0001A68C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A690 117C 0010 002A             		move.b	#$10,$2A(a0)
0001A696 317C FF40 0010             		move.w	#-$C0,obVelX(a0)
0001A69C 317C 0040 001C             		move.w	#$40,obAnim(a0)
0001A6A2 0868 0004 002B             		bchg	#4,$2B(a0)
0001A6A8 6600                       		bne.s	loc_16AFC
0001A6AA 4268 0010                  		clr.w	obVelX(a0)
0001A6AE 4468 001C                  		neg.w	obAnim(a0)
0001A6B2                            
0001A6B2                            loc_16AFC:
0001A6B2 08E8 0007 002B             		bset	#7,$2B(a0)
0001A6B8                            
0001A6B8                            loc_16B02:
0001A6B8 5328 002A                  		subq.b	#1,$2A(a0)
0001A6BC 6B00                       		bmi.s	@loc_16B5E
0001A6BE 4A68 0010                  			tst.w	obVelX(a0)
0001A6C2 6700                       			beq.s	@notmoving
0001A6C4 2428 0008                  			move.l	obX(a0),d2
0001A6C8 2602                       			move.l	d2,d3
0001A6CA 3028 0010                  		move.w	obVelX(a0),d0
0001A6CE 0828 0000 0022             		btst	#0,obStatus(a0)
0001A6D4 6700                       		beq.s	@noflip
0001A6D6 4440                       		neg.w	d0
0001A6D8                            
0001A6D8                            	@noflip:
0001A6D8 48C0                       		ext.l	d0
0001A6DA E180                       		asl.l	#8,d0
0001A6DC D480                       		add.l	d0,d2
0001A6DE 2142 0008                  		move.l	d2,obX(a0)
0001A6E2 4843                       			swap	d3
0001A6E4 B668 0008                  			cmp.w	obX(a0),d3
0001A6E8 6700                       			beq.s	@notmoving
0001A6EA 4EB9 0001 8984             			jsr	(ObjFloorDist).l
0001A6F0 0C41 FFF8                  			cmpi.w	#-8,d1
0001A6F4 6D00                       			blt.s	@loc_16B70
0001A6F6 0C41 000C                  			cmpi.w	#$C,d1
0001A6FA 6C00                       			bge.s	@loc_16B70
0001A6FC D368 000C                  			add.w	d1,obY(a0)
0001A700 7000                       		moveq	#0,d0
0001A702 1028 003C                  		move.b	cat_parent(a0),d0
0001A706 5228 003C                  		addq.b	#1,cat_parent(a0)
0001A70A 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
0001A710 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001A714                            
0001A714                            	@notmoving:
0001A714 4E75                       		rts	
0001A716                            ; ===========================================================================
0001A716                            
0001A716                            @loc_16B5E:
0001A716 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001A71A 117C 0007 002A             		move.b	#7,$2A(a0)
0001A720 4268 0010                  			clr.w	obVelX(a0)
0001A724 4268 001C                  			clr.w	obAnim(a0)
0001A728 4E75                       		rts	
0001A72A                            ; ===========================================================================
0001A72A                            
0001A72A                            @loc_16B70:
0001A72A 7000                       			moveq	#0,d0
0001A72C 1028 003C                  			move.b	cat_parent(a0),d0
0001A730 11BC 0080 002C             			move.b	#$80,$2C(a0,d0)
0001A736 4468 000A                  			neg.w	obX+2(a0)
0001A73A 6700                       			beq.s	@loc_1730A
0001A73C 0828 0000 0022             			btst	#0,obStatus(a0)
0001A742 6700                       			beq.s	@loc_1730A
0001A744 5368 0008                  			subq.w	#1,obX(a0)
0001A748 5228 003C                  			addq.b	#1,cat_parent(a0)
0001A74C 7000                       			moveq	#0,d0
0001A74E 1028 003C                  			move.b	cat_parent(a0),d0
0001A752 4230 002C                  			clr.b	$2C(a0,d0)
0001A756                            	@loc_1730A:
0001A756 0868 0000 0022             			bchg	#0,obStatus(a0)
0001A75C 1168 0022 0001             			move.b	obStatus(a0),obRender(a0)
0001A762 5228 003C                  		addq.b	#1,cat_parent(a0)
0001A766 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
0001A76C 4E75                       		rts	
0001A76E                            ; ===========================================================================
0001A76E                            
0001A76E                            Cat_BodySeg2:	; Routine 6
0001A76E 2268 003C                  		movea.l	cat_parent(a0),a1
0001A772 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001A778 6A00                       		bpl.s	Cat_BodySeg1
0001A77A 43F9 0000 0000             		lea	(Ani_Cat).l,a1
0001A780 1028 0026                  		move.b	obAngle(a0),d0
0001A784 0240 007F                  		andi.w	#$7F,d0
0001A788 5828 0026                  		addq.b	#4,obAngle(a0)
0001A78C 4A31 0004                  		tst.b	4(a1,d0.w)
0001A790 6A00                       		bpl.s	Cat_AniBody
0001A792 5828 0026                  		addq.b	#4,obAngle(a0)
0001A796                            
0001A796                            Cat_AniBody:
0001A796 1031 0000                  		move.b	(a1,d0.w),d0
0001A79A 5000                       		addq.b	#8,d0
0001A79C 1140 001A                  		move.b	d0,obFrame(a0)
0001A7A0                            
0001A7A0                            Cat_BodySeg1:	; Routine 4, 8
0001A7A0 2268 003C                  		movea.l	cat_parent(a0),a1
0001A7A4 4A28 0022                  		tst.b	obStatus(a0)
0001A7A8 6B00 0000                  		bmi.w	loc_16C90
0001A7AC 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001A7B2 1169 0025 0025             		move.b	ob2ndRout(a1),ob2ndRout(a0)
0001A7B8 6700 0000                  		beq.w	loc_16C64
0001A7BC 3169 001C 001C             		move.w	obAnim(a1),obAnim(a0)
0001A7C2 3029 0010                  		move.w	obVelX(a1),d0
0001A7C6 D068 001C                  			add.w	obAnim(a0),d0
0001A7CA 3140 0010                  		move.w	d0,obVelX(a0)
0001A7CE 2428 0008                  		move.l	obX(a0),d2
0001A7D2 2602                       		move.l	d2,d3
0001A7D4 3028 0010                  		move.w	obVelX(a0),d0
0001A7D8 0828 0000 0022             		btst	#0,obStatus(a0)
0001A7DE 6700                       		beq.s	loc_16C0C
0001A7E0 4440                       		neg.w	d0
0001A7E2                            
0001A7E2                            loc_16C0C:
0001A7E2 48C0                       		ext.l	d0
0001A7E4 E180                       		asl.l	#8,d0
0001A7E6 D480                       		add.l	d0,d2
0001A7E8 2142 0008                  		move.l	d2,obX(a0)
0001A7EC 4843                       		swap	d3
0001A7EE B668 0008                  		cmp.w	obX(a0),d3
0001A7F2 6700                       		beq.s	loc_16C64
0001A7F4 7000                       		moveq	#0,d0
0001A7F6 1028 003C                  		move.b	cat_parent(a0),d0
0001A7FA 1231 002C                  		move.b	$2C(a1,d0.w),d1
0001A7FE 0C01 0080                  		cmpi.b	#$80,d1
0001A802 6600                       		bne.s	loc_16C50
0001A804 1181 002C                  			move.b	d1,$2C(a0,d0)
0001A808 4468 000A                  			neg.w	obX+2(a0)
0001A80C 6700                       			beq.s	locj_173E4
0001A80E 0828 0000 0022             			btst	#0,obStatus(a0)
0001A814 6700                       			beq.s	locj_173E4
0001A816 0C68 FF40 0010             			cmpi.w	#-$C0,obVelX(a0)
0001A81C 6600                       			bne.s	locj_173E4
0001A81E 5368 0008                  			subq.w	#1,obX(a0)
0001A822 5228 003C                  			addq.b	#1,cat_parent(a0)
0001A826 7000                       			moveq	#0,d0
0001A828 1028 003C                  			move.b	cat_parent(a0),d0
0001A82C 4230 002C                  			clr.b	$2C(a0,d0)
0001A830                            	locj_173E4:
0001A830 0868 0000 0022             		bchg	#0,obStatus(a0)
0001A836 1168 0022 0001             		move.b	obStatus(a0),1(a0)
0001A83C 5228 003C                  		addq.b	#1,cat_parent(a0)
0001A840 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
0001A846 6000                       		bra.s	loc_16C64
0001A848                            ; ===========================================================================
0001A848                            
0001A848                            loc_16C50:
0001A848 4881                       		ext.w	d1
0001A84A D368 000C                  		add.w	d1,obY(a0)
0001A84E 5228 003C                  		addq.b	#1,cat_parent(a0)
0001A852 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
0001A858 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001A85C                            
0001A85C                            loc_16C64:
0001A85C 0C29 000C 0024             		cmpi.b	#$C,obRoutine(a1)
0001A862 6700                       		beq.s	loc_16C90
0001A864 0C11 0027                  		cmpi.b	#id_ExplosionItem,0(a1)
0001A868 6700                       		beq.s	loc_16C7C
0001A86A 0C29 000A 0024             		cmpi.b	#$A,obRoutine(a1)
0001A870 6600                       		bne.s	loc_16C82
0001A872                            
0001A872                            loc_16C7C:
0001A872 4229 0020                  		clr.b    $20(a1)
0001A876 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001A87C                            
0001A87C                            loc_16C82:
0001A87C 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001A882                            
0001A882                            ; ===========================================================================
0001A882 FE00 FE80 0180 0200        Cat_FragSpeed:	dc.w -$200, -$180, $180, $200
0001A88A                            ; ===========================================================================
0001A88A                            
0001A88A                            loc_16C90:
0001A88A 08E9 0007 0022             		bset	#7,obStatus(a1)
0001A890                            
0001A890                            loc_16C96:
0001A890 7000                       		moveq	#0,d0
0001A892 1028 0024                  		move.b	obRoutine(a0),d0
0001A896 303B 00E8                  		move.w	Cat_FragSpeed-2(pc,d0.w),d0
0001A89A 0828 0000 0022             		btst	#0,obStatus(a0)
0001A8A0 6700                       		beq.s	loc_16CAA
0001A8A2 4440                       		neg.w	d0
0001A8A4                            
0001A8A4                            loc_16CAA:
0001A8A4 3140 0010                  		move.w	d0,obVelX(a0)
0001A8A8 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0001A8AE 117C 000C 0024             		move.b	#$C,obRoutine(a0)
0001A8B4 0228 00F8 001A             		andi.b	#$F8,obFrame(a0)
0001A8BA                            
0001A8BA                            loc_16CC0:	; Routine $C
0001A8BA 4EB9 0000 F760             		jsr	(ObjectFall).l
0001A8C0 4A68 0012                  		tst.w	obVelY(a0)
0001A8C4 6B00                       		bmi.s	loc_16CE0
0001A8C6 4EB9 0001 8984             		jsr	(ObjFloorDist).l
0001A8CC 4A41                       		tst.w	d1
0001A8CE 6A00                       		bpl.s	loc_16CE0
0001A8D0 D368 000C                  		add.w	d1,obY(a0)
0001A8D4 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0001A8DA                            
0001A8DA                            loc_16CE0:
0001A8DA 4A28 0001                  		tst.b	obRender(a0)
0001A8DE 6A00 FD80                  		bpl.w	Cat_ChkGone
0001A8E2 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001A8E2 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001A8E8                            		include	"_anim\Caterkiller.asm"
0001A8E8                            ; ---------------------------------------------------------------------------
0001A8E8                            ; Animation script - Caterkiller enemy (uses non-standard format)
0001A8E8                            ; ---------------------------------------------------------------------------
0001A8E8 0000 0000 0000 0000 0000+  Ani_Cat:	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
0001A8F8 0101 0101 0101 0202 0202+  		dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
0001A908 0404 0404 0404 0505 0505+  		dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
0001A918 0606 0707 0707 0707 0707+  		dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
0001A928 0707 0707 0707 0707 0707+  		dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
0001A938 0606 0606 0606 0505 0505+  		dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
0001A948 0403 0303 0303 0202 0202+  		dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
0001A958 0101 0000 0000 0000 0000+  		dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
0001A968                            		even
0001A968                            		even
0001A968                            Map_Cat:	include	"_maps\Caterkiller.asm"
0001A968                            ; ---------------------------------------------------------------------------
0001A968                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001A968                            ; ---------------------------------------------------------------------------
0001A968                            Map_Cat_internal:
0001A968 0000                       		dc.w byte_16D9E-Map_Cat_internal
0001A96A 0000                       		dc.w byte_16DA4-Map_Cat_internal
0001A96C 0000                       		dc.w byte_16DAA-Map_Cat_internal
0001A96E 0000                       		dc.w byte_16DB0-Map_Cat_internal
0001A970 0000                       		dc.w byte_16DB6-Map_Cat_internal
0001A972 0000                       		dc.w byte_16DBC-Map_Cat_internal
0001A974 0000                       		dc.w byte_16DC2-Map_Cat_internal
0001A976 0000                       		dc.w byte_16DC8-Map_Cat_internal
0001A978 0000                       		dc.w byte_16DCE-Map_Cat_internal
0001A97A 0000                       		dc.w byte_16DD4-Map_Cat_internal
0001A97C 0000                       		dc.w byte_16DDA-Map_Cat_internal
0001A97E 0000                       		dc.w byte_16DE0-Map_Cat_internal
0001A980 0000                       		dc.w byte_16DE6-Map_Cat_internal
0001A982 0000                       		dc.w byte_16DEC-Map_Cat_internal
0001A984 0000                       		dc.w byte_16DF2-Map_Cat_internal
0001A986 0000                       		dc.w byte_16DF8-Map_Cat_internal
0001A988 0000                       		dc.w byte_16DFE-Map_Cat_internal
0001A98A 0000                       		dc.w byte_16E04-Map_Cat_internal
0001A98C 0000                       		dc.w byte_16E0A-Map_Cat_internal
0001A98E 0000                       		dc.w byte_16E10-Map_Cat_internal
0001A990 0000                       		dc.w byte_16E16-Map_Cat_internal
0001A992 0000                       		dc.w byte_16E1C-Map_Cat_internal
0001A994 0000                       		dc.w byte_16E22-Map_Cat_internal
0001A996 0000                       		dc.w byte_16E28-Map_Cat_internal
0001A998 01                         byte_16D9E:	dc.b 1
0001A999 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
0001A99E 01                         byte_16DA4:	dc.b 1
0001A99F F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
0001A9A4 01                         byte_16DAA:	dc.b 1
0001A9A5 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
0001A9AA 01                         byte_16DB0:	dc.b 1
0001A9AB EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
0001A9B0 01                         byte_16DB6:	dc.b 1
0001A9B1 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
0001A9B6 01                         byte_16DBC:	dc.b 1
0001A9B7 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
0001A9BC 01                         byte_16DC2:	dc.b 1
0001A9BD EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
0001A9C2 01                         byte_16DC8:	dc.b 1
0001A9C3 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
0001A9C8 01                         byte_16DCE:	dc.b 1
0001A9C9 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001A9CE 01                         byte_16DD4:	dc.b 1
0001A9CF F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
0001A9D4 01                         byte_16DDA:	dc.b 1
0001A9D5 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
0001A9DA 01                         byte_16DE0:	dc.b 1
0001A9DB F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
0001A9E0 01                         byte_16DE6:	dc.b 1
0001A9E1 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
0001A9E6 01                         byte_16DEC:	dc.b 1
0001A9E7 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
0001A9EC 01                         byte_16DF2:	dc.b 1
0001A9ED F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
0001A9F2 01                         byte_16DF8:	dc.b 1
0001A9F3 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
0001A9F8 01                         byte_16DFE:	dc.b 1
0001A9F9 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
0001A9FE 01                         byte_16E04:	dc.b 1
0001A9FF F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
0001AA04 01                         byte_16E0A:	dc.b 1
0001AA05 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
0001AA0A 01                         byte_16E10:	dc.b 1
0001AA0B EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
0001AA10 01                         byte_16E16:	dc.b 1
0001AA11 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
0001AA16 01                         byte_16E1C:	dc.b 1
0001AA17 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
0001AA1C 01                         byte_16E22:	dc.b 1
0001AA1D EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
0001AA22 01                         byte_16E28:	dc.b 1
0001AA23 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
0001AA28                            		even
0001AA28                            		even
0001AA28                            
0001AA28                            		include	"_incObj\79 Lamppost.asm"
0001AA28                            ; ---------------------------------------------------------------------------
0001AA28                            ; Object 79 - lamppost
0001AA28                            ; ---------------------------------------------------------------------------
0001AA28                            
0001AA28                            Lamppost:
0001AA28 7000                       		moveq	#0,d0
0001AA2A 1028 0024                  		move.b	obRoutine(a0),d0
0001AA2E 323B 0000                  		move.w	Lamp_Index(pc,d0.w),d1
0001AA32 4EBB 1000                  		jsr	Lamp_Index(pc,d1.w)
0001AA36 4EF9 0001 1860             		jmp	(RememberState).l
0001AA3C                            ; ===========================================================================
0001AA3C 0000                       Lamp_Index:	dc.w Lamp_Main-Lamp_Index
0001AA3E 0000                       		dc.w Lamp_Blue-Lamp_Index
0001AA40 0000                       		dc.w Lamp_Finish-Lamp_Index
0001AA42 0000                       		dc.w Lamp_Twirl-Lamp_Index
0001AA44                            
0001AA44 =00000030                  lamp_origX:	equ $30		; original x-axis position
0001AA44 =00000032                  lamp_origY:	equ $32		; original y-axis position
0001AA44 =00000036                  lamp_time:	equ $36		; length of time to twirl the lamp
0001AA44                            ; ===========================================================================
0001AA44                            
0001AA44                            Lamp_Main:	; Routine 0
0001AA44 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AA48 217C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a0)
0001AA50 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
0001AA56 117C 0004 0001             		move.b	#4,obRender(a0)
0001AA5C 117C 0008 0014             		move.b	#8,obActWid(a0)
0001AA62 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001AA68 45F8 FC00                  		lea	(v_objstate).w,a2
0001AA6C 7000                       		moveq	#0,d0
0001AA6E 1028 0023                  		move.b	obRespawnNo(a0),d0
0001AA72 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001AA78 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001AA7E 6600                       		bne.s	@red
0001AA80 1238 FE30                  		move.b	(v_lastlamp).w,d1
0001AA84 0201 007F                  		andi.b	#$7F,d1
0001AA88 1428 0028                  		move.b	obSubtype(a0),d2 ; get lamppost number
0001AA8C 0202 007F                  		andi.b	#$7F,d2
0001AA90 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
0001AA92 6500                       		bcs.s	Lamp_Blue	; if yes, branch
0001AA94                            
0001AA94                            @red:
0001AA94 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001AA9A 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
0001AAA0 117C 0003 001A             		move.b	#3,obFrame(a0)
0001AAA6 4E75                       		rts	
0001AAA8                            
0001AAA8                            ; ===========================================================================
0001AAA8                            
0001AAA8                            Lamp_Blue:	; Routine 2
0001AAA8 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001AAAC 6600 0000                  		bne.w	@donothing	; if yes, branch
0001AAB0 4A38 F7C8                  		tst.b	(f_lockmulti).w
0001AAB4 6B00 0000                  		bmi.w	@donothing
0001AAB8 1238 FE30                  		move.b	(v_lastlamp).w,d1
0001AABC 0201 007F                  		andi.b	#$7F,d1
0001AAC0 1428 0028                  		move.b	obSubtype(a0),d2
0001AAC4 0202 007F                  		andi.b	#$7F,d2
0001AAC8 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
0001AACA 6500                       		bcs.s	@chkhit		; if yes, branch
0001AACC 45F8 FC00                  		lea	(v_objstate).w,a2
0001AAD0 7000                       		moveq	#0,d0
0001AAD2 1028 0023                  		move.b	obRespawnNo(a0),d0
0001AAD6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001AADC 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001AAE2 117C 0003 001A             		move.b	#3,obFrame(a0)
0001AAE8 6000 0000                  		bra.w	@donothing
0001AAEC                            ; ===========================================================================
0001AAEC                            
0001AAEC                            @chkhit:
0001AAEC 3038 D008                  		move.w	(v_player+obX).w,d0
0001AAF0 9068 0008                  		sub.w	obX(a0),d0
0001AAF4 5040                       		addq.w	#8,d0
0001AAF6 0C40 0010                  		cmpi.w	#$10,d0
0001AAFA 6400 0000                  		bcc.w	@donothing
0001AAFE 3038 D00C                  		move.w	(v_player+obY).w,d0
0001AB02 9068 000C                  		sub.w	obY(a0),d0
0001AB06 0640 0040                  		addi.w	#$40,d0
0001AB0A 0C40 0068                  		cmpi.w	#$68,d0
0001AB0E 6400                       		bcc.s	@donothing
0001AB10                            
0001AB1A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AB1E 4EB9 0000 FD46             		jsr	(FindFreeObj).l
0001AB24 6600                       		bne.s	@fail
0001AB26 12BC 0079                  		move.b	#id_Lamppost,0(a1)	; load twirling	lamp object
0001AB2A 137C 0006 0024             		move.b	#6,obRoutine(a1) ; goto Lamp_Twirl next
0001AB30 3368 0008 0030             		move.w	obX(a0),lamp_origX(a1)
0001AB36 3368 000C 0032             		move.w	obY(a0),lamp_origY(a1)
0001AB3C 0469 0018 0032             		subi.w	#$18,lamp_origY(a1)
0001AB42 237C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a1)
0001AB4A 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
0001AB50 137C 0004 0001             		move.b	#4,obRender(a1)
0001AB56 137C 0008 0014             		move.b	#8,obActWid(a1)
0001AB5C 337C 0200 0018             		move.w	#$200,obPriority(a1)
0001AB62 137C 0002 001A             		move.b	#2,obFrame(a1)	; use "ball only" frame
0001AB68 337C 0020 0036             		move.w	#$20,lamp_time(a1)
0001AB6E                            
0001AB6E                            	@fail:
0001AB6E 117C 0001 001A             		move.b	#1,obFrame(a0)	; use "post only" frame
0001AB74 6100 0000                  		bsr.w	Lamp_StoreInfo
0001AB78 45F8 FC00                  		lea	(v_objstate).w,a2
0001AB7C 7000                       		moveq	#0,d0
0001AB7E 1028 0023                  		move.b	obRespawnNo(a0),d0
0001AB82 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001AB88                            
0001AB88                            	@donothing:
0001AB88 4E75                       		rts	
0001AB8A                            ; ===========================================================================
0001AB8A                            
0001AB8A                            Lamp_Finish:	; Routine 4	
0001AB8A 4E75                       		rts	
0001AB8C                            ; ===========================================================================
0001AB8C                            
0001AB8C                            Lamp_Twirl:	; Routine 6
0001AB8C 5368 0036                  		subq.w	#1,lamp_time(a0) ; decrement timer
0001AB90 6A00                       		bpl.s	@continue	; if time remains, keep twirling
0001AB92 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
0001AB98                            
0001AB98                            	@continue:
0001AB98 1028 0026                  		move.b	obAngle(a0),d0
0001AB9C 0428 0010 0026             		subi.b	#$10,obAngle(a0)
0001ABA2 0400 0040                  		subi.b	#$40,d0
0001ABA6 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001ABAC C3FC 0C00                  		muls.w	#$C00,d1
0001ABB0 4841                       		swap	d1
0001ABB2 D268 0030                  		add.w	lamp_origX(a0),d1
0001ABB6 3141 0008                  		move.w	d1,obX(a0)
0001ABBA C1FC 0C00                  		muls.w	#$C00,d0
0001ABBE 4840                       		swap	d0
0001ABC0 D068 0032                  		add.w	lamp_origY(a0),d0
0001ABC4 3140 000C                  		move.w	d0,obY(a0)
0001ABC8 4E75                       		rts	
0001ABCA                            ; ===========================================================================
0001ABCA                            ; ---------------------------------------------------------------------------
0001ABCA                            ; Subroutine to	store information when you hit a lamppost
0001ABCA                            ; ---------------------------------------------------------------------------
0001ABCA                            
0001ABCA                            Lamp_StoreInfo:
0001ABCA 11E8 0028 FE30             		move.b	obSubtype(a0),(v_lastlamp).w 	; lamppost number
0001ABD0 11F8 FE30 FE31             		move.b	(v_lastlamp).w,($FFFFFE31).w
0001ABD6 31E8 0008 FE32             		move.w	obX(a0),($FFFFFE32).w		; x-position
0001ABDC 31E8 000C FE34             		move.w	obY(a0),($FFFFFE34).w		; y-position
0001ABE2 31F8 FE20 FE36             		move.w	(v_rings).w,($FFFFFE36).w 	; rings
0001ABE8 11F8 FE1B FE54             		move.b	(v_lifecount).w,($FFFFFE54).w 	; lives
0001ABEE 21F8 FE22 FE38             		move.l	(v_time).w,($FFFFFE38).w 	; time
0001ABF4 11F8 F742 FE3C             		move.b	(v_dle_routine).w,($FFFFFE3C).w ; routine counter for dynamic level mod
0001ABFA 31F8 F72E FE3E             		move.w	(v_limitbtm2).w,($FFFFFE3E).w 	; lower y-boundary of level
0001AC00 31F8 F700 FE40             		move.w	(v_screenposx).w,($FFFFFE40).w 	; screen x-position
0001AC06 31F8 F704 FE42             		move.w	(v_screenposy).w,($FFFFFE42).w 	; screen y-position
0001AC0C 31F8 F708 FE44             		move.w	(v_bgscreenposx).w,($FFFFFE44).w ; bg position
0001AC12 31F8 F70C FE46             		move.w	(v_bgscreenposy).w,($FFFFFE46).w 	; bg position
0001AC18 31F8 F710 FE48             		move.w	(v_bg2screenposx).w,($FFFFFE48).w 	; bg position
0001AC1E 31F8 F714 FE4A             		move.w	(v_bg2screenposy).w,($FFFFFE4A).w 	; bg position
0001AC24 31F8 F718 FE4C             		move.w	(v_bg3screenposx).w,($FFFFFE4C).w 	; bg position
0001AC2A 31F8 F71C FE4E             		move.w	(v_bg3screenposy).w,($FFFFFE4E).w 	; bg position
0001AC30 31F8 F648 FE50             		move.w	(v_waterpos2).w,($FFFFFE50).w 	; water height
0001AC36 11F8 F64D FE52             		move.b	(v_wtr_routine).w,($FFFFFE52).w ; rountine counter for water
0001AC3C 11F8 F64E FE53             		move.b	(f_wtr_state).w,($FFFFFE53).w 	; water direction
0001AC42 11F8 F5C3 FE54             		move.b	(f_emeraldm).w,($FFFFFE54).w 	; emerald monitor
0001AC48 4E75                       		rts	
0001AC4A                            
0001AC4A                            ; ---------------------------------------------------------------------------
0001AC4A                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001AC4A                            ; ---------------------------------------------------------------------------
0001AC4A                            
0001AC4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AC4A                            
0001AC4A                            
0001AC4A                            Lamp_LoadInfo:
0001AC4A 11F8 FE31 FE30             		move.b	($FFFFFE31).w,(v_lastlamp).w
0001AC50 31F8 FE32 D008             		move.w	($FFFFFE32).w,(v_player+obX).w
0001AC56 31F8 FE34 D00C             		move.w	($FFFFFE34).w,(v_player+obY).w
0001AC5C 31F8 FE36 FE20             		move.w	($FFFFFE36).w,(v_rings).w
0001AC62 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,(v_lifecount).w
0001AC68 4278 FE20                  		clr.w	(v_rings).w
0001AC6C 4238 FE1B                  		clr.b	(v_lifecount).w
0001AC70 21F8 FE38 FE22             		move.l	($FFFFFE38).w,(v_time).w
0001AC76 11FC 003B FE25             		move.b	#59,(v_timecent).w
0001AC7C 5338 FE24                  		subq.b	#1,(v_timesec).w
0001AC80 11F8 FE3C F742             		move.b	($FFFFFE3C).w,(v_dle_routine).w
0001AC86 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001AC8C 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,(v_limitbtm2).w
0001AC92 31F8 FE3E F726             		move.w	($FFFFFE3E).w,(v_limitbtm1).w
0001AC98 31F8 FE40 F700             		move.w	($FFFFFE40).w,(v_screenposx).w
0001AC9E 31F8 FE42 F704             		move.w	($FFFFFE42).w,(v_screenposy).w
0001ACA4 31F8 FE44 F708             		move.w	($FFFFFE44).w,(v_bgscreenposx).w
0001ACAA 31F8 FE46 F70C             		move.w	($FFFFFE46).w,(v_bgscreenposy).w
0001ACB0 31F8 FE48 F710             		move.w	($FFFFFE48).w,(v_bg2screenposx).w
0001ACB6 31F8 FE4A F714             		move.w	($FFFFFE4A).w,(v_bg2screenposy).w
0001ACBC 31F8 FE4C F718             		move.w	($FFFFFE4C).w,(v_bg3screenposx).w
0001ACC2 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,(v_bg3screenposy).w
0001ACC8 11F8 FE54 F5C3             		move.b	($FFFFFE54).w,(f_emeraldm).w	;emerald monitor count
0001ACCE 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w	; is this Labyrinth Zone?
0001ACD4 6600                       		bne.s	@notlabyrinth	; if not, branch
0001ACD6                            
0001ACD6 31F8 FE50 F648             		move.w	($FFFFFE50).w,(v_waterpos2).w
0001ACDC 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001ACE2 11F8 FE53 F64E             		move.b	($FFFFFE53).w,(f_wtr_state).w
0001ACE8                            
0001ACE8                            	@notlabyrinth:
0001ACE8 4A38 FE30                  		tst.b	(v_lastlamp).w
0001ACEC 6A00                       		bpl.s	locret_170F6
0001ACEE 3038 FE32                  		move.w	($FFFFFE32).w,d0
0001ACF2 0440 00A0                  		subi.w	#$A0,d0
0001ACF6 31C0 F728                  		move.w	d0,(v_limitleft2).w
0001ACFA                            
0001ACFA                            locret_170F6:
0001ACFA 4E75                       		rts	
0001ACFA 4E75                       		rts	
0001ACFC                            Map_Lamp:	include	"_maps\Lamppost.asm"
0001ACFC                            ; --------------------------------------------------------------------------------
0001ACFC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001ACFC                            ; --------------------------------------------------------------------------------
0001ACFC                            
0001ACFC                            SME_JfaKr:	
0001ACFC 0000 0000                  		dc.w SME_JfaKr_A-SME_JfaKr, SME_JfaKr_3D-SME_JfaKr	
0001AD00 0000 0000                  		dc.w SME_JfaKr_66-SME_JfaKr, SME_JfaKr_71-SME_JfaKr	
0001AD04 0000                       		dc.w SME_JfaKr_A4-SME_JfaKr	
0001AD06 0A                         SME_JfaKr_A:	dc.b $A	
0001AD07 E401 0000 F8               		dc.b $E4, 1, 0, 0, $F8	
0001AD0C E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001AD11 D401 0006 F8               		dc.b $D4, 1, 0, 6, $F8	
0001AD16 D401 0806 00               		dc.b $D4, 1, 8, 6, 0	
0001AD1B F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001AD20 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001AD25 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001AD2A 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001AD2F 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001AD34 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001AD39 08                         SME_JfaKr_3D:	dc.b 8	
0001AD3A E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001AD3F E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001AD44 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001AD49 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001AD4E 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001AD53 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001AD58 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001AD5D 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001AD62 02                         SME_JfaKr_66:	dc.b 2	
0001AD63 F801 0008 F8               		dc.b $F8, 1, 0, 8, $F8	
0001AD68 F801 0808 00               		dc.b $F8, 1, 8, 8, 0	
0001AD6D 0A                         SME_JfaKr_71:	dc.b $A	
0001AD6E E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001AD73 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001AD78 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001AD7D F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001AD82 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001AD87 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001AD8C 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001AD91 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001AD96 D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001AD9B D401 0808 00               		dc.b $D4, 1, 8, 8, 0	
0001ADA0 0A                         SME_JfaKr_A4:	dc.b $A	
0001ADA1 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001ADA6 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001ADAB F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001ADB0 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001ADB5 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001ADBA 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001ADBF 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001ADC4 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001ADC9 D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001ADCE D401 2808 00               		dc.b $D4, 1, $28, 8, 0	
0001ADD4 00                         		even
0001ADD4 00                         		even
0001ADD4                            		include	"_incObj\7D Hidden Bonuses.asm"
0001ADD4                            ; ---------------------------------------------------------------------------
0001ADD4                            ; Object 7D - hidden points at the end of a level
0001ADD4                            ; ---------------------------------------------------------------------------
0001ADD4                            
0001ADD4                            HiddenBonus:
0001ADD4 7000                       		moveq	#0,d0
0001ADD6 1028 0024                  		move.b	obRoutine(a0),d0
0001ADDA 323B 0000                  		move.w	Bonus_Index(pc,d0.w),d1
0001ADDE 4EFB 1000                  		jmp	Bonus_Index(pc,d1.w)
0001ADE2                            ; ===========================================================================
0001ADE2 0000                       Bonus_Index:	dc.w Bonus_Main-Bonus_Index
0001ADE4 0000                       		dc.w Bonus_Display-Bonus_Index
0001ADE6                            
0001ADE6 =00000030                  bonus_timelen:	equ $30		; length of time to display bonus sprites
0001ADE6                            ; ===========================================================================
0001ADE6                            
0001ADE6                            Bonus_Main:	; Routine 0
0001ADE6 7410                       		moveq	#$10,d2
0001ADE8 3602                       		move.w	d2,d3
0001ADEA D643                       		add.w	d3,d3
0001ADEC 43F8 D000                  		lea	(v_player).w,a1
0001ADF0 3029 0008                  		move.w	obX(a1),d0
0001ADF4 9068 0008                  		sub.w	obX(a0),d0
0001ADF8 D042                       		add.w	d2,d0
0001ADFA B043                       		cmp.w	d3,d0
0001ADFC 6400                       		bcc.s	bonu_chkdel
0001ADFE 3229 000C                  		move.w	obY(a1),d1
0001AE02 9268 000C                  		sub.w	obY(a0),d1
0001AE06 D242                       		add.w	d2,d1
0001AE08 B243                       		cmp.w	d3,d1
0001AE0A 6400                       		bcc.s	bonu_chkdel
0001AE0C 4A78 FE08                  		tst.w	(v_debuguse).w
0001AE10 6600                       		bne.s	bonu_chkdel
0001AE12 4A38 F7CD                  		tst.b	(f_bigring).w
0001AE16 6600                       		bne.s	bonu_chkdel
0001AE18 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AE1C 217C 0000 0000 0004        		move.l	#Map_Bonus,obMap(a0)
0001AE24 317C 84B6 0002             		move.w	#$84B6,obGfx(a0)
0001AE2A 0028 0004 0001             		ori.b	#4,obRender(a0)
0001AE30 317C 0000 0018             		move.w	#0,obPriority(a0)
0001AE36 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001AE3C 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0001AE42 317C 0077 0030             		move.w	#119,bonus_timelen(a0) ; set display time to 2 seconds
0001AE52 7000                       		moveq	#0,d0
0001AE54 1028 0028                  		move.b	obSubtype(a0),d0
0001AE58 D040                       		add.w	d0,d0
0001AE5A 303B 0000                  		move.w	obj7d_points(pc,d0.w),d0 ; load bonus points array
0001AE5E 4EB9 0000 0000             		jsr	(AddPoints).l
0001AE64                            
0001AE64                            bonu_chkdel:
0001AE80 4E75                       		rts	
0001AE82                            
0001AE82                            	@delete:
0001AE82 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001AE88                            
0001AE88                            ; ===========================================================================
0001AE88 0000                       obj7d_points:	dc.w 0			; Bonus	points array
0001AE8A 03E8                       		dc.w 1000
0001AE8C 0064                       		dc.w 100
0001AE8E 000A                       		dc.w 10
0001AE90                            ; ===========================================================================
0001AE90                            
0001AE90                            Bonus_Display:	; Routine 2
0001AE90 5368 0030                  		subq.w	#1,bonus_timelen(a0) ; decrement display time
0001AE94 6B00                       		bmi.s	Bonus_Display_Delete		; if time is zero, branch
0001AEB2 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001AEB8                            
0001AEB8                            Bonus_Display_Delete:	
0001AEB8 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001AEB8 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001AEBE                            Map_Bonus:	include	"_maps\Hidden Bonuses.asm"
0001AEBE                            ; ---------------------------------------------------------------------------
0001AEBE                            ; Sprite mappings - hidden points at the end of	a level
0001AEBE                            ; ---------------------------------------------------------------------------
0001AEBE                            Map_Bonus_internal:
0001AEBE 0000                       		dc.w @blank-Map_Bonus_internal
0001AEC0 0000                       		dc.w @10000-Map_Bonus_internal
0001AEC2 0000                       		dc.w @1000-Map_Bonus_internal
0001AEC4 0000                       		dc.w @100-Map_Bonus_internal
0001AEC6 00                         @blank:		dc.b 0
0001AEC7 01                         @10000:		dc.b 1
0001AEC8 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001AECD 01                         @1000:		dc.b 1
0001AECE F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001AED3 01                         @100:		dc.b 1
0001AED4 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001AEDA 00                         		even
0001AEDA 00                         		even
0001AEDA                            
0001AEDA                            		include	"_incObj\8A Credits.asm"
0001AEDA                            ; ---------------------------------------------------------------------------
0001AEDA                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001AEDA                            ; ---------------------------------------------------------------------------
0001AEDA                            
0001AEDA                            CreditsText:
0001AEDA 7000                       		moveq	#0,d0
0001AEDC 1028 0024                  		move.b	obRoutine(a0),d0
0001AEE0 323B 0000                  		move.w	Cred_Index(pc,d0.w),d1
0001AEE4 4EFB 1000                  		jmp	Cred_Index(pc,d1.w)
0001AEE8                            ; ===========================================================================
0001AEE8 0000                       Cred_Index:	dc.w Cred_Main-Cred_Index
0001AEEA 0000                       		dc.w Cred_Display-Cred_Index
0001AEEC                            ; ===========================================================================
0001AEEC                            
0001AEEC                            Cred_Main:	; Routine 0
0001AEEC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AEF0 317C 0120 0008             		move.w	#$120,obX(a0)
0001AEF6 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0001AEFC 217C 0000 0000 0004        		move.l	#Map_Cred,obMap(a0)
0001AF04 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0001AF0A 3038 FFF4                  		move.w	(v_creditsnum).w,d0 ; load credits index number
0001AF0E 1140 001A                  		move.b	d0,obFrame(a0)	; display appropriate sprite
0001AF12 117C 0000 0001             		move.b	#0,obRender(a0)
0001AF18 317C 0000 0018             		move.w	#0,obPriority(a0)
0001AF1E                            
0001AF1E 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w ; is the mode #4 (title screen)?
0001AF24 6600                       		bne.s	Cred_Display	; if not, branch
0001AF26                            
0001AF26 317C 00A6 0002             		move.w	#$A6,obGfx(a0)
0001AF2C 117C 000A 001A             		move.b	#$A,obFrame(a0)	; display "SONIC TEAM PRESENTS"
0001AF32 4A38 FFE3                  		tst.b	(f_creditscheat).w ; is hidden credits cheat on?
0001AF36 6700                       		beq.s	Cred_Display	; if not, branch
0001AF38 0C38 0072 F604             		cmpi.b	#btnABC+btnDn,(v_jpadhold1).w ; is A+B+C+Down being pressed? ($72)
0001AF3E 6600                       		bne.s	Cred_Display	; if not, branch
0001AF40 31FC 0EEE FBC0             		move.w	#cWhite,(v_pal_dry_dup+$40).w ; 3rd palette, 1st entry = white
0001AF46 31FC 0880 FBC2             		move.w	#$880,(v_pal_dry_dup+$42).w ; 3rd palette, 2nd entry = cyan
0001AF4C 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001AF52                            ; ===========================================================================
0001AF52                            
0001AF52                            Cred_Display:	; Routine 2
0001AF52 4EF9 0000 F7AC             		jmp	DisplaySprite
0001AF52 4EF9 0000 F7AC             		jmp	DisplaySprite
0001AF58                            Map_Cred:	include	"_maps\Credits.asm"
0001AF58                            ; ---------------------------------------------------------------------------
0001AF58                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001AF58                            ; ---------------------------------------------------------------------------
0001AF58                            Map_Cred_internal:
0001AF58 0000                       		dc.w @staff-Map_Cred_internal
0001AF5A 0000                       		dc.w @gameplan-Map_Cred_internal
0001AF5C 0000                       		dc.w @program-Map_Cred_internal
0001AF5E 0000                       		dc.w @character-Map_Cred_internal
0001AF60 0000                       		dc.w @design-Map_Cred_internal
0001AF62 0000                       		dc.w @soundproduce-Map_Cred_internal
0001AF64 0000                       		dc.w @soundprogram-Map_Cred_internal
0001AF66 0000                       		dc.w @thanks-Map_Cred_internal
0001AF68 0000                       		dc.w @presentedby-Map_Cred_internal
0001AF6A 0000                       		dc.w @tryagain-Map_Cred_internal
0001AF6C 0000                       		dc.w @sonicteam-Map_Cred_internal
0001AF6E 0E                         @staff:		dc.b $E			 ; SONIC TEAM STAFF
0001AF6F F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
0001AF74 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001AF79 F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
0001AF7E F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
0001AF83 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001AF88 F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001AF8D F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
0001AF92 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001AF97 F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001AF9C F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
0001AFA1 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001AFA6 F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001AFAB F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
0001AFB0 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0001AFB5 0E                         @gameplan:	dc.b $E	;  GAME PLAN CAROL YAS | GAME PLAN SORRA    
0001AFB6 9005 0000 90               		dc.b $90, 5, 0, 0, $90		; G
0001AFBB 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
0001AFC0 9009 0008 B0               		dc.b $90, 9, 0, 8, $B0		; M
0001AFC5 9005 000E C4               		dc.b $90, 5, 0, $0E, $C4	; E
0001AFCA 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001AFCF 9005 0012 E4               		dc.b $90, 5, 0, $12, $E4	; P
0001AFD4 9005 0016 F4               		dc.b $90, 5, 0, $16, $F4	; L
0001AFD9 9005 0004 04               		dc.b $90, 5, 0, 4, $4		; A
0001AFDE 9005 001A 14               		dc.b $90, 5, 0, $1A, $14	; N
0001AFE3                            
0001AFE3 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001AFE8 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001AFED B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001AFF2 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001AFF7 B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001AFFC 1B                         @program:	dc.b $1B	;  CHARACTER DESIGN BIGISLAND | PROGRAM ANGELKOR INVISIBLE SUN  
0001AFFD 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001B002 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001B007 9005 0026 B0               		dc.b $90, 5, 0, $26, $B0	; O
0001B00C 9005 0000 C0               		dc.b $90, 5, 0, 0, $C0		; G
0001B011 9005 0022 D0               		dc.b $90, 5, 0, $22, $D0	; R
0001B016 9005 0004 E0               		dc.b $90, 5, 0, 4, $E0		; A
0001B01B 9009 0008 F0               		dc.b $90, 9, 0, 8, $F0		; M
0001B020                            
0001B020 B805 0004 C0               		dc.b $B8, 5, 0, 4, $C0		; A
0001B025 B805 001A D0               		dc.b $B8, 5, 0, $1A, $D0	; N
0001B02A B805 0000 E0               		dc.b $B8, 5, 0, 0, $E0		; G
0001B02F B805 000E F0               		dc.b $B8, 5, 0, $0E, $F0	; E
0001B034 B805 0016 00               		dc.b $B8, 5, 0, $16, $0	; L
0001B039 B805 0058 10               		dc.b $B8, 5, 0, $58, $10	; K
0001B03E B805 0026 20               		dc.b $B8, 5, 0, $26, $20	; O
0001B043 B805 0022 30               		dc.b $B8, 5, 0, $22, $30	; R
0001B048                            
0001B048 D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	; I
0001B04D D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	; N
0001B052                            
0001B052 D801 0046 E8               		dc.b $D8, 1, 0, $46, $E8	; I
0001B057 D805 002E F0               		dc.b $D8, 5, 0, $2E, $F0	; S
0001B05C D801 0046 00               		dc.b $D8, 1, 0, $46, $0	; I
0001B061 D805 0048 08               		dc.b $D8, 5, 0, $48, $8	; B
0001B066 D805 0016 18               		dc.b $D8, 5, 0, $16, $18	; L
0001B06B D805 000E 28               		dc.b $D8, 5, 0, $0E, $28	; E
0001B070                            
0001B070 F805 002E C0               		dc.b $F8, 5, 0, $2E, $C0	; S
0001B075 F805 0032 D0               		dc.b $F8, 5, 0, $32, $D0	; U
0001B07A F805 001A E0               		dc.b $F8, 5, 0, $1A, $E0	; N
0001B07F 08                         @character:	dc.b $8	;  CHARACTER DESIGN BIGISLAND | ART SORRA    
0001B080 9005 0004 90               		dc.b $90, 5, 0, 4, $90		; A
0001B085 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001B08A 9005 003E B0               		dc.b $90, 5, 0, $3E, $B0	; T
0001B08F                            
0001B08F B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001B094 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001B099 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001B09E B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001B0A3 B805 0004 00               		dc.b $B8, 5, 0, 4, $0
0001B0A8 0B                         @design:	dc.b $B	;  DESIGN JINYA PHENIX RIE | DESIGN SORRA    
0001B0A9 9005 0042 90               		dc.b $90, 5, 0, $42, $90	; D
0001B0AE 9005 000E A0               		dc.b $90, 5, 0, $0E, $A0	; E
0001B0B3 9005 002E B0               		dc.b $90, 5, 0, $2E, $B0	; S
0001B0B8 9001 0046 C0               		dc.b $90, 1, 0, $46, $C0	; I
0001B0BD 9005 0000 C8               		dc.b $90, 5, 0, 0, $C8		; G
0001B0C2 9005 001A D8               		dc.b $90, 5, 0, $1A, $D8	; N
0001B0C7                            
0001B0C7 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001B0CC B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001B0D1 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001B0D6 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001B0DB B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001B0E0 1C                         @soundproduce:	dc.b $1C	;  SOUND PRODUCE MASATO NAKAMURA | SOUND PORT MR JOKER PRODUCTION   
0001B0E1 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001B0E6 9005 0026 A0               		dc.b $90, 5, 0, $26, $A0	; O
0001B0EB 9005 0032 B0               		dc.b $90, 5, 0, $32, $B0	; U
0001B0F0 9005 001A C0               		dc.b $90, 5, 0, $1A, $C0	; N
0001B0F5 9005 0042 D0               		dc.b $90, 5, 0, $42, $D0	; D
0001B0FA 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001B0FF 9005 0012 F0               		dc.b $90, 5, 0, $12, $F0	; P
0001B104 9005 0026 00               		dc.b $90, 5, 0, $26, $0	; O
0001B109 9005 0022 10               		dc.b $90, 5, 0, $22, $10	; R
0001B10E 9005 003E 20               		dc.b $90, 5, 0, $3E, $20	; T
0001B113                            
0001B113 B809 0008 C0               		dc.b $B8, 9, 0, 8, $C0		; M
0001B118 B805 0022 D4               		dc.b $B8, 5, 0, $22, $D4	; R
0001B11D B800 0060 0C               		dc.b $B8, 0, 0, $60, $C    ;Space
0001B122 B805 004C F4               		dc.b $B8, 5, 0, $4C, $F4	; J
0001B127 B805 0026 04               		dc.b $B8, 5, 0, $26, $4	; O
0001B12C B805 0058 14               		dc.b $B8, 5, 0, $58, $14	; K
0001B131 B805 000E 24               		dc.b $B8, 5, 0, $0E, $24	; E
0001B136 B805 0022 34               		dc.b $B8, 5, 0, $22, $34	; R
0001B13B                            
0001B13B D805 0012 C0               		dc.b $D8, 5, 0, $12, $C0	; P
0001B140 D805 0022 D0               		dc.b $D8, 5, 0, $22, $D0	; R
0001B145 D805 0026 E0               		dc.b $D8, 5, 0, $26, $E0	; O
0001B14A D805 0042 F0               		dc.b $D8, 5, 0, $42, $F0	; D
0001B14F D805 0032 00               		dc.b $D8, 5, 0, $32, $0	; U
0001B154 D805 001E 10               		dc.b $D8, 5, 0, $1E, $10	; C
0001B159 D805 003E 20               		dc.b $D8, 5, 0, $3E, $20	; T
0001B15E D801 0046 30               		dc.b $D8, 1, 0, $46, $30	; I
0001B163 D805 0026 38               		dc.b $D8, 5, 0, $26, $38	; O
0001B168 D805 001A 48               		dc.b $D8, 5, 0, $1A, $48	; N
0001B16D 17                         @soundprogram:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001B16E D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
0001B173 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0001B178 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001B17D D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
0001B182 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0001B187 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001B18C D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
0001B191 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
0001B196 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001B19B D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
0001B1A0 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
0001B1A5 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001B1AA 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
0001B1AF 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001B1B4 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001B1B9 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
0001B1BE 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
0001B1C3 0005 0004 14               		dc.b 0,	5, 0, 4, $14
0001B1C8 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
0001B1CD 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
0001B1D2 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
0001B1D7 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
0001B1DC 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
0001B1E1 11                         @thanks:	dc.b $11	;  SPECIAL THANKS FUJIO MINEGISHI PAPA | SPECIAL  THANKS YOU   
0001B1E2 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001B1E7 9005 0012 A0               		dc.b $90, 5, 0, $12, $A0	; P
0001B1EC 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001B1F1 9005 001E C0               		dc.b $90, 5, 0, $1E, $C0	; C
0001B1F6 9001 0046 D0               		dc.b $90, 1, 0, $46, $D0	; I
0001B1FB 9005 0004 D8               		dc.b $90, 5, 0, 4, $D8		; A
0001B200 9005 0016 E8               		dc.b $90, 5, 0, $16, $E8	; L
0001B205 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001B20A                            
0001B20A B805 003E C0               		dc.b $B8, 5, 0, $3E, $C0	; T
0001B20F B805 003A D0               		dc.b $B8, 5, 0, $3A, $D0	; H
0001B214 B805 0004 E0               		dc.b $B8, 5, 0, 4, $E0		; A
0001B219 B805 001A F0               		dc.b $B8, 5, 0, $1A, $F0	; N
0001B21E B805 0058 00               		dc.b $B8, 5, 0, $58, $0	; K
0001B223 B805 002E 10               		dc.b $B8, 5, 0, $2E, $10	; S
0001B228                            
0001B228 D805 002A C0               		dc.b $D8, 5, 0, $2A, $C0	; Y
0001B22D D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001B232 D805 0032 E0               		dc.b $D8, 5, 0, $32, $E0	; U
0001B237 10                         @presentedby:	dc.b $10	;  PRESENTED BY SEGA | PRESENTED BY SORRA   
0001B238 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001B23D 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001B242 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001B247 9005 002E C0               		dc.b $90, 5, 0, $2E, $C0	; S
0001B24C 9005 000E D0               		dc.b $90, 5, 0, $0E, $D0	; E
0001B251 9005 001A E0               		dc.b $90, 5, 0, $1A, $E0	; N
0001B256 9005 003E F0               		dc.b $90, 5, 0, $3E, $F0	; T
0001B25B 9005 000E 00               		dc.b $90, 5, 0, $0E, $0	; E
0001B260 9005 0042 10               		dc.b $90, 5, 0, $42, $10	; D
0001B265                            
0001B265 B805 0048 C0               		dc.b $B8, 5, 0, $48, $C0	; B
0001B26A B805 002A D0               		dc.b $B8, 5, 0, $2A, $D0	; Y
0001B26F                            
0001B26F D805 002E C0               		dc.b $D8, 5, 0, $2E, $C0	; S
0001B274 D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001B279 D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
0001B27E D805 0022 F0               		dc.b $D8, 5, 0, $22, $F0	; R
0001B283 D805 0004 00               		dc.b $D8, 5, 0, 4, $0		; A
0001B288 08                         @tryagain:	dc.b 8			 ; TRY AGAIN
0001B289 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
0001B28E 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
0001B293 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001B298 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0001B29D 3005 0000 08               		dc.b $30, 5, 0,	0, 8
0001B2A2 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001B2A7 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
0001B2AC 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
0001B2B1 0E                         @sonicteam:	dc.b $E	;  SONIC TEAM PRESENTS | SORRA PRESENTS
0001B2B2 E805 002E D0               		dc.b $E8, 5, 0, $2E, $D0	; S
0001B2B7 E805 0026 E0               		dc.b $E8, 5, 0, $26, $E0	; O
0001B2BC E805 0022 F0               		dc.b $E8, 5, 0, $22, $F0	; R
0001B2C1 E805 0022 00               		dc.b $E8, 5, 0, $22, $0	; R
0001B2C6 E805 0004 10               		dc.b $E8, 5, 0, 4, $10		; A
0001B2CB E800 0060 0C               		dc.b $E8, 0, 0, $60, $C   	 ; Space
0001B2D0                            
0001B2D0 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0	; P
0001B2D5 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0	; R
0001B2DA 0005 000E E0               		dc.b 0,	5, 0, $E, $E0	; E
0001B2DF 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0	; S
0001B2E4 0005 000E 00               		dc.b 0,	5, 0, $E, 0	; E
0001B2E9 0005 001A 10               		dc.b 0,	5, 0, $1A, $10	; N
0001B2EE 0005 003E 20               		dc.b 0,	5, 0, $3E, $20	; T
0001B2F3 0005 002E 30               		dc.b 0,	5, 0, $2E, $30	; S
0001B2F8                            		even
0001B2F8                            		even
0001B2F8                            
0001B2F8                            		include	"_incObj\3D Boss - Green Hill (part 1).asm"
0001B2F8                            ; ---------------------------------------------------------------------------
0001B2F8                            ; Object 3D - Eggman (GHZ)
0001B2F8                            ; ---------------------------------------------------------------------------
0001B2F8                            
0001B2F8                            BossGreenHill:
0001B2F8 7000                       		moveq	#0,d0
0001B2FA 1028 0024                  		move.b	obRoutine(a0),d0
0001B2FE 323B 0000                  		move.w	BGHZ_Index(pc,d0.w),d1
0001B302 4EFB 1000                  		jmp	BGHZ_Index(pc,d1.w)
0001B306                            ; ===========================================================================
0001B306 0000                       BGHZ_Index:	dc.w BGHZ_Main-BGHZ_Index
0001B308 0000                       		dc.w BGHZ_ShipMain-BGHZ_Index
0001B30A 0000                       		dc.w BGHZ_FaceMain-BGHZ_Index
0001B30C 0000                       		dc.w BGHZ_FlameMain-BGHZ_Index
0001B30E                            
0001B30E 0200                       BGHZ_ObjData:	dc.b 2,	0		; routine counter, animation
0001B310 0401                       		dc.b 4,	1
0001B312 0607                       		dc.b 6,	7
0001B314                            ; ===========================================================================
0001B314                            
0001B314                            BGHZ_Main:	; Routine 0
0001B314 45F9 0001 B30E             		lea	(BGHZ_ObjData).l,a2
0001B31A 2248                       		movea.l	a0,a1
0001B31C 7202                       		moveq	#2,d1
0001B31E 6000                       		bra.s	BGHZ_LoadBoss
0001B320                            ; ===========================================================================
0001B320                            
0001B320                            BGHZ_Loop:
0001B320 4EB9 0000 FD5C             		jsr	(FindNextFreeObj).l
0001B326 6600                       		bne.s	loc_17772
0001B328                            
0001B328                            BGHZ_LoadBoss:
0001B328 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B32C 12BC 003D                  		move.b	#id_BossGreenHill,0(a1)
0001B330 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B336 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B33C 237C 0000 0000 0004        		move.l	#Map_Eggman,obMap(a1)
0001B344 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B34A 137C 0004 0001             		move.b	#4,obRender(a1)
0001B350 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B356 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001B35C 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B360 2348 0034                  		move.l	a0,$34(a1)
0001B364 51C9 FFBA                  		dbf	d1,BGHZ_Loop	; repeat sequence 2 more times
0001B368                            
0001B368                            loc_17772:
0001B368 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B36E 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B374 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B37A 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B380                            
0001B380                            
0001B380                            BGHZ_ShipMain:	; Routine 2
0001B380 7000                       		moveq	#0,d0
0001B382 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B386 323B 0000                  		move.w	BGHZ_ShipIndex(pc,d0.w),d1
0001B38A 4EBB 1000                  		jsr	BGHZ_ShipIndex(pc,d1.w)
0001B38E 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001B394 4EB9 0000 C862             		jsr	(AnimateSprite).l
0001B39A 1028 0022                  		move.b	obStatus(a0),d0
0001B39E 0200 0003                  		andi.b	#3,d0
0001B3A2 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B3A8 8128 0001                  		or.b	d0,obRender(a0)
0001B3AC 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001B3B2                            ; ===========================================================================
0001B3B2 0000                       BGHZ_ShipIndex:	dc.w BGHZ_ShipStart-BGHZ_ShipIndex
0001B3B4 0000                       		dc.w BGHZ_MakeBall-BGHZ_ShipIndex
0001B3B6 0000                       		dc.w BGHZ_ShipMove-BGHZ_ShipIndex
0001B3B8 0000                       		dc.w loc_17954-BGHZ_ShipIndex
0001B3BA 0000                       		dc.w loc_1797A-BGHZ_ShipIndex
0001B3BC 0000                       		dc.w loc_179AC-BGHZ_ShipIndex
0001B3BE 0000                       		dc.w loc_179F6-BGHZ_ShipIndex
0001B3C0                            ; ===========================================================================
0001B3C0                            
0001B3C0                            BGHZ_ShipStart:
0001B3C0 317C 0100 0012             		move.w	#$100,obVelY(a0) ; move ship down
0001B3C6 6100 0000                  		bsr.w	BossMove
0001B3CA 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001B3D0 6600                       		bne.s	loc_177E6
0001B3D2 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop ship
0001B3D8 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto next routine
0001B3DC                            
0001B3DC                            loc_177E6:
0001B3DC 1028 003F                  		move.b	$3F(a0),d0
0001B3E0 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001B3E6 EC40                       		asr.w	#6,d0
0001B3E8 D068 0038                  		add.w	$38(a0),d0
0001B3EC 3140 000C                  		move.w	d0,obY(a0)
0001B3F0 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B3F6 5428 003F                  		addq.b	#2,$3F(a0)
0001B3FA 0C28 0008 0025             		cmpi.b	#8,ob2ndRout(a0)
0001B400 6400                       		bcc.s	locret_1784A
0001B402 4A28 0022                  		tst.b	obStatus(a0)
0001B406 6B00                       		bmi.s	loc_1784C
0001B408 4A28 0020                  		tst.b	obColType(a0)
0001B40C 6600                       		bne.s	locret_1784A
0001B40E 4A28 003E                  		tst.b	$3E(a0)
0001B412 6600                       		bne.s	BGHZ_ShipFlash
0001B414 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001B424                            
0001B424                            BGHZ_ShipFlash:
0001B424 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1 ; load 2nd pallet, 2nd entry
0001B428 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001B42A 4A51                       		tst.w	(a1)
0001B42C 6600                       		bne.s	loc_1783C
0001B42E 303C 0EEE                  		move.w	#cWhite,d0	; move 0EEE (white) to d0
0001B432                            
0001B432                            loc_1783C:
0001B432 3280                       		move.w	d0,(a1)		; load color stored in	d0
0001B434 5328 003E                  		subq.b	#1,$3E(a0)
0001B438 6600                       		bne.s	locret_1784A
0001B43A 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B440                            
0001B440                            locret_1784A:
0001B440 4E75                       		rts	
0001B442                            ; ===========================================================================
0001B442                            
0001B442                            loc_1784C:
0001B442 7064                       		moveq	#100,d0
0001B444 6100 0000                  		bsr.w	AddPoints
0001B448 117C 0008 0025             		move.b	#8,ob2ndRout(a0)
0001B44E 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001B454 4E75                       		rts	
0001B454 4E75                       		rts	
0001B456                            
0001B456                            ; ---------------------------------------------------------------------------
0001B456                            ; Defeated boss	subroutine
0001B456                            ; ---------------------------------------------------------------------------
0001B456                            
0001B456                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B456                            
0001B456                            
0001B456                            BossDefeated:
0001B456 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001B45A 0200 0007                  		andi.b	#7,d0
0001B45E 6600                       		bne.s	locret_178A2
0001B460 4EB9 0000 FD46             		jsr	(FindFreeObj).l
0001B466 6600                       		bne.s	locret_178A2
0001B468 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1)	; load explosion object
0001B46C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B472 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B478 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001B47E 3200                       		move.w	d0,d1
0001B480 7200                       		moveq	#0,d1
0001B482 1200                       		move.b	d0,d1
0001B484 E409                       		lsr.b	#2,d1
0001B486 0441 0020                  		subi.w	#$20,d1
0001B48A D369 0008                  		add.w	d1,obX(a1)
0001B48E E048                       		lsr.w	#8,d0
0001B490 E608                       		lsr.b	#3,d0
0001B492 D169 000C                  		add.w	d0,obY(a1)
0001B496                            
0001B496                            locret_178A2:
0001B496 4E75                       		rts	
0001B498                            ; End of function BossDefeated
0001B498                            
0001B498                            ; ---------------------------------------------------------------------------
0001B498                            ; Subroutine to	move a boss
0001B498                            ; ---------------------------------------------------------------------------
0001B498                            
0001B498                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B498                            
0001B498                            
0001B498                            BossMove:
0001B498 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0001B49E E188                       		lsl.l	#8,d0
0001B4A0 D1A8 0030                  		add.l	d0,$30(a0)
0001B4A4 E18A                       		lsl.l	#8,d2
0001B4A6 D5A8 0038                  		add.l	d2,$38(a0)
0001B4AA 4E75                       		rts
0001B4AC                            ; End of function BossMove
0001B4AC                            
0001B4AC                            ; ===========================================================================
0001B4AC                            
0001B4AC                            		include	"_incObj\3D Boss - Green Hill (part 2).asm"
0001B4AC                            
0001B4AC                            BGHZ_MakeBall:
0001B4AC 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001B4B2 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B4B8 6100 FFDE                  		bsr.w	BossMove
0001B4BC 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001B4C2 6600                       		bne.s	loc_17916
0001B4C4 317C 0000 0010             		move.w	#0,obVelX(a0)
0001B4CA 317C 0000 0012             		move.w	#0,obVelY(a0)
0001B4D0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B4D4 4EB9 0000 FD5C             		jsr	(FindNextFreeObj).l
0001B4DA 6600                       		bne.s	loc_17910
0001B4DC 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load swinging ball object
0001B4E0 3368 0300 0008             		move.w	$300(a0),obX(a1)
0001B4E6 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001B4EC 2348 0034                  		move.l	a0,$34(a1)
0001B4F0                            
0001B4F0                            loc_17910:
0001B4F0 317C 0077 003C             		move.w	#$77,$3C(a0)
0001B4F6                            
0001B4F6                            loc_17916:
0001B4F6 6000 FEE4                  		bra.w	loc_177E6
0001B4FA                            ; ===========================================================================
0001B4FA                            
0001B4FA                            BGHZ_ShipMove:
0001B4FA 5368 003C                  		subq.w	#1,$3C(a0)
0001B4FE 6A00                       		bpl.s	BGHZ_Reverse
0001B500 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B504 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001B50A 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move the ship sideways
0001B510 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001B516 6600                       		bne.s	BGHZ_Reverse
0001B518 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001B51E 317C 0040 0010             		move.w	#$40,obVelX(a0)
0001B524                            
0001B524                            BGHZ_Reverse:
0001B524 0828 0000 0022             		btst	#0,obStatus(a0)
0001B52A 6600                       		bne.s	loc_17950
0001B52C 4468 0010                  		neg.w	obVelX(a0)	; reverse direction of the ship
0001B530                            
0001B530                            loc_17950:
0001B530 6000 FEAA                  		bra.w	loc_177E6
0001B534                            ; ===========================================================================
0001B534                            
0001B534                            loc_17954:
0001B534 5368 003C                  		subq.w	#1,$3C(a0)
0001B538 6B00                       		bmi.s	loc_17960
0001B53A 6100 FF5C                  		bsr.w	BossMove
0001B53E 6000                       		bra.s	loc_17976
0001B540                            ; ===========================================================================
0001B540                            
0001B540                            loc_17960:
0001B540 0868 0000 0022             		bchg	#0,obStatus(a0)
0001B546 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001B54C 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001B550 317C 0000 0010             		move.w	#0,obVelX(a0)
0001B556                            
0001B556                            loc_17976:
0001B556 6000 FE84                  		bra.w	loc_177E6
0001B55A                            ; ===========================================================================
0001B55A                            
0001B55A                            loc_1797A:
0001B55A 5368 003C                  		subq.w	#1,$3C(a0)
0001B55E 6B00                       		bmi.s	loc_17984
0001B560 6000 FEF4                  		bra.w	BossDefeated
0001B564                            ; ===========================================================================
0001B564                            
0001B564                            loc_17984:
0001B564 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B56A 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001B570 4268 0010                  		clr.w	obVelX(a0)
0001B574 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B578 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001B57E 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001B582 6600                       		bne.s	locret_179AA
0001B584 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001B58A                            
0001B58A                            locret_179AA:
0001B58A 4E75                       		rts	
0001B58C                            ; ===========================================================================
0001B58C                            
0001B58C                            loc_179AC:
0001B58C 5268 003C                  		addq.w	#1,$3C(a0)
0001B590 6700                       		beq.s	loc_179BC
0001B592 6A00                       		bpl.s	loc_179C2
0001B594 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B59A 6000                       		bra.s	loc_179EE
0001B59C                            ; ===========================================================================
0001B59C                            
0001B59C                            loc_179BC:
0001B59C 4268 0012                  		clr.w	obVelY(a0)
0001B5A0 6000                       		bra.s	loc_179EE
0001B5A2                            ; ===========================================================================
0001B5A2                            
0001B5A2                            loc_179C2:
0001B5A2 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001B5A8 6500                       		bcs.s	loc_179DA
0001B5AA 6700                       		beq.s	loc_179E0
0001B5AC 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001B5B2 6500                       		bcs.s	loc_179EE
0001B5B4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B5B8 6000                       		bra.s	loc_179EE
0001B5BA                            ; ===========================================================================
0001B5BA                            
0001B5BA                            loc_179DA:
0001B5BA 5168 0012                  		subq.w	#8,obVelY(a0)
0001B5BE 6000                       		bra.s	loc_179EE
0001B5C0                            ; ===========================================================================
0001B5C0                            
0001B5C0                            loc_179E0:
0001B5C0 4268 0012                          clr.w    obVelY(a0)
0001B5C4 4A38 FE2D                          tst.b     (v_invinc).w
0001B5C8 6600                               bne.s   @boss_invinc
0001B5CA 4A38 FE2E                          tst.b     (v_shoes).w
0001B5CE 6600                               bne.s   @boss_shoes
0001B5D0                            
0001B5D0 1038 F5C6                          move.b   (v_Saved_music),d0
0001B5D4 6000 0000                          bra.w      @boss_play
0001B5D8                            
0001B5D8                            @boss_invinc:
0001B5D8 103C 0000                          move.b #bgm_Invincible,d0
0001B5DC                            
0001B5DC                            @boss_shoes:
0001B5DC 103C 0000                          move.b #bgm_Ending,d0
0001B5E0                            
0001B5E0                            @boss_play:
0001B5E0 4EB8 129A                          jsr PlaySound
0001B5E4                            
0001B5E4                            loc_179EE:
0001B5E4 6100 FEB2                  		bsr.w	BossMove
0001B5E8 6000 FDF2                  		bra.w	loc_177E6
0001B5EC                            ; ===========================================================================
0001B5EC                            
0001B5EC                            loc_179F6:
0001B5EC 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001B5F2 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B5F8 0C78 2AC0 F72A             		cmpi.w	#$2AC0,(v_limitright2).w
0001B5FE 6700                       		beq.s	loc_17A10
0001B600 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B604 6000                       		bra.s	loc_17A16
0001B606                            ; ===========================================================================
0001B606                            
0001B606                            loc_17A10:
0001B606 4A28 0001                  		tst.b	obRender(a0)
0001B60A 6A00                       		bpl.s	BGHZ_ShipDel
0001B60C                            
0001B60C                            loc_17A16:
0001B60C 6100 FE8A                  		bsr.w	BossMove
0001B610 6000 FDCA                  		bra.w	loc_177E6
0001B614                            ; ===========================================================================
0001B614                            
0001B614                            BGHZ_ShipDel:
0001B614 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001B61A                            ; ===========================================================================
0001B61A                            
0001B61A                            BGHZ_FaceMain:	; Routine 4
0001B61A 7000                       		moveq	#0,d0
0001B61C 7201                       		moveq	#1,d1
0001B61E 2268 0034                  		movea.l	$34(a0),a1
0001B622 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B626 5900                       		subq.b	#4,d0
0001B628 6600                       		bne.s	loc_17A3E
0001B62A 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001B630 6600                       		bne.s	loc_17A46
0001B632 7204                       		moveq	#4,d1
0001B634                            
0001B634                            loc_17A3E:
0001B634 5D00                       		subq.b	#6,d0
0001B636 6B00                       		bmi.s	loc_17A46
0001B638 720A                       		moveq	#$A,d1
0001B63A 6000                       		bra.s	loc_17A5A
0001B63C                            ; ===========================================================================
0001B63C                            
0001B63C                            loc_17A46:
0001B63C 4A29 0020                  		tst.b	obColType(a1)
0001B640 6600                       		bne.s	loc_17A50
0001B642 7205                       		moveq	#5,d1
0001B644 6000                       		bra.s	loc_17A5A
0001B646                            ; ===========================================================================
0001B646                            
0001B646                            loc_17A50:
0001B646 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B64C 6500                       		bcs.s	loc_17A5A
0001B64E 7204                       		moveq	#4,d1
0001B650                            
0001B650                            loc_17A5A:
0001B650 1141 001C                  		move.b	d1,obAnim(a0)
0001B654 5500                       		subq.b	#2,d0
0001B656 6600                       		bne.s	BGHZ_FaceDisp
0001B658 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B65E 4A28 0001                  		tst.b	obRender(a0)
0001B662 6A00                       		bpl.s	BGHZ_FaceDel
0001B664                            
0001B664                            BGHZ_FaceDisp:
0001B664 6000                       		bra.s	BGHZ_Display
0001B666                            ; ===========================================================================
0001B666                            
0001B666                            BGHZ_FaceDel:
0001B666 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001B66C                            ; ===========================================================================
0001B66C                            
0001B66C                            BGHZ_FlameMain:	; Routine 6
0001B66C 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B672 2268 0034                  		movea.l	$34(a0),a1
0001B676 0C29 000C 0025             		cmpi.b	#$C,ob2ndRout(a1)
0001B67C 6600                       		bne.s	loc_17A96
0001B67E 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B684 4A28 0001                  		tst.b	obRender(a0)
0001B688 6A00                       		bpl.s	BGHZ_FlameDel
0001B68A 6000                       		bra.s	BGHZ_FlameDisp
0001B68C                            ; ===========================================================================
0001B68C                            
0001B68C                            loc_17A96:
0001B68C 3029 0010                  		move.w	obVelX(a1),d0
0001B690 6700                       		beq.s	BGHZ_FlameDisp
0001B692 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B698                            
0001B698                            BGHZ_FlameDisp:
0001B698 6000                       		bra.s	BGHZ_Display
0001B69A                            ; ===========================================================================
0001B69A                            
0001B69A                            BGHZ_FlameDel:
0001B69A 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001B6A0                            ; ===========================================================================
0001B6A0                            
0001B6A0                            BGHZ_Display:
0001B6A0 2268 0034                  		movea.l	$34(a0),a1
0001B6A4 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B6AA 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B6B0 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B6B6 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001B6BC 4EB9 0000 C862             		jsr	(AnimateSprite).l
0001B6C2 1028 0022                  		move.b	obStatus(a0),d0
0001B6C6 0200 0003                  		andi.b	#3,d0
0001B6CA 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B6D0 8128 0001                  		or.b	d0,obRender(a0)
0001B6D4 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001B6D4 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001B6DA                            		include	"_incObj\48 Eggman's Swinging Ball.asm"
0001B6DA                            ; ---------------------------------------------------------------------------
0001B6DA                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001B6DA                            ; ---------------------------------------------------------------------------
0001B6DA                            
0001B6DA                            BossBall:
0001B6DA 7000                       		moveq	#0,d0
0001B6DC 1028 0024                  		move.b	obRoutine(a0),d0
0001B6E0 323B 0000                  		move.w	GBall_Index(pc,d0.w),d1
0001B6E4 4EFB 1000                  		jmp	GBall_Index(pc,d1.w)
0001B6E8                            ; ===========================================================================
0001B6E8 0000                       GBall_Index:	dc.w GBall_Main-GBall_Index
0001B6EA 0000                       		dc.w GBall_Base-GBall_Index
0001B6EC 0000                       		dc.w GBall_Display2-GBall_Index
0001B6EE 0000                       		dc.w loc_17C68-GBall_Index
0001B6F0 0000                       		dc.w GBall_ChkVanish-GBall_Index
0001B6F2                            ; ===========================================================================
0001B6F2                            
0001B6F2                            GBall_Main:	; Routine 0
0001B6F2 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B6F6 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0001B6FC 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001B702 217C 0000 0000 0004        		move.l	#Map_BossItems,obMap(a0)
0001B70A 317C 046C 0002             		move.w	#$46C,obGfx(a0)
0001B710 45E8 0028                  		lea	obSubtype(a0),a2
0001B714 14FC 0000                  		move.b	#0,(a2)+
0001B718 7205                       		moveq	#5,d1
0001B71A 2248                       		movea.l	a0,a1
0001B71C 6000                       		bra.s	loc_17B60
0001B71E                            ; ===========================================================================
0001B71E                            
0001B71E                            GBall_MakeLinks:
0001B71E 4EB9 0000 FD5C             		jsr	(FindNextFreeObj).l
0001B724 6600                       		bne.s	GBall_MakeBall
0001B726 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B72C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B732 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load chain link object
0001B736 137C 0006 0024             		move.b	#6,obRoutine(a1)
0001B73C 237C 0000 941C 0004        		move.l	#Map_Swing_GHZ,obMap(a1)
0001B744 337C 0380 0002             		move.w	#$380,obGfx(a1)
0001B74A 137C 0001 001A             		move.b	#1,obFrame(a1)
0001B750 5228 0028                  		addq.b	#1,obSubtype(a0)
0001B754                            
0001B754                            loc_17B60:
0001B754 3A09                       		move.w	a1,d5
0001B756 0445 D000                  		subi.w	#$D000,d5
0001B75A EC4D                       		lsr.w	#6,d5
0001B75C 0245 007F                  		andi.w	#$7F,d5
0001B760 14C5                       		move.b	d5,(a2)+
0001B762 137C 0004 0001             		move.b	#4,obRender(a1)
0001B768 137C 0008 0014             		move.b	#8,obActWid(a1)
0001B76E 337C 0300 0018             		move.w	#$300,obPriority(a1)
0001B774 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001B77A 51C9 FFA2                  		dbf	d1,GBall_MakeLinks ; repeat sequence 5 more times
0001B77E                            
0001B77E                            GBall_MakeBall:
0001B77E 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001B784 237C 0000 9978 0004        		move.l	#Map_GBall,obMap(a1) ; load different mappings for final link
0001B78C 337C 43AA 0002             		move.w	#$43AA,obGfx(a1) ; use different graphics
0001B792 137C 0001 001A             		move.b	#1,obFrame(a1)
0001B798 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001B79E 137C 0081 0020             		move.b	#$81,obColType(a1) ; make object hurt Sonic
0001B7A4 4E75                       		rts	
0001B7A6                            ; ===========================================================================
0001B7A6                            
0001B7A6 0010 2030 4060             GBall_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001B7AC                            
0001B7AC                            ; ===========================================================================
0001B7AC                            
0001B7AC                            GBall_Base:	; Routine 2
0001B7AC 47F9 0001 B7A6             		lea	(GBall_PosData).l,a3
0001B7B2 45E8 0028                  		lea	obSubtype(a0),a2
0001B7B6 7C00                       		moveq	#0,d6
0001B7B8 1C1A                       		move.b	(a2)+,d6
0001B7BA                            
0001B7BA                            loc_17BC6:
0001B7BA 7800                       		moveq	#0,d4
0001B7BC 181A                       		move.b	(a2)+,d4
0001B7BE ED4C                       		lsl.w	#6,d4
0001B7C0 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
0001B7C6 2244                       		movea.l	d4,a1
0001B7C8 101B                       		move.b	(a3)+,d0
0001B7CA B029 003C                  		cmp.b	$3C(a1),d0
0001B7CE 6700                       		beq.s	loc_17BE0
0001B7D0 5229 003C                  		addq.b	#1,$3C(a1)
0001B7D4                            
0001B7D4                            loc_17BE0:
0001B7D4 51CE FFE4                  		dbf	d6,loc_17BC6
0001B7D8                            
0001B7D8 B029 003C                  		cmp.b	$3C(a1),d0
0001B7DC 6600                       		bne.s	loc_17BFA
0001B7DE 2268 0034                  		movea.l	$34(a0),a1
0001B7E2 0C29 0006 0025             		cmpi.b	#6,ob2ndRout(a1)
0001B7E8 6600                       		bne.s	loc_17BFA
0001B7EA 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B7EE                            
0001B7EE                            loc_17BFA:
0001B7EE 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001B7F4 6700                       		beq.s	GBall_Display
0001B7F6 5268 0032                  		addq.w	#1,$32(a0)
0001B7FA                            
0001B7FA                            GBall_Display:
0001B7FA 6100 0000                  		bsr.w	sub_17C2A
0001B7FE 1028 0026                  		move.b	obAngle(a0),d0
0001B802 4EB9 0000 938E             		jsr	(Swing_Move2).l
0001B808 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001B80E                            ; ===========================================================================
0001B80E                            
0001B80E                            GBall_Display2:	; Routine 4
0001B80E 6100 0000                  		bsr.w	sub_17C2A
0001B812 4EB9 0000 934E             		jsr	(Obj48_Move).l
0001B818 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001B81E                            
0001B81E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B81E                            
0001B81E                            
0001B81E                            sub_17C2A:
0001B81E 2268 0034                  		movea.l	$34(a0),a1
0001B822 0628 0020 001B             		addi.b	#$20,obAniFrame(a0)
0001B828 6400                       		bcc.s	loc_17C3C
0001B82A 0868 0000 001A             		bchg	#0,obFrame(a0)
0001B830                            
0001B830                            loc_17C3C:
0001B830 3169 0008 003A             		move.w	obX(a1),$3A(a0)
0001B836 3029 000C                  		move.w	obY(a1),d0
0001B83A D068 0032                  		add.w	$32(a0),d0
0001B83E 3140 0038                  		move.w	d0,$38(a0)
0001B842 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B848 4A29 0022                  		tst.b	obStatus(a1)
0001B84C 6A00                       		bpl.s	locret_17C66
0001B84E 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001B852 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001B858                            
0001B858                            locret_17C66:
0001B858 4E75                       		rts	
0001B85A                            ; End of function sub_17C2A
0001B85A                            
0001B85A                            ; ===========================================================================
0001B85A                            
0001B85A                            loc_17C68:	; Routine 6
0001B85A 2268 0034                  		movea.l	$34(a0),a1
0001B85E 4A29 0022                  		tst.b	obStatus(a1)
0001B862 6A00                       		bpl.s	GBall_Display3
0001B864 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001B868 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001B86E                            
0001B86E                            GBall_Display3:
0001B86E 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001B874                            ; ===========================================================================
0001B874                            
0001B874                            GBall_ChkVanish:; Routine 8
0001B874 7000                       		moveq	#0,d0
0001B876 4A28 001A                  		tst.b	obFrame(a0)
0001B87A 6600                       		bne.s	GBall_Vanish
0001B87C 5200                       		addq.b	#1,d0
0001B87E                            
0001B87E                            GBall_Vanish:
0001B87E 1140 001A                  		move.b	d0,obFrame(a0)
0001B882 2268 0034                  		movea.l	$34(a0),a1
0001B886 4A29 0022                  		tst.b	obStatus(a1)
0001B88A 6A00                       		bpl.s	GBall_Display4
0001B88C 117C 0000 0020             		move.b	#0,obColType(a0)
0001B892 6100 FBC2                  		bsr.w	BossDefeated
0001B896 5328 003C                  		subq.b	#1,$3C(a0)
0001B89A 6A00                       		bpl.s	GBall_Display4
0001B89C 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001B8A0 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001B8A6                            
0001B8A6                            GBall_Display4:
0001B8A6 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001B8A6 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001B8AC                            		include	"_anim\Eggman.asm"
0001B8AC                            ; ---------------------------------------------------------------------------
0001B8AC                            ; Animation script - Eggman (bosses)
0001B8AC                            ; ---------------------------------------------------------------------------
0001B8AC 0000                       Ani_Eggman:	dc.w @ship-Ani_Eggman
0001B8AE 0000                       		dc.w @facenormal1-Ani_Eggman
0001B8B0 0000                       		dc.w @facenormal2-Ani_Eggman
0001B8B2 0000                       		dc.w @facenormal3-Ani_Eggman
0001B8B4 0000                       		dc.w @facelaugh-Ani_Eggman
0001B8B6 0000                       		dc.w @facehit-Ani_Eggman
0001B8B8 0000                       		dc.w @facepanic-Ani_Eggman
0001B8BA 0000                       		dc.w @blank-Ani_Eggman
0001B8BC 0000                       		dc.w @flame1-Ani_Eggman
0001B8BE 0000                       		dc.w @flame2-Ani_Eggman
0001B8C0 0000                       		dc.w @facedefeat-Ani_Eggman
0001B8C2 0000                       		dc.w @escapeflame-Ani_Eggman
0001B8C4 0F00 FF                    @ship:		dc.b $F, 0, afEnd
0001B8C8 00                         		even
0001B8C8 0501 02FF                  @facenormal1:	dc.b 5,	1, 2, afEnd
0001B8CC                            		even
0001B8CC 0301 02FF                  @facenormal2:	dc.b 3,	1, 2, afEnd
0001B8D0                            		even
0001B8D0 0101 02FF                  @facenormal3:	dc.b 1,	1, 2, afEnd
0001B8D4                            		even
0001B8D4 0403 04FF                  @facelaugh:	dc.b 4,	3, 4, afEnd
0001B8D8                            		even
0001B8D8 1F05 01FF                  @facehit:	dc.b $1F, 5, 1,	afEnd
0001B8DC                            		even
0001B8DC 0306 01FF                  @facepanic:	dc.b 3,	6, 1, afEnd
0001B8E0                            		even
0001B8E0 0F0A FF                    @blank:		dc.b $F, $A, afEnd
0001B8E4 00                         		even
0001B8E4 0308 09FF                  @flame1:	dc.b 3,	8, 9, afEnd
0001B8E8                            		even
0001B8E8 0108 09FF                  @flame2:	dc.b 1,	8, 9, afEnd
0001B8EC                            		even
0001B8EC 0F07 FF                    @facedefeat:	dc.b $F, 7, afEnd
0001B8F0 00                         		even
0001B8F0 0209 080B 0C0B 0C09 08FE+  @escapeflame:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, afBack, 2
0001B8FC 00                         		even
0001B8FC 00                         		even
0001B8FC                            Map_Eggman:	include	"_maps\Eggman.asm"
0001B8FC                            ; --------------------------------------------------------------------------------
0001B8FC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001B8FC                            ; --------------------------------------------------------------------------------
0001B8FC                            
0001B8FC                            SME_F_pyS:	
0001B8FC 0000 0000                  		dc.w SME_F_pyS_1A-SME_F_pyS, SME_F_pyS_34-SME_F_pyS	
0001B900 0000 0000                  		dc.w SME_F_pyS_44-SME_F_pyS, SME_F_pyS_54-SME_F_pyS	
0001B904 0000 0000                  		dc.w SME_F_pyS_69-SME_F_pyS, SME_F_pyS_7E-SME_F_pyS	
0001B908 0000 0000                  		dc.w SME_F_pyS_93-SME_F_pyS, SME_F_pyS_A8-SME_F_pyS	
0001B90C 0000 0000                  		dc.w SME_F_pyS_CC-SME_F_pyS, SME_F_pyS_D2-SME_F_pyS	
0001B910 0000 0000                  		dc.w SME_F_pyS_D8-SME_F_pyS, SME_F_pyS_D9-SME_F_pyS	
0001B914 0000                       		dc.w SME_F_pyS_E4-SME_F_pyS	
0001B916 05                         SME_F_pyS_1A:	dc.b 5	
0001B917 EC01 000A E4               		dc.b $EC, 1, 0, $A, $E4	
0001B91C FC0E 2010 E4               		dc.b $FC, $E, $20, $10, $E4	
0001B921 FC0E 201C 04               		dc.b $FC, $E, $20, $1C, 4	
0001B926 140C 2028 EC               		dc.b $14, $C, $20, $28, $EC	
0001B92B 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C	
0001B930 03                         SME_F_pyS_34:	dc.b 3	
0001B931 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001B936 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC	
0001B93B EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001B940 03                         SME_F_pyS_44:	dc.b 3	
0001B941 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001B946 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001B94B EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001B950 04                         SME_F_pyS_54:	dc.b 4	
0001B951 E408 003D F4               		dc.b $E4, 8, 0, $3D, $F4	
0001B956 EC09 0040 EC               		dc.b $EC, 9, 0, $40, $EC	
0001B95B EC05 0046 04               		dc.b $EC, 5, 0, $46, 4	
0001B960 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001B965 04                         SME_F_pyS_69:	dc.b 4	
0001B966 E408 004A F4               		dc.b $E4, 8, 0, $4A, $F4	
0001B96B EC09 004D EC               		dc.b $EC, 9, 0, $4D, $EC	
0001B970 EC05 0053 04               		dc.b $EC, 5, 0, $53, 4	
0001B975 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001B97A 04                         SME_F_pyS_7E:	dc.b 4	
0001B97B E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001B980 EC09 005A EC               		dc.b $EC, 9, 0, $5A, $EC	
0001B985 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001B98A EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001B98F 04                         SME_F_pyS_93:	dc.b 4	
0001B990 E404 0064 04               		dc.b $E4, 4, 0, $64, 4	
0001B995 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001B99A EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001B99F EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001B9A4 07                         SME_F_pyS_A8:	dc.b 7	
0001B9A5 E409 0066 F4               		dc.b $E4, 9, 0, $66, $F4	
0001B9AA E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001B9AF EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001B9B4 EC01 0035 EC               		dc.b $EC, 1, 0, $35, $EC	
0001B9B9 F400 005D F4               		dc.b $F4, 0, 0, $5D, $F4	
0001B9BE F400 005F FC               		dc.b $F4, 0, 0, $5F, $FC	
0001B9C3 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001B9C8 01                         SME_F_pyS_CC:	dc.b 1	
0001B9C9 0405 002D 22               		dc.b 4, 5, 0, $2D, $22	
0001B9CE 01                         SME_F_pyS_D2:	dc.b 1	
0001B9CF 0405 0031 22               		dc.b 4, 5, 0, $31, $22	
0001B9D4 00                         SME_F_pyS_D8:	dc.b 0	
0001B9D5 02                         SME_F_pyS_D9:	dc.b 2	
0001B9D6 0008 012A 22               		dc.b 0, 8, 1, $2A, $22	
0001B9DB 0808 112A 22               		dc.b 8, 8, $11, $2A, $22	
0001B9E0 02                         SME_F_pyS_E4:	dc.b 2	
0001B9E1 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22	
0001B9E6 0001 0139 3A               		dc.b 0, 1, 1, $39, $3A	
0001B9EC 00                         		even
0001B9EC 00                         		even
0001B9EC                            Map_BossItems:	include	"_maps\Boss Items.asm"
0001B9EC                            ; ---------------------------------------------------------------------------
0001B9EC                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001B9EC                            ; ---------------------------------------------------------------------------
0001B9EC                            Map_BossItems_internal:
0001B9EC 0000                       		dc.w @chainanchor1-Map_BossItems_internal
0001B9EE 0000                       		dc.w @chainanchor2-Map_BossItems_internal
0001B9F0 0000                       		dc.w @cross-Map_BossItems_internal
0001B9F2 0000                       		dc.w @widepipe-Map_BossItems_internal
0001B9F4 0000                       		dc.w @pipe-Map_BossItems_internal
0001B9F6 0000                       		dc.w @spike-Map_BossItems_internal
0001B9F8 0000                       		dc.w @legmask-Map_BossItems_internal
0001B9FA 0000                       		dc.w @legs-Map_BossItems_internal
0001B9FC 01                         @chainanchor1:	dc.b 1
0001B9FD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; GHZ boss
0001BA02 02                         @chainanchor2:	dc.b 2
0001BA03 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; GHZ boss
0001BA08 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001BA0E 00                         		even
0001BA0E 01                         @cross:		dc.b 1
0001BA0F FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; unknown
0001BA14 01                         @widepipe:	dc.b 1
0001BA15 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4	; SLZ boss
0001BA1A 01                         @pipe:		dc.b 1
0001BA1B 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8	; MZ boss
0001BA20 04                         @spike:		dc.b 4
0001BA21 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8 ; SYZ boss
0001BA26 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001BA2B F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001BA30 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001BA36 00                         		even
0001BA36 02                         @legmask:	dc.b 2
0001BA37 0005 0017 00               		dc.b 0,	5, 0, $17, 0	; FZ post-boss: sprite covering part of legs
0001BA3C 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001BA42 00                         		even
0001BA42 02                         @legs:		dc.b 2
0001BA43 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0	; FZ post-boss
0001BA48 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001BA4E 00                         		even
0001BA4E 00                         		even
0001BA4E                            		include	"_incObj\77 Boss - Labyrinth.asm"
0001BA4E                            ; ---------------------------------------------------------------------------
0001BA4E                            ; Object 77 - Eggman (LZ)
0001BA4E                            ; ---------------------------------------------------------------------------
0001BA4E                            
0001BA4E                            BossLabyrinth:
0001BA4E 7000                       		moveq	#0,d0
0001BA50 1028 0024                  		move.b	obRoutine(a0),d0
0001BA54 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001BA58 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001BA5C                            ; ===========================================================================
0001BA5C 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001BA5E 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001BA60 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001BA62 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001BA64                            
0001BA64 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001BA66 0401                       		dc.b 4,	1
0001BA68 0607                       		dc.b 6,	7
0001BA6A                            ; ===========================================================================
0001BA6A                            
0001BA6A                            Obj77_Main:	; Routine 0
0001BA6A 317C 1E10 0008             		move.w	#$1E10,obX(a0)
0001BA70 317C 05C0 000C             		move.w	#$5C0,obY(a0)
0001BA76 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BA7C 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001BA82 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BA88 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001BA8E 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001BA94 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001BA98 2248                       		movea.l	a0,a1
0001BA9A 7202                       		moveq	#2,d1
0001BA9C 6000                       		bra.s	Obj77_LoadBoss
0001BA9E                            ; ===========================================================================
0001BA9E                            
0001BA9E                            Obj77_Loop:
0001BA9E 4EB9 0000 FD5C             		jsr	(FindNextFreeObj).l
0001BAA4 6600                       		bne.s	Obj77_ShipMain
0001BAA6 12BC 0077                  		move.b	#id_BossLabyrinth,0(a1)
0001BAAA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BAB0 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BAB6                            
0001BAB6                            Obj77_LoadBoss:
0001BAB6 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BABC 4229 0025                  		clr.b	ob2ndRout(a1)
0001BAC0 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001BAC4 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001BAC8 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0001BACE 237C 0001 B8FC 0004        		move.l	#Map_Eggman,obMap(a1)
0001BAD6 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001BADC 137C 0004 0001             		move.b	#4,obRender(a1)
0001BAE2 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001BAE8 2348 0034                  		move.l	a0,$34(a1)
0001BAEC 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001BAF0                            
0001BAF0                            Obj77_ShipMain:	; Routine 2
0001BAF0 43F8 D000                  		lea	(v_player).w,a1
0001BAF4 7000                       		moveq	#0,d0
0001BAF6 1028 0025                  		move.b	ob2ndRout(a0),d0
0001BAFA 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001BAFE 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001BB02 43F9 0001 B8AC             		lea	(Ani_Eggman).l,a1
0001BB08 4EB9 0000 C862             		jsr	(AnimateSprite).l
0001BB0E 7003                       		moveq	#3,d0
0001BB10 C028 0022                  		and.b	obStatus(a0),d0
0001BB14 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BB1A 8128 0001                  		or.b	d0,obRender(a0)
0001BB1E 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001BB24                            ; ===========================================================================
0001BB24 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001BB28 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001BB2C 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001BB30 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001BB34                            ; ===========================================================================
0001BB34                            
0001BB34                            loc_17F1E:
0001BB34 3029 0008                  		move.w	obX(a1),d0
0001BB38 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001BB3C 6500                       		bcs.s	loc_17F38
0001BB3E 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001BB44 317C 0060 0010             		move.w	#$60,obVelX(a0)
0001BB4A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BB4E                            
0001BB4E                            loc_17F38:
0001BB4E 6100 F948                  		bsr.w	BossMove
0001BB52 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001BB58 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001BB5E                            
0001BB5E                            loc_17F48:
0001BB5E 4A28 003D                  		tst.b	$3D(a0)
0001BB62 6600                       		bne.s	loc_17F8E
0001BB64 4A28 0022                  		tst.b	obStatus(a0)
0001BB68 6B00                       		bmi.s	loc_17F92
0001BB6A 4A28 0020                  		tst.b	obColType(a0)
0001BB6E 6600                       		bne.s	locret_17F8C
0001BB70 4A28 003E                  		tst.b	$3E(a0)
0001BB74 6600                       		bne.s	loc_17F70
0001BB76 117C 0020 003E             		move.b	#$20,$3E(a0)
0001BB86                            
0001BB86                            loc_17F70:
0001BB86 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001BB8A 7000                       		moveq	#0,d0
0001BB8C 4A51                       		tst.w	(a1)
0001BB8E 6600                       		bne.s	loc_17F7E
0001BB90 303C 0EEE                  		move.w	#cWhite,d0
0001BB94                            
0001BB94                            loc_17F7E:
0001BB94 3280                       		move.w	d0,(a1)
0001BB96 5328 003E                  		subq.b	#1,$3E(a0)
0001BB9A 6600                       		bne.s	locret_17F8C
0001BB9C 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BBA2                            
0001BBA2                            locret_17F8C:
0001BBA2 4E75                       		rts	
0001BBA4                            ; ===========================================================================
0001BBA4                            
0001BBA4                            loc_17F8E:
0001BBA4 6000 F8B0                  		bra.w	BossDefeated
0001BBA8                            ; ===========================================================================
0001BBA8                            
0001BBA8                            loc_17F92:
0001BBA8 7064                       		moveq	#100,d0
0001BBAA 6100 0000                  		bsr.w	AddPoints
0001BBAE 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001BBB4 4E75                       		rts	
0001BBB6                            ; ===========================================================================
0001BBB6                            
0001BBB6                            loc_17FA0:
0001BBB6 70FE                       		moveq	#-2,d0
0001BBB8 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001BBBE 6500                       		bcs.s	loc_17FB6
0001BBC0 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001BBC6 4268 0010                  		clr.w	obVelX(a0)
0001BBCA 5240                       		addq.w	#1,d0
0001BBCC                            
0001BBCC                            loc_17FB6:
0001BBCC 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001BBD2 6E00                       		bgt.s	loc_17FCA
0001BBD4 317C 0500 0038             		move.w	#$500,$38(a0)
0001BBDA 4268 0012                  		clr.w	obVelY(a0)
0001BBDE 5240                       		addq.w	#1,d0
0001BBE0                            
0001BBE0                            loc_17FCA:
0001BBE0 6600                       		bne.s	loc_17FDC
0001BBE2 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001BBE8 317C FE00 0012             		move.w	#-$200,obVelY(a0)
0001BBEE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BBF2                            
0001BBF2                            loc_17FDC:
0001BBF2 6000 FF5A                  		bra.w	loc_17F38
0001BBF6                            ; ===========================================================================
0001BBF6                            
0001BBF6                            loc_17FE0:
0001BBF6 70FE                       		moveq	#-2,d0
0001BBF8 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001BBFE 6500                       		bcs.s	loc_17FF6
0001BC00 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001BC06 4268 0010                  		clr.w	obVelX(a0)
0001BC0A 5240                       		addq.w	#1,d0
0001BC0C                            
0001BC0C                            loc_17FF6:
0001BC0C 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001BC12 6E00                       		bgt.s	loc_1800A
0001BC14 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001BC1A 4268 0012                  		clr.w	obVelY(a0)
0001BC1E 5240                       		addq.w	#1,d0
0001BC20                            
0001BC20                            loc_1800A:
0001BC20 6600                       		bne.s	loc_1801A
0001BC22 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001BC28 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BC2C 4228 003F                  		clr.b	$3F(a0)
0001BC30                            
0001BC30                            loc_1801A:
0001BC30 6000 FF1C                  		bra.w	loc_17F38
0001BC34                            ; ===========================================================================
0001BC34                            
0001BC34                            loc_1801E:
0001BC34 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001BC3A 6E00                       		bgt.s	loc_1804E
0001BC3C 317C 0100 0038             		move.w	#$100,$38(a0)
0001BC42 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001BC48 317C FF80 0012             		move.w	#-$80,obVelY(a0)
0001BC4E 4A28 003D                  		tst.b	$3D(a0)
0001BC52 6700                       		beq.s	loc_18046
0001BC54 E1E8 0010                  		asl	obVelX(a0)
0001BC58 E1E8 0012                  		asl	obVelY(a0)
0001BC5C                            
0001BC5C                            loc_18046:
0001BC5C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BC60 6000 FEEC                  		bra.w	loc_17F38
0001BC64                            ; ===========================================================================
0001BC64                            
0001BC64                            loc_1804E:
0001BC64 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BC6A 5428 003F                  		addq.b	#2,$3F(a0)
0001BC6E 1028 003F                  		move.b	$3F(a0),d0
0001BC72 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001BC78 4A41                       		tst.w	d1
0001BC7A 6A00                       		bpl.s	loc_1806C
0001BC7C 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BC82                            
0001BC82                            loc_1806C:
0001BC82 E840                       		asr.w	#4,d0
0001BC84 4840                       		swap	d0
0001BC86 4240                       		clr.w	d0
0001BC88 D0A8 0030                  		add.l	$30(a0),d0
0001BC8C 4840                       		swap	d0
0001BC8E 3140 0008                  		move.w	d0,obX(a0)
0001BC92 3028 0012                  		move.w	obVelY(a0),d0
0001BC96 3238 D00C                  		move.w	(v_player+obY).w,d1
0001BC9A 9268 000C                  		sub.w	obY(a0),d1
0001BC9E 6500                       		bcs.s	loc_180A2
0001BCA0 0441 0048                  		subi.w	#$48,d1
0001BCA4 6500                       		bcs.s	loc_180A2
0001BCA6 E240                       		asr.w	#1,d0
0001BCA8 0441 0028                  		subi.w	#$28,d1
0001BCAC 6500                       		bcs.s	loc_180A2
0001BCAE E240                       		asr.w	#1,d0
0001BCB0 0441 0028                  		subi.w	#$28,d1
0001BCB4 6500                       		bcs.s	loc_180A2
0001BCB6 7000                       		moveq	#0,d0
0001BCB8                            
0001BCB8                            loc_180A2:
0001BCB8 48C0                       		ext.l	d0
0001BCBA E180                       		asl.l	#8,d0
0001BCBC 4A28 003D                  		tst.b	$3D(a0)
0001BCC0 6700                       		beq.s	loc_180AE
0001BCC2 D080                       		add.l	d0,d0
0001BCC4                            
0001BCC4                            loc_180AE:
0001BCC4 D1A8 0038                  		add.l	d0,$38(a0)
0001BCC8 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001BCCE 6000 FE8E                  		bra.w	loc_17F48
0001BCD2                            ; ===========================================================================
0001BCD2                            
0001BCD2                            loc_180BC:
0001BCD2 70FE                       		moveq	#-2,d0
0001BCD4 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001BCDA 6500                       		bcs.s	loc_180D2
0001BCDC 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001BCE2 4268 0010                  		clr.w	obVelX(a0)
0001BCE6 5240                       		addq.w	#1,d0
0001BCE8                            
0001BCE8                            loc_180D2:
0001BCE8 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001BCEE 6E00                       		bgt.s	loc_180E6
0001BCF0 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001BCF6 4268 0012                  		clr.w	obVelY(a0)
0001BCFA 5240                       		addq.w	#1,d0
0001BCFC                            
0001BCFC                            loc_180E6:
0001BCFC 6600                       		bne.s	loc_180F2
0001BCFE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BD02 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BD08                            
0001BD08                            loc_180F2:
0001BD08 6000 FE44                  		bra.w	loc_17F38
0001BD0C                            ; ===========================================================================
0001BD0C                            
0001BD0C                            loc_180F6:
0001BD0C 4A28 003D                  		tst.b	$3D(a0)
0001BD10 6600                       		bne.s	loc_18112
0001BD12 0C69 1EC8 0008             		cmpi.w	#$1EC8,obX(a1)
0001BD18 6D00                       		blt.s	loc_18126
0001BD1A 0C69 00F0 000C             		cmpi.w	#$F0,obY(a1)
0001BD20 6E00                       		bgt.s	loc_18126
0001BD22 117C 0032 003C             		move.b	#$32,$3C(a0)
0001BD28                            
0001BD28                            loc_18112:
0001BD28 4A38 FE2D                          tst.b     (v_invinc).w
0001BD2C 6600                               bne.s   @boss_invinc
0001BD2E                            
0001BD2E 1038 F5C6                          move.b   (v_Saved_music),d0
0001BD32 6000 0000                          bra.w      @boss_play
0001BD36                            
0001BD36                            @boss_invinc:
0001BD36 103C 0000                          move.b #bgm_Invincible,d0
0001BD3A                            
0001BD3A                            @boss_play:
0001BD3A 4EB8 129A                          jsr PlaySound
0001BD3E 4238 F7AA                          clr.b    (f_lockscreen).w
0001BD42 08E8 0000 0022                     bset    #0,obStatus(a0)
0001BD48 5428 0025                          addq.b    #2,ob2ndRout(a0)
0001BD4C                            
0001BD4C                            loc_18126:
0001BD4C 6000 FE00                  		bra.w	loc_17F38
0001BD50                            ; ===========================================================================
0001BD50                            
0001BD50                            loc_1812A:
0001BD50 4A28 003D                  		tst.b	$3D(a0)
0001BD54 6600                       		bne.s	loc_18136
0001BD56 5328 003C                  		subq.b	#1,$3C(a0)
0001BD5A 6600                       		bne.s	loc_1814E
0001BD5C                            
0001BD5C                            loc_18136:
0001BD5C 4228 003C                  		clr.b	$3C(a0)
0001BD60 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001BD66 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001BD6C 4228 003D                  		clr.b	$3D(a0)
0001BD70 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BD74                            
0001BD74                            loc_1814E:
0001BD74 6000 FDD8                  		bra.w	loc_17F38
0001BD78                            ; ===========================================================================
0001BD78                            
0001BD78                            loc_18152:
0001BD78 0C78 2030 F72A             		cmpi.w	#$2030,(v_limitright2).w
0001BD7E 6400                       		bcc.s	loc_18160
0001BD80 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001BD84 6000                       		bra.s	loc_18166
0001BD86                            ; ===========================================================================
0001BD86                            
0001BD86                            loc_18160:
0001BD86 4A28 0001                  		tst.b	obRender(a0)
0001BD8A 6A00                       		bpl.s	Obj77_ShipDel
0001BD8C                            
0001BD8C                            loc_18166:
0001BD8C 6000 FDC0                  		bra.w	loc_17F38
0001BD90                            ; ===========================================================================
0001BD90                            
0001BD90                            Obj77_ShipDel:
0001BD90 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001BD96                            ; ===========================================================================
0001BD96                            
0001BD96                            Obj77_FaceMain:	; Routine 4
0001BD96 2268 0034                  		movea.l	$34(a0),a1
0001BD9A 1011                       		move.b	(a1),d0
0001BD9C B010                       		cmp.b	(a0),d0
0001BD9E 6600                       		bne.s	Obj77_FaceDel
0001BDA0 7000                       		moveq	#0,d0
0001BDA2 1029 0025                  		move.b	ob2ndRout(a1),d0
0001BDA6 7201                       		moveq	#1,d1
0001BDA8 4A28 003D                  		tst.b	$3D(a0)
0001BDAC 6700                       		beq.s	loc_1818C
0001BDAE 720A                       		moveq	#$A,d1
0001BDB0 6000                       		bra.s	loc_181A0
0001BDB2                            ; ===========================================================================
0001BDB2                            
0001BDB2                            loc_1818C:
0001BDB2 4A29 0020                  		tst.b	obColType(a1)
0001BDB6 6600                       		bne.s	loc_18196
0001BDB8 7205                       		moveq	#5,d1
0001BDBA 6000                       		bra.s	loc_181A0
0001BDBC                            ; ===========================================================================
0001BDBC                            
0001BDBC                            loc_18196:
0001BDBC 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001BDC2 6500                       		bcs.s	loc_181A0
0001BDC4 7204                       		moveq	#4,d1
0001BDC6                            
0001BDC6                            loc_181A0:
0001BDC6 1141 001C                  		move.b	d1,obAnim(a0)
0001BDCA 0C00 000E                  		cmpi.b	#$E,d0
0001BDCE 6600                       		bne.s	loc_181B6
0001BDD0 117C 0006 001C             		move.b	#6,obAnim(a0)
0001BDD6 4A28 0001                  		tst.b	obRender(a0)
0001BDDA 6A00                       		bpl.s	Obj77_FaceDel
0001BDDC                            
0001BDDC                            loc_181B6:
0001BDDC 6000                       		bra.s	Obj77_Display
0001BDDE                            ; ===========================================================================
0001BDDE                            
0001BDDE                            Obj77_FaceDel:
0001BDDE 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001BDE4                            ; ===========================================================================
0001BDE4                            
0001BDE4                            Obj77_FlameMain:; Routine 6
0001BDE4 117C 0007 001C             		move.b	#7,obAnim(a0)
0001BDEA 2268 0034                  		movea.l	$34(a0),a1
0001BDEE 1011                       		move.b	(a1),d0
0001BDF0 B010                       		cmp.b	(a0),d0
0001BDF2 6600                       		bne.s	Obj77_FlameDel
0001BDF4 0C29 000E 0025             		cmpi.b	#$E,ob2ndRout(a1)
0001BDFA 6600                       		bne.s	loc_181F0
0001BDFC 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001BE02 4A28 0001                  		tst.b	1(a0)
0001BE06 6A00                       		bpl.s	Obj77_FlameDel
0001BE08 6000                       		bra.s	loc_181F0
0001BE0A                            ; ===========================================================================
0001BE0A 4A69 0010                  		tst.w	obVelX(a1)
0001BE0E 6700                       		beq.s	loc_181F0
0001BE10 117C 0008 001C             		move.b	#8,obAnim(a0)
0001BE16                            
0001BE16                            loc_181F0:
0001BE16 6000                       		bra.s	Obj77_Display
0001BE18                            ; ===========================================================================
0001BE18                            
0001BE18                            Obj77_FlameDel:
0001BE18 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001BE1E                            ; ===========================================================================
0001BE1E                            
0001BE1E                            Obj77_Display:
0001BE1E 43F9 0001 B8AC             		lea	(Ani_Eggman).l,a1
0001BE24 4EB9 0000 C862             		jsr	(AnimateSprite).l
0001BE2A 2268 0034                  		movea.l	$34(a0),a1
0001BE2E 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001BE34 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001BE3A 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001BE40 7003                       		moveq	#3,d0
0001BE42 C028 0022                  		and.b	obStatus(a0),d0
0001BE46 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BE4C 8128 0001                  		or.b	d0,obRender(a0)
0001BE50 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001BE50 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001BE56                            		include	"_incObj\73 Boss - Marble.asm"
0001BE56                            ; ---------------------------------------------------------------------------
0001BE56                            ; Object 73 - Eggman (MZ)
0001BE56                            ; ---------------------------------------------------------------------------
0001BE56                            
0001BE56                            BossMarble:
0001BE56 7000                       		moveq	#0,d0
0001BE58 1028 0024                  		move.b	obRoutine(a0),d0
0001BE5C 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001BE60 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001BE64                            ; ===========================================================================
0001BE64 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001BE66 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001BE68 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001BE6A 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001BE6C 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001BE6E                            
0001BE6E 0200 0200                  Obj73_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001BE72 0401 0200                  		dc.b 4,	1, $02, $00
0001BE76 0607 0200                  		dc.b 6,	7, $02, $00
0001BE7A 0800 0180                  		dc.b 8,	0, $01, $80
0001BE7E                            ; ===========================================================================
0001BE7E                            
0001BE7E                            Obj73_Main:	; Routine 0
0001BE7E 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BE84 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001BE8A 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BE90 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001BE96 45FA FFD6                  		lea	Obj73_ObjData(pc),a2
0001BE9A 2248                       		movea.l	a0,a1
0001BE9C 7203                       		moveq	#3,d1
0001BE9E 6000                       		bra.s	Obj73_LoadBoss
0001BEA0                            ; ===========================================================================
0001BEA0                            
0001BEA0                            Obj73_Loop:
0001BEA0 4EB9 0000 FD5C             		jsr	(FindNextFreeObj).l
0001BEA6 6600                       		bne.s	Obj73_ShipMain
0001BEA8 12BC 0073                  		move.b	#id_BossMarble,0(a1)
0001BEAC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BEB2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BEB8                            
0001BEB8                            Obj73_LoadBoss:
0001BEB8 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BEBE 4229 0025                  		clr.b	ob2ndRout(a1)
0001BEC2 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001BEC6 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001BECA 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001BECE 237C 0001 B8FC 0004        		move.l	#Map_Eggman,obMap(a1)
0001BED6 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001BEDC 137C 0004 0001             		move.b	#4,obRender(a1)
0001BEE2 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001BEE8 2348 0034                  		move.l	a0,$34(a1)
0001BEEC 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001BEF0                            
0001BEF0                            Obj73_ShipMain:	; Routine 2
0001BEF0 7000                       		moveq	#0,d0
0001BEF2 1028 0025                  		move.b	ob2ndRout(a0),d0
0001BEF6 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001BEFA 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001BEFE 43F9 0001 B8AC             		lea	(Ani_Eggman).l,a1
0001BF04 4EB9 0000 C862             		jsr	(AnimateSprite).l
0001BF0A 7003                       		moveq	#3,d0
0001BF0C C028 0022                  		and.b	obStatus(a0),d0
0001BF10 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BF16 8128 0001                  		or.b	d0,obRender(a0)
0001BF1A 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001BF20                            ; ===========================================================================
0001BF20 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001BF22 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001BF24 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001BF26 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001BF28 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001BF2A                            ; ===========================================================================
0001BF2A                            
0001BF2A                            loc_18302:
0001BF2A 1028 003F                  		move.b	$3F(a0),d0
0001BF2E 5428 003F                  		addq.b	#2,$3F(a0)
0001BF32 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001BF38 E440                       		asr.w	#2,d0
0001BF3A 3140 0012                  		move.w	d0,obVelY(a0)
0001BF3E 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001BF44 6100 F552                  		bsr.w	BossMove
0001BF48 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001BF4E 6600                       		bne.s	loc_18334
0001BF50 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BF54 4228 0028                  		clr.b	obSubtype(a0)
0001BF58 42A8 0010                  		clr.l	obVelX(a0)
0001BF5C                            
0001BF5C                            loc_18334:
0001BF5C 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001BF62 1140 0034                  		move.b	d0,$34(a0)
0001BF66                            
0001BF66                            loc_1833E:
0001BF66 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001BF6C 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001BF72 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0001BF78 6400                       		bcc.s	locret_18390
0001BF7A 4A28 0022                  		tst.b	obStatus(a0)
0001BF7E 6B00                       		bmi.s	loc_18392
0001BF80 4A28 0020                  		tst.b	obColType(a0)
0001BF84 6600                       		bne.s	locret_18390
0001BF86 4A28 003E                  		tst.b	$3E(a0)
0001BF8A 6600                       		bne.s	loc_18374
0001BF8C 117C 0028 003E             		move.b	#$28,$3E(a0)
0001BF9C                            
0001BF9C                            loc_18374:
0001BF9C 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001BFA0 7000                       		moveq	#0,d0
0001BFA2 4A51                       		tst.w	(a1)
0001BFA4 6600                       		bne.s	loc_18382
0001BFA6 303C 0EEE                  		move.w	#cWhite,d0
0001BFAA                            
0001BFAA                            loc_18382:
0001BFAA 3280                       		move.w	d0,(a1)
0001BFAC 5328 003E                  		subq.b	#1,$3E(a0)
0001BFB0 6600                       		bne.s	locret_18390
0001BFB2 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BFB8                            
0001BFB8                            locret_18390:
0001BFB8 4E75                       		rts	
0001BFBA                            ; ===========================================================================
0001BFBA                            
0001BFBA                            loc_18392:
0001BFBA 7064                       		moveq	#100,d0
0001BFBC 6100 0000                  		bsr.w	AddPoints
0001BFC0 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
0001BFC6 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001BFCC 4268 0010                  		clr.w	obVelX(a0)
0001BFD0 4E75                       		rts	
0001BFD2                            ; ===========================================================================
0001BFD2                            
0001BFD2                            loc_183AA:
0001BFD2 7000                       		moveq	#0,d0
0001BFD4 1028 0028                  		move.b	obSubtype(a0),d0
0001BFD8 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001BFDC 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001BFE0 0228 0006 0028             		andi.b	#6,obSubtype(a0)
0001BFE6 6000 FF7E                  		bra.w	loc_1833E
0001BFEA                            ; ===========================================================================
0001BFEA 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001BFEC 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001BFEE 0000                       		dc.w loc_183CA-off_183C2
0001BFF0 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001BFF2                            ; ===========================================================================
0001BFF2                            
0001BFF2                            loc_183CA:
0001BFF2 4A68 0010                  		tst.w	obVelX(a0)
0001BFF6 6600                       		bne.s	loc_183FE
0001BFF8 7040                       		moveq	#$40,d0
0001BFFA 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001C000 6700                       		beq.s	loc_183E6
0001C002 6500                       		bcs.s	loc_183DE
0001C004 4440                       		neg.w	d0
0001C006                            
0001C006                            loc_183DE:
0001C006 3140 0012                  		move.w	d0,obVelY(a0)
0001C00A 6000 F48C                  		bra.w	BossMove
0001C00E                            ; ===========================================================================
0001C00E                            
0001C00E                            loc_183E6:
0001C00E 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001C014 317C 0100 0012             		move.w	#$100,obVelY(a0)
0001C01A 0828 0000 0022             		btst	#0,obStatus(a0)
0001C020 6600                       		bne.s	loc_183FE
0001C022 4468 0010                  		neg.w	obVelX(a0)
0001C026                            
0001C026                            loc_183FE:
0001C026 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001C02C 6400                       		bcc.s	Obj73_MakeLava
0001C02E 6100 F468                  		bsr.w	BossMove
0001C032 5968 0012                  		subq.w	#4,obVelY(a0)
0001C036                            
0001C036                            Obj73_MakeLava:
0001C036 5328 0034                  		subq.b	#1,$34(a0)
0001C03A 6400                       		bcc.s	loc_1845C
0001C03C 4EB9 0000 FD46             		jsr	(FindFreeObj).l
0001C042 6600                       		bne.s	loc_1844A
0001C044 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
0001C048 337C 02E8 000C             		move.w	#$2E8,obY(a1)	; set Y	position
0001C04E 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001C054 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001C05A 80FC 0050                  		divu.w	#$50,d0
0001C05E 4840                       		swap	d0
0001C060 0640 1878                  		addi.w	#$1878,d0
0001C064 3340 0008                  		move.w	d0,obX(a1)
0001C068 EE09                       		lsr.b	#7,d1
0001C06A 337C 00FF 0028             		move.w	#$FF,obSubtype(a1)
0001C070                            
0001C070                            loc_1844A:
0001C070 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001C076 0200 001F                  		andi.b	#$1F,d0
0001C07A 0600 0040                  		addi.b	#$40,d0
0001C07E 1140 0034                  		move.b	d0,$34(a0)
0001C082                            
0001C082                            loc_1845C:
0001C082 0828 0000 0022             		btst	#0,obStatus(a0)
0001C088 6700                       		beq.s	loc_18474
0001C08A 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001C090 6D00                       		blt.s	locret_1849C
0001C092 317C 1910 0030             		move.w	#$1910,$30(a0)
0001C098 6000                       		bra.s	loc_18482
0001C09A                            ; ===========================================================================
0001C09A                            
0001C09A                            loc_18474:
0001C09A 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001C0A0 6E00                       		bgt.s	locret_1849C
0001C0A2 317C 1830 0030             		move.w	#$1830,$30(a0)
0001C0A8                            
0001C0A8                            loc_18482:
0001C0A8 4268 0010                  		clr.w	obVelX(a0)
0001C0AC 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001C0B2 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001C0B8 6400                       		bcc.s	loc_18498
0001C0BA 4468 0012                  		neg.w	obVelY(a0)
0001C0BE                            
0001C0BE                            loc_18498:
0001C0BE 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C0C2                            
0001C0C2                            locret_1849C:
0001C0C2 4E75                       		rts	
0001C0C4                            ; ===========================================================================
0001C0C4                            
0001C0C4                            Obj73_MakeLava2:
0001C0C4 6100 F3D2                  		bsr.w	BossMove
0001C0C8 3028 0038                  		move.w	$38(a0),d0
0001C0CC 0440 022C                  		subi.w	#$22C,d0
0001C0D0 6E00                       		bgt.s	locret_184F4
0001C0D2 303C 022C                  		move.w	#$22C,d0
0001C0D6 4A68 0012                  		tst.w	obVelY(a0)
0001C0DA 6700                       		beq.s	loc_184EA
0001C0DC 4268 0012                  		clr.w	obVelY(a0)
0001C0E0 317C 0050 003C             		move.w	#$50,$3C(a0)
0001C0E6 0868 0000 0022             		bchg	#0,obStatus(a0)
0001C0EC 4EB9 0000 FD46             		jsr	(FindFreeObj).l
0001C0F2 6600                       		bne.s	loc_184EA
0001C0F4 3368 0030 0008             		move.w	$30(a0),obX(a1)
0001C0FA 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001C100 0669 0018 000C             		addi.w	#$18,obY(a1)
0001C106 12BC 0074                  		move.b	#id_BossFire,(a1)	; load lava ball object
0001C10A 137C 0001 0028             		move.b	#1,obSubtype(a1)
0001C110                            
0001C110                            loc_184EA:
0001C110 5368 003C                  		subq.w	#1,$3C(a0)
0001C114 6600                       		bne.s	locret_184F4
0001C116 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C11A                            
0001C11A                            locret_184F4:
0001C11A 4E75                       		rts	
0001C11C                            ; ===========================================================================
0001C11C                            
0001C11C                            loc_184F6:
0001C11C 5368 003C                  		subq.w	#1,$3C(a0)
0001C120 6B00                       		bmi.s	loc_18500
0001C122 6000 F332                  		bra.w	BossDefeated
0001C126                            ; ===========================================================================
0001C126                            
0001C126                            loc_18500:
0001C126 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C12C 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001C132 4268 0010                  		clr.w	obVelX(a0)
0001C136 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C13A 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001C140 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001C144 6600                       		bne.s	locret_1852A
0001C146 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001C14C 4268 0012                  		clr.w	obVelY(a0)
0001C150                            
0001C150                            locret_1852A:
0001C150 4E75                       		rts	
0001C152                            ; ===========================================================================
0001C152                            
0001C152                            loc_1852C:
0001C152 5268 003C                  		addq.w	#1,$3C(a0)
0001C156 6700                       		beq.s	loc_18544
0001C158 6A00                       		bpl.s	loc_1854E
0001C15A 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001C160 6400                       		bcc.s	loc_18544
0001C162 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C168 6000                       		bra.s	loc_1857A
0001C16A                            ; ===========================================================================
0001C16A                            
0001C16A                            loc_18544:
0001C16A 4268 0012                  		clr.w	obVelY(a0)
0001C16E 4268 003C                  		clr.w	$3C(a0)
0001C172 6000                       		bra.s	loc_1857A
0001C174                            ; ===========================================================================
0001C174                            
0001C174                            loc_1854E:
0001C174 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001C17A 6500                       		bcs.s	loc_18566
0001C17C 6700                       		beq.s	loc_1856C
0001C17E 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001C184 6500                       		bcs.s	loc_1857A
0001C186 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C18A 6000                       		bra.s	loc_1857A
0001C18C                            ; ===========================================================================
0001C18C                            
0001C18C                            loc_18566:
0001C18C 5168 0012                  		subq.w	#8,obVelY(a0)
0001C190 6000                       		bra.s	loc_1857A
0001C192                            ; ===========================================================================
0001C192                            
0001C192                            loc_1856C:
0001C192 4268 0012                  		clr.w	obVelY(a0)
0001C1A0                            
0001C1A0                            loc_1857A:
0001C1A0 6100 F2F6                  		bsr.w	BossMove
0001C1A4 6000 FDC0                  		bra.w	loc_1833E
0001C1A8                            ; ===========================================================================
0001C1A8                            
0001C1A8                            loc_18582:
0001C1A8 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001C1AE 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001C1B4 0C78 1960 F72A             		cmpi.w	#$1960,(v_limitright2).w
0001C1BA 6400                       		bcc.s	loc_1859C
0001C1BC 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001C1C0 6000                       		bra.s	loc_185A2
0001C1C2                            ; ===========================================================================
0001C1C2                            
0001C1C2                            loc_1859C:
0001C1C2 4A28 0001                  		tst.b	obRender(a0)
0001C1C6 6A00                       		bpl.s	Obj73_ShipDel
0001C1C8                            
0001C1C8                            loc_185A2:
0001C1C8 6100 F2CE                  		bsr.w	BossMove
0001C1CC 6000 FD98                  		bra.w	loc_1833E
0001C1D0                            ; ===========================================================================
0001C1D0                            
0001C1D0                            Obj73_ShipDel:
0001C1D0 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001C1D6                            ; ===========================================================================
0001C1D6                            
0001C1D6                            Obj73_FaceMain:	; Routine 4
0001C1D6 7000                       		moveq	#0,d0
0001C1D8 7201                       		moveq	#1,d1
0001C1DA 2268 0034                  		movea.l	$34(a0),a1
0001C1DE 1029 0025                  		move.b	ob2ndRout(a1),d0
0001C1E2 5540                       		subq.w	#2,d0
0001C1E4 6600                       		bne.s	loc_185D2
0001C1E6 0829 0001 0028             		btst	#1,obSubtype(a1)
0001C1EC 6700                       		beq.s	loc_185DA
0001C1EE 4A69 0012                  		tst.w	obVelY(a1)
0001C1F2 6600                       		bne.s	loc_185DA
0001C1F4 7204                       		moveq	#4,d1
0001C1F6 6000                       		bra.s	loc_185EE
0001C1F8                            ; ===========================================================================
0001C1F8                            
0001C1F8                            loc_185D2:
0001C1F8 5500                       		subq.b	#2,d0
0001C1FA 6B00                       		bmi.s	loc_185DA
0001C1FC 720A                       		moveq	#$A,d1
0001C1FE 6000                       		bra.s	loc_185EE
0001C200                            ; ===========================================================================
0001C200                            
0001C200                            loc_185DA:
0001C200 4A29 0020                  		tst.b	obColType(a1)
0001C204 6600                       		bne.s	loc_185E4
0001C206 7205                       		moveq	#5,d1
0001C208 6000                       		bra.s	loc_185EE
0001C20A                            ; ===========================================================================
0001C20A                            
0001C20A                            loc_185E4:
0001C20A 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001C210 6500                       		bcs.s	loc_185EE
0001C212 7204                       		moveq	#4,d1
0001C214                            
0001C214                            loc_185EE:
0001C214 1141 001C                  		move.b	d1,obAnim(a0)
0001C218 5900                       		subq.b	#4,d0
0001C21A 6600                       		bne.s	loc_18602
0001C21C 117C 0006 001C             		move.b	#6,obAnim(a0)
0001C222 4A28 0001                  		tst.b	obRender(a0)
0001C226 6A00                       		bpl.s	Obj73_FaceDel
0001C228                            
0001C228                            loc_18602:
0001C228 6000                       		bra.s	Obj73_Display
0001C22A                            ; ===========================================================================
0001C22A                            
0001C22A                            Obj73_FaceDel:
0001C22A 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001C230                            ; ===========================================================================
0001C230                            
0001C230                            Obj73_FlameMain:; Routine 6
0001C230 117C 0007 001C             		move.b	#7,obAnim(a0)
0001C236 2268 0034                  		movea.l	$34(a0),a1
0001C23A 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001C240 6D00                       		blt.s	loc_1862A
0001C242 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001C248 4A28 0001                  		tst.b	obRender(a0)
0001C24C 6A00                       		bpl.s	Obj73_FlameDel
0001C24E 6000                       		bra.s	loc_18636
0001C250                            ; ===========================================================================
0001C250                            
0001C250                            loc_1862A:
0001C250 4A69 0010                  		tst.w	obVelX(a1)
0001C254 6700                       		beq.s	loc_18636
0001C256 117C 0008 001C             		move.b	#8,obAnim(a0)
0001C25C                            
0001C25C                            loc_18636:
0001C25C 6000                       		bra.s	Obj73_Display
0001C25E                            ; ===========================================================================
0001C25E                            
0001C25E                            Obj73_FlameDel:
0001C25E 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001C264                            ; ===========================================================================
0001C264                            
0001C264                            Obj73_Display:
0001C264 43F9 0001 B8AC             		lea	(Ani_Eggman).l,a1
0001C26A 4EB9 0000 C862             		jsr	(AnimateSprite).l
0001C270                            
0001C270                            loc_1864A:
0001C270 2268 0034                  		movea.l	$34(a0),a1
0001C274 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C27A 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C280 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001C286 7003                       		moveq	#3,d0
0001C288 C028 0022                  		and.b	obStatus(a0),d0
0001C28C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C292 8128 0001                  		or.b	d0,obRender(a0)
0001C296 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001C29C                            ; ===========================================================================
0001C29C                            
0001C29C                            Obj73_TubeMain:	; Routine 8
0001C29C 2268 0034                  		movea.l	$34(a0),a1
0001C2A0 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001C2A6 6600                       		bne.s	loc_18688
0001C2A8 4A28 0001                  		tst.b	obRender(a0)
0001C2AC 6A00                       		bpl.s	Obj73_TubeDel
0001C2AE                            
0001C2AE                            loc_18688:
0001C2AE 217C 0001 B9EC 0004        		move.l	#Map_BossItems,obMap(a0)
0001C2B6 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001C2BC 117C 0004 001A             		move.b	#4,obFrame(a0)
0001C2C2 60AC                       		bra.s	loc_1864A
0001C2C4                            ; ===========================================================================
0001C2C4                            
0001C2C4                            Obj73_TubeDel:
0001C2C4 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001C2C4 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001C2CA                            		include	"_incObj\74 MZ Boss Fire.asm"
0001C2CA                            ; ---------------------------------------------------------------------------
0001C2CA                            ; Object 74 - lava that	Eggman drops (MZ)
0001C2CA                            ; ---------------------------------------------------------------------------
0001C2CA                            
0001C2CA                            BossFire:
0001C2CA 7000                       		moveq	#0,d0
0001C2CC 1028 0024                  		move.b	obRoutine(a0),d0
0001C2D0 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001C2D4 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001C2D8 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001C2DE                            ; ===========================================================================
0001C2DE 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001C2E0 0000                       		dc.w Obj74_Action-Obj74_Index
0001C2E2 0000                       		dc.w loc_18886-Obj74_Index
0001C2E4 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001C2E6                            ; ===========================================================================
0001C2E6                            
0001C2E6                            Obj74_Main:	; Routine 0
0001C2E6 117C 0008 0016             		move.b	#8,obHeight(a0)
0001C2EC 117C 0008 0017             		move.b	#8,obWidth(a0)
0001C2F2 217C 0000 D4B4 0004        		move.l	#Map_Fire,obMap(a0)
0001C2FA 317C 0345 0002             		move.w	#$345,obGfx(a0)
0001C300 117C 0004 0001             		move.b	#4,obRender(a0)
0001C306 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001C30C 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C312 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C318 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C31C 4A28 0028                  		tst.b	obSubtype(a0)
0001C320 6600                       		bne.s	loc_1870A
0001C322 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001C328 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C32C 6000 0000                  		bra.w	loc_18886
0001C330                            ; ===========================================================================
0001C330                            
0001C330                            loc_1870A:
0001C330 117C 001E 0029             		move.b	#$1E,$29(a0)
0001C340                            
0001C340                            Obj74_Action:	; Routine 2
0001C340 7000                       		moveq	#0,d0
0001C342 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C346 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001C34A 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001C34E 4EB9 0000 F798             		jsr	(SpeedToPos).l
0001C354 43F9 0001 0790             		lea	(Ani_Fire).l,a1
0001C35A 4EB9 0000 C862             		jsr	(AnimateSprite).l
0001C360 0C68 02E8 000C             		cmpi.w	#$2E8,obY(a0)
0001C366 6200                       		bhi.s	Obj74_Delete
0001C368 4E75                       		rts	
0001C36A                            ; ===========================================================================
0001C36A                            
0001C36A                            Obj74_Delete:
0001C36A 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001C370                            ; ===========================================================================
0001C370 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001C372 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001C374 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001C376 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001C378                            ; ===========================================================================
0001C378                            
0001C378                            Obj74_Drop:
0001C378 08E8 0001 0022             		bset	#1,obStatus(a0)
0001C37E 5328 0029                  		subq.b	#1,$29(a0)
0001C382 6A00                       		bpl.s	locret_18780
0001C384 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001C38A 4228 0028                  		clr.b	obSubtype(a0)
0001C38E 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C394 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001C39A 6100 C5E8                  		bsr.w	ObjFloorDist
0001C39E 4A41                       		tst.w	d1
0001C3A0 6A00                       		bpl.s	locret_18780
0001C3A2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C3A6                            
0001C3A6                            locret_18780:
0001C3A6 4E75                       		rts	
0001C3A8                            ; ===========================================================================
0001C3A8                            
0001C3A8                            Obj74_MakeFlame:
0001C3A8 5568 000C                  		subq.w	#2,obY(a0)
0001C3AC 08E8 0007 0002             		bset	#7,obGfx(a0)
0001C3B2 317C 00A0 0010             		move.w	#$A0,obVelX(a0)
0001C3B8 4268 0012                  		clr.w	obVelY(a0)
0001C3BC 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C3C2 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C3C8 117C 0003 0029             		move.b	#3,$29(a0)
0001C3CE 4EB9 0000 FD5C             		jsr	(FindNextFreeObj).l
0001C3D4 6600                       		bne.s	loc_187CA
0001C3D6 47D1                       		lea	(a1),a3
0001C3D8 45D0                       		lea	(a0),a2
0001C3DA 7003                       		moveq	#3,d0
0001C3DC                            
0001C3DC                            Obj74_Loop:
0001C3DC 26DA                       		move.l	(a2)+,(a3)+
0001C3DE 26DA                       		move.l	(a2)+,(a3)+
0001C3E0 26DA                       		move.l	(a2)+,(a3)+
0001C3E2 26DA                       		move.l	(a2)+,(a3)+
0001C3E4 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001C3E8                            
0001C3E8 4469 0010                  		neg.w	obVelX(a1)
0001C3EC 5429 0025                  		addq.b	#2,ob2ndRout(a1)
0001C3F0                            
0001C3F0                            loc_187CA:
0001C3F0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C3F4 4E75                       		rts	
0001C3F6                            
0001C3F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C3F6                            
0001C3F6                            
0001C3F6                            Obj74_Duplicate2:
0001C3F6 4EB9 0000 FD5C             		jsr	(FindNextFreeObj).l
0001C3FC 6600                       		bne.s	locret_187EE
0001C3FE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C404 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C40A 12BC 0074                  		move.b	#id_BossFire,(a1)
0001C40E 337C 0067 0028             		move.w	#$67,obSubtype(a1)
0001C414                            
0001C414                            locret_187EE:
0001C414 4E75                       		rts	
0001C416                            ; End of function Obj74_Duplicate2
0001C416                            
0001C416                            ; ===========================================================================
0001C416                            
0001C416                            Obj74_Duplicate:
0001C416 6100 C56C                  		bsr.w	ObjFloorDist
0001C41A 4A41                       		tst.w	d1
0001C41C 6A00                       		bpl.s	loc_18826
0001C41E 3028 0008                  		move.w	obX(a0),d0
0001C422 0C40 1940                  		cmpi.w	#$1940,d0
0001C426 6E00                       		bgt.s	loc_1882C
0001C428 3228 0030                  		move.w	$30(a0),d1
0001C42C B240                       		cmp.w	d0,d1
0001C42E 6700                       		beq.s	loc_1881E
0001C430 0240 0010                  		andi.w	#$10,d0
0001C434 0241 0010                  		andi.w	#$10,d1
0001C438 B240                       		cmp.w	d0,d1
0001C43A 6700                       		beq.s	loc_1881E
0001C43C 61B8                       		bsr.s	Obj74_Duplicate2
0001C43E 3168 0008 0032             		move.w	obX(a0),$32(a0)
0001C444                            
0001C444                            loc_1881E:
0001C444 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C44A 4E75                       		rts	
0001C44C                            ; ===========================================================================
0001C44C                            
0001C44C                            loc_18826:
0001C44C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C450 4E75                       		rts	
0001C452                            ; ===========================================================================
0001C452                            
0001C452                            loc_1882C:
0001C452 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C456 4E75                       		rts	
0001C458                            ; ===========================================================================
0001C458                            
0001C458                            Obj74_FallEdge:
0001C458 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001C45E 0668 0024 0012             		addi.w	#$24,obVelY(a0)	; make flame fall
0001C464 3028 0008                  		move.w	obX(a0),d0
0001C468 9068 0032                  		sub.w	$32(a0),d0
0001C46C 6A00                       		bpl.s	loc_1884A
0001C46E 4440                       		neg.w	d0
0001C470                            
0001C470                            loc_1884A:
0001C470 0C40 0012                  		cmpi.w	#$12,d0
0001C474 6600                       		bne.s	loc_18856
0001C476 08A8 0007 0002             		bclr	#7,obGfx(a0)
0001C47C                            
0001C47C                            loc_18856:
0001C47C 6100 C506                  		bsr.w	ObjFloorDist
0001C480 4A41                       		tst.w	d1
0001C482 6A00                       		bpl.s	locret_1887E
0001C484 5328 0029                  		subq.b	#1,$29(a0)
0001C488 6700                       		beq.s	Obj74_Delete2
0001C48A 4268 0012                  		clr.w	obVelY(a0)
0001C48E 3168 0032 0008             		move.w	$32(a0),obX(a0)
0001C494 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C49A 08E8 0007 0002             		bset	#7,obGfx(a0)
0001C4A0 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001C4A4                            
0001C4A4                            locret_1887E:
0001C4A4 4E75                       		rts	
0001C4A6                            ; ===========================================================================
0001C4A6                            
0001C4A6                            Obj74_Delete2:
0001C4A6 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001C4AC                            ; ===========================================================================
0001C4AC                            
0001C4AC                            loc_18886:	; Routine 4
0001C4AC 08E8 0007 0002             		bset	#7,obGfx(a0)
0001C4B2 5328 0029                  		subq.b	#1,$29(a0)
0001C4B6 6600                       		bne.s	Obj74_Animate
0001C4B8 117C 0001 001C             		move.b	#1,obAnim(a0)
0001C4BE 5968 000C                  		subq.w	#4,obY(a0)
0001C4C2 4228 0020                  		clr.b	obColType(a0)
0001C4C6                            
0001C4C6                            Obj74_Animate:
0001C4C6 43F9 0001 0790             		lea	(Ani_Fire).l,a1
0001C4CC 4EF9 0000 C862             		jmp	(AnimateSprite).l
0001C4D2                            ; ===========================================================================
0001C4D2                            
0001C4D2                            Obj74_Delete3:	; Routine 6
0001C4D2 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001C4D2 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001C4D8                            
0001C4D8                            	Obj7A_Delete:
0001C4D8 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001C4DE                            
0001C4DE                            		include	"_incObj\7A Boss - Star Light.asm"
0001C4DE                            ; ---------------------------------------------------------------------------
0001C4DE                            ; Object 7A - Eggman (SLZ)
0001C4DE                            ; ---------------------------------------------------------------------------
0001C4DE                            
0001C4DE                            BossStarLight:
0001C4DE 7000                       		moveq	#0,d0
0001C4E0 1028 0024                  		move.b	obRoutine(a0),d0
0001C4E4 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001C4E8 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001C4EC                            ; ===========================================================================
0001C4EC 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001C4EE 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001C4F0 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001C4F2 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001C4F4 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001C4F6                            
0001C4F6 0200 0200                  Obj7A_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001C4FA 0401 0200                  		dc.b 4,	1, $02, $00
0001C4FE 0607 0200                  		dc.b 6,	7, $02, $00
0001C502 0800 0180                  		dc.b 8,	0, $01, $80
0001C506                            ; ===========================================================================
0001C506                            
0001C506                            Obj7A_Main:
0001C506 317C 2188 0008             		move.w	#$2188,obX(a0)
0001C50C 317C 0228 000C             		move.w	#$228,obY(a0)
0001C512 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C518 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C51E 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C524 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001C52A 45FA FFCA                  		lea	Obj7A_ObjData(pc),a2
0001C52E 2248                       		movea.l	a0,a1
0001C530 7203                       		moveq	#3,d1
0001C532 6000                       		bra.s	Obj7A_LoadBoss
0001C534                            ; ===========================================================================
0001C534                            
0001C534                            Obj7A_Loop:
0001C534 4EB9 0000 FD5C             		jsr	(FindNextFreeObj).l
0001C53A 6600                       		bne.s	loc_1895C
0001C53C 12BC 007A                  		move.b	#id_BossStarLight,0(a1)
0001C540 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C546 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C54C                            
0001C54C                            Obj7A_LoadBoss:
0001C54C 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C552 4229 0025                  		clr.b	ob2ndRout(a1)
0001C556 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C55A 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C55E 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001C562 237C 0001 B8FC 0004        		move.l	#Map_Eggman,obMap(a1)
0001C56A 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001C570 137C 0004 0001             		move.b	#4,obRender(a1)
0001C576 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001C57C 2348 0034                  		move.l	a0,$34(a1)
0001C580 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001C584                            
0001C584                            loc_1895C:
0001C584 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C588 45E8 002A                  		lea	$2A(a0),a2
0001C58C 705E                       		moveq	#$5E,d0
0001C58E 723E                       		moveq	#$3E,d1
0001C590                            
0001C590                            loc_18968:
0001C590 B011                       		cmp.b	(a1),d0
0001C592 6600                       		bne.s	loc_18974
0001C594 4A29 0028                  		tst.b	obSubtype(a1)
0001C598 6700                       		beq.s	loc_18974
0001C59A 34C9                       		move.w	a1,(a2)+
0001C59C                            
0001C59C                            loc_18974:
0001C59C D2FC 0040                  		adda.w	#$40,a1
0001C5A0 51C9 FFEE                  		dbf	d1,loc_18968
0001C5A4                            
0001C5A4                            Obj7A_ShipMain:	; Routine 2
0001C5A4 7000                       		moveq	#0,d0
0001C5A6 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C5AA 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001C5AE 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001C5B2 43F9 0001 B8AC             		lea	(Ani_Eggman).l,a1
0001C5B8 4EB9 0000 C862             		jsr	(AnimateSprite).l
0001C5BE 7003                       		moveq	#3,d0
0001C5C0 C028 0022                  		and.b	obStatus(a0),d0
0001C5C4 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C5CA 8128 0001                  		or.b	d0,obRender(a0)
0001C5CE 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001C5D4                            ; ===========================================================================
0001C5D4 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001C5D6 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001C5D8 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001C5DA 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001C5DC 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001C5DE 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001C5E0                            ; ===========================================================================
0001C5E0                            
0001C5E0                            loc_189B8:
0001C5E0 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001C5E6 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001C5EC 6400                       		bcc.s	loc_189CA
0001C5EE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C5F2                            
0001C5F2                            loc_189CA:
0001C5F2 6100 EEA4                  		bsr.w	BossMove
0001C5F6 1028 003F                  		move.b	$3F(a0),d0
0001C5FA 5428 003F                  		addq.b	#2,$3F(a0)
0001C5FE 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001C604 EC40                       		asr.w	#6,d0
0001C606 D068 0038                  		add.w	$38(a0),d0
0001C60A 3140 000C                  		move.w	d0,obY(a0)
0001C60E 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C614 6000                       		bra.s	loc_189FE
0001C616                            ; ===========================================================================
0001C616                            
0001C616                            loc_189EE:
0001C616 6100 EE80                  		bsr.w	BossMove
0001C61A 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C620 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C626                            
0001C626                            loc_189FE:
0001C626 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001C62C 6400                       		bcc.s	locret_18A44
0001C62E 4A28 0022                  		tst.b	obStatus(a0)
0001C632 6B00                       		bmi.s	loc_18A46
0001C634 4A28 0020                  		tst.b	obColType(a0)
0001C638 6600                       		bne.s	locret_18A44
0001C63A 4A28 003E                  		tst.b	$3E(a0)
0001C63E 6600                       		bne.s	loc_18A28
0001C640 117C 0020 003E             		move.b	#$20,$3E(a0)
0001C650                            
0001C650                            loc_18A28:
0001C650 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001C654 7000                       		moveq	#0,d0
0001C656 4A51                       		tst.w	(a1)
0001C658 6600                       		bne.s	loc_18A36
0001C65A 303C 0EEE                  		move.w	#cWhite,d0
0001C65E                            
0001C65E                            loc_18A36:
0001C65E 3280                       		move.w	d0,(a1)
0001C660 5328 003E                  		subq.b	#1,$3E(a0)
0001C664 6600                       		bne.s	locret_18A44
0001C666 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C66C                            
0001C66C                            locret_18A44:
0001C66C 4E75                       		rts	
0001C66E                            ; ===========================================================================
0001C66E                            
0001C66E                            loc_18A46:
0001C66E 7064                       		moveq	#100,d0
0001C670 6100 0000                  		bsr.w	AddPoints
0001C674 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001C67A 117C 0078 003C             		move.b	#$78,$3C(a0)
0001C680 4268 0010                  		clr.w	obVelX(a0)
0001C684 4E75                       		rts	
0001C686                            ; ===========================================================================
0001C686                            
0001C686                            loc_18A5E:
0001C686 3028 0030                  		move.w	$30(a0),d0
0001C68A 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001C690 0828 0000 0022             		btst	#0,obStatus(a0)
0001C696 6600                       		bne.s	loc_18A7C
0001C698 4468 0010                  		neg.w	obVelX(a0)
0001C69C 0C40 2008                  		cmpi.w	#$2008,d0
0001C6A0 6E00                       		bgt.s	loc_18A88
0001C6A2 6000                       		bra.s	loc_18A82
0001C6A4                            ; ===========================================================================
0001C6A4                            
0001C6A4                            loc_18A7C:
0001C6A4 0C40 2138                  		cmpi.w	#$2138,d0
0001C6A8 6D00                       		blt.s	loc_18A88
0001C6AA                            
0001C6AA                            loc_18A82:
0001C6AA 0868 0000 0022             		bchg	#0,obStatus(a0)
0001C6B0                            
0001C6B0                            loc_18A88:
0001C6B0 3028 0008                  		move.w	8(a0),d0
0001C6B4 72FF                       		moveq	#-1,d1
0001C6B6 7402                       		moveq	#2,d2
0001C6B8 45E8 002A                  		lea	$2A(a0),a2
0001C6BC 7828                       		moveq	#$28,d4
0001C6BE 4A68 0010                  		tst.w	obVelX(a0)
0001C6C2 6A00                       		bpl.s	loc_18A9E
0001C6C4 4444                       		neg.w	d4
0001C6C6                            
0001C6C6                            loc_18A9E:
0001C6C6 321A                       		move.w	(a2)+,d1
0001C6C8 2641                       		movea.l	d1,a3
0001C6CA 082B 0003 0022             		btst	#3,obStatus(a3)
0001C6D0 6600                       		bne.s	loc_18AB4
0001C6D2 362B 0008                  		move.w	8(a3),d3
0001C6D6 D644                       		add.w	d4,d3
0001C6D8 9640                       		sub.w	d0,d3
0001C6DA 6700                       		beq.s	loc_18AC0
0001C6DC                            
0001C6DC                            loc_18AB4:
0001C6DC 51CA FFE8                  		dbf	d2,loc_18A9E
0001C6E0                            
0001C6E0 1142 0028                  		move.b	d2,obSubtype(a0)
0001C6E4 6000 FF0C                  		bra.w	loc_189CA
0001C6E8                            ; ===========================================================================
0001C6E8                            
0001C6E8                            loc_18AC0:
0001C6E8 1142 0028                  		move.b	d2,obSubtype(a0)
0001C6EC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C6F0 117C 0028 003C             		move.b	#$28,$3C(a0)
0001C6F6 6000 FEFA                  		bra.w	loc_189CA
0001C6FA                            ; ===========================================================================
0001C6FA                            
0001C6FA                            Obj7A_MakeBall:
0001C6FA 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001C700 6600                       		bne.s	loc_18B36
0001C702 70FF                       		moveq	#-1,d0
0001C704 1028 0028                  		move.b	obSubtype(a0),d0
0001C708 4880                       		ext.w	d0
0001C70A 6B00                       		bmi.s	loc_18B40
0001C70C 5540                       		subq.w	#2,d0
0001C70E 4440                       		neg.w	d0
0001C710 D040                       		add.w	d0,d0
0001C712 43E8 002A                  		lea	$2A(a0),a1
0001C716 3031 0000                  		move.w	(a1,d0.w),d0
0001C71A 2440                       		movea.l	d0,a2
0001C71C 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C720 723E                       		moveq	#$3E,d1
0001C722                            
0001C722                            loc_18AFA:
0001C722 B0A9 003C                  		cmp.l	$3C(a1),d0
0001C726 6700                       		beq.s	loc_18B40
0001C728 D2FC 0040                  		adda.w	#$40,a1
0001C72C 51C9 FFF4                  		dbf	d1,loc_18AFA
0001C730                            
0001C730 2F08                       		move.l	a0,-(sp)
0001C732 41D2                       		lea	(a2),a0
0001C734 4EB9 0000 FD5C             		jsr	(FindNextFreeObj).l
0001C73A 205F                       		movea.l	(sp)+,a0
0001C73C 6600                       		bne.s	loc_18B40
0001C73E 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load spiked ball object
0001C742 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C748 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C74E 0669 0020 000C             		addi.w	#$20,obY(a1)
0001C754 136A 0022 0022             		move.b	obStatus(a2),obStatus(a1)
0001C75A 234A 003C                  		move.l	a2,$3C(a1)
0001C75E                            
0001C75E                            loc_18B36:
0001C75E 5328 003C                  		subq.b	#1,$3C(a0)
0001C762 6700                       		beq.s	loc_18B40
0001C764 6000 FEC0                  		bra.w	loc_189FE
0001C768                            ; ===========================================================================
0001C768                            
0001C768                            loc_18B40:
0001C768 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001C76C 6000 FE84                  		bra.w	loc_189CA
0001C770                            ; ===========================================================================
0001C770                            
0001C770                            loc_18B48:
0001C770 5328 003C                  		subq.b	#1,$3C(a0)
0001C774 6B00                       		bmi.s	loc_18B52
0001C776 6000 ECDE                  		bra.w	BossDefeated
0001C77A                            ; ===========================================================================
0001C77A                            
0001C77A                            loc_18B52:
0001C77A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C77E 4268 0012                  		clr.w	obVelY(a0)
0001C782 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C788 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001C78E 4268 0010                  		clr.w	obVelX(a0)
0001C792 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001C798 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001C79C 6600                       		bne.s	loc_18B7C
0001C79E 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001C7A4                            
0001C7A4                            loc_18B7C:
0001C7A4 6000 FE80                  		bra.w	loc_189FE
0001C7A8                            ; ===========================================================================
0001C7A8                            
0001C7A8                            loc_18B80:
0001C7A8 5228 003C                  		addq.b	#1,$3C(a0)
0001C7AC 6700                       		beq.s	loc_18B90
0001C7AE 6A00                       		bpl.s	loc_18B96
0001C7B0 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C7B6 6000                       		bra.s	loc_18BC2
0001C7B8                            ; ===========================================================================
0001C7B8                            
0001C7B8                            loc_18B90:
0001C7B8 4268 0012                  		clr.w	obVelY(a0)
0001C7BC 6000                       		bra.s	loc_18BC2
0001C7BE                            ; ===========================================================================
0001C7BE                            
0001C7BE                            loc_18B96:
0001C7BE 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001C7C4 6500                       		bcs.s	loc_18BAE
0001C7C6 6700                       		beq.s	loc_18BB4
0001C7C8 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001C7CE 6500                       		bcs.s	loc_18BC2
0001C7D0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C7D4 6000                       		bra.s	loc_18BC2
0001C7D6                            ; ===========================================================================
0001C7D6                            
0001C7D6                            loc_18BAE:
0001C7D6 5168 0012                  		subq.w	#8,obVelY(a0)
0001C7DA 6000                       		bra.s	loc_18BC2
0001C7DC                            ; ===========================================================================
0001C7DC                            
0001C7DC                            loc_18BB4:
0001C7DC 4268 0012                          	clr.w    obVelY(a0)
0001C7E0 4A38 FE2D                          	tst.b     (v_invinc).w
0001C7E4 6600                               	bne.s   @boss_invinc
0001C7E6                            
0001C7E6 1038 F5C6                          	move.b   (v_Saved_music),d0
0001C7EA 6000 0000                          	bra.w      @boss_play
0001C7EE                            
0001C7EE                            	@boss_invinc:
0001C7EE 103C 0000                          	move.b #bgm_Invincible,d0
0001C7F2                            
0001C7F2                            	@boss_play:
0001C7F2 4EB8 129A                          	jsr PlaySound
0001C7F6                            
0001C7F6                            loc_18BC2:
0001C7F6 6000 FE1E                  		bra.w	loc_189EE
0001C7FA                            ; ===========================================================================
0001C7FA                            
0001C7FA                            loc_18BC6:
0001C7FA 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001C800 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001C806 0C78 2160 F72A             		cmpi.w	#$2160,(v_limitright2).w
0001C80C 6400                       		bcc.s	loc_18BE0
0001C80E 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001C812 6000                       		bra.s	loc_18BE8
0001C814                            ; ===========================================================================
0001C814                            
0001C814                            loc_18BE0:
0001C814 4A28 0001                  		tst.b	obRender(a0)
0001C818 6A00 FCBE                  		bpl.w	Obj7A_Delete
0001C81C                            
0001C81C                            loc_18BE8:
0001C81C 6100 EC7A                  		bsr.w	BossMove
0001C820 6000 FDD0                  		bra.w	loc_189CA
0001C824                            ; ===========================================================================
0001C824                            
0001C824                            Obj7A_FaceMain:	; Routine 4
0001C824 7000                       		moveq	#0,d0
0001C826 7201                       		moveq	#1,d1
0001C828 2268 0034                  		movea.l	$34(a0),a1
0001C82C 1029 0025                  		move.b	ob2ndRout(a1),d0
0001C830 0C00 0006                  		cmpi.b	#6,d0
0001C834 6B00                       		bmi.s	loc_18C06
0001C836 720A                       		moveq	#$A,d1
0001C838 6000                       		bra.s	loc_18C1A
0001C83A                            ; ===========================================================================
0001C83A                            
0001C83A                            loc_18C06:
0001C83A 4A29 0020                  		tst.b	obColType(a1)
0001C83E 6600                       		bne.s	loc_18C10
0001C840 7205                       		moveq	#5,d1
0001C842 6000                       		bra.s	loc_18C1A
0001C844                            ; ===========================================================================
0001C844                            
0001C844                            loc_18C10:
0001C844 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001C84A 6500                       		bcs.s	loc_18C1A
0001C84C 7204                       		moveq	#4,d1
0001C84E                            
0001C84E                            loc_18C1A:
0001C84E 1141 001C                  		move.b	d1,obAnim(a0)
0001C852 0C00 000A                  		cmpi.b	#$A,d0
0001C856 6600                       		bne.s	loc_18C32
0001C858 117C 0006 001C             		move.b	#6,obAnim(a0)
0001C85E 4A28 0001                  		tst.b	obRender(a0)
0001C862 6A00 FC74                  		bpl.w	Obj7A_Delete
0001C866                            
0001C866                            loc_18C32:
0001C866 6000                       		bra.s	loc_18C6C
0001C868                            ; ===========================================================================
0001C868                            
0001C868                            Obj7A_FlameMain:; Routine 6
0001C868 117C 0008 001C             		move.b	#8,obAnim(a0)
0001C86E 2268 0034                  		movea.l	$34(a0),a1
0001C872 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C878 6600                       		bne.s	loc_18C56
0001C87A 4A28 0001                  		tst.b	obRender(a0)
0001C87E 6A00 FC58                  		bpl.w	Obj7A_Delete
0001C882 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001C888 6000                       		bra.s	loc_18C6C
0001C88A                            ; ===========================================================================
0001C88A                            
0001C88A                            loc_18C56:
0001C88A 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001C890 6E00                       		bgt.s	loc_18C6C
0001C892 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001C898 6D00                       		blt.s	loc_18C6C
0001C89A 117C 0007 001C             		move.b	#7,obAnim(a0)
0001C8A0                            
0001C8A0                            loc_18C6C:
0001C8A0 43F9 0001 B8AC             		lea	(Ani_Eggman).l,a1
0001C8A6 4EB9 0000 C862             		jsr	(AnimateSprite).l
0001C8AC                            
0001C8AC                            loc_18C78:
0001C8AC 2268 0034                  		movea.l	$34(a0),a1
0001C8B0 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C8B6 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C8BC 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001C8C2 7003                       		moveq	#3,d0
0001C8C4 C028 0022                  		and.b	obStatus(a0),d0
0001C8C8 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C8CE 8128 0001                  		or.b	d0,obRender(a0)
0001C8D2 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001C8D8                            ; ===========================================================================
0001C8D8                            
0001C8D8                            Obj7A_TubeMain:	; Routine 8
0001C8D8 2268 0034                  		movea.l	$34(a0),a1
0001C8DC 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C8E2 6600                       		bne.s	loc_18CB8
0001C8E4 4A28 0001                  		tst.b	obRender(a0)
0001C8E8 6A00 FBEE                  		bpl.w	Obj7A_Delete
0001C8EC                            
0001C8EC                            loc_18CB8:
0001C8EC 217C 0001 B9EC 0004        		move.l	#Map_BossItems,obMap(a0)
0001C8F4 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001C8FA 117C 0003 001A             		move.b	#3,obFrame(a0)
0001C900 60AA                       		bra.s	loc_18C78
0001C900 60AA                       		bra.s	loc_18C78
0001C902                            		include	"_incObj\7B SLZ Boss Spikeball.asm"
0001C902                            ; ---------------------------------------------------------------------------
0001C902                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001C902                            ; ---------------------------------------------------------------------------
0001C902                            
0001C902                            BossSpikeball:
0001C902 7000                       		moveq	#0,d0
0001C904 1028 0024                  		move.b	obRoutine(a0),d0
0001C908 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001C90C 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001C910 3028 0030                  		move.w	$30(a0),d0
0001C914 0240 FF80                  		andi.w	#$FF80,d0
0001C918 3238 F700                  		move.w	(v_screenposx).w,d1
0001C91C 0441 0080                  		subi.w	#$80,d1
0001C920 0241 FF80                  		andi.w	#$FF80,d1
0001C924 9041                       		sub.w	d1,d0
0001C926 6B00 FBB0                  		bmi.w	Obj7A_Delete
0001C92A 0C40 0280                  		cmpi.w	#$280,d0
0001C92E 6200 FBA8                  		bhi.w	Obj7A_Delete
0001C932 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001C938                            ; ===========================================================================
0001C938 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001C93A 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001C93C 0000                       		dc.w loc_18DC6-Obj7B_Index
0001C93E 0000                       		dc.w loc_18EAA-Obj7B_Index
0001C940 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001C942 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001C944                            ; ===========================================================================
0001C944                            
0001C944                            Obj7B_Main:	; Routine 0
0001C944 217C 0001 3D6C 0004        		move.l	#Map_SSawBall,obMap(a0)
0001C94C 317C 0518 0002             		move.w	#$518,obGfx(a0)
0001C952 117C 0001 001A             		move.b	#1,obFrame(a0)
0001C958 0028 0004 0001             		ori.b	#4,obRender(a0)
0001C95E 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001C964 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001C96A 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001C970 2268 003C                  		movea.l	$3C(a0),a1
0001C974 3169 0008 0030             		move.w	obX(a1),$30(a0)
0001C97A 3169 000C 0034             		move.w	obY(a1),$34(a0)
0001C980 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C986 3028 0008                  		move.w	obX(a0),d0
0001C98A B069 0008                  		cmp.w	obX(a1),d0
0001C98E 6E00                       		bgt.s	loc_18D68
0001C990 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C996 117C 0002 003A             		move.b	#2,$3A(a0)
0001C99C                            
0001C99C                            loc_18D68:
0001C99C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C9A0                            
0001C9A0                            Obj7B_Fall:	; Routine 2
0001C9A0 4EB9 0000 F760             		jsr	(ObjectFall).l
0001C9A6 2268 003C                  		movea.l	$3C(a0),a1
0001C9AA 45F9 0000 0000             		lea	(word_19018).l,a2
0001C9B0 7000                       		moveq	#0,d0
0001C9B2 1029 001A                  		move.b	obFrame(a1),d0
0001C9B6 3228 0008                  		move.w	8(a0),d1
0001C9BA 9268 0030                  		sub.w	$30(a0),d1
0001C9BE 6400                       		bcc.s	loc_18D8E
0001C9C0 5440                       		addq.w	#2,d0
0001C9C2                            
0001C9C2                            loc_18D8E:
0001C9C2 D040                       		add.w	d0,d0
0001C9C4 3228 0034                  		move.w	$34(a0),d1
0001C9C8 D272 0000                  		add.w	(a2,d0.w),d1
0001C9CC B268 000C                  		cmp.w	obY(a0),d1
0001C9D0 6E00                       		bgt.s	locret_18DC4
0001C9D2 2268 003C                  		movea.l	$3C(a0),a1
0001C9D6 7202                       		moveq	#2,d1
0001C9D8 0828 0000 0022             		btst	#0,obStatus(a0)
0001C9DE 6700                       		beq.s	loc_18DAE
0001C9E0 7200                       		moveq	#0,d1
0001C9E2                            
0001C9E2                            loc_18DAE:
0001C9E2 317C 00F0 0028             		move.w	#$F0,obSubtype(a0)
0001C9E8 117C 000A 001F             		move.b	#10,obDelayAni(a0)	; set frame duration to	10 frames
0001C9EE 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001C9F4 6000 0000                  		bra.w	loc_18FA2
0001C9F8                            ; ===========================================================================
0001C9F8                            
0001C9F8                            locret_18DC4:
0001C9F8 4E75                       		rts	
0001C9FA                            ; ===========================================================================
0001C9FA                            
0001C9FA                            loc_18DC6:	; Routine 4
0001C9FA 2268 003C                  		movea.l	$3C(a0),a1
0001C9FE 7000                       		moveq	#0,d0
0001CA00 1028 003A                  		move.b	$3A(a0),d0
0001CA04 9029 003A                  		sub.b	$3A(a1),d0
0001CA08 6700                       		beq.s	loc_18E2A
0001CA0A 6400                       		bcc.s	loc_18DDA
0001CA0C 4400                       		neg.b	d0
0001CA0E                            
0001CA0E                            loc_18DDA:
0001CA0E 323C F7E8                  		move.w	#-$818,d1
0001CA12 343C FEEC                  		move.w	#-$114,d2
0001CA16 0C00 0001                  		cmpi.b	#1,d0
0001CA1A 6700                       		beq.s	loc_18E00
0001CA1C 323C F6A0                  		move.w	#-$960,d1
0001CA20 343C FF0C                  		move.w	#-$F4,d2
0001CA24 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001CA2A 6D00                       		blt.s	loc_18E00
0001CA2C 323C F5E0                  		move.w	#-$A20,d1
0001CA30 343C FF80                  		move.w	#-$80,d2
0001CA34                            
0001CA34                            loc_18E00:
0001CA34 3141 0012                  		move.w	d1,obVelY(a0)
0001CA38 3142 0010                  		move.w	d2,obVelX(a0)
0001CA3C 3028 0008                  		move.w	obX(a0),d0
0001CA40 9068 0030                  		sub.w	$30(a0),d0
0001CA44 6400                       		bcc.s	loc_18E16
0001CA46 4468 0010                  		neg.w	obVelX(a0)
0001CA4A                            
0001CA4A                            loc_18E16:
0001CA4A 117C 0001 001A             		move.b	#1,obFrame(a0)
0001CA50 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001CA56 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CA5A 6000 0000                  		bra.w	loc_18EAA
0001CA5E                            ; ===========================================================================
0001CA5E                            
0001CA5E                            loc_18E2A:
0001CA5E 45F9 0000 0000             		lea	(word_19018).l,a2
0001CA64 7000                       		moveq	#0,d0
0001CA66 1029 001A                  		move.b	obFrame(a1),d0
0001CA6A 343C 0028                  		move.w	#$28,d2
0001CA6E 3228 0008                  		move.w	obX(a0),d1
0001CA72 9268 0030                  		sub.w	$30(a0),d1
0001CA76 6400                       		bcc.s	loc_18E48
0001CA78 4442                       		neg.w	d2
0001CA7A 5440                       		addq.w	#2,d0
0001CA7C                            
0001CA7C                            loc_18E48:
0001CA7C D040                       		add.w	d0,d0
0001CA7E 3228 0034                  		move.w	$34(a0),d1
0001CA82 D272 0000                  		add.w	(a2,d0.w),d1
0001CA86 3141 000C                  		move.w	d1,obY(a0)
0001CA8A D468 0030                  		add.w	$30(a0),d2
0001CA8E 3142 0008                  		move.w	d2,obX(a0)
0001CA92 4268 000E                  		clr.w	obY+2(a0)
0001CA96 4268 000A                  		clr.w	obX+2(a0)
0001CA9A 5368 0028                  		subq.w	#1,obSubtype(a0)
0001CA9E 6600                       		bne.s	loc_18E7A
0001CAA0 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001CAA6 117C 0008 0024             		move.b	#8,obRoutine(a0)
0001CAAC 4E75                       		rts	
0001CAAE                            ; ===========================================================================
0001CAAE                            
0001CAAE                            loc_18E7A:
0001CAAE 0C68 0078 0028             		cmpi.w	#$78,obSubtype(a0)
0001CAB4 6600                       		bne.s	loc_18E88
0001CAB6 117C 0005 001F             		move.b	#5,obDelayAni(a0)
0001CABC                            
0001CABC                            loc_18E88:
0001CABC 0C68 003C 0028             		cmpi.w	#$3C,obSubtype(a0)
0001CAC2 6600                       		bne.s	loc_18E96
0001CAC4 117C 0002 001F             		move.b	#2,obDelayAni(a0)
0001CACA                            
0001CACA                            loc_18E96:
0001CACA 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001CACE 6E00                       		bgt.s	locret_18EA8
0001CAD0 0868 0000 001A             		bchg	#0,obFrame(a0)
0001CAD6 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001CADC                            
0001CADC                            locret_18EA8:
0001CADC 4E75                       		rts	
0001CADE                            ; ===========================================================================
0001CADE                            
0001CADE                            loc_18EAA:	; Routine 6
0001CADE 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001CAE2 707A                       		moveq	#id_BossStarLight,d0
0001CAE4 7240                       		moveq	#$40,d1
0001CAE6 743E                       		moveq	#$3E,d2
0001CAE8                            
0001CAE8                            loc_18EB4:
0001CAE8 B011                       		cmp.b	(a1),d0
0001CAEA 6700                       		beq.s	loc_18EC0
0001CAEC D2C1                       		adda.w	d1,a1
0001CAEE 51CA FFF8                  		dbf	d2,loc_18EB4
0001CAF2                            
0001CAF2 6000                       		bra.s	loc_18F38
0001CAF4                            ; ===========================================================================
0001CAF4                            
0001CAF4                            loc_18EC0:
0001CAF4 3029 0008                  		move.w	obX(a1),d0
0001CAF8 3229 000C                  		move.w	obY(a1),d1
0001CAFC 3428 0008                  		move.w	obX(a0),d2
0001CB00 3628 000C                  		move.w	obY(a0),d3
0001CB04 45FA 0000                  		lea	byte_19022(pc),a2
0001CB08 47FA 0000                  		lea	byte_19026(pc),a3
0001CB0C 181A                       		move.b	(a2)+,d4
0001CB0E 4884                       		ext.w	d4
0001CB10 D044                       		add.w	d4,d0
0001CB12 181B                       		move.b	(a3)+,d4
0001CB14 4884                       		ext.w	d4
0001CB16 D444                       		add.w	d4,d2
0001CB18 B440                       		cmp.w	d0,d2
0001CB1A 6500                       		bcs.s	loc_18F38
0001CB1C 181A                       		move.b	(a2)+,d4
0001CB1E 4884                       		ext.w	d4
0001CB20 D044                       		add.w	d4,d0
0001CB22 181B                       		move.b	(a3)+,d4
0001CB24 4884                       		ext.w	d4
0001CB26 D444                       		add.w	d4,d2
0001CB28 B042                       		cmp.w	d2,d0
0001CB2A 6500                       		bcs.s	loc_18F38
0001CB2C 181A                       		move.b	(a2)+,d4
0001CB2E 4884                       		ext.w	d4
0001CB30 D244                       		add.w	d4,d1
0001CB32 181B                       		move.b	(a3)+,d4
0001CB34 4884                       		ext.w	d4
0001CB36 D644                       		add.w	d4,d3
0001CB38 B641                       		cmp.w	d1,d3
0001CB3A 6500                       		bcs.s	loc_18F38
0001CB3C 181A                       		move.b	(a2)+,d4
0001CB3E 4884                       		ext.w	d4
0001CB40 D244                       		add.w	d4,d1
0001CB42 181B                       		move.b	(a3)+,d4
0001CB44 4884                       		ext.w	d4
0001CB46 D644                       		add.w	d4,d3
0001CB48 B243                       		cmp.w	d3,d1
0001CB4A 6500                       		bcs.s	loc_18F38
0001CB4C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CB50 4268 0028                  		clr.w	obSubtype(a0)
0001CB54 4229 0020                  		clr.b	obColType(a1)
0001CB58 5329 0021                  		subq.b	#1,obColProp(a1)
0001CB5C 6600                       		bne.s	loc_18F38
0001CB5E 08E9 0007 0022             		bset	#7,obStatus(a1)
0001CB64 4268 0010                  		clr.w	obVelX(a0)
0001CB68 4268 0012                  		clr.w	obVelY(a0)
0001CB6C                            
0001CB6C                            loc_18F38:
0001CB6C 4A68 0012                  		tst.w	obVelY(a0)
0001CB70 6A00                       		bpl.s	loc_18F5C
0001CB72 4EB9 0000 F760             		jsr	(ObjectFall).l
0001CB78 3028 0034                  		move.w	$34(a0),d0
0001CB7C 0440 002F                  		subi.w	#$2F,d0
0001CB80 B068 000C                  		cmp.w	obY(a0),d0
0001CB84 6E00                       		bgt.s	loc_18F58
0001CB86 4EB9 0000 F760             		jsr	(ObjectFall).l
0001CB8C                            
0001CB8C                            loc_18F58:
0001CB8C 6000 FF20                  		bra.w	loc_18E7A
0001CB90                            ; ===========================================================================
0001CB90                            
0001CB90                            loc_18F5C:
0001CB90 4EB9 0000 F760             		jsr	(ObjectFall).l
0001CB96 2268 003C                  		movea.l	$3C(a0),a1
0001CB9A 45F9 0000 0000             		lea	(word_19018).l,a2
0001CBA0 7000                       		moveq	#0,d0
0001CBA2 1029 001A                  		move.b	obFrame(a1),d0
0001CBA6 3228 0008                  		move.w	obX(a0),d1
0001CBAA 9268 0030                  		sub.w	$30(a0),d1
0001CBAE 6400                       		bcc.s	loc_18F7E
0001CBB0 5440                       		addq.w	#2,d0
0001CBB2                            
0001CBB2                            loc_18F7E:
0001CBB2 D040                       		add.w	d0,d0
0001CBB4 3228 0034                  		move.w	$34(a0),d1
0001CBB8 D272 0000                  		add.w	(a2,d0.w),d1
0001CBBC B268 000C                  		cmp.w	obY(a0),d1
0001CBC0 6ECA                       		bgt.s	loc_18F58
0001CBC2 2268 003C                  		movea.l	$3C(a0),a1
0001CBC6 7202                       		moveq	#2,d1
0001CBC8 4A68 0010                  		tst.w	obVelX(a0)
0001CBCC 6B00                       		bmi.s	loc_18F9C
0001CBCE 7200                       		moveq	#0,d1
0001CBD0                            
0001CBD0                            loc_18F9C:
0001CBD0 317C 0000 0028             		move.w	#0,obSubtype(a0)
0001CBD6                            
0001CBD6                            loc_18FA2:
0001CBD6 1341 003A                  		move.b	d1,$3A(a1)
0001CBDA 1141 003A                  		move.b	d1,$3A(a0)
0001CBDE B229 001A                  		cmp.b	obFrame(a1),d1
0001CBE2 6700                       		beq.s	loc_19008
0001CBE4 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001CBEA 6700                       		beq.s	loc_19008
0001CBEC 4229 0025                  		clr.b	ob2ndRout(a1)
0001CBF0 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001CBF6 45F8 D000                  		lea	(v_objspace).w,a2
0001CBFA 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
0001CC00 446A 0012                  		neg.w	obVelY(a2)
0001CC04 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0001CC0A 6600                       		bne.s	loc_18FDC
0001CC0C E0EA 0012                  		asr	obVelY(a2)
0001CC10                            
0001CC10                            loc_18FDC:
0001CC10 08EA 0001 0022             		bset	#1,obStatus(a2)
0001CC16 08AA 0003 0022             		bclr	#3,obStatus(a2)
0001CC1C 422A 003C                  		clr.b	$3C(a2)
0001CC20 2F08                       		move.l	a0,-(sp)
0001CC22 41D2                       		lea	(a2),a0
0001CC24 4EB9 0001 617A             		jsr	(Sonic_ChkRoll).l
0001CC2A 205F                       		movea.l	(sp)+,a0
0001CC2C 157C 0002 0024             		move.b	#2,obRoutine(a2)
0001CC3C                            
0001CC3C                            loc_19008:
0001CC3C 4268 0010                  		clr.w	obVelX(a0)
0001CC40 4268 0012                  		clr.w	obVelY(a0)
0001CC44 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CC48 6000 FE64                  		bra.w	loc_18E7A
0001CC4C                            ; ===========================================================================
0001CC4C FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w -8, -$1C, -$2F, -$1C, -8
0001CC56                            		even
0001CC56 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001CC5A                            		even
0001CC5A 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001CC5E                            		even
0001CC5E                            ; ===========================================================================
0001CC5E                            
0001CC5E                            Obj7B_Explode:	; Routine 8
0001CC5E 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001CC62 4228 0024                  		clr.b	obRoutine(a0)
0001CC66 0C68 0020 0028             		cmpi.w	#$20,obSubtype(a0)
0001CC6C 6700                       		beq.s	Obj7B_MakeFrag
0001CC6E 4E75                       		rts	
0001CC70                            ; ===========================================================================
0001CC70                            
0001CC70                            Obj7B_MakeFrag:
0001CC70 3168 0034 000C             		move.w	$34(a0),obY(a0)
0001CC76 7203                       		moveq	#3,d1
0001CC78 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001CC7C                            
0001CC7C                            Obj7B_Loop:
0001CC7C 4EB9 0000 FD46             		jsr	(FindFreeObj).l
0001CC82 6600                       		bne.s	loc_1909A
0001CC84 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load shrapnel object
0001CC88 137C 000A 0024             		move.b	#$A,obRoutine(a1)
0001CC8E 237C 0000 0000 0004        		move.l	#Map_BSBall,obMap(a1)
0001CC96 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001CC9C 337C 0518 0002             		move.w	#$518,obGfx(a1)
0001CCA2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001CCA8 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001CCAE 335A 0010                  		move.w	(a2)+,obVelX(a1)
0001CCB2 335A 0012                  		move.w	(a2)+,obVelY(a1)
0001CCB6 137C 0098 0020             		move.b	#$98,obColType(a1)
0001CCBC 0029 0004 0001             		ori.b	#4,obRender(a1)
0001CCC2 08E9 0007 0001             		bset	#7,obRender(a1)
0001CCC8 137C 000C 0014             		move.b	#$C,obActWid(a1)
0001CCCE                            
0001CCCE                            loc_1909A:
0001CCCE 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001CCD2                            
0001CCD2 4E75                       		rts	
0001CCD4                            ; ===========================================================================
0001CCD4 FF00 FCC0                  Obj7B_FragSpeed:dc.w -$100, -$340	; horizontal, vertical
0001CCD8 FF60 FDC0                  		dc.w -$A0, -$240
0001CCDC 0100 FCC0                  		dc.w $100, -$340
0001CCE0 00A0 FDC0                  		dc.w $A0, -$240
0001CCE4                            ; ===========================================================================
0001CCE4                            
0001CCE4                            Obj7B_MoveFrag:	; Routine $A
0001CCE4 4EB9 0000 F798             		jsr	(SpeedToPos).l
0001CCEA 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001CCF0 3168 000C 0034             		move.w	obY(a0),$34(a0)
0001CCF6 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001CCFC 7004                       		moveq	#4,d0
0001CCFE C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001CD02 E448                       		lsr.w	#2,d0
0001CD04 1140 001A                  		move.b	d0,obFrame(a0)
0001CD08 4A28 0001                  		tst.b	1(a0)
0001CD0C 6A00 F7CA                  		bpl.w	Obj7A_Delete
0001CD10 4E75                       		rts	
0001CD10 4E75                       		rts	
0001CD12                            Map_BSBall:	include	"_maps\SLZ Boss Spikeball.asm"
0001CD12                            ; ---------------------------------------------------------------------------
0001CD12                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001CD12                            ; ---------------------------------------------------------------------------
0001CD12                            Map_BSBall_internal:
0001CD12 0000                       		dc.w @fireball1-Map_BSBall_internal
0001CD14 0000                       		dc.w @fireball2-Map_BSBall_internal
0001CD16 01                         @fireball1:	dc.b 1
0001CD17 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001CD1C 01                         @fireball2:	dc.b 1
0001CD1D FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001CD22                            		even
0001CD22                            		even
0001CD22                            		include	"_incObj\75 Boss - Spring Yard.asm"
0001CD22                            ; ---------------------------------------------------------------------------
0001CD22                            ; Object 75 - Eggman (SYZ)
0001CD22                            ; ---------------------------------------------------------------------------
0001CD22                            
0001CD22                            BossSpringYard:
0001CD22 7000                       		moveq	#0,d0
0001CD24 1028 0024                  		move.b	obRoutine(a0),d0
0001CD28 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001CD2C 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001CD30                            ; ===========================================================================
0001CD30 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001CD32 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001CD34 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001CD36 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001CD38 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001CD3A                            
0001CD3A 0200 0280                  Obj75_ObjData:	dc.b 2,	0, $02, $80		; routine number, animation, priority (high and low bytes)
0001CD3E 0401 0280                  		dc.b 4,	1, $02, $80
0001CD42 0607 0280                  		dc.b 6,	7, $02, $80
0001CD46 0800 0280                  		dc.b 8,	0, $02, $80
0001CD4A                            ; ===========================================================================
0001CD4A                            
0001CD4A                            Obj75_Main:	; Routine 0
0001CD4A 317C 2DB0 0008             		move.w	#$2DB0,obX(a0)
0001CD50 317C 04DA 000C             		move.w	#$4DA,obY(a0)
0001CD56 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001CD5C 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001CD62 117C 000F 0020             		move.b	#$F,obColType(a0)
0001CD68 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001CD6E 45FA FFCA                  		lea	Obj75_ObjData(pc),a2
0001CD72 2248                       		movea.l	a0,a1
0001CD74 7203                       		moveq	#3,d1
0001CD76 6000                       		bra.s	Obj75_LoadBoss
0001CD78                            ; ===========================================================================
0001CD78                            
0001CD78                            Obj75_Loop:
0001CD78 4EB9 0000 FD5C             		jsr	(FindNextFreeObj).l
0001CD7E 6600                       		bne.s	Obj75_ShipMain
0001CD80 12BC 0075                  		move.b	#id_BossSpringYard,(a1)
0001CD84 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001CD8A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001CD90                            
0001CD90                            Obj75_LoadBoss:
0001CD90 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001CD96 4229 0025                  		clr.b	ob2ndRout(a1)
0001CD9A 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001CD9E 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001CDA2 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001CDA6 237C 0001 B8FC 0004        		move.l	#Map_Eggman,obMap(a1)
0001CDAE 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001CDB4 137C 0004 0001             		move.b	#4,obRender(a1)
0001CDBA 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001CDC0 2348 0034                  		move.l	a0,$34(a1)
0001CDC4 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001CDC8                            
0001CDC8                            Obj75_ShipMain:	; Routine 2
0001CDC8 7000                       		moveq	#0,d0
0001CDCA 1028 0025                  		move.b	ob2ndRout(a0),d0
0001CDCE 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001CDD2 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001CDD6 43F9 0001 B8AC             		lea	(Ani_Eggman).l,a1
0001CDDC 4EB9 0000 C862             		jsr	(AnimateSprite).l
0001CDE2 7003                       		moveq	#3,d0
0001CDE4 C028 0022                  		and.b	obStatus(a0),d0
0001CDE8 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001CDEE 8128 0001                  		or.b	d0,obRender(a0)
0001CDF2 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001CDF8                            ; ===========================================================================
0001CDF8 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001CDFC 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001CE00 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001CE04                            ; ===========================================================================
0001CE04                            
0001CE04                            loc_191CC:
0001CE04 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001CE0A 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001CE10 6400                       		bcc.s	loc_191DE
0001CE12 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CE16                            
0001CE16                            loc_191DE:
0001CE16 1028 003F                  		move.b	$3F(a0),d0
0001CE1A 5428 003F                  		addq.b	#2,$3F(a0)
0001CE1E 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001CE24 E440                       		asr.w	#2,d0
0001CE26 3140 0012                  		move.w	d0,obVelY(a0)
0001CE2A                            
0001CE2A                            loc_191F2:
0001CE2A 6100 E66C                  		bsr.w	BossMove
0001CE2E 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001CE34 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001CE3A                            
0001CE3A                            loc_19202:
0001CE3A 3028 0008                  		move.w	8(a0),d0
0001CE3E 0440 2C00                  		subi.w	#$2C00,d0
0001CE42 EA48                       		lsr.w	#5,d0
0001CE44 1140 0034                  		move.b	d0,$34(a0)
0001CE48 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001CE4E 6400                       		bcc.s	locret_19256
0001CE50 4A28 0022                  		tst.b	obStatus(a0)
0001CE54 6B00                       		bmi.s	loc_19258
0001CE56 4A28 0020                  		tst.b	obColType(a0)
0001CE5A 6600                       		bne.s	locret_19256
0001CE5C 4A28 003E                  		tst.b	$3E(a0)
0001CE60 6600                       		bne.s	loc_1923A
0001CE62 117C 0020 003E             		move.b	#$20,$3E(a0)
0001CE72                            
0001CE72                            loc_1923A:
0001CE72 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001CE76 7000                       		moveq	#0,d0
0001CE78 4A51                       		tst.w	(a1)
0001CE7A 6600                       		bne.s	loc_19248
0001CE7C 303C 0EEE                  		move.w	#cWhite,d0
0001CE80                            
0001CE80                            loc_19248:
0001CE80 3280                       		move.w	d0,(a1)
0001CE82 5328 003E                  		subq.b	#1,$3E(a0)
0001CE86 6600                       		bne.s	locret_19256
0001CE88 117C 000F 0020             		move.b	#$F,obColType(a0)
0001CE8E                            
0001CE8E                            locret_19256:
0001CE8E 4E75                       		rts	
0001CE90                            ; ===========================================================================
0001CE90                            
0001CE90                            loc_19258:
0001CE90 7064                       		moveq	#100,d0
0001CE92 6100 0000                  		bsr.w	AddPoints
0001CE96 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001CE9C 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001CEA2 4268 0010                  		clr.w	obVelX(a0)
0001CEA6 4E75                       		rts	
0001CEA8                            ; ===========================================================================
0001CEA8                            
0001CEA8                            loc_19270:
0001CEA8 3028 0030                  		move.w	$30(a0),d0
0001CEAC 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001CEB2 0828 0000 0022             		btst	#0,obStatus(a0)
0001CEB8 6600                       		bne.s	loc_1928E
0001CEBA 4468 0010                  		neg.w	obVelX(a0)
0001CEBE 0C40 2C08                  		cmpi.w	#$2C08,d0
0001CEC2 6E00                       		bgt.s	loc_1929E
0001CEC4 6000                       		bra.s	loc_19294
0001CEC6                            ; ===========================================================================
0001CEC6                            
0001CEC6                            loc_1928E:
0001CEC6 0C40 2D38                  		cmpi.w	#$2D38,d0
0001CECA 6D00                       		blt.s	loc_1929E
0001CECC                            
0001CECC                            loc_19294:
0001CECC 0868 0000 0022             		bchg	#0,obStatus(a0)
0001CED2 4228 003D                  		clr.b	$3D(a0)
0001CED6                            
0001CED6                            loc_1929E:
0001CED6 0440 2C10                  		subi.w	#$2C10,d0
0001CEDA 0240 001F                  		andi.w	#$1F,d0
0001CEDE 0440 001F                  		subi.w	#$1F,d0
0001CEE2 6A00                       		bpl.s	loc_192AE
0001CEE4 4440                       		neg.w	d0
0001CEE6                            
0001CEE6                            loc_192AE:
0001CEE6 5340                       		subq.w	#1,d0
0001CEE8 6E00                       		bgt.s	loc_192E8
0001CEEA 4A28 003D                  		tst.b	$3D(a0)
0001CEEE 6600                       		bne.s	loc_192E8
0001CEF0 3238 D008                  		move.w	(v_player+obX).w,d1
0001CEF4 0441 2C00                  		subi.w	#$2C00,d1
0001CEF8 EA41                       		asr.w	#5,d1
0001CEFA B228 0034                  		cmp.b	$34(a0),d1
0001CEFE 6600                       		bne.s	loc_192E8
0001CF00 7000                       		moveq	#0,d0
0001CF02 1028 0034                  		move.b	$34(a0),d0
0001CF06 EB40                       		asl.w	#5,d0
0001CF08 0640 2C10                  		addi.w	#$2C10,d0
0001CF0C 3140 0030                  		move.w	d0,$30(a0)
0001CF10 6100 0000                  		bsr.w	Obj75_FindBlocks
0001CF14 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CF18 4268 0028                  		clr.w	obSubtype(a0)
0001CF1C 4268 0010                  		clr.w	obVelX(a0)
0001CF20                            
0001CF20                            loc_192E8:
0001CF20 6000 FEF4                  		bra.w	loc_191DE
0001CF24                            ; ===========================================================================
0001CF24                            
0001CF24                            loc_192EC:
0001CF24 7000                       		moveq	#0,d0
0001CF26 1028 0028                  		move.b	obSubtype(a0),d0
0001CF2A 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001CF2E 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001CF32                            ; ===========================================================================
0001CF32 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001CF34 0000                       		dc.w loc_19348-off_192FA
0001CF36 0000                       		dc.w loc_1938E-off_192FA
0001CF38 0000                       		dc.w loc_193D0-off_192FA
0001CF3A                            ; ===========================================================================
0001CF3A                            
0001CF3A                            loc_19302:
0001CF3A 317C 0180 0012             		move.w	#$180,obVelY(a0)
0001CF40 3028 0038                  		move.w	$38(a0),d0
0001CF44 0C40 0556                  		cmpi.w	#$556,d0
0001CF48 6500                       		bcs.s	loc_19344
0001CF4A 317C 0556 0038             		move.w	#$556,$38(a0)
0001CF50 4268 003C                  		clr.w	$3C(a0)
0001CF54 70FF                       		moveq	#-1,d0
0001CF56 3028 0036                  		move.w	$36(a0),d0
0001CF5A 6700                       		beq.s	loc_1933C
0001CF5C 2240                       		movea.l	d0,a1
0001CF5E 137C 00FF 0029             		move.b	#-1,$29(a1)
0001CF64 117C 00FF 0029             		move.b	#-1,$29(a0)
0001CF6A 2348 0034                  		move.l	a0,$34(a1)
0001CF6E 317C 0032 003C             		move.w	#$32,$3C(a0)
0001CF74                            
0001CF74                            loc_1933C:
0001CF74 4268 0012                  		clr.w	obVelY(a0)
0001CF78 5428 0028                  		addq.b	#2,obSubtype(a0)
0001CF7C                            
0001CF7C                            loc_19344:
0001CF7C 6000 FEAC                  		bra.w	loc_191F2
0001CF80                            ; ===========================================================================
0001CF80                            
0001CF80                            loc_19348:
0001CF80 5368 003C                  		subq.w	#1,$3C(a0)
0001CF84 6A00                       		bpl.s	loc_19366
0001CF86 5428 0028                  		addq.b	#2,obSubtype(a0)
0001CF8A 317C F800 0012             		move.w	#-$800,obVelY(a0)
0001CF90 4A68 0036                  		tst.w	$36(a0)
0001CF94 6600                       		bne.s	loc_19362
0001CF96 E0E8 0012                  		asr	obVelY(a0)
0001CF9A                            
0001CF9A                            loc_19362:
0001CF9A 7000                       		moveq	#0,d0
0001CF9C 6000                       		bra.s	loc_1937C
0001CF9E                            ; ===========================================================================
0001CF9E                            
0001CF9E                            loc_19366:
0001CF9E 7000                       		moveq	#0,d0
0001CFA0 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001CFA6 6E00                       		bgt.s	loc_1937C
0001CFA8 7002                       		moveq	#2,d0
0001CFAA 0828 0001 003D             		btst	#1,$3D(a0)
0001CFB0 6700                       		beq.s	loc_1937C
0001CFB2 4440                       		neg.w	d0
0001CFB4                            
0001CFB4                            loc_1937C:
0001CFB4 D068 0038                  		add.w	$38(a0),d0
0001CFB8 3140 000C                  		move.w	d0,obY(a0)
0001CFBC 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001CFC2 6000 FE76                  		bra.w	loc_19202
0001CFC6                            ; ===========================================================================
0001CFC6                            
0001CFC6                            loc_1938E:
0001CFC6 303C 04DA                  		move.w	#$4DA,d0
0001CFCA 4A68 0036                  		tst.w	$36(a0)
0001CFCE 6700                       		beq.s	loc_1939C
0001CFD0 0440 0018                  		subi.w	#$18,d0
0001CFD4                            
0001CFD4                            loc_1939C:
0001CFD4 B068 0038                  		cmp.w	$38(a0),d0
0001CFD8 6D00                       		blt.s	loc_193BE
0001CFDA 317C 0008 003C             		move.w	#8,$3C(a0)
0001CFE0 4A68 0036                  		tst.w	$36(a0)
0001CFE4 6700                       		beq.s	loc_193B4
0001CFE6 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001CFEC                            
0001CFEC                            loc_193B4:
0001CFEC 5428 0028                  		addq.b	#2,obSubtype(a0)
0001CFF0 4268 0012                  		clr.w	obVelY(a0)
0001CFF4 6000                       		bra.s	loc_193CC
0001CFF6                            ; ===========================================================================
0001CFF6                            
0001CFF6                            loc_193BE:
0001CFF6 0C68 FFC0 0012             		cmpi.w	#-$40,obVelY(a0)
0001CFFC 6C00                       		bge.s	loc_193CC
0001CFFE 0668 000C 0012             		addi.w	#$C,obVelY(a0)
0001D004                            
0001D004                            loc_193CC:
0001D004 6000 FE24                  		bra.w	loc_191F2
0001D008                            ; ===========================================================================
0001D008                            
0001D008                            loc_193D0:
0001D008 5368 003C                  		subq.w	#1,$3C(a0)
0001D00C 6E00                       		bgt.s	loc_19406
0001D00E 6B00                       		bmi.s	loc_193EE
0001D010 70FF                       		moveq	#-1,d0
0001D012 3028 0036                  		move.w	$36(a0),d0
0001D016 6700                       		beq.s	loc_193E8
0001D018 2240                       		movea.l	d0,a1
0001D01A 137C 000A 0029             		move.b	#$A,$29(a1)
0001D020                            
0001D020                            loc_193E8:
0001D020 4268 0036                  		clr.w	$36(a0)
0001D024 6000                       		bra.s	loc_19406
0001D026                            ; ===========================================================================
0001D026                            
0001D026                            loc_193EE:
0001D026 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001D02C 6600                       		bne.s	loc_19406
0001D02E 4228 0029                  		clr.b	$29(a0)
0001D032 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001D036 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001D03C 6000                       		bra.s	loc_19446
0001D03E                            ; ===========================================================================
0001D03E                            
0001D03E                            loc_19406:
0001D03E 7001                       		moveq	#1,d0
0001D040 4A68 0036                  		tst.w	$36(a0)
0001D044 6700                       		beq.s	loc_19410
0001D046 7002                       		moveq	#2,d0
0001D048                            
0001D048                            loc_19410:
0001D048 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001D04E 6700                       		beq.s	loc_19424
0001D050 6D00                       		blt.s	loc_1941C
0001D052 4440                       		neg.w	d0
0001D054                            
0001D054                            loc_1941C:
0001D054 4A68 0036                  		tst.w	$36(a0)
0001D058 D168 0038                  		add.w	d0,$38(a0)
0001D05C                            
0001D05C                            loc_19424:
0001D05C 7000                       		moveq	#0,d0
0001D05E 4A68 0036                  		tst.w	$36(a0)
0001D062 6700                       		beq.s	loc_19438
0001D064 7002                       		moveq	#2,d0
0001D066 0828 0000 003D             		btst	#0,$3D(a0)
0001D06C 6700                       		beq.s	loc_19438
0001D06E 4440                       		neg.w	d0
0001D070                            
0001D070                            loc_19438:
0001D070 D068 0038                  		add.w	$38(a0),d0
0001D074 3140 000C                  		move.w	d0,obY(a0)
0001D078 3168 0030 0008             		move.w	$30(a0),8(a0)
0001D07E                            
0001D07E                            loc_19446:
0001D07E 6000 FDBA                  		bra.w	loc_19202
0001D082                            
0001D082                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D082                            
0001D082                            
0001D082                            Obj75_FindBlocks:
0001D082 4268 0036                  		clr.w	$36(a0)
0001D086 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001D08A 703E                       		moveq	#$3E,d0
0001D08C 7276                       		moveq	#$76,d1
0001D08E 1428 0034                  		move.b	$34(a0),d2
0001D092                            
0001D092                            Obj75_FindLoop:
0001D092 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001D094 6600                       		bne.s	loc_1946A	; if not, branch
0001D096 B429 0028                  		cmp.b	obSubtype(a1),d2
0001D09A 6600                       		bne.s	loc_1946A
0001D09C 3149 0036                  		move.w	a1,$36(a0)
0001D0A0 6000                       		bra.s	locret_19472
0001D0A2                            ; ===========================================================================
0001D0A2                            
0001D0A2                            loc_1946A:
0001D0A2 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001D0A6 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001D0AA                            
0001D0AA                            locret_19472:
0001D0AA 4E75                       		rts	
0001D0AC                            ; End of function Obj75_FindBlocks
0001D0AC                            
0001D0AC                            ; ===========================================================================
0001D0AC                            
0001D0AC                            loc_19474:
0001D0AC 5368 003C                  		subq.w	#1,$3C(a0)
0001D0B0 6B00                       		bmi.s	loc_1947E
0001D0B2 6000 E3A2                  		bra.w	BossDefeated
0001D0B6                            ; ===========================================================================
0001D0B6                            
0001D0B6                            loc_1947E:
0001D0B6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D0BA 4268 0012                  		clr.w	obVelY(a0)
0001D0BE 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D0C4 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001D0CA 4268 0010                  		clr.w	obVelX(a0)
0001D0CE 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001D0D4 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001D0D8 6600                       		bne.s	loc_194A8
0001D0DA 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001D0E0                            
0001D0E0                            loc_194A8:
0001D0E0 6000 FD58                  		bra.w	loc_19202
0001D0E4                            ; ===========================================================================
0001D0E4                            
0001D0E4                            loc_194AC:
0001D0E4 5268 003C                  		addq.w	#1,$3C(a0)
0001D0E8 6700                       		beq.s	loc_194BC
0001D0EA 6A00                       		bpl.s	loc_194C2
0001D0EC 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001D0F2 6000                       		bra.s	loc_194EE
0001D0F4                            ; ===========================================================================
0001D0F4                            
0001D0F4                            loc_194BC:
0001D0F4 4268 0012                  		clr.w	obVelY(a0)
0001D0F8 6000                       		bra.s	loc_194EE
0001D0FA                            ; ===========================================================================
0001D0FA                            
0001D0FA                            loc_194C2:
0001D0FA 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001D100 6500                       		bcs.s	loc_194DA
0001D102 6700                       		beq.s	loc_194E0
0001D104 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001D10A 6500                       		bcs.s	loc_194EE
0001D10C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D110 6000                       		bra.s	loc_194EE
0001D112                            ; ===========================================================================
0001D112                            
0001D112                            loc_194DA:
0001D112 5168 0012                  		subq.w	#8,obVelY(a0)
0001D116 6000                       		bra.s	loc_194EE
0001D118                            ; ===========================================================================
0001D118                            
0001D118                            loc_194E0:
0001D118 4268 0012                  		clr.w    obVelY(a0)
0001D11C 4A38 FE2D                          	tst.b     (v_invinc).w
0001D120 6600                               	bne.s   @boss_invinc
0001D122                            
0001D122 1038 F5C6                          	move.b   (v_Saved_music),d0
0001D126 6000 0000                          	bra.w      @boss_play
0001D12A                            
0001D12A                            @boss_invinc:
0001D12A 103C 0000                          	move.b #bgm_Invincible,d0
0001D12E                            
0001D12E                            @boss_play:
0001D12E 4EB8 129A                          	jsr PlaySound
0001D132                            
0001D132                            loc_194EE:
0001D132 6000 FCF6                  		bra.w	loc_191F2
0001D136                            ; ===========================================================================
0001D136                            
0001D136                            loc_194F2:
0001D136 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001D13C 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001D142 0C78 2D40 F72A             		cmpi.w	#$2D40,(v_limitright2).w
0001D148 6400                       		bcc.s	loc_1950C
0001D14A 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001D14E 6000                       		bra.s	loc_19512
0001D150                            ; ===========================================================================
0001D150                            
0001D150                            loc_1950C:
0001D150 4A28 0001                  		tst.b	obRender(a0)
0001D154 6A00                       		bpl.s	Obj75_ShipDelete
0001D156                            
0001D156                            loc_19512:
0001D156 6100 E340                  		bsr.w	BossMove
0001D15A 6000 FCBA                  		bra.w	loc_191DE
0001D15E                            ; ===========================================================================
0001D15E                            
0001D15E                            Obj75_ShipDelete:
0001D15E 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001D164                            ; ===========================================================================
0001D164                            
0001D164                            Obj75_FaceMain:	; Routine 4
0001D164 7201                       		moveq	#1,d1
0001D166 2268 0034                  		movea.l	$34(a0),a1
0001D16A 7000                       		moveq	#0,d0
0001D16C 1029 0025                  		move.b	ob2ndRout(a1),d0
0001D170 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001D174 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001D178 1141 001C                  		move.b	d1,obAnim(a0)
0001D17C 1010                       		move.b	(a0),d0
0001D17E B011                       		cmp.b	(a1),d0
0001D180 6600                       		bne.s	Obj75_FaceDelete
0001D182 6000                       		bra.s	loc_195BE
0001D184                            ; ===========================================================================
0001D184                            
0001D184                            Obj75_FaceDelete:
0001D184 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001D18A                            ; ===========================================================================
0001D18A 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001D18E 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001D192 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001D196                            ; ===========================================================================
0001D196                            
0001D196                            loc_19552:
0001D196 720A                       		moveq	#$A,d1
0001D198 4E75                       		rts	
0001D19A                            ; ===========================================================================
0001D19A                            
0001D19A                            loc_19556:
0001D19A 7206                       		moveq	#6,d1
0001D19C 4E75                       		rts	
0001D19E                            ; ===========================================================================
0001D19E                            
0001D19E                            loc_1955A:
0001D19E 7000                       		moveq	#0,d0
0001D1A0 1029 0028                  		move.b	obSubtype(a1),d0
0001D1A4 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001D1A8 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001D1AC                            ; ===========================================================================
0001D1AC 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001D1B0 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001D1B4                            ; ===========================================================================
0001D1B4                            
0001D1B4                            loc_19570:
0001D1B4 6000                       		bra.s	loc_19574
0001D1B6                            ; ===========================================================================
0001D1B6                            
0001D1B6                            loc_19572:
0001D1B6 7206                       		moveq	#6,d1
0001D1B8                            
0001D1B8                            loc_19574:
0001D1B8 4A29 0020                  		tst.b	obColType(a1)
0001D1BC 6600                       		bne.s	loc_1957E
0001D1BE 7205                       		moveq	#5,d1
0001D1C0 4E75                       		rts	
0001D1C2                            ; ===========================================================================
0001D1C2                            
0001D1C2                            loc_1957E:
0001D1C2 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001D1C8 6500                       		bcs.s	locret_19588
0001D1CA 7204                       		moveq	#4,d1
0001D1CC                            
0001D1CC                            locret_19588:
0001D1CC 4E75                       		rts	
0001D1CE                            ; ===========================================================================
0001D1CE                            
0001D1CE                            Obj75_FlameMain:; Routine 6
0001D1CE 117C 0007 001C             		move.b	#7,obAnim(a0)
0001D1D4 2268 0034                  		movea.l	$34(a0),a1
0001D1D8 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001D1DE 6600                       		bne.s	loc_195AA
0001D1E0 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001D1E6 4A28 0001                  		tst.b	1(a0)
0001D1EA 6A00                       		bpl.s	Obj75_FlameDelete
0001D1EC 6000                       		bra.s	loc_195B6
0001D1EE                            ; ===========================================================================
0001D1EE                            
0001D1EE                            loc_195AA:
0001D1EE 4A69 0010                  		tst.w	obVelX(a1)
0001D1F2 6700                       		beq.s	loc_195B6
0001D1F4 117C 0008 001C             		move.b	#8,obAnim(a0)
0001D1FA                            
0001D1FA                            loc_195B6:
0001D1FA 6000                       		bra.s	loc_195BE
0001D1FC                            ; ===========================================================================
0001D1FC                            
0001D1FC                            Obj75_FlameDelete:
0001D1FC 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001D202                            ; ===========================================================================
0001D202                            
0001D202                            loc_195BE:
0001D202 43F9 0001 B8AC             		lea	(Ani_Eggman).l,a1
0001D208 4EB9 0000 C862             		jsr	(AnimateSprite).l
0001D20E 2268 0034                  		movea.l	$34(a0),a1
0001D212 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D218 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D21E                            
0001D21E                            loc_195DA:
0001D21E 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001D224 7003                       		moveq	#3,d0
0001D226 C028 0022                  		and.b	obStatus(a0),d0
0001D22A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001D230 8128 0001                  		or.b	d0,obRender(a0)
0001D234 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001D23A                            ; ===========================================================================
0001D23A                            
0001D23A                            Obj75_SpikeMain:; Routine 8
0001D23A 217C 0001 B9EC 0004        		move.l	#Map_BossItems,obMap(a0)
0001D242 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001D248 117C 0005 001A             		move.b	#5,obFrame(a0)
0001D24E 2268 0034                  		movea.l	$34(a0),a1
0001D252 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001D258 6600                       		bne.s	loc_1961C
0001D25A 4A28 0001                  		tst.b	obRender(a0)
0001D25E 6A00                       		bpl.s	Obj75_SpikeDelete
0001D260                            
0001D260                            loc_1961C:
0001D260 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D266 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D26C 3028 003C                  		move.w	$3C(a0),d0
0001D270 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001D276 6600                       		bne.s	loc_19652
0001D278 0C29 0006 0028             		cmpi.b	#6,obSubtype(a1)
0001D27E 6700                       		beq.s	loc_1964C
0001D280 4A29 0028                  		tst.b	obSubtype(a1)
0001D284 6600                       		bne.s	loc_19658
0001D286 0C40 0094                  		cmpi.w	#$94,d0
0001D28A 6C00                       		bge.s	loc_19658
0001D28C 5E40                       		addq.w	#7,d0
0001D28E 6000                       		bra.s	loc_19658
0001D290                            ; ===========================================================================
0001D290                            
0001D290                            loc_1964C:
0001D290 4A69 003C                  		tst.w	$3C(a1)
0001D294 6A00                       		bpl.s	loc_19658
0001D296                            
0001D296                            loc_19652:
0001D296 4A40                       		tst.w	d0
0001D298 6F00                       		ble.s	loc_19658
0001D29A 5B40                       		subq.w	#5,d0
0001D29C                            
0001D29C                            loc_19658:
0001D29C 3140 003C                  		move.w	d0,$3C(a0)
0001D2A0 E440                       		asr.w	#2,d0
0001D2A2 D168 000C                  		add.w	d0,obY(a0)
0001D2A6 117C 0008 0014             		move.b	#8,obActWid(a0)
0001D2AC 117C 000C 0016             		move.b	#$C,obHeight(a0)
0001D2B2 4228 0020                  		clr.b	obColType(a0)
0001D2B6 2268 0034                  		movea.l	$34(a0),a1
0001D2BA 4A29 0020                  		tst.b	obColType(a1)
0001D2BE 6700                       		beq.s	loc_19688
0001D2C0 4A29 0029                  		tst.b	$29(a1)
0001D2C4 6600                       		bne.s	loc_19688
0001D2C6 117C 0084 0020             		move.b	#$84,obColType(a0)
0001D2CC                            
0001D2CC                            loc_19688:
0001D2CC 6000 FF50                  		bra.w	loc_195DA
0001D2D0                            ; ===========================================================================
0001D2D0                            
0001D2D0                            Obj75_SpikeDelete:
0001D2D0 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001D2D0 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001D2D6                            		include	"_incObj\76 SYZ Boss Blocks.asm"
0001D2D6                            ; ---------------------------------------------------------------------------
0001D2D6                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001D2D6                            ; ---------------------------------------------------------------------------
0001D2D6                            
0001D2D6                            BossBlock:
0001D2D6 7000                       		moveq	#0,d0
0001D2D8 1028 0024                  		move.b	obRoutine(a0),d0
0001D2DC 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001D2E0 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001D2E4                            ; ===========================================================================
0001D2E4 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001D2E6 0000                       		dc.w Obj76_Action-Obj76_Index
0001D2E8 0000                       		dc.w loc_19762-Obj76_Index
0001D2EA                            ; ===========================================================================
0001D2EA                            
0001D2EA                            Obj76_Main:	; Routine 0
0001D2EA 7800                       		moveq	#0,d4
0001D2EC 3A3C 2C10                  		move.w	#$2C10,d5
0001D2F0 7C09                       		moveq	#9,d6
0001D2F2 43D0                       		lea	(a0),a1
0001D2F4 6000                       		bra.s	Obj76_MakeBlock
0001D2F6                            ; ===========================================================================
0001D2F6                            
0001D2F6                            Obj76_Loop:
0001D2F6 4EB9 0000 FD46             		jsr	(FindFreeObj).l
0001D2FC 6600                       		bne.s	Obj76_ExitLoop
0001D2FE                            
0001D2FE                            Obj76_MakeBlock:
0001D2FE 12BC 0076                  		move.b	#id_BossBlock,(a1)
0001D302 237C 0000 0000 0004        		move.l	#Map_BossBlock,obMap(a1)
0001D30A 337C 4000 0002             		move.w	#$4000,obGfx(a1)
0001D310 137C 0004 0001             		move.b	#4,obRender(a1)
0001D316 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001D31C 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001D322 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001D328 3345 0008                  		move.w	d5,obX(a1)	; set x-position
0001D32C 337C 0582 000C             		move.w	#$582,obY(a1)
0001D332 3344 0028                  		move.w	d4,obSubtype(a1)
0001D336 0644 0101                  		addi.w	#$101,d4
0001D33A 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001D33E 5429 0024                  		addq.b	#2,obRoutine(a1)
0001D342 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001D346                            
0001D346                            Obj76_ExitLoop:
0001D346 4E75                       		rts	
0001D348                            ; ===========================================================================
0001D348                            
0001D348                            Obj76_Action:	; Routine 2
0001D348 1028 0029                  		move.b	$29(a0),d0
0001D34C B028 0028                  		cmp.b	obSubtype(a0),d0
0001D350 6700                       		beq.s	Obj76_Solid
0001D352 4A00                       		tst.b	d0
0001D354 6B00                       		bmi.s	loc_19718
0001D356                            
0001D356                            loc_19712:
0001D356 6100 0000                  		bsr.w	Obj76_Break
0001D35A 6000                       		bra.s	Obj76_Display
0001D35C                            ; ===========================================================================
0001D35C                            
0001D35C                            loc_19718:
0001D35C 2268 0034                  		movea.l	$34(a0),a1
0001D360 4A29 0021                  		tst.b	obColProp(a1)
0001D364 67F0                       		beq.s	loc_19712
0001D366 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D36C 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D372 0668 002C 000C             		addi.w	#$2C,obY(a0)
0001D378 B2C8                       		cmpa.w	a0,a1
0001D37A 6500                       		bcs.s	Obj76_Display
0001D37C 3029 0012                  		move.w	obVelY(a1),d0
0001D380 48C0                       		ext.l	d0
0001D382 E080                       		asr.l	#8,d0
0001D384 D168 000C                  		add.w	d0,obY(a0)
0001D388 6000                       		bra.s	Obj76_Display
0001D38A                            ; ===========================================================================
0001D38A                            
0001D38A                            Obj76_Solid:
0001D38A 323C 001B                  		move.w	#$1B,d1
0001D38E 343C 0010                  		move.w	#$10,d2
0001D392 363C 0011                  		move.w	#$11,d3
0001D396 3828 0008                  		move.w	obX(a0),d4
0001D39A 4EB9 0001 1CF8             		jsr	(SolidObject).l
0001D3A0                            
0001D3A0                            Obj76_Display:
0001D3A0 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001D3A6                            ; ===========================================================================
0001D3A6                            
0001D3A6                            loc_19762:	; Routine 4
0001D3A6 4A28 0001                  		tst.b	obRender(a0)
0001D3AA 6A00                       		bpl.s	Obj76_Delete
0001D3AC 4EB9 0000 F760             		jsr	(ObjectFall).l
0001D3B2 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001D3B8                            ; ===========================================================================
0001D3B8                            
0001D3B8                            Obj76_Delete:
0001D3B8 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001D3BE                            
0001D3BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D3BE                            
0001D3BE                            
0001D3BE                            Obj76_Break:
0001D3BE 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001D3C2 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001D3C6 7801                       		moveq	#1,d4
0001D3C8 7203                       		moveq	#3,d1
0001D3CA 7438                       		moveq	#$38,d2
0001D3CC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D3D0 117C 0008 0014             		move.b	#8,obActWid(a0)
0001D3D6 117C 0008 0016             		move.b	#8,obHeight(a0)
0001D3DC 43D0                       		lea	(a0),a1
0001D3DE 6000                       		bra.s	Obj76_MakeFrag
0001D3E0                            ; ===========================================================================
0001D3E0                            
0001D3E0                            Obj76_LoopFrag:
0001D3E0 4EB9 0000 FD5C             		jsr	(FindNextFreeObj).l
0001D3E6 6600                       		bne.s	loc_197D4
0001D3E8                            
0001D3E8                            Obj76_MakeFrag:
0001D3E8 45D0                       		lea	(a0),a2
0001D3EA 47D1                       		lea	(a1),a3
0001D3EC 7603                       		moveq	#3,d3
0001D3EE                            
0001D3EE                            loc_197AA:
0001D3EE 26DA                       		move.l	(a2)+,(a3)+
0001D3F0 26DA                       		move.l	(a2)+,(a3)+
0001D3F2 26DA                       		move.l	(a2)+,(a3)+
0001D3F4 26DA                       		move.l	(a2)+,(a3)+
0001D3F6 51CB FFF6                  		dbf	d3,loc_197AA
0001D3FA                            
0001D3FA 335C 0010                  		move.w	(a4)+,obVelX(a1)
0001D3FE 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001D402 361D                       		move.w	(a5)+,d3
0001D404 D769 0008                  		add.w	d3,obX(a1)
0001D408 361D                       		move.w	(a5)+,d3
0001D40A D769 000C                  		add.w	d3,obY(a1)
0001D40E 1344 001A                  		move.b	d4,obFrame(a1)
0001D412 5244                       		addq.w	#1,d4
0001D414 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001D418                            
0001D418                            loc_197D4:
0001D422                            ; End of function Obj76_Break
0001D422                            
0001D422                            ; ===========================================================================
0001D422 FE80 FE00                  Obj76_FragSpeed:dc.w -$180, -$200
0001D426 0180 FE00                  		dc.w $180, -$200
0001D42A FF00 FF00                  		dc.w -$100, -$100
0001D42E 0100 FF00                  		dc.w $100, -$100
0001D432 FFF8 FFF8                  Obj76_FragPos:	dc.w -8, -8
0001D436 0010 0000                  		dc.w $10, 0
0001D43A 0000 0010                  		dc.w 0,	$10
0001D43E 0010 0010                  		dc.w $10, $10
0001D43E 0010 0010                  		dc.w $10, $10
0001D442                            Map_BossBlock:	include	"_maps\SYZ Boss Blocks.asm"
0001D442                            ; ---------------------------------------------------------------------------
0001D442                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001D442                            ; ---------------------------------------------------------------------------
0001D442                            Map_BossBlock_internal:
0001D442 0000                       		dc.w @wholeblock-Map_BossBlock_internal
0001D444 0000                       		dc.w @topleft-Map_BossBlock_internal
0001D446 0000                       		dc.w @topright-Map_BossBlock_internal
0001D448 0000                       		dc.w @bottomleft-Map_BossBlock_internal
0001D44A 0000                       		dc.w @bottomright-Map_BossBlock_internal
0001D44C 02                         @wholeblock:	dc.b 2
0001D44D F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001D452 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001D457 00                         		dc.b 0
0001D458 01                         @topleft:	dc.b 1
0001D459 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001D45E 01                         @topright:	dc.b 1
0001D45F F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001D464 01                         @bottomleft:	dc.b 1
0001D465 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001D46A 01                         @bottomright:	dc.b 1
0001D46B F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001D470                            		even
0001D470                            		even
0001D470                            
0001D470                            loc_1982C:
0001D470 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001D476                            
0001D476                            		include	"_incObj\82 Eggman - Scrap Brain 2.asm"
0001D476                            ; ---------------------------------------------------------------------------
0001D476                            ; Object 82 - Eggman (SBZ2)
0001D476                            ; ---------------------------------------------------------------------------
0001D476                            
0001D476                            ScrapEggman:
0001D476 7000                       		moveq	#0,d0
0001D478 1028 0024                  		move.b	obRoutine(a0),d0
0001D47C 323B 0000                  		move.w	SEgg_Index(pc,d0.w),d1
0001D480 4EFB 1000                  		jmp	SEgg_Index(pc,d1.w)
0001D484                            ; ===========================================================================
0001D484 0000                       SEgg_Index:	dc.w SEgg_Main-SEgg_Index
0001D486 0000                       		dc.w SEgg_Eggman-SEgg_Index
0001D488 0000                       		dc.w SEgg_Switch-SEgg_Index
0001D48A                            
0001D48A 0200 03                    SEgg_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001D48D 0400 03                    		dc.b 4,	0, 3
0001D490                            ; ===========================================================================
0001D490                            
0001D490                            SEgg_Main:	; Routine 0
0001D490 45FA FFF8                  		lea	SEgg_ObjData(pc),a2
0001D494 317C 1C60 0008             		move.w	#$1C60,obX(a0)
0001D49A 317C 02A4 000C             		move.w	#$2A4,obY(a0)
0001D4A0 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D4A6 117C 0010 0021             		move.b	#$10,obColProp(a0)
0001D4AC 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001D4B2 4228 0025                  		clr.b	ob2ndRout(a0)
0001D4B6 115A 0024                  		move.b	(a2)+,obRoutine(a0)
0001D4BA 115A 001C                  		move.b	(a2)+,obAnim(a0)
0001D4BE 115A 0018                  		move.b	(a2)+,obPriority(a0)
0001D4C2 217C 0000 0000 0004        		move.l	#Map_SEgg,obMap(a0)
0001D4CA 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D4D0 117C 0004 0001             		move.b	#4,obRender(a0)
0001D4D6 08E8 0007 0001             		bset	#7,obRender(a0)
0001D4DC 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001D4E2 4EB9 0000 FD5C             		jsr	(FindNextFreeObj).l
0001D4E8 6600                       		bne.s	SEgg_Eggman
0001D4EA 2348 0034                  		move.l	a0,$34(a1)
0001D4EE 12BC 0082                  		move.b	#id_ScrapEggman,(a1) ; load switch object
0001D4F2 337C 1C30 0008             		move.w	#$1C30,obX(a1)
0001D4F8 337C 02BC 000C             		move.w	#$2BC,obY(a1)
0001D4FE 4228 0025                  		clr.b	ob2ndRout(a0)
0001D502 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001D506 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001D50A 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001D50E 237C 0000 DFE4 0004        		move.l	#Map_But,obMap(a1)
0001D516 337C 04A4 0002             		move.w	#$4A4,obGfx(a1)
0001D51C 137C 0004 0001             		move.b	#4,obRender(a1)
0001D522 08E9 0007 0001             		bset	#7,obRender(a1)
0001D528 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001D52E 137C 0000 001A             		move.b	#0,obFrame(a1)
0001D534                            
0001D534                            SEgg_Eggman:	; Routine 2
0001D534 7000                       		moveq	#0,d0
0001D536 1028 0025                  		move.b	ob2ndRout(a0),d0
0001D53A 323B 0000                  		move.w	SEgg_EggIndex(pc,d0.w),d1
0001D53E 4EBB 1000                  		jsr	SEgg_EggIndex(pc,d1.w)
0001D542 43FA 0000                  		lea	Ani_SEgg(pc),a1
0001D546 4EB9 0000 C862             		jsr	(AnimateSprite).l
0001D54C 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001D552                            ; ===========================================================================
0001D552 0000                       SEgg_EggIndex:	dc.w SEgg_ChkSonic-SEgg_EggIndex
0001D554 0000                       		dc.w SEgg_PreLeap-SEgg_EggIndex
0001D556 0000                       		dc.w SEgg_Leap-SEgg_EggIndex
0001D558 0000                       		dc.w loc_19934-SEgg_EggIndex
0001D55A                            ; ===========================================================================
0001D55A                            
0001D55A                            SEgg_ChkSonic:
0001D55A 3028 0008                  		move.w	obX(a0),d0
0001D55E 9078 D008                  		sub.w	(v_player+obX).w,d0
0001D562 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001D566 6400                       		bcc.s	loc_19934	; if not, branch
0001D568 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D56C 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001D572 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D578                            
0001D578                            loc_19934:
0001D578 4EF9 0000 F798             		jmp	(SpeedToPos).l
0001D57E                            ; ===========================================================================
0001D57E                            
0001D57E                            SEgg_PreLeap:
0001D57E 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001D582 6600                       		bne.s	loc_19954	; if time remains, branch
0001D584 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D588 117C 0002 001C             		move.b	#2,obAnim(a0)
0001D58E 5868 000C                  		addq.w	#4,obY(a0)
0001D592 317C 000F 003C             		move.w	#15,$3C(a0)
0001D598                            
0001D598                            loc_19954:
0001D598 60DE                       		bra.s	loc_19934
0001D59A                            ; ===========================================================================
0001D59A                            
0001D59A                            SEgg_Leap:
0001D59A 5368 003C                  		subq.w	#1,$3C(a0)
0001D59E 6E00                       		bgt.s	loc_199D0
0001D5A0 6600                       		bne.s	loc_1996A
0001D5A2 317C FF04 0010             		move.w	#-$FC,obVelX(a0) ; make Eggman leap
0001D5A8 317C FC40 0012             		move.w	#-$3C0,obVelY(a0)
0001D5AE                            
0001D5AE                            loc_1996A:
0001D5AE 0C68 1C32 0008             		cmpi.w	#$1C32,obX(a0)
0001D5B4 6E00                       		bgt.s	loc_19976
0001D5B6 4268 0010                  		clr.w	obVelX(a0)
0001D5BA                            
0001D5BA                            loc_19976:
0001D5BA 0668 0024 0012             		addi.w	#$24,obVelY(a0)
0001D5C0 4A68 0012                  		tst.w	obVelY(a0)
0001D5C4 6B00                       		bmi.s	SEgg_FindBlocks
0001D5C6 0C68 0295 000C             		cmpi.w	#$295,obY(a0)
0001D5CC 6500                       		bcs.s	SEgg_FindBlocks
0001D5CE 317C 5357 0028             		move.w	#$5357,obSubtype(a0)
0001D5D4 0C68 029B 000C             		cmpi.w	#$29B,obY(a0)
0001D5DA 6500                       		bcs.s	SEgg_FindBlocks
0001D5DC 317C 029B 000C             		move.w	#$29B,obY(a0)
0001D5E2 4268 0012                  		clr.w	obVelY(a0)
0001D5E6                            
0001D5E6                            SEgg_FindBlocks:
0001D5E6 3028 0010                  		move.w	obVelX(a0),d0
0001D5EA 8068 0012                  		or.w	obVelY(a0),d0
0001D5EE 6600                       		bne.s	loc_199D0
0001D5F0 43F8 D000                  		lea	(v_objspace).w,a1 ; start at the first object RAM
0001D5F4 703E                       		moveq	#$3E,d0
0001D5F6 7240                       		moveq	#$40,d1
0001D5F8                            
0001D5F8                            SEgg_FindLoop:	
0001D5F8 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001D5FA 0C11 0083                  		cmpi.b	#id_FalseFloor,(a1) ; is object a block? (object $83)
0001D5FE 57C8 FFF8                  		dbeq	d0,SEgg_FindLoop ; if not, repeat (max	$3E times)
0001D602                            
0001D602 6600                       		bne.s	loc_199D0
0001D604 337C 474F 0028             		move.w	#$474F,obSubtype(a1) ; set block to disintegrate
0001D60A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D60E 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D614                            
0001D614                            loc_199D0:
0001D614 6000 FF62                  		bra.w	loc_19934
0001D618                            ; ===========================================================================
0001D618                            
0001D618                            SEgg_Switch:	; Routine 4
0001D618 7000                       		moveq	#0,d0
0001D61A 1028 0025                  		move.b	ob2ndRout(a0),d0
0001D61E 303B 0000                  		move.w	SEgg_SwIndex(pc,d0.w),d0
0001D622 4EFB 0000                  		jmp	SEgg_SwIndex(pc,d0.w)
0001D626                            ; ===========================================================================
0001D626 0000                       SEgg_SwIndex:	dc.w loc_199E6-SEgg_SwIndex
0001D628 0000                       		dc.w SEgg_SwDisplay-SEgg_SwIndex
0001D62A                            ; ===========================================================================
0001D62A                            
0001D62A                            loc_199E6:
0001D62A 2268 0034                  		movea.l	$34(a0),a1
0001D62E 0C69 5357 0028             		cmpi.w	#$5357,obSubtype(a1)
0001D634 6600                       		bne.s	SEgg_SwDisplay
0001D636 117C 0001 001A             		move.b	#1,obFrame(a0)
0001D63C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001D640                            
0001D640                            SEgg_SwDisplay:
0001D640 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001D640 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001D646                            		include	"_anim\Eggman - Scrap Brain 2 & Final.asm"
0001D646                            ; ---------------------------------------------------------------------------
0001D646                            ; Animation script - Eggman (SBZ2)
0001D646                            ; ---------------------------------------------------------------------------
0001D646 0000                       Ani_SEgg:	dc.w @stand-Ani_SEgg
0001D648 0000                       		dc.w @laugh-Ani_SEgg
0001D64A 0000                       		dc.w @jump1-Ani_SEgg
0001D64C 0000                       		dc.w @intube-Ani_SEgg
0001D64E 0000                       		dc.w @running-Ani_SEgg
0001D650 0000                       		dc.w @jump2-Ani_SEgg
0001D652 0000                       		dc.w @starjump-Ani_SEgg
0001D654 7E00 FF                    @stand:		dc.b $7E, 0, afEnd
0001D658 00                         		even
0001D658 0601 02FF                  @laugh:		dc.b 6,	1, 2, afEnd
0001D65C 0E03 0404 0000 00FF        @jump1:		dc.b $E, 3, 4, 4, 0, 0,	0, afEnd
0001D664 0005 09FF                  @intube:	dc.b 0,	5, 9, afEnd
0001D668 0607 0408 04FF             @running:	dc.b 6,	7, 4, 8, 4, afEnd
0001D66E 0F04 0303 FF               @jump2:		dc.b $F, 4, 3, 3, afEnd
0001D674 00                         		even
0001D674 7E06 FF                    @starjump:	dc.b $7E, 6, afEnd
0001D678 00                         		even
0001D678 00                         		even
0001D678                            Map_SEgg:	include	"_maps\Eggman - Scrap Brain 2.asm"
0001D678                            ; --------------------------------------------------------------------------------
0001D678                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001D678                            ; --------------------------------------------------------------------------------
0001D678                            
0001D678                            SME_y00JM:	
0001D678 0000 0000                  		dc.w SME_y00JM_16-SME_y00JM, SME_y00JM_26-SME_y00JM	
0001D67C 0000 0000                  		dc.w SME_y00JM_4A-SME_y00JM, SME_y00JM_6E-SME_y00JM	
0001D680 0000 0000                  		dc.w SME_y00JM_83-SME_y00JM, SME_y00JM_A7-SME_y00JM	
0001D684 0000 0000                  		dc.w SME_y00JM_BC-SME_y00JM, SME_y00JM_E0-SME_y00JM	
0001D688 0000 0000                  		dc.w SME_y00JM_FA-SME_y00JM, SME_y00JM_119-SME_y00JM	
0001D68C 0000                       		dc.w SME_y00JM_142-SME_y00JM	
0001D68E 03                         SME_y00JM_16:	dc.b 3	
0001D68F FC00 008F E8               		dc.b $FC, 0, 0, $8F, $E8	
0001D694 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001D699 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001D69E 07                         SME_y00JM_26:	dc.b 7	
0001D69F E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0	
0001D6A4 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001D6A9 FC00 008F E8               		dc.b $FC, 0, 0, $8F, $E8	
0001D6AE F800 0002 F0               		dc.b $F8, 0, 0, 2, $F0	
0001D6B3 F800 0005 F8               		dc.b $F8, 0, 0, 5, $F8	
0001D6B8 F800 0008 00               		dc.b $F8, 0, 0, 8, 0	
0001D6BD F800 000B 08               		dc.b $F8, 0, 0, $B, 8	
0001D6C2 07                         SME_y00JM_4A:	dc.b 7	
0001D6C3 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0	
0001D6C8 FD00 008F E8               		dc.b $FD, 0, 0, $8F, $E8	
0001D6CD F900 0002 F0               		dc.b $F9, 0, 0, 2, $F0	
0001D6D2 F900 0005 F8               		dc.b $F9, 0, 0, 5, $F8	
0001D6D7 F900 0008 00               		dc.b $F9, 0, 0, 8, 0	
0001D6DC F900 000B 08               		dc.b $F9, 0, 0, $B, 8	
0001D6E1 010F 007F F0               		dc.b 1, $F, 0, $7F, $F0	
0001D6E6 04                         SME_y00JM_6E:	dc.b 4	
0001D6E7 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0	
0001D6EC F504 0830 10               		dc.b $F5, 4, 8, $30, $10	
0001D6F1 0809 084E F0               		dc.b 8, 9, 8, $4E, $F0	
0001D6F6 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0	
0001D6FB 07                         SME_y00JM_83:	dc.b 7	
0001D6FC F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001D701 F104 0830 10               		dc.b $F1, 4, 8, $30, $10	
0001D706 0806 083E F8               		dc.b 8, 6, 8, $3E, $F8	
0001D70B E800 0000 F0               		dc.b $E8, 0, 0, 0, $F0	
0001D710 E800 0003 F8               		dc.b $E8, 0, 0, 3, $F8	
0001D715 E800 0006 00               		dc.b $E8, 0, 0, 6, 0	
0001D71A E800 0009 08               		dc.b $E8, 0, 0, 9, 8	
0001D71F 04                         SME_y00JM_A7:	dc.b 4	
0001D720 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001D725 E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001D72A E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001D72F 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001D734 07                         SME_y00JM_BC:	dc.b 7	
0001D735 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001D73A E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001D73F 0409 0834 00               		dc.b 4, 9, 8, $34, 0	
0001D744 0405 083A E8               		dc.b 4, 5, 8, $3A, $E8	
0001D749 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001D74E F104 0854 10               		dc.b $F1, 4, 8, $54, $10	
0001D753 F104 0054 E0               		dc.b $F1, 4, 0, $54, $E0	
0001D758 05                         SME_y00JM_E0:	dc.b 5	
0001D759 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001D75E F104 0830 10               		dc.b $F1, 4, 8, $30, $10	
0001D763 0409 0834 00               		dc.b 4, 9, 8, $34, 0	
0001D768 0405 083A E8               		dc.b 4, 5, 8, $3A, $E8	
0001D76D E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001D772 06                         SME_y00JM_FA:	dc.b 6	
0001D773 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0	
0001D778 EF04 0830 10               		dc.b $EF, 4, 8, $30, $10	
0001D77D 0905 0844 00               		dc.b 9, 5, 8, $44, 0	
0001D782 0301 0848 F8               		dc.b 3, 1, 8, $48, $F8	
0001D787 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8	
0001D78C E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
0001D791 08                         SME_y00JM_119:	dc.b 8	
0001D792 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001D797 E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001D79C E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001D7A1 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001D7A6 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0, $F0	
0001D7AB F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0, $F0	
0001D7B0 000D 3EF0 F0               		dc.b 0, $D, $3E, $F0, $F0	
0001D7B5 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0, $F0	
0001D7BA 03                         SME_y00JM_142:	dc.b 3	
0001D7BB EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4	
0001D7C0 F408 005E 04               		dc.b $F4, 8, 0, $5E, 4	
0001D7C5 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC	
0001D7CA                            		even
0001D7CA                            		even
0001D7CA                            		include	"_incObj\83 SBZ Eggman's Crumbling Floor.asm"
0001D7CA                            ; ---------------------------------------------------------------------------
0001D7CA                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001D7CA                            ; ---------------------------------------------------------------------------
0001D7CA                            
0001D7CA                            FalseFloor:
0001D7CA 7000                       		moveq	#0,d0
0001D7CC 1028 0024                  		move.b	obRoutine(a0),d0
0001D7D0 323B 0000                  		move.w	FFloor_Index(pc,d0.w),d1
0001D7D4 4EFB 1000                  		jmp	FFloor_Index(pc,d1.w)
0001D7D8                            ; ===========================================================================
0001D7D8 0000                       FFloor_Index:	dc.w FFloor_Main-FFloor_Index
0001D7DA 0000                       		dc.w FFloor_ChkBreak-FFloor_Index
0001D7DC 0000                       		dc.w loc_19C36-FFloor_Index
0001D7DE 0000                       		dc.w loc_19C62-FFloor_Index
0001D7E0 0000                       		dc.w loc_19C72-FFloor_Index
0001D7E2 0000                       		dc.w loc_19C80-FFloor_Index
0001D7E4                            ; ===========================================================================
0001D7E4                            
0001D7E4                            FFloor_Main:	; Routine 0
0001D7E4 317C 1B80 0008             		move.w	#$1B80,obX(a0)
0001D7EA 317C 02D0 000C             		move.w	#$2D0,obY(a0)
0001D7F0 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001D7F6 117C 0010 0016             		move.b	#$10,obHeight(a0)
0001D7FC 117C 0004 0001             		move.b	#4,obRender(a0)
0001D802 08E8 0007 0001             		bset	#7,obRender(a0)
0001D808 7800                       		moveq	#0,d4
0001D80A 3A3C 1B10                  		move.w	#$1B10,d5
0001D80E 7C07                       		moveq	#7,d6
0001D810 45E8 0030                  		lea	$30(a0),a2
0001D814                            
0001D814                            FFloor_MakeBlock:
0001D814 4EB9 0000 FD46             		jsr	(FindFreeObj).l
0001D81A 6600                       		bne.s	FFloor_ExitMake
0001D81C 34C9                       		move.w	a1,(a2)+
0001D81E 12BC 0083                  		move.b	#id_FalseFloor,(a1) ; load block object
0001D822 237C 0000 0000 0004        		move.l	#Map_FFloor,obMap(a1)
0001D82A 337C 4518 0002             		move.w	#$4518,obGfx(a1)
0001D830 137C 0004 0001             		move.b	#4,obRender(a1)
0001D836 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001D83C 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001D842 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001D848 3345 0008                  		move.w	d5,obX(a1)	; set X	position
0001D84C 337C 02D0 000C             		move.w	#$2D0,obY(a1)
0001D852 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001D856 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001D85C 51CE FFB6                  		dbf	d6,FFloor_MakeBlock ; repeat sequence 7 more times
0001D860                            
0001D860                            FFloor_ExitMake:
0001D860 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D864 4E75                       		rts	
0001D866                            ; ===========================================================================
0001D866                            
0001D866                            FFloor_ChkBreak:; Routine 2
0001D866 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001D86C 6600                       		bne.s	FFloor_Solid	; if not, branch
0001D86E 4228 001A                  		clr.b	obFrame(a0)
0001D872 5428 0024                  		addq.b	#2,obRoutine(a0) ; next subroutine
0001D876                            
0001D876                            FFloor_Solid:
0001D876 7000                       		moveq	#0,d0
0001D878 1028 001A                  		move.b	obFrame(a0),d0
0001D87C 4400                       		neg.b	d0
0001D87E 4880                       		ext.w	d0
0001D880 5040                       		addq.w	#8,d0
0001D882 E940                       		asl.w	#4,d0
0001D884 383C 1C00                  		move.w	#$1C00,d4
0001D888 9840                       		sub.w	d0,d4
0001D88A 1140 0014                  		move.b	d0,obActWid(a0)
0001D88E 3144 0008                  		move.w	d4,obX(a0)
0001D892 720B                       		moveq	#$B,d1
0001D894 D240                       		add.w	d0,d1
0001D896 7410                       		moveq	#$10,d2
0001D898 7611                       		moveq	#$11,d3
0001D89A 4EF9 0001 1CF8             		jmp	(SolidObject).l
0001D8A0                            ; ===========================================================================
0001D8A0                            
0001D8A0                            loc_19C36:	; Routine 4
0001D8A0 0428 000E 001E             		subi.b	#$E,obTimeFrame(a0)
0001D8A6 6400                       		bcc.s	FFloor_Solid2
0001D8A8 70FF                       		moveq	#-1,d0
0001D8AA 1028 001A                  		move.b	obFrame(a0),d0
0001D8AE 4880                       		ext.w	d0
0001D8B0 D040                       		add.w	d0,d0
0001D8B2 3030 0030                  		move.w	$30(a0,d0.w),d0
0001D8B6 2240                       		movea.l	d0,a1
0001D8B8 337C 474F 0028             		move.w	#$474F,obSubtype(a1)
0001D8BE 5228 001A                  		addq.b	#1,obFrame(a0)
0001D8C2 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)
0001D8C8 6700                       		beq.s	loc_19C62
0001D8CA                            
0001D8CA                            FFloor_Solid2:
0001D8CA 60AA                       		bra.s	FFloor_Solid
0001D8CC                            ; ===========================================================================
0001D8CC                            
0001D8CC                            loc_19C62:	; Routine 6
0001D8CC 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001D8D2 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001D8D8 6000 FB96                  		bra.w	loc_1982C
0001D8DC                            ; ===========================================================================
0001D8DC                            
0001D8DC                            loc_19C72:	; Routine 8
0001D8DC 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001D8E2 6700                       		beq.s	FFloor_Break	; if yes, branch
0001D8E4 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001D8EA                            ; ===========================================================================
0001D8EA                            
0001D8EA                            loc_19C80:	; Routine $A
0001D8EA 4A28 0001                  		tst.b	obRender(a0)
0001D8EE 6A00 FB80                  		bpl.w	loc_1982C
0001D8F2 4EB9 0000 F760             		jsr	(ObjectFall).l
0001D8F8 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001D8FE                            ; ===========================================================================
0001D8FE                            
0001D8FE                            FFloor_Break:
0001D8FE 49FA 0000                  		lea	FFloor_FragSpeed(pc),a4
0001D902 4BFA 0000                  		lea	FFloor_FragPos(pc),a5
0001D906 7801                       		moveq	#1,d4
0001D908 7203                       		moveq	#3,d1
0001D90A 7438                       		moveq	#$38,d2
0001D90C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D910 117C 0008 0014             		move.b	#8,obActWid(a0)
0001D916 117C 0008 0016             		move.b	#8,obHeight(a0)
0001D91C 43D0                       		lea	(a0),a1
0001D91E 6000                       		bra.s	FFloor_MakeFrag
0001D920                            ; ===========================================================================
0001D920                            
0001D920                            FFloor_LoopFrag:
0001D920 4EB9 0000 FD5C             		jsr	(FindNextFreeObj).l
0001D926 6600                       		bne.s	FFloor_BreakSnd
0001D928                            
0001D928                            FFloor_MakeFrag:
0001D928 45D0                       		lea	(a0),a2
0001D92A 47D1                       		lea	(a1),a3
0001D92C 7603                       		moveq	#3,d3
0001D92E                            
0001D92E                            loc_19CC4:
0001D92E 26DA                       		move.l	(a2)+,(a3)+
0001D930 26DA                       		move.l	(a2)+,(a3)+
0001D932 26DA                       		move.l	(a2)+,(a3)+
0001D934 26DA                       		move.l	(a2)+,(a3)+
0001D936 51CB FFF6                  		dbf	d3,loc_19CC4
0001D93A                            
0001D93A 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001D93E 361D                       		move.w	(a5)+,d3
0001D940 D769 0008                  		add.w	d3,obX(a1)
0001D944 361D                       		move.w	(a5)+,d3
0001D946 D769 000C                  		add.w	d3,obY(a1)
0001D94A 1344 001A                  		move.b	d4,obFrame(a1)
0001D94E 5244                       		addq.w	#1,d4
0001D950 51C9 FFCE                  		dbf	d1,FFloor_LoopFrag ; repeat sequence 3 more times
0001D954                            
0001D954                            FFloor_BreakSnd:
0001D95E 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001D964                            ; ===========================================================================
0001D964 0080 0000                  FFloor_FragSpeed:dc.w $80, 0
0001D968 0120 00C0                  		dc.w $120, $C0
0001D96C FFF8 FFF8                  FFloor_FragPos:	dc.w -8, -8
0001D970 0010 0000                  		dc.w $10, 0
0001D974 0000 0010                  		dc.w 0,	$10
0001D978 0010 0010                  		dc.w $10, $10
0001D978 0010 0010                  		dc.w $10, $10
0001D97C                            Map_FFloor:	include	"_maps\SBZ Eggman's Crumbling Floor.asm"
0001D97C                            ; ---------------------------------------------------------------------------
0001D97C                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001D97C                            ; ---------------------------------------------------------------------------
0001D97C                            Map_FFloor_internal:
0001D97C 0000                       		dc.w @wholeblock-Map_FFloor_internal
0001D97E 0000                       		dc.w @topleft-Map_FFloor_internal
0001D980 0000                       		dc.w @topright-Map_FFloor_internal
0001D982 0000                       		dc.w @bottomleft-Map_FFloor_internal
0001D984 0000                       		dc.w @bottomright-Map_FFloor_internal
0001D986 01                         @wholeblock:	dc.b 1
0001D987 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001D98C 02                         @topleft:	dc.b 2
0001D98D F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001D992 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001D997 00                         		dc.b 0
0001D998 02                         @topright:	dc.b 2
0001D999 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001D99E F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001D9A3 00                         		dc.b 0
0001D9A4 02                         @bottomleft:	dc.b 2
0001D9A5 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001D9AA F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001D9AF 00                         		dc.b 0
0001D9B0 02                         @bottomright:	dc.b 2
0001D9B1 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001D9B6 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001D9BC 00                         		even
0001D9BC 00                         		even
0001D9BC                            		include	"_incObj\85 Boss - Final.asm"
0001D9BC                            ; ---------------------------------------------------------------------------
0001D9BC                            ; Object 85 - Eggman (FZ)
0001D9BC                            ; ---------------------------------------------------------------------------
0001D9BC                            
0001D9BC                            Obj85_Delete:
0001D9BC 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001D9C2                            ; ===========================================================================
0001D9C2                            
0001D9C2                            BossFinal:
0001D9C2 7000                       		moveq	#0,d0
0001D9C4 1028 0024                  		move.b	obRoutine(a0),d0
0001D9C8 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001D9CC 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001D9D0                            ; ===========================================================================
0001D9D0 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001D9D2 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001D9D4 0000                       		dc.w loc_1A38E-Obj85_Index
0001D9D6 0000                       		dc.w loc_1A346-Obj85_Index
0001D9D8 0000                       		dc.w loc_1A2C6-Obj85_Index
0001D9DA 0000                       		dc.w loc_1A3AC-Obj85_Index
0001D9DC 0000                       		dc.w loc_1A264-Obj85_Index
0001D9DE                            
0001D9DE 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001D9E4 0001 D678                  		dc.l Map_SEgg		; mappings pointer
0001D9E8 25B0 0590 0300             		dc.w $25B0, $590, $300
0001D9EE 0000 0000                  		dc.l Map_EggCyl
0001D9F2 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001D9F8 0000 0000                  		dc.l Map_FZLegs
0001D9FC 26E0 0596 0470             		dc.w $26E0, $596, $470
0001DA02 0001 D678                  		dc.l Map_SEgg
0001DA06 26E0 0596 0400             		dc.w $26E0, $596, $400
0001DA0C 0001 B8FC                  		dc.l Map_Eggman
0001DA10 26E0 0596 0400             		dc.w $26E0, $596, $400
0001DA16 0001 B8FC                  		dc.l Map_Eggman
0001DA1A                            
0001DA1A                            Obj85_ObjData2:	; routine num, animation, sprite priority (high and low bytes), width, height		
0001DA1A 0200 0200 2019             		dc.b  2, 0, $02, $00, $20, $19
0001DA20 0400 0080 1208             		dc.b  4, 0, $00, $80, $12,   8
0001DA26 0600 0180 0000             		dc.b  6, 0, $01, $80,   0,   0
0001DA2C 0800 0180 0000             		dc.b  8, 0, $01, $80,   0,   0
0001DA32 0A00 0180 2020             		dc.b $A, 0, $01, $80, $20, $20
0001DA38 0C00 0180 0000             		dc.b $C, 0, $01, $80,   0,   0
0001DA3E                            ; ===========================================================================
0001DA3E                            
0001DA3E                            Obj85_Main:	; Routine 0
0001DA3E 45FA FF9E                  		lea	Obj85_ObjData(pc),a2
0001DA42 47FA FFD6                  		lea	Obj85_ObjData2(pc),a3
0001DA46 2248                       		movea.l	a0,a1
0001DA48 7205                       		moveq	#5,d1
0001DA4A 6000                       		bra.s	Obj85_LoadBoss
0001DA4C                            ; ===========================================================================
0001DA4C                            
0001DA4C                            Obj85_Loop:
0001DA4C 4EB9 0000 FD5C             		jsr	(FindNextFreeObj).l
0001DA52 6600                       		bne.s	loc_19E20
0001DA54                            
0001DA54                            Obj85_LoadBoss:
0001DA54 12BC 0085                  		move.b	#id_BossFinal,(a1)
0001DA58 335A 0008                  		move.w	(a2)+,obX(a1)
0001DA5C 335A 000C                  		move.w	(a2)+,obY(a1)
0001DA60 335A 0002                  		move.w	(a2)+,obGfx(a1)
0001DA64 235A 0004                  		move.l	(a2)+,obMap(a1)
0001DA68 135B 0024                  		move.b	(a3)+,obRoutine(a1)
0001DA6C 135B 001C                  		move.b	(a3)+,obAnim(a1)
0001DA70 335B 0018                  		move.w	(a3)+,obPriority(a1)
0001DA74 135B 0014                  			move.b	(a3)+,obActWid(a1)
0001DA78 135B 0016                  		move.b	(a3)+,obHeight(a1)
0001DA7C 137C 0004 0001             		move.b	#4,obRender(a1)
0001DA82 08E8 0007 0001             		bset	#7,obRender(a0)
0001DA88 2348 0034                  		move.l	a0,$34(a1)
0001DA8C 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001DA90                            
0001DA90                            loc_19E20:
0001DA90 45E8 0036                  		lea	$36(a0),a2
0001DA94 4EB9 0000 FD46             		jsr	(FindFreeObj).l
0001DA9A 6600                       		bne.s	loc_19E5A
0001DA9C 12BC 0086                  		move.b	#id_BossPlasma,(a1) ; load energy ball object
0001DAA0 3489                       		move.w	a1,(a2)
0001DAA2 2348 0034                  		move.l	a0,$34(a1)
0001DAA6 45E8 0038                  		lea	$38(a0),a2
0001DAAA 7400                       		moveq	#0,d2
0001DAAC 7203                       		moveq	#3,d1
0001DAAE                            
0001DAAE                            loc_19E3E:
0001DAAE 4EB9 0000 FD5C             		jsr	(FindNextFreeObj).l
0001DAB4 6600                       		bne.s	loc_19E5A
0001DAB6 34C9                       		move.w	a1,(a2)+
0001DAB8 12BC 0084                  		move.b	#id_EggmanCylinder,(a1) ; load crushing	cylinder object
0001DABC 2348 0034                  		move.l	a0,$34(a1)
0001DAC0 1342 0028                  		move.b	d2,obSubtype(a1)
0001DAC4 5442                       		addq.w	#2,d2
0001DAC6 51C9 FFE6                  		dbf	d1,loc_19E3E
0001DACA                            
0001DACA                            loc_19E5A:
0001DACA 317C 0000 0034             		move.w	#0,$34(a0)
0001DAD0 117C 0006 0021             		move.b	#6,obColProp(a0) ; set number of hits to 6
0001DAD6 317C FFFF 0030             		move.w	#-1,$30(a0)
0001DADC                            
0001DADC                            Obj85_Eggman:	; Routine 2
0001DADC 7000                       		moveq	#0,d0
0001DADE 1028 0034                  		move.b	$34(a0),d0
0001DAE2 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001DAE6 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001DAEA 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001DAF0                            ; ===========================================================================
0001DAF0 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001DAF4 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001DAF8 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001DAFC 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001DB00                            ; ===========================================================================
0001DB00                            
0001DB00                            loc_19E90:
0001DB00 4AB8 F680                  		tst.l	(v_plc_buffer).w
0001DB04 6600                       		bne.s	loc_19EA2
0001DB06 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
0001DB0C 6500                       		bcs.s	loc_19EA2
0001DB0E 5428 0034                  		addq.b	#2,$34(a0)
0001DB12                            
0001DB12                            loc_19EA2:
0001DB12 52B8 F636                  		addq.l	#1,(v_random).w
0001DB16 4E75                       		rts	
0001DB18                            ; ===========================================================================
0001DB18                            
0001DB18                            loc_19EA8:
0001DB18 4A68 0030                  		tst.w	$30(a0)
0001DB1C 6A00                       		bpl.s	loc_19F10
0001DB1E 4268 0030                  		clr.w	$30(a0)
0001DB22 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001DB28 0240 000C                  		andi.w	#$C,d0
0001DB2C 3200                       		move.w	d0,d1
0001DB2E 5441                       		addq.w	#2,d1
0001DB30 4A80                       		tst.l	d0
0001DB32 6A00                       		bpl.s	loc_19EC6
0001DB34 C340                       		exg	d1,d0
0001DB36                            
0001DB36                            loc_19EC6:
0001DB36 43FA 0000                  		lea	word_19FD6(pc),a1
0001DB3A 3031 0000                  		move.w	(a1,d0.w),d0
0001DB3E 3231 1000                  		move.w	(a1,d1.w),d1
0001DB42 3140 0030                  		move.w	d0,$30(a0)
0001DB46 74FF                       		moveq	#-1,d2
0001DB48 3430 0038                  		move.w	$38(a0,d0.w),d2
0001DB4C 2242                       		movea.l	d2,a1
0001DB4E 137C 00FF 0029             		move.b	#-1,$29(a1)
0001DB54 337C FFFF 0030             		move.w	#-1,$30(a1)
0001DB5A 3430 1038                  		move.w	$38(a0,d1.w),d2
0001DB5E 2242                       		movea.l	d2,a1
0001DB60 137C 0001 0029             		move.b	#1,$29(a1)
0001DB66 337C 0000 0030             		move.w	#0,$30(a1)
0001DB6C 317C 0001 0032             		move.w	#1,$32(a0)
0001DB72 4228 0035                  		clr.b	$35(a0)
0001DB80                            
0001DB80                            loc_19F10:
0001DB80 4A68 0032                  		tst.w	$32(a0)
0001DB84 6B00 0000                  		bmi.w	loc_19FA6
0001DB88 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001DB8E 3038 D008                  		move.w	(v_player+obX).w,d0
0001DB92 9068 0008                  		sub.w	obX(a0),d0
0001DB96 6500                       		bcs.s	loc_19F2E
0001DB98 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DB9E                            
0001DB9E                            loc_19F2E:
0001DB9E 323C 002B                  		move.w	#$2B,d1
0001DBA2 343C 0014                  		move.w	#$14,d2
0001DBA6 363C 0014                  		move.w	#$14,d3
0001DBAA 3828 0008                  		move.w	obX(a0),d4
0001DBAE 4EB9 0001 1CF8             		jsr	(SolidObject).l
0001DBB4 4A44                       		tst.w	d4
0001DBB6 6E00                       		bgt.s	loc_19F50
0001DBB8                            
0001DBB8                            loc_19F48:
0001DBB8 4A28 0035                  		tst.b	$35(a0)
0001DBBC 6600                       		bne.s	loc_19F88
0001DBBE 6000                       		bra.s	loc_19F96
0001DBC0                            ; ===========================================================================
0001DBC0                            
0001DBC0                            loc_19F50:
0001DBC0 5E78 F636                  		addq.w	#7,(v_random).w
0001DBC4 0C38 0002 D01C             		cmpi.b	#id_Roll,(v_player+obAnim).w
0001DBCA 66EC                       		bne.s	loc_19F48
0001DBCC 303C 0300                  		move.w	#$300,d0
0001DBD0 0828 0000 0022             		btst	#0,obStatus(a0)
0001DBD6 6600                       		bne.s	loc_19F6A
0001DBD8 4440                       		neg.w	d0
0001DBDA                            
0001DBDA                            loc_19F6A:
0001DBDA 31C0 D010                  		move.w	d0,(v_player+obVelX).w
0001DBDE 4A28 0035                  		tst.b	$35(a0)
0001DBE2 6600                       		bne.s	loc_19F88
0001DBE4 5328 0021                  		subq.b	#1,obColProp(a0)
0001DBE8 117C 00FF 0035             		move.b	#$FF,$35(a0)
0001DBEE 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001DBF4                            
0001DBF4                            loc_19F88:
0001DBF4 5328 0035                  		subq.b	#1,$35(a0)
0001DBF8 6700                       		beq.s	loc_19F96
0001DBFA 117C 0003 001C             		move.b	#3,obAnim(a0)
0001DC00 6000                       		bra.s	loc_19F9C
0001DC02                            ; ===========================================================================
0001DC02                            
0001DC02                            loc_19F96:
0001DC02 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DC08                            
0001DC08                            loc_19F9C:
0001DC08 43FA FA3C                  		lea	Ani_SEgg(pc),a1
0001DC0C 4EF9 0000 C862             		jmp	(AnimateSprite).l
0001DC12                            ; ===========================================================================
0001DC12                            
0001DC12                            loc_19FA6:
0001DC12 4A28 0021                  		tst.b	obColProp(a0)
0001DC16 6700                       		beq.s	loc_19FBC
0001DC18 5428 0034                  		addq.b	#2,$34(a0)
0001DC1C 317C FFFF 0030             		move.w	#-1,$30(a0)
0001DC22 4268 0032                  		clr.w	$32(a0)
0001DC26 4E75                       		rts	
0001DC28                            ; ===========================================================================
0001DC28                            
0001DC28                            loc_19FBC:
0001DC28 7064                       			moveq	#100,d0
0001DC2A 6100 0000                  			bsr.w	AddPoints
0001DC2E 117C 0006 0034             		move.b	#6,$34(a0)
0001DC34 317C 25C0 0008             		move.w	#$25C0,obX(a0)
0001DC3A 317C 053C 000C             		move.w	#$53C,obY(a0)
0001DC40 117C 0014 0016             		move.b	#$14,obHeight(a0)
0001DC46 4E75                       		rts	
0001DC48                            ; ===========================================================================
0001DC48 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001DC58                            ; ===========================================================================
0001DC58                            
0001DC58                            loc_19FE6:
0001DC58 70FF                       		moveq	#-1,d0
0001DC5A 3028 0036                  		move.w	$36(a0),d0
0001DC5E 2240                       		movea.l	d0,a1
0001DC60 4A68 0030                  		tst.w	$30(a0)
0001DC64 6A00                       		bpl.s	loc_1A000
0001DC66 4268 0030                  		clr.w	$30(a0)
0001DC6A 137C 00FF 0029             		move.b	#-1,$29(a1)
0001DC70 6100                       		bsr.s	loc_1A020
0001DC72                            
0001DC72                            loc_1A000:
0001DC72 700F                       		moveq	#$F,d0
0001DC74 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001DC78 6600                       		bne.s	loc_1A00A
0001DC7A 6100                       		bsr.s	loc_1A020
0001DC7C                            
0001DC7C                            loc_1A00A:
0001DC7C 4A68 0032                  		tst.w	$32(a0)
0001DC80 6700                       		beq.s	locret_1A01E
0001DC82 5528 0034                  		subq.b	#2,$34(a0)
0001DC86 317C FFFF 0030             		move.w	#-1,$30(a0)
0001DC8C 4268 0032                  		clr.w	$32(a0)
0001DC90                            
0001DC90                            locret_1A01E:
0001DC90 4E75                       		rts	
0001DC92                            ; ===========================================================================
0001DC92                            
0001DC92                            loc_1A020:
0001DC9C                            ; ===========================================================================
0001DC9C                            
0001DC9C                            loc_1A02A:
0001DC9C 117C 0030 0014             			move.b	#$30,obActWid(a0)
0001DCA2 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DCA8 4EB9 0000 F798             		jsr	(SpeedToPos).l
0001DCAE 117C 0006 001A             		move.b	#6,obFrame(a0)
0001DCB4 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001DCBA 0C68 059C 000C             		cmpi.w	#$59C,obY(a0)
0001DCC0 6500                       		bcs.s	loc_1A070
0001DCC2 317C 059C 000C             		move.w	#$59C,obY(a0)
0001DCC8 5428 0034                  		addq.b	#2,$34(a0)
0001DCCC 117C 0020 0014             			move.b	#$20,obActWid(a0)
0001DCD2 317C 0100 0010             		move.w	#$100,obVelX(a0)
0001DCD8 317C FF00 0012             		move.w	#-$100,obVelY(a0)
0001DCDE 5438 F742                  		addq.b	#2,(v_dle_routine).w
0001DCE2                            
0001DCE2                            loc_1A070:
0001DCE2 6000 0000                  		bra.w	loc_1A166
0001DCE6                            ; ===========================================================================
0001DCE6                            
0001DCE6                            loc_1A074:
0001DCE6 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DCEC 117C 0004 001C             		move.b	#4,obAnim(a0)
0001DCF2 4EB9 0000 F798             		jsr	(SpeedToPos).l
0001DCF8 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001DCFE 0C68 05A3 000C             		cmpi.w	#$5A3,obY(a0)
0001DD04 6500                       		bcs.s	loc_1A09A
0001DD06 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001DD0C                            
0001DD0C                            loc_1A09A:
0001DD0C 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001DD12 3028 0008                  		move.w	obX(a0),d0
0001DD16 9078 D008                  		sub.w	(v_player+obX).w,d0
0001DD1A 6A00                       		bpl.s	loc_1A0B4
0001DD1C 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001DD22 6000 0000                  		bra.w	loc_1A0F2
0001DD26                            ; ===========================================================================
0001DD26                            
0001DD26                            loc_1A0B4:
0001DD26 0440 0070                  		subi.w	#$70,d0
0001DD2A 6500                       		bcs.s	loc_1A0F2
0001DD2C 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001DD32 5140                       		subq.w	#8,d0
0001DD34 6500                       		bcs.s	loc_1A0F2
0001DD36 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001DD3C 5140                       		subq.w	#8,d0
0001DD3E 6500                       		bcs.s	loc_1A0F2
0001DD40 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001DD46 5140                       		subq.w	#8,d0
0001DD48 6500                       		bcs.s	loc_1A0F2
0001DD4A 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001DD50 5140                       		subq.w	#8,d0
0001DD52 6500                       		bcs.s	loc_1A0F2
0001DD54 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001DD5A 0440 0038                  		subi.w	#$38,d0
0001DD5E 6500                       		bcs.s	loc_1A0F2
0001DD60 4268 0010                  		clr.w	obVelX(a0)
0001DD64                            
0001DD64                            loc_1A0F2:
0001DD64 0C68 26A0 0008             		cmpi.w	#$26A0,obX(a0)
0001DD6A 6500                       		bcs.s	loc_1A110
0001DD6C 317C 26A0 0008             		move.w	#$26A0,obX(a0)
0001DD72 317C 0240 0010             		move.w	#$240,obVelX(a0)
0001DD78 317C FB40 0012             		move.w	#-$4C0,obVelY(a0)
0001DD7E 5428 0034                  		addq.b	#2,$34(a0)
0001DD82                            
0001DD82                            loc_1A110:
0001DD82 6000                       		bra.s	loc_1A15C
0001DD84                            ; ===========================================================================
0001DD84                            
0001DD84                            loc_1A112:
0001DD84 4EB9 0000 F798             		jsr	(SpeedToPos).l
0001DD8A 0C68 26E0 0008             		cmpi.w	#$26E0,obX(a0)
0001DD90 6500                       		bcs.s	loc_1A124
0001DD92 4268 0010                  		clr.w	obVelX(a0)
0001DD96                            
0001DD96                            loc_1A124:
0001DD96 0668 0034 0012             		addi.w	#$34,obVelY(a0)
0001DD9C 4A68 0012                  		tst.w	obVelY(a0)
0001DDA0 6B00                       		bmi.s	loc_1A142
0001DDA2 0C68 0592 000C             		cmpi.w	#$592,obY(a0)
0001DDA8 6500                       		bcs.s	loc_1A142
0001DDAA 317C 0592 000C             		move.w	#$592,obY(a0)
0001DDB0 4268 0012                  		clr.w	obVelY(a0)
0001DDB4                            
0001DDB4                            loc_1A142:
0001DDB4 3028 0010                  		move.w	obVelX(a0),d0
0001DDB8 8068 0012                  		or.w	obVelY(a0),d0
0001DDBC 6600                       		bne.s	loc_1A15C
0001DDBE 5428 0034                  		addq.b	#2,$34(a0)
0001DDC2 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001DDC8 117C 0001 0021             		move.b	#1,obColProp(a0)
0001DDCE                            
0001DDCE                            loc_1A15C:
0001DDCE 43FA F876                  		lea	Ani_SEgg(pc),a1
0001DDD2 4EB9 0000 C862             		jsr	(AnimateSprite).l
0001DDD8                            
0001DDD8                            loc_1A166:
0001DDD8 0C78 2700 F72A             		cmpi.w	#$2700,(v_limitright2).w
0001DDDE 6C00                       		bge.s	loc_1A172
0001DDE0 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001DDE4                            
0001DDE4                            loc_1A172:
0001DDE4 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001DDEA 6C00                       		bge.s	locret_1A190
0001DDEC 323C 001B                  		move.w	#$1B,d1
0001DDF0 343C 0070                  		move.w	#$70,d2
0001DDF4 363C 0071                  		move.w	#$71,d3
0001DDF8 3828 0008                  		move.w	obX(a0),d4
0001DDFC 4EF9 0001 1CF8             		jmp	(SolidObject).l
0001DE02                            ; ===========================================================================
0001DE02                            
0001DE02                            locret_1A190:
0001DE02 4E75                       		rts	
0001DE04                            ; ===========================================================================
0001DE04                            
0001DE04                            loc_1A192:
0001DE04 217C 0001 B8FC 0004        		move.l	#Map_Eggman,obMap(a0)
0001DE0C 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001DE12 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DE18 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DE1E 4EB9 0000 F798             		jsr	(SpeedToPos).l
0001DE24 0C68 0544 000C             		cmpi.w	#$544,obY(a0)
0001DE2A 6400                       		bcc.s	loc_1A1D0
0001DE2C 317C 0180 0010             		move.w	#$180,obVelX(a0)
0001DE32 317C FFE8 0012             		move.w	#-$18,obVelY(a0)
0001DE38 117C 000F 0020             		move.b	#$F,obColType(a0)
0001DE3E 5428 0034                  		addq.b	#2,$34(a0)
0001DE42                            
0001DE42                            loc_1A1D0:
0001DE42 6000 FF8A                  		bra.w	loc_1A15C
0001DE46                            ; ===========================================================================
0001DE46                            
0001DE46                            loc_1A1D4:
0001DE46 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DE4C 4EB9 0000 F798             		jsr	(SpeedToPos).l
0001DE52 4A68 0030                  		tst.w	$30(a0)
0001DE56 6600                       		bne.s	loc_1A1FC
0001DE58 4A28 0020                  		tst.b	obColType(a0)
0001DE5C 6600                       		bne.s	loc_1A216
0001DE5E 317C 001E 0030             		move.w	#$1E,$30(a0)
0001DE64 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001DE6A                            
0001DE6A                            loc_1A1FC:
0001DE6A 5368 0030                  		subq.w	#1,$30(a0)
0001DE6E 6600                       		bne.s	loc_1A216
0001DE70 4A28 0022                  		tst.b	obStatus(a0)
0001DE74 6A00                       		bpl.s	loc_1A210
0001DE76 317C 0060 0012             		move.w	#$60,obVelY(a0)
0001DE7C 6000                       		bra.s	loc_1A216
0001DE7E                            ; ===========================================================================
0001DE7E                            
0001DE7E                            loc_1A210:
0001DE7E 117C 000F 0020             		move.b	#$F,obColType(a0)
0001DE84                            
0001DE84                            loc_1A216:
0001DE84 0C78 2790 D008             		cmpi.w	#$2790,(v_player+obX).w
0001DE8A 6D00                       		blt.s	loc_1A23A
0001DE8C 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w
0001DE92 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
0001DE98 4278 D020                  		clr.w	(v_player+obInertia).w
0001DE9C 4A68 0012                  		tst.w	obVelY(a0)
0001DEA0 6A00                       		bpl.s	loc_1A248
0001DEA2 31FC 0100 F602             		move.w	#$100,(v_jpadhold2).w
0001DEA8                            
0001DEA8                            loc_1A23A:
0001DEA8 0C78 27E0 D008             		cmpi.w	#$27E0,(v_player+obX).w
0001DEAE 6D00                       		blt.s	loc_1A248
0001DEB0 31FC 27E0 D008             		move.w	#$27E0,(v_player+obX).w
0001DEB6                            
0001DEB6                            loc_1A248:
0001DEB6 0C68 2900 0008             		cmpi.w	#$2900,obX(a0)
0001DEBC 6500                       		bcs.s	loc_1A260
0001DEBE 4A28 0001                  		tst.b	obRender(a0)
0001DEC2 6B00                       		bmi.s	loc_1A260
0001DEC4 11FC 0018 F600             		move.b	#$18,(v_gamemode).w
0001DECA 6000 FAF0                  		bra.w	Obj85_Delete
0001DECE                            ; ===========================================================================
0001DECE                            
0001DECE                            loc_1A260:
0001DECE 6000 FEFE                  		bra.w	loc_1A15C
0001DED2                            ; ===========================================================================
0001DED2                            
0001DED2                            loc_1A264:	; Routine 4
0001DED2 2268 0034                  		movea.l	$34(a0),a1
0001DED6 1011                       		move.b	(a1),d0
0001DED8 B010                       		cmp.b	(a0),d0
0001DEDA 6600 FAE0                  		bne.w	Obj85_Delete
0001DEDE 117C 0007 001C             		move.b	#7,obAnim(a0)
0001DEE4 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001DEEA 6C00                       		bge.s	loc_1A280
0001DEEC 6000                       		bra.s	loc_1A2A6
0001DEEE                            ; ===========================================================================
0001DEEE                            
0001DEEE                            loc_1A280:
0001DEEE 4A69 0010                  		tst.w	obVelX(a1)
0001DEF2 6700                       		beq.s	loc_1A28C
0001DEF4 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001DEFA                            
0001DEFA                            loc_1A28C:
0001DEFA 43FA D9B0                  		lea	Ani_Eggman(pc),a1
0001DEFE 4EB9 0000 C862             		jsr	(AnimateSprite).l
0001DF04                            
0001DF04                            loc_1A296:
0001DF04 2268 0034                  		movea.l	$34(a0),a1
0001DF08 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001DF0E 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001DF14                            
0001DF14                            loc_1A2A6:
0001DF14 2268 0034                  		movea.l	$34(a0),a1
0001DF18 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001DF1E 7003                       		moveq	#3,d0
0001DF20 C028 0022                  		and.b	obStatus(a0),d0
0001DF24 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001DF2A 8128 0001                  		or.b	d0,obRender(a0)
0001DF2E 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001DF34                            ; ===========================================================================
0001DF34                            
0001DF34                            loc_1A2C6:	; Routine 6
0001DF34 2268 0034                  		movea.l	$34(a0),a1
0001DF38 1011                       		move.b	(a1),d0
0001DF3A B010                       		cmp.b	(a0),d0
0001DF3C 6600 FA7E                  		bne.w	Obj85_Delete
0001DF40 0CA9 0001 B8FC 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001DF48 6700                       		beq.s	loc_1A2E4
0001DF4A 117C 000A 001A             		move.b	#$A,obFrame(a0)
0001DF50 60C2                       		bra.s	loc_1A2A6
0001DF52                            ; ===========================================================================
0001DF52                            
0001DF52                            loc_1A2E4:
0001DF52 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DF58 4A29 0021                  		tst.b	obColProp(a1)
0001DF5C 6F00                       		ble.s	loc_1A312
0001DF5E 117C 0006 001C             		move.b	#6,obAnim(a0)
0001DF64 217C 0001 B8FC 0004        		move.l	#Map_Eggman,obMap(a0)
0001DF6C 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001DF72 43FA D938                  		lea	Ani_Eggman(pc),a1
0001DF76 4EB9 0000 C862             		jsr	(AnimateSprite).l
0001DF7C 6000 FF86                  		bra.w	loc_1A296
0001DF80                            ; ===========================================================================
0001DF80                            
0001DF80                            loc_1A312:
0001DF80 4A28 0001                  		tst.b	1(a0)
0001DF84 6A00 FA36                  		bpl.w	Obj85_Delete
0001DF88 6100 D4CC                  		bsr.w	BossDefeated
0001DF8C 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001DF92 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DF98 217C 0000 0000 0004        		move.l	#Map_FZDamaged,obMap(a0)
0001DFA0 317C 03A0 0002             		move.w	#$3A0,obGfx(a0)
0001DFA6 43FA 0000                  		lea	Ani_FZEgg(pc),a1
0001DFAA 4EB9 0000 C862             		jsr	(AnimateSprite).l
0001DFB0 6000 FF52                  		bra.w	loc_1A296
0001DFB4                            ; ===========================================================================
0001DFB4                            
0001DFB4                            loc_1A346:	; Routine 8
0001DFB4 08E8 0000 0022             		bset	#0,obStatus(a0)
0001DFBA 2268 0034                  		movea.l	$34(a0),a1
0001DFBE 0CA9 0001 B8FC 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001DFC6 6700                       		beq.s	loc_1A35E
0001DFC8 6000 FF4A                  		bra.w	loc_1A2A6
0001DFCC                            ; ===========================================================================
0001DFCC                            
0001DFCC                            loc_1A35E:
0001DFCC 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001DFD2 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001DFD8 4A28 001E                  		tst.b	obTimeFrame(a0)
0001DFDC 6600                       		bne.s	loc_1A376
0001DFDE 117C 0014 001E             		move.b	#$14,obTimeFrame(a0)
0001DFE4                            
0001DFE4                            loc_1A376:
0001DFE4 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001DFE8 6E00                       		bgt.s	loc_1A38A
0001DFEA 5228 001A                  		addq.b	#1,obFrame(a0)
0001DFEE 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001DFF4 6E00 F9C6                  		bgt.w	Obj85_Delete
0001DFF8                            
0001DFF8                            loc_1A38A:
0001DFF8 6000 FF0A                  		bra.w	loc_1A296
0001DFFC                            ; ===========================================================================
0001DFFC                            
0001DFFC                            loc_1A38E:	; Routine $A
0001DFFC 117C 000B 001A             		move.b	#$B,obFrame(a0)
0001E002 3038 D008                  		move.w	(v_player+obX).w,d0
0001E006 9068 0008                  		sub.w	obX(a0),d0
0001E00A 6500                       		bcs.s	loc_1A3A6
0001E00C 4A28 0001                  		tst.b	obRender(a0)
0001E010 6A00 F9AA                  		bpl.w	Obj85_Delete
0001E014                            
0001E014                            loc_1A3A6:
0001E014 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001E01A                            ; ===========================================================================
0001E01A                            
0001E01A                            loc_1A3AC:	; Routine $C
0001E01A 117C 0000 001A             		move.b	#0,obFrame(a0)
0001E020 08E8 0000 0022             		bset	#0,obStatus(a0)
0001E026 2268 0034                  		movea.l	$34(a0),a1
0001E02A 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001E030 6600                       		bne.s	loc_1A3D0
0001E032 0CA9 0001 B8FC 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001E03A 6700 F980                  		beq.w	Obj85_Delete
0001E03E                            
0001E03E                            loc_1A3D0:
0001E03E 6000 FED4                  		bra.w	loc_1A2A6
0001E042                            		
0001E042                            BossModeMusic:
0001E042 0C28 0002 0021             		cmpi.b	#2,obColProp(a0)
0001E048 6600 0000                  		bne.w	NormalMode
0001E04C 4EF9 0000 0000             		jmp	PinchMode
0001E052                            
0001E052                            NormalMode:
0001E052 303C 00AC                  		move.w	#$AC,d0
0001E056 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001E05C 4E75                       		rts
0001E05E                            
0001E05E                            PinchMode:
0001E05E 303C 0094                  		move.w	#$94,d0
0001E062 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001E068 303C 00E2                  		move.w	#$E2,d0
0001E06C 4EB9 0000 129A             		jsr	(PlaySound).l
0001E072 4E75                       		rts		
0001E072 4E75                       		rts		
0001E074                            		include	"_anim\FZ Eggman in Ship.asm"
0001E074                            ; ---------------------------------------------------------------------------
0001E074                            ; Animation script - Eggman (FZ)
0001E074                            ; ---------------------------------------------------------------------------
0001E074 0000                       Ani_FZEgg:	dc.w byte_1A3D6-Ani_FZEgg
0001E076 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, afEnd
0001E07A                            		even
0001E07A                            		even
0001E07A                            Map_FZDamaged:	include	"_maps\FZ Damaged Eggmobile.asm"
0001E07A                            ; ---------------------------------------------------------------------------
0001E07A                            ; Sprite mappings - Eggman in broken eggmobile (FZ)
0001E07A                            ; ---------------------------------------------------------------------------
0001E07A                            Map_FZDamaged_internal:
0001E07A 0000                       		dc.w @damage1-Map_FZDamaged_internal
0001E07C 0000                       		dc.w @damage2-Map_FZDamaged_internal
0001E07E 06                         @damage1:	dc.b 6
0001E07F E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001E084 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001E089 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001E08E FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001E093 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001E098 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001E09D 06                         @damage2:	dc.b 6
0001E09E E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001E0A3 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001E0A8 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001E0AD FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001E0B2 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001E0B7 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001E0BC                            		even
0001E0BC                            		even
0001E0BC                            Map_FZLegs:	include	"_maps\FZ Eggmobile Legs.asm"
0001E0BC                            ; ---------------------------------------------------------------------------
0001E0BC                            ; Sprite mappings - legs on Eggman's escape ship (FZ)
0001E0BC                            ; ---------------------------------------------------------------------------
0001E0BC                            Map_FZLegs_internal:
0001E0BC 0000                       		dc.w @extended-Map_FZLegs_internal
0001E0BE 0000                       		dc.w @halfway-Map_FZLegs_internal
0001E0C0 0000                       		dc.w @retracted-Map_FZLegs_internal
0001E0C2 02                         @extended:	dc.b 2
0001E0C3 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001E0C8 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001E0CD 03                         @halfway:	dc.b 3
0001E0CE 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001E0D3 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001E0D8 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001E0DD 02                         @retracted:	dc.b 2
0001E0DE 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001E0E3 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001E0E8                            		even
0001E0E8                            		even
0001E0E8                            		include	"_incObj\84 FZ Eggman's Cylinders.asm"
0001E0E8                            ; ---------------------------------------------------------------------------
0001E0E8                            ; Object 84 - cylinder Eggman hides in (FZ)
0001E0E8                            ; ---------------------------------------------------------------------------
0001E0E8                            
0001E0E8                            Obj84_Delete:
0001E0E8 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001E0EE                            ; ===========================================================================
0001E0EE                            
0001E0EE                            EggmanCylinder:
0001E0EE 7000                       		moveq	#0,d0
0001E0F0 1028 0024                  		move.b	obRoutine(a0),d0
0001E0F4 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001E0F8 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001E0FC                            ; ===========================================================================
0001E0FC 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001E0FE 0000                       		dc.w loc_1A4CE-Obj84_Index
0001E100 0000                       		dc.w loc_1A57E-Obj84_Index
0001E102                            
0001E102 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001E106 2550 0620                  		dc.w $2550, $620
0001E10A 2490 04C0                  		dc.w $2490, $4C0
0001E10E 2510 04C0                  		dc.w $2510, $4C0
0001E112                            ; ===========================================================================
0001E112                            
0001E112                            Obj84_Main:	; Routine
0001E112 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001E116 7000                       		moveq	#0,d0
0001E118 1028 0028                  		move.b	obSubtype(a0),d0
0001E11C D040                       		add.w	d0,d0
0001E11E D2C0                       		adda.w	d0,a1
0001E120 117C 0004 0001             		move.b	#4,obRender(a0)
0001E126 08E8 0007 0001             		bset	#7,obRender(a0)
0001E12C 08E8 0004 0001             		bset	#4,obRender(a0)
0001E132 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001E138 217C 0000 0000 0004        		move.l	#Map_EggCyl,obMap(a0)
0001E140 3159 0008                  		move.w	(a1)+,obX(a0)
0001E144 3151 000C                  		move.w	(a1),obY(a0)
0001E148 3159 0038                  		move.w	(a1)+,$38(a0)
0001E14C 117C 0020 0016             		move.b	#$20,obHeight(a0)
0001E152 117C 0060 0017             		move.b	#$60,obWidth(a0)
0001E158 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001E15E 117C 0060 0016             		move.b	#$60,obHeight(a0)
0001E164 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001E16A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E16E                            
0001E16E                            loc_1A4CE:	; Routine 2
0001E16E 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001E174 6F00                       		ble.s	loc_1A4DC
0001E176 08E8 0001 0001             		bset	#1,obRender(a0)
0001E17C                            
0001E17C                            loc_1A4DC:
0001E17C 42A8 003C                  		clr.l	$3C(a0)
0001E180 4A28 0029                  		tst.b	$29(a0)
0001E184 6700                       		beq.s	loc_1A4EA
0001E186 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E18A                            
0001E18A                            loc_1A4EA:
0001E18A 2028 003C                  		move.l	$3C(a0),d0
0001E18E 2228 0038                  		move.l	$38(a0),d1
0001E192 D280                       		add.l	d0,d1
0001E194 4841                       		swap	d1
0001E196 3141 000C                  		move.w	d1,obY(a0)
0001E19A 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0001E1A0 6600                       		bne.s	loc_1A524
0001E1A2 4A68 0030                  		tst.w	$30(a0)
0001E1A6 6A00                       		bpl.s	loc_1A524
0001E1A8 70F6                       		moveq	#-$A,d0
0001E1AA 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001E1B0 6F00                       		ble.s	loc_1A514
0001E1B2 700E                       		moveq	#$E,d0
0001E1B4                            
0001E1B4                            loc_1A514:
0001E1B4 D240                       		add.w	d0,d1
0001E1B6 2268 0034                  		movea.l	$34(a0),a1
0001E1BA 3341 000C                  		move.w	d1,obY(a1)
0001E1BE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E1C4                            
0001E1C4                            loc_1A524:
0001E1C4 323C 002B                  		move.w	#$2B,d1
0001E1C8 343C 0060                  		move.w	#$60,d2
0001E1CC 363C 0061                  		move.w	#$61,d3
0001E1D0 3828 0008                  		move.w	obX(a0),d4
0001E1D4 4EB9 0001 1CF8             		jsr	(SolidObject).l
0001E1DA 7000                       		moveq	#0,d0
0001E1DC 3228 003C                  		move.w	$3C(a0),d1
0001E1E0 6A00                       		bpl.s	loc_1A550
0001E1E2 4441                       		neg.w	d1
0001E1E4 5141                       		subq.w	#8,d1
0001E1E6 6500                       		bcs.s	loc_1A55C
0001E1E8 5200                       		addq.b	#1,d0
0001E1EA E841                       		asr.w	#4,d1
0001E1EC D041                       		add.w	d1,d0
0001E1EE 6000                       		bra.s	loc_1A55C
0001E1F0                            ; ===========================================================================
0001E1F0                            
0001E1F0                            loc_1A550:
0001E1F0 0441 0027                  		subi.w	#$27,d1
0001E1F4 6500                       		bcs.s	loc_1A55C
0001E1F6 5200                       		addq.b	#1,d0
0001E1F8 E841                       		asr.w	#4,d1
0001E1FA D041                       		add.w	d1,d0
0001E1FC                            
0001E1FC                            loc_1A55C:
0001E1FC 1140 001A                  		move.b	d0,obFrame(a0)
0001E200 3038 D008                  		move.w	(v_player+obX).w,d0
0001E204 9068 0008                  		sub.w	obX(a0),d0
0001E208 6B00                       		bmi.s	loc_1A578
0001E20A 0440 0140                  		subi.w	#$140,d0
0001E20E 6B00                       		bmi.s	loc_1A578
0001E210 4A28 0001                  		tst.b	obRender(a0)
0001E214 6A00 FED2                  		bpl.w	Obj84_Delete
0001E218                            
0001E218                            loc_1A578:
0001E218 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001E21E                            ; ===========================================================================
0001E21E                            
0001E21E                            loc_1A57E:	; Routine 4
0001E21E 7000                       		moveq	#0,d0
0001E220 1028 0028                  		move.b	obSubtype(a0),d0
0001E224 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001E228 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001E22C 6000 FF5C                  		bra.w	loc_1A4EA
0001E230                            ; ===========================================================================
0001E230 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001E232 0000                       		dc.w loc_1A598-off_1A590
0001E234 0000                       		dc.w loc_1A604-off_1A590
0001E236 0000                       		dc.w loc_1A604-off_1A590
0001E238                            ; ===========================================================================
0001E238                            
0001E238                            loc_1A598:
0001E238 4A28 0029                  		tst.b	$29(a0)
0001E23C 6600                       		bne.s	loc_1A5D4
0001E23E 2268 0034                  		movea.l	$34(a0),a1
0001E242 4A29 0021                  		tst.b	obColProp(a1)
0001E246 6600                       		bne.s	loc_1A5B4
0001E248 6100 D20C                  		bsr.w	BossDefeated
0001E24C 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001E254                            
0001E254                            loc_1A5B4:
0001E254 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001E25C 6400                       		bcc.s	locret_1A602
0001E25E 42A8 003C                  		clr.l	$3C(a0)
0001E262 2268 0034                  		movea.l	$34(a0),a1
0001E266 5369 0032                  		subq.w	#1,$32(a1)
0001E26A 4269 0030                  		clr.w	$30(a1)
0001E26E 5528 0024                  		subq.b	#2,obRoutine(a0)
0001E272 4E75                       		rts	
0001E274                            ; ===========================================================================
0001E274                            
0001E274                            loc_1A5D4:
0001E274 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001E27A 6C00                       		bge.s	loc_1A5E4
0001E27C 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001E284                            
0001E284                            loc_1A5E4:
0001E284 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001E28C 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001E292 6E00                       		bgt.s	locret_1A602
0001E294 4268 003E                  		clr.w	$3E(a0)
0001E298 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001E29E 4228 0029                  		clr.b	$29(a0)
0001E2A2                            
0001E2A2                            locret_1A602:
0001E2A2 4E75                       		rts	
0001E2A4                            ; ===========================================================================
0001E2A4                            
0001E2A4                            loc_1A604:
0001E2A4 08E8 0001 0001             		bset	#1,obRender(a0)
0001E2AA 4A28 0029                  		tst.b	$29(a0)
0001E2AE 6600                       		bne.s	loc_1A646
0001E2B0 2268 0034                  		movea.l	$34(a0),a1
0001E2B4 4A29 0021                  		tst.b	obColProp(a1)
0001E2B8 6600                       		bne.s	loc_1A626
0001E2BA 6100 D19A                  		bsr.w	BossDefeated
0001E2BE 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001E2C6                            
0001E2C6                            loc_1A626:
0001E2C6 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001E2CE 6400                       		bcc.s	locret_1A674
0001E2D0 42A8 003C                  		clr.l	$3C(a0)
0001E2D4 2268 0034                  		movea.l	$34(a0),a1
0001E2D8 5369 0032                  		subq.w	#1,$32(a1)
0001E2DC 4269 0030                  		clr.w	$30(a1)
0001E2E0 5528 0024                  		subq.b	#2,obRoutine(a0)
0001E2E4 4E75                       		rts	
0001E2E6                            ; ===========================================================================
0001E2E6                            
0001E2E6                            loc_1A646:
0001E2E6 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001E2EC 6D00                       		blt.s	loc_1A656
0001E2EE 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001E2F6                            
0001E2F6                            loc_1A656:
0001E2F6 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001E2FE 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001E304 6D00                       		blt.s	locret_1A674
0001E306 4268 003E                  		clr.w	$3E(a0)
0001E30A 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001E310 4228 0029                  		clr.b	$29(a0)
0001E314                            
0001E314                            locret_1A674:
0001E314 4E75                       		rts	
0001E314 4E75                       		rts	
0001E316                            Map_EggCyl:	include	"_maps\FZ Eggman's Cylinders.asm"
0001E316                            ; --------------------------------------------------------------------------------
0001E316                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001E316                            ; --------------------------------------------------------------------------------
0001E316                            
0001E316                            SME_SCUpI:	
0001E316 0000 0000                  		dc.w SME_SCUpI_18-SME_SCUpI, SME_SCUpI_37-SME_SCUpI	
0001E31A 0000 0000                  		dc.w SME_SCUpI_60-SME_SCUpI, SME_SCUpI_93-SME_SCUpI	
0001E31E 0000 0000                  		dc.w SME_SCUpI_D0-SME_SCUpI, SME_SCUpI_112-SME_SCUpI	
0001E322 0000 0000                  		dc.w SME_SCUpI_159-SME_SCUpI, SME_SCUpI_1A0-SME_SCUpI	
0001E326 0000 0000                  		dc.w SME_SCUpI_1E7-SME_SCUpI, SME_SCUpI_22E-SME_SCUpI	
0001E32A 0000 0000                  		dc.w SME_SCUpI_275-SME_SCUpI, SME_SCUpI_2BC-SME_SCUpI	
0001E32E 06                         SME_SCUpI_18:	dc.b 6	
0001E32F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E334 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E339 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E33E B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E343 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E348 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E34D 08                         SME_SCUpI_37:	dc.b 8	
0001E34E A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E353 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E358 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E35D B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E362 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E367 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E36C D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E371 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E376 0A                         SME_SCUpI_60:	dc.b $A	
0001E377 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E37C B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E381 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E386 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E38B B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E390 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E395 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E39A F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E39F F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E3A4 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E3A9 0C                         SME_SCUpI_93:	dc.b $C	
0001E3AA A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E3AF B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E3B4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E3B9 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E3BE B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E3C3 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E3C8 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E3CD F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E3D2 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E3D7 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E3DC 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E3E1 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E3E6 0D                         SME_SCUpI_D0:	dc.b $D	
0001E3E7 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E3EC B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E3F1 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E3F6 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E3FB B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E400 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E405 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E40A F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E40F F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E414 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E419 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E41E 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E423 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E428 0E                         SME_SCUpI_112:	dc.b $E	
0001E429 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E42E B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E433 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E438 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E43D B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E442 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E447 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E44C F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E451 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E456 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E45B 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E460 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E465 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E46A A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E46F 0E                         SME_SCUpI_159:	dc.b $E	
0001E470 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E475 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E47A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E47F B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E484 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E489 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E48E D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E493 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E498 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E49D 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E4A2 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E4A7 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E4AC 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E4B1 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E4B6 0E                         SME_SCUpI_1A0:	dc.b $E	
0001E4B7 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E4BC B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E4C1 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E4C6 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E4CB B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E4D0 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E4D5 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E4DA F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E4DF F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E4E4 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E4E9 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E4EE 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E4F3 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E4F8 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E4FD 0E                         SME_SCUpI_1E7:	dc.b $E	
0001E4FE A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E503 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E508 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E50D B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E512 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E517 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E51C D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E521 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E526 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E52B 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E530 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E535 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E53A 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E53F A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E544 0E                         SME_SCUpI_22E:	dc.b $E	
0001E545 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E54A B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E54F B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E554 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E559 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E55E D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E563 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E568 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E56D F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E572 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E577 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E57C 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E581 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E586 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E58B 0E                         SME_SCUpI_275:	dc.b $E	
0001E58C A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001E591 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001E596 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001E59B B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001E5A0 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001E5A5 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001E5AA D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001E5AF F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001E5B4 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001E5B9 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001E5BE 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001E5C3 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001E5C8 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001E5CD A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001E5D2 02                         SME_SCUpI_2BC:	dc.b 2	
0001E5D3 F804 0068 F0               		dc.b $F8, 4, 0, $68, $F0	
0001E5D8 000C 006A F0               		dc.b 0, $C, 0, $6A, $F0	
0001E5DE 00                         		even
0001E5DE 00                         		even
0001E5DE                            		include	"_incObj\86 FZ Plasma Ball Launcher.asm"
0001E5DE                            ; ---------------------------------------------------------------------------
0001E5DE                            ; Object 86 - energy balls (FZ)
0001E5DE                            ; ---------------------------------------------------------------------------
0001E5DE                            
0001E5DE                            BossPlasma:
0001E5DE 7000                       		moveq	#0,d0
0001E5E0 1028 0024                  		move.b	obRoutine(a0),d0
0001E5E4 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001E5E8 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001E5EC                            ; ===========================================================================
0001E5EC 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001E5EE 0000                       		dc.w Obj86_Generator-Obj86_Index
0001E5F0 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001E5F2 0000                       		dc.w loc_1A962-Obj86_Index
0001E5F4 0000                       		dc.w loc_1A982-Obj86_Index
0001E5F6                            ; ===========================================================================
0001E5F6                            
0001E5F6                            Obj86_Main:	; Routine 0
0001E5F6 317C 2588 0008             		move.w	#$2588,obX(a0)
0001E5FC 317C 053C 000C             		move.w	#$53C,obY(a0)
0001E602 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001E608 217C 0000 0000 0004        		move.l	#Map_PLaunch,obMap(a0)
0001E610 117C 0000 001C             		move.b	#0,obAnim(a0)
0001E616 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001E61C 117C 0008 0017             		move.b	#8,obWidth(a0)
0001E622 117C 0008 0016             		move.b	#8,obHeight(a0)
0001E628 117C 0004 0001             		move.b	#4,obRender(a0)
0001E62E 08E8 0007 0001             		bset	#7,obRender(a0)
0001E634 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E638                            
0001E638                            Obj86_Generator:; Routine 2
0001E638 2268 0034                  		movea.l	$34(a0),a1
0001E63C 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001E642 6600                       		bne.s	loc_1A850
0001E644 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001E648 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001E64E 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001E654                            ; ===========================================================================
0001E654                            
0001E654                            loc_1A850:
0001E654 117C 0000 001C             		move.b	#0,obAnim(a0)
0001E65A 4A28 0029                  		tst.b	$29(a0)
0001E65E 6700                       		beq.s	loc_1A86C
0001E660 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E664 117C 0001 001C             		move.b	#1,obAnim(a0)
0001E66A 117C 003E 0028             		move.b	#$3E,obSubtype(a0)
0001E670                            
0001E670                            loc_1A86C:
0001E670 323C 0013                  		move.w	#$13,d1
0001E674 343C 0008                  		move.w	#8,d2
0001E678 363C 0011                  		move.w	#$11,d3
0001E67C 3828 0008                  		move.w	obX(a0),d4
0001E680 4EB9 0001 1CF8             		jsr	(SolidObject).l
0001E686 3038 D008                  		move.w	(v_player+obX).w,d0
0001E68A 9068 0008                  		sub.w	obX(a0),d0
0001E68E 6B00                       		bmi.s	loc_1A89A
0001E690 0440 0140                  		subi.w	#$140,d0
0001E694 6B00                       		bmi.s	loc_1A89A
0001E696 4A28 0001                  		tst.b	obRender(a0)
0001E69A 6A00 FA4C                  		bpl.w	Obj84_Delete
0001E69E                            
0001E69E                            loc_1A89A:
0001E69E 43FA 0000                  		lea	Ani_PLaunch(pc),a1
0001E6A2 4EB9 0000 C862             		jsr	(AnimateSprite).l
0001E6A8 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001E6AE                            ; ===========================================================================
0001E6AE                            
0001E6AE                            Obj86_MakeBalls:; Routine 4
0001E6AE 4A28 0029                  		tst.b	$29(a0)
0001E6B2 6700 0000                  		beq.w	loc_1A954
0001E6B6 4228 0029                  		clr.b	$29(a0)
0001E6BA D068 0030                  		add.w	$30(a0),d0
0001E6BE 0240 001E                  		andi.w	#$1E,d0
0001E6C2 D4C0                       		adda.w	d0,a2
0001E6C4 5868 0030                  		addq.w	#4,$30(a0)
0001E6C8 4268 0032                  		clr.w	$32(a0)
0001E6CC 7403                       		moveq	#3,d2
0001E6CE                            
0001E6CE                            Obj86_Loop:
0001E6CE 4EB9 0000 FD5C             		jsr	(FindNextFreeObj).l
0001E6D4 6600 0000                  		bne.w	loc_1A954
0001E6D8 12BC 0086                  		move.b	#id_BossPlasma,(a1)
0001E6DC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E6E2 337C 053C 000C             		move.w	#$53C,obY(a1)
0001E6E8 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001E6EE 337C 2300 0002             		move.w	#$2300,obGfx(a1)
0001E6F4 237C 0000 0000 0004        		move.l	#Map_Plasma,obMap(a1)
0001E6FC 137C 000C 0016             		move.b	#$C,obHeight(a1)
0001E702 137C 000C 0017             		move.b	#$C,obWidth(a1)
0001E708 137C 0000 0020             		move.b	#0,obColType(a1)
0001E70E 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001E714 337C 003E 0028             		move.w	#$3E,obSubtype(a1)
0001E71A 137C 0004 0001             		move.b	#4,obRender(a1)
0001E720 08E9 0007 0001             		bset	#7,obRender(a1)
0001E726 2348 0034                  		move.l	a0,$34(a1)
0001E72A 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001E730 3228 0032                  		move.w	$32(a0),d1
0001E734 C3FC FFB1                  		muls.w	#-$4F,d1
0001E738 0641 2578                  		addi.w	#$2578,d1
0001E73C 0240 001F                  		andi.w	#$1F,d0
0001E740 0440 0010                  		subi.w	#$10,d0
0001E744 D041                       		add.w	d1,d0
0001E746 3340 0030                  		move.w	d0,$30(a1)
0001E74A 5268 0032                  		addq.w	#1,$32(a0)
0001E74E 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001E754 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001E758                            
0001E758                            loc_1A954:
0001E758 4A68 0032                  		tst.w	$32(a0)
0001E75C 6600                       		bne.s	loc_1A95E
0001E75E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E762                            
0001E762                            loc_1A95E:
0001E762 6000 FF0C                  		bra.w	loc_1A86C
0001E766                            ; ===========================================================================
0001E766                            
0001E766                            loc_1A962:	; Routine 6
0001E766 117C 0002 001C             		move.b	#2,obAnim(a0)
0001E76C 4A68 0038                  		tst.w	$38(a0)
0001E770 6600                       		bne.s	loc_1A97E
0001E772 117C 0002 0024             		move.b	#2,obRoutine(a0)
0001E778 2268 0034                  		movea.l	$34(a0),a1
0001E77C 337C FFFF 0032             		move.w	#-1,$32(a1)
0001E782                            
0001E782                            loc_1A97E:
0001E782 6000 FEEC                  		bra.w	loc_1A86C
0001E786                            ; ===========================================================================
0001E786                            
0001E786                            loc_1A982:	; Routine 8
0001E786 7000                       		moveq	#0,d0
0001E788 1028 0025                  		move.b	ob2ndRout(a0),d0
0001E78C 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001E790 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001E794 43FA 0000                  		lea	Ani_Plasma(pc),a1
0001E798 4EB9 0000 C862             		jsr	(AnimateSprite).l
0001E79E 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001E7A4                            ; ===========================================================================
0001E7A4 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001E7A6 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001E7A8 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001E7AA                            ; ===========================================================================
0001E7AA                            
0001E7AA                            loc_1A9A6:
0001E7AA 3028 0030                  		move.w	$30(a0),d0
0001E7AE 9068 0008                  		sub.w	obX(a0),d0
0001E7B2 E940                       		asl.w	#4,d0
0001E7B4 3140 0010                  		move.w	d0,obVelX(a0)
0001E7B8 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001E7BE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001E7C2 4E75                       		rts	
0001E7C4                            ; ===========================================================================
0001E7C4                            
0001E7C4                            loc_1A9C0:
0001E7C4 4A68 0010                  		tst.w	obVelX(a0)
0001E7C8 6700                       		beq.s	loc_1A9E6
0001E7CA 4EB9 0000 F798             		jsr	(SpeedToPos).l
0001E7D0 3028 0008                  		move.w	obX(a0),d0
0001E7D4 9068 0030                  		sub.w	$30(a0),d0
0001E7D8 6400                       		bcc.s	loc_1A9E6
0001E7DA 4268 0010                  		clr.w	obVelX(a0)
0001E7DE D168 0008                  		add.w	d0,obX(a0)
0001E7E2 2268 0034                  		movea.l	$34(a0),a1
0001E7E6 5369 0032                  		subq.w	#1,$32(a1)
0001E7EA                            
0001E7EA                            loc_1A9E6:
0001E7EA 117C 0000 001C             		move.b	#0,obAnim(a0)
0001E7F0 5368 0028                  		subq.w	#1,obSubtype(a0)
0001E7F4 6600                       		bne.s	locret_1AA1C
0001E7F6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001E7FA 117C 0001 001C             		move.b	#1,obAnim(a0)
0001E800 117C 009A 0020             		move.b	#$9A,obColType(a0)
0001E806 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001E80C 7000                       		moveq	#0,d0
0001E80E 3038 D008                  		move.w	(v_player+obX).w,d0
0001E812 9068 0008                  		sub.w	obX(a0),d0
0001E816 3140 0010                  		move.w	d0,obVelX(a0)
0001E81A 317C 0140 0012             		move.w	#$140,obVelY(a0)
0001E820                            
0001E820                            locret_1AA1C:
0001E820 4E75                       		rts	
0001E822                            ; ===========================================================================
0001E822                            
0001E822                            loc_1AA1E:
0001E822 4EB9 0000 F798             		jsr	(SpeedToPos).l
0001E828 0C68 05E0 000C             		cmpi.w	#$5E0,obY(a0)
0001E82E 6400                       		bcc.s	loc_1AA34
0001E830 5368 0028                  		subq.w	#1,obSubtype(a0)
0001E834 6700                       		beq.s	loc_1AA34
0001E836 4E75                       		rts	
0001E838                            ; ===========================================================================
0001E838                            
0001E838                            loc_1AA34:
0001E838 2268 0034                  		movea.l	$34(a0),a1
0001E83C 5369 0038                  		subq.w	#1,$38(a1)
0001E840 6000 F8A6                  		bra.w	Obj84_Delete
0001E840 6000 F8A6                  		bra.w	Obj84_Delete
0001E844                            		include	"_anim\Plasma Ball Launcher.asm"
0001E844                            ; ---------------------------------------------------------------------------
0001E844                            ; Animation script - energy ball launcher (FZ)
0001E844                            ; ---------------------------------------------------------------------------
0001E844 0000                       Ani_PLaunch:	dc.w @red-Ani_PLaunch
0001E846 0000                       		dc.w @redsparking-Ani_PLaunch
0001E848 0000                       		dc.w @whitesparking-Ani_PLaunch
0001E84A 7E00 FF                    @red:		dc.b $7E, 0, afEnd
0001E84E 00                         		even
0001E84E 0100 0200 03FF             @redsparking:	dc.b 1,	0, 2, 0, 3, afEnd
0001E854                            		even
0001E854 0101 0201 03FF             @whitesparking:	dc.b 1,	1, 2, 1, 3, afEnd
0001E85A                            		even
0001E85A                            		even
0001E85A                            Map_PLaunch:	include	"_maps\Plasma Ball Launcher.asm"
0001E85A                            ; ---------------------------------------------------------------------------
0001E85A                            ; Sprite mappings - energy ball	launcher (FZ)
0001E85A                            ; ---------------------------------------------------------------------------
0001E85A                            Map_PLaunch_internal:
0001E85A 0000                       		dc.w @red-Map_PLaunch_internal
0001E85C 0000                       		dc.w @white-Map_PLaunch_internal
0001E85E 0000                       		dc.w @sparking1-Map_PLaunch_internal
0001E860 0000                       		dc.w @sparking2-Map_PLaunch_internal
0001E862 01                         @red:		dc.b 1
0001E863 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001E868 01                         @white:		dc.b 1
0001E869 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001E86E 01                         @sparking1:	dc.b 1
0001E86F F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001E874 01                         @sparking2:	dc.b 1
0001E875 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001E87A                            		even
0001E87A                            		even
0001E87A                            		include	"_anim\Plasma Balls.asm"
0001E87A                            ; ---------------------------------------------------------------------------
0001E87A                            ; Animation script - energy balls (FZ)
0001E87A                            ; ---------------------------------------------------------------------------
0001E87A 0000                       Ani_Plasma:	dc.w @full-Ani_Plasma
0001E87C 0000                       		dc.w @short-Ani_Plasma
0001E87E 0100 0A08 0A01 0A09 0A06+  @full:		dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001E88D 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001E89C 0A05 FF                    		dc.b $A, 5, afEnd
0001E8A0 00                         		even
0001E8A0 0006 0501 0507 0501 05FF   @short:		dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	afEnd
0001E8AA                            		even
0001E8AA                            		even
0001E8AA                            Map_Plasma:	include	"_maps\Plasma Balls.asm"
0001E8AA                            ; ---------------------------------------------------------------------------
0001E8AA                            ; Sprite mappings - energy balls (FZ)
0001E8AA                            ; ---------------------------------------------------------------------------
0001E8AA                            Map_Plasma_internal:
0001E8AA 0000                       		dc.w @fuzzy1-Map_Plasma_internal
0001E8AC 0000                       		dc.w @fuzzy2-Map_Plasma_internal
0001E8AE 0000                       		dc.w @white1-Map_Plasma_internal
0001E8B0 0000                       		dc.w @white2-Map_Plasma_internal
0001E8B2 0000                       		dc.w @white3-Map_Plasma_internal
0001E8B4 0000                       		dc.w @white4-Map_Plasma_internal
0001E8B6 0000                       		dc.w @fuzzy3-Map_Plasma_internal
0001E8B8 0000                       		dc.w @fuzzy4-Map_Plasma_internal
0001E8BA 0000                       		dc.w @fuzzy5-Map_Plasma_internal
0001E8BC 0000                       		dc.w @fuzzy6-Map_Plasma_internal
0001E8BE 0000                       		dc.w @blank-Map_Plasma_internal
0001E8C0 02                         @fuzzy1:	dc.b 2
0001E8C1 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001E8C6 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001E8CB 02                         @fuzzy2:	dc.b 2
0001E8CC F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001E8D1 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001E8D6 02                         @white1:	dc.b 2
0001E8D7 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001E8DC 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001E8E1 02                         @white2:	dc.b 2
0001E8E2 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001E8E7 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001E8EC 02                         @white3:	dc.b 2
0001E8ED F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001E8F2 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001E8F7 02                         @white4:	dc.b 2
0001E8F8 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001E8FD F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001E902 01                         @fuzzy3:	dc.b 1
0001E903 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001E908 01                         @fuzzy4:	dc.b 1
0001E909 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001E90E 02                         @fuzzy5:	dc.b 2
0001E90F F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001E914 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001E919 02                         @fuzzy6:	dc.b 2
0001E91A F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001E91F F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001E924 00                         @blank:		dc.b 0
0001E926 00                         		even
0001E926 00                         		even
0001E926                            
0001E926                            		include	"_incObj\3E Prison Capsule.asm"
0001E926                            ; ---------------------------------------------------------------------------
0001E926                            ; Object 3E - prison capsule
0001E926                            ; ---------------------------------------------------------------------------
0001E926                            
0001E926                            Prison:
0001E926 7000                       		moveq	#0,d0
0001E928 1028 0024                  		move.b	obRoutine(a0),d0
0001E92C 323B 0000                  		move.w	Pri_Index(pc,d0.w),d1
0001E930 4EBB 1000                  		jsr	Pri_Index(pc,d1.w)
0001E950 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001E956                            
0001E956                            	@delete:
0001E956 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001E95C                            ; ===========================================================================
0001E95C 0000                       Pri_Index:	dc.w Pri_Main-Pri_Index
0001E95E 0000                       		dc.w Pri_BodyMain-Pri_Index
0001E960 0000                       		dc.w Pri_Switched-Pri_Index
0001E962 0000                       		dc.w Pri_Explosion-Pri_Index
0001E964 0000                       		dc.w Pri_Explosion-Pri_Index
0001E966 0000                       		dc.w Pri_Explosion-Pri_Index
0001E968 0000                       		dc.w Pri_Animals-Pri_Index
0001E96A 0000                       		dc.w Pri_EndAct-Pri_Index
0001E96C                            
0001E96C =00000030                  pri_origY:	equ $30		; original y-axis position
0001E96C                            
0001E96C 0220 0400                  Pri_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001E970 040C 0501                  		dc.b 4,	$C, 5, 1
0001E974 0610 0403                  		dc.b 6,	$10, 4,	3
0001E978 0810 0305                  		dc.b 8,	$10, 3,	5
0001E97C                            ; ===========================================================================
0001E97C                            
0001E97C                            Pri_Main:	; Routine 0
0001E97C 217C 0000 0000 0004        		move.l	#Map_Pri,obMap(a0)
0001E984 317C 049D 0002             		move.w	#$49D,obGfx(a0)
0001E98A 117C 0004 0001             		move.b	#4,obRender(a0)
0001E990 3168 000C 0030             		move.w	obY(a0),pri_origY(a0)
0001E996 7000                       		moveq	#0,d0
0001E998 1028 0028                  		move.b	obSubtype(a0),d0
0001E99C E548                       		lsl.w	#2,d0
0001E99E 43FB 00CC                  		lea	Pri_Var(pc,d0.w),a1
0001E9A2 1159 0024                  		move.b	(a1)+,obRoutine(a0)
0001E9A6 1159 0014                  		move.b	(a1)+,obActWid(a0)
0001E9AA 1159 0018                  		move.b	(a1)+,obPriority(a0)
0001E9AE 3028 0018                  		move.w obPriority(a0),d0 
0001E9B2 E248                       		lsr.w #1,d0 
0001E9B4 0240 0380                  		andi.w #$380,d0 
0001E9B8 3140 0018                  		move.w d0,obPriority(a0)		
0001E9BC 1159 001A                  		move.b	(a1)+,obFrame(a0)
0001E9C0 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001E9C4 6600                       		bne.s	@not02		; if not, branch
0001E9C6                            
0001E9C6 117C 0006 0020             		move.b	#6,obColType(a0)
0001E9CC 117C 0008 0021             		move.b	#8,obColProp(a0)
0001E9D2                            
0001E9D2                            	@not02:
0001E9D2 4E75                       		rts	
0001E9D4                            ; ===========================================================================
0001E9D4                            
0001E9D4                            Pri_BodyMain:	; Routine 2
0001E9D4 0C38 0002 F7A7             		cmpi.b	#2,(v_bossstatus).w
0001E9DA 6700                       		beq.s	@chkopened
0001E9DC 323C 002B                  		move.w	#$2B,d1
0001E9E0 343C 0018                  		move.w	#$18,d2
0001E9E4 363C 0018                  		move.w	#$18,d3
0001E9E8 3828 0008                  		move.w	obX(a0),d4
0001E9EC 4EF9 0001 1CF8             		jmp	(SolidObject).l
0001E9F2                            ; ===========================================================================
0001E9F2                            
0001E9F2                            @chkopened:
0001E9F2 4A28 0025                  		tst.b	ob2ndRout(a0)	; has the prison been opened?
0001E9F6 6700                       		beq.s	@open		; if yes, branch
0001E9F8 4228 0025                  		clr.b	ob2ndRout(a0)
0001E9FC 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001EA02 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001EA08                            
0001EA08                            	@open:
0001EA08 117C 0002 001A             		move.b	#2,obFrame(a0)	; use frame number 2 (destroyed	prison)
0001EA0E                            		
0001EA0E                            	@rts:
0001EA0E 4E75                       		rts
0001EA10                            ; ===========================================================================
0001EA10                            
0001EA10                            Pri_Switched:	; Routine 4
0001EA10 323C 0017                  		move.w	#$17,d1
0001EA14 343C 0008                  		move.w	#8,d2
0001EA18 363C 0008                  		move.w	#8,d3
0001EA1C 3828 0008                  		move.w	obX(a0),d4
0001EA20 4EB9 0001 1CF8             		jsr	(SolidObject).l
0001EA26 43F9 0000 0000             		lea	(Ani_Pri).l,a1
0001EA2C 4EB9 0000 C862             		jsr	(AnimateSprite).l
0001EA32 3168 0030 000C             		move.w	pri_origY(a0),obY(a0)
0001EA38 4A28 0025                  		tst.b	ob2ndRout(a0)	; has prison already been opened?
0001EA3C 6700                       		beq.s	@open2		; if yes, branch
0001EA3E                            
0001EA3E 5068 000C                  		addq.w	#8,obY(a0)
0001EA42 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001EA48 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time between animal spawns
0001EA4E 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001EA52 4238 F7AA                  		clr.b	(f_lockscreen).w ; lock screen position
0001EA56 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0001EA5C 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; make Sonic run to the right
0001EA62 4228 0025                  		clr.b	ob2ndRout(a0)
0001EA66 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001EA6C 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001EA72 4A38 F5C3                  		tst.b	(f_emeraldm).w
0001EA76 6700                       		beq.s	@open2
0001EA78 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001EA86                            
0001EA86                            	@open2:
0001EA86 4E75                       		rts	
0001EA88                            ; ===========================================================================
0001EA88                            
0001EA88                            Pri_Explosion:	; Routine 6, 8, $A
0001EA88 7007                       		moveq	#7,d0
0001EA8A C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001EA8E 6600                       		bne.s	@noexplosion
0001EA90 4EB9 0000 FD46             		jsr	(FindFreeObj).l
0001EA96 6600                       		bne.s	@noexplosion
0001EA98 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1) ; load explosion object
0001EA9C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001EAA2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001EAA8 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001EAAE 7200                       		moveq	#0,d1
0001EAB0 1200                       		move.b	d0,d1
0001EAB2 E409                       		lsr.b	#2,d1
0001EAB4 0441 0020                  		subi.w	#$20,d1
0001EAB8 D369 0008                  		add.w	d1,obX(a1)
0001EABC E048                       		lsr.w	#8,d0
0001EABE E608                       		lsr.b	#3,d0
0001EAC0 D169 000C                  		add.w	d0,obY(a1)
0001EAC4                            
0001EAC4                            	@noexplosion:
0001EAC4 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001EAC8 6700                       		beq.s	@makeanimal
0001EACA 4E75                       		rts	
0001EACC                            ; ===========================================================================
0001EACC                            
0001EACC                            @makeanimal:
0001EACC 11FC 0002 F7A7             		move.b	#2,(v_bossstatus).w
0001EAD2 117C 000C 0024             		move.b	#$C,obRoutine(a0)	; replace explosions with animals
0001EAD8 117C 0006 001A             		move.b	#6,obFrame(a0)
0001EADE 317C 0096 001E             		move.w	#150,obTimeFrame(a0)
0001EAE4 0668 0020 000C             		addi.w	#$20,obY(a0)
0001EAEA 7C07                       		moveq	#7,d6
0001EAEC 3A3C 009A                  		move.w	#$9A,d5
0001EAF0 78E4                       		moveq	#-$1C,d4
0001EAF2                            
0001EAF2                            	@loop:
0001EAF2 4EB9 0000 FD46             		jsr	(FindFreeObj).l
0001EAF8 6600                       		bne.s	@fail
0001EAFA 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001EAFE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001EB04 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001EB0A D969 0008                  		add.w	d4,obX(a1)
0001EB0E 5E44                       		addq.w	#7,d4
0001EB10 3345 0036                  		move.w	d5,$36(a1)
0001EB14 5145                       		subq.w	#8,d5
0001EB16 51CE FFDA                  		dbf	d6,@loop	; repeat 7 more	times
0001EB1A                            
0001EB1A                            	@fail:
0001EB1A 4E75                       		rts	
0001EB1C                            ; ===========================================================================
0001EB1C                            
0001EB1C                            Pri_Animals:	; Routine $C
0001EB1C 7007                       		moveq	#7,d0
0001EB1E C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001EB22 6600                       		bne.s	@noanimal
0001EB24 4EB9 0000 FD46             		jsr	(FindFreeObj).l
0001EB2A 6600                       		bne.s	@noanimal
0001EB2C 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001EB30 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001EB36 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001EB3C 4EB9 0000 3CA4             		jsr	(RandomNumber).l
0001EB42 0240 001F                  		andi.w	#$1F,d0
0001EB46 5D40                       		subq.w	#6,d0
0001EB48 4A41                       		tst.w	d1
0001EB4A 6A00                       		bpl.s	@ispositive
0001EB4C 4440                       		neg.w	d0
0001EB4E                            
0001EB4E                            	@ispositive:
0001EB4E D169 0008                  		add.w	d0,obX(a1)
0001EB52 337C 000C 0036             		move.w	#$C,$36(a1)
0001EB58                            
0001EB58                            	@noanimal:
0001EB58 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001EB5C 6600                       		bne.s	@wait
0001EB5E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001EB62 317C 00B4 001E             		move.w	#180,obTimeFrame(a0)
0001EB68                            
0001EB68                            	@wait:
0001EB68 4E75                       		rts	
0001EB6A                            ; ===========================================================================
0001EB6A                            
0001EB6A                            Pri_EndAct:	; Routine $E
0001EB6A 703E                       		moveq	#$3E,d0
0001EB6C 7228                       		moveq	#id_Animals,d1
0001EB6E 7440                       		moveq	#$40,d2
0001EB70 43F8 D040                  		lea	(v_objspace+$40).w,a1 ; load object RAM
0001EB74                            
0001EB74                            	@findanimal:
0001EB74 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001EB76 6700                       		beq.s	@found		; if yes, branch
0001EB78 D2C2                       		adda.w	d2,a1		; next object RAM
0001EB7A 51C8 FFF8                  		dbf	d0,@findanimal	; repeat $3E times
0001EB7E                            
0001EB7E 4EB9 0001 101A             		jsr	(GotThroughAct1).l
0001EB84 4EF9 0000 F7EC             		jmp	(DeleteObject).l
0001EB8A                            
0001EB8A                            	@found:
0001EB8A 4E75                       		rts	
0001EB8A 4E75                       		rts	
0001EB8C                            		include	"_anim\Prison Capsule.asm"
0001EB8C                            ; ---------------------------------------------------------------------------
0001EB8C                            ; Animation script - prison capsule
0001EB8C                            ; ---------------------------------------------------------------------------
0001EB8C 0000                       Ani_Pri:	dc.w @switchflash-Ani_Pri
0001EB8E 0000                       		dc.w @switchflash-Ani_Pri
0001EB90 0201 03FF                  @switchflash:	dc.b 2,	1, 3, afEnd
0001EB94                            		even
0001EB94                            		even
0001EB94                            Map_Pri:	include	"_maps\Prison Capsule.asm"
0001EB94                            ; ---------------------------------------------------------------------------
0001EB94                            ; Sprite mappings - prison capsule
0001EB94                            ; ---------------------------------------------------------------------------
0001EB94                            Map_Pri_internal:
0001EB94 0000                       		dc.w @capsule-Map_Pri_internal
0001EB96 0000                       		dc.w @switch1-Map_Pri_internal
0001EB98 0000                       		dc.w @broken-Map_Pri_internal
0001EB9A 0000                       		dc.w @switch2-Map_Pri_internal
0001EB9C 0000                       		dc.w @unusedthing1-Map_Pri_internal
0001EB9E 0000                       		dc.w @unusedthing2-Map_Pri_internal
0001EBA0 0000                       		dc.w @blank-Map_Pri_internal
0001EBA2 07                         @capsule:	dc.b 7
0001EBA3 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001EBA8 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001EBAD E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001EBB2 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001EBB7 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001EBBC 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001EBC1 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001EBC6 01                         @switch1:	dc.b 1
0001EBC7 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001EBCC 06                         @broken:	dc.b 6
0001EBCD 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001EBD2 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001EBD7 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001EBDC 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001EBE1 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001EBE6 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001EBEB 01                         @switch2:	dc.b 1
0001EBEC F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001EBF1 02                         @unusedthing1:	dc.b 2
0001EBF2 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001EBF7 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001EBFC 01                         @unusedthing2:	dc.b 1
0001EBFD F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001EC02 00                         @blank:		dc.b 0
0001EC04 00                         		even
0001EC04 00                         		even
0001EC04                            
0001EC04                            		include	"_incObj\sub ReactToItem.asm"
0001EC04                            ; ---------------------------------------------------------------------------
0001EC04                            ; Subroutine to react to obColType(a0)
0001EC04                            ; ---------------------------------------------------------------------------
0001EC04                            
0001EC04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC04                            
0001EC04                            
0001EC04                            ReactToItem:
0001EC04 4E71                       		nop	
0001EC06 3428 0008                  		move.w	obX(a0),d2	; load Sonic's x-axis position
0001EC0A 3628 000C                  		move.w	obY(a0),d3	; load Sonic's y-axis position
0001EC0E 5142                       		subq.w	#8,d2
0001EC10 7A00                       		moveq	#0,d5
0001EC12 1A28 0016                  		move.b	obHeight(a0),d5	; load Sonic's height
0001EC16 5705                       		subq.b	#3,d5
0001EC18 9645                       		sub.w	d5,d3
0001EC1A 0C28 0071 001A             		cmpi.b	#fr_Duck,obFrame(a0) ; is Sonic ducking?
0001EC20 6600                       		bne.s	@notducking	; if not, branch
0001EC22 0643 000C                  		addi.w	#$C,d3
0001EC26 7A0A                       		moveq	#$A,d5
0001EC28                            
0001EC28                            	@notducking:
0001EC28 383C 0010                  		move.w	#$10,d4
0001EC2C DA45                       		add.w	d5,d5
0001EC2E 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; set object RAM start address
0001EC32 3C3C 005F                  		move.w	#$5F,d6
0001EC36                            
0001EC36                            @loop:
0001EC36 4A29 0001                  		tst.b	obRender(a1)
0001EC3A 6A00                       		bpl.s	@next
0001EC3C 1029 0020                  		move.b	obColType(a1),d0 ; load collision type
0001EC40 6600                       		bne.s	@proximity	; if nonzero, branch
0001EC42                            
0001EC42                            	@next:
0001EC42 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001EC46 51CE FFEE                  		dbf	d6,@loop	; repeat $5F more times
0001EC4A                            
0001EC4A 7000                       		moveq	#0,d0
0001EC4C 4E75                       		rts	
0001EC4E                            ; ===========================================================================
0001EC4E                            @sizes:		;   width, height
0001EC4E 1414                       		dc.b  $14, $14		; $01
0001EC50 0C14                       		dc.b   $C, $14		; $02
0001EC52 140C                       		dc.b  $14,  $C		; $03
0001EC54 0410                       		dc.b	4, $10		; $04
0001EC56 0C12                       		dc.b   $C, $12		; $05
0001EC58 1010                       		dc.b  $10, $10		; $06
0001EC5A 0606                       		dc.b	6,   6		; $07
0001EC5C 180C                       		dc.b  $18,  $C		; $08
0001EC5E 0C10                       		dc.b   $C, $10		; $09
0001EC60 100C                       		dc.b  $10,  $C		; $0A
0001EC62 0808                       		dc.b	8,   8		; $0B
0001EC64 1410                       		dc.b  $14, $10		; $0C
0001EC66 1408                       		dc.b  $14,   8		; $0D
0001EC68 0E0E                       		dc.b   $E,  $E		; $0E
0001EC6A 1818                       		dc.b  $18, $18		; $0F
0001EC6C 2810                       		dc.b  $28, $10		; $10
0001EC6E 1018                       		dc.b  $10, $18		; $11
0001EC70 0810                       		dc.b	8, $10		; $12
0001EC72 2070                       		dc.b  $20, $70		; $13
0001EC74 4020                       		dc.b  $40, $20		; $14
0001EC76 8020                       		dc.b  $80, $20		; $15
0001EC78 2020                       		dc.b  $20, $20		; $16
0001EC7A 0808                       		dc.b	8,   8		; $17
0001EC7C 0404                       		dc.b	4,   4		; $18
0001EC7E 2008                       		dc.b  $20,   8		; $19
0001EC80 0C0C                       		dc.b   $C,  $C		; $1A
0001EC82 0804                       		dc.b	8,   4		; $1B
0001EC84 1804                       		dc.b  $18,   4		; $1C
0001EC86 2804                       		dc.b  $28,   4		; $1D
0001EC88 0408                       		dc.b	4,   8		; $1E
0001EC8A 0418                       		dc.b	4, $18		; $1F
0001EC8C 0428                       		dc.b	4, $28		; $20
0001EC8E 0420                       		dc.b	4, $20		; $21
0001EC90 1818                       		dc.b  $18, $18		; $22
0001EC92 0C18                       		dc.b   $C, $18		; $23
0001EC94 4808                       		dc.b  $48,   8		; $24
0001EC96                            ; ===========================================================================
0001EC96                            
0001EC96                            @proximity:
0001EC96 0240 003F                  		andi.w	#$3F,d0
0001EC9A D040                       		add.w	d0,d0
0001EC9C 45FB 00AE                  		lea	@sizes-2(pc,d0.w),a2
0001ECA0 7200                       		moveq	#0,d1
0001ECA2 121A                       		move.b	(a2)+,d1
0001ECA4 3029 0008                  		move.w	obX(a1),d0
0001ECA8 9041                       		sub.w	d1,d0
0001ECAA 9042                       		sub.w	d2,d0
0001ECAC 6400                       		bcc.s	@outsidex	; branch if not touching
0001ECAE D241                       		add.w	d1,d1
0001ECB0 D041                       		add.w	d1,d0
0001ECB2 6500                       		bcs.s	@withinx	; branch if touching
0001ECB4 6000 FF8C                  		bra.w	@next
0001ECB8                            ; ===========================================================================
0001ECB8                            
0001ECB8                            @outsidex:
0001ECB8 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001ECBC B044                       		cmp.w	d4,d0
0001ECBE 6200 FF82                  		bhi.w	@next
0001ECC2                            
0001ECC2                            @withinx:
0001ECC2 7200                       		moveq	#0,d1
0001ECC4 121A                       		move.b	(a2)+,d1
0001ECC6 3029 000C                  		move.w	obY(a1),d0
0001ECCA 9041                       		sub.w	d1,d0
0001ECCC 9043                       		sub.w	d3,d0
0001ECCE 6400                       		bcc.s	@outsidey	; branch if not touching
0001ECD0 D241                       		add.w	d1,d1
0001ECD2 D240                       		add.w	d0,d1
0001ECD4 6500                       		bcs.s	@withiny	; branch if touching
0001ECD6 6000 FF6A                  		bra.w	@next
0001ECDA                            
0001ECDA                            ; ===========================================================================
0001ECDA                            
0001ECDA                            @outsidey:
0001ECDA 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001ECDE B045                       		cmp.w	d5,d0
0001ECE0 6200 FF60                  		bhi.w	@next
0001ECE4                            
0001ECE4                            @withiny:
0001ECE4                            	@chktype:
0001ECE4 0C38 0004 FE10                     	cmpi.b	#id_SYZ,(v_zone).w   ;TIS is level GHZZ?
0001ECEA 6600 0000                          	bne	NotGHZReact  ;TIS
0001ECEE 1229 0020                          	move.b	obColType(a1),d1 ;TIS load collision type
0001ECF2 0C01 0096                          	cmpi.b	#$96,d1        ;TIS - is collision type $96?
0001ECF6 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001ECFA 0C01 0094                          	cmpi.b	#$94,d1        ;TIS - is collision type $94?
0001ECFE 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001ED02 0C01 0095                          	cmpi.b	#$95,d1        ;TIS - is collision type $95?
0001ED06 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001ED0A                            NotGHZReact:                      ;TIS
0001ED0A 1229 0020                  		move.b	obColType(a1),d1 ; load collision type
0001ED0E 0201 00C0                  		andi.b	#$C0,d1        ; is obColType $40 or higher?
0001ED12 6700 0000                  		beq.w	React_Enemy    ; if not, branch
0001ED16 0C01 00C0                  		cmpi.b	#$C0,d1		; is obColType $C0 or higher?
0001ED1A 6700 0000                  		beq.w	React_Special	; if yes, branch
0001ED1E 4A01                       		tst.b	d1		; is obColType $80-$BF?
0001ED20 6B00 0000                  		bmi.w	React_ChkHurt	; if yes, branch
0001ED24                            
0001ED24                            ; obColType is $40-$7F (powerups)
0001ED24                            
0001ED24 1029 0020                  		move.b	obColType(a1),d0
0001ED28 0200 003F                  		andi.b	#$3F,d0
0001ED2C 0C00 0006                  		cmpi.b	#6,d0		; is collision type $46	?
0001ED30 6700                       		beq.s	React_Monitor	; if yes, branch
0001ED32 0C68 005A 0030             		cmpi.w	#90,$30(a0)	; is Sonic invincible?
0001ED38 6400 0000                  		bcc.w	@invincible	; if yes, branch
0001ED3C 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the object's routine counter
0001ED40                            
0001ED40                            	@invincible:
0001ED40 4E75                       		rts	
0001ED42                            ; ===========================================================================
0001ED42                            
0001ED42                            React_Monitor:
0001ED42 4A68 0012                  		tst.w	obVelY(a0)	; is Sonic moving upwards?
0001ED46 6A00                       		bpl.s	@movingdown	; if not, branch
0001ED48                            
0001ED48 3028 000C                  		move.w	obY(a0),d0
0001ED4C 0440 0010                  		subi.w	#$10,d0
0001ED50 B069 000C                  		cmp.w	obY(a1),d0
0001ED54 6500                       		bcs.s	@donothing
0001ED56 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's vertical speed
0001ED5A 337C FE80 0012             		move.w	#-$180,obVelY(a1)
0001ED60 4A29 0025                  		tst.b	ob2ndRout(a1)
0001ED64 6600                       		bne.s	@donothing
0001ED66 5829 0025                  		addq.b	#4,ob2ndRout(a1) ; advance the monitor's routine counter
0001ED6A 4E75                       		rts	
0001ED6C                            ; ===========================================================================
0001ED6C                            
0001ED6C                            @movingdown:
0001ED6C 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001ED72 6600                       		bne.s	@donothing
0001ED74 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's y-motion
0001ED78 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the monitor's routine counter
0001ED7C 4EB9 0001 602A             		jsr		BounceJD
0001ED82                            
0001ED82                            	@donothing:
0001ED82 4E75                       		rts	
0001ED84                            ; ===========================================================================
0001ED84                            
0001ED84                            React_Enemy:
0001ED84 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001ED88 6600                       		bne.s	@donthurtsonic	; if yes, branch
0001ED8A 0C28 001F 001C             		cmpi.b	#id_Spindash,obAnim(a0)	; is Sonic Spin Dashing? 
0001ED90 6700 0000                  		beq.w	@donthurtsonic	; if yes, branch
0001ED94 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001ED9A 6600 0000                  		bne.w	React_ChkHurt	; if not, branch
0001ED9E                            
0001ED9E                            	@donthurtsonic:
0001ED9E 4A29 0021                  		tst.b	obColProp(a1)
0001EDA2 6700                       		beq.s	breakenemy
0001EDA4                            
0001EDA4 4468 0010                  		neg.w	obVelX(a0)	; repel Sonic
0001EDA8 4468 0012                  		neg.w	obVelY(a0)
0001EDAC E0E8 0010                  		asr	obVelX(a0)
0001EDB0 E0E8 0012                  		asr	obVelY(a0)
0001EDB4 137C 0000 0020             		move.b	#0,obColType(a1)
0001EDBA 5329 0021                  		subq.b	#1,obColProp(a1)
0001EDBE 6600                       		bne.s	@flagnotclear
0001EDC0 08E9 0007 0022             		bset	#7,obStatus(a1)
0001EDC6                            
0001EDC6                            	@flagnotclear:
0001EDC6 4E75                       		rts	
0001EDC8                            ; ===========================================================================
0001EDC8                            
0001EDC8                            breakenemy:
0001EDC8 08E9 0007 0022             		bset	#7,obStatus(a1)
0001EDCE 7000                       		moveq	#0,d0
0001EDD0 3038 F7D0                  		move.w	(v_itembonus).w,d0
0001EDD4 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; add 2 to item bonus counter
0001EDD8 0C40 0006                  		cmpi.w	#6,d0
0001EDDC 6500                       		bcs.s	@bonusokay
0001EDDE 7006                       		moveq	#6,d0		; max bonus is lvl6
0001EDE0                            
0001EDE0                            	@bonusokay:
0001EDE0 3340 003E                  		move.w	d0,$3E(a1)
0001EDE4 303B 0000                  		move.w	@points(pc,d0.w),d0
0001EDE8 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 enemies been destroyed?
0001EDEE 6500                       		bcs.s	@lessthan16	; if not, branch
0001EDF0 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001EDF4 337C 000A 003E             		move.w	#$A,$3E(a1)
0001EDFA                            
0001EDFA                            	@lessthan16:
0001EDFA 6100 0000                  		bsr.w	AddPoints
0001EDFE 4EB9 0001 602A             		jsr		BounceJD
0001EE04 12BC 0027                  		move.b	#id_ExplosionItem,0(a1) ; change object to explosion
0001EE08 137C 0000 0024             		move.b	#0,obRoutine(a1)
0001EE0E 4A68 0012                  		tst.w	obVelY(a0)
0001EE12 6B00                       		bmi.s	@bouncedown
0001EE14 3028 000C                  		move.w	obY(a0),d0
0001EE18 B069 000C                  		cmp.w	obY(a1),d0
0001EE1C 6400                       		bcc.s	@bounceup
0001EE1E 4468 0012                  		neg.w	obVelY(a0)
0001EE22 4E75                       		rts	
0001EE24                            ; ===========================================================================
0001EE24                            
0001EE24                            	@bouncedown:
0001EE24 0668 0100 0012             		addi.w	#$100,obVelY(a0)
0001EE2A 4E75                       		rts	
0001EE2C                            
0001EE2C                            	@bounceup:
0001EE2C 0468 0100 0012             		subi.w	#$100,obVelY(a0)
0001EE32 4E75                       		rts	
0001EE34                            
0001EE34 000A 0014 0032 0064        @points:	dc.w 10, 20, 50, 100	; points awarded div 10
0001EE3C                            
0001EE3C                            ; ===========================================================================
0001EE3C                            
0001EE3C                            React_Caterkiller:
0001EE3C 08E9 0007 0022             		bset	#7,obStatus(a1)
0001EE42                            
0001EE42                            React_ChkHurt:
0001EE42 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001EE46 6700                       		beq.s	notinvincible	; if not, branch
0001EE48                            
0001EE48                            	isflashing:
0001EE48 70FF                       		moveq	#-1,d0
0001EE4A 4E75                       		rts	
0001EE4C                            ; ===========================================================================
0001EE4C                            
0001EE4C                            	notinvincible:
0001EE4C 4E71                       		nop	
0001EE4E 4A68 0030                  		tst.w	$30(a0)		; is Sonic flashing?
0001EE52 66F4                       		bne.s	isflashing	; if yes, branch
0001EE54 2449                       		movea.l	a1,a2
0001EE56                            
0001EE56                            ; End of function ReactToItem
0001EE56                            ; continue straight to HurtSonic
0001EE56                            
0001EE56                            ; ---------------------------------------------------------------------------
0001EE56                            ; Hurting Sonic	subroutine
0001EE56                            ; ---------------------------------------------------------------------------
0001EE56                            
0001EE56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE56                            
0001EE56                            
0001EE56                            HurtSonic:
0001EE56 4A38 FE2C                  		tst.b	(v_shield).w	; does Sonic have a shield?
0001EE5A 6600                       		bne.s	@hasshield	; if yes, branch
0001EE5C 4A38 F5C8                  		tst.b	(v_rshield).w	; does Sonic have a red shield?
0001EE60 6600                       		bne.s	@hasshield	; if yes, branch
0001EE62 4A38 F5C9                  		tst.b	(v_gshield).w	; does Sonic have a gold shield?
0001EE66 6600                       		bne.s	@hasshield	; if yes, branch
0001EE68 4A38 F5CA                  		tst.b	(v_spshield).w	; does Sonic have a silver shield?
0001EE6C 6600                       		bne.s	@hasshield	; if yes, branch
0001EE6E 4A78 FE20                  		tst.w	(v_rings).w	; does Sonic have any rings?
0001EE72 6700 0000                  		beq.w	@norings	; if not, branch
0001EE76                            
0001EE76 4EB9 0000 FD46             		jsr	(FindFreeObj).l
0001EE7C 6600                       		bne.s	@hasshield
0001EE7E 12BC 0037                  		move.b	#id_RingLoss,0(a1) ; load bouncing multi rings object
0001EE82 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001EE88 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001EE8E                            
0001EE8E                            	@hasshield:
0001EE8E 0C38 0001 FE2C             		cmpi.b	#1,(v_shield).w     ; does sonic have a Shield?
0001EE94 6600                       		bne.s	@hasrshield        ; if no, check for red shield
0001EE96 0C12 006E                  		cmpi.b	#$6E,(a2)     ; was damage caused by electrocuter?
0001EE9A 6700 FFAC                  		beq.w	isflashing
0001EE9E 0C12 0086                  		cmpi.b	#$86,(a2)     ; was damage caused by Plasma Ball Launcher?
0001EEA2 6700 FFA4                  		beq.w	isflashing
0001EEA6                            
0001EEA6                            	@hasrshield:
0001EEA6 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w     ; does sonic not a Red Shield?
0001EEAC 6700                       		beq.s	@hasspshield          ; if yes, check for gray shield
0001EEAE 0C12 0014                  		cmpi.b	#$14,(a2)	; was damage caused by lava ball?
0001EEB2 6700 FF94                  		beq.w 	isflashing
0001EEB6 0C12 004C                  		cmpi.b	#$4C,(a2)	; was damage caused by lava geyser?
0001EEBA 6700 FF8C                  		beq.w 	isflashing
0001EEBE 0C12 004D                  		cmpi.b	#$4D,(a2)	; was damage caused by lava geyser?
0001EEC2 6700 FF84                  		beq.w 	isflashing
0001EEC6 0C12 0062                  		cmpi.b	#$62,(a2)	; was damage caused by gargoyle?
0001EECA 6700 FF7C                  		beq.w 	isflashing
0001EECE 0C12 0074                  		cmpi.b	#$74,(a2)	; was damage caused by MZ fire boss?
0001EED2 6700 FF74                  		beq.w 	isflashing
0001EED6 0C12 0035                  		cmpi.b	#$35,(a2)	; was damage caused by burning grass?
0001EEDA 6700 FF6C                  		beq.w 	isflashing
0001EEDE 0C12 006D                  		cmpi.b	#$6D,(a2)	; was damage caused by flamethrower?
0001EEE2 6700 FF64                  		beq.w 	isflashing
0001EEE6 0C12 0054                  		cmpi.b	#$54,(a2)	; was damage caused by Lava Tag/Magma?
0001EEEA 6700 FF5C                  		beq.w 	isflashing
0001EEEE                            
0001EEEE                            	@hasspshield:
0001EEEE 0C38 0001 F5CA             		cmpi.b	#1,(v_spshield).w     ; does sonic have a sp Shield?
0001EEF4 6600 0000                  		bne.w	@hurtcont           ; if yes, make him invulnerable to metal objects
0001EEF8 0C12 0015                  		cmpi.b	#$15,(a2)	; was damage caused by SBZ Spiked Ball?
0001EEFC 6700 FF4A                  		beq.w 	isflashing
0001EF00 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ Harpoon?
0001EF04 6700 FF42                  		beq.w 	isflashing
0001EF08 0C12 0017                  		cmpi.b	#$17,(a2)	; was damage caused by helix of spikes?
0001EF0C 6700 FF3A                  		beq.w 	isflashing
0001EF10 0C12 0031                  		cmpi.b	#$31,(a2)	; was damage caused by Chained Stompers?
0001EF14 6700 FF32                  		beq.w 	isflashing
0001EF18 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by Spikes?
0001EF1C 6700 FF2A                  		beq.w 	isflashing
0001EF20 0C12 007B                  		cmpi.b	#$7B,(a2)	; was damage caused by SLZ boss spikeball?
0001EF24 6700 FF22                  		beq.w 	isflashing
0001EF28 0C12 0057                  		cmpi.b	#$57,(a2)	; was damage caused by Spiked Ball & Chain?
0001EF2C 6700 FF1A                  		beq.w 	isflashing
0001EF30 0C12 0058                  		cmpi.b	#$58,(a2)	; was damage caused by Big Spiked Ball?
0001EF34 6700 FF12                  		beq.w 	isflashing
0001EF38 0C12 006A                  		cmpi.b	#$6A,(a2)	; was damage caused by Saws?
0001EF3C 6700 FF0A                  		beq.w 	isflashing
0001EF40 0C12 005E                  		cmpi.b	#$5E,(a2)	; was damage caused by Seesaw ball?
0001EF44 6700 FF02                  		beq.w 	isflashing
0001EF48                            
0001EF48 0C12 0006                  		cmpi.b	#$06,(a2)	; was damage caused by Mozzietron?
0001EF4C 6700 FE7A                  		beq.w 	breakenemy
0001EF50 0C12 001E                  		cmpi.b	#$1E,(a2)	; was damage caused by Ball Hog?
0001EF54 6700 FE72                  		beq.w 	breakenemy
0001EF58 0C12 002D                  		cmpi.b	#$2D,(a2)	; was damage caused by Burrobot?
0001EF5C 6700 FE6A                  		beq.w 	breakenemy
0001EF60 0C12 0017                  		cmpi.b	#$17,(a2)	; was damage caused by Jaws?
0001EF64 6700 FEE2                  		beq.w 	isflashing
0001EF68 0C12 0050                  		cmpi.b	#$50,(a2)	; was damage caused by Yadrin?
0001EF6C 6700 FE5A                  		beq.w 	breakenemy
0001EF70                            		;cmpi.b	#$5F,(a2)	; was damage caused by Bomb?
0001EF70                            		;beq.w 	breakenemy
0001EF70 0C12 0060                  		cmpi.b	#$60,(a2)	; was damage caused by Orbinaut?
0001EF74 6700 FE52                  		beq.w 	breakenemy
0001EF78 0C12 0078                  		cmpi.b	#$78,(a2)	; was damage caused by Catterkiller?
0001EF7C 6700 FE4A                  		beq.w 	breakenemy
0001EF80                            
0001EF80                            	@hurtcont:
0001EF80 11FC 0000 FE2C             		move.b	#0,(v_shield).w		; remove shield
0001EF86                            		;move.b	#0,(v_gshield).w	; remove g shield
0001EF86 11FC 0000 F5CA             		move.b	#0,(v_spshield).w	; remove sp shield
0001EF8C                            		
0001EF8C 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w ; do you have no r shield?
0001EF92 6700                       		beq.s	@gshieldcheck	;if not, branch
0001EF94 5338 F5C8                  		subq.b	#1,(v_rshield).w
0001EF98                            		
0001EF98                            	@gshieldcheck:
0001EF98 0C38 0000 F5C9             		cmpi.b	#0,(v_gshield).w 	; do you have no g shield?
0001EF9E 6700                       		beq.s	@hurtcont2			;if not, branch
0001EFA0 5338 F5C9                  		subq.b	#1,(v_gshield).w	
0001EFA4                            		
0001EFA4                            	@hurtcont2:
0001EFA4 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001EFAA 4EB9 0001 66D2             		jsr		Sonic_ResetOnFloor
0001EFB0 08E8 0001 0022             		bset	#1,obStatus(a0)
0001EFB6 317C FC00 0012             		move.w	#-$400,obVelY(a0) ; make Sonic bounce away from the object
0001EFBC 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001EFC2 0828 0006 0022             		btst	#6,obStatus(a0)	; is Sonic underwater?
0001EFC8 6700                       		beq.s	@isdry		; if not, branch
0001EFCA                            
0001EFCA 317C FE00 0012             		move.w	#-$200,obVelY(a0) ; slower bounce
0001EFD0 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001EFD6                            
0001EFD6                            	@isdry:
0001EFD6 3028 0008                  		move.w	obX(a0),d0
0001EFDA B06A 0008                  		cmp.w	obX(a2),d0
0001EFDE 6500                       		bcs.s	@isleft		; if Sonic is left of the object, branch
0001EFE0 4468 0010                  		neg.w	obVelX(a0)	; if Sonic is right of the object, reverse
0001EFE4                            
0001EFE4                            	@isleft:
0001EFE4 117C 0000 0039             		move.b	#0,f_spindash(a0) ; clear Spin Dash flag 
0001EFEA 317C 0000 0020             		move.w	#0,obInertia(a0) 
0001EFF0 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0) 
0001EFF6 317C 0120 0030             		move.w	#$120,$30(a0)
0001EFFC 0C12 006E                  		cmpi.b	#$6E,(a2)    ; check if you were hurt by Electrocuter
0001F000 6700                       		beq.s	@hurtelec       ; if yes, branch
0001F002 0C12 0086                  		cmpi.b	#$86,(a2)    ; check if you were hurt by FZ plasma
0001F006 6700                       		beq.s	@hurtelec       ; if yes, branch
0001F008 317C 0000 0020             		move.w	#0,obInertia(a0)
0001F00E 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0)
0001F014 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001F01A 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001F01E 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001F022 6600                       		bne.s	@sound		; if not, branch
0001F024 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001F028 6600                       		bne.s	@sound		; if not, branch
0001F02A 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001F02E                            
0001F02E                            	@sound:
0001F02E 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001F034 70FF                       		moveq	#-1,d0
0001F036 4E75                       		rts	
0001F038                            
0001F038                            	@hurtelec:
0001F038 117C 0020 001C             		move.b	#id_Hurt2,obAnim(a0)
0001F03E 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001F044 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001F048 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001F04C 66E0                       		bne.s	@sound		; if not, branch
0001F04E 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001F052 66DA                       		bne.s	@sound		; if not, branch
0001F054 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001F058                            ; ===========================================================================
0001F058                            
0001F058                            @norings:
0001F058 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat on?
0001F05C 6600 FE30                  		bne.w	@hasshield	; if yes, branch
0001F060                            
0001F060                            ; ---------------------------------------------------------------------------
0001F060                            ; Subroutine to	kill Sonic
0001F060                            ; ---------------------------------------------------------------------------
0001F060                            
0001F060                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F060                            
0001F060                            
0001F060                            KillSonic:
0001F060 11FC 0002 F5D8             		move.b    #2,(Super_Sonic_palette).w; Remove rotating palette
0001F066 4238 FE19                  		clr.b (Super_Sonic_Flag).w ; Revert Sonic to Normal
0001F06A 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	active?
0001F06E 6600 0000                  		bne.w	@dontdie	; if yes, branch
0001F072 31FC 0000 FE20             		move.w	#0,(v_rings).w ; clear rings
0001F078 11FC 0000 FE2D             		move.b	#0,(v_invinc).w	; remove invincibility
0001F07E 11FC 0000 FE2E             		move.b  #0,(v_shoes).w
0001F084 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0001F08A 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w  ;clear victory animation flag
0001F090 117C 0006 0024             		move.b	#6,obRoutine(a0)
0001F096 4EB9 0001 66D2             		jsr		Sonic_ResetOnFloor
0001F09C 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F0A2 317C F900 0012             		move.w	#-$700,obVelY(a0)
0001F0A8 317C 0000 0010             		move.w	#0,obVelX(a0)
0001F0AE 317C 0000 0020             		move.w	#0,obInertia(a0)
0001F0B4 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001F0BA 0C12 0054                  		cmpi.b	#$54,(a2)    ; check if you were killed by lava
0001F0BE 6700                       		beq.s	Kill_Lava       ; if yes, branch
0001F0C0 0C12 006D                  		cmpi.b	#$6D,(a2)    ; check if you were killed by flamethrower
0001F0C4 6700                       		beq.s	Kill_Lava        ; if yes, branch
0001F0C6 117C 0018 001C             		move.b	#id_Death,obAnim(a0)
0001F0CC 08E8 0007 0002             		bset	#7,obGfx(a0)
0001F0D2 303C 0000                  		move.w	#sfx_Death,d0	; play normal death sound
0001F0D6 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; check	if you were killed by spikes
0001F0DA 6600                       		bne.s	@sound
0001F0DC 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; play spikes death sound
0001F0E0                            
0001F0E0                            	@sound:
0001F0E0 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001F0E6                            
0001F0E6                            	@dontdie:
0001F0E6 70FF                       		moveq	#-1,d0
0001F0E8 4E75                       		rts	
0001F0EA                            ; End of function KillSonic
0001F0EA                            Kill_Lava:	
0001F0EA 08E8 0007 0002             	bset	#7,obGfx(a0)
0001F0F0 117C 0016 001C             	move.b	#$16,$1C(a0)
0001F0F6 303C 00C8                  	move.w	#$C8,d0        ; play death sound
0001F0FA 4EB9 0000 12A0                 jsr		(PlaySound_Special).l
0001F100                            
0001F100                            
0001F100                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F100                            
0001F100                            
0001F100                            React_Special:
0001F100 1229 0020                  		move.b	obColType(a1),d1
0001F104 0201 003F                  		andi.b	#$3F,d1
0001F108 0C01 000B                  		cmpi.b	#$B,d1		; is collision type $CB	?
0001F10C 6700                       		beq.s	@caterkiller	; if yes, branch
0001F10E 0C01 000C                  		cmpi.b	#$C,d1		; is collision type $CC	?
0001F112 6700                       		beq.s	@yadrin		; if yes, branch
0001F114 0C01 0017                  		cmpi.b	#$17,d1		; is collision type $D7	?
0001F118 6700                       		beq.s	@D7orE1		; if yes, branch
0001F11A 0C01 0021                  		cmpi.b	#$21,d1		; is collision type $E1	?
0001F11E 6700                       		beq.s	@D7orE1		; if yes, branch
0001F120 4E75                       		rts	
0001F122                            ; ===========================================================================
0001F122                            
0001F122                            @caterkiller:
0001F122 6000 FD18                  		bra.w	React_Caterkiller
0001F126                            ; ===========================================================================
0001F126                            
0001F126                            @yadrin:
0001F126 9A40                       		sub.w	d0,d5
0001F128 0C45 0008                  		cmpi.w	#8,d5
0001F12C 6400                       		bcc.s	@normalenemy
0001F12E 3029 0008                  		move.w	obX(a1),d0
0001F132 5940                       		subq.w	#4,d0
0001F134 0829 0000 0022             		btst	#0,obStatus(a1)
0001F13A 6700                       		beq.s	@noflip
0001F13C 0440 0010                  		subi.w	#$10,d0
0001F140                            
0001F140                            	@noflip:
0001F140 9042                       		sub.w	d2,d0
0001F142 6400                       		bcc.s	@loc_1B13C
0001F144 0640 0018                  		addi.w	#$18,d0
0001F148 6500                       		bcs.s	@loc_1B140
0001F14A 6000                       		bra.s	@normalenemy
0001F14C                            ; ===========================================================================
0001F14C                            
0001F14C                            	@loc_1B13C:
0001F14C B044                       		cmp.w	d4,d0
0001F14E 6200                       		bhi.s	@normalenemy
0001F150                            
0001F150                            	@loc_1B140:
0001F150 6000 FCF0                  		bra.w	React_ChkHurt
0001F154                            ; ===========================================================================
0001F154                            
0001F154                            	@normalenemy:
0001F154 6000 FC2E                  		bra.w	React_Enemy
0001F158                            ; ===========================================================================
0001F158                            
0001F158                            @D7orE1:
0001F158 5229 0021                  		addq.b	#1,obColProp(a1)
0001F15C 4E75                       		rts	
0001F15E                            ; End of function React_Special
0001F15E                            
0001F15E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F15E                            
0001F15E                            React_ChkWaterTag:
0001F15E 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001F164 6600 0000                  		bne	NotWaterTag
0001F168 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0001F16E                            	NotWaterTag:
0001F16E 4E75                       		rts
0001F170                            
0001F170                            React_WaterTag:
0001F170 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001F176 6700 0000                  		beq	SkipWaterTag
0001F17A 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0001F180                            	SkipWaterTag:
0001F180 4E75                       		rts
0001F180 4E75                       		rts
0001F182                            
0001F182                            ; ---------------------------------------------------------------------------
0001F182                            ; Subroutine to	show the special stage layout
0001F182                            ; ---------------------------------------------------------------------------
0001F182                            
0001F182                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F182                            
0001F182                            
0001F182                            SS_ShowLayout:
0001F182 6100 0000                  		bsr.w	SS_AniWallsRings
0001F186 6100 0000                  		bsr.w	SS_AniItems
0001F18A 3F05                       		move.w	d5,-(sp)
0001F18C 43F8 8000                  		lea	($FFFF8000).w,a1
0001F190 1038 F780                  		move.b	(v_ssangle).w,d0
0001F194 0200 00FC                  		andi.b	#$FC,d0
0001F198 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001F19E 3800                       		move.w	d0,d4
0001F1A0 3A01                       		move.w	d1,d5
0001F1A2 C9FC 0018                  		muls.w	#$18,d4
0001F1A6 CBFC 0018                  		muls.w	#$18,d5
0001F1AA 7400                       		moveq	#0,d2
0001F1AC 3438 F700                  		move.w	(v_screenposx).w,d2
0001F1B0 84FC 0018                  		divu.w	#$18,d2
0001F1B4 4842                       		swap	d2
0001F1B6 4442                       		neg.w	d2
0001F1B8 0642 FF4C                  		addi.w	#-$B4,d2
0001F1BC 7600                       		moveq	#0,d3
0001F1BE 3638 F704                  		move.w	(v_screenposy).w,d3
0001F1C2 86FC 0018                  		divu.w	#$18,d3
0001F1C6 4843                       		swap	d3
0001F1C8 4443                       		neg.w	d3
0001F1CA 0643 FF4C                  		addi.w	#-$B4,d3
0001F1CE 3E3C 000F                  		move.w	#$F,d7
0001F1D2                            
0001F1D2                            loc_1B19E:
0001F1D2 48A7 E000                  		movem.w	d0-d2,-(sp)
0001F1D6 48A7 C000                  		movem.w	d0-d1,-(sp)
0001F1DA 4440                       		neg.w	d0
0001F1DC C3C2                       		muls.w	d2,d1
0001F1DE C1C3                       		muls.w	d3,d0
0001F1E0 2C00                       		move.l	d0,d6
0001F1E2 DC81                       		add.l	d1,d6
0001F1E4 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001F1E8 C1C2                       		muls.w	d2,d0
0001F1EA C3C3                       		muls.w	d3,d1
0001F1EC D280                       		add.l	d0,d1
0001F1EE 2406                       		move.l	d6,d2
0001F1F0 3C3C 000F                  		move.w	#$F,d6
0001F1F4                            
0001F1F4                            loc_1B1C0:
0001F1F4 2002                       		move.l	d2,d0
0001F1F6 E080                       		asr.l	#8,d0
0001F1F8 32C0                       		move.w	d0,(a1)+
0001F1FA 2001                       		move.l	d1,d0
0001F1FC E080                       		asr.l	#8,d0
0001F1FE 32C0                       		move.w	d0,(a1)+
0001F200 D485                       		add.l	d5,d2
0001F202 D284                       		add.l	d4,d1
0001F204 51CE FFEE                  		dbf	d6,loc_1B1C0
0001F208                            
0001F208 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001F20C 0643 0018                  		addi.w	#$18,d3
0001F210 51CF FFC0                  		dbf	d7,loc_1B19E
0001F214                            
0001F214 3A1F                       		move.w	(sp)+,d5
0001F216 41F9 00FF 0000             		lea	($FF0000).l,a0
0001F21C 7000                       		moveq	#0,d0
0001F21E 3038 F704                  		move.w	(v_screenposy).w,d0
0001F222 80FC 0018                  		divu.w	#$18,d0
0001F226 C0FC 0080                  		mulu.w	#$80,d0
0001F22A D1C0                       		adda.l	d0,a0
0001F22C 7000                       		moveq	#0,d0
0001F22E 3038 F700                  		move.w	(v_screenposx).w,d0
0001F232 80FC 0018                  		divu.w	#$18,d0
0001F236 D0C0                       		adda.w	d0,a0
0001F238 49F8 8000                  		lea	($FFFF8000).w,a4
0001F23C 3E3C 000F                  		move.w	#$F,d7
0001F240                            
0001F240                            loc_1B20C:
0001F240 3C3C 000F                  		move.w	#$F,d6
0001F244                            
0001F244                            loc_1B210:
0001F244 7000                       		moveq	#0,d0
0001F246 1018                       		move.b	(a0)+,d0
0001F248 6700                       		beq.s	loc_1B268
0001F24A 0C00 004E                  		cmpi.b	#$4E,d0
0001F24E 6200                       		bhi.s	loc_1B268
0001F250 3614                       		move.w	(a4),d3
0001F252 0643 0120                  		addi.w	#$120,d3
0001F256 0C43 0070                  		cmpi.w	#$70,d3
0001F25A 6500                       		blo.s	loc_1B268
0001F25C 0C43 01D0                  		cmpi.w	#$1D0,d3
0001F260 6400                       		bhs.s	loc_1B268
0001F262 342C 0002                  		move.w	2(a4),d2
0001F266 0642 00F0                  		addi.w	#$F0,d2
0001F26A 0C42 0070                  		cmpi.w	#$70,d2
0001F26E 6500                       		blo.s	loc_1B268
0001F270 0C42 0170                  		cmpi.w	#$170,d2
0001F274 6400                       		bhs.s	loc_1B268
0001F276 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001F27C E748                       		lsl.w	#3,d0
0001F27E 4BF5 0000                  		lea	(a5,d0.w),a5
0001F282 225D                       		movea.l	(a5)+,a1
0001F284 321D                       		move.w	(a5)+,d1
0001F286 D241                       		add.w	d1,d1
0001F288 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001F28C 365D                       		movea.w	(a5)+,a3
0001F28E 7200                       		moveq	#0,d1
0001F290 1219                       		move.b	(a1)+,d1
0001F292 5301                       		subq.b	#1,d1
0001F294 6B00                       		bmi.s	loc_1B268
0001F296 4EB9 0000 FA1E             		jsr	(sub_D762).l
0001F29C                            
0001F29C                            loc_1B268:
0001F29C 584C                       		addq.w	#4,a4
0001F29E 51CE FFA4                  		dbf	d6,loc_1B210
0001F2A2                            
0001F2A2 41E8 0070                  		lea	$70(a0),a0
0001F2A6 51CF FF98                  		dbf	d7,loc_1B20C
0001F2AA                            
0001F2AA 11C5 F62C                  		move.b	d5,(v_spritecount).w
0001F2AE 0C05 0050                  		cmpi.b	#$50,d5
0001F2B2 6700                       		beq.s	loc_1B288
0001F2B4 24BC 0000 0000             		move.l	#0,(a2)
0001F2BA 4E75                       		rts	
0001F2BC                            ; ===========================================================================
0001F2BC                            
0001F2BC                            loc_1B288:
0001F2BC 157C 0000 FFFB             		move.b	#0,-5(a2)
0001F2C2 4E75                       		rts	
0001F2C4                            ; End of function SS_ShowLayout
0001F2C4                            
0001F2C4                            ; ---------------------------------------------------------------------------
0001F2C4                            ; Subroutine to	animate	walls and rings	in the special stage
0001F2C4                            ; ---------------------------------------------------------------------------
0001F2C4                            
0001F2C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F2C4                            
0001F2C4                            
0001F2C4                            SS_AniWallsRings:
0001F2C4 43F9 00FF 400C             		lea	($FF400C).l,a1
0001F2CA 7000                       		moveq	#0,d0
0001F2CC 1038 F780                  		move.b	(v_ssangle).w,d0
0001F2D0 E408                       		lsr.b	#2,d0
0001F2D2 0240 000F                  		andi.w	#$F,d0
0001F2D6 7223                       		moveq	#$23,d1
0001F2D8                            
0001F2D8                            loc_1B2A4:
0001F2D8 3280                       		move.w	d0,(a1)
0001F2DA 5049                       		addq.w	#8,a1
0001F2DC 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001F2E0                            
0001F2E0 43F9 00FF 4005             		lea	($FF4005).l,a1
0001F2E6 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
0001F2EA 6A00                       		bpl.s	loc_1B2C8
0001F2EC 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0001F2F2 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
0001F2F6 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0001F2FC                            
0001F2FC                            loc_1B2C8:
0001F2FC 1378 FEC3 01D0             		move.b	(v_ani1_frame).w,$1D0(a1)
0001F302 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0001F306 6A00                       		bpl.s	loc_1B2E4
0001F308 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
0001F30E 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0001F312 0238 0001 FEC5             		andi.b	#1,(v_ani2_frame).w
0001F318                            
0001F318                            loc_1B2E4:
0001F318 1038 FEC5                  		move.b	(v_ani2_frame).w,d0
0001F31C 1340 0138                  		move.b	d0,$138(a1)
0001F320 1340 0160                  		move.b	d0,$160(a1)
0001F324 1340 0148                  		move.b	d0,$148(a1)
0001F328 1340 0150                  		move.b	d0,$150(a1)
0001F32C 1340 01D8                  		move.b	d0,$1D8(a1)
0001F330 1340 01E0                  		move.b	d0,$1E0(a1)
0001F334 1340 01E8                  		move.b	d0,$1E8(a1)
0001F338 1340 01F0                  		move.b	d0,$1F0(a1)
0001F33C 1340 01F8                  		move.b	d0,$1F8(a1)
0001F340 1340 0200                  		move.b	d0,$200(a1)
0001F344 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0001F348 6A00                       		bpl.s	loc_1B326
0001F34A 11FC 0004 FEC6             		move.b	#4,(v_ani3_time).w
0001F350 5238 FEC7                  		addq.b	#1,(v_ani3_frame).w
0001F354 0238 0003 FEC7             		andi.b	#3,(v_ani3_frame).w
0001F35A                            
0001F35A                            loc_1B326:
0001F35A 1038 FEC7                  		move.b	(v_ani3_frame).w,d0
0001F35E 1340 0168                  		move.b	d0,$168(a1)
0001F362 1340 0170                  		move.b	d0,$170(a1)
0001F366 1340 0178                  		move.b	d0,$178(a1)
0001F36A 1340 0180                  		move.b	d0,$180(a1)
0001F36E 5338 FEC0                  		subq.b	#1,(v_ani0_time).w
0001F372 6A00                       		bpl.s	loc_1B350
0001F374 11FC 0007 FEC0             		move.b	#7,(v_ani0_time).w
0001F37A 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w
0001F37E 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w
0001F384                            
0001F384                            loc_1B350:
0001F384 43F9 00FF 4016             		lea	($FF4016).l,a1
0001F38A 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001F390 7000                       		moveq	#0,d0
0001F392 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0001F396 D040                       		add.w	d0,d0
0001F398 41F0 0000                  		lea	(a0,d0.w),a0
0001F39C 3290                       		move.w	(a0),(a1)
0001F39E 3368 0002 0008             		move.w	2(a0),8(a1)
0001F3A4 3368 0004 0010             		move.w	4(a0),$10(a1)
0001F3AA 3368 0006 0018             		move.w	6(a0),$18(a1)
0001F3B0 3368 0008 0020             		move.w	8(a0),$20(a1)
0001F3B6 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001F3BC 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001F3C2 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001F3C8 D0FC 0020                  		adda.w	#$20,a0
0001F3CC D2FC 0048                  		adda.w	#$48,a1
0001F3D0 3290                       		move.w	(a0),(a1)
0001F3D2 3368 0002 0008             		move.w	2(a0),8(a1)
0001F3D8 3368 0004 0010             		move.w	4(a0),$10(a1)
0001F3DE 3368 0006 0018             		move.w	6(a0),$18(a1)
0001F3E4 3368 0008 0020             		move.w	8(a0),$20(a1)
0001F3EA 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001F3F0 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001F3F6 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001F3FC D0FC 0020                  		adda.w	#$20,a0
0001F400 D2FC 0048                  		adda.w	#$48,a1
0001F404 3290                       		move.w	(a0),(a1)
0001F406 3368 0002 0008             		move.w	2(a0),8(a1)
0001F40C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001F412 3368 0006 0018             		move.w	6(a0),$18(a1)
0001F418 3368 0008 0020             		move.w	8(a0),$20(a1)
0001F41E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001F424 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001F42A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001F430 D0FC 0020                  		adda.w	#$20,a0
0001F434 D2FC 0048                  		adda.w	#$48,a1
0001F438 3290                       		move.w	(a0),(a1)
0001F43A 3368 0002 0008             		move.w	2(a0),8(a1)
0001F440 3368 0004 0010             		move.w	4(a0),$10(a1)
0001F446 3368 0006 0018             		move.w	6(a0),$18(a1)
0001F44C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001F452 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001F458 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001F45E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001F464 D0FC 0020                  		adda.w	#$20,a0
0001F468 D2FC 0048                  		adda.w	#$48,a1
0001F46C 4E75                       		rts	
0001F46E                            ; End of function SS_AniWallsRings
0001F46E                            
0001F46E                            ; ===========================================================================
0001F46E 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001F47E 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001F48E 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001F49E 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001F4AE 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001F4BE 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001F4CE 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001F4DE 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001F4EE                            ; ---------------------------------------------------------------------------
0001F4EE                            ; Subroutine to	remove items when you collect them in the special stage
0001F4EE                            ; ---------------------------------------------------------------------------
0001F4EE                            
0001F4EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F4EE                            
0001F4EE                            
0001F4EE                            SS_RemoveCollectedItem:
0001F4EE 45F9 00FF 4400             		lea	($FF4400).l,a2
0001F4F4 303C 001F                  		move.w	#$1F,d0
0001F4F8                            
0001F4F8                            loc_1B4C4:
0001F4F8 4A12                       		tst.b	(a2)
0001F4FA 6700                       		beq.s	locret_1B4CE
0001F4FC 504A                       		addq.w	#8,a2
0001F4FE 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001F502                            
0001F502                            locret_1B4CE:
0001F502 4E75                       		rts	
0001F504                            ; End of function SS_RemoveCollectedItem
0001F504                            
0001F504                            ; ---------------------------------------------------------------------------
0001F504                            ; Subroutine to	animate	special	stage items when you touch them
0001F504                            ; ---------------------------------------------------------------------------
0001F504                            
0001F504                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F504                            
0001F504                            
0001F504                            SS_AniItems:
0001F504 41F9 00FF 4400             		lea	($FF4400).l,a0
0001F50A 3E3C 001F                  		move.w	#$1F,d7
0001F50E                            
0001F50E                            loc_1B4DA:
0001F50E 7000                       		moveq	#0,d0
0001F510 1010                       		move.b	(a0),d0
0001F512 6700                       		beq.s	loc_1B4E8
0001F514 E548                       		lsl.w	#2,d0
0001F516 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001F51A 4E91                       		jsr	(a1)
0001F51C                            
0001F51C                            loc_1B4E8:
0001F51C 5048                       		addq.w	#8,a0
0001F51E                            
0001F51E                            loc_1B4EA:
0001F51E 51CF FFEE                  		dbf	d7,loc_1B4DA
0001F522                            
0001F522 4E75                       		rts	
0001F524                            ; End of function SS_AniItems
0001F524                            
0001F524                            ; ===========================================================================
0001F524 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001F528 0000 0000                  		dc.l SS_AniBumper
0001F52C 0000 0000                  		dc.l SS_Ani1Up
0001F530 0000 0000                  		dc.l SS_AniReverse
0001F534 0000 0000                  		dc.l SS_AniEmeraldSparks
0001F538 0000 0000                  		dc.l SS_AniGlassBlock
0001F53C                            ; ===========================================================================
0001F53C                            
0001F53C                            SS_AniRingSparks:
0001F53C 5328 0002                  		subq.b	#1,2(a0)
0001F540 6A00                       		bpl.s	locret_1B530
0001F542 117C 0005 0002             		move.b	#5,2(a0)
0001F548 7000                       		moveq	#0,d0
0001F54A 1028 0003                  		move.b	3(a0),d0
0001F54E 5228 0003                  		addq.b	#1,3(a0)
0001F552 2268 0004                  		movea.l	4(a0),a1
0001F556 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001F55A 1280                       		move.b	d0,(a1)
0001F55C 6600                       		bne.s	locret_1B530
0001F55E 4290                       		clr.l	(a0)
0001F560 42A8 0004                  		clr.l	4(a0)
0001F564                            
0001F564                            locret_1B530:
0001F564 4E75                       		rts	
0001F566                            ; ===========================================================================
0001F566 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001F56C                            ; ===========================================================================
0001F56C                            
0001F56C                            SS_AniBumper:
0001F56C 5328 0002                  		subq.b	#1,2(a0)
0001F570 6A00                       		bpl.s	locret_1B566
0001F572 117C 0007 0002             		move.b	#7,2(a0)
0001F578 7000                       		moveq	#0,d0
0001F57A 1028 0003                  		move.b	3(a0),d0
0001F57E 5228 0003                  		addq.b	#1,3(a0)
0001F582 2268 0004                  		movea.l	4(a0),a1
0001F586 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001F58A 6600                       		bne.s	loc_1B564
0001F58C 4290                       		clr.l	(a0)
0001F58E 42A8 0004                  		clr.l	4(a0)
0001F592 12BC 0025                  		move.b	#$25,(a1)
0001F596 4E75                       		rts	
0001F598                            ; ===========================================================================
0001F598                            
0001F598                            loc_1B564:
0001F598 1280                       		move.b	d0,(a1)
0001F59A                            
0001F59A                            locret_1B566:
0001F59A 4E75                       		rts	
0001F59C                            ; ===========================================================================
0001F59C 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001F5A2                            ; ===========================================================================
0001F5A2                            
0001F5A2                            SS_Ani1Up:
0001F5A2 5328 0002                  		subq.b	#1,2(a0)
0001F5A6 6A00                       		bpl.s	locret_1B596
0001F5A8 117C 0005 0002             		move.b	#5,2(a0)
0001F5AE 7000                       		moveq	#0,d0
0001F5B0 1028 0003                  		move.b	3(a0),d0
0001F5B4 5228 0003                  		addq.b	#1,3(a0)
0001F5B8 2268 0004                  		movea.l	4(a0),a1
0001F5BC 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001F5C0 1280                       		move.b	d0,(a1)
0001F5C2 6600                       		bne.s	locret_1B596
0001F5C4 4290                       		clr.l	(a0)
0001F5C6 42A8 0004                  		clr.l	4(a0)
0001F5CA                            
0001F5CA                            locret_1B596:
0001F5CA 4E75                       		rts	
0001F5CC                            ; ===========================================================================
0001F5CC 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001F5D2                            ; ===========================================================================
0001F5D2                            
0001F5D2                            SS_AniReverse:
0001F5D2 5328 0002                  		subq.b	#1,2(a0)
0001F5D6 6A00                       		bpl.s	locret_1B5CC
0001F5D8 117C 0007 0002             		move.b	#7,2(a0)
0001F5DE 7000                       		moveq	#0,d0
0001F5E0 1028 0003                  		move.b	3(a0),d0
0001F5E4 5228 0003                  		addq.b	#1,3(a0)
0001F5E8 2268 0004                  		movea.l	4(a0),a1
0001F5EC 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001F5F0 6600                       		bne.s	loc_1B5CA
0001F5F2 4290                       		clr.l	(a0)
0001F5F4 42A8 0004                  		clr.l	4(a0)
0001F5F8 12BC 002B                  		move.b	#$2B,(a1)
0001F5FC 4E75                       		rts	
0001F5FE                            ; ===========================================================================
0001F5FE                            
0001F5FE                            loc_1B5CA:
0001F5FE 1280                       		move.b	d0,(a1)
0001F600                            
0001F600                            locret_1B5CC:
0001F600 4E75                       		rts	
0001F602                            ; ===========================================================================
0001F602 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001F608                            ; ===========================================================================
0001F608                            
0001F608                            SS_AniEmeraldSparks:
0001F608 5328 0002                  		subq.b	#1,2(a0)
0001F60C 6A00                       		bpl.s	locret_1B60C
0001F60E 117C 0005 0002             		move.b	#5,2(a0)
0001F614 7000                       		moveq	#0,d0
0001F616 1028 0003                  		move.b	3(a0),d0
0001F61A 5228 0003                  		addq.b	#1,3(a0)
0001F61E 2268 0004                  		movea.l	4(a0),a1
0001F622 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001F626 1280                       		move.b	d0,(a1)
0001F628 6600                       		bne.s	locret_1B60C
0001F62A 4290                       		clr.l	(a0)
0001F62C 42A8 0004                  		clr.l	4(a0)
0001F630 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001F640                            
0001F640                            locret_1B60C:
0001F640 4E75                       		rts	
0001F642                            ; ===========================================================================
0001F642 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001F648                            ; ===========================================================================
0001F648                            
0001F648                            SS_AniGlassBlock:
0001F648 5328 0002                  		subq.b	#1,2(a0)
0001F64C 6A00                       		bpl.s	locret_1B640
0001F64E 117C 0001 0002             		move.b	#1,2(a0)
0001F654 7000                       		moveq	#0,d0
0001F656 1028 0003                  		move.b	3(a0),d0
0001F65A 5228 0003                  		addq.b	#1,3(a0)
0001F65E 2268 0004                  		movea.l	4(a0),a1
0001F662 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001F666 1280                       		move.b	d0,(a1)
0001F668 6600                       		bne.s	locret_1B640
0001F66A 12A8 0004                  		move.b	4(a0),(a1)
0001F66E 4290                       		clr.l	(a0)
0001F670 42A8 0004                  		clr.l	4(a0)
0001F674                            
0001F674                            locret_1B640:
0001F674 4E75                       		rts	
0001F676                            ; ===========================================================================
0001F676 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001F680                            
0001F680                            ; ---------------------------------------------------------------------------
0001F680                            ; Special stage	layout pointers
0001F680                            ; ---------------------------------------------------------------------------
0001F680                            SS_LayoutIndex:
0001F680 0000 0000                  		dc.l SS_1
0001F684 0000 0000                  		dc.l SS_2
0001F688 0000 0000                  		dc.l SS_3
0001F68C 0000 0000                  		dc.l SS_4
0001F690 0000 0000                  		dc.l SS_5
0001F694 0000 0000                  		dc.l SS_6
0001F698                            		even
0001F698                            
0001F698                            ; ---------------------------------------------------------------------------
0001F698                            ; Special stage start locations
0001F698                            ; ---------------------------------------------------------------------------
0001F698                            SS_StartLoc:	include	"_inc\Start Location Array - Special Stages.asm"
0001F698                            ; ---------------------------------------------------------------------------
0001F698                            ; Special stage start locations
0001F698                            ; ---------------------------------------------------------------------------
0001F698                            
0001F698                            		incbin	"startpos\ss1.bin"
0001F69C                            		incbin	"startpos\ss2.bin"
0001F6A0                            		incbin	"startpos\ss3.bin"
0001F6A4                            		incbin	"startpos\ss4.bin"
0001F6A8                            		incbin	"startpos\ss5.bin"
0001F6AC                            		incbin	"startpos\ss6.bin"
0001F6B0                            		even
0001F6B0                            		even
0001F6B0                            
0001F6B0                            ; ---------------------------------------------------------------------------
0001F6B0                            ; Subroutine to	load special stage layout
0001F6B0                            ; ---------------------------------------------------------------------------
0001F6B0                            
0001F6B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F6B0                            
0001F6B0                            
0001F6B0                            SS_Load:
0001F6B0 7000                       		moveq	#0,d0
0001F6B2 1038 FE16                  		move.b	(v_lastspecial).w,d0 ; load number of last special stage entered
0001F6B6 5238 FE16                  		addq.b	#1,(v_lastspecial).w
0001F6BA 0C38 0006 FE16             		cmpi.b	#6,(v_lastspecial).w
0001F6C0 6500                       		blo.s	SS_ChkEmldNum
0001F6C2 11FC 0000 FE16             		move.b	#0,(v_lastspecial).w ; reset if higher than 6
0001F6C8                            
0001F6C8                            SS_ChkEmldNum:
0001F6C8 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all emeralds?
0001F6CE 6700                       		beq.s	SS_LoadData	; if yes, branch
0001F6D0 7200                       		moveq	#0,d1
0001F6D2 1238 FE57                  		move.b	(v_emeralds).w,d1
0001F6D6 5301                       		subq.b	#1,d1
0001F6D8 6500                       		blo.s	SS_LoadData
0001F6DA 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0001F6DE                            
0001F6DE                            SS_ChkEmldLoop:	
0001F6DE B033 1000                  		cmp.b	(a3,d1.w),d0
0001F6E2 6600                       		bne.s	SS_ChkEmldRepeat
0001F6E4 60CA                       		bra.s	SS_Load
0001F6E6                            ; ===========================================================================
0001F6E6                            
0001F6E6                            SS_ChkEmldRepeat:
0001F6E6 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001F6EA                            
0001F6EA                            SS_LoadData:
0001F6EA E548                       		lsl.w	#2,d0
0001F6EC 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001F6F0 31D9 D008                  		move.w	(a1)+,(v_player+obX).w
0001F6F4 31D9 D00C                  		move.w	(a1)+,(v_player+obY).w
0001F6F8 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001F6FC 43F9 00FF 4000             		lea	($FF4000).l,a1
0001F702 303C 0000                  		move.w	#0,d0
0001F706 4EB9 0000 18D8             		jsr	(EniDec).l
0001F70C 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F712 303C 0FFF                  		move.w	#$FFF,d0
0001F716                            
0001F716                            SS_ClrRAM3:
0001F716 4299                       		clr.l	(a1)+
0001F718 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001F71C                            
0001F71C 43F9 00FF 1020             		lea	($FF1020).l,a1
0001F722 41F9 00FF 4000             		lea	($FF4000).l,a0
0001F728 723F                       		moveq	#$3F,d1
0001F72A                            
0001F72A                            loc_1B6F6:
0001F72A 743F                       		moveq	#$3F,d2
0001F72C                            
0001F72C                            loc_1B6F8:
0001F72C 12D8                       		move.b	(a0)+,(a1)+
0001F72E 51CA FFFC                  		dbf	d2,loc_1B6F8
0001F732                            
0001F732 43E9 0040                  		lea	$40(a1),a1
0001F736 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001F73A                            
0001F73A 43F9 00FF 4008             		lea	($FF4008).l,a1
0001F740 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001F746 724D                       		moveq	#$4D,d1
0001F748                            
0001F748                            loc_1B714:
0001F748 22D8                       		move.l	(a0)+,(a1)+
0001F74A 32FC 0000                  		move.w	#0,(a1)+
0001F74E 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001F754 32D8                       		move.w	(a0)+,(a1)+
0001F756 51C9 FFF0                  		dbf	d1,loc_1B714
0001F75A                            
0001F75A 43F9 00FF 4400             		lea	($FF4400).l,a1
0001F760 323C 003F                  		move.w	#$3F,d1
0001F764                            
0001F764                            loc_1B730:
0001F764                            
0001F764 4299                       		clr.l	(a1)+
0001F766 51C9 FFFC                  		dbf	d1,loc_1B730
0001F76A                            
0001F76A 4E75                       		rts	
0001F76C                            ; End of function SS_Load
0001F76C                            
0001F76C                            ; ===========================================================================
0001F76C                            
0001F76C                            SS_MapIndex:
0001F76C                            		include	"_inc\Special Stage Mappings & VRAM Pointers.asm"
0001F76C                            ; ---------------------------------------------------------------------------
0001F76C                            ; Special stage	mappings and VRAM pointers
0001F76C                            ; ---------------------------------------------------------------------------
0001F76C 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001F770 0142                       	dc.w $142		; VRAM setting
0001F772 0000 0000                  	dc.l Map_SSWalls
0001F776 0142                       	dc.w $142
0001F778 0000 0000                  	dc.l Map_SSWalls
0001F77C 0142                       	dc.w $142
0001F77E 0000 0000                  	dc.l Map_SSWalls
0001F782 0142                       	dc.w $142
0001F784 0000 0000                  	dc.l Map_SSWalls
0001F788 0142                       	dc.w $142
0001F78A 0000 0000                  	dc.l Map_SSWalls
0001F78E 0142                       	dc.w $142
0001F790 0000 0000                  	dc.l Map_SSWalls
0001F794 0142                       	dc.w $142
0001F796 0000 0000                  	dc.l Map_SSWalls
0001F79A 0142                       	dc.w $142
0001F79C 0000 0000                  	dc.l Map_SSWalls
0001F7A0 0142                       	dc.w $142
0001F7A2 0000 0000                  	dc.l Map_SSWalls
0001F7A6 2142                       	dc.w $2142
0001F7A8 0000 0000                  	dc.l Map_SSWalls
0001F7AC 2142                       	dc.w $2142
0001F7AE 0000 0000                  	dc.l Map_SSWalls
0001F7B2 2142                       	dc.w $2142
0001F7B4 0000 0000                  	dc.l Map_SSWalls
0001F7B8 2142                       	dc.w $2142
0001F7BA 0000 0000                  	dc.l Map_SSWalls
0001F7BE 2142                       	dc.w $2142
0001F7C0 0000 0000                  	dc.l Map_SSWalls
0001F7C4 2142                       	dc.w $2142
0001F7C6 0000 0000                  	dc.l Map_SSWalls
0001F7CA 2142                       	dc.w $2142
0001F7CC 0000 0000                  	dc.l Map_SSWalls
0001F7D0 2142                       	dc.w $2142
0001F7D2 0000 0000                  	dc.l Map_SSWalls
0001F7D6 2142                       	dc.w $2142
0001F7D8 0000 0000                  	dc.l Map_SSWalls
0001F7DC 4142                       	dc.w $4142
0001F7DE 0000 0000                  	dc.l Map_SSWalls
0001F7E2 4142                       	dc.w $4142
0001F7E4 0000 0000                  	dc.l Map_SSWalls
0001F7E8 4142                       	dc.w $4142
0001F7EA 0000 0000                  	dc.l Map_SSWalls
0001F7EE 4142                       	dc.w $4142
0001F7F0 0000 0000                  	dc.l Map_SSWalls
0001F7F4 4142                       	dc.w $4142
0001F7F6 0000 0000                  	dc.l Map_SSWalls
0001F7FA 4142                       	dc.w $4142
0001F7FC 0000 0000                  	dc.l Map_SSWalls
0001F800 4142                       	dc.w $4142
0001F802 0000 0000                  	dc.l Map_SSWalls
0001F806 4142                       	dc.w $4142
0001F808 0000 0000                  	dc.l Map_SSWalls
0001F80C 4142                       	dc.w $4142
0001F80E 0000 0000                  	dc.l Map_SSWalls
0001F812 6142                       	dc.w $6142
0001F814 0000 0000                  	dc.l Map_SSWalls
0001F818 6142                       	dc.w $6142
0001F81A 0000 0000                  	dc.l Map_SSWalls
0001F81E 6142                       	dc.w $6142
0001F820 0000 0000                  	dc.l Map_SSWalls
0001F824 6142                       	dc.w $6142
0001F826 0000 0000                  	dc.l Map_SSWalls
0001F82A 6142                       	dc.w $6142
0001F82C 0000 0000                  	dc.l Map_SSWalls
0001F830 6142                       	dc.w $6142
0001F832 0000 0000                  	dc.l Map_SSWalls
0001F836 6142                       	dc.w $6142
0001F838 0000 0000                  	dc.l Map_SSWalls
0001F83C 6142                       	dc.w $6142
0001F83E 0000 0000                  	dc.l Map_SSWalls
0001F842 6142                       	dc.w $6142
0001F844 0001 0DF0                  	dc.l Map_Bump
0001F848 023B                       	dc.w $23B
0001F84A 0000 0000                  	dc.l Map_SS_R
0001F84E 0570                       	dc.w $570
0001F850 0000 0000                  	dc.l Map_SS_R
0001F854 0251                       	dc.w $251
0001F856 0000 0000                  	dc.l Map_SS_R
0001F85A 0370                       	dc.w $370
0001F85C 0000 0000                  	dc.l Map_SS_Up
0001F860 0263                       	dc.w $263
0001F862 0000 0000                  	dc.l Map_SS_Down
0001F866 0263                       	dc.w $263
0001F868 0000 0000                  	dc.l Map_SS_R
0001F86C 22F0                       	dc.w $22F0
0001F86E 0000 0000                  	dc.l Map_SS_Glass
0001F872 0470                       	dc.w $470
0001F874 0000 0000                  	dc.l Map_SS_Glass
0001F878 05F0                       	dc.w $5F0
0001F87A 0000 0000                  	dc.l Map_SS_Glass
0001F87E 65F0                       	dc.w $65F0
0001F880 0000 0000                  	dc.l Map_SS_Glass
0001F884 25F0                       	dc.w $25F0
0001F886 0000 0000                  	dc.l Map_SS_Glass
0001F88A 45F0                       	dc.w $45F0
0001F88C 0000 0000                  	dc.l Map_SS_R
0001F890 02F0                       	dc.w $2F0
0001F892 0101 0DF0                  	dc.l Map_Bump+$1000000	; add frame no.	* $1000000
0001F896 023B                       	dc.w $23B
0001F898 0201 0DF0                  	dc.l Map_Bump+$2000000
0001F89C 023B                       	dc.w $23B
0001F89E 0000 0000                  	dc.l Map_SS_R
0001F8A2 0797                       	dc.w $797
0001F8A4 0000 0000                  	dc.l Map_SS_R
0001F8A8 07A0                       	dc.w $7A0
0001F8AA 0000 0000                  	dc.l Map_SS_R
0001F8AE 07A9                       	dc.w $7A9
0001F8B0 0000 0000                  	dc.l Map_SS_R
0001F8B4 0797                       	dc.w $797
0001F8B6 0000 0000                  	dc.l Map_SS_R
0001F8BA 07A0                       	dc.w $7A0
0001F8BC 0000 0000                  	dc.l Map_SS_R
0001F8C0 07A9                       	dc.w $7A9
0001F8C2 0000 BDB4                  	dc.l Map_Ring
0001F8C6 2798                       	dc.w $2798
0001F8C8 0000 0000                  	dc.l Map_SS_Chaos3
0001F8CC 0770                       	dc.w $770
0001F8CE 0000 0000                  	dc.l Map_SS_Chaos3
0001F8D2 2770                       	dc.w $2770
0001F8D4 0000 0000                  	dc.l Map_SS_Chaos3
0001F8D8 4770                       	dc.w $4770
0001F8DA 0000 0000                  	dc.l Map_SS_Chaos3
0001F8DE 6770                       	dc.w $6770
0001F8E0 0000 0000                  	dc.l Map_SS_Chaos1
0001F8E4 0770                       	dc.w $770
0001F8E6 0000 0000                  	dc.l Map_SS_Chaos2
0001F8EA 0770                       	dc.w $770
0001F8EC 0000 0000                  	dc.l Map_SS_R
0001F8F0 04F0                       	dc.w $4F0
0001F8F2 0400 BDB4                  	dc.l Map_Ring+$4000000
0001F8F6 2798                       	dc.w $2798
0001F8F8 0500 BDB4                  	dc.l Map_Ring+$5000000
0001F8FC 2798                       	dc.w $2798
0001F8FE 0600 BDB4                  	dc.l Map_Ring+$6000000
0001F902 2798                       	dc.w $2798
0001F904 0700 BDB4                  	dc.l Map_Ring+$7000000
0001F908 2798                       	dc.w $2798
0001F90A 0000 0000                  	dc.l Map_SS_Glass
0001F90E 23F0                       	dc.w $23F0
0001F910 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001F914 23F0                       	dc.w $23F0
0001F916 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001F91A 23F0                       	dc.w $23F0
0001F91C 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001F920 23F0                       	dc.w $23F0
0001F922 0000 0000                  	dc.l Map_SS_R+$2000000
0001F926 04F0                       	dc.w $4F0
0001F928 0000 0000                  	dc.l Map_SS_Glass
0001F92C 05F0                       	dc.w $5F0
0001F92E 0000 0000                  	dc.l Map_SS_Glass
0001F932 65F0                       	dc.w $65F0
0001F934 0000 0000                  	dc.l Map_SS_Glass
0001F938 25F0                       	dc.w $25F0
0001F93A 0000 0000                  	dc.l Map_SS_Glass
0001F93E 45F0                       	dc.w $45F0
0001F93E 45F0                       	dc.w $45F0
0001F940                            
0001F940                            Map_SS_R:	include	"_maps\SS R Block.asm"
0001F940                            ; ---------------------------------------------------------------------------
0001F940                            ; Sprite mappings - special stage "R" block
0001F940                            ; ---------------------------------------------------------------------------
0001F940                            Map_SS_R_internal:
0001F940 0000                       		dc.w byte_1B912-Map_SS_R_internal
0001F942 0000                       		dc.w byte_1B918-Map_SS_R_internal
0001F944 0000                       		dc.w byte_1B91E-Map_SS_R_internal
0001F946 01                         byte_1B912:	dc.b 1
0001F947 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001F94C 01                         byte_1B918:	dc.b 1
0001F94D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001F952 00                         byte_1B91E:	dc.b 0
0001F954 00                         		even
0001F954 00                         		even
0001F954                            Map_SS_Glass:	include	"_maps\SS Glass Block.asm"
0001F954                            ; ---------------------------------------------------------------------------
0001F954                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001F954                            ; ---------------------------------------------------------------------------
0001F954                            Map_SS_Glass_internal:
0001F954 0000                       		dc.w byte_1B928-Map_SS_Glass_internal
0001F956 0000                       		dc.w byte_1B92E-Map_SS_Glass_internal
0001F958 0000                       		dc.w byte_1B934-Map_SS_Glass_internal
0001F95A 0000                       		dc.w byte_1B93A-Map_SS_Glass_internal
0001F95C 01                         byte_1B928:	dc.b 1
0001F95D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001F962 01                         byte_1B92E:	dc.b 1
0001F963 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001F968 01                         byte_1B934:	dc.b 1
0001F969 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001F96E 01                         byte_1B93A:	dc.b 1
0001F96F F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001F974                            		even
0001F974                            		even
0001F974                            Map_SS_Up:	include	"_maps\SS UP Block.asm"
0001F974                            ; ---------------------------------------------------------------------------
0001F974                            ; Sprite mappings - special stage "UP" block
0001F974                            ; ---------------------------------------------------------------------------
0001F974                            Map_SS_Up_internal:
0001F974 0000                       		dc.w byte_1B944-Map_SS_Up_internal
0001F976 0000                       		dc.w byte_1B94A-Map_SS_Up_internal
0001F978 01                         byte_1B944:	dc.b 1
0001F979 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001F97E 01                         byte_1B94A:	dc.b 1
0001F97F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001F984                            		even
0001F984                            		even
0001F984                            Map_SS_Down:	include	"_maps\SS DOWN Block.asm"
0001F984                            ; ---------------------------------------------------------------------------
0001F984                            ; Sprite mappings - special stage "DOWN" block
0001F984                            ; ---------------------------------------------------------------------------
0001F984                            Map_SS_Down_internal:
0001F984 0000                       		dc.w byte_1B954-Map_SS_Down_internal
0001F986 0000                       		dc.w byte_1B95A-Map_SS_Down_internal
0001F988 01                         byte_1B954:	dc.b 1
0001F989 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001F98E 01                         byte_1B95A:	dc.b 1
0001F98F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001F994                            		even
0001F994                            		even
0001F994                            		include	"_maps\SS Chaos Emeralds.asm"
0001F994                            ; ---------------------------------------------------------------------------
0001F994                            ; Sprite mappings - special stage chaos	emeralds
0001F994                            ; ---------------------------------------------------------------------------
0001F994 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001F996 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001F998 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001F99A 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001F99C 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001F99E 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001F9A0 01                         byte_1B96C:	dc.b 1
0001F9A1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001F9A6 01                         byte_1B972:	dc.b 1
0001F9A7 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0001F9AC 01                         byte_1B978:	dc.b 1
0001F9AD F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001F9B2 01                         byte_1B97E:	dc.b 1
0001F9B3 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001F9B8                            		even
0001F9B8                            		even
0001F9B8                            
0001F9B8                            		include	"_incObj\09 Sonic in Special Stage.asm"
0001F9B8                            ; ---------------------------------------------------------------------------
0001F9B8                            ; Object 09 - Sonic (special stage)
0001F9B8                            ; ---------------------------------------------------------------------------
0001F9B8                            
0001F9B8                            SonicSpecial:
0001F9B8 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001F9BC 6700                       		beq.s	Obj09_Normal	; if not, branch
0001F9BE 6100 0000                  		bsr.w	SS_FixCamera
0001F9C2 6000 0000                  		bra.w	DebugMode
0001F9C6                            ; ===========================================================================
0001F9C6                            
0001F9C6                            Obj09_Normal:
0001F9C6 7000                       		moveq	#0,d0
0001F9C8 1028 0024                  		move.b	obRoutine(a0),d0
0001F9CC 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001F9D0 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001F9D4                            ; ===========================================================================
0001F9D4 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001F9D6 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001F9D8 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001F9DA 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001F9DC                            ; ===========================================================================
0001F9DC                            
0001F9DC                            Obj09_Main:	; Routine 0
0001F9DC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001F9E0 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001F9E6 117C 0007 0017             		move.b	#7,obWidth(a0)
0001F9EC 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0001F9F4 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001F9FA 117C 0004 0001             		move.b	#4,obRender(a0)
0001FA00 317C 0000 0018             		move.w	#0,obPriority(a0)
0001FA06 117C 0002 001C             		move.b	#id_Roll,obAnim(a0)
0001FA0C 08E8 0002 0022             		bset	#2,obStatus(a0)
0001FA12 08E8 0001 0022             		bset	#1,obStatus(a0)
0001FA18                            
0001FA18                            Obj09_ChkDebug:	; Routine 2
0001FA18 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat enabled?
0001FA1C 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001FA1E 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0001FA24 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001FA26 31FC 0001 FE08             		move.w	#1,(v_debuguse).w ; change Sonic into a ring
0001FA2C                            
0001FA2C                            Obj09_NoDebug:
0001FA2C 117C 0000 0030             		move.b	#0,$30(a0)
0001FA32 7000                       		moveq	#0,d0
0001FA34 1028 0022                  		move.b	obStatus(a0),d0
0001FA38 0240 0002                  		andi.w	#2,d0
0001FA3C 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001FA40 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001FA44 4EB9 0001 6ED6             		jsr	(Sonic_LoadGfx).l
0001FA4A 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001FA50                            ; ===========================================================================
0001FA50 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001FA52 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001FA54                            ; ===========================================================================
0001FA54                            
0001FA54                            Obj09_OnWall:
0001FA54 6100 0000                  		bsr.w	Obj09_Jump
0001FA58 6100 0000                  		bsr.w	Obj09_Move
0001FA5C 6100 0000                  		bsr.w	Obj09_Fall
0001FA60 6000                       		bra.s	Obj09_Display
0001FA62                            ; ===========================================================================
0001FA62                            
0001FA62                            Obj09_InAir:
0001FA62 6100 0000                  		bsr.w	nullsub_2
0001FA66 6100 0000                  		bsr.w	Obj09_Move
0001FA6A 6100 0000                  		bsr.w	Obj09_Fall
0001FA6E                            
0001FA6E                            Obj09_Display:
0001FA6E 6100 0000                  		bsr.w	Obj09_ChkItems
0001FA72 6100 0000                  		bsr.w	Obj09_ChkItems2
0001FA76 4EB9 0000 F798             		jsr	(SpeedToPos).l
0001FA7C 6100 0000                  		bsr.w	SS_FixCamera
0001FA80 3038 F780                  		move.w	(v_ssangle).w,d0
0001FA84 D078 F782                  		add.w	(v_ssrotate).w,d0
0001FA88 31C0 F780                  		move.w	d0,(v_ssangle).w
0001FA8C 4EB9 0001 68F0             		jsr	(Sonic_Animate).l
0001FA92 4E75                       		rts	
0001FA94                            
0001FA94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FA94                            
0001FA94                            
0001FA94                            Obj09_Move:
0001FA94 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001FA9A 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001FA9C 6100 0000                  		bsr.w	Obj09_MoveLeft
0001FAA0                            
0001FAA0                            Obj09_ChkRight:
0001FAA0 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
0001FAA6 6700                       		beq.s	loc_1BA78	; if not, branch
0001FAA8 6100 0000                  		bsr.w	Obj09_MoveRight
0001FAAC                            
0001FAAC                            loc_1BA78:
0001FAAC 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001FAB0 0200 000C                  		andi.b	#btnL+btnR,d0
0001FAB4 6600                       		bne.s	loc_1BAA8
0001FAB6 3028 0020                  		move.w	obInertia(a0),d0
0001FABA 6700                       		beq.s	loc_1BAA8
0001FABC 6B00                       		bmi.s	loc_1BA9A
0001FABE 0440 000C                  		subi.w	#$C,d0
0001FAC2 6400                       		bcc.s	loc_1BA94
0001FAC4 303C 0000                  		move.w	#0,d0
0001FAC8                            
0001FAC8                            loc_1BA94:
0001FAC8 3140 0020                  		move.w	d0,obInertia(a0)
0001FACC 6000                       		bra.s	loc_1BAA8
0001FACE                            ; ===========================================================================
0001FACE                            
0001FACE                            loc_1BA9A:
0001FACE 0640 000C                  		addi.w	#$C,d0
0001FAD2 6400                       		bcc.s	loc_1BAA4
0001FAD4 303C 0000                  		move.w	#0,d0
0001FAD8                            
0001FAD8                            loc_1BAA4:
0001FAD8 3140 0020                  		move.w	d0,obInertia(a0)
0001FADC                            
0001FADC                            loc_1BAA8:
0001FADC 1038 F780                  		move.b	(v_ssangle).w,d0
0001FAE0 0600 0020                  		addi.b	#$20,d0
0001FAE4 0200 00C0                  		andi.b	#$C0,d0
0001FAE8 4400                       		neg.b	d0
0001FAEA 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001FAF0 C3E8 0020                  		muls.w	obInertia(a0),d1
0001FAF4 D3A8 0008                  		add.l	d1,obX(a0)
0001FAF8 C1E8 0020                  		muls.w	obInertia(a0),d0
0001FAFC D1A8 000C                  		add.l	d0,obY(a0)
0001FB00 48E7 C000                  		movem.l	d0-d1,-(sp)
0001FB04 2428 000C                  		move.l	obY(a0),d2
0001FB08 2628 0008                  		move.l	obX(a0),d3
0001FB0C 6100 0000                  		bsr.w	sub_1BCE8
0001FB10 6700                       		beq.s	loc_1BAF2
0001FB12 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001FB16 93A8 0008                  		sub.l	d1,obX(a0)
0001FB1A 91A8 000C                  		sub.l	d0,obY(a0)
0001FB1E 317C 0000 0020             		move.w	#0,obInertia(a0)
0001FB24 4E75                       		rts	
0001FB26                            ; ===========================================================================
0001FB26                            
0001FB26                            loc_1BAF2:
0001FB26 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001FB2A 4E75                       		rts	
0001FB2C                            ; End of function Obj09_Move
0001FB2C                            
0001FB2C                            
0001FB2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB2C                            
0001FB2C                            
0001FB2C                            Obj09_MoveLeft:
0001FB2C 08E8 0000 0022             		bset	#0,obStatus(a0)
0001FB32 3028 0020                  		move.w	obInertia(a0),d0
0001FB36 6700                       		beq.s	loc_1BB06
0001FB38 6A00                       		bpl.s	loc_1BB1A
0001FB3A                            
0001FB3A                            loc_1BB06:
0001FB3A 0440 000C                  		subi.w	#$C,d0
0001FB3E 0C40 F800                  		cmpi.w	#-$800,d0
0001FB42 6E00                       		bgt.s	loc_1BB14
0001FB44 303C F800                  		move.w	#-$800,d0
0001FB48                            
0001FB48                            loc_1BB14:
0001FB48 3140 0020                  		move.w	d0,obInertia(a0)
0001FB4C 4E75                       		rts	
0001FB4E                            ; ===========================================================================
0001FB4E                            
0001FB4E                            loc_1BB1A:
0001FB4E 0440 0040                  		subi.w	#$40,d0
0001FB52 6400                       		bcc.s	loc_1BB22
0001FB54 4E71                       		nop	
0001FB56                            
0001FB56                            loc_1BB22:
0001FB56 3140 0020                  		move.w	d0,obInertia(a0)
0001FB5A 4E75                       		rts	
0001FB5C                            ; End of function Obj09_MoveLeft
0001FB5C                            
0001FB5C                            
0001FB5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB5C                            
0001FB5C                            
0001FB5C                            Obj09_MoveRight:
0001FB5C 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001FB62 3028 0020                  		move.w	obInertia(a0),d0
0001FB66 6B00                       		bmi.s	loc_1BB48
0001FB68 0640 000C                  		addi.w	#$C,d0
0001FB6C 0C40 0800                  		cmpi.w	#$800,d0
0001FB70 6D00                       		blt.s	loc_1BB42
0001FB72 303C 0800                  		move.w	#$800,d0
0001FB76                            
0001FB76                            loc_1BB42:
0001FB76 3140 0020                  		move.w	d0,obInertia(a0)
0001FB7A 6000                       		bra.s	locret_1BB54
0001FB7C                            ; ===========================================================================
0001FB7C                            
0001FB7C                            loc_1BB48:
0001FB7C 0640 0040                  		addi.w	#$40,d0
0001FB80 6400                       		bcc.s	loc_1BB50
0001FB82 4E71                       		nop	
0001FB84                            
0001FB84                            loc_1BB50:
0001FB84 3140 0020                  		move.w	d0,obInertia(a0)
0001FB88                            
0001FB88                            locret_1BB54:
0001FB88 4E75                       		rts	
0001FB8A                            ; End of function Obj09_MoveRight
0001FB8A                            
0001FB8A                            
0001FB8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB8A                            
0001FB8A                            
0001FB8A                            Obj09_Jump:
0001FB8A 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001FB8E 0200 0070                  		andi.b	#btnABC,d0	; is A,	B or C pressed?
0001FB92 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001FB94 1038 F780                  		move.b	(v_ssangle).w,d0
0001FB98 0200 00FC                  		andi.b	#$FC,d0
0001FB9C 4400                       		neg.b	d0
0001FB9E 0400 0040                  		subi.b	#$40,d0
0001FBA2 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001FBA8 C3FC 0680                  		muls.w	#$680,d1
0001FBAC E081                       		asr.l	#8,d1
0001FBAE 3141 0010                  		move.w	d1,obVelX(a0)
0001FBB2 C1FC 0680                  		muls.w	#$680,d0
0001FBB6 E080                       		asr.l	#8,d0
0001FBB8 3140 0012                  		move.w	d0,obVelY(a0)
0001FBBC 08E8 0001 0022             		bset	#1,obStatus(a0)
0001FBCC                            
0001FBCC                            Obj09_NoJump:
0001FBCC 4E75                       		rts	
0001FBCE                            ; End of function Obj09_Jump
0001FBCE                            
0001FBCE                            
0001FBCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FBCE                            
0001FBCE                            
0001FBCE                            nullsub_2:
0001FBCE 4E75                       		rts	
0001FBD0                            ; End of function nullsub_2
0001FBD0                            
0001FBD0                            ; ===========================================================================
0001FBD0                            ; ---------------------------------------------------------------------------
0001FBD0                            ; unused subroutine to limit Sonic's upward vertical speed
0001FBD0                            ; ---------------------------------------------------------------------------
0001FBD0 323C FC00                  		move.w	#-$400,d1
0001FBD4 B268 0012                  		cmp.w	obVelY(a0),d1
0001FBD8 6F00                       		ble.s	locret_1BBB4
0001FBDA 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001FBDE 0200 0070                  		andi.b	#btnABC,d0
0001FBE2 6600                       		bne.s	locret_1BBB4
0001FBE4 3141 0012                  		move.w	d1,obVelY(a0)
0001FBE8                            
0001FBE8                            locret_1BBB4:
0001FBE8 4E75                       		rts	
0001FBEA                            ; ---------------------------------------------------------------------------
0001FBEA                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001FBEA                            ; ---------------------------------------------------------------------------
0001FBEA                            
0001FBEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FBEA                            
0001FBEA                            
0001FBEA                            SS_FixCamera:
0001FBEA 3428 000C                  		move.w	obY(a0),d2
0001FBEE 3628 0008                  		move.w	obX(a0),d3
0001FBF2 3038 F700                  		move.w	(v_screenposx).w,d0
0001FBF6 0443 00A0                  		subi.w	#$A0,d3
0001FBFA 6500                       		bcs.s	loc_1BBCE
0001FBFC 9043                       		sub.w	d3,d0
0001FBFE 9178 F700                  		sub.w	d0,(v_screenposx).w
0001FC02                            
0001FC02                            loc_1BBCE:
0001FC02 3038 F704                  		move.w	(v_screenposy).w,d0
0001FC06 0442 0070                  		subi.w	#$70,d2
0001FC0A 6500                       		bcs.s	locret_1BBDE
0001FC0C 9042                       		sub.w	d2,d0
0001FC0E 9178 F704                  		sub.w	d0,(v_screenposy).w
0001FC12                            
0001FC12                            locret_1BBDE:
0001FC12 4E75                       		rts	
0001FC14                            ; End of function SS_FixCamera
0001FC14                            
0001FC14                            ; ===========================================================================
0001FC14                            
0001FC14                            Obj09_ExitStage:
0001FC14 0678 0040 F782             		addi.w	#$40,(v_ssrotate).w
0001FC1A 0C78 1800 F782             		cmpi.w	#$1800,(v_ssrotate).w
0001FC20 6600                       		bne.s	loc_1BBF4
0001FC22 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001FC28                            
0001FC28                            loc_1BBF4:
0001FC28 0C78 3000 F782             		cmpi.w	#$3000,(v_ssrotate).w
0001FC2E 6D00                       		blt.s	loc_1BC12
0001FC30 31FC 0000 F782             		move.w	#0,(v_ssrotate).w
0001FC36 31FC 4000 F780             		move.w	#$4000,(v_ssangle).w
0001FC3C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001FC40 317C 003C 0038             		move.w	#$3C,$38(a0)
0001FC46                            
0001FC46                            loc_1BC12:
0001FC46 3038 F780                  		move.w	(v_ssangle).w,d0
0001FC4A D078 F782                  		add.w	(v_ssrotate).w,d0
0001FC4E 31C0 F780                  		move.w	d0,(v_ssangle).w
0001FC52 4EB9 0001 68F0             		jsr	(Sonic_Animate).l
0001FC58 4EB9 0001 6ED6             		jsr	(Sonic_LoadGfx).l
0001FC5E 6100 FF8A                  		bsr.w	SS_FixCamera
0001FC62 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001FC68                            ; ===========================================================================
0001FC68                            
0001FC68                            Obj09_Exit2:
0001FC68 5368 0038                  		subq.w	#1,$38(a0)
0001FC6C 6600                       		bne.s	loc_1BC40
0001FC6E 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001FC74                            
0001FC74                            loc_1BC40:
0001FC74 4EB9 0001 68F0             		jsr	(Sonic_Animate).l
0001FC7A 4EB9 0001 6ED6             		jsr	(Sonic_LoadGfx).l
0001FC80 6100 FF68                  		bsr.w	SS_FixCamera
0001FC84 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0001FC8A                            
0001FC8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC8A                            
0001FC8A                            
0001FC8A                            Obj09_Fall:
0001FC8A 2428 000C                  		move.l	obY(a0),d2
0001FC8E 2628 0008                  		move.l	obX(a0),d3
0001FC92 1038 F780                  		move.b	(v_ssangle).w,d0
0001FC96 0200 00FC                  		andi.b	#$FC,d0
0001FC9A 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001FCA0 3828 0010                  		move.w	obVelX(a0),d4
0001FCA4 48C4                       		ext.l	d4
0001FCA6 E184                       		asl.l	#8,d4
0001FCA8 C1FC 002A                  		muls.w	#$2A,d0
0001FCAC D084                       		add.l	d4,d0
0001FCAE 3828 0012                  		move.w	obVelY(a0),d4
0001FCB2 48C4                       		ext.l	d4
0001FCB4 E184                       		asl.l	#8,d4
0001FCB6 C3FC 002A                  		muls.w	#$2A,d1
0001FCBA D284                       		add.l	d4,d1
0001FCBC D680                       		add.l	d0,d3
0001FCBE 6100 0000                  		bsr.w	sub_1BCE8
0001FCC2 6700                       		beq.s	loc_1BCB0
0001FCC4 9680                       		sub.l	d0,d3
0001FCC6 7000                       		moveq	#0,d0
0001FCC8 3140 0010                  		move.w	d0,obVelX(a0)
0001FCCC 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001FCD2 D481                       		add.l	d1,d2
0001FCD4 6100 0000                  		bsr.w	sub_1BCE8
0001FCD8 6700                       		beq.s	loc_1BCC6
0001FCDA 9481                       		sub.l	d1,d2
0001FCDC 7200                       		moveq	#0,d1
0001FCDE 3141 0012                  		move.w	d1,obVelY(a0)
0001FCE2 4E75                       		rts	
0001FCE4                            ; ===========================================================================
0001FCE4                            
0001FCE4                            loc_1BCB0:
0001FCE4 D481                       		add.l	d1,d2
0001FCE6 6100 0000                  		bsr.w	sub_1BCE8
0001FCEA 6700                       		beq.s	loc_1BCD4
0001FCEC 9481                       		sub.l	d1,d2
0001FCEE 7200                       		moveq	#0,d1
0001FCF0 3141 0012                  		move.w	d1,obVelY(a0)
0001FCF4 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001FCFA                            
0001FCFA                            loc_1BCC6:
0001FCFA E080                       		asr.l	#8,d0
0001FCFC E081                       		asr.l	#8,d1
0001FCFE 3140 0010                  		move.w	d0,obVelX(a0)
0001FD02 3141 0012                  		move.w	d1,obVelY(a0)
0001FD06 4E75                       		rts	
0001FD08                            ; ===========================================================================
0001FD08                            
0001FD08                            loc_1BCD4:
0001FD08 E080                       		asr.l	#8,d0
0001FD0A E081                       		asr.l	#8,d1
0001FD0C 3140 0010                  		move.w	d0,obVelX(a0)
0001FD10 3141 0012                  		move.w	d1,obVelY(a0)
0001FD14 08E8 0001 0022             		bset	#1,obStatus(a0)
0001FD1A 4E75                       		rts	
0001FD1C                            ; End of function Obj09_Fall
0001FD1C                            
0001FD1C                            
0001FD1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD1C                            
0001FD1C                            
0001FD1C                            sub_1BCE8:
0001FD1C 43F9 00FF 0000             		lea	($FF0000).l,a1
0001FD22 7800                       		moveq	#0,d4
0001FD24 4842                       		swap	d2
0001FD26 3802                       		move.w	d2,d4
0001FD28 4842                       		swap	d2
0001FD2A 0644 0044                  		addi.w	#$44,d4
0001FD2E 88FC 0018                  		divu.w	#$18,d4
0001FD32 C8FC 0080                  		mulu.w	#$80,d4
0001FD36 D3C4                       		adda.l	d4,a1
0001FD38 7800                       		moveq	#0,d4
0001FD3A 4843                       		swap	d3
0001FD3C 3803                       		move.w	d3,d4
0001FD3E 4843                       		swap	d3
0001FD40 0644 0014                  		addi.w	#$14,d4
0001FD44 88FC 0018                  		divu.w	#$18,d4
0001FD48 D2C4                       		adda.w	d4,a1
0001FD4A 7A00                       		moveq	#0,d5
0001FD4C 1819                       		move.b	(a1)+,d4
0001FD4E 6100                       		bsr.s	sub_1BD30
0001FD50 1819                       		move.b	(a1)+,d4
0001FD52 6100                       		bsr.s	sub_1BD30
0001FD54 D2FC 007E                  		adda.w	#$7E,a1
0001FD58 1819                       		move.b	(a1)+,d4
0001FD5A 6100                       		bsr.s	sub_1BD30
0001FD5C 1819                       		move.b	(a1)+,d4
0001FD5E 6100                       		bsr.s	sub_1BD30
0001FD60 4A05                       		tst.b	d5
0001FD62 4E75                       		rts	
0001FD64                            ; End of function sub_1BCE8
0001FD64                            
0001FD64                            
0001FD64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD64                            
0001FD64                            
0001FD64                            sub_1BD30:
0001FD64 6700                       		beq.s	locret_1BD44
0001FD66 0C04 0028                  		cmpi.b	#$28,d4
0001FD6A 6700                       		beq.s	locret_1BD44
0001FD6C 0C04 003A                  		cmpi.b	#$3A,d4
0001FD70 6500                       		bcs.s	loc_1BD46
0001FD72 0C04 004B                  		cmpi.b	#$4B,d4
0001FD76 6400                       		bcc.s	loc_1BD46
0001FD78                            
0001FD78                            locret_1BD44:
0001FD78 4E75                       		rts	
0001FD7A                            ; ===========================================================================
0001FD7A                            
0001FD7A                            loc_1BD46:
0001FD7A 1144 0030                  		move.b	d4,$30(a0)
0001FD7E 2149 0032                  		move.l	a1,$32(a0)
0001FD82 7AFF                       		moveq	#-1,d5
0001FD84 4E75                       		rts	
0001FD86                            ; End of function sub_1BD30
0001FD86                            
0001FD86                            
0001FD86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD86                            
0001FD86                            
0001FD86                            Obj09_ChkItems:
0001FD86 43F9 00FF 0000             		lea	($FF0000).l,a1
0001FD8C 7800                       		moveq	#0,d4
0001FD8E 3828 000C                  		move.w	obY(a0),d4
0001FD92 0644 0050                  		addi.w	#$50,d4
0001FD96 88FC 0018                  		divu.w	#$18,d4
0001FD9A C8FC 0080                  		mulu.w	#$80,d4
0001FD9E D3C4                       		adda.l	d4,a1
0001FDA0 7800                       		moveq	#0,d4
0001FDA2 3828 0008                  		move.w	obX(a0),d4
0001FDA6 0644 0020                  		addi.w	#$20,d4
0001FDAA 88FC 0018                  		divu.w	#$18,d4
0001FDAE D2C4                       		adda.w	d4,a1
0001FDB0 1811                       		move.b	(a1),d4
0001FDB2 6600                       		bne.s	Obj09_ChkCont
0001FDB4 4A28 003A                  		tst.b	$3A(a0)
0001FDB8 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001FDBC 7800                       		moveq	#0,d4
0001FDBE 4E75                       		rts	
0001FDC0                            ; ===========================================================================
0001FDC0                            
0001FDC0                            Obj09_ChkCont:
0001FDC0 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001FDC4 6600                       		bne.s	Obj09_Chk1Up
0001FDC6 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001FDCA 6600                       		bne.s	Obj09_GetCont
0001FDCC 14BC 0001                  		move.b	#1,(a2)
0001FDD0 2549 0004                  		move.l	a1,4(a2)
0001FDD4                            
0001FDD4                            Obj09_GetCont:
0001FDD4 4EB9 0000 B91C             		jsr	(CollectRing).l
0001FDDA 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; check if you have 50 rings
0001FDE0 6500                       		bcs.s	Obj09_NoCont
0001FDE2 08F8 0000 FE1B             		bset	#0,(v_lifecount).w
0001FDE8 6600                       		bne.s	Obj09_NoCont
0001FDEA 5238 FE18                  		addq.b	#1,(v_continues).w ; add 1 to number of continues
0001FDF8                            
0001FDF8                            Obj09_NoCont:
0001FDF8 7800                       		moveq	#0,d4
0001FDFA 4E75                       		rts	
0001FDFC                            ; ===========================================================================
0001FDFC                            
0001FDFC                            Obj09_Chk1Up:
0001FDFC 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001FE00 6600                       		bne.s	Obj09_ChkEmer
0001FE02 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001FE06 6600                       		bne.s	Obj09_Get1Up
0001FE08 14BC 0003                  		move.b	#3,(a2)
0001FE0C 2549 0004                  		move.l	a1,4(a2)
0001FE10                            
0001FE10                            Obj09_Get1Up:
0001FE10 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to number of lives
0001FE14 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0001FE22 7800                       		moveq	#0,d4
0001FE24 4E75                       		rts	
0001FE26                            ; ===========================================================================
0001FE26                            
0001FE26                            Obj09_ChkEmer:
0001FE26 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001FE2A 6500                       		bcs.s	Obj09_ChkGhost
0001FE2C 0C04 0040                  		cmpi.b	#$40,d4
0001FE30 6200                       		bhi.s	Obj09_ChkGhost
0001FE32 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001FE36 6600                       		bne.s	Obj09_GetEmer
0001FE38 14BC 0005                  		move.b	#5,(a2)
0001FE3C 2549 0004                  		move.l	a1,4(a2)
0001FE40                            
0001FE40                            Obj09_GetEmer:
0001FE40 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0001FE46 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001FE48 0404 003B                  		subi.b	#$3B,d4
0001FE4C 7000                       		moveq	#0,d0
0001FE4E 1038 FE57                  		move.b	(v_emeralds).w,d0
0001FE52 45F8 FE58                  		lea	(v_emldlist).w,a2
0001FE56 1584 0000                  		move.b	d4,(a2,d0.w)
0001FE5A 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001FE5E                            
0001FE5E                            Obj09_NoEmer:
0001FE68 7800                       		moveq	#0,d4
0001FE6A 4E75                       		rts	
0001FE6C                            ; ===========================================================================
0001FE6C                            
0001FE6C                            Obj09_ChkGhost:
0001FE6C 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001FE70 6600                       		bne.s	Obj09_ChkGhostTag
0001FE72 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001FE78                            
0001FE78                            Obj09_ChkGhostTag:
0001FE78 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001FE7C 6600                       		bne.s	Obj09_NoGhost
0001FE7E 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001FE84 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001FE86 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001FE8C                            
0001FE8C                            Obj09_NoGhost:
0001FE8C 78FF                       		moveq	#-1,d4
0001FE8E 4E75                       		rts	
0001FE90                            ; ===========================================================================
0001FE90                            
0001FE90                            Obj09_MakeGhostSolid:
0001FE90 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001FE96 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001FE98 43F9 00FF 1020             		lea	($FF1020).l,a1
0001FE9E 723F                       		moveq	#$3F,d1
0001FEA0                            
0001FEA0                            Obj09_GhostLoop2:
0001FEA0 743F                       		moveq	#$3F,d2
0001FEA2                            
0001FEA2                            Obj09_GhostLoop:
0001FEA2 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001FEA6 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001FEA8 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001FEAC                            
0001FEAC                            Obj09_NoReplace:
0001FEAC 5249                       		addq.w	#1,a1
0001FEAE 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001FEB2 43E9 0040                  		lea	$40(a1),a1
0001FEB6 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001FEBA                            
0001FEBA                            Obj09_GhostNotSolid:
0001FEBA 4228 003A                  		clr.b	$3A(a0)
0001FEBE 7800                       		moveq	#0,d4
0001FEC0 4E75                       		rts	
0001FEC2                            ; End of function Obj09_ChkItems
0001FEC2                            
0001FEC2                            
0001FEC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FEC2                            
0001FEC2                            
0001FEC2                            Obj09_ChkItems2:
0001FEC2 1028 0030                  		move.b	$30(a0),d0
0001FEC6 6600                       		bne.s	Obj09_ChkBumper
0001FEC8 5328 0036                  		subq.b	#1,$36(a0)
0001FECC 6A00                       		bpl.s	loc_1BEA0
0001FECE 117C 0000 0036             		move.b	#0,$36(a0)
0001FED4                            
0001FED4                            loc_1BEA0:
0001FED4 5328 0037                  		subq.b	#1,$37(a0)
0001FED8 6A00                       		bpl.s	locret_1BEAC
0001FEDA 117C 0000 0037             		move.b	#0,$37(a0)
0001FEE0                            
0001FEE0                            locret_1BEAC:
0001FEE0 4E75                       		rts	
0001FEE2                            ; ===========================================================================
0001FEE2                            
0001FEE2                            Obj09_ChkBumper:
0001FEE2 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001FEE6 6600                       		bne.s	Obj09_GOAL
0001FEE8 2228 0032                  		move.l	$32(a0),d1
0001FEEC 0481 00FF 0001             		subi.l	#$FF0001,d1
0001FEF2 3401                       		move.w	d1,d2
0001FEF4 0241 007F                  		andi.w	#$7F,d1
0001FEF8 C2FC 0018                  		mulu.w	#$18,d1
0001FEFC 0441 0014                  		subi.w	#$14,d1
0001FF00 EE4A                       		lsr.w	#7,d2
0001FF02 0242 007F                  		andi.w	#$7F,d2
0001FF06 C4FC 0018                  		mulu.w	#$18,d2
0001FF0A 0442 0044                  		subi.w	#$44,d2
0001FF0E 9268 0008                  		sub.w	obX(a0),d1
0001FF12 9468 000C                  		sub.w	obY(a0),d2
0001FF16 4EB9 0000 3F5C             		jsr	(CalcAngle).l
0001FF1C 4EB9 0000 3CCA             		jsr	(CalcSine).l
0001FF22 C3FC F900                  		muls.w	#-$700,d1
0001FF26 E081                       		asr.l	#8,d1
0001FF28 3141 0010                  		move.w	d1,obVelX(a0)
0001FF2C C1FC F900                  		muls.w	#-$700,d0
0001FF30 E080                       		asr.l	#8,d0
0001FF32 3140 0012                  		move.w	d0,obVelY(a0)
0001FF36 08E8 0001 0022             		bset	#1,obStatus(a0)
0001FF3C 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001FF40 6600                       		bne.s	Obj09_BumpSnd
0001FF42 14BC 0002                  		move.b	#2,(a2)
0001FF46 2028 0032                  		move.l	$32(a0),d0
0001FF4A 5380                       		subq.l	#1,d0
0001FF4C 2540 0004                  		move.l	d0,4(a2)
0001FF50                            
0001FF50                            Obj09_BumpSnd:
0001FF5A                            ; ===========================================================================
0001FF5A                            
0001FF5A                            Obj09_GOAL:
0001FF5A 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001FF5E 6600                       		bne.s	Obj09_UPblock
0001FF60 5428 0024                  		addq.b	#2,obRoutine(a0) ; run routine "Obj09_ExitStage"
0001FF6E 4E75                       		rts	
0001FF70                            ; ===========================================================================
0001FF70                            
0001FF70                            Obj09_UPblock:
0001FF70 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001FF74 6600                       		bne.s	Obj09_DOWNblock
0001FF76 4A28 0036                  		tst.b	$36(a0)
0001FF7A 6600 0000                  		bne.w	Obj09_NoGlass
0001FF7E 117C 001E 0036             		move.b	#$1E,$36(a0)
0001FF84 0838 0006 F783             		btst	#6,($FFFFF783).w
0001FF8A 6700                       		beq.s	Obj09_UPsnd
0001FF8C E1F8 F782                  		asl	(v_ssrotate).w	; increase stage rotation speed
0001FF90 2268 0032                  		movea.l	$32(a0),a1
0001FF94 5389                       		subq.l	#1,a1
0001FF96 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001FF9A                            
0001FF9A                            Obj09_UPsnd:
0001FFA4                            ; ===========================================================================
0001FFA4                            
0001FFA4                            Obj09_DOWNblock:
0001FFA4 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001FFA8 6600                       		bne.s	Obj09_Rblock
0001FFAA 4A28 0036                  		tst.b	$36(a0)
0001FFAE 6600 0000                  		bne.w	Obj09_NoGlass
0001FFB2 117C 001E 0036             		move.b	#$1E,$36(a0)
0001FFB8 0838 0006 F783             		btst	#6,(v_ssrotate+1).w
0001FFBE 6600                       		bne.s	Obj09_DOWNsnd
0001FFC0 E0F8 F782                  		asr	(v_ssrotate).w	; reduce stage rotation speed
0001FFC4 2268 0032                  		movea.l	$32(a0),a1
0001FFC8 5389                       		subq.l	#1,a1
0001FFCA 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001FFCE                            
0001FFCE                            Obj09_DOWNsnd:
0001FFD8                            ; ===========================================================================
0001FFD8                            
0001FFD8                            Obj09_Rblock:
0001FFD8 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001FFDC 6600                       		bne.s	Obj09_ChkGlass
0001FFDE 4A28 0037                  		tst.b	$37(a0)
0001FFE2 6600 0000                  		bne.w	Obj09_NoGlass
0001FFE6 117C 001E 0037             		move.b	#$1E,$37(a0)
0001FFEC 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001FFF0 6600                       		bne.s	Obj09_RevStage
0001FFF2 14BC 0004                  		move.b	#4,(a2)
0001FFF6 2028 0032                  		move.l	$32(a0),d0
0001FFFA 5380                       		subq.l	#1,d0
0001FFFC 2540 0004                  		move.l	d0,4(a2)
00020000                            
00020000                            Obj09_RevStage:
00020000 4478 F782                  		neg.w	(v_ssrotate).w	; reverse stage rotation
0002000E                            ; ===========================================================================
0002000E                            
0002000E                            Obj09_ChkGlass:
0002000E 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
00020012 6700                       		beq.s	Obj09_Glass	; if yes, branch
00020014 0C00 002E                  		cmpi.b	#$2E,d0
00020018 6700                       		beq.s	Obj09_Glass
0002001A 0C00 002F                  		cmpi.b	#$2F,d0
0002001E 6700                       		beq.s	Obj09_Glass
00020020 0C00 0030                  		cmpi.b	#$30,d0
00020024 6600                       		bne.s	Obj09_NoGlass	; if not, branch
00020026                            
00020026                            Obj09_Glass:
00020026 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0002002A 6600                       		bne.s	Obj09_GlassSnd
0002002C 14BC 0006                  		move.b	#6,(a2)
00020030 2268 0032                  		movea.l	$32(a0),a1
00020034 5389                       		subq.l	#1,a1
00020036 2549 0004                  		move.l	a1,4(a2)
0002003A 1011                       		move.b	(a1),d0
0002003C 5200                       		addq.b	#1,d0		; change glass type when touched
0002003E 0C00 0030                  		cmpi.b	#$30,d0
00020042 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
00020044 4200                       		clr.b	d0		; remove the glass block when it's destroyed
00020046                            
00020046                            Obj09_GlassUpdate:
00020046 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0002004A                            
0002004A                            Obj09_GlassSnd:
00020054                            ; ===========================================================================
00020054                            
00020054                            Obj09_NoGlass:
00020054 4E75                       		rts	
00020056                            ; End of function Obj09_ChkItems2
00020056                            ; End of function Obj09_ChkItems2
00020056                            
00020056                            		include	"_incObj\10.asm"
00020056                            ; ---------------------------------------------------------------------------
00020056                            ; Object 10 - After-Image
00020056                            ; ---------------------------------------------------------------------------
00020056                            
00020056                            Obj10:
00020056 0C38 0018 D01C                   cmpi.b   #id_Death,(v_player+obAnim).w   ; is Sonic using the death animation?
0002005C 6700 0000                        beq.w   AfterimageEnd      ; if yes, delete the After Image
00020060                            
00020060 7000                             moveq   #0,d0
00020062 1028 0024                        move.b   obRoutine(a0),d0
00020066 323B 0000                        move.w   Afterimage_Index(pc,d0.w),d1
0002006A 4EFB 1000                        jmp	Afterimage_Index(pc,d1.w)
0002006E                            
0002006E                            ; ===========================================================================
0002006E                            ;           Change the length by moving around the "No Afterimage" and "After Image Start/ After Image L Priority" sections.
0002006E                            ; ===========================================================================
0002006E                            Afterimage_Index:
0002006E 0000                             dc.w NoAfterImage-Afterimage_Index
00020070 0000                             dc.w NoAfterImage-Afterimage_Index
00020072 0000                             dc.w NoAfterImage-Afterimage_Index
00020074 0000                             dc.w AfterimageStart-Afterimage_Index
00020076 0000                             dc.w NoAfterImage-Afterimage_Index
00020078 0000                             dc.w NoAfterImage-Afterimage_Index
0002007A 0000                             dc.w NoAfterImage-Afterimage_Index
0002007C 0000                             dc.w AfterimageLPrio-Afterimage_Index
0002007E 0000                             dc.w AfterimageEnd-Afterimage_Index
00020080                            ; ===========================================================================
00020080                            NoAfterImage:
00020080 5428 0024                        addq.b   #2,obRoutine(a0)         ; go to next item of index, at the next frame
00020084 4E75                             rts
00020086                            ; ===========================================================================
00020086                            AfterimageStart:
00020086 117C 0002 0018                   move.b   #2,obPriority(a0)         ; set sprite priority to 2
0002008C 6000                             bra.s   Afterimage_Show
0002008E                            ; ===========================================================================
0002008E                            AfterimageLPrio:
0002008E 5228 0018                        addq.b   #1,obPriority(a0)         ; set a lower sprite priority
00020092                            ; ===========================================================================
00020092                            Afterimage_Show:
00020092 5428 0024                        addq.b   #2,obRoutine(a0)            ; go to next item of index
00020096 4EB9 0000 3CA4                   jsr   (RandomNumber).l         ; get a random number
0002009C 0200 0003                        andi.b   #3,d0               ; get a number equal or lower than 2 (0 until 2)
000200A0 6600                             bne.s   AfterimageException   ; if is not 0, branch
000200A2 4E75                             rts                        ; if it is 0, then don't show the after-image
000200A4                            
000200A4                            AfterimageException:
000200A4 3178 D002 0002                   move.w   (v_player+obGfx).w,obGfx(a0)      ; copy Sonic map to after-image map
000200AA 1178 D001 0001                    move.b   (v_player+obRender).w,obRender(a0)      ; copy Sonic frame infos (horizontal/vertical mirror, coordinate system......)
000200B0 2178 D01A 001A                    move.l   (v_player+obFrame).w,obFrame(a0)   ; copy the Sonic animation frame
000200B6 4EF9 0000 F7AC                   jmp   DisplaySprite
000200BC                            ; ===========================================================================
000200BC                            AfterimageEnd:
000200BC 4EF9 0000 F7EC                   jmp   DeleteObject
000200BC 4EF9 0000 F7EC                   jmp   DeleteObject
000200C2                            
000200C2                            		include	"_inc\AnimateLevelGfx.asm"
000200C2                            ; ---------------------------------------------------------------------------
000200C2                            ; Subroutine to	animate	level graphics
000200C2                            ; ---------------------------------------------------------------------------
000200C2                            
000200C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000200C2                            
000200C2                            
000200C2                            AnimateLevelGfx:
000200C2 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
000200C6 6600                       		bne.s	@ispaused	; if yes, branch
000200C8 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000200CE 6100 0000                  		bsr.w	AniArt_GiantRing
000200D2 7000                       		moveq	#0,d0
000200D4 1038 FE10                  		move.b	(v_zone).w,d0
000200D8 D040                       		add.w	d0,d0
000200DA 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
000200DE 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
000200E2                            
000200E2                            	@ispaused:
000200E2 4E75                       		rts	
000200E4                            
000200E4                            ; ===========================================================================
000200E4 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
000200E8 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
000200EC 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
000200F0 0000                       		dc.w AniArt_Ending-AniArt_Index
000200F2                            ; ===========================================================================
000200F2                            ; ---------------------------------------------------------------------------
000200F2                            ; Animated pattern routine - Green Hill
000200F2                            ; ---------------------------------------------------------------------------
000200F2                            
000200F2                            AniArt_GHZ:
000200F2                            
000200F2                            AniArt_GHZ_Waterfall:
000200F2                            
000200F2 =00000008                  @size:		equ 8	; number of tiles per frame
000200F2                            
000200F2 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
000200F6 6A00                       		bpl.s	AniArt_GHZ_Bigflower ; branch if not 0
000200F8                            
000200F8 11FC 0005 F7B1             		move.b	#5,(v_lani0_time).w ; time to display each frame
000200FE 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
00020104 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
00020108 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0002010C 0240 0001                  		andi.w	#1,d0		; there are only 2 frames
00020110 6700                       		beq.s	@isframe0	; branch if frame 0
00020112 43E9 0100                  		lea	@size*$20(a1),a1 ; use graphics for frame 1
00020116                            
00020116                            	@isframe0:
00020120 323C 0007                  		move.w	#@size-1,d1	; number of 8x8	tiles
00020124 6000 0000                  		bra.w	LoadTiles
00020128                            ; ===========================================================================
00020128                            
00020128                            AniArt_GHZ_Bigflower:
00020128                            
00020128 =00000010                  @size:		equ 16	; number of tiles per frame
00020128                            
00020128 5338 F7B3                  		subq.b	#1,(v_lani1_time).w
0002012C 6A00                       		bpl.s	AniArt_GHZ_Smallflower
0002012E                            
0002012E 11FC 000F F7B3             		move.b	#$F,(v_lani1_time).w
00020134 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0002013A 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0002013E 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w
00020142 0240 0001                  		andi.w	#1,d0
00020146 6700                       		beq.s	@isframe0
00020148 43E9 0200                  		lea	@size*$20(a1),a1
0002014C                            
0002014C                            	@isframe0:
00020156 323C 000F                  		move.w	#@size-1,d1
0002015A 6000 0000                  		bra.w	LoadTiles
0002015E                            ; ===========================================================================
0002015E                            
0002015E                            AniArt_GHZ_Smallflower:
0002015E                            
0002015E =0000000C                  @size:		equ 12	; number of tiles per frame
0002015E                            
0002015E 5338 F7B5                  		subq.b	#1,(v_lani2_time).w
00020162 6A00                       		bpl.s	@end
00020164                            
00020164 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0002016A 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0002016E 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
00020172 0240 0003                  		andi.w	#3,d0		; there are 4 frames
00020176 103B 0000                  		move.b	@sequence(pc,d0.w),d0
0002017A 0800 0000                  		btst	#0,d0		; is frame 0 or 2? (actual frame, not frame counter)
0002017E 6600                       		bne.s	@isframe1	; if not, branch
00020180 11FC 007F F7B5             		move.b	#$7F,(v_lani2_time).w ; set longer duration for frames 0 and 2
00020186                            
00020186                            	@isframe1:
00020186 EF48                       		lsl.w	#7,d0		; multiply frame num by $80
00020188 3200                       		move.w	d0,d1
0002018A D040                       		add.w	d0,d0
0002018C D041                       		add.w	d1,d0		; multiply that by 3 (i.e. frame num times 12 * $20)
00020198 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0002019E 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
000201A2 323C 000B                  		move.w	#@size-1,d1
000201A6 6100 0000                  		bsr.w	LoadTiles
000201AA                            
000201AA                            @end:
000201AA 4E75                       		rts	
000201AC                            
000201AC 0001 0201                  @sequence:	dc.b 0,	1, 2, 1
000201B0                            ; ===========================================================================
000201B0                            ; ---------------------------------------------------------------------------
000201B0                            ; Animated pattern routine - Marble
000201B0                            ; ---------------------------------------------------------------------------
000201B0                            
000201B0                            AniArt_MZ:
000201B0                            
000201B0                            AniArt_MZ_Lava:
000201B0                            
000201B0 =00000008                  @size:		equ 8	; number of tiles per frame
000201B0                            
000201B0 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
000201B4 6A00                       		bpl.s	AniArt_MZ_Magma	; branch if not 0
000201B6                            
000201B6 11FC 0011 F7B1             		move.b	#$11,(v_lani0_time).w ; time to display each frame
000201BC 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
000201C2 7000                       		moveq	#0,d0
000201C4 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
000201C8 5200                       		addq.b	#1,d0		; increment frame counter
000201CA 0C00 0003                  		cmpi.b	#3,d0		; there are 3 frames
000201CE 6600                       		bne.s	@frame01or2	; branch if frame 0, 1 or 2
000201D0 7000                       		moveq	#0,d0
000201D2                            
000201D2                            	@frame01or2:
000201D2 11C0 F7B0                  		move.b	d0,(v_lani0_frame).w
000201D6 C0FC 0100                  		mulu.w	#@size*$20,d0
000201DA D2C0                       		adda.w	d0,a1		; jump to appropriate tile
000201E6 323C 0007                  		move.w	#@size-1,d1
000201EA 6100 0000                  		bsr.w	LoadTiles
000201EE                            
000201EE                            AniArt_MZ_Magma:
000201EE 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
000201F2 6A00                       		bpl.s	AniArt_MZ_Torch	; branch if not 0
000201F4                            		
000201F4 11FC 0001 F7B3             		move.b	#1,(v_lani1_time).w ; time between each gfx change
000201FA 7000                       		moveq	#0,d0
000201FC 1038 F7B0                  		move.b	(v_lani0_frame).w,d0 ; get surface lava frame number
00020200 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load magma gfx
00020206 EE58                       		ror.w	#7,d0		; multiply frame num by $200
00020208 D8C0                       		adda.w	d0,a4		; jump to appropriate tile
00020214 7600                       		moveq	#0,d3
00020216 1638 F7B2                  		move.b	(v_lani1_frame).w,d3
0002021A 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter (unused)
0002021E 1638 FE68                  		move.b	(v_oscillate+$A).w,d3 ; get oscillating value
00020222 343C 0003                  		move.w	#3,d2
00020226                            
00020226                            	@loop:
00020226 3003                       		move.w	d3,d0
00020228 D040                       		add.w	d0,d0
0002022A 0240 001E                  		andi.w	#$1E,d0
0002022E 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
00020234 3033 0000                  		move.w	(a3,d0.w),d0
00020238 47F3 0000                  		lea	(a3,d0.w),a3
0002023C 224C                       		movea.l	a4,a1
0002023E 323C 001F                  		move.w	#$1F,d1
00020242 4E93                       		jsr	(a3)
00020244 5843                       		addq.w	#4,d3
00020246 51CA FFDE                  		dbf	d2,@loop
0002024A 4E75                       		rts	
0002024C                            ; ===========================================================================
0002024C                            
0002024C                            AniArt_MZ_Torch:
0002024C                            
0002024C =00000006                  @size:		equ 6	; number of tiles per frame
0002024C                            
0002024C 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
00020250 6A00 0000                  		bpl.w	@end		; branch if not 0
00020254                            		
00020254 11FC 0004 F7B5             		move.b	#4,(v_lani2_time).w ; time to display each frame
0002025A 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
00020260 7000                       		moveq	#0,d0
00020262 1038 F7B6                  		move.b	(v_lani3_frame).w,d0
00020266 5238 F7B6                  		addq.b	#1,(v_lani3_frame).w ; increment frame counter
0002026A 0238 0003 F7B6             		andi.b	#3,(v_lani3_frame).w ; there are 3 frames
00020270 C0FC 00C0                  		mulu.w	#@size*$20,d0
00020274 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
00020280 323C 0005                  		move.w	#@size-1,d1
00020284 6000 0000                  		bra.w	LoadTiles
00020288                            
00020288                            @end:
00020288 4E75                       		rts	
0002028A                            ; ===========================================================================
0002028A                            ; ---------------------------------------------------------------------------
0002028A                            ; Animated pattern routine - Scrap Brain
0002028A                            ; ---------------------------------------------------------------------------
0002028A                            
0002028A                            AniArt_SBZ:
0002028A                            
0002028A =0000000C                  @size:		equ 12	; number of tiles per frame
0002028A                            
0002028A 4A38 F7B4                  		tst.b	(v_lani2_frame).w
0002028E 6700                       		beq.s	@smokepuff	; branch if counter hits 0
00020290                            		
00020290 5338 F7B4                  		subq.b	#1,(v_lani2_frame).w ; decrement counter
00020294 6000                       		bra.s	@chk_smokepuff2
00020296                            ; ===========================================================================
00020296                            
00020296                            @smokepuff:
00020296 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0002029A 6A00                       		bpl.s	@chk_smokepuff2 ; branch if not 0
0002029C                            		
0002029C 11FC 0007 F7B1             		move.b	#7,(v_lani0_time).w ; time to display each frame
000202A2 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
000202B2 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
000202B6 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
000202BA 0240 0007                  		andi.w	#7,d0
000202BE 6700                       		beq.s	@untilnextpuff	; branch if frame 0
000202C0 5340                       		subq.w	#1,d0
000202C2 C0FC 0180                  		mulu.w	#@size*$20,d0
000202C6 43F1 0000                  		lea	(a1,d0.w),a1
000202CA 323C 000B                  		move.w	#@size-1,d1
000202CE 6000 0000                  		bra.w	LoadTiles
000202D2                            ; ===========================================================================
000202D2                            
000202D2                            @untilnextpuff:
000202D2 11FC 00B4 F7B4             		move.b	#180,(v_lani2_frame).w ; time between smoke puffs (3 seconds)
000202D8                            
000202D8                            @clearsky:
000202D8 323C 0005                  		move.w	#(@size/2)-1,d1
000202DC 6100 0000                  		bsr.w	LoadTiles
000202E0 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
000202E6 323C 0005                  		move.w	#(@size/2)-1,d1
000202EA 6000 0000                  		bra.w	LoadTiles	; load blank tiles for no smoke puff
000202EE                            ; ===========================================================================
000202EE                            
000202EE                            @chk_smokepuff2:
000202EE 4A38 F7B5                  		tst.b	(v_lani2_time).w
000202F2 6700                       		beq.s	@smokepuff2	; branch if counter hits 0
000202F4                            		
000202F4 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement counter
000202F8 6000                       		bra.s	@end
000202FA                            ; ===========================================================================
000202FA                            
000202FA                            @smokepuff2:
000202FA 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
000202FE 6A00                       		bpl.s	@end		; branch if not 0
00020300                            		
00020300 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w ; time to display each frame
00020306 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
00020316 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0002031A 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0002031E 0240 0007                  		andi.w	#7,d0
00020322 6700                       		beq.s	@untilnextpuff2	; branch if frame 0
00020324 5340                       		subq.w	#1,d0
00020326 C0FC 0180                  		mulu.w	#@size*$20,d0
0002032A 43F1 0000                  		lea	(a1,d0.w),a1
0002032E 323C 000B                  		move.w	#@size-1,d1
00020332 6000 0000                  		bra.w	LoadTiles
00020336                            ; ===========================================================================
00020336                            
00020336                            @untilnextpuff2:
00020336 11FC 0078 F7B5             		move.b	#120,(v_lani2_time).w ; time between smoke puffs (2 seconds)
0002033C 609A                       		bra.s	@clearsky
0002033E                            ; ===========================================================================
0002033E                            
0002033E                            @end:
0002033E 4E75                       		rts	
00020340                            ; ===========================================================================
00020340                            ; ---------------------------------------------------------------------------
00020340                            ; Animated pattern routine - ending sequence
00020340                            ; ---------------------------------------------------------------------------
00020340                            
00020340                            AniArt_Ending:
00020340                            
00020340                            AniArt_Ending_BigFlower:
00020340                            
00020340 =00000010                  @size:		equ 16	; number of tiles per frame
00020340                            
00020340 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
00020344 6A00                       		bpl.s	AniArt_Ending_SmallFlower ; branch if not 0
00020346                            		
00020346 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w
0002034C 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
00020352 45F8 9400                  		lea	($FFFF9400).w,a2 ; load 2nd big flower from RAM
00020356 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0002035A 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0002035E 0240 0001                  		andi.w	#1,d0		; only 2 frames
00020362 6700                       		beq.s	@isframe0	; branch if frame 0
00020364 43E9 0200                  		lea	@size*$20(a1),a1
00020368 45EA 0200                  		lea	@size*$20(a2),a2
0002036C                            
0002036C                            	@isframe0:
00020376 323C 000F                  		move.w	#@size-1,d1
0002037A 6100 0000                  		bsr.w	LoadTiles
0002037E 224A                       		movea.l	a2,a1
0002038A 323C 000F                  		move.w	#@size-1,d1
0002038E 6000 0000                  		bra.w	LoadTiles
00020392                            ; ===========================================================================
00020392                            
00020392                            AniArt_Ending_SmallFlower:
00020392                            
00020392 =0000000C                  @size:		equ 12	; number of tiles per frame
00020392                            
00020392 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
00020396 6A00                       		bpl.s	AniArt_Ending_Flower3 ; branch if not 0
00020398                            		
00020398 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0002039E 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
000203A2 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
000203A6 0240 0007                  		andi.w	#7,d0		; max 8 frames
000203AA 103B 0000                  		move.b	@sequence(pc,d0.w),d0 ; get actual frame num from sequence data
000203AE EF48                       		lsl.w	#7,d0		; multiply by $80
000203B0 3200                       		move.w	d0,d1
000203B2 D040                       		add.w	d0,d0
000203B4 D041                       		add.w	d1,d0		; multiply by 3
000203C0 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
000203C6 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
000203CA 323C 000B                  		move.w	#@size-1,d1
000203CE 6000 0000                  		bra.w	LoadTiles
000203D2                            ; ===========================================================================
000203D2 0000 0001 0202 0201        @sequence:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
000203DA                            ; ===========================================================================
000203DA                            
000203DA                            AniArt_Ending_Flower3:
000203DA                            
000203DA =00000010                  @size:		equ 16	; number of tiles per frame
000203DA                            
000203DA 5338 F7B9                  		subq.b	#1,(v_lani4_time).w ; decrement timer
000203DE 6A00                       		bpl.s	AniArt_Ending_Flower4 ; branch if not 0
000203E0                            		
000203E0 11FC 000E F7B9             		move.b	#$E,(v_lani4_time).w
000203E6 1038 F7B8                  		move.b	(v_lani4_frame).w,d0
000203EA 5238 F7B8                  		addq.b	#1,(v_lani4_frame).w ; increment frame counter
000203EE 0240 0003                  		andi.w	#3,d0		; max 4 frames
000203F2 103B 0000                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
000203F6 E148                       		lsl.w	#8,d0		; multiply by $100
000203F8 D040                       		add.w	d0,d0		; multiply by 2
00020404 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
00020408 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0002040C 323C 000F                  		move.w	#@size-1,d1
00020410 6000 0000                  		bra.w	LoadTiles
00020414                            ; ===========================================================================
00020414 0001 0201                  AniArt_Ending_Flower3_sequence:	dc.b 0,	1, 2, 1
00020418                            ; ===========================================================================
00020418                            
00020418                            AniArt_Ending_Flower4:
00020418                            
00020418 =00000010                  @size:		equ 16	; number of tiles per frame
00020418                            
00020418 5338 F7BB                  		subq.b	#1,(v_lani5_time).w ; decrement timer
0002041C 6A00                       		bpl.s	@end		; branch if not 0
0002041E                            		
0002041E 11FC 000B F7BB             		move.b	#$B,(v_lani5_time).w
00020424 1038 F7BA                  		move.b	(v_lani5_frame).w,d0
00020428 5238 F7BA                  		addq.b	#1,(v_lani5_frame).w ; increment frame counter
0002042C 0240 0003                  		andi.w	#3,d0
00020430 103B 00E2                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
00020434 E148                       		lsl.w	#8,d0		; multiply by $100
00020436 D040                       		add.w	d0,d0		; multiply by 2
00020442 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
00020446 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0002044A 323C 000F                  		move.w	#@size-1,d1
0002044E 6000 0000                  		bra.w	LoadTiles
00020452                            ; ===========================================================================
00020452                            
00020452                            @end:
00020452 4E75                       		rts	
00020454                            ; ===========================================================================
00020454                            
00020454                            AniArt_none:
00020454 4E75                       		rts	
00020456                            
00020456                            ; ---------------------------------------------------------------------------
00020456                            ; Subroutine to	transfer graphics to VRAM
00020456                            
00020456                            ; input:
00020456                            ;	a1 = source address
00020456                            ;	a6 = vdp_data_port ($C00000)
00020456                            ;	d1 = number of tiles to load (minus one)
00020456                            ; ---------------------------------------------------------------------------
00020456                            
00020456                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020456                            
00020456                            
00020456                            LoadTiles:
00020456 2C99                       		move.l	(a1)+,(a6)
00020458 2C99                       		move.l	(a1)+,(a6)
0002045A 2C99                       		move.l	(a1)+,(a6)
0002045C 2C99                       		move.l	(a1)+,(a6)
0002045E 2C99                       		move.l	(a1)+,(a6)
00020460 2C99                       		move.l	(a1)+,(a6)
00020462 2C99                       		move.l	(a1)+,(a6)
00020464 2C99                       		move.l	(a1)+,(a6)
00020466 51C9 FFEE                  		dbf	d1,LoadTiles
0002046A 4E75                       		rts	
0002046C                            ; End of function LoadTiles
0002046C                            
0002046C                            ; ===========================================================================
0002046C                            ; ---------------------------------------------------------------------------
0002046C                            ; Animated pattern routine - more Marble Zone
0002046C                            ; ---------------------------------------------------------------------------
0002046C 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
00020470 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
00020474 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
00020478 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0002047C 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
00020480 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
00020484 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
00020488 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0002048C                            ; ===========================================================================
0002048C                            
0002048C                            loc_1C3EE:
0002048C 2C91                       		move.l	(a1),(a6)
0002048E 43E9 0010                  		lea	$10(a1),a1
00020492 51C9 FFF8                  		dbf	d1,loc_1C3EE
00020496 4E75                       		rts	
00020498                            ; ===========================================================================
00020498                            
00020498                            loc_1C3FA:
00020498 2029 0002                  		move.l	2(a1),d0
0002049C 1029 0001                  		move.b	1(a1),d0
000204A0 E098                       		ror.l	#8,d0
000204A2 2C80                       		move.l	d0,(a6)
000204A4 43E9 0010                  		lea	$10(a1),a1
000204A8 51C9 FFEE                  		dbf	d1,loc_1C3FA
000204AC 4E75                       		rts	
000204AE                            ; ===========================================================================
000204AE                            
000204AE                            loc_1C410:
000204AE 2CA9 0002                  		move.l	2(a1),(a6)
000204B2 43E9 0010                  		lea	$10(a1),a1
000204B6 51C9 FFF6                  		dbf	d1,loc_1C410
000204BA 4E75                       		rts	
000204BC                            ; ===========================================================================
000204BC                            
000204BC                            loc_1C41E:
000204BC 2029 0004                  		move.l	4(a1),d0
000204C0 1029 0003                  		move.b	3(a1),d0
000204C4 E098                       		ror.l	#8,d0
000204C6 2C80                       		move.l	d0,(a6)
000204C8 43E9 0010                  		lea	$10(a1),a1
000204CC 51C9 FFEE                  		dbf	d1,loc_1C41E
000204D0 4E75                       		rts	
000204D2                            ; ===========================================================================
000204D2                            
000204D2                            loc_1C434:
000204D2 2CA9 0004                  		move.l	4(a1),(a6)
000204D6 43E9 0010                  		lea	$10(a1),a1
000204DA 51C9 FFF6                  		dbf	d1,loc_1C434
000204DE 4E75                       		rts	
000204E0                            ; ===========================================================================
000204E0                            
000204E0                            loc_1C442:
000204E0 2029 0006                  		move.l	6(a1),d0
000204E4 1029 0005                  		move.b	5(a1),d0
000204E8 E098                       		ror.l	#8,d0
000204EA 2C80                       		move.l	d0,(a6)
000204EC 43E9 0010                  		lea	$10(a1),a1
000204F0 51C9 FFEE                  		dbf	d1,loc_1C442
000204F4 4E75                       		rts	
000204F6                            ; ===========================================================================
000204F6                            
000204F6                            loc_1C458:
000204F6 2CA9 0006                  		move.l	6(a1),(a6)
000204FA 43E9 0010                  		lea	$10(a1),a1
000204FE 51C9 FFF6                  		dbf	d1,loc_1C458
00020502 4E75                       		rts	
00020504                            ; ===========================================================================
00020504                            
00020504                            loc_1C466:
00020504 2029 0008                  		move.l	8(a1),d0
00020508 1029 0007                  		move.b	7(a1),d0
0002050C E098                       		ror.l	#8,d0
0002050E 2C80                       		move.l	d0,(a6)
00020510 43E9 0010                  		lea	$10(a1),a1
00020514 51C9 FFEE                  		dbf	d1,loc_1C466
00020518 4E75                       		rts	
0002051A                            ; ===========================================================================
0002051A                            
0002051A                            loc_1C47C:
0002051A 2CA9 0008                  		move.l	8(a1),(a6)
0002051E 43E9 0010                  		lea	$10(a1),a1
00020522 51C9 FFF6                  		dbf	d1,loc_1C47C
00020526 4E75                       		rts	
00020528                            ; ===========================================================================
00020528                            
00020528                            loc_1C48A:
00020528 2029 000A                  		move.l	$A(a1),d0
0002052C 1029 0009                  		move.b	9(a1),d0
00020530 E098                       		ror.l	#8,d0
00020532 2C80                       		move.l	d0,(a6)
00020534 43E9 0010                  		lea	$10(a1),a1
00020538 51C9 FFEE                  		dbf	d1,loc_1C48A
0002053C 4E75                       		rts	
0002053E                            ; ===========================================================================
0002053E                            
0002053E                            loc_1C4A0:
0002053E 2CA9 000A                  		move.l	$A(a1),(a6)
00020542 43E9 0010                  		lea	$10(a1),a1
00020546 51C9 FFF6                  		dbf	d1,loc_1C4A0
0002054A 4E75                       		rts	
0002054C                            ; ===========================================================================
0002054C                            
0002054C                            loc_1C4AE:
0002054C 2029 000C                  		move.l	$C(a1),d0
00020550 1029 000B                  		move.b	$B(a1),d0
00020554 E098                       		ror.l	#8,d0
00020556 2C80                       		move.l	d0,(a6)
00020558 43E9 0010                  		lea	$10(a1),a1
0002055C 51C9 FFEE                  		dbf	d1,loc_1C4AE
00020560 4E75                       		rts	
00020562                            ; ===========================================================================
00020562                            
00020562                            loc_1C4C4:
00020562 2CA9 000C                  		move.l	$C(a1),(a6)
00020566 43E9 0010                  		lea	$10(a1),a1
0002056A 51C9 FFF6                  		dbf	d1,loc_1C4C4
0002056E 4E75                       		rts	
00020570                            ; ===========================================================================
00020570                            
00020570                            loc_1C4D2:
00020570 2029 000C                  		move.l	$C(a1),d0
00020574 E198                       		rol.l	#8,d0
00020576 1011                       		move.b	0(a1),d0
00020578 2C80                       		move.l	d0,(a6)
0002057A 43E9 0010                  		lea	$10(a1),a1
0002057E 51C9 FFF0                  		dbf	d1,loc_1C4D2
00020582 4E75                       		rts	
00020584                            ; ===========================================================================
00020584                            
00020584                            loc_1C4E8:
00020584 3CA9 000E                  		move.w	$E(a1),(a6)
00020588 3C91                       		move.w	0(a1),(a6)
0002058A 43E9 0010                  		lea	$10(a1),a1
0002058E 51C9 FFF4                  		dbf	d1,loc_1C4E8
00020592 4E75                       		rts	
00020594                            ; ===========================================================================
00020594                            
00020594                            loc_1C4FA:
00020594 2011                       		move.l	0(a1),d0
00020596 1029 000F                  		move.b	$F(a1),d0
0002059A E098                       		ror.l	#8,d0
0002059C 2C80                       		move.l	d0,(a6)
0002059E 43E9 0010                  		lea	$10(a1),a1
000205A2 51C9 FFF0                  		dbf	d1,loc_1C4FA
000205A6 4E75                       		rts	
000205A8                            
000205A8                            ; ---------------------------------------------------------------------------
000205A8                            ; Animated pattern routine - giant ring
000205A8                            ; ---------------------------------------------------------------------------
000205A8                            
000205A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000205A8                            
000205A8                            
000205A8                            AniArt_GiantRing:
000205A8                            
000205A8 =0000000E                  @size:		equ 14
000205A8                            
000205A8 4A78 F7BE                  		tst.w	(v_gfxbigring).w	; Is there any of the art left to load?
000205AC 6600                       		bne.s	@loadTiles		; If so, get to work
000205AE 4E75                       		rts	
000205B0                            ; ===========================================================================
000205B0                            ; loc_1C518:
000205B0                            @loadTiles:
000205B0 0478 01C0 F7BE             		subi.w	#@size*$20,(v_gfxbigring).w	; Count-down the 14 tiles we're going to load now
000205B6 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
000205BC 7000                       		moveq	#0,d0
000205BE 3038 F7BE                  		move.w	(v_gfxbigring).w,d0
000205C2 43F1 0000                  		lea	(a1,d0.w),a1
000205C6                            		; Turn VRAM address into VDP command
000205C6 0640 8000                  		addi.w	#$8000,d0
000205CA E588                       		lsl.l	#2,d0
000205CC E448                       		lsr.w	#2,d0
000205CE 0040 4000                  		ori.w	#$4000,d0
000205D2 4840                       		swap	d0
000205D4                            		; Send VDP command (write to VRAM at address contained in v_gfxbigring)
000205D4 2D40 0004                  		move.l	d0,4(a6)
000205D8                            
000205D8 323C 000D                  		move.w	#@size-1,d1
000205DC 6000 FE78                  		bra.w	LoadTiles
000205E0                            
000205E0                            ; End of function AniArt_GiantRing
000205E0                            ; End of function AniArt_GiantRing
000205E0                            
000205E0                            		include	"_incObj\21 HUD.asm"
000205E0                            ; ---------------------------------------------------------------------------
000205E0                            ; Object 21 - SCORE, TIME, RINGS
000205E0                            ; ---------------------------------------------------------------------------
000205E0                            
000205E0                            HUD:
000205E0 7000                       		moveq	#0,d0
000205E2 1028 0024                  		move.b	obRoutine(a0),d0
000205E6 323B 0000                  		move.w	HUD_Index(pc,d0.w),d1
000205EA 4EFB 1000                  		jmp	HUD_Index(pc,d1.w)
000205EE                            ; ===========================================================================
000205EE 0000                       HUD_Index:	dc.w HUD_Main-HUD_Index
000205F0 0000                       		dc.w HUD_Flash-HUD_Index
000205F2                            ; ===========================================================================
000205F2                            
000205F2                            HUD_Main:	; Routine 0
000205F2 5428 0024                  		addq.b	#2,obRoutine(a0)
000205F6 317C 0090 0008             		move.w	#$90,obX(a0)
000205FC 317C 0108 000A             		move.w	#$108,obScreenY(a0)
00020602 217C 0000 0000 0004        		move.l	#Map_HUD,obMap(a0)
0002060A 317C 06CA 0002             		move.w	#$6CA,obGfx(a0)
00020610 117C 0000 0001             		move.b	#0,obRender(a0)
00020616 317C 0000 0018             		move.w	#0,obPriority(a0)
0002061C                            
0002061C                            HUD_Flash:	; Routine 2
0002061C 7000                       		moveq	#0,d0
0002061E 0838 0003 FE05             		btst	#3,(v_framebyte).w
00020624 6600                       		bne.s	@display
00020626 4A78 FE20                  		tst.w	(v_rings).w	; do you have any rings?
0002062A 6600                       		bne.s	@norings	; if so, branch
0002062C 5240                       		addq.w	#1,d0		; make ring counter flash red
0002062E                            ; ===========================================================================
0002062E                            
0002062E                            @norings:
0002062E 0C38 0009 FE23             		cmpi.b	#9,(v_timemin).w ; have	9 minutes elapsed?
00020634 6600                       		bne.s	@display	; if not, branch
00020636 5440                       		addq.w	#2,d0		; make time counter flash red
00020638                            
00020638                            	@display:
00020638 1140 001A                  		move.b	d0,obFrame(a0)
0002063C 4EF9 0000 F7AC             		jmp	DisplaySprite
0002063C 4EF9 0000 F7AC             		jmp	DisplaySprite
00020642                            Map_HUD:	include	"_maps\HUD.asm"
00020642                            ; ---------------------------------------------------------------------------
00020642                            ; Sprite mappings - SCORE, TIME, RINGS
00020642                            ; ---------------------------------------------------------------------------
00020642                            Map_HUD_internal:
00020642 0000                       		dc.w @allyellow-Map_HUD_internal
00020644 0000                       		dc.w @ringred-Map_HUD_internal
00020646 0000                       		dc.w @timered-Map_HUD_internal
00020648 0000                       		dc.w @allred-Map_HUD_internal
0002064A 0A                         @allyellow:	dc.b $A
0002064B 800D 8000 00               		dc.b $80, $D, $80, 0, 0
00020650 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
00020655 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0002065A 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0002065F 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
00020664 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
00020669 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0002066E A009 8030 30               		dc.b $A0, 9, $80, $30, $30
00020673 4005 810A 00               		dc.b $40, 5, $81, $A, 0
00020678 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0002067D 00                         		dc.b 0
0002067E 0A                         @ringred:	dc.b $A
0002067F 800D 8000 00               		dc.b $80, $D, $80, 0, 0
00020684 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
00020689 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0002068E 900D 8010 00               		dc.b $90, $D, $80, $10,	0
00020693 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
00020698 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0002069D A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
000206A2 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
000206A7 4005 810A 00               		dc.b $40, 5, $81, $A, 0
000206AC 400D 810E 10               		dc.b $40, $D, $81, $E, $10
000206B1 00                         		dc.b 0
000206B2 0A                         @timered:	dc.b $A
000206B3 800D 8000 00               		dc.b $80, $D, $80, 0, 0
000206B8 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
000206BD 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
000206C2 900D A010 00               		dc.b $90, $D, $A0, $10,	0
000206C7 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
000206CC A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
000206D1 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
000206D6 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
000206DB 4005 810A 00               		dc.b $40, 5, $81, $A, 0
000206E0 400D 810E 10               		dc.b $40, $D, $81, $E, $10
000206E5 00                         		dc.b 0
000206E6 0A                         @allred:	dc.b $A
000206E7 800D 8000 00               		dc.b $80, $D, $80, 0, 0
000206EC 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
000206F1 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
000206F6 900D A010 00               		dc.b $90, $D, $A0, $10,	0
000206FB 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
00020700 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
00020705 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0002070A A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0002070F 4005 810A 00               		dc.b $40, 5, $81, $A, 0
00020714 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0002071A 00                         		even
0002071A 00                         		even
0002071A                            
0002071A                            ; ---------------------------------------------------------------------------
0002071A                            ; Add points subroutine
0002071A                            ; ---------------------------------------------------------------------------
0002071A                            
0002071A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002071A                            
0002071A                            
0002071A                            AddPoints:
0002071A 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; set score counter to update
00020720                            
00020720                            
00020720 47F8 FE26                  			lea     (v_score).w,a3
00020724 D193                       			add.l   d0,(a3)
00020726 223C 000F 423F             			move.l  #999999,d1
0002072C B293                       			cmp.l   (a3),d1 ; is score below 999999?
0002072E 6200                       			bhi.s   @belowmax ; if yes, branch
00020730 2681                       			move.l  d1,(a3) ; reset score to 999999
00020732                            		@belowmax:
00020732 2013                       			move.l  (a3),d0
00020734 B0B8 FFC0                  			cmp.l   (v_scorelife).w,d0 ; has Sonic got 50000+ points?
00020738 6500                       			blo.s   @noextralife ; if not, branch
0002073A                            
0002073A 06B8 0000 1388 FFC0        			addi.l  #5000,(v_scorelife).w ; increase requirement by 50000
00020742 4A38 FFF8                  			tst.b   (v_megadrive).w
00020746 6B00                       			bmi.s   @noextralife ; branch if Mega Drive is Japanese
00020748 5238 FE12                  			addq.b  #1,(v_lives).w ; give extra life
0002074C 5238 FE1C                  			addq.b  #1,(f_lifecount).w
0002075A                            
0002075A                            @locret_1C6B6:
0002075A                            @noextralife:
0002075A 4E75                       		rts	
0002075C                            ; End of function AddPoints
0002075C                            
0002075C                            		include	"_inc\HUD_Update.asm"
0002075C                            ; ---------------------------------------------------------------------------
0002075C                            ; Subroutine to	update the HUD
0002075C                            ; ---------------------------------------------------------------------------
0002075C                            
0002075C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002075C                            
0002075C                            hudVRAM:	macro loc
0002075C                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),d0
0002075C                            		endm
0002075C                            
0002075C                            
0002075C                            HUD_Update:
0002075C 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	on?
00020760 6600 0000                  		bne.w	HudDebug	; if yes, branch
00020764 4A38 FE1F                  		tst.b	(f_scorecount).w ; does the score need updating?
00020768 6700                       		beq.s	@chkrings	; if not, branch
0002076A                            
0002076A 4238 FE1F                  		clr.b	(f_scorecount).w
0002076E 203C 5C80 0003             		hudVRAM	$DC80		; set VRAM address
00020774 2238 FE26                  		move.l	(v_score).w,d1	; load score
00020778 6100 0000                  		bsr.w	Hud_Score
0002077C                            
0002077C                            	@chkrings:
0002077C 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
00020780 6700                       		beq.s	@chktime	; if not, branch
00020782 6A00                       		bpl.s	@notzero
00020784 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
00020788                            
00020788                            	@notzero:
00020788 4238 FE1D                  		clr.b	(f_ringcount).w
0002078C 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
00020792 7200                       		moveq	#0,d1
00020794 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
00020798 6100 0000                  		bsr.w	Hud_Rings
0002079C                            
0002079C                            	@chktime:
0002079C 4A38 FE1E                  		tst.b	(f_timecount).w	; does the time	need updating?
000207A0 6700                       		beq.s	@chklives	; if not, branch
000207A2 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
000207A6 6600                       		bne.s	@chklives	; if yes, branch
000207A8 43F8 FE22                  		lea	(v_time).w,a1
000207AC 0C99 0009 3B3B             		cmpi.l	#(9*$10000)+(59*$100)+59,(a1)+ ; is the time 9:59:59?
000207B2 6700                       		beq.s	TimeOver	; if yes, branch
000207B4                            
000207B4 5221                       		addq.b	#1,-(a1)	; increment 1/60s counter
000207B6 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
000207BA 6500                       		bcs.s	@chklives
000207BC 12BC 0000                  		move.b	#0,(a1)
000207C0 5221                       		addq.b	#1,-(a1)	; increment second counter
000207C2 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
000207C6 6500                       		bcs.s	@updatetime
000207C8 12BC 0000                  		move.b	#0,(a1)
000207CC 5221                       		addq.b	#1,-(a1)	; increment minute counter
000207CE 0C11 0009                  		cmpi.b	#9,(a1)		; check if passed 9
000207D2 6500                       		bcs.s	@updatetime
000207D4 12BC 0009                  		move.b	#9,(a1)		; keep as 9
000207D8                            
000207D8                            	@updatetime:
000207D8 203C 5E40 0003             		hudVRAM	$DE40
000207DE 7200                       		moveq	#0,d1
000207E0 1238 FE23                  		move.b	(v_timemin).w,d1 ; load	minutes
000207E4 6100 0000                  		bsr.w	Hud_Mins
000207E8 203C 5EC0 0003             		hudVRAM	$DEC0
000207EE 7200                       		moveq	#0,d1
000207F0 1238 FE24                  		move.b	(v_timesec).w,d1 ; load	seconds
000207F4 6100 0000                  		bsr.w	Hud_Secs
000207F8                            
000207F8                            	@chklives:
000207F8 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
000207FC 6700                       		beq.s	@chkbonus	; if not, branch
000207FE 4238 FE1C                  		clr.b	(f_lifecount).w
00020802 6100 0000                  		bsr.w	Hud_Lives
00020806                            
00020806                            	@chkbonus:
00020806 4A38 F7D6                  		tst.b	(f_endactbonus).w ; do time/ring bonus counters need updating?
0002080A 6700                       		beq.s	@finish		; if not, branch
0002080C 4238 F7D6                  		clr.b	(f_endactbonus).w
0002081A 7200                       		moveq	#0,d1
0002081C 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
00020820 6100 0000                  		bsr.w	Hud_TimeRingBonus
00020824 7200                       		moveq	#0,d1
00020826 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0002082A 6100 0000                  		bsr.w	Hud_TimeRingBonus
0002082E                            
0002082E                            	@finish:
0002082E 4E75                       		rts	
00020830                            ; ===========================================================================
00020830                            
00020830                            TimeOver:
00020830 4238 FE1E                  		clr.b	(f_timecount).w
00020834 41F8 D000                  		lea	(v_player).w,a0
00020838 2448                       		movea.l	a0,a2
0002083A 6100 E824                  		bsr.w	KillSonic
0002083E 11FC 0001 FE1A             		move.b	#1,(f_timeover).w
00020844 4E75                       		rts	
00020846                            ; ===========================================================================
00020846                            
00020846                            HudDebug:
00020846 6100 0000                  		bsr.w	HudDb_XY
0002084A 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0002084E 6700                       		beq.s	@objcounter	; if not, branch
00020850 6A00                       		bpl.s	@notzero
00020852 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
00020856                            
00020856                            	@notzero:
00020856 4238 FE1D                  		clr.b	(f_ringcount).w
0002085A 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
00020860 7200                       		moveq	#0,d1
00020862 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
00020866 6100 0000                  		bsr.w	Hud_Rings
0002086A                            
0002086A                            	@objcounter:
0002086A 203C 5EC0 0003             		hudVRAM	$DEC0		; set VRAM address
00020870 7200                       		moveq	#0,d1
00020872 1238 F62C                  		move.b	(v_spritecount).w,d1 ; load "number of objects" counter
00020876 6100 0000                  		bsr.w	Hud_Secs
0002087A 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0002087E 6700                       		beq.s	@chkbonus	; if not, branch
00020880 4238 FE1C                  		clr.b	(f_lifecount).w
00020884 6100 0000                  		bsr.w	Hud_Lives
00020888                            
00020888                            	@chkbonus:
00020888 4A38 F7D6                  		tst.b	(f_endactbonus).w ; does the ring/time bonus counter need updating?
0002088C 6700                       		beq.s	@finish		; if not, branch
0002088E 4238 F7D6                  		clr.b	(f_endactbonus).w
0002089C 7200                       		moveq	#0,d1
0002089E 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
000208A2 6100 0000                  		bsr.w	Hud_TimeRingBonus
000208A6 7200                       		moveq	#0,d1
000208A8 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
000208AC 6100 0000                  		bsr.w	Hud_TimeRingBonus
000208B0                            
000208B0                            	@finish:
000208B0 4E75                       		rts	
000208B2                            ; End of function HUD_Update
000208B2                            
000208B2                            ; ---------------------------------------------------------------------------
000208B2                            ; Subroutine to	load "0" on the	HUD
000208B2                            ; ---------------------------------------------------------------------------
000208B2                            
000208B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000208B2                            
000208B2                            
000208B2                            Hud_LoadZero:
000208BC 45FA 0000                  		lea	Hud_TilesZero(pc),a2
000208C0 343C 0002                  		move.w	#2,d2
000208C4 6000                       		bra.s	loc_1C83E
000208C6                            ; End of function Hud_LoadZero
000208C6                            
000208C6                            ; ---------------------------------------------------------------------------
000208C6                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
000208C6                            ; ---------------------------------------------------------------------------
000208C6                            
000208C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000208C6                            
000208C6                            
000208C6                            Hud_Base:
000208C6 4DF9 00C0 0000             		lea	($C00000).l,a6
000208CC 6100 0000                  		bsr.w	Hud_Lives
000208DA 45FA 0000                  		lea	Hud_TilesBase(pc),a2
000208DE 343C 000E                  		move.w	#$E,d2
000208E2                            
000208E2                            loc_1C83E:
000208E2 43FA 0000                  		lea	Art_Hud(pc),a1
000208E6                            
000208E6                            loc_1C842:
000208E6 323C 000F                  		move.w	#$F,d1
000208EA 101A                       		move.b	(a2)+,d0
000208EC 6B00                       		bmi.s	loc_1C85E
000208EE 4880                       		ext.w	d0
000208F0 EB48                       		lsl.w	#5,d0
000208F2 47F1 0000                  		lea	(a1,d0.w),a3
000208F6                            
000208F6                            loc_1C852:
000208F6 2C9B                       		move.l	(a3)+,(a6)
000208F8 51C9 FFFC                  		dbf	d1,loc_1C852
000208FC                            
000208FC                            loc_1C858:
000208FC 51CA FFE8                  		dbf	d2,loc_1C842
00020900                            
00020900 4E75                       		rts	
00020902                            ; ===========================================================================
00020902                            
00020902                            loc_1C85E:
00020902 2CBC 0000 0000             		move.l	#0,(a6)
00020908 51C9 FFF8                  		dbf	d1,loc_1C85E
0002090C                            
0002090C 60EE                       		bra.s	loc_1C858
0002090E                            ; End of function Hud_Base
0002090E                            
0002090E                            ; ===========================================================================
0002090E 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0002091A FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0002091E                            ; ---------------------------------------------------------------------------
0002091E                            ; Subroutine to	load debug mode	numbers	patterns
0002091E                            ; ---------------------------------------------------------------------------
0002091E                            
0002091E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002091E                            
0002091E                            
0002091E                            HudDb_XY:
00020928 3238 F700                  		move.w	(v_screenposx).w,d1 ; load camera x-position
0002092C 4841                       		swap	d1
0002092E 3238 D008                  		move.w	(v_player+obX).w,d1 ; load Sonic's x-position
00020932 6100                       		bsr.s	HudDb_XY2
00020934 3238 F704                  		move.w	(v_screenposy).w,d1 ; load camera y-position
00020938 4841                       		swap	d1
0002093A 3238 D00C                  		move.w	(v_player+obY).w,d1 ; load Sonic's y-position
0002093E                            ; End of function HudDb_XY
0002093E                            
0002093E                            
0002093E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002093E                            
0002093E                            
0002093E                            HudDb_XY2:
0002093E 7C07                       		moveq	#7,d6
00020940 43F9 0000 059E             		lea	(Art_Text).l,a1
00020946                            
00020946                            HudDb_XYLoop:
00020946 E959                       		rol.w	#4,d1
00020948 3401                       		move.w	d1,d2
0002094A 0242 000F                  		andi.w	#$F,d2
0002094E 0C42 000A                  		cmpi.w	#$A,d2
00020952 6500                       		bcs.s	loc_1C8B2
00020954 5E42                       		addq.w	#7,d2
00020956                            
00020956                            loc_1C8B2:
00020956 EB4A                       		lsl.w	#5,d2
00020958 47F1 2000                  		lea	(a1,d2.w),a3
0002095C 2C9B                       		move.l	(a3)+,(a6)
0002095E 2C9B                       		move.l	(a3)+,(a6)
00020960 2C9B                       		move.l	(a3)+,(a6)
00020962 2C9B                       		move.l	(a3)+,(a6)
00020964 2C9B                       		move.l	(a3)+,(a6)
00020966 2C9B                       		move.l	(a3)+,(a6)
00020968 2C9B                       		move.l	(a3)+,(a6)
0002096A 2C9B                       		move.l	(a3)+,(a6)
0002096C 4841                       		swap	d1
0002096E 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
00020972                            
00020972 4E75                       		rts	
00020974                            ; End of function HudDb_XY2
00020974                            
00020974                            ; ---------------------------------------------------------------------------
00020974                            ; Subroutine to	load rings numbers patterns
00020974                            ; ---------------------------------------------------------------------------
00020974                            
00020974                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020974                            
00020974                            
00020974                            Hud_Rings:
00020974 45F9 0000 0000             		lea	(Hud_100).l,a2
0002097A 7C02                       		moveq	#2,d6
0002097C 6000                       		bra.s	Hud_LoadArt
0002097E                            ; End of function Hud_Rings
0002097E                            
0002097E                            ; ---------------------------------------------------------------------------
0002097E                            ; Subroutine to	load score numbers patterns
0002097E                            ; ---------------------------------------------------------------------------
0002097E                            
0002097E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002097E                            
0002097E                            
0002097E                            Hud_Score:
0002097E 45F9 0000 0000             		lea	(Hud_100000).l,a2
00020984 7C05                       		moveq	#5,d6
00020986                            
00020986                            Hud_LoadArt:
00020986 7800                       		moveq	#0,d4
00020988 43FA 0000                  		lea	Art_Hud(pc),a1
0002098C                            
0002098C                            Hud_ScoreLoop:
0002098C 7400                       		moveq	#0,d2
0002098E 261A                       		move.l	(a2)+,d3
00020990                            
00020990                            loc_1C8EC:
00020990 9283                       		sub.l	d3,d1
00020992 6500                       		bcs.s	loc_1C8F4
00020994 5242                       		addq.w	#1,d2
00020996 60F8                       		bra.s	loc_1C8EC
00020998                            ; ===========================================================================
00020998                            
00020998                            loc_1C8F4:
00020998 D283                       		add.l	d3,d1
0002099A 4A42                       		tst.w	d2
0002099C 6700                       		beq.s	loc_1C8FE
0002099E 383C 0001                  		move.w	#1,d4
000209A2                            
000209A2                            loc_1C8FE:
000209A2 4A44                       		tst.w	d4
000209A4 6700                       		beq.s	loc_1C92C
000209A6 ED4A                       		lsl.w	#6,d2
000209A8 2D40 0004                  		move.l	d0,4(a6)
000209AC 47F1 2000                  		lea	(a1,d2.w),a3
000209B0 2C9B                       		move.l	(a3)+,(a6)
000209B2 2C9B                       		move.l	(a3)+,(a6)
000209B4 2C9B                       		move.l	(a3)+,(a6)
000209B6 2C9B                       		move.l	(a3)+,(a6)
000209B8 2C9B                       		move.l	(a3)+,(a6)
000209BA 2C9B                       		move.l	(a3)+,(a6)
000209BC 2C9B                       		move.l	(a3)+,(a6)
000209BE 2C9B                       		move.l	(a3)+,(a6)
000209C0 2C9B                       		move.l	(a3)+,(a6)
000209C2 2C9B                       		move.l	(a3)+,(a6)
000209C4 2C9B                       		move.l	(a3)+,(a6)
000209C6 2C9B                       		move.l	(a3)+,(a6)
000209C8 2C9B                       		move.l	(a3)+,(a6)
000209CA 2C9B                       		move.l	(a3)+,(a6)
000209CC 2C9B                       		move.l	(a3)+,(a6)
000209CE 2C9B                       		move.l	(a3)+,(a6)
000209D0                            
000209D0                            loc_1C92C:
000209D0 0680 0040 0000             		addi.l	#$400000,d0
000209D6 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
000209DA                            
000209DA 4E75                       		rts	
000209DC                            
000209DC                            ; End of function Hud_Score
000209DC                            ; End of function Hud_Score
000209DC                            
000209DC                            ; ---------------------------------------------------------------------------
000209DC                            ; Subroutine to	load countdown numbers on the continue screen
000209DC                            ; ---------------------------------------------------------------------------
000209DC                            
000209DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000209DC                            
000209DC                            
000209DC                            ContScrCounter:
000209E6 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000209EC 45F9 0000 0000             		lea	(Hud_10).l,a2
000209F2 7C01                       		moveq	#1,d6
000209F4 7800                       		moveq	#0,d4
000209F6 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
000209FA                            
000209FA                            ContScr_Loop:
000209FA 7400                       		moveq	#0,d2
000209FC 261A                       		move.l	(a2)+,d3
000209FE                            
000209FE                            loc_1C95A:
000209FE 9283                       		sub.l	d3,d1
00020A00 6500                       		blo.s	loc_1C962
00020A02 5242                       		addq.w	#1,d2
00020A04 60F8                       		bra.s	loc_1C95A
00020A06                            ; ===========================================================================
00020A06                            
00020A06                            loc_1C962:
00020A06 D283                       		add.l	d3,d1
00020A08 ED4A                       		lsl.w	#6,d2
00020A0A 47F1 2000                  		lea	(a1,d2.w),a3
00020A0E 2C9B                       		move.l	(a3)+,(a6)
00020A10 2C9B                       		move.l	(a3)+,(a6)
00020A12 2C9B                       		move.l	(a3)+,(a6)
00020A14 2C9B                       		move.l	(a3)+,(a6)
00020A16 2C9B                       		move.l	(a3)+,(a6)
00020A18 2C9B                       		move.l	(a3)+,(a6)
00020A1A 2C9B                       		move.l	(a3)+,(a6)
00020A1C 2C9B                       		move.l	(a3)+,(a6)
00020A1E 2C9B                       		move.l	(a3)+,(a6)
00020A20 2C9B                       		move.l	(a3)+,(a6)
00020A22 2C9B                       		move.l	(a3)+,(a6)
00020A24 2C9B                       		move.l	(a3)+,(a6)
00020A26 2C9B                       		move.l	(a3)+,(a6)
00020A28 2C9B                       		move.l	(a3)+,(a6)
00020A2A 2C9B                       		move.l	(a3)+,(a6)
00020A2C 2C9B                       		move.l	(a3)+,(a6)
00020A2E 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
00020A32                            
00020A32 4E75                       		rts	
00020A34                            ; End of function ContScrCounter
00020A34                            
00020A34                            ; ===========================================================================
00020A34                            
00020A34                            		include	"_inc\HUD (part 2).asm"
00020A34                            ; ---------------------------------------------------------------------------
00020A34                            ; HUD counter sizes
00020A34                            ; ---------------------------------------------------------------------------
00020A34 0001 86A0                  Hud_100000:	dc.l 100000
00020A38 0000 2710                  Hud_10000:	dc.l 10000
00020A3C 0000 03E8                  Hud_1000:	dc.l 1000
00020A40 0000 0064                  Hud_100:	dc.l 100
00020A44 0000 000A                  Hud_10:		dc.l 10
00020A48 0000 0001                  Hud_1:		dc.l 1
00020A4C                            
00020A4C                            ; ---------------------------------------------------------------------------
00020A4C                            ; Subroutine to	load time numbers patterns
00020A4C                            ; ---------------------------------------------------------------------------
00020A4C                            
00020A4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020A4C                            
00020A4C                            
00020A4C                            Hud_Mins:
00020A4C 45F9 0002 0A48             		lea	(Hud_1).l,a2
00020A52 7C00                       		moveq	#0,d6
00020A54 6000                       		bra.s	loc_1C9BA
00020A56                            ; End of function Hud_Mins
00020A56                            
00020A56                            
00020A56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020A56                            
00020A56                            
00020A56                            Hud_Secs:
00020A56 45F9 0002 0A44             		lea	(Hud_10).l,a2
00020A5C 7C01                       		moveq	#1,d6
00020A5E                            
00020A5E                            loc_1C9BA:
00020A5E 7800                       		moveq	#0,d4
00020A60 43FA 0000                  		lea	Art_Hud(pc),a1
00020A64                            
00020A64                            Hud_TimeLoop:
00020A64 7400                       		moveq	#0,d2
00020A66 261A                       		move.l	(a2)+,d3
00020A68                            
00020A68                            loc_1C9C4:
00020A68 9283                       		sub.l	d3,d1
00020A6A 6500                       		bcs.s	loc_1C9CC
00020A6C 5242                       		addq.w	#1,d2
00020A6E 60F8                       		bra.s	loc_1C9C4
00020A70                            ; ===========================================================================
00020A70                            
00020A70                            loc_1C9CC:
00020A70 D283                       		add.l	d3,d1
00020A72 4A42                       		tst.w	d2
00020A74 6700                       		beq.s	loc_1C9D6
00020A76 383C 0001                  		move.w	#1,d4
00020A7A                            
00020A7A                            loc_1C9D6:
00020A7A ED4A                       		lsl.w	#6,d2
00020A7C 2D40 0004                  		move.l	d0,4(a6)
00020A80 47F1 2000                  		lea	(a1,d2.w),a3
00020A84 2C9B                       		move.l	(a3)+,(a6)
00020A86 2C9B                       		move.l	(a3)+,(a6)
00020A88 2C9B                       		move.l	(a3)+,(a6)
00020A8A 2C9B                       		move.l	(a3)+,(a6)
00020A8C 2C9B                       		move.l	(a3)+,(a6)
00020A8E 2C9B                       		move.l	(a3)+,(a6)
00020A90 2C9B                       		move.l	(a3)+,(a6)
00020A92 2C9B                       		move.l	(a3)+,(a6)
00020A94 2C9B                       		move.l	(a3)+,(a6)
00020A96 2C9B                       		move.l	(a3)+,(a6)
00020A98 2C9B                       		move.l	(a3)+,(a6)
00020A9A 2C9B                       		move.l	(a3)+,(a6)
00020A9C 2C9B                       		move.l	(a3)+,(a6)
00020A9E 2C9B                       		move.l	(a3)+,(a6)
00020AA0 2C9B                       		move.l	(a3)+,(a6)
00020AA2 2C9B                       		move.l	(a3)+,(a6)
00020AA4 0680 0040 0000             		addi.l	#$400000,d0
00020AAA 51CE FFB8                  		dbf	d6,Hud_TimeLoop
00020AAE                            
00020AAE 4E75                       		rts	
00020AB0                            ; End of function Hud_Secs
00020AB0                            
00020AB0                            ; ---------------------------------------------------------------------------
00020AB0                            ; Subroutine to	load time/ring bonus numbers patterns
00020AB0                            ; ---------------------------------------------------------------------------
00020AB0                            
00020AB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020AB0                            
00020AB0                            
00020AB0                            Hud_TimeRingBonus:
00020AB0 45F9 0002 0A3C             		lea	(Hud_1000).l,a2
00020AB6 7C03                       		moveq	#3,d6
00020AB8 7800                       		moveq	#0,d4
00020ABA 43FA 0000                  		lea	Art_Hud(pc),a1
00020ABE                            
00020ABE                            Hud_BonusLoop:
00020ABE 7400                       		moveq	#0,d2
00020AC0 261A                       		move.l	(a2)+,d3
00020AC2                            
00020AC2                            loc_1CA1E:
00020AC2 9283                       		sub.l	d3,d1
00020AC4 6500                       		bcs.s	loc_1CA26
00020AC6 5242                       		addq.w	#1,d2
00020AC8 60F8                       		bra.s	loc_1CA1E
00020ACA                            ; ===========================================================================
00020ACA                            
00020ACA                            loc_1CA26:
00020ACA D283                       		add.l	d3,d1
00020ACC 4A42                       		tst.w	d2
00020ACE 6700                       		beq.s	loc_1CA30
00020AD0 383C 0001                  		move.w	#1,d4
00020AD4                            
00020AD4                            loc_1CA30:
00020AD4 4A44                       		tst.w	d4
00020AD6 6700                       		beq.s	Hud_ClrBonus
00020AD8 ED4A                       		lsl.w	#6,d2
00020ADA 47F1 2000                  		lea	(a1,d2.w),a3
00020ADE 2C9B                       		move.l	(a3)+,(a6)
00020AE0 2C9B                       		move.l	(a3)+,(a6)
00020AE2 2C9B                       		move.l	(a3)+,(a6)
00020AE4 2C9B                       		move.l	(a3)+,(a6)
00020AE6 2C9B                       		move.l	(a3)+,(a6)
00020AE8 2C9B                       		move.l	(a3)+,(a6)
00020AEA 2C9B                       		move.l	(a3)+,(a6)
00020AEC 2C9B                       		move.l	(a3)+,(a6)
00020AEE 2C9B                       		move.l	(a3)+,(a6)
00020AF0 2C9B                       		move.l	(a3)+,(a6)
00020AF2 2C9B                       		move.l	(a3)+,(a6)
00020AF4 2C9B                       		move.l	(a3)+,(a6)
00020AF6 2C9B                       		move.l	(a3)+,(a6)
00020AF8 2C9B                       		move.l	(a3)+,(a6)
00020AFA 2C9B                       		move.l	(a3)+,(a6)
00020AFC 2C9B                       		move.l	(a3)+,(a6)
00020AFE                            
00020AFE                            loc_1CA5A:
00020AFE 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
00020B02                            
00020B02 4E75                       		rts	
00020B04                            ; ===========================================================================
00020B04                            
00020B04                            Hud_ClrBonus:
00020B04 7A0F                       		moveq	#$F,d5
00020B06                            
00020B06                            Hud_ClrBonusLoop:
00020B06 2CBC 0000 0000             		move.l	#0,(a6)
00020B0C 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
00020B10                            
00020B10 60EC                       		bra.s	loc_1CA5A
00020B12                            ; End of function Hud_TimeRingBonus
00020B12                            
00020B12                            ; ---------------------------------------------------------------------------
00020B12                            ; Subroutine to	load uncompressed lives	counter	patterns
00020B12                            ; ---------------------------------------------------------------------------
00020B12                            
00020B12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020B12                            
00020B12                            
00020B12                            Hud_Lives:
00020B12 203C 7BA0 0003             		hudVRAM	$FBA0		; set VRAM address
00020B18 7200                       		moveq	#0,d1
00020B1A 1238 FE12                  		move.b	(v_lives).w,d1	; load number of lives
00020B1E 45F9 0002 0A44             		lea	(Hud_10).l,a2
00020B24 7C01                       		moveq	#1,d6
00020B26 7800                       		moveq	#0,d4
00020B28 43FA 0000                  		lea	Art_LivesNums(pc),a1
00020B2C                            		
00020B2C                            
00020B2C                            Hud_LivesLoop:
00020B2C 2D40 0004                  		move.l	d0,4(a6)
00020B30 7400                       		moveq	#0,d2
00020B32 261A                       		move.l	(a2)+,d3
00020B34                            
00020B34                            loc_1CA90:
00020B34 9283                       		sub.l	d3,d1
00020B36 6500                       		bcs.s	loc_1CA98
00020B38 5242                       		addq.w	#1,d2
00020B3A 60F8                       		bra.s	loc_1CA90
00020B3C                            ; ===========================================================================
00020B3C                            
00020B3C                            loc_1CA98:
00020B3C D283                       		add.l	d3,d1
00020B3E 4A42                       		tst.w	d2
00020B40 6700                       		beq.s	loc_1CAA2
00020B42 383C 0001                  		move.w	#1,d4
00020B46                            
00020B46                            loc_1CAA2:
00020B46 4A44                       		tst.w	d4
00020B48 6700                       		beq.s	Hud_ClrLives
00020B4A                            
00020B4A                            loc_1CAA6:
00020B4A EB4A                       		lsl.w	#5,d2
00020B4C 47F1 2000                  		lea	(a1,d2.w),a3
00020B50 2C9B                       		move.l	(a3)+,(a6)
00020B52 2C9B                       		move.l	(a3)+,(a6)
00020B54 2C9B                       		move.l	(a3)+,(a6)
00020B56 2C9B                       		move.l	(a3)+,(a6)
00020B58 2C9B                       		move.l	(a3)+,(a6)
00020B5A 2C9B                       		move.l	(a3)+,(a6)
00020B5C 2C9B                       		move.l	(a3)+,(a6)
00020B5E 2C9B                       		move.l	(a3)+,(a6)
00020B60                            
00020B60                            loc_1CABC:
00020B60 0680 0040 0000             		addi.l	#$400000,d0
00020B66 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
00020B6A                            
00020B6A 4E75                       		rts	
00020B6C                            ; ===========================================================================
00020B6C                            
00020B6C                            Hud_ClrLives:
00020B6C 4A46                       		tst.w	d6
00020B6E 67DA                       		beq.s	loc_1CAA6
00020B70 7A07                       		moveq	#7,d5
00020B72                            
00020B72                            Hud_ClrLivesLoop:
00020B72 2CBC 0000 0000             		move.l	#0,(a6)
00020B78 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
00020B7C 60E2                       		bra.s	loc_1CABC
00020B7E                            ; End of function Hud_Lives
00020B7E                            ; End of function Hud_Lives
00020B7E                            
00020B7E                            Art_Hud:	incbin	"artunc\HUD Numbers.bin" ; 8x16 pixel numbers on HUD
00020E7E                            		even
00020E7E                            Art_LivesNums:	incbin	"artunc\Lives Counter Numbers.bin" ; 8x8 pixel numbers on lives counter
00020FBE                            		even
00020FBE                            
00020FBE                            		include	"_incObj\DebugMode.asm"
00020FBE                            ; ---------------------------------------------------------------------------
00020FBE                            ; When debug mode is currently in use
00020FBE                            ; ---------------------------------------------------------------------------
00020FBE                            
00020FBE                            DebugMode:
00020FBE 7000                       		moveq	#0,d0
00020FC0 1038 FE08                  		move.b	(v_debuguse).w,d0
00020FC4 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
00020FC8 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
00020FCC                            ; ===========================================================================
00020FCC 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
00020FCE 0000                       		dc.w Debug_Action-Debug_Index
00020FD0                            ; ===========================================================================
00020FD0                            
00020FD0                            Debug_Main:	; Routine 0
00020FD0 5438 FE08                  		addq.b	#2,(v_debuguse).w
00020FD4 31F8 F72C FEF0             		move.w	(v_limittop2).w,(v_limittopdb).w ; buffer level x-boundary
00020FDA 31F8 F726 FEF2             		move.w	(v_limitbtm1).w,(v_limitbtmdb).w ; buffer level y-boundary
00020FE0 31FC 0000 F72C             		move.w	#0,(v_limittop2).w
00020FE6 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00020FEC 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00020FF2 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00020FF8 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00020FFE 117C 0000 001A             		move.b	#0,obFrame(a0)
00021004 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0002100A 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
00021010 6600                       		bne.s	@islevel	; if not, branch
00021012                            
00021012 31FC 0000 F782             		move.w	#0,(v_ssrotate).w ; stop special stage rotating
00021018 31FC 0000 F780             		move.w	#0,(v_ssangle).w ; make	special	stage "upright"
0002101E 7006                       		moveq	#6,d0		; use 6th debug	item list
00021020 6000                       		bra.s	@selectlist
00021022                            ; ===========================================================================
00021022                            
00021022                            @islevel:
00021022 7000                       		moveq	#0,d0
00021024 1038 FE10                  		move.b	(v_zone).w,d0
00021028                            
00021028                            @selectlist:
00021028 45F9 0000 0000             		lea	(DebugList).l,a2
0002102E D040                       		add.w	d0,d0
00021030 D4F2 0000                  		adda.w	(a2,d0.w),a2
00021034 3C1A                       		move.w	(a2)+,d6
00021036 BC38 FE06                  		cmp.b	(v_debugitem).w,d6 ; have you gone past the last item?
0002103A 6200                       		bhi.s	@noreset	; if not, branch
0002103C 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; back to start of list
00021042                            
00021042                            	@noreset:
00021042 6100 0000                  		bsr.w	Debug_ShowItem
00021046 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
0002104C 11FC 0001 FE0B             		move.b	#1,(v_debugyspeed).w
00021052                            
00021052                            Debug_Action:	; Routine 2
00021052 7006                       		moveq	#6,d0
00021054 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w
0002105A 6700                       		beq.s	@isntlevel
0002105C                            
0002105C 7000                       		moveq	#0,d0
0002105E 1038 FE10                  		move.b	(v_zone).w,d0
00021062                            
00021062                            	@isntlevel:
00021062 45F9 0000 0000             		lea	(DebugList).l,a2
00021068 D040                       		add.w	d0,d0
0002106A D4F2 0000                  		adda.w	(a2,d0.w),a2
0002106E 3C1A                       		move.w	(a2)+,d6
00021070 6100 0000                  		bsr.w	Debug_Control
00021074 4EF9 0000 F7AC             		jmp	(DisplaySprite).l
0002107A                            
0002107A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002107A                            
0002107A                            
0002107A                            Debug_Control:
0002107A 7800                       		moveq	#0,d4
0002107C 323C 0001                  		move.w	#1,d1
00021080 1838 F605                  		move.b	(v_jpadpress1).w,d4
00021084 0244 000F                  		andi.w	#btnDir,d4	; is up/down/left/right	pressed?
00021088 6600                       		bne.s	@dirpressed	; if yes, branch
0002108A                            
0002108A 1038 F604                  		move.b	(v_jpadhold1).w,d0
0002108E 0240 000F                  		andi.w	#btnDir,d0	; is up/down/left/right	held?
00021092 6600                       		bne.s	@dirheld	; if yes, branch
00021094                            
00021094 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
0002109A 11FC 000F FE0B             		move.b	#15,(v_debugyspeed).w
000210A0 6000 0000                  		bra.w	Debug_ChgItem
000210A4                            ; ===========================================================================
000210A4                            
000210A4                            @dirheld:
000210A4 5338 FE0A                  		subq.b	#1,(v_debugxspeed).w
000210A8 6600                       		bne.s	loc_1D01C
000210AA 11FC 0001 FE0A             		move.b	#1,(v_debugxspeed).w
000210B0 5238 FE0B                  		addq.b	#1,(v_debugyspeed).w
000210B4 6600                       		bne.s	@dirpressed
000210B6 11FC 00FF FE0B             		move.b	#-1,(v_debugyspeed).w
000210BC                            
000210BC                            @dirpressed:
000210BC 1838 F604                  		move.b	(v_jpadhold1).w,d4
000210C0                            
000210C0                            loc_1D01C:
000210C0 7200                       		moveq	#0,d1
000210C2 1238 FE0B                  		move.b	(v_debugyspeed).w,d1
000210C6 5241                       		addq.w	#1,d1
000210C8 4841                       		swap	d1
000210CA E881                       		asr.l	#4,d1
000210CC 2428 000C                  		move.l	obY(a0),d2
000210D0 2628 0008                  		move.l	obX(a0),d3
000210D4 0804 0000                  		btst	#bitUp,d4	; is up	being pressed?
000210D8 6700                       		beq.s	loc_1D03C	; if not, branch
000210DA 9481                       		sub.l	d1,d2
000210DC 6400                       		bcc.s	loc_1D03C
000210DE 7400                       		moveq	#0,d2
000210E0                            
000210E0                            loc_1D03C:
000210E0 0804 0001                  		btst	#bitDn,d4	; is down being	pressed?
000210E4 6700                       		beq.s	loc_1D052	; if not, branch
000210E6 D481                       		add.l	d1,d2
000210E8 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
000210EE 6500                       		bcs.s	loc_1D052
000210F0 243C 07FF 0000             		move.l	#$7FF0000,d2
000210F6                            
000210F6                            loc_1D052:
000210F6 0804 0002                  		btst	#bitL,d4
000210FA 6700                       		beq.s	loc_1D05E
000210FC 9681                       		sub.l	d1,d3
000210FE 6400                       		bcc.s	loc_1D05E
00021100 7600                       		moveq	#0,d3
00021102                            
00021102                            loc_1D05E:
00021102 0804 0003                  		btst	#bitR,d4
00021106 6700                       		beq.s	loc_1D066
00021108 D681                       		add.l	d1,d3
0002110A                            
0002110A                            loc_1D066:
0002110A 2142 000C                  		move.l	d2,obY(a0)
0002110E 2143 0008                  		move.l	d3,obX(a0)
00021112                            
00021112                            Debug_ChgItem:
00021112 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
00021118 6700                       		beq.s	@createitem	; if not, branch
0002111A 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
00021120 6700                       		beq.s	@nextitem	; if not, branch
00021122 5338 FE06                  		subq.b	#1,(v_debugitem).w ; go back 1 item
00021126 6400                       		bcc.s	@display
00021128 DD38 FE06                  		add.b	d6,(v_debugitem).w
0002112C 6000                       		bra.s	@display
0002112E                            ; ===========================================================================
0002112E                            
0002112E                            @nextitem:
0002112E 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
00021134 6700                       		beq.s	@createitem	; if not, branch
00021136 5238 FE06                  		addq.b	#1,(v_debugitem).w ; go forwards 1 item
0002113A BC38 FE06                  		cmp.b	(v_debugitem).w,d6
0002113E 6200                       		bhi.s	@display
00021140 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; loop back to first item
00021146                            
00021146                            	@display:
00021146 6000 0000                  		bra.w	Debug_ShowItem
0002114A                            ; ===========================================================================
0002114A                            
0002114A                            @createitem:
0002114A 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
00021150 6700                       		beq.s	@backtonormal	; if not, branch
00021152 4EB9 0000 FD46             		jsr	(FindFreeObj).l
00021158 6600                       		bne.s	@backtonormal
0002115A 3368 0008 0008             		move.w	obX(a0),obX(a1)
00021160 3368 000C 000C             		move.w	obY(a0),obY(a1)
00021166 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0002116A 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00021170 1368 0001 0022             		move.b	obRender(a0),obStatus(a1)
00021176 0229 007F 0022             		andi.b	#$7F,obStatus(a1)
0002117C 7000                       		moveq	#0,d0
0002117E 1038 FE06                  		move.b	(v_debugitem).w,d0
00021182 E748                       		lsl.w	#3,d0
00021184 1372 0004 0028             		move.b	4(a2,d0.w),obSubtype(a1)
0002118A 4E75                       		rts	
0002118C                            ; ===========================================================================
0002118C                            
0002118C                            @backtonormal:
0002118C 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
00021192 6700                       		beq.s	@stayindebug	; if not, branch
00021194 7000                       		moveq	#0,d0
00021196 31C0 FE08                  		move.w	d0,(v_debuguse).w ; deactivate debug mode
0002119A 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
000211A2 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
000211A8 11C0 D01C                  		move.b	d0,(v_player+obAnim).w
000211AC 3140 000A                  		move.w	d0,obX+2(a0)
000211B0 3140 000E                  		move.w	d0,obY+2(a0)
000211B4 31F8 FEF0 F72C             		move.w	(v_limittopdb).w,(v_limittop2).w ; restore level boundaries
000211BA 31F8 FEF2 F726             		move.w	(v_limitbtmdb).w,(v_limitbtm1).w
000211C0 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; are you in the special stage?
000211C6 6600                       		bne.s	@stayindebug	; if not, branch
000211C8                            
000211C8 4278 F780                  		clr.w	(v_ssangle).w
000211CC 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set new level rotation speed
000211D2 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
000211DA 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
000211E0 11FC 0002 D01C             		move.b	#id_Roll,(v_player+obAnim).w
000211E6 08F8 0002 D022             		bset	#2,(v_player+obStatus).w
000211EC 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
000211F2                            
000211F2                            	@stayindebug:
000211F2 4E75                       		rts	
000211F4                            ; End of function Debug_Control
000211F4                            
000211F4                            
000211F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000211F4                            
000211F4                            
000211F4                            Debug_ShowItem:
000211F4 7000                       		moveq	#0,d0
000211F6 1038 FE06                  		move.b	(v_debugitem).w,d0
000211FA E748                       		lsl.w	#3,d0
000211FC 2172 0000 0004             		move.l	(a2,d0.w),obMap(a0) ; load mappings for item
00021202 3172 0006 0002             		move.w	6(a2,d0.w),obGfx(a0) ; load VRAM setting for item
00021208 1172 0005 001A             		move.b	5(a2,d0.w),obFrame(a0) ; load frame number for item
0002120E 4E75                       		rts	
00021210                            ; End of function Debug_ShowItem
00021210                            ; End of function Debug_ShowItem
00021210                            		include	"_inc\DebugList.asm"
00021210                            ; ---------------------------------------------------------------------------
00021210                            ; Debug	mode item lists
00021210                            ; ---------------------------------------------------------------------------
00021210                            DebugList:
00021210 0000                       	dc.w @GHZ-DebugList
00021212 0000                       	dc.w @LZ-DebugList
00021214 0000                       	dc.w @MZ-DebugList
00021216 0000                       	dc.w @SLZ-DebugList
00021218 0000                       	dc.w @SYZ-DebugList
0002121A 0000                       	dc.w @SBZ-DebugList
0002121C 0000                       	dc.w @Ending-DebugList
0002121E                            
0002121E                            dbug:	macro map,object,subtype,frame,vram
0002121E                            	dc.l map+(object<<24)
0002121E                            	dc.b subtype,frame
0002121E                            	dc.w vram
0002121E                            	endm
0002121E                            
0002121E                            @GHZ:
0002121E 0000                       	dc.w (@GHZend-@GHZ-2)/8
00021220                            
00021220                            ;		mappings	object		subtype	frame	VRAM setting
00021220 2500 BDB4 0000 27B2        	dbug 	Map_Ring,	id_Rings,	0,	0,	$27B2
00021228 2600 C572 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00021230 1F00 B194 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
00021238 2200 B61E 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00021240 2B00 CD14 0000 047B        	dbug	Map_Chop,	id_Chopper,	0,	0,	$47B
00021248 3600 F152 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00021250 1800 990C 0000 4000        	dbug	Map_Plat_GHZ,	id_BasicPlatform, 0,	0,	$4000
00021258 3B00 F278 0000 63D0        	dbug	Map_PRock,	id_PurpleRock,	0,	0,	$63D0
00021260 4001 1952 0000 04F0        	dbug	Map_Moto,	id_MotoBug,	0,	0,	$4F0
00021268 4100 FFD8 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00021270 4201 0202 0000 249B        	dbug	Map_Newt,	id_Newtron,	0,	0,	$249B
00021278 4401 0516 0000 434C        	dbug	Map_Edge,	id_EdgeWalls,	0,	0,	$434C
00021280 7901 ACFC 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00021288 4B00 BE04 0000 2400        	dbug	Map_GRing,	id_GiantRing,	0,	0,	$2400
00021290 7D01 AEBE 0101 84B6        	dbug	Map_Bonus,	id_HiddenBonus,	1,	1,	$84B6
00021298                            	@GHZend:
00021298                            
00021298                            @LZ:
00021298 0000                       	dc.w (@LZend-@LZ-2)/8
0002129A                            
0002129A                            ;		mappings	object		subtype	frame	VRAM setting
0002129A 2500 BDB4 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000212A2 2600 C572 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000212AA 4100 FFD8 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000212B2 2C00 CDBA 0800 2486        	dbug	Map_Jaws,	id_Jaws,	8,	0,	$2486
000212BA 2D00 CFA6 0002 84A6        	dbug	Map_Burro,	id_Burrobot,	0,	2,	$84A6
000212C2 1601 4314 0000 03CC        	dbug	Map_Harp,	id_Harpoon,	0,	0,	$3CC
000212CA 1601 4314 0203 03CC        	dbug	Map_Harp,	id_Harpoon,	2,	3,	$3CC
000212D2 3300 E424 0000 43DE        	dbug	Map_Push,	id_PushBlock,	0,	0,	$43DE
000212DA 3200 DFE4 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
000212E2 3600 F152 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000212EA 5201 23EA 0400 43BC        	dbug	Map_MBlockLZ,	id_MovingBlock,	4,	0,	$43BC
000212F2 6101 453C 0100 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 1,	0,	$43E6
000212FA 6101 453C 1301 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $13,	1,	$43E6
00021302 6101 453C 0500 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 5,	0,	$43E6
0002130A 6201 4690 0000 443E        	dbug	Map_Gar,	id_Gargoyle,	0,	0,	$443E
00021312 6101 453C 2702 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $27,	2,	$43E6
0002131A 6101 453C 3003 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $30,	3,	$43E6
00021322 6301 49F2 7F00 03F6        	dbug	Map_LConv,	id_LabyrinthConvey, $7F, 0,	$3F6
0002132A 6001 425E 0000 0467        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$467
00021332 6401 4D40 8413 8348        	dbug	Map_Bub,	id_Bubble,	$84,	$13,	$8348
0002133A 6501 4EC8 0202 C259        	dbug	Map_WFall,	id_Waterfall,	2,	2,	$C259
00021342 6501 4EC8 0909 C259        	dbug	Map_WFall,	id_Waterfall,	9,	9,	$C259
0002134A 0B01 36AA 0000 43DE        	dbug	Map_Pole,	id_Pole,	0,	0,	$43DE
00021352 0C01 377A 0200 4328        	dbug	Map_Flap,	id_FlapDoor,	2,	0,	$4328
0002135A 7901 ACFC 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00021362                            	@LZend:
00021362                            
00021362                            @MZ:
00021362 0000                       	dc.w (@MZend-@MZ-2)/8
00021364                            
00021364                            ;		mappings	object		subtype	frame	VRAM setting
00021364 2500 BDB4 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002136C 2600 C572 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00021374 2200 B61E 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
0002137C 3600 F152 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00021384 4100 FFD8 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002138C 1300 D4B4 0000 0345        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$345
00021394 4601 0BCE 0000 4000        	dbug	Map_Brick,	id_MarbleBrick,	0,	0,	$4000
0002139C 6E01 9D94 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
000213A4 6A01 9704 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
000213AC 3300 E424 0000 42B8        	dbug	Map_Push,	id_PushBlock,	0,	0,	$42B8
000213B4 1E00 A8AC 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
000213BC 5101 2110 0000 42B8        	dbug	Map_Smab,	id_SmashBlock,	0,	0,	$42B8
000213C4 5201 2394 0000 02B8        	dbug	Map_MBlock,	id_MovingBlock,	0,	0,	$2B8
000213CC 5300 9F4E 0000 62B8        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$62B8
000213D4 5401 14B8 0000 8680        	dbug	Map_LTag,	id_LavaTag,	0,	0,	$8680
000213DC 5501 2588 0000 04B8        	dbug	Map_Bas,	id_Basaran,	0,	0,	$4B8
000213E4 7801 A968 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
000213EC 7901 ACFC 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000213F4                            	@MZend:
000213F4                            
000213F4                            @SLZ:
000213F4 0000                       	dc.w (@SLZend-@SLZ-2)/8
000213F6                            
000213F6                            ;		mappings	object		subtype	frame	VRAM setting
000213F6 2500 BDB4 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000213FE 2600 C572 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00021406 5901 30D2 0000 4000        	dbug	Map_Elev,	id_Elevator,	0,	0,	$4000
0002140E 5300 9F4E 0002 44E0        	dbug	Map_CFlo,	id_CollapseFloor, 0,	2,	$44E0
00021416 1800 996A 0000 4000        	dbug	Map_Plat_SLZ,	id_BasicPlatform, 0,	0,	$4000
0002141E 5A01 320C 0000 4000        	dbug	Map_Circ,	id_CirclingPlatform, 0,	0,	$4000
00021426 5B01 33C4 0000 4000        	dbug	Map_Stair,	id_Staircase,	0,	0,	$4000
0002142E 5D01 3998 0000 43A0        	dbug	Map_Fan,	id_Fan,		0,	0,	$43A0
00021436 5E01 3D2A 0000 0374        	dbug	Map_Seesaw,	id_Seesaw,	0,	0,	$374
0002143E 4100 FFD8 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00021446 1300 D4B4 0000 0480        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$480
0002144E 1C00 A080 0000 44D8        	dbug	Map_Scen,	id_Scenery,	0,	0,	$44D8
00021456 5F01 3FA8 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
0002145E 6001 425E 0000 2429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$2429
00021466 7901 ACFC 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002146E                            	@SLZend:
0002146E                            
0002146E                            @SYZ:
0002146E 0000                       	dc.w (@SYZend-@SYZ-2)/8
00021470                            
00021470                            ;		mappings	object		subtype	frame	VRAM setting
00021470 2500 BDB4 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00021478 2600 C572 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00021480 3600 F152 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00021488 4100 FFD8 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00021490 4301 0468 0000 04B8        	dbug	Map_Roll,	id_Roller,	0,	0,	$4B8
00021498 1201 0C4C 0000 0000        	dbug	Map_Light,	id_SpinningLight, 0,	0,	0
000214A0 4701 0DF0 0000 0380        	dbug	Map_Bump,	id_Bumper,	0,	0,	$380
000214A8 1F00 B194 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
000214B0 2200 B61E 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
000214B8 5001 1BE2 0000 247B        	dbug	Map_Yad,	id_Yadrin,	0,	0,	$247B
000214C0 1800 9958 0000 4000        	dbug	Map_Plat_SYZ,	id_BasicPlatform, 0,	0,	$4000
000214C8 5601 2A92 0000 4000        	dbug	Map_FBlock,	id_FloatingBlock, 0,	0,	$4000
000214D0 3200 DFE4 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
000214D8 7801 A968 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
000214E0 7901 ACFC 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000214E8                            	@SYZend:
000214E8                            
000214E8                            @SBZ:
000214E8 0000                       	dc.w (@SBZend-@SBZ-2)/8
000214EA                            
000214EA                            ;		mappings	object		subtype	frame	VRAM setting
000214EA 2500 BDB4 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000214F2 2600 C572 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000214FA 5F01 3FA8 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
00021502 6001 425E 0000 0429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$429
0002150A 7801 A968 0000 22B0        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$22B0
00021512 1501 2E2E 0702 4391        	dbug	Map_BBall,	id_SwingingPlatform, 7,	2,	$4391
0002151A 6701 91F2 E000 C344        	dbug	Map_Disc,	id_RunningDisc,	$E0,	0,	$C344
00021522 5201 2394 2802 22C0        	dbug	Map_MBlock,	id_MovingBlock,	$28,	2,	$22C0
0002152A 3200 DFE4 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
00021532 6901 944C 0300 4492        	dbug	Map_Trap,	id_SpinPlatform, 3,	0,	$4492
0002153A 6901 94A6 8300 04DF        	dbug	Map_Spin,	id_SpinPlatform, $83,	0,	$4DF
00021542 6A01 9704 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
0002154A 5300 9F4E 0000 43F5        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$43F5
00021552 5201 2394 3903 4460        	dbug	Map_MBlock,	id_MovingBlock,	$39,	3,	$4460
0002155A 6B01 9AD4 0000 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	0,	0,	$22C0
00021562 2A00 A43E 0000 42E8        	dbug	Map_ADoor,	id_AutoDoor,	0,	0,	$42E8
0002156A 6B01 9AD4 1301 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$13,	1,	$22C0
00021572 6A01 9704 0100 43B5        	dbug	Map_Saw,	id_Saws,	1,	0,	$43B5
0002157A 6B01 9AD4 2401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$24,	1,	$22C0
00021582 6A01 9704 0402 43B5        	dbug	Map_Saw,	id_Saws,	4,	2,	$43B5
0002158A 6B01 9AD4 3401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$34,	1,	$22C0
00021592 6C01 9CB0 0000 44C3        	dbug	Map_VanP,	id_VanishPlatform, 0,	0,	$44C3
0002159A 6D01 08C0 6400 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	0,	$83D9
000215A2 6D01 08C0 640B 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	$B,	$83D9
000215AA 6E01 9D94 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
000215B2 7001 A1DE 0000 42F0        	dbug	Map_Gird,	id_Girder,	0,	0,	$42F0
000215BA 7101 383E 1100 8680        	dbug	Map_Invis,	id_Invisibarrier, $11,	0,	$8680
000215C2 1E00 A8AC 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
000215CA 7901 ACFC 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000215D2                            	@SBZend:
000215D2                            
000215D2                            @Ending:
000215D2 0000                       	dc.w (@Endingend-@Ending-2)/8
000215D4                            
000215D4                            ;		mappings	object		subtype	frame	VRAM setting
000215D4 2500 BDB4 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000215DC 2500 BDB4 0008 27B2        	dbug	Map_Ring,	id_Rings,	0,	8,	$27B2
000215E4                            	@Endingend:
000215E4                            
000215E4                            	even
000215E4                            	even
000215E4                            		include	"_inc\LevelHeaders.asm"
000215E4                            ; ---------------------------------------------------------------------------
000215E4                            ; Level Headers
000215E4                            ; ---------------------------------------------------------------------------
000215E4                            
000215E4                            LevelHeaders:
000215E4                            
000215E4                            lhead:	macro plc1,lvlgfx,plc2,sixteen,twofivesix,music,pal
000215E4                            	dc.l (plc1<<24)+lvlgfx
000215E4                            	dc.l (plc2<<24)+sixteen
000215E4                            	dc.l twofivesix
000215E4                            	dc.b 0, music, pal, pal
000215E4                            	endm
000215E4                            
000215E4                            ; 1st PLC, level gfx (unused), 2nd PLC, 16x16 data, 256x256 data,
000215E4                            ; music (unused), palette (unused), palette
000215E4                            
000215E4                            ;		1st PLC				2nd PLC				256x256 data			palette
000215E4                            ;				level gfx*			16x16 data			music*
000215E4                            
000215E4 0000 0000 0000 0000 0000+  	lhead	plcid_GHZ,	Nem_GHZ_2nd,	plcid_GHZ2,	Blk16_GHZ,	Blk256_GHZ,	bgm_GHZ,	palid_GHZ	; Green Hill
000215F4 0000 0000 0000 0000 0000+  	lhead	plcid_LZ,	Nem_LZ,		plcid_LZ2,	Blk16_LZ,	Blk256_LZ,	bgm_LZ,		palid_LZ	; Labyrinth
00021604 0000 0000 0000 0000 0000+  	lhead	plcid_MZ,	Nem_MZ,		plcid_MZ2,	Blk16_MZ,	Blk256_MZ,	bgm_MZ,		palid_MZ	; Marble
00021614 0000 0000 0000 0000 0000+  	lhead	plcid_SLZ,	Nem_SLZ,	plcid_SLZ2,	Blk16_SLZ,	Blk256_SLZ,	bgm_SLZ,	palid_SLZ	; Star Light
00021624 0000 0000 0000 0000 0000+  	lhead	plcid_SYZ,	Nem_SYZ,	plcid_SYZ2,	Blk16_SYZ,	Blk256_SYZ,	bgm_SYZ,	palid_SYZ	; Spring Yard
00021634 0000 0000 0000 0000 0000+  	lhead	plcid_SBZ,	Nem_SBZ,	plcid_SBZ2,	Blk16_SBZ,	Blk256_SBZ,	bgm_SBZ,	palid_SBZ1	; Scrap Brain
00021644 0000 0000 0000 0000 0000+  	lhead	0,		Nem_GHZ_2nd,	0,		Blk16_GHZ,	Blk256_GHZ,	bgm_SBZ,	palid_Ending	; Ending
00021654                            	even
00021654                            
00021654                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00021654                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00021654                            		include	"_inc\Pattern Load Cues.asm"
00021654                            ; ---------------------------------------------------------------------------
00021654                            ; Pattern load cues
00021654                            ; ---------------------------------------------------------------------------
00021654                            ArtLoadCues:
00021654                            
00021654 0000                       ptr_PLC_Main:		dc.w PLC_Main-ArtLoadCues
00021656 0000                       ptr_PLC_Main2:		dc.w PLC_Main2-ArtLoadCues
00021658 0000                       ptr_PLC_Explode:	dc.w PLC_Explode-ArtLoadCues
0002165A 0000                       ptr_PLC_GameOver:	dc.w PLC_GameOver-ArtLoadCues
0002165C                            PLC_Levels:
0002165C 0000                       ptr_PLC_GHZ:		dc.w PLC_GHZ-ArtLoadCues
0002165E 0000                       ptr_PLC_GHZ2:		dc.w PLC_GHZ2-ArtLoadCues
00021660 0000                       ptr_PLC_LZ:		dc.w PLC_LZ-ArtLoadCues
00021662 0000                       ptr_PLC_LZ2:		dc.w PLC_LZ2-ArtLoadCues
00021664 0000                       ptr_PLC_MZ:		dc.w PLC_MZ-ArtLoadCues
00021666 0000                       ptr_PLC_MZ2:		dc.w PLC_MZ2-ArtLoadCues
00021668 0000                       ptr_PLC_SLZ:		dc.w PLC_SLZ-ArtLoadCues
0002166A 0000                       ptr_PLC_SLZ2:		dc.w PLC_SLZ2-ArtLoadCues
0002166C 0000                       ptr_PLC_SYZ:		dc.w PLC_SYZ-ArtLoadCues
0002166E 0000                       ptr_PLC_SYZ2:		dc.w PLC_SYZ2-ArtLoadCues
00021670 0000                       ptr_PLC_SBZ:		dc.w PLC_SBZ-ArtLoadCues
00021672 0000                       ptr_PLC_SBZ2:		dc.w PLC_SBZ2-ArtLoadCues
00021674 0000                       ptr_PLC_TitleCard:	dc.w PLC_TitleCard-ArtLoadCues
00021676 0000                       ptr_PLC_Boss:		dc.w PLC_Boss-ArtLoadCues
00021678 0000                       ptr_PLC_Signpost:	dc.w PLC_Signpost-ArtLoadCues
0002167A 0000                       ptr_PLC_Warp:		dc.w PLC_Warp-ArtLoadCues
0002167C 0000                       ptr_PLC_SpecialStage:	dc.w PLC_SpecialStage-ArtLoadCues
0002167E                            PLC_Animals:
0002167E 0000                       ptr_PLC_GHZAnimals:	dc.w PLC_GHZAnimals-ArtLoadCues
00021680 0000                       ptr_PLC_LZAnimals:	dc.w PLC_LZAnimals-ArtLoadCues
00021682 0000                       ptr_PLC_MZAnimals:	dc.w PLC_MZAnimals-ArtLoadCues
00021684 0000                       ptr_PLC_SLZAnimals:	dc.w PLC_SLZAnimals-ArtLoadCues
00021686 0000                       ptr_PLC_SYZAnimals:	dc.w PLC_SYZAnimals-ArtLoadCues
00021688 0000                       ptr_PLC_SBZAnimals:	dc.w PLC_SBZAnimals-ArtLoadCues
0002168A 0000                       ptr_PLC_SSResult:	dc.w PLC_SSResult-ArtLoadCues
0002168C 0000                       ptr_PLC_Ending:		dc.w PLC_Ending-ArtLoadCues
0002168E 0000                       ptr_PLC_TryAgain:	dc.w PLC_TryAgain-ArtLoadCues
00021690 0000                       ptr_PLC_EggmanSBZ2:	dc.w PLC_EggmanSBZ2-ArtLoadCues
00021692 0000                       ptr_PLC_FZBoss:		dc.w PLC_FZBoss-ArtLoadCues
00021694 0000                       ptr_PLC_Egg:		dc.w PLC_Egg-ArtLoadCues
00021696 0000                       ptr_PLC_LifeIcon:		dc.w PLC_LifeIcon-ArtLoadCues
00021698 0000                       ptr_PLC_LifeIconF:		dc.w PLC_LifeIconF-ArtLoadCues
0002169A                            
0002169A                            plcm:	macro gfx,vram
0002169A                            	dc.l gfx
0002169A                            	dc.w vram
0002169A                            	endm
0002169A                            
0002169A                            ; ---------------------------------------------------------------------------
0002169A                            ; Pattern load cues - standard block 1
0002169A                            ; ---------------------------------------------------------------------------
0002169A 0000                       PLC_Main:	dc.w ((PLC_Mainend-PLC_Main-2)/6)-1
0002169C 0000 0000 D800             		plcm	Nem_Lamp, $D800		; lamppost
000216A2 0000 0000 D940             		plcm	Nem_Hud, $D940		; HUD
000216A8 0000 0000 F300             		plcm	Nem_Ring, $F300		; rings		
000216AE 0000 0000 ADA0             		plcm	Nem_Points, $ADA0 	; points from enemy
000216B4                            	PLC_Mainend:
000216B4                            ; ---------------------------------------------------------------------------
000216B4                            ; Pattern load cues - standard block 2
000216B4                            ; ---------------------------------------------------------------------------
000216B4 0000                       PLC_Main2:	dc.w ((PLC_Main2end-PLC_Main2-2)/6)-1
000216B6 0000 0000 D000             		plcm	Nem_Monitors, $D000	; monitors
000216BC                            	PLC_Main2end:
000216BC                            ; ---------------------------------------------------------------------------
000216BC                            ; Pattern load cues - explosion
000216BC                            ; ---------------------------------------------------------------------------
000216BC 0000                       PLC_Explode:	dc.w ((PLC_Explodeend-PLC_Explode-2)/6)-1
000216BE 0000 0000 B400             		plcm	Nem_Explode, $B400	; explosion
000216C4                            	PLC_Explodeend:
000216C4                            ; ---------------------------------------------------------------------------
000216C4                            ; Pattern load cues - game/time	over
000216C4                            ; ---------------------------------------------------------------------------
000216C4 0000                       PLC_GameOver:	dc.w ((PLC_GameOverend-PLC_GameOver-2)/6)-1
000216C6 0000 0000 ABC0             		plcm	Nem_GameOver, $ABC0	; game/time over
000216CC                            	PLC_GameOverend:
000216CC                            ; ---------------------------------------------------------------------------
000216CC                            ; Pattern load cues - Green Hill
000216CC                            ; ---------------------------------------------------------------------------
000216CC 0000                       PLC_GHZ:	dc.w ((PLC_GHZ2-PLC_GHZ-2)/6)-1
000216CE 0000 0000 0000             		plcm	Nem_GHZ_1st, 0		; GHZ main patterns
000216D4 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
000216DA 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
000216E0 0000 0000 7A00             		plcm	Nem_PplRock, $7A00	; purple rock
000216E6 0000 0000 8000             		plcm	Nem_Crabmeat, $8000	; crabmeat enemy
000216EC 0000 0000 8880             		plcm	Nem_Mozzietron, $8880	; mozzietron enemy
000216F2 0000 0000 8F60             		plcm	Nem_Chopper, $8F60	; chopper enemy
000216F8 0000 0000 9360             		plcm	Nem_Newtron, $9360	; newtron enemy
000216FE 0000 0000 9E00             		plcm	Nem_Motobug, $9E00	; motobug enemy
00021704 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
0002170A 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00021710 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00021716                            
00021716 0000                       PLC_GHZ2:	dc.w ((PLC_GHZ2end-PLC_GHZ2-2)/6)-1
00021718 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
0002171E 0000 0000 71C0             		plcm	Nem_Bridge, $71C0	; bridge
00021724 0000 0000 7300             		plcm	Nem_SpikePole, $7300	; spiked pole
0002172A 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
00021730 0000 0000 A1E0             		plcm	Nem_GhzWall1, $A1E0	; breakable wall
00021736 0000 0000 6980             		plcm	Nem_GhzWall2, $6980	; normal wall
0002173C                            	PLC_GHZ2end:
0002173C                            ; ---------------------------------------------------------------------------
0002173C                            ; Pattern load cues - Labyrinth
0002173C                            ; ---------------------------------------------------------------------------
0002173C 0000                       PLC_LZ:		dc.w ((PLC_LZ2-PLC_LZ-2)/6)-1
0002173E 0000 0000 0000             		plcm	Nem_LZ,0		; LZ main patterns
00021744 0000 0000 3C00             		plcm	Nem_LzBlock1, $3C00	; block
0002174A                            		;plcm	Nem_LzBlock2, $3E00	; blocks
0002174A 0000 0000 6000             		plcm	Nem_Water, $6000	; water	surface
00021750 0000 0000 6200             		plcm	Nem_LzSpikeBall, $6200	; spiked ball
00021756 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
0002175C 0000 0000 7780             		plcm	Nem_LzBlock3, $7780	; block
00021762 0000 0000 7880             		plcm	Nem_LzDoor1, $7880	; vertical door
00021768 0000 0000 7980             		plcm	Nem_Harpoon, $7980	; harpoon
0002176E 0000 0000 94C0             		plcm	Nem_Burrobot, $94C0	; burrobot enemy
00021774                            
00021774 0000                       PLC_LZ2:	dc.w ((PLC_LZ2end-PLC_LZ2-2)/6)-1
00021776 0000 0000 7BC0             		plcm	Nem_LzPole, $7BC0	; pole that breaks
0002177C 0000 0000 7CC0             		plcm	Nem_LzDoor2, $7CC0	; large	horizontal door
00021782                            		;plcm	Nem_LzWheel, $7EC0	; wheel
00021782                            		;plcm	Nem_Gargoyle, $5D20	; gargoyle head
00021782 0000 0000 89E0             		plcm	Nem_LzPlatfm, $89E0	; rising platform
00021788 0000 0000 8CE0             		plcm	Nem_Orbinaut, $8CE0	; orbinaut enemy
0002178E 0000 0000 90C0             		plcm	Nem_Jaws, $90C0		; jaws enemy
00021794 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
0002179A 0000 0000 A000             		plcm	Nem_Cork, $A000		; cork block
000217A0 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
000217A6 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
000217AC 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
000217B2                            	PLC_LZ2end:
000217B2                            ; ---------------------------------------------------------------------------
000217B2                            ; Pattern load cues - Marble
000217B2                            ; ---------------------------------------------------------------------------
000217B2 0000                       PLC_MZ:		dc.w ((PLC_MZ2-PLC_MZ-2)/6)-1
000217B4 0000 0000 0000             		plcm	Nem_MZ,0		; MZ main patterns
000217BA 0000 0000 9FE0             		plcm	Nem_Cater, $9FE0	; caterkiller enemy
000217C0 0000 0000 6040             		plcm	Nem_BallHog, $6040	; ball hog enemy
000217C6 0000 0000 68A0             		plcm	Nem_MzFire, $68A0	; fireballs
000217CC                            	;	plcm	Nem_MzGlass, $71C0	; green	glassy block
000217CC 0000 0000 75A0             		plcm	Nem_Cutter, $75A0	; pizza	cutter
000217D2 0000 0000 8000             		plcm	Nem_Bomb, $8000
000217D8 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
000217DE 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
000217E4 0000 0000 9700             		plcm	Nem_Basaran, $9700	; basaran enemy
000217EA                            
000217EA 0000                       PLC_MZ2:	dc.w ((PLC_MZ2end-PLC_MZ2-2)/6)-1
000217EC 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
000217F2 0000 0000 5D40             		plcm	Nem_SbzDoor1, $5D40	; door
000217F8                            		;plcm	Nem_MzSwitch, $A260	; switch
000217F8 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
000217FE 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00021804 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
0002180A 0000 0000 5700             		plcm	Nem_MzBlock, $5700	; green	stone block
00021810 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00021816                            	PLC_MZ2end:
00021816                            ; ---------------------------------------------------------------------------
00021816                            ; Pattern load cues - Star Light
00021816                            ; ---------------------------------------------------------------------------
00021816 0000                       PLC_SLZ:	dc.w ((PLC_SLZ2-PLC_SLZ-2)/6)-1
00021818 0000 0000 0000             		plcm	Nem_SLZ,0		; SLZ main patterns
0002181E 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00021824 0000 0000 8520             		plcm	Nem_Orbinaut, $8520	; orbinaut enemy
0002182A 0000 0000 9000             		plcm	Nem_MzFire, $9000	; fireballs
00021830 0000 0000 9C00             		plcm	Nem_SlzBlock, $9C00	; block
00021836 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
0002183C 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00021842 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00021848 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
0002184E                            
0002184E 0000                       PLC_SLZ2:	dc.w ((PLC_SLZ2end-PLC_SLZ2-2)/6)-1
00021850 0000 0000 6E80             		plcm	Nem_Seesaw, $6E80	; seesaw
00021856 0000 0000 7400             		plcm	Nem_Fan, $7400		; fan
0002185C 0000 0000 7980             		plcm	Nem_Pylon, $7980	; foreground pylon
00021862 0000 0000 7B80             		plcm	Nem_SlzSwing, $7B80	; swinging platform
00021868 0000 0000 9B00             		plcm	Nem_SlzCannon, $9B00	; fireball launcher
0002186E 0000 0000 9E00             		plcm	Nem_SlzSpike, $9E00	; spikeball
00021874                            	PLC_SLZ2end:
00021874                            ; ---------------------------------------------------------------------------
00021874                            ; Pattern load cues - Spring Yard
00021874                            ; ---------------------------------------------------------------------------
00021874 0000                       PLC_SYZ:	dc.w ((PLC_SYZ2-PLC_SYZ-2)/6)-1
00021876 0000 0000 0000             		plcm	Nem_SYZ,0		; SYZ main patterns
0002187C                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
0002187C                            		;plcm	Nem_SbzDoor1, $5D40	; door
0002187C 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
00021882 0000 0000 7EA0             		plcm	Nem_Bubbles, $7EA0	; bubbles and numbers
00021888                            		;plcm	Nem_Buzz, $8880		; buzz bomber enemy
00021888 0000 0000 8F60             		plcm	Nem_Yadrin, $8F60	; yadrin enemy
0002188E 0000 0000 9700             		plcm	Nem_Roller, $9700	; roller enemy
00021894 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
0002189A 0000 0000 7840             		plcm	Nem_SbzFloor, $7840	; collapsing floor
000218A0 0000 0000 8BA0             		plcm	Nem_SbzBlock, $8BA0	; vanishing block
000218A6 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
000218AC                            
000218AC 0000                       PLC_SYZ2:	dc.w ((PLC_SYZ2end-PLC_SYZ2-2)/6)-1
000218AE                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
000218AE 0000 0000 7000             		plcm	Nem_Bumper, $7000	; bumper
000218B4 0000 0000 72C0             		plcm	Nem_SyzSpike1, $72C0	; large	spikeball
000218BA 0000 0000 7740             		plcm	Nem_SyzSpike2, $7740	; small	spikeball
000218C0                            		;plcm	Nem_TrapDoor, $9240	; trapdoor
000218C0 0000 0000 78C0             		plcm	Nem_SbzFloor, $78C0	; collapsing floor
000218C6                            		;plcm	Nem_SpinPform, $9BE0	; small	spinning platform
000218C6 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
000218CC 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
000218D2 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
000218D8 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
000218DE                            	PLC_SYZ2end:
000218DE                            ; ---------------------------------------------------------------------------
000218DE                            ; Pattern load cues - Scrap Brain
000218DE                            ; ---------------------------------------------------------------------------
000218DE 0000                       PLC_SBZ:	dc.w ((PLC_SBZ2-PLC_SBZ-2)/6)-1
000218E0 0000 0000 0000             		plcm	Nem_SBZ,0		; SBZ main patterns
000218E6                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
000218E6                            		;plcm	Nem_SbzDoor1, $5D00	; door
000218E6                            		;plcm	Nem_Girder, $5E00	; girder
000218E6 0000 0000 6880             		plcm	Nem_SbzWheel1, $6880	; spot on large	wheel
000218EC 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
000218F2                            		;plcm	Nem_SbzWheel2, $6900	; wheel	that grabs Sonic
000218F2 0000 0000 7220             		plcm	Nem_SyzSpike1, $7220	; large	spikeball
000218F8 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
000218FE 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00021904 0000 0000 9860             		plcm	Nem_SbzBlock, $9860	; vanishing block
0002190A                            
0002190A 0000                       PLC_SBZ2:	dc.w ((PLC_SBZ2end-PLC_SBZ2-2)/6)-1
0002190C 0000 0000 5600             		plcm	Nem_Cater, $5600	; caterkiller enemy
00021912 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00021918 0000 0000 8C00             		plcm	Nem_SlideFloor, $8C00	; floor	that slides away
0002191E                            		;plcm	Nem_SbzDoor2, $8DE0	; horizontal door
0002191E 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00021924 0000 0000 9240             		plcm	Nem_TrapDoor, $9240	; trapdoor
0002192A 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00021930 0000 0000 9BE0             		plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00021936 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
0002193C 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00021942 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00021948 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
0002194E                            	PLC_SBZ2end:
0002194E                            ; ---------------------------------------------------------------------------
0002194E                            ; Pattern load cues - title card
0002194E                            ; ---------------------------------------------------------------------------
0002194E 0000                       PLC_TitleCard:	dc.w ((PLC_TitleCardend-PLC_TitleCard-2)/6)-1
00021950 0000 0000 B000             		plcm	Nem_TitleCard, $B000
00021956                            	PLC_TitleCardend:
00021956                            ; ---------------------------------------------------------------------------
00021956                            ; Pattern load cues - act 3 boss
00021956                            ; ---------------------------------------------------------------------------
00021956 0000                       PLC_Boss:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00021958 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
0002195E 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00021964 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
0002196A                            		;plcm	Nem_Bomb, $A300		; bomb enemy ((gets overwritten)
0002196A                            		;plcm	Nem_SlzSpike, $A300	; spikeball ((SLZ boss)
0002196A 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00021970 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00021976                            	PLC_Bossend:
00021976                            ; ---------------------------------------------------------------------------
00021976                            ; Pattern load cues - act 1/2 signpost
00021976                            ; ---------------------------------------------------------------------------
00021976 0000                       PLC_Signpost:	dc.w ((PLC_Signpostend-PLC_Signpost-2)/6)-1
00021978 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
0002197E 0000 0000 96C0             		plcm	Nem_Bonus, $96C0	; hidden bonus points
00021984 0000 0000 8C40             		plcm	Nem_BigFlash, $8C40	; giant	ring flash effect
0002198A                            		;plcm	Nem_SSEmerald, $EE00	; emeralds
0002198A                            	PLC_Signpostend:
0002198A                            ; ---------------------------------------------------------------------------
0002198A                            ; Pattern load cues - beta special stage warp effect
0002198A                            ; ---------------------------------------------------------------------------
0002198A                            PLC_Warp:
0002198A                            	PLC_Warpend:
0002198A                            ; ---------------------------------------------------------------------------
0002198A                            ; Pattern load cues - special stage
0002198A                            ; ---------------------------------------------------------------------------
0002198A 0000                       PLC_SpecialStage:	dc.w ((PLC_SpeStageend-PLC_SpecialStage-2)/6)-1
0002198C 0000 0000 0000             		plcm	Nem_SSBgCloud, 0	; bubble and cloud background
00021992 0000 0000 0A20             		plcm	Nem_SSBgFish, $A20	; bird and fish	background
00021998 0000 0000 2840             		plcm	Nem_SSWalls, $2840	; walls
0002199E 0000 0000 4760             		plcm	Nem_Bumper, $4760	; bumper
000219A4 0000 0000 4A20             		plcm	Nem_SSGOAL, $4A20	; GOAL block
000219AA 0000 0000 4C60             		plcm	Nem_SSUpDown, $4C60	; UP and DOWN blocks
000219B0 0000 0000 5E00             		plcm	Nem_SSRBlock, $5E00	; R block
000219B6 0000 0000 6E00             		plcm	Nem_SS1UpBlock, $6E00	; 1UP block
000219BC 0000 0000 7E00             		plcm	Nem_SSEmStars, $7E00	; emerald collection stars
000219C2 0000 0000 8E00             		plcm	Nem_SSRedWhite, $8E00	; red and white	block
000219C8 0000 0000 9E00             		plcm	Nem_SSGhost, $9E00	; ghost	block
000219CE 0000 0000 AE00             		plcm	Nem_SSWBlock, $AE00	; W block
000219D4 0000 0000 BE00             		plcm	Nem_SSGlass, $BE00	; glass	block
000219DA 0000 0000 EE00             		plcm	Nem_SSEmerald, $EE00	; emeralds
000219E0                            		;plcm	Nem_SSZone1, $F2E0	; ZONE 1 block
000219E0                            		;plcm	Nem_SSZone2, $F400	; ZONE 2 block
000219E0                            		;plcm	Nem_SSZone3, $F520	; ZONE 3 block
000219E0                            	PLC_SpeStageend:
000219E0                            		;plcm	Nem_SSZone4, $F2E0	; ZONE 4 block
000219E0                            		;plcm	Nem_SSZone5, $F400	; ZONE 5 block
000219E0                            		;plcm	Nem_SSZone6, $F520	; ZONE 6 block
000219E0                            ; ---------------------------------------------------------------------------
000219E0                            ; Pattern load cues - GHZ animals
000219E0                            ; ---------------------------------------------------------------------------
000219E0 0000                       PLC_GHZAnimals:	dc.w ((PLC_GHZAnimalsend-PLC_GHZAnimals-2)/6)-1
000219E2 0000 0000 B000             		plcm	Nem_Rabbit, $B000	; rabbit
000219E8 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
000219EE                            	PLC_GHZAnimalsend:
000219EE                            ; ---------------------------------------------------------------------------
000219EE                            ; Pattern load cues - LZ animals
000219EE                            ; ---------------------------------------------------------------------------
000219EE 0000                       PLC_LZAnimals:	dc.w ((PLC_LZAnimalsend-PLC_LZAnimals-2)/6)-1
000219F0 0000 0000 B000             		plcm	Nem_BlackBird, $B000	; blackbird
000219F6 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
000219FC                            	PLC_LZAnimalsend:
000219FC                            ; ---------------------------------------------------------------------------
000219FC                            ; Pattern load cues - MZ animals
000219FC                            ; ---------------------------------------------------------------------------
000219FC 0000                       PLC_MZAnimals:	dc.w ((PLC_MZAnimalsend-PLC_MZAnimals-2)/6)-1
000219FE 0000 0000 B000             		plcm	Nem_Squirrel, $B000	; squirrel
00021A04 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00021A0A                            	PLC_MZAnimalsend:
00021A0A                            ; ---------------------------------------------------------------------------
00021A0A                            ; Pattern load cues - SLZ animals
00021A0A                            ; ---------------------------------------------------------------------------
00021A0A 0000                       PLC_SLZAnimals:	dc.w ((PLC_SLZAnimalsend-PLC_SLZAnimals-2)/6)-1
00021A0C 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00021A12 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00021A18                            	PLC_SLZAnimalsend:
00021A18                            ; ---------------------------------------------------------------------------
00021A18                            ; Pattern load cues - SYZ animals
00021A18                            ; ---------------------------------------------------------------------------
00021A18 0000                       PLC_SYZAnimals:	dc.w ((PLC_SYZAnimalsend-PLC_SYZAnimals-2)/6)-1
00021A1A 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00021A20 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00021A26                            	PLC_SYZAnimalsend:
00021A26                            ; ---------------------------------------------------------------------------
00021A26                            ; Pattern load cues - SBZ animals
00021A26                            ; ---------------------------------------------------------------------------
00021A26 0000                       PLC_SBZAnimals:	dc.w ((PLC_SBZAnimalsend-PLC_SBZAnimals-2)/6)-1
00021A28 0000 0000 B000             		plcm	Nem_Rabbit, $B000		; rabbit
00021A2E 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00021A34                            	PLC_SBZAnimalsend:
00021A34                            ; ---------------------------------------------------------------------------
00021A34                            ; Pattern load cues - special stage results screen
00021A34                            ; ---------------------------------------------------------------------------
00021A34 0000                       PLC_SSResult:dc.w ((PLC_SpeStResultend-PLC_SSResult-2)/6)-1
00021A36 0000 0000 A820             		plcm	Nem_ResultEm, $A820	; emeralds
00021A3C 0000 0000 AA20             		plcm	Nem_MiniSonic, $AA20	; mini Sonic
00021A42                            	PLC_SpeStResultend:
00021A42                            ; ---------------------------------------------------------------------------
00021A42                            ; Pattern load cues - ending sequence
00021A42                            ; ---------------------------------------------------------------------------
00021A42 0000                       PLC_Ending:	dc.w ((PLC_Endingend-PLC_Ending-2)/6)-1
00021A44 0000 0000 0000             		plcm	Nem_GHZ_1st,0		; GHZ main patterns
00021A4A 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00021A50 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00021A56                            		;plcm	Nem_EndFlower, $7400	; flowers
00021A56 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00021A5C 0000 0000 7C20             		plcm	Nem_EndSonic, $7C20	; Sonic
00021A62 0000 0000 AA60             		plcm	Nem_Rabbit, $AA60	; rabbit
00021A68 0000 0000 ACA0             		plcm	Nem_Chicken, $ACA0	; chicken
00021A6E 0000 0000 AE60             		plcm	Nem_BlackBird, $AE60	; blackbird
00021A74 0000 0000 B0A0             		plcm	Nem_Seal, $B0A0		; seal
00021A7A 0000 0000 B260             		plcm	Nem_Pig, $B260		; pig
00021A80 0000 0000 B4A0             		plcm	Nem_Flicky, $B4A0	; flicky
00021A86 0000 0000 B660             		plcm	Nem_Squirrel, $B660	; squirrel
00021A8C 0000 0000 B8A0             		plcm	Nem_EndStH, $B8A0	; "SONIC THE HEDGEHOG"
00021A92                            	PLC_Endingend:
00021A92                            ; ---------------------------------------------------------------------------
00021A92                            ; Pattern load cues - "TRY AGAIN" and "END" screens
00021A92                            ; ---------------------------------------------------------------------------
00021A92 0000                       PLC_TryAgain:	dc.w ((PLC_TryAgainend-PLC_TryAgain-2)/6)-1
00021A94 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00021A9A 0000 0000 7C20             		plcm	Nem_TryAgain, $7C20	; Eggman
00021AA0 0000 0000 B400             		plcm	Nem_CreditText, $B400	; credits alphabet
00021AA6                            	PLC_TryAgainend:
00021AA6                            ; ---------------------------------------------------------------------------
00021AA6                            ; Pattern load cues - Eggman on SBZ 2
00021AA6                            ; ---------------------------------------------------------------------------
00021AA6 0000                       PLC_EggmanSBZ2:	dc.w ((PLC_EggmanSBZ2end-PLC_EggmanSBZ2-2)/6)-1
00021AA8 0000 0000 A300             		plcm	Nem_SbzBlock, $A300	; block
00021AAE 0000 0000 8000             		plcm	Nem_Sbz2Eggman, $8000	; Eggman
00021AB4 0000 0000 9400             		plcm	Nem_LzSwitch, $9400	; switch
00021ABA                            	PLC_EggmanSBZ2end:
00021ABA                            ; ---------------------------------------------------------------------------
00021ABA                            ; Pattern load cues - final boss
00021ABA                            ; ---------------------------------------------------------------------------
00021ABA 0000                       PLC_FZBoss:	dc.w ((PLC_FZBossend-PLC_FZBoss-2)/6)-1
00021ABC 0000 0000 7400             		plcm	Nem_FzEggman, $7400	; Eggman after boss
00021AC2 0000 0000 6000             		plcm	Nem_FzBoss, $6000	; FZ boss
00021AC8 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00021ACE 0000 0000 8E00             		plcm	Nem_Sbz2Eggman, $8E00	; Eggman without ship
00021AD4 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00021ADA                            	PLC_FZBossend:
00021ADA                            ; ---------------------------------------------------------------------------
00021ADA                            ; Pattern load cues - Eggman
00021ADA                            ; ---------------------------------------------------------------------------
00021ADA 0004                       PLC_Egg:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00021ADC 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00021AE2 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00021AE8 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00021AEE 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00021AF4 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00021AFA 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00021B00                            	PLC_Eggend:
00021B00                            		even
00021B00                            ; ---------------------------------------------------------------------------
00021B00                            ; Pattern load cues - Life Icon
00021B00                            ; ---------------------------------------------------------------------------	
00021B00 0000                       PLC_LifeIcon:	dc.w ((PLC_LifeIcon_end-PLC_LifeIcon-2)/6)-1
00021B02 0000 0000 FA80             		plcm	Nem_Lives, $FA80	; lives	counter	
00021B08                            	PLC_LifeIcon_end: 
00021B08                            		even	
00021B08                            ; ---------------------------------------------------------------------------
00021B08                            ; Pattern load cues - Life Icon (Future)
00021B08                            ; ---------------------------------------------------------------------------	
00021B08 0000                       PLC_LifeIconF:	dc.w ((PLC_LifeIconF_end-PLC_LifeIconF-2)/6)-1
00021B0A 0000 0000 FA80             		plcm	Nem_Future, $FA80	; lives	counter	
00021B10                            	PLC_LifeIconF_end: ; nahhhhh... too far, bro
00021B10                            		even			
00021B10                            ; ---------------------------------------------------------------------------
00021B10                            ; Pattern load cue IDs
00021B10                            ; ---------------------------------------------------------------------------
00021B10 =00000000                  plcid_Main:		equ (ptr_PLC_Main-ArtLoadCues)/2	; 0
00021B10 =00000001                  plcid_Main2:		equ (ptr_PLC_Main2-ArtLoadCues)/2	; 1
00021B10 =00000002                  plcid_Explode:		equ (ptr_PLC_Explode-ArtLoadCues)/2	; 2
00021B10 =00000003                  plcid_GameOver:		equ (ptr_PLC_GameOver-ArtLoadCues)/2	; 3
00021B10 =00000004                  plcid_GHZ:		equ (ptr_PLC_GHZ-ArtLoadCues)/2		; 4
00021B10 =00000005                  plcid_GHZ2:		equ (ptr_PLC_GHZ2-ArtLoadCues)/2	; 5
00021B10 =00000006                  plcid_LZ:		equ (ptr_PLC_LZ-ArtLoadCues)/2		; 6
00021B10 =00000007                  plcid_LZ2:		equ (ptr_PLC_LZ2-ArtLoadCues)/2		; 7
00021B10 =00000008                  plcid_MZ:		equ (ptr_PLC_MZ-ArtLoadCues)/2		; 8
00021B10 =00000009                  plcid_MZ2:		equ (ptr_PLC_MZ2-ArtLoadCues)/2		; 9
00021B10 =0000000A                  plcid_SLZ:		equ (ptr_PLC_SLZ-ArtLoadCues)/2		; $A
00021B10 =0000000B                  plcid_SLZ2:		equ (ptr_PLC_SLZ2-ArtLoadCues)/2	; $B
00021B10 =0000000C                  plcid_SYZ:		equ (ptr_PLC_SYZ-ArtLoadCues)/2		; $C
00021B10 =0000000D                  plcid_SYZ2:		equ (ptr_PLC_SYZ2-ArtLoadCues)/2	; $D
00021B10 =0000000E                  plcid_SBZ:		equ (ptr_PLC_SBZ-ArtLoadCues)/2		; $E
00021B10 =0000000F                  plcid_SBZ2:		equ (ptr_PLC_SBZ2-ArtLoadCues)/2	; $F
00021B10 =00000010                  plcid_TitleCard:	equ (ptr_PLC_TitleCard-ArtLoadCues)/2	; $10
00021B10 =00000011                  plcid_Boss:		equ (ptr_PLC_Boss-ArtLoadCues)/2	; $11
00021B10 =00000012                  plcid_Signpost:		equ (ptr_PLC_Signpost-ArtLoadCues)/2	; $12
00021B10 =00000013                  plcid_Warp:		equ (ptr_PLC_Warp-ArtLoadCues)/2	; $13
00021B10 =00000014                  plcid_SpecialStage:	equ (ptr_PLC_SpecialStage-ArtLoadCues)/2 ; $14
00021B10 =00000015                  plcid_GHZAnimals:	equ (ptr_PLC_GHZAnimals-ArtLoadCues)/2	; $15
00021B10 =00000016                  plcid_LZAnimals:	equ (ptr_PLC_LZAnimals-ArtLoadCues)/2	; $16
00021B10 =00000017                  plcid_MZAnimals:	equ (ptr_PLC_MZAnimals-ArtLoadCues)/2	; $17
00021B10 =00000018                  plcid_SLZAnimals:	equ (ptr_PLC_SLZAnimals-ArtLoadCues)/2	; $18
00021B10 =00000019                  plcid_SYZAnimals:	equ (ptr_PLC_SYZAnimals-ArtLoadCues)/2	; $19
00021B10 =0000001A                  plcid_SBZAnimals:	equ (ptr_PLC_SBZAnimals-ArtLoadCues)/2	; $1A
00021B10 =0000001B                  plcid_SSResult:		equ (ptr_PLC_SSResult-ArtLoadCues)/2	; $1B
00021B10 =0000001C                  plcid_Ending:		equ (ptr_PLC_Ending-ArtLoadCues)/2	; $1C
00021B10 =0000001D                  plcid_TryAgain:		equ (ptr_PLC_TryAgain-ArtLoadCues)/2	; $1D
00021B10 =0000001E                  plcid_EggmanSBZ2:	equ (ptr_PLC_EggmanSBZ2-ArtLoadCues)/2	; $1E
00021B10 =0000001F                  plcid_FZBoss:		equ (ptr_PLC_FZBoss-ArtLoadCues)/2	; $1F
00021B10 =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $20
00021B10 =00000021                  plcid_LifeIcon:		equ (ptr_PLC_LifeIcon-ArtLoadCues)/2	; $21
00021B10 =00000022                  plcid_LifeIconF:		equ (ptr_PLC_LifeIconF-ArtLoadCues)/2	; $21
00021B10 =00000022                  plcid_LifeIconF:		equ (ptr_PLC_LifeIconF-ArtLoadCues)/2	; $21
00021B10                            
00021C00                            			dcb.b	$300,$FF
00021F00                            	Nem_SegaLogo:	incbin	"artnem\Sega Logo (JP1).bin" ; large Sega logo
00022370                            			even
00022370                            	Eni_SegaLogo:	incbin	"tilemaps\Sega Logo (JP1).bin" ; large Sega logo (mappings)
0002246C                            			even
0002246C                            Eni_Title:	incbin	"tilemaps\Title Screen.bin" ; title screen foreground (mappings)
0002254C                            		even
0002254C                            Nem_TitleFg:	incbin	"artnem\Title Screen Foreground.bin"
000239B8                            		even
000239B8                            Nem_TitleSonic:	incbin	"artnem\Title Screen Sonic.bin"
00025498                            		even
00025498                            Nem_TitleTM:	incbin	"artnem\Title Screen TM.bin"
000254CC                            		even
000254CC                            Nem_TitleMenu:   incbin   "artnem\titlemenu.bin"  
000256FE 00                         		even		
000256FE                            Eni_JapNames:	incbin	"tilemaps\Hidden Japanese Credits.bin" ; Japanese credits (mappings)
000257BC                            		even
000257BC                            Nem_JapNames:	incbin	"artnem\Hidden Japanese Credits.bin"
00025C64                            		even
00025C64                            
00025C64                            Map_Sonic:	include	"_maps\Sonic.asm"
00025C64                            ; --------------------------------------------------------------------------------
00025C64                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00025C64                            ; --------------------------------------------------------------------------------
00025C64                            
00025C64                            SME_wvX4F:	
00025C64 0000 0000                  		dc.w SME_wvX4F_1EE-SME_wvX4F, SME_wvX4F_1EF-SME_wvX4F	
00025C68 0000 0000                  		dc.w SME_wvX4F_204-SME_wvX4F, SME_wvX4F_232-SME_wvX4F	
00025C6C 0000 0000                  		dc.w SME_wvX4F_265-SME_wvX4F, SME_wvX4F_27A-SME_wvX4F	
00025C70 0000 0000                  		dc.w SME_wvX4F_28A-SME_wvX4F, SME_wvX4F_29A-SME_wvX4F	
00025C74 0000 0000                  		dc.w SME_wvX4F_2AF-SME_wvX4F, SME_wvX4F_2BA-SME_wvX4F	
00025C78 0000 0000                  		dc.w SME_wvX4F_2CA-SME_wvX4F, SME_wvX4F_2DA-SME_wvX4F	
00025C7C 0000 0000                  		dc.w SME_wvX4F_2EA-SME_wvX4F, SME_wvX4F_2FF-SME_wvX4F	
00025C80 0000 0000                  		dc.w SME_wvX4F_30F-SME_wvX4F, SME_wvX4F_333-SME_wvX4F	
00025C84 0000 0000                  		dc.w SME_wvX4F_34D-SME_wvX4F, SME_wvX4F_358-SME_wvX4F	
00025C88 0000 0000                  		dc.w SME_wvX4F_368-SME_wvX4F, SME_wvX4F_37D-SME_wvX4F	
00025C8C 0000 0000                  		dc.w SME_wvX4F_388-SME_wvX4F, SME_wvX4F_398-SME_wvX4F	
00025C90 0000 0000                  		dc.w SME_wvX4F_3B2-SME_wvX4F, SME_wvX4F_3CC-SME_wvX4F	
00025C94 0000 0000                  		dc.w SME_wvX4F_3EB-SME_wvX4F, SME_wvX4F_400-SME_wvX4F	
00025C98 0000 0000                  		dc.w SME_wvX4F_410-SME_wvX4F, SME_wvX4F_42A-SME_wvX4F	
00025C9C 0000 0000                  		dc.w SME_wvX4F_43F-SME_wvX4F, SME_wvX4F_44F-SME_wvX4F	
00025CA0 0000 0000                  		dc.w SME_wvX4F_469-SME_wvX4F, SME_wvX4F_47E-SME_wvX4F	
00025CA4 0000 0000                  		dc.w SME_wvX4F_489-SME_wvX4F, SME_wvX4F_494-SME_wvX4F	
00025CA8 0000 0000                  		dc.w SME_wvX4F_4AE-SME_wvX4F, SME_wvX4F_4C3-SME_wvX4F	
00025CAC 0000 0000                  		dc.w SME_wvX4F_4CE-SME_wvX4F, SME_wvX4F_4DE-SME_wvX4F	
00025CB0 0000 0000                  		dc.w SME_wvX4F_4EE-SME_wvX4F, SME_wvX4F_50D-SME_wvX4F	
00025CB4 0000 0000                  		dc.w SME_wvX4F_52C-SME_wvX4F, SME_wvX4F_541-SME_wvX4F	
00025CB8 0000 0000                  		dc.w SME_wvX4F_551-SME_wvX4F, SME_wvX4F_56B-SME_wvX4F	
00025CBC 0000 0000                  		dc.w SME_wvX4F_580-SME_wvX4F, SME_wvX4F_590-SME_wvX4F	
00025CC0 0000 0000                  		dc.w SME_wvX4F_5AA-SME_wvX4F, SME_wvX4F_5B5-SME_wvX4F	
00025CC4 0000 0000                  		dc.w SME_wvX4F_5C0-SME_wvX4F, SME_wvX4F_5CB-SME_wvX4F	
00025CC8 0000 0000                  		dc.w SME_wvX4F_5D6-SME_wvX4F, SME_wvX4F_5E1-SME_wvX4F	
00025CCC 0000 0000                  		dc.w SME_wvX4F_5EC-SME_wvX4F, SME_wvX4F_5F7-SME_wvX4F	
00025CD0 0000 0000                  		dc.w SME_wvX4F_602-SME_wvX4F, SME_wvX4F_617-SME_wvX4F	
00025CD4 0000 0000                  		dc.w SME_wvX4F_627-SME_wvX4F, SME_wvX4F_637-SME_wvX4F	
00025CD8 0000 0000                  		dc.w SME_wvX4F_647-SME_wvX4F, SME_wvX4F_65C-SME_wvX4F	
00025CDC 0000 0000                  		dc.w SME_wvX4F_66C-SME_wvX4F, SME_wvX4F_67C-SME_wvX4F	
00025CE0 0000 0000                  		dc.w SME_wvX4F_68C-SME_wvX4F, SME_wvX4F_697-SME_wvX4F	
00025CE4 0000 0000                  		dc.w SME_wvX4F_6A2-SME_wvX4F, SME_wvX4F_6AD-SME_wvX4F	
00025CE8 0000 0000                  		dc.w SME_wvX4F_6B8-SME_wvX4F, SME_wvX4F_6C3-SME_wvX4F	
00025CEC 0000 0000                  		dc.w SME_wvX4F_6CE-SME_wvX4F, SME_wvX4F_6D9-SME_wvX4F	
00025CF0 0000 0000                  		dc.w SME_wvX4F_6E4-SME_wvX4F, SME_wvX4F_6F9-SME_wvX4F	
00025CF4 0000 0000                  		dc.w SME_wvX4F_709-SME_wvX4F, SME_wvX4F_714-SME_wvX4F	
00025CF8 0000 0000                  		dc.w SME_wvX4F_724-SME_wvX4F, SME_wvX4F_739-SME_wvX4F	
00025CFC 0000 0000                  		dc.w SME_wvX4F_749-SME_wvX4F, SME_wvX4F_754-SME_wvX4F	
00025D00 0000 0000                  		dc.w SME_wvX4F_764-SME_wvX4F, SME_wvX4F_774-SME_wvX4F	
00025D04 0000 0000                  		dc.w SME_wvX4F_784-SME_wvX4F, SME_wvX4F_7B2-SME_wvX4F	
00025D08 0000 0000                  		dc.w SME_wvX4F_7E0-SME_wvX4F, SME_wvX4F_7F0-SME_wvX4F	
00025D0C 0000 0000                  		dc.w SME_wvX4F_800-SME_wvX4F, SME_wvX4F_810-SME_wvX4F	
00025D10 0000 0000                  		dc.w SME_wvX4F_82A-SME_wvX4F, SME_wvX4F_83A-SME_wvX4F	
00025D14 0000 0000                  		dc.w SME_wvX4F_84A-SME_wvX4F, SME_wvX4F_864-SME_wvX4F	
00025D18 0000 0000                  		dc.w SME_wvX4F_87E-SME_wvX4F, SME_wvX4F_893-SME_wvX4F	
00025D1C 0000 0000                  		dc.w SME_wvX4F_8A8-SME_wvX4F, SME_wvX4F_8BD-SME_wvX4F	
00025D20 0000 0000                  		dc.w SME_wvX4F_8D2-SME_wvX4F, SME_wvX4F_8D8-SME_wvX4F	
00025D24 0000 0000                  		dc.w SME_wvX4F_8DE-SME_wvX4F, SME_wvX4F_8E4-SME_wvX4F	
00025D28 0000 0000                  		dc.w SME_wvX4F_8EA-SME_wvX4F, SME_wvX4F_8F0-SME_wvX4F	
00025D2C 0000 0000                  		dc.w SME_wvX4F_8F6-SME_wvX4F, SME_wvX4F_8FC-SME_wvX4F	
00025D30 0000 0000                  		dc.w SME_wvX4F_90C-SME_wvX4F, SME_wvX4F_912-SME_wvX4F	
00025D34 0000 0000                  		dc.w SME_wvX4F_91D-SME_wvX4F, SME_wvX4F_923-SME_wvX4F	
00025D38 0000 0000                  		dc.w SME_wvX4F_92E-SME_wvX4F, SME_wvX4F_934-SME_wvX4F	
00025D3C 0000 0000                  		dc.w SME_wvX4F_949-SME_wvX4F, SME_wvX4F_96D-SME_wvX4F	
00025D40 0000 0000                  		dc.w SME_wvX4F_987-SME_wvX4F, SME_wvX4F_997-SME_wvX4F	
00025D44 0000 0000                  		dc.w SME_wvX4F_9B1-SME_wvX4F, SME_wvX4F_9C6-SME_wvX4F	
00025D48 0000 0000                  		dc.w SME_wvX4F_9DB-SME_wvX4F, SME_wvX4F_9F0-SME_wvX4F	
00025D4C 0000 0000                  		dc.w SME_wvX4F_A1E-SME_wvX4F, SME_wvX4F_A2E-SME_wvX4F	
00025D50 0000 0000                  		dc.w SME_wvX4F_A3E-SME_wvX4F, SME_wvX4F_A4E-SME_wvX4F	
00025D54 0000 0000                  		dc.w SME_wvX4F_A4F-SME_wvX4F, SME_wvX4F_A78-SME_wvX4F	
00025D58 0000 0000                  		dc.w SME_wvX4F_A9C-SME_wvX4F, SME_wvX4F_AB1-SME_wvX4F	
00025D5C 0000 0000                  		dc.w SME_wvX4F_AC1-SME_wvX4F, SME_wvX4F_AD1-SME_wvX4F	
00025D60 0000 0000                  		dc.w SME_wvX4F_AE1-SME_wvX4F, SME_wvX4F_AEC-SME_wvX4F	
00025D64 0000 0000                  		dc.w SME_wvX4F_AFC-SME_wvX4F, SME_wvX4F_B0C-SME_wvX4F	
00025D68 0000 0000                  		dc.w SME_wvX4F_B1C-SME_wvX4F, SME_wvX4F_B2C-SME_wvX4F	
00025D6C 0000 0000                  		dc.w SME_wvX4F_B41-SME_wvX4F, SME_wvX4F_B6A-SME_wvX4F	
00025D70 0000 0000                  		dc.w SME_wvX4F_B7F-SME_wvX4F, SME_wvX4F_B94-SME_wvX4F	
00025D74 0000 0000                  		dc.w SME_wvX4F_BAE-SME_wvX4F, SME_wvX4F_BC8-SME_wvX4F	
00025D78 0000 0000                  		dc.w SME_wvX4F_BD3-SME_wvX4F, SME_wvX4F_BED-SME_wvX4F	
00025D7C 0000 0000                  		dc.w SME_wvX4F_BFD-SME_wvX4F, SME_wvX4F_C17-SME_wvX4F	
00025D80 0000 0000                  		dc.w SME_wvX4F_C22-SME_wvX4F, SME_wvX4F_C32-SME_wvX4F	
00025D84 0000 0000                  		dc.w SME_wvX4F_C42-SME_wvX4F, SME_wvX4F_C52-SME_wvX4F	
00025D88 0000 0000                  		dc.w SME_wvX4F_C5D-SME_wvX4F, SME_wvX4F_C6D-SME_wvX4F	
00025D8C 0000 0000                  		dc.w SME_wvX4F_CA5-SME_wvX4F, SME_wvX4F_CC4-SME_wvX4F	
00025D90 0000 0000                  		dc.w SME_wvX4F_CD4-SME_wvX4F, SME_wvX4F_CF8-SME_wvX4F	
00025D94 0000 0000                  		dc.w SME_wvX4F_D03-SME_wvX4F, SME_wvX4F_D18-SME_wvX4F	
00025D98 0000 0000                  		dc.w SME_wvX4F_D28-SME_wvX4F, SME_wvX4F_D38-SME_wvX4F	
00025D9C 0000 0000                  		dc.w SME_wvX4F_D4D-SME_wvX4F, SME_wvX4F_D53-SME_wvX4F	
00025DA0 0000 0000                  		dc.w SME_wvX4F_D59-SME_wvX4F, SME_wvX4F_D5F-SME_wvX4F	
00025DA4 0000 0000                  		dc.w SME_wvX4F_D65-SME_wvX4F, SME_wvX4F_D70-SME_wvX4F	
00025DA8 0000 0000                  		dc.w SME_wvX4F_D76-SME_wvX4F, SME_wvX4F_D7C-SME_wvX4F	
00025DAC 0000 0000                  		dc.w SME_wvX4F_D82-SME_wvX4F, SME_wvX4F_D92-SME_wvX4F	
00025DB0 0000 0000                  		dc.w SME_wvX4F_DA2-SME_wvX4F, SME_wvX4F_DB2-SME_wvX4F	
00025DB4 0000 0000                  		dc.w SME_wvX4F_DC2-SME_wvX4F, SME_wvX4F_DD2-SME_wvX4F	
00025DB8 0000 0000                  		dc.w SME_wvX4F_DFB-SME_wvX4F, SME_wvX4F_E0B-SME_wvX4F	
00025DBC 0000 0000                  		dc.w SME_wvX4F_E1B-SME_wvX4F, SME_wvX4F_E3F-SME_wvX4F	
00025DC0 0000 0000                  		dc.w SME_wvX4F_E4F-SME_wvX4F, SME_wvX4F_E55-SME_wvX4F	
00025DC4 0000 0000                  		dc.w SME_wvX4F_E5B-SME_wvX4F, SME_wvX4F_E7F-SME_wvX4F	
00025DC8 0000 0000                  		dc.w SME_wvX4F_E8F-SME_wvX4F, SME_wvX4F_E95-SME_wvX4F	
00025DCC 0000 0000                  		dc.w SME_wvX4F_EA0-SME_wvX4F, SME_wvX4F_EAB-SME_wvX4F	
00025DD0 0000 0000                  		dc.w SME_wvX4F_EC5-SME_wvX4F, SME_wvX4F_EE4-SME_wvX4F	
00025DD4 0000 0000                  		dc.w SME_wvX4F_EF9-SME_wvX4F, SME_wvX4F_F09-SME_wvX4F	
00025DD8 0000 0000                  		dc.w SME_wvX4F_F23-SME_wvX4F, SME_wvX4F_F38-SME_wvX4F	
00025DDC 0000 0000                  		dc.w SME_wvX4F_F48-SME_wvX4F, SME_wvX4F_F62-SME_wvX4F	
00025DE0 0000 0000                  		dc.w SME_wvX4F_F72-SME_wvX4F, SME_wvX4F_F78-SME_wvX4F	
00025DE4 0000 0000                  		dc.w SME_wvX4F_F7E-SME_wvX4F, SME_wvX4F_F8E-SME_wvX4F	
00025DE8 0000 0000                  		dc.w SME_wvX4F_F9E-SME_wvX4F, SME_wvX4F_FA4-SME_wvX4F	
00025DEC 0000 0000                  		dc.w SME_wvX4F_FB4-SME_wvX4F, SME_wvX4F_FBF-SME_wvX4F	
00025DF0 0000 0000                  		dc.w SME_wvX4F_FDE-SME_wvX4F, SME_wvX4F_FFD-SME_wvX4F	
00025DF4 0000 0000                  		dc.w SME_wvX4F_1012-SME_wvX4F, SME_wvX4F_1022-SME_wvX4F	
00025DF8 0000 0000                  		dc.w SME_wvX4F_103C-SME_wvX4F, SME_wvX4F_1051-SME_wvX4F	
00025DFC 0000 0000                  		dc.w SME_wvX4F_1061-SME_wvX4F, SME_wvX4F_107B-SME_wvX4F	
00025E00 0000 0000                  		dc.w SME_wvX4F_108B-SME_wvX4F, SME_wvX4F_10A5-SME_wvX4F	
00025E04 0000 0000                  		dc.w SME_wvX4F_10BA-SME_wvX4F, SME_wvX4F_10CF-SME_wvX4F	
00025E08 0000 0000                  		dc.w SME_wvX4F_10DA-SME_wvX4F, SME_wvX4F_10E5-SME_wvX4F	
00025E0C 0000 0000                  		dc.w SME_wvX4F_10F0-SME_wvX4F, SME_wvX4F_10FB-SME_wvX4F	
00025E10 0000 0000                  		dc.w SME_wvX4F_1106-SME_wvX4F, SME_wvX4F_1116-SME_wvX4F	
00025E14 0000 0000                  		dc.w SME_wvX4F_1126-SME_wvX4F, SME_wvX4F_114A-SME_wvX4F	
00025E18 0000 0000                  		dc.w SME_wvX4F_1155-SME_wvX4F, SME_wvX4F_1160-SME_wvX4F	
00025E1C 0000 0000                  		dc.w SME_wvX4F_116B-SME_wvX4F, SME_wvX4F_1176-SME_wvX4F	
00025E20 0000 0000                  		dc.w SME_wvX4F_1186-SME_wvX4F, SME_wvX4F_119B-SME_wvX4F	
00025E24 0000 0000                  		dc.w SME_wvX4F_119C-SME_wvX4F, SME_wvX4F_119D-SME_wvX4F	
00025E28 0000 0000                  		dc.w SME_wvX4F_11AD-SME_wvX4F, SME_wvX4F_11BD-SME_wvX4F	
00025E2C 0000 0000                  		dc.w SME_wvX4F_11BE-SME_wvX4F, SME_wvX4F_11BF-SME_wvX4F	
00025E30 0000 0000                  		dc.w SME_wvX4F_11CA-SME_wvX4F, SME_wvX4F_11D0-SME_wvX4F	
00025E34 0000 0000                  		dc.w SME_wvX4F_11DB-SME_wvX4F, SME_wvX4F_11E6-SME_wvX4F	
00025E38 0000 0000                  		dc.w SME_wvX4F_11F1-SME_wvX4F, SME_wvX4F_11FC-SME_wvX4F	
00025E3C 0000 0000                  		dc.w SME_wvX4F_1216-SME_wvX4F, SME_wvX4F_1230-SME_wvX4F	
00025E40 0000 0000                  		dc.w SME_wvX4F_123B-SME_wvX4F, SME_wvX4F_1246-SME_wvX4F	
00025E44 0000 0000                  		dc.w SME_wvX4F_1251-SME_wvX4F, SME_wvX4F_125C-SME_wvX4F	
00025E48 0000 0000                  		dc.w SME_wvX4F_1267-SME_wvX4F, SME_wvX4F_1272-SME_wvX4F	
00025E4C 0000 0000                  		dc.w SME_wvX4F_127D-SME_wvX4F, SME_wvX4F_1288-SME_wvX4F	
00025E50 0000                       		dc.w SME_wvX4F_1293-SME_wvX4F	
00025E52 00                         SME_wvX4F_1EE:	dc.b 0	
00025E53 04                         SME_wvX4F_1EF:	dc.b 4	
00025E54 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00025E59 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
00025E5E 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
00025E63 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00025E68 09                         SME_wvX4F_204:	dc.b 9	
00025E69 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00025E6E 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
00025E73 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00025E78 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00025E7D FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
00025E82 F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00025E87 FC00 000D F8               		dc.b $FC, 0, 0, $D, $F8	
00025E8C FC00 000E 08               		dc.b $FC, 0, 0, $E, 8	
00025E91 F404 000F F8               		dc.b $F4, 4, 0, $F, $F8	
00025E96 0A                         SME_wvX4F_232:	dc.b $A	
00025E97 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00025E9C 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
00025EA1 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00025EA6 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00025EAB FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
00025EB0 F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00025EB5 FC00 000D 08               		dc.b $FC, 0, 0, $D, 8	
00025EBA F400 000E F8               		dc.b $F4, 0, 0, $E, $F8	
00025EBF F400 000F 00               		dc.b $F4, 0, 0, $F, 0	
00025EC4 FC00 0010 F8               		dc.b $FC, 0, 0, $10, $F8	
00025EC9 04                         SME_wvX4F_265:	dc.b 4	
00025ECA EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00025ECF F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00025ED4 FC00 100D 08               		dc.b $FC, 0, $10, $D, 8	
00025ED9 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00025EDE 03                         SME_wvX4F_27A:	dc.b 3	
00025EDF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025EE4 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025EE9 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00025EEE 03                         SME_wvX4F_28A:	dc.b 3	
00025EEF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025EF4 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025EF9 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00025EFE 04                         SME_wvX4F_29A:	dc.b 4	
00025EFF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025F04 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025F09 0C04 000C 00               		dc.b $C, 4, 0, $C, 0	
00025F0E 0C00 000E F8               		dc.b $C, 0, 0, $E, $F8	
00025F13 02                         SME_wvX4F_2AF:	dc.b 2	
00025F14 F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025F19 0401 000C 08               		dc.b 4, 1, 0, $C, 8	
00025F1E 03                         SME_wvX4F_2BA:	dc.b 3	
00025F1F FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025F24 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025F29 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
00025F2E 03                         SME_wvX4F_2CA:	dc.b 3	
00025F2F FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025F34 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025F39 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
00025F3E 03                         SME_wvX4F_2DA:	dc.b 3	
00025F3F F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025F44 EC08 000C F0               		dc.b $EC, 8, 0, $C, $F0	
00025F49 FC02 000F 08               		dc.b $FC, 2, 0, $F, 8	
00025F4E 04                         SME_wvX4F_2EA:	dc.b 4	
00025F4F 0408 0000 F0               		dc.b 4, 8, 0, 0, $F0	
00025F54 0C08 0003 F8               		dc.b $C, 8, 0, 3, $F8	
00025F59 EC0A 0006 F0               		dc.b $EC, $A, 0, 6, $F0	
00025F5E F400 000F 08               		dc.b $F4, 0, 0, $F, 8	
00025F63 03                         SME_wvX4F_2FF:	dc.b 3	
00025F64 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
00025F69 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
00025F6E 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00025F73 07                         SME_wvX4F_30F:	dc.b 7	
00025F74 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00025F79 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
00025F7E 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
00025F83 F300 000E F5               		dc.b $F3, 0, 0, $E, $F5	
00025F88 EB05 000F FD               		dc.b $EB, 5, 0, $F, $FD	
00025F8D EB00 0013 F5               		dc.b $EB, 0, 0, $13, $F5	
00025F92 F300 0014 ED               		dc.b $F3, 0, 0, $14, $ED	
00025F97 05                         SME_wvX4F_333:	dc.b 5	
00025F98 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
00025F9D F400 000C F5               		dc.b $F4, 0, 0, $C, $F5	
00025FA2 EC05 000D FD               		dc.b $EC, 5, 0, $D, $FD	
00025FA7 EC00 0011 F5               		dc.b $EC, 0, 0, $11, $F5	
00025FAC F400 0012 ED               		dc.b $F4, 0, 0, $12, $ED	
00025FB1 02                         SME_wvX4F_34D:	dc.b 2	
00025FB2 FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
00025FB7 ED09 0009 F5               		dc.b $ED, 9, 0, 9, $F5	
00025FBC 03                         SME_wvX4F_358:	dc.b 3	
00025FBD F30F 0000 F0               		dc.b $F3, $F, 0, 0, $F0	
00025FC2 EB0C 0010 F0               		dc.b $EB, $C, 0, $10, $F0	
00025FC7 0500 0014 10               		dc.b 5, 0, 0, $14, $10	
00025FCC 04                         SME_wvX4F_368:	dc.b 4	
00025FCD EB09 0000 F5               		dc.b $EB, 9, 0, 0, $F5	
00025FD2 FB09 0006 ED               		dc.b $FB, 9, 0, 6, $ED	
00025FD7 FB06 000C 05               		dc.b $FB, 6, 0, $C, 5	
00025FDC 0B04 0012 ED               		dc.b $B, 4, 0, $12, $ED	
00025FE1 02                         SME_wvX4F_37D:	dc.b 2	
00025FE2 EC09 0000 F6               		dc.b $EC, 9, 0, 0, $F6	
00025FE7 FC0E 0006 EE               		dc.b $FC, $E, 0, 6, $EE	
00025FEC 03                         SME_wvX4F_388:	dc.b 3	
00025FED ED09 0000 F6               		dc.b $ED, 9, 0, 0, $F6	
00025FF2 FD06 0006 F6               		dc.b $FD, 6, 0, 6, $F6	
00025FF7 FD00 000C 06               		dc.b $FD, 0, 0, $C, 6	
00025FFC 05                         SME_wvX4F_398:	dc.b 5	
00025FFD FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
00026002 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
00026007 F500 000A EE               		dc.b $F5, 0, 0, $A, $EE	
0002600C ED01 000B F6               		dc.b $ED, 1, 0, $B, $F6	
00026011 ED05 000D FE               		dc.b $ED, 5, 0, $D, $FE	
00026016 05                         SME_wvX4F_3B2:	dc.b 5	
00026017 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
0002601C EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
00026021 FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
00026026 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
0002602B 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
00026030 06                         SME_wvX4F_3CC:	dc.b 6	
00026031 ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00026036 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
0002603B FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
00026040 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
00026045 FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
0002604A F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
0002604F 04                         SME_wvX4F_3EB:	dc.b 4	
00026050 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00026055 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002605A FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
0002605F 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
00026064 03                         SME_wvX4F_400:	dc.b 3	
00026065 ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
0002606A ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
0002606F 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
00026074 05                         SME_wvX4F_410:	dc.b 5	
00026075 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
0002607A EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
0002607F FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
00026084 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
00026089 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
0002608E 04                         SME_wvX4F_42A:	dc.b 4	
0002608F EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
00026094 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
00026099 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
0002609E 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
000260A3 03                         SME_wvX4F_43F:	dc.b 3	
000260A4 ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
000260A9 ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
000260AE 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
000260B3 05                         SME_wvX4F_44F:	dc.b 5	
000260B4 ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
000260B9 ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
000260BE FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
000260C3 FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
000260C8 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
000260CD 04                         SME_wvX4F_469:	dc.b 4	
000260CE F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
000260D3 EB09 0008 FD               		dc.b $EB, 9, 0, 8, $FD	
000260D8 FB04 000E FD               		dc.b $FB, 4, 0, $E, $FD	
000260DD 0309 0010 FD               		dc.b 3, 9, 0, $10, $FD	
000260E2 02                         SME_wvX4F_47E:	dc.b 2	
000260E3 F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
000260E8 EC0B 0008 FD               		dc.b $EC, $B, 0, 8, $FD	
000260ED 02                         SME_wvX4F_489:	dc.b 2	
000260EE F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
000260F3 F406 0009 ED               		dc.b $F4, 6, 0, 9, $ED	
000260F8 05                         SME_wvX4F_494:	dc.b 5	
000260F9 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
000260FE F10C 0001 F4               		dc.b $F1, $C, 0, 1, $F4	
00026103 F100 0005 EC               		dc.b $F1, 0, 0, 5, $EC	
00026108 F90E 0006 EC               		dc.b $F9, $E, 0, 6, $EC	
0002610D F902 0012 0C               		dc.b $F9, 2, 0, $12, $C	
00026112 04                         SME_wvX4F_4AE:	dc.b 4	
00026113 F306 0000 EC               		dc.b $F3, 6, 0, 0, $EC	
00026118 EB09 0006 FC               		dc.b $EB, 9, 0, 6, $FC	
0002611D FB04 000C FC               		dc.b $FB, 4, 0, $C, $FC	
00026122 0309 000E FC               		dc.b 3, 9, 0, $E, $FC	
00026127 02                         SME_wvX4F_4C3:	dc.b 2	
00026128 F306 0000 ED               		dc.b $F3, 6, 0, 0, $ED	
0002612D F30B 0006 FD               		dc.b $F3, $B, 0, 6, $FD	
00026132 03                         SME_wvX4F_4CE:	dc.b 3	
00026133 F408 0000 ED               		dc.b $F4, 8, 0, 0, $ED	
00026138 FC0D 0003 ED               		dc.b $FC, $D, 0, 3, $ED	
0002613D FC01 000B 0D               		dc.b $FC, 1, 0, $B, $D	
00026142 03                         SME_wvX4F_4DE:	dc.b 3	
00026143 F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
00026148 EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
0002614D F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
00026152 06                         SME_wvX4F_4EE:	dc.b 6	
00026153 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00026158 EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
0002615D F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
00026162 F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00026167 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
0002616C FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
00026171 06                         SME_wvX4F_50D:	dc.b 6	
00026172 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00026177 E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
0002617C EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
00026181 F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
00026186 F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
0002618B 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
00026190 04                         SME_wvX4F_52C:	dc.b 4	
00026191 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00026196 F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
0002619B EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
000261A0 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
000261A5 03                         SME_wvX4F_541:	dc.b 3	
000261A6 E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
000261AB F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
000261B0 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
000261B5 05                         SME_wvX4F_551:	dc.b 5	
000261B6 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
000261BB EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
000261C0 F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
000261C5 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
000261CA 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
000261CF 04                         SME_wvX4F_56B:	dc.b 4	
000261D0 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
000261D5 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
000261DA EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
000261DF 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
000261E4 03                         SME_wvX4F_580:	dc.b 3	
000261E5 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
000261EA 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
000261EF EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
000261F4 05                         SME_wvX4F_590:	dc.b 5	
000261F5 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
000261FA EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
000261FF F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
00026204 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00026209 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
0002620E 02                         SME_wvX4F_5AA:	dc.b 2	
0002620F EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026214 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00026219 02                         SME_wvX4F_5B5:	dc.b 2	
0002621A FE0E 0000 EC               		dc.b $FE, $E, 0, 0, $EC	
0002621F EE09 000C F4               		dc.b $EE, 9, 0, $C, $F4	
00026224 02                         SME_wvX4F_5C0:	dc.b 2	
00026225 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002622A FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002622F 02                         SME_wvX4F_5CB:	dc.b 2	
00026230 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026235 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002623A 02                         SME_wvX4F_5D6:	dc.b 2	
0002623B EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026240 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00026245 02                         SME_wvX4F_5E1:	dc.b 2	
00026246 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002624B FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00026250 02                         SME_wvX4F_5EC:	dc.b 2	
00026251 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026256 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002625B 02                         SME_wvX4F_5F7:	dc.b 2	
0002625C EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026261 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00026266 04                         SME_wvX4F_602:	dc.b 4	
00026267 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002626C EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00026271 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00026276 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
0002627B 03                         SME_wvX4F_617:	dc.b 3	
0002627C F60F 0000 F6               		dc.b $F6, $F, 0, 0, $F6	
00026281 EE02 0010 EE               		dc.b $EE, 2, 0, $10, $EE	
00026286 EE08 0013 F6               		dc.b $EE, 8, 0, $13, $F6	
0002628B 03                         SME_wvX4F_627:	dc.b 3	
0002628C EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00026291 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00026296 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
0002629B 03                         SME_wvX4F_637:	dc.b 3	
0002629C FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000262A1 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000262A6 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000262AB 04                         SME_wvX4F_647:	dc.b 4	
000262AC EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000262B1 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000262B6 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000262BB FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000262C0 03                         SME_wvX4F_65C:	dc.b 3	
000262C1 FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000262C6 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000262CB FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000262D0 03                         SME_wvX4F_66C:	dc.b 3	
000262D1 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000262D6 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000262DB FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000262E0 03                         SME_wvX4F_67C:	dc.b 3	
000262E1 EE0D 0000 EE               		dc.b $EE, $D, 0, 0, $EE	
000262E6 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000262EB FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000262F0 02                         SME_wvX4F_68C:	dc.b 2	
000262F1 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000262F6 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000262FB 02                         SME_wvX4F_697:	dc.b 2	
000262FC F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026301 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026306 02                         SME_wvX4F_6A2:	dc.b 2	
00026307 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002630C F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026311 02                         SME_wvX4F_6AD:	dc.b 2	
00026312 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026317 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002631C 02                         SME_wvX4F_6B8:	dc.b 2	
0002631D F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026322 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026327 02                         SME_wvX4F_6C3:	dc.b 2	
00026328 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002632D F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026332 02                         SME_wvX4F_6CE:	dc.b 2	
00026333 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026338 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002633D 02                         SME_wvX4F_6D9:	dc.b 2	
0002633E F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026343 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026348 04                         SME_wvX4F_6E4:	dc.b 4	
00026349 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002634E F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
00026353 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00026358 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
0002635D 03                         SME_wvX4F_6F9:	dc.b 3	
0002635E EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
00026363 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00026368 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
0002636D 02                         SME_wvX4F_709:	dc.b 2	
0002636E F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
00026373 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00026378 03                         SME_wvX4F_714:	dc.b 3	
00026379 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002637E 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00026383 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00026388 04                         SME_wvX4F_724:	dc.b 4	
00026389 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002638E F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
00026393 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00026398 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
0002639D 03                         SME_wvX4F_739:	dc.b 3	
0002639E EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000263A3 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000263A8 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000263AD 02                         SME_wvX4F_749:	dc.b 2	
000263AE F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
000263B3 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000263B8 03                         SME_wvX4F_754:	dc.b 3	
000263B9 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000263BE 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000263C3 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000263C8 03                         SME_wvX4F_764:	dc.b 3	
000263C9 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000263CE 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000263D3 F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000263D8 03                         SME_wvX4F_774:	dc.b 3	
000263D9 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000263DE 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000263E3 F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000263E8 09                         SME_wvX4F_784:	dc.b 9	
000263E9 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
000263EE F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
000263F3 1000 0009 F3               		dc.b $10, 0, 0, 9, $F3	
000263F8 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
000263FD 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
00026402 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00026407 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
0002640C F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
00026411 F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00026416 09                         SME_wvX4F_7B2:	dc.b 9	
00026417 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
0002641C F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
00026421 1000 0009 F0               		dc.b $10, 0, 0, 9, $F0	
00026426 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
0002642B 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
00026430 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00026435 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
0002643A F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002643F F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00026444 03                         SME_wvX4F_7E0:	dc.b 3	
00026445 F20F 0000 F5               		dc.b $F2, $F, 0, 0, $F5	
0002644A 0201 0010 ED               		dc.b 2, 1, 0, $10, $ED	
0002644F EA0C 0012 F5               		dc.b $EA, $C, 0, $12, $F5	
00026454 03                         SME_wvX4F_7F0:	dc.b 3	
00026455 F40B 0000 EF               		dc.b $F4, $B, 0, 0, $EF	
0002645A EC07 000C 07               		dc.b $EC, 7, 0, $C, 7	
0002645F EC04 0014 F7               		dc.b $EC, 4, 0, $14, $F7	
00026464 03                         SME_wvX4F_800:	dc.b 3	
00026465 F30F 0000 F4               		dc.b $F3, $F, 0, 0, $F4	
0002646A EB0C 0010 F4               		dc.b $EB, $C, 0, $10, $F4	
0002646F 0300 0014 EC               		dc.b 3, 0, 0, $14, $EC	
00026474 05                         SME_wvX4F_810:	dc.b 5	
00026475 F10E 0000 F7               		dc.b $F1, $E, 0, 0, $F7	
0002647A 090C 000C EF               		dc.b 9, $C, 0, $C, $EF	
0002647F F901 0010 EF               		dc.b $F9, 1, 0, $10, $EF	
00026484 1104 0012 F7               		dc.b $11, 4, 0, $12, $F7	
00026489 E908 0014 F7               		dc.b $E9, 8, 0, $14, $F7	
0002648E 03                         SME_wvX4F_82A:	dc.b 3	
0002648F ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
00026494 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
00026499 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
0002649E 03                         SME_wvX4F_83A:	dc.b 3	
0002649F ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
000264A4 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
000264A9 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
000264AE 05                         SME_wvX4F_84A:	dc.b 5	
000264AF 0509 0000 F6               		dc.b 5, 9, 0, 0, $F6	
000264B4 ED02 0006 0E               		dc.b $ED, 2, 0, 6, $E	
000264B9 0500 0009 0E               		dc.b 5, 0, 0, 9, $E	
000264BE ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000264C3 ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000264C8 05                         SME_wvX4F_864:	dc.b 5	
000264C9 ED02 0000 0E               		dc.b $ED, 2, 0, 0, $E	
000264CE 0509 0003 F6               		dc.b 5, 9, 0, 3, $F6	
000264D3 0800 0009 0E               		dc.b 8, 0, 0, 9, $E	
000264D8 ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000264DD ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000264E2 04                         SME_wvX4F_87E:	dc.b 4	
000264E3 F00E 0000 E9               		dc.b $F0, $E, 0, 0, $E9	
000264E8 0808 000C F9               		dc.b 8, 8, 0, $C, $F9	
000264ED E808 000F F1               		dc.b $E8, 8, 0, $F, $F1	
000264F2 F002 0012 09               		dc.b $F0, 2, 0, $12, 9	
000264F7 04                         SME_wvX4F_893:	dc.b 4	
000264F8 E60B 0000 F3               		dc.b $E6, $B, 0, 0, $F3	
000264FD 0608 000C F3               		dc.b 6, 8, 0, $C, $F3	
00026502 F602 000F 0B               		dc.b $F6, 2, 0, $F, $B	
00026507 EE02 0012 EB               		dc.b $EE, 2, 0, $12, $EB	
0002650C 04                         SME_wvX4F_8A8:	dc.b 4	
0002650D EA0F 0000 EA               		dc.b $EA, $F, 0, 0, $EA	
00026512 F202 0010 0A               		dc.b $F2, 2, 0, $10, $A	
00026517 0A00 0013 02               		dc.b $A, 0, 0, $13, 2	
0002651C 0A00 0014 0A               		dc.b $A, 0, 0, $14, $A	
00026521 04                         SME_wvX4F_8BD:	dc.b 4	
00026522 E80F 0000 ED               		dc.b $E8, $F, 0, 0, $ED	
00026527 0808 0010 F5               		dc.b 8, 8, 0, $10, $F5	
0002652C F801 0013 0D               		dc.b $F8, 1, 0, $13, $D	
00026531 F001 0015 E5               		dc.b $F0, 1, 0, $15, $E5	
00026536 01                         SME_wvX4F_8D2:	dc.b 1	
00026537 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002653C 01                         SME_wvX4F_8D8:	dc.b 1	
0002653D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026542 01                         SME_wvX4F_8DE:	dc.b 1	
00026543 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026548 01                         SME_wvX4F_8E4:	dc.b 1	
00026549 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002654E 01                         SME_wvX4F_8EA:	dc.b 1	
0002654F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026554 01                         SME_wvX4F_8F0:	dc.b 1	
00026555 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002655A 01                         SME_wvX4F_8F6:	dc.b 1	
0002655B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026560 03                         SME_wvX4F_8FC:	dc.b 3	
00026561 F00A 0000 F0               		dc.b $F0, $A, 0, 0, $F0	
00026566 080C 0009 F0               		dc.b 8, $C, 0, 9, $F0	
0002656B F002 000D 08               		dc.b $F0, 2, 0, $D, 8	
00026570 01                         SME_wvX4F_90C:	dc.b 1	
00026571 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026576 02                         SME_wvX4F_912:	dc.b 2	
00026577 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC	
0002657C F402 000C 0C               		dc.b $F4, 2, 0, $C, $C	
00026581 01                         SME_wvX4F_91D:	dc.b 1	
00026582 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026587 02                         SME_wvX4F_923:	dc.b 2	
00026588 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
0002658D 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
00026592 01                         SME_wvX4F_92E:	dc.b 1	
00026593 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026598 04                         SME_wvX4F_934:	dc.b 4	
00026599 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
0002659E FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
000265A3 F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000265A8 F500 0014 08               		dc.b $F5, 0, 0, $14, 8	
000265AD 07                         SME_wvX4F_949:	dc.b 7	
000265AE ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
000265B3 FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
000265B8 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
000265BD F500 0010 E8               		dc.b $F5, 0, 0, $10, $E8	
000265C2 F500 0011 08               		dc.b $F5, 0, 0, $11, 8	
000265C7 0D00 0012 F8               		dc.b $D, 0, 0, $12, $F8	
000265CC FD00 0013 E8               		dc.b $FD, 0, 0, $13, $E8	
000265D1 05                         SME_wvX4F_96D:	dc.b 5	
000265D2 F502 0000 F0               		dc.b $F5, 2, 0, 0, $F0	
000265D7 F50B 0003 F8               		dc.b $F5, $B, 0, 3, $F8	
000265DC ED08 000F F0               		dc.b $ED, 8, 0, $F, $F0	
000265E1 F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000265E6 ED00 0014 08               		dc.b $ED, 0, 0, $14, 8	
000265EB 03                         SME_wvX4F_987:	dc.b 3	
000265EC F50B 0000 F8               		dc.b $F5, $B, 0, 0, $F8	
000265F1 ED03 000C F0               		dc.b $ED, 3, 0, $C, $F0	
000265F6 ED04 0010 F8               		dc.b $ED, 4, 0, $10, $F8	
000265FB 05                         SME_wvX4F_997:	dc.b 5	
000265FC F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4	
00026601 E80C 000C F4               		dc.b $E8, $C, 0, $C, $F4	
00026606 1004 0010 F4               		dc.b $10, 4, 0, $10, $F4	
0002660B 0000 0012 EC               		dc.b 0, 0, 0, $12, $EC	
00026610 F000 0013 0C               		dc.b $F0, 0, 0, $13, $C	
00026615 04                         SME_wvX4F_9B1:	dc.b 4	
00026616 F402 0000 F8               		dc.b $F4, 2, 0, 0, $F8	
0002661B F402 0003 00               		dc.b $F4, 2, 0, 3, 0	
00026620 F402 0006 08               		dc.b $F4, 2, 0, 6, 8	
00026625 0C08 0009 F8               		dc.b $C, 8, 0, 9, $F8	
0002662A 04                         SME_wvX4F_9C6:	dc.b 4	
0002662B F404 0000 03               		dc.b $F4, 4, 0, 0, 3	
00026630 FC0D 0002 F8               		dc.b $FC, $D, 0, 2, $F8	
00026635 0C08 000A F8               		dc.b $C, 8, 0, $A, $F8	
0002663A 0C00 000D 10               		dc.b $C, 0, 0, $D, $10	
0002663F 04                         SME_wvX4F_9DB:	dc.b 4	
00026640 EC08 0800 E8               		dc.b $EC, 8, 8, 0, $E8	
00026645 F402 0803 00               		dc.b $F4, 2, 8, 3, 0	
0002664A F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0	
0002664F EC00 0016 00               		dc.b $EC, 0, 0, $16, 0	
00026654 09                         SME_wvX4F_9F0:	dc.b 9	
00026655 F402 0000 00               		dc.b $F4, 2, 0, 0, 0	
0002665A EC0C 0003 E8               		dc.b $EC, $C, 0, 3, $E8	
0002665F F407 0007 E0               		dc.b $F4, 7, 0, 7, $E0	
00026664 0C00 080F F8               		dc.b $C, 0, 8, $F, $F8	
00026669 F400 0010 F0               		dc.b $F4, 0, 0, $10, $F0	
0002666E F402 0011 F8               		dc.b $F4, 2, 0, $11, $F8	
00026673 0400 0014 F0               		dc.b 4, 0, 0, $14, $F0	
00026678 0C00 0015 F0               		dc.b $C, 0, 0, $15, $F0	
0002667D FC00 0016 F0               		dc.b $FC, 0, 0, $16, $F0	
00026682 03                         SME_wvX4F_A1E:	dc.b 3	
00026683 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8	
00026688 040D 080C E0               		dc.b 4, $D, 8, $C, $E0	
0002668D 0C00 1814 00               		dc.b $C, 0, $18, $14, 0	
00026692 03                         SME_wvX4F_A2E:	dc.b 3	
00026693 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
00026698 0401 0010 E0               		dc.b 4, 1, 0, $10, $E0	
0002669D EC0C 0012 E8               		dc.b $EC, $C, 0, $12, $E8	
000266A2 03                         SME_wvX4F_A3E:	dc.b 3	
000266A3 F30F 0000 EC               		dc.b $F3, $F, 0, 0, $EC	
000266A8 EB0C 0010 EC               		dc.b $EB, $C, 0, $10, $EC	
000266AD F303 0014 0C               		dc.b $F3, 3, 0, $14, $C	
000266B2 00                         SME_wvX4F_A4E:	dc.b 0	
000266B3 08                         SME_wvX4F_A4F:	dc.b 8	
000266B4 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000266B9 E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
000266BE F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
000266C3 F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
000266C8 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
000266CD 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
000266D2 0801 0013 F8               		dc.b 8, 1, 0, $13, $F8	
000266D7 1000 0015 10               		dc.b $10, 0, 0, $15, $10	
000266DC 07                         SME_wvX4F_A78:	dc.b 7	
000266DD E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000266E2 E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
000266E7 F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
000266EC F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
000266F1 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
000266F6 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
000266FB 0801 0013 10               		dc.b 8, 1, 0, $13, $10	
00026700 04                         SME_wvX4F_A9C:	dc.b 4	
00026701 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
00026706 F00A 0004 F8               		dc.b $F0, $A, 0, 4, $F8	
0002670B E801 000D 10               		dc.b $E8, 1, 0, $D, $10	
00026710 0809 000F F0               		dc.b 8, 9, 0, $F, $F0	
00026715 03                         SME_wvX4F_AB1:	dc.b 3	
00026716 F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
0002671B FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
00026720 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
00026725 03                         SME_wvX4F_AC1:	dc.b 3	
00026726 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
0002672B FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00026730 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00026735 03                         SME_wvX4F_AD1:	dc.b 3	
00026736 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
0002673B 040C 0008 F4               		dc.b 4, $C, 0, 8, $F4	
00026740 FC00 000C F4               		dc.b $FC, 0, 0, $C, $F4	
00026745 02                         SME_wvX4F_AE1:	dc.b 2	
00026746 F40A 0000 F0               		dc.b $F4, $A, 0, 0, $F0	
0002674B F40A 0800 08               		dc.b $F4, $A, 8, 0, 8	
00026750 03                         SME_wvX4F_AEC:	dc.b 3	
00026751 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00026756 040C 0808 FC               		dc.b 4, $C, 8, 8, $FC	
0002675B FC00 080C 14               		dc.b $FC, 0, 8, $C, $14	
00026760 03                         SME_wvX4F_AFC:	dc.b 3	
00026761 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00026766 FC05 0808 14               		dc.b $FC, 5, 8, 8, $14	
0002676B 0408 080C FC               		dc.b 4, 8, 8, $C, $FC	
00026770 03                         SME_wvX4F_B0C:	dc.b 3	
00026771 F40D 0000 F4               		dc.b $F4, $D, 0, 0, $F4	
00026776 FC00 0008 14               		dc.b $FC, 0, 0, 8, $14	
0002677B 040C 0009 FC               		dc.b 4, $C, 0, 9, $FC	
00026780 03                         SME_wvX4F_B1C:	dc.b 3	
00026781 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00026786 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
0002678B 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00026790 04                         SME_wvX4F_B2C:	dc.b 4	
00026791 E90B 0000 F4               		dc.b $E9, $B, 0, 0, $F4	
00026796 1100 000C FC               		dc.b $11, 0, 0, $C, $FC	
0002679B 0900 000D FC               		dc.b 9, 0, 0, $D, $FC	
000267A0 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
000267A5 08                         SME_wvX4F_B41:	dc.b 8	
000267A6 E909 0000 F4               		dc.b $E9, 9, 0, 0, $F4	
000267AB F901 0006 04               		dc.b $F9, 1, 0, 6, 4	
000267B0 0900 0008 FC               		dc.b 9, 0, 0, 8, $FC	
000267B5 1100 0009 FC               		dc.b $11, 0, 0, 9, $FC	
000267BA F901 000A FC               		dc.b $F9, 1, 0, $A, $FC	
000267BF F900 000C F4               		dc.b $F9, 0, 0, $C, $F4	
000267C4 0100 000D F4               		dc.b 1, 0, 0, $D, $F4	
000267C9 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
000267CE 04                         SME_wvX4F_B6A:	dc.b 4	
000267CF F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
000267D4 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000267D9 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000267DE F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000267E3 04                         SME_wvX4F_B7F:	dc.b 4	
000267E4 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
000267E9 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000267EE F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000267F3 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000267F8 05                         SME_wvX4F_B94:	dc.b 5	
000267F9 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
000267FE F001 0009 0C               		dc.b $F0, 1, 0, 9, $C	
00026803 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00026808 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
0002680D 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
00026812 05                         SME_wvX4F_BAE:	dc.b 5	
00026813 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
00026818 E801 0009 0C               		dc.b $E8, 1, 0, 9, $C	
0002681D 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00026822 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
00026827 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
0002682C 02                         SME_wvX4F_BC8:	dc.b 2	
0002682D ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00026832 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00026837 05                         SME_wvX4F_BD3:	dc.b 5	
00026838 0505 0000 EB               		dc.b 5, 5, 0, 0, $EB	
0002683D ED02 0004 F3               		dc.b $ED, 2, 0, 4, $F3	
00026842 F503 0007 FB               		dc.b $F5, 3, 0, 7, $FB	
00026847 ED03 000B 03               		dc.b $ED, 3, 0, $B, 3	
0002684C ED00 000F FB               		dc.b $ED, 0, 0, $F, $FB	
00026851 03                         SME_wvX4F_BED:	dc.b 3	
00026852 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00026857 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
0002685C 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00026861 05                         SME_wvX4F_BFD:	dc.b 5	
00026862 0D00 0000 EB               		dc.b $D, 0, 0, 0, $EB	
00026867 F503 0001 F3               		dc.b $F5, 3, 0, 1, $F3	
0002686C F503 0005 FB               		dc.b $F5, 3, 0, 5, $FB	
00026871 F503 0009 03               		dc.b $F5, 3, 0, 9, 3	
00026876 ED08 000D F3               		dc.b $ED, 8, 0, $D, $F3	
0002687B 02                         SME_wvX4F_C17:	dc.b 2	
0002687C ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00026881 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00026886 03                         SME_wvX4F_C22:	dc.b 3	
00026887 F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
0002688C 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00026891 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
00026896 03                         SME_wvX4F_C32:	dc.b 3	
00026897 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
0002689C 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
000268A1 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
000268A6 03                         SME_wvX4F_C42:	dc.b 3	
000268A7 F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
000268AC 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
000268B1 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
000268B6 02                         SME_wvX4F_C52:	dc.b 2	
000268B7 EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
000268BC FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0	
000268C1 03                         SME_wvX4F_C5D:	dc.b 3	
000268C2 E80D 2000 EC               		dc.b $E8, $D, $20, 0, $EC	
000268C7 E801 2008 0C               		dc.b $E8, 1, $20, 8, $C	
000268CC F80B 200A F4               		dc.b $F8, $B, $20, $A, $F4	
000268D1 0B                         SME_wvX4F_C6D:	dc.b $B	
000268D2 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
000268D7 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
000268DC 1000 000A F4               		dc.b $10, 0, 0, $A, $F4	
000268E1 0808 000B F4               		dc.b 8, 8, 0, $B, $F4	
000268E6 1000 000E 04               		dc.b $10, 0, 0, $E, 4	
000268EB F800 000F FC               		dc.b $F8, 0, 0, $F, $FC	
000268F0 F800 0010 F4               		dc.b $F8, 0, 0, $10, $F4	
000268F5 F800 0011 04               		dc.b $F8, 0, 0, $11, 4	
000268FA 0000 0012 FC               		dc.b 0, 0, 0, $12, $FC	
000268FF 0000 0013 04               		dc.b 0, 0, 0, $13, 4	
00026904 0000 0014 F4               		dc.b 0, 0, 0, $14, $F4	
00026909 06                         SME_wvX4F_CA5:	dc.b 6	
0002690A E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
0002690F E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00026914 F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
00026919 1000 0010 F4               		dc.b $10, 0, 0, $10, $F4	
0002691E 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
00026923 1000 0014 04               		dc.b $10, 0, 0, $14, 4	
00026928 03                         SME_wvX4F_CC4:	dc.b 3	
00026929 EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
0002692E FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
00026933 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
00026938 07                         SME_wvX4F_CD4:	dc.b 7	
00026939 F801 0000 0C               		dc.b $F8, 1, 0, 0, $C	
0002693E 080C 0002 F4               		dc.b 8, $C, 0, 2, $F4	
00026943 F801 0006 FC               		dc.b $F8, 1, 0, 6, $FC	
00026948 F000 0008 FC               		dc.b $F0, 0, 0, 8, $FC	
0002694D F801 0009 EC               		dc.b $F8, 1, 0, 9, $EC	
00026952 F002 000B F4               		dc.b $F0, 2, 0, $B, $F4	
00026957 F002 000E 04               		dc.b $F0, 2, 0, $E, 4	
0002695C 02                         SME_wvX4F_CF8:	dc.b 2	
0002695D F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00026962 F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
00026967 04                         SME_wvX4F_D03:	dc.b 4	
00026968 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
0002696D F800 000C EC               		dc.b $F8, 0, 0, $C, $EC	
00026972 F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00026977 0000 0011 EC               		dc.b 0, 0, 0, $11, $EC	
0002697C 03                         SME_wvX4F_D18:	dc.b 3	
0002697D F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00026982 F801 000C EC               		dc.b $F8, 1, 0, $C, $EC	
00026987 F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
0002698C 03                         SME_wvX4F_D28:	dc.b 3	
0002698D F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00026992 F008 000C F4               		dc.b $F0, 8, 0, $C, $F4	
00026997 F801 000F EC               		dc.b $F8, 1, 0, $F, $EC	
0002699C 04                         SME_wvX4F_D38:	dc.b 4	
0002699D 0002 0000 F4               		dc.b 0, 2, 0, 0, $F4	
000269A2 F803 0003 FC               		dc.b $F8, 3, 0, 3, $FC	
000269A7 F803 0007 04               		dc.b $F8, 3, 0, 7, 4	
000269AC F802 000B 0C               		dc.b $F8, 2, 0, $B, $C	
000269B1 01                         SME_wvX4F_D4D:	dc.b 1	
000269B2 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000269B7 01                         SME_wvX4F_D53:	dc.b 1	
000269B8 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000269BD 01                         SME_wvX4F_D59:	dc.b 1	
000269BE F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000269C3 01                         SME_wvX4F_D5F:	dc.b 1	
000269C4 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000269C9 02                         SME_wvX4F_D65:	dc.b 2	
000269CA F80B 0000 F4               		dc.b $F8, $B, 0, 0, $F4	
000269CF F802 000C 0C               		dc.b $F8, 2, 0, $C, $C	
000269D4 01                         SME_wvX4F_D70:	dc.b 1	
000269D5 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000269DA 01                         SME_wvX4F_D76:	dc.b 1	
000269DB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000269E0 01                         SME_wvX4F_D7C:	dc.b 1	
000269E1 F00B 0000 F5               		dc.b $F0, $B, 0, 0, $F5	
000269E6 03                         SME_wvX4F_D82:	dc.b 3	
000269E7 E80F 0000 F1               		dc.b $E8, $F, 0, 0, $F1	
000269EC 0805 0010 F1               		dc.b 8, 5, 0, $10, $F1	
000269F1 0801 0014 01               		dc.b 8, 1, 0, $14, 1	
000269F6 03                         SME_wvX4F_D92:	dc.b 3	
000269F7 0809 0000 F1               		dc.b 8, 9, 0, 0, $F1	
000269FC E80B 0006 F1               		dc.b $E8, $B, 0, 6, $F1	
00026A01 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00026A06 03                         SME_wvX4F_DA2:	dc.b 3	
00026A07 E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
00026A0C 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
00026A11 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00026A16 03                         SME_wvX4F_DB2:	dc.b 3	
00026A17 E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
00026A1C 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
00026A21 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00026A26 03                         SME_wvX4F_DC2:	dc.b 3	
00026A27 E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
00026A2C 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
00026A31 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00026A36 08                         SME_wvX4F_DD2:	dc.b 8	
00026A37 0809 0000 F1               		dc.b 8, 9, 0, 0, $F1	
00026A3C 0000 0006 09               		dc.b 0, 0, 0, 6, 9	
00026A41 F002 0007 F9               		dc.b $F0, 2, 0, 7, $F9	
00026A46 F001 000A 01               		dc.b $F0, 1, 0, $A, 1	
00026A4B 0000 000C F1               		dc.b 0, 0, 0, $C, $F1	
00026A50 0000 000D 01               		dc.b 0, 0, 0, $D, 1	
00026A55 E802 000E F1               		dc.b $E8, 2, 0, $E, $F1	
00026A5A E804 0011 F9               		dc.b $E8, 4, 0, $11, $F9	
00026A5F 03                         SME_wvX4F_DFB:	dc.b 3	
00026A60 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
00026A65 EC0F 0003 EF               		dc.b $EC, $F, 0, 3, $EF	
00026A6A E40C 0013 EF               		dc.b $E4, $C, 0, $13, $EF	
00026A6F 03                         SME_wvX4F_E0B:	dc.b 3	
00026A70 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
00026A75 EC0F 0003 EF               		dc.b $EC, $F, 0, 3, $EF	
00026A7A E408 0013 EF               		dc.b $E4, 8, 0, $13, $EF	
00026A7F 07                         SME_wvX4F_E1B:	dc.b 7	
00026A80 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
00026A85 F402 0003 F7               		dc.b $F4, 2, 0, 3, $F7	
00026A8A F402 0006 FF               		dc.b $F4, 2, 0, 6, $FF	
00026A8F EC02 0009 07               		dc.b $EC, 2, 0, 9, 7	
00026A94 0400 000C EF               		dc.b 4, 0, 0, $C, $EF	
00026A99 E403 000D EF               		dc.b $E4, 3, 0, $D, $EF	
00026A9E E405 0011 F7               		dc.b $E4, 5, 0, $11, $F7	
00026AA3 03                         SME_wvX4F_E3F:	dc.b 3	
00026AA4 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00026AA9 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
00026AAE 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
00026AB3 01                         SME_wvX4F_E4F:	dc.b 1	
00026AB4 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
00026AB9 01                         SME_wvX4F_E55:	dc.b 1	
00026ABA FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
00026ABF 07                         SME_wvX4F_E5B:	dc.b 7	
00026AC0 0500 0000 10               		dc.b 5, 0, 0, 0, $10	
00026AC5 0301 0001 F0               		dc.b 3, 1, 0, 1, $F0	
00026ACA 0301 0003 F8               		dc.b 3, 1, 0, 3, $F8	
00026ACF FB02 0005 00               		dc.b $FB, 2, 0, 5, 0	
00026AD4 FB00 0008 F8               		dc.b $FB, 0, 0, 8, $F8	
00026AD9 FB00 0009 F0               		dc.b $FB, 0, 0, 9, $F0	
00026ADE FB02 000A 08               		dc.b $FB, 2, 0, $A, 8	
00026AE3 03                         SME_wvX4F_E7F:	dc.b 3	
00026AE4 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00026AE9 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
00026AEE 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
00026AF3 01                         SME_wvX4F_E8F:	dc.b 1	
00026AF4 FC0E 0000 EE               		dc.b $FC, $E, 0, 0, $EE	
00026AF9 02                         SME_wvX4F_E95:	dc.b 2	
00026AFA FD06 0000 F6               		dc.b $FD, 6, 0, 0, $F6	
00026AFF FD00 0006 06               		dc.b $FD, 0, 0, 6, 6	
00026B04 02                         SME_wvX4F_EA0:	dc.b 2	
00026B05 FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
00026B0A 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
00026B0F 05                         SME_wvX4F_EAB:	dc.b 5	
00026B10 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00026B15 EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
00026B1A FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
00026B1F 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
00026B24 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
00026B29 06                         SME_wvX4F_EC5:	dc.b 6	
00026B2A ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00026B2F ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
00026B34 FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
00026B39 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
00026B3E FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
00026B43 F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
00026B48 04                         SME_wvX4F_EE4:	dc.b 4	
00026B49 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00026B4E EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00026B53 FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
00026B58 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
00026B5D 03                         SME_wvX4F_EF9:	dc.b 3	
00026B5E ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
00026B63 ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
00026B68 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
00026B6D 05                         SME_wvX4F_F09:	dc.b 5	
00026B6E EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00026B73 EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
00026B78 FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
00026B7D 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
00026B82 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
00026B87 04                         SME_wvX4F_F23:	dc.b 4	
00026B88 EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
00026B8D EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
00026B92 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
00026B97 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
00026B9C 03                         SME_wvX4F_F38:	dc.b 3	
00026B9D ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
00026BA2 ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
00026BA7 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
00026BAC 05                         SME_wvX4F_F48:	dc.b 5	
00026BAD ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
00026BB2 ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
00026BB7 FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
00026BBC FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
00026BC1 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
00026BC6 03                         SME_wvX4F_F62:	dc.b 3	
00026BC7 EB09 0000 FD               		dc.b $EB, 9, 0, 0, $FD	
00026BCC FB04 0006 FD               		dc.b $FB, 4, 0, 6, $FD	
00026BD1 0309 0008 FD               		dc.b 3, 9, 0, 8, $FD	
00026BD6 01                         SME_wvX4F_F72:	dc.b 1	
00026BD7 EC0B 0000 FD               		dc.b $EC, $B, 0, 0, $FD	
00026BDC 01                         SME_wvX4F_F78:	dc.b 1	
00026BDD F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
00026BE2 03                         SME_wvX4F_F7E:	dc.b 3	
00026BE3 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
00026BE8 F90A 0001 FC               		dc.b $F9, $A, 0, 1, $FC	
00026BED F108 000A FC               		dc.b $F1, 8, 0, $A, $FC	
00026BF2 03                         SME_wvX4F_F8E:	dc.b 3	
00026BF3 EB09 0000 FC               		dc.b $EB, 9, 0, 0, $FC	
00026BF8 FB04 0006 FC               		dc.b $FB, 4, 0, 6, $FC	
00026BFD 0309 0008 FC               		dc.b 3, 9, 0, 8, $FC	
00026C02 01                         SME_wvX4F_F9E:	dc.b 1	
00026C03 F30B 0000 FD               		dc.b $F3, $B, 0, 0, $FD	
00026C08 03                         SME_wvX4F_FA4:	dc.b 3	
00026C09 FC01 0000 0D               		dc.b $FC, 1, 0, 0, $D	
00026C0E F400 0002 FD               		dc.b $F4, 0, 0, 2, $FD	
00026C13 FC05 0003 FD               		dc.b $FC, 5, 0, 3, $FD	
00026C18 02                         SME_wvX4F_FB4:	dc.b 2	
00026C19 EC00 0000 FD               		dc.b $EC, 0, 0, 0, $FD	
00026C1E F40A 0001 FD               		dc.b $F4, $A, 0, 1, $FD	
00026C23 06                         SME_wvX4F_FBF:	dc.b 6	
00026C24 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00026C29 EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
00026C2E F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
00026C33 F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00026C38 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
00026C3D FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
00026C42 06                         SME_wvX4F_FDE:	dc.b 6	
00026C43 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00026C48 E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
00026C4D EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
00026C52 F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
00026C57 F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
00026C5C 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
00026C61 04                         SME_wvX4F_FFD:	dc.b 4	
00026C62 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00026C67 F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
00026C6C EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
00026C71 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00026C76 03                         SME_wvX4F_1012:	dc.b 3	
00026C77 E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
00026C7C F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
00026C81 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
00026C86 05                         SME_wvX4F_1022:	dc.b 5	
00026C87 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00026C8C EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
00026C91 F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
00026C96 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
00026C9B 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
00026CA0 04                         SME_wvX4F_103C:	dc.b 4	
00026CA1 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00026CA6 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
00026CAB EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
00026CB0 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
00026CB5 03                         SME_wvX4F_1051:	dc.b 3	
00026CB6 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
00026CBB 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
00026CC0 EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
00026CC5 05                         SME_wvX4F_1061:	dc.b 5	
00026CC6 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00026CCB EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
00026CD0 F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
00026CD5 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00026CDA 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
00026CDF 03                         SME_wvX4F_107B:	dc.b 3	
00026CE0 F80E 0000 F8               		dc.b $F8, $E, 0, 0, $F8	
00026CE5 1008 000C F0               		dc.b $10, 8, 0, $C, $F0	
00026CEA 0800 000F F0               		dc.b 8, 0, 0, $F, $F0	
00026CEF 05                         SME_wvX4F_108B:	dc.b 5	
00026CF0 F80E 0000 F8               		dc.b $F8, $E, 0, 0, $F8	
00026CF5 0801 000C F0               		dc.b 8, 1, 0, $C, $F0	
00026CFA 1004 000E F8               		dc.b $10, 4, 0, $E, $F8	
00026CFF F004 0010 F8               		dc.b $F0, 4, 0, $10, $F8	
00026D04 1000 0012 08               		dc.b $10, 0, 0, $12, 8	
00026D09 04                         SME_wvX4F_10A5:	dc.b 4	
00026D0A F80E 0000 F8               		dc.b $F8, $E, 0, 0, $F8	
00026D0F 0801 000C F0               		dc.b 8, 1, 0, $C, $F0	
00026D14 1008 000E F8               		dc.b $10, 8, 0, $E, $F8	
00026D19 F008 0011 F8               		dc.b $F0, 8, 0, $11, $F8	
00026D1E 04                         SME_wvX4F_10BA:	dc.b 4	
00026D1F F80E 0000 F8               		dc.b $F8, $E, 0, 0, $F8	
00026D24 0801 000C F0               		dc.b 8, 1, 0, $C, $F0	
00026D29 1008 000E F8               		dc.b $10, 8, 0, $E, $F8	
00026D2E F008 0011 F8               		dc.b $F0, 8, 0, $11, $F8	
00026D33 02                         SME_wvX4F_10CF:	dc.b 2	
00026D34 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D39 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026D3E 02                         SME_wvX4F_10DA:	dc.b 2	
00026D3F F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D44 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026D49 02                         SME_wvX4F_10E5:	dc.b 2	
00026D4A F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D4F E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026D54 02                         SME_wvX4F_10F0:	dc.b 2	
00026D55 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D5A E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026D5F 02                         SME_wvX4F_10FB:	dc.b 2	
00026D60 F00C 0000 F0               		dc.b $F0, $C, 0, 0, $F0	
00026D65 F80F 0004 F0               		dc.b $F8, $F, 0, 4, $F0	
00026D6A 03                         SME_wvX4F_1106:	dc.b 3	
00026D6B F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D70 F00C 0010 F0               		dc.b $F0, $C, 0, $10, $F0	
00026D75 F002 0014 E8               		dc.b $F0, 2, 0, $14, $E8	
00026D7A 03                         SME_wvX4F_1116:	dc.b 3	
00026D7B F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026D80 F008 0010 F0               		dc.b $F0, 8, 0, $10, $F0	
00026D85 F002 0013 E8               		dc.b $F0, 2, 0, $13, $E8	
00026D8A 07                         SME_wvX4F_1126:	dc.b 7	
00026D8B F00A 0000 E8               		dc.b $F0, $A, 0, 0, $E8	
00026D90 F000 0009 00               		dc.b $F0, 0, 0, 9, 0	
00026D95 F803 000A 00               		dc.b $F8, 3, 0, $A, 0	
00026D9A 0800 000E 08               		dc.b 8, 0, 0, $E, 8	
00026D9F 0000 000F 08               		dc.b 0, 0, 0, $F, 8	
00026DA4 1000 0010 08               		dc.b $10, 0, 0, $10, 8	
00026DA9 0804 0011 F0               		dc.b 8, 4, 0, $11, $F0	
00026DAE 02                         SME_wvX4F_114A:	dc.b 2	
00026DAF F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026DB4 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026DB9 02                         SME_wvX4F_1155:	dc.b 2	
00026DBA F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026DBF E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026DC4 02                         SME_wvX4F_1160:	dc.b 2	
00026DC5 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026DCA E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026DCF 02                         SME_wvX4F_116B:	dc.b 2	
00026DD0 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026DD5 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026DDA 03                         SME_wvX4F_1176:	dc.b 3	
00026DDB F802 0000 10               		dc.b $F8, 2, 0, 0, $10	
00026DE0 F80F 0003 F0               		dc.b $F8, $F, 0, 3, $F0	
00026DE5 F008 0013 00               		dc.b $F0, 8, 0, $13, 0	
00026DEA 04                         SME_wvX4F_1186:	dc.b 4	
00026DEB F00F 0000 F8               		dc.b $F0, $F, 0, 0, $F8	
00026DF0 100C 0010 F0               		dc.b $10, $C, 0, $10, $F0	
00026DF5 0001 0014 F0               		dc.b 0, 1, 0, $14, $F0	
00026DFA F800 0016 F0               		dc.b $F8, 0, 0, $16, $F0	
00026DFF 00                         SME_wvX4F_119B:	dc.b 0	
00026E00 00                         SME_wvX4F_119C:	dc.b 0	
00026E01 03                         SME_wvX4F_119D:	dc.b 3	
00026E02 F00E 0000 E8               		dc.b $F0, $E, 0, 0, $E8	
00026E07 F803 000C 08               		dc.b $F8, 3, 0, $C, 8	
00026E0C 0809 0010 F0               		dc.b 8, 9, 0, $10, $F0	
00026E11 03                         SME_wvX4F_11AD:	dc.b 3	
00026E12 F00E 0000 E8               		dc.b $F0, $E, 0, 0, $E8	
00026E17 080D 000C F0               		dc.b 8, $D, 0, $C, $F0	
00026E1C F801 0014 08               		dc.b $F8, 1, 0, $14, 8	
00026E21 00                         SME_wvX4F_11BD:	dc.b 0	
00026E22 00                         SME_wvX4F_11BE:	dc.b 0	
00026E23 02                         SME_wvX4F_11BF:	dc.b 2	
00026E24 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0	
00026E29 F40F 0004 F0               		dc.b $F4, $F, 0, 4, $F0	
00026E2E 01                         SME_wvX4F_11CA:	dc.b 1	
00026E2F F40F 0000 F0               		dc.b $F4, $F, 0, 0, $F0	
00026E34 02                         SME_wvX4F_11D0:	dc.b 2	
00026E35 F40F 0000 F0               		dc.b $F4, $F, 0, 0, $F0	
00026E3A E40D 0010 F0               		dc.b $E4, $D, 0, $10, $F0	
00026E3F 02                         SME_wvX4F_11DB:	dc.b 2	
00026E40 E40F 0000 F0               		dc.b $E4, $F, 0, 0, $F0	
00026E45 040D 0010 F0               		dc.b 4, $D, 0, $10, $F0	
00026E4A 02                         SME_wvX4F_11E6:	dc.b 2	
00026E4B E40F 0000 F0               		dc.b $E4, $F, 0, 0, $F0	
00026E50 040D 0010 F0               		dc.b 4, $D, 0, $10, $F0	
00026E55 02                         SME_wvX4F_11F1:	dc.b 2	
00026E56 E40F 0000 F0               		dc.b $E4, $F, 0, 0, $F0	
00026E5B 040D 0010 F0               		dc.b 4, $D, 0, $10, $F0	
00026E60 05                         SME_wvX4F_11FC:	dc.b 5	
00026E61 0209 0000 00               		dc.b 2, 9, 0, 0, 0	
00026E66 E207 0006 F0               		dc.b $E2, 7, 0, 6, $F0	
00026E6B EA06 000E 00               		dc.b $EA, 6, 0, $E, 0	
00026E70 E200 0014 00               		dc.b $E2, 0, 0, $14, 0	
00026E75 0200 0015 F8               		dc.b 2, 0, 0, $15, $F8	
00026E7A 05                         SME_wvX4F_1216:	dc.b 5	
00026E7B E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026E80 020C 000C F0               		dc.b 2, $C, 0, $C, $F0	
00026E85 0201 0010 10               		dc.b 2, 1, 0, $10, $10	
00026E8A 0A04 0012 00               		dc.b $A, 4, 0, $12, 0	
00026E8F EA02 0014 08               		dc.b $EA, 2, 0, $14, 8	
00026E94 02                         SME_wvX4F_1230:	dc.b 2	
00026E95 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026E9A 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026E9F 02                         SME_wvX4F_123B:	dc.b 2	
00026EA0 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026EA5 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026EAA 02                         SME_wvX4F_1246:	dc.b 2	
00026EAB E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026EB0 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026EB5 02                         SME_wvX4F_1251:	dc.b 2	
00026EB6 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026EBB 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026EC0 02                         SME_wvX4F_125C:	dc.b 2	
00026EC1 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026EC6 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026ECB 02                         SME_wvX4F_1267:	dc.b 2	
00026ECC E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026ED1 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026ED6 02                         SME_wvX4F_1272:	dc.b 2	
00026ED7 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026EDC 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026EE1 02                         SME_wvX4F_127D:	dc.b 2	
00026EE2 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026EE7 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
00026EEC 02                         SME_wvX4F_1288:	dc.b 2	
00026EED E20F 0000 F0               		dc.b $E2, $F, 0, 0, $F0	
00026EF2 020D 0010 F0               		dc.b 2, $D, 0, $10, $F0	
00026EF7 02                         SME_wvX4F_1293:	dc.b 2	
00026EF8 E20F 0000 F0               		dc.b $E2, $F, 0, 0, $F0	
00026EFD 020D 0010 F0               		dc.b 2, $D, 0, $10, $F0	
00026F02                            		even
00026F02                            		even
00026F02                            SonicDynPLC:	include	"_maps\Sonic - Dynamic Gfx Script.asm"
00026F02                            ; --------------------------------------------------------------------------------
00026F02                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00026F02                            
00026F02                            SME_I2OLA:	
00026F02 0000 0000                  		dc.w SME_I2OLA_1EE-SME_I2OLA, SME_I2OLA_1EF-SME_I2OLA	
00026F06 0000 0000                  		dc.w SME_I2OLA_1F8-SME_I2OLA, SME_I2OLA_20B-SME_I2OLA	
00026F0A 0000 0000                  		dc.w SME_I2OLA_220-SME_I2OLA, SME_I2OLA_229-SME_I2OLA	
00026F0E 0000 0000                  		dc.w SME_I2OLA_230-SME_I2OLA, SME_I2OLA_237-SME_I2OLA	
00026F12 0000 0000                  		dc.w SME_I2OLA_240-SME_I2OLA, SME_I2OLA_245-SME_I2OLA	
00026F16 0000 0000                  		dc.w SME_I2OLA_24C-SME_I2OLA, SME_I2OLA_253-SME_I2OLA	
00026F1A 0000 0000                  		dc.w SME_I2OLA_25A-SME_I2OLA, SME_I2OLA_263-SME_I2OLA	
00026F1E 0000 0000                  		dc.w SME_I2OLA_26A-SME_I2OLA, SME_I2OLA_279-SME_I2OLA	
00026F22 0000 0000                  		dc.w SME_I2OLA_284-SME_I2OLA, SME_I2OLA_28B-SME_I2OLA	
00026F26 0000 0000                  		dc.w SME_I2OLA_292-SME_I2OLA, SME_I2OLA_29B-SME_I2OLA	
00026F2A 0000 0000                  		dc.w SME_I2OLA_2A0-SME_I2OLA, SME_I2OLA_2A7-SME_I2OLA	
00026F2E 0000 0000                  		dc.w SME_I2OLA_2B2-SME_I2OLA, SME_I2OLA_2BD-SME_I2OLA	
00026F32 0000 0000                  		dc.w SME_I2OLA_2CA-SME_I2OLA, SME_I2OLA_2D3-SME_I2OLA	
00026F36 0000 0000                  		dc.w SME_I2OLA_2DA-SME_I2OLA, SME_I2OLA_2E5-SME_I2OLA	
00026F3A 0000 0000                  		dc.w SME_I2OLA_2EE-SME_I2OLA, SME_I2OLA_2F5-SME_I2OLA	
00026F3E 0000 0000                  		dc.w SME_I2OLA_300-SME_I2OLA, SME_I2OLA_309-SME_I2OLA	
00026F42 0000 0000                  		dc.w SME_I2OLA_30E-SME_I2OLA, SME_I2OLA_313-SME_I2OLA	
00026F46 0000 0000                  		dc.w SME_I2OLA_31E-SME_I2OLA, SME_I2OLA_327-SME_I2OLA	
00026F4A 0000 0000                  		dc.w SME_I2OLA_32C-SME_I2OLA, SME_I2OLA_333-SME_I2OLA	
00026F4E 0000 0000                  		dc.w SME_I2OLA_33A-SME_I2OLA, SME_I2OLA_347-SME_I2OLA	
00026F52 0000 0000                  		dc.w SME_I2OLA_354-SME_I2OLA, SME_I2OLA_35D-SME_I2OLA	
00026F56 0000 0000                  		dc.w SME_I2OLA_364-SME_I2OLA, SME_I2OLA_36F-SME_I2OLA	
00026F5A 0000 0000                  		dc.w SME_I2OLA_378-SME_I2OLA, SME_I2OLA_37F-SME_I2OLA	
00026F5E 0000 0000                  		dc.w SME_I2OLA_38A-SME_I2OLA, SME_I2OLA_38F-SME_I2OLA	
00026F62 0000 0000                  		dc.w SME_I2OLA_394-SME_I2OLA, SME_I2OLA_399-SME_I2OLA	
00026F66 0000 0000                  		dc.w SME_I2OLA_39E-SME_I2OLA, SME_I2OLA_3A3-SME_I2OLA	
00026F6A 0000 0000                  		dc.w SME_I2OLA_3A8-SME_I2OLA, SME_I2OLA_3AD-SME_I2OLA	
00026F6E 0000 0000                  		dc.w SME_I2OLA_3B2-SME_I2OLA, SME_I2OLA_3BB-SME_I2OLA	
00026F72 0000 0000                  		dc.w SME_I2OLA_3C2-SME_I2OLA, SME_I2OLA_3C9-SME_I2OLA	
00026F76 0000 0000                  		dc.w SME_I2OLA_3D0-SME_I2OLA, SME_I2OLA_3D9-SME_I2OLA	
00026F7A 0000 0000                  		dc.w SME_I2OLA_3E0-SME_I2OLA, SME_I2OLA_3E7-SME_I2OLA	
00026F7E 0000 0000                  		dc.w SME_I2OLA_3EE-SME_I2OLA, SME_I2OLA_3F3-SME_I2OLA	
00026F82 0000 0000                  		dc.w SME_I2OLA_3F8-SME_I2OLA, SME_I2OLA_3FD-SME_I2OLA	
00026F86 0000 0000                  		dc.w SME_I2OLA_402-SME_I2OLA, SME_I2OLA_407-SME_I2OLA	
00026F8A 0000 0000                  		dc.w SME_I2OLA_40C-SME_I2OLA, SME_I2OLA_411-SME_I2OLA	
00026F8E 0000 0000                  		dc.w SME_I2OLA_416-SME_I2OLA, SME_I2OLA_41F-SME_I2OLA	
00026F92 0000 0000                  		dc.w SME_I2OLA_426-SME_I2OLA, SME_I2OLA_42B-SME_I2OLA	
00026F96 0000 0000                  		dc.w SME_I2OLA_432-SME_I2OLA, SME_I2OLA_43B-SME_I2OLA	
00026F9A 0000 0000                  		dc.w SME_I2OLA_442-SME_I2OLA, SME_I2OLA_447-SME_I2OLA	
00026F9E 0000 0000                  		dc.w SME_I2OLA_44E-SME_I2OLA, SME_I2OLA_455-SME_I2OLA	
00026FA2 0000 0000                  		dc.w SME_I2OLA_45C-SME_I2OLA, SME_I2OLA_46F-SME_I2OLA	
00026FA6 0000 0000                  		dc.w SME_I2OLA_482-SME_I2OLA, SME_I2OLA_489-SME_I2OLA	
00026FAA 0000 0000                  		dc.w SME_I2OLA_490-SME_I2OLA, SME_I2OLA_497-SME_I2OLA	
00026FAE 0000 0000                  		dc.w SME_I2OLA_4A2-SME_I2OLA, SME_I2OLA_4A9-SME_I2OLA	
00026FB2 0000 0000                  		dc.w SME_I2OLA_4B0-SME_I2OLA, SME_I2OLA_4BB-SME_I2OLA	
00026FB6 0000 0000                  		dc.w SME_I2OLA_4C6-SME_I2OLA, SME_I2OLA_4CF-SME_I2OLA	
00026FBA 0000 0000                  		dc.w SME_I2OLA_4D8-SME_I2OLA, SME_I2OLA_4E1-SME_I2OLA	
00026FBE 0000 0000                  		dc.w SME_I2OLA_4EA-SME_I2OLA, SME_I2OLA_4ED-SME_I2OLA	
00026FC2 0000 0000                  		dc.w SME_I2OLA_4F0-SME_I2OLA, SME_I2OLA_4F3-SME_I2OLA	
00026FC6 0000 0000                  		dc.w SME_I2OLA_4F6-SME_I2OLA, SME_I2OLA_4F9-SME_I2OLA	
00026FCA 0000 0000                  		dc.w SME_I2OLA_4FC-SME_I2OLA, SME_I2OLA_4FF-SME_I2OLA	
00026FCE 0000 0000                  		dc.w SME_I2OLA_506-SME_I2OLA, SME_I2OLA_509-SME_I2OLA	
00026FD2 0000 0000                  		dc.w SME_I2OLA_50E-SME_I2OLA, SME_I2OLA_511-SME_I2OLA	
00026FD6 0000 0000                  		dc.w SME_I2OLA_516-SME_I2OLA, SME_I2OLA_519-SME_I2OLA	
00026FDA 0000 0000                  		dc.w SME_I2OLA_522-SME_I2OLA, SME_I2OLA_531-SME_I2OLA	
00026FDE 0000 0000                  		dc.w SME_I2OLA_53C-SME_I2OLA, SME_I2OLA_543-SME_I2OLA	
00026FE2 0000 0000                  		dc.w SME_I2OLA_54E-SME_I2OLA, SME_I2OLA_557-SME_I2OLA	
00026FE6 0000 0000                  		dc.w SME_I2OLA_560-SME_I2OLA, SME_I2OLA_569-SME_I2OLA	
00026FEA 0000 0000                  		dc.w SME_I2OLA_57C-SME_I2OLA, SME_I2OLA_583-SME_I2OLA	
00026FEE 0000 0000                  		dc.w SME_I2OLA_58A-SME_I2OLA, SME_I2OLA_591-SME_I2OLA	
00026FF2 0000 0000                  		dc.w SME_I2OLA_592-SME_I2OLA, SME_I2OLA_5A3-SME_I2OLA	
00026FF6 0000 0000                  		dc.w SME_I2OLA_5B2-SME_I2OLA, SME_I2OLA_5BB-SME_I2OLA	
00026FFA 0000 0000                  		dc.w SME_I2OLA_5C2-SME_I2OLA, SME_I2OLA_5C9-SME_I2OLA	
00026FFE 0000 0000                  		dc.w SME_I2OLA_5D0-SME_I2OLA, SME_I2OLA_5D3-SME_I2OLA	
00027002 0000 0000                  		dc.w SME_I2OLA_5DA-SME_I2OLA, SME_I2OLA_5E1-SME_I2OLA	
00027006 0000 0000                  		dc.w SME_I2OLA_5E8-SME_I2OLA, SME_I2OLA_5EF-SME_I2OLA	
0002700A 0000 0000                  		dc.w SME_I2OLA_5F8-SME_I2OLA, SME_I2OLA_609-SME_I2OLA	
0002700E 0000 0000                  		dc.w SME_I2OLA_612-SME_I2OLA, SME_I2OLA_61B-SME_I2OLA	
00027012 0000 0000                  		dc.w SME_I2OLA_626-SME_I2OLA, SME_I2OLA_631-SME_I2OLA	
00027016 0000 0000                  		dc.w SME_I2OLA_636-SME_I2OLA, SME_I2OLA_641-SME_I2OLA	
0002701A 0000 0000                  		dc.w SME_I2OLA_648-SME_I2OLA, SME_I2OLA_653-SME_I2OLA	
0002701E 0000 0000                  		dc.w SME_I2OLA_658-SME_I2OLA, SME_I2OLA_65F-SME_I2OLA	
00027022 0000 0000                  		dc.w SME_I2OLA_666-SME_I2OLA, SME_I2OLA_66D-SME_I2OLA	
00027026 0000 0000                  		dc.w SME_I2OLA_672-SME_I2OLA, SME_I2OLA_679-SME_I2OLA	
0002702A 0000 0000                  		dc.w SME_I2OLA_690-SME_I2OLA, SME_I2OLA_69D-SME_I2OLA	
0002702E 0000 0000                  		dc.w SME_I2OLA_6A4-SME_I2OLA, SME_I2OLA_6B3-SME_I2OLA	
00027032 0000 0000                  		dc.w SME_I2OLA_6B8-SME_I2OLA, SME_I2OLA_6C1-SME_I2OLA	
00027036 0000 0000                  		dc.w SME_I2OLA_6C8-SME_I2OLA, SME_I2OLA_6CF-SME_I2OLA	
0002703A 0000 0000                  		dc.w SME_I2OLA_6D8-SME_I2OLA, SME_I2OLA_6DB-SME_I2OLA	
0002703E 0000 0000                  		dc.w SME_I2OLA_6DE-SME_I2OLA, SME_I2OLA_6E1-SME_I2OLA	
00027042 0000 0000                  		dc.w SME_I2OLA_6E4-SME_I2OLA, SME_I2OLA_6E7-SME_I2OLA	
00027046 0000 0000                  		dc.w SME_I2OLA_6EA-SME_I2OLA, SME_I2OLA_6ED-SME_I2OLA	
0002704A 0000 0000                  		dc.w SME_I2OLA_6F0-SME_I2OLA, SME_I2OLA_6F7-SME_I2OLA	
0002704E 0000 0000                  		dc.w SME_I2OLA_6FE-SME_I2OLA, SME_I2OLA_705-SME_I2OLA	
00027052 0000 0000                  		dc.w SME_I2OLA_70C-SME_I2OLA, SME_I2OLA_713-SME_I2OLA	
00027056 0000 0000                  		dc.w SME_I2OLA_724-SME_I2OLA, SME_I2OLA_72B-SME_I2OLA	
0002705A 0000 0000                  		dc.w SME_I2OLA_732-SME_I2OLA, SME_I2OLA_741-SME_I2OLA	
0002705E 0000 0000                  		dc.w SME_I2OLA_748-SME_I2OLA, SME_I2OLA_74B-SME_I2OLA	
00027062 0000 0000                  		dc.w SME_I2OLA_750-SME_I2OLA, SME_I2OLA_75F-SME_I2OLA	
00027066 0000 0000                  		dc.w SME_I2OLA_766-SME_I2OLA, SME_I2OLA_769-SME_I2OLA	
0002706A 0000 0000                  		dc.w SME_I2OLA_76E-SME_I2OLA, SME_I2OLA_773-SME_I2OLA	
0002706E 0000 0000                  		dc.w SME_I2OLA_77E-SME_I2OLA, SME_I2OLA_78B-SME_I2OLA	
00027072 0000 0000                  		dc.w SME_I2OLA_794-SME_I2OLA, SME_I2OLA_79B-SME_I2OLA	
00027076 0000 0000                  		dc.w SME_I2OLA_7A6-SME_I2OLA, SME_I2OLA_7AF-SME_I2OLA	
0002707A 0000 0000                  		dc.w SME_I2OLA_7B6-SME_I2OLA, SME_I2OLA_7C1-SME_I2OLA	
0002707E 0000 0000                  		dc.w SME_I2OLA_7C8-SME_I2OLA, SME_I2OLA_7CB-SME_I2OLA	
00027082 0000 0000                  		dc.w SME_I2OLA_7CE-SME_I2OLA, SME_I2OLA_7D5-SME_I2OLA	
00027086 0000 0000                  		dc.w SME_I2OLA_7DC-SME_I2OLA, SME_I2OLA_7DF-SME_I2OLA	
0002708A 0000 0000                  		dc.w SME_I2OLA_7E6-SME_I2OLA, SME_I2OLA_7EB-SME_I2OLA	
0002708E 0000 0000                  		dc.w SME_I2OLA_7F8-SME_I2OLA, SME_I2OLA_805-SME_I2OLA	
00027092 0000 0000                  		dc.w SME_I2OLA_80E-SME_I2OLA, SME_I2OLA_815-SME_I2OLA	
00027096 0000 0000                  		dc.w SME_I2OLA_820-SME_I2OLA, SME_I2OLA_829-SME_I2OLA	
0002709A 0000 0000                  		dc.w SME_I2OLA_830-SME_I2OLA, SME_I2OLA_83B-SME_I2OLA	
0002709E 0000 0000                  		dc.w SME_I2OLA_842-SME_I2OLA, SME_I2OLA_84D-SME_I2OLA	
000270A2 0000 0000                  		dc.w SME_I2OLA_856-SME_I2OLA, SME_I2OLA_85F-SME_I2OLA	
000270A6 0000 0000                  		dc.w SME_I2OLA_864-SME_I2OLA, SME_I2OLA_869-SME_I2OLA	
000270AA 0000 0000                  		dc.w SME_I2OLA_86E-SME_I2OLA, SME_I2OLA_873-SME_I2OLA	
000270AE 0000 0000                  		dc.w SME_I2OLA_878-SME_I2OLA, SME_I2OLA_87F-SME_I2OLA	
000270B2 0000 0000                  		dc.w SME_I2OLA_886-SME_I2OLA, SME_I2OLA_895-SME_I2OLA	
000270B6 0000 0000                  		dc.w SME_I2OLA_89A-SME_I2OLA, SME_I2OLA_89F-SME_I2OLA	
000270BA 0000 0000                  		dc.w SME_I2OLA_8A4-SME_I2OLA, SME_I2OLA_8A9-SME_I2OLA	
000270BE 0000 0000                  		dc.w SME_I2OLA_8B0-SME_I2OLA, SME_I2OLA_8B9-SME_I2OLA	
000270C2 0000 0000                  		dc.w SME_I2OLA_8BA-SME_I2OLA, SME_I2OLA_8BB-SME_I2OLA	
000270C6 0000 0000                  		dc.w SME_I2OLA_8C2-SME_I2OLA, SME_I2OLA_8C9-SME_I2OLA	
000270CA 0000 0000                  		dc.w SME_I2OLA_8CA-SME_I2OLA, SME_I2OLA_8CB-SME_I2OLA	
000270CE 0000 0000                  		dc.w SME_I2OLA_8D0-SME_I2OLA, SME_I2OLA_8D3-SME_I2OLA	
000270D2 0000 0000                  		dc.w SME_I2OLA_8D8-SME_I2OLA, SME_I2OLA_8DD-SME_I2OLA	
000270D6 0000 0000                  		dc.w SME_I2OLA_8E2-SME_I2OLA, SME_I2OLA_8E7-SME_I2OLA	
000270DA 0000 0000                  		dc.w SME_I2OLA_8F2-SME_I2OLA, SME_I2OLA_8FD-SME_I2OLA	
000270DE 0000 0000                  		dc.w SME_I2OLA_902-SME_I2OLA, SME_I2OLA_907-SME_I2OLA	
000270E2 0000 0000                  		dc.w SME_I2OLA_90C-SME_I2OLA, SME_I2OLA_911-SME_I2OLA	
000270E6 0000 0000                  		dc.w SME_I2OLA_916-SME_I2OLA, SME_I2OLA_91B-SME_I2OLA	
000270EA 0000 0000                  		dc.w SME_I2OLA_920-SME_I2OLA, SME_I2OLA_925-SME_I2OLA	
000270EE 0000                       		dc.w SME_I2OLA_92A-SME_I2OLA	
000270F0 00                         SME_I2OLA_1EE:	dc.b 0	
000270F1 0420 0070 0320 0B20 0E     SME_I2OLA_1EF:	dc.b 4, $20, 0, $70, 3, $20, $B, $20, $E	
000270FA 0920 0020 0B20 0E10 0300+  SME_I2OLA_1F8:	dc.b 9, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, 6, 0, $A, $10, $1D	
0002710D 0A20 0020 0B20 0E10 0300+  SME_I2OLA_20B:	dc.b $A, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, $A, 0, $1F, 0, $26, 0, $32	
00027122 04B6 C606 D200 0920 0E     SME_I2OLA_220:	dc.b 4, $B6, $C6, 6, $D2, 0, 9, $20, $E	
0002712B 0350 1150 1720 0E          SME_I2OLA_229:	dc.b 3, $50, $11, $50, $17, $20, $E	
00027132 0350 2050 1720 0E          SME_I2OLA_230:	dc.b 3, $50, $20, $50, $17, $20, $E	
00027139 0450 2050 1710 2700 0E     SME_I2OLA_237:	dc.b 4, $50, $20, $50, $17, $10, $27, 0, $E	
00027142 02B6 D316 DF               SME_I2OLA_240:	dc.b 2, $B6, $D3, $16, $DF	
00027147 0356 E126 E736 EA          SME_I2OLA_245:	dc.b 3, $56, $E1, $26, $E7, $36, $EA	
0002714E 0356 E126 E736 EE          SME_I2OLA_24C:	dc.b 3, $56, $E1, $26, $E7, $36, $EE	
00027155 03B6 F226 FE27 01          SME_I2OLA_253:	dc.b 3, $B6, $F2, $26, $FE, $27, 1	
0002715C 0420 0B20 0E87 0A07 13     SME_I2OLA_25A:	dc.b 4, $20, $B, $20, $E, $87, $A, 7, $13	
00027165 0380 2920 0B20 0E          SME_I2OLA_263:	dc.b 3, $80, $29, $20, $B, $20, $E	
0002716C 0750 3A50 4010 4600 3530+  SME_I2OLA_26A:	dc.b 7, $50, $3A, $50, $40, $10, $46, 0, $35, $30, $36, 0, $34, 0, $33	
0002717B 05B0 4800 3530 3600 3400+  SME_I2OLA_279:	dc.b 5, $B0, $48, 0, $35, $30, $36, 0, $34, 0, $33	
00027186 0380 5A57 0400 09          SME_I2OLA_284:	dc.b 3, $80, $5A, $57, 4, 0, 9	
0002718D 03F7 1437 2407 28          SME_I2OLA_28B:	dc.b 3, $F7, $14, $37, $24, 7, $28	
00027194 0450 5450 6350 6910 6F     SME_I2OLA_292:	dc.b 4, $50, $54, $50, $63, $50, $69, $10, $6F	
0002719D 0250 54B0 71               SME_I2OLA_29B:	dc.b 2, $50, $54, $B0, $71	
000271A2 0357 0457 2907 2F          SME_I2OLA_2A0:	dc.b 3, $57, 4, $57, $29, 7, $2F	
000271A9 0530 7D50 8100 3310 3430+  SME_I2OLA_2A7:	dc.b 5, $30, $7D, $50, $81, 0, $33, $10, $34, $30, $36	
000271B4 0550 8750 8D20 9350 9600+  SME_I2OLA_2B2:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
000271BF 0650 8710 9D30 9F50 A330+  SME_I2OLA_2BD:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
000271CC 0450 AE10 B470 B620 BE     SME_I2OLA_2CA:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
000271D5 03F9 7539 8539 89          SME_I2OLA_2D3:	dc.b 3, $F9, $75, $39, $85, $39, $89	
000271DC 0550 C130 C770 CB20 D310+  SME_I2OLA_2DA:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
000271E7 0450 C110 D870 DA20 E2     SME_I2OLA_2E5:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
000271F0 03F9 8D39 9D39 A1          SME_I2OLA_2EE:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
000271F7 0550 8710 9D00 9370 E520+  SME_I2OLA_2F5:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
00027202 0470 F050 F810 FE51 00     SME_I2OLA_300:	dc.b 4, $70, $F0, $50, $F8, $10, $FE, $51, 0	
0002720B 0270 F0B1 06               SME_I2OLA_309:	dc.b 2, $70, $F0, $B1, 6	
00027210 0281 1858 F9               SME_I2OLA_30E:	dc.b 2, $81, $18, $58, $F9	
00027215 0508 FF39 0009 04B9 0529+  SME_I2OLA_313:	dc.b 5, 8, $FF, $39, 0, 9, 4, $B9, 5, $29, $11	
00027220 0451 1251 2111 2751 29     SME_I2OLA_31E:	dc.b 4, $51, $12, $51, $21, $11, $27, $51, $29	
00027229 0251 12B1 2F               SME_I2OLA_327:	dc.b 2, $51, $12, $B1, $2F	
0002722E 0329 1479 1719 1F          SME_I2OLA_32C:	dc.b 3, $29, $14, $79, $17, $19, $1F	
00027235 0370 F001 0681 3B          SME_I2OLA_333:	dc.b 3, $70, $F0, 1, 6, $81, $3B	
0002723C 0651 4411 4A11 4C81 4E01+  SME_I2OLA_33A:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
00027249 0651 4421 5911 5C11 5E81+  SME_I2OLA_347:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
00027256 0451 6911 6F81 7111 7A     SME_I2OLA_354:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
0002725F 03F9 A529 B529 B8          SME_I2OLA_35D:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
00027266 0551 7C21 8211 8571 8721+  SME_I2OLA_364:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
00027271 0451 7C11 9281 9411 9D     SME_I2OLA_36F:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
0002727A 03F9 BB29 CB19 CE          SME_I2OLA_378:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
00027281 0551 4481 9F11 5E11 A801+  SME_I2OLA_37F:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
0002728C 0251 AAB1 B0               SME_I2OLA_38A:	dc.b 2, $51, $AA, $B1, $B0	
00027291 02B7 3057 3C               SME_I2OLA_38F:	dc.b 2, $B7, $30, $57, $3C	
00027296 0250 54B1 BC               SME_I2OLA_394:	dc.b 2, $50, $54, $B1, $BC	
0002729B 0257 3CB7 42               SME_I2OLA_399:	dc.b 2, $57, $3C, $B7, $42	
000272A0 0251 AAB1 C8               SME_I2OLA_39E:	dc.b 2, $51, $AA, $B1, $C8	
000272A5 0257 3CB7 4E               SME_I2OLA_3A3:	dc.b 2, $57, $3C, $B7, $4E	
000272AA 0250 54B1 D4               SME_I2OLA_3A8:	dc.b 2, $50, $54, $B1, $D4	
000272AF 0257 3CB7 5A               SME_I2OLA_3AD:	dc.b 2, $57, $3C, $B7, $5A	
000272B4 0451 E011 E6B1 E801 F4     SME_I2OLA_3B2:	dc.b 4, $51, $E0, $11, $E6, $B1, $E8, 1, $F4	
000272BD 03F8 7128 8128 84          SME_I2OLA_3BB:	dc.b 3, $F8, $71, $28, $81, $28, $84	
000272C4 0351 F511 FBB1 FD          SME_I2OLA_3C2:	dc.b 3, $51, $F5, $11, $FB, $B1, $FD	
000272CB 03B8 BD78 C901 F4          SME_I2OLA_3C9:	dc.b 3, $B8, $BD, $78, $C9, 1, $F4	
000272D2 0451 E012 09B2 0B01 F4     SME_I2OLA_3D0:	dc.b 4, $51, $E0, $12, 9, $B2, $B, 1, $F4	
000272DB 03B8 D178 DD01 F4          SME_I2OLA_3D9:	dc.b 3, $B8, $D1, $78, $DD, 1, $F4	
000272E2 0351 F511 FBB2 17          SME_I2OLA_3E0:	dc.b 3, $51, $F5, $11, $FB, $B2, $17	
000272E9 0378 E5B8 ED01 F4          SME_I2OLA_3E7:	dc.b 3, $78, $E5, $B8, $ED, 1, $F4	
000272F0 0252 23B2 29               SME_I2OLA_3EE:	dc.b 2, $52, $23, $B2, $29	
000272F5 0258 87B8 8D               SME_I2OLA_3F3:	dc.b 2, $58, $87, $B8, $8D	
000272FA 0251 12B2 35               SME_I2OLA_3F8:	dc.b 2, $51, $12, $B2, $35	
000272FF 0258 87B8 99               SME_I2OLA_3FD:	dc.b 2, $58, $87, $B8, $99	
00027304 0252 23B2 41               SME_I2OLA_402:	dc.b 2, $52, $23, $B2, $41	
00027309 0258 87B8 A5               SME_I2OLA_407:	dc.b 2, $58, $87, $B8, $A5	
0002730E 0251 12B2 4D               SME_I2OLA_40C:	dc.b 2, $51, $12, $B2, $4D	
00027313 0258 87B8 B1               SME_I2OLA_411:	dc.b 2, $58, $87, $B8, $B1	
00027318 0452 5912 5FB2 6102 6D     SME_I2OLA_416:	dc.b 4, $52, $59, $12, $5F, $B2, $61, 2, $6D	
00027321 03B9 2129 2D59 30          SME_I2OLA_41F:	dc.b 3, $B9, $21, $29, $2D, $59, $30	
00027328 0272 6EB2 76               SME_I2OLA_426:	dc.b 2, $72, $6E, $B2, $76	
0002732D 03B9 3629 4259 45          SME_I2OLA_42B:	dc.b 3, $B9, $36, $29, $42, $59, $45	
00027334 0452 5912 82B2 8402 6D     SME_I2OLA_432:	dc.b 4, $52, $59, $12, $82, $B2, $84, 2, $6D	
0002733D 03B9 4B29 5759 5A          SME_I2OLA_43B:	dc.b 3, $B9, $4B, $29, $57, $59, $5A	
00027344 0272 6EB2 90               SME_I2OLA_442:	dc.b 2, $72, $6E, $B2, $90	
00027349 03B9 6029 6C59 6F          SME_I2OLA_447:	dc.b 3, $B9, $60, $29, $6C, $59, $6F	
00027350 03B4 EE24 FA54 FD          SME_I2OLA_44E:	dc.b 3, $B4, $EE, $24, $FA, $54, $FD	
00027357 03B5 0325 0F55 12          SME_I2OLA_455:	dc.b 3, $B5, 3, $25, $F, $55, $12	
0002735E 0925 1E55 2105 3715 1815+  SME_I2OLA_45C:	dc.b 9, $25, $1E, $55, $21, 5, $37, $15, $18, $15, $1A, $15, $1C, $14, $EE, $14, $F2, $14, $F6	
00027371 0925 2D55 3005 3615 2715+  SME_I2OLA_46F:	dc.b 9, $25, $2D, $55, $30, 5, $36, $15, $27, $15, $29, $15, $2B, $15, 3, $15, 7, $15, $B	
00027384 03F6 6416 7436 76          SME_I2OLA_482:	dc.b 3, $F6, $64, $16, $74, $36, $76	
0002738B 03B6 8176 8D16 95          SME_I2OLA_489:	dc.b 3, $B6, $81, $76, $8D, $16, $95	
00027392 03F5 3835 4805 4C          SME_I2OLA_490:	dc.b 3, $F5, $38, $35, $48, 5, $4C	
00027399 05B5 4D35 5915 5D15 5F25+  SME_I2OLA_497:	dc.b 5, $B5, $4D, $35, $59, $15, $5D, $15, $5F, $25, $61	
000273A4 03B5 6425 7055 73          SME_I2OLA_4A2:	dc.b 3, $B5, $64, $25, $70, $55, $73	
000273AB 03B5 7925 8555 88          SME_I2OLA_4A9:	dc.b 3, $B5, $79, $25, $85, $55, $88	
000273B2 0555 9425 9A05 AD55 8E55+  SME_I2OLA_4B0:	dc.b 5, $55, $94, $25, $9A, 5, $AD, $55, $8E, $55, $64	
000273BD 0525 A355 A605 AC55 9D55+  SME_I2OLA_4BB:	dc.b 5, $25, $A3, $55, $A6, 5, $AC, $55, $9D, $55, $79	
000273C8 04B5 BA25 C625 C925 CC     SME_I2OLA_4C6:	dc.b 4, $B5, $BA, $25, $C6, $25, $C9, $25, $CC	
000273D1 04B5 AE25 CF25 D225 D5     SME_I2OLA_4CF:	dc.b 4, $B5, $AE, $25, $CF, $25, $D2, $25, $D5	
000273DA 04F5 D825 E805 EB05 EC     SME_I2OLA_4D8:	dc.b 4, $F5, $D8, $25, $E8, 5, $EB, 5, $EC	
000273E3 04F5 ED25 FD16 0016 02     SME_I2OLA_4E1:	dc.b 4, $F5, $ED, $25, $FD, $16, 0, $16, 2	
000273EC 01F2 9C                    SME_I2OLA_4EA:	dc.b 1, $F2, $9C	
000273EF 01F6 2B                    SME_I2OLA_4ED:	dc.b 1, $F6, $2B	
000273F2 01F2 AC                    SME_I2OLA_4F0:	dc.b 1, $F2, $AC	
000273F5 01F6 3B                    SME_I2OLA_4F3:	dc.b 1, $F6, $3B	
000273F8 01F2 BC                    SME_I2OLA_4F6:	dc.b 1, $F2, $BC	
000273FB 01F6 4B                    SME_I2OLA_4F9:	dc.b 1, $F6, $4B	
000273FE 01F2 CC                    SME_I2OLA_4FC:	dc.b 1, $F2, $CC	
00027401 0386 5B36 7A26 7E          SME_I2OLA_4FF:	dc.b 3, $86, $5B, $36, $7A, $26, $7E	
00027408 01F2 DC                    SME_I2OLA_506:	dc.b 1, $F2, $DC	
0002740B 02B2 EC22 F8               SME_I2OLA_509:	dc.b 2, $B2, $EC, $22, $F8	
00027410 01F2 FB                    SME_I2OLA_50E:	dc.b 1, $F2, $FB	
00027413 02B3 0B23 17               SME_I2OLA_511:	dc.b 2, $B3, $B, $23, $17	
00027418 01F3 1A                    SME_I2OLA_516:	dc.b 1, $F3, $1A	
0002741B 0453 2AB3 3018 1508 17     SME_I2OLA_519:	dc.b 4, $53, $2A, $B3, $30, $18, $15, 8, $17	
00027424 0753 3C73 4213 4A03 4C08+  SME_I2OLA_522:	dc.b 7, $53, $3C, $73, $42, $13, $4A, 3, $4C, 8, $1A, 8, $19, 8, $18	
00027433 0528 1BB8 1E28 2A18 2D08+  SME_I2OLA_531:	dc.b 5, $28, $1B, $B8, $1E, $28, $2A, $18, $2D, 8, $2F	
0002743E 03B8 3038 3C18 40          SME_I2OLA_53C:	dc.b 3, $B8, $30, $38, $3C, $18, $40	
00027445 05B4 8834 9413 FD03 FF0A+  SME_I2OLA_543:	dc.b 5, $B4, $88, $34, $94, $13, $FD, 3, $FF, $A, $CD	
00027450 0427 6627 6927 6C20 0E     SME_I2OLA_54E:	dc.b 4, $27, $66, $27, $69, $27, $6C, $20, $E	
00027459 0413 4D73 4F23 5703 5A     SME_I2OLA_557:	dc.b 4, $13, $4D, $73, $4F, $23, $57, 3, $5A	
00027462 0423 5B23 5EF3 6108 42     SME_I2OLA_560:	dc.b 4, $23, $5B, $23, $5E, $F3, $61, 8, $42	
0002746B 0928 5338 5678 4303 6408+  SME_I2OLA_569:	dc.b 9, $28, $53, $38, $56, $78, $43, 3, $64, 8, $4B, $28, $4F, 8, $4D, 8, $4E, 8, $52	
0002747E 03B3 7173 7D00 71          SME_I2OLA_57C:	dc.b 3, $B3, $71, $73, $7D, 0, $71	
00027485 03F8 5B18 6B38 6D          SME_I2OLA_583:	dc.b 3, $F8, $5B, $18, $6B, $38, $6D	
0002748C 03F8 0138 113A CE          SME_I2OLA_58A:	dc.b 3, $F8, 1, $38, $11, $3A, $CE	
00027493 00                         SME_I2OLA_591:	dc.b 0	
00027494 0839 E219 EF29 E619 E919+  SME_I2OLA_592:	dc.b 8, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $59, $F7, $19, $FD, 9, $FF	
000274A5 0739 E219 EF29 E619 E919+  SME_I2OLA_5A3:	dc.b 7, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $5A, 0, $1A, 6	
000274B4 0439 E289 E619 EF59 F1     SME_I2OLA_5B2:	dc.b 4, $39, $E2, $89, $E6, $19, $EF, $59, $F1	
000274BD 0373 9D03 A533 A6          SME_I2OLA_5BB:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
000274C4 0373 8533 8D23 91          SME_I2OLA_5C2:	dc.b 3, $73, $85, $33, $8D, $23, $91	
000274CB 0376 9736 9F06 A3          SME_I2OLA_5C9:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
000274D2 0183 94                    SME_I2OLA_5D0:	dc.b 1, $83, $94	
000274D5 0376 9736 9F06 A3          SME_I2OLA_5D3:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
000274DC 0373 8533 8D23 91          SME_I2OLA_5DA:	dc.b 3, $73, $85, $33, $8D, $23, $91	
000274E3 0373 9D03 A533 A6          SME_I2OLA_5E1:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
000274EA 0373 AA33 B223 B6          SME_I2OLA_5E8:	dc.b 3, $73, $AA, $33, $B2, $23, $B6	
000274F1 04B3 B903 C603 C503 C7     SME_I2OLA_5EF:	dc.b 4, $B3, $B9, 3, $C6, 3, $C5, 3, $C7	
000274FA 0856 1113 C303 C503 C613+  SME_I2OLA_5F8:	dc.b 8, $56, $11, $13, $C3, 3, $C5, 3, $C6, $13, $BF, 6, 5, 6, 6, 3, $C7	
0002750B 04B3 DA33 E603 EA03 EB     SME_I2OLA_609:	dc.b 4, $B3, $DA, $33, $E6, 3, $EA, 3, $EB	
00027514 04B3 C833 D403 D803 D9     SME_I2OLA_612:	dc.b 4, $B3, $C8, $33, $D4, 3, $D8, 3, $D9	
0002751D 0583 EC13 F553 F713 FD03+  SME_I2OLA_61B:	dc.b 5, $83, $EC, $13, $F5, $53, $F7, $13, $FD, 3, $FF	
00027528 0584 0014 0953 F713 FD03+  SME_I2OLA_626:	dc.b 5, $84, 0, $14, 9, $53, $F7, $13, $FD, 3, $FF	
00027533 0284 0B74 14               SME_I2OLA_631:	dc.b 2, $84, $B, $74, $14	
00027538 0534 9824 9C34 9F34 A304+  SME_I2OLA_636:	dc.b 5, $34, $98, $24, $9C, $34, $9F, $34, $A3, 4, $A7	
00027543 0384 1C24 2514 28          SME_I2OLA_641:	dc.b 3, $84, $1C, $24, $25, $14, $28	
0002754A 0504 A834 A934 AD34 B124+  SME_I2OLA_648:	dc.b 5, 4, $A8, $34, $A9, $34, $AD, $34, $B1, $24, $B5	
00027555 0284 2A74 33               SME_I2OLA_653:	dc.b 2, $84, $2A, $74, $33	
0002755A 03B7 DF17 EB27 ED          SME_I2OLA_658:	dc.b 3, $B7, $DF, $17, $EB, $27, $ED	
00027561 0384 1C24 3B14 3E          SME_I2OLA_65F:	dc.b 3, $84, $1C, $24, $3B, $14, $3E	
00027568 03B7 F017 FC27 FE          SME_I2OLA_666:	dc.b 3, $B7, $F0, $17, $FC, $27, $FE	
0002756F 0254 40B4 46               SME_I2OLA_66D:	dc.b 2, $54, $40, $B4, $46	
00027574 0374 5214 5AB4 5C          SME_I2OLA_672:	dc.b 3, $74, $52, $14, $5A, $B4, $5C	
0002757B 0B74 6814 7004 7924 7504+  SME_I2OLA_679:	dc.b $B, $74, $68, $14, $70, 4, $79, $24, $75, 4, $78, 4, $73, 4, $72, 4, $74, 4, $85, 4, $87, 4, $83	
00027592 0674 7A14 7054 8204 7924+  SME_I2OLA_690:	dc.b 6, $74, $7A, $14, $70, $54, $82, 4, $79, $24, $75, 4, $78	
0002759F 0354 C9B4 CF10 6D          SME_I2OLA_69D:	dc.b 3, $54, $C9, $B4, $CF, $10, $6D	
000275A6 0714 C334 C514 BE04 BD14+  SME_I2OLA_6A4:	dc.b 7, $14, $C3, $34, $C5, $14, $BE, 4, $BD, $14, $B8, $24, $BA, $24, $C0	
000275B5 02F4 DB24 EB               SME_I2OLA_6B3:	dc.b 2, $F4, $DB, $24, $EB	
000275BA 04B6 A416 B026 B206 B1     SME_I2OLA_6B8:	dc.b 4, $B6, $A4, $16, $B0, $26, $B2, 6, $B1	
000275C3 03B6 B516 C126 C3          SME_I2OLA_6C1:	dc.b 3, $B6, $B5, $16, $C1, $26, $C3	
000275CA 03B9 D129 DD19 E0          SME_I2OLA_6C8:	dc.b 3, $B9, $D1, $29, $DD, $19, $E0	
000275D1 0427 6F37 7237 7627 7A     SME_I2OLA_6CF:	dc.b 4, $27, $6F, $37, $72, $37, $76, $27, $7A	
000275DA 01F7 7E                    SME_I2OLA_6D8:	dc.b 1, $F7, $7E	
000275DD 01F7 8E                    SME_I2OLA_6DB:	dc.b 1, $F7, $8E	
000275E0 01F7 9E                    SME_I2OLA_6DE:	dc.b 1, $F7, $9E	
000275E3 01F7 AE                    SME_I2OLA_6E1:	dc.b 1, $F7, $AE	
000275E6 01F7 BE                    SME_I2OLA_6E4:	dc.b 1, $F7, $BE	
000275E9 01FA 08                    SME_I2OLA_6E7:	dc.b 1, $FA, 8	
000275EC 01FA BD                    SME_I2OLA_6EA:	dc.b 1, $FA, $BD	
000275EF 01BA 18                    SME_I2OLA_6ED:	dc.b 1, $BA, $18	
000275F2 03FA 243A 341A 38          SME_I2OLA_6F0:	dc.b 3, $FA, $24, $3A, $34, $1A, $38	
000275F9 035A 46BA 3A0A 4C          SME_I2OLA_6F7:	dc.b 3, $5A, $46, $BA, $3A, $A, $4C	
00027600 03BA 4D5A 590A 5F          SME_I2OLA_6FE:	dc.b 3, $BA, $4D, $5A, $59, $A, $5F	
00027607 03BA 605A 6C0A 72          SME_I2OLA_705:	dc.b 3, $BA, $60, $5A, $6C, $A, $72	
0002760E 03BA 735A 7F0A 85          SME_I2OLA_70C:	dc.b 3, $BA, $73, $5A, $7F, $A, $85	
00027615 085A 7F0A 852A 781A 7C0A+  SME_I2OLA_713:	dc.b 8, $5A, $7F, $A, $85, $2A, $78, $1A, $7C, $A, $76, $A, $86, $2A, $87, $1A, $8A	
00027626 0320 0EFA 8C3A 9C          SME_I2OLA_724:	dc.b 3, $20, $E, $FA, $8C, $3A, $9C	
0002762D 0320 0EFA A02A B0          SME_I2OLA_72B:	dc.b 3, $20, $E, $FA, $A0, $2A, $B0	
00027634 0720 0E2A 912A 952A 980A+  SME_I2OLA_732:	dc.b 7, $20, $E, $2A, $91, $2A, $95, $2A, $98, $A, $8F, $3A, $B5, $3A, $B9	
00027643 0350 3A50 4010 46          SME_I2OLA_741:	dc.b 3, $50, $3A, $50, $40, $10, $46	
0002764A 01B0 48                    SME_I2OLA_748:	dc.b 1, $B0, $48	
0002764D 0280 5A00 09               SME_I2OLA_74B:	dc.b 2, $80, $5A, 0, 9	
00027652 0707 2817 1617 1A27 1D07+  SME_I2OLA_750:	dc.b 7, 7, $28, $17, $16, $17, $1A, $27, $1D, 7, $19, 7, $15, $27, $21	
00027661 0350 6350 6910 6F          SME_I2OLA_75F:	dc.b 3, $50, $63, $50, $69, $10, $6F	
00027668 01B0 71                    SME_I2OLA_766:	dc.b 1, $B0, $71	
0002766B 0257 2907 2F               SME_I2OLA_769:	dc.b 2, $57, $29, 7, $2F	
00027670 0230 7D50 81               SME_I2OLA_76E:	dc.b 2, $30, $7D, $50, $81	
00027675 0550 8750 8D20 9350 9600+  SME_I2OLA_773:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
00027680 0650 8710 9D30 9F50 A330+  SME_I2OLA_77E:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
0002768D 0450 AE10 B470 B620 BE     SME_I2OLA_78B:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
00027696 03F9 7539 8539 89          SME_I2OLA_794:	dc.b 3, $F9, $75, $39, $85, $39, $89	
0002769D 0550 C130 C770 CB20 D310+  SME_I2OLA_79B:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
000276A8 0450 C110 D870 DA20 E2     SME_I2OLA_7A6:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
000276B1 03F9 8D39 9D39 A1          SME_I2OLA_7AF:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
000276B8 0550 8710 9D00 9370 E520+  SME_I2OLA_7B6:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
000276C3 0350 F810 FE51 00          SME_I2OLA_7C1:	dc.b 3, $50, $F8, $10, $FE, $51, 0	
000276CA 01B1 06                    SME_I2OLA_7C8:	dc.b 1, $B1, 6	
000276CD 0181 18                    SME_I2OLA_7CB:	dc.b 1, $81, $18	
000276D0 0308 FF89 0B29 01          SME_I2OLA_7CE:	dc.b 3, 8, $FF, $89, $B, $29, 1	
000276D7 0351 2111 2751 29          SME_I2OLA_7D5:	dc.b 3, $51, $21, $11, $27, $51, $29	
000276DE 01B1 2F                    SME_I2OLA_7DC:	dc.b 1, $B1, $2F	
000276E1 0319 1F09 1639 1B          SME_I2OLA_7DF:	dc.b 3, $19, $1F, 9, $16, $39, $1B	
000276E8 0201 0681 3B               SME_I2OLA_7E6:	dc.b 2, 1, 6, $81, $3B	
000276ED 0651 4411 4A11 4C81 4E01+  SME_I2OLA_7EB:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
000276FA 0651 4421 5911 5C11 5E81+  SME_I2OLA_7F8:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
00027707 0451 6911 6F81 7111 7A     SME_I2OLA_805:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
00027710 03F9 A529 B529 B8          SME_I2OLA_80E:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
00027717 0551 7C21 8211 8571 8721+  SME_I2OLA_815:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
00027722 0451 7C11 9281 9411 9D     SME_I2OLA_820:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
0002772B 03F9 BB29 CB19 CE          SME_I2OLA_829:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
00027732 0551 4481 9F11 5E11 A801+  SME_I2OLA_830:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
0002773D 03BA D32A DF0A E2          SME_I2OLA_83B:	dc.b 3, $BA, $D3, $2A, $DF, $A, $E2	
00027744 05BA E31A EF1A F11A F30A+  SME_I2OLA_842:	dc.b 5, $BA, $E3, $1A, $EF, $1A, $F1, $1A, $F3, $A, $F5	
0002774F 04BA F61B 022B 042B 07     SME_I2OLA_84D:	dc.b 4, $BA, $F6, $1B, 2, $2B, 4, $2B, 7	
00027758 04BB 0A1B 162B 182B 1B     SME_I2OLA_856:	dc.b 4, $BB, $A, $1B, $16, $2B, $18, $2B, $1B	
00027761 02FB 1E7B 2E               SME_I2OLA_85F:	dc.b 2, $FB, $1E, $7B, $2E	
00027766 02FB 367B 46               SME_I2OLA_864:	dc.b 2, $FB, $36, $7B, $46	
0002776B 02FB 1E7B 2E               SME_I2OLA_869:	dc.b 2, $FB, $1E, $7B, $2E	
00027770 02FB 367B 46               SME_I2OLA_86E:	dc.b 2, $FB, $36, $7B, $46	
00027775 023B 4EFB 52               SME_I2OLA_873:	dc.b 2, $3B, $4E, $FB, $52	
0002777A 03FB 623B 722B 76          SME_I2OLA_878:	dc.b 3, $FB, $62, $3B, $72, $2B, $76	
00027781 03FB 792B 892B 8C          SME_I2OLA_87F:	dc.b 3, $FB, $79, $2B, $89, $2B, $8C	
00027788 078B 970B 8F3B 900B 960B+  SME_I2OLA_886:	dc.b 7, $8B, $97, $B, $8F, $3B, $90, $B, $96, $B, $95, $B, $94, $1B, $A0	
00027797 02FB 1E7B 2E               SME_I2OLA_895:	dc.b 2, $FB, $1E, $7B, $2E	
0002779C 02FB 367B 46               SME_I2OLA_89A:	dc.b 2, $FB, $36, $7B, $46	
000277A1 02FB 1E7B 2E               SME_I2OLA_89F:	dc.b 2, $FB, $1E, $7B, $2E	
000277A6 02FB 367B 46               SME_I2OLA_8A4:	dc.b 2, $FB, $36, $7B, $46	
000277AB 032D 23FD 132D 26          SME_I2OLA_8A9:	dc.b 3, $2D, $23, $FD, $13, $2D, $26	
000277B2 04FD 293D 391D 3D0D 3F     SME_I2OLA_8B0:	dc.b 4, $FD, $29, $3D, $39, $1D, $3D, $D, $3F	
000277BB 00                         SME_I2OLA_8B9:	dc.b 0	
000277BC 00                         SME_I2OLA_8BA:	dc.b 0	
000277BD 03BD 403D 4C5D 50          SME_I2OLA_8BB:	dc.b 3, $BD, $40, $3D, $4C, $5D, $50	
000277C4 03BD 567D 621D 6A          SME_I2OLA_8C2:	dc.b 3, $BD, $56, $7D, $62, $1D, $6A	
000277CB 00                         SME_I2OLA_8C9:	dc.b 0	
000277CC 00                         SME_I2OLA_8CA:	dc.b 0	
000277CD 023B A2FB A6               SME_I2OLA_8CB:	dc.b 2, $3B, $A2, $FB, $A6	
000277D2 01FB B6                    SME_I2OLA_8D0:	dc.b 1, $FB, $B6	
000277D5 02FB C67B D6               SME_I2OLA_8D3:	dc.b 2, $FB, $C6, $7B, $D6	
000277DA 02FB DE7B EE               SME_I2OLA_8D8:	dc.b 2, $FB, $DE, $7B, $EE	
000277DF 02FB F67C 06               SME_I2OLA_8DD:	dc.b 2, $FB, $F6, $7C, 6	
000277E4 02FC 0E7C 1E               SME_I2OLA_8E2:	dc.b 2, $FC, $E, $7C, $1E	
000277E9 055C 267C 2C5C 340C 3A0C+  SME_I2OLA_8E7:	dc.b 5, $5C, $26, $7C, $2C, $5C, $34, $C, $3A, $C, $3B	
000277F4 05BC 3C3C 481C 4C1C 4E2C+  SME_I2OLA_8F2:	dc.b 5, $BC, $3C, $3C, $48, $1C, $4C, $1C, $4E, $2C, $50	
000277FF 02BC 535C 5F               SME_I2OLA_8FD:	dc.b 2, $BC, $53, $5C, $5F	
00027804 02BC 655C 71               SME_I2OLA_902:	dc.b 2, $BC, $65, $5C, $71	
00027809 02BC 775C 83               SME_I2OLA_907:	dc.b 2, $BC, $77, $5C, $83	
0002780E 02BC 895C 95               SME_I2OLA_90C:	dc.b 2, $BC, $89, $5C, $95	
00027813 02BC 9B5C A7               SME_I2OLA_911:	dc.b 2, $BC, $9B, $5C, $A7	
00027818 02BC AD5C B9               SME_I2OLA_916:	dc.b 2, $BC, $AD, $5C, $B9	
0002781D 02BC BF5C CB               SME_I2OLA_91B:	dc.b 2, $BC, $BF, $5C, $CB	
00027822 02BC D15C DD               SME_I2OLA_920:	dc.b 2, $BC, $D1, $5C, $DD	
00027827 02FC E37C F3               SME_I2OLA_925:	dc.b 2, $FC, $E3, $7C, $F3	
0002782C 02FC FB7D 0B               SME_I2OLA_92A:	dc.b 2, $FC, $FB, $7D, $B	
00027832 00                         		even
00027832 00                         		even
00027832                            
00027832                            ; ---------------------------------------------------------------------------
00027832                            ; Uncompressed graphics	- Sonic
00027832                            ; ---------------------------------------------------------------------------
00027832                            Art_Sonic:	incbin	"artunc\Sonic.bin"	; Sonic
0004EFD2                            		even
0004EFD2                            ; ---------------------------------------------------------------------------
0004EFD2                            ; Compressed graphics - various
0004EFD2                            ; ---------------------------------------------------------------------------
0004EFD2                            Art_GShield:	incbin	"artunc\Gold Shield.bin"
0004FC92                            		even
0004FC92                            Art_RedShield:	incbin	"artunc\Red Shield.bin"
00050952                            		even
00050952                            Art_SpShield:	incbin	"artunc\Gray Shield.bin"
00051612                            		even
00051612                            Art_Shield:	incbin	"artunc\Shield.bin"
000522D2                            		even
000522D2                            Unc_Stars:	incbin	"artunc\Invincibility Stars.bin"
000526D2                            		even
000526D2                            
000526D2                            Map_SSWalls:	include	"_maps\SS Walls.asm"
000526D2                            ; ---------------------------------------------------------------------------
000526D2                            ; Sprite mappings - walls of the special stage
000526D2                            ; ---------------------------------------------------------------------------
000526D2                            Map_SSWalls_internal:
000526D2 0000                       		dc.w byte_2C584-Map_SSWalls_internal
000526D4 0000                       		dc.w byte_2C58A-Map_SSWalls_internal
000526D6 0000                       		dc.w byte_2C590-Map_SSWalls_internal
000526D8 0000                       		dc.w byte_2C596-Map_SSWalls_internal
000526DA 0000                       		dc.w byte_2C59C-Map_SSWalls_internal
000526DC 0000                       		dc.w byte_2C5A2-Map_SSWalls_internal
000526DE 0000                       		dc.w byte_2C5A8-Map_SSWalls_internal
000526E0 0000                       		dc.w byte_2C5AE-Map_SSWalls_internal
000526E2 0000                       		dc.w byte_2C5B4-Map_SSWalls_internal
000526E4 0000                       		dc.w byte_2C5BA-Map_SSWalls_internal
000526E6 0000                       		dc.w byte_2C5C0-Map_SSWalls_internal
000526E8 0000                       		dc.w byte_2C5C6-Map_SSWalls_internal
000526EA 0000                       		dc.w byte_2C5CC-Map_SSWalls_internal
000526EC 0000                       		dc.w byte_2C5D2-Map_SSWalls_internal
000526EE 0000                       		dc.w byte_2C5D8-Map_SSWalls_internal
000526F0 0000                       		dc.w byte_2C5DE-Map_SSWalls_internal
000526F2 01                         byte_2C584:	dc.b 1
000526F3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000526F8 01                         byte_2C58A:	dc.b 1
000526F9 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
000526FE 01                         byte_2C590:	dc.b 1
000526FF F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00052704 01                         byte_2C596:	dc.b 1
00052705 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0005270A 01                         byte_2C59C:	dc.b 1
0005270B F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00052710 01                         byte_2C5A2:	dc.b 1
00052711 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00052716 01                         byte_2C5A8:	dc.b 1
00052717 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0005271C 01                         byte_2C5AE:	dc.b 1
0005271D F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00052722 01                         byte_2C5B4:	dc.b 1
00052723 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00052728 01                         byte_2C5BA:	dc.b 1
00052729 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0005272E 01                         byte_2C5C0:	dc.b 1
0005272F F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00052734 01                         byte_2C5C6:	dc.b 1
00052735 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0005273A 01                         byte_2C5CC:	dc.b 1
0005273B F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00052740 01                         byte_2C5D2:	dc.b 1
00052741 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00052746 01                         byte_2C5D8:	dc.b 1
00052747 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0005274C 01                         byte_2C5DE:	dc.b 1
0005274D F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00052752                            		even
00052752                            		even
00052752                            
00052752                            ; ---------------------------------------------------------------------------
00052752                            ; Compressed graphics - special stage
00052752                            ; ---------------------------------------------------------------------------
00052752                            Nem_SSWalls:	incbin	"artnem\Special Walls.bin" ; special stage walls
0005308A                            		even
0005308A                            Eni_SSBg1:	incbin	"tilemaps\SS Background 1.bin" ; special stage background (mappings)
000531BE                            		even
000531BE                            Nem_SSBgFish:	incbin	"artnem\Special Birds & Fish.bin" ; special stage birds and fish background
00053E4E                            		even
00053E4E                            Eni_SSBg2:	incbin	"tilemaps\SS Background 2.bin" ; special stage background (mappings)
0005414E                            		even
0005414E                            Nem_SSBgCloud:	incbin	"artnem\Special Clouds.bin" ; special stage clouds background
00054642                            		even
00054642                            Nem_SSGOAL:	incbin	"artnem\Special GOAL.bin" ; special stage GOAL block
00054730                            		even
00054730                            Nem_SSRBlock:	incbin	"artnem\Special R.bin"	; special stage R block
00054800                            		even
00054800                            Nem_SS1UpBlock:	incbin	"artnem\Special 1UP.bin" ; special stage 1UP block
000548F6                            		even
000548F6                            Nem_SSEmStars:	incbin	"artnem\Special Emerald Twinkle.bin" ; special stage stars from a collected emerald
00054954                            		even
00054954                            Nem_SSRedWhite:	incbin	"artnem\Special Red-White.bin" ; special stage red/white block
000549E6                            		even
000549E6                            Nem_SSZone1:	incbin	"artnem\Special ZONE1.bin" ; special stage ZONE1 block
00054AA8                            		even
00054AA8                            Nem_SSZone2:	incbin	"artnem\Special ZONE2.bin" ; ZONE2 block
00054B76                            		even
00054B76                            Nem_SSZone3:	incbin	"artnem\Special ZONE3.bin" ; ZONE3 block
00054C42                            		even
00054C42                            Nem_SSZone4:	incbin	"artnem\Special ZONE4.bin" ; ZONE4 block
00054D0A                            		even
00054D0A                            Nem_SSZone5:	incbin	"artnem\Special ZONE5.bin" ; ZONE5 block
00054DD4                            		even
00054DD4                            Nem_SSZone6:	incbin	"artnem\Special ZONE6.bin" ; ZONE6 block
00054EA4                            		even
00054EA4                            Nem_SSUpDown:	incbin	"artnem\Special UP-DOWN.bin" ; special stage UP/DOWN block
00055098                            		even
00055098                            Nem_SSEmerald:	incbin	"artnem\Special Emeralds.bin" ; special stage chaos emeralds
00055200                            		even
00055200                            Nem_SSGhost:	incbin	"artnem\Special Ghost.bin" ; special stage ghost block
000552B0                            		even
000552B0                            Nem_SSWBlock:	incbin	"artnem\Special W.bin"	; special stage W block
0005538A                            		even
0005538A                            Nem_SSGlass:	incbin	"artnem\Special Glass.bin" ; special stage destroyable glass block
0005540E                            		even
0005540E                            Nem_ResultEm:	incbin	"artnem\Special Result Emeralds.bin" ; chaos emeralds on special stage results screen
0005558C                            		even
0005558C                            ; ---------------------------------------------------------------------------
0005558C                            ; Compressed graphics - GHZ stuff
0005558C                            ; ---------------------------------------------------------------------------
0005558C                            Nem_Stalk:	incbin	"artnem\GHZ Flower Stalk.bin"
000555EE                            		even
000555EE                            Nem_Swing:	incbin	"artnem\GHZ Swinging Platform.bin"
00055708                            		even
00055708                            Nem_Bridge:	incbin	"artnem\GHZ Bridge.bin"
00055826                            		even
00055826                            Nem_GhzUnkBlock:incbin	"artnem\Unused - GHZ Block.bin"
0005586E                            		even
0005586E                            Nem_Ball:	incbin	"artnem\GHZ Giant Ball.bin"
00055A0C                            		even
00055A0C                            Nem_Spikes:	incbin	"artnem\Spikes.bin"
00055A88                            		even
00055A88                            Nem_GhzLog:	incbin	"artnem\Unused - GHZ Log.bin"
00055C9C                            		even
00055C9C                            Nem_SpikePole:	incbin	"artnem\GHZ Spiked Log.bin"
00055DC8                            		even
00055DC8                            Nem_PplRock:	incbin	"artnem\GHZ Purple Rock.bin"
00055F1C                            		even
00055F1C                            Nem_GhzWall1:	incbin	"artnem\GHZ Breakable Wall.bin"
00055FCC                            		even
00055FCC                            Nem_GhzWall2:	incbin	"artnem\GHZ Edge Wall.bin"
0005602C                            		even
0005602C                            ; ---------------------------------------------------------------------------
0005602C                            ; Compressed graphics - LZ stuff
0005602C                            ; ---------------------------------------------------------------------------
0005602C                            Nem_Water:	incbin	"artnem\LZ Water Surface.bin"
00056104                            		even
00056104                            Nem_Splash:	incbin	"artnem\LZ Water & Splashes.bin"
000568F8                            		even
000568F8                            Nem_LzSpikeBall:incbin	"artnem\LZ Spiked Ball & Chain.bin"
00056A8A 00                         		even
00056A8A                            Nem_FlapDoor:	incbin	"artnem\LZ Flapping Door.bin"
00056BF4                            		even
00056BF4                            Nem_Bubbles:	incbin	"artnem\LZ Bubbles & Countdown.bin"
00057234 00                         		even
00057234                            Nem_LzBlock3:	incbin	"artnem\LZ 32x16 Block.bin"
000572D6 00                         		even
000572D6                            Nem_LzDoor1:	incbin	"artnem\LZ Vertical Door.bin"
00057350 00                         		even
00057350                            Nem_Harpoon:	incbin	"artnem\LZ Harpoon.bin"
000574B6 00                         		even
000574B6                            Nem_LzPole:	incbin	"artnem\LZ Breakable Pole.bin"
0005753C 00                         		even
0005753C                            Nem_LzDoor2:	incbin	"artnem\LZ Horizontal Door.bin"
000576A8                            		even
000576A8                            Nem_LzWheel:	incbin	"artnem\LZ Wheel.bin"
00057B8A                            		even
00057B8A                            Nem_Gargoyle:	incbin	"artnem\LZ Gargoyle & Fireball.bin"
00057CFA                            		even
00057CFA                            Nem_LzBlock2:	incbin	"artnem\LZ Blocks.bin"
00057FB2                            		even
00057FB2                            Nem_LzPlatfm:	incbin	"artnem\LZ Rising Platform.bin"
000580F8                            		even
000580F8                            Nem_Cork:	incbin	"artnem\LZ Cork.bin"
00058222                            		even
00058222                            Nem_LzBlock1:	incbin	"artnem\LZ 32x32 Block.bin"
000583A2 00                         		even
000583A2                            ; ---------------------------------------------------------------------------
000583A2                            ; Compressed graphics - MZ stuff
000583A2                            ; ---------------------------------------------------------------------------
000583A2                            Nem_MzMetal:	incbin	"artnem\MZ Metal Blocks.bin"
00058630                            		even
00058630                            Nem_MzSwitch:	incbin	"artnem\MZ Switch.bin"
000586EE                            		even
000586EE                            Nem_MzGlass:	incbin	"artnem\MZ Green Glass Block.bin"
000587C6                            		even
000587C6                            Nem_UnkGrass:	incbin	"artnem\Unused - Grass.bin"
0005881A                            		even
0005881A                            Nem_MzFire:	incbin	"artnem\Fireballs.bin"
00058B38 00                         		even
00058B38                            Nem_Lava:	incbin	"artnem\MZ Lava.bin"
0005944E                            		even
0005944E                            Nem_MzBlock:	incbin	"artnem\MZ Green Pushable Block.bin"
000595BC                            		even
000595BC                            Nem_MzUnkBlock:	incbin	"artnem\Unused - MZ Background.bin"
00059644                            		even
00059644                            ; ---------------------------------------------------------------------------
00059644                            ; Compressed graphics - SLZ stuff
00059644                            ; ---------------------------------------------------------------------------
00059644                            Nem_Seesaw:	incbin	"artnem\SLZ Seesaw.bin"
00059880                            		even
00059880                            Nem_SlzSpike:	incbin	"artnem\SLZ Little Spikeball.bin"
000599C6                            		even
000599C6                            Nem_Fan:	incbin	"artnem\SLZ Fan.bin"
00059C0A                            		even
00059C0A                            Nem_SlzWall:	incbin	"artnem\SLZ Breakable Wall.bin"
00059CA6 00                         		even
00059CA6                            Nem_Pylon:	incbin	"artnem\SLZ Pylon.bin"
00059D88                            		even
00059D88                            Nem_SlzSwing:	incbin	"artnem\SLZ Swinging Platform.bin"
00059F6A                            		even
00059F6A                            Nem_SlzBlock:	incbin	"artnem\SLZ 32x32 Block.bin"
0005A076                            		even
0005A076                            Nem_SlzCannon:	incbin	"artnem\SLZ Cannon.bin"
0005A11A                            		even
0005A11A                            ; ---------------------------------------------------------------------------
0005A11A                            ; Compressed graphics - SYZ stuff
0005A11A                            ; ---------------------------------------------------------------------------
0005A11A                            Nem_Bumper:	incbin	"artnem\SYZ Bumper.bin"
0005A2AA                            		even
0005A2AA                            Nem_SyzSpike2:	incbin	"artnem\SYZ Small Spikeball.bin"
0005A30C                            		even
0005A30C                            Nem_LzSwitch:	incbin	"artnem\Switch.bin"
0005A428 00                         		even
0005A428                            Nem_SyzSpike1:	incbin	"artnem\SYZ Large Spikeball.bin"
0005A6B6                            		even
0005A6B6                            ; ---------------------------------------------------------------------------
0005A6B6                            ; Compressed graphics - SBZ stuff
0005A6B6                            ; ---------------------------------------------------------------------------
0005A6B6                            Nem_SbzWheel1:	incbin	"artnem\SBZ Running Disc.bin"
0005A70A                            		even
0005A70A                            Nem_SbzWheel2:	incbin	"artnem\SBZ Junction Wheel.bin"
0005A9A6                            		even
0005A9A6                            Nem_Cutter:	incbin	"artnem\SBZ Pizza Cutter.bin"
0005AB96                            		even
0005AB96                            Nem_Stomper:	incbin	"artnem\SBZ Stomper.bin"
0005AD34                            		even
0005AD34                            Nem_SpinPform:	incbin	"artnem\SBZ Spinning Platform.bin"
0005B064                            		even
0005B064                            Nem_TrapDoor:	incbin	"artnem\SBZ Trapdoor.bin"
0005B242                            		even
0005B242                            Nem_SbzFloor:	incbin	"artnem\SBZ Collapsing Floor.bin"
0005B29A                            		even
0005B29A                            Nem_Electric:	incbin	"artnem\SBZ Electrocuter.bin"
0005B44C 00                         		even
0005B44C                            Nem_SbzBlock:	incbin	"artnem\SBZ Vanishing Block.bin"
0005B568                            		even
0005B568                            Nem_FlamePipe:	incbin	"artnem\SBZ Flaming Pipe.bin"
0005B6F6                            		even
0005B6F6                            Nem_SbzDoor1:	incbin	"artnem\SBZ Small Vertical Door.bin"
0005B790                            		even
0005B790                            Nem_SlideFloor:	incbin	"artnem\SBZ Sliding Floor Trap.bin"
0005B7E8                            		even
0005B7E8                            Nem_SbzDoor2:	incbin	"artnem\SBZ Large Horizontal Door.bin"
0005B8E4                            		even
0005B8E4                            Nem_Girder:	incbin	"artnem\SBZ Crushing Girder.bin"
0005B9FA                            		even
0005B9FA                            ; ---------------------------------------------------------------------------
0005B9FA                            ; Compressed graphics - enemies
0005B9FA                            ; ---------------------------------------------------------------------------
0005B9FA                            Nem_BallHog:	incbin	"artnem\Enemy Ball Hog.bin"
0005BE42 00                         		even
0005BE42                            Nem_Crabmeat:	incbin	"artnem\Enemy Crabmeat.bin"
0005C332 00                         		even
0005C332                            Nem_Mozzietron:	incbin	"artnem\Enemy Mozzietron.bin"
0005C616 00                         		even
0005C616                            Nem_Buzz:	incbin	"artnem\Enemy Buzz Bomber.bin"
0005C9D6                            		even
0005C9D6                            Nem_UnkExplode:	incbin	"artnem\Unused - Explosion.bin"
0005CBBE                            		even
0005CBBE                            Nem_Burrobot:	incbin	"artnem\Enemy Burrobot.bin"
0005D2EC 00                         		even
0005D2EC                            Nem_Chopper:	incbin	"artnem\Enemy Chopper.bin"
0005D574 00                         		even
0005D574                            Nem_Jaws:	incbin	"artnem\Enemy Jaws.bin"
0005D810 00                         		even
0005D810                            Nem_Roller:	incbin	"artnem\Enemy Roller.bin"
0005DDE4                            		even
0005DDE4                            Nem_Motobug:	incbin	"artnem\Enemy Motobug.bin"
0005E076                            		even
0005E076                            Nem_Newtron:	incbin	"artnem\Enemy Newtron.bin"
0005E6C0 00                         		even
0005E6C0                            Nem_Yadrin:	incbin	"artnem\Enemy Yadrin.bin"
0005EAFC                            		even
0005EAFC                            Nem_Basaran:	incbin	"artnem\Enemy Basaran.bin"
0005EE0A 00                         		even
0005EE0A                            Nem_Splats:	incbin	"artnem\Enemy Splats.bin"
0005F06A                            		even
0005F06A                            Nem_Bomb:	incbin	"artnem\Enemy Bomb.bin"
0005F368                            		even
0005F368                            Nem_Orbinaut:	incbin	"artnem\Enemy Orbinaut.bin"
0005F594 00                         		even
0005F594                            Nem_Cater:	incbin	"artnem\Enemy Caterkiller.bin"
0005F722                            		even
0005F722                            ; ---------------------------------------------------------------------------
0005F722                            ; Compressed graphics - various
0005F722                            ; ---------------------------------------------------------------------------
0005F722                            Nem_TitleCard:	incbin	"artnem\Title Cards.bin"
0005FD82 00                         		even
0005FD82                            Nem_Hud:	incbin	"artnem\HUD.bin"	; HUD (rings, time, score)
0005FEFA 00                         		even
0005FEFA                            Nem_Lives:	incbin	"artnem\HUD - Life Counter Icon.bin"
0006001C 00                         		even
0006001C                            Nem_Future:	incbin	"artnem\HUD - Life Counter Icon Future.bin"
00060124 00                         		even
00060124                            Nem_Ring:	incbin	"artnem\Rings.bin"
00060278 00                         		even
00060278                            Nem_Monitors:	incbin	"artnem\Monitors.bin"
00060706                            		even
00060706                            Nem_Explode:	incbin	"artnem\Explosion.bin"
00060D7A                            		even
00060D7A                            Nem_Points:	incbin	"artnem\Points.bin"	; points from destroyed enemy or object
00060DE4                            		even
00060DE4                            Nem_GameOver:	incbin	"artnem\Game Over.bin"	; game over / time over
00060F76                            		even
00060F76                            Nem_HSpring:	incbin	"artnem\Spring Horizontal.bin"
00061094 00                         		even
00061094                            Nem_VSpring:	incbin	"artnem\Spring Vertical.bin"
00061180                            		even
00061180                            Nem_SignPost:	incbin	"artnem\Signpost.bin"	; end of level signpost
000616F8                            		even
000616F8                            Nem_Lamp:	incbin	"artnem\Lamppost.bin"
000617E2                            		even
000617E2                            Nem_BigFlash:	incbin	"artnem\Giant Ring Flash.bin"
00061956                            		even
00061956                            Nem_Bonus:	incbin	"artnem\Hidden Bonuses.bin" ; hidden bonuses at end of a level
00061CDE 00                         		even
00061CDE                            ; ---------------------------------------------------------------------------
00061CDE                            ; Compressed graphics - continue screen
00061CDE                            ; ---------------------------------------------------------------------------
00061CDE                            Nem_ContSonic:	incbin	"artnem\Continue Screen Sonic.bin"
00061FB2 00                         		even
00061FB2                            Nem_MiniSonic:	incbin	"artnem\Continue Screen Stuff.bin"
0006224C 00                         		even
0006224C                            ; ---------------------------------------------------------------------------
0006224C                            ; Compressed graphics - animals
0006224C                            ; ---------------------------------------------------------------------------
0006224C                            Nem_Rabbit:	incbin	"artnem\Animal Rabbit.bin"
000623A4                            		even
000623A4                            Nem_Chicken:	incbin	"artnem\Animal Chicken.bin"
00062500                            		even
00062500                            Nem_BlackBird:	incbin	"artnem\Animal Blackbird.bin"
0006267C                            		even
0006267C                            Nem_Seal:	incbin	"artnem\Animal Seal.bin"
00062798                            		even
00062798                            Nem_Pig:	incbin	"artnem\Animal Pig.bin"
00062912                            		even
00062912                            Nem_Flicky:	incbin	"artnem\Animal Flicky.bin"
00062A4C                            		even
00062A4C                            Nem_Squirrel:	incbin	"artnem\Animal Squirrel.bin"
00062BA8                            		even
00062BA8                            ; ---------------------------------------------------------------------------
00062BA8                            ; Compressed graphics - primary patterns and block mappings
00062BA8                            ; ---------------------------------------------------------------------------
00062BA8                            Blk16_GHZ:	incbin	"map16\GHZ.bin"
00063584                            		even
00063584                            Nem_GHZ_1st:	incbin	"artnem\8x8 - GHZ1.bin"	; GHZ primary patterns
00064ED4                            		even
00064ED4                            Nem_GHZ_2nd:	incbin	"artnem\8x8 - GHZ2.bin"	; GHZ secondary patterns
00066456                            		even
00066456                            Blk256_GHZ:	incbin	"map256\GHZ.bin"
00068850                            		even
00068850                            Blk16_TS:	incbin	"map16\TS.bin"
00068AD4                            		even
00068AD4                            Nem_TS_1st:	incbin	"artnem\8x8 - TS1.bin"	; GHZ primary patterns
00069C12                            		even
00069C12                            Blk256_TS:	incbin	"map256\TS.bin"
0006A7C0                            		even
0006A7C0                            Blk16_LZ:	incbin	"map16\LZ.bin"
0006B95E                            		even
0006B95E                            Nem_LZ:		incbin	"artnem\8x8 - LZ.bin"	; LZ primary patterns
0006EE06                            		even
0006EE06                            Blk256_LZ:	incbin	"map256\LZ.bin"
00072328                            		even
00072328                            Blk16_MZ:	incbin	"map16\MZ.bin"
00072B16                            		even
00072B16                            Nem_MZ:		incbin	"artnem\8x8 - MZ.bin"	; MZ primary patterns
000755A6                            		even
000755A6                            		incbin	"map256\MZ (JP1).bin"
000776E0                            		even
000776E0                            Blk16_SLZ:	incbin	"map16\SLZ.bin"
00077D62                            		even
00077D62                            Nem_SLZ:	incbin	"artnem\8x8 - SLZ.bin"	; SLZ primary patterns
0007B7CC                            		even
0007B7CC                            Blk256_SLZ:	incbin	"map256\SLZ.bin"
0007DBD6                            		even
0007DBD6                            Blk16_SYZ:	incbin	"map16\SYZ.bin"
0007E07A                            		even
0007E07A                            Nem_SYZ:	incbin	"artnem\8x8 - SYZ.bin"	; SYZ primary patterns
0007F852                            		even
0007F852                            Blk256_SYZ:	incbin	"map256\SYZ.bin"
0007FBBC                            		even
0007FBBC                            Blk16_SBZ:	incbin	"map16\SBZ.bin"
000807B6                            		even
000807B6                            Nem_SBZ:	incbin	"artnem\8x8 - SBZ.bin"	; SBZ primary patterns
00082FF8                            		even
00082FF8                            		incbin	"map256\SBZ (JP1).bin"
00083B84                            		even
00083B84                            ; ---------------------------------------------------------------------------
00083B84                            ; Compressed graphics - bosses and ending sequence
00083B84                            ; ---------------------------------------------------------------------------
00083B84                            Nem_Eggman:	incbin	"artnem\Boss - Main.bin"
000843EC                            		even
000843EC                            Nem_Weapons:	incbin	"artnem\Boss - Weapons.bin"
000846D6                            		even
000846D6                            Nem_Prison:	incbin	"artnem\Prison Capsule.bin"
00084F5A                            		even
00084F5A                            Nem_Sbz2Eggman:	incbin	"artnem\Boss - Eggman in SBZ2 & FZ.bin"
00085798 00                         		even
00085798                            Nem_FzBoss:	incbin	"artnem\Boss - Final Zone.bin"
00085F66 00                         		even
00085F66                            Nem_FzEggman:	incbin	"artnem\Boss - Eggman after FZ Fight.bin"
0008648E                            		even
0008648E                            Nem_Exhaust:	incbin	"artnem\Boss - Exhaust Flame.bin"
000865AE                            		even
000865AE                            Nem_EndEm:	incbin	"artnem\Ending - Emeralds.bin"
000867B6 00                         		even
000867B6                            Nem_EndSonic:	incbin	"artnem\Ending - Sonic.bin"
00087AA0 00                         		even
00087AA0                            Nem_TryAgain:	incbin	"artnem\Ending - Try Again.bin"
000883E4                            		even
000883E4                            		even
000883E4                            Kos_EndFlowers:	incbin	"artkos\Flowers at Ending.bin" ; ending sequence animated flowers
00088974                            		even
00088974                            Nem_EndFlower:	incbin	"artnem\Ending - Flowers.bin"
00088BFC                            		even
00088BFC                            Nem_CreditText:	incbin	"artnem\Ending - Credits.bin"
00089280                            		even
00089280                            Nem_EndStH:	incbin	"artnem\Ending - StH Logo.bin"
000895E4                            		even
000895E4                            
000895E4 FFFF FFFF FFFF FFFF FFFF+  		dcb.b $40,$FF
00089624                            ; ---------------------------------------------------------------------------
00089624                            ; Collision data
00089624                            ; ---------------------------------------------------------------------------
00089624                            AngleMap:	incbin	"collide\Angle Map.bin"
00089724                            		even
00089724                            CollArray1:	incbin	"collide\Collision Array (Normal).bin"
0008A724                            		even
0008A724                            CollArray2:	incbin	"collide\Collision Array (Rotated).bin"
0008B724                            		even
0008B724                            Col_GHZ:	incbin	"collide\GHZ.bin"	; GHZ index
0008B8D2 00                         		even
0008B8D2                            Col_LZ:		incbin	"collide\LZ.bin"	; LZ index
0008BB76                            		even
0008BB76                            Col_MZ:		incbin	"collide\MZ.bin"	; MZ index
0008BD1A 00                         		even
0008BD1A                            Col_SLZ:	incbin	"collide\SLZ.bin"	; SLZ index
0008BF0E                            		even
0008BF0E                            Col_SYZ:	incbin	"collide\SYZ.bin"	; SYZ index
0008BFE8                            		even
0008BFE8                            Col_SBZ:	incbin	"collide\SBZ.bin"	; SBZ index
0008C1B8                            		even
0008C1B8                            ; ---------------------------------------------------------------------------
0008C1B8                            ; Special Stage layouts
0008C1B8                            ; ---------------------------------------------------------------------------
0008C1B8                            SS_1:		incbin	"sslayout\1.bin"
0008C432                            		even
0008C432                            SS_2:		incbin	"sslayout\2.bin"
0008C844                            		even
0008C844                            SS_3:		incbin	"sslayout\3.bin"
0008CBA0                            		even
0008CBA0                            SS_4:		incbin	"sslayout\4.bin"
0008D07A                            		even
0008D07A                            	SS_5:		incbin	"sslayout\5 (JP1).bin"
0008D52A                            			even
0008D52A                            	SS_6:		incbin	"sslayout\6 (JP1).bin"
0008D81C                            		even
0008D81C                            ; ---------------------------------------------------------------------------
0008D81C                            ; Animated uncompressed graphics
0008D81C                            ; ---------------------------------------------------------------------------
0008D81C                            Art_GhzWater:	incbin	"artunc\GHZ Waterfall.bin"
0008DA1C                            		even
0008DA1C                            Art_GhzFlower1:	incbin	"artunc\GHZ Flower Large.bin"
0008DE1C                            		even
0008DE1C                            Art_GhzFlower2:	incbin	"artunc\GHZ Flower Small.bin"
0008E29C                            		even
0008E29C                            Art_MzLava1:	incbin	"artunc\MZ Lava Surface.bin"
0008E59C                            		even
0008E59C                            Art_MzLava2:	incbin	"artunc\MZ Lava.bin"
0008EB9C                            		even
0008EB9C                            Art_MzTorch:	incbin	"artunc\MZ Background Torch.bin"
0008EE9C                            		even
0008EE9C                            Art_SbzSmoke:	incbin	"artunc\SBZ Background Smoke.bin"
0008F91C                            		even
0008F91C                            
0008F91C                            ; ---------------------------------------------------------------------------
0008F91C                            ; Level	layout index
0008F91C                            ; ---------------------------------------------------------------------------
0008F91C                            Level_Index:
0008F91C                            		; GHZ
0008F91C 0000 0000 0000             		dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0008F922 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0008F928 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0008F92E 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0008F934                            		; LZ
0008F934 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0008F93A 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0008F940 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0008F946 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0008F94C                            		; MZ
0008F94C 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0008F952 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0008F958 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0008F95E 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0008F964                            		; SLZ
0008F964 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0008F96A 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0008F970 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0008F976 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0008F97C                            		; SYZ
0008F97C 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0008F982 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0008F988 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0008F98E 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0008F994                            		; SBZ
0008F994 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0008F99A 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0008F9A0 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0008F9A6 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0008F9AC                            		; Ending
0008F9AC 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0008F9B2 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0008F9B8 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0008F9BE 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0008F9C4                            
0008F9C4                            Level_GHZ1:	incbin	"levels\ghz1.bin"
0008FBF6                            		even
0008FBF6 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0008FBFA                            Level_GHZ2:	incbin	"levels\ghz2.bin"
0008FD34                            		even
0008FD34 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0008FD38                            Level_GHZ3:	incbin	"levels\ghz3.bin"
0008FE5A                            		even
0008FE5A                            Level_GHZbg:	incbin	"levels\ghzbg.bin"
0008FE98                            		even
0008FE98 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0008FE9C 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0008FEA0                            
0008FEA0                            Level_LZ1:	incbin	"levels\lz1.bin"
0008FF62                            		even
0008FF62                            Level_LZbg:	incbin	"levels\lzbg.bin"
00090064                            		even
00090064 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00090068                            Level_LZ2:	incbin	"levels\lz2.bin"
00090102                            		even
00090102 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00090106                            Level_LZ3:	incbin	"levels\lz3.bin"
00090220                            		even
00090220 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00090224                            Level_SBZ3:	incbin	"levels\sbz3.bin"
000902DE                            		even
000902DE 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
000902E2                            
000902E2                            Level_MZ1:	incbin	"levels\mz1.bin"
000903D4                            		even
000903D4                            Level_MZ1bg:	incbin	"levels\mz1bg.bin"
000904F6                            		even
000904F6                            Level_MZ2:	incbin	"levels\mz2.bin"
00090618                            		even
00090618                            Level_MZ2bg:	incbin	"levels\mz2bg.bin"
0009073A                            		even
0009073A 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0009073E                            Level_MZ3:	incbin	"levels\mz3.bin"
000907D8                            		even
000907D8                            Level_MZ3bg:	incbin	"levels\mz3bg.bin"
000908FA                            		even
000908FA 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
000908FE 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00090902                            
00090902                            Level_SLZ1:	incbin	"levels\slz1.bin"
00090A14                            		even
00090A14                            Level_SLZbg:	incbin	"levels\slzbg.bin"
00090A8E                            		even
00090A8E                            Level_SLZ2:	incbin	"levels\slz2.bin"
00090B7E                            		even
00090B7E                            Level_SLZ3:	incbin	"levels\slz3.bin"
00090C98                            		even
00090C98 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
00090C9C                            
00090C9C                            Level_SYZ1:	incbin	"levels\syz1.bin"
00090DA0                            		even
00090DA0                            		incbin	"levels\syzbg (JP1).bin"
00090DDA                            		even
00090DDA 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
00090DDE                            Level_SYZ2:	incbin	"levels\syz2.bin"
00090EE2                            		even
00090EE2 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00090EE6                            Level_SYZ3:	incbin	"levels\syz3.bin"
00091040 00                         		even
00091040 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00091044 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00091048                            
00091048                            Level_SBZ1:	incbin	"levels\sbz1.bin"
0009116A                            		even
0009116A                            Level_SBZ1bg:	incbin	"levels\sbz1bg.bin"
000911A8                            		even
000911A8                            Level_SBZ2:	incbin	"levels\sbz2.bin"
000912EA                            		even
000912EA                            Level_SBZ2bg:	incbin	"levels\sbz2bg.bin"
00091454                            		even
00091454 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00091458 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0009145C                            Level_End:	incbin	"levels\ending.bin"
0009148C 00                         		even
0009148C 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00091490                            
00091490                            
00091490                            Art_BigRing:	incbin	"artunc\Giant Ring.bin"
000920D0                            		even
000920D0                            
00092100                            
00092100                            ; ---------------------------------------------------------------------------
00092100                            ; Sprite locations index
00092100                            ; ---------------------------------------------------------------------------
00092100                            ObjPos_Index:
00092100                            		; GHZ
00092100 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092104 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092108 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009210C 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092110                            		; LZ
00092110 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092114 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092118 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009211C 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092120                            		; MZ
00092120 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092124 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092128 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009212C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092130                            		; SLZ
00092130 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092134 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092138 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009213C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092140                            		; SYZ
00092140 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092144 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092148 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009214C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092150                            		; SBZ
00092150 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092154 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092158 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009215C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092160                            		; Ending
00092160 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092164 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092168 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009216C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00092170                            		; --- Put extra object data here. ---
00092170                            ObjPosLZPlatform_Index:
00092170 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00092174 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00092178 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0009217C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00092180                            ObjPosSBZPlatform_Index:
00092180 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00092184 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00092188 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0009218C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00092190 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00092196                            ObjPos_GHZ1:	incbin	"objpos\ghz1.bin"
0009283E                            		even
0009283E                            ObjPos_GHZ2:	incbin	"objpos\ghz2.bin"
00092E5C                            		even
00092E5C                            		incbin	"objpos\ghz3 (JP1).bin"
0009346E                            		even
0009346E                            		incbin	"objpos\lz1 (JP1).bin"
000934A4                            		even
000934A4                            ObjPos_LZ2:	incbin	"objpos\lz2.bin"
000937E6                            		even
000937E6                            		incbin	"objpos\lz3 (JP1).bin"
00093DAA                            		even
00093DAA                            ObjPos_SBZ3:	incbin	"objpos\sbz3.bin"
00094314                            		even
00094314                            ObjPos_LZ1pf1:	incbin	"objpos\lz1pf1.bin"
00094346                            		even
00094346                            ObjPos_LZ1pf2:	incbin	"objpos\lz1pf2.bin"
00094378                            		even
00094378                            ObjPos_LZ2pf1:	incbin	"objpos\lz2pf1.bin"
000943AA                            		even
000943AA                            ObjPos_LZ2pf2:	incbin	"objpos\lz2pf2.bin"
000943DC                            		even
000943DC                            ObjPos_LZ3pf1:	incbin	"objpos\lz3pf1.bin"
00094426                            		even
00094426                            ObjPos_LZ3pf2:	incbin	"objpos\lz3pf2.bin"
00094464                            		even
00094464                            		incbin	"objpos\mz1 (JP1).bin"
00094A5E                            		even
00094A5E                            ObjPos_MZ2:	incbin	"objpos\mz2.bin"
00095088                            		even
00095088                            ObjPos_MZ3:	incbin	"objpos\mz3.bin"
00095376                            		even
00095376                            ObjPos_SLZ1:	incbin	"objpos\slz1.bin"
000958BC                            		even
000958BC                            ObjPos_SLZ2:	incbin	"objpos\slz2.bin"
00095D2A                            		even
00095D2A                            ObjPos_SLZ3:	incbin	"objpos\slz3.bin"
0009630C                            		even
0009630C                            ObjPos_SYZ1:	incbin	"objpos\syz1.bin"
00096582                            		even
00096582                            ObjPos_SYZ2:	incbin	"objpos\syz2.bin"
000967E0                            		even
000967E0                            		incbin	"objpos\syz3 (JP1).bin"
00096810                            		even
00096810                            		incbin	"objpos\sbz1 (JP1).bin"
00096858                            		even
00096858                            ObjPos_SBZ2:	incbin	"objpos\sbz2.bin"
00096882                            		even
00096882                            ObjPos_FZ:	incbin	"objpos\fz.bin"
000968BE                            		even
000968BE                            ObjPos_SBZ1pf1:	incbin	"objpos\sbz1pf1.bin"
000968F0                            		even
000968F0                            ObjPos_SBZ1pf2:	incbin	"objpos\sbz1pf2.bin"
00096922                            		even
00096922                            ObjPos_SBZ1pf3:	incbin	"objpos\sbz1pf3.bin"
00096954                            		even
00096954                            ObjPos_SBZ1pf4:	incbin	"objpos\sbz1pf4.bin"
00096986                            		even
00096986                            ObjPos_SBZ1pf5:	incbin	"objpos\sbz1pf5.bin"
000969B8                            		even
000969B8                            ObjPos_SBZ1pf6:	incbin	"objpos\sbz1pf6.bin"
000969F0                            		even
000969F0                            ObjPos_End:	incbin	"objpos\ending.bin"
00096B4C                            		even
00096B4C FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00096B52                            
00096B52                            		dcb.b $63C,$FF
0009718E                            		;dcb.b ($10000-(*%$10000))-(EndOfRom-SoundDriver),$FF
0009718E                            
0009718E                            SoundDriver:	include "s1.sounddriver.asm"
0009718E                            ; ---------------------------------------------------------------------------
0009718E                            ; Modified (early?) SMPS 68k Type 1b
0009718E                            ; ---------------------------------------------------------------------------
0009718E                            ; Go_SoundTypes:
0009718E 0000 0000                  Go_SoundPriorities:	dc.l SoundPriorities
00097192                            ; Go_SoundD0:
00097192 0000 0000                  Go_SpecSoundIndex:	dc.l SpecSoundIndex
00097196 0000 0000                  Go_MusicIndex:		dc.l MusicIndex
0009719A 0000 0000                  Go_SoundIndex:		dc.l SoundIndex
0009719E                            ; off_719A0:
0009719E 0000 0000                  Go_SpeedUpIndex:	dc.l SpeedUpIndex
000971A2 0000 0000                  Go_PSGIndex:		dc.l PSG_Index
000971A6                            ; ---------------------------------------------------------------------------
000971A6                            ; PSG instruments used in music
000971A6                            ; ---------------------------------------------------------------------------
000971A6                            PSG_Index:
000971A6 0000 0000 0000 0000 0000+  		dc.l PSG1, PSG2, PSG3
000971B2 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
000971BE 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
000971CA                            PSG1:		incbin	"sound/psg/psg1.bin"
000971E1                            PSG2:		incbin	"sound/psg/psg2.bin"
000971E8                            PSG3:		incbin	"sound/psg/psg3.bin"
000971F9                            PSG4:		incbin	"sound/psg/psg4.bin"
00097204                            PSG6:		incbin	"sound/psg/psg6.bin"
00097213                            PSG5:		incbin	"sound/psg/psg5.bin"
0009723D                            PSG7:		incbin	"sound/psg/psg7.bin"
00097259                            PSG8:		incbin	"sound/psg/psg8.bin"
00097281                            PSG9:		incbin	"sound/psg/psg9.bin"
00097292                            ; ---------------------------------------------------------------------------
00097292                            ; New tempos for songs during speed shoes
00097292                            ; ---------------------------------------------------------------------------
00097292                            ; DANGER! several songs will use the first few bytes of MusicIndex as their main
00097292                            ; tempos while speed shoes are active. If you don't want that, you should add
00097292                            ; their "correct" sped-up main tempos to the list.
00097292                            ; byte_71A94:
00097292                            SpeedUpIndex:
00097292 07                         		dc.b 7		; GHZ
00097293 72                         		dc.b $72	; LZ
00097294 73                         		dc.b $73	; MZ
00097295 26                         		dc.b $26	; SLZ
00097296 15                         		dc.b $15	; SYZ
00097297 08                         		dc.b 8		; SBZ
00097298 FF                         		dc.b $FF	; Invincibility
00097299 05                         		dc.b 5		; Extra Life
0009729A                            		;dc.b ?		; Special Stage
0009729A                            		;dc.b ?		; Title Screen
0009729A                            		;dc.b ?		; Ending
0009729A                            		;dc.b ?		; Boss
0009729A                            		;dc.b ?		; FZ
0009729A                            		;dc.b ?		; Sonic Got Through
0009729A                            		;dc.b ?		; Game Over
0009729A                            		;dc.b ?		; Continue Screen
0009729A                            		;dc.b ?		; Credits
0009729A                            		;dc.b ?		; Drowning
0009729A                            		;dc.b ?		; Get Emerald
0009729A                            
0009729A                            ; ---------------------------------------------------------------------------
0009729A                            ; Music	Pointers
0009729A                            ; ---------------------------------------------------------------------------
0009729A                            MusicIndex:
0009729A 0000 0000                  ptr_mus81:	dc.l Music81
0009729E 0000 0000                  ptr_mus82:	dc.l Music82
000972A2 0000 0000                  ptr_mus83:	dc.l Music83
000972A6 0000 0000                  ptr_mus84:	dc.l Music84
000972AA 0000 0000                  ptr_mus85:	dc.l Music85
000972AE 0000 0000                  ptr_mus86:	dc.l Music86
000972B2 0000 0000                  ptr_mus87:	dc.l Music87
000972B6 0000 0000                  ptr_mus88:	dc.l Music88
000972BA 0000 0000                  ptr_mus89:	dc.l Music89
000972BE 0000 0000                  ptr_mus8A:	dc.l Music8A
000972C2 0000 0000                  ptr_mus8B:	dc.l Music8B
000972C6 0000 0000                  ptr_mus8C:	dc.l Music8C
000972CA 0000 0000                  ptr_mus8D:	dc.l Music8D
000972CE 0000 0000                  ptr_mus8E:	dc.l Music8E
000972D2 0000 0000                  ptr_mus8F:	dc.l Music8F
000972D6 0000 0000                  ptr_mus90:	dc.l Music90
000972DA 0000 0000                  ptr_mus91:	dc.l Music91
000972DE 0000 0000                  ptr_mus92:	dc.l Music92
000972E2 0000 0000                  ptr_mus93:	dc.l Music93
000972E6 0000 0000                  ptr_mus94:	dc.l Music94
000972EA 0000 0000                  ptr_mus95:	dc.l Music95
000972EE 0000 0000                  ptr_mus96:	dc.l Music96
000972F2 0000 0000                  ptr_mus97:	dc.l Music97
000972F6 0000 0000                  ptr_mus98:	dc.l Music98
000972FA 0000 0000                  ptr_mus99:	dc.l Music99
000972FE 0000 0000                  ptr_mus9A:	dc.l Music9A
00097302 0000 0000                  ptr_mus9B:	dc.l Music9B
00097306 0000 0000                  ptr_mus9C:	dc.l Music9C
0009730A                            ptr_musend
0009730A                            ; ---------------------------------------------------------------------------
0009730A                            ; Priority of sound. New music or SFX must have a priority higher than or equal
0009730A                            ; to what is stored in v_sndprio or it won't play. If bit 7 of new priority is
0009730A                            ; set ($80 and up), the new music or SFX will not set its priority -- meaning
0009730A                            ; any music or SFX can override it (as long as it can override whatever was
0009730A                            ; playing before). Usually, SFX will only override SFX, special SFX ($D0-$DF)
0009730A                            ; will only override special SFX and music will only override music.
0009730A                            ; ---------------------------------------------------------------------------
0009730A                            ; SoundTypes:
0009730A                            SoundPriorities:
0009730A 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $81
00097319 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
00097329 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
00097339 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
00097349 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
00097359 8080 8080 8080 8080 8080+  		dc.b $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	; $D0
00097369 9090 9090 90               		dc.b $90,$90,$90,$90,$90                                            	; $E0
0009736E                            
0009736E                            ; ---------------------------------------------------------------------------
0009736E                            ; Subroutine to update music more than once per frame
0009736E                            ; (Called by horizontal & vert. interrupts)
0009736E                            ; ---------------------------------------------------------------------------
0009736E                            
0009736E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009736E                            
0009736E                            ; sub_71B4C:
0009736E                            UpdateMusic:
0009736E 33FC 0100 00A1 1100        		stopZ80
00097376 4E71                       		nop	
00097378 4E71                       		nop	
0009737A 4E71                       		nop	
0009737C                            ; loc_71B5A:
0009737C                            @updateloop:
0009737C 0839 0000 00A1 1100        		btst	#0,(z80_bus_request).l		; Is the z80 busy?
00097384 66F6                       		bne.s	@updateloop			; If so, wait
00097386                            
00097386 0839 0007 00A0 1FFD        		btst	#7,(z80_dac_status).l		; Is DAC accepting new samples?
0009738E 6700                       		beq.s	@driverinput			; Branch if yes
00097390 33FC 0000 00A1 1100        		startZ80
00097398 4E71                       		nop	
0009739A 4E71                       		nop	
0009739C 4E71                       		nop	
0009739E 4E71                       		nop	
000973A0 4E71                       		nop	
000973A2 60CA                       		bra.s	UpdateMusic
000973A4                            ; ===========================================================================
000973A4                            ; loc_71B82:
000973A4                            @driverinput:
000973A4 4DF9 00FF F000             		lea	(v_snddriver_ram&$FFFFFF).l,a6
000973AA 422E 000E                  		clr.b	f_voice_selector(a6)
000973AE 4A2E 0003                  		tst.b	f_pausemusic(a6)		; is music paused?
000973B2 6600 0000                  		bne.w	PauseMusic			; if yes, branch
000973B6 532E 0001                  		subq.b	#1,v_main_tempo_timeout(a6)	; Has main tempo timer expired?
000973BA 6600                       		bne.s	@skipdelay
000973BC 4EBA 0000                  		jsr	TempoWait(pc)
000973C0                            ; loc_71B9E:
000973C0                            @skipdelay:
000973C0 102E 0004                  		move.b	v_fadeout_counter(a6),d0
000973C4 6700                       		beq.s	@skipfadeout
000973C6 4EBA 0000                  		jsr	DoFadeOut(pc)
000973CA                            ; loc_71BA8:
000973CA                            @skipfadeout:
000973CA 4A2E 0024                  		tst.b	f_fadein_flag(a6)
000973CE 6700                       		beq.s	@skipfadein
000973D0 4EBA 0000                  		jsr	DoFadeIn(pc)
000973D4                            ; loc_71BB2:
000973D4                            @skipfadein:
000973D4                            		; DANGER! The following line only checks v_soundqueue0 and v_soundqueue1, breaking v_soundqueue2.
000973D4 4A6E 000A                  		tst.w	v_soundqueue0(a6)	; is a music or sound queued for played?
000973D8 6700                       		beq.s	@nosndinput		; if not, branch
000973DA 4EBA 0000                  		jsr	CycleSoundQueue(pc)
000973DE                            ; loc_71BBC:
000973DE                            @nosndinput:
000973DE 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; is song queue set for silence (empty)?
000973E4 6700                       		beq.s	@nonewsound		; If yes, branch
000973E6 4EBA 0000                  		jsr	PlaySoundID(pc)
000973EA                            ; loc_71BC8:
000973EA                            @nonewsound:
000973EA 4A38 C901                  		tst.b	($FFFFC901).w
000973EE 6700                       		beq.s	@cont
000973F0 5338 C901                  		subq.b	#1,($FFFFC901).w
000973F4                            		
000973F4                            @cont:
000973F4 4BEE 0040                  		lea	v_music_dac_track(a6),a5
000973F8 4A15                       		tst.b	(a5)			; Is DAC track playing? (TrackPlaybackControl)
000973FA 6A00                       		bpl.s	@dacdone		; Branch if not
000973FC 4EBA 0000                  		jsr	DACUpdateTrack(pc)
00097400                            ; loc_71BD4:
00097400                            @dacdone:
00097400 422E 0008                  		clr.b	f_updating_dac(a6)
00097404 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00097406                            ; loc_71BDA:
00097406                            @bgmfmloop:
00097406 DAFC 0030                  		adda.w	#TrackSz,a5
0009740A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0009740C 6A00                       		bpl.s	@bgmfmnext		; Branch if not
0009740E 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00097412                            ; loc_71BE6:
00097412                            @bgmfmnext:
00097412 51CF FFF2                  		dbf	d7,@bgmfmloop
00097416                            
00097416 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks
00097418                            ; loc_71BEC:
00097418                            @bgmpsgloop:
00097418 DAFC 0030                  		adda.w	#TrackSz,a5
0009741C 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0009741E 6A00                       		bpl.s	@bgmpsgnext		; Branch if not
00097420 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00097424                            ; loc_71BF8:
00097424                            @bgmpsgnext:
00097424 51CF FFF2                  		dbf	d7,@bgmpsgloop
00097428                            
00097428 1D7C 0080 000E             		move.b	#$80,f_voice_selector(a6)			; Now at SFX tracks
0009742E 7E02                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d7	; 3 FM tracks (SFX)
00097430                            ; loc_71C04:
00097430                            @sfxfmloop:
00097430 DAFC 0030                  		adda.w	#TrackSz,a5
00097434 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097436 6A00                       		bpl.s	@sfxfmnext		; Branch if not
00097438 4EBA 0000                  		jsr	FMUpdateTrack(pc)
0009743C                            ; loc_71C10:
0009743C                            @sfxfmnext:
0009743C 51CF FFF2                  		dbf	d7,@sfxfmloop
00097440                            
00097440 7E02                       		moveq	#((v_sfx_psg_tracks_end-v_sfx_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks (SFX)
00097442                            ; loc_71C16:
00097442                            @sfxpsgloop:
00097442 DAFC 0030                  		adda.w	#TrackSz,a5
00097446 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097448 6A00                       		bpl.s	@sfxpsgnext		; Branch of not
0009744A 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
0009744E                            ; loc_71C22:
0009744E                            @sfxpsgnext:
0009744E 51CF FFF2                  		dbf	d7,@sfxpsgloop
00097452                            		
00097452 1D7C 0040 000E             		move.b	#$40,f_voice_selector(a6) ; Now at special SFX tracks
00097458 DAFC 0030                  		adda.w	#TrackSz,a5
0009745C 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0009745E 6A00                       		bpl.s	@specfmdone		; Branch if not
00097460 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00097464                            ; loc_71C38:
00097464                            @specfmdone:
00097464 DAFC 0030                  		adda.w	#TrackSz,a5
00097468 4A15                       		tst.b	(a5)			; Is track playing (TrackPlaybackControl)
0009746A 6A00                       		bpl.s	DoStartZ80		; Branch if not
0009746C 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00097470                            ; loc_71C44:
00097470                            DoStartZ80:
00097470 33FC 0000 00A1 1100        		startZ80
00097478 0838 0006 FFF8             		btst #6,(v_megadrive).w ; is Megadrive PAL?
0009747E 6700                       		beq.s @end ; if not, branch
00097480 0C38 0005 F015             		cmpi.b #$5,(v_palmuscounter).w ; 5th frame?
00097486 6600                       		bne.s @end ; if not, branch
00097488 11FC 0000 F015             		move.b #$0,(v_palmuscounter).w ; reset counter
0009748E 6000 FEDE                  		bra.w UpdateMusic ; run sound driver again
00097492                            
00097492                            	@end:
00097492 5238 F015                  		addq.b #$1,(v_palmuscounter).w ; add 1 to frame count
00097496 4E75                       		rts
00097498                            ; End of function UpdateMusic
00097498                            
00097498                            
00097498                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097498                            
00097498                            ; sub_71C4E: UpdateDAC:
00097498                            DACUpdateTrack:
00097498 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Has DAC sample timeout expired?
0009749C 6600                       		bne.s	@locret				; Return if not
0009749E 1D7C 0080 0008             		move.b	#$80,f_updating_dac(a6)		; Set flag to indicate this is the DAC
000974A4                            ;DACDoNext:
000974A4 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; DAC track data pointer
000974A8                            ; loc_71C5E:
000974A8                            @sampleloop:
000974A8 7A00                       		moveq	#0,d5
000974AA 1A1C                       		move.b	(a4)+,d5	; Get next SMPS unit
000974AC 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
000974B0 6500                       		blo.s	@notcoord	; Branch if not
000974B2 4EBA 0000                  		jsr	CoordFlag(pc)
000974B6 60F0                       		bra.s	@sampleloop
000974B8                            ; ===========================================================================
000974B8                            ; loc_71C6E:
000974B8                            @notcoord:
000974B8 4A05                       		tst.b	d5			; Is it a sample?
000974BA 6A00                       		bpl.s	@gotduration		; Branch if not (duration)
000974BC 1B45 0010                  		move.b	d5,TrackSavedDAC(a5)	; Store new sample
000974C0 1A1C                       		move.b	(a4)+,d5		; Get another byte
000974C2 6A00                       		bpl.s	@gotduration		; Branch if it is a duration
000974C4 534C                       		subq.w	#1,a4			; Put byte back
000974C6 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5) ; Use last duration
000974CC 6000                       		bra.s	@gotsampleduration
000974CE                            ; ===========================================================================
000974CE                            ; loc_71C84:
000974CE                            @gotduration:
000974CE 4EBA 0000                  		jsr	SetDuration(pc)
000974D2                            ; loc_71C88:
000974D2                            @gotsampleduration:
000974D2 2B4C 0004                  		move.l	a4,TrackDataPointer(a5) ; Save pointer
000974D6 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000974DA 6600                       		bne.s	@locret			; Return if yes
000974DC 7000                       		moveq	#0,d0
000974DE 102D 0010                  		move.b	TrackSavedDAC(a5),d0	; Get sample
000974E2 0C00 0080                  		cmpi.b	#$80,d0			; Is it a rest?
000974E6 6700                       		beq.s	@locret			; Return if yes
000974E8 0800 0003                  		btst	#3,d0			; Is bit 3 set (samples between $88-$8F)?
000974EC 6600                       		bne.s	@timpani		; Various timpani
000974EE 13C0 00A0 1FFF             		move.b	d0,(z80_dac_sample).l
000974F4                            ; locret_71CAA:
000974F4                            @locret:
000974F4 4E75                       		rts	
000974F6                            ; ===========================================================================
000974F6                            ; loc_71CAC:
000974F6                            @timpani:
000974F6 0400 0088                  		subi.b	#$88,d0		; Convert into an index
000974FA 103B 0000                  		move.b	DAC_sample_rate(pc,d0.w),d0
000974FE                            		; Warning: this affects the raw pitch of sample $83, meaning it will
000974FE                            		; use this value from then on.
000974FE 13C0 00A0 00EA             		move.b	d0,(z80_dac3_pitch).l
00097504 13FC 0083 00A0 1FFF        		move.b	#$83,(z80_dac_sample).l	; Use timpani
0009750C 4E75                       		rts	
0009750E                            ; End of function DACUpdateTrack
0009750E                            
0009750E                            ; ===========================================================================
0009750E                            ; Note: this only defines rates for samples $88-$8D, meaning $8E-$8F are invalid.
0009750E                            ; Also, $8C-$8D are so slow you may want to skip them.
0009750E                            ; byte_71CC4:
0009750E 171A 2122 FFFF             DAC_sample_rate: dc.b $17, $1A, $21, $22, $FF, $FF
00097514                            
00097514                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097514                            
00097514                            ; sub_71CCA:
00097514                            FMUpdateTrack:
00097514 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5) ; Update duration timeout
00097518 6600                       		bne.s	@notegoing		; Branch if it hasn't expired
0009751A 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
0009751E 4EBA 0000                  		jsr	FMDoNext(pc)
00097522 4EBA 0000                  		jsr	FMPrepareNote(pc)
00097526 6000 0000                  		bra.w	FMNoteOn
0009752A                            ; ===========================================================================
0009752A                            ; loc_71CE0:
0009752A                            @notegoing:
0009752A 4EBA 0000                  		jsr	NoteTimeoutUpdate(pc)
0009752E 4EBA 0000                  		jsr	DoModulation(pc)
00097532 6000 0000                  		bra.w	FMUpdateFreq
00097536                            ; End of function FMUpdateTrack
00097536                            
00097536                            
00097536                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097536                            
00097536                            ; sub_71CEC:
00097536                            FMDoNext:
00097536 286D 0004                  		movea.l	TrackDataPointer(a5),a4 ; Track data pointer
0009753A 0895 0001                  		bclr	#1,(a5)			; Clear 'track at rest' bit (TrackPlaybackControl)
0009753E                            ; loc_71CF4:
0009753E                            @noteloop:
0009753E 7A00                       		moveq	#0,d5
00097540 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00097542 0C05 00E0                  		cmpi.b	#$E0,d5		; Is this a coord. flag?
00097546 6500                       		blo.s	@gotnote	; Branch if not
00097548 4EBA 0000                  		jsr	CoordFlag(pc)
0009754C 60F0                       		bra.s	@noteloop
0009754E                            ; ===========================================================================
0009754E                            ; loc_71D04:
0009754E                            @gotnote:
0009754E 4EBA 0000                  		jsr	FMNoteOff(pc)
00097552 4A05                       		tst.b	d5		; Is this a note?
00097554 6A00                       		bpl.s	@gotduration	; Branch if not
00097556 4EBA 0000                  		jsr	FMSetFreq(pc)
0009755A 1A1C                       		move.b	(a4)+,d5	; Get another byte
0009755C 6A00                       		bpl.s	@gotduration	; Branch if it is a duration
0009755E 534C                       		subq.w	#1,a4		; Otherwise, put it back
00097560 6000 0000                  		bra.w	FinishTrackUpdate
00097564                            ; ===========================================================================
00097564                            ; loc_71D1A:
00097564                            @gotduration:
00097564 4EBA 0000                  		jsr	SetDuration(pc)
00097568 6000 0000                  		bra.w	FinishTrackUpdate
0009756C                            ; End of function FMDoNext
0009756C                            
0009756C                            
0009756C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009756C                            
0009756C                            ; sub_71D22:
0009756C                            FMSetFreq:
0009756C 0405 0080                  		subi.b	#$80,d5			; Make it a zero-based index
00097570 6700                       		beq.s	TrackSetRest
00097572 DA2D 0008                  		add.b	TrackTranspose(a5),d5	; Add track transposition
00097576 0245 007F                  		andi.w	#$7F,d5			; Clear high byte and sign bit
0009757A E34D                       		lsl.w	#1,d5
0009757C 41FA 0000                  		lea	FMFrequencies(pc),a0
00097580 3C30 5000                  		move.w	(a0,d5.w),d6
00097584 3B46 0010                  		move.w	d6,TrackFreq(a5)	; Store new frequency
00097588 4E75                       		rts	
0009758A                            ; End of function FMSetFreq
0009758A                            
0009758A                            
0009758A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009758A                            
0009758A                            ; sub_71D40:
0009758A                            SetDuration:
0009758A 1005                       		move.b	d5,d0
0009758C 122D 0002                  		move.b	TrackTempoDivider(a5),d1	; Get dividing timing
00097590                            ; loc_71D46:
00097590                            @multloop:
00097590 5301                       		subq.b	#1,d1
00097592 6700                       		beq.s	@donemult
00097594 D005                       		add.b	d5,d0
00097596 60F8                       		bra.s	@multloop
00097598                            ; ===========================================================================
00097598                            ; loc_71D4E:
00097598                            @donemult:
00097598 1B40 000F                  		move.b	d0,TrackSavedDuration(a5)	; Save duration
0009759C 1B40 000E                  		move.b	d0,TrackDurationTimeout(a5)	; Save duration timeout
000975A0 4E75                       		rts	
000975A2                            ; End of function SetDuration
000975A2                            
000975A2                            ; ===========================================================================
000975A2                            ; loc_71D58:
000975A2                            TrackSetRest:
000975A2 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
000975A6 426D 0010                  		clr.w	TrackFreq(a5)	; Clear frequency
000975AA                            
000975AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000975AA                            
000975AA                            ; sub_71D60:
000975AA                            FinishTrackUpdate:
000975AA 2B4C 0004                  		move.l	a4,TrackDataPointer(a5)	; Store new track position
000975AE 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5)	; Reset note timeout
000975B4 0815 0004                  		btst	#4,(a5)				; Is track set to not attack note? (TrackPlaybackControl)
000975B8 6600                       		bne.s	@locret				; If so, branch
000975BA 1B6D 0013 0012             		move.b	TrackNoteTimeoutMaster(a5),TrackNoteTimeout(a5)	; Reset note fill timeout
000975C0 422D 000C                  		clr.b	TrackVolEnvIndex(a5)		; Reset PSG volume envelope index (even on FM tracks...)
000975C4 0815 0003                  		btst	#3,(a5)				; Is modulation on? (TrackPlaybackControl)
000975C8 6700                       		beq.s	@locret				; If not, return (TrackPlaybackControl)
000975CA 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Modulation data pointer
000975CE 1B58 0018                  		move.b	(a0)+,TrackModulationWait(a5)	; Reset wait
000975D2 1B58 0019                  		move.b	(a0)+,TrackModulationSpeed(a5)	; Reset speed
000975D6 1B58 001A                  		move.b	(a0)+,TrackModulationDelta(a5)	; Reset delta
000975DA 1018                       		move.b	(a0)+,d0			; Get steps
000975DC E208                       		lsr.b	#1,d0				; Halve them
000975DE 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; Then store
000975E2 426D 001C                  		clr.w	TrackModulationVal(a5)		; Reset frequency change
000975E6                            ; locret_71D9C:
000975E6                            @locret:
000975E6 4E75                       		rts	
000975E8                            ; End of function FinishTrackUpdate
000975E8                            
000975E8                            
000975E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000975E8                            
000975E8                            ; sub_71D9E: NoteFillUpdate
000975E8                            NoteTimeoutUpdate:
000975E8 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)	; Is note fill on?
000975EC 6700                       		beq.s	@locret
000975EE 532D 0012                  		subq.b	#1,TrackNoteTimeout(a5)	; Update note fill timeout
000975F2 6600                       		bne.s	@locret				; Return if it hasn't expired
000975F4 08D5 0001                  		bset	#1,(a5)				; Put track at rest (TrackPlaybackControl)
000975F8 4A2D 0001                  		tst.b	TrackVoiceControl(a5)		; Is this a psg track?
000975FC 6B00 0000                  		bmi.w	@psgnoteoff			; If yes, branch
00097600 4EBA 0000                  		jsr	FMNoteOff(pc)
00097604 584F                       		addq.w	#4,sp				; Do not return to caller
00097606 4E75                       		rts	
00097608                            ; ===========================================================================
00097608                            ; loc_71DBE:
00097608                            @psgnoteoff:
00097608 4EBA 0000                  		jsr	PSGNoteOff(pc)
0009760C 584F                       		addq.w	#4,sp		; Do not return to caller
0009760E                            ; locret_71DC4:
0009760E                            @locret:
0009760E 4E75                       		rts	
00097610                            ; End of function NoteTimeoutUpdate
00097610                            
00097610                            
00097610                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097610                            
00097610                            ; sub_71DC6:
00097610                            DoModulation:
00097610 584F                       		addq.w	#4,sp				; Do not return to caller (but see below)
00097612 0815 0003                  		btst	#3,(a5)				; Is modulation active? (TrackPlaybackControl)
00097616 6700                       		beq.s	@locret				; Return if not
00097618 4A2D 0018                  		tst.b	TrackModulationWait(a5)	; Has modulation wait expired?
0009761C 6700                       		beq.s	@waitdone			; If yes, branch
0009761E 532D 0018                  		subq.b	#1,TrackModulationWait(a5)	; Update wait timeout
00097622 4E75                       		rts	
00097624                            ; ===========================================================================
00097624                            ; loc_71DDA:
00097624                            @waitdone:
00097624 532D 0019                  		subq.b	#1,TrackModulationSpeed(a5)	; Update speed
00097628 6700                       		beq.s	@updatemodulation		; If it expired, want to update modulation
0009762A 4E75                       		rts	
0009762C                            ; ===========================================================================
0009762C                            ; loc_71DE2:
0009762C                            @updatemodulation:
0009762C 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Get modulation data
00097630 1B68 0001 0019             		move.b	1(a0),TrackModulationSpeed(a5)	; Restore modulation speed
00097636 4A2D 001B                  		tst.b	TrackModulationSteps(a5)	; Check number of steps
0009763A 6600                       		bne.s	@calcfreq			; If nonzero, branch
0009763C 1B68 0003 001B             		move.b	3(a0),TrackModulationSteps(a5)	; Restore from modulation data
00097642 442D 001A                  		neg.b	TrackModulationDelta(a5)	; Negate modulation delta
00097646 4E75                       		rts	
00097648                            ; ===========================================================================
00097648                            ; loc_71DFE:
00097648                            @calcfreq:
00097648 532D 001B                  		subq.b	#1,TrackModulationSteps(a5)	; Update modulation steps
0009764C 1C2D 001A                  		move.b	TrackModulationDelta(a5),d6	; Get modulation delta
00097650 4886                       		ext.w	d6
00097652 DC6D 001C                  		add.w	TrackModulationVal(a5),d6	; Add cumulative modulation change
00097656 3B46 001C                  		move.w	d6,TrackModulationVal(a5)	; Store it
0009765A DC6D 0010                  		add.w	TrackFreq(a5),d6		; Add note frequency to it
0009765E 594F                       		subq.w	#4,sp		; In this case, we want to return to caller after all
00097660                            ; locret_71E16:
00097660                            @locret:
00097660 4E75                       		rts	
00097662                            ; End of function DoModulation
00097662                            
00097662                            
00097662                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097662                            
00097662                            ; sub_71E18:
00097662                            FMPrepareNote:
00097662 0815 0001                  		btst	#1,(a5)			; Is track resting? (TrackPlaybackControl)
00097666 6600                       		bne.s	locret_71E48		; Return if so
00097668 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get current note frequency
0009766C 6700                       		beq.s	FMSetRest		; Branch if zero
0009766E                            ; loc_71E24:
0009766E                            FMUpdateFreq:
0009766E 102D 001E                  		move.b	TrackDetune(a5),d0 	; Get detune value
00097672 4880                       		ext.w	d0
00097674 DC40                       		add.w	d0,d6			; Add note frequency
00097676 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
0009767A 6600                       		bne.s	locret_71E48		; Return if so
0009767C 3206                       		move.w	d6,d1
0009767E E049                       		lsr.w	#8,d1
00097680 103C 00A4                  		move.b	#$A4,d0			; Register for upper 6 bits of frequency
00097684 4EBA 0000                  		jsr	WriteFMIorII(pc)
00097688 1206                       		move.b	d6,d1
0009768A 103C 00A0                  		move.b	#$A0,d0			; Register for lower 8 bits of frequency
0009768E 4EBA 0000                  		jsr	WriteFMIorII(pc)	; (It would be better if this were a jmp)
00097692                            ; locret_71E48:
00097692                            locret_71E48:
00097692 4E75                       		rts	
00097694                            ; ===========================================================================
00097694                            ; loc_71E4A:
00097694                            FMSetRest:
00097694 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00097698 4E75                       		rts	
0009769A                            ; End of function FMPrepareNote
0009769A                            
0009769A                            ; ===========================================================================
0009769A                            ; loc_71E50:
0009769A                            PauseMusic:
0009769A 6B00                       		bmi.s	@unpausemusic		; Branch if music is being unpaused
0009769C 0C2E 0002 0003             		cmpi.b	#2,f_pausemusic(a6)
000976A2 6700 0000                  		beq.w	@unpausedallfm
000976A6 1D7C 0002 0003             		move.b	#2,f_pausemusic(a6)
000976AC 7602                       		moveq	#2,d3
000976AE 103C 00B4                  		move.b	#$B4,d0		; Command to set AMS/FMS/panning
000976B2 7200                       		moveq	#0,d1		; No panning, AMS or FMS
000976B4                            ; loc_71E6A:
000976B4                            @killpanloop:
000976B4 4EBA 0000                  		jsr	WriteFMI(pc)
000976B8 4EBA 0000                  		jsr	WriteFMII(pc)
000976BC 5200                       		addq.b	#1,d0
000976BE 51CB FFF4                  		dbf	d3,@killpanloop
000976C2                            
000976C2 7602                       		moveq	#2,d3
000976C4 7028                       		moveq	#$28,d0		; Key on/off register
000976C6                            ; loc_71E7C:
000976C6                            @noteoffloop:
000976C6 1203                       		move.b	d3,d1		; FM1, FM2, FM3
000976C8 4EBA 0000                  		jsr	WriteFMI(pc)
000976CC 5801                       		addq.b	#4,d1		; FM4, FM5, FM6
000976CE 4EBA 0000                  		jsr	WriteFMI(pc)
000976D2 51CB FFF2                  		dbf	d3,@noteoffloop
000976D6                            
000976D6 4EBA 0000                  		jsr	PSGSilenceAll(pc)
000976DA 6000 FD94                  		bra.w	DoStartZ80
000976DE                            ; ===========================================================================
000976DE                            ; loc_71E94:
000976DE                            @unpausemusic:
000976DE 422E 0003                  		clr.b	f_pausemusic(a6)
000976E2 7630                       		moveq	#TrackSz,d3
000976E4 4BEE 0040                  		lea	v_music_fmdac_tracks(a6),a5
000976E8 7806                       		moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d4	; 6 FM + 1 DAC tracks
000976EA                            ; loc_71EA0:
000976EA                            @bgmfmloop:
000976EA 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
000976EE 6700                       		beq.s	@bgmfmnext		; Branch if not
000976F0 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000976F4 6600                       		bne.s	@bgmfmnext		; Branch if yes
000976F6 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
000976FA 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
000976FE 4EBA 0000                  		jsr	WriteFMIorII(pc)
00097702                            ; loc_71EB8:
00097702                            @bgmfmnext:
00097702 DAC3                       		adda.w	d3,a5
00097704 51CC FFE4                  		dbf	d4,@bgmfmloop
00097708                            
00097708 4BEE 0220                  		lea	v_sfx_fm_tracks(a6),a5
0009770C 7802                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d4	; 3 FM tracks (SFX)
0009770E                            ; loc_71EC4:
0009770E                            @sfxfmloop:
0009770E 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00097712 6700                       		beq.s	@sfxfmnext		; Branch if not
00097714 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00097718 6600                       		bne.s	@sfxfmnext		; Branch if yes
0009771A 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
0009771E 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00097722 4EBA 0000                  		jsr	WriteFMIorII(pc)
00097726                            ; loc_71EDC:
00097726                            @sfxfmnext:
00097726 DAC3                       		adda.w	d3,a5
00097728 51CC FFE4                  		dbf	d4,@sfxfmloop
0009772C                            
0009772C 4BEE 0340                  		lea	v_spcsfx_track_ram(a6),a5
00097730 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00097734 6700                       		beq.s	@unpausedallfm		; Branch if not
00097736 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
0009773A 6600                       		bne.s	@unpausedallfm		; Branch if yes
0009773C 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00097740 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00097744 4EBA 0000                  		jsr	WriteFMIorII(pc)
00097748                            ; loc_71EFE:
00097748                            @unpausedallfm:
00097748 6000 FD26                  		bra.w	DoStartZ80
0009774C                            
0009774C                            ; ---------------------------------------------------------------------------
0009774C                            ; Subroutine to	play a sound or	music track
0009774C                            ; ---------------------------------------------------------------------------
0009774C                            
0009774C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009774C                            
0009774C                            ; Sound_Play:
0009774C                            CycleSoundQueue:
0009774C 2079 0009 718E             		movea.l	(Go_SoundPriorities).l,a0
00097752 43EE 000A                  		lea	v_soundqueue0(a6),a1	; load music track number
00097756 1616                       		move.b	v_sndprio(a6),d3	; Get priority of currently playing SFX
00097758 7802                       		moveq	#2,d4			; Number of queues-1 (v_soundqueue0, v_soundqueue1, v_soundqueue2)
0009775A                            ; loc_71F12:
0009775A                            @inputloop:
0009775A 1011                       		move.b	(a1),d0			; move track number to d0
0009775C 1200                       		move.b	d0,d1
0009775E 4219                       		clr.b	(a1)+			; Clear entry
00097760 0400 0081                  		subi.b	#bgm__First,d0		; Make it into 0-based index
00097764 6500                       		bcs.s	@nextinput		; If negative (i.e., it was $80 or lower), branch
00097766 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; Is v_sound_id a $80 (silence/empty)?
0009776C 6700                       		beq.s	@havesound		; If yes, branch
0009776E 1D41 000A                  		move.b	d1,v_soundqueue0(a6)	; Put sound into v_soundqueue0
00097772 6000                       		bra.s	@nextinput
00097774                            ; ===========================================================================
00097774                            ; loc_71F2C:
00097774                            @havesound:
00097774 0240 007F                  		andi.w	#$7F,d0			; Clear high byte and sign bit
00097778 1430 0000                  		move.b	(a0,d0.w),d2		; Get sound type
0009777C B403                       		cmp.b	d3,d2			; Is it a lower priority sound?
0009777E 6500                       		blo.s	@nextinput		; Branch if yes
00097780 1602                       		move.b	d2,d3			; Store new priority
00097782 1D41 0009                  		move.b	d1,v_sound_id(a6)	; Queue sound for play
00097786                            ; loc_71F3E:
00097786                            @nextinput:
00097786 51CC FFD2                  		dbf	d4,@inputloop
0009778A                            
0009778A 4A03                       		tst.b	d3			; We don't want to change sound priority if it is negative
0009778C 6B00                       		bmi.s	@locret
0009778E 1C83                       		move.b	d3,v_sndprio(a6)	; Set new sound priority
00097790                            ; locret_71F4A:
00097790                            @locret:
00097790 4E75                       		rts	
00097792                            ; End of function CycleSoundQueue
00097792                            
00097792                            
00097792                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097792                            
00097792                            ; Sound_ChkValue:
00097792                            PlaySoundID:
00097792 7E00                       		moveq	#0,d7
00097794 1E2E 0009                  		move.b	v_sound_id(a6),d7
00097798 6700 0000                  		beq.w	StopAllSound
0009779C 6A00                       		bpl.s	@locret			; If >= 0, return (not a valid sound, bgm or command)
0009779E 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; reset	music flag
000977A4                            		; DANGER! Music ends at $93, yet this checks until $9F; attempting to
000977A4                            		; play sounds $94-$9F will cause a crash! Remove the '+$C' to fix this.
000977A4                            		; See LevSel_NoCheat for more.
000977A4 0C07 0000                  		cmpi.b	#bgm__Last,d7	; Is this music ($81-$9F)?
000977A8 6300 0000                  		bls.w	Sound_PlayBGM		; Branch if yes
000977AC 0C07 00A0                  		cmpi.b	#sfx__First,d7		; Is this after music but before sfx? (redundant check)
000977B0 6500 0000                  		blo.w	@locret			; Return if yes
000977B4 0C07 0000                  		cmpi.b	#sfx__Last,d7		; Is this sfx ($A0-$CF)?
000977B8 6300 0000                  		bls.w	Sound_PlaySFX		; Branch if yes
000977BC 0C07 00D0                  		cmpi.b	#spec__First,d7		; Is this after sfx but before special sfx? (redundant check)
000977C0 6500 0000                  		blo.w	@locret			; Return if yes
000977C4 0C07 00D1                  		cmpi.b	#$D1,d7
000977C8 6500 0000                  		bcs.w	Sound_PlaySpecial
000977CC 0C07 00DF                  		cmp.b	#$DF,d7
000977D0 6F00 0000                  		ble.w	Sound_D1toDF
000977D4 0C07 00E0                  		cmpi.b	#flg__First,d7		; Is this after special sfx but before $E0?
000977D8 6500 0000                  		blo.w	@locret			; Return if yes
000977DC 0C07 0000                  		cmpi.b	#flg__Last,d7		; Is this $E0-$E4?
000977E0 6300                       		bls.s	Sound_E0toE4		; Branch if yes
000977E2                            ; locret_71F8C:
000977E2                            @locret:
000977E2 4E75                       		rts	
000977E4                            ; ===========================================================================
000977E4                            
000977E4                            Sound_E0toE4:
000977E4 0407 00E0                  		subi.b	#flg__First,d7
000977E8 E54F                       		lsl.w	#2,d7
000977EA 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000977EE                            ; ===========================================================================
000977EE                            
000977EE                            Sound_ExIndex:
000977EE 6000 0000                  ptr_flgE0:	bra.w	FadeOutMusic		; $E0
000977F2 6000 0000                  ptr_flgE1:	bra.w	PlaySegaSound		; $E1
000977F6 6000 0000                  ptr_flgE2:	bra.w	SpeedUpMusic		; $E2
000977FA 6000 0000                  ptr_flgE3:	bra.w	SlowDownMusic		; $E3
000977FE 6000 0000                  ptr_flgE4:	bra.w	StopAllSound		; $E4
00097802                            ptr_flgend
00097802                            ; ===========================================================================
00097802                            ; ---------------------------------------------------------------------------
00097802                            ; Play "Say-gaa" PCM sound
00097802                            ; ---------------------------------------------------------------------------
00097802                            ; Sound_E1: PlaySega:
00097802                            PlaySegaSound:
00097802 13FC 0088 00A0 1FFF        		move.b	#$88,(z80_dac_sample).l	; Queue Sega PCM
0009780A 33FC 0000 00A1 1100        		startZ80
00097812 323C 0011                  		move.w	#$11,d1
00097816                            ; loc_71FC0:
00097816                            @busyloop_outer:
00097816 303C FFFF                  		move.w	#-1,d0
0009781A                            ; loc_71FC4:
0009781A                            @busyloop:
0009781A 4E71                       		nop	
0009781C 51C8 FFFC                  		dbf	d0,@busyloop
00097820                            
00097820 51C9 FFF4                  		dbf	d1,@busyloop_outer
00097824                            
00097824 584F                       		addq.w	#4,sp	; Tamper return value so we don't return to caller
00097826 4E75                       		rts	
00097828                            ; ===========================================================================
00097828                            ; ---------------------------------------------------------------------------
00097828                            ; Play music track $81-$9F
00097828                            ; ---------------------------------------------------------------------------
00097828                            ; Sound_81to9F:
00097828                            Sound_PlayBGM:
00097828 0C07 0000                  		cmpi.b	#bgm_ExtraLife,d7	; is the "extra life" music to be played?
0009782C 6600                       		bne.s	@bgmnot1up		; if not, branch
0009782E 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is a 1-up music playing?
00097832 6600 0000                  		bne.w	@locdblret		; if yes, branch
00097836 4BEE 0040                  		lea	v_music_track_ram(a6),a5
0009783A 7009                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d0	; 1 DAC + 6 FM + 3 PSG tracks
0009783C                            ; loc_71FE6:
0009783C                            @clearsfxloop:
0009783C 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00097840 DAFC 0030                  		adda.w	#TrackSz,a5
00097844 51C8 FFF6                  		dbf	d0,@clearsfxloop
00097848                            
00097848 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
0009784C 7005                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d0	; 3 FM + 3 PSG tracks (SFX)
0009784E                            ; loc_71FF8:
0009784E                            @cleartrackplayloop:
0009784E 0895 0007                  		bclr	#7,(a5)			; Clear 'track is playing' bit (TrackPlaybackControl)
00097852 DAFC 0030                  		adda.w	#TrackSz,a5
00097856 51C8 FFF6                  		dbf	d0,@cleartrackplayloop
0009785A                            
0009785A 4216                       		clr.b	v_sndprio(a6)		; Clear priority
0009785C 204E                       		movea.l	a6,a0
0009785E 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00097862 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Backup $220 bytes: all variables and music track data
00097866                            ; loc_72012:
00097866                            @backupramloop:
00097866 22D8                       		move.l	(a0)+,(a1)+
00097868 51C8 FFFC                  		dbf	d0,@backupramloop
0009786C                            
0009786C 1D7C 0080 0027             		move.b	#$80,f_1up_playing(a6)
00097872 4216                       		clr.b	v_sndprio(a6)		; Clear priority again (?)
00097874 6000                       		bra.s	@bgm_loadMusic
00097876                            ; ===========================================================================
00097876                            ; loc_72024:
00097876                            @bgmnot1up:
00097876 422E 0027                  		clr.b	f_1up_playing(a6)
0009787A 422E 0026                  		clr.b	v_fadein_counter(a6)
0009787E                            ; loc_7202C:
0009787E                            @bgm_loadMusic:
0009787E 4EBA 0000                  		jsr	InitMusicPlayback(pc)
00097882 2879 0009 719E             		movea.l	(Go_SpeedUpIndex).l,a4
00097888 0407 0081                  		subi.b	#bgm__First,d7
0009788C 1D74 7000 0029             		move.b	(a4,d7.w),v_speeduptempo(a6)
00097892 2879 0009 7196             		movea.l	(Go_MusicIndex).l,a4
00097898 E54F                       		lsl.w	#2,d7
0009789A 2874 7000                  		movea.l	(a4,d7.w),a4		; a4 now points to (uncompressed) song data
0009789E 7000                       		moveq	#0,d0
000978A0 3014                       		move.w	(a4),d0			; load voice pointer
000978A2 D08C                       		add.l	a4,d0			; It is a relative pointer
000978A4 2D40 0018                  		move.l	d0,v_voice_ptr(a6)
000978A8 102C 0005                  		move.b	5(a4),d0		; load tempo
000978AC 1D40 0028                  		move.b	d0,v_tempo_mod(a6)
000978B0                            		;tst.b	f_speedup(a6)
000978B0                            		;beq.s	@nospeedshoes
000978B0                            		;move.b	v_speeduptempo(a6),d0
000978B0                            ; loc_72068:
000978B0                            ;@nospeedshoes:
000978B0 1D40 0002                  		move.b	d0,v_main_tempo(a6)
000978B4 1D40 0001                  		move.b	d0,v_main_tempo_timeout(a6)
000978B8 7200                       		moveq	#0,d1
000978BA 264C                       		movea.l	a4,a3
000978BC 5C4C                       		addq.w	#6,a4			; Point past header
000978BE 7E00                       		moveq	#0,d7
000978C0 1E2B 0002                  		move.b	2(a3),d7		; load number of FM+DAC tracks
000978C4 6700 0000                  		beq.w	@bgm_fmdone		; branch if zero
000978C8 5307                       		subq.b	#1,d7
000978CA 123C 00C0                  		move.b	#$C0,d1			; Default AMS+FMS+Panning
000978CE 182B 0004                  		move.b	4(a3),d4		; load tempo dividing timing
000978D2 7C30                       		moveq	#TrackSz,d6
000978D4 1A3C 0001                  		move.b	#1,d5			; Note duration for first "note"
000978D8 43EE 0040                  		lea	v_music_fmdac_tracks(a6),a1
000978DC 45FA 0000                  		lea	FMDACInitBytes(pc),a2
000978E0                            ; loc_72098:
000978E0                            @bmg_fmloadloop:
000978E0 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
000978E4 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
000978E8 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
000978EC 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
000978F0 1341 000A                  		move.b	d1,TrackAMSFMSPan(a1)		; Set AMS/FMS/Panning
000978F4 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
000978F8 7000                       		moveq	#0,d0
000978FA 301C                       		move.w	(a4)+,d0			; load DAC/FM pointer
000978FC D08B                       		add.l	a3,d0				; Relative pointer
000978FE 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00097902 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load FM channel modifier
00097906 D2C6                       		adda.w	d6,a1
00097908 51CF FFD6                  		dbf	d7,@bmg_fmloadloop
0009790C                            		
0009790C 0C2B 0007 0002             		cmpi.b	#7,2(a3)	; Are 7 FM tracks defined?
00097912 6600                       		bne.s	@silencefm6
00097914 702B                       		moveq	#$2B,d0		; DAC enable/disable register
00097916 7200                       		moveq	#0,d1		; Disable DAC
00097918 4EBA 0000                  		jsr	WriteFMI(pc)
0009791C 6000 0000                  		bra.w	@bgm_fmdone
00097920                            ; ===========================================================================
00097920                            ; loc_720D8:
00097920                            @silencefm6:
00097920 7028                       		moveq	#$28,d0		; Key on/off register
00097922 7206                       		moveq	#6,d1		; Note off on all operators of channel 6
00097924 4EBA 0000                  		jsr	WriteFMI(pc)
00097928 103C 0042                  		move.b	#$42,d0		; TL for operator 1 of FM6
0009792C 727F                       		moveq	#$7F,d1		; Total silence
0009792E 4EBA 0000                  		jsr	WriteFMII(pc)
00097932 103C 004A                  		move.b	#$4A,d0		; TL for operator 3 of FM6
00097936 727F                       		moveq	#$7F,d1		; Total silence
00097938 4EBA 0000                  		jsr	WriteFMII(pc)
0009793C 103C 0046                  		move.b	#$46,d0		; TL for operator 2 of FM6
00097940 727F                       		moveq	#$7F,d1		; Total silence
00097942 4EBA 0000                  		jsr	WriteFMII(pc)
00097946 103C 004E                  		move.b	#$4E,d0		; TL for operator 4 of FM6
0009794A 727F                       		moveq	#$7F,d1		; Total silence
0009794C 4EBA 0000                  		jsr	WriteFMII(pc)
00097950 103C 00B6                  		move.b	#$B6,d0		; AMS/FMS/panning of FM6
00097954 123C 00C0                  		move.b	#$C0,d1		; Stereo
00097958 4EBA 0000                  		jsr	WriteFMII(pc)
0009795C                            ; loc_72114:
0009795C                            @bgm_fmdone:
0009795C 7E00                       		moveq	#0,d7
0009795E 1E2B 0003                  		move.b	3(a3),d7	; Load number of PSG tracks
00097962 6700                       		beq.s	@bgm_psgdone	; branch if zero
00097964 5307                       		subq.b	#1,d7
00097966 43EE 0190                  		lea	v_music_psg_tracks(a6),a1
0009796A 45FA 0000                  		lea	PSGInitBytes(pc),a2
0009796E                            ; loc_72126:
0009796E                            @bgm_psgloadloop:
0009796E 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00097972 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00097976 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
0009797A 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
0009797E 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00097982 7000                       		moveq	#0,d0
00097984 301C                       		move.w	(a4)+,d0			; load PSG channel pointer
00097986 D08B                       		add.l	a3,d0				; Relative pointer
00097988 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
0009798C 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load PSG modifier
00097990 101C                       		move.b	(a4)+,d0			; load redundant byte
00097992 135C 000B                  		move.b	(a4)+,TrackVoiceIndex(a1)	; Initial PSG tone
00097996 D2C6                       		adda.w	d6,a1
00097998 51CF FFD4                  		dbf	d7,@bgm_psgloadloop
0009799C                            ; loc_72154:
0009799C                            @bgm_psgdone:
0009799C 43EE 0220                  		lea	v_sfx_track_ram(a6),a1
000979A0 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 6 SFX tracks
000979A2                            ; loc_7215A:
000979A2                            @sfxstoploop:
000979A2 4A11                       		tst.b	(a1)		; Is SFX playing? (TrackPlaybackControl)
000979A4 6A00 0000                  		bpl.w	@sfxnext	; Branch if not
000979A8 7000                       		moveq	#0,d0
000979AA 1029 0001                  		move.b	TrackVoiceControl(a1),d0 ; Get voice control bits
000979AE 6B00                       		bmi.s	@sfxpsgchannel		; Branch if this is a PSG channel
000979B0 5500                       		subq.b	#2,d0			; SFX can't have FM1 or FM2
000979B2 E508                       		lsl.b	#2,d0			; Convert to index
000979B4 6000                       		bra.s	@gotchannelindex
000979B6                            ; ===========================================================================
000979B6                            ; loc_7216E:
000979B6                            @sfxpsgchannel:
000979B6 E608                       		lsr.b	#3,d0		; Convert to index
000979B8                            ; loc_72170:
000979B8                            @gotchannelindex:
000979B8 41FA 0000                  		lea	SFX_BGMChannelRAM(pc),a0
000979BC 2070 0000                  		movea.l	(a0,d0.w),a0
000979C0 08D0 0002                  		bset	#2,(a0)		; Set 'SFX is overriding' bit (TrackPlaybackControl)
000979C4                            ; loc_7217C:
000979C4                            @sfxnext:
000979C4 D2C6                       		adda.w	d6,a1
000979C6 51CF FFDA                  		dbf	d7,@sfxstoploop
000979CA                            
000979CA 4A6E 0340                  		tst.w	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
000979CE 6A00                       		bpl.s	@checkspecialpsg				; Branch if not
000979D0 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000979D6                            ; loc_7218E:
000979D6                            @checkspecialpsg:
000979D6 4A6E 0370                  		tst.w	v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Is special SFX being played?
000979DA 6A00                       		bpl.s	@sendfmnoteoff					; Branch if not
000979DC 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000979E2                            ; loc_7219A:
000979E2                            @sendfmnoteoff:
000979E2 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
000979E6 7805                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d4	; 6 FM tracks
000979E8                            ; loc_721A0:
000979E8                            @fmnoteoffloop:
000979E8 4EBA 0000                  		jsr	FMNoteOff(pc)
000979EC DAC6                       		adda.w	d6,a5
000979EE 51CC FFF8                  		dbf	d4,@fmnoteoffloop		; run all FM tracks
000979F2 7802                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d4 ; 3 PSG tracks
000979F4                            ; loc_721AC:
000979F4                            @psgnoteoffloop:
000979F4 4EBA 0000                  		jsr	PSGNoteOff(pc)
000979F8 DAC6                       		adda.w	d6,a5
000979FA 51CC FFF8                  		dbf	d4,@psgnoteoffloop		; run all PSG tracks
000979FE                            ; loc_721B6:
000979FE                            @locdblret:
000979FE 584F                       		addq.w	#4,sp	; Tamper with return value to not return to caller
00097A00 4E75                       		rts	
00097A02                            ; ===========================================================================
00097A02                            ; byte_721BA:
00097A02 0600 0102 0405 06          FMDACInitBytes:	dc.b 6,	0, 1, 2, 4, 5, 6	; first byte is for DAC; then notice the 0, 1, 2 then 4, 5, 6; this is the gap between parts I and II for YM2612 port writes
00097A0A 00                         		even
00097A0A                            ; byte_721C2:
00097A0A 80A0 C0                    PSGInitBytes:	dc.b $80, $A0, $C0	; Specifically, these configure writes to the PSG port for each channel
00097A0E 00                         		even
00097A0E                            ; ===========================================================================
00097A0E                            ; ---------------------------------------------------------------------------
00097A0E                            ; Play Spin Dash sound effect
00097A0E                            ; ---------------------------------------------------------------------------
00097A0E                            Sound_D1toDF:
00097A0E 4A2E 0027                  		tst.b	$27(a6)
00097A12 6600 0000                  		bne.w	loc_722C6
00097A16 4A2E 0004                  		tst.b	4(a6)
00097A1A 6600 0000                  		bne.w	loc_722C6
00097A1E 4A2E 0024                  		tst.b	$24(a6)
00097A22 6600 0000                  		bne.w	loc_722C6
00097A26 4238 C900                  		clr.b	($FFFFC900).w
00097A2A 0C07 00D5                  		cmp.b	#$D5,d7		; is this the Spin Dash sound?
00097A2E 6600                       		bne.s	@cont3	; if not, branch
00097A30 3F00                       		move.w	d0,-(sp)
00097A32 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
00097A36 4A38 C901                  		tst.b	($FFFFC901).w	; is the Spin Dash timer active?
00097A3A 6600                       		bne.s	@cont1		; if it is, branch
00097A3C 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
00097A40                            		
00097A40                            @cont1:
00097A40 5200                       		addq.b	#1,d0
00097A42 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
00097A46 6400                       		bcc.s	@cont2		; if it has, branch
00097A48 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
00097A4C                            		
00097A4C                            @cont2:
00097A4C 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
00097A52 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
00097A58 301F                       		move.w	(sp)+,d0
00097A5A                            		
00097A5A                            @cont3:	
00097A5A 2079 0009 719A             		movea.l	(Go_SoundIndex).l,a0
00097A60 0407 00A0                  		sub.b	#$A0,d7
00097A64 6000                       		bra.s	SoundEffects_Common
00097A66                            ; ---------------------------------------------------------------------------
00097A66                            ; Play normal sound effect
00097A66                            ; ---------------------------------------------------------------------------
00097A66                            ; Sound_A0toCF:
00097A66                            Sound_PlaySFX:
00097A66 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00097A6A 6600 0000                  		bne.w	loc_722C6		; Exit is it is
00097A6E 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00097A72 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00097A76 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00097A7A 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00097A7E 4238 C900                  		clr.b	($FFFFC900).w
00097A82 0C07 0000                  		cmpi.b	#sfx_Ring,d7		; is ring sound	effect played?
00097A86 6600                       		bne.s	Sound_notB5		; if not, branch
00097A88 4A2E 002B                  		tst.b	v_ring_speaker(a6)	; Is the ring sound playing on right speaker?
00097A8C 6600                       		bne.s	loc_721EE		; Branch if not
00097A8E 1E3C 0000                  		move.b	#sfx_RingLeft,d7	; play ring sound in left speaker
00097A92                            
00097A92                            loc_721EE:
00097A92 086E 0000 002B             		bchg	#0,v_ring_speaker(a6)	; change speaker
00097A98                            
00097A98                            Sound_notB5:
00097A98 0C07 0000                  		cmpi.b	#sfx_Push,d7		; is "pushing" sound played?
00097A9C 6600                       		bne.s	Sound_notA7		; if not, branch
00097A9E 4A2E 002C                  		tst.b	f_push_playing(a6)	; Is pushing sound already playing?
00097AA2 6600 0000                  		bne.w	locret_722C4			; Return if not
00097AA6 1D7C 0080 002C             		move.b	#$80,f_push_playing(a6)	; Mark it as playing
00097AAC                            		
00097AAC                            Sound_notA7:
00097AAC 2079 0009 719A             		movea.l	(Go_SoundIndex).l,a0
00097AB2 0407 00A0                  		subi.b	#sfx__First,d7		; Make it 0-based
00097AB6                            
00097AB6                            SoundEffects_Common:		
00097AB6 E54F                       		lsl.w	#2,d7			; Convert sfx ID into index
00097AB8 2670 7000                  		movea.l	(a0,d7.w),a3		; SFX data pointer
00097ABC 224B                       		movea.l	a3,a1
00097ABE 7200                       		moveq	#0,d1
00097AC0 3219                       		move.w	(a1)+,d1		; Voice pointer
00097AC2 D28B                       		add.l	a3,d1			; Relative pointer
00097AC4 1A19                       		move.b	(a1)+,d5		; Dividing timing	
00097AC6                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which SFXes whose
00097AC6                            		; index entry is above $3F will cause a crash. This is actually the same way that
00097AC6                            		; this bug is fixed in Ristar's driver.
00097AC6 7E00                       		moveq	#0,d7	
00097AC8 1E19                       		move.b	(a1)+,d7	; Number of tracks (FM + PSG)
00097ACA 5307                       		subq.b	#1,d7
00097ACC 7C30                       		moveq	#TrackSz,d6
00097ACE                            
00097ACE                            loc_72228:
00097ACE 7600                       		moveq	#0,d3
00097AD0 1629 0001                  		move.b	1(a1),d3	; Channel assignment bits
00097AD4 1803                       		move.b	d3,d4
00097AD6 6B00                       		bmi.s	loc_72244	; Branch if PSG
00097AD8 5543                       		subq.w	#2,d3		; SFX can only have FM3, FM4 or FM5
00097ADA E54B                       		lsl.w	#2,d3
00097ADC 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
00097AE0 2A75 3000                  		movea.l	(a5,d3.w),a5
00097AE4 08D5 0002                  		bset	#2,(a5)		; Mark music track as being overridden (TrackPlaybackControl)
00097AE8 6000                       		bra.s	loc_7226E
00097AEA                            ; ===========================================================================
00097AEA                            
00097AEA                            loc_72244:
00097AEA E64B                       		lsr.w	#3,d3
00097AEC 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
00097AF0 2A75 3000                  		movea.l	(a5,d3.w),a5
00097AF4 08D5 0002                  		bset	#2,(a5)			; Mark music track as being overridden (TrackPlaybackControl)
00097AF8 0C04 00C0                  		cmpi.b	#$C0,d4			; Is this PSG 3?
00097AFC 6600                       		bne.s	loc_7226E	; Branch if not
00097AFE 1004                       		move.b	d4,d0
00097B00 0000 001F                  		ori.b	#$1F,d0			; Command to silence PSG 3
00097B04 13C0 00C0 0011             		move.b	d0,(psg_input).l
00097B0A 0840 0005                  		bchg	#5,d0			; Command to silence noise channel
00097B0E 13C0 00C0 0011             		move.b	d0,(psg_input).l
00097B14                            
00097B14                            loc_7226E:
00097B14 4BFA 0000                  		lea	SFX_SFXChannelRAM(pc),a5
00097B18 2A75 3000                  		movea.l	(a5,d3.w),a5
00097B1C 244D                       		movea.l	a5,a2
00097B1E 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00097B20                            
00097B20                            loc_72276:
00097B20 429A                       		clr.l	(a2)+
00097B22 51C8 FFFC                  		dbf	d0,loc_72276
00097B26                            
00097B26 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits (TrackPlaybackControl)
00097B28 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)	; Initial voice control bits
00097B2C 7000                       		moveq	#0,d0
00097B2E 3019                       		move.w	(a1)+,d0			; Track data pointer
00097B30 D08B                       		add.l	a3,d0				; Relative pointer
00097B32 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
00097B36 3B59 0008                  		move.w	(a1)+,8(a5)
00097B3A 4A38 C900                  		tst.b	($FFFFC900).w	; is the Spin Dash sound playing?
00097B3E 6700                       		beq.s	@cont		; if not, branch
00097B40 3F00                       		move.w	d0,-(sp)
00097B42 1038 C902                  		move.b	($FFFFC902).w,d0
00097B46 D12D 0008                  		add.b	d0,8(a5)
00097B4A 301F                       		move.w	(sp)+,d0
00097B4C                            		
00097B4C                            @cont:
00097B4C 1B7C 0001 000E             		move.b	#1,$E(a5)
00097B52 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
00097B56 4A04                       		tst.b	d4				; Is this a PSG channel?
00097B58 6B00                       		bmi.s	loc_722A8		; Branch if yes
00097B5A 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00097B60 2B41 0020                  		move.l	d1,TrackVoicePtr(a5)		; Voice pointer
00097B64                            
00097B64                            loc_722A8:
00097B64 51CF FF68                  		dbf	d7,loc_72228
00097B68                            
00097B68 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00097B6C 6A00                       		bpl.s	loc_722B8				; Branch if not
00097B6E 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00097B74                            
00097B74                            loc_722B8:
00097B74 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is SFX being played?
00097B78 6A00                       		bpl.s	locret_722C4						; Branch if not
00097B7A 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00097B80                            
00097B80                            locret_722C4:
00097B80 4E75                       		rts	
00097B82                            ; ===========================================================================
00097B82                            
00097B82                            loc_722C6:
00097B82 4216                       		clr.b	v_sndprio(a6)	; Clear priority
00097B84 4E75                       		rts	
00097B86                            ; ===========================================================================
00097B86                            ; ---------------------------------------------------------------------------
00097B86                            ; RAM addresses for FM and PSG channel variables used by the SFX
00097B86                            ; ---------------------------------------------------------------------------
00097B86                            ; dword_722CC: BGMChannelRAM:
00097B86                            SFX_BGMChannelRAM:
00097B86 00FF F0D0                  		dc.l (v_snddriver_ram+v_music_fm3_track)&$FFFFFF
00097B8A 0000 0000                  		dc.l 0
00097B8E 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00097B92 00FF F130                  		dc.l (v_snddriver_ram+v_music_fm5_track)&$FFFFFF
00097B96 00FF F190                  		dc.l (v_snddriver_ram+v_music_psg1_track)&$FFFFFF
00097B9A 00FF F1C0                  		dc.l (v_snddriver_ram+v_music_psg2_track)&$FFFFFF
00097B9E 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Plain PSG3
00097BA2 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Noise
00097BA6                            ; dword_722EC: SFXChannelRAM:
00097BA6                            SFX_SFXChannelRAM:
00097BA6 00FF F220                  		dc.l (v_snddriver_ram+v_sfx_fm3_track)&$FFFFFF
00097BAA 0000 0000                  		dc.l 0
00097BAE 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00097BB2 00FF F280                  		dc.l (v_snddriver_ram+v_sfx_fm5_track)&$FFFFFF
00097BB6 00FF F2B0                  		dc.l (v_snddriver_ram+v_sfx_psg1_track)&$FFFFFF
00097BBA 00FF F2E0                  		dc.l (v_snddriver_ram+v_sfx_psg2_track)&$FFFFFF
00097BBE 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Plain PSG3
00097BC2 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Noise
00097BC6                            ; ===========================================================================
00097BC6                            ; ---------------------------------------------------------------------------
00097BC6                            ; Play GHZ waterfall sound
00097BC6                            ; ---------------------------------------------------------------------------
00097BC6                            ; Sound_D0toDF:
00097BC6                            Sound_PlaySpecial:
00097BC6 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00097BCA 6600 0000                  		bne.w	@locret			; Return if so
00097BCE 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00097BD2 6600 0000                  		bne.w	@locret			; Exit if it is
00097BD6 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00097BDA 6600 0000                  		bne.w	@locret			; Exit if it is
00097BDE 2079 0009 7192             		movea.l	(Go_SpecSoundIndex).l,a0
00097BE4 0407 00D0                  		subi.b	#spec__First,d7		; Make it 0-based
00097BE8 E54F                       		lsl.w	#2,d7
00097BEA 2670 7000                  		movea.l	(a0,d7.w),a3
00097BEE 224B                       		movea.l	a3,a1
00097BF0 7000                       		moveq	#0,d0
00097BF2 3019                       		move.w	(a1)+,d0			; Voice pointer
00097BF4 D08B                       		add.l	a3,d0				; Relative pointer
00097BF6 2D40 0020                  		move.l	d0,v_special_voice_ptr(a6)	; Store voice pointer
00097BFA 1A19                       		move.b	(a1)+,d5			; Dividing timing
00097BFC                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which special SFXes whose
00097BFC                            		; index entry is above $3F will cause a crash. This instance was not fixed in Ristar's driver.
00097BFC 7E00                       		moveq	#0,d7	
00097BFE 1E19                       		move.b	(a1)+,d7			; Number of tracks (FM + PSG)
00097C00 5307                       		subq.b	#1,d7
00097C02 7C30                       		moveq	#TrackSz,d6
00097C04                            ; loc_72348:
00097C04                            @sfxloadloop:
00097C04 1829 0001                  		move.b	1(a1),d4					; Voice control bits
00097C08 6B00                       		bmi.s	@sfxoverridepsg					; Branch if PSG
00097C0A 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00097C10 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00097C14 6000                       		bra.s	@sfxinitpsg
00097C16                            ; ===========================================================================
00097C16                            ; loc_7235A:
00097C16                            @sfxoverridepsg:
00097C16 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00097C1C 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00097C20                            ; loc_72364:
00097C20                            @sfxinitpsg:
00097C20 244D                       		movea.l	a5,a2
00097C22 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00097C24                            ; loc_72368:
00097C24                            @clearsfxtrackram:
00097C24 429A                       		clr.l	(a2)+
00097C26 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
00097C2A                            
00097C2A 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits & voice control bits (TrackPlaybackControl)
00097C2C 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)
00097C30 7000                       		moveq	#0,d0
00097C32 3019                       		move.w	(a1)+,d0			; Track data pointer
00097C34 D08B                       		add.l	a3,d0				; Relative pointer
00097C36 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
00097C3A 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
00097C3E 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
00097C44 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
00097C48 4A04                       		tst.b	d4				; Is this a PSG channel?
00097C4A 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
00097C4C 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00097C52                            ; loc_72396:
00097C52                            @sfxpsginitdone:
00097C52 51CF FFB0                  		dbf	d7,@sfxloadloop
00097C56                            
00097C56 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is track playing?
00097C5A 6A00                       		bpl.s	@doneoverride					; Branch if not
00097C5C 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00097C62                            ; loc_723A6:
00097C62                            @doneoverride:
00097C62 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is track playing?
00097C66 6A00                       		bpl.s	@locret						; Branch if not
00097C68 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00097C6E 0004 001F                  		ori.b	#$1F,d4						; Command to silence channel
00097C72 13C4 00C0 0011             		move.b	d4,(psg_input).l
00097C78 0844 0005                  		bchg	#5,d4			; Command to silence noise channel
00097C7C 13C4 00C0 0011             		move.b	d4,(psg_input).l
00097C82                            ; locret_723C6:
00097C82                            @locret:
00097C82 4E75                       		rts	
00097C84                            ; End of function PlaySoundID
00097C84                            
00097C84                            ; ===========================================================================
00097C84                            ; ---------------------------------------------------------------------------
00097C84                            ; Unused RAM addresses for FM and PSG channel variables used by the Special SFX
00097C84                            ; ---------------------------------------------------------------------------
00097C84                            ; The first block would have been used for overriding the music tracks
00097C84                            ; as they have a lower priority, just as they are in Sound_PlaySFX
00097C84                            ; The third block would be used to set up the Special SFX
00097C84                            ; The second block, however, is for the SFX tracks, which have a higher priority
00097C84                            ; and would be checked for if they're currently playing
00097C84                            ; If they are, then the third block would be used again, this time to mark
00097C84                            ; the new tracks as 'currently playing'
00097C84                            
00097C84                            ; These were actually used in Moonwalker's driver (and other SMPS 68k Type 1a drivers)
00097C84                            
00097C84                            ; BGMFM4PSG3RAM:
00097C84                            ;SpecSFX_BGMChannelRAM:
00097C84 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00097C88 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF
00097C8C                            ; SFXFM4PSG3RAM:
00097C8C                            ;SpecSFX_SFXChannelRAM:
00097C8C 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00097C90 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF
00097C94                            ; SpecialSFXFM4PSG3RAM:
00097C94                            ;SpecSFX_SpecSFXChannelRAM:
00097C94 00FF F340                  		dc.l (v_snddriver_ram+v_spcsfx_fm4_track)&$FFFFFF
00097C98 00FF F370                  		dc.l (v_snddriver_ram+v_spcsfx_psg3_track)&$FFFFFF
00097C9C                            
00097C9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097C9C                            
00097C9C                            ; Snd_FadeOut1: Snd_FadeOutSFX: FadeOutSFX:
00097C9C                            StopSFX:
00097C9C 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00097C9E 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00097CA2 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 3 FM + 3 PSG tracks (SFX)
00097CA4                            ; loc_723EA:
00097CA4                            @trackloop:
00097CA4 4A15                       		tst.b	(a5)		; Is track playing? (TrackPlaybackControl)
00097CA6 6A00 0000                  		bpl.w	@nexttrack	; Branch if not
00097CAA 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00097CAE 7600                       		moveq	#0,d3
00097CB0 162D 0001                  		move.b	TrackVoiceControl(a5),d3	; Get voice control bits
00097CB4 6B00                       		bmi.s	@trackpsg			; Branch if PSG
00097CB6 4EBA 0000                  		jsr	FMNoteOff(pc)
00097CBA 0C03 0004                  		cmpi.b	#4,d3						; Is this FM4?
00097CBE 6600                       		bne.s	@getfmpointer					; Branch if not
00097CC0 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00097CC4 6A00                       		bpl.s	@getfmpointer					; Branch if not
00097CC6                            		; DANGER! there is a missing 'movea.l	a5,a3' here, without which the
00097CC6                            		; code is broken. It is dangerous to do a fade out when a GHZ waterfall
00097CC6                            		; is playing its sound!
00097CC6 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00097CCA 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get special voice pointer
00097CCE 6000                       		bra.s	@gotfmpointer
00097CD0                            ; ===========================================================================
00097CD0                            ; loc_72416:
00097CD0                            @getfmpointer:
00097CD0 5503                       		subq.b	#2,d3		; SFX only has FM3 and up
00097CD2 E50B                       		lsl.b	#2,d3
00097CD4 41FA FEB0                  		lea	SFX_BGMChannelRAM(pc),a0
00097CD8 264D                       		movea.l	a5,a3
00097CDA 2A70 3000                  		movea.l	(a0,d3.w),a5
00097CDE 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get music voice pointer
00097CE2                            ; loc_72428:
00097CE2                            @gotfmpointer:
00097CE2 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00097CE6 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00097CEA 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00097CEE 4EBA 0000                  		jsr	SetVoice(pc)
00097CF2 2A4B                       		movea.l	a3,a5
00097CF4 6000                       		bra.s	@nexttrack
00097CF6                            ; ===========================================================================
00097CF6                            ; loc_7243C:
00097CF6                            @trackpsg:
00097CF6 4EBA 0000                  		jsr	PSGNoteOff(pc)
00097CFA 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00097CFE 0C03 00E0                  		cmpi.b	#$E0,d3			; Is this a noise channel:
00097D02 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00097D04 0C03 00C0                  		cmpi.b	#$C0,d3			; Is this PSG 3?
00097D08 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00097D0A E60B                       		lsr.b	#3,d3
00097D0C 41FA FE78                  		lea	SFX_BGMChannelRAM(pc),a0
00097D10 2070 3000                  		movea.l	(a0,d3.w),a0
00097D14                            ; loc_7245A:
00097D14                            @gotpsgpointer:
00097D14 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00097D18 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00097D1C 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise channel?
00097D22 6600                       		bne.s	@nexttrack			; Branch if not
00097D24 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise type
00097D2C                            ; loc_72472:
00097D2C                            @nexttrack:
00097D2C DAFC 0030                  		adda.w	#TrackSz,a5
00097D30 51CF FF72                  		dbf	d7,@trackloop
00097D34                            
00097D34 4E75                       		rts	
00097D36                            ; End of function StopSFX
00097D36                            
00097D36                            
00097D36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097D36                            
00097D36                            ; Snd_FadeOut2: FadeOutSFX2: FadeOutSpecialSFX:
00097D36                            StopSpecialSFX:
00097D36 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00097D3A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097D3C 6A00                       		bpl.s	@fadedfm		; Branch if not
00097D3E 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00097D42 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00097D46 6600                       		bne.s	@fadedfm		; Branch if not
00097D48 4EBA 0000                  		jsr	SendFMNoteOff(pc)
00097D4C 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00097D50 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00097D54 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00097D58 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097D5A 6A00                       		bpl.s	@fadedfm		; Branch if not
00097D5C 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00097D60 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00097D64 4EBA 0000                  		jsr	SetVoice(pc)
00097D68                            ; loc_724AE:
00097D68                            @fadedfm:
00097D68 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00097D6C 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097D6E 6A00                       		bpl.s	@fadedpsg		; Branch if not
00097D70 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00097D74 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00097D78 6600                       		bne.s	@fadedpsg		; Return if not
00097D7A 4EBA 0000                  		jsr	SendPSGNoteOff(pc)
00097D7E 4BEE 01F0                  		lea	v_music_psg3_track(a6),a5
00097D82 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00097D86 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00097D8A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097D8C 6A00                       		bpl.s	@fadedpsg		; Return if not
00097D8E 0C2D 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a5)	; Is this a noise channel?
00097D94 6600                       		bne.s	@fadedpsg			; Return if not
00097D96 13ED 001F 00C0 0011        		move.b	TrackPSGNoise(a5),(psg_input).l ; Set noise type
00097D9E                            ; locret_724E4:
00097D9E                            @fadedpsg:
00097D9E 4E75                       		rts	
00097DA0                            ; End of function StopSpecialSFX
00097DA0                            
00097DA0                            ; ===========================================================================
00097DA0                            ; ---------------------------------------------------------------------------
00097DA0                            ; Fade out music
00097DA0                            ; ---------------------------------------------------------------------------
00097DA0                            ; Sound_E0:
00097DA0                            FadeOutMusic:
00097DA0 4EBA FEFA                  		jsr	StopSFX(pc)
00097DA4 4EBA FF90                  		jsr	StopSpecialSFX(pc)
00097DA8 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)			; Set fadeout delay to 3
00097DAE 1D7C 0028 0004             		move.b	#$28,v_fadeout_counter(a6)		; Set fadeout counter
00097DB4 422E 0040                  		clr.b	v_music_dac_track+TrackPlaybackControl(a6)	; Stop DAC track
00097DB8 422E 002A                  		clr.b	f_speedup(a6)				; Disable speed shoes tempo
00097DBC 4E75                       		rts	
00097DBE                            
00097DBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097DBE                            
00097DBE                            ; sub_72504:
00097DBE                            DoFadeOut:
00097DBE 102E 0006                  		move.b	v_fadeout_delay(a6),d0	; Has fadeout delay expired?
00097DC2 6700                       		beq.s	@continuefade		; Branch if yes
00097DC4 532E 0006                  		subq.b	#1,v_fadeout_delay(a6)
00097DC8 4E75                       		rts	
00097DCA                            ; ===========================================================================
00097DCA                            ; loc_72510:
00097DCA                            @continuefade:
00097DCA 532E 0004                  		subq.b	#1,v_fadeout_counter(a6)	; Update fade counter
00097DCE 6700 0000                  		beq.w	StopAllSound			; Branch if fade is done
00097DD2 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)		; Reset fade delay
00097DD8 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00097DDC 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00097DDE                            ; loc_72524:
00097DDE                            @fmloop:
00097DDE 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097DE0 6A00                       		bpl.s	@nextfm			; Branch if not
00097DE2 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00097DE6 6A00                       		bpl.s	@sendfmtl		; Branch if still positive
00097DE8 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00097DEC 6000                       		bra.s	@nextfm
00097DEE                            ; ===========================================================================
00097DEE                            ; loc_72534:
00097DEE                            @sendfmtl:
00097DEE 4EBA 0000                  		jsr	SendVoiceTL(pc)
00097DF2                            ; loc_72538:
00097DF2                            @nextfm:
00097DF2 DAFC 0030                  		adda.w	#TrackSz,a5
00097DF6 51CF FFE6                  		dbf	d7,@fmloop
00097DFA                            
00097DFA 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00097DFC                            ; loc_72542:
00097DFC                            @psgloop:
00097DFC 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097DFE 6A00                       		bpl.s	@nextpsg		; branch if not
00097E00 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00097E04 0C2D 0010 0009             		cmpi.b	#$10,TrackVolume(a5)	; Is it greater than $F?
00097E0A 6500                       		blo.s	@sendpsgvol		; Branch if not
00097E0C 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00097E10 6000                       		bra.s	@nextpsg
00097E12                            ; ===========================================================================
00097E12                            ; loc_72558:
00097E12                            @sendpsgvol:
00097E12 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Store new volume attenuation
00097E16 4EBA 0000                  		jsr	SetPSGVolume(pc)
00097E1A                            ; loc_72560:
00097E1A                            @nextpsg:
00097E1A DAFC 0030                  		adda.w	#TrackSz,a5
00097E1E 51CF FFDC                  		dbf	d7,@psgloop
00097E22                            
00097E22 4E75                       		rts	
00097E24                            ; End of function DoFadeOut
00097E24                            
00097E24                            
00097E24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097E24                            
00097E24                            ; sub_7256A:
00097E24                            FMSilenceAll:
00097E24 7602                       		moveq	#2,d3		; 3 FM channels for each YM2612 parts
00097E26 7028                       		moveq	#$28,d0		; FM key on/off register
00097E28                            ; loc_7256E:
00097E28                            @noteoffloop:
00097E28 1203                       		move.b	d3,d1
00097E2A 4EBA 0000                  		jsr	WriteFMI(pc)
00097E2E 5801                       		addq.b	#4,d1		; Move to YM2612 part 1
00097E30 4EBA 0000                  		jsr	WriteFMI(pc)
00097E34 51CB FFF2                  		dbf	d3,@noteoffloop
00097E38                            
00097E38 7040                       		moveq	#$40,d0		; Set TL on FM channels...
00097E3A 727F                       		moveq	#$7F,d1		; ... to total attenuation...
00097E3C 7802                       		moveq	#2,d4		; ... for all 3 channels...
00097E3E                            ; loc_72584:
00097E3E                            @channelloop:
00097E3E 7603                       		moveq	#3,d3		; ... for all operators on each channel...
00097E40                            ; loc_72586:
00097E40                            @channeltlloop:
00097E40 4EBA 0000                  		jsr	WriteFMI(pc)	; ... for part 0...
00097E44 4EBA 0000                  		jsr	WriteFMII(pc)	; ... and part 1.
00097E48 5840                       		addq.w	#4,d0		; Next TL operator
00097E4A 51CB FFF4                  		dbf	d3,@channeltlloop
00097E4E                            
00097E4E 0400 000F                  		subi.b	#$F,d0		; Move to TL operator 1 of next channel
00097E52 51CC FFEA                  		dbf	d4,@channelloop
00097E56                            
00097E56 4E75                       		rts	
00097E58                            ; End of function FMSilenceAll
00097E58                            
00097E58                            ; ===========================================================================
00097E58                            ; ---------------------------------------------------------------------------
00097E58                            ; Stop music
00097E58                            ; ---------------------------------------------------------------------------
00097E58                            ; Sound_E4: StopSoundAndMusic:
00097E58                            StopAllSound:
00097E58 702B                       		moveq	#$2B,d0		; Enable/disable DAC
00097E5A 123C 0080                  		move.b	#$80,d1		; Enable DAC
00097E5E 4EBA 0000                  		jsr	WriteFMI(pc)
00097E62 7027                       		moveq	#$27,d0		; Timers, FM3/FM6 mode
00097E64 7200                       		moveq	#0,d1		; FM3/FM6 normal mode, disable timers
00097E66 4EBA 0000                  		jsr	WriteFMI(pc)
00097E6A 204E                       		movea.l	a6,a0
00097E6C                            		; DANGER! This should be clearing all variables and track data, but misses the last $10 bytes of v_spcsfx_psg3_track.
00097E6C                            		; Remove the '-$10' to fix this.
00097E6C 303C 00E7                  		move.w	#((v_spcsfx_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $390 bytes: all variables and most track data
00097E70                            ; loc_725B6:
00097E70                            @clearramloop:
00097E70 4298                       		clr.l	(a0)+
00097E72 51C8 FFFC                  		dbf	d0,@clearramloop
00097E76                            
00097E76 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00097E7C 4EBA FFA6                  		jsr	FMSilenceAll(pc)
00097E80 6000 0000                  		bra.w	PSGSilenceAll
00097E84                            
00097E84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097E84                            
00097E84                            ; sub_725CA:
00097E84                            InitMusicPlayback:
00097E84 204E                       		movea.l	a6,a0
00097E86                            		; Save several values
00097E86 1216                       		move.b	v_sndprio(a6),d1
00097E88 142E 0027                  		move.b	f_1up_playing(a6),d2
00097E8C 162E 002A                  		move.b	f_speedup(a6),d3
00097E90 182E 0026                  		move.b	v_fadein_counter(a6),d4
00097E94                            		; DANGER! Only v_soundqueue0 and v_soundqueue1 are backed up, once again breaking v_soundqueue2
00097E94 3A2E 000A                  		move.w	v_soundqueue0(a6),d5
00097E98 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $220 bytes: all variables and music track data
00097E9C                            ; loc_725E4:
00097E9C                            @clearramloop:
00097E9C 4298                       		clr.l	(a0)+
00097E9E 51C8 FFFC                  		dbf	d0,@clearramloop
00097EA2                            
00097EA2                            		; Restore the values saved above
00097EA2 1C81                       		move.b	d1,v_sndprio(a6)
00097EA4 1D42 0027                  		move.b	d2,f_1up_playing(a6)
00097EA8 1D43 002A                  		move.b	d3,f_speedup(a6)
00097EAC 1D44 0026                  		move.b	d4,v_fadein_counter(a6)
00097EB0 3D45 000A                  		move.w	d5,v_soundqueue0(a6)
00097EB4 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00097EBA                            		; DANGER! This silences ALL channels, even the ones being used
00097EBA                            		; by SFX, and not music! @sendfmnoteoff does this already, and
00097EBA                            		; doesn't affect SFX channels, either.
00097EBA                            		; This should be replaced with an 'rts'.
00097EBA 4EBA FF68                  		jsr	FMSilenceAll(pc)
00097EBE 6000 0000                  		bra.w	PSGSilenceAll
00097EC2                            		; DANGER! InitMusicPlayback, and Sound_PlayBGM for that matter,
00097EC2                            		; don't do a very good job of setting up the music tracks.
00097EC2                            		; Tracks that aren't defined in a music file's header don't have
00097EC2                            		; their channels defined, meaning @sendfmnoteoff won't silence
00097EC2                            		; hardware properly. In combination with removing the above
00097EC2                            		; calls to FMSilenceAll/PSGSilenceAll, this will cause hanging
00097EC2                            		; notes.
00097EC2                            		; To fix this, I suggest using this code, instead of an 'rts':
00097EC2                            		;lea	v_music_track_ram+TrackVoiceControl(a6),a1
00097EC2                            		;lea	FMDACInitBytes(pc),a2
00097EC2                            		;moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d1		; 7 DAC/FM tracks
00097EC2                            		;bsr.s	@writeloop
00097EC2                            		;lea	PSGInitBytes(pc),a2
00097EC2                            		;moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d1	; 3 PSG tracks
00097EC2                            
00097EC2                            ;@writeloop:
00097EC2                            		;move.b	(a2)+,(a1)		; Write track's channel byte
00097EC2                            		;lea	TrackSz(a1),a1		; Next track
00097EC2                            		;dbf	d1,@writeloop		; Loop for all DAC/FM/PSG tracks
00097EC2                            
00097EC2                            		;rts
00097EC2                            	
00097EC2                            ; End of function InitMusicPlayback
00097EC2                            
00097EC2                            
00097EC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097EC2                            
00097EC2                            ; sub_7260C:
00097EC2                            TempoWait:
00097EC2 1D6E 0002 0001             		move.b	v_main_tempo(a6),v_main_tempo_timeout(a6)	; Reset main tempo timeout
00097EC8 41EE 004E                  		lea	v_music_track_ram+TrackDurationTimeout(a6),a0	; note timeout
00097ECC 7030                       		moveq	#TrackSz,d0
00097ECE 7209                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d1		; 1 DAC + 6 FM + 3 PSG tracks
00097ED0                            ; loc_7261A:
00097ED0                            @tempoloop:
00097ED0 5210                       		addq.b	#1,(a0)	; Delay note by 1 frame
00097ED2 D0C0                       		adda.w	d0,a0	; Advance to next track
00097ED4 51C9 FFFA                  		dbf	d1,@tempoloop
00097ED8                            
00097ED8 4E75                       		rts	
00097EDA                            ; End of function TempoWait
00097EDA                            
00097EDA                            ; ===========================================================================
00097EDA                            ; ---------------------------------------------------------------------------
00097EDA                            ; Speed	up music
00097EDA                            ; ---------------------------------------------------------------------------
00097EDA                            ; Sound_E2:
00097EDA                            SpeedUpMusic:
00097EDA 4A2E 0027                  		tst.b	f_1up_playing(a6)
00097EDE 6600                       		bne.s	@speedup_1up
00097EE0 1D6E 0029 0002             		move.b	v_speeduptempo(a6),v_main_tempo(a6)
00097EE6 1D6E 0029 0001             		move.b	v_speeduptempo(a6),v_main_tempo_timeout(a6)
00097EEC 1D7C 0080 002A             		move.b	#$80,f_speedup(a6)
00097EF2 4E75                       		rts	
00097EF4                            ; ===========================================================================
00097EF4                            ; loc_7263E:
00097EF4                            @speedup_1up:
00097EF4 1D6E 03C9 03A2             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo(a6)
00097EFA 1D6E 03C9 03A1             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00097F00 1D7C 0080 03CA             		move.b	#$80,v_1up_ram_copy+f_speedup(a6)
00097F06 4E75                       		rts	
00097F08                            ; ===========================================================================
00097F08                            ; ---------------------------------------------------------------------------
00097F08                            ; Change music back to normal speed
00097F08                            ; ---------------------------------------------------------------------------
00097F08                            ; Sound_E3:
00097F08                            SlowDownMusic:
00097F08 4A2E 0027                  		tst.b	f_1up_playing(a6)
00097F0C 6600                       		bne.s	@slowdown_1up
00097F0E 1D6E 0028 0002             		move.b	v_tempo_mod(a6),v_main_tempo(a6)
00097F14 1D6E 0028 0001             		move.b	v_tempo_mod(a6),v_main_tempo_timeout(a6)
00097F1A 422E 002A                  		clr.b	f_speedup(a6)
00097F1E 4E75                       		rts	
00097F20                            ; ===========================================================================
00097F20                            ; loc_7266A:
00097F20                            @slowdown_1up:
00097F20 1D6E 03C8 03A2             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo(a6)
00097F26 1D6E 03C8 03A1             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00097F2C 422E 03CA                  		clr.b	v_1up_ram_copy+f_speedup(a6)
00097F30 4E75                       		rts	
00097F32                            
00097F32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097F32                            
00097F32                            ; sub_7267C:
00097F32                            DoFadeIn:
00097F32 4A2E 0025                  		tst.b	v_fadein_delay(a6)	; Has fadein delay expired?
00097F36 6700                       		beq.s	@continuefade		; Branch if yes
00097F38 532E 0025                  		subq.b	#1,v_fadein_delay(a6)
00097F3C 4E75                       		rts	
00097F3E                            ; ===========================================================================
00097F3E                            ; loc_72688:
00097F3E                            @continuefade:
00097F3E 4A2E 0026                  		tst.b	v_fadein_counter(a6)	; Is fade done?
00097F42 6700                       		beq.s	@fadedone		; Branch if yes
00097F44 532E 0026                  		subq.b	#1,v_fadein_counter(a6)	; Update fade counter
00097F48 1D7C 0002 0025             		move.b	#2,v_fadein_delay(a6)	; Reset fade delay
00097F4E 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00097F52 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00097F54                            ; loc_7269E:
00097F54                            @fmloop:
00097F54 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097F56 6A00                       		bpl.s	@nextfm			; Branch if not
00097F58 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00097F5C 4EBA 0000                  		jsr	SendVoiceTL(pc)
00097F60                            ; loc_726AA:
00097F60                            @nextfm:
00097F60 DAFC 0030                  		adda.w	#TrackSz,a5
00097F64 51CF FFEE                  		dbf	d7,@fmloop
00097F68 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7		; 3 PSG tracks
00097F6A                            ; loc_726B4:
00097F6A                            @psgloop:
00097F6A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097F6C 6A00                       		bpl.s	@nextpsg		; Branch if not
00097F6E 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00097F72 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get value
00097F76 0C06 0010                  		cmpi.b	#$10,d6			; Is it is < $10?
00097F7A 6500                       		blo.s	@sendpsgvol		; Branch if yes
00097F7C 7C0F                       		moveq	#$F,d6			; Limit to $F (maximum attenuation)
00097F7E                            ; loc_726C8:
00097F7E                            @sendpsgvol:
00097F7E 4EBA 0000                  		jsr	SetPSGVolume(pc)
00097F82                            ; loc_726CC:
00097F82                            @nextpsg:
00097F82 DAFC 0030                  		adda.w	#TrackSz,a5
00097F86 51CF FFE2                  		dbf	d7,@psgloop
00097F8A 4E75                       		rts	
00097F8C                            ; ===========================================================================
00097F8C                            ; loc_726D6:
00097F8C                            @fadedone:
00097F8C 08AE 0002 0040             		bclr	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Clear 'SFX overriding' bit
00097F92 422E 0024                  		clr.b	f_fadein_flag(a6)				; Stop fadein
00097F96 4E75                       		rts	
00097F98                            ; End of function DoFadeIn
00097F98                            
00097F98                            ; ===========================================================================
00097F98                            ; loc_726E2:
00097F98                            FMNoteOn:
00097F98 0815 0001                  		btst	#1,(a5)		; Is track resting? (TrackPlaybackControl)
00097F9C 6600                       		bne.s	@locret		; Return if so
00097F9E 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00097FA2 6600                       		bne.s	@locret		; Return if so
00097FA4 7028                       		moveq	#$28,d0		; Note on/off register
00097FA6 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Get channel bits
00097FAA 0001 00F0                  		ori.b	#$F0,d1		; Note on on all operators
00097FAE 6000 0000                  		bra.w	WriteFMI
00097FB2                            ; ===========================================================================
00097FB2                            ; locret_726FC:
00097FB2                            @locret:
00097FB2 4E75                       		rts	
00097FB4                            
00097FB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097FB4                            
00097FB4                            ; sub_726FE:
00097FB4                            FMNoteOff:
00097FB4 0815 0004                  		btst	#4,(a5)		; Is 'do not attack next note' set? (TrackPlaybackControl)
00097FB8 6600                       		bne.s	locret_72714	; Return if yes
00097FBA 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00097FBE 6600                       		bne.s	locret_72714	; Return if yes
00097FC0                            ; loc_7270A:
00097FC0                            SendFMNoteOff:
00097FC0 7028                       		moveq	#$28,d0		; Note on/off register
00097FC2 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Note off to this channel
00097FC6 6000 0000                  		bra.w	WriteFMI
00097FCA                            ; ===========================================================================
00097FCA                            
00097FCA                            locret_72714:
00097FCA 4E75                       		rts	
00097FCC                            ; End of function FMNoteOff
00097FCC                            
00097FCC                            ; ===========================================================================
00097FCC                            ; loc_72716:
00097FCC                            WriteFMIorIIMain:
00097FCC 0815 0002                  		btst	#2,(a5)		; Is track being overriden by sfx? (TrackPlaybackControl)
00097FD0 6600                       		bne.s	@locret		; Return if yes
00097FD2 6000 0000                  		bra.w	WriteFMIorII
00097FD6                            ; ===========================================================================
00097FD6                            ; locret_72720:
00097FD6                            @locret:
00097FD6 4E75                       		rts	
00097FD8                            
00097FD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097FD8                            
00097FD8                            ; sub_72722:
00097FD8                            WriteFMIorII:
00097FD8 082D 0002 0001             		btst	#2,TrackVoiceControl(a5)	; Is this bound for part I or II?
00097FDE 6600                       		bne.s	WriteFMIIPart			; Branch if for part II
00097FE0 D02D 0001                  		add.b	TrackVoiceControl(a5),d0	; Add in voice control bits
00097FE4                            ; End of function WriteFMIorII
00097FE4                            
00097FE4                            
00097FE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097FE4                            
00097FE4                            ; The reason I think this is an *early* SMPS 68k Type 1b
00097FE4                            ; is because this subroutine is the one from Type 1a:
00097FE4                            ; other Type 1b drivers have a newer, optimised version.
00097FE4                            ; The driver itself is Type 1b, with this odd exception.
00097FE4                            
00097FE4                            ; sub_7272E:
00097FE4                            WriteFMI:
00097FE4 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00097FEA 0802 0007                  		btst	#7,d2		; Is FM busy?
00097FEE 66F4                       		bne.s	WriteFMI	; Loop if so
00097FF0 13C0 00A0 4000             		move.b	d0,(ym2612_a0).l
00097FF6 4E71                       		nop	
00097FF8 4E71                       		nop	
00097FFA 4E71                       		nop	
00097FFC                            ; loc_72746:
00097FFC                            @waitloop:
00097FFC 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00098002 0802 0007                  		btst	#7,d2		; Is FM busy?
00098006 66F4                       		bne.s	@waitloop	; Loop if so
00098008                            
00098008 13C1 00A0 4001             		move.b	d1,(ym2612_d0).l
0009800E 4E75                       		rts	
00098010                            ; End of function WriteFMI
00098010                            
00098010                            ; ===========================================================================
00098010                            ; loc_7275A:
00098010                            WriteFMIIPart:
00098010 142D 0001                  		move.b	TrackVoiceControl(a5),d2 ; Get voice control bits
00098014 0882 0002                  		bclr	#2,d2			; Clear chip toggle
00098018 D002                       		add.b	d2,d0			; Add in to destination register
0009801A                            
0009801A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009801A                            
0009801A                            ; sub_72764:
0009801A                            WriteFMII:
0009801A 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00098020 0802 0007                  		btst	#7,d2		; Is FM busy?
00098024 66F4                       		bne.s	WriteFMII	; Loop if so
00098026 13C0 00A0 4002             		move.b	d0,(ym2612_a1).l
0009802C 4E71                       		nop	
0009802E 4E71                       		nop	
00098030 4E71                       		nop	
00098032                            ; loc_7277C:
00098032                            @waitloop:
00098032 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00098038 0802 0007                  		btst	#7,d2		; Is FM busy?
0009803C 66F4                       		bne.s	@waitloop	; Loop if so
0009803E                            
0009803E 13C1 00A0 4003             		move.b	d1,(ym2612_d1).l
00098044 4E75                       		rts	
00098046                            ; End of function WriteFMII
00098046                            
00098046                            ; ===========================================================================
00098046                            ; ---------------------------------------------------------------------------
00098046                            ; FM Note Values: b-0 to a#8
00098046                            ; ---------------------------------------------------------------------------
00098046                            ; word_72790: FM_Notes:
00098046                            FMFrequencies:
00098046 025E 0284 02AB 02D3 02FE+  	dc.w $025E,$0284,$02AB,$02D3,$02FE,$032D,$035C,$038F,$03C5,$03FF,$043C,$047C
0009805E 0A5E 0A84 0AAB 0AD3 0AFE+  	dc.w $0A5E,$0A84,$0AAB,$0AD3,$0AFE,$0B2D,$0B5C,$0B8F,$0BC5,$0BFF,$0C3C,$0C7C
00098076 125E 1284 12AB 12D3 12FE+  	dc.w $125E,$1284,$12AB,$12D3,$12FE,$132D,$135C,$138F,$13C5,$13FF,$143C,$147C
0009808E 1A5E 1A84 1AAB 1AD3 1AFE+  	dc.w $1A5E,$1A84,$1AAB,$1AD3,$1AFE,$1B2D,$1B5C,$1B8F,$1BC5,$1BFF,$1C3C,$1C7C
000980A6 225E 2284 22AB 22D3 22FE+  	dc.w $225E,$2284,$22AB,$22D3,$22FE,$232D,$235C,$238F,$23C5,$23FF,$243C,$247C
000980BE 2A5E 2A84 2AAB 2AD3 2AFE+  	dc.w $2A5E,$2A84,$2AAB,$2AD3,$2AFE,$2B2D,$2B5C,$2B8F,$2BC5,$2BFF,$2C3C,$2C7C
000980D6 325E 3284 32AB 32D3 32FE+  	dc.w $325E,$3284,$32AB,$32D3,$32FE,$332D,$335C,$338F,$33C5,$33FF,$343C,$347C
000980EE 3A5E 3A84 3AAB 3AD3 3AFE+  	dc.w $3A5E,$3A84,$3AAB,$3AD3,$3AFE,$3B2D,$3B5C,$3B8F,$3BC5,$3BFF,$3C3C,$3C7C
00098106                            
00098106                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098106                            
00098106                            ; sub_72850:
00098106                            PSGUpdateTrack:
00098106 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Update note timeout
0009810A 6600                       		bne.s	@notegoing
0009810C 0895 0004                  		bclr	#4,(a5)				; Clear 'do not attack note' bit (TrackPlaybackControl)
00098110 4EBA 0000                  		jsr	PSGDoNext(pc)
00098114 4EBA 0000                  		jsr	PSGDoNoteOn(pc)
00098118 6000 0000                  		bra.w	PSGDoVolFX
0009811C                            ; ===========================================================================
0009811C                            ; loc_72866:
0009811C                            @notegoing:
0009811C 4EBA F4CA                  		jsr	NoteTimeoutUpdate(pc)
00098120 4EBA 0000                  		jsr	PSGUpdateVolFX(pc)
00098124 4EBA F4EA                  		jsr	DoModulation(pc)
00098128 4EBA 0000                  		jsr	PSGUpdateFreq(pc)	; It would be better if this were a jmp and the rts was removed
0009812C 4E75                       		rts
0009812E                            ; End of function PSGUpdateTrack
0009812E                            
0009812E                            
0009812E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009812E                            
0009812E                            ; sub_72878:
0009812E                            PSGDoNext:
0009812E 0895 0001                  		bclr	#1,(a5)				; Clear 'track at rest' bit (TrackPlaybackControl)
00098132 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; Get track data pointer
00098136                            ; loc_72880:
00098136                            @noteloop:
00098136 7A00                       		moveq	#0,d5
00098138 1A1C                       		move.b	(a4)+,d5	; Get byte from track
0009813A 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
0009813E 6500                       		blo.s	@gotnote	; Branch if not
00098140 4EBA 0000                  		jsr	CoordFlag(pc)
00098144 60F0                       		bra.s	@noteloop
00098146                            ; ===========================================================================
00098146                            ; loc_72890:
00098146                            @gotnote:
00098146 4A05                       		tst.b	d5		; Is it a note?
00098148 6A00                       		bpl.s	@gotduration	; Branch if not
0009814A 4EBA 0000                  		jsr	PSGSetFreq(pc)
0009814E 1A1C                       		move.b	(a4)+,d5	; Get another byte
00098150 4A05                       		tst.b	d5		; Is it a duration?
00098152 6A00                       		bpl.s	@gotduration	; Branch if yes
00098154 534C                       		subq.w	#1,a4		; Put byte back
00098156 6000 F452                  		bra.w	FinishTrackUpdate
0009815A                            ; ===========================================================================
0009815A                            ; loc_728A4:
0009815A                            @gotduration:
0009815A 4EBA F42E                  		jsr	SetDuration(pc)
0009815E 6000 F44A                  		bra.w	FinishTrackUpdate
00098162                            ; End of function PSGDoNext
00098162                            
00098162                            
00098162                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098162                            
00098162                            ; sub_728AC:
00098162                            PSGSetFreq:
00098162 0405 0081                  		subi.b	#$81,d5		; Convert to 0-based index
00098166 6500                       		bcs.s	@restpsg	; If $80, put track at rest
00098168 DA2D 0008                  		add.b	TrackTranspose(a5),d5 ; Add in channel transposition
0009816C 0245 007F                  		andi.w	#$7F,d5		; Clear high byte and sign bit
00098170 E34D                       		lsl.w	#1,d5
00098172 41FA 0000                  		lea	PSGFrequencies(pc),a0
00098176 3B70 5000 0010             		move.w	(a0,d5.w),TrackFreq(a5)	; Set new frequency
0009817C 6000 F42C                  		bra.w	FinishTrackUpdate
00098180                            ; ===========================================================================
00098180                            ; loc_728CA:
00098180                            @restpsg:
00098180 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00098184 3B7C FFFF 0010             		move.w	#-1,TrackFreq(a5)	; Invalidate note frequency
0009818A 4EBA F41E                  		jsr	FinishTrackUpdate(pc)
0009818E 6000 0000                  		bra.w	PSGNoteOff
00098192                            ; End of function PSGSetFreq
00098192                            
00098192                            
00098192                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098192                            
00098192                            ; sub_728DC:
00098192                            PSGDoNoteOn:
00098192 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get note frequency
00098196 6B00                       		bmi.s	PSGSetRest		; If invalid, branch
00098198                            ; End of function PSGDoNoteOn
00098198                            
00098198                            
00098198                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098198                            
00098198                            ; sub_728E2:
00098198                            PSGUpdateFreq:
00098198 102D 001E                  		move.b	TrackDetune(a5),d0	; Get detune value
0009819C 4880                       		ext.w	d0
0009819E DC40                       		add.w	d0,d6		; Add to frequency
000981A0 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
000981A4 6600                       		bne.s	@locret		; Return if yes
000981A6 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
000981AA 6600                       		bne.s	@locret		; Return if yes
000981AC 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get channel bits
000981B0 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it a noise channel?
000981B4 6600                       		bne.s	@notnoise	; Branch if not
000981B6 103C 00C0                  		move.b	#$C0,d0		; Use PSG 3 channel bits
000981BA                            ; loc_72904:
000981BA                            @notnoise:
000981BA 3206                       		move.w	d6,d1
000981BC 0201 000F                  		andi.b	#$F,d1		; Low nibble of frequency
000981C0 8001                       		or.b	d1,d0		; Latch tone data to channel
000981C2 E84E                       		lsr.w	#4,d6		; Get upper 6 bits of frequency
000981C4 0206 003F                  		andi.b	#$3F,d6		; Send to latched channel
000981C8 13C0 00C0 0011             		move.b	d0,(psg_input).l
000981CE 13C6 00C0 0011             		move.b	d6,(psg_input).l
000981D4                            ; locret_7291E:
000981D4                            @locret:
000981D4 4E75                       		rts	
000981D6                            ; End of function PSGUpdateFreq
000981D6                            
000981D6                            ; ===========================================================================
000981D6                            ; loc_72920:
000981D6                            PSGSetRest:
000981D6 08D5 0001                  		bset	#1,(a5)	; Set 'track at rest' bit (TrackPlaybackControl)
000981DA 4E75                       		rts	
000981DC                            
000981DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000981DC                            
000981DC                            ; sub_72926:
000981DC                            PSGUpdateVolFX:
000981DC 4A2D 000B                  		tst.b	TrackVoiceIndex(a5)	; Test PSG tone
000981E0 6700 0000                  		beq.w	locret_7298A		; Return if it is zero
000981E4                            ; loc_7292E:
000981E4                            PSGDoVolFX:	; This can actually be made a bit more efficient, see the comments for more
000981E4 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get volume
000981E8 7000                       		moveq	#0,d0
000981EA 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get PSG tone
000981EE 6700                       		beq.s	SetPSGVolume
000981F0 2079 0009 71A2             		movea.l	(Go_PSGIndex).l,a0
000981F6 5340                       		subq.w	#1,d0
000981F8 E548                       		lsl.w	#2,d0
000981FA 2070 0000                  		movea.l	(a0,d0.w),a0
000981FE 102D 000C                  		move.b	TrackVolEnvIndex(a5),d0	; Get volume envelope index		; move.b	TrackVolEnvIndex(a5),d0
00098202 1030 0000                  		move.b	(a0,d0.w),d0			; Volume envelope value			; addq.b	#1,TrackVolEnvIndex(a5)
00098206 522D 000C                  		addq.b	#1,TrackVolEnvIndex(a5)	; Increment volume envelope index	; move.b	(a0,d0.w),d0
0009820A 0800 0007                  		btst	#7,d0				; Is volume envelope value negative?	; <-- makes this line redundant
0009820E 6700                       		beq.s	@gotflutter			; Branch if not				; but you gotta make this one a bpl
00098210 0C00 0080                  		cmpi.b	#$80,d0				; Is it the terminator?			; Since this is the only check, you can take the optimisation a step further:
00098214 6700                       		beq.s	VolEnvHold			; If so, branch				; Change the previous beq (bpl) to a bmi and make it branch to VolEnvHold to make these last two lines redundant
00098216                            ; loc_72960:
00098216                            @gotflutter:
00098216 DC40                       		add.w	d0,d6		; Add volume envelope value to volume
00098218 0C06 0010                  		cmpi.b	#$10,d6		; Is volume $10 or higher?
0009821C 6500                       		blo.s	SetPSGVolume	; Branch if not
0009821E 7C0F                       		moveq	#$F,d6		; Limit to silence and fall through
00098220                            ; End of function PSGUpdateVolFX
00098220                            
00098220                            
00098220                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098220                            
00098220                            ; sub_7296A:
00098220                            SetPSGVolume:
00098220 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
00098224 6600                       		bne.s	locret_7298A	; Return if so
00098226 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0009822A 6600                       		bne.s	locret_7298A	; Return if so
0009822C 0815 0004                  		btst	#4,(a5)		; Is track set to not attack next note? (TrackPlaybackControl)
00098230 6600                       		bne.s	PSGCheckNoteTimeout ; Branch if yes
00098232                            ; loc_7297C:
00098232                            PSGSendVolume:
00098232 8C2D 0001                  		or.b	TrackVoiceControl(a5),d6 ; Add in track selector bits
00098236 0606 0010                  		addi.b	#$10,d6			; Mark it as a volume command
0009823A 13C6 00C0 0011             		move.b	d6,(psg_input).l
00098240                            
00098240                            locret_7298A:
00098240 4E75                       		rts	
00098242                            ; ===========================================================================
00098242                            ; loc_7298C: PSGCheckNoteFill:
00098242                            PSGCheckNoteTimeout:
00098242 4A2D 0013                  		tst.b	TrackNoteTimeoutMaster(a5)	; Is note timeout on?
00098246 67EA                       		beq.s	PSGSendVolume			; Branch if not
00098248 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)		; Has note timeout expired?
0009824C 66E4                       		bne.s	PSGSendVolume			; Branch if not
0009824E 4E75                       		rts	
00098250                            ; End of function SetPSGVolume
00098250                            
00098250                            ; ===========================================================================
00098250                            ; loc_7299A: FlutterDone:
00098250                            VolEnvHold:
00098250 532D 000C                  		subq.b	#1,TrackVolEnvIndex(a5)	; Decrement volume envelope index
00098254 4E75                       		rts	
00098256                            
00098256                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098256                            
00098256                            ; sub_729A0:
00098256                            PSGNoteOff:
00098256 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0009825A 6600                       		bne.s	locret_729B4	; Return if so
0009825C                            ; loc_729A6:
0009825C                            SendPSGNoteOff:
0009825C 102D 0001                  		move.b	TrackVoiceControl(a5),d0	; PSG channel to change
00098260 0000 001F                  		ori.b	#$1F,d0				; Maximum volume attenuation
00098264 13C0 00C0 0011             		move.b	d0,(psg_input).l
0009826A                            		; DANGER! If InitMusicPlayback doesn't silence all channels, there's the
0009826A                            		; risk of music accidentally playing noise because it can't detect if
0009826A                            		; the PSG4/noise channel needs muting on track initialisation.
0009826A                            		; S&K's driver fixes it by doing this:
0009826A 0C00 00DF                  		cmpi.b	#$DF,d0				; Are stopping PSG3?
0009826E 6600                       		bne.s	locret_729B4
00098270 13FC 00FF 00C0 0011        		move.b	#$FF,(psg_input).l		; If so, stop noise channel while we're at it
00098278                            
00098278                            locret_729B4:
00098278 4E75                       		rts	
0009827A                            ; End of function PSGNoteOff
0009827A                            
0009827A                            
0009827A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009827A                            
0009827A                            ; sub_729B6:
0009827A                            PSGSilenceAll:
0009827A 41F9 00C0 0011             		lea	(psg_input).l,a0
00098280 10BC 009F                  		move.b	#$9F,(a0)	; Silence PSG 1
00098284 10BC 00BF                  		move.b	#$BF,(a0)	; Silence PSG 2
00098288 10BC 00DF                  		move.b	#$DF,(a0)	; Silence PSG 3
0009828C 10BC 00FF                  		move.b	#$FF,(a0)	; Silence noise channel
00098290 4E75                       		rts	
00098292                            ; End of function PSGSilenceAll
00098292                            
00098292                            ; ===========================================================================
00098292                            ; word_729CE:
00098292                            PSGFrequencies:
00098292 0356 0326 02F9 02CE 02A5+  		dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A
000982A2 021A 01FB 01DF 01C4 01AB+  		dc.w $21A, $1FB, $1DF, $1C4, $1AB, $193, $17D, $167
000982B2 0153 0140 012E 011D 010D+  		dc.w $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
000982C2 00D6 00C9 00BE 00B4 00A9+  		dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F
000982D2 0087 007F 0078 0071 006B+  		dc.w  $87,  $7F,  $78,  $71,  $6B,  $65,  $5F,  $5A
000982E2 0055 0050 004B 0047 0043+  		dc.w  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
000982F2 0036 0033 0030 002D 002B+  		dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24
00098302 0022 0020 001F 001D 001B+  		dc.w  $22,  $20,  $1F,  $1D,  $1B,  $1A,  $18,  $17
00098312 0016 0015 0013 0012 0011+  		dc.w  $16,  $15,  $13,  $12,  $11,    0
0009831E                            
0009831E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009831E                            
0009831E                            ; sub_72A5A:
0009831E                            CoordFlag:
0009831E 0445 00E0                  		subi.w	#$E0,d5
00098322 E54D                       		lsl.w	#2,d5
00098324 4EFB 5000                  		jmp	coordflagLookup(pc,d5.w)
00098328                            ; End of function CoordFlag
00098328                            
00098328                            ; ===========================================================================
00098328                            ; loc_72A64:
00098328                            coordflagLookup:
00098328 6000 0000                  		bra.w	cfPanningAMSFMS		; $E0
0009832C                            ; ===========================================================================
0009832C 6000 0000                  		bra.w	cfDetune		; $E1
00098330                            ; ===========================================================================
00098330 6000 0000                  		bra.w	cfSetCommunication	; $E2
00098334                            ; ===========================================================================
00098334 6000 0000                  		bra.w	cfJumpReturn		; $E3
00098338                            ; ===========================================================================
00098338 6000 0000                  		bra.w	cfFadeInToPrevious	; $E4
0009833C                            ; ===========================================================================
0009833C 6000 0000                  		bra.w	cfSetTempoDivider	; $E5
00098340                            ; ===========================================================================
00098340 6000 0000                  		bra.w	cfChangeFMVolume	; $E6
00098344                            ; ===========================================================================
00098344 6000 0000                  		bra.w	cfHoldNote		; $E7
00098348                            ; ===========================================================================
00098348 6000 0000                  		bra.w	cfNoteTimeout		; $E8
0009834C                            ; ===========================================================================
0009834C 6000 0000                  		bra.w	cfChangeTransposition	; $E9
00098350                            ; ===========================================================================
00098350 6000 0000                  		bra.w	cfSetTempo		; $EA
00098354                            ; ===========================================================================
00098354 6000 0000                  		bra.w	cfSetTempoDividerAll	; $EB
00098358                            ; ===========================================================================
00098358 6000 0000                  		bra.w	cfChangePSGVolume	; $EC
0009835C                            ; ===========================================================================
0009835C 6000 0000                  		bra.w	cfClearPush		; $ED
00098360                            ; ===========================================================================
00098360 6000 0000                  		bra.w	cfStopSpecialFM4	; $EE
00098364                            ; ===========================================================================
00098364 6000 0000                  		bra.w	cfSetVoice		; $EF
00098368                            ; ===========================================================================
00098368 6000 0000                  		bra.w	cfModulation		; $F0
0009836C                            ; ===========================================================================
0009836C 6000 0000                  		bra.w	cfEnableModulation	; $F1
00098370                            ; ===========================================================================
00098370 6000 0000                  		bra.w	cfStopTrack		; $F2
00098374                            ; ===========================================================================
00098374 6000 0000                  		bra.w	cfSetPSGNoise		; $F3
00098378                            ; ===========================================================================
00098378 6000 0000                  		bra.w	cfDisableModulation	; $F4
0009837C                            ; ===========================================================================
0009837C 6000 0000                  		bra.w	cfSetPSGTone		; $F5
00098380                            ; ===========================================================================
00098380 6000 0000                  		bra.w	cfJumpTo		; $F6
00098384                            ; ===========================================================================
00098384 6000 0000                  		bra.w	cfRepeatAtPos		; $F7
00098388                            ; ===========================================================================
00098388 6000 0000                  		bra.w	cfJumpToGosub		; $F8
0009838C                            ; ===========================================================================
0009838C 6000 0000                  		bra.w	cfOpF9			; $F9
00098390                            ; ===========================================================================
00098390                            ; loc_72ACC:
00098390                            cfPanningAMSFMS:
00098390 121C                       		move.b	(a4)+,d1		; New AMS/FMS/panning value
00098392 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00098396 6B00                       		bmi.s	locret_72AEA		; Return if yes
00098398 102D 000A                  		move.b	TrackAMSFMSPan(a5),d0	; Get current AMS/FMS/panning
0009839C 0200 0037                  		andi.b	#$37,d0			; Retain bits 0-2, 3-4 if set
000983A0 8200                       		or.b	d0,d1			; Mask in new value
000983A2 1B41 000A                  		move.b	d1,TrackAMSFMSPan(a5)	; Store value
000983A6 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
000983AA 6000 FC20                  		bra.w	WriteFMIorIIMain
000983AE                            ; ===========================================================================
000983AE                            
000983AE                            locret_72AEA:
000983AE 4E75                       		rts	
000983B0                            ; ===========================================================================
000983B0                            ; loc_72AEC: cfAlterNotes:
000983B0                            cfDetune:
000983B0 1B5C 001E                  		move.b	(a4)+,TrackDetune(a5)	; Set detune value
000983B4 4E75                       		rts	
000983B6                            ; ===========================================================================
000983B6                            ; loc_72AF2: cfUnknown1:
000983B6                            cfSetCommunication:
000983B6 1D5C 0007                  		move.b	(a4)+,v_communication_byte(a6)	; Set otherwise unused communication byte to parameter
000983BA 4E75                       		rts	
000983BC                            ; ===========================================================================
000983BC                            ; loc_72AF8:
000983BC                            cfJumpReturn:
000983BC 7000                       		moveq	#0,d0
000983BE 102D 000D                  		move.b	TrackStackPointer(a5),d0 ; Track stack pointer
000983C2 2875 0000                  		movea.l	(a5,d0.w),a4		; Set track return address
000983C6 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)		; Set 'popped' value to zero
000983CE 544C                       		addq.w	#2,a4			; Skip jump target address from gosub flag
000983D0 5800                       		addq.b	#4,d0			; Actually 'pop' value
000983D2 1B40 000D                  		move.b	d0,TrackStackPointer(a5) ; Set new stack pointer
000983D6 4E75                       		rts	
000983D8                            ; ===========================================================================
000983D8                            ; loc_72B14:
000983D8                            cfFadeInToPrevious:
000983D8 204E                       		movea.l	a6,a0
000983DA 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
000983DE 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; $220 bytes to restore: all variables and music track data
000983E2                            ; loc_72B1E:
000983E2                            @restoreramloop:
000983E2 20D9                       		move.l	(a1)+,(a0)+
000983E4 51C8 FFFC                  		dbf	d0,@restoreramloop
000983E8                            
000983E8 08EE 0002 0040             		bset	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Set 'SFX overriding' bit
000983EE 264D                       		movea.l	a5,a3
000983F0 1C3C 0028                  		move.b	#$28,d6
000983F4 9C2E 0026                  		sub.b	v_fadein_counter(a6),d6			; If fade already in progress, this adjusts track volume accordingly
000983F8 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
000983FA 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
000983FE                            ; loc_72B3A:
000983FE                            @fmloop:
000983FE 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
00098402 6700                       		beq.s	@nextfm		; Branch if not
00098404 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00098408 DD2D 0009                  		add.b	d6,TrackVolume(a5) ; Apply current volume fade-in
0009840C 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00098410 6600                       		bne.s	@nextfm		; Branch if yes
00098412 7000                       		moveq	#0,d0
00098414 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get voice
00098418 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
0009841C 4EBA 0000                  		jsr	SetVoice(pc)
00098420                            ; loc_72B5C:
00098420                            @nextfm:
00098420 DAFC 0030                  		adda.w	#TrackSz,a5
00098424 51CF FFD8                  		dbf	d7,@fmloop
00098428                            
00098428 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
0009842A                            ; loc_72B66:
0009842A                            @psgloop:
0009842A 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
0009842E 6700                       		beq.s	@nextpsg	; Branch if not
00098430 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00098434 4EBA FE20                  		jsr	PSGNoteOff(pc)
00098438 DD2D 0009                  		add.b	d6,TrackVolume(a5)	; Apply current volume fade-in
0009843C                            ; loc_72B78:
0009843C                            @nextpsg:
0009843C DAFC 0030                  		adda.w	#TrackSz,a5
00098440 51CF FFE8                  		dbf	d7,@psgloop
00098444                            		
00098444 2A4B                       		movea.l	a3,a5
00098446 1D7C 0080 0024             		move.b	#$80,f_fadein_flag(a6)		; Trigger fade-in
0009844C 1D7C 0028 0026             		move.b	#$28,v_fadein_counter(a6)	; Fade-in delay
00098452 422E 0027                  		clr.b	f_1up_playing(a6)
00098456 33FC 0000 00A1 1100        		startZ80
0009845E 504F                       		addq.w	#8,sp		; Tamper return value so we don't return to caller
00098460 4E75                       		rts	
00098462                            ; ===========================================================================
00098462                            ; loc_72B9E:
00098462                            cfSetTempoDivider:
00098462 1B5C 0002                  		move.b	(a4)+,TrackTempoDivider(a5)	; Set tempo divider on current track
00098466 4E75                       		rts	
00098468                            ; ===========================================================================
00098468                            ; loc_72BA4: cfSetVolume:
00098468                            cfChangeFMVolume:
00098468 101C                       		move.b	(a4)+,d0		; Get parameter
0009846A D12D 0009                  		add.b	d0,TrackVolume(a5)	; Add to current volume
0009846E 6000 0000                  		bra.w	SendVoiceTL
00098472                            ; ===========================================================================
00098472                            ; loc_72BAE: cfPreventAttack:
00098472                            cfHoldNote:
00098472 08D5 0004                  		bset	#4,(a5)		; Set 'do not attack next note' bit (TrackPlaybackControl)
00098476 4E75                       		rts	
00098478                            ; ===========================================================================
00098478                            ; loc_72BB4: cfNoteFill
00098478                            cfNoteTimeout:
00098478 1B54 0012                  		move.b	(a4),TrackNoteTimeout(a5)		; Note fill timeout
0009847C 1B5C 0013                  		move.b	(a4)+,TrackNoteTimeoutMaster(a5)	; Note fill master
00098480 4E75                       		rts	
00098482                            ; ===========================================================================
00098482                            ; loc_72BBE: cfAddKey:
00098482                            cfChangeTransposition:
00098482 101C                       		move.b	(a4)+,d0		; Get parameter
00098484 D12D 0008                  		add.b	d0,TrackTranspose(a5)	; Add to transpose value
00098488 4E75                       		rts	
0009848A                            ; ===========================================================================
0009848A                            ; loc_72BC6:
0009848A                            cfSetTempo:
0009848A 1D54 0002                  		move.b	(a4),v_main_tempo(a6)		; Set main tempo
0009848E 1D5C 0001                  		move.b	(a4)+,v_main_tempo_timeout(a6)	; And reset timeout (!)
00098492 4E75                       		rts	
00098494                            ; ===========================================================================
00098494                            ; loc_72BD0: cfSetTempoMod:
00098494                            cfSetTempoDividerAll:
00098494 41EE 0040                  		lea	v_music_track_ram(a6),a0
00098498 101C                       		move.b	(a4)+,d0			; Get new tempo divider
0009849A 7230                       		moveq	#TrackSz,d1
0009849C 7409                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d2	; 1 DAC + 6 FM + 3 PSG tracks
0009849E                            ; loc_72BDA:
0009849E                            @trackloop:
0009849E 1140 0002                  		move.b	d0,TrackTempoDivider(a0)	; Set track's tempo divider
000984A2 D0C1                       		adda.w	d1,a0
000984A4 51CA FFF8                  		dbf	d2,@trackloop
000984A8                            
000984A8 4E75                       		rts	
000984AA                            ; ===========================================================================
000984AA                            ; loc_72BE6: cfChangeVolume:
000984AA                            cfChangePSGVolume:
000984AA 101C                       		move.b	(a4)+,d0		; Get volume change
000984AC D12D 0009                  		add.b	d0,TrackVolume(a5)	; Apply it
000984B0 4E75                       		rts	
000984B2                            ; ===========================================================================
000984B2                            ; loc_72BEE:
000984B2                            cfClearPush:
000984B2 422E 002C                  		clr.b	f_push_playing(a6)	; Allow push sound to be played once more
000984B6 4E75                       		rts	
000984B8                            ; ===========================================================================
000984B8                            ; loc_72BF4:
000984B8                            cfStopSpecialFM4:
000984B8 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
000984BC 0895 0004                  		bclr	#4,(a5)		; Clear 'do not attack next note' bit (TrackPlaybackControl)
000984C0 4EBA FAF2                  		jsr	FMNoteOff(pc)
000984C4 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is SFX using FM4?
000984C8 6B00                       		bmi.s	@locexit					; Branch if yes
000984CA 264D                       		movea.l	a5,a3
000984CC 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
000984D0 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
000984D4 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000984D8 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000984DC 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
000984E0 4EBA 0000                  		jsr	SetVoice(pc)
000984E4 2A4B                       		movea.l	a3,a5
000984E6                            ; loc_72C22:
000984E6                            @locexit:
000984E6 504F                       		addq.w	#8,sp		; Tamper with return value so we don't return to caller
000984E8 4E75                       		rts	
000984EA                            ; ===========================================================================
000984EA                            ; loc_72C26:
000984EA                            cfSetVoice:
000984EA 7000                       		moveq	#0,d0
000984EC 101C                       		move.b	(a4)+,d0		; Get new voice
000984EE 1B40 000B                  		move.b	d0,TrackVoiceIndex(a5)	; Store it
000984F2 0815 0002                  		btst	#2,(a5)			; Is SFX overriding this track? (TrackPlaybackControl)
000984F6 6600 0000                  		bne.w	locret_72CAA		; Return if yes
000984FA 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Music voice pointer
000984FE 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a music track?
00098502 6700                       		beq.s	SetVoice		; If yes, branch
00098504 226D 0020                  		movea.l	TrackVoicePtr(a5),a1	; SFX track voice pointer
00098508 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a SFX track?
0009850C 6B00                       		bmi.s	SetVoice		; If yes, branch
0009850E 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1 ; Special SFX voice pointer
00098512                            
00098512                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098512                            
00098512                            ; sub_72C4E:
00098512                            SetVoice:
00098512 5340                       		subq.w	#1,d0
00098514 6B00                       		bmi.s	@havevoiceptr
00098516 323C 0019                  		move.w	#25,d1
0009851A                            ; loc_72C56:
0009851A                            @voicemultiply:
0009851A D2C1                       		adda.w	d1,a1
0009851C 51C8 FFFC                  		dbf	d0,@voicemultiply
00098520                            ; loc_72C5C:
00098520                            @havevoiceptr:
00098520 1219                       		move.b	(a1)+,d1		; feedback/algorithm
00098522 1B41 001F                  		move.b	d1,TrackFeedbackAlgo(a5) ; Save it to track RAM
00098526 1801                       		move.b	d1,d4
00098528 103C 00B0                  		move.b	#$B0,d0			; Command to write feedback/algorithm
0009852C 4EBA FAAA                  		jsr	WriteFMIorII(pc)
00098530 45FA 0000                  		lea	FMInstrumentOperatorTable(pc),a2
00098534 7600                       		moveq	#(FMInstrumentOperatorTable_End-FMInstrumentOperatorTable)-1,d3		; Don't want to send TL yet
00098536                            ; loc_72C72:
00098536                            @sendvoiceloop:
00098536 101A                       		move.b	(a2)+,d0
00098538 1219                       		move.b	(a1)+,d1
0009853A 4EBA FA9C                  		jsr	WriteFMIorII(pc)
0009853E 51CB FFF6                  		dbf	d3,@sendvoiceloop
00098542                            
00098542 7A03                       		moveq	#3,d5
00098544 0244 0007                  		andi.w	#7,d4			; Get algorithm
00098548 183B 4000                  		move.b	FMSlotMask(pc,d4.w),d4	; Get slot mask for algorithm
0009854C 162D 0009                  		move.b	TrackVolume(a5),d3	; Track volume attenuation
00098550                            ; loc_72C8C:
00098550                            @sendtlloop:
00098550 101A                       		move.b	(a2)+,d0
00098552 1219                       		move.b	(a1)+,d1
00098554 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00098556 6400                       		bcc.s	@sendtl		; Branch if not
00098558 D203                       		add.b	d3,d1		; Include additional attenuation
0009855A                            ; loc_72C96:
0009855A                            @sendtl:
0009855A 4EBA FA7C                  		jsr	WriteFMIorII(pc)
0009855E 51CD FFF0                  		dbf	d5,@sendtlloop
00098562                            		
00098562 103C 00B4                  		move.b	#$B4,d0			; Register for AMS/FMS/Panning
00098566 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Value to send
0009856A 4EBA FA6C                  		jsr	WriteFMIorII(pc) 	; (It would be better if this were a jmp)
0009856E                            
0009856E                            locret_72CAA:
0009856E 4E75                       		rts	
00098570                            ; End of function SetVoice
00098570                            
00098570                            ; ===========================================================================
00098570                            ; byte_72CAC:
00098570 0808 0808 0A0E 0E0F        FMSlotMask:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00098578                            
00098578                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00098578                            
00098578                            ; sub_72CB4:
00098578                            SendVoiceTL:
00098578 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0009857C 6600                       		bne.s	@locret		; Return if so
0009857E 7000                       		moveq	#0,d0
00098580 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00098584 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00098588 4A2E 000E                  		tst.b	f_voice_selector(a6)
0009858C 6700                       		beq.s	@gotvoiceptr
0009858E                            		; DANGER! This uploads the wrong voice! It should have been a5 instead
0009858E                            		; of a6!
0009858E 226D 0020                  		movea.l	TrackVoicePtr(a5),a1
00098592 4A2E 000E                  		tst.b	f_voice_selector(a6)
00098596 6B00                       		bmi.s	@gotvoiceptr
00098598 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1
0009859C                            ; loc_72CD8:
0009859C                            @gotvoiceptr:
0009859C 5340                       		subq.w	#1,d0
0009859E 6B00                       		bmi.s	@gotvoice
000985A0 323C 0019                  		move.w	#25,d1
000985A4                            ; loc_72CE0:
000985A4                            @voicemultiply:
000985A4 D2C1                       		adda.w	d1,a1
000985A6 51C8 FFFC                  		dbf	d0,@voicemultiply
000985AA                            ; loc_72CE6:
000985AA                            @gotvoice:
000985AA D2FC 0015                  		adda.w	#21,a1				; Want TL
000985AE 45FA 0000                  		lea	FMInstrumentTLTable(pc),a2
000985B2 102D 001F                  		move.b	TrackFeedbackAlgo(a5),d0	; Get feedback/algorithm
000985B6 0240 0007                  		andi.w	#7,d0				; Want only algorithm
000985BA 183B 00B4                  		move.b	FMSlotMask(pc,d0.w),d4		; Get slot mask
000985BE 162D 0009                  		move.b	TrackVolume(a5),d3		; Get track volume attenuation
000985C2 6B00                       		bmi.s	@locret				; If negative, stop
000985C4 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
000985C6                            ; loc_72D02:
000985C6                            @sendtlloop:
000985C6 101A                       		move.b	(a2)+,d0
000985C8 1219                       		move.b	(a1)+,d1
000985CA E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
000985CC 6400                       		bcc.s	@senttl		; Branch if not
000985CE D203                       		add.b	d3,d1		; Include additional attenuation
000985D0 6500                       		bcs.s	@senttl		; Branch on overflow
000985D2 4EBA FA04                  		jsr	WriteFMIorII(pc)
000985D6                            ; loc_72D12:
000985D6                            @senttl:
000985D6 51CD FFEE                  		dbf	d5,@sendtlloop
000985DA                            ; locret_72D16:
000985DA                            @locret:
000985DA 4E75                       		rts	
000985DC                            ; End of function SendVoiceTL
000985DC                            
000985DC                            ; ===========================================================================
000985DC                            ; byte_72D18:
000985DC                            FMInstrumentOperatorTable:
000985DC 30                         		dc.b  $30		; Detune/multiple operator 1
000985DD 38                         		dc.b  $38		; Detune/multiple operator 3
000985DE 34                         		dc.b  $34		; Detune/multiple operator 2
000985DF 3C                         		dc.b  $3C		; Detune/multiple operator 4
000985E0 50                         		dc.b  $50		; Rate scalling/attack rate operator 1
000985E1 58                         		dc.b  $58		; Rate scalling/attack rate operator 3
000985E2 54                         		dc.b  $54		; Rate scalling/attack rate operator 2
000985E3 5C                         		dc.b  $5C		; Rate scalling/attack rate operator 4
000985E4 60                         		dc.b  $60		; Amplitude modulation/first decay rate operator 1
000985E5 68                         		dc.b  $68		; Amplitude modulation/first decay rate operator 3
000985E6 64                         		dc.b  $64		; Amplitude modulation/first decay rate operator 2
000985E7 6C                         		dc.b  $6C		; Amplitude modulation/first decay rate operator 4
000985E8 70                         		dc.b  $70		; Secondary decay rate operator 1
000985E9 78                         		dc.b  $78		; Secondary decay rate operator 3
000985EA 74                         		dc.b  $74		; Secondary decay rate operator 2
000985EB 7C                         		dc.b  $7C		; Secondary decay rate operator 4
000985EC 80                         		dc.b  $80		; Secondary amplitude/release rate operator 1
000985ED 88                         		dc.b  $88		; Secondary amplitude/release rate operator 3
000985EE 84                         		dc.b  $84		; Secondary amplitude/release rate operator 2
000985EF 8C                         		dc.b  $8C		; Secondary amplitude/release rate operator 4
000985F0                            FMInstrumentOperatorTable_End
000985F0                            ; byte_72D2C:
000985F0                            FMInstrumentTLTable:
000985F0 40                         		dc.b  $40		; Total level operator 1
000985F1 48                         		dc.b  $48		; Total level operator 3
000985F2 44                         		dc.b  $44		; Total level operator 2
000985F3 4C                         		dc.b  $4C		; Total level operator 4
000985F4                            FMInstrumentTLTable_End
000985F4                            ; ===========================================================================
000985F4                            ; loc_72D30:
000985F4                            cfModulation:
000985F4 08D5 0003                  		bset	#3,(a5)				; Turn on modulation (TrackPlaybackControl)
000985F8 2B4C 0014                  		move.l	a4,TrackModulationPtr(a5)	; Save pointer to modulation data
000985FC 1B5C 0018                  		move.b	(a4)+,TrackModulationWait(a5)	; Modulation delay
00098600 1B5C 0019                  		move.b	(a4)+,TrackModulationSpeed(a5)	; Modulation speed
00098604 1B5C 001A                  		move.b	(a4)+,TrackModulationDelta(a5)	; Modulation delta
00098608 101C                       		move.b	(a4)+,d0			; Modulation steps...
0009860A E208                       		lsr.b	#1,d0				; ... divided by 2...
0009860C 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; ... before being stored
00098610 426D 001C                  		clr.w	TrackModulationVal(a5)		; Total accumulated modulation frequency change
00098614 4E75                       		rts	
00098616                            ; ===========================================================================
00098616                            ; loc_72D52:
00098616                            cfEnableModulation:
00098616 08D5 0003                  		bset	#3,(a5)		; Turn on modulation (TrackPlaybackControl)
0009861A 4E75                       		rts	
0009861C                            ; ===========================================================================
0009861C                            ; loc_72D58:
0009861C                            cfStopTrack:
0009861C 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00098620 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00098624 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00098628 6B00                       		bmi.s	@stoppsg		; Branch if yes
0009862A 4A2E 0008                  		tst.b	f_updating_dac(a6)	; Is this the DAC we are updating?
0009862E 6B00 0000                  		bmi.w	@locexit		; Exit if yes
00098632 4EBA F980                  		jsr	FMNoteOff(pc)
00098636 6000                       		bra.s	@stoppedchannel
00098638                            ; ===========================================================================
00098638                            ; loc_72D74:
00098638                            @stoppsg:
00098638 4EBA FC1C                  		jsr	PSGNoteOff(pc)
0009863C                            ; loc_72D78:
0009863C                            @stoppedchannel:
0009863C 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating SFX?
00098640 6A00 0000                  		bpl.w	@locexit		; Exit if not
00098644 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00098646 7000                       		moveq	#0,d0
00098648 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get voice control bits
0009864C 6B00                       		bmi.s	@getpsgptr		; Branch if PSG
0009864E 41FA F536                  		lea	SFX_BGMChannelRAM(pc),a0
00098652 264D                       		movea.l	a5,a3
00098654 0C00 0004                  		cmpi.b	#4,d0			; Is this FM4?
00098658 6600                       		bne.s	@getpointer		; Branch if not
0009865A 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
0009865E 6A00                       		bpl.s	@getpointer		; Branch if not
00098660 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00098664 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get voice pointer
00098668 6000                       		bra.s	@gotpointer
0009866A                            ; ===========================================================================
0009866A                            ; loc_72DA8:
0009866A                            @getpointer:
0009866A 5500                       		subq.b	#2,d0		; SFX can only use FM3 and up
0009866C E508                       		lsl.b	#2,d0
0009866E 2A70 0000                  		movea.l	(a0,d0.w),a5
00098672 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00098674 6A00                       		bpl.s	@novoiceupd		; Branch if not
00098676 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get voice pointer
0009867A                            ; loc_72DB8:
0009867A                            @gotpointer:
0009867A 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX overriding' bit (TrackPlaybackControl)
0009867E 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00098682 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00098686 4EBA FE8A                  		jsr	SetVoice(pc)
0009868A                            ; loc_72DC8:
0009868A                            @novoiceupd:
0009868A 2A4B                       		movea.l	a3,a5
0009868C 6000                       		bra.s	@locexit
0009868E                            ; ===========================================================================
0009868E                            ; loc_72DCC:
0009868E                            @getpsgptr:
0009868E 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00098692 4A10                       		tst.b	(a0)		; Is track playing? (TrackPlaybackControl)
00098694 6A00                       		bpl.s	@getchannelptr	; Branch if not
00098696 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it the noise channel?
0009869A 6700                       		beq.s	@gotchannelptr	; Branch if yes
0009869C 0C00 00C0                  		cmpi.b	#$C0,d0		; Is it PSG 3?
000986A0 6700                       		beq.s	@gotchannelptr	; Branch if yes
000986A2                            ; loc_72DE0:
000986A2                            @getchannelptr:
000986A2 41FA F4E2                  		lea	SFX_BGMChannelRAM(pc),a0
000986A6 E608                       		lsr.b	#3,d0
000986A8 2070 0000                  		movea.l	(a0,d0.w),a0
000986AC                            ; loc_72DEA:
000986AC                            @gotchannelptr:
000986AC 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX overriding' bit (TrackPlaybackControl)
000986B0 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
000986B4 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise pointer?
000986BA 6600                       		bne.s	@locexit			; Branch if not
000986BC 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise tone
000986C4                            ; loc_72E02:
000986C4                            @locexit:
000986C4 504F                       		addq.w	#8,sp		; Tamper with return value so we don't go back to caller
000986C6 4E75                       		rts	
000986C8                            ; ===========================================================================
000986C8                            ; loc_72E06:
000986C8                            cfSetPSGNoise:
000986C8 1B7C 00E0 0001             		move.b	#$E0,TrackVoiceControl(a5)	; Turn channel into noise channel
000986CE 1B5C 001F                  		move.b	(a4)+,TrackPSGNoise(a5)	; Save noise tone
000986D2 0815 0002                  		btst	#2,(a5)				; Is track being overridden? (TrackPlaybackControl)
000986D6 6600                       		bne.s	@locret				; Return if yes
000986D8 13EC FFFF 00C0 0011        		move.b	-1(a4),(psg_input).l		; Set tone
000986E0                            ; locret_72E1E:
000986E0                            @locret:
000986E0 4E75                       		rts	
000986E2                            ; ===========================================================================
000986E2                            ; loc_72E20:
000986E2                            cfDisableModulation:
000986E2 0895 0003                  		bclr	#3,(a5)		; Disable modulation (TrackPlaybackControl)
000986E6 4E75                       		rts	
000986E8                            ; ===========================================================================
000986E8                            ; loc_72E26:
000986E8                            cfSetPSGTone:
000986E8 1B5C 000B                  		move.b	(a4)+,TrackVoiceIndex(a5)	; Set current PSG tone
000986EC 4E75                       		rts	
000986EE                            ; ===========================================================================
000986EE                            ; loc_72E2C:
000986EE                            cfJumpTo:
000986EE 101C                       		move.b	(a4)+,d0	; High byte of offset
000986F0 E148                       		lsl.w	#8,d0		; Shift it into place
000986F2 101C                       		move.b	(a4)+,d0	; Low byte of offset
000986F4 D8C0                       		adda.w	d0,a4		; Add to current position
000986F6 534C                       		subq.w	#1,a4		; Put back one byte
000986F8 4E75                       		rts	
000986FA                            ; ===========================================================================
000986FA                            ; loc_72E38:
000986FA                            cfRepeatAtPos:
000986FA 7000                       		moveq	#0,d0
000986FC 101C                       		move.b	(a4)+,d0			; Loop index
000986FE 121C                       		move.b	(a4)+,d1			; Repeat count
00098700 4A35 0024                  		tst.b	TrackLoopCounters(a5,d0.w)	; Has this loop already started?
00098704 6600                       		bne.s	@loopexists			; Branch if yes
00098706 1B81 0024                  		move.b	d1,TrackLoopCounters(a5,d0.w)	; Initialize repeat count
0009870A                            ; loc_72E48:
0009870A                            @loopexists:
0009870A 5335 0024                  		subq.b	#1,TrackLoopCounters(a5,d0.w)	; Decrease loop's repeat count
0009870E 66DE                       		bne.s	cfJumpTo			; If nonzero, branch to target
00098710 544C                       		addq.w	#2,a4				; Skip target address
00098712 4E75                       		rts	
00098714                            ; ===========================================================================
00098714                            ; loc_72E52:
00098714                            cfJumpToGosub:
00098714 7000                       		moveq	#0,d0
00098716 102D 000D                  		move.b	TrackStackPointer(a5),d0	; Current stack pointer
0009871A 5900                       		subq.b	#4,d0				; Add space for another target
0009871C 2B8C 0000                  		move.l	a4,(a5,d0.w)			; Put in current address (*before* target for jump!)
00098720 1B40 000D                  		move.b	d0,TrackStackPointer(a5)	; Store new stack pointer
00098724 60C8                       		bra.s	cfJumpTo
00098726                            ; ===========================================================================
00098726                            ; loc_72E64:
00098726                            cfOpF9:
00098726 103C 0088                  		move.b	#$88,d0		; D1L/RR of Operator 3
0009872A 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
0009872E 4EBA F8B4                  		jsr	WriteFMI(pc)
00098732 103C 008C                  		move.b	#$8C,d0		; D1L/RR of Operator 4
00098736 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
0009873A 6000 F8A8                  		bra.w	WriteFMI
0009873E                            ; ===========================================================================
0009873E                            
0009873E                            Kos_Z80:
0009873E                            		incbin	"sound\z80.bin", 0, $15
00098753 00                         		dc.b ((SegaPCM&$FF8000)/$8000)&1						; Least bit of bank ID (bit 15 of address)
00098754                            		incbin	"sound\z80.bin", $16, 6
0009875A 00                         		dc.b ((SegaPCM&$FF8000)/$8000)>>1						; ... the remaining bits of bank ID (bits 16-23)
0009875B                            		incbin	"sound\z80.bin", $1D, $93
000987EE 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$7F00)>>8)|$80				; Pointer to Sega PCM, relative to start of ROM bank (i.e., little_endian($8000 + SegaPCM&$7FFF)
000987F0                            		incbin	"sound\z80.bin", $B2, 1
000987F1 0000                       		dc.w (((SegaPCM_End-SegaPCM)&$FF)<<8)+(((SegaPCM_End-SegaPCM)&$FF00)>>8)	; ... the size of the Sega PCM (little endian)
000987F3                            		incbin	"sound\z80.bin", $B5, $16AB
00099E94                            		even
00099E94                            
00099E94                            Music81:	incbin	"sound/music/Mus81 - GHZ.bin"
0009B1B8 00                         		even
0009B1B8                            Music82:	incbin	"sound/music/Mus82 - LZ.bin"
0009CA40                            		even
0009CA40                            Music83:	incbin	"sound/music/Mus83 - MZ.bin"
000A43C0 00                         		even
000A43C0                            Music84:	incbin	"sound/music/Mus84 - SLZ.bin"
000A5BD4 00                         		even
000A5BD4                            Music85:	incbin	"sound/music/Mus85 - SYZ.bin"
000A697A                            		even
000A697A                            Music86:	incbin	"sound/music/Mus86 - SBZ.bin"
000A7D32                            		even
000A7D32                            Music87:	incbin	"sound/music/Mus87 - Invincibility.bin"
000A862A 00                         		even
000A862A                            Music88:	include	"sound/music/Mus88 - Extra Life.asm"
000A862A                            extralifejingle_Header:
000A862A                            	smpsHeaderStartSong 1
000A862C 0703                       	smpsHeaderChan      $07, $03
000A862E 0100                       	smpsHeaderTempo     $01, $00
000A8630                            
000A8634 0000 0000                  	smpsHeaderFM        extralifejingle_FM1,	$00, $00
000A8638 0000 0000                  	smpsHeaderFM        extralifejingle_FM2,	$00, $00
000A863C 0000 0000                  	smpsHeaderFM        extralifejingle_FM3,	$00, $00
000A8640 0000 0000                  	smpsHeaderFM        extralifejingle_FM4,	$00, $00
000A8644 0000 0000                  	smpsHeaderFM        extralifejingle_FM5,	$00, $00
000A8648 0000 0000                  	smpsHeaderFM        extralifejingle_FM6,	$00, $00
000A865E                            
000A865E                            ; DAC Data
000A865E                            extralifejingle_DAC:
000A865E 807F 55                    	dc.b	nRst, $7F, $55
000A8661 E4                         	smpsFade
000A8662                            ; PSG1 Data
000A8662                            extralifejingle_PSG1:
000A8662                            ; PSG2 Data
000A8662                            extralifejingle_PSG2:
000A8662                            ; PSG3 Data
000A8662                            extralifejingle_PSG3:
000A8662 F2                         	smpsStop
000A8663                            
000A8663                            ; FM1 Data
000A8663                            extralifejingle_FM1:
000A8663 EF00                       	smpsSetvoice        $00
000A8665 E616                       	smpsAlterVol        $16
000A8667 E0C0                       	smpsPan             panCenter, $00
000A8669 A61A BC13 BB12 B913 B60D+  	dc.b	nCs3, $1A, nB4, $13, nBb4, $12, nAb4, $13, nF4, $0D, nG3, $2C
000A8675 AC06 800C                  	dc.b	nG3, $06, nRst, $0C
000A8679 F2                         	smpsStop
000A867A                            
000A867A                            ; FM2 Data
000A867A                            extralifejingle_FM2:
000A867A EF01                       	smpsSetvoice        $01
000A867C E616                       	smpsAlterVol        $16
000A867E E0C0                       	smpsPan             panCenter, $00
000A8680 B61A AD13 AB12 AA13 A60D+  	dc.b	nF4, $1A, nAb3, $13, nFs3, $12, nF3, $13, nCs3, $0D, nA2, $2C
000A868C A206 800C                  	dc.b	nA2, $06, nRst, $0C
000A8690 F2                         	smpsStop
000A8691                            
000A8691                            ; FM3 Data
000A8691                            extralifejingle_FM3:
000A8691 EF01                       	smpsSetvoice        $01
000A8693 E616                       	smpsAlterVol        $16
000A8695 E0C0                       	smpsPan             panCenter, $00
000A8697 AD0D BC13 B9B7 B60C B20D+  	dc.b	nAb3, $0D, nB4, $13, nAb4, nFs4, nF4, $0C, nCs4, $0D, nC4, $2C
000A86A3 B106 800C                  	dc.b	nC4, $06, nRst, $0C
000A86A7 F2                         	smpsStop
000A86A8                            
000A86A8                            ; FM4 Data
000A86A8                            extralifejingle_FM4:
000A86A8 EF02                       	smpsSetvoice        $02
000A86AA E0C0                       	smpsPan             panCenter, $00
000A86AC 8001                       	dc.b	nRst, $01
000A86AE E616                       	smpsAlterVol        $16
000A86B0 BE0C B913 ABAA A60C A20D+  	dc.b	nCs5, $0C, nAb4, $13, nFs3, nF3, nCs3, $0C, nA2, $0D, nE5, $2C
000A86BC C106 800C                  	dc.b	nE5, $06, nRst, $0C
000A86C0 F2                         	smpsStop
000A86C1                            
000A86C1                            ; FM5 Data
000A86C1                            extralifejingle_FM5:
000A86C1 EF03                       	smpsSetvoice        $03
000A86C3 E602                       	smpsAlterVol        $02
000A86C5 E0C0                       	smpsPan             panCenter, $00
000A86C7 8001                       	dc.b	nRst, $01
000A86C9 EF05                       	smpsSetvoice        $05
000A86CB E60A                       	smpsAlterVol        $0A
000A86CD E780 0CC8 06B2 07B9 06C7+  	dc.b	smpsNoAttack, nRst, $0C, nB5, $06, nCs4, $07, nAb4, $06, nBb5, nCs4, $07
000A86D9 B706 C5C8 B607 C206 B2BE+  	dc.b	nFs4, $06, nAb5, nB5, nF4, $07, nF5, $06, nCs4, nCs5, $07, nA5
000A86E5 06BD C1C4 07BD 06C1 C407+  	dc.b	$06, nC5, nE5, nG5, $07, nC5, $06, nE5, nG5, $07, nC5, $06
000A86F1 C1C4 80                    	dc.b	nE5, nG5, nRst
000A86F4 F2                         	smpsStop
000A86F5                            
000A86F5                            ; FM6 Data
000A86F5                            extralifejingle_FM6:
000A86F5 EF04                       	smpsSetvoice        $04
000A86F7 E607                       	smpsAlterVol        $07
000A86F9 E0C0                       	smpsPan             panCenter, $00
000A86FB 8001                       	dc.b	nRst, $01
000A86FD EF06                       	smpsSetvoice        $06
000A86FF E6F9                       	smpsAlterVol        $F9
000A8701 A658 A72C A70C 80          	dc.b	nCs3, $58, nD3, $2C, nD3, $0C, nRst
000A8708 F2                         	smpsStop
000A8709                            
000A8709                            extralifejingle_Voices:
000A8709                            ;	Voice $00
000A8709                            ;	$3A
000A8709                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000A8709                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000A8709                            	smpsVcAlgorithm     $02
000A8709                            	smpsVcFeedback      $07
000A8709                            	smpsVcUnusedBits    $00
000A8709                            	smpsVcDetune        $03, $07, $07, $03
000A8709                            	smpsVcCoarseFreq    $01, $04, $03, $04
000A8709                            	smpsVcRateScale     $00, $00, $00, $00
000A8709                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A8709                            	smpsVcAmpMod        $00, $00, $00, $00
000A8709                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000A8709                            	smpsVcDecayRate2    $00, $00, $00, $00
000A8709                            	smpsVcDecayLevel    $00, $00, $00, $00
000A8709                            	smpsVcReleaseRate   $05, $03, $03, $03
000A8722                            
000A8722                            ;	Voice $01
000A8722                            ;	$3A
000A8722                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000A8722                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000A8722                            	smpsVcAlgorithm     $02
000A8722                            	smpsVcFeedback      $07
000A8722                            	smpsVcUnusedBits    $00
000A8722                            	smpsVcDetune        $03, $07, $07, $03
000A8722                            	smpsVcCoarseFreq    $01, $04, $03, $04
000A8722                            	smpsVcRateScale     $00, $00, $00, $00
000A8722                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A8722                            	smpsVcAmpMod        $00, $00, $00, $00
000A8722                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000A8722                            	smpsVcDecayRate2    $00, $00, $00, $00
000A8722                            	smpsVcDecayLevel    $00, $00, $00, $00
000A8722                            	smpsVcReleaseRate   $05, $03, $03, $03
000A873B                            
000A873B                            ;	Voice $02
000A873B                            ;	$3A
000A873B                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000A873B                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000A873B                            	smpsVcAlgorithm     $02
000A873B                            	smpsVcFeedback      $07
000A873B                            	smpsVcUnusedBits    $00
000A873B                            	smpsVcDetune        $03, $07, $07, $03
000A873B                            	smpsVcCoarseFreq    $01, $04, $03, $04
000A873B                            	smpsVcRateScale     $00, $00, $00, $00
000A873B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A873B                            	smpsVcAmpMod        $00, $00, $00, $00
000A873B                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000A873B                            	smpsVcDecayRate2    $00, $00, $00, $00
000A873B                            	smpsVcDecayLevel    $00, $00, $00, $00
000A873B                            	smpsVcReleaseRate   $05, $03, $03, $03
000A8754                            
000A8754                            ;	Voice $03
000A8754                            ;	$00
000A8754                            ;	$01, $0E, $00, $00, 	$1E, $1E, $1E, $1D, 	$1A, $1C, $10, $10
000A8754                            ;	$00, $00, $00, $00, 	$FD, $FE, $F8, $F8, 	$1A, $25, $05, $00
000A8754                            	smpsVcAlgorithm     $00
000A8754                            	smpsVcFeedback      $00
000A8754                            	smpsVcUnusedBits    $00
000A8754                            	smpsVcDetune        $00, $00, $00, $00
000A8754                            	smpsVcCoarseFreq    $00, $00, $0E, $01
000A8754                            	smpsVcRateScale     $00, $00, $00, $00
000A8754                            	smpsVcAttackRate    $1D, $1E, $1E, $1E
000A8754                            	smpsVcAmpMod        $00, $00, $00, $00
000A8754                            	smpsVcDecayRate1    $10, $10, $1C, $1A
000A8754                            	smpsVcDecayRate2    $00, $00, $00, $00
000A8754                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A8754                            	smpsVcReleaseRate   $08, $08, $0E, $0D
000A876D                            
000A876D                            ;	Voice $04
000A876D                            ;	$03
000A876D                            ;	$66, $40, $40, $31, 	$1F, $1F, $1F, $1C, 	$0E, $05, $02, $01
000A876D                            ;	$01, $00, $04, $06, 	$AA, $6A, $16, $18, 	$2A, $1A, $20, $00
000A876D                            	smpsVcAlgorithm     $03
000A876D                            	smpsVcFeedback      $00
000A876D                            	smpsVcUnusedBits    $00
000A876D                            	smpsVcDetune        $03, $04, $04, $06
000A876D                            	smpsVcCoarseFreq    $01, $00, $00, $06
000A876D                            	smpsVcRateScale     $00, $00, $00, $00
000A876D                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
000A876D                            	smpsVcAmpMod        $00, $00, $00, $00
000A876D                            	smpsVcDecayRate1    $01, $02, $05, $0E
000A876D                            	smpsVcDecayRate2    $06, $04, $00, $01
000A876D                            	smpsVcDecayLevel    $01, $01, $06, $0A
000A876D                            	smpsVcReleaseRate   $08, $06, $0A, $0A
000A8786                            
000A8786                            ;	Voice $05
000A8786                            ;	$34
000A8786                            ;	$33, $7E, $01, $74, 	$9B, $1F, $5F, $1F, 	$14, $07, $07, $08
000A8786                            ;	$00, $00, $00, $00, 	$F6, $E4, $F7, $F7, 	$19, $71, $00, $00
000A8786                            	smpsVcAlgorithm     $04
000A8786                            	smpsVcFeedback      $06
000A8786                            	smpsVcUnusedBits    $00
000A8786                            	smpsVcDetune        $07, $00, $07, $03
000A8786                            	smpsVcCoarseFreq    $04, $01, $0E, $03
000A8786                            	smpsVcRateScale     $00, $01, $00, $02
000A8786                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
000A8786                            	smpsVcAmpMod        $00, $00, $00, $00
000A8786                            	smpsVcDecayRate1    $08, $07, $07, $14
000A8786                            	smpsVcDecayRate2    $00, $00, $00, $00
000A8786                            	smpsVcDecayLevel    $0F, $0F, $0E, $0F
000A8786                            	smpsVcReleaseRate   $07, $07, $04, $06
000A879F                            
000A879F                            ;	Voice $06
000A879F                            ;	$30
000A879F                            ;	$01, $00, $00, $01, 	$9F, $1F, $1F, $5C, 	$0F, $0D, $10, $14
000A879F                            ;	$08, $18, $05, $08, 	$6F, $00, $0F, $18, 	$15, $1F, $19, $00
000A879F                            	smpsVcAlgorithm     $00
000A879F                            	smpsVcFeedback      $06
000A879F                            	smpsVcUnusedBits    $00
000A879F                            	smpsVcDetune        $00, $00, $00, $00
000A879F                            	smpsVcCoarseFreq    $01, $00, $00, $01
000A879F                            	smpsVcRateScale     $01, $00, $00, $02
000A879F                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
000A879F                            	smpsVcAmpMod        $00, $00, $00, $00
000A879F                            	smpsVcDecayRate1    $14, $10, $0D, $0F
000A879F                            	smpsVcDecayRate2    $08, $05, $18, $08
000A879F                            	smpsVcDecayLevel    $01, $00, $00, $06
000A879F                            	smpsVcReleaseRate   $08, $0F, $00, $0F
000A87B8                            
000A87B8                            
000A87B8                            		even
000A87B8                            Music89:	incbin	"sound/music/Mus89 - Special Stage.bin"
000A9010 00                         		even
000A9010                            Music8A:	incbin	"sound/music/Mus8A - Title Screen.bin"
000A9530                            		even
000A9530                            Music8B:	incbin	"sound/music/Mus8B - Ending.bin"
000A97F2 00                         		even
000A97F2                            Music8C:	incbin	"sound/music/Mus8C - Boss.bin"
000AA64A                            		even
000AA64A                            Music8D:	incbin	"sound/music/Mus8D - FZ.bin"
000AA896 00                         		even
000AA896                            Music8E:	incbin	"sound/music/Mus8E - Sonic Got Through.bin"
000AABCC 00                         		even
000AABCC                            Music8F:	incbin	"sound/music/Mus8F - Game Over.bin"
000AAD78 00                         		even
000AAD78                            Music90:	incbin	"sound/music/Mus90 - Continue Screen.bin"
000AAF86 00                         		even
000AAF86                            Music91:	incbin	"sound/music/Mus91 - Credits.bin"
000AB26A 00                         		even
000AB26A                            Music92:	incbin	"sound/music/Mus92 - Drowning.bin"
000AB99A 00                         		even
000AB99A                            Music93:	incbin	"sound/music/Mus93 - Get Emerald.bin"
000ABA68                            		even
000ABA68                            Music94:	incbin	"sound/music/Mus94 - Final Boss Pinch.bin"
000ABED6 00                         		even
000ABED6                            Music95:		incbin	"sound/music/Mus95 - Seaside Front.bin"
000AC9CC                            		even
000AC9CC                            Music96:		incbin	"sound/music/Mus96 - Big Water.bin"
000AD522                            		even
000AD522                            Music97:		incbin	"sound/music/Mus97 - Granada Game Over.bin"
000AE828 00                         		even
000AE828                            Music98:		include	"sound/music/Mus98 - Options Theme.asm"
000AE828                            PasswordEntry_Header:
000AE828                            	smpsHeaderStartSong 3
000AE82A 0603                       	smpsHeaderChan      $06, $03
000AE82C 0105                       	smpsHeaderTempo     $01, $05
000AE82E                            
000AE832 0000 0013                  	smpsHeaderFM        PasswordEntry_FM1,	$00, $13
000AE836 0000 F40B                  	smpsHeaderFM        PasswordEntry_FM2,	$F4, $0B
000AE83A 0000 000F                  	smpsHeaderFM        PasswordEntry_FM3,	$00, $0F
000AE83E 0000 000F                  	smpsHeaderFM        PasswordEntry_FM4,	$00, $0F
000AE842 0000 001D                  	smpsHeaderFM        PasswordEntry_FM5,	$00, $1D
000AE858                            
000AE858                            ; FM1 Data
000AE858                            PasswordEntry_FM1:
000AE858 EF00                       	smpsSetvoice        $00
000AE85F                            
000AE85F                            PasswordEntry_Jump00:
000AE85F CD30 CED0 D010 CE08 CD10+  	dc.b	nE6, $30, nF6, nG6, nG6, $10, nF6, $08, nE6, $10, nF6, $08
000AE86B C930 CBCD CE10 CD08 CB10+  	dc.b	nC6, $30, nD6, nE6, nF6, $10, nE6, $08, nD6, $10, nE6, $08
000AE877 C960 C830 C4C6 C210 C6C9+  	dc.b	nC6, $60, nB5, $30, nG5, nA5, nF5, $10, nA5, nC6, nB5, $30
000AE883 C918 CB                    	dc.b	nC6, $18, nD6
000AE886 F6FF D7                    	smpsJump            PasswordEntry_Jump00
000AE889                            
000AE889                            ; FM2 Data
000AE889                            PasswordEntry_FM2:
000AE889 EF01                       	smpsSetvoice        $01
000AE88B                            
000AE88B                            PasswordEntry_Jump03:
000AE88B B118 1818 10AC 08B1 1818+  	dc.b	nC4, $18, $18, $18, $10, nG3, $08, nC4, $18, $18, $18, nB3
000AE897 AEAE AEAE 10B5 08AE 1818+  	dc.b	nA3, nA3, nA3, nA3, $10, nE4, $08, nA3, $18, $18, $18, nG3
000AE8A3 AAAA AAAA 1008 B518 1818+  	dc.b	nF3, nF3, nF3, nF3, $10, $08, nE4, $18, $18, $18, $10, $08
000AE8AF AC18 1818 1008 1818 AEB0   	dc.b	nG3, $18, $18, $18, $10, $08, $18, $18, nA3, nB3
000AE8B9 F6FF D0                    	smpsJump            PasswordEntry_Jump03
000AE8BC                            
000AE8BC                            ; FM3 Data
000AE8BC                            PasswordEntry_FM3:
000AE8BC E080                       	smpsPan             panLeft, $00
000AE8BE EF02                       	smpsSetvoice        $02
000AE8C0                            
000AE8C0                            PasswordEntry_Jump02:
000AE8C0 C104 8014 C408 8010 C208+  	dc.b	nE5, $04, nRst, $14, nG5, $08, nRst, $10, nF5, $08, nRst, $10
000AE8CC C204 8014 C104 8014 C104+  	dc.b	nF5, $04, nRst, $14, nE5, $04, nRst, $14, nE5, $04, nRst, $0C
000AE8D8 C204 8014 C21C 8004 C404+  	dc.b	nF5, $04, nRst, $14, nF5, $1C, nRst, $04, nG5, $04, nRst, $14
000AE8E4 C408 8010 C204 8014 C204+  	dc.b	nG5, $08, nRst, $10, nF5, $04, nRst, $14, nF5, $04, nRst, $14
000AE8F0 C108 8010 C104 800C C204+  	dc.b	nE5, $08, nRst, $10, nE5, $04, nRst, $0C, nF5, $04, nRst, $14
000AE8FC C21C 8004 C108 8010 C108+  	dc.b	nF5, $1C, nRst, $04, nE5, $08, nRst, $10, nE5, $08, nRst, $10
000AE908 BF08 8010 C20C 800C C408+  	dc.b	nD5, $08, nRst, $10, nF5, $0C, nRst, $0C, nG5, $08, nRst, $10
000AE914 C408 8010 BF08 8010 BF0C+  	dc.b	nG5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $0C, nRst, $0C
000AE920 BA08 8010 BD0C 800C BD0C+  	dc.b	nA4, $08, nRst, $10, nC5, $0C, nRst, $0C, nC5, $0C, nRst, $0C
000AE92C BD0C 800C BF08 8010 BF08+  	dc.b	nC5, $0C, nRst, $0C, nD5, $08, nRst, $10, nD5, $08, nRst, $10
000AE938 BF08 8010 BF08 8010        	dc.b	nD5, $08, nRst, $10, nD5, $08, nRst, $10
000AE940 F6FF 7E                    	smpsJump            PasswordEntry_Jump02
000AE943                            
000AE943                            ; FM4 Data
000AE943                            PasswordEntry_FM4:
000AE943 E040                       	smpsPan             panRight, $00
000AE945 EF02                       	smpsSetvoice        $02
000AE947                            
000AE947                            PasswordEntry_Jump01:
000AE947 C404 8014 C104 8014 BF04+  	dc.b	nG5, $04, nRst, $14, nE5, $04, nRst, $14, nD5, $04, nRst, $14
000AE953 BF04 8014 BD04 8014 BD04+  	dc.b	nD5, $04, nRst, $14, nC5, $04, nRst, $14, nC5, $04, nRst, $0C
000AE95F BF04 8014 BF18 8008 C104+  	dc.b	nD5, $04, nRst, $14, nD5, $18, nRst, $08, nE5, $04, nRst, $14
000AE96B C104 8014 BF04 8014 BF04+  	dc.b	nE5, $04, nRst, $14, nD5, $04, nRst, $14, nD5, $04, nRst, $14
000AE977 BD04 8014 BD04 800C BF04+  	dc.b	nC5, $04, nRst, $14, nC5, $04, nRst, $0C, nD5, $04, nRst, $14
000AE983 BF1C 8004 C408 8010 C408+  	dc.b	nD5, $1C, nRst, $04, nG5, $08, nRst, $10, nG5, $08, nRst, $10
000AE98F C208 8010 BF08 8010 BF08+  	dc.b	nF5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $08, nRst, $10
000AE99B BF08 8010 BC08 8010 BC0C+  	dc.b	nD5, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $0C, nRst, $0C
000AE9A7 BD08 8010 BA08 8010 BA08+  	dc.b	nC5, $08, nRst, $10, nA4, $08, nRst, $10, nA4, $08, nRst, $10
000AE9B3 BA08 8010 BC08 8010 BC08+  	dc.b	nA4, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $08, nRst, $10
000AE9BF BC08 8010 BC08 8010        	dc.b	nB4, $08, nRst, $10, nB4, $08, nRst, $10
000AE9C7 F6FF 7E                    	smpsJump            PasswordEntry_Jump01
000AE9CA                            
000AE9CA                            ; FM5 Data
000AE9CA                            PasswordEntry_FM5:
000AE9CA EF00                       	smpsSetvoice        $00
000AE9CC E1FB                       	smpsAlterNote       $FB
000AE9CE 800C                       	dc.b	nRst, $0C
000AE9D0 F6FE 8D                    	smpsJump            PasswordEntry_Jump00
000AE9D3                            
000AE9D3                            ; PSG1 Data
000AE9D3                            PasswordEntry_PSG1:
000AE9D3 C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
000AE9DF CD10 D038 C410 C908 CD10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nC6, $08, nE6, $10, nG6, $38
000AE9EB C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
000AE9F7 CD10 D038 C410 C808 CB10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nB5, $08, nD6, $10, nG6, $38
000AEA03 C210 C608 C910 CE18 C908+  	dc.b	nF5, $10, nA5, $08, nC6, $10, nF6, $18, nC6, $08, nA5, $10
000AEA0F C208 C410 C808 CB10 D018+  	dc.b	nF5, $08, nG5, $10, nB5, $08, nD6, $10, nG6, $18, nD6, $08
000AEA1B C810 C408                  	dc.b	nB5, $10, nG5, $08
000AEA1F F6FF B2                    	smpsJump            PasswordEntry_PSG1
000AEA22                            
000AEA22                            ; PSG2 Data
000AEA22                            PasswordEntry_PSG2:
000AEA22 E1FF                       	smpsAlterNote       $FF
000AEA24 800C                       	dc.b	nRst, $0C
000AEA26 F6FF AB                    	smpsJump            PasswordEntry_PSG1
000AEA29                            
000AEA29                            ; PSG3 Data
000AEA29                            PasswordEntry_PSG3:
000AEA29 F502                       	smpsPSGvoice        fTone_02
000AEA2B F3E7                       	smpsPSGform         $E7
000AEA2D C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
000AEA39 C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
000AEA45 C508 80C5 C508 C5          	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nAb5
000AEA4C F503                       	smpsPSGvoice        fTone_03
000AEA4E C5                         	dc.b	nAb5
000AEA4F F6FF D8                    	smpsJump            PasswordEntry_PSG3
000AEA52                            
000AEA52                            ; DAC Data
000AEA52                            PasswordEntry_DAC:
000AEA52 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000AEA5E 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
000AEA66 F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_DAC
000AEA6B 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000AEA77 0880 0881 8210 8208        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dSnare, $08
000AEA7F                            
000AEA7F                            PasswordEntry_Loop00:
000AEA7F 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000AEA8B 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
000AEA93 F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_Loop00
000AEA98 8118 8281 8210 8108 8108+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $08, nRst, $08
000AEAA4 8182 8182 8282 8889 898A   	dc.b	dKick, dSnare, dKick, dSnare, dSnare, dSnare, dHiTimpani, dMidTimpani, dMidTimpani, dLowTimpani
000AEAAE F6FF A2                    	smpsJump            PasswordEntry_DAC
000AEAB1                            
000AEAB1                            PasswordEntry_Voices:
000AEAB1                            ;	Voice $00
000AEAB1                            ;	$04
000AEAB1                            ;	$02, $01, $01, $00, 	$1F, $10, $1F, $12, 	$09, $03, $0B, $04
000AEAB1                            ;	$03, $00, $00, $05, 	$EF, $FF, $2F, $0F, 	$1C, $80, $19, $80
000AEAB1                            	smpsVcAlgorithm     $04
000AEAB1                            	smpsVcFeedback      $00
000AEAB1                            	smpsVcUnusedBits    $00
000AEAB1                            	smpsVcDetune        $00, $00, $00, $00
000AEAB1                            	smpsVcCoarseFreq    $00, $01, $01, $02
000AEAB1                            	smpsVcRateScale     $00, $00, $00, $00
000AEAB1                            	smpsVcAttackRate    $12, $1F, $10, $1F
000AEAB1                            	smpsVcAmpMod        $00, $00, $00, $00
000AEAB1                            	smpsVcDecayRate1    $04, $0B, $03, $09
000AEAB1                            	smpsVcDecayRate2    $05, $00, $00, $03
000AEAB1                            	smpsVcDecayLevel    $00, $02, $0F, $0E
000AEAB1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AEACA                            
000AEACA                            ;	Voice $01
000AEACA                            ;	$39
000AEACA                            ;	$03, $61, $40, $00, 	$1F, $5F, $5F, $5F, 	$10, $11, $09, $09
000AEACA                            ;	$06, $00, $00, $00, 	$C8, $F8, $F8, $F8, 	$1E, $24, $20, $80
000AEACA                            	smpsVcAlgorithm     $01
000AEACA                            	smpsVcFeedback      $07
000AEACA                            	smpsVcUnusedBits    $00
000AEACA                            	smpsVcDetune        $00, $04, $06, $00
000AEACA                            	smpsVcCoarseFreq    $00, $00, $01, $03
000AEACA                            	smpsVcRateScale     $01, $01, $01, $00
000AEACA                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AEACA                            	smpsVcAmpMod        $00, $00, $00, $00
000AEACA                            	smpsVcDecayRate1    $09, $09, $11, $10
000AEACA                            	smpsVcDecayRate2    $00, $00, $00, $06
000AEACA                            	smpsVcDecayLevel    $0F, $0F, $0F, $0C
000AEACA                            	smpsVcReleaseRate   $08, $08, $08, $08
000AEAE3                            
000AEAE3                            ;	Voice $02
000AEAE3                            ;	$2C
000AEAE3                            ;	$41, $00, $23, $00, 	$1F, $1F, $1F, $1F, 	$08, $0A, $0B, $0A
000AEAE3                            ;	$04, $05, $00, $05, 	$45, $56, $85, $86, 	$14, $82, $18, $82
000AEAE3                            	smpsVcAlgorithm     $04
000AEAE3                            	smpsVcFeedback      $05
000AEAE3                            	smpsVcUnusedBits    $00
000AEAE3                            	smpsVcDetune        $00, $02, $00, $04
000AEAE3                            	smpsVcCoarseFreq    $00, $03, $00, $01
000AEAE3                            	smpsVcRateScale     $00, $00, $00, $00
000AEAE3                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AEAE3                            	smpsVcAmpMod        $00, $00, $00, $00
000AEAE3                            	smpsVcDecayRate1    $0A, $0B, $0A, $08
000AEAE3                            	smpsVcDecayRate2    $05, $00, $05, $04
000AEAE3                            	smpsVcDecayLevel    $08, $08, $05, $04
000AEAE3                            	smpsVcReleaseRate   $06, $05, $06, $05
000AEAFC                            
000AEAFC                            
000AEAFC                            		even	
000AEAFC                            Music99:		include	"sound/music/Mus99 - Toxic Landfill.asm"
000AEAFC                            ToxicLandfill_Header:
000AEAFC                            	smpsHeaderStartSong 1
000AEAFE 0603                       	smpsHeaderChan      $06, $03
000AEB00 0208                       	smpsHeaderTempo     $02, $08
000AEB02                            
000AEB06 0000 000A                  	smpsHeaderFM        ToxicLandfill_FM1,	$00, $0A
000AEB0A 0000 000A                  	smpsHeaderFM        ToxicLandfill_FM2,	$00, $0A	
000AEB0E 0000 0C0B                  	smpsHeaderFM        ToxicLandfill_FM3,	$0C, $0B
000AEB12 0000 0C0B                  	smpsHeaderFM        ToxicLandfill_FM4,	$0C, $0B
000AEB16 0000 0012                  	smpsHeaderFM        ToxicLandfill_FM5,	$00, $12
000AEB2C                            
000AEB2C                            ; DAC Data
000AEB2C                            ToxicLandfill_DAC:
000AEB2C E0C0                       	smpsPan             panCenter, $00
000AEB2E 807F 7F22 8106 1803 0382+  	dc.b	nRst, $7F, $7F, $22, dKick, $06, $18, $03, $03, dSnare, $06, dKick
000AEB3A 8181 8281 0306 8281 0382+  	dc.b	dKick, dKick, dSnare, dKick, $03, $06, dSnare, dKick, $03, dSnare, dKick
000AEB45                            
000AEB45                            ToxicLandfill_Loop00:
000AEB45 82                         	dc.b	dSnare
000AEB46                            
000AEB46                            ToxicLandfill_Loop01:
000AEB46 82                         	dc.b	dSnare
000AEB47                            
000AEB47                            ToxicLandfill_Jump00:
000AEB47 8106 8203 8106 0382 8181+  	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, dKick, dKick, $06, dSnare
000AEB53 0381 0603                  	dc.b	$03, dKick, $06, $03
000AEB57 F700 03FF EA               	smpsLoop            $00, $03, ToxicLandfill_Loop00
000AEB5C 8282 8206 8103 8206 8103+  	dc.b	dSnare, dSnare, dSnare, $06, dKick, $03, dSnare, $06, dKick, $03, dSnare, dKick
000AEB68 0682 0381 8281 8281        	dc.b	$06, dSnare, $03, dKick, dSnare, dKick, dSnare, dKick
000AEB70 F701 02FF D2               	smpsLoop            $01, $02, ToxicLandfill_Loop01
000AEB75                            
000AEB75                            ToxicLandfill_Loop06:
000AEB75 82                         	dc.b	dSnare
000AEB76                            
000AEB76                            ToxicLandfill_Loop02:
000AEB76 8181 8281                  	dc.b	dKick, dKick, dSnare, dKick
000AEB7A F700 06FF F8               	smpsLoop            $00, $06, ToxicLandfill_Loop02
000AEB7F                            
000AEB7F                            ToxicLandfill_Loop03:
000AEB7F 8281 81                    	dc.b	dSnare, dKick, dKick
000AEB82 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop03
000AEB87                            
000AEB87                            ToxicLandfill_Loop04:
000AEB87 8182 8181                  	dc.b	dKick, dSnare, dKick, dKick
000AEB8B F700 03FF F8               	smpsLoop            $00, $03, ToxicLandfill_Loop04
000AEB90 8182 81                    	dc.b	dKick, dSnare, dKick
000AEB93                            
000AEB93                            ToxicLandfill_Loop05:
000AEB93 8102 0182 03               	dc.b	dKick, $02, $01, dSnare, $03
000AEB98 F700 06FF F7               	smpsLoop            $00, $06, ToxicLandfill_Loop05
000AEB9D 0303 03                    	dc.b	$03, $03, $03
000AEBA0 F701 02FF D1               	smpsLoop            $01, $02, ToxicLandfill_Loop06
000AEBA5                            
000AEBA5                            ToxicLandfill_Loop08:
000AEBA5 03                         	dc.b	$03
000AEBA6                            
000AEBA6                            ToxicLandfill_Loop07:
000AEBA6 8106 8203 8106 0382 06     	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, $06
000AEBAF F700 07FF F3               	smpsLoop            $00, $07, ToxicLandfill_Loop07
000AEBB4 8182 0381 8282 82          	dc.b	dKick, dSnare, $03, dKick, dSnare, dSnare, dSnare
000AEBBB F701 02FF E6               	smpsLoop            $01, $02, ToxicLandfill_Loop08
000AEBC0                            
000AEBC0                            ToxicLandfill_Loop0D:
000AEBC0 82                         	dc.b	dSnare
000AEBC1                            
000AEBC1                            ToxicLandfill_Loop09:
000AEBC1 8181 8281                  	dc.b	dKick, dKick, dSnare, dKick
000AEBC5 F700 06FF F8               	smpsLoop            $00, $06, ToxicLandfill_Loop09
000AEBCA                            
000AEBCA                            ToxicLandfill_Loop0A:
000AEBCA 8281 81                    	dc.b	dSnare, dKick, dKick
000AEBCD F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop0A
000AEBD2                            
000AEBD2                            ToxicLandfill_Loop0B:
000AEBD2 8182 8181                  	dc.b	dKick, dSnare, dKick, dKick
000AEBD6 F700 03FF F8               	smpsLoop            $00, $03, ToxicLandfill_Loop0B
000AEBDB 8182 81                    	dc.b	dKick, dSnare, dKick
000AEBDE                            
000AEBDE                            ToxicLandfill_Loop0C:
000AEBDE 8102 0182 03               	dc.b	dKick, $02, $01, dSnare, $03
000AEBE3 F700 06FF F7               	smpsLoop            $00, $06, ToxicLandfill_Loop0C
000AEBE8 0303 03                    	dc.b	$03, $03, $03
000AEBEB F701 02FF D1               	smpsLoop            $01, $02, ToxicLandfill_Loop0D
000AEBF0                            
000AEBF0                            ToxicLandfill_Loop0E:
000AEBF0 03                         	dc.b	$03
000AEBF1                            
000AEBF1                            ToxicLandfill_Loop0F:
000AEBF1 8106 8203 8106 0382 8181+  	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, dKick, dKick, $06, dSnare
000AEBFD 0381 0603 82               	dc.b	$03, dKick, $06, $03, dSnare
000AEC02 F700 03FF EA               	smpsLoop            $00, $03, ToxicLandfill_Loop0E
000AEC07 8282 0681 0382 0681 0382+  	dc.b	dSnare, dSnare, $06, dKick, $03, dSnare, $06, dKick, $03, dSnare, dKick, $06
000AEC13 8203 8182 8182 8182        	dc.b	dSnare, $03, dKick, dSnare, dKick, dSnare, dKick, dSnare
000AEC1B F701 02FF D2               	smpsLoop            $01, $02, ToxicLandfill_Loop0F
000AEC20                            
000AEC20                            ToxicLandfill_Loop10:
000AEC20 8106 8203 8106 0382 06     	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, $06
000AEC29 F700 07FF F3               	smpsLoop            $00, $07, ToxicLandfill_Loop10
000AEC2E 8182 0381 8282 8282        	dc.b	dKick, dSnare, $03, dKick, dSnare, dSnare, dSnare, dSnare
000AEC36 F701 04FF E6               	smpsLoop            $01, $04, ToxicLandfill_Loop10
000AEC3B F6FF 0A                    	smpsJump            ToxicLandfill_Jump00
000AEC3E                            
000AEC3E                            ; FM1 Data
000AEC3E                            ToxicLandfill_FM1:
000AEC3E E0C0                       	smpsPan             panCenter, $00
000AEC40 EF00                       	smpsSetvoice        $00
000AEC42 807F 7F76 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $76, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000AEC4E AD02 AE01 AF02 B001        	dc.b	nAb3, $02, nA3, $01, nBb3, $02, nB3, $01
000AEC56                            
000AEC56                            ToxicLandfill_Loop44:
000AEC56 AC09 0909 AA03 AC06 06AF+  	dc.b	nG3, $09, $09, $09, nF3, $03, nG3, $06, $06, nBb3, nG3, $09
000AEC62 0909 AA03 AC06 06B1 AC09+  	dc.b	$09, $09, nF3, $03, nG3, $06, $06, nC4, nG3, $09, $09, $09
000AEC6E AA03 AC06 06AF A709 0909+  	dc.b	nF3, $03, nG3, $06, $06, nBb3, nD3, $09, $09, $09, nC3, $03
000AEC7A A706 06AA                  	dc.b	nD3, $06, $06, nF3
000AEC7E F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop44
000AEC83                            
000AEC83                            ToxicLandfill_Loop46:
000AEC83 AC12 AA36 A902 A801 A702+  	dc.b	nG3, $12, nF3, $36, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000AEC8F A502 A401 A302 A201 A102+  	dc.b	nC3, $02, nB2, $01, nBb2, $02, nA2, $01, nAb2, $02, nG2, $01
000AEC9B 9F02 9E01 9D02 9C01 9B02+  	dc.b	nFs2, $02, nF2, $01, nE2, $02, nEb2, $01, nD2, $02, nCs2, $01
000AECA7 AC12 AA2A 03A9 AAA9        	dc.b	nG3, $12, nF3, $2A, $03, nE3, nF3, nE3
000AECAF                            
000AECAF                            ToxicLandfill_Loop45:
000AECAF AA02 A901                  	dc.b	nF3, $02, nE3, $01
000AECB3 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop45
000AECB8 AA02 A5A1 AAA5 A1          	dc.b	nF3, $02, nC3, nAb2, nF3, nC3, nAb2
000AECBF F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop46
000AECC4                            
000AECC4                            ToxicLandfill_Loop47:
000AECC4 B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3
000AECD0 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop47
000AECD5                            
000AECD5                            ToxicLandfill_Loop48:
000AECD5 B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000AECE0 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop48
000AECE5 F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop47
000AECEA                            
000AECEA                            ToxicLandfill_Loop4A:
000AECEA B812 B636 B502 B401 B302+  	dc.b	nG4, $12, nF4, $36, nE4, $02, nEb4, $01, nD4, $02, nCs4, $01
000AECF6 B102 B001 AF02 AE01 AD02+  	dc.b	nC4, $02, nB3, $01, nBb3, $02, nA3, $01, nAb3, $02, nG3, $01
000AED02 AB02 AA01 A902 A801 A702+  	dc.b	nFs3, $02, nF3, $01, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000AED0E B812 B62A 03B5 B6B5        	dc.b	nG4, $12, nF4, $2A, $03, nE4, nF4, nE4
000AED16                            
000AED16                            ToxicLandfill_Loop49:
000AED16 B602 B501                  	dc.b	nF4, $02, nE4, $01
000AED1A F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop49
000AED1F B602 B1AD B6B1 AD          	dc.b	nF4, $02, nC4, nAb3, nF4, nC4, nAb3
000AED26 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop4A
000AED2B                            
000AED2B                            ToxicLandfill_Loop4B:
000AED2B B809 0909 B603 B806 06BB+  	dc.b	nG4, $09, $09, $09, nF4, $03, nG4, $06, $06, nBb4, nG4, $09
000AED37 0909 B603 B806 06BD B809+  	dc.b	$09, $09, nF4, $03, nG4, $06, $06, nC5, nG4, $09, $09, $09
000AED43 B603 B806 06BB B309 0909+  	dc.b	nF4, $03, nG4, $06, $06, nBb4, nD4, $09, $09, $09, nC4, $03
000AED4F B306 06B6                  	dc.b	nD4, $06, $06, nF4
000AED53 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop4B
000AED58                            
000AED58                            ToxicLandfill_Loop4C:
000AED58 BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000AED63 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop4C
000AED68                            
000AED68                            ToxicLandfill_Loop4D:
000AED68 BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000AED73 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop4D
000AED78 F701 04FF DC               	smpsLoop            $01, $04, ToxicLandfill_Loop4C
000AED7D F6FE D7                    	smpsJump            ToxicLandfill_Loop44
000AED80                            
000AED80                            ; FM2 Data
000AED80                            ToxicLandfill_FM2:
000AED80 E0C0                       	smpsPan             panCenter, $00
000AED82 EF00                       	smpsSetvoice        $00
000AED84 807F 7F76 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $76, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000AED90 AD02 AE01 AF02 B001        	dc.b	nAb3, $02, nA3, $01, nBb3, $02, nB3, $01
000AED98                            
000AED98                            ToxicLandfill_Loop3A:
000AED98 B109 0909 AF03 B106 06B4+  	dc.b	nC4, $09, $09, $09, nBb3, $03, nC4, $06, $06, nEb4, nC4, $09
000AEDA4 0909 AF03 B106 06B6 B109+  	dc.b	$09, $09, nBb3, $03, nC4, $06, $06, nF4, nC4, $09, $09, $09
000AEDB0 AF03 B106 06B4 AC09 0909+  	dc.b	nBb3, $03, nC4, $06, $06, nEb4, nG3, $09, $09, $09, nF3, $03
000AEDBC AC06 06AF                  	dc.b	nG3, $06, $06, nBb3
000AEDC0 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop3A
000AEDC5                            
000AEDC5                            ToxicLandfill_Loop3C:
000AEDC5 B112 AF36 AE02 AD01 AC02+  	dc.b	nC4, $12, nBb3, $36, nA3, $02, nAb3, $01, nG3, $02, nFs3, $01
000AEDD1 AA02 A901 A802 A701 A602+  	dc.b	nF3, $02, nE3, $01, nEb3, $02, nD3, $01, nCs3, $02, nC3, $01
000AEDDD A402 A301 A202 A101 A002+  	dc.b	nB2, $02, nBb2, $01, nA2, $02, nAb2, $01, nG2, $02, nFs2, $01
000AEDE9 B112 AF2A 03AE AFAE        	dc.b	nC4, $12, nBb3, $2A, $03, nA3, nBb3, nA3
000AEDF1                            
000AEDF1                            ToxicLandfill_Loop3B:
000AEDF1 AF02 AE01                  	dc.b	nBb3, $02, nA3, $01
000AEDF5 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop3B
000AEDFA AF02 AAA6 AFAA A6          	dc.b	nBb3, $02, nF3, nCs3, nBb3, nF3, nCs3
000AEE01 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop3C
000AEE06                            
000AEE06                            ToxicLandfill_Loop3D:
000AEE06 AC06 A7AA AB03 AC09 A706+  	dc.b	nG3, $06, nD3, nF3, nFs3, $03, nG3, $09, nD3, $06, nF3, nFs3
000AEE12 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop3D
000AEE17                            
000AEE17                            ToxicLandfill_Loop3E:
000AEE17 ACA5 A7AA 03AC 09A5 06A7+  	dc.b	nG3, nC3, nD3, nF3, $03, nG3, $09, nC3, $06, nD3, nF3
000AEE22 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop3E
000AEE27 F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop3D
000AEE2C                            
000AEE2C                            ToxicLandfill_Loop40:
000AEE2C BD12 BB36 BA02 B901 B802+  	dc.b	nC5, $12, nBb4, $36, nA4, $02, nAb4, $01, nG4, $02, nFs4, $01
000AEE38 B602 B501 B402 B301 B202+  	dc.b	nF4, $02, nE4, $01, nEb4, $02, nD4, $01, nCs4, $02, nC4, $01
000AEE44 B002 AF01 AE02 AD01 AC02+  	dc.b	nB3, $02, nBb3, $01, nA3, $02, nAb3, $01, nG3, $02, nFs3, $01
000AEE50 BD12 BB2A 03BA BBBA        	dc.b	nC5, $12, nBb4, $2A, $03, nA4, nBb4, nA4
000AEE58                            
000AEE58                            ToxicLandfill_Loop3F:
000AEE58 BB02 BA01                  	dc.b	nBb4, $02, nA4, $01
000AEE5C F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop3F
000AEE61 BB02 B6B2 BBB6 B2          	dc.b	nBb4, $02, nF4, nCs4, nBb4, nF4, nCs4
000AEE68 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop40
000AEE6D                            
000AEE6D                            ToxicLandfill_Loop41:
000AEE6D BD09 0909 BB03 BD06 06C0+  	dc.b	nC5, $09, $09, $09, nBb4, $03, nC5, $06, $06, nEb5, nC5, $09
000AEE79 0909 BB03 BD06 06C2 BD09+  	dc.b	$09, $09, nBb4, $03, nC5, $06, $06, nF5, nC5, $09, $09, $09
000AEE85 BB03 BD06 06C0 B809 0909+  	dc.b	nBb4, $03, nC5, $06, $06, nEb5, nG4, $09, $09, $09, nF4, $03
000AEE91 B806 06BB                  	dc.b	nG4, $06, $06, nBb4
000AEE95 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop41
000AEE9A B8B3 B6B7 03B8 09B3 06B6+  	dc.b	nG4, nD4, nF4, nFs4, $03, nG4, $09, nD4, $06, nF4, nFs4, nG4
000AEEA6 B3B6 B703 8009 B306 B6B7+  	dc.b	nD4, nF4, nFs4, $03, nRst, $09, nD4, $06, nF4, nFs4, nG4, nC4
000AEEB2 B3B6 03B8 09B1 06B3 B6B8+  	dc.b	nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4, nG4, nC4, nD4
000AEEBE B603 8009 B106 B3B6 B8B3+  	dc.b	nF4, $03, nRst, $09, nC4, $06, nD4, nF4, nG4, nD4, nF4, nFs4
000AEECA 03B8 09B3 06B6 B7B8 B3B6+  	dc.b	$03, nG4, $09, nD4, $06, nF4, nFs4, nG4, nD4, nF4, nFs4, $03
000AEED6 8009 B306 B6B7             	dc.b	nRst, $09, nD4, $06, nF4, nFs4
000AEEDC                            
000AEEDC                            ToxicLandfill_Loop42:
000AEEDC B8B1 B3B6 03B8 09B1 06B3+  	dc.b	nG4, nC4, nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4
000AEEE7 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop42
000AEEEC                            
000AEEEC                            ToxicLandfill_Loop43:
000AEEEC B8B3 B6B7 03B8 09B3 06B6+  	dc.b	nG4, nD4, nF4, nFs4, $03, nG4, $09, nD4, $06, nF4, nFs4
000AEEF7 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop43
000AEEFC F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop42
000AEF01 B8B1 B3B6 03B8 09B1 06B3+  	dc.b	nG4, nC4, nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4, nG4
000AEF0D B1B3 B603 8009 B106 B3B6   	dc.b	nC4, nD4, nF4, $03, nRst, $09, nC4, $06, nD4, nF4
000AEF17 F6FE 7F                    	smpsJump            ToxicLandfill_Loop3A
000AEF1A                            
000AEF1A                            ; FM3 Data
000AEF1A                            ToxicLandfill_FM3:
000AEF1A E0C0                       	smpsPan             panCenter, $00
000AEF1C EF01                       	smpsSetvoice        $01
000AEF1E                            
000AEF1E                            ToxicLandfill_Loop2D:
000AEF1E 9903 A580 9E80 9F80 A080+  	dc.b	nC2, $03, nC3, nRst, nF2, nRst, nFs2, nRst, nG2, nRst, nFs2, nRst
000AEF2A 9E80 9C9E 9C99 9C80 9E80+  	dc.b	nF2, nRst, nEb2, nF2, nEb2, nC2, nEb2, nRst, nF2, nRst, nEb2, nRst
000AEF36 9E80 9F9E 9C9E 9C97 98     	dc.b	nF2, nRst, nFs2, nF2, nEb2, nF2, nEb2, nBb1, nB1
000AEF3F F700 03FF DB               	smpsLoop            $00, $03, ToxicLandfill_Loop2D
000AEF44 99A5 809E 809F 80A0 809F+  	dc.b	nC2, nC3, nRst, nF2, nRst, nFs2, nRst, nG2, nRst, nFs2, nRst, nF2
000AEF50 809C 9E9C 999C 809E 809C+  	dc.b	nRst, nEb2, nF2, nEb2, nC2, nEb2, nRst, nF2, nRst, nEb2, nRst, nF2
000AEF5C 809F 9E9C 9D02 9E01 9F02+  	dc.b	nRst, nFs2, nF2, nEb2, nE2, $02, nF2, $01, nFs2, $02, nG2, $01
000AEF68 A102 A201 A302 A401        	dc.b	nAb2, $02, nA2, $01, nBb2, $02, nB2, $01
000AEF70                            
000AEF70                            ToxicLandfill_Loop2E:
000AEF70 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AEF7C F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop2E
000AEF81 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nG2
000AEF8D 0909 0909 06A3             	dc.b	$09, $09, $09, $09, $06, nBb2
000AEF93 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop2E
000AEF98                            
000AEF98                            ToxicLandfill_Loop31:
000AEF98 A503 9999 A5               	dc.b	nC3, $03, nC2, nC2, nC3
000AEF9D                            
000AEF9D                            ToxicLandfill_Loop2F:
000AEF9D 9999 A3                    	dc.b	nC2, nC2, nBb2
000AEFA0 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop2F
000AEFA5 99A3                       	dc.b	nC2, nBb2
000AEFA7                            
000AEFA7                            ToxicLandfill_Loop30:
000AEFA7 99A3 99                    	dc.b	nC2, nBb2, nC2
000AEFAA F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop30
000AEFAF 99A3 A0A3 A4               	dc.b	nC2, nBb2, nG2, nBb2, nB2
000AEFB4 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop31
000AEFB9                            
000AEFB9                            ToxicLandfill_Loop32:
000AEFB9 A506 06A0 A003 A309 A006+  	dc.b	nC3, $06, $06, nG2, nG2, $03, nBb2, $09, nG2, $06, nBb2, nB2
000AEFC5 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop32
000AEFCA                            
000AEFCA                            ToxicLandfill_Loop33:
000AEFCA A5A5 9E9E 03A0 0906 A3A4   	dc.b	nC3, nC3, nF2, nF2, $03, nG2, $09, $06, nBb2, nB2
000AEFD4 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop33
000AEFD9 F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop32
000AEFDE                            
000AEFDE                            ToxicLandfill_Loop36:
000AEFDE A503 9999 A5               	dc.b	nC3, $03, nC2, nC2, nC3
000AEFE3                            
000AEFE3                            ToxicLandfill_Loop34:
000AEFE3 9999 A3                    	dc.b	nC2, nC2, nBb2
000AEFE6 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop34
000AEFEB 99A3                       	dc.b	nC2, nBb2
000AEFED                            
000AEFED                            ToxicLandfill_Loop35:
000AEFED 99A3 99                    	dc.b	nC2, nBb2, nC2
000AEFF0 F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop35
000AEFF5 99A3 A0A3 A4               	dc.b	nC2, nBb2, nG2, nBb2, nB2
000AEFFA F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop36
000AEFFF                            
000AEFFF                            ToxicLandfill_Loop37:
000AEFFF A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AF00B F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop37
000AF010 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nG2
000AF01C 0909 0909 06A3             	dc.b	$09, $09, $09, $09, $06, nBb2
000AF022 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop37
000AF027                            
000AF027                            ToxicLandfill_Loop38:
000AF027 A5A5 A0A0 03A3 09A0 06A3+  	dc.b	nC3, nC3, nG2, nG2, $03, nBb2, $09, nG2, $06, nBb2, nB2
000AF032 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop38
000AF037                            
000AF037                            ToxicLandfill_Loop39:
000AF037 A5A5 9E9E 03A0 0906 A3A4   	dc.b	nC3, nC3, nF2, nF2, $03, nG2, $09, $06, nBb2, nB2
000AF041 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop39
000AF046 F701 04FF DD               	smpsLoop            $01, $04, ToxicLandfill_Loop38
000AF04B F6FF 23                    	smpsJump            ToxicLandfill_Loop2E
000AF04E                            
000AF04E                            ; FM4 Data
000AF04E                            ToxicLandfill_FM4:
000AF04E E0C0                       	smpsPan             panCenter, $00
000AF050 EF01                       	smpsSetvoice        $01
000AF052                            
000AF052                            ToxicLandfill_Loop20:
000AF052 8D03 9980 9280 9380 9480+  	dc.b	nC1, $03, nC2, nRst, nF1, nRst, nFs1, nRst, nG1, nRst, nFs1, nRst
000AF05E 9280 9092 908D 9080 9280+  	dc.b	nF1, nRst, nEb1, nF1, nEb1, nC1, nEb1, nRst, nF1, nRst, nEb1, nRst
000AF06A 9280 9392 9092 908B 8C     	dc.b	nF1, nRst, nFs1, nF1, nEb1, nF1, nEb1, nBb0, nB0
000AF073 F700 03FF DB               	smpsLoop            $00, $03, ToxicLandfill_Loop20
000AF078 8D99 8092 8093 8094 8093+  	dc.b	nC1, nC2, nRst, nF1, nRst, nFs1, nRst, nG1, nRst, nFs1, nRst, nF1
000AF084 8090 9290 8D90 8092 8090+  	dc.b	nRst, nEb1, nF1, nEb1, nC1, nEb1, nRst, nF1, nRst, nEb1, nRst, nF1
000AF090 8093 9290 9293 0294 0195+  	dc.b	nRst, nFs1, nF1, nEb1, nF1, nFs1, $02, nG1, $01, nAb1, $02, nA1
000AF09C 0197 0298 01               	dc.b	$01, nBb1, $02, nB1, $01
000AF0A1                            
000AF0A1                            ToxicLandfill_Loop21:
000AF0A1 9906 9497 9803 9909 9406+  	dc.b	nC2, $06, nG1, nBb1, nB1, $03, nC2, $09, nG1, $06, nBb1, nB1
000AF0AD F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop21
000AF0B2 9992 9497 0399 0992 0694+  	dc.b	nC2, nF1, nG1, nBb1, $03, nC2, $09, nF1, $06, nG1, nBb1, nG1
000AF0BE 0909 0909 0697             	dc.b	$09, $09, $09, $09, $06, nBb1
000AF0C4 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop21
000AF0C9                            
000AF0C9                            ToxicLandfill_Loop24:
000AF0C9 9903 8D8D 99               	dc.b	nC2, $03, nC1, nC1, nC2
000AF0CE                            
000AF0CE                            ToxicLandfill_Loop22:
000AF0CE 8D8D 97                    	dc.b	nC1, nC1, nBb1
000AF0D1 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop22
000AF0D6 8D97                       	dc.b	nC1, nBb1
000AF0D8                            
000AF0D8                            ToxicLandfill_Loop23:
000AF0D8 8D97 8D                    	dc.b	nC1, nBb1, nC1
000AF0DB F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop23
000AF0E0 8D97 9497 98               	dc.b	nC1, nBb1, nG1, nBb1, nB1
000AF0E5 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop24
000AF0EA                            
000AF0EA                            ToxicLandfill_Loop25:
000AF0EA 9906 0694 9403 9709 9406+  	dc.b	nC2, $06, $06, nG1, nG1, $03, nBb1, $09, nG1, $06, nBb1, nB1
000AF0F6 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop25
000AF0FB                            
000AF0FB                            ToxicLandfill_Loop26:
000AF0FB 9999 9292 0394 0906 9798   	dc.b	nC2, nC2, nF1, nF1, $03, nG1, $09, $06, nBb1, nB1
000AF105 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop26
000AF10A F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop25
000AF10F                            
000AF10F                            ToxicLandfill_Loop29:
000AF10F 9903 8D8D 99               	dc.b	nC2, $03, nC1, nC1, nC2
000AF114                            
000AF114                            ToxicLandfill_Loop27:
000AF114 8D8D 97                    	dc.b	nC1, nC1, nBb1
000AF117 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop27
000AF11C 8D97                       	dc.b	nC1, nBb1
000AF11E                            
000AF11E                            ToxicLandfill_Loop28:
000AF11E 8D97 8D                    	dc.b	nC1, nBb1, nC1
000AF121 F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop28
000AF126 8D97 9497 98               	dc.b	nC1, nBb1, nG1, nBb1, nB1
000AF12B F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop29
000AF130                            
000AF130                            ToxicLandfill_Loop2A:
000AF130 9906 9497 9803 9909 9406+  	dc.b	nC2, $06, nG1, nBb1, nB1, $03, nC2, $09, nG1, $06, nBb1, nB1
000AF13C F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop2A
000AF141 9992 9497 0399 0992 0694+  	dc.b	nC2, nF1, nG1, nBb1, $03, nC2, $09, nF1, $06, nG1, nBb1, nG1
000AF14D 0909 0909 0697             	dc.b	$09, $09, $09, $09, $06, nBb1
000AF153 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop2A
000AF158                            
000AF158                            ToxicLandfill_Loop2B:
000AF158 9999 9494 0397 0994 0697+  	dc.b	nC2, nC2, nG1, nG1, $03, nBb1, $09, nG1, $06, nBb1, nB1
000AF163 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop2B
000AF168                            
000AF168                            ToxicLandfill_Loop2C:
000AF168 9999 9292 0394 0906 9798   	dc.b	nC2, nC2, nF1, nF1, $03, nG1, $09, $06, nBb1, nB1
000AF172 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop2C
000AF177 F701 04FF DD               	smpsLoop            $01, $04, ToxicLandfill_Loop2B
000AF17C F6FF 23                    	smpsJump            ToxicLandfill_Loop21
000AF17F                            
000AF17F                            ; FM5 Data
000AF17F                            ToxicLandfill_FM5:
000AF17F E0C0                       	smpsPan             panCenter, $00
000AF181 E6FA                       	smpsAlterVol			-$06		
000AF183 E102                       	smpsDetune			$02	
000AF185 EF00                       	smpsSetvoice        $00
000AF187 807F 7F78 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $78, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000AF193 AD02 AE01 AF               	dc.b	nAb3, $02, nA3, $01, nBb3
000AF198                            
000AF198                            ToxicLandfill_Jump01:
000AF198 E701 B0                    	dc.b	smpsNoAttack, $01, nB3
000AF19B                            
000AF19B                            ToxicLandfill_Loop11:
000AF19B AC09 0909 AA03 AC06 06AF+  	dc.b	nG3, $09, $09, $09, nF3, $03, nG3, $06, $06, nBb3, nG3, $09
000AF1A7 0909 AA03 AC06 06B1 AC09+  	dc.b	$09, $09, nF3, $03, nG3, $06, $06, nC4, nG3, $09, $09, $09
000AF1B3 AA03 AC06 06AF A709 0909+  	dc.b	nF3, $03, nG3, $06, $06, nBb3, nD3, $09, $09, $09, nC3, $03
000AF1BF A706 06AA                  	dc.b	nD3, $06, $06, nF3
000AF1C3 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop11
000AF1C8                            
000AF1C8                            ToxicLandfill_Loop13:
000AF1C8 AC12 AA36 A902 A801 A702+  	dc.b	nG3, $12, nF3, $36, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000AF1D4 A502 A401 A302 A201 A102+  	dc.b	nC3, $02, nB2, $01, nBb2, $02, nA2, $01, nAb2, $02, nG2, $01
000AF1E0 9F02 9E01 9D02 9C01 9B02+  	dc.b	nFs2, $02, nF2, $01, nE2, $02, nEb2, $01, nD2, $02, nCs2, $01
000AF1EC AC12 AA2A 03A9 AAA9        	dc.b	nG3, $12, nF3, $2A, $03, nE3, nF3, nE3
000AF1F4                            
000AF1F4                            ToxicLandfill_Loop12:
000AF1F4 AA02 A901                  	dc.b	nF3, $02, nE3, $01
000AF1F8 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop12
000AF1FD AA02 A5A1 AAA5 A1          	dc.b	nF3, $02, nC3, nAb2, nF3, nC3, nAb2
000AF204 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop13
000AF209                            
000AF209                            ToxicLandfill_Loop14:
000AF209 B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3
000AF215 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop14
000AF21A                            
000AF21A                            ToxicLandfill_Loop15:
000AF21A B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000AF225 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop15
000AF22A F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop14
000AF22F                            
000AF22F                            ToxicLandfill_Loop17:
000AF22F B812 B636 B502 B401 B302+  	dc.b	nG4, $12, nF4, $36, nE4, $02, nEb4, $01, nD4, $02, nCs4, $01
000AF23B B102 B001 AF02 AE01 AD02+  	dc.b	nC4, $02, nB3, $01, nBb3, $02, nA3, $01, nAb3, $02, nG3, $01
000AF247 AB02 AA01 A902 A801 A702+  	dc.b	nFs3, $02, nF3, $01, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000AF253 B812 B62A 03B5 B6B5        	dc.b	nG4, $12, nF4, $2A, $03, nE4, nF4, nE4
000AF25B                            
000AF25B                            ToxicLandfill_Loop16:
000AF25B B602 B501                  	dc.b	nF4, $02, nE4, $01
000AF25F F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop16
000AF264 B602 B1AD B6B1 AD          	dc.b	nF4, $02, nC4, nAb3, nF4, nC4, nAb3
000AF26B F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop17
000AF270                            
000AF270                            ToxicLandfill_Loop18:
000AF270 B809 0909 B603 B806 06BB+  	dc.b	nG4, $09, $09, $09, nF4, $03, nG4, $06, $06, nBb4, nG4, $09
000AF27C 0909 B603 B806 06BD B809+  	dc.b	$09, $09, nF4, $03, nG4, $06, $06, nC5, nG4, $09, $09, $09
000AF288 B603 B806 06BB B309 0909+  	dc.b	nF4, $03, nG4, $06, $06, nBb4, nD4, $09, $09, $09, nC4, $03
000AF294 B306 06B6                  	dc.b	nD4, $06, $06, nF4
000AF298 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop18
000AF29D                            
000AF29D                            ToxicLandfill_Loop19:
000AF29D BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000AF2A8 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop19
000AF2AD                            
000AF2AD                            ToxicLandfill_Loop1A:
000AF2AD BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000AF2B8 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1A
000AF2BD                            
000AF2BD                            ToxicLandfill_Loop1B:
000AF2BD BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000AF2C8 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1B
000AF2CD BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4, nC5
000AF2D9 B6B8 BB03 BD09 B606 B8BB+  	dc.b	nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4, $02, nRst
000AF2E5 EF02                       	smpsSetvoice        $02
000AF2E7 E1FE                       	smpsDetune			-$02
000AF2E9 E606                       	smpsAlterVol		$06
000AF2EB                            	
000AF2EB                            ToxicLandfill_Loop1C:
000AF2EB B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3	
000AF2F7 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop1C
000AF2FC                            
000AF2FC                            ToxicLandfill_Loop1D:
000AF2FC B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000AF307 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1D
000AF30C                            
000AF30C                            ToxicLandfill_Loop1E:
000AF30C BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000AF317 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1E
000AF31C                            
000AF31C                            ToxicLandfill_Loop1F:
000AF31C BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000AF327 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1F
000AF32C EF00                       	smpsSetvoice        $00
000AF32E E102                       	smpsDetune			$02
000AF330 E6FA                       	smpsAlterVol		-$06	
000AF332 F6FE 64                    	smpsJump            ToxicLandfill_Jump01
000AF335                            
000AF335                            ; PSG1 Data
000AF335                            ToxicLandfill_PSG1:
000AF335 807F 7F7F 03               	dc.b	nRst, $7F, $7F, $7F, $03
000AF33A                            
000AF33A                            ToxicLandfill_Jump04:
000AF33A 80                         	dc.b	nRst
000AF33B                            
000AF33B                            ToxicLandfill_Loop57:
000AF33B 60                         	dc.b	$60
000AF33C F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop57
000AF341                            
000AF341                            ToxicLandfill_Loop58:
000AF341 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AF34D F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop58
000AF352                            
000AF352                            ToxicLandfill_Loop59:
000AF352 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2
000AF35D F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop59
000AF362                            
000AF362                            ToxicLandfill_Loop5A:
000AF362 A5A0 A3A4 03A5 09A0 06A3+  	dc.b	nC3, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AF36D F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5A
000AF372 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nC3
000AF37E 9EA0 A303 A509 9E06 A0A3+  	dc.b	nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, $04, nRst
000AF38A                            
000AF38A                            ToxicLandfill_Loop5B:
000AF38A 6E                         	dc.b	$6E
000AF38B F700 07FF FB               	smpsLoop            $00, $07, ToxicLandfill_Loop5B
000AF390                            
000AF390                            ToxicLandfill_Loop5C:
000AF390 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AF39C F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop5C
000AF3A1                            
000AF3A1                            ToxicLandfill_Loop5D:
000AF3A1 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2
000AF3AC F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5D
000AF3B1 F701 03FF DB               	smpsLoop            $01, $03, ToxicLandfill_Loop5C
000AF3B6                            
000AF3B6                            ToxicLandfill_Loop5E:
000AF3B6 A5A0 A3A4 03A5 09A0 06A3+  	dc.b	nC3, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AF3C1 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5E
000AF3C6 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nC3
000AF3D2 9EA0 A303 A509 9E06 A0A3+  	dc.b	nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, $05, nRst
000AF3DE 01                         	dc.b	$01
000AF3DF F6FF 59                    	smpsJump            ToxicLandfill_Jump04
000AF3E2                            
000AF3E2                            ; PSG2 Data
000AF3E2                            ToxicLandfill_PSG2:
000AF3E2 807F 7F7F 03               	dc.b	nRst, $7F, $7F, $7F, $03
000AF3E7                            
000AF3E7                            ToxicLandfill_Jump03:
000AF3E7 80                         	dc.b	nRst
000AF3E8                            
000AF3E8                            ToxicLandfill_Loop50:
000AF3E8 60                         	dc.b	$60
000AF3E9 F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop50
000AF3EE A006 9B9E 9F03 A009 9B06+  	dc.b	nG2, $06, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000AF3FA A09B 9E9F 03A0 0880 019B+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $08, nRst, $01, nD2, $06, nF2
000AF406 9FA0 999B 9E03 A009 9906+  	dc.b	nFs2, nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000AF412 A099 9B9E 03A0 0880 0199+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2
000AF41E 9E                         	dc.b	nF2
000AF41F                            
000AF41F                            ToxicLandfill_Loop51:
000AF41F A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000AF42A F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop51
000AF42F A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, nG2
000AF43B 999B 9E03 A008 8001 9906+  	dc.b	nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2, nF2
000AF447 0580                       	dc.b	$05, nRst
000AF449                            
000AF449                            ToxicLandfill_Loop52:
000AF449 60                         	dc.b	$60
000AF44A F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop52
000AF44F 01                         	dc.b	$01
000AF450                            
000AF450                            ToxicLandfill_Loop53:
000AF450 A006 9B9E 9F03 A009 9B06+  	dc.b	nG2, $06, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000AF45C A09B 9E9F 03A0 0880 019B+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $08, nRst, $01, nD2, $06, nF2
000AF468 9FA0 999B 9E03 A009 9906+  	dc.b	nFs2, nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000AF474 A099 9B9E 03A0 0880 0199+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2
000AF480 9E                         	dc.b	nF2
000AF481 F700 02FF CB               	smpsLoop            $00, $02, ToxicLandfill_Loop53
000AF486                            
000AF486                            ToxicLandfill_Loop54:
000AF486 A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000AF491 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop54
000AF496                            
000AF496                            ToxicLandfill_Loop55:
000AF496 A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000AF4A1 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop55
000AF4A6                            
000AF4A6                            ToxicLandfill_Loop56:
000AF4A6 A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000AF4B1 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop56
000AF4B6 A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, nG2
000AF4C2 999B 9E03 A009 9906 9B9E+  	dc.b	nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, $05, nRst
000AF4CE 01                         	dc.b	$01
000AF4CF F6FF 16                    	smpsJump            ToxicLandfill_Jump03
000AF4D2                            
000AF4D2                            ; PSG3 Data
000AF4D2                            ToxicLandfill_PSG3:
000AF4D2 F3E7                       	smpsPSGform         $E7
000AF4D4 807F 41C6 0C0C 0C0C        	dc.b	nRst, $7F, $41, nMaxPSG, $0C, $0C, $0C, $0C
000AF4DC                            
000AF4DC                            ToxicLandfill_Loop4E:
000AF4DC 0C0C 0603 03               	dc.b	$0C, $0C, $06, $03, $03
000AF4E1 F501                       	smpsPSGvoice        fTone_01
000AF4E3 0C                         	dc.b	$0C
000AF4E4 F502                       	smpsPSGvoice        fTone_02
000AF4E6 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop4E
000AF4EB 0603 03                    	dc.b	$06, $03, $03
000AF4EE F501                       	smpsPSGvoice        fTone_01
000AF4F0 06                         	dc.b	$06
000AF4F1 F502                       	smpsPSGvoice        fTone_02
000AF4F3 03                         	dc.b	$03
000AF4F4 F501                       	smpsPSGvoice        fTone_01
000AF4F6 0906 0606                  	dc.b	$09, $06, $06, $06
000AF4FA                            
000AF4FA                            ToxicLandfill_Jump02:
000AF4FA E77F E77F E77F E715        	dc.b	smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $15
000AF502 F502                       	smpsPSGvoice        fTone_02
000AF504 C618 1818                  	dc.b	nMaxPSG, $18, $18, $18
000AF508 F501                       	smpsPSGvoice        fTone_01
000AF50A 18                         	dc.b	$18
000AF50B F502                       	smpsPSGvoice        fTone_02
000AF50D 1806                       	dc.b	$18, $06
000AF50F F501                       	smpsPSGvoice        fTone_01
000AF511 0909 0909 0618             	dc.b	$09, $09, $09, $09, $06, $18
000AF517 F502                       	smpsPSGvoice        fTone_02
000AF519 1818 18                    	dc.b	$18, $18, $18
000AF51C F501                       	smpsPSGvoice        fTone_01
000AF51E 18                         	dc.b	$18
000AF51F F502                       	smpsPSGvoice        fTone_02
000AF521 1806                       	dc.b	$18, $06
000AF523 F501                       	smpsPSGvoice        fTone_01
000AF525 0909 0909 067F E77F E77F+  	dc.b	$09, $09, $09, $09, $06, $7F, smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $1B
000AF531 F502                       	smpsPSGvoice        fTone_02
000AF533 1818 18                    	dc.b	$18, $18, $18
000AF536 F501                       	smpsPSGvoice        fTone_01
000AF538 18                         	dc.b	$18
000AF539 F502                       	smpsPSGvoice        fTone_02
000AF53B 1806                       	dc.b	$18, $06
000AF53D F501                       	smpsPSGvoice        fTone_01
000AF53F 0909 0909 0618             	dc.b	$09, $09, $09, $09, $06, $18
000AF545 F502                       	smpsPSGvoice        fTone_02
000AF547 1818 18                    	dc.b	$18, $18, $18
000AF54A F501                       	smpsPSGvoice        fTone_01
000AF54C 18                         	dc.b	$18
000AF54D F502                       	smpsPSGvoice        fTone_02
000AF54F 1806                       	dc.b	$18, $06
000AF551 F501                       	smpsPSGvoice        fTone_01
000AF553 0909 0909 06               	dc.b	$09, $09, $09, $09, $06
000AF558                            
000AF558                            ToxicLandfill_Loop4F:
000AF558 59E7                       	dc.b	$59, smpsNoAttack
000AF55A F700 0CFF FA               	smpsLoop            $00, $0C, ToxicLandfill_Loop4F
000AF55F 5A                         	dc.b	$5A
000AF560 F6FF 98                    	smpsJump            ToxicLandfill_Jump02
000AF563                            
000AF563                            
000AF563                            ToxicLandfill_Voices:
000AF563                            ;	Voice $00
000AF563                            ;	$29
000AF563                            ;	$33, $02, $02, $01, 	$1F, $1F, $1F, $19, 	$00, $02, $00, $0B
000AF563                            ;	$03, $02, $00, $03, 	$0A, $1A, $0A, $1A, 	$1A, $1D, $20, $05
000AF563                            	smpsVcAlgorithm     $01
000AF563                            	smpsVcFeedback      $05
000AF563                            	smpsVcUnusedBits    $00
000AF563                            	smpsVcDetune        $00, $00, $00, $03
000AF563                            	smpsVcCoarseFreq    $01, $02, $02, $03
000AF563                            	smpsVcRateScale     $00, $00, $00, $00
000AF563                            	smpsVcAttackRate    $19, $1F, $1F, $1F
000AF563                            	smpsVcAmpMod        $00, $00, $00, $00
000AF563                            	smpsVcDecayRate1    $0B, $00, $02, $00
000AF563                            	smpsVcDecayRate2    $03, $00, $02, $03
000AF563                            	smpsVcDecayLevel    $01, $00, $01, $00
000AF563                            	smpsVcReleaseRate   $0A, $0A, $0A, $0A
000AF57C                            	
000AF57C                            ;	Voice $01
000AF57C                            ;	$18
000AF57C                            ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
000AF57C                            ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$32, $22, $14, $00
000AF57C                            	smpsVcAlgorithm     $00
000AF57C                            	smpsVcFeedback      $03
000AF57C                            	smpsVcUnusedBits    $00
000AF57C                            	smpsVcDetune        $03, $03, $03, $03
000AF57C                            	smpsVcCoarseFreq    $01, $00, $00, $07
000AF57C                            	smpsVcRateScale     $02, $00, $03, $02
000AF57C                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
000AF57C                            	smpsVcAmpMod        $00, $00, $00, $00
000AF57C                            	smpsVcDecayRate1    $01, $04, $06, $0D
000AF57C                            	smpsVcDecayRate2    $05, $03, $0A, $08
000AF57C                            	smpsVcDecayLevel    $02, $03, $0B, $0B
000AF57C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AF595                            
000AF595                            ;	Voice $02
000AF595                            ;	$2C
000AF595                            ;	$72, $78, $34, $34, 	$1F, $12, $1F, $12, 	$00, $0A, $00, $0A
000AF595                            ;	$00, $00, $00, $00, 	$00, $16, $00, $16, 	$16, $00, $17, $00
000AF595                            	smpsVcAlgorithm     $04
000AF595                            	smpsVcFeedback      $05
000AF595                            	smpsVcUnusedBits    $00
000AF595                            	smpsVcDetune        $03, $03, $07, $07
000AF595                            	smpsVcCoarseFreq    $04, $04, $08, $02
000AF595                            	smpsVcRateScale     $00, $00, $00, $00
000AF595                            	smpsVcAttackRate    $12, $1F, $12, $1F
000AF595                            	smpsVcAmpMod        $00, $00, $00, $00
000AF595                            	smpsVcDecayRate1    $0A, $00, $0A, $00
000AF595                            	smpsVcDecayRate2    $00, $00, $00, $00
000AF595                            	smpsVcDecayLevel    $01, $00, $01, $00
000AF595                            	smpsVcReleaseRate   $06, $00, $06, $00
000AF5AE                            		even			
000AF5AE                            Music9A:		include	"sound/music/Mus9A - RRZ2.asm"
000AF5AE                            RRZ2_Header:
000AF5AE                            	smpsHeaderStartSong 1
000AF5B0 0603                       	smpsHeaderChan      $06, $03
000AF5B2 0104                       	smpsHeaderTempo     $01, $04
000AF5B4                            
000AF5B8 0000 0010                  	smpsHeaderFM        RRZ2_FM1,	$00, $10
000AF5BC 0000 0C0D                  	smpsHeaderFM        RRZ2_FM2,	$0C, $0D
000AF5C0 0000 0019                  	smpsHeaderFM        RRZ2_FM3,	$00, $19
000AF5C4 0000 0019                  	smpsHeaderFM        RRZ2_FM4,	$00, $19
000AF5C8 0000 0019                  	smpsHeaderFM        RRZ2_FM5,	$00, $19
000AF5DE                            
000AF5DE                            ; FM1 Data
000AF5DE                            RRZ2_FM1:
000AF5DE E0C0                       	smpsPan             panCenter, $00
000AF5E5 EF03                       	smpsSetvoice        $03
000AF5E7 B160 BD18 B8BB 12B4 AF0C+  	dc.b	nC4, $60, nC5, $18, nG4, nBb4, $12, nEb4, nBb3, $0C, nC4, $60
000AF5F3 BD18 B8BB 12B4 C00C B160+  	dc.b	nC5, $18, nG4, nBb4, $12, nEb4, nEb5, $0C, nC4, $60, $18, nG4
000AF5FF BD12 C0C4 0C30 C2C0 B804+  	dc.b	nC5, $12, nEb5, nG5, $0C, $30, nF5, nEb5, nG4, $04, nF4, nEb4
000AF60B B6B4 B3B4 B3B1 AFAC AFB1+  	dc.b	nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3, nG3, nBb3, nC4, $60, nRst
000AF617 8080                       	dc.b	nRst, nRst
000AF619 EF00                       	smpsSetvoice        $00
000AF61B B848 0CB1 B430 0CB3 B4BB+  	dc.b	nG4, $48, $0C, nC4, nEb4, $30, $0C, nD4, nEb4, nBb4, nA4, $30
000AF627 B8E7 B82E 8032 B860 B130+  	dc.b	nG4, smpsNoAttack, nG4, $2E, nRst, $32, nG4, $60, nC4, $30, $18, nG4
000AF633 0CB4 BB30 BDBA 60B8 30B1+  	dc.b	$0C, nEb4, nBb4, $30, nC5, nA4, $60, nG4, $30, nC4, nEb4, $18
000AF63F B3AF AE0C AFB1 30B8 E7B8+  	dc.b	nD4, nBb3, nA3, $0C, nBb3, nC4, $30, nG4, smpsNoAttack, nG4, $2E, nRst
000AF64B 32B4 600C B3B4 B8BB 18BA+  	dc.b	$32, nEb4, $60, $0C, nD4, nEb4, nG4, nBb4, $18, nA4, $0C, nF4
000AF657 B818 B630 BB12 BA06 E760+  	dc.b	nG4, $18, nF4, $30, nBb4, $12, nA4, $06, smpsNoAttack, $60, nA4, $60
000AF663 C918 C4C7 14C6 10BD 0CC0+  	dc.b	nC6, $18, nG5, nBb5, $14, nA5, $10, nC5, $0C, nEb5, $2E, nRst
000AF66F 3280 60                    	dc.b	$32, nRst, $60
000AF672 EF05                       	smpsSetvoice        $05
000AF674 E9F4                       	smpsAlterPitch      $F4
000AF676 B930 BDB4 60B7 30AF B260+  	dc.b	nAb4, $30, nC5, nEb4, $60, nFs4, $30, nBb3, nCs4, $60, nAb4, $30
000AF682 B4B9 C0C3 B7E7 B760        	dc.b	nEb4, nAb4, nEb5, nFs5, nFs4, smpsNoAttack, nFs4, $60
000AF68A E90C                       	smpsAlterPitch      $0C
000AF68C B160 A5B1 30AC B860 B430+  	dc.b	nC4, $60, nC3, nC4, $30, nG3, nG4, $60, nEb4, $30, nBb4, nG4
000AF698 60B1 30AC B8B6 B460 B630+  	dc.b	$60, nC4, $30, nG3, nG4, nF4, nEb4, $60, nF4, $30, nD4, nG4
000AF6A4 60E7 30C0 18BF             	dc.b	$60, smpsNoAttack, $30, nEb5, $18, nD5
000AF6AA F6FF 32                    	smpsJump            RRZ2_FM1
000AF6AD                            
000AF6AD                            ; FM2 Data
000AF6AD                            RRZ2_FM2:
000AF6AD E0C0                       	smpsPan             panCenter, $00
000AF6B4 EF01                       	smpsSetvoice        $01
000AF6B6                            
000AF6B6                            RRZ2_Jump02:
000AF6B6 9960 E748 0C9B 9C60 E79C+  	dc.b	nC2, $60, smpsNoAttack, $48, $0C, nD2, nEb2, $60, smpsNoAttack, nEb2, nF2, nF2
000AF6C2 480C 9FA0 6030 049E 9C9E+  	dc.b	$48, $0C, nFs2, nG2, $60, $30, $04, nF2, nEb2, nF2, nEb2, nD2
000AF6CE 9C9B 9997 9497 9908 0494+  	dc.b	nEb2, nD2, nC2, nBb1, nG1, nBb1, nC2, $08, $04, nG1, $0C, nBb1
000AF6DA 9908 0480 3080 0899 0480+  	dc.b	nC2, $08, $04, nRst, $30, nRst, $08, nC2, $04, nRst, $0C, nC2
000AF6E6 8097 0480 0897 8004 970C+  	dc.b	nRst, nBb1, $04, nRst, $08, nBb1, nRst, $04, nBb1, $0C, nG1, $08
000AF6F2 9704 9908 0494 0C97 9908+  	dc.b	nBb1, $04, nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst
000AF6FE 3080 0899 0480 0C99 8097+  	dc.b	$30, nRst, $08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst
000AF70A 0897 8004 9480 9410        	dc.b	$08, nBb1, nRst, $04, nG1, nRst, nG1, $10
000AF712                            
000AF712                            RRZ2_Loop07:
000AF712 9908 0494 0C97 9908 0480+  	dc.b	nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst, $30, nRst
000AF71E 0899 0480 0C99 8097 0480+  	dc.b	$08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst, $08, nBb1
000AF72A 8004 970C 9408 9704        	dc.b	nRst, $04, nBb1, $0C, nG1, $08, nBb1, $04
000AF732 F700 08FF DC               	smpsLoop            $00, $08, RRZ2_Loop07
000AF737                            
000AF737                            RRZ2_Loop08:
000AF737 9908 0494 0C97 9908 0480+  	dc.b	nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst, $30, nRst
000AF743 0899 0480 0C99 8097 0480+  	dc.b	$08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst, $08, nBb1
000AF74F 8004 970C 9408 9704        	dc.b	nRst, $04, nBb1, $0C, nG1, $08, nBb1, $04
000AF757 F700 02FF DC               	smpsLoop            $00, $02, RRZ2_Loop08
000AF75C 9508 9C04 A108 9C04 9508+  	dc.b	nAb1, $08, nEb2, $04, nAb2, $08, nEb2, $04, nAb1, $08, $04, nRst
000AF768 0895 2680 0A95 04A1 1680+  	dc.b	$08, nAb1, $26, nRst, $0A, nAb1, $04, nAb2, $16, nRst, $0E, nAb2
000AF774 049C A1A6 0CA5 A19C 08A1+  	dc.b	$04, nEb2, nAb2, nCs3, $0C, nC3, nAb2, nEb2, $08, nAb2, $04, nFs1
000AF780 089A 049F 089A 0493 0804+  	dc.b	$08, nCs2, $04, nFs2, $08, nCs2, $04, nFs1, $08, $04, nRst, $08
000AF78C 9304 2280 0A93 049F 8093+  	dc.b	nFs1, $04, $22, nRst, $0A, nFs1, $04, nFs2, nRst, nFs1, nRst, $08
000AF798 9304 0C92 0893 0480 0893+  	dc.b	nFs1, $04, $0C, nF1, $08, nFs1, $04, nRst, $08, nFs1, $04, nFs1
000AF7A4 9A9F A408 A304 A408 A304+  	dc.b	nCs2, nFs2, nB2, $08, nBb2, $04, nB2, $08, nBb2, $04, nAb1, $08
000AF7B0 9C04 A108 9C04 9508 0480+  	dc.b	nEb2, $04, nAb2, $08, nEb2, $04, nAb1, $08, $04, nRst, $08, nAb1
000AF7BC 2680 0A95 04A1 1680 0EA1+  	dc.b	$26, nRst, $0A, nAb1, $04, nAb2, $16, nRst, $0E, nAb2, $04, nEb2
000AF7C8 A1A6 A5A6 ADA8 A39F 9E9F+  	dc.b	nAb2, nCs3, nC3, nCs3, nAb3, nEb3, nBb2, nFs2, nF2, nFs2, nEb2, nBb2
000AF7D4 9C93 089A 049F 089A 0493+  	dc.b	nEb2, nFs1, $08, nCs2, $04, nFs2, $08, nCs2, $04, nFs1, $08, $04
000AF7E0 8008 9304 2280 0A93 049F+  	dc.b	nRst, $08, nFs1, $04, $22, nRst, $0A, nFs1, $04, nFs2, nRst, nFs1
000AF7EC 8008 9304 0C92 0893 0480+  	dc.b	nRst, $08, nFs1, $04, $0C, nF1, $08, nFs1, $04, nRst, $08, nFs1
000AF7F8 0493 9A9F A408 A304 A408+  	dc.b	$04, nFs1, nCs2, nFs2, nB2, $08, nBb2, $04, nB2, $08, nBb2, $04
000AF804 8D08 048D 8008 8D0C 8F08+  	dc.b	nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04
000AF810 8008 8D0C 0408 8F04 900C+  	dc.b	nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08
000AF81C 048D 8008 8D0C 8F08 9004+  	dc.b	$04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08
000AF828 8D0C 0408 8F04 900C 8D08+  	dc.b	nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1
000AF834 8008 8D0C 8F08 9004 8008+  	dc.b	nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C
000AF840 0408 8F04 900C 8D08 048D+  	dc.b	$04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08
000AF84C 8D0C 8F08 9004 8008 8D0C+  	dc.b	nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08
000AF858 8F04 900C 8D08 048D 8008+  	dc.b	nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C
000AF864 8F08 9004 8008 8D0C 0408+  	dc.b	nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04
000AF870 900C 8D08 048D 8008 8D0C+  	dc.b	nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08
000AF87C 9004 8008 8D0C 0408 8F04+  	dc.b	nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C
000AF888 8D08 048D 8008 8D0C 8F08+  	dc.b	nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04
000AF894 8008 8D0C 0408 8F04 900C+  	dc.b	nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08
000AF8A0 048D 8008 8D0C 8F08 9004+  	dc.b	$04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08
000AF8AC 8D0C 0408 8F04 900C 8D08+  	dc.b	nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1
000AF8B8 8008 8D0C 8F08 9004 8008+  	dc.b	nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C
000AF8C4 0408 8F04 900C 8D08 048D+  	dc.b	$04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08
000AF8D0 8D0C 8F08 9004 8008 8D0C+  	dc.b	nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08
000AF8DC 8F04 900C 8D08 048D 8008+  	dc.b	nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C
000AF8E8 8F08 9004 8008 8D0C 0408+  	dc.b	nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04
000AF8F4 900C 8D08 048D 8008 8D0C+  	dc.b	nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08
000AF900 9004 940C 8094 18          	dc.b	nEb1, $04, nG1, $0C, nRst, nG1, $18
000AF907 F6FD AD                    	smpsJump            RRZ2_Jump02
000AF90A                            
000AF90A                            ; FM3 Data
000AF90A                            RRZ2_FM3:
000AF90A E080                       	smpsPan             panLeft, $00
000AF911                            
000AF911                            RRZ2_Jump01:
000AF911 EF02                       	smpsSetvoice        $02
000AF913                            
000AF913                            RRZ2_Loop05:
000AF913 B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000AF91F 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000AF92B 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000AF937 8008 B104 AF08 B104 8008+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04
000AF943 ACAF B1B8 0810             	dc.b	nG3, nBb3, nC4, nG4, $08, $10
000AF949 F700 03FF C6               	smpsLoop            $00, $03, RRZ2_Loop05
000AF94E B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000AF95A 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000AF966 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000AF972 8008 B104 AF08 B104 B8B6+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nG4, nF4, nG4, nF4
000AF97E B4B6 B4B3 B4B3 B1AF        	dc.b	nEb4, nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3
000AF986                            
000AF986                            RRZ2_Loop06:
000AF986 AC0C B8AC 08B6 0CAC 04B4+  	dc.b	nG3, $0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3
000AF992 08B3 0CAC 04B4 8008 AC04+  	dc.b	$08, nD4, $0C, nG3, $04, nEb4, nRst, $08, nG3, $04, nRst, $08
000AF99E B1B3 04B4 08B8 0480 08AC+  	dc.b	nC4, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nG3, $04, nC4
000AF9AA 08B3 04B4 08B8 0480 08BB+  	dc.b	$08, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nBb4, $10, nG3
000AF9B6 0CB8 AC08 B60C AC04 B40C+  	dc.b	$0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3, $08
000AF9C2 B30C AC04 B480 08B1 AC04+  	dc.b	nD4, $0C, nG3, $04, nEb4, nRst, $08, nC4, nG3, $04, nG4, $08
000AF9CE B604 B408 B304 8008 B404+  	dc.b	nF4, $04, nEb4, $08, nD4, $04, nRst, $08, nEb4, $04, nF4, $08
000AF9DA B404 B680 08B8 BB04 B880+  	dc.b	nEb4, $04, nF4, nRst, $08, nG4, nBb4, $04, nG4, nRst, $08
000AF9E5 F700 05FF 9D               	smpsLoop            $00, $05, RRZ2_Loop06
000AF9EA AC0C B8AC 08B6 0CAC 04B4+  	dc.b	nG3, $0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3
000AF9F6 08B3 0CAC 04B4 8008 AC04+  	dc.b	$08, nD4, $0C, nG3, $04, nEb4, nRst, $08, nG3, $04, nRst, $08
000AFA02 B1B3 04B4 08B8 0480 08AC+  	dc.b	nC4, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nG3, $04, nC4
000AFA0E 08B3 04B4 08B8 0480 08BB+  	dc.b	$08, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nBb4, $10, nG3
000AFA1A 0CB8 AC08 B60C AC04 B40C+  	dc.b	$0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3, $08
000AFA26 B30C AC04 B480 08B1 AC04+  	dc.b	nD4, $0C, nG3, $04, nEb4, nRst, $08, nC4, nG3, $04, nG4, $08
000AFA32 B604 B408 B304 8008 B404+  	dc.b	nF4, $04, nEb4, $08, nD4, $04, nRst, $08, nEb4, $04, nF4, $08
000AFA3E B404 B680 08B8 BB04 B880+  	dc.b	nEb4, $04, nF4, nRst, $08, nG4, nBb4, $04, nG4, nRst, $08
000AFA49 EF05                       	smpsSetvoice        $05
000AFA4B 8060 8018 BD04 B9B4 B9B4+  	dc.b	nRst, $60, nRst, $18, nC5, $04, nAb4, nEb4, nAb4, nEb4, nC4, nEb4
000AFA57 B1AD B1AD A8A1 1880 60B7+  	dc.b	nC4, nAb3, nC4, nAb3, nEb3, nAb2, $18, nRst, $60, nFs4, $04, nCs4
000AFA63 AFAB AFB2 B7AF ABA6 ABAF+  	dc.b	nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3, nBb3, nFs3, nCs3
000AFA6F A39F 2480 6080 18BD 04B9+  	dc.b	nBb2, nFs2, $24, nRst, $60, nRst, $18, nC5, $04, nAb4, nEb4, nAb4
000AFA7B B4B1 B4B1 ADB1 ADA8 A118+  	dc.b	nEb4, nC4, nEb4, nC4, nAb3, nC4, nAb3, nEb3, nAb2, $18, nRst, $60
000AFA87 B704 B2AF ABAF B2B7 AFAB+  	dc.b	nFs4, $04, nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3
000AFA93 AFAB A6A3 9F24             	dc.b	nBb3, nFs3, nCs3, nBb2, nFs2, $24
000AFA99 E6FA                       	smpsAlterVol        $FA
000AFA9B A560 E7A5 B148 0804 8008+  	dc.b	nC3, $60, smpsNoAttack, nC3, nC4, $48, $08, $04, nRst, $08, nC4, $04
000AFAA7 8008 AF04 22E7 1A08 0480+  	dc.b	nRst, $08, nBb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08, nBb3
000AFAB3 0480 08AD 0422 E71A 0804+  	dc.b	$04, nRst, $08, nAb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08
000AFABF AD04 8008 AC04 240C AAA8+  	dc.b	nAb3, $04, nRst, $08, nG3, $04, $24, $0C, nF3, nEb3, nD3, nC4
000AFACB 4808 0408 0480 08B3 0422+  	dc.b	$48, $08, $04, $08, $04, nRst, $08, nD4, $04, $22, smpsNoAttack, $1A
000AFAD7 0804 8008 B304 8008 B404+  	dc.b	$08, $04, nRst, $08, nD4, $04, nRst, $08, nEb4, $04, $2E, smpsNoAttack
000AFAE3 0E08 0480 08B4 0480 08B6+  	dc.b	$0E, $08, $04, nRst, $08, nEb4, $04, nRst, $08, nF4, $04, $24
000AFAEF BB30 B860 B118 B1B4 18B3   	dc.b	nBb4, $30, nG4, $60, nC4, $18, nC4, nEb4, $18, nD4
000AFAF9 E606                       	smpsAlterVol        $06
000AFAFB F6FE 14                    	smpsJump            RRZ2_Jump01
000AFAFE                            
000AFAFE                            ; FM4 Data
000AFAFE                            RRZ2_FM4:
000AFAFE E040                       	smpsPan             panRight, $00
000AFB05                            
000AFB05                            RRZ2_Jump00:
000AFB05 EF02                       	smpsSetvoice        $02
000AFB07                            
000AFB07                            RRZ2_Loop03:
000AFB07 AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000AFB13 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000AFB1F 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000AFB2B AC04 AA08 AC04 8008 AC04+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3
000AFB37 ACAF 08B3 10               	dc.b	nG3, nBb3, $08, nD4, $10
000AFB3C F700 03FF C7               	smpsLoop            $00, $03, RRZ2_Loop03
000AFB41 AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000AFB4D 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000AFB59 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000AFB65 AC04 AA08 AC04 B4B3 B4B3+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nEb4, nD4, nEb4, nD4, nC4, nD4
000AFB71 B1AF B1AF ACAA             	dc.b	nC4, nBb3, nC4, nBb3, nG3, nF3
000AFB77                            
000AFB77                            RRZ2_Loop04:
000AFB77 A00C ACA0 08AA 0CA0 04A8+  	dc.b	nG2, $0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2
000AFB83 08A7 0CA0 04A8 8008 A004+  	dc.b	$08, nD3, $0C, nG2, $04, nEb3, nRst, $08, nG2, $04, nRst, $08
000AFB8F A5A7 04A8 08AC 0480 08A0+  	dc.b	nC3, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nG2, $04, nC3
000AFB9B 08A7 04A8 08AC 0480 08AF+  	dc.b	$08, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nBb3, $10, nG2
000AFBA7 0CAC A008 AA0C A004 A80C+  	dc.b	$0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2, $08
000AFBB3 A70C A004 A880 08A5 A004+  	dc.b	nD3, $0C, nG2, $04, nEb3, nRst, $08, nC3, nG2, $04, nG3, $08
000AFBBF AA04 A808 A704 8008 A804+  	dc.b	nF3, $04, nEb3, $08, nD3, $04, nRst, $08, nEb3, $04, nF3, $08
000AFBCB A804 AA80 08AC AF04 AC80+  	dc.b	nEb3, $04, nF3, nRst, $08, nG3, nBb3, $04, nG3, nRst, $08
000AFBD6 F700 05FF 9D               	smpsLoop            $00, $05, RRZ2_Loop04
000AFBDB A00C ACA0 08AA 0CA0 04A8+  	dc.b	nG2, $0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2
000AFBE7 08A7 0CA0 04A8 8008 A004+  	dc.b	$08, nD3, $0C, nG2, $04, nEb3, nRst, $08, nG2, $04, nRst, $08
000AFBF3 A5A7 04A8 08AC 0480 08A0+  	dc.b	nC3, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nG2, $04, nC3
000AFBFF 08A7 04A8 08AC 0480 08AF+  	dc.b	$08, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nBb3, $10, nG2
000AFC0B 0CAC A008 AA0C A004 A80C+  	dc.b	$0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2, $08
000AFC17 A70C A004 A880 08A5 A004+  	dc.b	nD3, $0C, nG2, $04, nEb3, nRst, $08, nC3, nG2, $04, nG3, $08
000AFC23 AA04 A808 A704 8008 A804+  	dc.b	nF3, $04, nEb3, $08, nD3, $04, nRst, $08, nEb3, $04, nF3, $08
000AFC2F A804 AA80 08AC AF04 AC08+  	dc.b	nEb3, $04, nF3, nRst, $08, nG3, nBb3, $04, nG3, $08, nRst, $04
000AFC3B EF05                       	smpsSetvoice        $05
000AFC3D 8060 8018 800C BD04 B9B4+  	dc.b	nRst, $60, nRst, $18, nRst, $0C, nC5, $04, nAb4, nEb4, nAb4, nEb4
000AFC49 B1B4 B1AD B1AD A8A1 0C80+  	dc.b	nC4, nEb4, nC4, nAb3, nC4, nAb3, nEb3, nAb2, $0C, nRst, $60, nRst
000AFC55 0CB7 04B2 AFAB AFB2 B7AF+  	dc.b	$0C, nFs4, $04, nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3
000AFC61 ABAF ABA6 E7A3 1CE7 0880+  	dc.b	nFs3, nBb3, nFs3, nCs3, smpsNoAttack, nBb2, $1C, smpsNoAttack, $08, nRst, $58, nRst
000AFC6D 1880 0CBD 04B9 B4B9 B4B1+  	dc.b	$18, nRst, $0C, nC5, $04, nAb4, nEb4, nAb4, nEb4, nC4, nEb4, nC4
000AFC79 ADB1 ADA8 A10C 8060 800C+  	dc.b	nAb3, nC4, nAb3, nEb3, nAb2, $0C, nRst, $60, nRst, $0C, nFs4, $04
000AFC85 B2AF ABAF B2B7 AFAB A6AB+  	dc.b	nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3, nBb3, nFs3
000AFC91 A6E7 A31C                  	dc.b	nCs3, smpsNoAttack, nBb2, $1C
000AFC95 E6FA                       	smpsAlterVol        $FA
000AFC97 A060 E7A0 AC48 0804 8008+  	dc.b	nG2, $60, smpsNoAttack, nG2, nG3, $48, $08, $04, nRst, $08, nG3, $04
000AFCA3 8008 AC04 22E7 1A08 0480+  	dc.b	nRst, $08, nG3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08, nG3
000AFCAF 0480 08A8 0422 E71A 0804+  	dc.b	$04, nRst, $08, nEb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08
000AFCBB A804 8008 A704 2418 A0AC+  	dc.b	nEb3, $04, nRst, $08, nD3, $04, $24, $18, nG2, nG3, $48, $08
000AFCC7 0408 0480 08AC 0422 E71A+  	dc.b	$04, $08, $04, nRst, $08, nG3, $04, $22, smpsNoAttack, $1A, $08, $04
000AFCD3 8008 AC04 8008 AC04 2EE7+  	dc.b	nRst, $08, nG3, $04, nRst, $08, nG3, $04, $2E, smpsNoAttack, $0E, $08
000AFCDF 0480 08AC 0480 08AF 0424+  	dc.b	$04, nRst, $08, nG3, $04, nRst, $08, nBb3, $04, $24, nD4, $30
000AFCEB B160 AC18 ACAC 18AC        	dc.b	nC4, $60, nG3, $18, nG3, nG3, $18, nG3
000AFCF3 E606                       	smpsAlterVol        $06
000AFCF5 F6FE 0E                    	smpsJump            RRZ2_Jump00
000AFCF8                            
000AFCF8                            ; FM5 Data
000AFCF8                            RRZ2_FM5:
000AFCFD 8010                       	dc.b	nRst, $10
000AFCFF E101                       	smpsAlterNote       $01
000AFD01 F6F8 DB                    	smpsJump            RRZ2_FM1
000AFD04                            
000AFD04                            ; PSG1 Data
000AFD04                            RRZ2_PSG1:
000AFD09 F507                       	smpsPSGvoice        stone_1D
000AFD0B B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000AFD17 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000AFD23 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000AFD2F 8008 B104 AF08 B104 8008+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04
000AFD3B ACAF B1B8 0810             	dc.b	nG3, nBb3, nC4, nG4, $08, $10
000AFD41 F700 03FF BF               	smpsLoop            $00, $03, RRZ2_PSG1
000AFD46 B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000AFD52 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000AFD5E 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000AFD6A 8008 B104 AF08 B104 B8B6+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nG4, nF4, nG4, nF4
000AFD76 B4B6 B4B3 B4B3 B1AF        	dc.b	nEb4, nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3
000AFD7E F507                       	smpsPSGvoice        stone_26
000AFD80 B860 E7B8 1680 4AB8 60E7+  	dc.b	nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16
000AFD8C 804A                       	dc.b	nRst, $4A
000AFD8E                            
000AFD8E                            RRZ2_Loop0D:
000AFD8E B860 E7B8 1680 4ABB 60E7+  	dc.b	nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nBb4, $60, smpsNoAttack, nBb4, $16
000AFD9A 804A                       	dc.b	nRst, $4A
000AFD9C F700 02FF EE               	smpsLoop            $00, $02, RRZ2_Loop0D
000AFDA1 BA60 E7BA 1680 4AB8 60E7+  	dc.b	nA4, $60, smpsNoAttack, nA4, $16, nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16
000AFDAD 804A B860 E7B8 1680 4ABB+  	dc.b	nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nBb4, $60, smpsNoAttack
000AFDB9 BB16 804A                  	dc.b	nBb4, $16, nRst, $4A
000AFDBD                            
000AFDBD                            RRZ2_Loop0E:
000AFDBD F507                       	smpsPSGvoice        stone_23
000AFDBF B808 04B8 8008 B8B6 0480+  	dc.b	nG4, $08, $04, nG4, nRst, $08, nG4, nF4, $04, nRst, $08, nG4
000AFDCB 0480 08B8 04B6 8008 B8BB+  	dc.b	$04, nRst, $08, nG4, $04, nF4, nRst, $08, nG4, nBb4, $04, nRst
000AFDD7 08B8 0480 08B8 04B6 8008+  	dc.b	$08, nG4, $04, nRst, $08, nG4, $04, nF4, nRst, $08, nG4, nBb4
000AFDE3 0480 08B6 0680 2E          	dc.b	$04, nRst, $08, nF4, $06, nRst, $2E
000AFDEA F700 02FF CF               	smpsLoop            $00, $02, RRZ2_Loop0E
000AFDEF                            
000AFDEF                            RRZ2_Loop0F:
000AFDEF F507                       	smpsPSGvoice        stone_1D
000AFDF1 B908 0480 08B9 0480 08B9+  	dc.b	nAb4, $08, $04, nRst, $08, nAb4, $04, nRst, $08, nAb4, $04, nRst
000AFDFD 08B9 0430 E760 B708 0480+  	dc.b	$08, nAb4, $04, $30, smpsNoAttack, $60, nFs4, $08, $04, nRst, $08, nFs4
000AFE09 0480 08B7 0480 08B7 0430+  	dc.b	$04, nRst, $08, nFs4, $04, nRst, $08, nFs4, $04, $30, smpsNoAttack, $60
000AFE15 F700 02FF D6               	smpsLoop            $00, $02, RRZ2_Loop0F
000AFE1A 8060 8030 B804 B1B8 BDB8+  	dc.b	nRst, $60, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000AFE26 B1B8 B10C 8030 B804 B1B8+  	dc.b	nC4, nG4, nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4
000AFE32 BDB8 B1B8 B10C 8060 8060+  	dc.b	nC5, nG4, nC4, nG4, nC4, $0C, nRst, $60, nRst, $60, nRst, $60
000AFE3E 8030 B804 B1B8 BDB8 BDB8+  	dc.b	nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4, nC4, nG4
000AFE4A B10C 8030 B804 B1B8 BDB8+  	dc.b	nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000AFE56 B1B8 B10C 8060 B618 B3AF+  	dc.b	nC4, nG4, nC4, $0C, nRst, $60, nF4, $18, nD4, nBb3, nG3, nC3
000AFE62 30AC A518 ACB4 BB          	dc.b	$30, nG3, nC3, $18, nG3, nEb4, nBb4
000AFE69 F6FE 99                    	smpsJump            RRZ2_PSG1
000AFE6C                            
000AFE6C                            ; PSG2 Data
000AFE6C                            RRZ2_PSG2:
000AFE71 F507                       	smpsPSGvoice        stone_1D
000AFE73                            
000AFE73                            RRZ2_Loop09:
000AFE73 AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000AFE7F 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000AFE8B 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000AFE97 AC04 AA08 AC04 8008 AC04+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3
000AFEA3 ACAF 08B3 10               	dc.b	nG3, nBb3, $08, nD4, $10
000AFEA8 F700 03FF C7               	smpsLoop            $00, $03, RRZ2_Loop09
000AFEAD AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000AFEB9 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000AFEC5 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000AFED1 AC04 AA08 AC04 B4B3 B4B3+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nEb4, nD4, nEb4, nD4, nC4, nD4
000AFEDD B1AF B1AF ACAA             	dc.b	nC4, nBb3, nC4, nBb3, nG3, nF3
000AFEE3 F507                       	smpsPSGvoice        stone_26
000AFEE5 B160 E7B1 1680 4AB1 60E7+  	dc.b	nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nC4, $60, smpsNoAttack, nC4, $16
000AFEF1 804A                       	dc.b	nRst, $4A
000AFEF3                            
000AFEF3                            RRZ2_Loop0A:
000AFEF3 B160 E7B1 1680 4AB4 60E7+  	dc.b	nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nEb4, $60, smpsNoAttack, nEb4, $16
000AFEFF 804A                       	dc.b	nRst, $4A
000AFF01 F700 02FF EE               	smpsLoop            $00, $02, RRZ2_Loop0A
000AFF06 B660 E7B6 1680 4AB4 60E7+  	dc.b	nF4, $60, smpsNoAttack, nF4, $16, nRst, $4A, nEb4, $60, smpsNoAttack, nEb4, $16
000AFF12 804A B160 E7B1 1680 4AB4+  	dc.b	nRst, $4A, nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nEb4, $60, smpsNoAttack
000AFF1E B416 804A                  	dc.b	nEb4, $16, nRst, $4A
000AFF22                            
000AFF22                            RRZ2_Loop0B:
000AFF22 F507                       	smpsPSGvoice        stone_23
000AFF24 B408 04B4 8008 B4B3 0480+  	dc.b	nEb4, $08, $04, nEb4, nRst, $08, nEb4, nD4, $04, nRst, $08, nEb4
000AFF30 0480 08B4 04B3 8008 B4B8+  	dc.b	$04, nRst, $08, nEb4, $04, nD4, nRst, $08, nEb4, nG4, $04, nRst
000AFF3C 08B4 0480 08B4 04B3 8008+  	dc.b	$08, nEb4, $04, nRst, $08, nEb4, $04, nD4, nRst, $08, nEb4, nG4
000AFF48 0480 08B3 0680 2E          	dc.b	$04, nRst, $08, nD4, $06, nRst, $2E
000AFF4F F700 02FF CF               	smpsLoop            $00, $02, RRZ2_Loop0B
000AFF54                            
000AFF54                            RRZ2_Loop0C:
000AFF54 F507                       	smpsPSGvoice        stone_1D
000AFF56 B208 0480 08B2 0480 08B2+  	dc.b	nCs4, $08, $04, nRst, $08, nCs4, $04, nRst, $08, nCs4, $04, nRst
000AFF62 08B2 04B1 30E7 60B0 0804+  	dc.b	$08, nCs4, $04, nC4, $30, smpsNoAttack, $60, nB3, $08, $04, nRst, $08
000AFF6E B004 8008 B004 8008 B004+  	dc.b	nB3, $04, nRst, $08, nB3, $04, nRst, $08, nB3, $04, nBb3, $30
000AFF7A E760                       	dc.b	smpsNoAttack, $60
000AFF7C F700 02FF D4               	smpsLoop            $00, $02, RRZ2_Loop0C
000AFF81 800D                       	dc.b	nRst, $0D
000AFF83 EC02                       	smpsPSGAlterVol     $02
000AFF85 8060 8030 B804 B1B8 BDB8+  	dc.b	nRst, $60, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000AFF91 B1B8 B10C 8030 B804 B1B8+  	dc.b	nC4, nG4, nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4
000AFF9D BDB8 B1B8 B10C 8060 8060+  	dc.b	nC5, nG4, nC4, nG4, nC4, $0C, nRst, $60, nRst, $60, nRst, $60
000AFFA9 8030 B804 B1B8 BDB8 BDB8+  	dc.b	nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4, nC4, nG4
000AFFB5 B10C 8030 B804 B1B8 BDB8+  	dc.b	nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000AFFC1 B1B8 B10C 8060 B618 B3AF+  	dc.b	nC4, nG4, nC4, $0C, nRst, $60, nF4, $18, nD4, nBb3, nG3, nC3
000AFFCD 30AC A518 ACB4 BB0B        	dc.b	$30, nG3, nC3, $18, nG3, nEb4, nBb4, $0B
000AFFD5 ECFE                       	smpsPSGAlterVol     $FE
000AFFD7 F6FE 93                    	smpsJump            RRZ2_PSG2
000AFFDA                            
000AFFDA                            ; PSG3 Data
000AFFDA                            RRZ2_PSG3:
000AFFDA F3E7                       	smpsPSGform         $E7
000AFFDC 8060 80                    	dc.b	nRst, $60, nRst
000AFFDF F800 00                    	smpsCall            RRZ2_Call00
000AFFE2 F800 00                    	smpsCall            RRZ2_Call00
000AFFE5 F800 00                    	smpsCall            RRZ2_Call01
000AFFE8                            
000AFFE8                            RRZ2_Jump03:
000AFFE8 F800 00                    	smpsCall            RRZ2_Call00
000AFFEB F6FF FB                    	smpsJump            RRZ2_Jump03
000AFFEE                            
000AFFEE                            RRZ2_Call00:
000AFFEE F502                       	smpsPSGvoice        stone_0F
000AFFF0 B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000AFFF7 F700 10FF F3               	smpsLoop            $00, $10, RRZ2_Call00
000AFFFC E3                         	smpsReturn
000AFFFD                            
000AFFFD                            RRZ2_Call01:
000AFFFD F502                       	smpsPSGvoice        stone_0F
000AFFFF B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000B0006 F502                       	smpsPSGvoice        stone_0F
000B0008 B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000B000F F502                       	smpsPSGvoice        stone_0F
000B0011 B104 8080 B180 80          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nRst
000B0018 F503                       	smpsPSGvoice        stone_04
000B001A B10C                       	dc.b	nC4, $0C
000B001C F502                       	smpsPSGvoice        stone_0F
000B001E B104 8080                  	dc.b	nC4, $04, nRst, nRst
000B0022 E3                         	smpsReturn
000B0023                            
000B0023                            ; DAC Data
000B0023                            RRZ2_DAC:
000B0023 8160 8048 810C 8181 6080+  	dc.b	dKick, $60, nRst, $48, dKick, $0C, dKick, dKick, $60, nRst, $48, dHiTimpani
000B002F 0488 8A8B 8B8B 8160 8048+  	dc.b	$04, dHiTimpani, dLowTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dKick, $60, nRst, $48, dKick, $0C
000B003B 8181 6080 0882 0480 8080+  	dc.b	dKick, dKick, $60, nRst, $08, dSnare, $04, nRst, nRst, nRst, dSnare, nRst
000B0047 8080 8080 8280 8082 8080+  	dc.b	nRst, nRst, nRst, nRst, dSnare, nRst, nRst, dSnare, nRst, nRst, dFloorTimpani, $04
000B0053 8B8B 8B8B 8B81 0480 8080+  	dc.b	dFloorTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dKick, $04, nRst, nRst, nRst, nRst, nRst
000B005F 8280 8080 8080 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, dKick, nRst, nRst
000B006B 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, dKick
000B0077 8280 8080 8081 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst, dKick, nRst, nRst
000B0083 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, nRst
000B008F 8280 8080 8080 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, dKick, nRst, nRst
000B009B 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, nRst
000B00A7 8280 8080 8081 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst, dKick, nRst, nRst
000B00B3 8280 8082 8282             	dc.b	dSnare, nRst, nRst, dSnare, dSnare, dSnare
000B00B9                            
000B00B9                            RRZ2_Loop00:
000B00B9 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B00C5 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B00D1 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B00DD 8081 8080 8180 8082 8080+  	dc.b	nRst, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000B00E9 80                         	dc.b	nRst
000B00EA F700 07FF CB               	smpsLoop            $00, $07, RRZ2_Loop00
000B00EF 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B00FB 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B0107 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B0113 8081 8181 8180 8082 8080+  	dc.b	nRst, dKick, dKick, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dSnare, dSnare
000B011F 82                         	dc.b	dSnare
000B0120                            
000B0120                            RRZ2_Loop01:
000B0120 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B012C 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B0138 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B0144 8081 8080 8180 8082 8080+  	dc.b	nRst, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000B0150 80                         	dc.b	nRst
000B0151 F700 02FF CB               	smpsLoop            $00, $02, RRZ2_Loop01
000B0156 8104 8080 8180 8180 8082+  	dc.b	dKick, $04, nRst, nRst, dKick, nRst, dKick, nRst, nRst, dSnare, nRst, nRst
000B0162 8181 3081 0480 8081 8081+  	dc.b	dKick, dKick, $30, dKick, $04, nRst, nRst, dKick, nRst, dKick, nRst, nRst
000B016E 8180 8081 8118 8181 0480+  	dc.b	dKick, nRst, nRst, dKick, dKick, $18, dKick, dKick, $04, nRst, nRst, dKick
000B017A 8081 8080 8280 8081 8180+  	dc.b	nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, dKick, nRst, nRst, nRst
000B0186 8081 8280 8080 8080 8180+  	dc.b	nRst, dKick, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, dSnare, nRst
000B0192 8080 8280 8080 8080 8180+  	dc.b	nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, dKick, dSnare
000B019E 8080 8180 8182 8080 8104+  	dc.b	nRst, nRst, dKick, nRst, dKick, dSnare, nRst, nRst, dKick, $04, nRst, nRst
000B01AA 8080 8082 8080 8080 8081+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B01B6 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B01C2 8080 8182 8080 8080 8181+  	dc.b	nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst
000B01CE 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B01DA 8080 8082 8080 8080 8081+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B01E6 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B01F2 8080 8082 8080 8080 8181+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst
000B01FE 8180 8082 8080 8282 8281+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, dSnare, dSnare, dSnare, dKick, $04, nRst
000B020A 8080 8080 8280 8080 8081+  	dc.b	nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B0216 8181 8080 8280 8080 8080+  	dc.b	dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, $04
000B0222 8080 8080 8082 8080 8080+  	dc.b	nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, nRst
000B022E 8081 8180 8082 8080 8A8B+  	dc.b	nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dLowTimpani, dFloorTimpani, dFloorTimpani, dKick
000B023A 0480 8080 8080 8280 8080+  	dc.b	$04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick
000B0246 8080 8181 8080 8280 8080+  	dc.b	nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst
000B0252                            
000B0252                            RRZ2_Loop02:
000B0252 8104 8080 8080 8082 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B025E 8180 8081 8180 8082 8080+  	dc.b	dKick, nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B026A 80                         	dc.b	nRst
000B026B F700 07FF E3               	smpsLoop            $00, $07, RRZ2_Loop02
000B0270 8104 8080 8080 8082 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B027C 8180 8081 8180 8082 8080+  	dc.b	dKick, nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000B0288 8181 1818 8204 0404 0404+  	dc.b	dKick, dKick, $18, $18, dSnare, $04, $04, $04, $04, $04, $04, $04
000B0294 0404 0404 04               	dc.b	$04, $04, $04, $04, $04
000B0299 F6FD 88                    	smpsJump            RRZ2_DAC
000B029C                            
000B029C                            RRZ2_Voices:
000B029C                            ;	Voice $00
000B029C                            ;	$3A
000B029C                            ;	$3F, $73, $73, $31, 	$9F, $5F, $54, $17, 	$03, $14, $0A, $05
000B029C                            ;	$01, $05, $01, $01, 	$FF, $EF, $8F, $FF, 	$29, $39, $23, $00
000B029C                            	smpsVcAlgorithm     $02
000B029C                            	smpsVcFeedback      $07
000B029C                            	smpsVcUnusedBits    $00
000B029C                            	smpsVcDetune        $03, $07, $07, $03
000B029C                            	smpsVcCoarseFreq    $01, $03, $03, $0F
000B029C                            	smpsVcRateScale     $00, $01, $01, $02
000B029C                            	smpsVcAttackRate    $17, $14, $1F, $1F
000B029C                            	smpsVcAmpMod        $00, $00, $00, $00
000B029C                            	smpsVcDecayRate1    $05, $0A, $14, $03
000B029C                            	smpsVcDecayRate2    $01, $01, $05, $01
000B029C                            	smpsVcDecayLevel    $0F, $08, $0E, $0F
000B029C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B02B5                            
000B02B5                            ;	Voice $01
000B02B5                            ;	$3C
000B02B5                            ;	$01, $00, $00, $00, 	$1F, $1F, $15, $1F, 	$11, $03, $12, $05
000B02B5                            ;	$07, $04, $09, $02, 	$55, $3A, $25, $1A, 	$1A, $00, $07, $00
000B02B5                            	smpsVcAlgorithm     $04
000B02B5                            	smpsVcFeedback      $07
000B02B5                            	smpsVcUnusedBits    $00
000B02B5                            	smpsVcDetune        $00, $00, $00, $00
000B02B5                            	smpsVcCoarseFreq    $00, $00, $00, $01
000B02B5                            	smpsVcRateScale     $00, $00, $00, $00
000B02B5                            	smpsVcAttackRate    $1F, $15, $1F, $1F
000B02B5                            	smpsVcAmpMod        $00, $00, $00, $00
000B02B5                            	smpsVcDecayRate1    $05, $12, $03, $11
000B02B5                            	smpsVcDecayRate2    $02, $09, $04, $07
000B02B5                            	smpsVcDecayLevel    $01, $02, $03, $05
000B02B5                            	smpsVcReleaseRate   $0A, $05, $0A, $05
000B02CE                            
000B02CE                            ;	Voice $02
000B02CE                            ;	$3A
000B02CE                            ;	$73, $04, $11, $31, 	$9F, $DF, $9F, $9F, 	$05, $05, $03, $0A
000B02CE                            ;	$03, $02, $03, $02, 	$6F, $6F, $5F, $7F, 	$1C, $20, $1E, $00
000B02CE                            	smpsVcAlgorithm     $02
000B02CE                            	smpsVcFeedback      $07
000B02CE                            	smpsVcUnusedBits    $00
000B02CE                            	smpsVcDetune        $03, $01, $00, $07
000B02CE                            	smpsVcCoarseFreq    $01, $01, $04, $03
000B02CE                            	smpsVcRateScale     $02, $02, $03, $02
000B02CE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B02CE                            	smpsVcAmpMod        $00, $00, $00, $00
000B02CE                            	smpsVcDecayRate1    $0A, $03, $05, $05
000B02CE                            	smpsVcDecayRate2    $02, $03, $02, $03
000B02CE                            	smpsVcDecayLevel    $07, $05, $06, $06
000B02CE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B02E7                            
000B02E7                            ;	Voice $03
000B02E7                            ;	$3E
000B02E7                            ;	$07, $01, $02, $0A, 	$1F, $1F, $1F, $1F, 	$03, $06, $00, $00
000B02E7                            ;	$08, $06, $07, $0C, 	$15, $0A, $0A, $0A, 	$20, $05, $06, $08
000B02E7                            	smpsVcAlgorithm     $06
000B02E7                            	smpsVcFeedback      $07
000B02E7                            	smpsVcUnusedBits    $00
000B02E7                            	smpsVcDetune        $00, $00, $00, $00
000B02E7                            	smpsVcCoarseFreq    $0A, $02, $01, $07
000B02E7                            	smpsVcRateScale     $00, $00, $00, $00
000B02E7                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B02E7                            	smpsVcAmpMod        $00, $00, $00, $00
000B02E7                            	smpsVcDecayRate1    $00, $00, $06, $03
000B02E7                            	smpsVcDecayRate2    $0C, $07, $06, $08
000B02E7                            	smpsVcDecayLevel    $00, $00, $00, $01
000B02E7                            	smpsVcReleaseRate   $0A, $0A, $0A, $05
000B0300                            
000B0300                            ;	Voice $04
000B0300                            ;	$3C
000B0300                            ;	$71, $71, $11, $11, 	$17, $1E, $19, $1E, 	$04, $01, $07, $01
000B0300                            ;	$00, $00, $00, $00, 	$F7, $F8, $F7, $F8, 	$1E, $00, $14, $00
000B0300                            	smpsVcAlgorithm     $04
000B0300                            	smpsVcFeedback      $07
000B0300                            	smpsVcUnusedBits    $00
000B0300                            	smpsVcDetune        $01, $01, $07, $07
000B0300                            	smpsVcCoarseFreq    $01, $01, $01, $01
000B0300                            	smpsVcRateScale     $00, $00, $00, $00
000B0300                            	smpsVcAttackRate    $1E, $19, $1E, $17
000B0300                            	smpsVcAmpMod        $00, $00, $00, $00
000B0300                            	smpsVcDecayRate1    $01, $07, $01, $04
000B0300                            	smpsVcDecayRate2    $00, $00, $00, $00
000B0300                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B0300                            	smpsVcReleaseRate   $08, $07, $08, $07
000B0319                            
000B0319                            ;	Voice $05
000B0319                            ;	$16
000B0319                            ;	$7A, $74, $3C, $31, 	$1F, $1F, $1F, $1F, 	$0A, $08, $0C, $0A
000B0319                            ;	$07, $0A, $07, $05, 	$2F, $AF, $AF, $5F, 	$14, $05, $0A, $00
000B0319                            	smpsVcAlgorithm     $06
000B0319                            	smpsVcFeedback      $02
000B0319                            	smpsVcUnusedBits    $00
000B0319                            	smpsVcDetune        $03, $03, $07, $07
000B0319                            	smpsVcCoarseFreq    $01, $0C, $04, $0A
000B0319                            	smpsVcRateScale     $00, $00, $00, $00
000B0319                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B0319                            	smpsVcAmpMod        $00, $00, $00, $00
000B0319                            	smpsVcDecayRate1    $0A, $0C, $08, $0A
000B0319                            	smpsVcDecayRate2    $05, $07, $0A, $07
000B0319                            	smpsVcDecayLevel    $05, $0A, $0A, $02
000B0319                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B0332                            
000B0332                            
000B0332                            		even				
000B0332                            Music9B:		incbin	"sound/music/Mus9B - TTZ BF US.bin"
000B0F14                            		even
000B0F14                            Music9C:		include	"sound/music/Mus9C - Tribute.asm"
000B0F14                            Tribute_Header:
000B0F14                            	smpsHeaderStartSong 3
000B0F16 0603                       	smpsHeaderChan      $06, $03
000B0F18 0106                       	smpsHeaderTempo     $01, $06
000B0F1A                            
000B0F1E 0000 000D                  	smpsHeaderFM        Tribute_FM1,	$00, $0D
000B0F22 0000 0016                  	smpsHeaderFM        Tribute_FM2,	$00, $16
000B0F26 0000 0016                  	smpsHeaderFM        Tribute_FM3,	$00, $16
000B0F2A 0000 0016                  	smpsHeaderFM        Tribute_FM4,	$00, $16
000B0F2E 0000 0C15                  	smpsHeaderFM        Tribute_FM5,	$0C, $15
000B0F32                            ;	smpsHeaderFM        Tribute_FM6,	$0C, $17
000B0F44                            
000B0F44                            ; FM1 Data
000B0F44                            Tribute_FM1:
000B0F44 EF00                       	smpsSetvoice        $00
000B0F46 F800 00                    	smpsCall            Tribute_Call05
000B0F49 E712 9B06 8024 9B06 8080+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst
000B0F55 9BE7 069B 06A7 9BA7 9B80+  	dc.b	nD2, smpsNoAttack, $06, nD2, $06, nD3, nD2, nD3, nD2, nRst, nD2, $0C
000B0F61 06A7 9B99 9A9B 9E          	dc.b	$06, nD3, nD2, nC2, nCs2, nD2, nF2
000B0F68 F800 00                    	smpsCall            Tribute_Call05
000B0F6B E712 9B06 8024 9B06 8080+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst
000B0F77 94                         	dc.b	nG1
000B0F78 EA09                       	smpsSetTempoMod     $09
000B0F7A E760 E748 8018             	dc.b	smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B0F80                            
000B0F80                            Tribute_Loop05:
000B0F80 9918 0C0C 1206 80A5 8098+  	dc.b	nC2, $18, $0C, $0C, $12, $06, nRst, nC3, nRst, nB1, smpsNoAttack, $18
000B0F8C 0C0C 120C A006 940C 9618+  	dc.b	$0C, $0C, $12, $0C, nG2, $06, nG1, $0C, nA1, $18, $0C, $0C
000B0F98 1206 80A2 8094 E70C 0C0C+  	dc.b	$12, $06, nRst, nA2, nRst, nG1, smpsNoAttack, $0C, $0C, $0C, $0C, $0C
000B0FA4 0C0C 999B 180C 0C12 0680+  	dc.b	$0C, $0C, nC2, nD2, $18, $0C, $0C, $12, $06, nRst, nD3, nRst
000B0FB0 97E7 0C0C 0C0C 1212 A306+  	dc.b	nBb1, smpsNoAttack, $0C, $0C, $0C, $0C, $12, $12, nBb2, $06, nRst, nA1
000B0FBC 180C 0C12 0680 A280 92E7+  	dc.b	$18, $0C, $0C, $12, $06, nRst, nA2, nRst, nF1, smpsNoAttack, $0C, $0C
000B0FC8 0C0C 910C 0C0C 9B          	dc.b	$0C, $0C, nE1, $0C, $0C, $0C, nD2
000B0FCF F700 02FF AD               	smpsLoop            $00, $02, Tribute_Loop05
000B0FD4 9624 9530 940C E724 9330+  	dc.b	nA1, $24, nAb1, $30, nG1, $0C, smpsNoAttack, $24, nFs1, $30, nF1, $0C
000B0FE0 E74E 8006 940C E760        	dc.b	smpsNoAttack, $4E, nRst, $06, nG1, $0C, smpsNoAttack, $60
000B0FE8 F800 00                    	smpsCall            Tribute_Call00
000B0FEB F2                         	smpsStop
000B0FEC                            
000B0FEC                            Tribute_Call05:
000B0FEC 9B12 0680 249B 0680 809B+  	dc.b	nD2, $12, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst, nD2
000B0FF8 E712 9B06 801E A706 9B80+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $1E, nD3, $06, nD2, nRst, nRst, nD2
000B1004 809B                       	dc.b	nRst, nD2
000B1006 E3                         	smpsReturn
000B1007                            
000B1007                            Tribute_Call00:
000B1007 8006 999B A09E 9D94 99E7+  	dc.b	nRst, $06, nC2, nD2, nG2, nF2, nE2, nG1, nC2, smpsNoAttack, $06, nG2
000B1013 9EA5 A0A5 A7AC E706 9E9D+  	dc.b	nF2, nC3, nG2, nC3, nD3, nG3, smpsNoAttack, $06, nF2, nE2, nC2, nF1
000B101F 9496 99E7 06               	dc.b	nG1, nA1, nC2, smpsNoAttack, $06
000B1024 E3                         	smpsReturn
000B1025                            
000B1025                            ; FM2 Data
000B1025                            Tribute_FM2:
000B1025 EF01                       	smpsSetvoice        $01
000B1027 B512 B306                  	dc.b	nE4, $12, nD4, $06
000B102B E60A                       	smpsFMAlterVol      $0A
000B102D 0680                       	dc.b	$06, nRst
000B102F E6F6                       	smpsFMAlterVol      $F6
000B1031 B8                         	dc.b	nG4
000B1032 E60A                       	smpsFMAlterVol      $0A
000B1034 0680                       	dc.b	$06, nRst
000B1036 E6F6                       	smpsFMAlterVol      $F6
000B1038 B6B5                       	dc.b	nF4, nE4
000B103A E60A                       	smpsFMAlterVol      $0A
000B103C 06                         	dc.b	$06
000B103D E6F6                       	smpsFMAlterVol      $F6
000B103F B1                         	dc.b	nC4
000B1040 E60A                       	smpsFMAlterVol      $0A
000B1042 06                         	dc.b	$06
000B1043 E6F6                       	smpsFMAlterVol      $F6
000B1045 B3                         	dc.b	nD4
000B1046 EF02                       	smpsSetvoice        $02
000B1048 E918                       	smpsAlterPitch      $18
000B104A F800 00                    	smpsCall            Tribute_Call04
000B104D EF01                       	smpsSetvoice        $01
000B104F E9E8                       	smpsAlterPitch      $E8
000B1051 F800 00                    	smpsCall            Tribute_Call04
000B1054 B406 E712 18B6 1818        	dc.b	nEb4, $06, smpsNoAttack, $12, $18, nF4, $18, $18
000B105C E60A                       	smpsFMAlterVol      $0A
000B105E 06                         	dc.b	$06
000B105F E6F6                       	smpsFMAlterVol      $F6
000B1061 B512 B306                  	dc.b	nE4, $12, nD4, $06
000B1065 E60A                       	smpsFMAlterVol      $0A
000B1067 0680                       	dc.b	$06, nRst
000B1069 E6F6                       	smpsFMAlterVol      $F6
000B106B B8                         	dc.b	nG4
000B106C E60A                       	smpsFMAlterVol      $0A
000B106E 0680                       	dc.b	$06, nRst
000B1070 E6F6                       	smpsFMAlterVol      $F6
000B1072 B6B5                       	dc.b	nF4, nE4
000B1074 E60A                       	smpsFMAlterVol      $0A
000B1076 06                         	dc.b	$06
000B1077 E6F6                       	smpsFMAlterVol      $F6
000B1079 B1                         	dc.b	nC4
000B107A E60A                       	smpsFMAlterVol      $0A
000B107C 06                         	dc.b	$06
000B107D E6F6                       	smpsFMAlterVol      $F6
000B107F B3                         	dc.b	nD4
000B1080 EF02                       	smpsSetvoice        $02
000B1082 E918                       	smpsAlterPitch      $18
000B1084 F800 00                    	smpsCall            Tribute_Call04
000B1087 EF01                       	smpsSetvoice        $01
000B1089 E9E8                       	smpsAlterPitch      $E8
000B108B F800 00                    	smpsCall            Tribute_Call04
000B108E B106 E760 E748 8018        	dc.b	nC4, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B1096                            
000B1096                            Tribute_Loop04:
000B1096 8018 B512                  	dc.b	nRst, $18, nE4, $12
000B109A E60A                       	smpsFMAlterVol      $0A
000B109C 06                         	dc.b	$06
000B109D E6F6                       	smpsFMAlterVol      $F6
000B109F B50C                       	dc.b	nE4, $0C
000B10A1 E60A                       	smpsFMAlterVol      $0A
000B10A3 06                         	dc.b	$06
000B10A4 E6F6                       	smpsFMAlterVol      $F6
000B10A6 06                         	dc.b	$06
000B10A7 E60A                       	smpsFMAlterVol      $0A
000B10A9 06                         	dc.b	$06
000B10AA E6F6                       	smpsFMAlterVol      $F6
000B10AC 06                         	dc.b	$06
000B10AD E60A                       	smpsFMAlterVol      $0A
000B10AF 06                         	dc.b	$06
000B10B0 E6F6                       	smpsFMAlterVol      $F6
000B10B2 B3E7 60                    	dc.b	nD4, smpsNoAttack, $60
000B10B5 F700 03FF DD               	smpsLoop            $00, $03, Tribute_Loop04
000B10BA 8018 B512                  	dc.b	nRst, $18, nE4, $12
000B10BE E60A                       	smpsFMAlterVol      $0A
000B10C0 06                         	dc.b	$06
000B10C1 E6F6                       	smpsFMAlterVol      $F6
000B10C3 B50C                       	dc.b	nE4, $0C
000B10C5 E60A                       	smpsFMAlterVol      $0A
000B10C7 06                         	dc.b	$06
000B10C8 E6F6                       	smpsFMAlterVol      $F6
000B10CA 06                         	dc.b	$06
000B10CB E60A                       	smpsFMAlterVol      $0A
000B10CD 06                         	dc.b	$06
000B10CE E6F6                       	smpsFMAlterVol      $F6
000B10D0 06                         	dc.b	$06
000B10D1 E60A                       	smpsFMAlterVol      $0A
000B10D3 06                         	dc.b	$06
000B10D4 E6F6                       	smpsFMAlterVol      $F6
000B10D6 B5E7 30B3 18B8             	dc.b	nE4, smpsNoAttack, $30, nD4, $18, nG4
000B10DC F701 02FF B6               	smpsLoop            $01, $02, Tribute_Loop04
000B10E1 B51E                       	dc.b	nE4, $1E
000B10E3 E60A                       	smpsFMAlterVol      $0A
000B10E5 06                         	dc.b	$06
000B10E6 E6F6                       	smpsFMAlterVol      $F6
000B10E8 B62A                       	dc.b	nF4, $2A
000B10EA E60A                       	smpsFMAlterVol      $0A
000B10EC 06                         	dc.b	$06
000B10ED E6F6                       	smpsFMAlterVol      $F6
000B10EF B52A                       	dc.b	nE4, $2A
000B10F1 E60A                       	smpsFMAlterVol      $0A
000B10F3 06                         	dc.b	$06
000B10F4 E6F6                       	smpsFMAlterVol      $F6
000B10F6 B52A                       	dc.b	nE4, $2A
000B10F8 E60A                       	smpsFMAlterVol      $0A
000B10FA 06                         	dc.b	$06
000B10FB E6F6                       	smpsFMAlterVol      $F6
000B10FD B50C E74E                  	dc.b	nE4, $0C, smpsNoAttack, $4E
000B1101 E60A                       	smpsFMAlterVol      $0A
000B1103 06                         	dc.b	$06
000B1104 E6F6                       	smpsFMAlterVol      $F6
000B1106 B30C E760                  	dc.b	nD4, $0C, smpsNoAttack, $60
000B110A F800 00                    	smpsCall            Tribute_Call03
000B110D F2                         	smpsStop
000B110E                            
000B110E                            Tribute_Call04:
000B110E B506 E712 B306             	dc.b	nE4, $06, smpsNoAttack, $12, nD4, $06
000B1114 E60A                       	smpsFMAlterVol      $0A
000B1116 0680                       	dc.b	$06, nRst
000B1118 E6F6                       	smpsFMAlterVol      $F6
000B111A B8                         	dc.b	nG4
000B111B E60A                       	smpsFMAlterVol      $0A
000B111D 0680                       	dc.b	$06, nRst
000B111F E6F6                       	smpsFMAlterVol      $F6
000B1121 B6B5                       	dc.b	nF4, nE4
000B1123 E60A                       	smpsFMAlterVol      $0A
000B1125 06                         	dc.b	$06
000B1126 E6F6                       	smpsFMAlterVol      $F6
000B1128 B1                         	dc.b	nC4
000B1129 E60A                       	smpsFMAlterVol      $0A
000B112B 06                         	dc.b	$06
000B112C E6F6                       	smpsFMAlterVol      $F6
000B112E B3                         	dc.b	nD4
000B112F E3                         	smpsReturn
000B1130                            
000B1130                            Tribute_Call03:
000B1130 E918                       	smpsAlterPitch      $18
000B1132 8006 999B A09E 9D94 99     	dc.b	nRst, $06, nC2, nD2, nG2, nF2, nE2, nG1, nC2
000B113B E60A                       	smpsFMAlterVol      $0A
000B113D 06                         	dc.b	$06
000B113E E6F6                       	smpsFMAlterVol      $F6
000B1140 A09E A5A0 A5A7 AC          	dc.b	nG2, nF2, nC3, nG2, nC3, nD3, nG3
000B1147 E60A                       	smpsFMAlterVol      $0A
000B1149 06                         	dc.b	$06
000B114A E6F6                       	smpsFMAlterVol      $F6
000B114C 9E9D 9992 9496 99          	dc.b	nF2, nE2, nC2, nF1, nG1, nA1, nC2
000B1153 E60A                       	smpsFMAlterVol      $0A
000B1155 06                         	dc.b	$06
000B1156 E6F6                       	smpsFMAlterVol      $F6
000B1158 E9E8                       	smpsAlterPitch      $E8
000B115A E3                         	smpsReturn
000B115B                            
000B115B                            ; FM3 Data
000B115B                            Tribute_FM3:
000B115B EF01                       	smpsSetvoice        $01
000B115D B112 B006                  	dc.b	nC4, $12, nB3, $06
000B1161 E60A                       	smpsFMAlterVol      $0A
000B1163 0680                       	dc.b	$06, nRst
000B1165 E6F6                       	smpsFMAlterVol      $F6
000B1167 B3                         	dc.b	nD4
000B1168 E60A                       	smpsFMAlterVol      $0A
000B116A 0680                       	dc.b	$06, nRst
000B116C E6F6                       	smpsFMAlterVol      $F6
000B116E B1B1                       	dc.b	nC4, nC4
000B1170 E60A                       	smpsFMAlterVol      $0A
000B1172 06                         	dc.b	$06
000B1173 E6F6                       	smpsFMAlterVol      $F6
000B1175 AE                         	dc.b	nA3
000B1176 E60A                       	smpsFMAlterVol      $0A
000B1178 06                         	dc.b	$06
000B1179 E6F6                       	smpsFMAlterVol      $F6
000B117B B0                         	dc.b	nB3
000B117C EF02                       	smpsSetvoice        $02
000B117E E918                       	smpsAlterPitch      $18
000B1180 E080                       	smpsPan             panLeft, $00
000B1182 F800 00                    	smpsCall            Tribute_Call02
000B1185 EF01                       	smpsSetvoice        $01
000B1187 E9E8                       	smpsAlterPitch      $E8
000B1189 E0C0                       	smpsPan             panCenter, $00
000B118B F800 00                    	smpsCall            Tribute_Call02
000B118E AF06 E712 18B1 1818        	dc.b	nBb3, $06, smpsNoAttack, $12, $18, nC4, $18, $18
000B1196 E60A                       	smpsFMAlterVol      $0A
000B1198 06                         	dc.b	$06
000B1199 E6F6                       	smpsFMAlterVol      $F6
000B119B B112 B006                  	dc.b	nC4, $12, nB3, $06
000B119F E60A                       	smpsFMAlterVol      $0A
000B11A1 0680                       	dc.b	$06, nRst
000B11A3 E6F6                       	smpsFMAlterVol      $F6
000B11A5 B3                         	dc.b	nD4
000B11A6 E60A                       	smpsFMAlterVol      $0A
000B11A8 0680                       	dc.b	$06, nRst
000B11AA E6F6                       	smpsFMAlterVol      $F6
000B11AC B1B1                       	dc.b	nC4, nC4
000B11AE E60A                       	smpsFMAlterVol      $0A
000B11B0 06                         	dc.b	$06
000B11B1 E6F6                       	smpsFMAlterVol      $F6
000B11B3 AE                         	dc.b	nA3
000B11B4 E60A                       	smpsFMAlterVol      $0A
000B11B6 06                         	dc.b	$06
000B11B7 E6F6                       	smpsFMAlterVol      $F6
000B11B9 B0                         	dc.b	nB3
000B11BA EF02                       	smpsSetvoice        $02
000B11BC E918                       	smpsAlterPitch      $18
000B11BE E080                       	smpsPan             panLeft, $00
000B11C0 F800 00                    	smpsCall            Tribute_Call02
000B11C3 EF01                       	smpsSetvoice        $01
000B11C5 E9E8                       	smpsAlterPitch      $E8
000B11C7 E0C0                       	smpsPan             panCenter, $00
000B11C9 F800 00                    	smpsCall            Tribute_Call02
000B11CC AE06 E760 E748 8018        	dc.b	nA3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B11D4                            
000B11D4                            Tribute_Loop03:
000B11D4 8018 B112                  	dc.b	nRst, $18, nC4, $12
000B11D8 E60A                       	smpsFMAlterVol      $0A
000B11DA 06                         	dc.b	$06
000B11DB E6F6                       	smpsFMAlterVol      $F6
000B11DD 0C                         	dc.b	$0C
000B11DE E60A                       	smpsFMAlterVol      $0A
000B11E0 06                         	dc.b	$06
000B11E1 E6F6                       	smpsFMAlterVol      $F6
000B11E3 06                         	dc.b	$06
000B11E4 E60A                       	smpsFMAlterVol      $0A
000B11E6 06                         	dc.b	$06
000B11E7 E6F6                       	smpsFMAlterVol      $F6
000B11E9 06                         	dc.b	$06
000B11EA E60A                       	smpsFMAlterVol      $0A
000B11EC 06                         	dc.b	$06
000B11ED E6F6                       	smpsFMAlterVol      $F6
000B11EF B0E7 60                    	dc.b	nB3, smpsNoAttack, $60
000B11F2 F700 02FF DE               	smpsLoop            $00, $02, Tribute_Loop03
000B11F7 8018 B112                  	dc.b	nRst, $18, nC4, $12
000B11FB E60A                       	smpsFMAlterVol      $0A
000B11FD 06                         	dc.b	$06
000B11FE E6F6                       	smpsFMAlterVol      $F6
000B1200 0C                         	dc.b	$0C
000B1201 E60A                       	smpsFMAlterVol      $0A
000B1203 06                         	dc.b	$06
000B1204 E6F6                       	smpsFMAlterVol      $F6
000B1206 06                         	dc.b	$06
000B1207 E60A                       	smpsFMAlterVol      $0A
000B1209 06                         	dc.b	$06
000B120A E6F6                       	smpsFMAlterVol      $F6
000B120C 06                         	dc.b	$06
000B120D E60A                       	smpsFMAlterVol      $0A
000B120F 06                         	dc.b	$06
000B1210 E6F6                       	smpsFMAlterVol      $F6
000B1212 AFE7 6080 18B1 12          	dc.b	nBb3, smpsNoAttack, $60, nRst, $18, nC4, $12
000B1219 E60A                       	smpsFMAlterVol      $0A
000B121B 06                         	dc.b	$06
000B121C E6F6                       	smpsFMAlterVol      $F6
000B121E 0C                         	dc.b	$0C
000B121F E60A                       	smpsFMAlterVol      $0A
000B1221 06                         	dc.b	$06
000B1222 E6F6                       	smpsFMAlterVol      $F6
000B1224 06                         	dc.b	$06
000B1225 E60A                       	smpsFMAlterVol      $0A
000B1227 06                         	dc.b	$06
000B1228 E6F6                       	smpsFMAlterVol      $F6
000B122A 06                         	dc.b	$06
000B122B E60A                       	smpsFMAlterVol      $0A
000B122D 06                         	dc.b	$06
000B122E E6F6                       	smpsFMAlterVol      $F6
000B1230 B1E7 30B0 18B3             	dc.b	nC4, smpsNoAttack, $30, nB3, $18, nD4
000B1236 F701 02FF 9A               	smpsLoop            $01, $02, Tribute_Loop03
000B123B B11E                       	dc.b	nC4, $1E
000B123D E60A                       	smpsFMAlterVol      $0A
000B123F 06                         	dc.b	$06
000B1240 E6F6                       	smpsFMAlterVol      $F6
000B1242 B12A                       	dc.b	nC4, $2A
000B1244 E60A                       	smpsFMAlterVol      $0A
000B1246 06                         	dc.b	$06
000B1247 E6F6                       	smpsFMAlterVol      $F6
000B1249 B12A                       	dc.b	nC4, $2A
000B124B E60A                       	smpsFMAlterVol      $0A
000B124D 06                         	dc.b	$06
000B124E E6F6                       	smpsFMAlterVol      $F6
000B1250 B12A                       	dc.b	nC4, $2A
000B1252 E60A                       	smpsFMAlterVol      $0A
000B1254 06                         	dc.b	$06
000B1255 E6F6                       	smpsFMAlterVol      $F6
000B1257 B10C E74E                  	dc.b	nC4, $0C, smpsNoAttack, $4E
000B125B E60A                       	smpsFMAlterVol      $0A
000B125D 06                         	dc.b	$06
000B125E E6F6                       	smpsFMAlterVol      $F6
000B1260 B00C E760                  	dc.b	nB3, $0C, smpsNoAttack, $60
000B1264 E9F4                       	smpsAlterPitch      $F4
000B1266 F8FE C8                    	smpsCall            Tribute_Call03
000B1269 E90C                       	smpsAlterPitch      $0C
000B126B F2                         	smpsStop
000B126C                            
000B126C                            Tribute_Call02:
000B126C B106 E712 B006             	dc.b	nC4, $06, smpsNoAttack, $12, nB3, $06
000B1272 E60A                       	smpsFMAlterVol      $0A
000B1274 0680                       	dc.b	$06, nRst
000B1276 E6F6                       	smpsFMAlterVol      $F6
000B1278 B3                         	dc.b	nD4
000B1279 E60A                       	smpsFMAlterVol      $0A
000B127B 0680                       	dc.b	$06, nRst
000B127D E6F6                       	smpsFMAlterVol      $F6
000B127F B1B1                       	dc.b	nC4, nC4
000B1281 E60A                       	smpsFMAlterVol      $0A
000B1283 06                         	dc.b	$06
000B1284 E6F6                       	smpsFMAlterVol      $F6
000B1286 AE                         	dc.b	nA3
000B1287 E60A                       	smpsFMAlterVol      $0A
000B1289 06                         	dc.b	$06
000B128A E6F6                       	smpsFMAlterVol      $F6
000B128C B0                         	dc.b	nB3
000B128D E3                         	smpsReturn
000B128E                            
000B128E                            ; FM4 Data
000B128E                            Tribute_FM4:
000B128E EF01                       	smpsSetvoice        $01
000B1290 AC12 06                    	dc.b	nG3, $12, $06
000B1293 E60A                       	smpsFMAlterVol      $0A
000B1295 0680                       	dc.b	$06, nRst
000B1297 E6F6                       	smpsFMAlterVol      $F6
000B1299 AF                         	dc.b	nBb3
000B129A E60A                       	smpsFMAlterVol      $0A
000B129C 0680                       	dc.b	$06, nRst
000B129E E6F6                       	smpsFMAlterVol      $F6
000B12A0 ACAC                       	dc.b	nG3, nG3
000B12A2 E60A                       	smpsFMAlterVol      $0A
000B12A4 06                         	dc.b	$06
000B12A5 E6F6                       	smpsFMAlterVol      $F6
000B12A7 AA                         	dc.b	nF3
000B12A8 E60A                       	smpsFMAlterVol      $0A
000B12AA 06                         	dc.b	$06
000B12AB E6F6                       	smpsFMAlterVol      $F6
000B12AD AC                         	dc.b	nG3
000B12AE EF02                       	smpsSetvoice        $02
000B12B0 E918                       	smpsAlterPitch      $18
000B12B2 E040                       	smpsPan             panRight, $00
000B12B4 F800 00                    	smpsCall            Tribute_Call01
000B12B7 EF01                       	smpsSetvoice        $01
000B12B9 E9E8                       	smpsAlterPitch      $E8
000B12BB E0C0                       	smpsPan             panCenter, $00
000B12BD F800 00                    	smpsCall            Tribute_Call01
000B12C0 AC06 E712 18AE 1818        	dc.b	nG3, $06, smpsNoAttack, $12, $18, nA3, $18, $18
000B12C8 E60A                       	smpsFMAlterVol      $0A
000B12CA 06                         	dc.b	$06
000B12CB E6F6                       	smpsFMAlterVol      $F6
000B12CD AC12 06                    	dc.b	nG3, $12, $06
000B12D0 E60A                       	smpsFMAlterVol      $0A
000B12D2 0680                       	dc.b	$06, nRst
000B12D4 E6F6                       	smpsFMAlterVol      $F6
000B12D6 AF                         	dc.b	nBb3
000B12D7 E60A                       	smpsFMAlterVol      $0A
000B12D9 0680                       	dc.b	$06, nRst
000B12DB E6F6                       	smpsFMAlterVol      $F6
000B12DD ACAC                       	dc.b	nG3, nG3
000B12DF E60A                       	smpsFMAlterVol      $0A
000B12E1 06                         	dc.b	$06
000B12E2 E6F6                       	smpsFMAlterVol      $F6
000B12E4 AA                         	dc.b	nF3
000B12E5 E60A                       	smpsFMAlterVol      $0A
000B12E7 06                         	dc.b	$06
000B12E8 E6F6                       	smpsFMAlterVol      $F6
000B12EA AC                         	dc.b	nG3
000B12EB EF02                       	smpsSetvoice        $02
000B12ED E918                       	smpsAlterPitch      $18
000B12EF E040                       	smpsPan             panRight, $00
000B12F1 F800 00                    	smpsCall            Tribute_Call01
000B12F4 EF01                       	smpsSetvoice        $01
000B12F6 E9E8                       	smpsAlterPitch      $E8
000B12F8 E0C0                       	smpsPan             panCenter, $00
000B12FA F800 00                    	smpsCall            Tribute_Call01
000B12FD AA06 E760 E748 8018        	dc.b	nF3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B1305                            
000B1305                            Tribute_Loop02:
000B1305 8018 AC12                  	dc.b	nRst, $18, nG3, $12
000B1309 E60A                       	smpsFMAlterVol      $0A
000B130B 06                         	dc.b	$06
000B130C E6F6                       	smpsFMAlterVol      $F6
000B130E 0C                         	dc.b	$0C
000B130F E60A                       	smpsFMAlterVol      $0A
000B1311 06                         	dc.b	$06
000B1312 E6F6                       	smpsFMAlterVol      $F6
000B1314 06                         	dc.b	$06
000B1315 E60A                       	smpsFMAlterVol      $0A
000B1317 06                         	dc.b	$06
000B1318 E6F6                       	smpsFMAlterVol      $F6
000B131A 06                         	dc.b	$06
000B131B E60A                       	smpsFMAlterVol      $0A
000B131D 06                         	dc.b	$06
000B131E E6F6                       	smpsFMAlterVol      $F6
000B1320 ACE7 60                    	dc.b	nG3, smpsNoAttack, $60
000B1323 F700 02FF DE               	smpsLoop            $00, $02, Tribute_Loop02
000B1328 8018 AC12                  	dc.b	nRst, $18, nG3, $12
000B132C E60A                       	smpsFMAlterVol      $0A
000B132E 06                         	dc.b	$06
000B132F E6F6                       	smpsFMAlterVol      $F6
000B1331 0C                         	dc.b	$0C
000B1332 E60A                       	smpsFMAlterVol      $0A
000B1334 06                         	dc.b	$06
000B1335 E6F6                       	smpsFMAlterVol      $F6
000B1337 06                         	dc.b	$06
000B1338 E60A                       	smpsFMAlterVol      $0A
000B133A 06                         	dc.b	$06
000B133B E6F6                       	smpsFMAlterVol      $F6
000B133D 06                         	dc.b	$06
000B133E E60A                       	smpsFMAlterVol      $0A
000B1340 06                         	dc.b	$06
000B1341 E6F6                       	smpsFMAlterVol      $F6
000B1343 AAE7 6080 18AC 12          	dc.b	nF3, smpsNoAttack, $60, nRst, $18, nG3, $12
000B134A E60A                       	smpsFMAlterVol      $0A
000B134C 06                         	dc.b	$06
000B134D E6F6                       	smpsFMAlterVol      $F6
000B134F 0C                         	dc.b	$0C
000B1350 E60A                       	smpsFMAlterVol      $0A
000B1352 06                         	dc.b	$06
000B1353 E6F6                       	smpsFMAlterVol      $F6
000B1355 06                         	dc.b	$06
000B1356 E60A                       	smpsFMAlterVol      $0A
000B1358 06                         	dc.b	$06
000B1359 E6F6                       	smpsFMAlterVol      $F6
000B135B 06                         	dc.b	$06
000B135C E60A                       	smpsFMAlterVol      $0A
000B135E 06                         	dc.b	$06
000B135F E6F6                       	smpsFMAlterVol      $F6
000B1361 AEE7 30AD 18B0             	dc.b	nA3, smpsNoAttack, $30, nAb3, $18, nB3
000B1367 F701 02FF 9A               	smpsLoop            $01, $02, Tribute_Loop02
000B136C AC1E                       	dc.b	nG3, $1E
000B136E E60A                       	smpsFMAlterVol      $0A
000B1370 06                         	dc.b	$06
000B1371 E6F6                       	smpsFMAlterVol      $F6
000B1373 AD2A                       	dc.b	nAb3, $2A
000B1375 E60A                       	smpsFMAlterVol      $0A
000B1377 06                         	dc.b	$06
000B1378 E6F6                       	smpsFMAlterVol      $F6
000B137A AC2A                       	dc.b	nG3, $2A
000B137C E60A                       	smpsFMAlterVol      $0A
000B137E 06                         	dc.b	$06
000B137F E6F6                       	smpsFMAlterVol      $F6
000B1381 AE2A                       	dc.b	nA3, $2A
000B1383 E60A                       	smpsFMAlterVol      $0A
000B1385 06                         	dc.b	$06
000B1386 E6F6                       	smpsFMAlterVol      $F6
000B1388 AE0C E74E                  	dc.b	nA3, $0C, smpsNoAttack, $4E
000B138C E60A                       	smpsFMAlterVol      $0A
000B138E 06                         	dc.b	$06
000B138F E6F6                       	smpsFMAlterVol      $F6
000B1391 AC0C E760 8060             	dc.b	nG3, $0C, smpsNoAttack, $60, nRst, $60
000B1397 F2                         	smpsStop
000B1398                            
000B1398                            Tribute_Call01:
000B1398 AC06 E712 AC06             	dc.b	nG3, $06, smpsNoAttack, $12, nG3, $06
000B139E E60A                       	smpsFMAlterVol      $0A
000B13A0 0680                       	dc.b	$06, nRst
000B13A2 E6F6                       	smpsFMAlterVol      $F6
000B13A4 AF                         	dc.b	nBb3
000B13A5 E60A                       	smpsFMAlterVol      $0A
000B13A7 0680                       	dc.b	$06, nRst
000B13A9 E6F6                       	smpsFMAlterVol      $F6
000B13AB ACAC                       	dc.b	nG3, nG3
000B13AD E60A                       	smpsFMAlterVol      $0A
000B13AF 06                         	dc.b	$06
000B13B0 E6F6                       	smpsFMAlterVol      $F6
000B13B2 AA                         	dc.b	nF3
000B13B3 E60A                       	smpsFMAlterVol      $0A
000B13B5 06                         	dc.b	$06
000B13B6 E6F6                       	smpsFMAlterVol      $F6
000B13B8 AC                         	dc.b	nG3
000B13B9 E3                         	smpsReturn
000B13BA                            
000B13BA                            ; FM5 Data
000B13BA                            Tribute_FM5:
000B13BA EF02                       	smpsSetvoice        $02
000B13BC                            
000B13BC                            Tribute_Jump00:
000B13BC 8060 8080 800C B406 B6B8+  	dc.b	nRst, $60, nRst, nRst, nRst, $0C, nEb4, $06, nF4, nG4, nD5, $12
000B13C8 800C B606 B8BA C412 8060+  	dc.b	nRst, $0C, nF4, $06, nG4, nA4, nG5, $12, nRst, $60, nRst, $60
000B13D4 805A D706 CECD C9C4 CECD+  	dc.b	nRst, $5A, nD7, $06, nF6, nE6, nC6, nG5, nF6, nE6, nC6, nG5
000B13E0 C2C1 BDB8 B6B5 B1AC AA48+  	dc.b	nF5, nE5, nC5, nG4, nF4, nE4, nC4, nG3, nF3, $48, nRst, $18
000B13EC                            
000B13EC                            Tribute_Loop01:
000B13EC 8060 800C B106 B3B8 BDBF+  	dc.b	nRst, $60, nRst, $0C, nC4, $06, nD4, nG4, nC5, nD5, nG5, nC5
000B13F8 BFC4 BFC4 C9C4 BF80 6080+  	dc.b	nD5, nG5, nD5, nG5, nC6, nG5, nD5, nRst, $60, nRst, $0C, nC5
000B1404 06C4 BDBF C4C6 BDB8 BDBF+  	dc.b	$06, nG5, nC5, nD5, nG5, nA5, nC5, nG4, nC5, nD5, nG5, nC5
000B1410 BFC4 8060 800C B806 BABD+  	dc.b	nD5, nG5, nRst, $60, nRst, $0C, nG4, $06, nA4, nC5, nA4, nC5
000B141C BFC4 C2BD BFB8 B3BD BF80+  	dc.b	nD5, nG5, nF5, nC5, nD5, nG4, nD4, nC5, nD5, nRst, $60, nG5
000B1428 06C2 BDBA C4C2 BDBA C4C2+  	dc.b	$06, nF5, nC5, nA4, nG5, nF5, nC5, nA4, nG5, nF5, nD5, nB4
000B1434 B9BA BCBF                  	dc.b	nAb4, nA4, nB4, nD5
000B1438 F700 02FF B0               	smpsLoop            $00, $02, Tribute_Loop01
000B143D 800C B806 BDBF C1C2 0C80+  	dc.b	nRst, $0C, nG4, $06, nC5, nD5, nE5, nF5, $0C, nRst, $30, nRst
000B1449 0CB8 06BD BFC1 C60C 8030+  	dc.b	$0C, nG4, $06, nC5, nD5, nE5, nA5, $0C, nRst, $30, nRst, $0C
000B1455 C6C4 C2C1 18BD 0CBF E70C+  	dc.b	nA5, nG5, nF5, nE5, $18, nC5, $0C, nD5, smpsNoAttack, $0C, nB4, nC5
000B1461 BFB3 06B8 BABF B8BA BFC4   	dc.b	nD5, nD4, $06, nG4, nA4, nD5, nG4, nA4, nD5, nG5
000B146B E918                       	smpsAlterPitch      $18
000B146D F8FB 98                    	smpsCall            Tribute_Call00
000B1470 E9E8                       	smpsAlterPitch      $E8
000B1472 F2                         	smpsStop
000B1473                            
000B1473                            ; FM6 Data
000B1473                            Tribute_FM6:
000B1473 EF02                       	smpsSetvoice        $02
000B1475 E040                       	smpsPan             panRight, $00
000B147C E104                       	smpsAlterNote       $04
000B147E 8006                       	dc.b	nRst, $06
000B1480 F6FF 3A                    	smpsJump            Tribute_Jump00
000B1483                            
000B1483                            ; PSG1 Data
000B1483                            Tribute_PSG1:
000B1483 F505                       	smpsPSGvoice        sTone_09
000B148A A760 E760 E760 E760 A760+  	dc.b	nD3, $60, smpsNoAttack, $60, smpsNoAttack, $60, smpsNoAttack, $60, nD3, $60, smpsNoAttack, $60
000B1496 E75A AC06 E760 E748 8018   	dc.b	smpsNoAttack, $5A, nG3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B14A5 ECFD                       	smpsPSGAlterVol     $FD
000B14A7                            
000B14A7                            Tribute_Jump01:
000B14A7 F505                       	smpsPSGvoice        sTone_09
000B14A9 F800 00                    	smpsCall            Tribute_Call07
000B14AC E706 AAAC AEB0 02B1 B0AC+  	dc.b	smpsNoAttack, $06, nF3, nG3, nA3, nB3, $02, nC4, nB3, nG3, $06, nA3
000B14B8 B0B1 AEB0 B1B3 B5B6 BA     	dc.b	nB3, nC4, nA3, nB3, nC4, nD4, nE4, nF4, nA4
000B14C1 F800 00                    	smpsCall            Tribute_Call07
000B14C4 E70C AEB0 B106 80B3 0CB5+  	dc.b	smpsNoAttack, $0C, nA3, nB3, nC4, $06, nRst, nD4, $0C, nE4, $06, nRst
000B14D0 B60C B306 80B8 1E80 06B9+  	dc.b	nF4, $0C, nD4, $06, nRst, nG4, $1E, nRst, $06, nAb4, $18, nG4
000B14DC 0680 B680 B50C E70C B3B1+  	dc.b	$06, nRst, nF4, nRst, nE4, $0C, smpsNoAttack, $0C, nD4, nC4, $06, nRst
000B14E8 B318 AE0C B006 80B1 0CE7+  	dc.b	nD4, $18, nA3, $0C, nB3, $06, nRst, nC4, $0C, smpsNoAttack, $3C, nB3
000B14F4 0CB1 0680 B30C E73C B80C+  	dc.b	$0C, nC4, $06, nRst, nD4, $0C, smpsNoAttack, $3C, nG4, $0C, nD5, nG5
000B1500 E918                       	smpsAlterPitch      $18
000B1502 F8FB 03                    	smpsCall            Tribute_Call00
000B1505 E9E8                       	smpsAlterPitch      $E8
000B1507 F2                         	smpsStop
000B1508                            
000B1508                            Tribute_Call07:
000B1508 B703 B833 8006 BC80 BDBF+  	dc.b	nFs4, $03, nG4, $33, nRst, $06, nB4, nRst, nC5, nD5, nRst, nFs4
000B1514 03B8 03E7 3680 06B5 80B3+  	dc.b	$03, nG4, $03, smpsNoAttack, $36, nRst, $06, nE4, nRst, nD4, nC4, nRst
000B1520 B702 B804 E736 8006 BC80+  	dc.b	nFs4, $02, nG4, $04, smpsNoAttack, $36, nRst, $06, nB4, nRst, nC5, nD5
000B152C 80B8 E712 8006 B512 8006+  	dc.b	nRst, nG4, smpsNoAttack, $12, nRst, $06, nE4, $12, nRst, $06, nD4, $12
000B1538 8006 B50C 8006 B1E7 3680+  	dc.b	nRst, $06, nE4, $0C, nRst, $06, nC4, smpsNoAttack, $36, nRst, $06, nC5
000B1544 80BC BD80 B1E7 3680 06BD+  	dc.b	nRst, nB4, nC5, nRst, nC4, smpsNoAttack, $36, nRst, $06, nC5, nRst, nB4
000B1550 BD80 B1E7 3CB5 0CB3 B1     	dc.b	nC5, nRst, nC4, smpsNoAttack, $3C, nE4, $0C, nD4, nC4
000B1559 E3                         	smpsReturn
000B155A                            
000B155A                            ; PSG2 Data
000B155A                            Tribute_PSG2:
000B155A F505                       	smpsPSGvoice        sTone_09
000B1561 9B60 E760 E760 E760 9B60+  	dc.b	nD2, $60, smpsNoAttack, $60, smpsNoAttack, $60, smpsNoAttack, $60, nD2, $60, smpsNoAttack, $60
000B156D E75A A006 E760 E748 8018   	dc.b	smpsNoAttack, $5A, nG2, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B1577 ECFF                       	smpsPSGAlterVol     $FF
000B157E 8006                       	dc.b	nRst, $06
000B1580 F6FF 25                    	smpsJump            Tribute_Jump01
000B1583                            
000B1583                            ; PSG3 Data
000B1583                            Tribute_PSG3:
000B1583 F3E7                       	smpsPSGform         $E7
000B1585 F502                       	smpsPSGvoice        sTone_02
000B1587 AF18 1818 0606 06          	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $18, $06, $06, $06
000B158E F501                       	smpsPSGvoice        sTone_05
000B1590 0680 18                    	dc.b	$06, nRst, $18
000B1593 F502                       	smpsPSGvoice        sTone_02
000B1595 AF18 1806                  	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $06
000B1599 F501                       	smpsPSGvoice        sTone_05
000B159B 06                         	dc.b	$06
000B159C F502                       	smpsPSGvoice        sTone_02
000B159E 06                         	dc.b	$06
000B159F F501                       	smpsPSGvoice        sTone_05
000B15A1 06                         	dc.b	$06
000B15A2 F502                       	smpsPSGvoice        sTone_02
000B15A4 8018 AF18 1806 0606        	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06, $06, $06
000B15AC F501                       	smpsPSGvoice        sTone_05
000B15AE 0680 12AF 06               	dc.b	$06, nRst, $12, (nMaxPSG2-$23)&$FF, $06
000B15B3 F502                       	smpsPSGvoice        sTone_02
000B15B5 06                         	dc.b	$06
000B15B6 F501                       	smpsPSGvoice        sTone_05
000B15B8 06                         	dc.b	$06
000B15B9 F502                       	smpsPSGvoice        sTone_02
000B15BB 06                         	dc.b	$06
000B15BC F501                       	smpsPSGvoice        sTone_05
000B15BE 06                         	dc.b	$06
000B15BF F502                       	smpsPSGvoice        sTone_02
000B15C1 800C AF06                  	dc.b	nRst, $0C, (nMaxPSG2-$23)&$FF, $06
000B15C5 F501                       	smpsPSGvoice        sTone_05
000B15C7 06                         	dc.b	$06
000B15C8 F502                       	smpsPSGvoice        sTone_02
000B15CA 06                         	dc.b	$06
000B15CB F501                       	smpsPSGvoice        sTone_05
000B15CD 06                         	dc.b	$06
000B15CE F502                       	smpsPSGvoice        sTone_02
000B15D0 0C                         	dc.b	$0C
000B15D1 F502                       	smpsPSGvoice        sTone_02
000B15D3 AF18 1818 0606 06          	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $18, $06, $06, $06
000B15DA F501                       	smpsPSGvoice        sTone_05
000B15DC 06                         	dc.b	$06
000B15DD F502                       	smpsPSGvoice        sTone_02
000B15DF 8018 AF18 1806             	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06
000B15E5 F501                       	smpsPSGvoice        sTone_05
000B15E7 06                         	dc.b	$06
000B15E8 F502                       	smpsPSGvoice        sTone_02
000B15EA 06                         	dc.b	$06
000B15EB F501                       	smpsPSGvoice        sTone_05
000B15ED 06                         	dc.b	$06
000B15EE F502                       	smpsPSGvoice        sTone_02
000B15F0 8018 AF18 1806 0606        	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06, $06, $06
000B15F8 F501                       	smpsPSGvoice        sTone_05
000B15FA 0680 6080                  	dc.b	$06, nRst, $60, nRst
000B15FE                            
000B15FE                            Tribute_Loop06:
000B15FE F800 00                    	smpsCall            Tribute_Call06
000B1601 800C                       	dc.b	nRst, $0C
000B1603 F502                       	smpsPSGvoice        sTone_02
000B1605 AF0C 0C0C 0C0C 8018        	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, $0C, $0C, nRst, $18
000B160D F800 00                    	smpsCall            Tribute_Call06
000B1610 800C                       	dc.b	nRst, $0C
000B1612 F502                       	smpsPSGvoice        sTone_02
000B1614 AF0C 0C0C 8030             	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, nRst, $30
000B161A F700 02FF E0               	smpsLoop            $00, $02, Tribute_Loop06
000B161F E718                       	dc.b	smpsNoAttack, $18
000B1621 F502                       	smpsPSGvoice        sTone_02
000B1623 AF80 AF80 AF80 AF80 AF80+  	dc.b	(nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst
000B162F AF                         	dc.b	(nMaxPSG2-$23)&$FF
000B1630 F2                         	smpsStop
000B1631                            
000B1631                            Tribute_Call06:
000B1631 F502                       	smpsPSGvoice        sTone_02
000B1633 0C0C 0C0C 0C06 0606        	dc.b	$0C, $0C, $0C, $0C, $0C, $06, $06, $06
000B163B F501                       	smpsPSGvoice        sTone_05
000B163D 06                         	dc.b	$06
000B163E F502                       	smpsPSGvoice        sTone_02
000B1640 06                         	dc.b	$06
000B1641 F501                       	smpsPSGvoice        sTone_05
000B1643 0680 0C                    	dc.b	$06, nRst, $0C
000B1646 F502                       	smpsPSGvoice        sTone_02
000B1648 AF0C 0C0C 0C0C 0C06 06     	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, $0C, $0C, $0C, $06, $06
000B1651 F502                       	smpsPSGvoice        sTone_02
000B1653 0C0C 0C0C 0C06 0606        	dc.b	$0C, $0C, $0C, $0C, $0C, $06, $06, $06
000B165B F501                       	smpsPSGvoice        sTone_05
000B165D 06                         	dc.b	$06
000B165E F502                       	smpsPSGvoice        sTone_02
000B1660 06                         	dc.b	$06
000B1661 F501                       	smpsPSGvoice        sTone_05
000B1663 06                         	dc.b	$06
000B1664 E3                         	smpsReturn
000B1665                            
000B1665                            ; DAC Data
000B1665                            Tribute_DAC:
000B1665 8148 8218 8148 8206 8906   	dc.b	dKick, $48, dSnare, $18, dKick, $48, dSnare, $06, dMidTimpani, $06
000B166F E690                       	smpsFMAlterVol      $90
000B1671 8A0C                       	dc.b	dLowTimpani, $0C
000B1673 E670                       	smpsFMAlterVol      $70
000B1675 8148 8218 8130 8206        	dc.b	dKick, $48, dSnare, $18, dKick, $30, dSnare, $06
000B167D E6F9                       	smpsFMAlterVol      $F9
000B167F 88                         	dc.b	dHiTimpani
000B1680 E607                       	smpsFMAlterVol      $07
000B1682 8982                       	dc.b	dMidTimpani, dSnare
000B1684 E690                       	smpsFMAlterVol      $90
000B1686 8A                         	dc.b	dLowTimpani
000B1687 E670                       	smpsFMAlterVol      $70
000B1689 8282 8281 4882 1881 4882+  	dc.b	dSnare, dSnare, dSnare, dKick, $48, dSnare, $18, dKick, $48, dSnare, $06, dMidTimpani
000B1695 06                         	dc.b	$06
000B1696 E690                       	smpsFMAlterVol      $90
000B1698 8A0C                       	dc.b	dLowTimpani, $0C
000B169A E670                       	smpsFMAlterVol      $70
000B169C 8148 8218 8160 8148 8218   	dc.b	dKick, $48, dSnare, $18, dKick, $60, dKick, $48, dSnare, $18
000B16A6                            
000B16A6                            Tribute_Loop00:
000B16A6 8118 8281 8281 8281 8281+  	dc.b	dKick, $18, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick
000B16B2 8281 8281 8206             	dc.b	dSnare, dKick, dSnare, dKick, dSnare, $06
000B16B8 E6F9                       	smpsFMAlterVol      $F9
000B16BA 88                         	dc.b	dHiTimpani
000B16BB E607                       	smpsFMAlterVol      $07
000B16BD 8982 8118 8281 8281 8281+  	dc.b	dMidTimpani, dSnare, dKick, $18, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick
000B16C9 8281 8281 8281 06          	dc.b	dSnare, dKick, dSnare, dKick, dSnare, dKick, $06
000B16D0 E607                       	smpsFMAlterVol      $07
000B16D2 88                         	dc.b	dHiTimpani
000B16D3 E6F9                       	smpsFMAlterVol      $F9
000B16D5 8982 8182 8282             	dc.b	dMidTimpani, dSnare, dKick, dSnare, dSnare, dSnare
000B16DB F700 02FF C7               	smpsLoop            $00, $02, Tribute_Loop00
000B16E0 813C 820C                  	dc.b	dKick, $3C, dSnare, $0C
000B16E4 E6F9                       	smpsFMAlterVol      $F9
000B16E6 8804                       	dc.b	dHiTimpani, $04
000B16E8 E607                       	smpsFMAlterVol      $07
000B16EA 89                         	dc.b	dMidTimpani
000B16EB E690                       	smpsFMAlterVol      $90
000B16ED 8A                         	dc.b	dLowTimpani
000B16EE E670                       	smpsFMAlterVol      $70
000B16F0 810C 813C 8206 8282 8281+  	dc.b	dKick, $0C, dKick, $3C, dSnare, $06, dSnare, dSnare, dSnare, dKick, $0C, dKick
000B16FC 6081 36                    	dc.b	$60, dKick, $36
000B16FF E6F9                       	smpsFMAlterVol      $F9
000B1701 8806                       	dc.b	dHiTimpani, $06
000B1703 E607                       	smpsFMAlterVol      $07
000B1705 89                         	dc.b	dMidTimpani
000B1706 E690                       	smpsFMAlterVol      $90
000B1708 8A                         	dc.b	dLowTimpani
000B1709 E670                       	smpsFMAlterVol      $70
000B170B 8282 8282 8182 8282 8282+  	dc.b	dSnare, dSnare, dSnare, dSnare, dKick, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dKick
000B1717 8182                       	dc.b	dKick, dSnare
000B1719 E6F9                       	smpsFMAlterVol      $F9
000B171B 88                         	dc.b	dHiTimpani
000B171C E607                       	smpsFMAlterVol      $07
000B171E 8982                       	dc.b	dMidTimpani, dSnare
000B1720 E690                       	smpsFMAlterVol      $90
000B1722 8A                         	dc.b	dLowTimpani
000B1723 E670                       	smpsFMAlterVol      $70
000B1725 8281 8182 8289 82          	dc.b	dSnare, dKick, dKick, dSnare, dSnare, dMidTimpani, dSnare
000B172C E690                       	smpsFMAlterVol      $90
000B172E 8A                         	dc.b	dLowTimpani
000B172F E670                       	smpsFMAlterVol      $70
000B1731 8281                       	dc.b	dSnare, dKick
000B1733 F2                         	smpsStop
000B1734                            
000B1734                            Tribute_Voices:
000B1734                            ;	Voice $00
000B1734                            ;	$3B
000B1734                            ;	$53, $31, $02, $03, 	$DF, $9F, $5F, $9F, 	$17, $08, $0E, $07
000B1734                            ;	$0F, $0E, $0D, $02, 	$5F, $7F, $3F, $5F, 	$0C, $16, $1F, $80
000B1734                            	smpsVcAlgorithm     $03
000B1734                            	smpsVcFeedback      $07
000B1734                            	smpsVcUnusedBits    $00
000B1734                            	smpsVcDetune        $00, $00, $03, $05
000B1734                            	smpsVcCoarseFreq    $03, $02, $01, $03
000B1734                            	smpsVcRateScale     $02, $01, $02, $03
000B1734                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1734                            	smpsVcAmpMod        $00, $00, $00, $00
000B1734                            	smpsVcDecayRate1    $07, $0E, $08, $17
000B1734                            	smpsVcDecayRate2    $02, $0D, $0E, $0F
000B1734                            	smpsVcDecayLevel    $05, $03, $07, $05
000B1734                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B174D                            
000B174D                            ;	Voice $01
000B174D                            ;	$3D
000B174D                            ;	$52, $02, $04, $01, 	$94, $19, $19, $19, 	$11, $0D, $0D, $0D
000B174D                            ;	$07, $04, $04, $04, 	$35, $1A, $1A, $1A, 	$0D, $80, $80, $80
000B174D                            	smpsVcAlgorithm     $05
000B174D                            	smpsVcFeedback      $07
000B174D                            	smpsVcUnusedBits    $00
000B174D                            	smpsVcDetune        $00, $00, $00, $05
000B174D                            	smpsVcCoarseFreq    $01, $04, $02, $02
000B174D                            	smpsVcRateScale     $00, $00, $00, $02
000B174D                            	smpsVcAttackRate    $19, $19, $19, $14
000B174D                            	smpsVcAmpMod        $00, $00, $00, $00
000B174D                            	smpsVcDecayRate1    $0D, $0D, $0D, $11
000B174D                            	smpsVcDecayRate2    $04, $04, $04, $07
000B174D                            	smpsVcDecayLevel    $01, $01, $01, $03
000B174D                            	smpsVcReleaseRate   $0A, $0A, $0A, $05
000B1766                            
000B1766                            ;	Voice $02
000B1766                            ;	$1F
000B1766                            ;	$26, $32, $07, $11, 	$9F, $9F, $9F, $9F, 	$06, $07, $09, $07
000B1766                            ;	$0D, $0F, $0D, $11, 	$9C, $9C, $9C, $9C, 	$80, $80, $80, $80
000B1766                            	smpsVcAlgorithm     $07
000B1766                            	smpsVcFeedback      $03
000B1766                            	smpsVcUnusedBits    $00
000B1766                            	smpsVcDetune        $01, $00, $03, $02
000B1766                            	smpsVcCoarseFreq    $01, $07, $02, $06
000B1766                            	smpsVcRateScale     $02, $02, $02, $02
000B1766                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1766                            	smpsVcAmpMod        $00, $00, $00, $00
000B1766                            	smpsVcDecayRate1    $07, $09, $07, $06
000B1766                            	smpsVcDecayRate2    $11, $0D, $0F, $0D
000B1766                            	smpsVcDecayLevel    $09, $09, $09, $09
000B1766                            	smpsVcReleaseRate   $0C, $0C, $0C, $0C
000B177F                            
000B177F                            
000B1780 00                         		even		
000B1780                            ; ---------------------------------------------------------------------------
000B1780                            ; Sound	effect pointers
000B1780                            ; ---------------------------------------------------------------------------
000B1780                            SoundIndex:
000B1780 0000 0000                  ptr_sndA0:	dc.l SoundA0
000B1784 0000 0000                  ptr_sndA1:	dc.l SoundA1
000B1788 0000 0000                  ptr_sndA2:	dc.l SoundA2
000B178C 0000 0000                  ptr_sndA3:	dc.l SoundA3
000B1790 0000 0000                  ptr_sndA4:	dc.l SoundA4
000B1794 0000 0000                  ptr_sndA5:	dc.l SoundA5
000B1798 0000 0000                  ptr_sndA6:	dc.l SoundA6
000B179C 0000 0000                  ptr_sndA7:	dc.l SoundA7
000B17A0 0000 0000                  ptr_sndA8:	dc.l SoundA8
000B17A4 0000 0000                  ptr_sndA9:	dc.l SoundA9
000B17A8 0000 0000                  ptr_sndAA:	dc.l SoundAA
000B17AC 0000 0000                  ptr_FireShield:	dc.l SoundAB
000B17B0 0000 0000                  ptr_sndAC:	dc.l SoundAC
000B17B4 0000 0000                  ptr_sndAD:	dc.l SoundAD
000B17B8 0000 0000                  ptr_sndAE:	dc.l SoundAE
000B17BC 0000 0000                  ptr_sndAF:	dc.l SoundAF
000B17C0 0000 0000                  ptr_sndB0:	dc.l SoundB0
000B17C4 0000 0000                  ptr_sndB1:	dc.l SoundB1
000B17C8 0000 0000                  ptr_sndB2:	dc.l SoundB2
000B17CC 0000 0000                  ptr_sndB3:	dc.l SoundB3
000B17D0 0000 0000                  ptr_sndB4:	dc.l SoundB4
000B17D4 0000 0000                  ptr_sndB5:	dc.l SoundB5
000B17D8 0000 0000                  ptr_sndB6:	dc.l SoundB6
000B17DC 0000 0000                  ptr_sndB7:	dc.l SoundB7
000B17E0 0000 0000                  ptr_sndB8:	dc.l SoundB8
000B17E4 0000 0000                  ptr_sndB9:	dc.l SoundB9
000B17E8 0000 0000                  ptr_sndBA:	dc.l SoundBA
000B17EC 0000 0000                  ptr_sndBB:	dc.l SoundBB
000B17F0 0000 0000                  ptr_sndBC:	dc.l SoundBC
000B17F4 0000 0000                  ptr_sndBD:	dc.l SoundBD
000B17F8 0000 0000                  ptr_sndBE:	dc.l SoundBE
000B17FC 0000 0000                  ptr_sndBF:	dc.l SoundBF
000B1800 0000 0000                  ptr_sndC0:	dc.l SoundC0
000B1804 0000 0000                  ptr_sndC1:	dc.l SoundC1
000B1808 0000 0000                  ptr_sndC2:	dc.l SoundC2
000B180C 0000 0000                  ptr_sndC3:	dc.l SoundC3
000B1810 0000 0000                  ptr_sndC4:	dc.l SoundC4
000B1814 0000 0000                  ptr_sndC5:	dc.l SoundC5
000B1818 0000 0000                  ptr_sndC6:	dc.l SoundC6
000B181C 0000 0000                  ptr_sndC7:	dc.l SoundC7
000B1820 0000 0000                  ptr_sndC8:	dc.l SoundC8
000B1824 0000 0000                  ptr_sndC9:	dc.l SoundC9
000B1828 0000 0000                  ptr_sndCA:	dc.l SoundCA
000B182C 0000 0000                  ptr_sndCB:	dc.l SoundCB
000B1830 0000 0000                  ptr_sndCC:	dc.l SoundCC
000B1834 0000 0000                  ptr_sndCD:	dc.l SoundCD
000B1838 0000 0000                  ptr_sndCE:	dc.l SoundCE
000B183C 0000 0000                  ptr_sndCF:	dc.l SoundCF
000B1840                            ptr_sndend
000B1840                            ; ---------------------------------------------------------------------------
000B1840                            ; Special sound effect pointers
000B1840                            ; ---------------------------------------------------------------------------
000B1840                            SpecSoundIndex:
000B1840 0000 0000                  ptr_sndD0:	dc.l SoundD0
000B1844 0000 0000                  ptr_sndD1:	dc.l SoundD1
000B1848 0000 0000                  ptr_sndD2:	dc.l SoundD2
000B184C 0000 0000                  ptr_sndD3:	dc.l SoundD3
000B1850 0000 0000                  ptr_sndD4:	dc.l SoundD4
000B1854 0000 0000                  ptr_sndD5:	dc.l SoundD5
000B1858 0000 0000                  ptr_sndD6:	dc.l SoundD6
000B185C                            ptr_specend
000B185C                            SoundA0:	include	"sound/sfx/Jump.asm"
000B185C                            SndA0_Jump_Header:
000B185C                            	smpsHeaderStartSong 1
000B185E 01                         	smpsHeaderTempoSFX  $01
000B185F 01                         	smpsHeaderChanSFX   $01
000B1860                            
000B1866                            
000B1866                            ; PSG2 Data
000B1866                            SndA0_Jump_PSG2:
000B1866 F500                       	smpsPSGvoice        $00
000B1868 9E05                       	dc.b	nF2, $05
000B186F A315                       	dc.b	nBb2, $15
000B1871 F2                         	smpsStop
000B1872                            
000B1872                            ; Song seems to not use any FM voices
000B1872                            SndA0_Jump_Voices:
000B1872                            SndA0_Jump_Voices:
000B1872                            		even
000B1872                            SoundA1:	incbin	"sound/sfx/SndA1 - Lamppost.bin"
000B189C                            		even
000B189C                            SoundA2:	include	"sound/sfx/DrowningSound.asm"
000B189C                            SndDF_Header:
000B189C                            	smpsHeaderStartSong 3
000B189E 01                         	smpsHeaderTempoSFX  $01
000B189F 01                         	smpsHeaderChanSFX   $01
000B18A0                            
000B18A6                            
000B18A6                            ; FM5 Data
000B18A6                            SndDF_FM5:
000B18A6 EF00                       	smpsSetvoice        $00
000B18A8                            
000B18A8                            SndDF_Loop00:
000B18A8 F800 00                    	smpsCall            SndDF_Call00
000B18AB E905                       	smpsAlterPitch $05
000B18AD E608                       	smpsFMAlterVol      $08
000B18AF F701 03FF F5               	smpsLoop            $01, $03, SndDF_Loop00
000B18B4 E9EC                       	smpsAlterPitch $EC
000B18B6 E6E0                       	smpsFMAlterVol      $E0
000B18B8 F2                         	smpsStop
000B18B9                            
000B18B9                            SndDF_Call00:
000B18B9 9902                       	dc.b	nC2, $02
000B18BB E901                       	smpsAlterPitch $01
000B18BD F700 0AFF F8               	smpsLoop            $00, $0A, SndDF_Call00
000B18C2 E9F6                       	smpsAlterPitch $F6
000B18C4 E3                         	smpsReturn
000B18C5                            
000B18C5                            SndDF_Voices:
000B18C5                            ;	Voice $00
000B18C5                            ;	$07
000B18C5                            ;	$04, $04, $05, $04, 	$1F, $1F, $15, $15, 	$00, $00, $00, $00
000B18C5                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$7F, $7F, $80, $80
000B18C5                            	smpsVcAlgorithm     $07
000B18C5                            	smpsVcFeedback      $00
000B18C5                            	smpsVcUnusedBits    $00
000B18C5                            	smpsVcDetune        $00, $00, $00, $00
000B18C5                            	smpsVcCoarseFreq    $04, $05, $04, $04
000B18C5                            	smpsVcRateScale     $00, $00, $00, $00
000B18C5                            	smpsVcAttackRate    $15, $15, $1F, $1F
000B18C5                            	smpsVcAmpMod        $00, $00, $00, $00
000B18C5                            	smpsVcDecayRate1    $00, $00, $00, $00
000B18C5                            	smpsVcDecayRate2    $00, $00, $00, $00
000B18C5                            	smpsVcDecayLevel    $01, $01, $01, $01
000B18C5                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B18DE                            		even
000B18DE                            SoundA3:	incbin	"sound/sfx/SndA3 - Death.bin"
000B1910                            		even
000B1910                            SoundA4:	incbin	"sound/sfx/SndA4 - Skid.bin"
000B1954 00                         		even
000B1954                            SoundA5:	include	"sound/sfx/LargeRingBox.asm"
000B1954                            SndD2_Header:
000B1954                            	smpsHeaderStartSong 3
000B1956 01                         	smpsHeaderTempoSFX  $01
000B1957 01                         	smpsHeaderChanSFX   $01
000B1958                            
000B195E                            
000B195E                            ; FM4 Data
000B195E                            SndD2_FM4:
000B195E EF00                       	smpsSetvoice        $00
000B1965 C645                       	dc.b	nA5, $45
000B1967 F2                         	smpsStop
000B1968                            
000B1968                            SndD2_Voices:
000B1968                            ;	Voice $00
000B1968                            ;	$04
000B1968                            ;	$27, $02, $07, $47, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000B1968                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$1F, $80, $23, $80
000B1968                            	smpsVcAlgorithm     $04
000B1968                            	smpsVcFeedback      $00
000B1968                            	smpsVcUnusedBits    $00
000B1968                            	smpsVcDetune        $04, $00, $00, $02
000B1968                            	smpsVcCoarseFreq    $07, $07, $02, $07
000B1968                            	smpsVcRateScale     $00, $00, $00, $00
000B1968                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1968                            	smpsVcAmpMod        $00, $00, $00, $00
000B1968                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000B1968                            	smpsVcDecayRate2    $0B, $00, $0B, $00
000B1968                            	smpsVcDecayLevel    $00, $01, $00, $01
000B1968                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1982 00                         		even
000B1982                            SoundA6:	incbin	"sound/sfx/SndA6 - Hit Spikes.bin"
000B19B2                            		even
000B19B2                            SoundA7:	incbin	"sound/sfx/SndA7 - Push Block.bin"
000B19E2                            		even
000B19E2                            SoundA8:	incbin	"sound/sfx/SndA8 - SS Goal.bin"
000B1A16                            		even
000B1A16                            SoundA9:	incbin	"sound/sfx/SndA9 - SS Item.bin"
000B1A28                            		even
000B1A28                            SoundAA:	include	"sound/sfx/Splash.asm"
000B1A28                            SndA2_Header:
000B1A28                            	smpsHeaderStartSong 3
000B1A2A 01                         	smpsHeaderTempoSFX  $01
000B1A2B 02                         	smpsHeaderChanSFX   $02
000B1A2C                            
000B1A38                            
000B1A38                            ; FM3 Data
000B1A38                            SndA2_FM3:
000B1A38 EF00                       	smpsSetvoice        $00
000B1A3F 8106                       	dc.b	nC0, $06
000B1A41                            
000B1A41                            SndA2_Loop00:
000B1A41 810E                       	dc.b	nC0, $0E
000B1A43 E60E                       	smpsAlterVol      $0E
000B1A45 F700 04FF F8               	smpsLoop            $00, $04, SndA2_Loop00
000B1A4A F2                         	smpsStop
000B1A4B                            
000B1A4B                            ; FM4 Data
000B1A4B                            SndA2_FM4:
000B1A4B EF01                       	smpsSetvoice        $01
000B1A4D A606 14                    	dc.b	nCs3, $06, $14
000B1A50 F2                         	smpsStop
000B1A51                            
000B1A51                            SndA2_Voices:
000B1A51                            ;	Voice $00
000B1A51                            ;	$F9
000B1A51                            ;	$21, $30, $10, $32, 	$1C, $1F, $1F, $10, 	$05, $18, $09, $02
000B1A51                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0C, $06, $04, $80
000B1A51                            	smpsVcAlgorithm     $01
000B1A51                            	smpsVcFeedback      $07
000B1A51                            	smpsVcUnusedBits    $03
000B1A51                            	smpsVcDetune        $03, $01, $03, $02
000B1A51                            	smpsVcCoarseFreq    $02, $00, $00, $01
000B1A51                            	smpsVcRateScale     $00, $00, $00, $00
000B1A51                            	smpsVcAttackRate    $10, $1F, $1F, $1C
000B1A51                            	smpsVcAmpMod        $00, $00, $00, $00
000B1A51                            	smpsVcDecayRate1    $02, $09, $18, $05
000B1A51                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B1A51                            	smpsVcDecayLevel    $02, $04, $02, $01
000B1A51                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1A6A                            
000B1A6A                            ;	Voice $01
000B1A6A                            ;	$00
000B1A6A                            ;	$00, $03, $02, $00, 	$D9, $DF, $1F, $1F, 	$12, $11, $14, $0F
000B1A6A                            ;	$0A, $00, $0A, $0D, 	$FF, $FF, $FF, $FF, 	$22, $07, $27, $80
000B1A6A                            	smpsVcAlgorithm     $00
000B1A6A                            	smpsVcFeedback      $00
000B1A6A                            	smpsVcUnusedBits    $00
000B1A6A                            	smpsVcDetune        $00, $00, $00, $00
000B1A6A                            	smpsVcCoarseFreq    $00, $02, $03, $00
000B1A6A                            	smpsVcRateScale     $00, $00, $03, $03
000B1A6A                            	smpsVcAttackRate    $1F, $1F, $1F, $19
000B1A6A                            	smpsVcAmpMod        $00, $00, $00, $00
000B1A6A                            	smpsVcDecayRate1    $0F, $14, $11, $12
000B1A6A                            	smpsVcDecayRate2    $0D, $0A, $00, $0A
000B1A6A                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B1A6A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1A84 00                         		even
000B1A84                            SoundAB:	include	"sound/sfx/FireShield.asm"
000B1A84                            Sound_3E_Header:
000B1A84                            	smpsHeaderStartSong 3
000B1A86 01                         	smpsHeaderTempoSFX  $01
000B1A87 01                         	smpsHeaderChanSFX   $01
000B1A88                            
000B1A8E                            
000B1A8E                            ; FM5 Data
000B1A8E                            Sound_3E_3F_40_41_FM5:
000B1A8E EF00                       	smpsSetvoice        $00
000B1A90 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
000B1A95 F2                         	smpsStop
000B1A96                            
000B1A96                            Sound_3E_Voices:
000B1A96                            ;	Voice $00
000B1A96                            ;	$0C
000B1A96                            ;	$01, $21, $31, $31, 	$1E, $0C, $0E, $1C, 	$0A, $00, $04, $00
000B1A96                            ;	$08, $12, $08, $0C, 	$FF, $0F, $BF, $0F, 	$03, $80, $0D, $80
000B1A96                            	smpsVcAlgorithm     $04
000B1A96                            	smpsVcFeedback      $01
000B1A96                            	smpsVcUnusedBits    $00
000B1A96                            	smpsVcDetune        $03, $03, $02, $00
000B1A96                            	smpsVcCoarseFreq    $01, $01, $01, $01
000B1A96                            	smpsVcRateScale     $00, $00, $00, $00
000B1A96                            	smpsVcAttackRate    $1C, $0E, $0C, $1E
000B1A96                            	smpsVcAmpMod        $00, $00, $00, $00
000B1A96                            	smpsVcDecayRate1    $00, $04, $00, $0A
000B1A96                            	smpsVcDecayRate2    $0C, $08, $12, $08
000B1A96                            	smpsVcDecayLevel    $00, $0B, $00, $0F
000B1A96                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1AAF                            
000B1AAF                            
000B1AB0 00                         		even
000B1AB0                            SoundAC:	incbin	"sound/sfx/SndAC - Hit Boss.bin"
000B1AE4                            		even
000B1AE4                            SoundAD:	incbin	"sound/sfx/SndAD - Get Bubble.bin"
000B1B1A                            		even
000B1B1A                            SoundAE:	include	"sound/sfx/Fireball.asm"
000B1B1A                            Sound_70_Header:
000B1B1A                            	smpsHeaderStartSong 3
000B1B1C 01                         	smpsHeaderTempoSFX  $01
000B1B1D 02                         	smpsHeaderChanSFX   $02
000B1B1E                            
000B1B2A                            
000B1B2A                            ; FM5 Data
000B1B2A                            Sound_70_FM5:
000B1B2A EF00                       	smpsSetvoice        $00
000B1B2C 8001                       	dc.b	nRst, $01
000B1B33 8306 8502                  	dc.b	nD0, $06, nE0, $02
000B1B37 F2                         	smpsStop
000B1B38                            
000B1B38                            ; PSG3 Data
000B1B38                            Sound_70_PSG3:
000B1B38 F500                       	smpsPSGvoice        sTone_0D
000B1B3A 800B                       	dc.b	nRst, $0B
000B1B3C F3E7                       	smpsPSGform         $E7
000B1B3E C501 E7                    	dc.b	(nMaxPSG1-$D)&$FF, $01, smpsNoAttack
000B1B41                            
000B1B41                            Sound_70_Loop00:
000B1B41 02                         	dc.b	$02
000B1B42 EC01                       	smpsPSGAlterVol     $01
000B1B44 E7                         	dc.b	smpsNoAttack
000B1B45 F700 10FF F8               	smpsLoop            $00, $10, Sound_70_Loop00
000B1B4A F2                         	smpsStop
000B1B4B                            
000B1B4B                            Sound_70_Voices:
000B1B4B                            ;	Voice $00
000B1B4B                            ;	$FA
000B1B4B                            ;	$02, $03, $00, $05, 	$12, $11, $0F, $13, 	$05, $18, $09, $02
000B1B4B                            ;	$06, $0F, $06, $02, 	$1F, $2F, $4F, $2F, 	$2F, $1A, $0E, $80
000B1B4B                            	smpsVcAlgorithm     $02
000B1B4B                            	smpsVcFeedback      $07
000B1B4B                            	smpsVcUnusedBits    $03
000B1B4B                            	smpsVcDetune        $00, $00, $00, $00
000B1B4B                            	smpsVcCoarseFreq    $05, $00, $03, $02
000B1B4B                            	smpsVcRateScale     $00, $00, $00, $00
000B1B4B                            	smpsVcAttackRate    $13, $0F, $11, $12
000B1B4B                            	smpsVcAmpMod        $00, $00, $00, $00
000B1B4B                            	smpsVcDecayRate1    $02, $09, $18, $05
000B1B4B                            	smpsVcDecayRate2    $02, $06, $0F, $06
000B1B4B                            	smpsVcDecayLevel    $02, $04, $02, $01
000B1B4B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1B64                            
000B1B64                            
000B1B64                            		even
000B1B64                            SoundAF:	incbin	"sound/sfx/SndAF - Shield.bin"
000B1B92                            		even
000B1B92                            SoundB0:	incbin	"sound/sfx/SndB0 - Saw.bin"
000B1BC4                            		even
000B1BC4                            SoundB1:	incbin	"sound/sfx/SndB1 - Electric.bin"
000B1BF0                            		even
000B1BF0                            SoundB2:	incbin	"sound/sfx/SndB2 - Drown Death.bin"
000B1C40                            		even
000B1C40                            SoundB3:	incbin	"sound/sfx/SndB3 - Flamethrower.bin"
000B1C8A                            		even
000B1C8A                            SoundB4:	incbin	"sound/sfx/SndB4 - Bumper.bin"
000B1CE6                            		even
000B1CE6                            SoundB5:	incbin	"sound/sfx/SndB5 - Ring.bin"
000B1D14                            		even
000B1D14                            SoundB6:	include	"sound/sfx/Spikes.asm"
000B1D14                            SpikesSFX_Header:
000B1D14                            	smpsHeaderStartSong 3
000B1D16 01                         	smpsHeaderTempoSFX  $01
000B1D17 02                         	smpsHeaderChanSFX   $02
000B1D18                            
000B1D24                            
000B1D24                            ; FM6 Data
000B1D24                            SndB7_FM3:
000B1D24 EF01                       	smpsSetvoice        $01
000B1D2B B105                       	dc.b	nC4, $05
000B1D2D F1                         	smpsModOn
000B1D2E E10A                       	smpsAlterNote       $0A
000B1D30 E601                       	smpsAlterVol        $01
000B1D32 F2                         	smpsStop
000B1D33                            
000B1D33                            ; FM5 Data
000B1D33                            SndB7_FM5:
000B1D33 8005                       	dc.b	nRst, $05			 
000B1D35 EF00                       	smpsSetvoice        $00
000B1D37 DB01 8001 DB11             	dc.b	nFs7, $01, nRst, $01, nFs7, $11
000B1D3D F2                         	smpsStop
000B1D3E                            
000B1D3E                            SndB7_Voices:
000B1D3E                            ;	Voice $00
000B1D3E                            ;	$34
000B1D3E                            ;	$09, $0F, $01, $D7, 	$1F, $1F, $1F, $1F, 	$0C, $11, $09, $0F
000B1D3E                            ;	$0A, $0E, $0D, $0E, 	$35, $1A, $55, $3A, 	$0C, $80, $0F, $80
000B1D3E                            	smpsVcAlgorithm     $04
000B1D3E                            	smpsVcFeedback      $06
000B1D3E                            	smpsVcUnusedBits    $00
000B1D3E                            	smpsVcDetune        $0D, $00, $00, $00
000B1D3E                            	smpsVcCoarseFreq    $07, $01, $0F, $09
000B1D3E                            	smpsVcRateScale     $00, $00, $00, $00
000B1D3E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1D3E                            	smpsVcAmpMod        $00, $00, $00, $00
000B1D3E                            	smpsVcDecayRate1    $0F, $09, $11, $0C
000B1D3E                            	smpsVcDecayRate2    $0E, $0D, $0E, $0A
000B1D3E                            	smpsVcDecayLevel    $03, $05, $01, $03
000B1D3E                            	smpsVcReleaseRate   $0A, $05, $0A, $05
000B1D57                            
000B1D57                            ;	Voice $01
000B1D57                            ;	$FA
000B1D57                            ;	$21, $3A, $19, $30, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
000B1D57                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
000B1D57                            	smpsVcAlgorithm     $02
000B1D57                            	smpsVcFeedback      $07
000B1D57                            	smpsVcUnusedBits    $03
000B1D57                            	smpsVcDetune        $03, $01, $03, $02
000B1D57                            	smpsVcCoarseFreq    $00, $09, $0A, $01
000B1D57                            	smpsVcRateScale     $00, $00, $00, $00
000B1D57                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1D57                            	smpsVcAmpMod        $00, $00, $00, $00
000B1D57                            	smpsVcDecayRate1    $02, $09, $18, $05
000B1D57                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B1D57                            	smpsVcDecayLevel    $02, $04, $02, $01
000B1D57                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1D70                            		even
000B1D70                            SoundB7:	incbin	"sound/sfx/SndB7 - Rumbling.bin"
000B1DAC                            		even
000B1DAC                            SoundB8:	include	"sound/sfx/ScoreTallying.asm"
000B1DAC                            SndBD_Header:
000B1DAC                            	smpsHeaderStartSong 3
000B1DAE 01                         	smpsHeaderTempoSFX  $01
000B1DAF 01                         	smpsHeaderChanSFX   $01
000B1DB0                            
000B1DB6                            
000B1DB6                            ; FM6 Data
000B1DB6                            SndBD_FM3:
000B1DB6 EF00                       	smpsSetvoice        $00
000B1DB8                            
000B1DB8                            SndBD_Loop00:
000B1DB8 C009                       	dc.b	nEb5, $09
000B1DBA F700 08FF FA               	smpsLoop            $00, $08, SndBD_Loop00
000B1DBF F2                         	smpsStop
000B1DC0                            
000B1DC0                            SndBD_Voices:
000B1DC0                            ;	Voice $00
000B1DC0                            ;	$02
000B1DC0                            ;	$02, $51, $20, $01, 	$1E, $1E, $1E, $1E, 	$10, $0A, $14, $13
000B1DC0                            ;	$01, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$24, $0E, $1F, $80
000B1DC0                            	smpsVcAlgorithm     $02
000B1DC0                            	smpsVcFeedback      $00
000B1DC0                            	smpsVcUnusedBits    $00
000B1DC0                            	smpsVcDetune        $00, $02, $05, $00
000B1DC0                            	smpsVcCoarseFreq    $01, $00, $01, $02
000B1DC0                            	smpsVcRateScale     $00, $00, $00, $00
000B1DC0                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
000B1DC0                            	smpsVcAmpMod        $00, $00, $00, $00
000B1DC0                            	smpsVcDecayRate1    $13, $14, $0A, $10
000B1DC0                            	smpsVcDecayRate2    $00, $00, $00, $01
000B1DC0                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B1DC0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1DDA 00                         		even
000B1DDA                            SoundB9:	include	"sound/sfx/BreakFloor.asm"
000B1DDA                            Sound_59_Header:
000B1DDA                            	smpsHeaderStartSong 3
000B1DDC 01                         	smpsHeaderTempoSFX  $01
000B1DDD 04                         	smpsHeaderChanSFX   $04
000B1DDE                            
000B1DF6                            
000B1DF6                            ; FM3 Data
000B1DF6                            Sound_59_FM3:
000B1DF6 E040                       	smpsPan             panRight, $00
000B1DF8 8002                       	dc.b	nRst, $02
000B1DFA F600 00                    	smpsJump            Sound_59_FM4
000B1DFD                            
000B1DFD                            ; FM5 Data
000B1DFD                            Sound_59_FM5:
000B1DFD E080                       	smpsPan             panLeft, $00
000B1DFF 8001                       	dc.b	nRst, $01
000B1E01                            
000B1E01                            ; FM4 Data
000B1E01                            Sound_59_FM4:
000B1E01 EF00                       	smpsSetvoice        $00
000B1E08 8110                       	dc.b	nC0, $10
000B1E0A F2                         	smpsStop
000B1E0B                            
000B1E0B                            ; PSG3 Data
000B1E0B                            Sound_59_PSG3:
000B1E10 F3E7                       	smpsPSGform         $E7
000B1E12                            
000B1E12                            Sound_59_Loop00:
000B1E12 B018 E7                    	dc.b	nB3, $18, smpsNoAttack
000B1E15 EC03                       	smpsPSGAlterVol     $03
000B1E17 F700 05FF F7               	smpsLoop            $00, $05, Sound_59_Loop00
000B1E1C F2                         	smpsStop
000B1E1D                            
000B1E1D                            Sound_59_Voices:
000B1E1D                            ;	Voice $00
000B1E1D                            ;	$F9
000B1E1D                            ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
000B1E1D                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
000B1E1D                            	smpsVcAlgorithm     $01
000B1E1D                            	smpsVcFeedback      $07
000B1E1D                            	smpsVcUnusedBits    $03
000B1E1D                            	smpsVcDetune        $03, $01, $03, $02
000B1E1D                            	smpsVcCoarseFreq    $02, $00, $00, $01
000B1E1D                            	smpsVcRateScale     $00, $00, $00, $00
000B1E1D                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1E1D                            	smpsVcAmpMod        $00, $00, $00, $00
000B1E1D                            	smpsVcDecayRate1    $02, $09, $18, $05
000B1E1D                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B1E1D                            	smpsVcDecayLevel    $02, $04, $02, $01
000B1E1D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1E36                            
000B1E36                            
000B1E36                            		even
000B1E36                            SoundBA:	incbin	"sound/sfx/SndBA - SS Glass.bin"
000B1E5E                            		even
000B1E5E                            SoundBB:	incbin	"sound/sfx/SndBB - Door.bin"
000B1E8A                            		even
000B1E8A                            SoundBC:	include	"sound/sfx/DashRelease.asm"
000B1E8A                            Sound_B6_Header:
000B1E8A                            	smpsHeaderStartSong 3
000B1E8C 01                         	smpsHeaderTempoSFX  $01
000B1E8D 02                         	smpsHeaderChanSFX   $02
000B1E8E                            
000B1E9A                            
000B1E9A                            ; FM5 Data
000B1E9A                            Sound_B6_FM5:
000B1E9A EF00                       	smpsSetvoice        $00
000B1EA1 CD0F                       	dc.b	nE6, $0F
000B1EA3 F2                         	smpsStop
000B1EA4                            
000B1EA4                            ; PSG3 Data
000B1EA4                            Sound_B6_PSG3:
000B1EA4 F507                       	smpsPSGvoice        sTone_1D
000B1EA6 8006                       	dc.b	nRst, $06
000B1EAD F3E7                       	smpsPSGform         $E7
000B1EAF CD4F                       	dc.b	nE6, $4F
000B1EB1 F2                         	smpsStop
000B1EB2                            
000B1EB2                            Sound_B6_Voices:
000B1EB2                            ;	Voice $00
000B1EB2                            ;	$3D
000B1EB2                            ;	$09, $03, $00, $00, 	$1F, $1F, $1F, $1F, 	$10, $0C, $0C, $0C
000B1EB2                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$09, $84, $92, $8E
000B1EB2                            	smpsVcAlgorithm     $05
000B1EB2                            	smpsVcFeedback      $07
000B1EB2                            	smpsVcUnusedBits    $00
000B1EB2                            	smpsVcDetune        $00, $00, $00, $00
000B1EB2                            	smpsVcCoarseFreq    $00, $00, $03, $09
000B1EB2                            	smpsVcRateScale     $00, $00, $00, $00
000B1EB2                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1EB2                            	smpsVcAmpMod        $00, $00, $00, $00
000B1EB2                            	smpsVcDecayRate1    $0C, $0C, $0C, $10
000B1EB2                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B1EB2                            	smpsVcDecayLevel    $02, $04, $02, $01
000B1EB2                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1ECB                            
000B1ECB                            
000B1ECC 00                         		even
000B1ECC                            SoundBD:	incbin	"sound/sfx/SndBD - ChainStomp.bin"
000B1F20                            		even
000B1F20                            SoundBE:	incbin	"sound/sfx/SndBE - Roll.bin"
000B1F5A                            		even
000B1F5A                            SoundBF:	incbin	"sound/sfx/SndBF - Get Continue.bin"
000B1FCC                            		even
000B1FCC                            SoundC0:	incbin	"sound/sfx/SndC0 - Basaran Flap.bin"
000B1FFA                            		even
000B1FFA                            SoundC1:	incbin	"sound/sfx/SndC1 - Break Item.bin"
000B2034                            		even
000B2034                            SoundC2:	include	"sound/sfx/DrowningWarning.asm"
000B2034                            SndC1_Header:
000B2034                            	smpsHeaderStartSong 3
000B2036 01                         	smpsHeaderTempoSFX  $01
000B2037 01                         	smpsHeaderChanSFX   $01
000B2038                            
000B203E                            
000B203E                            ; FM4 Data
000B203E                            SndC1_FM4:
000B203E EF00                       	smpsSetvoice        $00
000B2040 D506 40                    	dc.b	nC7, $06, $40
000B2043 F2                         	smpsStop
000B2044                            
000B2044                            SndC1_Voices:
000B2044                            ;	Voice $00
000B2044                            ;	$38
000B2044                            ;	$01, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$09, $09, $09, $0B
000B2044                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$5C, $22, $27, $80
000B2044                            	smpsVcAlgorithm     $00
000B2044                            	smpsVcFeedback      $07
000B2044                            	smpsVcUnusedBits    $00
000B2044                            	smpsVcDetune        $00, $00, $00, $00
000B2044                            	smpsVcCoarseFreq    $00, $00, $00, $01
000B2044                            	smpsVcRateScale     $00, $00, $00, $00
000B2044                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B2044                            	smpsVcAmpMod        $00, $00, $00, $00
000B2044                            	smpsVcDecayRate1    $0B, $09, $09, $09
000B2044                            	smpsVcDecayRate2    $00, $00, $00, $00
000B2044                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B2044                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B205E 00                         		even
000B205E                            SoundC3:	incbin	"sound/sfx/SndC3 - Giant Ring.bin"
000B20D8                            		even
000B20D8                            SoundC4:	incbin	"sound/sfx/SndC4 - Bomb.bin"
000B2100                            		even
000B2100                            SoundC5:	include	"sound/sfx/Cash Register.asm"
000B2100                            Sound_B0_Header:
000B2100                            	smpsHeaderStartSong 3
000B2102 01                         	smpsHeaderTempoSFX  $01
000B2103 03                         	smpsHeaderChanSFX   $03
000B2104                            
000B2116                            
000B2116                            ; FM5 Data
000B2116                            Sound_B0_FM5:
000B2116 EF00                       	smpsSetvoice        $00
000B2118 8A08 8002 8A08             	dc.b	nA0, $08, nRst, $02, nA0, $08
000B211E F2                         	smpsStop
000B211F                            
000B211F                            ; FM4 Data
000B211F                            Sound_B0_FM4:
000B211F EF01                       	smpsSetvoice        $01
000B2121 8012 C655                  	dc.b	nRst, $12, nA5, $55
000B2125 F2                         	smpsStop
000B2126                            
000B2126                            ; FM3 Data
000B2126                            Sound_B0_FM3:
000B2126 EF02                       	smpsSetvoice        $02
000B2128 8002 C205 0405 04          	dc.b	nRst, $02, nF5, $05, $04, $05, $04
000B212F F2                         	smpsStop
000B2130                            
000B2130                            Sound_B0_Voices:
000B2130                            ;	Voice $00
000B2130                            ;	$3B
000B2130                            ;	$03, $02, $03, $06, 	$18, $1A, $1A, $96, 	$17, $0E, $0A, $10
000B2130                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $28, $39, $80
000B2130                            	smpsVcAlgorithm     $03
000B2130                            	smpsVcFeedback      $07
000B2130                            	smpsVcUnusedBits    $00
000B2130                            	smpsVcDetune        $00, $00, $00, $00
000B2130                            	smpsVcCoarseFreq    $06, $03, $02, $03
000B2130                            	smpsVcRateScale     $02, $00, $00, $00
000B2130                            	smpsVcAttackRate    $16, $1A, $1A, $18
000B2130                            	smpsVcAmpMod        $00, $00, $00, $00
000B2130                            	smpsVcDecayRate1    $10, $0A, $0E, $17
000B2130                            	smpsVcDecayRate2    $00, $00, $00, $00
000B2130                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B2130                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2149                            
000B2149                            ;	Voice $01
000B2149                            ;	$04
000B2149                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000B2149                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $80, $23, $80
000B2149                            	smpsVcAlgorithm     $04
000B2149                            	smpsVcFeedback      $00
000B2149                            	smpsVcUnusedBits    $00
000B2149                            	smpsVcDetune        $04, $07, $07, $03
000B2149                            	smpsVcCoarseFreq    $09, $07, $02, $07
000B2149                            	smpsVcRateScale     $00, $00, $00, $00
000B2149                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B2149                            	smpsVcAmpMod        $00, $00, $00, $00
000B2149                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000B2149                            	smpsVcDecayRate2    $0B, $00, $0B, $00
000B2149                            	smpsVcDecayLevel    $00, $01, $00, $01
000B2149                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2162                            
000B2162                            ;	Voice $02
000B2162                            ;	$3C
000B2162                            ;	$0F, $00, $00, $00, 	$1F, $1A, $18, $1C, 	$17, $11, $1A, $0E
000B2162                            ;	$00, $0F, $14, $10, 	$1F, $9F, $9F, $2F, 	$07, $80, $26, $8C
000B2162                            	smpsVcAlgorithm     $04
000B2162                            	smpsVcFeedback      $07
000B2162                            	smpsVcUnusedBits    $00
000B2162                            	smpsVcDetune        $00, $00, $00, $00
000B2162                            	smpsVcCoarseFreq    $00, $00, $00, $0F
000B2162                            	smpsVcRateScale     $00, $00, $00, $00
000B2162                            	smpsVcAttackRate    $1C, $18, $1A, $1F
000B2162                            	smpsVcAmpMod        $00, $00, $00, $00
000B2162                            	smpsVcDecayRate1    $0E, $1A, $11, $17
000B2162                            	smpsVcDecayRate2    $10, $14, $0F, $00
000B2162                            	smpsVcDecayLevel    $02, $09, $09, $01
000B2162                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B217B                            
000B217B                            
000B217C 00                         		even
000B217C                            SoundC6:	incbin	"sound/sfx/SndC6 - Ring Loss.bin"
000B21BE                            		even
000B21BE                            SoundC7:	incbin	"sound/sfx/SndC7 - Chain Rising.bin"
000B21EC                            		even
000B21EC                            SoundC8:	incbin	"sound/sfx/SndC8 - Burning.bin"
000B21FE                            		even
000B21FE                            SoundC9:	incbin	"sound/sfx/SndC9 - Hidden Bonus.bin"
000B222C                            		even
000B222C                            SoundCA:	incbin	"sound/sfx/SndCA - Enter SS.bin"
000B225A                            		even
000B225A                            SoundCB:	incbin	"sound/sfx/SndCB - Wall Smash.bin"
000B22A6                            		even
000B22A6                            SoundCC:	include	"sound/sfx/Spring.asm"
000B22A6                            Spring_Header:
000B22A6                            	smpsHeaderStartSong 1
000B22A8 01                         	smpsHeaderTempoSFX  $01
000B22A9 01                         	smpsHeaderChanSFX   $01
000B22AA                            
000B22B0                            
000B22B0                            ; FM6 Data
000B22B0                            Spring_FM6:
000B22B0 EF00                       	smpsSetvoice        $00
000B22B2 8001                       	dc.b	nRst, $01
000B22B9 B006                       	dc.b	nB3, $06
000B22BB F4                         	smpsModOff
000B22BC EF01                       	smpsSetvoice        $01
000B22BE                            
000B22BE                            Spring_Loop00:
000B22BE BD02                       	dc.b	nC5, $02
000B22C0 E601                       	smpsAlterVol      $01
000B22C2 E7                         	dc.b	smpsNoAttack
000B22C3 F700 19FF F7               	smpsLoop            $00, $19, Spring_Loop00
000B22C8 F2                         	smpsStop
000B22C9                            
000B22C9                            Spring_Voices:
000B22C9                            ;	Voice $00
000B22C9                            ;	$20
000B22C9                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
000B22C9                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$16, $30, $13, $80
000B22C9                            	smpsVcAlgorithm     $00
000B22C9                            	smpsVcFeedback      $04
000B22C9                            	smpsVcUnusedBits    $00
000B22C9                            	smpsVcDetune        $03, $03, $03, $03
000B22C9                            	smpsVcCoarseFreq    $01, $00, $05, $06
000B22C9                            	smpsVcRateScale     $02, $02, $03, $03
000B22C9                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B22C9                            	smpsVcAmpMod        $00, $00, $00, $00
000B22C9                            	smpsVcDecayRate1    $06, $09, $06, $07
000B22C9                            	smpsVcDecayRate2    $08, $06, $06, $07
000B22C9                            	smpsVcDecayLevel    $0F, $01, $01, $02
000B22C9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B22E2                            
000B22E2                            ;	Voice $01
000B22E2                            ;	$20
000B22E2                            ;	$31, $33, $30, $31, 	$9F, $9F, $9F, $9F, 	$07, $06, $09, $06
000B22E2                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $23, $11, $80
000B22E2                            	smpsVcAlgorithm     $00
000B22E2                            	smpsVcFeedback      $04
000B22E2                            	smpsVcUnusedBits    $00
000B22E2                            	smpsVcDetune        $03, $03, $03, $03
000B22E2                            	smpsVcCoarseFreq    $01, $00, $03, $01
000B22E2                            	smpsVcRateScale     $02, $02, $02, $02
000B22E2                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B22E2                            	smpsVcAmpMod        $00, $00, $00, $00
000B22E2                            	smpsVcDecayRate1    $06, $09, $06, $07
000B22E2                            	smpsVcDecayRate2    $08, $06, $06, $07
000B22E2                            	smpsVcDecayLevel    $0F, $01, $01, $02
000B22E2                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B22FC 00                         		even
000B22FC                            SoundCD:	include	"sound/sfx/Beep.asm"
000B22FC                            Snd99_Header:
000B22FC                            	smpsHeaderStartSong 3
000B22FE 01                         	smpsHeaderTempoSFX  $01
000B22FF 01                         	smpsHeaderChanSFX   $01
000B2300                            
000B2306                            
000B2306                            ; FM4 Data
000B2306                            Snd99_FM4:
000B2306 EF00                       	smpsSetvoice        $00
000B2308 B502                       	dc.b	nE4, $02
000B230A F2                         	smpsStop
000B230B                            
000B230B                            Snd99_Voices:
000B230B                            ;	Voice $00
000B230B                            ;	$07
000B230B                            ;	$0A, $0A, $0A, $0A, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000B230B                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$88, $88, $88, $88
000B230B                            	smpsVcAlgorithm     $07
000B230B                            	smpsVcFeedback      $00
000B230B                            	smpsVcUnusedBits    $00
000B230B                            	smpsVcDetune        $00, $00, $00, $00
000B230B                            	smpsVcCoarseFreq    $0A, $0A, $0A, $0A
000B230B                            	smpsVcRateScale     $00, $00, $00, $00
000B230B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B230B                            	smpsVcAmpMod        $00, $00, $00, $00
000B230B                            	smpsVcDecayRate1    $00, $00, $00, $00
000B230B                            	smpsVcDecayRate2    $00, $00, $00, $00
000B230B                            	smpsVcDecayLevel    $00, $00, $00, $00
000B230B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2324                            		even
000B2324                            SoundCE:	incbin	"sound/sfx/SndCE - Ring Left Speaker.bin"
000B2352                            		even
000B2352                            SoundCF:	include	"sound/sfx/Signpost.asm"
000B2352                            SignpostCD_Header:
000B2352                            	smpsHeaderStartSong 3
000B2354 01                         	smpsHeaderTempoSFX  $01
000B2355 02                         	smpsHeaderChanSFX   $02
000B2356                            
000B2362                            
000B2362                            ; FM5 Data
000B2362                            Snd9D_FM5:
000B2362 8004                       	dc.b	nRst, $04
000B2364                            
000B2364                            ; FM4 Data
000B2364                            Snd9D_FM4:
000B2364 EF00                       	smpsSetvoice        $00
000B2366                            
000B2366                            Snd9D_Loop00:
000B2366 B405                       	dc.b	nEb4, $05
000B2368 E604                       	smpsFMAlterVol      $04
000B236A F700 08FF F8               	smpsLoop            $00, $08, Snd9D_Loop00
000B236F F2                         	smpsStop
000B2370                            
000B2370                            Snd9D_Voices:
000B2370                            ;	Voice $00
000B2370                            ;	$F4
000B2370                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
000B2370                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$0C, $85, $00, $80
000B2370                            	smpsVcAlgorithm     $04
000B2370                            	smpsVcFeedback      $06
000B2370                            	smpsVcUnusedBits    $03
000B2370                            	smpsVcDetune        $00, $00, $00, $00
000B2370                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
000B2370                            	smpsVcRateScale     $00, $00, $00, $00
000B2370                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B2370                            	smpsVcAmpMod        $00, $00, $00, $00
000B2370                            	smpsVcDecayRate1    $0B, $0B, $00, $00
000B2370                            	smpsVcDecayRate2    $08, $05, $00, $00
000B2370                            	smpsVcDecayLevel    $0F, $0F, $00, $00
000B2370                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B238A 00                         		even
000B238A                            SoundD0:	incbin	"sound/sfx/SndD0 - Waterfall.bin"
000B23C4                            		even
000B23C4                            SoundD1:	include	"sound/sfx/Lightning Shield.asm"
000B23C4                            Sound_41_Header:
000B23C4                            	smpsHeaderStartSong 3
000B23C6 01                         	smpsHeaderTempoSFX  $01
000B23C7 01                         	smpsHeaderChanSFX   $01
000B23C8                            
000B23CE                            	
000B23CE                            Sound41_FM5:
000B23CE EF00                       	smpsSetvoice        $00
000B23D0 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
000B23D5 F2                         	smpsStop
000B23D6                            
000B23D6                            Sound_41_Voices:
000B23D6                            ;	Voice $00
000B23D6                            ;	$36
000B23D6                            ;	$07, $10, $0E, $0C, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000B23D6                            ;	$00, $0D, $0D, $0E, 	$0F, $0F, $0F, $0F, 	$17, $80, $80, $80
000B23D6                            	smpsVcAlgorithm     $06
000B23D6                            	smpsVcFeedback      $06
000B23D6                            	smpsVcUnusedBits    $00
000B23D6                            	smpsVcDetune        $00, $00, $01, $00
000B23D6                            	smpsVcCoarseFreq    $0C, $0E, $00, $07
000B23D6                            	smpsVcRateScale     $00, $00, $00, $00
000B23D6                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B23D6                            	smpsVcAmpMod        $00, $00, $00, $00
000B23D6                            	smpsVcDecayRate1    $00, $00, $00, $00
000B23D6                            	smpsVcDecayRate2    $0E, $0D, $0D, $00
000B23D6                            	smpsVcDecayLevel    $00, $00, $00, $00
000B23D6                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B23EF                            
000B23EF                            
000B23F0 00                         		even
000B23F0                            SoundD2:	include	"sound/sfx/CD_Charge.asm"
000B23F0                            Snd9B_Header:
000B23F0                            	smpsHeaderStartSong 3
000B23F2 01                         	smpsHeaderTempoSFX  $01
000B23F3 01                         	smpsHeaderChanSFX   $01
000B23F4                            
000B23FA                            
000B23FA                            ; FM5 Data
000B23FA                            Snd9B_FM5:
000B23FA EF00                       	smpsSetvoice        $00
000B23FC 8001                       	dc.b	nRst, $01
000B2403 CA25                       	dc.b	nCs6, $25
000B2405 F4                         	smpsModOff
000B2406                            
000B2406                            Snd9B_Loop00:
000B2406 E7                         	dc.b	smpsNoAttack
000B2407 E601                       	smpsFMAlterVol      $01
000B2409 D102                       	dc.b	nAb6, $02
000B240B F700 2AFF F7               	smpsLoop            $00, $2A, Snd9B_Loop00
000B2410 F2                         	smpsStop
000B2411                            
000B2411                            Snd9B_Voices:
000B2411                            ;	Voice $00
000B2411                            ;	$3C
000B2411                            ;	$00, $44, $02, $02, 	$1F, $1F, $1F, $15, 	$00, $1F, $00, $00
000B2411                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$0D, $80, $28, $80
000B2411                            	smpsVcAlgorithm     $04
000B2411                            	smpsVcFeedback      $07
000B2411                            	smpsVcUnusedBits    $00
000B2411                            	smpsVcDetune        $00, $00, $04, $00
000B2411                            	smpsVcCoarseFreq    $02, $02, $04, $00
000B2411                            	smpsVcRateScale     $00, $00, $00, $00
000B2411                            	smpsVcAttackRate    $15, $1F, $1F, $1F
000B2411                            	smpsVcAmpMod        $00, $00, $00, $00
000B2411                            	smpsVcDecayRate1    $00, $00, $1F, $00
000B2411                            	smpsVcDecayRate2    $00, $00, $00, $00
000B2411                            	smpsVcDecayLevel    $00, $00, $00, $00
000B2411                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B242A                            
000B242A                            
000B242A                            		even		
000B242A                            SoundD3:	incbin	"sound/sfx/Peelout_Release.bin"
000B24C2                            		even
000B24C2                            SoundD4:	incbin	"sound/sfx/Peelout_Stop.bin"
000B24CE                            		even				
000B24CE                            SoundD5:	incbin	"sound/sfx/Spindash.bin"
000B250A                            		even		
000B250A                            SoundD6:	include	"sound/sfx/Transform.asm"
000B250A                            Sound_9F_Header:
000B250A                            	smpsHeaderStartSong 3
000B250C 01                         	smpsHeaderTempoSFX  $01
000B250D 02                         	smpsHeaderChanSFX   $02
000B250E                            
000B251A                            
000B251A                            ; FM4 Data
000B251A                            Sound_9F_FM4:
000B251A 8003                       	dc.b	nRst, $03
000B251C                            
000B251C                            ; FM5 Data
000B251C                            Sound_9F_FM5:
000B251C EF00                       	smpsSetvoice        $00
000B2523 AE13                       	dc.b	nA3, $13
000B2525 E614                       	smpsFMAlterVol      $14
000B2527 F700 05FF F1               	smpsLoop            $00, $05, Sound_9F_FM5
000B252C F2                         	smpsStop
000B252D                            
000B252D                            Sound_9F_Voices:
000B252D                            ;	Voice $00
000B252D                            ;	$7A
000B252D                            ;	$1F, $1F, $04, $1F, 	$10, $1F, $18, $10, 	$10, $16, $0C, $00
000B252D                            ;	$02, $02, $02, $02, 	$2F, $2F, $FF, $3F, 	$42, $16, $11, $80
000B252D                            	smpsVcAlgorithm     $02
000B252D                            	smpsVcFeedback      $07
000B252D                            	smpsVcUnusedBits    $01
000B252D                            	smpsVcDetune        $01, $00, $01, $01
000B252D                            	smpsVcCoarseFreq    $0F, $04, $0F, $0F
000B252D                            	smpsVcRateScale     $00, $00, $00, $00
000B252D                            	smpsVcAttackRate    $10, $18, $1F, $10
000B252D                            	smpsVcAmpMod        $00, $00, $00, $00
000B252D                            	smpsVcDecayRate1    $00, $0C, $16, $10
000B252D                            	smpsVcDecayRate2    $02, $02, $02, $02
000B252D                            	smpsVcDecayLevel    $03, $0F, $02, $02
000B252D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2546                            
000B2546                            
000B2546                            		even			
000B2546                            		; Don't let Sega sample cross $8000-byte boundary
000B2546                            		; (DAC driver doesn't switch banks automatically)
000B8000                            SegaPCM:	incbin	"sound/dac/sega.pcm"
000BE978                            SegaPCM_End
000BE978                            		even
000BE978                            
000BE978                            
000BE978                            
000BE978                            
000BE978                            			include "_inc\Sonic 2 Options.asm"
000BE978                            ; ---------------------------------------------------------------------------
000BE978                            ; Common menu screen subroutine for transferring text to RAM
000BE978                            
000BE978                            ; ARGUMENTS:
000BE978                            ; d0 = starting art tile
000BE978                            ; a1 = data source
000BE978                            ; a2 = destination
000BE978                            ;
000BE978                            ; ---------------------------------------------------------------------------
000BE978                            MenuScreen:
000BE978 103C 0000                  		move.b	#bgm_Fade,d0
000BE97C 4EB8 12A0                  		jsr	PlaySound_Special ; fade out music
000BE980 4EB8 235A                  		jsr	PaletteFadeOut
000BE984 46FC 2700                  		move	#$2700,sr
000BE988 3038 F60C                  		move.w	($FFFFF60C).w,d0
000BE98C 0200 00BF                  		andi.b	#-$41,d0
000BE990 33C0 00C0 0004             		move.w	d0,($00C00004).l
000BE996 4EB8 11D0                  		jsr	ClearScreen
000BE99A 4DF9 00C0 0004             		lea		($00C00004).l,a6
000BE9A0 3CBC 8004                  		move.w	#$8004,(a6)
000BE9A4 3CBC 8230                  		move.w	#$8230,(a6)
000BE9A8 3CBC 8407                  		move.w	#$8407,(a6)
000BE9AC 3CBC 8230                  		move.w	#$8230,(a6)
000BE9B0 3CBC 8700                  		move.w	#$8700,(a6)
000BE9B4 3CBC 8C81                  		move.w	#$8C81,(a6)
000BE9B8 3CBC 9001                  		move.w	#$9001,(a6)
000BE9BC 43F8 AC00                  		lea	($FFFFAC00).w,a1
000BE9C0 7000                       		moveq	#0,d0
000BE9C2 323C 00FF                  		move.w	#$FF,d1
000BE9C6                            
000BE9C6                            MenuScreen_ClrObjRam:
000BE9C6 22C0                       		move.l	d0,(a1)+
000BE9C8 51C9 FFFC                  		dbf		d1,MenuScreen_ClrObjRam
000BE9CC                            
000BE9CC                            ; ===========================================================================
000BE9CC                            
000BE9CC 31FC C800 C8FC             		ResetDMAQueue
000BE9D2                            
000BE9DC 41F9 0000 0000             		lea		(Nem_MenuFont).l,a0
000BE9E2 4EB8 134E                  		jsr	NemDec
000BE9F0 41F9 0000 0000             		lea		(Nem_MenuBox).l,a0
000BE9F6 4EB8 134E                  		jsr	NemDec
000BE9FA 43F9 00FF 0000             		lea	($FF0000).l,a1
000BEA00 41F9 0000 0000             		lea	(Eni_MenuBg).l,a0 ; load SONIC/MILES mappings
000BEA06 303C 6000                  		move.w	#$6000,d0
000BEA0A 4EB8 18D8                  		jsr	EniDec
000BEA0E                            
000BEA0E 43F9 00FF 0000 203C 6000+  		copyTilemap	$FF0000,$E000,$27,$1B
000BEA22                            
000BEA22 6100 0000                  		bsr.w	MenuScreen_Options	; if yes, branch
000BEA26                            
000BEA26                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEA26                            
000BEA26                            ; sub_8FBE:
000BEA26                            MenuScreenTextToRAM:
000BEA26 7200                       		moveq	#0,d1
000BEA28 1219                       		move.b	(a1)+,d1
000BEA2A                            
000BEA2A                            MenuScreenTextToRAM_Cont:
000BEA2A 1019                       		move.b	(a1)+,d0
000BEA2C 34C0                       		move.w	d0,(a2)+
000BEA2E 51C9 FFFA                  		dbf	d1,MenuScreenTextToRAM_Cont
000BEA32 4E75                       		rts
000BEA34                            ; End of function MenuScreenTextToRAM
000BEA34                            
000BEA34                            ; ===========================================================================
000BEA34                            ; loc_8FCC:
000BEA34                            MenuScreen_Options:
000BEA34 43F9 00FF 0000             		lea	(v_256x256).l,a1
000BEA3A 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000BEA40 303C 0070                  		move.w	#$70,d0
000BEA44 4EB8 18D8                  		jsr	EniDec
000BEA48 43F9 00FF 0160             		lea	(v_256x256+$160).l,a1
000BEA4E 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000BEA54 303C 2070                  		move.w	#$2070,d0
000BEA58 4EB8 18D8                  		jsr	EniDec
000BEA5C 4238 FF8C                  		clr.b	(Options_menu_box).w
000BEA60 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000BEA64 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000BEA68 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEA6C 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000BEA70 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEA74 4238 FF8C                  		clr.b	(Options_menu_box).w
000BEA78 4238 F711                  		clr.b	($FFFFF711).w		
000BEA7C 4278 F7F0                  		clr.w	($FFFFF7F0).w					 
000BEA80                            ;-------------------------------------------------------------------------------
000BEA80 4278 F5B8                  		clr.w	($FFFFF5B8).w
000BEA84 45F9 0000 0000             		lea	(Sonic_Miles_Spr).l,a2 ; sonic/miles background load
000BEA8A 6100 0000                  		bsr.w	Dynamic_Menu
000BEA8E                            ;-------------------------------------------------------------------------------
000BEA8E 7013                       		moveq	#palid_Options,d0
000BEA90 4EB8 2604                  		jsr		PalLoad1
000BEA94 103C 0091                  		move.b	#$91,d0
000BEA98 4EB8 12A0                  		jsr	PlaySound_Special ; play options music
000BEA9C 42B8 F700                  		clr.l	(v_screenposx).w
000BEAA0 42B8 F704                  		clr.l	(v_screenposy).w
000BEAA4 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000BEAAA 4EB8 3C98                  		jsr	WaitForVBla
000BEAAE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000BEAB2 0000 0040                  		ori.b	#$40,d0
000BEAB6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000BEABC 4EB8 22B4                  		jsr	PaletteFadeIn
000BEAC0                            ; loc_9060:
000BEAC0                            OptionScreen_Main:
000BEAC0 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000BEAC6 4EB8 3C98                  		jsr	WaitForVBla				
000BEACA 46FC 2700                  		move	#$2700,sr
000BEACE 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEAD2 6100 0000                  		bsr.w	OptionScreen_Controls			
000BEAD6 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000BEADA 46FC 2300                  		move	#$2300,sr
000BEADE 45F9 0000 0000             		lea	(Sonic_Miles_Spr).l,a2 ; sonic/miles background load	
000BEAE4 6100 0000                  		bsr.w	Dynamic_Menu		
000BEAE8 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000BEAEE                            
000BEAEE 6600                       		bne.s	OptionScreen_Select		; if yes, branch
000BEAF0 60CE                       		bra.s	OptionScreen_Main
000BEAF2                            ; ===========================================================================
000BEAF2                            ; loc_909A:
000BEAF2                            OptionScreen_Select:
000BEAF2 1038 FF8C                  		move.b	(Options_menu_box).w,d0
000BEAF6 6600                       		bne.s	OptionScreen_Select_Not1P
000BEAF8 7000                       		moveq	#0,d0
000BEAFA 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; => SegaScreen
000BEB00 4E75                       		rts
000BEB02                            ; ===========================================================================
000BEB02                            ; loc_90B6:
000BEB02                            OptionScreen_Select_Not1P:
000BEB02 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; => SegaScreen
000BEB08 4E75                       		rts
000BEB0A                            ; ===========================================================================
000BEB0A                            
000BEB0A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEB0A                            
000BEB0A                            ;sub_90E0:
000BEB0A                            OptionScreen_Controls:
000BEB0A 7400                       		moveq	#0,d2
000BEB0C 1438 FF8C                  		move.b	(Options_menu_box).w,d2			
000BEB10 1038 F605                  		move.b	(v_jpadpress1).w,d0		; Ctrl_1_Press
000BEB14 0800 0000                  		btst	#0,d0			; is up pressed?
000BEB18 6700                       		beq.s	Option_Controls_Down	; if not, branch
000BEB1A 5302                       		subq.b	#1,d2					; move up 1 selection
000BEB1C 6400                       		bcc.s	Option_Controls_Down
000BEB1E 143C 0001                  		move.b	#1,d2
000BEB22                            
000BEB22                            Option_Controls_Down:
000BEB22 0800 0001                  		btst	#1,d0			; is down pressed?
000BEB26 6700                       		beq.s	Option_Controls_Refresh	; if not, branch
000BEB28 5202                       		addq.b	#1,d2					; move down 1 selection
000BEB2A 0C02 0002                  		cmpi.b	#2,d2
000BEB2E 6500                       		blo.s	Option_Controls_Refresh
000BEB30 7400                       		moveq	#0,d2
000BEB32                            
000BEB32                            Option_Controls_Refresh:
000BEB32 11C2 FF8C                  		move.b	d2,(Options_menu_box).w
000BEB36 E54A                       		lsl.w	#2,d2
000BEB38 163B 2000                  		move.b	OptionScreen_Choices(pc,d2.w),d3 ; number of choices for the option
000BEB3C 227B 2000                  		movea.l	OptionScreen_Choices(pc,d2.w),a1 ; location where the choice is stored (in RAM)
000BEB40 3411                       		move.w	(a1),d2
000BEB42 0800 0002                  		btst	#2,d0				; is left pressed?
000BEB46 6700                       		beq.s	Option_Controls_Right		; if not, branch
000BEB48 5302                       		subq.b	#1,d2						; subtract 1 from sound test
000BEB4A 6400                       		bcc.s	Option_Controls_Right
000BEB4C 1403                       		move.b	d3,d2
000BEB4E                            
000BEB4E                            Option_Controls_Right:
000BEB4E 0800 0003                  		btst	#3,d0			; is right pressed?
000BEB52 6700                       		beq.s	Option_Controls_Button_A	; if not, branch
000BEB54 5202                       		addq.b	#1,d2						; add 1 to sound test
000BEB56 B403                       		cmp.b	d3,d2
000BEB58 6300                       		bls.s	Option_Controls_Button_A
000BEB5A 7400                       		moveq	#0,d2
000BEB5C                            
000BEB5C                            Option_Controls_Button_A:
000BEB5C 0800 0006                  		btst	#6,d0				; is button A pressed?
000BEB60 6700                       		beq.s	Option_Controls_Refresh2	; if not, branch
000BEB62 0602 0010                  		addi.b	#$10,d2						; add $10 to sound test
000BEB66 B403                       		cmp.b	d3,d2
000BEB68 6300                       		bls.s	Option_Controls_Refresh2
000BEB6A 7400                       		moveq	#0,d2
000BEB6C                            
000BEB6C                            Option_Controls_Refresh2:
000BEB6C 3282                       		move.w	d2,(a1)
000BEB6E                            
000BEB6E                            Option_Controls_NoMove:
000BEB6E 4E75                       		rts
000BEB70                            ; End of function OptionScreen_Controls
000BEB70                            
000BEB70                            ; ===========================================================================
000BEB70                            ; word_917A:
000BEB70                            OptionScreen_Choices:
000BEB70 0AFF FFBE                  		dc.l ($B-1)<<24|($FFFFBE&$FFFFFF)
000BEB74 01FF FF8A                  		dc.l (2-1)<<24|($FFFF8A&$FFFFFF)
000BEB78                            		even
000BEB78                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEB78                            
000BEB78                            
000BEB78                            OptionScreen_DrawSelected:
000BEB78 6100 0000                  		bsr.w	loc_9268
000BEB7C 7200                       		moveq	#0,d1
000BEB7E 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEB82 E749                       		lsl.w	#3,d1
000BEB84 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000BEB8A 47F3 1000                  		lea	(a3,d1.w),a3
000BEB8E 303C 6000                  		move.w	#$6000,d0
000BEB92 45F9 FFFF 0030             		lea	($FFFF0030).l,a2
000BEB98 225B                       		movea.l	(a3)+,a1
000BEB9A 6100 FE8A                  		bsr.w	MenuScreenTextToRAM
000BEB9E 45F9 FFFF 00B6             		lea	($FFFF00B6).l,a2
000BEBA4 7200                       		moveq	#0,d1
000BEBA6 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEBAA E549                       		lsl.w	#2,d1
000BEBAC 43FA FFC2                  		lea	OptionScreen_Choices(pc),a1
000BEBB0 2271 1000                  		movea.l	(a1,d1.w),a1
000BEBB4 3211                       		move.w	(a1),d1
000BEBB6 E549                       		lsl.w	#2,d1
000BEBB8                            
000BEBB8                            loc_9186:		
000BEBB8 2274 1000                  		movea.l	(a4,d1.w),a1
000BEBBC 6100 FE68                  		bsr.w	MenuScreenTextToRAM
000BEBC0                            		;cmpi.b	#2,(Options_menu_box).w
000BEBC0                            		;bne.s	loc2_9186
000BEBC0                            		;lea	($FFFF00C2).l,a2
000BEBC0                            		;bsr.w	loc_9296
000BEBC0                            
000BEBC0                            loc2_9186:		
000BEBC0 43F9 00FF 0000             		lea	(v_256x256).l,a1
000BEBC6 201B                       		move.l	(a3)+,d0
000BEBC8 7215                       		moveq	#$15,d1
000BEBCA 7407                       		moveq	#7,d2
000BEBCC 4EF8 1324                  		jmp	TilemapToVRAM
000BEBD0                            ; ===========================================================================
000BEBD0                            
000BEBD0                            OptionScreen_DrawUnselected:
000BEBD0 6100 0000                  		bsr.w	loc_9268
000BEBD4 7200                       		moveq	#0,d1
000BEBD6 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEBDA E749                       		lsl.w	#3,d1
000BEBDC 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000BEBE2 47F3 1000                  		lea	(a3,d1.w),a3
000BEBE6 7000                       		moveq	#0,d0
000BEBE8 45F9 FFFF 0190             		lea	($FFFF0190).l,a2
000BEBEE 225B                       		movea.l	(a3)+,a1
000BEBF0 6100 FE34                  		bsr.w	MenuScreenTextToRAM
000BEBF4 45F9 FFFF 0216             		lea	($FFFF0216).l,a2
000BEBFA 7200                       		moveq	#0,d1
000BEBFC                            		;cmpi.b	#2,(Options_menu_box).w
000BEBFC                            		;beq.s	loc2_91F8
000BEBFC 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEC00 E549                       		lsl.w	#2,d1
000BEC02 43FA FF6C                  		lea	OptionScreen_Choices(pc),a1
000BEC06 2271 1000                  		movea.l	(a1,d1.w),a1
000BEC0A 3211                       		move.w	(a1),d1
000BEC0C E549                       		lsl.w	#2,d1
000BEC0E                            
000BEC0E                            loc2_91F8		
000BEC0E 2274 1000                  		movea.l	(a4,d1.w),a1
000BEC12 6100 FE12                  		bsr.w	MenuScreenTextToRAM
000BEC16                            		;cmpi.b	#2,(Options_menu_box).w
000BEC16                            		;bne.s	loc3_91F8
000BEC16                            		;lea	($FFFF0222).l,a2
000BEC16                            		;bsr.w	loc_9296
000BEC16                            
000BEC16                            loc3_91F8		
000BEC16 43F9 FFFF 0160             		lea	($FFFF0160).l,a1
000BEC1C 201B                       		move.l	(a3)+,d0
000BEC1E 7215                       		moveq	#$15,d1
000BEC20 7407                       		moveq	#7,d2
000BEC22 4EF8 1324                  		jmp	TilemapToVRAM
000BEC26                            ; ===========================================================================
000BEC26                            
000BEC26                            loc_9268:
000BEC26 49F9 0000 0000             		lea	(off_92D2).l,a4
000BEC2C 4A38 FFF8                  		tst.b	(v_megadrive).w
000BEC30 6A00                       		bpl.s	loc2_9268
000BEC32 49F9 0000 0000             		lea	(off_92DE).l,a4
000BEC38                            
000BEC38                            loc2_9268:
000BEC38 4A38 FF8C                  		tst.b	(Options_menu_box).w
000BEC3C 6700                       		beq.s	loc4_9268
000BEC3E 49F9 0000 0000             		lea	(off_92EA).l,a4
000BEC44                            
000BEC44                            loc4_9268:
000BEC44 4E75                       		rts
000BEC46                            ; ===========================================================================
000BEC46                            
000BEC46                            loc_9296:
000BEC46 4E75                       		rts
000BEC48                            
000BEC48                            Dynamic_Menu:
000BEC48 5338 F5B9                                  subq.b  #$01, ($FFFFF5B9).w          ; remove 1 from frame count
000BEC4C 6A00                                       bpl.s   Exit_Dinamic_Menu            ; exit menu
000BEC4E 11FC 0007 F5B9                             move.b  #$07, ($FFFFF5B9).w          ; Set time for frame display
000BEC54 1038 F5B8                                  move.b  ($FFFFF5B8).w, D0            ; Current Frame D0
000BEC58 5238 F5B8                                  addq.b  #$01, ($FFFFF5B8).w          ; Advance frame $FFFFFFB8
000BEC5C 0240 001F                                  andi.w  #$001F, D0
000BEC60 103B 0000                                  move.b  Sonic_Miles_Frame_Select(PC, D0), D0  ; Id frame D0
000BEC64                                          ; muls.w  #$0140, D0                   ; as above
000BEC64 ED48                                       lsl.w   #$06, D0
000BEC66 4DF9 00C0 0000                             lea     ($00C00000), A6
000BEC6C 2D7C 4020 0000 0004                        move.l  #$40200000, $0004(A6)
000BEC74 43F9 0000 0000                             lea     (Sonic_Miles_Spr), A1
000BEC7A 43F1 0000                                  lea     $00(A1, D0), A1
000BEC7E 303C 0009                                  move.w  #$0009, D0                   ; load tiles
000BEC82                                            
000BEC82                            Menu_Loop_Load_Tiles:
000BEC82 2C99                                       move.l  (A1)+, (A6)
000BEC84 2C99                                       move.l  (A1)+, (A6)     
000BEC86 2C99                                       move.l  (A1)+, (A6)     
000BEC88 2C99                                       move.l  (A1)+, (A6)     
000BEC8A 2C99                                       move.l  (A1)+, (A6)     
000BEC8C 2C99                                       move.l  (A1)+, (A6)
000BEC8E 2C99                                       move.l  (A1)+, (A6)
000BEC90 2C99                                       move.l  (A1)+, (A6)
000BEC92 51C8 FFEE                                  dbra    D0, Menu_Loop_Load_Tiles
000BEC96                            Exit_Dinamic_Menu:                
000BEC96                                           
000BEC96 4E75                                       rts      
000BEC98                                                    
000BEC98                            Sonic_Miles_Frame_Select:     
000BEC98 0000 0000 0000 0000 0000+                  dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
000BECA6 050A                                       dc.b    $05, $0A
000BECA8 0F0F 0F0F 0F0F 0F0F 0F0F+                  dc.b    $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F
000BECB6 0A05                                       dc.b    $0A, $05   
000BECB8                            ; ===========================================================================
000BECB8                            ; off_92BA:
000BECB8                            OptScrBoxData:
000BECB8                            
000BECB8 0000 0000                  		dc.l TextOptScr_PlayerSelect
000BECBC 4192                       		dc.w $4192
000BECBE 0003                       		dc.w 3
000BECC0 0000 0000                  		dc.l TextOptScr_LivesSystem
000BECC4 4592                       		dc.w $4592
000BECC6 0003                       		dc.w 3
000BECC8                            
000BECC8                            off_92D2:
000BECC8 0000 0000                  		dc.l TextOptScr_Default
000BECCC 0000 0000                  		dc.l TextOptScr_Original
000BECD0 0000 0000                  		dc.l TextOptScr_Beta
000BECD4 0000 0000                  		dc.l TextOptScr_Midnight
000BECD8 0000 0000                  		dc.l TextOptScr_C2
000BECDC 0000 0000                  		dc.l TextOptScr_Clackers
000BECE0 0000 0000                  		dc.l TextOptScr_RHS
000BECE4 0000 0000                  		dc.l TextOptScr_Socket
000BECE8 0000 0000                  		dc.l TextOptScr_Cringe
000BECEC 0000 0000                  		dc.l TextOptScr_Dark	
000BECF0 0000 0000                  		dc.l TextOptScr_DeltaWooloo			
000BECF4                            off_92DE:
000BECF4 0000 0000                  		dc.l TextOptScr_Default
000BECF8 0000 0000                  		dc.l TextOptScr_Original
000BECFC 0000 0000                  		dc.l TextOptScr_Beta
000BED00 0000 0000                  		dc.l TextOptScr_Midnight
000BED04 0000 0000                  		dc.l TextOptScr_C2
000BED08 0000 0000                  		dc.l TextOptScr_Clackers
000BED0C 0000 0000                  		dc.l TextOptScr_RHS
000BED10 0000 0000                  		dc.l TextOptScr_Socket
000BED14 0000 0000                  		dc.l TextOptScr_Cringe
000BED18 0000 0000                  		dc.l TextOptScr_Dark
000BED1C 0000 0000                  		dc.l TextOptScr_DeltaWooloo		
000BED20                            off_92EA:
000BED20 0000 0000                  		dc.l TextOptScr_On
000BED24 0000 0000                  		dc.l TextOptScr_Off
000BED28                            ; ===========================================================================
000BED28                            
000BEE20                            ; ============================================================================
000BEE20                            		even
000BEE20                            Sonic_Miles_Spr:	incbin  "artunc/Sonic and Miles text.bin"
000BF320                            		even
000BF320                            Eni_MenuBg:    incbin    "tilemaps/menubgeni.bin"
000BF4D0                            		even
000BF4D0                            Nem_MenuFont:    incbin    "artnem/Standard font.bin"
000BFA3A                            		even
000BFA3A                            Nem_MenuBox:    incbin   "artnem/Menu Box.bin"
000BFABA                            		even
000BFABA                            Eni_MenuBox:    incbin    "tilemaps/menuboxeni.bin"
000BFAE6                            		even
000BFAE6                            		even
000BFAE6                            
000BFAE6                            SHC2022:    incbin "SHC22_Full_Sonic12.bin"
0013D36A                                        even
0013D36A                            
0013D36A                            Art_Dust:	incbin	artunc\spindust.bin
0013ECAA                            
0013ECAA                            ; ===============================================================
0013ECAA                            ; ==============================================================
0013ECAA                            ; --------------------------------------------------------------
0013ECAA                            ; Debugging modules
0013ECAA                            ; --------------------------------------------------------------
0013ECAA                            
0013ECAA                               include   "ErrorHandler.asm"
0013ECAA                            
0013ECAA                            ; ===============================================================
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            ; Error handling and debugging modules
0013ECAA                            ; 2016-2017, Vladikcomper
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            ; Error handler functions and calls
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            ; Error handler control flags
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            
0013ECAA                            ; Screen appearence flags
0013ECAA =00000001                  _eh_address_error	equ	$01		; use for address and bus errors only (tells error handler to display additional "Address" field)
0013ECAA =00000002                  _eh_show_sr_usp		equ	$02		; displays SR and USP registers content on error screen
0013ECAA =00000010                  _eh_disassemble		equ	$10		; disassembles the instruction where the error happened + vint and hint handlers
0013ECAA                            
0013ECAA                            ; Advanced execution flags
0013ECAA                            ; WARNING! For experts only, DO NOT USES them unless you know what you're doing
0013ECAA =00000020                  _eh_return		equ	$20
0013ECAA =00000040                  _eh_enter_console	equ	$40
0013ECAA =00000080                  _eh_align_offset	equ	$80
0013ECAA                            
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            ; Errors vector table
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            
0013ECAA                            ; Default screen configuration
0013ECAA =00000000                  _eh_default			equ	0 ;_eh_show_sr_usp
0013ECAA                            
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            
0013ECAA                            BusError:
0013ECAA 4EB9 0000 0000 4255 5320+  	__ErrorMessage "BUS ERROR", _eh_default|_eh_address_error|_eh_disassemble
0013ECBC                            
0013ECBC                            AddressError:
0013ECBC 4EB9 0000 0000 4144 4452+  	__ErrorMessage "ADDRESS ERROR", _eh_default|_eh_address_error|_eh_disassemble
0013ECD2                            
0013ECD2                            IllegalInstr:
0013ECD2 4EB9 0000 0000 494C 4C45+  	__ErrorMessage "ILLEGAL INSTRUCTION", _eh_default|_eh_disassemble
0013ECEE                            
0013ECEE                            ZeroDivide:
0013ECEE 4EB9 0000 0000 5A45 524F+  	__ErrorMessage "ZERO DIVIDE", _eh_default|_eh_disassemble
0013ED02                            
0013ED02                            ChkInstr:
0013ED02 4EB9 0000 0000 4348 4B20+  	__ErrorMessage "CHK INSTRUCTION", _eh_default|_eh_disassemble
0013ED1A                            
0013ED1A                            TrapvInstr:
0013ED1A 4EB9 0000 0000 5452 4150+  	__ErrorMessage "TRAPV INSTRUCTION", _eh_default|_eh_disassemble
0013ED34                            
0013ED34                            PrivilegeViol:
0013ED34 4EB9 0000 0000 5052 4956+  	__ErrorMessage "PRIVILEGE VIOLATION", _eh_default|_eh_disassemble
0013ED50                            
0013ED50                            Trace:
0013ED50 4EB9 0000 0000 5452 4143+  	__ErrorMessage "TRACE", _eh_default|_eh_disassemble
0013ED5E                            
0013ED5E                            Line1010Emu:
0013ED5E 4EB9 0000 0000 4C49 4E45+  	__ErrorMessage "LINE A EMULATOR", _eh_default|_eh_disassemble
0013ED76                            
0013ED76                            Line1111Emu:
0013ED76 4EB9 0000 0000 4C49 4E45+  	__ErrorMessage "LINE F EMULATOR", _eh_default|_eh_disassemble
0013ED8E                            
0013ED8E                            ErrorExcept:
0013ED8E 4EB9 0000 0000 4552 524F+  	__ErrorMessage "ERROR EXCEPTION", _eh_default|_eh_disassemble
0013EDA6                            
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            ; Import error handler global functions
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            
0013EDA6                            ErrorHandler.__global__error_initconsole equ ErrorHandler+$158
0013EDA6                            ErrorHandler.__global__errorhandler_setupvdp equ ErrorHandler+$25C
0013EDA6                            ErrorHandler.__global__console_loadpalette equ ErrorHandler+$AE2
0013EDA6                            ErrorHandler.__global__console_setposasxy_stack equ ErrorHandler+$B1E
0013EDA6                            ErrorHandler.__global__console_setposasxy equ ErrorHandler+$B24
0013EDA6                            ErrorHandler.__global__console_getposasxy equ ErrorHandler+$B50
0013EDA6                            ErrorHandler.__global__console_startnewline equ ErrorHandler+$B72
0013EDA6                            ErrorHandler.__global__console_setbasepattern equ ErrorHandler+$B9A
0013EDA6                            ErrorHandler.__global__console_setwidth equ ErrorHandler+$BAE
0013EDA6                            ErrorHandler.__global__console_writeline_withpattern equ ErrorHandler+$BC4
0013EDA6                            ErrorHandler.__global__console_writeline equ ErrorHandler+$BC6
0013EDA6                            ErrorHandler.__global__console_write equ ErrorHandler+$BCA
0013EDA6                            ErrorHandler.__global__console_writeline_formatted equ ErrorHandler+$C76
0013EDA6                            ErrorHandler.__global__console_write_formatted equ ErrorHandler+$C7A
0013EDA6                            ErrorHandler.__global__decode68k equ ErrorHandler+$CE6
0013EDA6                            
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            ; Error handler external functions (compiled only when used)
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            
0013EDA6                            
0013EDA6                            
0013EDA6                            
0013EDA6                            
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            ; Include error handler binary module
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            
0013EDA6                            ErrorHandler:
0013EDA6                            	incbin	ErrorHandler.bin
001407BA                            
001407BA                            ; ---------------------------------------------------------------
001407BA                            ; WARNING!
001407BA                            ;	DO NOT put any data from now on! DO NOT use ROM padding!
001407BA                            ;	Symbol data should be appended here after ROM is compiled
001407BA                            ;	by ConvSym utility, otherwise debugger modules won't be able
001407BA                            ;	to resolve symbol names.
001407BA                            ; ---------------------------------------------------------------
001407BA                            ; ---------------------------------------------------------------
001407BA                            
001407BA                            ; end of 'ROM'
001407BA                            		even
001407BA                            EndOfRom:
001407BA                            
001407BA                            
