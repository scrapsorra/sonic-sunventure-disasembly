00000000                            ;  =========================================================================
00000000                            ; |           Sonic the Hedgehog Disassembly for Sega Mega Drive            |
00000000                            ;  =========================================================================
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx, Stealth and Esrael L.G. Neto
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            	include	"_s1smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000001                  SourceDriver = 1 ; Please don't modify the value.
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000 =0000000C                  psgdelta	EQU 12
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =00000088                  smpsPitch10lo	EQU $88
00000000 =00000094                  smpsPitch09lo	EQU $94
00000000 =000000A0                  smpsPitch08lo	EQU $A0
00000000 =000000AC                  smpsPitch07lo	EQU $AC
00000000 =000000B8                  smpsPitch06lo	EQU $B8
00000000 =000000C4                  smpsPitch05lo	EQU $C4
00000000 =000000D0                  smpsPitch04lo	EQU $D0
00000000 =000000DC                  smpsPitch03lo	EQU $DC
00000000 =000000E8                  smpsPitch02lo	EQU $E8
00000000 =000000F4                  smpsPitch01lo	EQU $F4
00000000 =00000000                  smpsPitch00		EQU $00
00000000 =0000000C                  smpsPitch01hi	EQU $0C
00000000 =00000018                  smpsPitch02hi	EQU $18
00000000 =00000024                  smpsPitch03hi	EQU $24
00000000 =00000030                  smpsPitch04hi	EQU $30
00000000 =0000003C                  smpsPitch05hi	EQU $3C
00000000 =00000048                  smpsPitch06hi	EQU $48
00000000 =00000054                  smpsPitch07hi	EQU $54
00000000 =00000060                  smpsPitch08hi	EQU $60
00000000 =0000006C                  smpsPitch09hi	EQU $6C
00000000 =00000078                  smpsPitch10hi	EQU $78
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst		EQU	$80
00000000 =00000081                  nC0			EQU	$81
00000000 =00000082                  nCs0		EQU	$82
00000000 =00000083                  nD0			EQU	$83
00000000 =00000084                  nEb0		EQU	$84
00000000 =00000085                  nE0			EQU	$85
00000000 =00000086                  nF0			EQU	$86
00000000 =00000087                  nFs0		EQU	$87
00000000 =00000088                  nG0			EQU	$88
00000000 =00000089                  nAb0		EQU	$89
00000000 =0000008A                  nA0			EQU	$8A
00000000 =0000008B                  nBb0		EQU	$8B
00000000 =0000008C                  nB0			EQU	$8C
00000000 =0000008D                  nC1			EQU	$8D
00000000 =0000008E                  nCs1		EQU	$8E
00000000 =0000008F                  nD1			EQU	$8F
00000000 =00000090                  nEb1		EQU	$90
00000000 =00000091                  nE1			EQU	$91
00000000 =00000092                  nF1			EQU	$92
00000000 =00000093                  nFs1		EQU	$93
00000000 =00000094                  nG1			EQU	$94
00000000 =00000095                  nAb1		EQU	$95
00000000 =00000096                  nA1			EQU	$96
00000000 =00000097                  nBb1		EQU	$97
00000000 =00000098                  nB1			EQU	$98
00000000 =00000099                  nC2			EQU	$99
00000000 =0000009A                  nCs2		EQU	$9A
00000000 =0000009B                  nD2			EQU	$9B
00000000 =0000009C                  nEb2		EQU	$9C
00000000 =0000009D                  nE2			EQU	$9D
00000000 =0000009E                  nF2			EQU	$9E
00000000 =0000009F                  nFs2		EQU	$9F
00000000 =000000A0                  nG2			EQU	$A0
00000000 =000000A1                  nAb2		EQU	$A1
00000000 =000000A2                  nA2			EQU	$A2
00000000 =000000A3                  nBb2		EQU	$A3
00000000 =000000A4                  nB2			EQU	$A4
00000000 =000000A5                  nC3			EQU	$A5
00000000 =000000A6                  nCs3		EQU	$A6
00000000 =000000A7                  nD3			EQU	$A7
00000000 =000000A8                  nEb3		EQU	$A8
00000000 =000000A9                  nE3			EQU	$A9
00000000 =000000AA                  nF3			EQU	$AA
00000000 =000000AB                  nFs3		EQU	$AB
00000000 =000000AC                  nG3			EQU	$AC
00000000 =000000AD                  nAb3		EQU	$AD
00000000 =000000AE                  nA3			EQU	$AE
00000000 =000000AF                  nBb3		EQU	$AF
00000000 =000000B0                  nB3			EQU	$B0
00000000 =000000B1                  nC4			EQU	$B1
00000000 =000000B2                  nCs4		EQU	$B2
00000000 =000000B3                  nD4			EQU	$B3
00000000 =000000B4                  nEb4		EQU	$B4
00000000 =000000B5                  nE4			EQU	$B5
00000000 =000000B6                  nF4			EQU	$B6
00000000 =000000B7                  nFs4		EQU	$B7
00000000 =000000B8                  nG4			EQU	$B8
00000000 =000000B9                  nAb4		EQU	$B9
00000000 =000000BA                  nA4			EQU	$BA
00000000 =000000BB                  nBb4		EQU	$BB
00000000 =000000BC                  nB4			EQU	$BC
00000000 =000000BD                  nC5			EQU	$BD
00000000 =000000BE                  nCs5		EQU	$BE
00000000 =000000BF                  nD5			EQU	$BF
00000000 =000000C0                  nEb5		EQU	$C0
00000000 =000000C1                  nE5			EQU	$C1
00000000 =000000C2                  nF5			EQU	$C2
00000000 =000000C3                  nFs5		EQU	$C3
00000000 =000000C4                  nG5			EQU	$C4
00000000 =000000C5                  nAb5		EQU	$C5
00000000 =000000C6                  nA5			EQU	$C6
00000000 =000000C7                  nBb5		EQU	$C7
00000000 =000000C8                  nB5			EQU	$C8
00000000 =000000C9                  nC6			EQU	$C9
00000000 =000000CA                  nCs6		EQU	$CA
00000000 =000000CB                  nD6			EQU	$CB
00000000 =000000CC                  nEb6		EQU	$CC
00000000 =000000CD                  nE6			EQU	$CD
00000000 =000000CE                  nF6			EQU	$CE
00000000 =000000CF                  nFs6		EQU	$CF
00000000 =000000D0                  nG6			EQU	$D0
00000000 =000000D1                  nAb6		EQU	$D1
00000000 =000000D2                  nA6			EQU	$D2
00000000 =000000D3                  nBb6		EQU	$D3
00000000 =000000D4                  nB6			EQU	$D4
00000000 =000000D5                  nC7			EQU	$D5
00000000 =000000D6                  nCs7		EQU	$D6
00000000 =000000D7                  nD7			EQU	$D7
00000000 =000000D8                  nEb7		EQU	$D8
00000000 =000000D9                  nE7			EQU	$D9
00000000 =000000DA                  nF7			EQU	$DA
00000000 =000000DB                  nFs7		EQU	$DB
00000000 =000000DC                  nG7			EQU	$DC
00000000 =000000DD                  nAb7		EQU	$DD
00000000 =000000DE                  nA7			EQU	$DE
00000000 =000000DF                  nBb7		EQU	$DF
00000000                            ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
00000000                            ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
00000000                            ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
00000000                            ; and ensure that the ending note is indeed the maximum PSG frequency.
00000000 =000000C6                  nMaxPSG				EQU nA5
00000000 =000000D2                  nMaxPSG1			EQU nA5+psgdelta
00000000 =000000D2                  nMaxPSG2			EQU nA5+psgdelta
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG Flutter Equates
00000000 =00000000                  fTone_00	EQU	$00
00000000 =00000001                  fTone_01	EQU	$01
00000000 =00000002                  fTone_02	EQU	$02
00000000 =00000003                  fTone_03	EQU	$03
00000000 =00000004                  fTone_04	EQU	$04
00000000 =00000005                  fTone_05	EQU	$05
00000000 =00000006                  fTone_06	EQU	$06
00000000 =00000007                  fTone_07	EQU	$07
00000000 =00000008                  fTone_08	EQU	$08
00000000 =00000009                  fTone_09	EQU	$09
00000000 =00000007                  fTone_0A	EQU	$07
00000000 =00000005                  fTone_0B	EQU	$05
00000000 =00000000                  fTone_0C	EQU	$00
00000000                            ;fTone_0D	EQU	$00
00000000 =00000002                  sTone_01	EQU	$02
00000000 =00000002                  sTone_02	EQU	$02
00000000 =00000005                  sTone_03	EQU	$05
00000000 =00000003                  sTone_04	EQU	$03
00000000 =00000001                  sTone_05	EQU	$01
00000000 =00000003                  sTone_06	EQU	$03
00000000 =00000000                  sTone_07	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_08	EQU	$09
00000000 =00000005                  sTone_09	EQU	$05
00000000 =00000007                  sTone_0A	EQU	$07
00000000 =00000000                  sTone_0B	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_0C	EQU	$09
00000000 =00000000                  sTone_0D	EQU	$00	; This time it matches 100%
00000000 =00000002                  sTone_0E	EQU	$02	; Duplicate of 01
00000000 =00000002                  sTone_0F	EQU	$02	; Duplicate of 02
00000000 =00000000                  sTone_10	EQU	$00
00000000 =00000006                  sTone_11	EQU	$06
00000000 =00000001                  sTone_12	EQU	$01	; Duplicate of 05
00000000 =00000003                  sTone_13	EQU	$03	; Duplicate of 06
00000000 =00000000                  sTone_14	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_15	EQU	$09	; Duplicate of 08
00000000 =00000005                  sTone_16	EQU	$05	; Duplicate of 09
00000000 =00000007                  sTone_17	EQU	$07	; Duplicate of 0A
00000000 =00000000                  sTone_18	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_19	EQU	$09	; Duplicate of 0C
00000000 =00000002                  sTone_1A	EQU	$02
00000000 =00000009                  sTone_1B	EQU	$09	; Duplicate of 0C
00000000 =00000006                  sTone_1C	EQU	$06
00000000 =00000007                  sTone_1D	EQU	$07
00000000 =00000002                  sTone_1E	EQU	$02
00000000 =00000004                  sTone_1F	EQU	$04
00000000 =00000000                  sTone_20	EQU	$00	; This time it matches 100%
00000000 =00000009                  sTone_21	EQU	$09
00000000 =00000004                  sTone_22	EQU	$04
00000000 =00000007                  sTone_23	EQU	$07
00000000 =00000002                  sTone_24	EQU	$02
00000000 =00000009                  sTone_25	EQU	$09
00000000 =00000007                  sTone_26	EQU	$07
00000000 =00000003                  sTone_27	EQU	$03
00000000                            ;sTone_28	EQU	$09
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick equ $81
00000000 =00000082                  dSnare equ $82
00000000 =00000085                  dCrashCymbal equ $85
00000000 =00000088                  dHiTimpani equ $88
00000000 =00000089                  dMidTimpani equ $89
00000000 =0000008A                  dLowTimpani equ $8A
00000000 =0000008B                  dFloorTimpani equ $8B
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Conversion macros and functions
00000000                            
00000000                            ;conv0To256  macro val 
00000000                            	;if val<$01
00000000                            		;dc.b (256-val+$FF)&$FF
00000000                            	;else	
00000000                            		;dc.b (256-val)&$FF	
00000000                            	;endc
00000000                            	;endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000                            smpsHeaderStartSong macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderStartSongConvert macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b	div
00000000                            tempoDivider set div
00000000                            	dc.b    mod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if (narg=2)
00000000                            		dc.b	pitch
00000000                            		if (narg=3)
00000000                            			dc.b	vol
00000000                            		else
00000000                            			dc.b	$00
00000000                            		endif
00000000                            	else
00000000                            		dc.w	$00
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
00000000                            	endif
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	if (chanid&$80)<>0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            smpsDetune macro val
00000000                            	dc.b		$E1, val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000 =000000E6                  sVol	EQU $E6
00000000                            
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000 =000000E7                  smpsNA	EQU smpsNoAttack
00000000 =000000E7                  sNA	EQU smpsNoAttack
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            	dc.b	$E8,val
00000000                            	endm
00000000                            
00000000                            ; Add xx to channel pitch
00000000                            smpsAlterPitch macro val
00000000                            	dc.b	$E9,val
00000000                            	endm
00000000                            
00000000                            smpsChangeTransposition macro val
00000000                            	if SourceDriver>=3
00000000                            		dc.b	$FF,val
00000000                            	else
00000000                            		dc.b	$E9,val
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro val
00000000                            	dc.b	$EA
00000000                            	dc.b    val
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000 =000000EC                  spVol	EQU $EC
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            	dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; EFxx - Set Voice of FM channel to xx
00000000                            smpsFMvoice macro voice
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	wait+1,speed,change,(step*speed-1)&$FF
00000000                            	else
00000000                            		dc.b	wait,speed,change,step
00000000                            	endif
00000000                            	;dc.b	speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	dc.b	$E6,val1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; S1/S2 only coordination flag
00000000                            ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
00000000                            smpsWeirdD1LRR macro
00000000                            	dc.b	$F9
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set op1
00000000                            vcDT2 set op2
00000000                            vcDT3 set op3
00000000                            vcDT4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set op1
00000000                            vcCF2 set op2
00000000                            vcCF3 set op3
00000000                            vcCF4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set op1
00000000                            vcRS2 set op2
00000000                            vcRS3 set op3
00000000                            vcRS4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set op1
00000000                            vcAR2 set op2
00000000                            vcAR3 set op3
00000000                            vcAR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set op1
00000000                            vcAM2 set op2
00000000                            vcAM3 set op3
00000000                            vcAM4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set op1
00000000                            vcD1R2 set op2
00000000                            vcD1R3 set op3
00000000                            vcD1R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set op1
00000000                            vcD2R2 set op2
00000000                            vcD2R3 set op3
00000000                            vcD2R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set op1
00000000                            vcDL2 set op2
00000000                            vcDL3 set op3
00000000                            vcDL4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set op1
00000000                            vcRR2 set op2
00000000                            vcRR3 set op3
00000000                            vcRR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set op1
00000000                            vcTL2 set op2
00000000                            vcTL3 set op3
00000000                            vcTL4 set op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            	dc.b	(vcDT4<<4)+vcCF4, (vcDT3<<4)+vcCF3, (vcDT2<<4)+vcCF2, (vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4, (vcRS3<<6)+vcAR3, (vcRS2<<6)+vcAR2, (vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4, (vcAM3<<5)+vcD1R3, (vcAM2<<5)+vcD1R2, (vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4, vcD2R3, vcD2R2, vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4, (vcDL3<<4)+vcRR3, (vcDL2<<4)+vcRR2, (vcDL1<<4)+vcRR1
00000000                            	;dc.b	vcTL4|vcTLMask4, vcTL3|vcTLMask3, vcTL2|vcTLMask2, vcTL1|vcTLMask1
00000000                            	if vcAlgorithm=7
00000000                            		dc.b	op4|$80
00000000                            	else
00000000                            		dc.b	op4
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=4
00000000                            		dc.b    op3|$80
00000000                            	else
00000000                            		dc.b    op3
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=5
00000000                            		dc.b    op2|$80
00000000                            	else
00000000                            		dc.b    op2
00000000                            	endif
00000000                            		dc.b    op1|$80
00000000                            	endm
00000000                            
00000000                            
00000000                            	include	"Constants.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00006978                  Size_of_SegaPCM:		equ $6978
00000000                            
00000000                            ; VDP addressses
00000000 =00C00000                  vdp_data_port:		equ $C00000
00000000 =00C00004                  vdp_control_port:	equ $C00004
00000000 =00C00008                  vdp_counter:		equ $C00008
00000000                            
00000000 =00C00011                  psg_input:		equ $C00011
00000000                            
00000000                            ; Z80 addresses
00000000 =00A00000                  z80_ram:		equ $A00000	; start of Z80 RAM
00000000 =00A000EA                  z80_dac3_pitch:		equ $A000EA
00000000 =00A01FFD                  z80_dac_status:		equ $A01FFD
00000000 =00A01FFF                  z80_dac_sample:		equ $A01FFF
00000000 =00A02000                  z80_ram_end:		equ $A02000	; end of non-reserved Z80 RAM
00000000 =00A10001                  z80_version:		equ $A10001
00000000 =00A10002                  z80_port_1_data:	equ $A10002
00000000 =00A10008                  z80_port_1_control:	equ $A10008
00000000 =00A1000A                  z80_port_2_control:	equ $A1000A
00000000 =00A1000C                  z80_expansion_control:	equ $A1000C
00000000 =00A11100                  z80_bus_request:	equ $A11100
00000000 =00A11200                  z80_reset:		equ $A11200
00000000 =00A04000                  ym2612_a0:		equ $A04000
00000000 =00A04001                  ym2612_d0:		equ $A04001
00000000 =00A04002                  ym2612_a1:		equ $A04002
00000000 =00A04003                  ym2612_d1:		equ $A04003
00000000                            
00000000 =00A14000                  security_addr:		equ $A14000
00000000                            
00000000                            ; Sound driver constants
00000000 =00000000                  TrackPlaybackControl:	equ 0		; All tracks
00000000 =00000001                  TrackVoiceControl:	equ 1		; All tracks
00000000 =00000002                  TrackTempoDivider:	equ 2		; All tracks
00000000 =00000004                  TrackDataPointer:	equ 4		; All tracks (4 bytes)
00000000 =00000008                  TrackTranspose:		equ 8		; FM/PSG only (sometimes written to as a word, to include TrackVolume)
00000000 =00000009                  TrackVolume:		equ 9		; FM/PSG only
00000000 =0000000A                  TrackAMSFMSPan:		equ $A		; FM/DAC only
00000000 =0000000B                  TrackVoiceIndex:	equ $B		; FM/PSG only
00000000 =0000000C                  TrackVolEnvIndex:	equ $C		; PSG only
00000000 =0000000D                  TrackStackPointer:	equ $D		; All tracks
00000000 =0000000E                  TrackDurationTimeout:	equ $E		; All tracks
00000000 =0000000F                  TrackSavedDuration:	equ $F		; All tracks
00000000 =00000010                  TrackSavedDAC:		equ $10		; DAC only
00000000 =00000010                  TrackFreq:		equ $10		; FM/PSG only (2 bytes)
00000000 =00000012                  TrackNoteTimeout:	equ $12		; FM/PSG only
00000000 =00000013                  TrackNoteTimeoutMaster:equ $13		; FM/PSG only
00000000 =00000014                  TrackModulationPtr:	equ $14		; FM/PSG only (4 bytes)
00000000 =00000018                  TrackModulationWait:	equ $18		; FM/PSG only
00000000 =00000019                  TrackModulationSpeed:	equ $19		; FM/PSG only
00000000 =0000001A                  TrackModulationDelta:	equ $1A		; FM/PSG only
00000000 =0000001B                  TrackModulationSteps:	equ $1B		; FM/PSG only
00000000 =0000001C                  TrackModulationVal:	equ $1C		; FM/PSG only (2 bytes)
00000000 =0000001E                  TrackDetune:		equ $1E		; FM/PSG only
00000000 =0000001F                  TrackPSGNoise:		equ $1F		; PSG only
00000000 =0000001F                  TrackFeedbackAlgo:	equ $1F		; FM only
00000000 =00000020                  TrackVoicePtr:		equ $20		; FM SFX only (4 bytes)
00000000 =00000024                  TrackLoopCounters:	equ $24		; All tracks (multiple bytes)
00000000                            TrackGoSubStack:	equ TrackSz	; All tracks (multiple bytes. This constant won't get to be used because of an optimisation that just uses zTrackSz)
00000000                            
00000000 =00000030                  TrackSz:	equ $30
00000000                            
00000000                            ; VRAM data
00000000 =0000C000                  vram_fg:	equ $C000	; foreground namespace
00000000 =0000E000                  vram_bg:	equ $E000	; background namespace
00000000 =0000F000                  vram_sonic:	equ $F000	; Sonic graphics
00000000 =0000F800                  vram_sprites:	equ $F800	; sprite table
00000000 =0000FC00                  vram_hscroll:	equ $FC00	; horizontal scroll table
00000000                            
00000000                            ; Game modes
00000000                            id_Sega:	equ ptr_GM_Sega-GameModeArray	; $00
00000000                            id_Title:	equ ptr_GM_Title-GameModeArray	; $04
00000000                            id_Demo:	equ ptr_GM_Demo-GameModeArray	; $08
00000000                            id_Level:	equ ptr_GM_Level-GameModeArray	; $0C
00000000                            id_Special:	equ ptr_GM_Special-GameModeArray; $10
00000000                            id_Continue:	equ ptr_GM_Cont-GameModeArray	; $14
00000000                            id_Ending:	equ ptr_GM_Ending-GameModeArray	; $18
00000000                            id_Credits:	equ ptr_GM_Credits-GameModeArray; $1C
00000000                            
00000000                            ; Levels
00000000 =00000000                  id_GHZ:		equ 0
00000000 =00000001                  id_LZ:		equ 1
00000000 =00000002                  id_MZ:		equ 2
00000000 =00000003                  id_SLZ:		equ 3
00000000 =00000004                  id_SYZ:		equ 4
00000000 =00000005                  id_SBZ:		equ 5
00000000 =00000006                  id_EndZ:	equ 6
00000000 =00000007                  id_SS:		equ 7
00000000                            
00000000                            ; colors
00000000 =00000000                  cBlack:		equ $000		; color black
00000000 =00000EEE                  cWhite:		equ $EEE		; color white
00000000 =00000E00                  cBlue:		equ $E00		; color blue
00000000 =000000E0                  cGreen:		equ $0E0		; color green
00000000 =0000000E                  cRed:		equ $00E		; color red
00000000 =000000EE                  cYellow:	equ cGreen+cRed		; color yellow
00000000 =00000EE0                  cAqua:		equ cGreen+cBlue	; color aqua
00000000 =00000E0E                  cMagenta:	equ cBlue+cRed		; color magenta
00000000                            
00000000                            ; Joypad input
00000000 =00000080                  btnStart:	equ %10000000 ; Start button	($80)
00000000 =00000040                  btnA:		equ %01000000 ; A		($40)
00000000 =00000020                  btnC:		equ %00100000 ; C		($20)
00000000 =00000010                  btnB:		equ %00010000 ; B		($10)
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =00000002                  btnDn:		equ %00000010 ; Down		($02)
00000000 =00000001                  btnUp:		equ %00000001 ; Up		($01)
00000000 =0000000F                  btnDir:		equ %00001111 ; Any direction	($0F)
00000000 =00000070                  btnABC:		equ %01110000 ; A, B or C	($70)
00000000 =00000007                  bitStart:	equ 7
00000000 =00000006                  bitA:		equ 6
00000000 =00000005                  bitC:		equ 5
00000000 =00000004                  bitB:		equ 4
00000000 =00000003                  bitR:		equ 3
00000000 =00000002                  bitL:		equ 2
00000000 =00000001                  bitDn:		equ 1
00000000 =00000000                  bitUp:		equ 0
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000020                  obInertia:	equ $20	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  obActWid:	equ $14	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            
00000000                            ; Object variables used by Sonic
00000000 =00000030                  flashtime:	equ $30	; time between flashes after getting hit
00000000 =00000032                  invtime:	equ $32	; time left for invincibility
00000000 =00000034                  shoetime:	equ $34	; time left for speed shoes
00000000                            
00000000                            ; Shield variables
00000000 =00000033                  shield_LastLoadedDPLC:    equ $33
00000000 =0000003C                  shield_DPLC_Address:    equ $3C
00000000 =00000038                  shield_Art_Address:    equ $38
00000000 =00000036                  shield_vram_art:    equ $36
00000000                            
00000000                            ; Object variables (Sonic 2 disassembly nomenclature)
00000000 =00000001                  render_flags:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  art_tile:	equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  mappings:	equ 4	; mappings address (4 bytes)
00000000 =00000008                  x_pos:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000C                  y_pos:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  x_vel:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  y_vel:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000016                  y_radius:	equ $16	; height/2
00000000 =00000017                  x_radius:	equ $17	; width/2
00000000 =00000018                  priority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  width_pixels:	equ $14	; action width
00000000 =0000001A                  mapping_frame:	equ $1A	; current frame displayed
00000000 =0000001B                  anim_frame:	equ $1B	; current frame in animation script
00000000 =0000001C                  anim:		equ $1C	; current animation
00000000 =0000001D                  next_anim:	equ $1D	; next animation
00000000 =0000001E                  anim_frame_duration: equ $1E ; time to next frame
00000000 =00000020                  collision_flags: equ $20 ; collision response type
00000000 =00000021                  collision_property: equ $21 ; collision extra property
00000000 =00000022                  status:		equ $22	; orientation or mode
00000000 =00000023                  respawn_index:	equ $23	; respawn list index number
00000000 =00000024                  routine:	equ $24	; routine number
00000000 =00000025                  routine_secondary: equ $25 ; secondary routine number
00000000 =00000026                  angle:		equ $26	; angle
00000000 =00000028                  subtype:	equ $28	; object subtype
00000000                            
00000000                            ; Animation flags
00000000 =000000FF                  afEnd:		equ $FF	; return to beginning of animation
00000000 =000000FE                  afBack:		equ $FE	; go back (specified number) bytes
00000000 =000000FD                  afChange:	equ $FD	; run specified animation
00000000 =000000FC                  afRoutine:	equ $FC	; increment routine counter
00000000 =000000FB                  afReset:	equ $FB	; reset animation and 2nd object routine counter
00000000 =000000FA                  af2ndRoutine:	equ $FA	; increment 2nd routine counter
00000000                            
00000000                            
00000000 =0000000B                  mainspr_mapframe    = $B
00000000 =0000000E                  mainspr_width        = $E
00000000 =0000000F                  mainspr_childsprites     = $F    ; amount of child sprites
00000000 =00000014                  mainspr_height        = $14
00000000 =00000010                  sub2_x_pos        = $10    ;x_vel
00000000 =00000012                  sub2_y_pos        = $12    ;y_vel
00000000 =00000015                  sub2_mapframe        = $15
00000000 =00000016                  sub3_x_pos        = $16    ;y_radius
00000000 =00000018                  sub3_y_pos        = $18    ;priority
00000000 =0000001B                  sub3_mapframe        = $1B    ;anim_frame
00000000 =0000001C                  sub4_x_pos        = $1C    ;anim
00000000 =0000001E                  sub4_y_pos        = $1E    ;anim_frame_duration
00000000 =00000021                  sub4_mapframe        = $21    ;collision_property
00000000 =00000022                  sub5_x_pos        = $22    ;status
00000000 =00000024                  sub5_y_pos        = $24    ;routine
00000000 =00000027                  sub5_mapframe        = $27
00000000 =00000028                  sub6_x_pos        = $28    ;subtype
00000000 =0000002A                  sub6_y_pos        = $2A
00000000 =0000002D                  sub6_mapframe        = $2D
00000000 =0000002E                  sub7_x_pos        = $2E
00000000 =00000030                  sub7_y_pos        = $30
00000000 =00000033                  sub7_mapframe        = $33
00000000 =00000034                  sub8_x_pos        = $34
00000000 =00000036                  sub8_y_pos        = $36
00000000 =00000039                  sub8_mapframe        = $39
00000000 =0000003A                  sub9_x_pos        = $3A
00000000 =0000003C                  sub9_y_pos        = $3C
00000000 =0000003F                  sub9_mapframe        = $3F
00000000 =00000006                  next_subspr       = $6
00000000                            
00000000                            ; Background music
00000000 =00000081                  bgm__First:	equ $81
00000000                            bgm_GHZ:	equ ((ptr_mus81-MusicIndex)/4)+bgm__First
00000000                            bgm_LZ:		equ ((ptr_mus82-MusicIndex)/4)+bgm__First
00000000                            bgm_MZ:		equ ((ptr_mus83-MusicIndex)/4)+bgm__First
00000000                            bgm_SLZ:	equ ((ptr_mus84-MusicIndex)/4)+bgm__First
00000000                            bgm_SYZ:	equ ((ptr_mus85-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ:	equ ((ptr_mus86-MusicIndex)/4)+bgm__First
00000000                            bgm_Invincible:	equ ((ptr_mus87-MusicIndex)/4)+bgm__First
00000000                            bgm_ExtraLife:	equ ((ptr_mus88-MusicIndex)/4)+bgm__First
00000000                            bgm_SS:		equ ((ptr_mus89-MusicIndex)/4)+bgm__First
00000000                            bgm_Title:	equ ((ptr_mus8A-MusicIndex)/4)+bgm__First
00000000                            bgm_Ending:	equ ((ptr_mus8B-MusicIndex)/4)+bgm__First
00000000                            bgm_Boss:	equ ((ptr_mus8C-MusicIndex)/4)+bgm__First
00000000                            bgm_FZ:		equ ((ptr_mus8D-MusicIndex)/4)+bgm__First
00000000                            bgm_GotThrough:	equ ((ptr_mus8E-MusicIndex)/4)+bgm__First
00000000                            bgm_GameOver:	equ ((ptr_mus8F-MusicIndex)/4)+bgm__First
00000000                            bgm_Continue:	equ ((ptr_mus90-MusicIndex)/4)+bgm__First
00000000                            bgm_Credits:	equ ((ptr_mus91-MusicIndex)/4)+bgm__First
00000000                            bgm_Drowning:	equ ((ptr_mus92-MusicIndex)/4)+bgm__First
00000000                            bgm_Emerald:	equ ((ptr_mus93-MusicIndex)/4)+bgm__First
00000000                            bgm_Pinch:		equ ((ptr_mus94-MusicIndex)/4)+bgm__First
00000000                            bgm_Seaside:	equ ((ptr_mus95-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ3:		equ ((ptr_mus96-MusicIndex)/4)+bgm__First
00000000                            bgm_Granada:	equ ((ptr_mus97-MusicIndex)/4)+bgm__First
00000000                            bgm_Options:	equ ((ptr_mus98-MusicIndex)/4)+bgm__First
00000000                            bgm_ToxicLandfill:	equ ((ptr_mus99-MusicIndex)/4)+bgm__First
00000000                            bgm_RRZ2:	equ ((ptr_mus9A-MusicIndex)/4)+bgm__First
00000000                            bgm_TTZBF:	equ ((ptr_mus9B-MusicIndex)/4)+bgm__First
00000000                            bgm_Tribute:	equ ((ptr_mus9C-MusicIndex)/4)+bgm__First
00000000                            bgm__Last:	equ ((ptr_musend-MusicIndex-4)/4)+bgm__First
00000000                            
00000000                            ; Sound effects
00000000 =000000A0                  sfx__First:	equ $A0
00000000                            sfx_Jump:	equ ((ptr_sndA0-SoundIndex)/4)+sfx__First
00000000                            sfx_Lamppost:	equ ((ptr_sndA1-SoundIndex)/4)+sfx__First
00000000                            sfx_A2:		equ ((ptr_sndA2-SoundIndex)/4)+sfx__First
00000000                            sfx_Death:	equ ((ptr_sndA3-SoundIndex)/4)+sfx__First
00000000                            sfx_Skid:	equ ((ptr_sndA4-SoundIndex)/4)+sfx__First
00000000                            sfx_LRingBox:	equ ((ptr_sndA5-SoundIndex)/4)+sfx__First
00000000                            sfx_HitSpikes:	equ ((ptr_sndA6-SoundIndex)/4)+sfx__First
00000000                            sfx_Push:	equ ((ptr_sndA7-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGoal:	equ ((ptr_sndA8-SoundIndex)/4)+sfx__First
00000000                            sfx_SSItem:	equ ((ptr_sndA9-SoundIndex)/4)+sfx__First
00000000                            sfx_Splash:	equ ((ptr_sndAA-SoundIndex)/4)+sfx__First
00000000                            sfx_FireShield:	equ ((ptr_FireShield-SoundIndex)/4)+sfx__First
00000000                            sfx_HitBoss:	equ ((ptr_sndAC-SoundIndex)/4)+sfx__First
00000000                            sfx_Bubble:	equ ((ptr_sndAD-SoundIndex)/4)+sfx__First
00000000                            sfx_Fireball:	equ ((ptr_sndAE-SoundIndex)/4)+sfx__First
00000000                            sfx_Shield:	equ ((ptr_sndAF-SoundIndex)/4)+sfx__First
00000000                            sfx_Saw:	equ ((ptr_sndB0-SoundIndex)/4)+sfx__First
00000000                            sfx_Electric:	equ ((ptr_sndB1-SoundIndex)/4)+sfx__First
00000000                            sfx_Drown:	equ ((ptr_sndB2-SoundIndex)/4)+sfx__First
00000000                            sfx_Flamethrower:equ ((ptr_sndB3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bumper:	equ ((ptr_sndB4-SoundIndex)/4)+sfx__First
00000000                            sfx_Ring:	equ ((ptr_sndB5-SoundIndex)/4)+sfx__First
00000000                            sfx_SpikesMove:	equ ((ptr_sndB6-SoundIndex)/4)+sfx__First
00000000                            sfx_Rumbling:	equ ((ptr_sndB7-SoundIndex)/4)+sfx__First
00000000                            sfx_B8:		equ ((ptr_sndB8-SoundIndex)/4)+sfx__First
00000000                            sfx_Collapse:	equ ((ptr_sndB9-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGlass:	equ ((ptr_sndBA-SoundIndex)/4)+sfx__First
00000000                            sfx_Door:	equ ((ptr_sndBB-SoundIndex)/4)+sfx__First
00000000                            sfx_Teleport:	equ ((ptr_sndBC-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainStomp:	equ ((ptr_sndBD-SoundIndex)/4)+sfx__First
00000000                            sfx_Roll:	equ ((ptr_sndBE-SoundIndex)/4)+sfx__First
00000000                            sfx_Continue:	equ ((ptr_sndBF-SoundIndex)/4)+sfx__First
00000000                            sfx_Basaran:	equ ((ptr_sndC0-SoundIndex)/4)+sfx__First
00000000                            sfx_BreakItem:	equ ((ptr_sndC1-SoundIndex)/4)+sfx__First
00000000                            sfx_Warning:	equ ((ptr_sndC2-SoundIndex)/4)+sfx__First
00000000                            sfx_GiantRing:	equ ((ptr_sndC3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bomb:	equ ((ptr_sndC4-SoundIndex)/4)+sfx__First
00000000                            sfx_Cash:	equ ((ptr_sndC5-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLoss:	equ ((ptr_sndC6-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainRise:	equ ((ptr_sndC7-SoundIndex)/4)+sfx__First
00000000                            sfx_Burning:	equ ((ptr_sndC8-SoundIndex)/4)+sfx__First
00000000                            sfx_Bonus:	equ ((ptr_sndC9-SoundIndex)/4)+sfx__First
00000000                            sfx_EnterSS:	equ ((ptr_sndCA-SoundIndex)/4)+sfx__First
00000000                            sfx_WallSmash:	equ ((ptr_sndCB-SoundIndex)/4)+sfx__First
00000000                            sfx_Spring:	equ ((ptr_sndCC-SoundIndex)/4)+sfx__First
00000000                            sfx_Switch:	equ ((ptr_sndCD-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLeft:	equ ((ptr_sndCE-SoundIndex)/4)+sfx__First
00000000                            sfx_Signpost:	equ ((ptr_sndCF-SoundIndex)/4)+sfx__First
00000000                            sfx__Last:	equ ((ptr_sndend-SoundIndex-4)/4)+sfx__First
00000000                            
00000000                            ; Special sound effects
00000000 =000000D0                  spec__First:	equ $D0
00000000                            sfx_Waterfall:	equ ((ptr_sndD0-SpecSoundIndex)/4)+spec__First
00000000                            sfx_LightningShield:	equ ((ptr_sndD1-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Peelout:	equ ((ptr_sndD2-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutRelease:	equ ((ptr_sndD3-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutStop:	equ ((ptr_sndD4-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Spindash:	equ ((ptr_sndD5-SpecSoundIndex)/4)+spec__First
00000000                            spec__Last:	equ ((ptr_specend-SpecSoundIndex-4)/4)+spec__First
00000000                            
00000000 =000000E0                  flg__First:	equ $E0
00000000                            bgm_Fade:	equ ((ptr_flgE0-Sound_ExIndex)/4)+flg__First
00000000                            sfx_Sega:	equ ((ptr_flgE1-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Speedup:	equ ((ptr_flgE2-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Slowdown:	equ ((ptr_flgE3-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Stop:	equ ((ptr_flgE4-Sound_ExIndex)/4)+flg__First
00000000                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
00000000                            
00000000                            ; Sonic frame IDs
00000000 =00000000                  fr_Null:	equ 0
00000000 =00000001                  fr_Stand:	equ 1
00000000 =00000002                  fr_Blink:	equ 2
00000000 =00000003                  fr_Wait1:	equ 3
00000000 =00000004                  fr_Wait2:	equ 4
00000000 =00000005                  fr_Wait3:	equ 5
00000000 =00000006                  fr_Wait4:	equ 6
00000000 =00000007                  fr_Wait5:	equ 7
00000000 =00000008                  fr_Wait6:	equ 8
00000000 =00000009                  fr_Wait7:	equ 9
00000000 =0000000A                  fr_Wait8:	equ $A
00000000 =0000000B                  fr_Wait9:	equ $B
00000000 =0000000C                  fr_LookUp1:	equ $C
00000000 =0000000D                  fr_LookUp2:	equ $D
00000000 =0000000E                  fr_Walk11:	equ $E
00000000 =0000000F                  fr_Walk12:	equ $F
00000000 =00000010                  fr_Walk13:	equ $10
00000000 =00000011                  fr_Walk14:	equ $11
00000000 =00000012                  fr_Walk15:	equ $12
00000000 =00000013                  fr_Walk16:	equ $13
00000000 =00000014                  fr_Walk17:	equ $14
00000000 =00000015                  fr_Walk18:	equ $15
00000000 =00000016                  fr_Walk21:	equ $16
00000000 =00000017                  fr_Walk22:	equ $17
00000000 =00000018                  fr_Walk23:	equ $18
00000000 =00000019                  fr_Walk24:	equ $19
00000000 =0000001A                  fr_Walk25:	equ $1A
00000000 =0000001B                  fr_Walk26:	equ $1B
00000000 =0000001C                  fr_Walk27:	equ $1C
00000000 =0000001D                  fr_Walk28:	equ $1D
00000000 =0000001E                  fr_Walk31:	equ $1E
00000000 =0000001F                  fr_Walk32:	equ $1F
00000000 =00000020                  fr_Walk33:	equ $20
00000000 =00000021                  fr_Walk34:	equ $21
00000000 =00000022                  fr_Walk35:	equ $22
00000000 =00000023                  fr_Walk36:	equ $23
00000000 =00000024                  fr_Walk37:	equ $24
00000000 =00000025                  fr_Walk38:	equ $25
00000000 =00000026                  fr_Walk41:	equ $26
00000000 =00000027                  fr_Walk42:	equ $27
00000000 =00000028                  fr_Walk43:	equ $28
00000000 =00000029                  fr_Walk44:	equ $29
00000000 =0000002A                  fr_Walk45:	equ $2A
00000000 =0000002B                  fr_Walk46:	equ $2B
00000000 =0000002C                  fr_Walk47:	equ $2C
00000000 =0000002D                  fr_Walk48:	equ $2D
00000000 =0000002E                  fr_Run11:	equ $2E
00000000 =0000002F                  fr_Run12:	equ $2F
00000000 =00000030                  fr_Run13:	equ $30
00000000 =00000031                  fr_Run14:	equ $31
00000000 =00000032                  fr_Run15:	equ $32
00000000 =00000033                  fr_Run16:	equ $33
00000000 =00000034                  fr_Run17:	equ $34
00000000 =00000035                  fr_Run18:	equ $35
00000000 =00000036                  fr_Run21:	equ $36
00000000 =00000037                  fr_Run22:	equ $37
00000000 =00000038                  fr_Run23:	equ $38
00000000 =00000039                  fr_Run24:	equ $39
00000000 =0000003A                  fr_Run25:	equ $3A
00000000 =0000003B                  fr_Run26:	equ $3B
00000000 =0000003C                  fr_Run27:	equ $3C
00000000 =0000003D                  fr_Run28:	equ $3D
00000000 =0000003E                  fr_Run31:	equ $3E
00000000 =0000003F                  fr_Run32:	equ $3F
00000000 =00000040                  fr_Run33:	equ $40
00000000 =00000041                  fr_Run34:	equ $41
00000000 =00000042                  fr_Run35:	equ $42
00000000 =00000043                  fr_Run36:	equ $43
00000000 =00000044                  fr_Run37:	equ $44
00000000 =00000045                  fr_Run38:	equ $45
00000000 =00000046                  fr_Run41:	equ $46
00000000 =00000047                  fr_Run42:	equ $47
00000000 =00000048                  fr_Run43:	equ $48
00000000 =00000049                  fr_Run44:	equ $49
00000000 =0000004A                  fr_Run45:	equ $4A
00000000 =0000004B                  fr_Run46:	equ $4B
00000000 =0000004C                  fr_Run47:	equ $4C
00000000 =0000004D                  fr_Run48:	equ $4D
00000000 =0000004E                  fr_peelout11:	equ $4E
00000000 =0000004F                  fr_peelout12:	equ $4F
00000000 =00000050                  fr_peelout13:	equ $50
00000000 =00000051                  fr_peelout14:	equ $51
00000000 =00000052                  fr_peelout21:	equ $52
00000000 =00000053                  fr_peelout22:	equ $53
00000000 =00000054                  fr_peelout23:	equ $54
00000000 =00000055                  fr_peelout24:	equ $55
00000000 =00000056                  fr_peelout31:	equ $56
00000000 =00000057                  fr_peelout32:	equ $57
00000000 =00000058                  fr_peelout33:	equ $58
00000000 =00000059                  fr_peelout34:	equ $59
00000000 =0000005A                  fr_peelout41:	equ $5A
00000000 =0000005B                  fr_peelout42:	equ $5B
00000000 =0000005C                  fr_peelout43:	equ $5C
00000000 =0000005D                  fr_peelout44:	equ $5D
00000000 =0000005E                  fr_Roll1:	equ $5E
00000000 =00000060                  fr_Roll2:	equ $60
00000000 =00000062                  fr_Roll3:	equ $62
00000000 =00000064                  fr_Roll4:	equ $64
00000000 =00000066                  fr_Roll5:	equ $66
00000000 =0000005F                  fr_Roll6:	equ $5F
00000000 =00000061                  fr_Roll7:	equ $61
00000000 =00000063                  fr_Roll8:	equ $63
00000000 =00000065                  fr_Roll9:	equ $65
00000000 =00000067                  fr_Warp1:	equ $67
00000000 =00000068                  fr_Warp2:	equ $68
00000000 =00000069                  fr_Warp3:	equ $69
00000000 =0000006A                  fr_Warp4:	equ $6A
00000000 =0000006B                  fr_Stop1:	equ $6B
00000000 =0000006C                  fr_Stop2:	equ $6C
00000000 =0000006D                  fr_Stop3:	equ $6D
00000000 =0000006E                  fr_Stop4:	equ $6E
00000000 =0000006F                  fr_Leap3:	equ $6F
00000000 =00000070                  fr_Duck2:	equ $70
00000000 =00000071                  fr_Duck:	equ $71
00000000 =00000072                  fr_Balance1:	equ $72
00000000 =00000073                  fr_Balance2:	equ $73
00000000 =00000074                  fr_Balance3:	equ $74
00000000 =00000075                  fr_Balance4:	equ $75
00000000 =00000076                  fr_GetAir2:		equ $76
00000000 =00000077                  fr_Blank:		equ $77
00000000 =00000078                  fr_VHang1:		equ $78
00000000 =00000079                  fr_VHang2:		equ $79
00000000 =0000007A                  fr_VHang3:		equ $7A
00000000                            
00000000 =0000007C                  fr_Float1:	equ $7C
00000000 =0000007E                  fr_Float2:	equ $7E
00000000 =00000081                  fr_Float3:	equ $81
00000000 =00000082                  fr_Float4:	equ $82
00000000 =00000080                  fr_Float5:	equ $80
00000000 =0000007B                  fr_Float6:	equ $7B
00000000 =0000007D                  fr_float7:	equ $7D
00000000 =0000007F                  fr_float8:	equ $7F
00000000 =00000083                  fr_Spring:	equ $83
00000000 =00000084                  fr_Spring2:	equ $84
00000000 =00000085                  fr_Hang1:	equ $85
00000000 =00000086                  fr_Hang2:	equ $86
00000000 =00000087                  fr_Leap1:	equ $87
00000000 =00000088                  fr_Leap2:	equ $88
00000000 =00000089                  fr_Push1:	equ $89
00000000 =0000008A                  fr_Push2:	equ $8A
00000000 =0000008B                  fr_Push3:	equ $8B
00000000 =0000008C                  fr_Push4:	equ $8C
00000000 =0000008D                  fr_Push5:	equ $8D
00000000 =0000008E                  fr_Push6:	equ $8E
00000000 =0000008F                  fr_Push7:	equ $8F
00000000 =00000090                  fr_Push8:	equ $90
00000000 =00000091                  fr_Surf:	equ $91
00000000 =00000092                  fr_Burnt:	equ $92
00000000 =00000093                  fr_Drown:	equ $93
00000000 =00000094                  fr_Death:	equ $94
00000000 =00000095                  fr_GetAir:	equ $95
00000000 =00000096                  fr_Injury:	equ $96
00000000 =00000097                  fr_WaterSlide:	equ $97
00000000 =00000098                  fr_skele1:	equ $98
00000000 =00000099                  fr_skele2:	equ $99
00000000 =0000009A                  fr_hurtblue:	equ $9A
00000000 =0000009B                  fr_Spindash1	equ $9B
00000000 =0000009C                  fr_Spindash2	equ $9C
00000000 =0000009D                  fr_Spindash3	equ $9D
00000000 =0000009E                  fr_Spindash4	equ $9E
00000000 =0000009F                  fr_Spindash5	equ $9F
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000 =000000A1                  fr_Transform1	equ	$A1
00000000 =000000A2                  fr_Transform2	equ	$A2
00000000 =000000A3                  fr_Transform3	equ	$A3
00000000 =000000A4                  fr_Transform4	equ	$A4
00000000 =000000A5                  fr_Transform5	equ	$A5
00000000 =000000A6                  fr_Transform6	equ	$A6
00000000 =000000A7                  fr_Transform7	equ	$A7
00000000 =000000A8                  fr_Transform8	equ	$A8
00000000 =000000A9                  fr_Transform9	equ	$A9
00000000 =000000A9                  fr_Transform9	equ	$A9
00000000                            	include	"Variables.asm"
00000000                            ; Variables (v) and Flags (f)
00000000                            
00000000 =FFFFFC00                  v_regbuffer:	equ $FFFFFC00	; stores registers d0-a7 during an error event ($40 bytes)
00000000 =FFFFFC40                  v_spbuffer:	equ $FFFFFC40	; stores most recent sp address (4 bytes)
00000000 =FFFFFC44                  v_errortype:	equ $FFFFFC44	; error type
00000000                            
00000000 =00FF0000                  v_256x256:	equ   $FF0000	; 256x256 tile mappings ($A400 bytes)
00000000 =FFFFA400                  v_lvllayout:	equ $FFFFA400	; level and background layouts ($400 bytes)
00000000 =FFFFA800                  v_bgscroll_buffer:	equ	$FFFFA800	; background scroll buffer ($200 bytes)
00000000 =FFFFAA00                  v_ngfx_buffer:	equ $FFFFAA00	; Nemesis graphics decompression buffer ($200 bytes)
00000000 =FFFFAC00                  v_spritequeue:	equ $FFFFAC00	; sprite display queue, in order of priority ($400 bytes)
00000000 =FFFFB000                  v_16x16:		equ $FFFFB000	; 16x16 tile mappings
00000000 =FFFFC800                  VDP_Command_Buffer:	equ $FFFFC800
00000000                            
00000000 =FFFFC8FC                  VDP_Command_Buffer_Slot:equ VDP_Command_Buffer+7*$12*2
00000000 =FFFFC800                  v_sgfx_buffer:	equ $FFFFC800	; buffered Sonic graphics ($17 cells) ($2E0 bytes)
00000000 =FFFFCB00                  v_tracksonic:	equ $FFFFCB00	; position tracking data for Sonic ($100 bytes)
00000000 =FFFFCC00                  v_hscrolltablebuffer:	equ $FFFFCC00 ; scrolling table data (actually $380 bytes, but $400 is reserved for it)
00000000 =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	equ v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFD800                  v_lvlobjspace:	equ $FFFFD800	; level object variable space ($1800 bytes)
00000000 =FFFFF015                  v_palmuscounter:	equ $FFFFF015
00000000 =FFFFF000                  v_snddriver_ram:	equ $FFFFF000 ; start of RAM for the sound driver data ($5C0 bytes)
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, until otherwise stated, all offsets are relative to v_snddriver_ram
00000000                            ; =================================================================================
00000000 =00000000                  v_startofvariables:	equ $000
00000000 =00000000                  v_sndprio:		equ $000	; sound priority (priority of new music/SFX must be higher or equal to this value or it won't play; bit 7 of priority being set prevents this value from changing)
00000000 =00000001                  v_main_tempo_timeout:	equ $001	; Counts down to zero; when zero, resets to next value and delays song by 1 frame
00000000 =00000002                  v_main_tempo:		equ $002	; Used for music only
00000000 =00000003                  f_pausemusic:		equ $003	; flag set to stop music when paused
00000000 =00000004                  v_fadeout_counter:	equ $004
00000000                            
00000000 =00000006                  v_fadeout_delay:	equ $006
00000000 =00000007                  v_communication_byte:	equ $007	; used in Ristar to sync with a boss' attacks; unused here
00000000 =00000008                  f_updating_dac:		equ $008	; $80 if updating DAC, $00 otherwise
00000000 =00000009                  v_sound_id:		equ $009	; sound or music copied from below
00000000 =0000000A                  v_soundqueue0:		equ $00A	; sound or music to play
00000000 =0000000B                  v_soundqueue1:		equ $00B	; special sound to play
00000000 =0000000C                  v_soundqueue2:		equ $00C	; unused sound to play
00000000                            
00000000 =0000000E                  f_voice_selector:	equ $00E	; $00 = use music voice pointer; $40 = use special voice pointer; $80 = use track voice pointer
00000000                            
00000000 =00000018                  v_voice_ptr:		equ $018	; voice data pointer (4 bytes)
00000000                            
00000000 =00000020                  v_special_voice_ptr:	equ $020	; voice data pointer for special SFX ($D0-$DF) (4 bytes)
00000000                            
00000000 =00000024                  f_fadein_flag:		equ $024	; Flag for fade in
00000000 =00000025                  v_fadein_delay:		equ $025
00000000 =00000026                  v_fadein_counter:	equ $026	; Timer for fade in/out
00000000 =00000027                  f_1up_playing:		equ $027	; flag indicating 1-up song is playing
00000000 =00000028                  v_tempo_mod:		equ $028	; music - tempo modifier
00000000 =00000029                  v_speeduptempo:		equ $029	; music - tempo modifier with speed shoes
00000000 =0000002A                  f_speedup:		equ $02A	; flag indicating whether speed shoes tempo is on ($80) or off ($00)
00000000 =0000002B                  v_ring_speaker:		equ $02B	; which speaker the "ring" sound is played in (00 = right; 01 = left)
00000000 =0000002C                  f_push_playing:		equ $02C	; if set, prevents further push sounds from playing
00000000                            
00000000 =00000040                  v_music_track_ram:	equ $040	; Start of music RAM
00000000                            
00000000 =00000040                  v_music_fmdac_tracks:	equ v_music_track_ram+TrackSz*0
00000000 =00000040                  v_music_dac_track:	equ v_music_fmdac_tracks+TrackSz*0
00000000 =00000070                  v_music_fm_tracks:	equ v_music_fmdac_tracks+TrackSz*1
00000000 =00000070                  v_music_fm1_track:	equ v_music_fm_tracks+TrackSz*0
00000000 =000000A0                  v_music_fm2_track:	equ v_music_fm_tracks+TrackSz*1
00000000 =000000D0                  v_music_fm3_track:	equ v_music_fm_tracks+TrackSz*2
00000000 =00000100                  v_music_fm4_track:	equ v_music_fm_tracks+TrackSz*3
00000000 =00000130                  v_music_fm5_track:	equ v_music_fm_tracks+TrackSz*4
00000000 =00000160                  v_music_fm6_track:	equ v_music_fm_tracks+TrackSz*5
00000000 =00000190                  v_music_fm_tracks_end:	equ v_music_fm_tracks+TrackSz*6
00000000 =00000190                  v_music_fmdac_tracks_end:	equ v_music_fm_tracks_end
00000000 =00000190                  v_music_psg_tracks:	equ v_music_fmdac_tracks_end
00000000 =00000190                  v_music_psg1_track:	equ v_music_psg_tracks+TrackSz*0
00000000 =000001C0                  v_music_psg2_track:	equ v_music_psg_tracks+TrackSz*1
00000000 =000001F0                  v_music_psg3_track:	equ v_music_psg_tracks+TrackSz*2
00000000 =00000220                  v_music_psg_tracks_end:	equ v_music_psg_tracks+TrackSz*3
00000000 =00000220                  v_music_track_ram_end:	equ v_music_psg_tracks_end
00000000                            
00000000 =00000220                  v_sfx_track_ram:	equ v_music_track_ram_end	; Start of SFX RAM, straight after the end of music RAM
00000000                            
00000000 =00000220                  v_sfx_fm_tracks:	equ v_sfx_track_ram+TrackSz*0
00000000 =00000220                  v_sfx_fm3_track:	equ v_sfx_fm_tracks+TrackSz*0
00000000 =00000250                  v_sfx_fm4_track:	equ v_sfx_fm_tracks+TrackSz*1
00000000 =00000280                  v_sfx_fm5_track:	equ v_sfx_fm_tracks+TrackSz*2
00000000 =000002B0                  v_sfx_fm_tracks_end:	equ v_sfx_fm_tracks+TrackSz*3
00000000 =000002B0                  v_sfx_psg_tracks:	equ v_sfx_fm_tracks_end
00000000 =000002B0                  v_sfx_psg1_track:	equ v_sfx_psg_tracks+TrackSz*0
00000000 =000002E0                  v_sfx_psg2_track:	equ v_sfx_psg_tracks+TrackSz*1
00000000 =00000310                  v_sfx_psg3_track:	equ v_sfx_psg_tracks+TrackSz*2
00000000 =00000340                  v_sfx_psg_tracks_end:	equ v_sfx_psg_tracks+TrackSz*3
00000000 =00000340                  v_sfx_track_ram_end:	equ v_sfx_psg_tracks_end
00000000                            
00000000 =00000340                  v_spcsfx_track_ram:	equ v_sfx_track_ram_end	; Start of special SFX RAM, straight after the end of SFX RAM
00000000                            
00000000 =00000340                  v_spcsfx_fm4_track:	equ v_spcsfx_track_ram+TrackSz*0
00000000 =00000370                  v_spcsfx_psg3_track:	equ v_spcsfx_track_ram+TrackSz*1
00000000 =000003A0                  v_spcsfx_track_ram_end:	equ v_spcsfx_track_ram+TrackSz*2
00000000                            
00000000 =000003A0                  v_1up_ram_copy:		equ v_spcsfx_track_ram_end
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, no longer relative to sound driver RAM
00000000                            ; =================================================================================
00000000                            
00000000 =FFFFF600                  v_gamemode:	equ $FFFFF600	; game mode (00=Sega; 04=Title; 08=Demo; 0C=Level; 10=SS; 14=Cont; 18=End; 1C=Credit; +8C=PreLevel)
00000000 =FFFFF602                  v_jpadhold2:	equ $FFFFF602	; joypad input - held, duplicate
00000000 =FFFFF603                  v_jpadpress2:	equ $FFFFF603	; joypad input - pressed, duplicate
00000000 =FFFFF604                  v_jpadhold1:	equ $FFFFF604	; joypad input - held
00000000 =FFFFF605                  v_jpadpress1:	equ $FFFFF605	; joypad input - pressed
00000000 =FFFFF608                  v_loadhud:		equ	$FFFFF608
00000000 =FFFFF60C                  v_vdp_buffer1:	equ $FFFFF60C	; VDP instruction buffer (2 bytes)
00000000                            
00000000 =FFFFF614                  v_demolength:	equ $FFFFF614	; the length of a demo in frames (2 bytes)
00000000 =FFFFF616                  v_scrposy_dup:	equ $FFFFF616	; screen position y (duplicate) (2 bytes)
00000000 =FFFFF618                  v_bgscrposy_dup:	equ $FFFFF618	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFF61A                  v_scrposx_dup:	equ $FFFFF61A	; screen position x (duplicate) (2 bytes)
00000000 =FFFFF61C                  v_bgscreenposx_dup_unused:	equ $FFFFF61C	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFF61E                  v_bg3screenposy_dup_unused:	equ $FFFFF61E	; (2 bytes)
00000000 =FFFFF620                  v_bg3screenposx_dup_unused:	equ $FFFFF620	; (2 bytes)
00000000                            
00000000 =FFFFF624                  v_hbla_hreg:	equ $FFFFF624	; VDP H.interrupt register buffer (8Axx) (2 bytes)
00000000 =FFFFF625                  v_hbla_line:	equ $FFFFF625	; screen line where water starts and palette is changed by HBlank
00000000 =FFFFF626                  v_pfade_start:	equ $FFFFF626	; palette fading - start position in bytes
00000000 =FFFFF627                  v_pfade_size:	equ $FFFFF627	; palette fading - number of colors
00000000 =FFFFF62A                  v_vbla_routine:	equ $FFFFF62A	; VBlank - routine counter
00000000 =FFFFF62C                  v_spritecount:	equ $FFFFF62C	; number of sprites on-screen
00000000 =FFFFF632                  v_pcyc_num:	equ $FFFFF632	; palette cycling - current reference number (2 bytes)
00000000 =FFFFF634                  v_pcyc_time:	equ $FFFFF634	; palette cycling - time until the next change (2 bytes)
00000000 =FFFFF636                  v_random:	equ $FFFFF636	; pseudo random number buffer (4 bytes)
00000000 =FFFFF63A                  f_pause:		equ $FFFFF63A	; flag set to pause the game (2 bytes)
00000000 =FFFFF640                  v_vdp_buffer2:	equ $FFFFF640	; VDP instruction buffer (2 bytes)
00000000 =FFFFF644                  f_hbla_pal:	equ $FFFFF644	; flag set to change palette during HBlank (0000 = no; 0001 = change) (2 bytes)
00000000 =FFFFF646                  v_waterpos1:	equ $FFFFF646	; water height, actual (2 bytes)
00000000 =FFFFF648                  v_waterpos2:	equ $FFFFF648	; water height, ignoring sway (2 bytes)
00000000 =FFFFF64A                  v_waterpos3:	equ $FFFFF64A	; water height, next target (2 bytes)
00000000 =FFFFF64C                  f_water:		equ $FFFFF64C	; flag set for water
00000000 =FFFFF64D                  v_wtr_routine:	equ $FFFFF64D	; water event - routine counter
00000000 =FFFFF64E                  f_wtr_state:	equ $FFFFF64E	; water palette state when water is above/below the screen (00 = partly/all dry; 01 = all underwater)
00000000                            
00000000 =FFFFF650                  v_pal_buffer:	equ $FFFFF650	; palette data buffer (used for palette cycling) ($30 bytes)
00000000 =FFFFF680                  v_plc_buffer:	equ $FFFFF680	; pattern load cues buffer (maximum $10 PLCs) ($60 bytes)
00000000 =FFFFF6E0                  v_ptrnemcode:	equ $FFFFF6E0	; pointer for nemesis decompression code ($1502 or $150C) (4 bytes)
00000000                            
00000000 =FFFFF6F8                  f_plc_execute:	equ $FFFFF6F8	; flag set for pattern load cue execution (2 bytes)
00000000                            
00000000 =FFFFF700                  v_screenposx:	equ $FFFFF700	; screen position x (2 bytes)
00000000 =FFFFF704                  v_screenposy:	equ $FFFFF704	; screen position y (2 bytes)
00000000 =FFFFF708                  v_bgscreenposx:	equ $FFFFF708	; background screen position x (2 bytes)
00000000 =FFFFF70C                  v_bgscreenposy:	equ $FFFFF70C	; background screen position y (2 bytes)
00000000 =FFFFF710                  v_bg2screenposx:	equ $FFFFF710	; 2 bytes
00000000 =FFFFF714                  v_bg2screenposy:	equ $FFFFF714	; 2 bytes
00000000 =FFFFF718                  v_bg3screenposx:	equ $FFFFF718	; 2 bytes
00000000 =FFFFF71C                  v_bg3screenposy:	equ $FFFFF71C	; 2 bytes
00000000                            
00000000 =FFFFF720                  v_limitleft1:	equ $FFFFF720	; left level boundary (2 bytes)
00000000 =FFFFF722                  v_limitright1:	equ $FFFFF722	; right level boundary (2 bytes)
00000000 =FFFFF724                  v_limittop1:	equ $FFFFF724	; top level boundary (2 bytes)
00000000 =FFFFF726                  v_limitbtm1:	equ $FFFFF726	; bottom level boundary (2 bytes)
00000000 =FFFFF728                  v_limitleft2:	equ $FFFFF728	; left level boundary (2 bytes)
00000000 =FFFFF72A                  v_limitright2:	equ $FFFFF72A	; right level boundary (2 bytes)
00000000 =FFFFF72C                  v_limittop2:	equ $FFFFF72C	; top level boundary (2 bytes)
00000000 =FFFFF72E                  v_limitbtm2:	equ $FFFFF72E	; bottom level boundary (2 bytes)
00000000                            
00000000 =FFFFF732                  v_limitleft3:	equ $FFFFF732	; left level boundary, at the end of an act (2 bytes)
00000000                            
00000000 =FFFFF73A                  v_scrshiftx:	equ $FFFFF73A	; x-screen shift (new - last) * $100
00000000 =FFFFF73C                  v_scrshifty:	equ $FFFFF73C	; y-screen shift (new - last) * $100
00000000                            
00000000 =FFFFF73E                  v_lookshift:	equ $FFFFF73E	; screen shift when Sonic looks up/down (2 bytes)
00000000 =FFFFF742                  v_dle_routine:	equ $FFFFF742	; dynamic level event - routine counter
00000000 =FFFFF744                  f_nobgscroll:	equ $FFFFF744	; flag set to cancel background scrolling
00000000                            
00000000 =FFFFF74A                  v_fg_xblock:	equ	$FFFFF74A	; foreground x-block parity (for redraw)
00000000 =FFFFF74B                  v_fg_yblock:	equ	$FFFFF74B	; foreground y-block parity (for redraw)
00000000 =FFFFF74C                  v_bg1_xblock:	equ	$FFFFF74C	; background x-block parity (for redraw)
00000000 =FFFFF74D                  v_bg1_yblock:	equ	$FFFFF74D	; background y-block parity (for redraw)
00000000 =FFFFF74E                  v_bg2_xblock:	equ	$FFFFF74E	; secondary background x-block parity (for redraw)
00000000 =FFFFF74F                  v_bg2_yblock:	equ	$FFFFF74F	; secondary background y-block parity (unused)
00000000 =FFFFF750                  v_bg3_xblock:	equ	$FFFFF750	; teritary background x-block parity (for redraw)
00000000 =FFFFF751                  v_bg3_yblock:	equ	$FFFFF751	; teritary background y-block parity (unused)
00000000                            
00000000 =FFFFF754                  v_fg_scroll_flags:	equ $FFFFF754	; screen redraw flags for foreground
00000000 =FFFFF756                  v_bg1_scroll_flags:	equ $FFFFF756	; screen redraw flags for background 1
00000000 =FFFFF758                  v_bg2_scroll_flags:	equ $FFFFF758	; screen redraw flags for background 2
00000000 =FFFFF75A                  v_bg3_scroll_flags:	equ $FFFFF75A	; screen redraw flags for background 3
00000000 =FFFFF75C                  f_bgscrollvert:	equ $FFFFF75C	; flag for vertical background scrolling
00000000 =FFFFF760                  v_sonspeedmax:	equ $FFFFF760	; Sonic's maximum speed (2 bytes)
00000000 =FFFFF762                  v_sonspeedacc:	equ $FFFFF762	; Sonic's acceleration (2 bytes)
00000000 =FFFFF764                  v_sonspeeddec:	equ $FFFFF764	; Sonic's deceleration (2 bytes)
00000000 =FFFFF766                  v_sonframenum:	equ $FFFFF766	; frame to display for Sonic
00000000 =FFFFF767                  f_sonframechg:	equ $FFFFF767	; flag set to update Sonic's sprite frame
00000000 =FFFFF768                  v_anglebuffer:	equ $FFFFF768	; angle of collision block that Sonic or object is standing on
00000000                            
00000000 =FFFFF76C                  v_opl_routine:	equ $FFFFF76C	; ObjPosLoad - routine counter
00000000 =FFFFF76E                  v_opl_screen:	equ $FFFFF76E	; ObjPosLoad - screen variable
00000000 =FFFFF770                  v_opl_data:	equ $FFFFF770	; ObjPosLoad - data buffer ($10 bytes)
00000000                            
00000000 =FFFFF780                  v_ssangle:	equ $FFFFF780	; Special Stage angle (2 bytes)
00000000 =FFFFF782                  v_ssrotate:	equ $FFFFF782	; Special Stage rotation speed (2 bytes)
00000000 =FFFFF790                  v_btnpushtime1:	equ $FFFFF790	; button push duration - in level (2 bytes)
00000000 =FFFFF792                  v_btnpushtime2:	equ $FFFFF792	; button push duration - in demo (2 bytes)
00000000 =FFFFF794                  v_palchgspeed:	equ $FFFFF794	; palette fade/transition speed (0 is fastest) (2 bytes)
00000000 =FFFFF796                  v_collindex:	equ $FFFFF796	; ROM address for collision index of current level (4 bytes)
00000000 =FFFFF79A                  v_palss_num:	equ $FFFFF79A	; palette cycling in Special Stage - reference number (2 bytes)
00000000 =FFFFF79C                  v_palss_time:	equ $FFFFF79C	; palette cycling in Special Stage - time until next change (2 bytes)
00000000                            
00000000 =FFFFF7A0                  v_camera_pan:	equ $FFFFF7A0    ; Extended Camera - how far the camera/view is panned to the left or right of Sonic (2 bytes)
00000000                            
00000000 =FFFFF7A4                  v_obj31ypos:	equ $FFFFF7A4	; y-position of object 31 (MZ stomper) (2 bytes)
00000000 =FFFFF7A7                  v_bossstatus:	equ $FFFFF7A7	; status of boss and prison capsule (01 = boss defeated; 02 = prison opened)
00000000 =FFFFF7A8                  v_trackpos:	equ $FFFFF7A8	; position tracking reference number (2 bytes)
00000000 =FFFFF7A9                  v_trackbyte:	equ $FFFFF7A9	; low byte for position tracking
00000000 =FFFFF7AA                  f_lockscreen:	equ $FFFFF7AA	; flag set to lock screen during bosses
00000000 =FFFFF7AC                  v_256loop1:	equ $FFFFF7AC	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AD                  v_256loop2:	equ $FFFFF7AD	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AE                  v_256roll1:	equ $FFFFF7AE	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7AF                  v_256roll2:	equ $FFFFF7AF	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7B0                  v_lani0_frame:	equ $FFFFF7B0	; level graphics animation 0 - current frame
00000000 =FFFFF7B1                  v_lani0_time:	equ $FFFFF7B1	; level graphics animation 0 - time until next frame
00000000 =FFFFF7B2                  v_lani1_frame:	equ $FFFFF7B2	; level graphics animation 1 - current frame
00000000 =FFFFF7B3                  v_lani1_time:	equ $FFFFF7B3	; level graphics animation 1 - time until next frame
00000000 =FFFFF7B4                  v_lani2_frame:	equ $FFFFF7B4	; level graphics animation 2 - current frame
00000000 =FFFFF7B5                  v_lani2_time:	equ $FFFFF7B5	; level graphics animation 2 - time until next frame
00000000 =FFFFF7B6                  v_lani3_frame:	equ $FFFFF7B6	; level graphics animation 3 - current frame
00000000 =FFFFF7B7                  v_lani3_time:	equ $FFFFF7B7	; level graphics animation 3 - time until next frame
00000000 =FFFFF7B8                  v_lani4_frame:	equ $FFFFF7B8	; level graphics animation 4 - current frame
00000000 =FFFFF7B9                  v_lani4_time:	equ $FFFFF7B9	; level graphics animation 4 - time until next frame
00000000 =FFFFF7BA                  v_lani5_frame:	equ $FFFFF7BA	; level graphics animation 5 - current frame
00000000 =FFFFF7BB                  v_lani5_time:	equ $FFFFF7BB	; level graphics animation 5 - time until next frame
00000000 =FFFFF7BE                  v_gfxbigring:	equ $FFFFF7BE	; settings for giant ring graphics loading (2 bytes)
00000000 =FFFFF7C0                  f_conveyrev:	equ $FFFFF7C0	; flag set to reverse conveyor belts in LZ/SBZ
00000000 =FFFFF7C1                  v_obj63:		equ $FFFFF7C1	; object 63 (LZ/SBZ platforms) variables (6 bytes)
00000000 =FFFFF7C7                  f_wtunnelmode:	equ $FFFFF7C7	; LZ water tunnel mode
00000000 =FFFFF7C8                  f_lockmulti:	equ $FFFFF7C8	; flag set to lock controls, lock Sonic's position & animation
00000000 =FFFFF7C9                  f_wtunnelallow:	equ $FFFFF7C9	; LZ water tunnels (00 = enabled; 01 = disabled)
00000000 =FFFFF7CA                  f_jumponly:	equ $FFFFF7CA	; flag set to lock controls apart from jumping
00000000 =FFFFF7CB                  v_obj6B:		equ $FFFFF7CB	; object 6B (SBZ stomper) variable
00000000 =FFFFF7CC                  f_lockctrl:	equ $FFFFF7CC	; flag set to lock controls during ending sequence
00000000 =FFFFF7CD                  f_bigring:	equ $FFFFF7CD	; flag set when Sonic collects the giant ring
00000000 =FFFFF7D0                  v_itembonus:	equ $FFFFF7D0	; item bonus from broken enemies, blocks etc. (2 bytes)
00000000 =FFFFF7D2                  v_timebonus:	equ $FFFFF7D2	; time bonus at the end of an act (2 bytes)
00000000 =FFFFF7D4                  v_ringbonus:	equ $FFFFF7D4	; ring bonus at the end of an act (2 bytes)
00000000 =FFFFF7D6                  f_endactbonus:	equ $FFFFF7D6	; time/ring bonus update flag at the end of an act
00000000 =FFFFF7D7                  v_sonicend:	equ $FFFFF7D7	; routine counter for Sonic in the ending sequence
00000000 =FFFFF7D8                  v_lz_deform:	equ	$FFFFF7D8	; LZ deformtaion offset, in units of $80 (2 bytes)
00000000 =FFFFF7E0                  f_switch:	equ $FFFFF7E0	; flags set when Sonic stands on a switch ($10 bytes)
00000000 =FFFFF7F0                  v_scroll_block_1_size:	equ $FFFFF7F0	; (2 bytes)
00000000 =FFFFF7F2                  v_scroll_block_2_size:	equ $FFFFF7F2	; unused (2 bytes)
00000000 =FFFFF7F4                  v_scroll_block_3_size:	equ $FFFFF7F4	; unused (2 bytes)
00000000 =FFFFF7F6                  v_scroll_block_4_size:	equ $FFFFF7F6	; unused (2 bytes)
00000000                            
00000000 =FFFFF800                  v_spritetablebuffer:	equ $FFFFF800 ; sprite table ($280 bytes, last $80 bytes are overwritten by v_pal_water_dup)
00000000 =FFFFFA00                  v_pal_water_dup:	equ $FFFFFA00 ; duplicate underwater palette, used for transitions ($80 bytes)
00000000 =FFFFFA80                  v_pal_water:	equ $FFFFFA80	; main underwater palette ($80 bytes)
00000000 =FFFFFB00                  v_pal_dry:	equ $FFFFFB00	; main palette ($80 bytes)
00000000 =FFFFFB80                  v_pal_dry_dup:	equ $FFFFFB80	; duplicate palette, used for transitions ($80 bytes)
00000000 =FFFFFC00                  v_objstate:	equ $FFFFFC00	; object state list ($200 bytes)
00000000                            
00000000                            
00000000 =FFFFFE00                  v_systemstack:	equ $FFFFFE00
00000000 =FFFFFE02                  f_restart:	equ $FFFFFE02	; restart level flag (2 bytes)
00000000 =FFFFFE04                  v_framecount:	equ $FFFFFE04	; frame counter (adds 1 every frame) (2 bytes)
00000000 =FFFFFE05                  v_framebyte:	equ v_framecount+1; low byte for frame counter
00000000 =FFFFFE06                  v_debugitem:	equ $FFFFFE06	; debug item currently selected (NOT the object number of the item)
00000000 =FFFFFE08                  v_debuguse:	equ $FFFFFE08	; debug mode use & routine counter (when Sonic is a ring/item) (2 bytes)
00000000 =FFFFFE0A                  v_debugxspeed:	equ $FFFFFE0A	; debug mode - horizontal speed
00000000 =FFFFFE0B                  v_debugyspeed:	equ $FFFFFE0B	; debug mode - vertical speed
00000000 =FFFFFE0C                  v_vbla_count:	equ $FFFFFE0C	; vertical interrupt counter (adds 1 every VBlank) (4 bytes)
00000000 =FFFFFE0E                  v_vbla_word:	equ v_vbla_count+2 ; low word for vertical interrupt counter (2 bytes)
00000000 =FFFFFE0F                  v_vbla_byte:	equ v_vbla_word+1	; low byte for vertical interrupt counter
00000000 =FFFFFE10                  v_zone:		equ $FFFFFE10	; current zone number
00000000 =FFFFFE11                  v_act:		equ $FFFFFE11	; current act number
00000000 =FFFFFE12                  v_lives:		equ $FFFFFE12	; number of lives
00000000 =FFFFFE14                  v_air:		equ $FFFFFE14	; air remaining while underwater (2 bytes)
00000000 =FFFFFE15                  v_airbyte:	equ v_air+1	; low byte for air
00000000 =FFFFFE16                  v_lastspecial:	equ $FFFFFE16	; last special stage number
00000000 =FFFFFE18                  v_continues:	equ $FFFFFE18	; number of continues
00000000 =FFFFFE1A                  f_timeover:	equ $FFFFFE1A	; time over flag
00000000 =FFFFFE1B                  v_lifecount:	equ $FFFFFE1B	; lives counter value (for actual number, see "v_lives")
00000000 =FFFFFE1C                  f_lifecount:	equ $FFFFFE1C	; lives counter update flag
00000000 =FFFFFE1D                  f_ringcount:	equ $FFFFFE1D	; ring counter update flag
00000000 =FFFFFE1E                  f_timecount:	equ $FFFFFE1E	; time counter update flag
00000000 =FFFFFE1F                  f_scorecount:	equ $FFFFFE1F	; score counter update flag
00000000 =FFFFFE20                  v_rings:		equ $FFFFFE20	; rings (2 bytes)
00000000 =FFFFFE21                  v_ringbyte:	equ v_rings+1	; low byte for rings
00000000 =FFFFFE22                  v_time:		equ $FFFFFE22	; time (4 bytes)
00000000 =FFFFFE23                  v_timemin:	equ $FFFFFE23	; time - minutes
00000000 =FFFFFE24                  v_timesec:	equ $FFFFFE24	; time - seconds
00000000 =FFFFFE25                  v_timecent:	equ $FFFFFE25	; time - centiseconds
00000000 =FFFFFE26                  v_score:		equ $FFFFFE26	; score (4 bytes)
00000000 =FFFFFE2C                  v_shield:	equ $FFFFFE2C	; shield status (00 = no; 01 = yes)
00000000 =FFFFFE2D                  v_invinc:	equ $FFFFFE2D	; invinciblity status (00 = no; 01 = yes)
00000000 =FFFFFE2E                  v_shoes:		equ $FFFFFE2E	; speed shoes status (00 = no; 01 = yes)
00000000 =FFFFFE30                  v_lastlamp:	equ $FFFFFE30	; number of the last lamppost you hit
00000000 =FFFFFE32                  v_lamp_xpos:	equ v_lastlamp+2	; x-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE34                  v_lamp_ypos:	equ v_lastlamp+4	; y-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE36                  v_lamp_rings:	equ v_lastlamp+6	; rings stored at lamppost (2 bytes)
00000000 =FFFFFE38                  v_lamp_time:	equ v_lastlamp+8	; time stored at lamppost (2 bytes)
00000000 =FFFFFE3C                  v_lamp_dle:	equ v_lastlamp+$C	; dynamic level event routine counter at lamppost
00000000 =FFFFFE3E                  v_lamp_limitbtm:	equ v_lastlamp+$E	; level bottom boundary at lamppost (2 bytes)
00000000 =FFFFFE40                  v_lamp_scrx:	equ v_lastlamp+$10 ; x-axis screen at lamppost (2 bytes)
00000000 =FFFFFE42                  v_lamp_scry:	equ v_lastlamp+$12 ; y-axis screen at lamppost (2 bytes)
00000000                            
00000000 =FFFFFE50                  v_lamp_wtrpos:	equ v_lastlamp+$20 ; water position at lamppost (2 bytes)
00000000 =FFFFFE52                  v_lamp_wtrrout:	equ v_lastlamp+$22 ; water routine at lamppost
00000000 =FFFFFE53                  v_lamp_wtrstat:	equ v_lastlamp+$23 ; water state at lamppost
00000000 =FFFFFE54                  v_lamp_lives:	equ v_lastlamp+$24 ; lives counter at lamppost
00000000 =FFFFFE57                  v_emeralds:	equ $FFFFFE57	; number of chaos emeralds
00000000 =FFFFFE58                  v_emldlist:	equ $FFFFFE58	; which individual emeralds you have (00 = no; 01 = yes) (6 bytes)
00000000 =FFFFFE5E                  v_oscillate:	equ $FFFFFE5E	; values which oscillate - for swinging platforms, et al ($42 bytes)
00000000 =FFFFFEC0                  v_ani0_time:	equ $FFFFFEC0	; synchronised sprite animation 0 - time until next frame (used for synchronised animations)
00000000 =FFFFFEC1                  v_ani0_frame:	equ $FFFFFEC1	; synchronised sprite animation 0 - current frame
00000000 =FFFFFEC2                  v_ani1_time:	equ $FFFFFEC2	; synchronised sprite animation 1 - time until next frame
00000000 =FFFFFEC3                  v_ani1_frame:	equ $FFFFFEC3	; synchronised sprite animation 1 - current frame
00000000 =FFFFFEC4                  v_ani2_time:	equ $FFFFFEC4	; synchronised sprite animation 2 - time until next frame
00000000 =FFFFFEC5                  v_ani2_frame:	equ $FFFFFEC5	; synchronised sprite animation 2 - current frame
00000000 =FFFFFEC6                  v_ani3_time:	equ $FFFFFEC6	; synchronised sprite animation 3 - time until next frame
00000000 =FFFFFEC7                  v_ani3_frame:	equ $FFFFFEC7	; synchronised sprite animation 3 - current frame
00000000 =FFFFFEC8                  v_ani3_buf:	equ $FFFFFEC8	; synchronised sprite animation 3 - info buffer (2 bytes)
00000000 =FFFFFEC9                  v_ani4_frame:	equ $FFFFFEC9	; synchronised sprite animation 4 - current frame
00000000 =FFFFFEF0                  v_limittopdb:	equ $FFFFFEF0	; level upper boundary, buffered for debug mode (2 bytes)
00000000 =FFFFFEF2                  v_limitbtmdb:	equ $FFFFFEF2	; level bottom boundary, buffered for debug mode (2 bytes)
00000000                            
00000000 =FFFFFF10                  v_screenposx_dup:	equ $FFFFFF10	; screen position x (duplicate) (2 bytes)
00000000 =FFFFFF14                  v_screenposy_dup:	equ $FFFFFF14	; screen position y (duplicate) (2 bytes)
00000000 =FFFFFF18                  v_bgscreenposx_dup:	equ $FFFFFF18	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFFF1C                  v_bgscreenposy_dup:	equ $FFFFFF1C	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFFF20                  v_bg2screenposx_dup:	equ $FFFFFF20	; 2 bytes
00000000 =FFFFFF24                  v_bg2screenposy_dup:	equ $FFFFFF24	; 2 bytes
00000000 =FFFFFF28                  v_bg3screenposx_dup:	equ $FFFFFF28	; 2 bytes
00000000 =FFFFFF2C                  v_bg3screenposy_dup:	equ $FFFFFF2C	; 2 bytes
00000000 =FFFFFF30                  v_fg_scroll_flags_dup:	equ $FFFFFF30
00000000 =FFFFFF32                  v_bg1_scroll_flags_dup:	equ $FFFFFF32
00000000 =FFFFFF34                  v_bg2_scroll_flags_dup:	equ $FFFFFF34
00000000 =FFFFFF36                  v_bg3_scroll_flags_dup:	equ $FFFFFF36
00000000                            
00000000 =FFFFFF80                  v_levseldelay:	equ $FFFFFF80	; level select - time until change when up/down is held (2 bytes)
00000000 =FFFFFF82                  v_levselitem:	equ $FFFFFF82	; level select - item selected (2 bytes)
00000000 =FFFFFF84                  v_levselsound:	equ $FFFFFF84	; level select - sound selected (2 bytes)
00000000 =FFFFFFB0                  Title_screen_option:	equ $FFFFFFB0
00000000 =FFFFFFC0                  v_scorecopy:	equ $FFFFFFC0	; score, duplicate (4 bytes)
00000000 =FFFFFFC0                  v_scorelife:	equ $FFFFFFC0	; points required for an extra life (4 bytes) (JP1 only)
00000000 =FFFFFFE0                  f_levselcheat:	equ $FFFFFFE0	; level select cheat flag
00000000 =FFFFFFE1                  f_slomocheat:	equ $FFFFFFE1	; slow motion & frame advance cheat flag
00000000 =FFFFFFE2                  f_debugcheat:	equ $FFFFFFE2	; debug mode cheat flag
00000000 =FFFFFFE3                  f_creditscheat:	equ $FFFFFFE3	; hidden credits & press start cheat flag
00000000 =FFFFFFE4                  v_title_dcount:	equ $FFFFFFE4	; number of times the d-pad is pressed on title screen (2 bytes)
00000000 =FFFFFFE6                  v_title_ccount:	equ $FFFFFFE6	; number of times C is pressed on title screen (2 bytes)
00000000                            
00000000 =FFFFFFF0                  f_demo:		equ $FFFFFFF0	; demo mode flag (0 = no; 1 = yes; $8001 = ending) (2 bytes)
00000000 =FFFFFFF2                  v_demonum:	equ $FFFFFFF2	; demo level number (not the same as the level number) (2 bytes)
00000000 =FFFFFFF4                  v_creditsnum:	equ $FFFFFFF4	; credits index number (2 bytes)
00000000 =FFFFFFF8                  v_megadrive:	equ $FFFFFFF8	; Megadrive machine type
00000000 =FFFFFFFA                  f_debugmode:	equ $FFFFFFFA	; debug mode flag (sometimes 2 bytes)
00000000 =FFFFFFFC                  v_init:		equ $FFFFFFFC	; 'init' text string (4 bytes)
00000000                            
00000000 =FFFFF5C3                  f_emeraldm:	equ $FFFFF5C3
00000000 =FFFFF5C4                  v_tagwater:    	equ $FFFFF5C4   ; TIS  
00000000 =FFFFFF92                  v_watersplashpos:    equ $FFFFFF92    ; TIS  
00000000 =00000039                  f_spindash	= $39
00000000 =FFFFF5C6                  v_Saved_music:	equ $FFFFF5C6
00000000 =FFFFF5C8                  v_rshield:	equ $FFFFF5C8	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5C9                  v_gshield:	equ $FFFFF5C9	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CA                  v_spshield:	equ $FFFFF5CA	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CD                  v_homingattack:	equ $FFFFF5CD
00000000                            
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000                            
00000000                            ; Ring managers-related stuff
00000000 =000001FF                  Max_Rings:	equ 511 ; default. maximum number possible is 759
00000000 =00000400                  Rings_Space:	equ (Max_Rings+1)*2
00000000                            
00000000 =FFFF8300                  Ring_Positions:	equ $FFFF8300
00000000 =FFFF8700                  Ring_start_addr_ROM:	equ Ring_Positions+Rings_Space
00000000 =FFFF8704                  Ring_end_addr_ROM:	equ Ring_Positions+Rings_Space+4
00000000 =FFFF8708                  Ring_start_addr_RAM:	equ Ring_Positions+Rings_Space+8
00000000 =FFFF870A                  Perfect_rings_left:		equ Ring_Positions+Rings_Space+$A
00000000 =FFFF870C                  Rings_manager_routine:		equ Ring_Positions+Rings_Space+$C
00000000 =FFFF870D                  v_level_started_flag:		equ Ring_Positions+Rings_Space+$D
00000000 =FFFF870E                  Ring_consumption_table:		equ Ring_Positions+Rings_Space+$E
00000000 =FFFF870E                  Ring_consumption_table:		equ Ring_Positions+Rings_Space+$E
00000000                            	include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reads ASCII strings and passes them to character generator
00000000                            ; ---------------------------------------------------------------------------
00000000                            asc        macro str
00000000                            ct =    0                            ; accumulates the total num of characters
00000000                                rept narg                        ; repeat for every argumeny
00000000                            lc =        0                        ; the position in the string
00000000                            
00000000                                dc.b strlen(\str)-1                    ; put the string length before the string itself
00000000                                rept strlen(\str)                    ; repeat for each character in string
00000000                            cc         substr lc+1,lc+1,\str                ; get a single character into cc
00000000                            arg =        '\cc'                        ; convert it to a character
00000000                                        char.b arg                ; put the character into the ROM (as byte)
00000000                            
00000000                            lc =        lc+1                        ; go to the next character
00000000                            ct =        ct+1                        ; increment character count
00000000                                    endr
00000000                                shift
00000000                                endr
00000000                                endm
00000000                            
00000000                            ; translates ASCII character to proper hex value
00000000                            char        macro c
00000000                                if c=' '
00000000                                    dc.\0 0                        ; example 1: single letters
00000000                            
00000000                                elseif c='*'
00000000                                    dc.\0 $1A                        ; example 1: single letters
00000000                            
00000000                                elseif (c>='0')&(c<='9')
00000000                                    dc.\0 \c-'0'+$20                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                elseif (c>='A')&(c<='Z')
00000000                                    dc.\0 \c-$41+$1E                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                else
00000000                                    dc.\0 \c                    ; example 3: any other character
00000000                                endif
00000000                                endm	
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align:	macro
00000000                            	if (narg=1)
00000000                            	dcb.b \1-(*%\1),0
00000000                            	else
00000000                            	dcb.b \1-(*%\1),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),(vdp_control_port).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeVRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$4000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeCRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$C000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA fill VRAM with a value
00000000                            ; input: value, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            fillVRAM:	macro value,length,loc
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.w	#$8F01,(a5)
00000000                            		move.l	#$94000000+((length&$FF00)<<8)+$9300+(length&$FF),(a5)
00000000                            		move.w	#$9780,(a5)
00000000                            		move.l	#$40000080+((loc&$3FFF)<<16)+((loc&$C000)>>14),(a5)
00000000                            		move.w	#value,(vdp_data_port).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
00000000                            ; input: source, destination, width [cells], height [cells]
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            copyTilemap:	macro source,loc,width,height
00000000                            		lea	(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		jsr	TilemapToVRAM
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; stop the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            stopZ80:	macro
00000000                            		move.w	#$100,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; wait for Z80 to stop
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            waitZ80:	macro
00000000                            	@wait:	btst	#0,(z80_bus_request).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reset the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; start the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            startZ80:	macro
00000000                            		move.w	#0,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; disable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            disable_ints:	macro
00000000                            		move	#$2700,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; enable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            enable_ints:	macro
00000000                            		move	#$2300,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; long conditional jumps
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            jhi:		macro loc
00000000                            		bls.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcc:		macro loc
00000000                            		bcs.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jhs:		macro loc
00000000                            		jcc	loc
00000000                            		endm
00000000                            
00000000                            jls:		macro loc
00000000                            		bhi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcs:		macro loc
00000000                            		bcc.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlo:		macro loc
00000000                            		jcs	loc
00000000                            		endm
00000000                            
00000000                            jeq:		macro loc
00000000                            		bne.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jne:		macro loc
00000000                            		beq.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jgt:		macro loc
00000000                            		ble.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jge:		macro loc
00000000                            		blt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jle:		macro loc
00000000                            		bgt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlt:		macro loc
00000000                            		bge.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jpl:		macro loc
00000000                            		bmi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jmi:		macro loc
00000000                            		bpl.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; check if object moves out of range
00000000                            ; input: location to jump to if out of range, x-axis pos (obX(a0) by default)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            out_of_range:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0		; approx distance between object and screen
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; play a sound effect or music
00000000                            ; input: track, terminate routine, branch or jump, move operand size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            music:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd1).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound
00000000                            		      else
00000000                            			bra.w	PlaySound
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound).l
00000000                            		      else
00000000                            			jmp	(PlaySound).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            sfx:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd2).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound_Special
00000000                            		      else
00000000                            			bra.w	PlaySound_Special
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound_Special).l
00000000                            		      else
00000000                            			jmp	(PlaySound_Special).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; bankswitch between SRAM and ROM
00000000                            ; (remember to enable SRAM in the header first!)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            gotoSRAM:	macro
00000000                            		move.b  #1,($A130F1).l
00000000                            		endm
00000000                            
00000000                            gotoROM:	macro
00000000                            		move.b  #0,($A130F1).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; compare the size of an index with ZoneCount constant
00000000                            ; (should be used immediately after the index)
00000000                            ; input: index address, element size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            zonewarning:	macro loc,elementsize
00000000                            	@end:
00000000                            		if (@end-loc)-(ZoneCount*elementsize)<>0
00000000                            		inform 1,"Size of \loc ($%h) does not match ZoneCount ($\#ZoneCount).",(@end-loc)/elementsize
00000000                            		endc
00000000                            		endm
00000000                            		endm
00000000                                include   "Debugger.asm"
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Error handling and debugging modules
00000000                            ; 2016-2017, Vladikcomper
00000000                            ; 2020 mod - AURORA FIELDS
00000000                            ; ---------------------------------------------------------------
00000000                            ; Debugging macros definitions file
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ----------------------------
00000000                            ; Arguments formatting flags
00000000                            ; ----------------------------
00000000                            
00000000                            ; General arguments format flags
00000000 =00000080                  hex		equ		$80				; flag to display as hexadecimal number
00000000 =00000090                  dec		equ		$90				; flag to display as decimal number
00000000 =000000A0                  bin		equ		$A0				; flag to display as binary number
00000000 =000000B0                  sym		equ		$B0				; flag to display as symbol (treat as offset, decode into symbol +displacement, if present)
00000000 =000000C0                  symdisp		equ		$C0				; flag to display as symbol's displacement alone (DO NOT USE, unless complex formatting is required, see notes below)
00000000 =000000DF                  str		equ		$DF				; flag to display as string (treat as offset, insert string from that offset)
00000000 =000000D0                  asm		equ		$D0				; flag to display as code (treat as offset, decode from that offset)
00000000                            
00000000                            ; NOTES:
00000000                            ;	* By default, the "sym" flag displays both symbol and displacement (e.g.: "Map_Sonic+$2E")
00000000                            ;		In case, you need a different formatting for the displacement part (different text color and such),
00000000                            ;		use "sym|split", so the displacement won't be displayed until symdisp is met
00000000                            ;	* The "symdisp" can only be used after the "sym|split" instance, which decodes offset, otherwise, it'll
00000000                            ;		display a garbage offset.
00000000                            ;	* No other argument format flags (hex, dec, bin, str) are allowed between "sym|split" and "symdisp",
00000000                            ;		otherwise, the "symdisp" results are undefined.
00000000                            ;	* When using "str" flag, the argument should point to string offset that will be inserted.
00000000                            ;		Arguments format flags CAN NOT be used in the string (as no arguments are meant to be here),
00000000                            ;		only console control flags (see below).
00000000                            ;	* The "asm" flag will use "setpat" flag to switch text color, and will reset pattern to normal again.
00000000                            ;		you must reapply any pattern you used before yourself.
00000000                            ;	* The "asm" flag will overwrite $FF0000-$FF0080, so be careful when viewing RAM.
00000000                            
00000000                            
00000000                            ; Additional flags ...
00000000                            ; ... for number formatters (hex, dec, bin)
00000000 =00000008                  signed	equ		8				; treat number as signed (display + or - before the number depending on sign)
00000000                            
00000000                            ; ... for symbol formatter (sym)
00000000 =00000008                  split	equ		8				; DO NOT write displacement (if present), skip and wait for "symdisp" flag to write it later (optional)
00000000 =00000004                  forced	equ		4				; display "<unknown>" if symbol was not found, otherwise, plain offset is displayed by the displacement formatter
00000000                            
00000000                            ; ... for symbol displacement formatter (symdisp)
00000000 =00000008                  weak	equ		8				; DO NOT write plain offset if symbol is displayed as "<unknown>"
00000000                            
00000000                            ; Argument type flags:
00000000                            ; - DO NOT USE in formatted strings processed by macros, as these are included automatically
00000000                            ; - ONLY USE when writting down strings manually with DC.B
00000000 =00000000                  byte	equ		0
00000000 =00000001                  word	equ		1
00000000 =00000003                  long	equ		3
00000000                            
00000000                            ; -----------------------
00000000                            ; Console control flags
00000000                            ; -----------------------
00000000                            
00000000                            ; Plain control flags: no arguments following
00000000 =000000E0                  endl	equ		$E0				; "End of line": flag for line break
00000000 =000000E6                  cr	equ		$E6				; "Carriage return": jump to the beginning of the line
00000000 =000000E8                  pal0	equ		$E8				; use palette line #0
00000000 =000000EA                  pal1	equ		$EA				; use palette line #1
00000000 =000000EC                  pal2	equ		$EC				; use palette line #2
00000000 =000000EE                  pal3	equ		$EE				; use palette line #3
00000000                            
00000000                            ; Parametrized control flags: followed by 1-byte argument
00000000 =000000F0                  setw	equ		$F0				; set line width: number of characters before automatic line break
00000000 =000000F4                  setoff	equ		$F4				; set tile offset: lower byte of base pattern, which points to tile index of ASCII character 00
00000000 =000000F8                  setpat	equ		$F8				; set tile pattern: high byte of base pattern, which determines palette flags and $100-tile section id
00000000 =000000FA                  setx	equ		$FA				; set x-position
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            RaiseError &
00000000                            
00000000                            	pea	*(pc)
00000000                            	move.w	sr, -(sp)
00000000                            	__FSTRING_GenerateArgumentsCode \string
00000000                            	jsr		ErrorHandler
00000000                            	__FSTRING_GenerateDecodedString \string
00000000                            	if strlen("\console_program")						; if console program offset is specified ...
00000000                            		dc.b	\opts+_eh_enter_console|(((*&1)^1)*_eh_align_offset)	; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            		even								; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            		jmp	\console_program					; ... an aligned "jmp" instruction that calls console program itself
00000000                            	else
00000000                            		dc.b	\opts+0							; otherwise, just specify \opts for error handler, +0 will generate dc.b 0 ...
00000000                            		even								; ... in case \opts argument is empty or skipped
00000000                            	endc
00000000                            	even
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            Console &
00000000                            
00000000                            	if strcmp("\0","write")|strcmp("\0","writeline")
00000000                            		move.w	sr, -(sp)
00000000                            		__FSTRING_GenerateArgumentsCode \1
00000000                            		movem.l	a0-a2/d7, -(sp)
00000000                            		if (__sp>0)
00000000                            			lea	4*4(sp), a2
00000000                            		endc
00000000                            		lea	@str\@(pc), a1
00000000                            		jsr	ErrorHandler.__global__console_\0\_formatted
00000000                            		movem.l	(sp)+, a0-a2/d7
00000000                            		if (__sp>8)
00000000                            			lea	__sp(sp), sp
00000000                            		elseif (__sp>0)
00000000                            			addq.w	#__sp, sp
00000000                            		endc
00000000                            		move.w	(sp)+, sr
00000000                            		bra.w	@instr_end\@
00000000                            	@str\@:
00000000                            		__FSTRING_GenerateDecodedString \1
00000000                            		even
00000000                            	@instr_end\@:
00000000                            
00000000                            	elseif strcmp("\0","run")
00000000                            		jsr	ErrorHandler.__extern__console_only
00000000                            		jsr	\1
00000000                            		bra.s	*
00000000                            
00000000                            	elseif strcmp("\0","setxy")
00000000                            		move.w	sr, -(sp)
00000000                            		movem.l	d0-d1, -(sp)
00000000                            		move.w	\2, -(sp)
00000000                            		move.w	\1, -(sp)
00000000                            		jsr	ErrorHandler.__global__console_setposasxy_stack
00000000                            		addq.w	#4, sp
00000000                            		movem.l	(sp)+, d0-d1
00000000                            		move.w	(sp)+, sr
00000000                            
00000000                            	elseif strcmp("\0","breakline")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr	ErrorHandler.__global__console_startnewline
00000000                            		move.w	(sp)+, sr
00000000                            
00000000                            	else
00000000                            		inform	2,"""\0"" isn't a member of ""Console"""
00000000                            
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __ErrorMessage &
00000000                            		__FSTRING_GenerateArgumentsCode \string
00000000                            		jsr		ErrorHandler
00000000                            		__FSTRING_GenerateDecodedString \string
00000000                            		dc.b	\opts+0
00000000                            		even
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateArgumentsCode &
00000000                            
00000000                            	__pos:	set 	instr(\string,'%<')				; token position
00000000                            	__stack:set	0						; size of actual stack
00000000                            	__sp:	set	0						; stack displacement
00000000                            
00000000                            	; Parse string itself
00000000                            	while (__pos)
00000000                            
00000000                            		; Retrive expression in brackets following % char
00000000                                	__endpos:	set	instr(__pos+1,\string,'>')
00000000                                	__midpos:	set	instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__substr:	substr	__pos+1+1,__endpos-1,\string		; .type ea param
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string		; .type
00000000                            
00000000                            		; Expression is an effective address (e.g. %(.w d0 hex) )
00000000                            		if "\__type">>8="."
00000000                            			__operand:	substr	__pos+1+1,__midpos-1,\string	; .type ea
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string	; param
00000000                            
00000000                            			if "\__type"=".b"
00000000                            				pushp	"move\__operand\,1(sp)"
00000000                            				pushp	"subq.w	#2, sp"
00000000                            				__stack: = __stack+2
00000000                            				__sp: = __sp+2
00000000                            
00000000                            			elseif "\__type"=".w"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+2
00000000                            
00000000                            			elseif "\__type"=".l"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+4
00000000                            
00000000                            			else
00000000                            				fatal 'Unrecognized type in string operand: %<\__substr>'
00000000                            			endc
00000000                            		endc
00000000                            
00000000                            		__pos:	set	instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            
00000000                            	; Generate stack code
00000000                            	rept __stack
00000000                            		popp	__command
00000000                            		\__command
00000000                            	endr
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateDecodedString &
00000000                            
00000000                            	__lpos:	set	1						; start position
00000000                            	__pos:	set 	instr(\string,'%<')				; token position
00000000                            
00000000                            	while (__pos)
00000000                            
00000000                            		; Write part of string before % token
00000000                            		__substr:	substr	__lpos,__pos-1,\string
00000000                            		dc.b	"\__substr"
00000000                            
00000000                            		; Retrive expression in brakets following % char
00000000                                	__endpos:	set		instr(__pos+1,\string,'>')
00000000                                	__midpos:	set		instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string		; .type
00000000                            
00000000                            		; Expression is an effective address (e.g. %<.w d0 hex> )
00000000                            		if "\__type">>8="."
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string	; param
00000000                            			if strlen("\__param")<1
00000000                            				__param: substr ,,"hex"			; if param is ommited, set it to "hex"
00000000                            			endc
00000000                            			if "\__type"=".b"
00000000                            				dc.b	\__param
00000000                            			elseif "\__type"=".w"
00000000                            				dc.b	\__param|1
00000000                            			else
00000000                            				dc.b	\__param|3
00000000                            			endc
00000000                            
00000000                            		; Expression is an inline constant (e.g. %<endl> )
00000000                            		else
00000000                            			__substr:	substr	__pos+1+1,__endpos-1,\string
00000000                            			dc.b	\__substr
00000000                            		endc
00000000                            
00000000                            		__lpos:	set	__endpos+1
00000000                            		__pos:	set	instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            
00000000                            	; Write part of string before the end
00000000                            	__substr:	substr	__lpos,,\string
00000000                            	dc.b	"\__substr"
00000000                            	dc.b	0
00000000                            	endm
00000000                            	endm
00000000                            	
00000000 =00000000                  EnableSRAM:	equ 0	; change to 1 to enable SRAM
00000000 =00000001                  BackupSRAM:	equ 1
00000000 =00000003                  AddressSRAM:	equ 3	; 0 = odd+even; 2 = even only; 3 = odd only
00000000                            
00000000                            ; Change to 0 to build the original version of the game, dubbed REV00
00000000                            ; Change to 1 to build the later vesion, dubbed REV01, which includes various bugfixes and enhancements
00000000                            ; Change to 2 to build the version from Sonic Mega Collection, dubbed REVXB, which fixes the infamous "spike bug"
00000000 =00000002                  Revision:	equ 2
00000000                            
00000000 =00000006                  ZoneCount:	equ 6	; discrete zones are: GHZ, MZ, SYZ, LZ, SLZ, and SBZ
00000000                            
00000000 =00000000                  OptimiseSound:	equ 0	; change to 1 to optimise sound queuing
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00                  Vectors:	dc.l v_systemstack&$FFFFFF	; Initial stack pointer value
00000004 0000 0000                  		dc.l EntryPoint			; Start of program
00000008 0000 0000                  		dc.l BusError			; Bus error
0000000C 0000 0000                  		dc.l AddressError		; Address error (4)
00000010 0000 0000                  		dc.l IllegalInstr		; Illegal instruction
00000014 0000 0000                  		dc.l ZeroDivide			; Division by zero
00000018 0000 0000                  		dc.l ChkInstr			; CHK exception
0000001C 0000 0000                  		dc.l TrapvInstr			; TRAPV exception (8)
00000020 0000 0000                  		dc.l PrivilegeViol		; Privilege violation
00000024 0000 0000                  		dc.l Trace				; TRACE exception
00000028 0000 0000                  		dc.l Line1010Emu		; Line-A emulator
0000002C 0000 0000                  		dc.l Line1111Emu		; Line-F emulator (12)
00000030 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000034 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000038 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000003C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (16)
00000040 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000044 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000048 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000004C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (20)
00000050 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000054 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000058 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000005C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (24)
00000060 0000 0000                  		dc.l ErrorExcept		; Spurious exception
00000064 0000 0000                  		dc.l ErrorTrap			; IRQ level 1
00000068 0000 0000                  		dc.l ErrorTrap			; IRQ level 2
0000006C 0000 0000                  		dc.l ErrorTrap			; IRQ level 3 (28)
00000070 0000 0000                  		dc.l HBlank				; IRQ level 4 (horizontal retrace interrupt)
00000074 0000 0000                  		dc.l ErrorTrap			; IRQ level 5
00000078 0000 0000                  		dc.l VBlank				; IRQ level 6 (vertical retrace interrupt)
0000007C 0000 0000                  		dc.l ErrorTrap			; IRQ level 7 (32)
00000080 0000 0000                  		dc.l ErrorTrap			; TRAP #00 exception
00000084 0000 0000                  		dc.l ErrorTrap			; TRAP #01 exception
00000088 0000 0000                  		dc.l ErrorTrap			; TRAP #02 exception
0000008C 0000 0000                  		dc.l ErrorTrap			; TRAP #03 exception (36)
00000090 0000 0000                  		dc.l ErrorTrap			; TRAP #04 exception
00000094 0000 0000                  		dc.l ErrorTrap			; TRAP #05 exception
00000098 0000 0000                  		dc.l ErrorTrap			; TRAP #06 exception
0000009C 0000 0000                  		dc.l ErrorTrap			; TRAP #07 exception (40)
000000A0 0000 0000                  		dc.l ErrorTrap			; TRAP #08 exception
000000A4 0000 0000                  		dc.l ErrorTrap			; TRAP #09 exception
000000A8 0000 0000                  		dc.l ErrorTrap			; TRAP #10 exception
000000AC 0000 0000                  		dc.l ErrorTrap			; TRAP #11 exception (44)
000000B0 0000 0000                  		dc.l ErrorTrap			; TRAP #12 exception
000000B4 0000 0000                  		dc.l ErrorTrap			; TRAP #13 exception
000000B8 0000 0000                  		dc.l ErrorTrap			; TRAP #14 exception
000000BC 0000 0000                  		dc.l ErrorTrap			; TRAP #15 exception (48)
000000C0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000CC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000DC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000E0                            loc_E0:
000000E0                            		; Relocated code from Spik_Hurt. REVXB was a nasty hex-edit.
000000E0 2628 000C                  		move.l	obY(a0),d3
000000E4 3028 0012                  		move.w	obVelY(a0),d0
000000E8 48C0                       		ext.l	d0
000000EA E180                       		asl.l	#8,d0
000000EC 4EF9 0000 0000             		jmp	(loc_D5A2).l
000000F2                            
000000F2 0000                       		dc.w ErrorTrap
000000F4 0000 0000                  		dc.l ErrorTrap
000000F8 0000 0000                  		dc.l ErrorTrap
000000FC 0000 0000                  		dc.l ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console1:	dc.b "SEGA MEGA DRIVE " ; Hardware system ID (Console name)
00000110 2843 2953 4547 4120 3139+  Date:		dc.b "(C)SEGA 1991.APR" ; Copyright holder and release date (generally year)
00000120 534F 4E49 4320 5355 4E56+  Title_Local:	dc.b "SONIC SUNVENTURE                                " ; Domestic name
00000150 534F 4E49 4320 5355 4E56+  Title_Int:	dc.b "SONIC SUNVENTURE                                " ; International name
00000180 474D 2030 3030 3034 3034+  			dc.b "GM 00004049-01" ; Serial/version number (Rev non-0)
0000018E 0000                       Checksum: dc.w $0
00000190 4A20 2020 2020 2020 2020+  		dc.b "J               " ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; Start address of ROM
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; End address of ROM
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; Start address of RAM
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; End address of RAM
000001B0 2020 2020                  		dc.l $20202020
000001B4 2020 2020                  		dc.l $20202020		; SRAM start ($200001)
000001B8 2020 2020                  		dc.l $20202020		; SRAM end ($20xxxx)
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b "                                                    " ; Notes (unused, anything can be put in this space, but it has to be 52 bytes.)
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b "JUE             " ; Region (Country code)
00000200                            EndOfHeader:
00000200                            
00000200                            ; ===========================================================================
00000200                            ; Crash/Freeze the 68000. Unlike Sonic 2, Sonic 1 uses the 68000 for playing music, so it stops too
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	(z80_port_1_control).l ; test port A & B control registers
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	(z80_expansion_control).l ; test port C control register
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	SkipSetup ; Skip the VDP and Z80 setup code if port A, B or C is ok...?
00000216 4BFA 0000                  		lea	SetupValues(pc),a5	; Load setup values array address.
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version (from $A10001)
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity	; If the console has no TMSS, skip the security stuff.
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1) ; move "SEGA" to TMSS register ($A14000)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0	; clear write-pending flag in VDP to prevent issues if the 68k has been reset in the middle of writing a command long word to the VDP.
00000236 7000                       		moveq	#0,d0	; clear d0
00000238 2C40                       		movea.l	d0,a6	; clear a6
0000023A 4E66                       		move.l	a6,usp	; set usp to $0
0000023C                            
0000023C 7217                       		moveq	#$17,d1
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248                            		
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the VRAM
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254                            
00000254 7425                       		moveq	#$25,d2
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C                            		
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)	; clear 4 bytes of RAM
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; repeat until the entire RAM is clear
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment mode
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C                            
0000026C 761F                       		moveq	#$1F,d3	; set repeat times
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)	; clear 2 palettes
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; repeat until the entire CRAM is clear
00000274 289D                       		move.l	(a5)+,(a4)	; set VDP to VSRAM write
00000276                            
00000276 7813                       		moveq	#$13,d4
00000278                            ClrVSRAMLoop:
00000278 2680                       		move.l	d0,(a3)	; clear 4 bytes of VSRAM.
0000027A 51CC FFFC                  		dbf	d4,ClrVSRAMLoop	; repeat until the entire VSRAM is clear
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop	; repeat for other channels
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear all registers
0000028E 46FC 2700                  		disable_ints
00000292                            
00000292                            SkipSetup:
00000292 6000                       		bra.s	GameProgram	; begin game
00000294                            
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; VDP register start number
00000296 3FFF                       		dc.w $3FFF		; size of RAM/4
00000298 0100                       		dc.w $100		; VDP register diff
0000029A                            
0000029A 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l z80_bus_request	; Z80 bus request
000002A2 00A1 1200                  		dc.l z80_reset		; Z80 reset
000002A6 00C0 0000                  		dc.l vdp_data_port	; VDP data
000002AA 00C0 0004                  		dc.l vdp_control_port	; VDP control
000002AE                            
000002AE 04                         		dc.b 4			; VDP $80 - 8-colour mode
000002AF 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
000002B0 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
000002B1 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
000002B2 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
000002B3 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
000002B4 00                         		dc.b 0			; VDP $86 - unused
000002B5 00                         		dc.b 0			; VDP $87 - background colour
000002B6 00                         		dc.b 0			; VDP $88 - unused
000002B7 00                         		dc.b 0			; VDP $89 - unused
000002B8 FF                         		dc.b 255		; VDP $8A - HBlank register
000002B9 00                         		dc.b 0			; VDP $8B - full screen scroll
000002BA 81                         		dc.b $81		; VDP $8C - 40 cell display
000002BB 37                         		dc.b ($DC00>>10)	; VDP $8D - hscroll table address
000002BC 00                         		dc.b 0			; VDP $8E - unused
000002BD 01                         		dc.b 1			; VDP $8F - VDP increment
000002BE 01                         		dc.b 1			; VDP $90 - 64 cell hscroll size
000002BF 00                         		dc.b 0			; VDP $91 - window h position
000002C0 00                         		dc.b 0			; VDP $92 - window v position
000002C1 FFFF                       		dc.w $FFFF		; VDP $93/94 - DMA length
000002C3 0000                       		dc.w 0			; VDP $95/96 - DMA source
000002C5 80                         		dc.b $80		; VDP $97 - DMA fill VRAM
000002C6 4000 0080                  		dc.l $40000080		; VRAM address 0
000002CA                            
000002CA AF                         		dc.b $AF		; xor	a
000002CB 01D9 1F                    		dc.b $01, $D9, $1F	; ld	bc,1fd9h
000002CE 1127 00                    		dc.b $11, $27, $00	; ld	de,0027h
000002D1 2126 00                    		dc.b $21, $26, $00	; ld	hl,0026h
000002D4 F9                         		dc.b $F9		; ld	sp,hl
000002D5 77                         		dc.b $77		; ld	(hl),a
000002D6 EDB0                       		dc.b $ED, $B0		; ldir
000002D8 DDE1                       		dc.b $DD, $E1		; pop	ix
000002DA FDE1                       		dc.b $FD, $E1		; pop	iy
000002DC ED47                       		dc.b $ED, $47		; ld	i,a
000002DE ED4F                       		dc.b $ED, $4F		; ld	r,a
000002E0 D1                         		dc.b $D1		; pop	de
000002E1 E1                         		dc.b $E1		; pop	hl
000002E2 F1                         		dc.b $F1		; pop	af
000002E3 08                         		dc.b $08		; ex	af,af'
000002E4 D9                         		dc.b $D9		; exx
000002E5 C1                         		dc.b $C1		; pop	bc
000002E6 D1                         		dc.b $D1		; pop	de
000002E7 E1                         		dc.b $E1		; pop	hl
000002E8 F1                         		dc.b $F1		; pop	af
000002E9 F9                         		dc.b $F9		; ld	sp,hl
000002EA F3                         		dc.b $F3		; di
000002EB ED56                       		dc.b $ED, $56		; im1
000002ED 36E9                       		dc.b $36, $E9		; ld	(hl),e9h
000002EF E9                         		dc.b $E9		; jp	(hl)
000002F0                            
000002F0 8104                       		dc.w $8104		; VDP display mode
000002F2 8F02                       		dc.w $8F02		; VDP increment
000002F4 C000 0000                  		dc.l $C0000000		; CRAM write mode
000002F8 4000 0010                  		dc.l $40000010		; VSRAM address 0
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	(vdp_control_port).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',(v_init).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#EndOfHeader,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            	@loop:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bhs.s	@loop
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare checksum in header to ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E                            
0000033E                            	CheckSumOk:
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            	@clearRAM:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($FE00-$FFFF)
0000034E                            
0000034E 1039 00A1 0001             		move.b	(z80_version).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,(v_megadrive).w ; get region setting
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',(v_init).w ; set flag so checksum won't run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            	@clearRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($0000-$FDFF)
00000376 4EB9 0000 0000                     jsr	(InitDMAQueue).l	
0000037C 6100 0000                  		bsr.w	VDPSetupGame
00000380 6100 0000                  		bsr.w	SoundDriverLoad
00000384 6100 0000                  		bsr.w	JoypadInit
00000388 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set Game Mode to Sega Screen
0000038E                            
0000038E                            MainGameLoop:
0000038E 4EB9 0000 0000             		jsr		ReadJoypads
00000394 1038 F600                  		move.b	(v_gamemode).w,d0 ; load Game Mode
00000398 0240 007C                  		andi.w	#$7C,d0	; limit Game Mode value to $1C max (change to a maximum of 7C to add more game modes)
0000039C 207B 0000                  		movea.l	GameModeArray(pc,d0.w),a0 ; jump to apt location in ROM
000003A0 4E90                       		jsr		(a0)
000003A2 60EA                       		bra.s	MainGameLoop	; loop indefinitely
000003A4                            ; ===========================================================================
000003A4                            ; ---------------------------------------------------------------------------
000003A4                            ; Main game mode array
000003A4                            ; ---------------------------------------------------------------------------
000003A4                            
000003A4                            GameModeArray:
000003A4 0000 0000                  ptr_GM_Sega:		dc.l	GM_Sega		; Sega Screen ($00)
000003A8 0000 0000                  ptr_GM_Title:		dc.l	GM_Title	; Title	Screen ($04)
000003AC 0000 0000                  ptr_GM_Demo:		dc.l	GM_Level	; Demo Mode ($08)
000003B0 0000 0000                  ptr_GM_Level:		dc.l	GM_Level	; Normal Level ($0C)
000003B4 0000 0000                  ptr_GM_Special:		dc.l	GM_Special	; Special Stage	($10)
000003B8 0000 0000                  ptr_GM_Cont:		dc.l	GM_Continue	; Continue Screen ($14)
000003BC 0000 0000                  ptr_GM_Ending:		dc.l	GM_Ending	; End of game sequence ($18)
000003C0 0000 0000                  ptr_GM_Credits:		dc.l	GM_Credits	; Credits ($1C)
000003C4 0000 0000                  ptr_GM_MenuScreen:	dc.l	MenuScreen	; Credits ($20)
000003C8 4E75                       		rts	
000003CA                            ; ===========================================================================
000003CA                            
000003CA                            CheckSumError:
000003CA 6100 0000                  		bsr.w	VDPSetupGame
000003CE 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
000003D8 7E3F                       		moveq	#$3F,d7
000003DA                            
000003DA                            	@fillred:
000003DA 33FC 000E 00C0 0000        		move.w	#cRed,(vdp_data_port).l ; fill palette with red
000003E2 51CF FFF6                  		dbf	d7,@fillred	; repeat $3F more times
000003E6                            
000003E6                            	@endlessloop:
000003E6 60FE                       		bra.s	@endlessloop
000003E8                            ; ===========================================================================
000003E8                            
000003E8                            
000003E8                            ; ===========================================================================
000003E8                            
000003E8                            loc_43A:
000003E8 46FC 2700                  		disable_ints
000003EC 544F                       		addq.w	#2,sp
000003EE 21DF FC40                  		move.l	(sp)+,(v_spbuffer).w
000003F2 544F                       		addq.w	#2,sp
000003F4 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
000003FA 6100 0000                  		bsr.w	ShowErrorMessage
000003FE 202F 0002                  		move.l	2(sp),d0
00000402 6100 0000                  		bsr.w	ShowErrorValue
00000406 2038 FC40                  		move.l	(v_spbuffer).w,d0
0000040A 6100 0000                  		bsr.w	ShowErrorValue
0000040E 6000                       		bra.s	loc_478
00000410                            ; ===========================================================================
00000410                            
00000410                            loc_462:
00000410 46FC 2700                  		disable_ints
00000414 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
0000041A 6100 0000                  		bsr.w	ShowErrorMessage
0000041E 202F 0002                  		move.l	2(sp),d0
00000422 6100 0000                  		bsr.w	ShowErrorValue
00000426                            
00000426                            loc_478:
00000426 6100 0000                  		bsr.w	ErrorWaitForC
0000042A 4CF8 FFFF FC00             		movem.l	(v_regbuffer).w,d0-a7
00000430 46FC 2300                  		enable_ints
00000434 4E73                       		rte	
00000436                            
00000436                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000436                            
00000436                            
00000436                            ShowErrorMessage:
00000436 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00000446 41F9 0000 0000             		lea	(Art_Text).l,a0
0000044C 323C 027F                  		move.w	#$27F,d1
00000450                            	@loadgfx:
00000450 3C98                       		move.w	(a0)+,(a6)
00000452 51C9 FFFC                  		dbf	d1,@loadgfx
00000456                            
00000456 7000                       		moveq	#0,d0		; clear	d0
00000458 1038 FC44                  		move.b	(v_errortype).w,d0 ; load error code
0000045C 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000460 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
0000046E 7212                       		moveq	#$12,d1		; number of characters (minus 1)
00000470                            
00000470                            	@showchars:
00000470 7000                       		moveq	#0,d0
00000472 1018                       		move.b	(a0)+,d0
00000474 0640 0790                  		addi.w	#$790,d0
00000478 3C80                       		move.w	d0,(a6)
0000047A 51C9 FFF4                  		dbf	d1,@showchars	; repeat for number of characters
0000047E 4E75                       		rts	
00000480                            ; End of function ShowErrorMessage
00000480                            
00000480                            ; ===========================================================================
00000480 0000 0000                  ErrorText:	dc.w @exception-ErrorText, @bus-ErrorText
00000484 0000 0000                  		dc.w @address-ErrorText, @illinstruct-ErrorText
00000488 0000 0000                  		dc.w @zerodivide-ErrorText, @chkinstruct-ErrorText
0000048C 0000 0000                  		dc.w @trapv-ErrorText, @privilege-ErrorText
00000490 0000 0000                  		dc.w @trace-ErrorText, @line1010-ErrorText
00000494 0000                       		dc.w @line1111-ErrorText
00000496 4552 524F 5220 4558 4345+  @exception:	dc.b "ERROR EXCEPTION    "
000004A9 4255 5320 4552 524F 5220+  @bus:		dc.b "BUS ERROR          "
000004BC 4144 4452 4553 5320 4552+  @address:	dc.b "ADDRESS ERROR      "
000004CF 494C 4C45 4741 4C20 494E+  @illinstruct:	dc.b "ILLEGAL INSTRUCTION"
000004E2 4045 524F 2044 4956 4944+  @zerodivide:	dc.b "@ERO DIVIDE        "
000004F5 4348 4B20 494E 5354 5255+  @chkinstruct:	dc.b "CHK INSTRUCTION    "
00000508 5452 4150 5620 494E 5354+  @trapv:		dc.b "TRAPV INSTRUCTION  "
0000051B 5052 4956 494C 4547 4520+  @privilege:	dc.b "PRIVILEGE VIOLATION"
0000052E 5452 4143 4520 2020 2020+  @trace:		dc.b "TRACE              "
00000541 4C49 4E45 2031 3031 3020+  @line1010:	dc.b "LINE 1010 EMULATOR "
00000554 4C49 4E45 2031 3131 3120+  @line1111:	dc.b "LINE 1111 EMULATOR "
00000568 00                         		even
00000568                            
00000568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000568                            
00000568                            
00000568                            ShowErrorValue:
00000568 3CBC 07CA                  		move.w	#$7CA,(a6)	; display "$" symbol
0000056C 7407                       		moveq	#7,d2
0000056E                            
0000056E                            	@loop:
0000056E E998                       		rol.l	#4,d0
00000570 6100                       		bsr.s	@shownumber	; display 8 numbers
00000572 51CA FFFA                  		dbf	d2,@loop
00000576 4E75                       		rts	
00000578                            ; End of function ShowErrorValue
00000578                            
00000578                            
00000578                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000578                            
00000578                            
00000578                            @shownumber:
00000578 3200                       		move.w	d0,d1
0000057A 0241 000F                  		andi.w	#$F,d1
0000057E 0C41 000A                  		cmpi.w	#$A,d1
00000582 6500                       		blo.s	@chars0to9
00000584 5E41                       		addq.w	#7,d1		; add 7 for characters A-F
00000586                            
00000586                            	@chars0to9:
00000586 0641 07C0                  		addi.w	#$7C0,d1
0000058A 3C81                       		move.w	d1,(a6)
0000058C 4E75                       		rts	
0000058E                            ; End of function sub_5CA
0000058E                            
0000058E                            
0000058E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000058E                            
0000058E                            
0000058E                            ErrorWaitForC:
0000058E 6100 0000                  		bsr.w	ReadJoypads
00000592 0C38 0020 F605             		cmpi.b	#btnC,(v_jpadpress1).w ; is button C pressed?
00000598 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000059C 4E75                       		rts	
0000059E                            ; End of function ErrorWaitForC
0000059E                            
0000059E                            ; ===========================================================================
0000059E                            
0000059E                            Art_Text:	incbin	"artunc\menutext.bin" ; text used in level select and debug mode
00000ABE                            		even
00000ABE                            
00000ABE                            ; ---------------------------------------------------------------------------
00000ABE                            ; Vertical interrupt
00000ABE                            ; ---------------------------------------------------------------------------
00000ABE                            
00000ABE                            VBlank:
00000ABE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AC2 4A38 F62A                  		tst.b	(v_vbla_routine).w
00000AC6 6700                       		beq.s	VBla_00
00000AC8 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000ACE 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00000AD8 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l ; send screen y-axis pos. to VSRAM
00000AE0 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000AE6 6700                       		beq.s	@notPAL		; if not, branch
00000AE8                            
00000AE8 303C 0700                  		move.w	#$700,d0
00000AEC                            	@waitPAL:
00000AEC 51C8 FFFE                  		dbf	d0,@waitPAL ; wait here in a loop doing nothing for a while...
00000AF0                            
00000AF0                            	@notPAL:
00000AF0 1038 F62A                  		move.b	(v_vbla_routine).w,d0
00000AF4 11FC 0000 F62A             		move.b	#0,(v_vbla_routine).w
00000AFA 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w
00000B00 0240 003E                  		andi.w	#$3E,d0
00000B04 303B 0000                  		move.w	VBla_Index(pc,d0.w),d0
00000B08 4EBB 0000                  		jsr	VBla_Index(pc,d0.w)
00000B0C                            
00000B0C                            VBla_Music:
00000B0C 4EB9 0000 0000             		jsr	(UpdateMusic).l
00000B12                            
00000B12                            VBla_Exit:
00000B12 52B8 FE0C                  		addq.l	#1,(v_vbla_count).w
00000B16 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B1A 4E73                       		rte	
00000B1C                            ; ===========================================================================
00000B1C 0000 0000                  VBla_Index:	dc.w VBla_00-VBla_Index, VBla_02-VBla_Index
00000B20 0000 0000                  		dc.w VBla_04-VBla_Index, VBla_06-VBla_Index
00000B24 0000 0000                  		dc.w VBla_08-VBla_Index, VBla_0A-VBla_Index
00000B28 0000 0000                  		dc.w VBla_0C-VBla_Index, VBla_0E-VBla_Index
00000B2C 0000 0000                  		dc.w VBla_10-VBla_Index, VBla_12-VBla_Index
00000B30 0000 0000                  		dc.w VBla_14-VBla_Index, VBla_16-VBla_Index
00000B34 0000                       		dc.w VBla_0C-VBla_Index
00000B36                            ; ===========================================================================
00000B36                            
00000B36                            VBla_00:
00000B36 0C38 0000 F600             		cmpi.b	#$80+id_Level,(v_gamemode).w
00000B3C 6700                       		beq.s	@islevel
00000B3E 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w ; is game on a level?
00000B44 6600 FFC6                  		bne.w	VBla_Music	; if not, branch
00000B48                            
00000B48                            	@islevel:
00000B48 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ ?
00000B4E 6600 FFBC                  		bne.w	VBla_Music	; if not, branch
00000B52                            
00000B52 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000B58 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000B5E 6700                       		beq.s	@notPAL		; if not, branch
00000B60                            
00000B60 303C 0700                  		move.w	#$700,d0
00000B64                            	@waitPAL:
00000B64 51C8 FFFE                  		dbf	d0,@waitPAL
00000B68                            
00000B68                            	@notPAL:
00000B68 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w ; set HBlank flag
00000B6E 33FC 0100 00A1 1100        		stopZ80
00000B76 0839 0000 00A1 1100 66F6   		waitZ80
00000B80 4A38 F64E                  		tst.b	(f_wtr_state).w	; is water above top of screen?
00000B84 6600                       		bne.s	@waterabove 	; if yes, branch
00000B86                            
00000B86 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000BAA 6000                       		bra.s	@waterbelow
00000BAC                            
00000BAC                            @waterabove:
00000BAC 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000BD0                            
00000BD0                            	@waterbelow:
00000BD0 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000BD4 33FC 0000 00A1 1100        		startZ80
00000BDC 6000 FF2E                  		bra.w	VBla_Music
00000BE0                            ; ===========================================================================
00000BE0                            
00000BE0                            VBla_02:
00000BE0 6100 0000                  		bsr.w	sub_106E
00000BE4                            
00000BE4                            VBla_14:
00000BE4 4A78 F614                  		tst.w	(v_demolength).w
00000BE8 6700 0000                  		beq.w	@end
00000BEC 5378 F614                  		subq.w	#1,(v_demolength).w
00000BF0                            
00000BF0                            	@end:
00000BF0 4E75                       		rts	
00000BF2                            ; ===========================================================================
00000BF2                            
00000BF2                            VBla_04:
00000BF2 6100 0000                  		bsr.w	sub_106E
00000BF6 6100 0000                  		bsr.w	LoadTilesAsYouMove_BGOnly
00000BFA 4EB9 0000 0000             		jsr 	ProcessDMAQueue		
00000C00 6100 0000                  		bsr.w	sub_1642
00000C04 4A78 F614                  		tst.w	(v_demolength).w
00000C08 6700 0000                  		beq.w	@end
00000C0C 5378 F614                  		subq.w	#1,(v_demolength).w
00000C10                            
00000C10                            	@end:
00000C10 4E75                       		rts	
00000C12                            ; ===========================================================================
00000C12                            
00000C12                            VBla_06:
00000C12 6100 0000                  		bsr.w	sub_106E
00000C16 4E75                       		rts	
00000C18                            ; ===========================================================================
00000C18                            
00000C18                            VBla_10:
00000C18 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game on special stage?
00000C1E 6700 0000                  		beq.w	VBla_0A		; if yes, branch
00000C22                            
00000C22                            VBla_08:
00000C22 33FC 0100 00A1 1100        		stopZ80
00000C2A 0839 0000 00A1 1100 66F6   		waitZ80
00000C34 6100 0000                  		bsr.w	ReadJoypads
00000C38 4A38 F64E                  		tst.b	(f_wtr_state).w
00000C3C 6600                       		bne.s	@waterabove
00000C3E                            
00000C3E 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000C62 6000                       		bra.s	@waterbelow
00000C64                            
00000C64                            @waterabove:
00000C64 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000C88                            
00000C88                            	@waterbelow:
00000C88 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000C8C                            
00000C8C 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000CB0 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000CD4 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000CDA                            
00000CDA                            	@nochg:
00000CDA 33FC 0000 00A1 1100        		startZ80
00000CE2 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000CE8 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000CEE 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000CF4 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000CFA 0C38 0060 F625             		cmpi.b	#96,(v_hbla_line).w
00000D00 6400                       		bhs.s	Demo_Time
00000D02 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D08 588F                       		addq.l	#4,sp
00000D0A 6000 FE06                  		bra.w	VBla_Exit
00000D0E                            
00000D0E                            ; ---------------------------------------------------------------------------
00000D0E                            ; Subroutine to	run a demo for an amount of time
00000D0E                            ; ---------------------------------------------------------------------------
00000D0E                            
00000D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D0E                            
00000D0E                            
00000D0E                            Demo_Time:
00000D0E 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D12 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000D18 4EB9 0000 0000             		jsr	(HUD_Update).l
00000D1E 6100 0000                  		bsr.w	ProcessDPLC2
00000D22 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00000D26 6700 0000                  		beq.w	@end		; if not, branch
00000D2A 5378 F614                  		subq.w	#1,(v_demolength).w ; subtract 1 from time left
00000D2E                            
00000D2E                            	@end:
00000D2E 4E75                       		rts	
00000D30                            ; End of function Demo_Time
00000D30                            
00000D30                            ; ===========================================================================
00000D30                            
00000D30                            VBla_0A:
00000D30 33FC 0100 00A1 1100        		stopZ80
00000D38 0839 0000 00A1 1100 66F6   		waitZ80
00000D42 6100 0000                  		bsr.w	ReadJoypads
00000D46 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000D6A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000D8E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000DB2 33FC 0000 00A1 1100        		startZ80
00000DBA 6100 0000                  		bsr.w	PalCycle_SS
00000DBE 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000DC4                            
00000DC4                            	@nochg:
00000DC4 4A78 F614                  		tst.w	(v_demolength).w	; is there time left on the demo?
00000DC8 6700 0000                  		beq.w	@end	; if not, return
00000DCC 5378 F614                  		subq.w	#1,(v_demolength).w	; subtract 1 from time left in demo
00000DD0                            
00000DD0                            	@end:
00000DD0 4E75                       		rts	
00000DD2                            ; ===========================================================================
00000DD2                            
00000DD2                            VBla_0C:
00000DD2 33FC 0100 00A1 1100        		stopZ80
00000DDA 0839 0000 00A1 1100 66F6   		waitZ80
00000DE4 6100 0000                  		bsr.w	ReadJoypads
00000DE8 4A38 F64E                  		tst.b	(f_wtr_state).w
00000DEC 6600                       		bne.s	@waterabove
00000DEE                            
00000DEE 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000E12 6000                       		bra.s	@waterbelow
00000E14                            
00000E14                            @waterabove:
00000E14 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000E38                            
00000E38                            	@waterbelow:
00000E38 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000E3C 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000E60 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000E84 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E8A                            
00000E8A                            	@nochg:
00000E8A 33FC 0000 00A1 1100        		startZ80
00000E92 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000E98 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000E9E 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000EA4 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000EAA 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000EAE 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000EB4 4EB9 0000 0000             		jsr	(HUD_Update).l
00000EBA 6100 0000                  		bsr.w	sub_1642
00000EBE 4E75                       		rts	
00000EC0                            ; ===========================================================================
00000EC0                            
00000EC0                            VBla_0E:
00000EC0 6100 0000                  		bsr.w	sub_106E
00000EC4 5238 F628                  		addq.b	#1,($FFFFF628).w
00000EC8 11FC 000E F62A             		move.b	#$E,(v_vbla_routine).w
00000ECE 4E75                       		rts	
00000ED0                            ; ===========================================================================
00000ED0                            
00000ED0                            VBla_12:
00000ED0 6100 0000                  		bsr.w	sub_106E
00000ED4 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000ED8 6000 0000                  		bra.w	sub_1642
00000EDC                            ; ===========================================================================
00000EDC                            
00000EDC                            VBla_16:
00000EDC 33FC 0100 00A1 1100        		stopZ80
00000EE4 0839 0000 00A1 1100 66F6   		waitZ80
00000EEE 6100 0000                  		bsr.w	ReadJoypads
00000EF2 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000F16 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000F3A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000F5E 33FC 0000 00A1 1100        		startZ80
00000F66 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000F6C                            	@nochg:
00000F6C 4A78 F614                  		tst.w	(v_demolength).w
00000F70 6700 0000                  		beq.w	@end
00000F74 5378 F614                  		subq.w	#1,(v_demolength).w
00000F78                            
00000F78                            	@end:
00000F78 4E75                       		rts	
00000F7A                            
00000F7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F7A                            
00000F7A                            
00000F7A                            sub_106E:
00000F7A 33FC 0100 00A1 1100        		stopZ80
00000F82 0839 0000 00A1 1100 66F6   		waitZ80
00000F8C 6100 0000                  		bsr.w	ReadJoypads
00000F90 4A38 F64E                  		tst.b	(f_wtr_state).w ; is water above top of screen?
00000F94 6600                       		bne.s	@waterabove	; if yes, branch
00000F96 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000FBA 6000                       		bra.s	@waterbelow
00000FBC                            
00000FBC                            	@waterabove:
00000FBC 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000FE0                            
00000FE0                            	@waterbelow:
00000FE0 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00001004 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00001028 33FC 0000 00A1 1100        		startZ80
00001030 4E75                       		rts	
00001032                            ; End of function sub_106E
00001032                            
00001032                            ; ---------------------------------------------------------------------------
00001032                            ; Horizontal interrupt
00001032                            ; ---------------------------------------------------------------------------
00001032                            
00001032                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001032                            
00001032                            
00001032                            HBlank:
00001032 46FC 2700                  		disable_ints
00001036 4A78 F644                  		tst.w	(f_hbla_pal).w	; is palette set to change?
0000103A 6700                       		beq.s	@nochg		; if not, branch
0000103C 31FC 0000 F644             		move.w	#0,(f_hbla_pal).w
00001042 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001046 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
0000104C 41F8 FA80                  		lea	(v_pal_water).w,a0 ; get palette from RAM
00001050 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001058 2298                       		move.l	(a0)+,(a1)	; move palette to CRAM
0000105A 2298                       		move.l	(a0)+,(a1)
0000105C 2298                       		move.l	(a0)+,(a1)
0000105E 2298                       		move.l	(a0)+,(a1)
00001060 2298                       		move.l	(a0)+,(a1)
00001062 2298                       		move.l	(a0)+,(a1)
00001064 2298                       		move.l	(a0)+,(a1)
00001066 2298                       		move.l	(a0)+,(a1)
00001068 2298                       		move.l	(a0)+,(a1)
0000106A 2298                       		move.l	(a0)+,(a1)
0000106C 2298                       		move.l	(a0)+,(a1)
0000106E 2298                       		move.l	(a0)+,(a1)
00001070 2298                       		move.l	(a0)+,(a1)
00001072 2298                       		move.l	(a0)+,(a1)
00001074 2298                       		move.l	(a0)+,(a1)
00001076 2298                       		move.l	(a0)+,(a1)
00001078 2298                       		move.l	(a0)+,(a1)
0000107A 2298                       		move.l	(a0)+,(a1)
0000107C 2298                       		move.l	(a0)+,(a1)
0000107E 2298                       		move.l	(a0)+,(a1)
00001080 2298                       		move.l	(a0)+,(a1)
00001082 2298                       		move.l	(a0)+,(a1)
00001084 2298                       		move.l	(a0)+,(a1)
00001086 2298                       		move.l	(a0)+,(a1)
00001088 2298                       		move.l	(a0)+,(a1)
0000108A 2298                       		move.l	(a0)+,(a1)
0000108C 2298                       		move.l	(a0)+,(a1)
0000108E 2298                       		move.l	(a0)+,(a1)
00001090 2298                       		move.l	(a0)+,(a1)
00001092 2298                       		move.l	(a0)+,(a1)
00001094 2298                       		move.l	(a0)+,(a1)
00001096 2298                       		move.l	(a0)+,(a1)
00001098 337C 8ADF 0004             		move.w	#$8A00+223,4(a1) ; reset HBlank register
0000109E 4CDF 0300                  		movem.l	(sp)+,a0-a1
000010A2 4A38 F64F                  		tst.b	($FFFFF64F).w
000010A6 6600                       		bne.s	loc_119E
000010A8                            
000010A8                            	@nochg:
000010A8 4E73                       		rte	
000010AA                            ; ===========================================================================
000010AA                            
000010AA                            loc_119E:
000010AA 4238 F64F                  		clr.b	($FFFFF64F).w
000010AE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000010B2 6100 FC5A                  		bsr.w	Demo_Time
000010B6 4EB9 0000 0000             		jsr	(UpdateMusic).l
000010BC 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000010C0 4E73                       		rte	
000010C2                            ; End of function HBlank
000010C2                            
000010C2                            ; ---------------------------------------------------------------------------
000010C2                            ; Subroutine to	initialise joypads
000010C2                            ; ---------------------------------------------------------------------------
000010C2                            
000010C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010C2                            
000010C2                            
000010C2                            JoypadInit:
000010C2 33FC 0100 00A1 1100        		stopZ80
000010CA 0839 0000 00A1 1100 66F6   		waitZ80
000010D4 7040                       		moveq	#$40,d0
000010D6 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000010DC 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000010E2 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (expansion/extra)
000010E8 33FC 0000 00A1 1100        		startZ80
000010F0 4E75                       		rts	
000010F2                            ; End of function JoypadInit
000010F2                            
000010F2                            ; ---------------------------------------------------------------------------
000010F2                            ; Subroutine to	read joypad input, and send it to the RAM
000010F2                            ; ---------------------------------------------------------------------------
000010F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010F2                            
000010F2                            
000010F2                            ReadJoypads:
000010F2 41F8 F604                  		lea	(v_jpadhold1).w,a0 ; address where joypad states are written
000010F6 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000010FC 6100                       		bsr.s	@read		; do the first joypad
000010FE 5449                       		addq.w	#2,a1		; do the second	joypad
00001100                            
00001100                            	@read:
00001100 12BC 0000                  		move.b	#0,(a1)
00001104 4E71                       		nop	
00001106 4E71                       		nop	
00001108 1011                       		move.b	(a1),d0
0000110A E508                       		lsl.b	#2,d0
0000110C 0200 00C0                  		andi.b	#$C0,d0
00001110 12BC 0040                  		move.b	#$40,(a1)
00001114 4E71                       		nop	
00001116 4E71                       		nop	
00001118 1211                       		move.b	(a1),d1
0000111A 0201 003F                  		andi.b	#$3F,d1
0000111E 8001                       		or.b	d1,d0
00001120 4600                       		not.b	d0
00001122 1210                       		move.b	(a0),d1
00001124 B101                       		eor.b	d0,d1
00001126 10C0                       		move.b	d0,(a0)+
00001128 C200                       		and.b	d0,d1
0000112A 10C1                       		move.b	d1,(a0)+
0000112C 4E75                       		rts	
0000112E                            ; End of function ReadJoypads
0000112E                            
0000112E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000112E                            
0000112E                            
0000112E                            VDPSetupGame:
0000112E 41F9 00C0 0004             		lea	(vdp_control_port).l,a0
00001134 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
0000113A 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001140 7E12                       		moveq	#$12,d7
00001142                            
00001142                            	@setreg:
00001142 309A                       		move.w	(a2)+,(a0)
00001144 51CF FFFC                  		dbf	d7,@setreg	; set the VDP registers
00001148                            
00001148 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
0000114E 31C0 F60C                  		move.w	d0,(v_vdp_buffer1).w
00001152 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w	; H-INT every 224th scanline
00001158 7000                       		moveq	#0,d0
0000115A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
00001164 3E3C 003F                  		move.w	#$3F,d7
00001168                            
00001168                            	@clrCRAM:
00001168 3280                       		move.w	d0,(a1)
0000116A 51CF FFFC                  		dbf	d7,@clrCRAM	; clear	the CRAM
0000116E                            
0000116E 42B8 F616                  		clr.l	(v_scrposy_dup).w
00001172 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00001176 2F01                       		move.l	d1,-(sp)
00001178 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFFF,0
0000119A                            
0000119A                            	@waitforDMA:
0000119A 3215                       		move.w	(a5),d1
0000119C 0801 0001                  		btst	#1,d1		; is DMA (fillVRAM) still running?
000011A0 66F8                       		bne.s	@waitforDMA	; if yes, branch
000011A2                            
000011A2 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment size
000011A6 221F                       		move.l	(sp)+,d1
000011A8 4E75                       		rts	
000011AA                            ; End of function VDPSetupGame
000011AA                            
000011AA                            ; ===========================================================================
000011AA 8004                       VDPSetupArray:	dc.w $8004		; 8-colour mode
000011AC 8134                       		dc.w $8134		; enable V.interrupts, enable DMA
000011AE 8230                       		dc.w $8200+(vram_fg>>10) ; set foreground nametable address
000011B0 8328                       		dc.w $8300+($A000>>10)	; set window nametable address
000011B2 8407                       		dc.w $8400+(vram_bg>>13) ; set background nametable address
000011B4 857C                       		dc.w $8500+(vram_sprites>>9) ; set sprite table address
000011B6 8600                       		dc.w $8600		; unused
000011B8 8700                       		dc.w $8700		; set background colour (palette entry 0)
000011BA 8800                       		dc.w $8800		; unused
000011BC 8900                       		dc.w $8900		; unused
000011BE 8A00                       		dc.w $8A00		; default H.interrupt register
000011C0 8B00                       		dc.w $8B00		; full-screen vertical scrolling
000011C2 8C81                       		dc.w $8C81		; 40-cell display mode
000011C4 8D3F                       		dc.w $8D00+(vram_hscroll>>10) ; set background hscroll address
000011C6 8E00                       		dc.w $8E00		; unused
000011C8 8F02                       		dc.w $8F02		; set VDP increment size
000011CA 9001                       		dc.w $9001		; 64-cell hscroll size
000011CC 9100                       		dc.w $9100		; window horizontal position
000011CE 9200                       		dc.w $9200		; window vertical position
000011D0                            
000011D0                            ; ---------------------------------------------------------------------------
000011D0                            ; Subroutine to	clear the screen
000011D0                            ; ---------------------------------------------------------------------------
000011D0                            
000011D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011D0                            
000011D0                            
000011D0                            ClearScreen:
000011D0 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_fg ; clear foreground namespace
000011F2                            
000011F2                            	@wait1:
000011F2 3215                       		move.w	(a5),d1
000011F4 0801 0001                  		btst	#1,d1
000011F8 66F8                       		bne.s	@wait1
000011FA                            
000011FA 3ABC 8F02                  		move.w	#$8F02,(a5)
000011FE 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_bg ; clear background namespace
00001220                            
00001220                            	@wait2:
00001220 3215                       		move.w	(a5),d1
00001222 0801 0001                  		btst	#1,d1
00001226 66F8                       		bne.s	@wait2
00001228                            
00001228 3ABC 8F02                  		move.w	#$8F02,(a5)
0000122C 42B8 F616                  		clr.l	(v_scrposy_dup).w
00001230 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00001234                            
00001234 43F8 F800                  		lea	(v_spritetablebuffer).w,a1
00001238 7000                       		moveq	#0,d0
0000123A 323C 00A0                  		move.w	#($280/4),d1	; This should be ($280/4)-1, leading to a slight bug (first bit of v_pal_water is cleared)
0000123E                            
0000123E                            	@clearsprites:
0000123E 22C0                       		move.l	d0,(a1)+
00001240 51C9 FFFC                  		dbf	d1,@clearsprites ; clear sprite table (in RAM)
00001244                            
00001244 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00001248 7000                       		moveq	#0,d0
0000124A 323C 0100                  		move.w	#($400/4),d1	; This should be ($400/4)-1, leading to a slight bug (first bit of the Sonic object's RAM is cleared)
0000124E                            
0000124E                            	@clearhscroll:
0000124E 22C0                       		move.l	d0,(a1)+
00001250 51C9 FFFC                  		dbf	d1,@clearhscroll ; clear hscroll table (in RAM)
00001254 4E75                       		rts	
00001256                            ; End of function ClearScreen
00001256                            
00001256                            ; ---------------------------------------------------------------------------
00001256                            ; Subroutine to	load the sound driver
00001256                            ; ---------------------------------------------------------------------------
00001256                            
00001256                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001256                            
00001256                            
00001256                            SoundDriverLoad:
00001256 4E71                       		nop	
00001258 33FC 0100 00A1 1100        		stopZ80
00001260 33FC 0100 00A1 1200        		resetZ80
00001268 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000126E 43F9 00A0 0000             		lea	(z80_ram).l,a1	; target Z80 RAM
00001274 6100 0000                  		bsr.w	KosDec		; decompress
00001278 33FC 0000 00A1 1200        		resetZ80a
00001280 4E71                       		nop	
00001282 4E71                       		nop	
00001284 4E71                       		nop	
00001286 4E71                       		nop	
00001288 33FC 0100 00A1 1200        		resetZ80
00001290 33FC 0000 00A1 1100        		startZ80
00001298 4E75                       		rts	
0000129A                            ; End of function SoundDriverLoad
0000129A                            
0000129A                            		include	"_incObj\sub PlaySound.asm"
0000129A                            ; ---------------------------------------------------------------------------
0000129A                            ; Subroutine to	play a music track
0000129A                            
0000129A                            ; input:
0000129A                            ;	d0 = track to play
0000129A                            ; ---------------------------------------------------------------------------
0000129A                            
0000129A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000129A                            
0000129A                            
0000129A                            PlaySound:
0000129A 11C0 F00A                  		move.b	d0,(v_snddriver_ram+v_soundqueue0).w
0000129E 4E75                       		rts	
000012A0                            ; End of function PlaySound
000012A0                            
000012A0                            ; ---------------------------------------------------------------------------
000012A0                            ; Subroutine to	play a sound effect
000012A0                            ; ---------------------------------------------------------------------------
000012A0                            
000012A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012A0                            
000012A0                            
000012A0                            PlaySound_Special:
000012A0 11C0 F00B                  		move.b	d0,(v_snddriver_ram+v_soundqueue1).w
000012A4 4E75                       		rts	
000012A6                            ; End of function PlaySound_Special
000012A6                            
000012A6                            ; ===========================================================================
000012A6                            ; ---------------------------------------------------------------------------
000012A6                            ; Unused sound/music subroutine
000012A6                            ; ---------------------------------------------------------------------------
000012A6                            
000012A6                            PlaySound_Unused:
000012A6 11C0 F00C                  		move.b	d0,(v_snddriver_ram+v_soundqueue2).w
000012AA 4E75                       		rts	
000012AA 4E75                       		rts	
000012AC                            		include	"_inc\PauseGame.asm"
000012AC                            ; ---------------------------------------------------------------------------
000012AC                            ; Subroutine to	pause the game
000012AC                            ; ---------------------------------------------------------------------------
000012AC                            
000012AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012AC                            
000012AC                            
000012AC                            PauseGame:
000012AC 4E71                       		nop	
000012AE 4A38 FE12                  		tst.b	(v_lives).w	; do you have any lives	left?
000012B2 6700                       		beq.s	Unpause		; if not, branch
000012B4 4A78 F63A                  		tst.w	(f_pause).w	; is game already paused?
000012B8 6600                       		bne.s	Pause_StopGame	; if yes, branch
000012BA 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
000012C0 6700                       		beq.s	Pause_DoNothing	; if not, branch
000012C2                            
000012C2                            Pause_StopGame:
000012C2 31FC 0001 F63A             		move.w	#1,(f_pause).w	; freeze time
000012C8 11FC 0001 F003             		move.b	#1,(v_snddriver_ram+f_pausemusic).w ; pause music
000012CE                            
000012CE                            Pause_Loop:
000012CE 11FC 0010 F62A             		move.b	#$10,(v_vbla_routine).w
000012D4 6100 0000                  		bsr.w	WaitForVBla
000012D8 4A38 FFE1                  		tst.b	(f_slomocheat).w ; is slow-motion cheat on?
000012DC 6700                       		beq.s	Pause_ChkStart	; if not, branch
000012DE 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
000012E4 6700                       		beq.s	Pause_ChkBC	; if not, branch
000012E6 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; set game mode to 4 (title screen)
000012EC 4E71                       		nop	
000012EE 6000                       		bra.s	Pause_EndMusic
000012F0                            ; ===========================================================================
000012F0                            
000012F0                            Pause_ChkBC:
000012F0 0838 0004 F604             		btst	#bitB,(v_jpadhold1).w ; is button B pressed?
000012F6 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012F8 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000012FE 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001300                            
00001300                            Pause_ChkStart:
00001300 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00001306 67C6                       		beq.s	Pause_Loop	; if not, branch
00001308                            
00001308                            Pause_EndMusic:
00001308 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; unpause the music
0000130E                            
0000130E                            Unpause:
0000130E 31FC 0000 F63A             		move.w	#0,(f_pause).w	; unpause the game
00001314                            
00001314                            Pause_DoNothing:
00001314 4E75                       		rts	
00001316                            ; ===========================================================================
00001316                            
00001316                            Pause_SlowMo:
00001316 31FC 0001 F63A             		move.w	#1,(f_pause).w
0000131C 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; Unpause the music
00001322 4E75                       		rts	
00001324                            ; End of function PauseGame
00001324                            ; End of function PauseGame
00001324                            
00001324                            ; ---------------------------------------------------------------------------
00001324                            ; Subroutine to	copy a tile map from RAM to VRAM namespace
00001324                            
00001324                            ; input:
00001324                            ;	a1 = tile map address
00001324                            ;	d0 = VRAM address
00001324                            ;	d1 = width (cells)
00001324                            ;	d2 = height (cells)
00001324                            ; ---------------------------------------------------------------------------
00001324                            
00001324                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001324                            
00001324                            
00001324                            TilemapToVRAM:
00001324 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000132A 283C 0080 0000             		move.l	#$800000,d4
00001330                            
00001330                            	Tilemap_Line:
00001330 2D40 0004                  		move.l	d0,4(a6)	; move d0 to VDP_control_port
00001334 3601                       		move.w	d1,d3
00001336                            
00001336                            	Tilemap_Cell:
00001336 3C99                       		move.w	(a1)+,(a6)	; write value to namespace
00001338 51CB FFFC                  		dbf	d3,Tilemap_Cell	; next tile
0000133C D084                       		add.l	d4,d0		; goto next line
0000133E 51CA FFF0                  		dbf	d2,Tilemap_Line	; next line
00001342 4E75                       		rts	
00001344                            ; End of function TilemapToVRAM
00001344                            
00001344                            		include	"_inc\Nemesis Decompression.asm"
00001344                            ; ==============================================================================
00001344                            ; ------------------------------------------------------------------------------
00001344                            ; Nemesis decompression routine
00001344                            ; ------------------------------------------------------------------------------
00001344                            ; Optimized by vladikcomper
00001344                            ; ------------------------------------------------------------------------------
00001344                             
00001344                            NemDec_RAM:
00001344 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001348 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
0000134C 6000                           bra.s   NemDec_Main
0000134E                             
0000134E                            ; ------------------------------------------------------------------------------
0000134E                            NemDec:
0000134E 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001352 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
00001358 47FA 0000                      lea NemPCD_WriteRowToVDP(pc),a3
0000135C                             
0000135C                            NemDec_Main:
0000135C 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
00001360 3418                           move.w  (a0)+,d2        ; get number of patterns
00001362 6A00                           bpl.s   @0          ; are we in Mode 0?
00001364 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
00001368 E74A                       @0  lsl.w   #3,d2
0000136A 3A42                           movea.w d2,a5
0000136C 7607                           moveq   #7,d3
0000136E 7400                           moveq   #0,d2
00001370 7800                           moveq   #0,d4
00001372 6100 0000                      bsr.w   NemDec_BuildCodeTable
00001376 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
00001378 E145                           asl.w   #8,d5           ; shift up by a byte
0000137A 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
0000137C 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
00001380 6100                           bsr.s   NemDec2
00001382 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
00001386 4E75                           rts
00001388                             
00001388                            ; ---------------------------------------------------------------------------
00001388                            ; Part of the Nemesis decompressor, processes the actual compressed data
00001388                            ; ---------------------------------------------------------------------------
00001388                             
00001388                            NemDec2:
00001388 3E06                           move.w  d6,d7
0000138A 5147                           subq.w  #8,d7           ; get shift value
0000138C 3205                           move.w  d5,d1
0000138E EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
00001390 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
00001394 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
00001396 0241 00FF                      andi.w  #$FF,d1
0000139A D241                           add.w   d1,d1
0000139C 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
000013A0 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
000013A4 6400                           bcc.s   @0          ; if not, branch
000013A6 5046                           addq.w  #8,d6
000013A8 E145                           asl.w   #8,d5
000013AA 1A18                           move.b  (a0)+,d5        ; read next byte
000013AC 1231 1001                  @0  move.b  1(a1,d1.w),d1
000013B0 3001                           move.w  d1,d0
000013B2 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
000013B6 0240 00F0                      andi.w  #$F0,d0
000013BA                             
000013BA                            NemDec_GetRepeatCount:
000013BA E848                           lsr.w   #4,d0           ; get repeat count
000013BC                             
000013BC                            NemDec_WritePixel:
000013BC E98C                           lsl.l   #4,d4           ; shift up by a nybble
000013BE 8801                           or.b    d1,d4           ; write pixel
000013C0 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
000013C4 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
000013C6                            ; ---------------------------------------------------------------------------
000013C6                             
000013C6                            NemPCD_NewRow:
000013C6 7800                           moveq   #0,d4           ; reset row
000013C8 7607                           moveq   #7,d3           ; reset nybble counter
000013CA                             
000013CA                            NemDec_WritePixelLoop:
000013CA 51C8 FFF0                      dbf d0,NemDec_WritePixel
000013CE 60B8                           bra.s   NemDec2
000013D0                            ; ---------------------------------------------------------------------------
000013D0                             
000013D0                            NemDec_InlineData:
000013D0 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
000013D2 0C46 0009                      cmpi.w  #9,d6
000013D6 6400                           bcc.s   @0
000013D8 5046                           addq.w  #8,d6
000013DA E145                           asl.w   #8,d5
000013DC 1A18                           move.b  (a0)+,d5
000013DE 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
000013E0 3205                           move.w  d5,d1
000013E2 EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
000013E4 3001                           move.w  d1,d0
000013E6 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
000013EA 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
000013EE 0C46 0009                      cmpi.w  #9,d6
000013F2 64C6                           bcc.s   NemDec_GetRepeatCount
000013F4 5046                           addq.w  #8,d6
000013F6 E145                           asl.w   #8,d5
000013F8 1A18                           move.b  (a0)+,d5
000013FA 60BE                           bra.s   NemDec_GetRepeatCount
000013FC                             
000013FC                            ; ---------------------------------------------------------------------------
000013FC                            ; Subroutines to output decompressed entry
000013FC                            ; Selected depending on current decompression mode
000013FC                            ; ---------------------------------------------------------------------------
000013FC                             
000013FC                            NemPCD_WriteRowToVDP:
000013FC                            loc_1502:
000013FC 2884                           move.l  d4,(a4)         ; write 8-pixel row
000013FE 534D                           subq.w  #1,a5
00001400 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
00001402 66C2                           bne.s   NemPCD_NewRow         ; if not, branch
00001404 4E75                           rts
00001406                            ; ---------------------------------------------------------------------------
00001406                             
00001406                            NemPCD_WriteRowToVDP_XOR:
00001406 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
00001408 2882                           move.l  d2,(a4)         ; and write the result
0000140A 534D                           subq.w  #1,a5
0000140C 380D                           move.w  a5,d4
0000140E 66B6                           bne.s   NemPCD_NewRow
00001410 4E75                           rts
00001412                            ; ---------------------------------------------------------------------------
00001412                             
00001412                            NemDec_WriteRowToRAM:
00001412 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
00001414 534D                           subq.w  #1,a5
00001416 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
00001418 66AC                           bne.s   NemPCD_NewRow         ; if not, branch
0000141A 4E75                           rts
0000141C                            ; ---------------------------------------------------------------------------
0000141C                             
0000141C                            NemDec_WriteRowToRAM_XOR:
0000141C B982                           eor.l   d4,d2           ; XOR the previous row by the current row
0000141E 28C2                           move.l  d2,(a4)+        ; and write the result
00001420 534D                           subq.w  #1,a5
00001422 380D                           move.w  a5,d4
00001424 66A0                           bne.s   NemPCD_NewRow
00001426 4E75                           rts
00001428                             
00001428                            ; ---------------------------------------------------------------------------
00001428                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
00001428                            ; ---------------------------------------------------------------------------
00001428                             
00001428                            NemDec_BuildCodeTable:
00001428 1018                           move.b  (a0)+,d0        ; read first byte
0000142A                             
0000142A                            @ChkEnd:
0000142A 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
0000142E 6600                           bne.s   @NewPalIndex        ; if not, branch
00001430 4E75                           rts
00001432                            ; ---------------------------------------------------------------------------
00001432                             
00001432                            @NewPalIndex:
00001432 3E00                           move.w  d0,d7
00001434                             
00001434                            @ItemLoop:
00001434 1018                           move.b  (a0)+,d0        ; read next byte
00001436 6BF2                           bmi.s   @ChkEnd         ; ~~
00001438 1200                           move.b  d0,d1
0000143A 0247 000F                      andi.w  #$F,d7          ; get palette index
0000143E 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
00001442 8E41                           or.w    d1,d7           ; combine the two
00001444 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
00001448 1200                           move.b  d0,d1
0000144A E149                           lsl.w   #8,d1
0000144C 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
0000144E 7208                           moveq   #8,d1
00001450 9240                           sub.w   d0,d1           ; is the code 8 bits long?
00001452 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
00001454 1018                           move.b  (a0)+,d0        ; get code
00001456 D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
00001458 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
0000145C 60D6                           bra.s   @ItemLoop       ; repeat
0000145E                            ; ---------------------------------------------------------------------------
0000145E                             
0000145E                            @ItemShortCode:
0000145E 1018                           move.b  (a0)+,d0        ; get code
00001460 E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
00001462 D040                           add.w   d0,d0           ; get index into code table
00001464 7A01                           moveq   #1,d5
00001466 E36D                           lsl.w   d1,d5
00001468 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
0000146A 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
0000146E                             
0000146E                            @ItemShortCodeLoop:
0000146E 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
00001470 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
00001474 60BE                           bra.s   @ItemLoop
00001474 60BE                           bra.s   @ItemLoop
00001476                            
00001476                              
00001476                                pusho	; buffer local label symbol config
00001476                                opt ws+  ; change local label symbol to '.'
00001476                            
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; MACRO ResetDMAQueue
00001476                            ; Clears the DMA queue, discarding all previously-queued DMAs.
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE Process_DMA_Queue / ProcessDMAQueue
00001476                            ; Performs all queued DMA transfers and clears the DMA queue.
00001476                            ;
00001476                            ; Output:
00001476                            ; 	a1,a5	trashed
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE InitDMAQueue
00001476                            ; Pre-initializes the DMA queue with VDP register numbers in alternating bytes.
00001476                            ; Must be called before the queue is used, and the queue expects that only it
00001476                            ; write to this region of RAM.
00001476                            ;
00001476                            ; Output:
00001476                            ; 	a0,d0,d1	trashed
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE Add_To_DMA_Queue / QueueDMATransfer
00001476                            ; Queues a DMA with parameters given in registers.
00001476                            ;
00001476                            ; Options:
00001476                            ; 	AssumeSourceAddressInBytes (default 1)
00001476                            ; 	AssumeSourceAddressIsRAMSafe (default 0)
00001476                            ; 	UseRAMSourceSafeDMA (default 1&(AssumeSourceAddressIsRAMSafe=0))
00001476                            ; 	Use128kbSafeDMA (default 0)
00001476                            ; 	UseVIntSafeDMA (default 0)
00001476                            ; Input:
00001476                            ; 	d1	Source address (in bytes, or in words if AssumeSourceAddressInBytes is
00001476                            ; 		set to 0)
00001476                            ; 	d2	Destination address
00001476                            ; 	d3	Transfer length (in words)
00001476                            ; Output:
00001476                            ; 	d0,d1,d2,d3,a1	trashed
00001476                            ;
00001476                            ; With the default settings, runs in:
00001476                            ; * 48(11/0) cycles if queue is full (DMA discarded)
00001476                            ; * 184(29/9) cycles otherwise (DMA queued)
00001476                            ;
00001476                            ; With Use128kbSafeDMA = 1, runs in:
00001476                            ; * 48(11/0) cycles if queue is full at the start (DMA discarded)
00001476                            ; * 200(32/9) cycles if the DMA does not cross a 128kB boundary (DMA queued)
00001476                            ; * 226(38/9) cycles if the DMA crosses a 128kB boundary, and the first piece
00001476                            ;   fills the queue (second piece is discarded)
00001476                            ; * 338(56/17) cycles if the DMA crosses a 128kB boundary, and the queue has
00001476                            ;   space for both pieces (both pieces queued)
00001476                            ;
00001476                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to all times.
00001476                            ;
00001476                            ; Setting AssumeSourceAddressInBytes to 0 reduces all times by 10(1/0) cycles,
00001476                            ; but only if the DMA is not entirely discarded. However, all callers must be
00001476                            ; edited to make sure the adresss given is correct.
00001476                            ;
00001476                            ; Setting AssumeSourceAddressIsRAMSafe to 1, or UseRAMSourceSafeDMA to 0,
00001476                            ; reduces all times by 14(2/0) cycles, but only if the DMA is not entirely
00001476                            ; discarded. However, all callers must be edited to make sure the adresss given
00001476                            ; in the correct form. You can use the dmaSource function for that.
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; MACRO QueueStaticDMA
00001476                            ; Directly queues a DMA on the spot. Requires all parameters to be known at
00001476                            ; assembly time; that is, no registers. Gives assembly errors when the DMA
00001476                            ; crosses a 128kB boundary, is at an odd ROM location, or is zero length.
00001476                            ;
00001476                            ; Options:
00001476                            ; 	UseVIntSafeDMA (default 0)
00001476                            ; Input:
00001476                            ; 	Source address (in bytes), transfer length (in bytes), destination address
00001476                            ; Output:
00001476                            ; 	d0,a1	trashed
00001476                            ;
00001476                            ; With the default settings, runs in:
00001476                            ; * 32(7/0) cycles if queue is full (DMA discarded)
00001476                            ; * 122(21/8) cycles otherwise (DMA queued)
00001476                            ;
00001476                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to both cases.
00001476                            ; ===========================================================================
00001476                            ; option: AssumeSourceAddressInBytes
00001476                            ;
00001476                            ; This option makes the function work as a drop-in replacement of the original
00001476                            ; functions. If you modify all callers to supply a position in words instead of
00001476                            ; bytes (i.e., divide source address by 2) you can set this to 0 to gain 10(1/0)
00001476 =00000001                  AssumeSourceAddressInBytes = 1
00001476                            ; ===========================================================================
00001476                            ; option: AssumeSourceAddressIsRAMSafe
00001476                            ;
00001476                            ; This option (which is disabled by default) makes the DMA queue assume that the
00001476                            ; source address is given to the function in a way that makes them safe to use
00001476                            ; with RAM sources. You need to edit all callers to ensure this.
00001476                            ; Enabling this option turns off UseRAMSourceSafeDMA, and saves 14(2/0).
00001476 =00000000                  AssumeSourceAddressIsRAMSafe = 0
00001476                            ; ===========================================================================
00001476                            ; option: UseRAMSourceSafeDMA
00001476                            ;
00001476                            ; This option (which is enabled by default) makes source addresses in RAM safe
00001476                            ; at the cost of 14(2/0). If you modify all callers so as to clear the top byte
00001476                            ; of source addresses (i.e., by ANDing them with $FFFFFF).
00001476 =00000001                  UseRAMSourceSafeDMA = 1&(AssumeSourceAddressIsRAMSafe=0)
00001476                            ; ===========================================================================
00001476                            ; option: Use128kbSafeDMA
00001476                            ;
00001476                            ; This option breaks DMA transfers that crosses a 128kB block into two. It is
00001476                            ; disabled by default because you can simply align the art in ROM and avoid the
00001476                            ; issue altogether. It is here so that you have a high-performance routine to do
00001476                            ; the job in situations where you can't align it in ROM.
00001476 =00000001                  Use128kbSafeDMA = 1
00001476                            ; ===========================================================================
00001476                            ; option UseVIntSafeDMA
00001476                            ;
00001476                            ; Option to mask interrupts while updating the DMA queue. This fixes many race
00001476                            ; conditions in the DMA funcion, but it costs 46(6/1) cycles. The better way to
00001476                            ; handle these race conditions would be to make unsafe callers (such as S3&K's
00001476                            ; KosM decoder) prevent these by masking off interrupts before calling and then
00001476                            ; restore interrupts after.
00001476 =00000000                  UseVIntSafeDMA = 0
00001476                            ; ===========================================================================
00001476                            
00001476                            
00001476                            ; Convenience macros, for increased maintainability of the code.
00001476 =00000027                  DMA = %100111
00001476 =00000021                  VRAM = %100001
00001476                            ; Like vdpComm, but starting from an address contained in a register
00001476 =00000001                  vdpCommReg_defined = 1
00001476                            vdpCommReg macro reg,type,rwd,clr
00001476                            	lsl.l	#2,\reg							; Move high bits into (word-swapped) position, accidentally moving everything else
00001476                            	if ((\type&\rwd)&3)<>0
00001476                            		addq.w	#((\type&\rwd)&3),\reg			; Add upper access type bits
00001476                            	endif
00001476                            	ror.w	#2,\reg							; Put upper access type bits into place, also moving all other bits into their correct (word-swapped) places
00001476                            	swap	\reg								; Put all bits in proper places
00001476                            	if \clr <> 0
00001476                            		andi.w	#3,\reg						; Strip whatever junk was in upper word of reg
00001476                            	endif
00001476                            	if ((\type&\rwd)&$FC)=$20
00001476                            		tas.b	\reg							; Add in the DMA flag -- tas fails on memory, but works on registers
00001476                            	elseif ((\type&\rwd)&$FC)<>0
00001476                            		ori.w	#(((\type&\rwd)&$FC)<<2),\reg	; Add in missing access type bits
00001476                            	endif
00001476                            	endm
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000001                  intMacros_defined = 1
00001476                            enableInts macro
00001476                            	move	#$2300,sr
00001476                            	endm
00001476                            
00001476                            disableInts macro
00001476                            	move	#$2700,sr
00001476                            	endm
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000001                  DMAEntry_defined = 1
00001476                                    rsreset
00001476 =00000000                  DMAEntry.Reg94:		rs.b	1
00001476                            			  
00001476 =00000001                  DMAEntry.Size:      rs.b    0
00001476 =00000001                  DMAEntry.SizeH:		rs.b	1
00001476 =00000002                  DMAEntry.Reg93:		rs.b	1
00001476 =00000003                  DMAEntry.Source:    rs.b    0
00001476 =00000003                  DMAEntry.SizeL:		rs.b	1
00001476 =00000004                  DMAEntry.Reg97:		rs.b	1
00001476 =00000005                  DMAEntry.SrcH:		rs.b	1
00001476 =00000006                  DMAEntry.Reg96:		rs.b	1
00001476 =00000007                  DMAEntry.SrcM:		rs.b	1
00001476 =00000008                  DMAEntry.Reg95:		rs.b	1
00001476 =00000009                  DMAEntry.SrcL:		rs.b	1
00001476 =0000000A                  DMAEntry.Command:	rs.l	1
00001476 =0000000E                  DMAEntry.len:   rs.w    0
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000012                  QueueSlotCount = (VDP_Command_Buffer_Slot-VDP_Command_Buffer)/DMAEntry.len
00001476                            ; ---------------------------------------------------------------------------
00001476                            						
00001476                            										   
00001476                            									   
00001476                            	  
00001476                            																			 
00001476                            							  
00001476 =00000001                  QueueStaticDMA_defined = 1
00001476                            ; Expects source address and DMA length in bytes. Also, expects source, size, and dest to be known
00001476                            ; at assembly time. Gives errors if DMA starts at an odd address, transfers
00001476                            ; crosses a 128kB boundary, or has size 0.
00001476                            QueueStaticDMA macro src,length,dest
00001476                                local   len
00001476                            		if ((\src)&1)<>0
00001476                            			inform 3,"DMA queued from odd source \1!"
00001476                            		endif
00001476                            		if ((\length)&1)<>0
00001476                            			inform 3,"DMA an odd number of bytes \2!"
00001476                            		endif
00001476                            		if (\length)=0
00001476                            			inform 3,"DMA transferring 0 bytes (becomes a 128kB transfer). If you really mean it, pass 128kB instead."
00001476                            		endif
00001476                            		if (((\src)+(\length)-1)>>17)<>((\src)>>17)
00001476                            			inform 3,"DMA crosses a 128kB boundary. You should either split the DMA manually or align the source adequately."
00001476                            		endif
00001476                            	  
00001476                            	if UseVIntSafeDMA=1
00001476                            		move.w	sr,-(sp)										; Save current interrupt mask
00001476                            		disableInts												; Mask off interrupts
00001476                            	endif ; UseVIntSafeDMA=1
00001476                            	movea.w	(VDP_Command_Buffer_Slot).w,a1
00001476                            	cmpa.w	#VDP_Command_Buffer_Slot,a1
00001476                            	beq.s	.done												; Return if there's no more room in the buffer
00001476                            	len: = ((length>>1)&$7FFF)
00001476                                move.b	#(len>>8)&$FF,DMAEntry.SizeH(a1)		; Write top byte of size/2
00001476                            	move.l	#((len&$FF)<<24)|((src>>1)&$7FFFFF),d0	; Set d0 to bottom byte of size/2 and the low 3 bytes of source/2
00001476                            	movep.l	d0,DMAEntry.SizeL(a1)								; Write it all to the queue
00001476                            	lea	DMAEntry.Command(a1),a1									; Seek to correct RAM address to store VDP DMA command
00001476                            	move.l	#$40000080,(a1)+						; Write VDP DMA command for destination address
00001476                            	move.w	a1,(VDP_Command_Buffer_Slot).w						; Write next queue slot
00001476                            .done:
00001476                            	if UseVIntSafeDMA=1
00001476                            		move.w	(sp)+,sr										; Restore interrupts to previous state
00001476                            	endif ;UseVIntSafeDMA=1
00001476                            	endm
00001476                            
00001476                                
00001476                            
00001476                            ; ---------------------------------------------------------------------------
00001476                            ResetDMAQueue: macro
00001476                            	move.w	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
00001476                            	endm
00001476                            ; ===========================================================================
00001476                            
00001476                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001476                            
00001476                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand:
00001476                            Add_To_DMA_Queue:
00001476                            QueueDMATransfer:
00001476 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
0000147A B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
0000147E 6700                       	beq.s	.done											; Return if there's no more room in the buffer
00001480                            
00001480 E289                       		lsr.l	#1,d1										; Source address is in words for the VDP registers
00001482 0881 0017                  		bclr.l	#23,d1										; Make sure bit 23 is clear (68k->VDP DMA flag)
00001486 03C9 0003                  	movep.l	d1,DMAEntry.Source(a1)							; Write source address; the useless top byte will be overwritten later
0000148A 7000                       	moveq	#0,d0											; We need a zero on d0
0000148C                            
0000148C                            		; Detect if transfer crosses 128KB boundary
0000148C                            		; Using sub+sub instead of move+add handles the following edge cases:
0000148C                            		; (1) d3.w = 0 => 128kB transfer
0000148C                            		;   (a) d1.w = 0 => no carry, don't split the DMA
0000148C                            		;   (b) d1.w != 0 => carry, need to split the DMA
0000148C                            		; (2) d3.w != 0
0000148C                            		;   (a) if there is carry on d1.w + d3.w
0000148C                            		;     (* ) if d1.w + d3.w = 0 => transfer comes entirely from current 128kB block, don't split the DMA
0000148C                            		;     (**) if d1.w + d3.w != 0 => need to split the DMA
0000148C                            		;   (b) if there is no carry on d1.w + d3.w => don't split the DMA
0000148C                            		; The reason this works is that carry on d1.w + d3.w means that
0000148C                            		; d1.w + d3.w >= $10000, whereas carry on (-d3.w) - (d1.w) means that
0000148C                            		; d1.w + d3.w > $10000.
0000148C 9043                       		sub.w	d3,d0										; Using sub instead of move and add allows checking edge cases
0000148E 9041                       		sub.w	d1,d0										; Does the transfer cross over to the next 128kB block?
00001490 6500                       		bcs.s	.doubletransfer								; Branch if yes
00001492                            	; It does not cross a 128kB boundary. So just finish writing it.
00001492 0789 0001                  	movep.w	d3,DMAEntry.Size(a1)							; Write DMA length, overwriting useless top byte of source address
00001496                            
00001496                            .finishxfer:
00001496                            	; Command to specify destination address and begin DMA
00001496 3002                       	move.w	d2,d0											; Use the fact that top word of d0 is zero to avoid clearing on vdpCommReg
000014A2 43E9 000A                  	lea	DMAEntry.Command(a1),a1								; Seek to correct RAM address to store VDP DMA command
000014A6 22C0                       	move.l	d0,(a1)+										; Write VDP DMA command for destination address
000014A8 31C9 C8FC                  	move.w	a1,(VDP_Command_Buffer_Slot).w					; Write next queue slot
000014AC                            
000014AC                            .done:
000014AC 4E75                       	rts
000014AE                            ; ---------------------------------------------------------------------------
000014AE                            .doubletransfer:
000014AE                            		; We need to split the DMA into two parts, since it crosses a 128kB block
000014AE D043                       		add.w	d3,d0										; Set d0 to the number of words until end of current 128kB block
000014B0 0189 0001                  		movep.w	d0,DMAEntry.Size(a1)						; Write DMA length of first part, overwriting useless top byte of source addres
000014B4                            
000014B4 B2FC C8EE                  		cmpa.w	#VDP_Command_Buffer_Slot-DMAEntry.len,a1	; Does the queue have enough space for both parts?
000014B8 67DC                       		beq.s	.finishxfer									; Branch if not
000014BA                            
000014BA                            		; Get second transfer's source, destination, and length
000014BA 9640                       		sub.w	d0,d3										; Set d3 to the number of words remaining
000014BC D280                       		add.l	d0,d1										; Offset the source address of the second part by the length of the first part
000014BE D040                       		add.w	d0,d0										; Convert to number of bytes
000014C0 D042                       		add.w	d2,d0										; Set d0 to the VRAM destination of the second part
000014C2                            
000014C2                            		; If we know top word of d2 is clear, the following vdpCommReg can be set to not
000014C2                            		; clear it. There is, unfortunately, no faster way to clear it than this.
000014D0 2342 000A                  		move.l	d2,DMAEntry.Command(a1)						; Write VDP DMA command for destination address of first part
000014D4                            
000014D4                            		; Do second transfer
000014D4 03C9 0011                  		movep.l	d1,DMAEntry.len+DMAEntry.Source(a1)			; Write source address of second part; useless top byte will be overwritten later
000014D8 0789 000F                  		movep.w	d3,DMAEntry.len+DMAEntry.Size(a1)			; Write DMA length of second part, overwriting useless top byte of source addres
000014DC                            
000014DC                            		; Command to specify destination address and begin DMA
000014E6 43E9 0018                  		lea	DMAEntry.len+DMAEntry.Command(a1),a1			; Seek to correct RAM address to store VDP DMA command of second part
000014EA 22C0                       		move.l	d0,(a1)+									; Write VDP DMA command for destination address of second part
000014EC                            
000014EC 31C9 C8FC                  		move.w	a1,(VDP_Command_Buffer_Slot).w				; Write next queue slot
000014F0 4E75                       		rts
000014F2                            ; End of function QueueDMATransfer
000014F2                            ; ===========================================================================
000014F2                            
000014F2                            ; ---------------------------------------------------------------------------
000014F2                            ; Subroutine for issuing all VDP commands that were queued
000014F2                            ; (by earlier calls to QueueDMATransfer)
000014F2                            ; Resets the queue when it's done
000014F2                            ; ---------------------------------------------------------------------------
000014F2                            
000014F2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000014F2                            
000014F2                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA:
000014F2                            Process_DMA_Queue:
000014F2                            ProcessDMAQueue:
000014F2 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
000014F6 4EE9 0000                  	jmp	.jump_table-VDP_Command_Buffer(a1)
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            .jump_table:
000014FA 4E75                       	rts
000014FC                            	rept 6
000014FC                            		trap	#0											; Just in case
000014FC 4E40 4E40 4E40 4E40 4E40+  	endr
00001508                            ; ---------------------------------------------------------------------------
00001508 =00000001                      c: = 1
00001508                            	rept QueueSlotCount
00001508                            		lea	(vdp_control_port).l,a5
00001508                            		lea	(VDP_Command_Buffer).w,a1
00001508                            		if c<>QueueSlotCount
00001508                            			bra.w	.jump0 - c*8
00001508                            		endif
00001508                                c: = c + 1
00001600                            ; ---------------------------------------------------------------------------
00001600                            	rept QueueSlotCount
00001600                            		move.l	(a1)+,(a5)									; Transfer length
00001600                            		move.l	(a1)+,(a5)									; Source address high
00001600                            		move.l	(a1)+,(a5)									; Source address low + destination high
00001600                            		move.w	(a1)+,(a5)									; Destination low, trigger DMA
00001600 2A99 2A99 2A99 3A99 2A99+  	endr
00001690                            
00001690                            .jump0:
00001690 31FC C800 C8FC             	ResetDMAQueue
00001696 4E75                       	rts
00001698                            ; End of function ProcessDMAQueue
00001698                            ; ===========================================================================
00001698                            
00001698                            ; ---------------------------------------------------------------------------
00001698                            ; Subroutine for initializing the DMA queue.
00001698                            ; ---------------------------------------------------------------------------
00001698                            
00001698                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001698                            
00001698                            InitDMAQueue:
00001698 41F8 C800                  	lea	(VDP_Command_Buffer).w,a0
0000169C 7094                       	moveq	#-$6C,d0				; fast-store $94 (sign-extended) in d0
0000169E 223C 9397 9695             	move.l	#$93979695,d1
000016A4 =00000000                      c: = 0
000016A4                            	rept QueueSlotCount
000016A4                            		move.b	d0,c + DMAEntry.Reg94(a0)
000016A4                            		movep.l	d1,c + DMAEntry.Reg93(a0)
000016A4                                c: = c + DMAEntry.len
000016A4 1080 03C8 0002 1140 000E+  	endr
00001732                            
00001732 31FC C800 C8FC             	ResetDMAQueue
00001738 4E75                       	rts
0000173A                            ; End of function ProcessDMAQueue
0000173A                            ; ===========================================================================
0000173A                            
0000173A                            
0000173A                                popo	; buffer local label symbol config
0000173A                            
0000173A                            
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            ; Subroutine to load pattern load cues (aka to queue pattern load requests)
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            
0000173A                            ; ARGUMENTS
0000173A                            ; d0 = index of PLC list
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            
0000173A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000173A                            
0000173A                            ; LoadPLC:
0000173A                            AddPLC:
0000173A 48E7 0060                  		movem.l	a1-a2,-(sp)
0000173E 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001744 D040                       		add.w	d0,d0
00001746 3031 0000                  		move.w	(a1,d0.w),d0
0000174A 43F1 0000                  		lea	(a1,d0.w),a1		; jump to relevant PLC
0000174E 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space
00001752                            
00001752                            	@findspace:
00001752 4A92                       		tst.l	(a2)		; is space available in RAM?
00001754 6700                       		beq.s	@copytoRAM	; if yes, branch
00001756 5C4A                       		addq.w	#6,a2		; if not, try next space
00001758 60F8                       		bra.s	@findspace
0000175A                            ; ===========================================================================
0000175A                            
0000175A                            @copytoRAM:
0000175A 3019                       		move.w	(a1)+,d0	; get length of PLC
0000175C 6B00                       		bmi.s	@skip
0000175E                            
0000175E                            	@loop:
0000175E 24D9                       		move.l	(a1)+,(a2)+
00001760 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
00001762 51C8 FFFA                  		dbf	d0,@loop	; repeat for length of PLC
00001766                            
00001766                            	@skip:
00001766 4CDF 0600                  		movem.l	(sp)+,a1-a2 ; a1=object
0000176A 4E75                       		rts	
0000176C                            ; End of function AddPLC
0000176C                            
0000176C                            
0000176C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000176C                            ; Queue pattern load requests, but clear the PLQ first
0000176C                            
0000176C                            ; ARGUMENTS
0000176C                            ; d0 = index of PLC list (see ArtLoadCues)
0000176C                            
0000176C                            ; NOTICE: This subroutine does not check for buffer overruns. The programmer
0000176C                            ;	  (or hacker) is responsible for making sure that no more than
0000176C                            ;	  16 load requests are copied into the buffer.
0000176C                            ;	  _________DO NOT PUT MORE THAN 16 LOAD REQUESTS IN A LIST!__________
0000176C                            ;         (or if you change the size of Plc_Buffer, the limit becomes (Plc_Buffer_Only_End-Plc_Buffer)/6)
0000176C                            
0000176C                            ; LoadPLC2:
0000176C                            NewPLC:
0000176C 48E7 0060                  		movem.l	a1-a2,-(sp)
00001770 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001776 D040                       		add.w	d0,d0
00001778 3031 0000                  		move.w	(a1,d0.w),d0
0000177C 43F1 0000                  		lea	(a1,d0.w),a1	; jump to relevant PLC
00001780 6100                       		bsr.s	ClearPLC	; erase any data in PLC buffer space
00001782 45F8 F680                  		lea	(v_plc_buffer).w,a2
00001786 3019                       		move.w	(a1)+,d0	; get length of PLC
00001788 6B00                       		bmi.s	@skip		; if it's negative, skip the next loop
0000178A                            
0000178A                            	@loop:
0000178A 24D9                       		move.l	(a1)+,(a2)+
0000178C 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
0000178E 51C8 FFFA                  		dbf	d0,@loop		; repeat for length of PLC
00001792                            
00001792                            	@skip:
00001792 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001796 4E75                       		rts	
00001798                            ; End of function NewPLC
00001798                            
00001798                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001798                            
00001798                            ; ---------------------------------------------------------------------------
00001798                            ; Subroutine to	clear the pattern load cues
00001798                            ; ---------------------------------------------------------------------------
00001798                            
00001798                            ; Clear the pattern load queue ($FFF680 - $FFF700)
00001798                            
00001798                            
00001798                            ClearPLC:
00001798 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space in RAM
0000179C 701F                       		moveq	#$1F,d0	; bytesToLcnt(v_plc_buffer_end-v_plc_buffer)
0000179E                            
0000179E                            	@loop:
0000179E 429A                       		clr.l	(a2)+
000017A0 51C8 FFFC                  		dbf	d0,@loop
000017A4 4E75                       		rts	
000017A6                            ; End of function ClearPLC
000017A6                            
000017A6                            ; ---------------------------------------------------------------------------
000017A6                            ; Subroutine to	use graphics listed in a pattern load cue
000017A6                            ; ---------------------------------------------------------------------------
000017A6                            
000017A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A6                            
000017A6                            
000017A6                            RunPLC:
000017A6 4AB8 F680                  		tst.l	(v_plc_buffer).w
000017AA 6700                       		beq.s	Rplc_Exit
000017AC 4A78 F6F8                  		tst.w	(f_plc_execute).w
000017B0 6600                       		bne.s	Rplc_Exit
000017B2 2078 F680                  		movea.l	(v_plc_buffer).w,a0
000017B6 47F9 0000 13FC             		lea	(NemPCD_WriteRowToVDP).l,a3
000017BC 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
000017C0 3418                       		move.w	(a0)+,d2
000017C2 6A00                       		bpl.s	loc_160E
000017C4 D6FC 000A                  		adda.w	#$A,a3
000017C8                            
000017C8                            loc_160E:
000017C8 0242 7FFF                  		andi.w	#$7FFF,d2
000017CC 31C2 F6F8                  		move.w	d2,(f_plc_execute).w
000017D0 6100 FC56                  		bsr.w	NemDec_BuildCodeTable
000017D4 1A18                       		move.b	(a0)+,d5
000017D6 E145                       		asl.w	#8,d5
000017D8 1A18                       		move.b	(a0)+,d5
000017DA 7C10                       		moveq	#$10,d6
000017DC 7000                       		moveq	#0,d0
000017DE 21C8 F680                  		move.l	a0,(v_plc_buffer).w
000017E2 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
000017E6 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000017EA 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
000017EE 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000017F2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000017F6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000017FA                            
000017FA                            Rplc_Exit:
000017FA 4E75                       		rts	
000017FC                            ; End of function RunPLC
000017FC                            
000017FC                            
000017FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017FC                            
000017FC                            
000017FC                            sub_1642:
000017FC 4A78 F6F8                  		tst.w	(f_plc_execute).w
00001800 6700 0000                  		beq.w	locret_16DA
00001804 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
0000180A 7000                       		moveq	#0,d0
0000180C 3038 F684                  		move.w	($FFFFF684).w,d0
00001810 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001816 6000                       		bra.s	loc_1676
00001818                            ; End of function sub_1642
00001818                            
00001818                            
00001818                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001818                            
00001818                            
00001818                            ; sub_165E:
00001818                            ProcessDPLC2:
00001818 4A78 F6F8                  		tst.w	(f_plc_execute).w
0000181C 6700                       		beq.s	locret_16DA
0000181E 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001824 7000                       		moveq	#0,d0
00001826 3038 F684                  		move.w	($FFFFF684).w,d0
0000182A 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001830                            
00001830                            loc_1676:
00001830 49F9 00C0 0004             		lea	(vdp_control_port).l,a4
00001836 E588                       		lsl.l	#2,d0
00001838 E448                       		lsr.w	#2,d0
0000183A 0040 4000                  		ori.w	#$4000,d0
0000183E 4840                       		swap	d0
00001840 2880                       		move.l	d0,(a4)
00001842 594C                       		subq.w	#4,a4
00001844 2078 F680                  		movea.l	(v_plc_buffer).w,a0
00001848 2678 F6E0                  		movea.l	(v_ptrnemcode).w,a3
0000184C 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001850 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001854 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001858 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
0000185C 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001860 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001864                            
00001864                            loc_16AA:
00001864 3A7C 0008                  		movea.w	#8,a5
00001868 6100 FB5C                  		bsr.w	NemPCD_NewRow
0000186C 5378 F6F8                  		subq.w	#1,(f_plc_execute).w
00001870 6700                       		beq.s	loc_16DC
00001872 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00001876 66EC                       		bne.s	loc_16AA
00001878 21C8 F680                  		move.l	a0,(v_plc_buffer).w
0000187C 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
00001880 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001884 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001888 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
0000188C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001890 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001894                            
00001894                            locret_16DA:
00001894 4E75                       		rts	
00001896                            ; ===========================================================================
00001896                            
00001896                            loc_16DC:
00001896 41F8 F680                  		lea	(v_plc_buffer).w,a0
0000189A 7015                       		moveq	#$15,d0
0000189C                            
0000189C                            loc_16E2:
0000189C 20E8 0006                  		move.l	6(a0),(a0)+
000018A0 51C8 FFFA                  		dbf	d0,loc_16E2
000018A4 4E75                       		rts	
000018A6                            ; End of function ProcessDPLC2
000018A6                            
000018A6                            ; ---------------------------------------------------------------------------
000018A6                            ; Subroutine to	execute	the pattern load cue
000018A6                            ; ---------------------------------------------------------------------------
000018A6                            
000018A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018A6                            
000018A6                            
000018A6                            QuickPLC:
000018A6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000018AC D040                       		add.w	d0,d0
000018AE 3031 0000                  		move.w	(a1,d0.w),d0
000018B2 43F1 0000                  		lea	(a1,d0.w),a1
000018B6 3219                       		move.w	(a1)+,d1	; get length of PLC
000018B8                            
000018B8                            	Qplc_Loop:
000018B8 2059                       		movea.l	(a1)+,a0	; get art pointer
000018BA 7000                       		moveq	#0,d0
000018BC 3019                       		move.w	(a1)+,d0	; get VRAM address
000018BE E588                       		lsl.l	#2,d0
000018C0 E448                       		lsr.w	#2,d0
000018C2 0040 4000                  		ori.w	#$4000,d0
000018C6 4840                       		swap	d0
000018C8 23C0 00C0 0004             		move.l	d0,(vdp_control_port).l ; converted VRAM address to VDP format
000018CE 6100 FA7E                  		bsr.w	NemDec		; decompress
000018D2 51C9 FFE4                  		dbf	d1,Qplc_Loop	; repeat for length of PLC
000018D6 4E75                       		rts	
000018D8                            ; End of function QuickPLC
000018D8                            
000018D8                            		include	"_inc\Enigma Decompression.asm"
000018D8                            ; ---------------------------------------------------------------------------
000018D8                            ; Enigma decompression algorithm
000018D8                            
000018D8                            ; input:
000018D8                            ;	d0 = starting art tile (added to each 8x8 before writing to destination)
000018D8                            ;	a0 = source address
000018D8                            ;	a1 = destination address
000018D8                            
000018D8                            ; usage:
000018D8                            ;	lea	(source).l,a0
000018D8                            ;	lea	(destination).l,a1
000018D8                            ;	move.w	#arttile,d0
000018D8                            ;	bsr.w	EniDec
000018D8                            
000018D8                            ; See http://www.segaretro.org/Enigma_compression for format description
000018D8                            ; ---------------------------------------------------------------------------
000018D8                            
000018D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018D8                            
000018D8                            
000018D8                            EniDec:
000018D8 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
000018DC 3640                       		movea.w	d0,a3		; store starting art tile
000018DE 1018                       		move.b	(a0)+,d0
000018E0 4880                       		ext.w	d0
000018E2 3A40                       		movea.w	d0,a5		; store number of bits in inline copy value
000018E4 1818                       		move.b	(a0)+,d4
000018E6 E70C                       		lsl.b	#3,d4		; store PCCVH flags bitfield
000018E8 3458                       		movea.w	(a0)+,a2
000018EA D4CB                       		adda.w	a3,a2		; store incremental copy word
000018EC 3858                       		movea.w	(a0)+,a4
000018EE D8CB                       		adda.w	a3,a4		; store literal copy word
000018F0 1A18                       		move.b	(a0)+,d5
000018F2 E145                       		asl.w	#8,d5
000018F4 1A18                       		move.b	(a0)+,d5	; get first word in format list
000018F6 7C10                       		moveq	#16,d6		; initial shift value
000018F8                            ; loc_173E:
000018F8                            Eni_Loop:
000018F8 7007                       		moveq	#7,d0		; assume a format list entry is 7 bits
000018FA 3E06                       		move.w	d6,d7
000018FC 9E40                       		sub.w	d0,d7
000018FE 3205                       		move.w	d5,d1
00001900 EE69                       		lsr.w	d7,d1
00001902 0241 007F                  		andi.w	#$7F,d1		; get format list entry
00001906 3401                       		move.w	d1,d2		; and copy it
00001908 0C41 0040                  		cmpi.w	#$40,d1		; is the high bit of the entry set?
0000190C 6400                       		bhs.s	@sevenbitentry
0000190E 7006                       		moveq	#6,d0		; if it isn't, the entry is actually 6 bits
00001910 E24A                       		lsr.w	#1,d2
00001912                            ; loc_1758:
00001912                            @sevenbitentry:
00001912 6100 0000                  		bsr.w	EniDec_FetchByte
00001916 0242 000F                  		andi.w	#$F,d2		; get repeat count
0000191A E849                       		lsr.w	#4,d1
0000191C D241                       		add.w	d1,d1
0000191E 4EFB 1000                  		jmp	EniDec_Index(pc,d1.w)
00001922                            ; End of function EniDec
00001922                            
00001922                            ; ===========================================================================
00001922                            ; loc_1768:
00001922                            EniDec_00:
00001922 32CA                       @loop:		move.w	a2,(a1)+	; copy incremental copy word
00001924 524A                       		addq.w	#1,a2		; increment it
00001926 51CA FFFA                  		dbf	d2,@loop	; repeat
0000192A 60CC                       		bra.s	Eni_Loop
0000192C                            ; ===========================================================================
0000192C                            ; loc_1772:
0000192C                            EniDec_01:
0000192C 32CC                       @loop:		move.w	a4,(a1)+	; copy literal copy word
0000192E 51CA FFFC                  		dbf	d2,@loop	; repeat
00001932 60C4                       		bra.s	Eni_Loop
00001934                            ; ===========================================================================
00001934                            ; loc_177A:
00001934                            EniDec_100:
00001934 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001938                            ; loc_177E:
00001938 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
0000193A 51CA FFFC                  		dbf	d2,@loop	; repeat
0000193E                            
0000193E 60B8                       		bra.s	Eni_Loop
00001940                            ; ===========================================================================
00001940                            ; loc_1786:
00001940                            EniDec_101:
00001940 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001944                            ; loc_178A:
00001944 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001946 5241                       		addq.w	#1,d1		; increment
00001948 51CA FFFA                  		dbf	d2,@loop	; repeat
0000194C                            
0000194C 60AA                       		bra.s	Eni_Loop
0000194E                            ; ===========================================================================
0000194E                            ; loc_1794:
0000194E                            EniDec_110:
0000194E 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001952                            ; loc_1798:
00001952 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001954 5341                       		subq.w	#1,d1		; decrement
00001956 51CA FFFA                  		dbf	d2,@loop	; repeat
0000195A                            
0000195A 609C                       		bra.s	Eni_Loop
0000195C                            ; ===========================================================================
0000195C                            ; loc_17A2:
0000195C                            EniDec_111:
0000195C 0C42 000F                  		cmpi.w	#$F,d2
00001960 6700                       		beq.s	EniDec_Done
00001962                            ; loc_17A8:
00001962 6100 0000                  @loop:		bsr.w	EniDec_FetchInlineValue	; fetch new inline value
00001966 32C1                       		move.w	d1,(a1)+	; copy it
00001968 51CA FFF8                  		dbf	d2,@loop	; and repeat
0000196C                            
0000196C 608A                       		bra.s	Eni_Loop
0000196E                            ; ===========================================================================
0000196E                            ; loc_17B4:
0000196E                            EniDec_Index:
0000196E 60B2                       		bra.s	EniDec_00
00001970 60B0                       		bra.s	EniDec_00
00001972 60B8                       		bra.s	EniDec_01
00001974 60B6                       		bra.s	EniDec_01
00001976 60BC                       		bra.s	EniDec_100
00001978 60C6                       		bra.s	EniDec_101
0000197A 60D2                       		bra.s	EniDec_110
0000197C 60DE                       		bra.s	EniDec_111
0000197E                            ; ===========================================================================
0000197E                            ; loc_17C4:
0000197E                            EniDec_Done:
0000197E 5348                       		subq.w	#1,a0		; go back by one byte
00001980 0C46 0010                  		cmpi.w	#16,d6		; were we going to start on a completely new byte?
00001984 6600                       		bne.s	@notnewbyte	; if not, branch
00001986 5348                       		subq.w	#1,a0		; and another one if needed
00001988                            ; loc_17CE:
00001988                            @notnewbyte:
00001988 3008                       		move.w	a0,d0
0000198A E248                       		lsr.w	#1,d0		; are we on an odd byte?
0000198C 6400                       		bcc.s	@evenbyte	; if not, branch
0000198E 5248                       		addq.w	#1,a0		; ensure we're on an even byte
00001990                            ; loc_17D6:
00001990                            @evenbyte:
00001990 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001994 4E75                       		rts	
00001996                            
00001996                            ; ---------------------------------------------------------------------------
00001996                            ; Part of the Enigma decompressor
00001996                            ; Fetches an inline copy value and stores it in d1
00001996                            ; ---------------------------------------------------------------------------
00001996                            
00001996                            ; =============== S U B R O U T I N E =======================================
00001996                            
00001996                            ; loc_17DC:
00001996                            EniDec_FetchInlineValue:
00001996 360B                       		move.w	a3,d3		; copy starting art tile
00001998 1204                       		move.b	d4,d1		; copy PCCVH bitfield
0000199A D201                       		add.b	d1,d1		; is the priority bit set?
0000199C 6400                       		bcc.s	@skippriority	; if not, branch
0000199E 5346                       		subq.w	#1,d6
000019A0 0D05                       		btst	d6,d5		; is the priority bit set in the inline render flags?
000019A2 6700                       		beq.s	@skippriority	; if not, branch
000019A4 0043 8000                  		ori.w	#$8000,d3	; otherwise set priority bit in art tile
000019A8                            ; loc_17EE:
000019A8                            @skippriority:
000019A8 D201                       		add.b	d1,d1		; is the high palette line bit set?
000019AA 6400                       		bcc.s	@skiphighpal	; if not, branch
000019AC 5346                       		subq.w	#1,d6
000019AE 0D05                       		btst	d6,d5
000019B0 6700                       		beq.s	@skiphighpal
000019B2 0643 4000                  		addi.w	#$4000,d3	; set second palette line bit
000019B6                            ; loc_17FC:
000019B6                            @skiphighpal:
000019B6 D201                       		add.b	d1,d1		; is the low palette line bit set?
000019B8 6400                       		bcc.s	@skiplowpal	; if not, branch
000019BA 5346                       		subq.w	#1,d6
000019BC 0D05                       		btst	d6,d5
000019BE 6700                       		beq.s	@skiplowpal
000019C0 0643 2000                  		addi.w	#$2000,d3	; set first palette line bit
000019C4                            ; loc_180A:
000019C4                            @skiplowpal:
000019C4 D201                       		add.b	d1,d1		; is the vertical flip flag set?
000019C6 6400                       		bcc.s	@skipyflip	; if not, branch
000019C8 5346                       		subq.w	#1,d6
000019CA 0D05                       		btst	d6,d5
000019CC 6700                       		beq.s	@skipyflip
000019CE 0043 1000                  		ori.w	#$1000,d3	; set Y-flip bit
000019D2                            ; loc_1818:
000019D2                            @skipyflip:
000019D2 D201                       		add.b	d1,d1		; is the horizontal flip flag set?
000019D4 6400                       		bcc.s	@skipxflip	; if not, branch
000019D6 5346                       		subq.w	#1,d6
000019D8 0D05                       		btst	d6,d5
000019DA 6700                       		beq.s	@skipxflip
000019DC 0043 0800                  		ori.w	#$800,d3	; set X-flip bit
000019E0                            ; loc_1826:
000019E0                            @skipxflip:
000019E0 3205                       		move.w	d5,d1
000019E2 3E06                       		move.w	d6,d7
000019E4 9E4D                       		sub.w	a5,d7		; subtract length in bits of inline copy value
000019E6 6400                       		bcc.s	@enoughbits	; branch if a new word doesn't need to be read
000019E8 3C07                       		move.w	d7,d6
000019EA 0646 0010                  		addi.w	#16,d6
000019EE 4447                       		neg.w	d7		; calculate bit deficit
000019F0 EF69                       		lsl.w	d7,d1		; and make space for that many bits
000019F2 1A10                       		move.b	(a0),d5		; get next byte
000019F4 EF3D                       		rol.b	d7,d5		; and rotate the required bits into the lowest positions
000019F6 DE47                       		add.w	d7,d7
000019F8 CA7B 7000                  		and.w	EniDec_Masks-2(pc,d7.w),d5
000019FC D245                       		add.w	d5,d1		; combine upper bits with lower bits
000019FE                            ; loc_1844:
000019FE                            @maskvalue:
000019FE 300D                       		move.w	a5,d0		; get length in bits of inline copy value
00001A00 D040                       		add.w	d0,d0
00001A02 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; mask value appropriately
00001A06 D243                       		add.w	d3,d1		; add starting art tile
00001A08 1A18                       		move.b	(a0)+,d5
00001A0A E14D                       		lsl.w	#8,d5
00001A0C 1A18                       		move.b	(a0)+,d5	; get next word
00001A0E 4E75                       		rts	
00001A10                            ; ===========================================================================
00001A10                            ; loc_1856:
00001A10                            @enoughbits:
00001A10 6700                       		beq.s	@justenough	; if the word has been exactly exhausted, branch
00001A12 EE69                       		lsr.w	d7,d1	; get inline copy value
00001A14 300D                       		move.w	a5,d0
00001A16 D040                       		add.w	d0,d0
00001A18 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; and mask it appropriately
00001A1C D243                       		add.w	d3,d1	; add starting art tile
00001A1E 300D                       		move.w	a5,d0
00001A20 6000                       		bra.s	EniDec_FetchByte
00001A22                            ; ===========================================================================
00001A22                            ; loc_1868:
00001A22                            @justenough:
00001A22 7C10                       		moveq	#16,d6	; reset shift value
00001A24 60D8                       		bra.s	@maskvalue
00001A26                            ; ===========================================================================
00001A26                            ; word_186C:
00001A26                            EniDec_Masks:
00001A26 0001 0003 0007 000F        		dc.w	 1,    3,    7,   $F
00001A2E 001F 003F 007F 00FF        		dc.w   $1F,  $3F,  $7F,  $FF
00001A36 01FF 03FF 07FF 0FFF        		dc.w  $1FF, $3FF, $7FF, $FFF
00001A3E 1FFF 3FFF 7FFF FFFF        		dc.w $1FFF,$3FFF,$7FFF,$FFFF
00001A46                            
00001A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A46                            
00001A46                            ; sub_188C:
00001A46                            EniDec_FetchByte:
00001A46 9C40                       		sub.w	d0,d6	; subtract length of current entry from shift value so that next entry is read next time around
00001A48 0C46 0009                  		cmpi.w	#9,d6	; does a new byte need to be read?
00001A4C 6400                       		bhs.s	@locret	; if not, branch
00001A4E 5046                       		addq.w	#8,d6
00001A50 E145                       		asl.w	#8,d5
00001A52 1A18                       		move.b	(a0)+,d5
00001A54                            @locret:
00001A54 4E75                       		rts	
00001A56                            ; End of function EniDec_FetchByte
00001A56                            ; End of function EniDec_FetchByte
00001A56                            		include	"_inc\Kosinski Decompression.asm"
00001A56                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001A56                            ; ---------------------------------------------------------------------------
00001A56                            ; KOSINSKI DECOMPRESSION PROCEDURE
00001A56                            ; (sometimes called KOZINSKI decompression)
00001A56                            ;
00001A56                            ; ARGUMENTS:
00001A56                            ; a0 = source address
00001A56                            ; a1 = destination address
00001A56                            ;
00001A56                            ; For format explanation see http://info.sonicretro.org/Kosinski@compression
00001A56                            ; New faster version by written by vladikcomper, with additional improvements by
00001A56                            ; MarkeyJester and Flamewing
00001A56                            ; Converted to ASM68K by Beta Filter.
00001A56                            ; ---------------------------------------------------------------------------
00001A56 =00000001                  Kos_UseLUT: equ 1
00001A56 =00000003                  Kos_LoopUnroll: equ 3
00001A56 =00000001                  Kos_ExtremeUnrolling: equ 1
00001A56                            
00001A56                            Kos_RunBitStream macro
00001A56                                dbra    d2,@skip\@
00001A56                                moveq   #7,d2                   ; Set repeat count to 8.
00001A56                                move.b  d1,d0                   ; Use the remaining 8 bits.
00001A56                                not.w   d3                      ; Have all 16 bits been used up?
00001A56                                bne.s   @skip\@                   ; Branch if not.
00001A56                                move.b  (a0)+,d0                ; Get desc field low-byte.
00001A56                                move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A56                                if Kos_UseLUT=1
00001A56                                move.b  (a4,d0.w),d0            ; Invert bit order...
00001A56                                move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A56                                endif
00001A56                            @skip\@
00001A56                                endm
00001A56                            
00001A56                            Kos_ReadBit macro
00001A56                                if Kos_UseLUT=1
00001A56                                add.b   d0,d0                   ; Get a bit from the bitstream.
00001A56                                else
00001A56                                lsr.b   #1,d0                   ; Get a bit from the bitstream.
00001A56                                endif
00001A56                                endm
00001A56                            ; ===========================================================================
00001A56                            ; KozDec@193A:
00001A56                            KosDec:
00001A56 7E07                           moveq   #(1<<Kos_LoopUnroll)-1,d7
00001A58 7000                           moveq   #0,d0
00001A5A 7200                           moveq   #0,d1
00001A5C 49FA 0000                      lea KosDec_ByteMap(pc),a4       ; Load LUT pointer.
00001A60 1018                           move.b  (a0)+,d0                ; Get desc field low-byte.
00001A62 1218                           move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A64 1034 0000                      move.b  (a4,d0.w),d0            ; Invert bit order...
00001A68 1234 1000                      move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A6C 7407                           moveq   #7,d2                   ; Set repeat count to 8.
00001A6E 7600                           moveq   #0,d3                   ; d3 will be desc field switcher.
00001A70 6000                           bra.s   @FetchNewCode
00001A72                            ; ---------------------------------------------------------------------------
00001A72                            @FetchCodeLoop:
00001A72                                ; Code 1 (Uncompressed byte).
00001A8A 12D8                           move.b  (a0)+,(a1)+
00001A8C                            
00001A8C                            @FetchNewCode:
00001A8E 65E2                           bcs.s   @FetchCodeLoop          ; If code = 1, branch.
00001A90                            
00001A90                                ; Codes 00 and 01.
00001A90 7AFF                           moveq   #-1,d5
00001A92 4BD1                           lea (a1),a5
00001AAE 6500 0000                      bcs.w   @Code_01
00001AB2                            
00001AB2                                ; Code 00 (Dictionary ref. short).
00001ACC 6500                           bcs.s   @Copy45
00001AE8 6500                           bcs.s   @Copy3
00001B02 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B04 DAC5                           adda.w  d5,a5
00001B06 12DD                           move.b  (a5)+,(a1)+
00001B08 12DD                           move.b  (a5)+,(a1)+
00001B0A 6080                           bra.s   @FetchNewCode
00001B0C                            ; ---------------------------------------------------------------------------
00001B0C                            @Copy3:
00001B24 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B26 DAC5                           adda.w  d5,a5
00001B28 12DD                           move.b  (a5)+,(a1)+
00001B2A 12DD                           move.b  (a5)+,(a1)+
00001B2C 12DD                           move.b  (a5)+,(a1)+
00001B2E 6000 FF5C                      bra.w   @FetchNewCode
00001B32                            ; ---------------------------------------------------------------------------
00001B32                            @Copy45:
00001B4C 6500                           bcs.s   @Copy5
00001B66 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B68 DAC5                           adda.w  d5,a5
00001B6A 12DD                           move.b  (a5)+,(a1)+
00001B6C 12DD                           move.b  (a5)+,(a1)+
00001B6E 12DD                           move.b  (a5)+,(a1)+
00001B70 12DD                           move.b  (a5)+,(a1)+
00001B72 6000 FF18                      bra.w   @FetchNewCode
00001B76                            ; ---------------------------------------------------------------------------
00001B76                            @Copy5:
00001B8E 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B90 DAC5                           adda.w  d5,a5
00001B92 12DD                           move.b  (a5)+,(a1)+
00001B94 12DD                           move.b  (a5)+,(a1)+
00001B96 12DD                           move.b  (a5)+,(a1)+
00001B98 12DD                           move.b  (a5)+,(a1)+
00001B9A 12DD                           move.b  (a5)+,(a1)+
00001B9C 6000 FEEE                      bra.w   @FetchNewCode
00001BA0                            ; ---------------------------------------------------------------------------
00001BA0                            ; ---------------------------------------------------------------------------
00001BA0                            @Code_01:
00001BA0 7800                           moveq   #0,d4                   ; d4 will contain copy count.
00001BA2                                ; Code 01 (Dictionary ref. long / special).
00001BBA 1C18                           move.b  (a0)+,d6                ; d6 = %LLLLLLLL.
00001BBC 1818                           move.b  (a0)+,d4                ; d4 = %HHHHHCCC.
00001BBE 1A04                           move.b  d4,d5                   ; d5 = %11111111 HHHHHCCC.
00001BC0 EB4D                           lsl.w   #5,d5                   ; d5 = %111HHHHH CCC00000.
00001BC2 1A06                           move.b  d6,d5                   ; d5 = %111HHHHH LLLLLLLL.
00001BC4 C847                           and.w   d7,d4                   ; d4 = %00000CCC.
00001BC6 6600                           bne.s   @StreamCopy             ; if CCC=0, branch.
00001BC8                            
00001BC8                                ; special mode (extended counter)
00001BC8 1818                           move.b  (a0)+,d4                ; Read cnt
00001BCA 6700                           beq.s   @Quit                   ; If cnt=0, quit decompression.
00001BCC 5304                           subq.b  #1,d4
00001BCE 6700 FEBC                      beq.w   @FetchNewCode           ; If cnt=1, fetch a new code.
00001BD2                            
00001BD2 DAC5                           adda.w  d5,a5
00001BD4 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001BD6 3C04                           move.w  d4,d6
00001BD8 4646                           not.w   d6
00001BDA CC47                           and.w   d7,d6
00001BDC DC46                           add.w   d6,d6
00001BDE E64C                           lsr.w   #Kos_LoopUnroll,d4
00001BE0 4EFB 6000                      jmp @largecopy(pc,d6.w)
00001BE4                            ; ---------------------------------------------------------------------------
00001BE4                            @largecopy:
00001BE4                                rept (1<<Kos_LoopUnroll)
00001BE4                                move.b  (a5)+,(a1)+
00001BE4 12DD 12DD 12DD 12DD 12DD+      endr
00001BF4 51CC FFEE                      dbra    d4,@largecopy
00001BF8 6000 FE92                      bra.w   @FetchNewCode
00001BFC                            ; ---------------------------------------------------------------------------
00001BFC                            @StreamCopy:
00001BFC DAC5                           adda.w  d5,a5
00001BFE 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001C00 BF44                           eor.w   d7,d4
00001C02 D844                           add.w   d4,d4
00001C04 4EFB 4000                      jmp @mediumcopy(pc,d4.w)
00001C08                            ; ---------------------------------------------------------------------------
00001C08                            @mediumcopy:
00001C08                                rept 8
00001C08                                move.b  (a5)+,(a1)+
00001C08 12DD 12DD 12DD 12DD 12DD+      endr
00001C18 6000 FE72                      bra.w   @FetchNewCode
00001C1C                            ; ---------------------------------------------------------------------------
00001C1C                            @Quit:
00001C1C 4E75                           rts                             ; End of function KosDec.
00001C1E                            ; ===========================================================================
00001C1E                            KosDec_ByteMap:
00001C1E 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
00001C2E 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
00001C3E 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
00001C4E 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
00001C5E 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
00001C6E 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
00001C7E 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00001C8E 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00001C9E 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00001CAE 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00001CBE 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00001CCE 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001CDE 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001CEE 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001CFE 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001D0E 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001D1E                            ; ===========================================================================
00001D1E                            ; ===========================================================================
00001D1E                            
00001D1E                            		include	"_inc\PaletteCycle.asm"
00001D1E                            ; ---------------------------------------------------------------------------
00001D1E                            ; Palette cycling routine loading subroutine
00001D1E                            ; ---------------------------------------------------------------------------
00001D1E                            
00001D1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D1E                            
00001D1E                            
00001D1E                            PaletteCycle:
00001D1E 7400                       		moveq	#0,d2
00001D20 7000                       		moveq	#0,d0
00001D22 1038 FE10                  		move.b	(v_zone).w,d0	; get level number
00001D26 D040                       		add.w	d0,d0
00001D28 303B 0000                  		move.w	PCycle_Index(pc,d0.w),d0
00001D2C 4EFB 0000                  		jmp	PCycle_Index(pc,d0.w) ; jump to relevant palette routine
00001D30                            ; End of function PaletteCycle
00001D30                            
00001D30                            ; ===========================================================================
00001D30                            ; ---------------------------------------------------------------------------
00001D30                            ; Palette cycling routines
00001D30                            ; ---------------------------------------------------------------------------
00001D30 0000                       PCycle_Index:	dc.w PCycle_GHZ-PCycle_Index
00001D32 0000                       		dc.w PCycle_LZ-PCycle_Index
00001D34 0000                       		dc.w PCycle_MZ-PCycle_Index
00001D36 0000                       		dc.w PalCycle_SLZ-PCycle_Index
00001D38 0000                       		dc.w PalCycle_SYZ-PCycle_Index
00001D3A 0000                       		dc.w PalCycle_SBZ-PCycle_Index
00001D3C 0000                       		dc.w PCycle_GHZ-PCycle_Index	; Ending
00001D3E                            
00001D3E                            
00001D3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D3E                            
00001D3E                            
00001D3E                            PCycle_Title:
00001D3E 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001D44 6000                       		bra.s	PCycGHZ_Go
00001D46                            ; ===========================================================================
00001D46                            
00001D46                            PCycle_GHZ:
00001D46 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001D4C                            
00001D4C                            PCycGHZ_Go:
00001D4C 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D50 6A00                       		bpl.s	PCycGHZ_Skip	; if time remains, branch
00001D52                            
00001D52 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 5 frames
00001D58 3038 F632                  		move.w	(v_pcyc_num).w,d0 ; get cycle number
00001D5C 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D60 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D64 E748                       		lsl.w	#3,d0
00001D66 43F8 FB50                  		lea	(v_pal_dry+$50).w,a1
00001D6A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D6E 22B0 0004                  		move.l	4(a0,d0.w),(a1)	; copy palette data to RAM
00001D72                            
00001D72                            PCycGHZ_Skip:
00001D72 4E75                       		rts	
00001D74                            ; End of function PCycle_GHZ
00001D74                            
00001D74                            
00001D74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D74                            
00001D74                            
00001D74                            PCycle_LZ:
00001D74                            ; Waterfalls
00001D74 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D78 6A00                       		bpl.s	PCycLZ_Skip1	; if time remains, branch
00001D7A                            
00001D7A 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 2 frames
00001D80 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001D84 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D88 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D8C E748                       		lsl.w	#3,d0
00001D8E 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001D94 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; check if level is SBZ3
00001D9A 6600                       		bne.s	PCycLZ_NotSBZ3
00001D9C 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	palette instead
00001DA2                            
00001DA2                            	PCycLZ_NotSBZ3:
00001DA2 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001DA6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DAA 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001DAE 43F8 FAD6                  		lea	(v_pal_water+$56).w,a1
00001DB2 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DB6 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001DBA                            
00001DBA                            PCycLZ_Skip1:
00001DBA                            ; Conveyor belts
00001DBA                            		;move.w	(v_framecount).w,d0
00001DBA                            		;andi.w	#7,d0
00001DBA                            		;move.b	PCycLZ_Seq(pc,d0.w),d0 ; get byte from palette sequence
00001DBA                            		;beq.s	PCycLZ_Skip2	; if byte is 0, branch
00001DBA                            		;moveq	#1,d1
00001DBA                            		;tst.b	(f_conveyrev).w	; have conveyor belts been reversed?
00001DBA                            		;beq.s	PCycLZ_NoRev	; if not, branch
00001DBA                            		;neg.w	d1
00001DBA                            
00001DBA                            	;PCycLZ_NoRev:
00001DBA                            		;move.w	(v_pal_buffer).w,d0
00001DBA                            		;andi.w	#3,d0
00001DBA                            		;add.w	d1,d0
00001DBA                            		;cmpi.w	#3,d0
00001DBA                            		;bcs.s	loc_1A0A
00001DBA                            		;move.w	d0,d1
00001DBA                            		;moveq	#0,d0
00001DBA                            		;tst.w	d1
00001DBA                            		;bpl.s	loc_1A0A
00001DBA                            		;moveq	#2,d0
00001DBA                            
00001DBA                            ;loc_1A0A:
00001DBA                            		;move.w	d0,(v_pal_buffer).w
00001DBA                            		;add.w	d0,d0
00001DBA                            		;move.w	d0,d1
00001DBA                            		;add.w	d0,d0
00001DBA                            		;add.w	d1,d0
00001DBA                            		;lea	(Pal_LZCyc2).l,a0
00001DBA                            		;lea	(v_pal_dry+$76).w,a1
00001DBA                            		;move.l	(a0,d0.w),(a1)+
00001DBA                            		;move.w	4(a0,d0.w),(a1)
00001DBA                            		;lea	(Pal_LZCyc3).l,a0
00001DBA                            		;lea	(v_pal_water+$76).w,a1
00001DBA                            		;move.l	(a0,d0.w),(a1)+
00001DBA                            		;move.w	4(a0,d0.w),(a1)
00001DBA                            
00001DBA                            ;PCycLZ_Skip2:
00001DBA 4E75                       		rts	
00001DBC                            ; End of function PCycle_LZ
00001DBC                            
00001DBC                            ; ===========================================================================
00001DBC 0100 0001 0000 0100        PCycLZ_Seq:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001DC4                            ; ===========================================================================
00001DC4                            
00001DC4                            PCycle_MZ:
00001DC4 4E75                       		rts	
00001DC6                            
00001DC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DC6                            
00001DC6                            
00001DC6                            PalCycle_SLZ:
00001DC6 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001DCA 6A00                       		bpl.s	locret_1A80
00001DCC 31FC 0007 F634             		move.w	#7,(v_pcyc_time).w
00001DD2 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001DD6 5240                       		addq.w	#1,d0
00001DD8 0C40 0006                  		cmpi.w	#6,d0
00001DDC 6500                       		bcs.s	loc_1A60
00001DDE 7000                       		moveq	#0,d0
00001DE0                            
00001DE0                            loc_1A60:
00001DE0 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001DE4 3200                       		move.w	d0,d1
00001DE6 D241                       		add.w	d1,d1
00001DE8 D041                       		add.w	d1,d0
00001DEA D040                       		add.w	d0,d0
00001DEC 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001DF2 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001DF6 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001DFA 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001E00                            
00001E00                            locret_1A80:
00001E00 4E75                       		rts	
00001E02                            ; End of function PalCycle_SLZ
00001E02                            
00001E02                            
00001E02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E02                            
00001E02                            
00001E02                            PalCycle_SYZ:
00001E02 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E06 6A00                       		bpl.s	locret_1AC6
00001E08 31FC 0005 F634             		move.w	#5,(v_pcyc_time).w
00001E0E 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001E12 5278 F632                  		addq.w	#1,(v_pcyc_num).w
00001E16 0240 0003                  		andi.w	#3,d0
00001E1A E548                       		lsl.w	#2,d0
00001E1C 3200                       		move.w	d0,d1
00001E1E D040                       		add.w	d0,d0
00001E20 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001E26 43F8 FB6E                  		lea	(v_pal_dry+$6E).w,a1
00001E2A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001E2E 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001E32 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001E38 43F8 FB76                  		lea	(v_pal_dry+$76).w,a1
00001E3C 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001E40 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001E46                            
00001E46                            locret_1AC6:
00001E46 4E75                       		rts	
00001E48                            ; End of function PalCycle_SYZ
00001E48                            
00001E48                            
00001E48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E48                            
00001E48                            
00001E48                            PalCycle_SBZ:
00001E48 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E4E 4A38 FE11                  		tst.b	(v_act).w
00001E52 6700                       		beq.s	loc_1ADA
00001E54 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E5A                            
00001E5A                            loc_1ADA:
00001E5A 43F8 F650                  		lea	(v_pal_buffer).w,a1
00001E5E 321A                       		move.w	(a2)+,d1
00001E60                            
00001E60                            loc_1AE0:
00001E60 5311                       		subq.b	#1,(a1)
00001E62 6B00                       		bmi.s	loc_1AEA
00001E64 5489                       		addq.l	#2,a1
00001E66 5C8A                       		addq.l	#6,a2
00001E68 6000                       		bra.s	loc_1B06
00001E6A                            ; ===========================================================================
00001E6A                            
00001E6A                            loc_1AEA:
00001E6A 12DA                       		move.b	(a2)+,(a1)+
00001E6C 1011                       		move.b	(a1),d0
00001E6E 5200                       		addq.b	#1,d0
00001E70 B01A                       		cmp.b	(a2)+,d0
00001E72 6500                       		bcs.s	loc_1AF6
00001E74 7000                       		moveq	#0,d0
00001E76                            
00001E76                            loc_1AF6:
00001E76 12C0                       		move.b	d0,(a1)+
00001E78 0240 000F                  		andi.w	#$F,d0
00001E7C D040                       		add.w	d0,d0
00001E7E 305A                       		movea.w	(a2)+,a0
00001E80 365A                       		movea.w	(a2)+,a3
00001E82 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001E86                            
00001E86                            loc_1B06:
00001E86 51C9 FFD8                  		dbf	d1,loc_1AE0
00001E8A 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E8E 6A00                       		bpl.s	locret_1B64
00001E90 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001E96 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w
00001E9C 4A38 FE11                  		tst.b	(v_act).w
00001EA0 6700                       		beq.s	loc_1B2E
00001EA2 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001EA8 31FC 0002 F634             		move.w	#2,(v_pcyc_time).w
00001EAE                            
00001EAE                            loc_1B2E:
00001EAE 72FF                       		moveq	#-1,d1
00001EB0 4A38 F7C0                  		tst.b	(f_conveyrev).w
00001EB4 6700                       		beq.s	loc_1B38
00001EB6 4441                       		neg.w	d1
00001EB8                            
00001EB8                            loc_1B38:
00001EB8 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001EBC 0240 0003                  		andi.w	#3,d0
00001EC0 D041                       		add.w	d1,d0
00001EC2 0C40 0003                  		cmpi.w	#3,d0
00001EC6 6500                       		bcs.s	loc_1B52
00001EC8 3200                       		move.w	d0,d1
00001ECA 7000                       		moveq	#0,d0
00001ECC 4A41                       		tst.w	d1
00001ECE 6A00                       		bpl.s	loc_1B52
00001ED0 7002                       		moveq	#2,d0
00001ED2                            
00001ED2                            loc_1B52:
00001ED2 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001ED6 D040                       		add.w	d0,d0
00001ED8 43F8 FB58                  		lea	(v_pal_dry+$58).w,a1
00001EDC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001EE0 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001EE4                            
00001EE4                            locret_1B64:
00001EE4 4E75                       		rts	
00001EE6                            ; End of function PalCycle_SBZ
00001EE6                            ; End of function PalCycle_SBZ
00001EE6                            
00001EE6                            Pal_TitleCyc:	incbin	"palette\Cycle - Title Screen Water.bin"
00001F06                            Pal_GHZCyc:	incbin	"palette\Cycle - GHZ.bin"
00001F26                            Pal_LZCyc1:	incbin	"palette\Cycle - LZ Waterfall.bin"
00001F46                            Pal_LZCyc2:	incbin	"palette\Cycle - LZ Conveyor Belt.bin"
00001F58                            Pal_LZCyc3:	incbin	"palette\Cycle - LZ Conveyor Belt Underwater.bin"
00001F6A                            Pal_SBZ3Cyc1:	incbin	"palette\Cycle - SBZ3 Waterfall.bin"
00001FD2                            Pal_SLZCyc:	incbin	"palette\Cycle - SLZ.bin"
00001FF6                            Pal_SYZCyc1:	incbin	"palette\Cycle - SYZ1.bin"
00002016                            Pal_SYZCyc2:	incbin	"palette\Cycle - SYZ2.bin"
00002026                            Pal_SYZCyc1_2:	incbin	"palette\Cycle - SYZ1 Act 2.bin"
00002046                            Pal_SYZCyc2_2:	incbin	"palette\Cycle - SYZ2 Act 2.bin"
00002056                            Pal_SYZCyc1_3:	incbin	"palette\Cycle - SYZ1 Act 3.bin"
00002076                            Pal_SYZCyc2_3:	incbin	"palette\Cycle - SYZ2 Act 3.bin"
00002086                            
00002086                            		include	"_inc\SBZ Palette Scripts.asm"
00002086                            ; ---------------------------------------------------------------------------
00002086                            ; Scrap Brain Zone palette cycling script
00002086                            ; ---------------------------------------------------------------------------
00002086                            
00002086                            mSBZp:	macro duration,colors,paladdress,ramaddress
00002086                            	dc.b duration, colors
00002086                            	dc.w paladdress, ramaddress
00002086                            	endm
00002086                            
00002086                            ; duration in frames, number of colors, palette address, RAM address
00002086                            
00002086                            Pal_SBZCycList1:
00002086 0000                       	dc.w ((end_SBZCycList1-Pal_SBZCycList1-2)/6)-1
00002088 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
0000208E 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
00002094 0E08 0000 FB6E             	mSBZp	$E,8,Pal_SBZCyc3,v_pal_dry+$6E
0000209A 0B08 0000 FB70             	mSBZp	$B,8,Pal_SBZCyc5,v_pal_dry+$70
000020A0 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
000020A6 1C10 0000 FB7E             	mSBZp	$1C,$10,Pal_SBZCyc7,v_pal_dry+$7E
000020AC 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
000020B2 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
000020B8 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
000020BE                            end_SBZCycList1:
000020BE                            	even
000020BE                            
000020BE                            Pal_SBZCycList2:
000020BE 0000                       	dc.w ((end_SBZCycList2-Pal_SBZCycList2-2)/6)-1
000020C0 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
000020C6 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
000020CC 0908 0000 FB70             	mSBZp	9,8,Pal_SBZCyc9,v_pal_dry+$70
000020D2 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
000020D8 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
000020DE 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
000020E4 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
000020EA                            end_SBZCycList2:
000020EA                            	even
000020EA                            	even
000020EA                            
000020EA                            Pal_SBZCyc1:	incbin	"palette\Cycle - SBZ 1.bin"
000020FA                            Pal_SBZCyc2:	incbin	"palette\Cycle - SBZ 2.bin"
0000210A                            Pal_SBZCyc3:	incbin	"palette\Cycle - SBZ 3.bin"
0000211A                            Pal_SBZCyc4:	incbin	"palette\Cycle - SBZ 4.bin"
00002126                            Pal_SBZCyc5:	incbin	"palette\Cycle - SBZ 5.bin"
00002136                            Pal_SBZCyc6:	incbin	"palette\Cycle - SBZ 6.bin"
00002146                            Pal_SBZCyc7:	incbin	"palette\Cycle - SBZ 7.bin"
00002166                            Pal_SBZCyc8:	incbin	"palette\Cycle - SBZ 8.bin"
00002170                            Pal_SBZCyc9:	incbin	"palette\Cycle - SBZ 9.bin"
00002180                            Pal_SBZCyc10:	incbin	"palette\Cycle - SBZ 10.bin"
0000218C                            ; ---------------------------------------------------------------------------
0000218C                            ; Subroutine to	fade in from black
0000218C                            ; ---------------------------------------------------------------------------
0000218C                            
0000218C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000218C                            
0000218C                            
0000218C                            PaletteFadeIn:
0000218C 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; set start position = 0; size = $40
00002192                            
00002192                            PalFadeIn_Alt:				; start position and size are already set
00002192 7000                       		moveq	#0,d0
00002194 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002198 1038 F626                  		move.b	(v_pfade_start).w,d0
0000219C D0C0                       		adda.w	d0,a0
0000219E 7200                       		moveq	#cBlack,d1
000021A0 1038 F627                  		move.b	(v_pfade_size).w,d0
000021A4                            
000021A4                            	@fill:
000021A4 30C1                       		move.w	d1,(a0)+
000021A6 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with black
000021AA                            
000021AA 383C 0015                  		move.w	#$15,d4
000021AE                            
000021AE                            	@mainloop:
000021AE 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
000021B4 6100 0000                  		bsr.w	WaitForVBla
000021B8 6100                       		bsr.s	FadeIn_FromBlack
000021BA 6100 F5EA                  		bsr.w	RunPLC
000021BE 51CC FFEE                  		dbf	d4,@mainloop
000021C2 4E75                       		rts	
000021C4                            ; End of function PaletteFadeIn
000021C4                            
000021C4                            
000021C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021C4                            
000021C4                            
000021C4                            FadeIn_FromBlack:
000021C4 7000                       		moveq	#0,d0
000021C6 41F8 FB00                  		lea	(v_pal_dry).w,a0
000021CA 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
000021CE 1038 F626                  		move.b	(v_pfade_start).w,d0
000021D2 D0C0                       		adda.w	d0,a0
000021D4 D2C0                       		adda.w	d0,a1
000021D6 1038 F627                  		move.b	(v_pfade_size).w,d0
000021DA                            
000021DA                            	@addcolour:
000021DA 6100                       		bsr.s	FadeIn_AddColour ; increase colour
000021DC 51C8 FFFC                  		dbf	d0,@addcolour	; repeat for size of palette
000021E0                            
000021E0 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
000021E6 6600                       		bne.s	@exit		; if not, branch
000021E8                            
000021E8 7000                       		moveq	#0,d0
000021EA 41F8 FA80                  		lea	(v_pal_water).w,a0
000021EE 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
000021F2 1038 F626                  		move.b	(v_pfade_start).w,d0
000021F6 D0C0                       		adda.w	d0,a0
000021F8 D2C0                       		adda.w	d0,a1
000021FA 1038 F627                  		move.b	(v_pfade_size).w,d0
000021FE                            
000021FE                            	@addcolour2:
000021FE 6100                       		bsr.s	FadeIn_AddColour ; increase colour again
00002200 51C8 FFFC                  		dbf	d0,@addcolour2 ; repeat
00002204                            
00002204                            @exit:
00002204 4E75                       		rts	
00002206                            ; End of function FadeIn_FromBlack
00002206                            
00002206                            
00002206                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002206                            
00002206                            
00002206                            FadeIn_AddColour:
00002206                            @addblue:
00002206 3419                       		move.w	(a1)+,d2
00002208 3610                       		move.w	(a0),d3
0000220A B642                       		cmp.w	d2,d3		; is colour already at threshold level?
0000220C 6700                       		beq.s	@next		; if yes, branch
0000220E 3203                       		move.w	d3,d1
00002210 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002214 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002216 6200                       		bhi.s	@addgreen	; if yes, branch
00002218 30C1                       		move.w	d1,(a0)+	; update palette
0000221A 4E75                       		rts	
0000221C                            ; ===========================================================================
0000221C                            
0000221C                            @addgreen:
0000221C 3203                       		move.w	d3,d1
0000221E 0641 0020                  		addi.w	#$20,d1		; increase green value
00002222 B242                       		cmp.w	d2,d1
00002224 6200                       		bhi.s	@addred
00002226 30C1                       		move.w	d1,(a0)+	; update palette
00002228 4E75                       		rts	
0000222A                            ; ===========================================================================
0000222A                            
0000222A                            @addred:
0000222A 5458                       		addq.w	#2,(a0)+	; increase red value
0000222C 4E75                       		rts	
0000222E                            ; ===========================================================================
0000222E                            
0000222E                            @next:
0000222E 5448                       		addq.w	#2,a0		; next colour
00002230 4E75                       		rts	
00002232                            ; End of function FadeIn_AddColour
00002232                            
00002232                            
00002232                            ; ---------------------------------------------------------------------------
00002232                            ; Subroutine to fade out to black
00002232                            ; ---------------------------------------------------------------------------
00002232                            
00002232                            
00002232                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002232                            
00002232                            
00002232                            PaletteFadeOut:
00002232 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00002238 383C 0015                  		move.w	#$15,d4
0000223C                            
0000223C                            	@mainloop:
0000223C 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002242 6100 0000                  		bsr.w	WaitForVBla
00002246 6100                       		bsr.s	FadeOut_ToBlack
00002248 6100 F55C                  		bsr.w	RunPLC
0000224C 51CC FFEE                  		dbf	d4,@mainloop
00002250 4E75                       		rts	
00002252                            ; End of function PaletteFadeOut
00002252                            
00002252                            
00002252                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002252                            
00002252                            
00002252                            FadeOut_ToBlack:
00002252 7000                       		moveq	#0,d0
00002254 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002258 1038 F626                  		move.b	(v_pfade_start).w,d0
0000225C D0C0                       		adda.w	d0,a0
0000225E 1038 F627                  		move.b	(v_pfade_size).w,d0
00002262                            
00002262                            	@decolour:
00002262 6100                       		bsr.s	FadeOut_DecColour ; decrease colour
00002264 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
00002268                            
00002268 7000                       		moveq	#0,d0
0000226A 41F8 FA80                  		lea	(v_pal_water).w,a0
0000226E 1038 F626                  		move.b	(v_pfade_start).w,d0
00002272 D0C0                       		adda.w	d0,a0
00002274 1038 F627                  		move.b	(v_pfade_size).w,d0
00002278                            
00002278                            	@decolour2:
00002278 6100                       		bsr.s	FadeOut_DecColour
0000227A 51C8 FFFC                  		dbf	d0,@decolour2
0000227E 4E75                       		rts	
00002280                            ; End of function FadeOut_ToBlack
00002280                            
00002280                            
00002280                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002280                            
00002280                            
00002280                            FadeOut_DecColour:
00002280                            @dered:
00002280 3410                       		move.w	(a0),d2
00002282 6700                       		beq.s	@next
00002284 3202                       		move.w	d2,d1
00002286 0241 000E                  		andi.w	#$E,d1
0000228A 6700                       		beq.s	@degreen
0000228C 5558                       		subq.w	#2,(a0)+	; decrease red value
0000228E 4E75                       		rts	
00002290                            ; ===========================================================================
00002290                            
00002290                            @degreen:
00002290 3202                       		move.w	d2,d1
00002292 0241 00E0                  		andi.w	#$E0,d1
00002296 6700                       		beq.s	@deblue
00002298 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
0000229C 4E75                       		rts	
0000229E                            ; ===========================================================================
0000229E                            
0000229E                            @deblue:
0000229E 3202                       		move.w	d2,d1
000022A0 0241 0E00                  		andi.w	#$E00,d1
000022A4 6700                       		beq.s	@next
000022A6 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000022AA 4E75                       		rts	
000022AC                            ; ===========================================================================
000022AC                            
000022AC                            @next:
000022AC 5448                       		addq.w	#2,a0
000022AE 4E75                       		rts	
000022B0                            ; End of function FadeOut_DecColour
000022B0                            
000022B0                            ; ---------------------------------------------------------------------------
000022B0                            ; Subroutine to	fade in from white (Special Stage)
000022B0                            ; ---------------------------------------------------------------------------
000022B0                            
000022B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022B0                            
000022B0                            
000022B0                            PaletteWhiteIn:
000022B0 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
000022B6 7000                       		moveq	#0,d0
000022B8 41F8 FB00                  		lea	(v_pal_dry).w,a0
000022BC 1038 F626                  		move.b	(v_pfade_start).w,d0
000022C0 D0C0                       		adda.w	d0,a0
000022C2 323C 0EEE                  		move.w	#cWhite,d1
000022C6 1038 F627                  		move.b	(v_pfade_size).w,d0
000022CA                            
000022CA                            	@fill:
000022CA 30C1                       		move.w	d1,(a0)+
000022CC 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with white
000022D0                            
000022D0 383C 0015                  		move.w	#$15,d4
000022D4                            
000022D4                            	@mainloop:
000022D4 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
000022DA 6100 0000                  		bsr.w	WaitForVBla
000022DE 6100                       		bsr.s	WhiteIn_FromWhite
000022E0 6100 F4C4                  		bsr.w	RunPLC
000022E4 51CC FFEE                  		dbf	d4,@mainloop
000022E8 4E75                       		rts	
000022EA                            ; End of function PaletteWhiteIn
000022EA                            
000022EA                            
000022EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022EA                            
000022EA                            
000022EA                            WhiteIn_FromWhite:
000022EA 7000                       		moveq	#0,d0
000022EC 41F8 FB00                  		lea	(v_pal_dry).w,a0
000022F0 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
000022F4 1038 F626                  		move.b	(v_pfade_start).w,d0
000022F8 D0C0                       		adda.w	d0,a0
000022FA D2C0                       		adda.w	d0,a1
000022FC 1038 F627                  		move.b	(v_pfade_size).w,d0
00002300                            
00002300                            	@decolour:
00002300 6100                       		bsr.s	WhiteIn_DecColour ; decrease colour
00002302 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
00002306                            
00002306 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
0000230C 6600                       		bne.s	@exit		; if not, branch
0000230E 7000                       		moveq	#0,d0
00002310 41F8 FA80                  		lea	(v_pal_water).w,a0
00002314 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00002318 1038 F626                  		move.b	(v_pfade_start).w,d0
0000231C D0C0                       		adda.w	d0,a0
0000231E D2C0                       		adda.w	d0,a1
00002320 1038 F627                  		move.b	(v_pfade_size).w,d0
00002324                            
00002324                            	@decolour2:
00002324 6100                       		bsr.s	WhiteIn_DecColour
00002326 51C8 FFFC                  		dbf	d0,@decolour2
0000232A                            
0000232A                            	@exit:
0000232A 4E75                       		rts	
0000232C                            ; End of function WhiteIn_FromWhite
0000232C                            
0000232C                            
0000232C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000232C                            
0000232C                            
0000232C                            WhiteIn_DecColour:
0000232C                            @deblue:
0000232C 3419                       		move.w	(a1)+,d2
0000232E 3610                       		move.w	(a0),d3
00002330 B642                       		cmp.w	d2,d3
00002332 6700                       		beq.s	@next
00002334 3203                       		move.w	d3,d1
00002336 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000233A 6500                       		blo.s	@degreen
0000233C B242                       		cmp.w	d2,d1
0000233E 6500                       		blo.s	@degreen
00002340 30C1                       		move.w	d1,(a0)+
00002342 4E75                       		rts	
00002344                            ; ===========================================================================
00002344                            
00002344                            @degreen:
00002344 3203                       		move.w	d3,d1
00002346 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000234A 6500                       		blo.s	@dered
0000234C B242                       		cmp.w	d2,d1
0000234E 6500                       		blo.s	@dered
00002350 30C1                       		move.w	d1,(a0)+
00002352 4E75                       		rts	
00002354                            ; ===========================================================================
00002354                            
00002354                            @dered:
00002354 5558                       		subq.w	#2,(a0)+	; decrease red value
00002356 4E75                       		rts	
00002358                            ; ===========================================================================
00002358                            
00002358                            @next:
00002358 5448                       		addq.w	#2,a0
0000235A 4E75                       		rts	
0000235C                            ; End of function WhiteIn_DecColour
0000235C                            
0000235C                            ; ---------------------------------------------------------------------------
0000235C                            ; Subroutine to fade to white (Special Stage)
0000235C                            ; ---------------------------------------------------------------------------
0000235C                            
0000235C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000235C                            
0000235C                            
0000235C                            PaletteWhiteOut:
0000235C 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00002362 383C 0015                  		move.w	#$15,d4
00002366                            
00002366                            	@mainloop:
00002366 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
0000236C 6100 0000                  		bsr.w	WaitForVBla
00002370 6100                       		bsr.s	WhiteOut_ToWhite
00002372 6100 F432                  		bsr.w	RunPLC
00002376 51CC FFEE                  		dbf	d4,@mainloop
0000237A 4E75                       		rts	
0000237C                            ; End of function PaletteWhiteOut
0000237C                            
0000237C                            
0000237C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000237C                            
0000237C                            
0000237C                            WhiteOut_ToWhite:
0000237C 7000                       		moveq	#0,d0
0000237E 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002382 1038 F626                  		move.b	(v_pfade_start).w,d0
00002386 D0C0                       		adda.w	d0,a0
00002388 1038 F627                  		move.b	(v_pfade_size).w,d0
0000238C                            
0000238C                            	@addcolour:
0000238C 6100                       		bsr.s	WhiteOut_AddColour
0000238E 51C8 FFFC                  		dbf	d0,@addcolour
00002392                            
00002392 7000                       		moveq	#0,d0
00002394 41F8 FA80                  		lea	(v_pal_water).w,a0
00002398 1038 F626                  		move.b	(v_pfade_start).w,d0
0000239C D0C0                       		adda.w	d0,a0
0000239E 1038 F627                  		move.b	(v_pfade_size).w,d0
000023A2                            
000023A2                            	@addcolour2:
000023A2 6100                       		bsr.s	WhiteOut_AddColour
000023A4 51C8 FFFC                  		dbf	d0,@addcolour2
000023A8 4E75                       		rts	
000023AA                            ; End of function WhiteOut_ToWhite
000023AA                            
000023AA                            
000023AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000023AA                            
000023AA                            
000023AA                            WhiteOut_AddColour:
000023AA                            @addred:
000023AA 3410                       		move.w	(a0),d2
000023AC 0C42 0EEE                  		cmpi.w	#cWhite,d2
000023B0 6700                       		beq.s	@next
000023B2 3202                       		move.w	d2,d1
000023B4 0241 000E                  		andi.w	#$E,d1
000023B8 0C41 000E                  		cmpi.w	#cRed,d1
000023BC 6700                       		beq.s	@addgreen
000023BE 5458                       		addq.w	#2,(a0)+	; increase red value
000023C0 4E75                       		rts	
000023C2                            ; ===========================================================================
000023C2                            
000023C2                            @addgreen:
000023C2 3202                       		move.w	d2,d1
000023C4 0241 00E0                  		andi.w	#$E0,d1
000023C8 0C41 00E0                  		cmpi.w	#cGreen,d1
000023CC 6700                       		beq.s	@addblue
000023CE 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000023D2 4E75                       		rts	
000023D4                            ; ===========================================================================
000023D4                            
000023D4                            @addblue:
000023D4 3202                       		move.w	d2,d1
000023D6 0241 0E00                  		andi.w	#$E00,d1
000023DA 0C41 0E00                  		cmpi.w	#cBlue,d1
000023DE 6700                       		beq.s	@next
000023E0 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
000023E4 4E75                       		rts	
000023E6                            ; ===========================================================================
000023E6                            
000023E6                            @next:
000023E6 5448                       		addq.w	#2,a0
000023E8 4E75                       		rts	
000023EA                            ; End of function WhiteOut_AddColour
000023EA                            
000023EA                            ; ---------------------------------------------------------------------------
000023EA                            ; Palette cycling routine - Sega logo
000023EA                            ; ---------------------------------------------------------------------------
000023EA                            
000023EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000023EA                            
000023EA                            
000023EA                            PalCycle_Sega:
000023EA 4A38 F635                  		tst.b	(v_pcyc_time+1).w
000023EE 6600                       		bne.s	loc_206A
000023F0 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
000023F4 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
000023FA 7205                       		moveq	#5,d1
000023FC 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002400                            
00002400                            loc_2020:
00002400 6A00                       		bpl.s	loc_202A
00002402 5448                       		addq.w	#2,a0
00002404 5341                       		subq.w	#1,d1
00002406 5440                       		addq.w	#2,d0
00002408 60F6                       		bra.s	loc_2020
0000240A                            ; ===========================================================================
0000240A                            
0000240A                            loc_202A:
0000240A 3400                       		move.w	d0,d2
0000240C 0242 001E                  		andi.w	#$1E,d2
00002410 6600                       		bne.s	loc_2034
00002412 5440                       		addq.w	#2,d0
00002414                            
00002414                            loc_2034:
00002414 0C40 0060                  		cmpi.w	#$60,d0
00002418 6400                       		bhs.s	loc_203E
0000241A 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000241E                            
0000241E                            loc_203E:
0000241E 5440                       		addq.w	#2,d0
00002420 51C9 FFE8                  		dbf	d1,loc_202A
00002424                            
00002424 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002428 5440                       		addq.w	#2,d0
0000242A 3400                       		move.w	d0,d2
0000242C 0242 001E                  		andi.w	#$1E,d2
00002430 6600                       		bne.s	loc_2054
00002432 5440                       		addq.w	#2,d0
00002434                            
00002434                            loc_2054:
00002434 0C40 0064                  		cmpi.w	#$64,d0
00002438 6D00                       		blt.s	loc_2062
0000243A 31FC 0401 F634             		move.w	#$401,(v_pcyc_time).w
00002440 70F4                       		moveq	#-$C,d0
00002442                            
00002442                            loc_2062:
00002442 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00002446 7001                       		moveq	#1,d0
00002448 4E75                       		rts	
0000244A                            ; ===========================================================================
0000244A                            
0000244A                            loc_206A:
0000244A 5338 F634                  		subq.b	#1,(v_pcyc_time).w
0000244E 6A00                       		bpl.s	loc_20BC
00002450 11FC 0004 F634             		move.b	#4,(v_pcyc_time).w
00002456 3038 F632                  		move.w	(v_pcyc_num).w,d0
0000245A 0640 000C                  		addi.w	#$C,d0
0000245E 0C40 0030                  		cmpi.w	#$30,d0
00002462 6500                       		blo.s	loc_2088
00002464 7000                       		moveq	#0,d0
00002466 4E75                       		rts	
00002468                            ; ===========================================================================
00002468                            
00002468                            loc_2088:
00002468 31C0 F632                  		move.w	d0,(v_pcyc_num).w
0000246C 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002472 41F0 0000                  		lea	(a0,d0.w),a0
00002476 43F8 FB04                  		lea	(v_pal_dry+$04).w,a1
0000247A 22D8                       		move.l	(a0)+,(a1)+
0000247C 22D8                       		move.l	(a0)+,(a1)+
0000247E 3298                       		move.w	(a0)+,(a1)
00002480 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
00002484 7000                       		moveq	#0,d0
00002486 722C                       		moveq	#$2C,d1
00002488                            
00002488                            loc_20A8:
00002488 3400                       		move.w	d0,d2
0000248A 0242 001E                  		andi.w	#$1E,d2
0000248E 6600                       		bne.s	loc_20B2
00002490 5440                       		addq.w	#2,d0
00002492                            
00002492                            loc_20B2:
00002492 3390 0000                  		move.w	(a0),(a1,d0.w)
00002496 5440                       		addq.w	#2,d0
00002498 51C9 FFEE                  		dbf	d1,loc_20A8
0000249C                            
0000249C                            loc_20BC:
0000249C 7001                       		moveq	#1,d0
0000249E 4E75                       		rts	
000024A0                            ; End of function PalCycle_Sega
000024A0                            
000024A0                            ; ===========================================================================
000024A0                            
000024A0                            Pal_Sega1:	incbin	"palette\Sega1.bin"
000024AC                            Pal_Sega2:	incbin	"palette\Sega2.bin"
000024DC                            
000024DC                            ; ---------------------------------------------------------------------------
000024DC                            ; Subroutines to load palettes
000024DC                            
000024DC                            ; input:
000024DC                            ;	d0 = index number for palette
000024DC                            ; ---------------------------------------------------------------------------
000024DC                            
000024DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000024DC                            
000024DC                            
000024DC                            ; ---------------------------------------------------------------------------
000024DC                            ; Subroutines to load pallets
000024DC                            ; ---------------------------------------------------------------------------
000024DC                            
000024DC                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024DC                            
000024DC                            PalLoad1:
000024DC 1238 FE11                  		move.b ($FFFFFE11),d1
000024E0 43F9 0000 0000             		lea (PalPointers).l,a1
000024E6 0C01 0000                  		cmp.b #0,d1
000024EA 6700 0000                  		beq.w PalLoad1_Continue
000024EE 43F9 0000 0000             		lea (PalPointers2).l,a1
000024F4 0C01 0001                  		cmp.b #1,d1
000024F8 6700 0000                  		beq.w PalLoad1_Continue
000024FC 43F9 0000 0000             		lea (PalPointers3).l,a1
00002502                            
00002502                            PalLoad1_Continue:
00002502 E748                       		lsl.w #3,d0
00002504 D2C0                       		adda.w d0,a1
00002506 2459                       		movea.l (a1)+,a2
00002508 3659                       		movea.w (a1)+,a3
0000250A D6FC 0080                  		adda.w #$80,a3
0000250E 3E19                       		move.w (a1)+,d7
00002510                            
00002510                            loc_2110:
00002510 26DA                       		move.l (a2)+,(a3)+
00002512 51CF FFFC                  		dbf d7,loc_2110
00002516 4E75                       		rts
00002518                             ; End of function PalLoad1
00002518                            
00002518                            
00002518                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002518                            
00002518                            PalLoad2:
00002518 1238 FE11                  		move.b ($FFFFFE11),d1
0000251C 43F9 0000 0000             		lea (PalPointers).l,a1
00002522 0C01 0000                  		cmp.b #0,d1
00002526 6700 0000                  		beq.w PalLoad2_Continue
0000252A 43F9 0000 0000             		lea (PalPointers2).l,a1
00002530 0C01 0001                  		cmp.b #1,d1
00002534 6700 0000                  		beq.w PalLoad2_Continue
00002538 43F9 0000 0000             		lea (PalPointers3).l,a1
0000253E                            
0000253E                            
0000253E                            PalLoad2_Continue:
0000253E E748                       		lsl.w #3,d0
00002540 D2C0                       		adda.w d0,a1
00002542 2459                       		movea.l (a1)+,a2
00002544 3659                       		movea.w (a1)+,a3
00002546 3E19                       		move.w (a1)+,d7
00002548                            
00002548                            loc_2128:
00002548 26DA                       		move.l (a2)+,(a3)+
0000254A 51CF FFFC                  		dbf d7,loc_2128
0000254E 4E75                       		rts
00002550                            ; End of function PalLoad2
00002550                            
00002550                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00002550                            
00002550                            
00002550                            PalLoad_Loop: ;Quick load - TIS
00002550                                    
00002550 34D9                               move.w    (a1)+,(a2)+              ;Copy pallete data to RAM
00002552 51C8 FFFC                          dbf    d0,PalLoad_Loop               ;Loop d0 (length)
00002556 4E75                               rts
00002558                            
00002558                            ; ---------------------------------------------------------------------------
00002558                            ; Underwater pallet loading subroutine
00002558                            ; ---------------------------------------------------------------------------
00002558                            
00002558                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002558                            
00002558                            PalLoad3_Water:
00002558 1238 FE11                  		move.b ($FFFFFE11),d1
0000255C 43F9 0000 0000             		lea (PalPointers).l,a1
00002562 0C01 0000                  		cmp.b #0,d1
00002566 6700 0000                  		beq.w PalLoad3_Continue
0000256A 43F9 0000 0000             		lea (PalPointers2).l,a1
00002570 0C01 0001                  		cmp.b #1,d1
00002574 6700 0000                  		beq.w PalLoad3_Continue
00002578 43F9 0000 0000             		lea (PalPointers3).l,a1
0000257E                            
0000257E                            PalLoad3_Continue:
0000257E E748                       		lsl.w #3,d0
00002580 D2C0                       		adda.w d0,a1
00002582 2459                       		movea.l (a1)+,a2
00002584 3659                       		movea.w (a1)+,a3
00002586 96FC 0080                  		suba.w #$80,a3
0000258A 3E19                       		move.w (a1)+,d7
0000258C                            
0000258C                            loc_2144:
0000258C 26DA                       		move.l (a2)+,(a3)+
0000258E 51CF FFFC                  		dbf d7,loc_2144
00002592 4E75                       		rts
00002594                            ; End of function PalLoad3_Water
00002594                            
00002594                            
00002594                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002594                            
00002594                            
00002594                            PalLoad4_Water:
00002594 1238 FE11                  		move.b ($FFFFFE11),d1
00002598 43F9 0000 0000             		lea (PalPointers).l,a1
0000259E 0C01 0000                  		cmp.b #0,d1
000025A2 6700 0000                  		beq.w PalLoad4_Continue
000025A6 43F9 0000 0000             		lea (PalPointers2).l,a1
000025AC 0C01 0001                  		cmp.b #1,d1
000025B0 6700 0000                  		beq.w PalLoad4_Continue
000025B4 43F9 0000 0000             		lea (PalPointers3).l,a1
000025BA                            
000025BA                            PalLoad4_Continue:
000025BA E748                       		lsl.w #3,d0
000025BC D2C0                       		adda.w d0,a1
000025BE 2459                       		movea.l (a1)+,a2
000025C0 3659                       		movea.w (a1)+,a3
000025C2 96FC 0100                  		suba.w #$100,a3
000025C6 3E19                       		move.w (a1)+,d7
000025C8                            loc_2160:
000025C8 26DA                       		move.l (a2)+,(a3)+
000025CA 51CF FFFC                  		dbf d7,loc_2160
000025CE 4E75                       		rts
000025D0                             ; End of function PalLoad4_Water
000025D0                            
000025D0                            ; ===========================================================================
000025D0                            
000025D0                            		include	"_inc\Palette Pointers.asm"
000025D0                            ; ---------------------------------------------------------------------------
000025D0                            ; Palette pointers
000025D0                            ; ---------------------------------------------------------------------------
000025D0                            
000025D0                            palp:	macro paladdress,ramaddress,colors
000025D0                            	dc.l paladdress
000025D0                            	dc.w ramaddress, (colors>>1)-1
000025D0                            	endm
000025D0                            
000025D0                            PalPointers:
000025D0                            
000025D0                            ; palette address, RAM address, colors
000025D0                            
000025D0 0000 0000 FB00 001F        ptr_Pal_SegaBG:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
000025D8 0000 0000 FB00 001F        ptr_Pal_Title:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
000025E0 0000 0000 FB00 001F        ptr_Pal_LevelSel:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
000025E8 0000 0000 FB00 0007        ptr_Pal_Sonic:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
000025F0                            Pal_Levels:
000025F0 0000 0000 FB20 0017        ptr_Pal_GHZ:		palp	Pal_GHZ,v_pal_dry+$20, $30		; 4 - GHZ
000025F8 0000 0000 FB20 0017        ptr_Pal_LZ:		palp	Pal_LZ,v_pal_dry+$20,$30		; 5 - LZ
00002600 0000 0000 FB20 0017        ptr_Pal_MZ:		palp	Pal_MZ,v_pal_dry+$20,$30		; 6 - MZ
00002608 0000 0000 FB20 0017        ptr_Pal_SLZ:		palp	Pal_SLZ,v_pal_dry+$20,$30		; 7 - SLZ
00002610 0000 0000 FB20 0017        ptr_Pal_SYZ:		palp	Pal_SYZ,v_pal_dry+$20,$30		; 8 - SYZ
00002618 0000 0000 FB20 0017        ptr_Pal_SBZ1:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002620 0000 0000 FB00 001F        ptr_Pal_Special:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002628 0000 0000 FB00 001F        ptr_Pal_LZWater:	palp	Pal_LZWater,v_pal_dry,$40		; $B (11) - LZ underwater
00002630 0000 0000 FB20 0017        ptr_Pal_SBZ3:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002638 0000 0000 FB00 001F        ptr_Pal_SBZ3Water:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002640 0000 0000 FB20 0017        ptr_Pal_SBZ2:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002648 0000 0000 FB00 0007        ptr_Pal_LZSonWater:	palp	Pal_LZSonWater,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002650 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002658 0000 0000 FB00 001F        ptr_Pal_SSResult:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002660 0000 0000 FB00 000F        ptr_Pal_Continue:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002668 0000 0000 FB00 001F        ptr_Pal_Options:		palp	Pal_Options,v_pal_dry,$40		; $14 (20) - options screen
00002670 0000 0000 FB00 001F        ptr_Pal_Ending2:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002678 0000 0000 FB00 001F        ptr_Pal_Ending:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002680 0000 0000 FB00 0007        ptr_Pal_Sonic2:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (20) - Sonic (Sonic 1)
00002688 0000 0000 FB00 0007        ptr_Pal_Sonic3:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (21) - Sonic (Beta)
00002690 0000 0000 FB00 0007        ptr_Pal_Sonic4:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (22) - Sonic (Midnight)
00002698 0000 0000 FB00 0007        ptr_Pal_Sonic5:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (23) - Sonic (C2)
000026A0 0000 0000 FB00 0007        ptr_Pal_Sonic6:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (24) - Sonic (Crackers)
000026A8 0000 0000 FB00 0007        ptr_Pal_Sonic7:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (25) - Sonic (RHS)
000026B0 0000 0000 FB00 0007        ptr_Pal_Sonic8:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (26) - Sonic (Socket)
000026B8 0000 0000 FB00 0007        ptr_Pal_Sonic9:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (27) - Sonic (Cringe)
000026C0 0000 0000 FB00 0007        ptr_Pal_Sonic10:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
000026C8 0000 0000 FB00 0007        ptr_Pal_Sonic11:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
000026D0 0000 0000 FB00 0007        ptr_Pal_SonWater2:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
000026D8 0000 0000 FB00 0007        ptr_Pal_SonWater3:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
000026E0 0000 0000 FB00 0007        ptr_Pal_SonWater4:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
000026E8 0000 0000 FB00 0007        ptr_Pal_SonWater5:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
000026F0 0000 0000 FB00 0007        ptr_Pal_SonWater6:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
000026F8 0000 0000 FB00 0007        ptr_Pal_SonWater7:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
00002700 0000 0000 FB00 0007        ptr_Pal_SonWater8:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
00002708 0000 0000 FB00 0007        ptr_Pal_SonWater9:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
00002710 0000 0000 FB00 0007        ptr_Pal_SonWater10:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
00002718 0000 0000 FB00 0007        ptr_Pal_SonWater11:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
00002720 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
00002728 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
00002730 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
00002738 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
00002740 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
00002748 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
00002750 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
00002758 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
00002760 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
00002768 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
00002770                            			even
00002770                            
00002770                            PalPointers2:
00002770                            
00002770                            ; palette address, RAM address, colors
00002770                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
00002770 0000 0000 FB00 001F        ptr_Pal_SegaBG_D:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002778 0000 0000 FB00 001F        ptr_Pal_Title_D:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002780 0000 0000 FB00 001F        ptr_Pal_LevelSel_D:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002788 0000 0000 FB00 0007        ptr_Pal_SonicD:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002790                            Pal_Levels_2:
00002790 0000 0000 FB20 0017        ptr_Pal_GHZ2:		palp	Pal_GHZ2,v_pal_dry+$20, $30		; 4 - GHZ
00002798 0000 0000 FB20 0017        ptr_Pal_LZ2:		palp	Pal_LZ2,v_pal_dry+$20,$30		; 5 - LZ
000027A0 0000 0000 FB20 0017        ptr_Pal_MZ2:		palp	Pal_MZ2,v_pal_dry+$20,$30		; 6 - MZ
000027A8 0000 0000 FB20 0017        ptr_Pal_SLZ2:		palp	Pal_SLZ2,v_pal_dry+$20,$30		; 7 - SLZ
000027B0 0000 0000 FB20 0017        ptr_Pal_SYZ2:		palp	Pal_SYZ2,v_pal_dry+$20,$30		; 8 - SYZ
000027B8 0000 0000 FB20 0017        ptr_Pal_SBZ1_D:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
000027C0 0000 0000 FB00 001F        ptr_Pal_Special_D:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
000027C8 0000 0000 FB00 001F        ptr_Pal_LZWatr2:	palp	Pal_LZWatr2,v_pal_dry,$40		; $B (11) - LZ underwater
000027D0 0000 0000 FB20 0017        ptr_Pal_SBZ3_D:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
000027D8 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_D:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
000027E0 0000 0000 FB20 0017        ptr_Pal_SBZ2_D:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
000027E8 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
000027F0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_D:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000027F8 0000 0000 FB00 001F        ptr_Pal_SSResult_D:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002800 0000 0000 FB00 000F        ptr_Pal_Continue_D:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002808 0000 0000 FB00 001F        ptr_Pal_Options_D:		palp	Pal_Options,v_pal_dry,$40		; $13 (20) - options screen
00002810 0000 0000 FB00 001F        ptr_Pal_Ending2_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
00002818 0000 0000 FB00 001F        ptr_Pal_Ending_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
00002820 0000 0000 FB00 0007        ptr_Pal_Sonic2_D:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
00002828 0000 0000 FB00 0007        ptr_Pal_Sonic3_D:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
00002830 0000 0000 FB00 0007        ptr_Pal_Sonic4_D:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
00002838 0000 0000 FB00 0007        ptr_Pal_Sonic5_D:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
00002840 0000 0000 FB00 0007        ptr_Pal_Sonic6_D:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
00002848 0000 0000 FB00 0007        ptr_Pal_Sonic7_D:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
00002850 0000 0000 FB00 0007        ptr_Pal_Sonic8_D:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002858 0000 0000 FB00 0007        ptr_Pal_Sonic9_D:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002860 0000 0000 FB00 0007        ptr_Pal_Sonic10_D:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
00002868 0000 0000 FB00 0007        ptr_Pal_Sonic11_D:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
00002870 0000 0000 FB00 0007        ptr_Pal_SonWater2_D:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
00002878 0000 0000 FB00 0007        ptr_Pal_SonWater3_D:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
00002880 0000 0000 FB00 0007        ptr_Pal_SonWater4_D:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
00002888 0000 0000 FB00 0007        ptr_Pal_SonWater5_D:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
00002890 0000 0000 FB00 0007        ptr_Pal_SonWater6_D:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
00002898 0000 0000 FB00 0007        ptr_Pal_SonWater7_D:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
000028A0 0000 0000 FB00 0007        ptr_Pal_SonWater8_D:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
000028A8 0000 0000 FB00 0007        ptr_Pal_SonWater9_D:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
000028B0 0000 0000 FB00 0007        ptr_Pal_SonWater10_D:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
000028B8 0000 0000 FB00 0007        ptr_Pal_SonWater11_D:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
000028C0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2_D:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
000028C8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3_D:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
000028D0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4_D:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
000028D8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5_D:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
000028E0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6_D:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
000028E8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7_D:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
000028F0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8_D:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
000028F8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9_D:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
00002900 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10_D:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
00002908 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11_D:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
00002910                            			even
00002910                            			
00002910                            PalPointers3:
00002910                            			
00002910                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
00002910 0000 0000 FB00 001F        ptr_Pal_SegaBG_E:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002918 0000 0000 FB00 001F        ptr_Pal_Title_E:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002920 0000 0000 FB00 001F        ptr_Pal_LevelSel_E:		palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002928 0000 0000 FB00 0007        ptr_Pal_SonicE:			palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002930                            Pal_Levels_3:
00002930 0000 0000 FB20 0017        ptr_Pal_GHZ3:		palp	Pal_GHZ3,v_pal_dry+$20, $30		; 4 - GHZ
00002938 0000 0000 FB20 0017        ptr_Pal_LZ3:		palp	Pal_LZ3,v_pal_dry+$20,$30		; 5 - LZ
00002940 0000 0000 FB20 0017        ptr_Pal_MZ3:		palp	Pal_MZ3,v_pal_dry+$20,$30		; 6 - MZ
00002948 0000 0000 FB20 0017        ptr_Pal_SLZ3:		palp	Pal_SLZ3,v_pal_dry+$20,$30		; 7 - SLZ
00002950 0000 0000 FB20 0017        ptr_Pal_SYZ3:		palp	Pal_SYZ3,v_pal_dry+$20,$30		; 8 - SYZ
00002958 0000 0000 FB20 0017        ptr_Pal_SBZ1_E:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002960 0000 0000 FB00 001F        ptr_Pal_Special_E:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002968 0000 0000 FB00 001F        ptr_Pal_LZWatr3:	palp	Pal_LZWatr3,v_pal_dry,$40		; $B (11) - LZ underwater
00002970 0000 0000 FB20 0017        ptr_Pal_SBZ3_E:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002978 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_E:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002980 0000 0000 FB20 0017        ptr_Pal_SBZ2_E:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002988 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2E:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002990 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_E:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002998 0000 0000 FB00 001F        ptr_Pal_SSResult_E:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
000029A0 0000 0000 FB00 000F        ptr_Pal_Continue_E:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
000029A8 0000 0000 FB00 001F        ptr_Pal_Options_E:		palp	Pal_Options,v_pal_dry,$40		; $14 (21) - options screen
000029B0 0000 0000 FB00 001F        ptr_Pal_Ending2_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000029B8 0000 0000 FB00 001F        ptr_Pal_Ending_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000029C0 0000 0000 FB00 0007        ptr_Pal_Sonic2_E:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
000029C8 0000 0000 FB00 0007        ptr_Pal_Sonic3_E:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
000029D0 0000 0000 FB00 0007        ptr_Pal_Sonic4_E:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
000029D8 0000 0000 FB00 0007        ptr_Pal_Sonic5_E:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
000029E0 0000 0000 FB00 0007        ptr_Pal_Sonic6_E:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
000029E8 0000 0000 FB00 0007        ptr_Pal_Sonic7_E:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
000029F0 0000 0000 FB00 0007        ptr_Pal_Sonic8_E:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
000029F8 0000 0000 FB00 0007        ptr_Pal_Sonic9_E:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002A00 0000 0000 FB00 0007        ptr_Pal_Sonic10_E:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
00002A08 0000 0000 FB00 0007        ptr_Pal_Sonic11_E:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
00002A10 0000 0000 FB00 0007        ptr_Pal_SonWater2_E:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
00002A18 0000 0000 FB00 0007        ptr_Pal_SonWater3_E:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
00002A20 0000 0000 FB00 0007        ptr_Pal_SonWater4_E:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
00002A28 0000 0000 FB00 0007        ptr_Pal_SonWater5_E:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
00002A30 0000 0000 FB00 0007        ptr_Pal_SonWater6_E:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
00002A38 0000 0000 FB00 0007        ptr_Pal_SonWater7_E:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
00002A40 0000 0000 FB00 0007        ptr_Pal_SonWater8_E:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
00002A48 0000 0000 FB00 0007        ptr_Pal_SonWater9_E:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
00002A50 0000 0000 FB00 0007        ptr_Pal_SonWater10_E:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
00002A58 0000 0000 FB00 0007        ptr_Pal_SonWater11_E:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
00002A60 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2_E:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
00002A68 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3_E:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
00002A70 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4_E:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
00002A78 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5_E:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
00002A80 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6_E:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
00002A88 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7_E:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
00002A90 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8_E:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
00002A98 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9_E:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
00002AA0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10_E:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
00002AA8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11_E:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
00002AB0                            			even
00002AB0                            
00002AB0                            
00002AB0 =00000000                  palid_SegaBG:		equ (ptr_Pal_SegaBG-PalPointers)/8
00002AB0 =00000001                  palid_Title:		equ (ptr_Pal_Title-PalPointers)/8
00002AB0 =00000002                  palid_LevelSel:		equ (ptr_Pal_LevelSel-PalPointers)/8
00002AB0 =00000003                  palid_Sonic:		equ (ptr_Pal_Sonic-PalPointers)/8
00002AB0 =00000004                  palid_GHZ:		equ (ptr_Pal_GHZ-PalPointers)/8
00002AB0 =00000005                  palid_LZ:		equ (ptr_Pal_LZ-PalPointers)/8
00002AB0 =00000006                  palid_MZ:		equ (ptr_Pal_MZ-PalPointers)/8
00002AB0 =00000007                  palid_SLZ:		equ (ptr_Pal_SLZ-PalPointers)/8
00002AB0 =00000008                  palid_SYZ:		equ (ptr_Pal_SYZ-PalPointers)/8
00002AB0 =00000009                  palid_SBZ1:		equ (ptr_Pal_SBZ1-PalPointers)/8
00002AB0 =0000000A                  palid_Special:		equ (ptr_Pal_Special-PalPointers)/8
00002AB0 =0000000B                  palid_LZWater:		equ (ptr_Pal_LZWater-PalPointers)/8
00002AB0 =0000000C                  palid_SBZ3:		equ (ptr_Pal_SBZ3-PalPointers)/8
00002AB0 =0000000D                  palid_SBZ3Water:	equ (ptr_Pal_SBZ3Water-PalPointers)/8
00002AB0 =0000000E                  palid_SBZ2:		equ (ptr_Pal_SBZ2-PalPointers)/8
00002AB0 =0000000F                  palid_LZSonWater:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002AB0 =00000010                  palid_SBZ3SonWat:	equ (ptr_Pal_SBZ3SonWat-PalPointers)/8
00002AB0 =00000011                  palid_SSResult:		equ (ptr_Pal_SSResult-PalPointers)/8
00002AB0 =00000012                  palid_Continue:		equ (ptr_Pal_Continue-PalPointers)/8
00002AB0 =00000013                  palid_Options:		equ (ptr_Pal_Options-PalPointers)/8
00002AB0 =00000015                  palid_Ending2:		equ (ptr_Pal_Ending-PalPointers)/8
00002AB0 =00000015                  palid_Ending:		equ (ptr_Pal_Ending-PalPointers)/8
00002AB0 =00000004                  palid_GHZ2:		equ (ptr_Pal_GHZ-PalPointers)/8
00002AB0 =00000005                  palid_LZ2:		equ (ptr_Pal_LZ-PalPointers)/8
00002AB0 =00000006                  palid_MZ2:		equ (ptr_Pal_MZ-PalPointers)/8
00002AB0 =00000007                  palid_SLZ2:		equ (ptr_Pal_SLZ-PalPointers)/8
00002AB0 =00000008                  palid_SYZ2:		equ (ptr_Pal_SYZ-PalPointers)/8
00002AB0 =0000003F                  palid_LZWatr2:		equ (ptr_Pal_LZWatr2-PalPointers)/8
00002AB0 =0000000F                  palid_LZSonWatr2:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002AB0 =0000006C                  palid_GHZ3:		equ (ptr_Pal_GHZ3-PalPointers)/8
00002AB0 =0000006D                  palid_LZ3:		equ (ptr_Pal_LZ3-PalPointers)/8
00002AB0 =0000006E                  palid_MZ3:		equ (ptr_Pal_MZ3-PalPointers)/8
00002AB0 =0000006F                  palid_SLZ3:		equ (ptr_Pal_SLZ3-PalPointers)/8
00002AB0 =00000070                  palid_SYZ3:		equ (ptr_Pal_SYZ3-PalPointers)/8
00002AB0 =00000073                  palid_LZWatr3:		equ (ptr_Pal_LZWatr3-PalPointers)/8
00002AB0 =0000000F                  palid_LZSonWatr3:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002AB0 =00000016                  palid_Sonic2:		equ (ptr_Pal_Sonic2-PalPointers)/8
00002AB0 =00000017                  palid_Sonic3:		equ (ptr_Pal_Sonic3-PalPointers)/8
00002AB0 =00000018                  palid_Sonic4:		equ (ptr_Pal_Sonic4-PalPointers)/8
00002AB0 =00000019                  palid_Sonic5:		equ (ptr_Pal_Sonic5-PalPointers)/8
00002AB0 =0000001A                  palid_Sonic6:		equ (ptr_Pal_Sonic6-PalPointers)/8
00002AB0 =0000001B                  palid_Sonic7:		equ (ptr_Pal_Sonic7-PalPointers)/8
00002AB0 =0000001C                  palid_Sonic8:		equ (ptr_Pal_Sonic8-PalPointers)/8
00002AB0 =0000001D                  palid_Sonic9:		equ (ptr_Pal_Sonic9-PalPointers)/8
00002AB0 =0000001E                  palid_Sonic10:		equ (ptr_Pal_Sonic10-PalPointers)/8
00002AB0 =0000001F                  palid_Sonic11:		equ (ptr_Pal_Sonic11-PalPointers)/8
00002AB0 =00000020                  palid_SonWater2:		equ (ptr_Pal_SonWater2-PalPointers)/8
00002AB0 =00000021                  palid_SonWater3:		equ (ptr_Pal_SonWater3-PalPointers)/8
00002AB0 =00000022                  palid_SonWater4:		equ (ptr_Pal_SonWater4-PalPointers)/8
00002AB0 =00000023                  palid_SonWater5:		equ (ptr_Pal_SonWater5-PalPointers)/8
00002AB0 =00000024                  palid_SonWater6:		equ (ptr_Pal_SonWater6-PalPointers)/8
00002AB0 =00000025                  palid_SonWater7:		equ (ptr_Pal_SonWater7-PalPointers)/8
00002AB0 =00000026                  palid_SonWater8:		equ (ptr_Pal_SonWater8-PalPointers)/8
00002AB0 =00000027                  palid_SonWater9:		equ (ptr_Pal_SonWater9-PalPointers)/8
00002AB0 =00000028                  palid_SonWater10:		equ (ptr_Pal_SonWater10-PalPointers)/8
00002AB0 =00000029                  palid_SonWater11:		equ (ptr_Pal_SonWater11-PalPointers)/8
00002AB0 =0000002A                  palid_SBZ3SonWat2:		equ (ptr_Pal_SBZ3SonWat2-PalPointers)/8
00002AB0 =0000002B                  palid_SBZ3SonWat3:		equ (ptr_Pal_SBZ3SonWat3-PalPointers)/8
00002AB0 =0000002C                  palid_SBZ3SonWat4:		equ (ptr_Pal_SBZ3SonWat4-PalPointers)/8
00002AB0 =0000002D                  palid_SBZ3SonWat5:		equ (ptr_Pal_SBZ3SonWat5-PalPointers)/8
00002AB0 =0000002E                  palid_SBZ3SonWat6:		equ (ptr_Pal_SBZ3SonWat6-PalPointers)/8
00002AB0 =0000002F                  palid_SBZ3SonWat7:		equ (ptr_Pal_SBZ3SonWat7-PalPointers)/8
00002AB0 =00000030                  palid_SBZ3SonWat8:		equ (ptr_Pal_SBZ3SonWat8-PalPointers)/8
00002AB0 =00000031                  palid_SBZ3SonWat9:		equ (ptr_Pal_SBZ3SonWat9-PalPointers)/8
00002AB0 =00000032                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
00002AB0 =00000033                  palid_SBZ3SonWat11:		equ (ptr_Pal_SBZ3SonWat11-PalPointers)/8
00002AB0 =00000033                  palid_SBZ3SonWat11:		equ (ptr_Pal_SBZ3SonWat11-PalPointers)/8
00002AB0                            		
00002AB0                            		;include	"_inc\Palette Pointers2.asm"
00002AB0                            		
00002AB0                            		;include	"_inc\Palette Pointers3.asm"
00002AB0                            		
00002AB0                            
00002AB0                            ; ---------------------------------------------------------------------------
00002AB0                            ; Palette data
00002AB0                            ; ---------------------------------------------------------------------------
00002AB0                            Pal_SegaBG:	incbin	"palette\Sega Background.bin"
00002B30                            Pal_Title:	incbin	"palette\Title Screen.bin"
00002BB0                            Pal_LevelSel:	incbin	"palette\Level Select.bin"
00002C30                            Pal_Sonic:	incbin	"palette\Sonic Pal\01 Default.bin"
00002C50                            Pal_GHZ:	incbin	"palette\Green Hill Zone.bin"
00002CB0                            Pal_GHZ2:	incbin	"palette\Green Hill Zone2.bin"
00002D10                            Pal_GHZ3:	incbin	"palette\Green Hill Zone3.bin"
00002D70                            Pal_LZ:		incbin	"palette\Labyrinth Zone.bin"
00002DD0                            Pal_LZ2:	incbin	"palette\Labyrinth Zone2.bin"
00002E30                            Pal_LZ3:	incbin	"palette\Labyrinth Zone3.bin"
00002E90                            Pal_LZWater:	incbin	"palette\Labyrinth Zone Underwater.bin"
00002F10                            Pal_LZWatr2:	incbin	"palette\Labyrinth Zone Underwater2.bin"
00002F90                            Pal_LZWatr3:	incbin	"palette\Labyrinth Zone Underwater3.bin"
00003010                            Pal_MZ:		incbin	"palette\Marble Zone.bin"
00003070                            Pal_MZ2:	incbin	"palette\Marble Zone2.bin"
000030D0                            Pal_MZ3:	incbin	"palette\Marble Zone3.bin"
00003130                            Pal_SLZ:	incbin	"palette\Star Light Zone.bin"
00003190                            Pal_SLZ2:	incbin	"palette\Star Light Zone2.bin"
000031F0                            Pal_SLZ3:	incbin	"palette\Star Light Zone3.bin"
00003250                            Pal_SYZ:	incbin	"palette\Spring Yard Zone.bin"
000032B0                            Pal_SYZ2:	incbin	"palette\Spring Yard Zone2.bin"
00003310                            Pal_SYZ3:	incbin	"palette\Spring Yard Zone3.bin"
00003370                            Pal_SBZ1:	incbin	"palette\SBZ Act 1.bin"
000033D0                            Pal_SBZ2:	incbin	"palette\SBZ Act 2.bin"
00003430                            Pal_Special:	incbin	"palette\Special Stage.bin"
000034B0                            Pal_SBZ3:	incbin	"palette\SBZ Act 3.bin"
00003510                            Pal_SBZ3Water:	incbin	"palette\SBZ Act 3 Underwater.bin"
00003590                            Pal_LZSonWater:	incbin	"palette\Sonic - LZ Underwater.bin"
000035B0                            Pal_LZSonWatr2:	incbin	"palette\Sonic - LZ2 Underwater.bin"
000035D0                            Pal_SBZ3SonWat:	incbin	"palette\Sonic - SBZ3 Underwater.bin"
000035F0                            Pal_SSResult:	incbin	"palette\Special Stage Results.bin"
00003670                            Pal_Continue:	incbin	"palette\Special Stage Continue Bonus.bin"
000036B0                            Pal_Ending:	incbin	"palette\Ending.bin"
00003730                            Pal_Options:	incbin	"palette\Options.bin"
000037B0                            Pal_Sonic2:	incbin	"palette\Sonic Pal\02 Sonic 1.bin"
000037D0                            Pal_Sonic3:	incbin	"palette\Sonic Pal\03 Beta.bin"
000037F0                            Pal_Sonic4:	incbin	"palette\Sonic Pal\04 Midnight.bin"
00003810                            Pal_Sonic5:	incbin	"palette\Sonic Pal\05 C2.bin"
00003830                            Pal_Sonic6:	incbin	"palette\Sonic Pal\06 Clacker.bin"
00003850                            Pal_Sonic7:	incbin	"palette\Sonic Pal\07 Red Hot.bin"
00003870                            Pal_Sonic8:	incbin	"palette\Sonic Pal\08 Socket.bin"
00003890                            Pal_Sonic9:	incbin	"palette\Sonic Pal\09 Cringe.bin"
000038B0                            Pal_Sonic10:	incbin	"palette\Sonic Pal\10 Dark.bin"
000038D0                            Pal_Sonic11:	incbin	"palette\Sonic Pal\11 DeltaWooloo.bin"
000038F0                            Pal_SonWater2:	incbin	"palette\Sonic Pal\02 Sonic 1 Underwater.bin"
00003910                            Pal_SonWater3:	incbin	"palette\Sonic Pal\03 Beta Underwater.bin"
00003930                            Pal_SonWater4:	incbin	"palette\Sonic Pal\04 Midnight Underwater.bin"
00003950                            Pal_SonWater5:	incbin	"palette\Sonic Pal\05 C2 Underwater.bin"
00003970                            Pal_SonWater6:	incbin	"palette\Sonic Pal\06 Clacker Underwater.bin"
00003990                            Pal_SonWater7:	incbin	"palette\Sonic Pal\07 Red Hot Underwater.bin"
000039B0                            Pal_SonWater8:	incbin	"palette\Sonic Pal\08 Socket Underwater.bin"
000039D0                            Pal_SonWater9:	incbin	"palette\Sonic Pal\09 Cringe Underwater.bin"
000039F0                            Pal_SonWater10:	incbin	"palette\Sonic Pal\10 Dark Underwater.bin"
00003A10                            Pal_SonWater11:	incbin	"palette\Sonic Pal\11 DeltaWooloo Underwater.bin"
00003A30                            Pal_SBZ3SonWat2:	incbin	"palette\Sonic Pal\02 Sonic 1 SBZ3.bin"
00003A50                            Pal_SBZ3SonWat3:	incbin	"palette\Sonic Pal\03 Beta SBZ3.bin"
00003A70                            Pal_SBZ3SonWat4:	incbin	"palette\Sonic Pal\04 Midnight SBZ3.bin"
00003A90                            Pal_SBZ3SonWat5:	incbin	"palette\Sonic Pal\05 C2 SBZ3.bin"
00003AB0                            Pal_SBZ3SonWat6:	incbin	"palette\Sonic Pal\06 Clacker SBZ3.bin"
00003AD0                            Pal_SBZ3SonWat7:	incbin	"palette\Sonic Pal\07 Red Hot SBZ3.bin"
00003AF0                            Pal_SBZ3SonWat8:	incbin	"palette\Sonic Pal\08 Socket SBZ3.bin"
00003B10                            Pal_SBZ3SonWat9:	incbin	"palette\Sonic Pal\09 Cringe SBZ3.bin"
00003B30                            Pal_SBZ3SonWat10:	incbin	"palette\Sonic Pal\10 Dark SBZ3.bin"
00003B50                            Pal_SBZ3SonWat11:	incbin	"palette\Sonic Pal\11 DeltaWooloo SBZ3.bin"
00003B70                            ; ---------------------------------------------------------------------------
00003B70                            ; Subroutine to	wait for VBlank routines to complete
00003B70                            ; ---------------------------------------------------------------------------
00003B70                            
00003B70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003B70                            
00003B70                            
00003B70                            WaitForVBla:
00003B70 46FC 2300                  		enable_ints
00003B74                            
00003B74                            	@wait:
00003B74 4A38 F62A                  		tst.b	(v_vbla_routine).w ; has VBlank routine finished?
00003B78 66FA                       		bne.s	@wait		; if not, branch
00003B7A 4E75                       		rts	
00003B7C                            ; End of function WaitForVBla
00003B7C                            
00003B7C                            		include	"_incObj\sub RandomNumber.asm"
00003B7C                            ; ---------------------------------------------------------------------------
00003B7C                            ; Subroutine to	generate a pseudo-random number	in d0
00003B7C                            ; ---------------------------------------------------------------------------
00003B7C                            
00003B7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003B7C                            
00003B7C                            
00003B7C                            RandomNumber:
00003B7C 2238 F636                  		move.l	(v_random).w,d1
00003B80 6600                       		bne.s	@scramble	; if d1 is not 0, branch
00003B82 223C 2A6D 365A             		move.l	#$2A6D365A,d1	; if d1 is 0, use seed number
00003B88                            
00003B88                            	@scramble:
00003B88 2001                       		move.l	d1,d0
00003B8A E581                       		asl.l	#2,d1
00003B8C D280                       		add.l	d0,d1
00003B8E E781                       		asl.l	#3,d1
00003B90 D280                       		add.l	d0,d1
00003B92 3001                       		move.w	d1,d0
00003B94 4841                       		swap	d1
00003B96 D041                       		add.w	d1,d0
00003B98 3200                       		move.w	d0,d1
00003B9A 4841                       		swap	d1
00003B9C 21C1 F636                  		move.l	d1,(v_random).w
00003BA0 4E75                       		rts	
00003BA0 4E75                       		rts	
00003BA2                            		include	"_incObj\sub CalcSine.asm"
00003BA2                            ; ---------------------------------------------------------------------------
00003BA2                            ; Subroutine calculate a sine
00003BA2                            
00003BA2                            ; input:
00003BA2                            ;	d0 = angle
00003BA2                            
00003BA2                            ; output:
00003BA2                            ;	d0 = sine
00003BA2                            ;	d1 = cosine
00003BA2                            ; ---------------------------------------------------------------------------
00003BA2                            
00003BA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003BA2                            
00003BA2                            
00003BA2                            CalcSine:
00003BA2 0240 00FF                          andi.w  #$FF,d0
00003BA6 5040                               addq.w  #8,d0
00003BA8 D040                               add.w   d0,d0
00003BAA 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
00003BAE 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
00003BB2 4E75                               rts
00003BB4                            ; End of function CalcSine
00003BB4                            
00003BB4                            ; ===========================================================================
00003BB4                            
00003BB4                            Sine_Data:	incbin	"misc\sinewave.bin"	; values for a 360° sine wave
00003E34                            
00003E34                            ; ===========================================================================
00003E34                            ; ===========================================================================
00003E34                            		include	"_incObj\sub CalcAngle.asm"
00003E34                            ; ---------------------------------------------------------------------------
00003E34                            ; Subroutine calculate an angle
00003E34                            
00003E34                            ; input:
00003E34                            ;	d1 = x-axis distance
00003E34                            ;	d2 = y-axis distance
00003E34                            
00003E34                            ; output:
00003E34                            ;	d0 = angle
00003E34                            ; ---------------------------------------------------------------------------
00003E34                            
00003E34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003E34                            
00003E34                            
00003E34                            CalcAngle:
00003E34 48E7 1800                  		movem.l	d3-d4,-(sp)
00003E38 7600                       		moveq	#0,d3
00003E3A 7800                       		moveq	#0,d4
00003E3C 3601                       		move.w	d1,d3
00003E3E 3802                       		move.w	d2,d4
00003E40 8843                       		or.w	d3,d4
00003E42 6700                       		beq.s	loc_2D04
00003E44 3802                       		move.w	d2,d4
00003E46 4A43                       		tst.w	d3
00003E48 6A00 0000                  		bpl.w	loc_2CC2
00003E4C 4443                       		neg.w	d3
00003E4E                            
00003E4E                            loc_2CC2:
00003E4E 4A44                       		tst.w	d4
00003E50 6A00 0000                  		bpl.w	loc_2CCA
00003E54 4444                       		neg.w	d4
00003E56                            
00003E56                            loc_2CCA:
00003E56 B843                       		cmp.w	d3,d4
00003E58 6400 0000                  		bcc.w	loc_2CDC
00003E5C E18C                       		lsl.l	#8,d4
00003E5E 88C3                       		divu.w	d3,d4
00003E60 7000                       		moveq	#0,d0
00003E62 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003E66 6000                       		bra.s	loc_2CE6
00003E68                            ; ===========================================================================
00003E68                            
00003E68                            loc_2CDC:
00003E68 E18B                       		lsl.l	#8,d3
00003E6A 86C4                       		divu.w	d4,d3
00003E6C 7040                       		moveq	#$40,d0
00003E6E 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003E72                            
00003E72                            loc_2CE6:
00003E72 4A41                       		tst.w	d1
00003E74 6A00 0000                  		bpl.w	loc_2CF2
00003E78 4440                       		neg.w	d0
00003E7A 0640 0080                  		addi.w	#$80,d0
00003E7E                            
00003E7E                            loc_2CF2:
00003E7E 4A42                       		tst.w	d2
00003E80 6A00 0000                  		bpl.w	loc_2CFE
00003E84 4440                       		neg.w	d0
00003E86 0640 0100                  		addi.w	#$100,d0
00003E8A                            
00003E8A                            loc_2CFE:
00003E8A 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003E8E 4E75                       		rts	
00003E90                            ; ===========================================================================
00003E90                            
00003E90                            loc_2D04:
00003E90 303C 0040                  		move.w	#$40,d0
00003E94 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003E98 4E75                       		rts	
00003E9A                            ; End of function CalcAngle
00003E9A                            
00003E9A                            ; ===========================================================================
00003E9A                            
00003E9A                            Angle_Data:	incbin	"misc\angles.bin"
00003F9C                            
00003F9C                            ; ===========================================================================
00003F9C                            ; ===========================================================================
00003F9C                            
00003F9C                            ; ---------------------------------------------------------------------------
00003F9C                            ; Sega screen
00003F9C                            ; ---------------------------------------------------------------------------
00003F9C                            
00003F9C                            GM_Sega:
00003FA4 6100 D7F2                  		bsr.w	ClearPLC
00003FA8 6100 E288                  		bsr.w	PaletteFadeOut
00003FAC 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003FB2 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00003FB6 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003FBA 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003FBE 3CBC 8700                  		move.w	#$8700,(a6)	; set background colour (palette entry 0)
00003FC2 3CBC 8B00                  		move.w	#$8B00,(a6)	; full-screen vertical scrolling
00003FC6 4238 F64E                  		clr.b	(f_wtr_state).w
00003FCA 46FC 2700                  		disable_ints
00003FCE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003FD2 0200 00BF                  		andi.b	#$BF,d0
00003FD6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003FDC 6100 D1F2                  		bsr.w	ClearScreen
00003FEA 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00003FF0 6100 D35C                  		bsr.w	NemDec
00003FF4 43F9 00FF 0000             		lea	($FF0000).l,a1
00003FFA 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00004000 303C 0000                  		move.w	#0,d0
00004004 6100 D8D2                  		bsr.w	EniDec
00004008                            
00004008 43F9 00FF 0000 203C 6510+  		copyTilemap	$FF0000,$E510,$17,7
0000401C 43F9 00FF 0180 203C 4000+  		copyTilemap	$FF0180,$C000,$27,$1B
00004030                            
00004030 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00004034 6B00                       			bmi.s   @loadpal
00004036 43F9 00FF 0A40 203C 453A+  			copyTilemap	$FF0A40,$C53A,2,1 ; hide "TM" with a white rectangle
0000404A                            
0000404A                            	@loadpal:
0000404A 7000                       		moveq	#palid_SegaBG,d0
0000404C 6100 E4CA                  		bsr.w	PalLoad2	; load Sega logo palette
00004050 47F9 FFFF FB80                     lea        ($FFFFFB80).l,a3
00004056 7E3F                               moveq    #$3F,d7
00004058                             
00004058                                .loop:
00004058 36FC 0000                          move.w    #cBlack,(a3)+    ; move data to RAM
0000405C 51CF FFFA                          dbf        d7,.loop
00004060 6100 E12A                          bsr.w     PaletteFadeIn ; added to allow fade in			
00004064 31FC FFF6 F632             		move.w	#-$A,(v_pcyc_num).w
0000406A 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w
00004070 31FC 0000 F662             		move.w	#0,(v_pal_buffer+$12).w
00004076 31FC 0000 F660             		move.w	#0,(v_pal_buffer+$10).w
0000407C 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00004080 0000 0040                  		ori.b	#$40,d0
00004084 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000408A                            
0000408A                            Sega_WaitPal:
0000408A 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00004090 6100 FADE                  		bsr.w	WaitForVBla
00004094 6100 E354                  		bsr.w	PalCycle_Sega
00004098 66F0                       		bne.s	Sega_WaitPal
0000409A                            
000040A2 11FC 0014 F62A             		move.b	#$14,(v_vbla_routine).w
000040A8 6100 FAC6                  		bsr.w	WaitForVBla
000040AC 31FC 001E F614             		move.w	#$1E,(v_demolength).w
000040B2                            
000040B2                            Sega_WaitEnd:
000040B2 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
000040B8 6100 FAB6                  		bsr.w	WaitForVBla
000040BC 4A78 F614                  		tst.w	(v_demolength).w
000040C0 6700                       		beq.s	Sega_GotoTitle
000040C2 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
000040C8 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
000040CA                            
000040CA                            Sega_GotoTitle:
000040CA 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
000040D0 4E75                       		rts	
000040D2                            ; ===========================================================================
000040D2                            
000040D2                            ; ---------------------------------------------------------------------------
000040D2                            ; Title	screen
000040D2                            ; ---------------------------------------------------------------------------
000040D2                            
000040D2                            GM_Title:
000040DA 6100 D6BC                  		bsr.w	ClearPLC
000040DE 6100 E152                  		bsr.w	PaletteFadeOut
000040E2 46FC 2700                  		disable_ints
000040E6 6100 D16E                  		bsr.w	SoundDriverLoad
000040EA 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000040F0 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
000040F4 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000040F8 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000040FC 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00004100 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00004104 3CBC 8B03                  		move.w	#$8B03,(a6)
00004108 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (palette line 2, entry 0)
0000410C 4238 F64E                  		clr.b	(f_wtr_state).w
00004110 6100 D0BE                  		bsr.w	ClearScreen
00004114                            		;jsr		SHC2022 
00004114                            
00004114 43F8 D000                  		lea	(v_objspace).w,a1
00004118 7000                       		moveq	#0,d0
0000411A 323C 07FF                  		move.w	#$7FF,d1
0000411E                            
0000411E                            	Tit_ClrObj1:
0000411E 22C0                       		move.l	d0,(a1)+
00004120 51C9 FFFC                  		dbf	d1,Tit_ClrObj1	; fill object space ($D000-$EFFF) with 0
00004124                            
0000412E 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00004134 6100 D218                  		bsr.w	NemDec
00004142 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00004148 6100 D204                  		bsr.w	NemDec
0000414C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004152 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00004158 303C 0000                  		move.w	#0,d0
0000415C 6100 D77A                  		bsr.w	EniDec
00004160                            
00004160 43F9 00FF 0000 203C 4000+  		copyTilemap	$FF0000,$C000,$27,$1B
00004174                            
00004174 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00004178 7000                       		moveq	#cBlack,d0
0000417A 323C 001F                  		move.w	#$1F,d1
0000417E                            
0000417E                            	Tit_ClrPal:
0000417E 22C0                       		move.l	d0,(a1)+
00004180 51C9 FFFC                  		dbf	d1,Tit_ClrPal	; fill palette with 0 (black)
00004184                            
00004184 4EB9 0000 0000             		jsr		LoadPlayerPal
0000418A 6100 E350                  		bsr.w	PalLoad1
0000418E 11FC 0000 D080             		move.b	#id_CreditsText,(v_objspace+$80).w ; load "SONIC TEAM PRESENTS" object
00004194 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000419A 4EB9 0000 0000             		jsr	(BuildSprites).l
000041A0 6100 DFEA                  		bsr.w	PaletteFadeIn
000041A4 46FC 2700                  		disable_ints
000041B2 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
000041B8 6100 D194                  		bsr.w	NemDec
000041C6 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
000041CC 6100 D180                  		bsr.w	NemDec
000041DA 41F9 0000 0000             		lea (Nem_TitleMenu).l,a0 ; Load Menu Text/Characters pattern
000041E0 6100 D16C                  		bsr.w 	NemDec
000041E4 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000041F2 4BF9 0000 059E             		lea	(Art_Text).l,a5	; load level select font
000041F8 323C 028F                  		move.w	#$28F,d1
000041FC                            
000041FC                            	Tit_LoadText:
000041FC 3C9D                       		move.w	(a5)+,(a6)
000041FE 51C9 FFFC                  		dbf	d1,Tit_LoadText	; load level select font
00004202                            
00004202 11FC 0000 FE30             		move.b	#0,(v_lastlamp).w ; clear lamppost counter
00004208 31FC 0000 FE08             		move.w	#0,(v_debuguse).w ; disable debug item placement mode
0000420E 31FC 0000 FFF0             		move.w	#0,(f_demo).w	; disable debug mode
00004214 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w ; unused variable
0000421A 31FC 0000 FE10             		move.w	#(id_GHZ<<8),(v_zone).w	; set level to GHZ (00)
00004220 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w ; disable palette cycling
00004226 6100 0000                  		bsr.w	LevelSizeLoad
0000422A 6100 0000                  		bsr.w	DeformLayers
0000422E 43F8 B000                  		lea	(v_16x16).w,a1
00004232 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load	GHZ 16x16 mappings
00004238 303C 0000                  		move.w	#0,d0
0000423C 6100 D69A                  		bsr.w	EniDec
00004240 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load GHZ 256x256 mappings
00004246 43F9 00FF 0000             		lea	(v_256x256).l,a1
0000424C 6100 D808                  		bsr.w	KosDec
00004250 6100 0000                  		bsr.w	LevelLayoutLoad
00004254 6100 DFDC                  		bsr.w	PaletteFadeOut
00004258 46FC 2700                  		disable_ints
0000425C 6100 CF72                  		bsr.w	ClearScreen
00004260 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00004266 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000426C 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00004270 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00004274 343C 6000                  		move.w	#$6000,d2
00004278 6100 0000                  		bsr.w	DrawChunks
0000427C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004282 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00004288 303C 0000                  		move.w	#0,d0
0000428C 6100 D64A                  		bsr.w	EniDec
00004290                            
00004290 43F9 00FF 0000 203C 4206+  		copyTilemap	$FF0000,$C206,$21,$15
000042A4                            
000042AE 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0 ; load title screen patterns
000042B4 6100 D098                  		bsr.w	NemDec
000042B8 7001                       		moveq	#palid_Title,d0	; load title screen palette
000042BA 6100 E220                  		bsr.w	PalLoad1
000042C6 11FC 0000 FFFA             		move.b	#0,(f_debugmode).w ; disable debug mode
000042CC 31FC 0900 F614             		move.w	#$900,(v_demolength).w ; run title screen for $178 frames
000042D2 43F8 D080                  		lea	(v_objspace+$80).w,a1
000042D6 7000                       		moveq	#0,d0
000042D8 323C 0007                  		move.w	#7,d1
000042DC                            
000042DC                            	Tit_ClrObj2:
000042DC 22C0                       		move.l	d0,(a1)+
000042DE 51C9 FFFC                  		dbf	d1,Tit_ClrObj2
000042E2                            
000042E2 11FC 0000 D040             		move.b	#id_TitleSonic,(v_objspace+$40).w ; load big Sonic object
000042E8 11FC 0000 D080             		move.b	#id_PSBTM,(v_objspace+$80).w ; load "PRESS START BUTTON" object
000042EE 4238 D0A4                  		clr.b	(v_objspace+$80+obRoutine).w ; The 'Mega Games 10' version of Sonic 1 added this line, to fix the 'PRESS START BUTTON' object not appearing
000042F2                            
000042F2 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
000042F6 6A00                       			bpl.s   @isjap		; if yes, branch
000042F8                            
000042F8 11FC 0000 D0C0             		move.b	#id_PSBTM,(v_objspace+$C0).w ; load "TM" object
000042FE 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
00004304                            	@isjap:
00004304 11FC 0000 D100             		move.b	#id_PSBTM,(v_objspace+$100).w ; load object which hides part of Sonic
0000430A 11FC 0002 D11A             		move.b	#2,(v_objspace+$100+obFrame).w
00004310 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004316 6100 0000                  		bsr.w	DeformLayers
0000431A 4EB9 0000 0000             		jsr	(BuildSprites).l
00004320 7000                       		moveq	#plcid_Main,d0
00004322 6100 D448                  		bsr.w	NewPLC
00004326 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w
0000432C 31FC 0000 FFE6             		move.w	#0,(v_title_ccount).w
00004332 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00004336 0000 0040                  		ori.b	#$40,d0
0000433A 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00004340 6100 DE4A                  		bsr.w	PaletteFadeIn
00004344                            
00004344                            Tit_MainLoop:
00004344 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
0000434A 6100 F824                  		bsr.w	WaitForVBla
0000434E 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004354 6100 0000                  		bsr.w	DeformLayers
00004358 4EB9 0000 0000             		jsr	(BuildSprites).l
0000435E 6100 D9DE                  		bsr.w	PCycle_Title
00004362 6100 D442                  		bsr.w	RunPLC
00004366 3038 D008                  		move.w	(v_objspace+obX).w,d0
0000436A 5440                       		addq.w	#2,d0
0000436C 31C0 D008                  		move.w	d0,(v_objspace+obX).w ; move Sonic to the right
00004370 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed $1C00 on x-axis?
00004374 6500                       		blo.s	Tit_ChkRegion	; if not, branch
00004376                            
00004376 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
0000437C 4E75                       		rts	
0000437E                            ; ===========================================================================
0000437E                            
0000437E                            Tit_ChkRegion:
0000437E 4A38 FFF8                  		tst.b	(v_megadrive).w	; check	if the machine is US or	Japanese
00004382 6A00                       		bpl.s	Tit_RegionJap	; if Japanese, branch
00004384                            
00004384 41F9 0000 0000             		lea	(LevSelCode_US).l,a0 ; load US code
0000438A 6000                       		bra.s	Tit_EnterCheat
0000438C                            
0000438C                            	Tit_RegionJap:
0000438C 41F9 0000 0000             		lea	(LevSelCode_J).l,a0 ; load J code
00004392                            
00004392                            Tit_EnterCheat:
00004392 3038 FFE4                  		move.w	(v_title_dcount).w,d0
00004396 D0C0                       		adda.w	d0,a0
00004398 1038 F605                  		move.b	(v_jpadpress1).w,d0 ; get button press
0000439C 0200 000F                  		andi.b	#btnDir,d0	; read only UDLR buttons
000043A0 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
000043A2 6600                       		bne.s	Tit_ResetCheat	; if not, branch
000043A4 5278 FFE4                  		addq.w	#1,(v_title_dcount).w ; next button press
000043A8 4A00                       		tst.b	d0
000043AA 6600                       		bne.s	Tit_CountC
000043AC 41F8 FFE0                  		lea	(f_levselcheat).w,a0
000043B0 3238 FFE6                  		move.w	(v_title_ccount).w,d1
000043B4 E249                       		lsr.w	#1,d1
000043B6 0241 0003                  		andi.w	#3,d1
000043BA 6700                       		beq.s	Tit_PlayRing
000043BC 4A38 FFF8                  		tst.b	(v_megadrive).w
000043C0 6A00                       		bpl.s	Tit_PlayRing
000043C2 7201                       		moveq	#1,d1
000043C4 1181 1001                  		move.b	d1,1(a0,d1.w)	; cheat depends on how many times C is pressed
000043C8                            
000043C8                            	Tit_PlayRing:
000043C8 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000043D6 6000                       		bra.s	Tit_CountC
000043D8                            ; ===========================================================================
000043D8                            
000043D8                            Tit_ResetCheat:
000043D8 4A00                       		tst.b	d0
000043DA 6700                       		beq.s	Tit_CountC
000043DC 0C78 0009 FFE4             		cmpi.w	#9,(v_title_dcount).w
000043E2 6700                       		beq.s	Tit_CountC
000043E4 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w ; reset UDLR counter
000043EA                            
000043EA                            Tit_CountC:
000043EA 1038 F605                  		move.b	(v_jpadpress1).w,d0
000043EE 0200 0020                  		andi.b	#btnC,d0	; is C button pressed?
000043F2 6700                       		beq.s	loc_3230	; if not, branch
000043F4 5278 FFE6                  		addq.w	#1,(v_title_ccount).w ; increment C counter
000043F8                            		
000043F8                            loc_3230:
000043F8 4A78 F614                  		tst.w	(v_demolength).w
000043FC 6700 0000                  		beq.w	GotoDemo
00004400 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
00004406 6700 FF3C                  		beq.w	Tit_MainLoop	; if not, branch
0000440A                            
0000440A                            Tit_ChkLevSel:
0000440A 4A38 FFE0                  		tst.b	(f_levselcheat).w ; check if level select code is on
0000440E 6700 0000                  		beq.w	@cont	; if not, play level
00004412 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; check if A is pressed
00004418 6700 0000                  		beq.w	@cont	; if not, play level
0000441C 6000 0000                  		bra.w	Tit_LevelSelect
00004420                            
00004420                            	@cont:		
00004420 0C38 0006 D0A4             		cmp.b	#6,($FFFFD0A4).w   ; is Title Menu on
00004426 6700 FF1C                  		beq.w	Tit_MainLoop         ; if it not was deleted, branch  	
0000442A 7400                       		moveq	#0,d2
0000442C 1438 FFB0                  		move.b	(Title_screen_option).w,d2   ; load the choice
00004430 D442                       		add.w	d2,d2            ; multiply by 2
00004432 343B 2000                  		move.w	Tit_Menu_Choice(pc,d2.w),d2
00004436 4EFB 2000                  		jmp   Tit_Menu_Choice(pc,d2.w)   ; jump to the choice code
0000443A                            
0000443A                            ; ===========================================================================
0000443A                            Tit_Menu_Choice:
0000443A 0000                       		dc.w PlayLevel-Tit_Menu_Choice   ; 0
0000443C 0000                       		dc.w Menu_Options-Tit_Menu_Choice  ; 2
0000443E                            ; ===========================================================================
0000443E                            
0000443E                            Menu_Options:
0000443E 11FC 0020 F600             		move.b	#$20,(v_gamemode).w
00004444 4E75                       		rts
00004446                            
00004446                            Tit_LevelSelect:	
00004446 7002                       		moveq	#palid_LevelSel,d0
00004448 6100 E0CE                  		bsr.w	PalLoad2	; load level select palette
0000444C 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00004450 7000                       		moveq	#0,d0
00004452 323C 00DF                  		move.w	#$DF,d1
00004456                            
00004456                            	Tit_ClrScroll1:
00004456 22C0                       		move.l	d0,(a1)+
00004458 51C9 FFFC                  		dbf	d1,Tit_ClrScroll1 ; clear scroll data (in RAM)
0000445C                            
0000445C 21C0 F616                  		move.l	d0,(v_scrposy_dup).w
00004460 46FC 2700                  		disable_ints
00004464 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004474 323C 03FF                  		move.w	#$3FF,d1
00004478                            
00004478                            	Tit_ClrScroll2:
00004478 2C80                       		move.l	d0,(a6)
0000447A 51C9 FFFC                  		dbf	d1,Tit_ClrScroll2 ; clear scroll data (in VRAM)
0000447E                            
0000447E 6100 0000                  		bsr.w	LevSelTextLoad
00004482                            
00004482                            ; ---------------------------------------------------------------------------
00004482                            ; Level	Select
00004482                            ; ---------------------------------------------------------------------------
00004482                            
00004482                            LevelSelect:
00004482 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00004488 6100 F6E6                  		bsr.w	WaitForVBla
0000448C 6100 0000                  		bsr.w	LevSelControls
00004490 6100 D314                  		bsr.w	RunPLC
00004494 4AB8 F680                  		tst.l	(v_plc_buffer).w
00004498 66E8                       		bne.s	LevelSelect
0000449A 0238 00F0 F605             		andi.b	#btnABC+btnStart,(v_jpadpress1).w ; is A, B, C, or Start pressed?
000044A0 67E0                       		beq.s	LevelSelect	; if not, branch
000044A2 3038 FF82                  		move.w	(v_levselitem).w,d0
000044A6 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
000044AA 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000044AC 3038 FF84                  		move.w	(v_levselsound).w,d0
000044B0 0640 0080                  		addi.w	#$80,d0
000044B4                            		;cmpi.w	#$9F,d0		; is sound $9F being played?
000044B4                            		;beq.s	LevSel_Ending	; if yes, branch
000044B4                            		;cmpi.w	#$9E,d0		; is sound $9E being played?
000044B4                            		;beq.s	LevSel_Credits	; if yes, branch
000044B4                            
000044B4                            LevSel_PlaySnd:
000044B4 6100 CDEA                  		bsr.w	PlaySound_Special
000044B8 60C8                       		bra.s	LevelSelect
000044BA                            ; ===========================================================================
000044BA                            
000044BA                            LevSel_Ending:
000044BA 11FC 0000 F600             		move.b	#id_Ending,(v_gamemode).w ; set screen mode to $18 (Ending)
000044C0 31FC 0600 FE10             		move.w	#(id_EndZ<<8),(v_zone).w ; set level to 0600 (Ending)
000044C6 4E75                       		rts	
000044C8                            ; ===========================================================================
000044C8                            
000044C8                            LevSel_Credits:
000044C8 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; set screen mode to $1C (Credits)
000044D6 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w
000044DC 4E75                       		rts	
000044DE                            ; ===========================================================================
000044DE                            
000044DE                            LevSel_Level_SS:
000044DE D040                       		add.w	d0,d0
000044E0 303B 0000                  		move.w	LevSel_Ptrs(pc,d0.w),d0 ; load level number
000044E4 6B00 FF9C                  		bmi.w	LevelSelect
000044E8 0C40 0700                  		cmpi.w	#id_SS*$100,d0	; check	if level is 0700 (Special Stage)
000044EC 6600                       		bne.s	LevSel_Level	; if not, branch
000044EE 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
000044F4 4278 FE10                  		clr.w	(v_zone).w	; clear	level
000044F8 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000044FE 7000                       		moveq	#0,d0
00004500 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004504 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004508 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
0000450C 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
00004514 4E75                       		rts	
00004516                            ; ===========================================================================
00004516                            
00004516                            LevSel_Level:
00004516 0240 3FFF                  		andi.w	#$3FFF,d0
0000451A 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
0000451E                            
0000451E                            PlayLevel:
0000451E 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00004524 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
0000452A 7000                       		moveq	#0,d0
0000452C 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004530 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004534 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00004538 11C0 FE16                  		move.b	d0,(v_lastspecial).w ; clear special stage number
0000453C 11C0 FE57                  		move.b	d0,(v_emeralds).w ; clear emeralds
00004540 21C0 FE58                  		move.l	d0,(v_emldlist).w ; clear emeralds
00004544 21C0 FE5C                  		move.l	d0,(v_emldlist+4).w ; clear emeralds
00004548 11FC 0001 FE18             		move.b	#1,(v_continues).w ; set continues to 1
0000454E 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
0000455E 4E75                       		rts	
00004560                            ; ===========================================================================
00004560                            ; ---------------------------------------------------------------------------
00004560                            ; Level	select - level pointers
00004560                            ; ---------------------------------------------------------------------------
00004560                            		; correct level order
00004560 0000                       		dc.b id_GHZ, 0
00004562 0001                       		dc.b id_GHZ, 1
00004564 0002                       		dc.b id_GHZ, 2
00004566 0200                       		dc.b id_MZ, 0
00004568 0201                       		dc.b id_MZ, 1
0000456A 0202                       		dc.b id_MZ, 2
0000456C 0400                       		dc.b id_SYZ, 0
0000456E 0401                       		dc.b id_SYZ, 1
00004570 0402                       		dc.b id_SYZ, 2
00004572 0100                       		dc.b id_LZ, 0
00004574 0101                       		dc.b id_LZ, 1
00004576 0102                       		dc.b id_LZ, 2
00004578 0300                       		dc.b id_SLZ, 0
0000457A 0301                       		dc.b id_SLZ, 1
0000457C 0302                       		dc.b id_SLZ, 2
0000457E 0500                       		dc.b id_SBZ, 0
00004580 0501                       		dc.b id_SBZ, 1
00004582 0103                       		dc.b id_LZ, 3
00004584 0502                       		dc.b id_SBZ, 2
00004586 0700                       		dc.b id_SS, 0		; Special Stage
00004588 8000                       		dc.w $8000		; Sound Test
0000458A                            		even
0000458A                            ; ---------------------------------------------------------------------------
0000458A                            ; Level	select codes
0000458A                            ; ---------------------------------------------------------------------------
0000458A 0102 0202 0408 00FF        		dc.b btnUp,btnDn,btnDn,btnDn,btnL,btnR,0,$FF
00004592                            		even
00004592                            
00004592 0102 0408 00FF             LevSelCode_US:	dc.b btnUp,btnDn,btnL,btnR,0,$FF
00004598                            		even
00004598                            ; ===========================================================================
00004598                            
00004598                            ; ---------------------------------------------------------------------------
00004598                            ; Demo mode
00004598                            ; ---------------------------------------------------------------------------
00004598                            
00004598                            GotoDemo:
00004598 31FC 001E F614             		move.w	#$1E,(v_demolength).w
0000459E                            
0000459E                            loc_33B6:
0000459E 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000045A4 6100 F5CA                  		bsr.w	WaitForVBla
000045A8 6100 0000                  		bsr.w	DeformLayers
000045AC 6100 D770                  		bsr.w	PaletteCycle
000045B0 6100 D1F4                  		bsr.w	RunPLC
000045B4 3038 D008                  		move.w	(v_objspace+obX).w,d0
000045B8 5440                       		addq.w	#2,d0
000045BA 31C0 D008                  		move.w	d0,(v_objspace+obX).w
000045BE 0C40 1C00                  		cmpi.w	#$1C00,d0
000045C2 6500                       		blo.s	loc_33E4
000045C4 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
000045CA 4E75                       		rts	
000045CC                            ; ===========================================================================
000045CC                            
000045CC                            loc_33E4:
000045CC 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
000045D2 6600 FE36                  		bne.w	Tit_ChkLevSel	; if yes, branch
000045D6 4A78 F614                  		tst.w	(v_demolength).w
000045DA 6600 FFC2                  		bne.w	loc_33B6
000045E6 3038 FFF2                  		move.w	(v_demonum).w,d0 ; load	demo number
000045EA 0240 0007                  		andi.w	#7,d0
000045EE D040                       		add.w	d0,d0
000045F0 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000045F4 31C0 FE10                  		move.w	d0,(v_zone).w
000045F8 5278 FFF2                  		addq.w	#1,(v_demonum).w ; add 1 to demo number
000045FC 0C78 0004 FFF2             		cmpi.w	#4,(v_demonum).w ; is demo number less than 4?
00004602 6500                       		blo.s	loc_3422	; if yes, branch
00004604 31FC 0000 FFF2             		move.w	#0,(v_demonum).w ; reset demo number to	0
0000460A                            
0000460A                            loc_3422:
0000460A 31FC 0001 FFF0             		move.w	#1,(f_demo).w	; turn demo mode on
00004610 11FC 0000 F600             		move.b	#id_Demo,(v_gamemode).w ; set screen mode to 08 (demo)
00004616 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
0000461A 6600                       		bne.s	Demo_Level	; if not, branch
0000461C 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
00004622 4278 FE10                  		clr.w	(v_zone).w	; clear	level number
00004626 4238 FE16                  		clr.b	(v_lastspecial).w ; clear special stage number
0000462A                            
0000462A                            Demo_Level:
0000462A 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00004630 7000                       		moveq	#0,d0
00004632 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004636 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
0000463A 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
0000463E 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
00004646 4E75                       		rts	
00004648                            ; ===========================================================================
00004648                            ; ---------------------------------------------------------------------------
00004648                            ; Levels used in demos
00004648                            ; ---------------------------------------------------------------------------
00004648                            Demo_Levels:	incbin	"misc\Demo Level Order - Intro.bin"
00004650                            		even
00004650                            
00004650                            ; ---------------------------------------------------------------------------
00004650                            ; Subroutine to	change what you're selecting in the level select
00004650                            ; ---------------------------------------------------------------------------
00004650                            
00004650                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004650                            
00004650                            
00004650                            LevSelControls:
00004650 1238 F605                  		move.b	(v_jpadpress1).w,d1
00004654 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed and held?
00004658 6600                       		bne.s	LevSel_UpDown	; if yes, branch
0000465A 5378 FF80                  		subq.w	#1,(v_levseldelay).w ; subtract 1 from time to next move
0000465E 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00004660                            
00004660                            LevSel_UpDown:
00004660 31FC 000B FF80             		move.w	#$B,(v_levseldelay).w ; reset time delay
00004666 1238 F604                  		move.b	(v_jpadhold1).w,d1
0000466A 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed?
0000466E 6700                       		beq.s	LevSel_SndTest	; if not, branch
00004670 3038 FF82                  		move.w	(v_levselitem).w,d0
00004674 0801 0000                  		btst	#bitUp,d1	; is up	pressed?
00004678 6700                       		beq.s	LevSel_Down	; if not, branch
0000467A 5340                       		subq.w	#1,d0		; move up 1 selection
0000467C 6400                       		bhs.s	LevSel_Down
0000467E 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00004680                            
00004680                            LevSel_Down:
00004680 0801 0001                  		btst	#bitDn,d1	; is down pressed?
00004684 6700                       		beq.s	LevSel_Refresh	; if not, branch
00004686 5240                       		addq.w	#1,d0		; move down 1 selection
00004688 0C40 0015                  		cmpi.w	#$15,d0
0000468C 6500                       		blo.s	LevSel_Refresh
0000468E 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00004690                            
00004690                            LevSel_Refresh:
00004690 31C0 FF82                  		move.w	d0,(v_levselitem).w ; set new selection
00004694 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00004698 4E75                       		rts	
0000469A                            ; ===========================================================================
0000469A                            
0000469A                            LevSel_SndTest:
0000469A 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w ; is item $14 selected?
000046A0 6600                       		bne.s	LevSel_NoMove	; if not, branch
000046A2 1238 F605                  		move.b	(v_jpadpress1).w,d1
000046A6 0201 000C                  		andi.b	#btnR+btnL,d1	; is left/right	pressed?
000046AA 6700                       		beq.s	LevSel_NoMove	; if not, branch
000046AC 3038 FF84                  		move.w	(v_levselsound).w,d0
000046B0 0801 0002                  		btst	#bitL,d1	; is left pressed?
000046B4 6700                       		beq.s	LevSel_Right	; if not, branch
000046B6 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000046B8 6400                       		bhs.s	LevSel_Right
000046BA 7055                       		moveq	#$55,d0		; if sound test	moves below 0, set to $55
000046BC                            
000046BC                            LevSel_Right:
000046BC 0801 0003                  		btst	#bitR,d1	; is right pressed?
000046C0 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000046C2 5240                       		addq.w	#1,d0		; add 1	to sound test
000046C4 0C40 0056                  		cmpi.w	#$56,d0
000046C8 6500                       		blo.s	LevSel_Refresh2
000046CA 7000                       		moveq	#0,d0		; if sound test	moves above $55, set to	0
000046CC                            
000046CC                            LevSel_Refresh2:
000046CC 31C0 FF84                  		move.w	d0,(v_levselsound).w ; set sound test number
000046D0 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000046D4                            
000046D4                            LevSel_NoMove:
000046D4 4E75                       		rts	
000046D6                            ; End of function LevSelControls
000046D6                            
000046D6                            ; ---------------------------------------------------------------------------
000046D6                            ; Subroutine to load level select text
000046D6                            ; ---------------------------------------------------------------------------
000046D6                            
000046D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000046D6                            
000046D6                            
000046D6                            LevSelTextLoad:
000046D6                            
000046D6 =62100003                  	textpos:	= ($40000000+(($E210&$3FFF)<<16)+(($E210&$C000)>>14))
000046D6                            					; $E210 is a VRAM address
000046D6                            
000046D6 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000046DC 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000046E2 283C 6210 0003             		move.l	#textpos,d4	; text position on screen
000046E8 363C E680                  		move.w	#$E680,d3	; VRAM setting (4th palette, $680th tile)
000046EC 7214                       		moveq	#$14,d1		; number of lines of text
000046EE                            
000046EE                            	LevSel_DrawAll:
000046EE 2D44 0004                  		move.l	d4,4(a6)
000046F2 6100 0000                  		bsr.w	LevSel_ChgLine	; draw line of text
000046F6 0684 0080 0000             		addi.l	#$800000,d4	; jump to next line
000046FC 51C9 FFF0                  		dbf	d1,LevSel_DrawAll
00004700                            
00004700 7000                       		moveq	#0,d0
00004702 3038 FF82                  		move.w	(v_levselitem).w,d0
00004706 3200                       		move.w	d0,d1
00004708 283C 6210 0003             		move.l	#textpos,d4
0000470E EF48                       		lsl.w	#7,d0
00004710 4840                       		swap	d0
00004712 D880                       		add.l	d0,d4
00004714 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000471A E749                       		lsl.w	#3,d1
0000471C 3001                       		move.w	d1,d0
0000471E D241                       		add.w	d1,d1
00004720 D240                       		add.w	d0,d1
00004722 D2C1                       		adda.w	d1,a1
00004724 363C C680                  		move.w	#$C680,d3	; VRAM setting (3rd palette, $680th tile)
00004728 2D44 0004                  		move.l	d4,4(a6)
0000472C 6100 0000                  		bsr.w	LevSel_ChgLine	; recolour selected line
00004730 363C E680                  		move.w	#$E680,d3
00004734 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w
0000473A 6600                       		bne.s	LevSel_DrawSnd
0000473C 363C C680                  		move.w	#$C680,d3
00004740                            
00004740                            LevSel_DrawSnd:
0000474A 3038 FF84                  		move.w	(v_levselsound).w,d0
0000474E 0640 0080                  		addi.w	#$80,d0
00004752 1400                       		move.b	d0,d2
00004754 E808                       		lsr.b	#4,d0
00004756 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 1st digit
0000475A 1002                       		move.b	d2,d0
0000475C 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 2nd digit
00004760 4E75                       		rts	
00004762                            ; End of function LevSelTextLoad
00004762                            
00004762                            
00004762                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004762                            
00004762                            
00004762                            LevSel_ChgSnd:
00004762 0240 000F                  		andi.w	#$F,d0
00004766 0C00 000A                  		cmpi.b	#$A,d0		; is digit $A-$F?
0000476A 6500                       		blo.s	LevSel_Numb	; if not, branch
0000476C 5E00                       		addi.b	#7,d0		; use alpha characters
0000476E                            
0000476E                            	LevSel_Numb:
0000476E D043                       		add.w	d3,d0
00004770 3C80                       		move.w	d0,(a6)
00004772 4E75                       		rts	
00004774                            ; End of function LevSel_ChgSnd
00004774                            
00004774                            
00004774                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004774                            
00004774                            
00004774                            LevSel_ChgLine:
00004774 7417                       		moveq	#$17,d2		; number of characters per line
00004776                            
00004776                            	LevSel_LineLoop:
00004776 7000                       		moveq	#0,d0
00004778 1019                       		move.b	(a1)+,d0	; get character
0000477A 6A00                       		bpl.s	LevSel_CharOk	; branch if valid
0000477C 3CBC 0000                  		move.w	#0,(a6)		; use blank character
00004780 51CA FFF4                  		dbf	d2,LevSel_LineLoop
00004784 4E75                       		rts	
00004786                            
00004786                            
00004786                            	LevSel_CharOk:
00004786 D043                       		add.w	d3,d0		; combine char with VRAM setting
00004788 3C80                       		move.w	d0,(a6)		; send to VRAM
0000478A 51CA FFEA                  		dbf	d2,LevSel_LineLoop
0000478E 4E75                       		rts	
00004790                            ; End of function LevSel_ChgLine
00004790                            
00004790                            ; ===========================================================================
00004790                            ; ---------------------------------------------------------------------------
00004790                            ; Level	select menu text
00004790                            ; ---------------------------------------------------------------------------
00004790                            		incbin	"misc\Level Select Text (JP1).bin"
00004988                            		even
00004988                            ; ---------------------------------------------------------------------------
00004988                            ; Music	playlist
00004988                            ; ---------------------------------------------------------------------------
00004988                            MusicList:
00004988 00                         			dc.b bgm_GHZ    ; GHZ1
00004989 00                                 	dc.b bgm_LZ    ; GHZ2
0000498A 00                                 	dc.b bgm_Seaside   ; GHZ3
0000498B 00                                 	dc.b bgm_LZ    ; GHZ4
0000498C 00                                 	dc.b bgm_Stop    ; LZ1
0000498D 00                                 	dc.b bgm_Stop   ; LZ2
0000498E 00                                 	dc.b bgm_Stop    ; LZ3
0000498F 00                                 	dc.b bgm_SBZ3    ; LZ4
00004990 00                                 	dc.b bgm_MZ    ; MZ1
00004991 00                                 	dc.b bgm_SBZ    ; MZ2
00004992 00                                 	dc.b bgm_RRZ2   ; MZ3
00004993 00                                 	dc.b bgm_SBZ    ; MZ4
00004994 00                                 	dc.b bgm_LZ    ; SLZ1
00004995 00                                 	dc.b bgm_LZ    ; SLZ2
00004996 00                                 	dc.b bgm_LZ    ; SLZ3
00004997 00                                 	dc.b bgm_LZ    ; SLZ4
00004998 00                                 	dc.b bgm_SYZ    ; SYZ1
00004999 00                                 	dc.b bgm_SLZ    ; SYZ2
0000499A 00                                 	dc.b bgm_SLZ    ; SYZ3
0000499B 00                                 	dc.b bgm_SLZ    ; SYZ4
0000499C 00                                 	dc.b bgm_SBZ    ; SBZ1
0000499D 00                                 	dc.b bgm_SBZ    ; SBZ2
0000499E 00                                 	dc.b bgm_FZ		; SBZ3
0000499F 00                                 	dc.b bgm_SBZ    ; SBZ4
000049A0 00                                 	dc.b bgm_GHZ    ; GHZ1
000049A1 00                                 	dc.b bgm_GHZ    ; GHZ1
000049A2 00                                 	dc.b bgm_GHZ    ; GHZ1
000049A3 00                                 	dc.b bgm_GHZ    ; GHZ1
000049A4                                    	even
000049A4                            ; ===========================================================================
000049A4                            
000049A4                            ; ---------------------------------------------------------------------------
000049A4                            ; Level
000049A4                            ; ---------------------------------------------------------------------------
000049A4                            
000049A4                            GM_Level:
000049A4 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS - reset water state
000049AA                            
000049AA 08F8 0007 F600             		bset	#7,(v_gamemode).w ; add $80 to screen mode (for pre level sequence)
000049B0 4A78 FFF0                  		tst.w	(f_demo).w
000049B4 6B00                       		bmi.s	Level_NoMusicFade
000049BE                            
000049BE                            	Level_NoMusicFade:
000049BE 6100 CDD8                  		bsr.w	ClearPLC
000049C2 6100 D86E                  		bsr.w	PaletteFadeOut
000049C6 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
000049CA 6B00                       		bmi.s	Level_ClrRam	; if yes, branch
000049CC 46FC 2700                  		disable_ints
000049DA 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000049E0 6100 C96C                  		bsr.w	NemDec
000049E4 46FC 2300                  		enable_ints
000049E8 7000                       		moveq	#0,d0
000049EA 1038 FE10                  		move.b	(v_zone).w,d0
000049EE E948                       		lsl.w	#4,d0
000049F0 45F9 0000 0000             		lea	(LevelHeaders).l,a2
000049F6 45F2 0000                  		lea	(a2,d0.w),a2
000049FA 7000                       		moveq	#0,d0
000049FC 1012                       		move.b	(a2),d0
000049FE 6700                       		beq.s	loc_37FC
00004A00 6100 CD38                  		bsr.w	AddPLC		; load level patterns
00004A04                            
00004A04                            loc_37FC:
00004A04 7000                       		moveq	#plcid_Main2,d0
00004A06 6100 CD32                  		bsr.w	AddPLC		; load standard	patterns
00004A0A 4EB9 0000 0000             		jsr		LoadLifeIcon
00004A10                            		
00004A10                            Level_ClrRam:
00004A10 43F8 D000                  		lea	(v_objspace).w,a1
00004A14 7000                       		moveq	#0,d0
00004A16 323C 07FF                  		move.w	#$7FF,d1
00004A1A                            
00004A1A                            	Level_ClrObjRam:
00004A1A 22C0                       		move.l	d0,(a1)+
00004A1C 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00004A20                            
00004A20 43F8 F628                  		lea	($FFFFF628).w,a1
00004A24 7000                       		moveq	#0,d0
00004A26 323C 0015                  		move.w	#$15,d1
00004A2A                            
00004A2A                            	Level_ClrVars1:
00004A2A 22C0                       		move.l	d0,(a1)+
00004A2C 51C9 FFFC                  		dbf	d1,Level_ClrVars1 ; clear misc variables
00004A30                            
00004A30 43F8 F700                  		lea	(v_screenposx).w,a1
00004A34 7000                       		moveq	#0,d0
00004A36 323C 003F                  		move.w	#$3F,d1
00004A3A                            
00004A3A                            	Level_ClrVars2:
00004A3A 22C0                       		move.l	d0,(a1)+
00004A3C 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00004A40                            
00004A40 43F8 FE60                  		lea	(v_oscillate+2).w,a1
00004A44 7000                       		moveq	#0,d0
00004A46 323C 0047                  		move.w	#$47,d1
00004A4A                            
00004A4A                            	Level_ClrVars3:
00004A4A 22C0                       		move.l	d0,(a1)+
00004A4C 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00004A50                            
00004A50 46FC 2700                  		disable_ints
00004A54 6100 C77A                  		bsr.w	ClearScreen
00004A58 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00004A5E 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00004A62 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00004A66 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00004A6A 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
00004A6E 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00004A72 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00004A76 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00004A7A 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
00004A80 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
00004A84 31FC C800 C8FC             		ResetDMAQueue	
00004A8A 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004A90 6600                       		bne.s	Level_LoadPal	; if not, branch
00004A92                            
00004A92 3CBC 8014                  		move.w	#$8014,(a6)	; enable H-interrupts
00004A96 7000                       		moveq	#0,d0
00004A98 1038 FE11                  		move.b	(v_act).w,d0
00004A9C D040                       		add.w	d0,d0
00004A9E 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00004AA4 3031 0000                  		move.w	(a1,d0.w),d0
00004AA8 31C0 F646                  		move.w	d0,(v_waterpos1).w ; set water heights
00004AAC 31C0 F648                  		move.w	d0,(v_waterpos2).w
00004AB0 31C0 F64A                  		move.w	d0,(v_waterpos3).w
00004AB4 4238 F64D                  		clr.b	(v_wtr_routine).w ; clear water routine counter
00004AB8 4238 F64E                  		clr.b	(f_wtr_state).w	; clear	water state
00004ABC 11FC 0001 F64C             		move.b	#1,(f_water).w	; enable water
00004AC2                            
00004AC2                            Level_LoadPal:
00004AC2 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00004AC8 46FC 2300                  		move	#$2300,sr
00004ACC 4EB9 0000 0000             		jsr		LoadPlayerPal
00004AD2 6100 DA44                  		bsr.w	PalLoad2	; load Sonic's pallet line
00004AD6 0C38 0001 F64C             		cmp.b	#1,(f_water).w ; Is water enabled?
00004ADC 6600                       		bne.s	Level_GetBgm	; if not, branch
00004ADE 4EB9 0000 0000             		jsr		LoadPlayerWaterPal
00004AE4 6100 DA72                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00004AE8 4A38 FE30                  		tst.b	($FFFFFE30).w
00004AEC 6700                       		beq.s	Level_GetBgm
00004AEE 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00004AF4                            
00004AF4                            	Level_GetBgm:
00004AF4 4A78 FFF0                  		tst.w	(f_demo).w
00004AF8 6B00                               	bmi.s	Level_SkipTtlCard
00004AFA 7000                               	moveq	#0,d0
00004AFC 3038 FE10                  		move.w	(v_zone).w,d0
00004B00 E418                       		ror.b	#2,d0
00004B02 EC48                       		lsr.w   #6,d0
00004B04 43F9 0000 4988                     	lea	(MusicList).l,a1 ; load    music playlist
00004B0A 1031 0000                          	move.b	(a1,d0.w),d0
00004B0E 11C0 F5C6                  		move.b	d0,((v_Saved_music)).w
00004B12 6100 C786                          	bsr.w	PlaySound    ; play music
00004B16 11FC 0000 D080                     	move.b	#id_TitleCard,(v_objspace+$80).w ; load title card object
00004B1C                            
00004B1C                            
00004B1C                            Level_TtlCardLoop:
00004B1C 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00004B22 6100 F04C                  		bsr.w	WaitForVBla
00004B26 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004B2C 4EB9 0000 0000             		jsr	(BuildSprites).l
00004B32 6100 CC72                  		bsr.w	RunPLC
00004B36 3038 D108                  		move.w	(v_objspace+$108).w,d0
00004B3A B078 D130                  		cmp.w	(v_objspace+$130).w,d0 ; has title card sequence finished?
00004B3E 66DC                       		bne.s	Level_TtlCardLoop ; if not, branch
00004B40 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are there any items in the pattern load cue?
00004B44 66D6                       		bne.s	Level_TtlCardLoop ; if yes, branch
00004B46 4EB9 0000 0000             		jsr	(Hud_Base).l	; load basic HUD gfx
00004B4C                            
00004B4C                            	Level_SkipTtlCard:
00004B4C 4EB9 0000 0000             		jsr		LoadPlayerPal
00004B52 6100 D988                  		bsr.w	PalLoad1	; load Sonic's palette
00004B56 6100 0000                  		bsr.w	LevelSizeLoad
00004B5A 6100 0000                  		bsr.w	DeformLayers
00004B5E 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
00004B64 6100 0000                  		bsr.w	LevelDataLoad ; load block mappings and palettes
00004B68 6100 0000                  		bsr.w	LoadTilesFromStart
00004B6C 4EB9 0000 0000             		jsr	(FloorLog_Unk).l
00004B72 6100 0000                  		bsr.w	ColIndexLoad
00004B76 6100 0000                  		bsr.w	LZWaterFeatures
00004B7A 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00004B80 4A78 FFF0                  		tst.w	(f_demo).w
00004B84 6B00                       		bmi.s	Level_ChkDebug
00004B86 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
00004B8C                            
00004B8C                            Level_ChkDebug:
00004B8C 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00004B90 6700                       		beq.s	Level_ChkWater	; if not, branch
00004B92 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button held?
00004B98 6700                       		beq.s	Level_ChkWater	; if not, branch
00004B9A 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00004BA0                            
00004BA0                            Level_ChkWater:
00004BA0 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
00004BA6 31FC 0000 F604             		move.w	#0,(v_jpadhold1).w
00004BAC 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004BB2 6600                       		bne.s	Level_LoadObj	; if not, branch
00004BB4 11FC 0000 D780             		move.b	#id_WaterSurface,(v_objspace+$780).w ; load water surface object
00004BBA 31FC 0060 D788             		move.w	#$60,(v_objspace+$780+obX).w
00004BC0 11FC 0000 D7C0             		move.b	#id_WaterSurface,(v_objspace+$7C0).w
00004BC6 31FC 0120 D7C8             		move.w	#$120,(v_objspace+$7C0+obX).w
00004BCC                            
00004BCC                            Level_LoadObj:
00004BCC 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004BD2 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004BD8 4EB9 0000 0000             		jsr	(BuildSprites).l
00004BDE 7000                       		moveq	#0,d0
00004BE0 4A38 FE30                  		tst.b	(v_lastlamp).w	; are you starting from	a lamppost?
00004BE4 6600                       		bne.s	Level_SkipClr	; if yes, branch
00004BE6 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004BEA 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004BEE 11C0 FE1B                  		move.b	d0,(v_lifecount).w ; clear lives counter
00004BF2                            
00004BF2                            	Level_SkipClr:
00004BF2 11C0 FE1A                  		move.b	d0,(f_timeover).w
00004BF6 11C0 FE2C                  		move.b	d0,(v_shield).w	; clear shield
00004BFA 11C0 F5C8                  		move.b	d0,(v_rshield).w; clear red shield
00004BFE 11C0 F5C9                  		move.b	d0,(v_gshield).w; clear gold shield
00004C02 11C0 F5CA                  		move.b	d0,(v_spshield).w; clear gold shield
00004C06 11C0 FE2D                  		move.b	d0,(v_invinc).w	; clear invincibility
00004C0A 11C0 FE2E                  		move.b	d0,(v_shoes).w	; clear speed shoes
00004C0E 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00004C12 31C0 FE08                  		move.w	d0,(v_debuguse).w
00004C16 31C0 FE02                  		move.w	d0,(f_restart).w
00004C1A 31C0 FE04                  		move.w	d0,(v_framecount).w
00004C1E 6100 0000                  		bsr.w	OscillateNumInit
00004C22 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00004C28 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00004C2E 11FC 0001 FE1E             		move.b	#1,(f_timecount).w ; update time counter
00004C34 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
00004C3A 43F9 0000 0000             		lea	(DemoDataPtr).l,a1 ; load demo data
00004C40 7000                       		moveq	#0,d0
00004C42 1038 FE10                  		move.b	(v_zone).w,d0
00004C46 E548                       		lsl.w	#2,d0
00004C48 2271 0000                  		movea.l	(a1,d0.w),a1
00004C4C 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004C50 6A00                       		bpl.s	Level_Demo	; if yes, branch
00004C52 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1 ; load ending demo data
00004C58 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00004C5C 5340                       		subq.w	#1,d0
00004C5E E548                       		lsl.w	#2,d0
00004C60 2271 0000                  		movea.l	(a1,d0.w),a1
00004C64                            
00004C64                            Level_Demo:
00004C64 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w ; load key press duration
00004C6A 5338 F792                  		subq.b	#1,(v_btnpushtime2).w ; subtract 1 from duration
00004C6E 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00004C74 4A78 FFF0                  		tst.w	(f_demo).w
00004C78 6A00                       		bpl.s	Level_ChkWaterPal
00004C7A 31FC 021C F614             		move.w	#540,(v_demolength).w
00004C80 0C78 0004 FFF4             		cmpi.w	#4,(v_creditsnum).w
00004C86 6600                       		bne.s	Level_ChkWaterPal
00004C88 31FC 01FE F614             		move.w	#510,(v_demolength).w
00004C8E                            
00004C8E                            Level_ChkWaterPal:
00004C8E 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ/SBZ3?
00004C94 6600                       		bne.s	Level_Delay	; if not, branch
00004C96 700B                       		moveq	#palid_LZWater,d0 ; palette $B (LZ underwater)
00004C98 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; is level SBZ3?
00004C9E 6600                       		bne.s	Level_WtrNotSbz	; if not, branch
00004CA0 700D                       		moveq	#palid_SBZ3Water,d0 ; palette $D (SBZ3 underwater)
00004CA2                            
00004CA2                            	Level_WtrNotSbz:
00004CA2 6100 D8F0                  		bsr.w	PalLoad4_Water
00004CA6                            
00004CA6                            Level_Delay:
00004CA6 323C 0003                  		move.w	#3,d1
00004CAA                            
00004CAA                            	Level_DelayLoop:
00004CAA 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004CB0 6100 EEBE                  		bsr.w	WaitForVBla
00004CB4 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004CB8                            
00004CB8 31FC 202F F626             		move.w	#$202F,(v_pfade_start).w ; fade in 2nd, 3rd & 4th palette lines
00004CBE 6100 D4D2                  		bsr.w	PalFadeIn_Alt
00004CC2 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
00004CC6 6B00                       		bmi.s	Level_ClrCardArt ; if yes, branch
00004CC8 5438 D0A4                  		addq.b	#2,(v_objspace+$80+obRoutine).w ; make title card move
00004CCC 5838 D0E4                  		addq.b	#4,(v_objspace+$C0+obRoutine).w
00004CD0 5838 D124                  		addq.b	#4,(v_objspace+$100+obRoutine).w
00004CD4 5838 D164                  		addq.b	#4,(v_objspace+$140+obRoutine).w
00004CD8 6000                       		bra.s	Level_StartGame
00004CDA                            ; ===========================================================================
00004CDA                            
00004CDA                            Level_ClrCardArt:
00004CDA 7000                       		moveq	#plcid_Explode,d0
00004CDC 4EB9 0000 173A             		jsr	(AddPLC).l	; load explosion gfx
00004CE2 7000                       		moveq	#0,d0
00004CE4 1038 FE10                  		move.b	(v_zone).w,d0
00004CE8 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
00004CEC 4EB9 0000 173A             		jsr	(AddPLC).l	; load animal gfx (level no. + $15)
00004CF2                            
00004CF2                            Level_StartGame:
00004CF2 08B8 0007 F600             		bclr	#7,(v_gamemode).w ; subtract $80 from mode to end pre-level stuff
00004CF8                            
00004CF8                            ; ---------------------------------------------------------------------------
00004CF8                            ; Main level loop (when	all title card and loading sequences are finished)
00004CF8                            ; ---------------------------------------------------------------------------
00004CF8                            
00004CF8                            Level_MainLoop:
00004CF8 6100 C5B2                  		bsr.w	PauseGame
00004CFC 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004D02 6100 EE6C                  		bsr.w	WaitForVBla
00004D06 5278 FE04                  		addq.w	#1,(v_framecount).w ; add 1 to level timer
00004D0A 6100 0000                  		bsr.w	MoveSonicInDemo
00004D0E 6100 0000                  		bsr.w	LZWaterFeatures
00004D12 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004D18 4A78 FE02                  			tst.w   (f_restart).w
00004D1C 6600 FC86                  			bne     GM_Level
00004D20 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00004D24 6600                       		bne.s	Level_DoScroll	; if yes, branch
00004D26 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004D2C 6400                       		bhs.s	Level_SkipScroll ; if yes, branch
00004D2E                            
00004D2E                            	Level_DoScroll:
00004D2E 6100 0000                  		bsr.w	DeformLayers
00004D32                            
00004D32                            	Level_SkipScroll:
00004D32 4EB9 0000 0000             		jsr	(BuildSprites).l
00004D38 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004D3E 6100 CFDE                  		bsr.w	PaletteCycle
00004D42 6100 CA62                  		bsr.w	RunPLC
00004D46 6100 0000                  		bsr.w	OscillateNumDo
00004D4A 6100 0000                  		bsr.w	SynchroAnimate
00004D4E 6100 0000                  		bsr.w	SignpostArtLoad
00004D52                            
00004D52 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004D58 6700                       		beq.s	Level_ChkDemo	; if mode is 8 (demo), branch
00004D5A 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w
00004D60 6700 FF96                  		beq.w	Level_MainLoop	; if mode is $C (level), branch
00004D64 4E75                       		rts	
00004D66                            ; ===========================================================================
00004D66                            
00004D66                            Level_ChkDemo:
00004D66 4A78 FE02                  		tst.w	(f_restart).w	; is level set to restart?
00004D6A 6600                       		bne.s	Level_EndDemo	; if yes, branch
00004D6C 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00004D70 6700                       		beq.s	Level_EndDemo	; if not, branch
00004D72 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004D78 6700 FF7E                  		beq.w	Level_MainLoop	; if mode is 8 (demo), branch
00004D7C 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004D82 4E75                       		rts	
00004D84                            ; ===========================================================================
00004D84                            
00004D84                            Level_EndDemo:
00004D84 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004D8A 6600                       		bne.s	Level_FadeDemo	; if mode is 8 (demo), branch
00004D8C 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004D92 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on & not ending sequence?
00004D96 6A00                       		bpl.s	Level_FadeDemo	; if yes, branch
00004D98 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; go to credits
00004D9E                            
00004D9E                            Level_FadeDemo:
00004D9E 31FC 003C F614             		move.w	#$3C,(v_demolength).w
00004DA4 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00004DAA 4278 F794                  		clr.w	(v_palchgspeed).w
00004DAE                            
00004DAE                            	Level_FDLoop:
00004DAE 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004DB4 6100 EDBA                  		bsr.w	WaitForVBla
00004DB8 6100 0000                  		bsr.w	MoveSonicInDemo
00004DBC 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004DC2 4EB9 0000 0000             		jsr	(BuildSprites).l
00004DC8 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004DCE 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00004DD2 6A00                       		bpl.s	loc_3BC8
00004DD4 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00004DDA 6100 D476                  		bsr.w	FadeOut_ToBlack
00004DDE                            
00004DDE                            loc_3BC8:
00004DDE 4A78 F614                  		tst.w	(v_demolength).w
00004DE2 66CA                       		bne.s	Level_FDLoop
00004DE4 4E75                       		rts	
00004DE6                            ; ===========================================================================
00004DE6                            
00004DE6                            		include	"_inc\LZWaterFeatures.asm"
00004DE6                            ; ---------------------------------------------------------------------------
00004DE6                            ; Subroutine to	do special water effects in Labyrinth Zone
00004DE6                            ; ---------------------------------------------------------------------------
00004DE6                            
00004DE6                            LZWaterFeatures:
00004DE6 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00004DEC 6600                       		bne.s	@notlabyrinth	; if not, branch
00004DEE 4A38 F744                  			tst.b   (f_nobgscroll).w
00004DF2 6600                       			bne.s	@setheight
00004DF4 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004DFA 6400                       		bcc.s	@setheight	; if yes, skip other effects
00004DFC                            
00004DFC 6100 0000                  		bsr.w	LZWindTunnels
00004E00 6100 0000                  		bsr.w	LZWaterSlides
00004E04 6100 0000                  		bsr.w	LZDynamicWater
00004E08                            
00004E08                            @setheight:
00004E08 4238 F64E                  		clr.b	(f_wtr_state).w
00004E0C 7000                       		moveq	#0,d0
00004E0E 1038 FE60                  		move.b	(v_oscillate+2).w,d0
00004E12 E248                       		lsr.w	#1,d0
00004E14 D078 F648                  		add.w	(v_waterpos2).w,d0
00004E18 31C0 F646                  		move.w	d0,(v_waterpos1).w
00004E1C 3038 F646                  		move.w	(v_waterpos1).w,d0
00004E20 9078 F704                  		sub.w	(v_screenposy).w,d0
00004E24 6400                       		bcc.s	@isbelow
00004E26 4A40                       		tst.w	d0
00004E28 6A00                       		bpl.s	@isbelow	; if water is below top of screen, branch
00004E2A                            
00004E2A 11FC 00DF F625             		move.b	#223,(v_hbla_line).w
00004E30 11FC 0001 F64E             		move.b	#1,(f_wtr_state).w ; screen is all underwater
00004E36                            
00004E36                            	@isbelow:
00004E36 0C40 00DF                  		cmpi.w	#223,d0		; is water within 223 pixels of top of screen?
00004E3A 6500                       		bcs.s	@isvisible	; if yes, branch
00004E3C 303C 00DF                  		move.w	#223,d0
00004E40                            
00004E40                            	@isvisible:
00004E40 11C0 F625                  		move.b	d0,(v_hbla_line).w ; set water surface as on-screen
00004E44                            
00004E44                            @notlabyrinth:
00004E44 4E75                       		rts	
00004E46                            ; ===========================================================================
00004E46                            ; ---------------------------------------------------------------------------
00004E46                            ; Initial water heights
00004E46                            ; ---------------------------------------------------------------------------
00004E46 0420                       WaterHeight:	dc.w $420	; Labyrinth 1
00004E48 0328                       		dc.w $328	; Labyrinth 2
00004E4A 0900                       		dc.w $900	; Labyrinth 3
00004E4C 0228                       		dc.w $228	; Scrap Brain 3
00004E4E                            		even
00004E4E                            ; ===========================================================================
00004E4E                            
00004E4E                            ; ---------------------------------------------------------------------------
00004E4E                            ; Labyrinth dynamic water routines
00004E4E                            ; ---------------------------------------------------------------------------
00004E4E                            
00004E4E                            LZDynamicWater:
00004E4E 7000                       		moveq	#0,d0
00004E50 1038 FE11                  		move.b	(v_act).w,d0
00004E54 D040                       		add.w	d0,d0
00004E56 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004E5A 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004E5E 7200                       		moveq	#0,d1
00004E60 1238 F64C                  		move.b	(f_water).w,d1
00004E64 3038 F64A                  		move.w	(v_waterpos3).w,d0
00004E68 9078 F648                  		sub.w	(v_waterpos2).w,d0
00004E6C 6700                       		beq.s	@exit		; if water level is correct, branch
00004E6E 6400                       		bcc.s	@movewater	; if water level is too high, branch
00004E70 4441                       		neg.w	d1		; set water to move up instead
00004E72                            
00004E72                            	@movewater:
00004E72 D378 F648                  		add.w	d1,(v_waterpos2).w ; move water up/down
00004E76                            
00004E76                            	@exit:
00004E76 4E75                       		rts	
00004E78                            ; ===========================================================================
00004E78 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004E7A 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004E7C 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004E7E 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004E80                            ; ===========================================================================
00004E80                            
00004E80                            DynWater_LZ1:
00004E80 4E75                       		rts	
00004E82                            ; ===========================================================================
00004E82                            
00004E82                            DynWater_LZ2:
00004E82 3038 F700                  		move.w	(v_screenposx).w,d0
00004E86 323C 0328                  		move.w	#$328,d1
00004E8A 0C40 0500                  		cmpi.w	#$500,d0
00004E8E 6500                       		bcs.s	@setwater
00004E90 323C 03C8                  		move.w	#$3C8,d1
00004E94 0C40 0B00                  		cmpi.w	#$B00,d0
00004E98 6500                       		bcs.s	@setwater
00004E9A 323C 0428                  		move.w	#$428,d1
00004E9E                            
00004E9E                            	@setwater:
00004E9E 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004EA2 4E75                       		rts	
00004EA4                            ; ===========================================================================
00004EA4                            
00004EA4                            DynWater_LZ3:
00004EA4 3038 F700                  		move.w	(v_screenposx).w,d0
00004EA8 1438 F64D                  		move.b	(v_wtr_routine).w,d2
00004EAC 6600                       		bne.s	@routine2
00004EAE                            
00004EAE 323C 0900                  		move.w	#$900,d1
00004EB2 0C40 0600                  		cmpi.w	#$600,d0	; has screen reached position?
00004EB6 6500                       		bcs.s	@setwaterlz3	; if not, branch
00004EB8 0C78 03C0 D00C             		cmpi.w	#$3C0,(v_player+obY).w
00004EBE 6500                       		bcs.s	@setwaterlz3
00004EC0 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic in a y-axis range?
00004EC6 6400                       		bcc.s	@setwaterlz3	; if not, branch
00004EC8                            
00004EC8 323C 04C8                  		move.w	#$4C8,d1	; set new water height
00004ECC 11FC 004B A506             		move.b	#$4B,(v_lvllayout+$106).w ; update level layout
00004ED2 11FC 0001 F64D             		move.b	#1,(v_wtr_routine).w ; use second routine next
00004EE0                            
00004EE0                            	@setwaterlz3:
00004EE0 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004EE4 31C1 F648                  		move.w	d1,(v_waterpos2).w ; change water height instantly
00004EE8 4E75                       		rts	
00004EEA                            ; ===========================================================================
00004EEA                            
00004EEA                            @routine2:
00004EEA 5302                       		subq.b	#1,d2
00004EEC 6600                       		bne.s	@routine3
00004EEE 323C 04C8                  		move.w	#$4C8,d1
00004EF2 0C40 0770                  		cmpi.w	#$770,d0
00004EF6 6500                       		bcs.s	@setwater2
00004EF8 323C 0308                  		move.w	#$308,d1
00004EFC 0C40 1400                  		cmpi.w	#$1400,d0
00004F00 6500                       		bcs.s	@setwater2
00004F02 0C78 0508 F64A             		cmpi.w	#$508,(v_waterpos3).w
00004F08 6700                       		beq.s	@sonicislow
00004F0A 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic below $600 y-axis?
00004F10 6400                       		bcc.s	@sonicislow	; if yes, branch
00004F12 0C78 0280 D00C             		cmpi.w	#$280,(v_player+obY).w
00004F18 6400                       		bcc.s	@setwater2
00004F1A                            
00004F1A                            @sonicislow:
00004F1A 323C 0508                  		move.w	#$508,d1
00004F1E 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004F22 0C40 1770                  		cmpi.w	#$1770,d0
00004F26 6500                       		bcs.s	@setwater2
00004F28 11FC 0002 F64D             		move.b	#2,(v_wtr_routine).w
00004F2E                            
00004F2E                            	@setwater2:
00004F2E 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004F32 4E75                       		rts	
00004F34                            ; ===========================================================================
00004F34                            
00004F34                            @routine3:
00004F34 5302                       		subq.b	#1,d2
00004F36 6600                       		bne.s	@routine4
00004F38 323C 0508                  		move.w	#$508,d1
00004F3C 0C40 1860                  		cmpi.w	#$1860,d0
00004F40 6500                       		bcs.s	@setwater3
00004F42 323C 0188                  		move.w	#$188,d1
00004F46 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004F4A 6400                       		bcc.s	@loc_3DC6
00004F4C B278 F648                  		cmp.w	(v_waterpos2).w,d1
00004F50 6600                       		bne.s	@setwater3
00004F52                            
00004F52                            	@loc_3DC6:
00004F52 11FC 0003 F64D             		move.b	#3,(v_wtr_routine).w
00004F58                            
00004F58                            	@setwater3:
00004F58 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004F5C 4E75                       		rts	
00004F5E                            ; ===========================================================================
00004F5E                            
00004F5E                            @routine4:
00004F5E 5302                       		subq.b	#1,d2
00004F60 6600                       		bne.s	@routine5
00004F62 323C 0188                  		move.w	#$188,d1
00004F66 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004F6A 6500                       		bcs.s	@setwater4
00004F6C 323C 0900                  		move.w	#$900,d1
00004F70 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004F74 6500                       		bcs.s	@setwater4
00004F76 11FC 0004 F64D             		move.b	#4,(v_wtr_routine).w
00004F7C 31FC 0608 F64A             		move.w	#$608,(v_waterpos3).w
00004F82 31FC 07C0 F648             		move.w	#$7C0,(v_waterpos2).w
00004F88 11FC 0001 F7E8             		move.b	#1,(f_switch+8).w
00004F8E 4E75                       		rts	
00004F90                            ; ===========================================================================
00004F90                            
00004F90                            @setwater4:
00004F90 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004F94 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004F98 4E75                       		rts	
00004F9A                            ; ===========================================================================
00004F9A                            
00004F9A                            @routine5:
00004F9A 0C40 1E00                  		cmpi.w	#$1E00,d0	; has screen passed final position?
00004F9E 6500                       		bcs.s	@dontset	; if not, branch
00004FA0 31FC 0128 F64A             		move.w	#$128,(v_waterpos3).w
00004FA6                            
00004FA6                            	@dontset:
00004FA6 4E75                       		rts	
00004FA8                            ; ===========================================================================
00004FA8                            
00004FA8                            DynWater_SBZ3:
00004FA8                            	;	move.w	#$228,d1
00004FA8                            	;	cmpi.w	#$F00,(v_screenposx).w
00004FA8                            	;	bcs.s	@setwater
00004FA8                            	;	move.w	#$4C8,d1
00004FA8                            
00004FA8                            	;@setwater:
00004FA8                            		;move.w	d1,(v_waterpos3).w
00004FA8 4E75                       		rts
00004FAA                            
00004FAA                            ; ---------------------------------------------------------------------------
00004FAA                            ; Labyrinth Zone "wind tunnels"	subroutine
00004FAA                            ; ---------------------------------------------------------------------------
00004FAA                            
00004FAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004FAA                            
00004FAA                            
00004FAA                            LZWindTunnels:
00004FAA 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00004FAE 6600 0000                  		bne.w	@quit	; if yes, branch
00004FB2 45F9 0000 0000             		lea	(LZWind_Data+8).l,a2
00004FB8 7000                       		moveq	#0,d0
00004FBA 1038 FE11                  		move.b	(v_act).w,d0	; get act number
00004FBE E748                       		lsl.w	#3,d0		; multiply by 8
00004FC0 D4C0                       		adda.w	d0,a2		; add to address for data
00004FC2 7200                       		moveq	#0,d1
00004FC4 4A38 FE11                  		tst.b	(v_act).w	; is act number 1?
00004FC8 6600                       		bne.s	@notact1	; if not, branch
00004FCA 7201                       		moveq	#1,d1
00004FCC 514A                       		subq.w	#8,a2		; use different data for act 1
00004FCE                            
00004FCE                            	@notact1:
00004FCE 43F8 D000                  		lea	(v_player).w,a1
00004FD2                            
00004FD2                            @chksonic:
00004FD2 3029 0008                  		move.w	obX(a1),d0
00004FD6 B052                       		cmp.w	(a2),d0
00004FD8 6500 0000                  		bcs.w	@chknext
00004FDC B06A 0004                  		cmp.w	4(a2),d0
00004FE0 6400 0000                  		bcc.w	@chknext
00004FE4 3429 000C                  		move.w	obY(a1),d2
00004FE8 B46A 0002                  		cmp.w	2(a2),d2
00004FEC 6500                       		bcs.s	@chknext
00004FEE B46A 0006                  		cmp.w	6(a2),d2
00004FF2 6400                       		bcc.s	@chknext	; branch if Sonic is outside a range
00004FF4 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004FF8 0200 003F                  		andi.b	#$3F,d0		; does VInt counter fall on 0, $40, $80 or $C0?
00004FFC 6600                       		bne.s	@skipsound	; if not, branch
00005008                            
00005008                            	@skipsound:
00005008 4A38 F7C9                  		tst.b	(f_wtunnelallow).w ; are wind tunnels disabled?
0000500C 6600 0000                  		bne.w	@quit	; if yes, branch
00005010 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1) ; is Sonic hurt/dying?
00005016 6400                       		bcc.s	@clrquit	; if yes, branch
00005018 11FC 0001 F7C7             		move.b	#1,(f_wtunnelmode).w
0000501E 0440 0080                  		subi.w	#$80,d0
00005022 B052                       		cmp.w	(a2),d0
00005024 6400                       		bcc.s	@movesonic
00005026 7002                       		moveq	#2,d0
00005028 0C38 0001 FE11             		cmpi.b	#1,(v_act).w	; is act number 2?
0000502E 6600                       		bne.s	@notact2	; if not, branch
00005030 4440                       		neg.w	d0
00005032                            
00005032                            	@notact2:
00005032 D169 000C                  		add.w	d0,obY(a1)	; adjust Sonic's y-axis for curve of tunnel
00005036                            
00005036                            @movesonic:
00005036 5869 0008                  		addq.w	#4,obX(a1)
0000503A 337C 0400 0010             		move.w	#$400,obVelX(a1) ; move Sonic horizontally
00005040 337C 0000 0012             		move.w	#0,obVelY(a1)
00005046 137C 0000 001C             		move.b	#id_Float2,obAnim(a1)	; use floating animation
0000504C 08E9 0001 0022             		bset	#1,obStatus(a1)
00005052 0838 0000 F602             		btst	#0,(v_jpadhold2).w ; is up pressed?
00005058 6700                       		beq.s	@down		; if not, branch
0000505A 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up on pole
0000505E                            
0000505E                            	@down:
0000505E 0838 0001 F602             		btst	#1,(v_jpadhold2).w ; is down being pressed?
00005064 6700                       		beq.s	@end		; if not, branch
00005066 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down on pole
0000506A                            
0000506A                            	@end:
0000506A 4E75                       		rts	
0000506C                            ; ===========================================================================
0000506C                            
0000506C                            @chknext:
0000506C 504A                       		addq.w	#8,a2		; use second set of values (act 1 only)
0000506E 51C9 FF62                  		dbf	d1,@chksonic	; on act 1, repeat for a second tunnel
00005072 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic still in a tunnel?
00005076 6700                       		beq.s	@quit		; if yes, branch
00005078 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
0000507E                            
0000507E                            @clrquit:
0000507E 4238 F7C7                  		clr.b	(f_wtunnelmode).w ; finish tunnel
00005082                            
00005082                            @quit:
00005082 4E75                       		rts	
00005084                            ; End of function LZWindTunnels
00005084                            
00005084                            ; ===========================================================================
00005084                            
00005084                            		;    left, top,  right, bottom boundaries
00005084 0A80 0300 0C10 0380        LZWind_Data:	dc.w $A80, $300, $C10,  $380 ; act 1 values (set 1)
0000508C 0F80 0100 1410 0180        		dc.w $F80, $100, $1410,	$180 ; act 1 values (set 2)
00005094 0460 0400 0710 0480        		dc.w $460, $400, $710,  $480 ; act 2 values
0000509C 0A20 0600 1610 06E0        		dc.w $A20, $600, $1610, $6E0 ; act 3 values
000050A4 0C80 0600 13D0 0780        		dc.w $C80, $600, $13D0, $780 ; SBZ act 3 values
000050AC                            		even
000050AC                            
000050AC                            ; ---------------------------------------------------------------------------
000050AC                            ; Labyrinth Zone water slide subroutine
000050AC                            ; ---------------------------------------------------------------------------
000050AC                            
000050AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000050AC                            
000050AC                            
000050AC                            LZWaterSlides:
000050AC 43F8 D000                  		lea	(v_player).w,a1
000050B0 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic jumping?
000050B6 6600                       		bne.s	loc_3F6A	; if not, branch
000050B8 3029 000C                  		move.w	obY(a1),d0
000050BC E248                       		lsr.w	#1,d0
000050BE 0240 0380                  		andi.w	#$380,d0
000050C2 1229 0008                  		move.b	obX(a1),d1
000050C6 0241 007F                  		andi.w	#$7F,d1
000050CA D041                       		add.w	d1,d0
000050CC 45F8 A400                  		lea	(v_lvllayout).w,a2
000050D0 1032 0000                  		move.b	(a2,d0.w),d0
000050D4 45FA 0000                  		lea	Slide_Chunks_End(pc),a2
000050D8 7200                       		moveq	#Slide_Chunks_End-Slide_Chunks-1,d1
000050DA                            
000050DA                            loc_3F62:
000050DA B022                       		cmp.b	-(a2),d0
000050DC 57C9 FFFC                  		dbeq	d1,loc_3F62
000050E0 6700                       		beq.s	LZSlide_Move
000050E2                            
000050E2                            loc_3F6A:
000050E2 4A38 F7CA                  		tst.b	(f_jumponly).w
000050E6 6700                       		beq.s	locret_3F7A
000050E8 337C 0005 003E             		move.w	#5,$3E(a1)
000050EE 4238 F7CA                  		clr.b	(f_jumponly).w
000050F2                            
000050F2                            locret_3F7A:
000050F2 4E75                       		rts	
000050F4                            ; ===========================================================================
000050F4                            
000050F4                            LZSlide_Move:
000050F4 0C41 0003                  		cmpi.w	#3,d1
000050F8 6400                       		bcc.s	loc_3F84
000050FA 4E71                       		nop	
000050FC                            
000050FC                            loc_3F84:
000050FC 08A9 0000 0022             		bclr	#0,obStatus(a1)
00005102 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
00005106 1340 0020                  		move.b	d0,obInertia(a1)
0000510A 6A00                       		bpl.s	loc_3F9A
0000510C 08E9 0000 0022             		bset	#0,obStatus(a1)
00005112                            
00005112                            loc_3F9A:
00005112 4229 0021                  		clr.b	obInertia+1(a1)
00005116 137C 0000 001C             		move.b	#id_WaterSlide,obAnim(a1) ; use Sonic's "sliding" animation
0000511C 11FC 0001 F7CA             		move.b	#1,(f_jumponly).w ; lock controls (except jumping)
00005122 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005126 0200 001F                  		andi.b	#$1F,d0
0000512A 6600                       		bne.s	locret_3FBE
00005136                            
00005136                            locret_3FBE:
00005136 4E75                       		rts	
00005138                            ; End of function LZWaterSlides
00005138                            
00005138                            ; ===========================================================================
00005138                            ; byte_3FC0:
00005138                            Slide_Speeds:
00005138 0AF5 0AF6 F5F4 0B          		dc.b $A, $F5, $A, $F6, $F5, $F4, $B
00005140 00                         		even
00005140                            
00005140                            Slide_Chunks:
00005140 54                         		dc.b $54 ;2, 7, 3, $4C, $4B, 8, 4
00005141                            ; byte_3FCF
00005141                            Slide_Chunks_End
00005142 00                         		even
00005142 00                         		even
00005142                            		include	"_inc\MoveSonicInDemo.asm"
00005142                            ; ---------------------------------------------------------------------------
00005142                            ; Subroutine to	move Sonic in demo mode
00005142                            ; ---------------------------------------------------------------------------
00005142                            
00005142                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005142                            
00005142                            
00005142                            MoveSonicInDemo:
00005142 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00005146 6600                       		bne.s	MDemo_On	; if yes, branch
00005148 4E75                       		rts	
0000514A                            ; ===========================================================================
0000514A                            
0000514A                            ; This is an unused subroutine for recording a demo
0000514A                            
0000514A                            DemoRecorder:
0000514A 43F9 0008 0000             		lea	($80000).l,a1
00005150 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00005154 D2C0                       		adda.w	d0,a1
00005156 1038 F604                  		move.b	(v_jpadhold1).w,d0
0000515A B011                       		cmp.b	(a1),d0
0000515C 6600                       		bne.s	@next
0000515E 5229 0001                  		addq.b	#1,1(a1)
00005162 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00005168 6700                       		beq.s	@next
0000516A 4E75                       		rts	
0000516C                            
0000516C                            	@next:
0000516C 1340 0002                  		move.b	d0,2(a1)
00005170 137C 0000 0003             		move.b	#0,3(a1)
00005176 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
0000517A 0278 03FF F790             		andi.w	#$3FF,(v_btnpushtime1).w
00005180 4E75                       		rts	
00005182                            ; ===========================================================================
00005182                            
00005182                            MDemo_On:
00005182 4A38 F604                  		tst.b	(v_jpadhold1).w	; is start button pressed?
00005186 6A00                       		bpl.s	@dontquit	; if not, branch
00005188 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
0000518C 6B00                       		bmi.s	@dontquit	; if yes, branch
0000518E 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00005194                            
00005194                            	@dontquit:
00005194 43F9 0000 0000             		lea	(DemoDataPtr).l,a1
0000519A 7000                       		moveq	#0,d0
0000519C 1038 FE10                  		move.b	(v_zone).w,d0
000051A0 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is this a special stage?
000051A6 6600                       		bne.s	@notspecial	; if not, branch
000051A8 7006                       		moveq	#6,d0		; use demo #6
000051AA                            
000051AA                            	@notspecial:
000051AA E548                       		lsl.w	#2,d0
000051AC 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for demo data
000051B0 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
000051B4 6A00                       		bpl.s	@notcredits	; if not, branch
000051B6 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1
000051BC 3038 FFF4                  		move.w	(v_creditsnum).w,d0
000051C0 5340                       		subq.w	#1,d0
000051C2 E548                       		lsl.w	#2,d0
000051C4 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for credits demo
000051C8                            
000051C8                            	@notcredits:
000051C8 3038 F790                  		move.w	(v_btnpushtime1).w,d0
000051CC D2C0                       		adda.w	d0,a1
000051CE 1011                       		move.b	(a1),d0
000051D0 41F8 F604                  		lea	(v_jpadhold1).w,a0
000051D4 1200                       		move.b	d0,d1
000051D6 7400                       			moveq	#0,d2
000051D8 B500                       		eor.b	d2,d0
000051DA 10C1                       		move.b	d1,(a0)+
000051DC C001                       		and.b	d1,d0
000051DE 10C0                       		move.b	d0,(a0)+
000051E0 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
000051E4 6400                       		bcc.s	@end
000051E6 11E9 0003 F792             		move.b	3(a1),(v_btnpushtime2).w
000051EC 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
000051F0                            
000051F0                            	@end:
000051F0 4E75                       		rts	
000051F2                            ; End of function MoveSonicInDemo
000051F2                            
000051F2                            ; ===========================================================================
000051F2                            ; ---------------------------------------------------------------------------
000051F2                            ; Demo sequence	pointers
000051F2                            ; ---------------------------------------------------------------------------
000051F2 0000 0000                  DemoDataPtr:	dc.l Demo_GHZ		; demos run after the title screen
000051F6 0000 0000                  		dc.l Demo_GHZ
000051FA 0000 0000                  		dc.l Demo_MZ
000051FE 0000 0000                  		dc.l Demo_MZ
00005202 0000 0000                  		dc.l Demo_SYZ
00005206 0000 0000                  		dc.l Demo_SYZ
0000520A 0000 0000                  		dc.l Demo_SS
0000520E 0000 0000                  		dc.l Demo_SS
00005212                            
00005212 0000 0000                  DemoEndDataPtr:	dc.l Demo_EndGHZ1	; demos run during the credits
00005216 0000 0000                  		dc.l Demo_EndMZ
0000521A 0000 0000                  		dc.l Demo_EndSYZ
0000521E 0000 0000                  		dc.l Demo_EndLZ
00005222 0000 0000                  		dc.l Demo_EndSLZ
00005226 0000 0000                  		dc.l Demo_EndSBZ1
0000522A 0000 0000                  		dc.l Demo_EndSBZ2
0000522E 0000 0000                  		dc.l Demo_EndGHZ2
00005232                            
00005232 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00005242 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00005252 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00005262                            		even
00005262                            		even
00005262                            
00005262                            ; ---------------------------------------------------------------------------
00005262                            ; Collision index pointer loading subroutine
00005262                            ; ---------------------------------------------------------------------------
00005262                            
00005262                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005262                            
00005262                            
00005262                            ColIndexLoad:
00005262 7000                       		moveq	#0,d0
00005264 1038 FE10                  		move.b	(v_zone).w,d0
00005268 E548                       		lsl.w	#2,d0
0000526A 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),(v_collindex).w
00005270 4E75                       		rts	
00005272                            ; End of function ColIndexLoad
00005272                            
00005272                            ; ===========================================================================
00005272                            ; ---------------------------------------------------------------------------
00005272                            ; Collision index pointers
00005272                            ; ---------------------------------------------------------------------------
00005272 0000 0000                  ColPointers:	dc.l Col_GHZ
00005276 0000 0000                  		dc.l Col_LZ
0000527A 0000 0000                  		dc.l Col_MZ
0000527E 0000 0000                  		dc.l Col_SLZ
00005282 0000 0000                  		dc.l Col_SYZ
00005286 0000 0000                  		dc.l Col_SBZ
0000528A                            ;		dc.l Col_GHZ ; Pointer for Ending is missing by default.
0000528A                            
0000528A                            		include	"_inc\Oscillatory Routines.asm"
0000528A                            ; ---------------------------------------------------------------------------
0000528A                            ; Oscillating number subroutines
0000528A                            ; ---------------------------------------------------------------------------
0000528A                            
0000528A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000528A                            
0000528A                            ; Initialise the values
0000528A                            
0000528A                            OscillateNumInit:
0000528A 43F8 FE5E                  		lea	(v_oscillate).w,a1
0000528E 45F9 0000 0000             		lea	(@baselines).l,a2
00005294 7220                       		moveq	#$20,d1
00005296                            
00005296                            	@loop:
00005296 32DA                       		move.w	(a2)+,(a1)+	; copy baseline values to RAM
00005298 51C9 FFFC                  		dbf	d1,@loop
0000529C 4E75                       		rts	
0000529E                            
0000529E                            
0000529E                            ; ===========================================================================
0000529E 007C                       @baselines:	dc.w %0000000001111100	; oscillation direction bitfield
000052A0 0080 0000                  		dc.w $80, 0
000052A4 0080 0000                  		dc.w $80, 0
000052A8 0080 0000                  		dc.w $80, 0
000052AC 0080 0000                  		dc.w $80, 0
000052B0 0080 0000                  		dc.w $80, 0
000052B4 0080 0000                  		dc.w $80, 0
000052B8 0080 0000                  		dc.w $80, 0
000052BC 0080 0000                  		dc.w $80, 0
000052C0 0080 0000                  		dc.w $80, 0
000052C4 50F0 011E                  		dc.w $50F0, $11E
000052C8 2080 00B4                  		dc.w $2080, $B4
000052CC 3080 010E                  		dc.w $3080, $10E
000052D0 5080 01C2                  		dc.w $5080, $1C2
000052D4 7080 0276                  		dc.w $7080, $276
000052D8 0080 0000                  		dc.w $80, 0
000052DC 0080 0000                  		dc.w $80, 0
000052E0                            		even
000052E0                            
000052E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000052E0                            
000052E0                            ; Oscillate values
000052E0                            
000052E0                            OscillateNumDo:
000052E0 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
000052E6 6400                       		bcc.s	@end		; if yes, branch
000052E8 43F8 FE5E                  		lea	(v_oscillate).w,a1
000052EC 45F9 0000 0000             		lea	(@settings).l,a2
000052F2 3619                       		move.w	(a1)+,d3	; get oscillation direction bitfield
000052F4 720F                       		moveq	#$F,d1
000052F6                            
000052F6                            @loop:
000052F6 341A                       		move.w	(a2)+,d2	; get frequency
000052F8 381A                       		move.w	(a2)+,d4	; get amplitude
000052FA 0303                       		btst	d1,d3		; check oscillation direction
000052FC 6600                       		bne.s	@down		; branch if 1
000052FE                            
000052FE                            	@up:
000052FE 3029 0002                  		move.w	2(a1),d0	; get current rate
00005302 D042                       		add.w	d2,d0		; add frequency
00005304 3340 0002                  		move.w	d0,2(a1)
00005308 D151                       		add.w	d0,0(a1)	; add rate to value
0000530A B811                       		cmp.b	0(a1),d4
0000530C 6200                       		bhi.s	@next
0000530E 03C3                       		bset	d1,d3
00005310 6000                       		bra.s	@next
00005312                            
00005312                            	@down:
00005312 3029 0002                  		move.w	2(a1),d0
00005316 9042                       		sub.w	d2,d0
00005318 3340 0002                  		move.w	d0,2(a1)
0000531C D151                       		add.w	d0,0(a1)
0000531E B811                       		cmp.b	0(a1),d4
00005320 6300                       		bls.s	@next
00005322 0383                       		bclr	d1,d3
00005324                            
00005324                            	@next:
00005324 5849                       		addq.w	#4,a1
00005326 51C9 FFCE                  		dbf	d1,@loop
0000532A 31C3 FE5E                  		move.w	d3,(v_oscillate).w
0000532E                            
0000532E                            @end:
0000532E 4E75                       		rts	
00005330                            ; End of function OscillateNumDo
00005330                            
00005330                            ; ===========================================================================
00005330 0002 0010                  @settings:	dc.w 2,	$10	; frequency, amplitude
00005334 0002 0018                  		dc.w 2,	$18
00005338 0002 0020                  		dc.w 2,	$20
0000533C 0002 0030                  		dc.w 2,	$30
00005340 0004 0020                  		dc.w 4,	$20
00005344 0008 0008                  		dc.w 8,	8
00005348 0008 0040                  		dc.w 8,	$40
0000534C 0004 0040                  		dc.w 4,	$40
00005350 0002 0050                  		dc.w 2,	$50
00005354 0002 0050                  		dc.w 2,	$50
00005358 0002 0020                  		dc.w 2,	$20
0000535C 0003 0030                  		dc.w 3,	$30
00005360 0005 0050                  		dc.w 5,	$50
00005364 0007 0070                  		dc.w 7,	$70
00005368 0002 0010                  		dc.w 2,	$10
0000536C 0002 0010                  		dc.w 2,	$10
00005370                            		even
00005370                            		even
00005370                            
00005370                            ; ---------------------------------------------------------------------------
00005370                            ; Subroutine to	change synchronised animation variables (rings, giant rings)
00005370                            ; ---------------------------------------------------------------------------
00005370                            
00005370                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005370                            
00005370                            
00005370                            SynchroAnimate:
00005370                            
00005370                            ; Used for GHZ spiked log
00005370                            Sync1:
00005370 5338 FEC0                  		subq.b	#1,(v_ani0_time).w ; has timer reached 0?
00005374 6A00                       		bpl.s	Sync2		; if not, branch
00005376 11FC 000B FEC0             		move.b	#$B,(v_ani0_time).w ; reset timer
0000537C 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w ; next frame
00005380 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w ; max frame is 7
00005386                            
00005386                            ; Used for rings and giant rings
00005386                            Sync2:
00005386 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
0000538A 6A00                       		bpl.s	Sync3
0000538C 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
00005392 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
00005396 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0000539C                            
0000539C                            ; Used for nothing
0000539C                            Sync3:
0000539C 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
000053A0 6A00                       		bpl.s	Sync4
000053A2 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
000053A8 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
000053AC 0C38 0006 FEC5             		cmpi.b	#6,(v_ani2_frame).w
000053B2 6500                       		blo.s	Sync4
000053B4 11FC 0000 FEC5             		move.b	#0,(v_ani2_frame).w
000053BA                            
000053BA                            ; Used for bouncing rings
000053BA                            Sync4:
000053BA 4A38 FEC6                  		tst.b	(v_ani3_time).w
000053BE 6700                       		beq.s	SyncEnd
000053C0 7000                       		moveq	#0,d0
000053C2 1038 FEC6                  		move.b	(v_ani3_time).w,d0
000053C6 D078 FEC8                  		add.w	(v_ani3_buf).w,d0
000053CA 31C0 FEC8                  		move.w	d0,(v_ani3_buf).w
000053CE EF58                       		rol.w	#7,d0
000053D0 0240 0003                  		andi.w	#3,d0
000053D4 11C0 FEC7                  		move.b	d0,(v_ani3_frame).w
000053D8 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
000053DC                            
000053DC                            SyncEnd:
000053DC 4E75                       		rts	
000053DE                            ; End of function SynchroAnimate
000053DE                            
000053DE                            ; ---------------------------------------------------------------------------
000053DE                            ; End-of-act signpost pattern loading subroutine
000053DE                            ; ---------------------------------------------------------------------------
000053DE                            
000053DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000053DE                            
000053DE                            
000053DE                            SignpostArtLoad:
000053DE 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
000053E2 6600 0000                  		bne.w	@exit		; if yes, branch
000053E6 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; is act number 02 (act 3)?
000053EC 6700                       		beq.s	@exit		; if yes, branch
000053EE                            
000053EE 3038 F700                  		move.w	(v_screenposx).w,d0
000053F2 3238 F72A                  		move.w	(v_limitright2).w,d1
000053F6 0441 0100                  		subi.w	#$100,d1
000053FA B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000053FC 6D00                       		blt.s	@exit		; if not, branch
000053FE 4A38 FE1E                  		tst.b	(f_timecount).w
00005402 6700                       		beq.s	@exit
00005404 B278 F728                  		cmp.w	(v_limitleft2).w,d1
00005408 6700                       		beq.s	@exit
0000540A 31C1 F728                  		move.w	d1,(v_limitleft2).w ; move left boundary to current screen position
0000540E 7000                       		moveq	#plcid_Signpost,d0
00005410 6000 C35A                  		bra.w	NewPLC		; load signpost	patterns
00005414                            
00005414                            	@exit:
00005414 4E75                       		rts	
00005416                            ; End of function SignpostArtLoad
00005416                            
00005416                            ; ===========================================================================
00005416                            Demo_GHZ:	incbin	"demodata\Intro - GHZ.bin"
00005496                            Demo_MZ:	incbin	"demodata\Intro - MZ.bin"
000055C6                            Demo_SYZ:	incbin	"demodata\Intro - SYZ.bin"
00005646                            Demo_SS:	incbin	"demodata\Intro - Special Stage.bin"
00005746                            ; ===========================================================================
00005746                            
00005746                            ; ---------------------------------------------------------------------------
00005746                            ; Special Stage
00005746                            ; ---------------------------------------------------------------------------
00005746                            
00005746                            GM_Special:
0000574E 6100 CC0C                  		bsr.w	PaletteWhiteOut
00005752 46FC 2700                  		disable_ints
00005756 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
0000575C 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00005760 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
00005764 31FC 8AAF F624             		move.w	#$8A00+175,(v_hbla_hreg).w
0000576A 3CBC 9011                  		move.w	#$9011,(a6)	; 128-cell hscroll size
0000576E 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005772 0200 00BF                  		andi.b	#$BF,d0
00005776 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000577C 6100 BA52                  		bsr.w	ClearScreen
00005780 46FC 2300                  		enable_ints
00005784 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$6FFF,$5000
000057A6                            
000057A6                            	SS_WaitForDMA:
000057A6 3215                       		move.w	(a5),d1		; read control port ($C00004)
000057A8 0801 0001                  		btst	#1,d1		; is DMA running?
000057AC 66F8                       		bne.s	SS_WaitForDMA	; if yes, branch
000057AE 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment to 2 bytes
000057B2 6100 0000                  		bsr.w	SS_BGLoad
000057B6 7000                       		moveq	#plcid_SpecialStage,d0
000057B8 6100 C0EC                  		bsr.w	QuickPLC	; load special stage patterns
000057BC                            
000057BC 43F8 D000                  		lea	(v_objspace).w,a1
000057C0 7000                       		moveq	#0,d0
000057C2 323C 07FF                  		move.w	#$7FF,d1
000057C6                            	SS_ClrObjRam:
000057C6 22C0                       		move.l	d0,(a1)+
000057C8 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
000057CC                            
000057CC 43F8 F700                  		lea	(v_screenposx).w,a1
000057D0 7000                       		moveq	#0,d0
000057D2 323C 003F                  		move.w	#$3F,d1
000057D6                            	SS_ClrRam1:
000057D6 22C0                       		move.l	d0,(a1)+
000057D8 51C9 FFFC                  		dbf	d1,SS_ClrRam1	; clear	variables
000057DC                            
000057DC 43F8 FE60                  		lea	(v_oscillate+2).w,a1
000057E0 7000                       		moveq	#0,d0
000057E2 323C 0027                  		move.w	#$27,d1
000057E6                            	SS_ClrRam2:
000057E6 22C0                       		move.l	d0,(a1)+
000057E8 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
000057EC                            
000057EC 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
000057F0 7000                       		moveq	#0,d0
000057F2 323C 007F                  		move.w	#$7F,d1
000057F6                            	SS_ClrNemRam:
000057F6 22C0                       		move.l	d0,(a1)+
000057F8 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000057FC                            
000057FC 4238 F64E                  		clr.b	(f_wtr_state).w
00005800 4278 FE02                  		clr.w	(f_restart).w
00005804 700A                       		moveq	#palid_Special,d0
00005806 6100 CCD4                  		bsr.w	PalLoad1	; load special stage palette
0000580A 4EB9 0000 0000             		jsr	(SS_Load).l		; load SS layout data
00005810 21FC 0000 0000 F700        		move.l	#0,(v_screenposx).w
00005818 21FC 0000 0000 F704        		move.l	#0,(v_screenposy).w
00005820 11FC 0000 D000             		move.b	#id_SonicSpecial,(v_player).w ; load special stage Sonic object
00005826 6100 0000                  		bsr.w	PalCycle_SS
0000582A 4278 F780                  		clr.w	(v_ssangle).w	; set stage angle to "upright"
0000582E 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set stage rotation speed
0000583C 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
00005842 43F9 0000 51F2             		lea	(DemoDataPtr).l,a1
00005848 7006                       		moveq	#6,d0
0000584A E548                       		lsl.w	#2,d0
0000584C 2271 0000                  		movea.l	(a1,d0.w),a1
00005850 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w
00005856 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
0000585A 4278 FE20                  		clr.w	(v_rings).w
0000585E 4238 FE1B                  		clr.b	(v_lifecount).w
00005862 31FC 0000 FE08             		move.w	#0,(v_debuguse).w
00005868 31FC 0708 F614             		move.w	#1800,(v_demolength).w
0000586E 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00005872 6700                       		beq.s	SS_NoDebug	; if not, branch
00005874 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button pressed?
0000587A 6700                       		beq.s	SS_NoDebug	; if not, branch
0000587C 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00005882                            
00005882                            	SS_NoDebug:
00005882 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005886 0000 0040                  		ori.b	#$40,d0
0000588A 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005890 6100 CA1E                  		bsr.w	PaletteWhiteIn
00005894                            
00005894                            ; ---------------------------------------------------------------------------
00005894                            ; Main Special Stage loop
00005894                            ; ---------------------------------------------------------------------------
00005894                            
00005894                            SS_MainLoop:
00005894 6100 BA16                  		bsr.w	PauseGame
00005898 11FC 000A F62A             		move.b	#$A,(v_vbla_routine).w
0000589E 6100 E2D0                  		bsr.w	WaitForVBla
000058A2 6100 F89E                  		bsr.w	MoveSonicInDemo
000058A6 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
000058AC 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000058B2 4EB9 0000 0000             		jsr	(BuildSprites).l
000058B8 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
000058BE 6100 0000                  		bsr.w	SS_BGAnimate
000058C2 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
000058C6 6700                       		beq.s	SS_ChkEnd	; if not, branch
000058C8 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
000058CC 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
000058D0                            
000058D0                            	SS_ChkEnd:
000058D0 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
000058D6 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
000058DA                            
000058DA 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
000058DE 6600 0000                  		bne.w	SS_ToLevel
000058E2 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
000058E8 0C78 0503 FE10             		cmpi.w	#(id_SBZ<<8)+3,(v_zone).w ; is level number higher than FZ?
000058EE 6500                       		blo.s	SS_Finish	; if not, branch
000058F0 4278 FE10                  		clr.w	(v_zone).w	; set to GHZ1
000058F4                            
000058F4                            SS_Finish:
000058F4 31FC 003C F614             		move.w	#60,(v_demolength).w ; set delay time to 1 second
000058FA 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00005900 4278 F794                  		clr.w	(v_palchgspeed).w
00005904                            
00005904                            	SS_FinLoop:
00005904 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
0000590A 6100 E264                  		bsr.w	WaitForVBla
0000590E 6100 F832                  		bsr.w	MoveSonicInDemo
00005912 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
00005918 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000591E 4EB9 0000 0000             		jsr	(BuildSprites).l
00005924 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
0000592A 6100 0000                  		bsr.w	SS_BGAnimate
0000592E 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00005932 6A00                       		bpl.s	loc_47D4
00005934 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
0000593A 6100 CA40                  		bsr.w	WhiteOut_ToWhite
0000593E                            
0000593E                            loc_47D4:
0000593E 4A78 F614                  		tst.w	(v_demolength).w
00005942 66C0                       		bne.s	SS_FinLoop
00005944                            
00005944 46FC 2700                  		disable_ints
00005948 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
0000594E 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00005952 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00005956 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
0000595A 6100 B874                  		bsr.w	ClearScreen
00005968 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000596E 6100 B9DE                  		bsr.w	NemDec
00005972 4EB9 0000 0000             		jsr	(Hud_Base).l
00005978 31FC C800 C8FC             		ResetDMAQueue	
0000597E 46FC 2300                  		enable_ints
00005982 7011                       		moveq	#palid_SSResult,d0
00005984 6100 CB92                  		bsr.w	PalLoad2	; load results screen palette
00005988 7000                       		moveq	#plcid_Main,d0
0000598A 6100 BDE0                  		bsr.w	NewPLC
0000598E 7000                       		moveq	#plcid_SSResult,d0
00005990 6100 BDA8                  		bsr.w	AddPLC		; load results screen patterns
00005994 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
0000599A 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; update ring bonus counter
000059A0 3038 FE20                  		move.w	(v_rings).w,d0
000059A4 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
000059A8 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set rings bonus
000059B6                            
000059B6 43F8 D000                  		lea	(v_objspace).w,a1
000059BA 7000                       		moveq	#0,d0
000059BC 323C 07FF                  		move.w	#$7FF,d1
000059C0                            	SS_EndClrObjRam:
000059C0 22C0                       		move.l	d0,(a1)+
000059C2 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
000059C6                            
000059C6 11FC 0000 D5C0             		move.b	#id_SSResult,(v_objspace+$5C0).w ; load results screen object
000059CC                            
000059CC                            SS_NormalExit:
000059CC 6100 B8DE                  		bsr.w	PauseGame
000059D0 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
000059D6 6100 E198                  		bsr.w	WaitForVBla
000059DA 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000059E0 4EB9 0000 0000             		jsr	(BuildSprites).l
000059E6 6100 BDBE                  		bsr.w	RunPLC
000059EA 4A78 FE02                  		tst.w	(f_restart).w
000059EE 67DC                       		beq.s	SS_NormalExit
000059F0 4AB8 F680                  		tst.l	(v_plc_buffer).w
000059F4 66D6                       		bne.s	SS_NormalExit
000059FE 6100 C95C                  		bsr.w	PaletteWhiteOut
00005A02 4E75                       		rts	
00005A04                            ; ===========================================================================
00005A04                            
00005A04                            SS_ToSegaScreen:
00005A04 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00005A0A 4E75                       		rts
00005A0C                            
00005A0C 0C38 0000 F600             SS_ToLevel:	cmpi.b	#id_Level,(v_gamemode).w
00005A12 67F0                       		beq.s	SS_ToSegaScreen
00005A14 4E75                       		rts
00005A16                            
00005A16                            ; ---------------------------------------------------------------------------
00005A16                            ; Special stage	background loading subroutine
00005A16                            ; ---------------------------------------------------------------------------
00005A16                            
00005A16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005A16                            
00005A16                            
00005A16                            SS_BGLoad:
00005A16 43F9 00FF 0000             		lea	($FF0000).l,a1
00005A1C 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00005A22 303C 4051                  		move.w	#$4051,d0
00005A26 6100 BEB0                  		bsr.w	EniDec
00005A2A 263C 5000 0001             		move.l	#$50000001,d3
00005A30 45F9 00FF 0080             		lea	($FF0080).l,a2
00005A36 7E06                       		moveq	#6,d7
00005A38                            
00005A38                            loc_48BE:
00005A38 2003                       		move.l	d3,d0
00005A3A 7C03                       		moveq	#3,d6
00005A3C 7800                       		moveq	#0,d4
00005A3E 0C47 0003                  		cmpi.w	#3,d7
00005A42 6400                       		bhs.s	loc_48CC
00005A44 7801                       		moveq	#1,d4
00005A46                            
00005A46                            loc_48CC:
00005A46 7A07                       		moveq	#7,d5
00005A48                            
00005A48                            loc_48CE:
00005A48 224A                       		movea.l	a2,a1
00005A4A 0A04 0001                  		eori.b	#1,d4
00005A4E 6600                       		bne.s	loc_48E2
00005A50 0C47 0006                  		cmpi.w	#6,d7
00005A54 6600                       		bne.s	loc_48F2
00005A56 43F9 00FF 0000             		lea	($FF0000).l,a1
00005A5C                            
00005A5C                            loc_48E2:
00005A5C 48E7 F800                  		movem.l	d0-d4,-(sp)
00005A60 7207                       		moveq	#7,d1
00005A62 7407                       		moveq	#7,d2
00005A64 6100 B8BE                  		bsr.w	TilemapToVRAM
00005A68 4CDF 001F                  		movem.l	(sp)+,d0-d4
00005A6C                            
00005A6C                            loc_48F2:
00005A6C 0680 0010 0000             		addi.l	#$100000,d0
00005A72 51CD FFD4                  		dbf	d5,loc_48CE
00005A76 0680 0380 0000             		addi.l	#$3800000,d0
00005A7C 0A04 0001                  		eori.b	#1,d4
00005A80 51CE FFC4                  		dbf	d6,loc_48CC
00005A84 0683 1000 0000             		addi.l	#$10000000,d3
00005A8A 6A00                       		bpl.s	loc_491C
00005A8C 4843                       		swap	d3
00005A8E 0683 0000 C000             		addi.l	#$C000,d3
00005A94 4843                       		swap	d3
00005A96                            
00005A96                            loc_491C:
00005A96 D4FC 0080                  		adda.w	#$80,a2
00005A9A 51CF FF9C                  		dbf	d7,loc_48BE
00005A9E 43F9 00FF 0000             		lea	($FF0000).l,a1
00005AA4 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00005AAA 303C 4000                  		move.w	#$4000,d0
00005AAE 6100 BE28                  		bsr.w	EniDec
00005AB2 43F9 00FF 0000             		lea	($FF0000).l,a1
00005AB8 203C 4000 0003             		move.l	#$40000003,d0
00005ABE 723F                       		moveq	#$3F,d1
00005AC0 741F                       		moveq	#$1F,d2
00005AC2 6100 B860                  		bsr.w	TilemapToVRAM
00005AC6 43F9 00FF 0000             		lea	($FF0000).l,a1
00005ACC 203C 5000 0003             		move.l	#$50000003,d0
00005AD2 723F                       		moveq	#$3F,d1
00005AD4 743F                       		moveq	#$3F,d2
00005AD6 6100 B84C                  		bsr.w	TilemapToVRAM
00005ADA 4E75                       		rts	
00005ADC                            ; End of function SS_BGLoad
00005ADC                            
00005ADC                            ; ---------------------------------------------------------------------------
00005ADC                            ; Palette cycling routine - special stage
00005ADC                            ; ---------------------------------------------------------------------------
00005ADC                            
00005ADC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005ADC                            
00005ADC                            
00005ADC                            PalCycle_SS:
00005ADC 4A78 F63A                  		tst.w	(f_pause).w
00005AE0 6600                       		bne.s	locret_49E6
00005AE2 5378 F79C                  		subq.w	#1,(v_palss_time).w
00005AE6 6A00                       		bpl.s	locret_49E6
00005AE8 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005AEE 3038 F79A                  		move.w	(v_palss_num).w,d0
00005AF2 5278 F79A                  		addq.w	#1,(v_palss_num).w
00005AF6 0240 001F                  		andi.w	#$1F,d0
00005AFA E548                       		lsl.w	#2,d0
00005AFC 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00005B02 D0C0                       		adda.w	d0,a0
00005B04 1018                       		move.b	(a0)+,d0
00005B06 6A00                       		bpl.s	loc_4992
00005B08 303C 01FF                  		move.w	#$1FF,d0
00005B0C                            
00005B0C                            loc_4992:
00005B0C 31C0 F79C                  		move.w	d0,(v_palss_time).w
00005B10 7000                       		moveq	#0,d0
00005B12 1018                       		move.b	(a0)+,d0
00005B14 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00005B18 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00005B1E 43F1 0000                  		lea	(a1,d0.w),a1
00005B22 303C 8200                  		move.w	#-$7E00,d0
00005B26 1019                       		move.b	(a1)+,d0
00005B28 3C80                       		move.w	d0,(a6)
00005B2A 11D1 F616                  		move.b	(a1),(v_scrposy_dup).w
00005B2E 303C 8400                  		move.w	#-$7C00,d0
00005B32 1018                       		move.b	(a0)+,d0
00005B34 3C80                       		move.w	d0,(a6)
00005B36 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00005B40 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l
00005B48 7000                       		moveq	#0,d0
00005B4A 1018                       		move.b	(a0)+,d0
00005B4C 6B00                       		bmi.s	loc_49E8
00005B4E 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00005B54 D2C0                       		adda.w	d0,a1
00005B56 45F8 FB4E                  		lea	(v_pal_dry+$4E).w,a2
00005B5A 24D9                       		move.l	(a1)+,(a2)+
00005B5C 24D9                       		move.l	(a1)+,(a2)+
00005B5E 24D9                       		move.l	(a1)+,(a2)+
00005B60                            
00005B60                            locret_49E6:
00005B60 4E75                       		rts	
00005B62                            ; ===========================================================================
00005B62                            
00005B62                            loc_49E8:
00005B62 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005B66 0C40 008A                  		cmpi.w	#$8A,d0
00005B6A 6500                       		blo.s	loc_49F4
00005B6C 5241                       		addq.w	#1,d1
00005B6E                            
00005B6E                            loc_49F4:
00005B6E C2FC 002A                  		mulu.w	#$2A,d1
00005B72 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00005B78 D2C1                       		adda.w	d1,a1
00005B7A 0240 007F                  		andi.w	#$7F,d0
00005B7E 0880 0000                  		bclr	#0,d0
00005B82 6700                       		beq.s	loc_4A18
00005B84 45F8 FB6E                  		lea	(v_pal_dry+$6E).w,a2
00005B88 24D1                       		move.l	(a1),(a2)+
00005B8A 24E9 0004                  		move.l	4(a1),(a2)+
00005B8E 24E9 0008                  		move.l	8(a1),(a2)+
00005B92                            
00005B92                            loc_4A18:
00005B92 D2FC 000C                  		adda.w	#$C,a1
00005B96 45F8 FB5A                  		lea	(v_pal_dry+$5A).w,a2
00005B9A 0C40 000A                  		cmpi.w	#$A,d0
00005B9E 6500                       		blo.s	loc_4A2E
00005BA0 0440 000A                  		subi.w	#$A,d0
00005BA4 45F8 FB7A                  		lea	(v_pal_dry+$7A).w,a2
00005BA8                            
00005BA8                            loc_4A2E:
00005BA8 3200                       		move.w	d0,d1
00005BAA D040                       		add.w	d0,d0
00005BAC D041                       		add.w	d1,d0
00005BAE D2C0                       		adda.w	d0,a1
00005BB0 24D9                       		move.l	(a1)+,(a2)+
00005BB2 34D9                       		move.w	(a1)+,(a2)+
00005BB4 4E75                       		rts	
00005BB6                            ; End of function PalCycle_SS
00005BB6                            
00005BB6                            ; ===========================================================================
00005BB6 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005BC6                            
00005BC6 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00005BD6 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00005BE6 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00005BF6 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00005C06 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00005C16 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00005C26 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005C36                            		even
00005C36 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005C44                            		even
00005C44                            
00005C44                            Pal_SSCyc1:	incbin	"palette\Cycle - Special Stage 1.bin"
00005C8C                            		even
00005C8C                            Pal_SSCyc2:	incbin	"palette\Cycle - Special Stage 2.bin"
00005D5E                            		even
00005D5E                            
00005D5E                            ; ---------------------------------------------------------------------------
00005D5E                            ; Subroutine to	make the special stage background animated
00005D5E                            ; ---------------------------------------------------------------------------
00005D5E                            
00005D5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005D5E                            
00005D5E                            
00005D5E                            SS_BGAnimate:
00005D5E 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005D62 6600                       		bne.s	loc_4BF6
00005D64 31FC 0000 F70C             		move.w	#0,(v_bgscreenposy).w
00005D6A 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005D70                            
00005D70                            loc_4BF6:
00005D70 0C40 0008                  		cmpi.w	#8,d0
00005D74 6400                       		bhs.s	loc_4C4E
00005D76 0C40 0006                  		cmpi.w	#6,d0
00005D7A 6600                       		bne.s	loc_4C10
00005D7C 5278 F718                  		addq.w	#1,(v_bg3screenposx).w
00005D80 5278 F70C                  		addq.w	#1,(v_bgscreenposy).w
00005D84 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005D8A                            
00005D8A                            loc_4C10:
00005D8A 7000                       		moveq	#0,d0
00005D8C 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00005D90 4440                       		neg.w	d0
00005D92 4840                       		swap	d0
00005D94 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005D9A 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005D9E 7609                       		moveq	#9,d3
00005DA0                            
00005DA0                            loc_4C26:
00005DA0 302B 0002                  		move.w	2(a3),d0
00005DA4 6100 DDFC                  		bsr.w	CalcSine
00005DA8 7400                       		moveq	#0,d2
00005DAA 1419                       		move.b	(a1)+,d2
00005DAC C1C2                       		muls.w	d2,d0
00005DAE E080                       		asr.l	#8,d0
00005DB0 36C0                       		move.w	d0,(a3)+
00005DB2 1419                       		move.b	(a1)+,d2
00005DB4 4882                       		ext.w	d2
00005DB6 D55B                       		add.w	d2,(a3)+
00005DB8 51CB FFE6                  		dbf	d3,loc_4C26
00005DBC 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005DC0 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005DC6 6000                       		bra.s	loc_4C7E
00005DC8                            ; ===========================================================================
00005DC8                            
00005DC8                            loc_4C4E:
00005DC8 0C40 000C                  		cmpi.w	#$C,d0
00005DCC 6600                       		bne.s	loc_4C74
00005DCE 5378 F718                  		subq.w	#1,(v_bg3screenposx).w
00005DD2 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005DD6 243C 0001 8000             		move.l	#$18000,d2
00005DDC 7206                       		moveq	#6,d1
00005DDE                            
00005DDE                            loc_4C64:
00005DDE 2013                       		move.l	(a3),d0
00005DE0 9082                       		sub.l	d2,d0
00005DE2 26C0                       		move.l	d0,(a3)+
00005DE4 0482 0000 2000             		subi.l	#$2000,d2
00005DEA 51C9 FFF2                  		dbf	d1,loc_4C64
00005DEE                            
00005DEE                            loc_4C74:
00005DEE 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005DF2 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005DF8                            
00005DF8                            loc_4C7E:
00005DF8 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00005DFC 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00005E00 4440                       		neg.w	d0
00005E02 4840                       		swap	d0
00005E04 7600                       		moveq	#0,d3
00005E06 161A                       		move.b	(a2)+,d3
00005E08 3438 F70C                  		move.w	(v_bgscreenposy).w,d2
00005E0C 4442                       		neg.w	d2
00005E0E 0242 00FF                  		andi.w	#$FF,d2
00005E12 E54A                       		lsl.w	#2,d2
00005E14                            
00005E14                            loc_4C9A:
00005E14 301B                       		move.w	(a3)+,d0
00005E16 544B                       		addq.w	#2,a3
00005E18 7200                       		moveq	#0,d1
00005E1A 121A                       		move.b	(a2)+,d1
00005E1C 5341                       		subq.w	#1,d1
00005E1E                            
00005E1E                            loc_4CA4:
00005E1E 2380 2000                  		move.l	d0,(a1,d2.w)
00005E22 5842                       		addq.w	#4,d2
00005E24 0242 03FC                  		andi.w	#$3FC,d2
00005E28 51C9 FFF4                  		dbf	d1,loc_4CA4
00005E2C 51CB FFE6                  		dbf	d3,loc_4C9A
00005E30 4E75                       		rts	
00005E32                            ; End of function SS_BGAnimate
00005E32                            
00005E32                            ; ===========================================================================
00005E32 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005E3E                            		even
00005E3E 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005E46                            		even
00005E46 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005E5A                            		even
00005E5A                            
00005E5A                            ; ===========================================================================
00005E5A                            
00005E5A                            ; ---------------------------------------------------------------------------
00005E5A                            ; Continue screen
00005E5A                            ; ---------------------------------------------------------------------------
00005E5A                            
00005E5A                            GM_Continue:
00005E5A 6100 C3D6                  		bsr.w	PaletteFadeOut
00005E5E 46FC 2700                  		disable_ints
00005E62 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005E66 0200 00BF                  		andi.b	#$BF,d0
00005E6A 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005E70 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005E76 3CBC 8004                  		move.w	#$8004,(a6)	; 8 colour mode
00005E7A 3CBC 8700                  		move.w	#$8700,(a6)	; background colour
00005E7E 6100 B350                  		bsr.w	ClearScreen
00005E82 31FC C800 C8FC             		ResetDMAQueue
00005E88 43F8 D000                  		lea	(v_objspace).w,a1
00005E8C 7000                       		moveq	#0,d0
00005E8E 323C 07FF                  		move.w	#$7FF,d1
00005E92                            	Cont_ClrObjRam:
00005E92 22C0                       		move.l	d0,(a1)+
00005E94 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005E98                            
00005EA2 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005EA8 6100 B4A4                  		bsr.w	NemDec
00005EB6 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005EBC 6100 B490                  		bsr.w	NemDec
00005ECA 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005ED0 6100 B47C                  		bsr.w	NemDec
00005ED4 720A                       		moveq	#10,d1
00005ED6 4EB9 0000 0000             		jsr	(ContScrCounter).l	; run countdown	(start from 10)
00005EDC 7012                       		moveq	#palid_Continue,d0
00005EDE 6100 C5FC                  		bsr.w	PalLoad1	; load continue	screen palette
00005EEA 31FC 0293 F614             		move.w	#659,(v_demolength).w ; set time delay to 11 seconds
00005EF0 42B8 F700                  		clr.l	(v_screenposx).w
00005EF4 21FC 0100 0000 F704        		move.l	#$1000000,(v_screenposy).w
00005EFC 11FC 0000 D000             		move.b	#id_ContSonic,(v_player).w ; load Sonic object
00005F02 11FC 0000 D040             		move.b	#id_ContScrItem,(v_objspace+$40).w ; load continue screen objects
00005F08 11FC 0000 D080             		move.b	#id_ContScrItem,(v_objspace+$80).w
00005F0E 11FC 0003 D098             		move.b	#3,(v_objspace+$80+obPriority).w
00005F14 11FC 0004 D09A             		move.b	#4,(v_objspace+$80+obFrame).w
00005F1A 11FC 0000 D0C0             		move.b	#id_ContScrItem,(v_objspace+$C0).w
00005F20 11FC 0004 D0E4             		move.b	#4,(v_objspace+$C0+obRoutine).w
00005F26 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005F2C 4EB9 0000 0000             		jsr	(BuildSprites).l
00005F32 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005F36 0000 0040                  		ori.b	#$40,d0
00005F3A 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005F40 6100 C24A                  		bsr.w	PaletteFadeIn
00005F44                            
00005F44                            ; ---------------------------------------------------------------------------
00005F44                            ; Continue screen main loop
00005F44                            ; ---------------------------------------------------------------------------
00005F44                            
00005F44                            Cont_MainLoop:
00005F44 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005F4A 6100 DC24                  		bsr.w	WaitForVBla
00005F4E 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005F54 6400                       		bhs.s	loc_4DF2
00005F56 46FC 2700                  		disable_ints
00005F5A 3238 F614                  		move.w	(v_demolength).w,d1
00005F5E 82FC 003C                  		divu.w	#$3C,d1
00005F62 0281 0000 000F             		andi.l	#$F,d1
00005F68 4EB9 0000 0000             		jsr	(ContScrCounter).l
00005F6E 46FC 2300                  		enable_ints
00005F72                            
00005F72                            loc_4DF2:
00005F72 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005F78 4EB9 0000 0000             		jsr	(BuildSprites).l
00005F7E 0C78 0180 D008             		cmpi.w	#$180,(v_player+obX).w ; has Sonic run off screen?
00005F84 6400                       		bhs.s	Cont_GotoLevel	; if yes, branch
00005F86 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005F8C 64B6                       		bhs.s	Cont_MainLoop
00005F8E 4A78 F614                  		tst.w	(v_demolength).w
00005F92 6600 FFB0                  		bne.w	Cont_MainLoop
00005F96 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00005F9C 4E75                       		rts	
00005F9E                            ; ===========================================================================
00005F9E                            
00005F9E                            Cont_GotoLevel:
00005F9E 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005FA4 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00005FAA 7000                       		moveq	#0,d0
00005FAC 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00005FB0 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00005FB4 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00005FB8 11C0 FE30                  		move.b	d0,(v_lastlamp).w ; clear lamppost count
00005FBC 5338 FE18                  		subq.b	#1,(v_continues).w ; subtract 1 from continues
00005FC0 4E75                       		rts	
00005FC2                            ; ===========================================================================
00005FC2                            
00005FC2                            		include	"_incObj\80 Continue Screen Elements.asm"
00005FC2                            ; ---------------------------------------------------------------------------
00005FC2                            ; Object 80 - Continue screen elements
00005FC2                            ; ---------------------------------------------------------------------------
00005FC2                            
00005FC2                            ContScrItem:
00005FC2 7000                       		moveq	#0,d0
00005FC4 1028 0024                  		move.b	$24(a0),d0
00005FC8 323B 0000                  		move.w	CSI_Index(pc,d0.w),d1
00005FCC 4EFB 1000                  		jmp	CSI_Index(pc,d1.w)
00005FD0                            ; ===========================================================================
00005FD0 0000                       CSI_Index:	dc.w CSI_Main-CSI_Index
00005FD2 0000                       		dc.w CSI_Display-CSI_Index
00005FD4 0000                       		dc.w CSI_MakeMiniSonic-CSI_Index
00005FD6 0000                       		dc.w CSI_ChkDel-CSI_Index
00005FD8                            ; ===========================================================================
00005FD8                            
00005FD8                            CSI_Main:	; Routine 0
00005FD8 5428 0024                  		addq.b	#2,obRoutine(a0)
00005FDC 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00005FE4 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00005FEA 117C 0000 0001             		move.b	#0,obRender(a0)
00005FF0 117C 003C 0014             		move.b	#$3C,obActWid(a0)
00005FF6 317C 0120 0008             		move.w	#$120,obX(a0)
00005FFC 317C 00C0 000A             		move.w	#$C0,obScreenY(a0)
00006002 31FC 0000 FE20             		move.w	#0,(v_rings).w	; clear rings
00006008                            
00006008                            CSI_Display:	; Routine 2
00006008 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000600E                            ; ===========================================================================
0000600E                            
0000600E                            	CSI_MiniSonicPos:
0000600E 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00006020 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
0000602C                            
0000602C                            CSI_MakeMiniSonic:
0000602C                            		; Routine 4
0000602C 2248                       		movea.l	a0,a1
0000602E 45F9 0000 600E             		lea	(CSI_MiniSonicPos).l,a2
00006034 7200                       		moveq	#0,d1
00006036 1238 FE18                  		move.b	(v_continues).w,d1
0000603A 5501                       		subq.b	#2,d1
0000603C 6400                       		bcc.s	CSI_MoreThan1
0000603E 4EF9 0000 0000             		jmp	(DeleteObject).l	; cancel if you have 0-1 continues
00006044                            
00006044                            	CSI_MoreThan1:
00006044 7601                       		moveq	#1,d3
00006046 0C01 000E                  		cmpi.b	#14,d1		; do you have fewer than 16 continues
0000604A 6500                       		bcs.s	CSI_FewerThan16	; if yes, branch
0000604C                            
0000604C 7600                       		moveq	#0,d3
0000604E 720E                       		moveq	#14,d1		; cap at 15 mini-Sonics
00006050                            
00006050                            	CSI_FewerThan16:
00006050 1401                       		move.b	d1,d2
00006052 0202 0001                  		andi.b	#1,d2
00006056                            
00006056                            CSI_MiniSonicLoop:
00006056 12BC 0000                  		move.b	#id_ContScrItem,0(a1) ; load mini-Sonic object
0000605A 335A 0008                  		move.w	(a2)+,obX(a1)	; use above data for x-axis position
0000605E 4A02                       		tst.b	d2		; do you have an even number of continues?
00006060 6700                       		beq.s	CSI_Even	; if yes, branch
00006062 0469 000A 0008             		subi.w	#$A,obX(a1)	; shift mini-Sonics slightly to the right
00006068                            
00006068                            	CSI_Even:
00006068 337C 00D0 000A             		move.w	#$D0,obScreenY(a1)
0000606E 137C 0006 001A             		move.b	#6,obFrame(a1)
00006074 137C 0006 0024             		move.b	#6,obRoutine(a1)
0000607A 237C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a1)
00006082 337C 8551 0002             		move.w	#$8551,obGfx(a1)
00006088 137C 0000 0001             		move.b	#0,obRender(a1)
0000608E 43E9 0040                  		lea	$40(a1),a1
00006092 51C9 FFC2                  		dbf	d1,CSI_MiniSonicLoop ; repeat for number of continues
00006096                            
00006096 43E9 FFC0                  		lea	-$40(a1),a1
0000609A 1343 0028                  		move.b	d3,obSubtype(a1)
0000609E                            
0000609E                            CSI_ChkDel:	; Routine 6
0000609E 4A28 0028                  		tst.b	obSubtype(a0)	; do you have 16 or more continues?
000060A2 6700                       		beq.s	CSI_Animate	; if yes, branch
000060A4 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic running?
000060AA 6500                       		bcs.s	CSI_Animate	; if not, branch
000060AC 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000060B0 0200 0001                  		andi.b	#1,d0
000060B4 6600                       		bne.s	CSI_Animate
000060B6 4A78 D010                  		tst.w	(v_player+obVelX).w ; is Sonic running?
000060BA 6600                       		bne.s	CSI_Delete	; if yes, goto delete
000060BC 4E75                       		rts	
000060BE                            
000060BE                            CSI_Animate:
000060BE 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000060C2 0200 000F                  		andi.b	#$F,d0
000060C6 6600                       		bne.s	CSI_Display2
000060C8 0868 0000 001A             		bchg	#0,obFrame(a0)
000060CE                            
000060CE                            	CSI_Display2:
000060CE 4EF9 0000 0000             		jmp	(DisplaySprite).l
000060D4                            ; ===========================================================================
000060D4                            
000060D4                            CSI_Delete:
000060D4 4EF9 0000 0000             		jmp	(DeleteObject).l
000060D4 4EF9 0000 0000             		jmp	(DeleteObject).l
000060DA                            		include	"_incObj\81 Continue Screen Sonic.asm"
000060DA                            ; ---------------------------------------------------------------------------
000060DA                            ; Object 81 - Sonic on the continue screen
000060DA                            ; ---------------------------------------------------------------------------
000060DA                            
000060DA                            ContSonic:
000060DA 7000                       		moveq	#0,d0
000060DC 1028 0024                  		move.b	obRoutine(a0),d0
000060E0 323B 0000                  		move.w	CSon_Index(pc,d0.w),d1
000060E4 4EBB 1000                  		jsr	CSon_Index(pc,d1.w)
000060E8 4EF9 0000 0000             		jmp	(DisplaySprite).l
000060EE                            ; ===========================================================================
000060EE 0000                       CSon_Index:	dc.w CSon_Main-CSon_Index
000060F0 0000                       		dc.w CSon_ChkLand-CSon_Index
000060F2 0000                       		dc.w CSon_Animate-CSon_Index
000060F4 0000                       		dc.w CSon_Run-CSon_Index
000060F6                            ; ===========================================================================
000060F6                            
000060F6                            CSon_Main:	; Routine 0
000060F6 5428 0024                  		addq.b	#2,obRoutine(a0)
000060FA 317C 00A0 0008             		move.w	#$A0,obX(a0)
00006100 317C 00C0 000C             		move.w	#$C0,obY(a0)
00006106 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0000610E 317C 0780 0002             		move.w	#$780,obGfx(a0)
00006114 117C 0004 0001             		move.b	#4,obRender(a0)
0000611A 317C 0100 0018             		move.w	#$100,obPriority(a0)
00006120 117C 0000 001C             		move.b	#id_Float3,obAnim(a0) ; use "floating" animation
00006126 317C 0400 0012             		move.w	#$400,obVelY(a0) ; make Sonic fall from above
0000612C                            
0000612C                            CSon_ChkLand:	; Routine 2
0000612C 0C68 01A0 000C             		cmpi.w	#$1A0,obY(a0)	; has Sonic landed yet?
00006132 6600                       		bne.s	CSon_ShowFall	; if not, branch
00006134                            
00006134 5428 0024                  		addq.b	#2,obRoutine(a0)
00006138 4268 0012                  		clr.w	obVelY(a0)	; stop Sonic falling
0000613C 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00006144 317C 8500 0002             		move.w	#$8500,obGfx(a0)
0000614A 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00006150 6000                       		bra.s	CSon_Animate
00006152                            
00006152                            CSon_ShowFall:
00006152 4EB9 0000 0000             		jsr	(SpeedToPos).l
00006158 4EB9 0000 0000             		jsr	(Sonic_Animate).l
0000615E 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00006164                            ; ===========================================================================
00006164                            
00006164                            CSon_Animate:	; Routine 4
00006164 4A38 F605                  		tst.b	(v_jpadpress1).w ; is Start button pressed?
00006168 6B00                       		bmi.s	CSon_GetUp	; if yes, branch
0000616A 43F9 0000 0000             		lea	(AniScript_CSon).l,a1
00006170 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006176                            
00006176                            CSon_GetUp:
00006176 5428 0024                  		addq.b	#2,obRoutine(a0)
0000617A 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00006182 317C 0780 0002             		move.w	#$780,obGfx(a0)
00006188 117C 0000 001C             		move.b	#id_Float4,obAnim(a0) ; use "getting up" animation
0000618E 4268 0020                  		clr.w	obInertia(a0)
00006192 5168 000C                  		subq.w	#8,obY(a0)
0000619E                            
0000619E                            CSon_Run:	; Routine 6
0000619E 0C68 0800 0020             		cmpi.w	#$800,obInertia(a0) ; check Sonic's inertia
000061A4 6600                       		bne.s	CSon_AddInertia	; if too low, branch
000061A6 317C 1000 0010             		move.w	#$1000,obVelX(a0) ; move Sonic to the right
000061AC 6000                       		bra.s	CSon_ShowRun
000061AE                            
000061AE                            CSon_AddInertia:
000061AE 0668 0020 0020             		addi.w	#$20,obInertia(a0) ; increase inertia
000061B4                            
000061B4                            CSon_ShowRun:
000061B4 4EB9 0000 0000             		jsr	(SpeedToPos).l
000061BA 4EB9 0000 0000             		jsr	(Sonic_Animate).l
000061C0 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
000061C0 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
000061C6                            		include	"_anim\Continue Screen Sonic.asm"
000061C6                            ; ---------------------------------------------------------------------------
000061C6                            ; Animation script - Sonic on the continue screen
000061C6                            ; ---------------------------------------------------------------------------
000061C6 0000                       AniScript_CSon:	dc.w A_CSon_1-AniScript_CSon
000061C8 0401 0101 0302 0203 03FF   A_CSon_1:	dc.b 4,	1, 1, 1, 3, 2, 2, 3, 3, afEnd
000061D2                            		even
000061D2                            		even
000061D2                            Map_ContScr:	include	"_maps\Continue Screen.asm"
000061D2                            ; --------------------------------------------------------------------------------
000061D2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000061D2                            ; --------------------------------------------------------------------------------
000061D2                            
000061D2                            SME_phED7:	
000061D2 0000 0000                  		dc.w SME_phED7_10-SME_phED7, SME_phED7_48-SME_phED7	
000061D6 0000 0000                  		dc.w SME_phED7_58-SME_phED7, SME_phED7_68-SME_phED7	
000061DA 0000 0000                  		dc.w SME_phED7_78-SME_phED7, SME_phED7_83-SME_phED7	
000061DE 0000 0000                  		dc.w SME_phED7_89-SME_phED7, SME_phED7_8F-SME_phED7	
000061E2 0B                         SME_phED7_10:	dc.b $B	
000061E3 F805 0088 C4               		dc.b $F8, 5, 0, $88, $C4	
000061E8 F805 00B2 D4               		dc.b $F8, 5, 0, $B2, $D4	
000061ED F805 00AE E4               		dc.b $F8, 5, 0, $AE, $E4	
000061F2 F805 00C2 F4               		dc.b $F8, 5, 0, $C2, $F4	
000061F7 F801 00A0 04               		dc.b $F8, 1, 0, $A0, 4	
000061FC F805 00AE 0C               		dc.b $F8, 5, 0, $AE, $C	
00006201 F805 00C6 1C               		dc.b $F8, 5, 0, $C6, $1C	
00006206 F805 0090 2C               		dc.b $F8, 5, 0, $90, $2C	
0000620B 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8	
00006210 3805 2021 08               		dc.b $38, 5, $20, $21, 8	
00006215 3605 01FC F8               		dc.b $36, 5, 1, $FC, $F8	
0000621A 03                         SME_phED7_48:	dc.b 3	
0000621B 0405 0015 FB               		dc.b 4, 5, 0, $15, $FB	
00006220 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
00006225 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
0000622A 03                         SME_phED7_58:	dc.b 3	
0000622B 0405 0019 FB               		dc.b 4, 5, 0, $19, $FB	
00006230 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
00006235 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
0000623A 03                         SME_phED7_68:	dc.b 3	
0000623B 0405 001D FB               		dc.b 4, 5, 0, $1D, $FB	
00006240 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
00006245 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
0000624A 02                         SME_phED7_78:	dc.b 2	
0000624B 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8	
00006250 6009 2800 00               		dc.b $60, 9, $28, 0, 0	
00006255 01                         SME_phED7_83:	dc.b 1	
00006256 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
0000625B 01                         SME_phED7_89:	dc.b 1	
0000625C 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
00006261 01                         SME_phED7_8F:	dc.b 1	
00006262 0006 0018 00               		dc.b 0, 6, 0, $18, 0	
00006268 00                         		even
00006268 00                         		even
00006268                            
00006268                            ; ===========================================================================
00006268                            ; ---------------------------------------------------------------------------
00006268                            ; Ending sequence in Green Hill	Zone
00006268                            ; ---------------------------------------------------------------------------
00006268                            
00006268                            GM_Ending:
00006270 6100 BFC0                  		bsr.w	PaletteFadeOut
00006274                            
00006274 43F8 D000                  		lea	(v_objspace).w,a1
00006278 7000                       		moveq	#0,d0
0000627A 323C 07FF                  		move.w	#$7FF,d1
0000627E                            	End_ClrObjRam:
0000627E 22C0                       		move.l	d0,(a1)+
00006280 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00006284                            
00006284 43F8 F628                  		lea	($FFFFF628).w,a1
00006288 7000                       		moveq	#0,d0
0000628A 323C 0015                  		move.w	#$15,d1
0000628E                            	End_ClrRam1:
0000628E 22C0                       		move.l	d0,(a1)+
00006290 51C9 FFFC                  		dbf	d1,End_ClrRam1	; clear	variables
00006294                            
00006294 43F8 F700                  		lea	(v_screenposx).w,a1
00006298 7000                       		moveq	#0,d0
0000629A 323C 003F                  		move.w	#$3F,d1
0000629E                            	End_ClrRam2:
0000629E 22C0                       		move.l	d0,(a1)+
000062A0 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
000062A4                            
000062A4 43F8 FE60                  		lea	(v_oscillate+2).w,a1
000062A8 7000                       		moveq	#0,d0
000062AA 323C 0047                  		move.w	#$47,d1
000062AE                            	End_ClrRam3:
000062AE 22C0                       		move.l	d0,(a1)+
000062B0 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
000062B4                            
000062B4 46FC 2700                  		disable_ints
000062B8 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000062BC 0200 00BF                  		andi.b	#$BF,d0
000062C0 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000062C6 6100 AF08                  		bsr.w	ClearScreen
000062CA 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000062D0 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000062D4 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000062D8 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000062DC 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
000062E0 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
000062E4 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
000062E8 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
000062EC 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
000062F2 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
000062F6 31FC 001E FE14             		move.w	#30,(v_air).w
000062FC 31FC 0600 FE10             		move.w	#id_EndZ<<8,(v_zone).w ; set level number to 0600 (extra flowers)
00006302 0C38 0000 FE57             		cmpi.b	#0,(v_emeralds).w ; do you have all 6 emeralds?
00006308 6700                       		beq.s	End_LoadData	; if yes, branch
0000630A 31FC 0601 FE10             		move.w	#(id_EndZ<<8)+1,(v_zone).w ; set level number to 0601 (no flowers)
00006310                            
00006310                            End_LoadData:
00006310 7000                       		moveq	#plcid_Ending,d0
00006312 6100 B592                  		bsr.w	QuickPLC	; load ending sequence patterns
00006316 4EB9 0000 0000             		jsr	(Hud_Base).l
0000631C 6100 0000                  		bsr.w	LevelSizeLoad
00006320 6100 0000                  		bsr.w	DeformLayers
00006324 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
0000632A 6100 0000                  		bsr.w	LevelDataLoad
0000632E 6100 0000                  		bsr.w	LoadTilesFromStart
00006332 21FC 0000 0000 F796        		move.l	#Col_GHZ,(v_collindex).w ; load collision index
0000633A 46FC 2300                  		enable_ints
0000633E 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00006344 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00006348 6100 B70C                  		bsr.w	KosDec
0000634C 4EB9 0000 0000             		jsr		LoadPlayerPal
00006352 6100 C188                  		bsr.w	PalLoad1	; load Sonic's palette
0000635E 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
00006364 6700                       		beq.s	End_LoadSonic	; if not, branch
00006366 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
0000636C                            
0000636C                            End_LoadSonic:
0000636C 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00006372 08F8 0000 D022             		bset	#0,(v_player+obStatus).w ; make Sonic face left
00006378 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0000637E 31FC 0400 F602             		move.w	#(btnL<<8),(v_jpadhold2).w ; move Sonic to the left
00006384 31FC F600 D020             		move.w	#$F600,(v_player+obInertia).w ; set Sonic's speed
0000638A 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
00006390 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006396 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000639C 4EB9 0000 0000             		jsr	(BuildSprites).l
000063A2 7000                       		moveq	#0,d0
000063A4 31C0 FE20                  		move.w	d0,(v_rings).w
000063A8 21C0 FE22                  		move.l	d0,(v_time).w
000063AC 11C0 FE1B                  		move.b	d0,(v_lifecount).w
000063B0 11C0 FE2C                  		move.b	d0,(v_shield).w
000063B4 11C0 FE2D                  		move.b	d0,(v_invinc).w
000063B8 11C0 FE2E                  		move.b	d0,(v_shoes).w
000063BC 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
000063C0 31C0 FE08                  		move.w	d0,(v_debuguse).w
000063C4 31C0 FE02                  		move.w	d0,(f_restart).w
000063C8 31C0 FE04                  		move.w	d0,(v_framecount).w
000063CC 6100 EEBC                  		bsr.w	OscillateNumInit
000063D0 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w
000063D6 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w
000063DC 11FC 0000 FE1E             		move.b	#0,(f_timecount).w
000063E2 31FC 0708 F614             		move.w	#1800,(v_demolength).w
000063E8 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
000063EE 6100 D780                  		bsr.w	WaitForVBla
000063F2 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000063F6 0000 0040                  		ori.b	#$40,d0
000063FA 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00006400 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00006406 6100 BD84                  		bsr.w	PaletteFadeIn
0000640A                            
0000640A                            ; ---------------------------------------------------------------------------
0000640A                            ; Main ending sequence loop
0000640A                            ; ---------------------------------------------------------------------------
0000640A                            
0000640A                            End_MainLoop:
0000640A 6100 AEA0                  		bsr.w	PauseGame
0000640E 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006414 6100 D75A                  		bsr.w	WaitForVBla
00006418 5278 FE04                  		addq.w	#1,(v_framecount).w
0000641C 6100 0000                  		bsr.w	End_MoveSonic
00006420 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006426 6100 0000                  		bsr.w	DeformLayers
0000642A 4EB9 0000 0000             		jsr	(BuildSprites).l
00006430 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006436 6100 B8E6                  		bsr.w	PaletteCycle
0000643A 6100 EEA4                  		bsr.w	OscillateNumDo
0000643E 6100 EF30                  		bsr.w	SynchroAnimate
00006442 0C38 0000 F600             		cmpi.b	#id_Ending,(v_gamemode).w ; is game mode $18 (ending)?
00006448 6700                       		beq.s	End_ChkEmerald	; if yes, branch
0000644A                            
0000644A 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; goto credits
00006450 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w ; set credits index number to 0
00006456 4E75                       		rts	
00006458                            ; ===========================================================================
00006458                            
00006458                            End_ChkEmerald:
00006458 4A78 FE02                  		tst.w	(f_restart).w	; has Sonic released the emeralds?
0000645C 6700 FFAC                  		beq.w	End_MainLoop	; if not, branch
00006460                            
00006460 4278 FE02                  		clr.w	(f_restart).w
00006464 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
0000646A 4278 F794                  		clr.w	(v_palchgspeed).w
0000646E                            
0000646E                            	End_AllEmlds:
0000646E 6100 AE3C                  		bsr.w	PauseGame
00006472 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006478 6100 D6F6                  		bsr.w	WaitForVBla
0000647C 5278 FE04                  		addq.w	#1,(v_framecount).w
00006480 6100 0000                  		bsr.w	End_MoveSonic
00006484 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000648A 6100 0000                  		bsr.w	DeformLayers
0000648E 4EB9 0000 0000             		jsr	(BuildSprites).l
00006494 4EB9 0000 0000             		jsr	(ObjPosLoad).l
0000649A 6100 EE44                  		bsr.w	OscillateNumDo
0000649E 6100 EED0                  		bsr.w	SynchroAnimate
000064A2 5378 F794                  		subq.w	#1,(v_palchgspeed).w
000064A6 6A00                       		bpl.s	End_SlowFade
000064A8 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
000064AE 6100 BECC                  		bsr.w	WhiteOut_ToWhite
000064B2                            
000064B2                            	End_SlowFade:
000064B2 4A78 FE02                  		tst.w	(f_restart).w
000064B6 6700 FFB6                  		beq.w	End_AllEmlds
000064BA 4278 FE02                  		clr.w	(f_restart).w
000064BE 31FC 2829 A480             		move.w	#$2829,(v_lvllayout+$80).w ; modify level layout
000064C4 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000064CA 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000064D0 47F8 F700                  		lea	(v_screenposx).w,a3
000064D4 49F8 A400                  		lea	(v_lvllayout).w,a4
000064D8 343C 4000                  		move.w	#$4000,d2
000064DC 6100 0000                  		bsr.w	DrawChunks
000064E0 7015                       		moveq	#palid_Ending,d0
000064E2 6100 BFF8                  		bsr.w	PalLoad1	; load ending palette
000064E6 6100 BDC8                  		bsr.w	PaletteWhiteIn
000064EA 6000 FF1E                  		bra.w	End_MainLoop
000064EE                            
000064EE                            ; ---------------------------------------------------------------------------
000064EE                            ; Subroutine controlling Sonic on the ending sequence
000064EE                            ; ---------------------------------------------------------------------------
000064EE                            
000064EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000064EE                            
000064EE                            
000064EE                            End_MoveSonic:
000064EE 1038 F7D7                  		move.b	(v_sonicend).w,d0
000064F2 6600                       		bne.s	End_MoveSon2
000064F4 0C78 0090 D008             		cmpi.w	#$90,(v_player+obX).w ; has Sonic passed $90 on x-axis?
000064FA 6400                       		bhs.s	End_MoveSonExit	; if not, branch
000064FC                            
000064FC 5438 F7D7                  		addq.b	#2,(v_sonicend).w
00006500 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock player's controls
00006506 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; move Sonic to the right
0000650C 4E75                       		rts	
0000650E                            ; ===========================================================================
0000650E                            
0000650E                            End_MoveSon2:
0000650E 5500                       		subq.b	#2,d0
00006510 6600                       		bne.s	End_MoveSon3
00006512 0C78 00A0 D008             		cmpi.w	#$A0,(v_player+obX).w ; has Sonic passed $A0 on x-axis?
00006518 6500                       		blo.s	End_MoveSonExit	; if not, branch
0000651A                            
0000651A 5438 F7D7                  		addq.b	#2,(v_sonicend).w
0000651E 7000                       		moveq	#0,d0
00006520 11C0 F7CC                  		move.b	d0,(f_lockctrl).w
00006524 31C0 F602                  		move.w	d0,(v_jpadhold2).w ; stop Sonic moving
00006528 31C0 D020                  		move.w	d0,(v_player+obInertia).w
0000652C 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls & position
00006532 11FC 0003 D01A             		move.b	#3,(v_player+obFrame).w
00006538 31FC 0000 D01C             		move.w	#(id_Wait<<8)+id_Wait,(v_player+obAnim).w ; use "standing" animation
0000653E 11FC 0003 D01E             		move.b	#3,(v_player+obTimeFrame).w
00006544 4E75                       		rts	
00006546                            ; ===========================================================================
00006546                            
00006546                            End_MoveSon3:
00006546 5500                       		subq.b	#2,d0
00006548 6600                       		bne.s	End_MoveSonExit
0000654A 5438 F7D7                  		addq.b	#2,(v_sonicend).w
0000654E 31FC 00A0 D008             		move.w	#$A0,(v_player+obX).w
00006554 11FC 0000 D000             		move.b	#id_EndSonic,(v_player).w ; load Sonic ending sequence object
0000655A 4278 D024                  		clr.w	(v_player+obRoutine).w
0000655E                            
0000655E                            End_MoveSonExit:
0000655E 4E75                       		rts	
00006560                            ; End of function End_MoveSonic
00006560                            
00006560                            ; ===========================================================================
00006560                            
00006560                            		include	"_incObj\87 Ending Sequence Sonic.asm"
00006560                            ; ---------------------------------------------------------------------------
00006560                            ; Object 87 - Sonic on ending sequence
00006560                            ; ---------------------------------------------------------------------------
00006560                            
00006560                            EndSonic:
00006560 7000                       		moveq	#0,d0
00006562 1028 0025                  		move.b	ob2ndRout(a0),d0
00006566 323B 0000                  		move.w	ESon_Index(pc,d0.w),d1
0000656A 4EBB 1000                  		jsr	ESon_Index(pc,d1.w)
0000656E 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006574                            ; ===========================================================================
00006574 0000 0000                  ESon_Index:	dc.w ESon_Main-ESon_Index, ESon_MakeEmeralds-ESon_Index
00006578 0000 0000                  		dc.w Obj87_Animate-ESon_Index,	Obj87_LookUp-ESon_Index
0000657C 0000 0000                  		dc.w Obj87_ClrObjRam-ESon_Index, Obj87_Animate-ESon_Index
00006580 0000 0000                  		dc.w Obj87_MakeLogo-ESon_Index, Obj87_Animate-ESon_Index
00006584 0000 0000                  		dc.w Obj87_Leap-ESon_Index, Obj87_Animate-ESon_Index
00006588                            
00006588 =00000030                  eson_time:	equ $30	; time to wait between events
00006588                            ; ===========================================================================
00006588                            
00006588                            ESon_Main:	; Routine 0
00006588 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
0000658E 6700                       		beq.s	ESon_Main2	; if yes, branch
00006590 0628 0010 0025             		addi.b	#$10,ob2ndRout(a0) ; else, skip emerald sequence
00006596 317C 00D8 0030             		move.w	#216,eson_time(a0)
0000659C 4E75                       		rts	
0000659E                            ; ===========================================================================
0000659E                            
0000659E                            ESon_Main2:
0000659E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000065A2 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
000065AA 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
000065B0 117C 0004 0001             		move.b	#4,obRender(a0)
000065B6 4228 0022                  		clr.b	obStatus(a0)
000065BA 317C 0100 0018             		move.w	#$100,obPriority(a0)
000065C0 117C 0000 001A             		move.b	#0,obFrame(a0)
000065C6 317C 0050 0030             		move.w	#80,eson_time(a0) ; set duration for Sonic to pause
000065CC                            
000065CC                            ESon_MakeEmeralds:
000065CC                            		; Routine 2
000065CC 5368 0030                  		subq.w	#1,eson_time(a0) ; subtract 1 from duration
000065D0 6600                       		bne.s	ESon_Wait
000065D2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000065D6 317C 0001 001C             		move.w	#1,obAnim(a0)
000065DC 11FC 0000 D400             		move.b	#id_EndChaos,(v_objspace+$400).w ; load chaos emeralds objects
000065E2                            
000065E2                            	ESon_Wait:
000065E2 4E75                       		rts	
000065E4                            ; ===========================================================================
000065E4                            
000065E4                            Obj87_LookUp:	; Routine 6
000065E4 0C79 2000 00FF D43C        		cmpi.w	#$2000,((v_objspace&$FFFFFF)+$400+$3C).l
000065EC 6600                       		bne.s	locret_5480
000065EE 31FC 0001 FE02             		move.w	#1,(f_restart).w ; set level to	restart	(causes	flash)
000065F4 317C 005A 0030             		move.w	#90,eson_time(a0)
000065FA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000065FE                            
000065FE                            locret_5480:
000065FE 4E75                       		rts	
00006600                            ; ===========================================================================
00006600                            
00006600                            Obj87_ClrObjRam:
00006600                            		; Routine 8
00006600 5368 0030                  		subq.w	#1,eson_time(a0)
00006604 6600                       		bne.s	ESon_Wait2
00006606 43F8 D400                  		lea	(v_objspace+$400).w,a1
0000660A 323C 00FF                  		move.w	#$FF,d1
0000660E                            
0000660E                            Obj87_ClrLoop:
0000660E 4299                       		clr.l	(a1)+
00006610 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00006614 31FC 0001 FE02             		move.w	#1,(f_restart).w
0000661A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000661E 117C 0001 001C             		move.b	#1,obAnim(a0)
00006624 317C 003C 0030             		move.w	#60,eson_time(a0)
0000662A                            
0000662A                            ESon_Wait2:
0000662A 4E75                       		rts	
0000662C                            ; ===========================================================================
0000662C                            
0000662C                            Obj87_MakeLogo:	; Routine $C
0000662C 5368 0030                  		subq.w	#1,eson_time(a0)
00006630 6600                       		bne.s	ESon_Wait3
00006632 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006636 317C 00B4 0030             		move.w	#180,eson_time(a0)
0000663C 117C 0002 001C             		move.b	#2,obAnim(a0)
00006642 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
00006648                            
00006648                            ESon_Wait3:
00006648 4E75                       		rts	
0000664A                            ; ===========================================================================
0000664A                            
0000664A                            Obj87_Animate:	; Rountine 4, $A, $E, $12
0000664A 43F9 0000 0000             		lea	(AniScript_ESon).l,a1
00006650 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006656                            ; ===========================================================================
00006656                            
00006656                            Obj87_Leap:	; Routine $10
00006656 5368 0030                  		subq.w	#1,eson_time(a0)
0000665A 6600                       		bne.s	ESon_Wait4
0000665C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006660 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00006668 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
0000666E 117C 0004 0001             		move.b	#4,obRender(a0)
00006674 4228 0022                  		clr.b	obStatus(a0)
00006678 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000667E 117C 0005 001A             		move.b	#5,obFrame(a0)
00006684 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "leaping"	animation
0000668A 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
00006690 60B8                       		bra.s	Obj87_Animate
00006692                            ; ===========================================================================
00006692                            
00006692                            ESon_Wait4:
00006692 4E75                       		rts	
00006692 4E75                       		rts	
00006694                            		include "_anim\Ending Sequence Sonic.asm"
00006694                            ; ---------------------------------------------------------------------------
00006694                            ; Animation script - Sonic on the ending sequence
00006694                            ; ---------------------------------------------------------------------------
00006694 0000                       AniScript_ESon:	dc.w byte_551C-AniScript_ESon
00006696 0000                       		dc.w byte_552A-AniScript_ESon
00006698 0000                       		dc.w byte_5534-AniScript_ESon
0000669A 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
000066A8 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
000066B2 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
000066BA                            		even
000066BA                            		even
000066BA                            		include	"_incObj\88 Ending Sequence Emeralds.asm"
000066BA                            ; ---------------------------------------------------------------------------
000066BA                            ; Object 88 - chaos emeralds on	the ending sequence
000066BA                            ; ---------------------------------------------------------------------------
000066BA                            
000066BA                            EndChaos:
000066BA 7000                       		moveq	#0,d0
000066BC 1028 0024                  		move.b	obRoutine(a0),d0
000066C0 323B 0000                  		move.w	ECha_Index(pc,d0.w),d1
000066C4 4EBB 1000                  		jsr	ECha_Index(pc,d1.w)
000066C8 4EF9 0000 0000             		jmp	(DisplaySprite).l
000066CE                            ; ===========================================================================
000066CE 0000                       ECha_Index:	dc.w ECha_Main-ECha_Index
000066D0 0000                       		dc.w ECha_Move-ECha_Index
000066D2                            
000066D2 =00000038                  echa_origX:	equ $38	; x-axis centre of emerald circle (2 bytes)
000066D2 =0000003A                  echa_origY:	equ $3A	; y-axis centre of emerald circle (2 bytes)
000066D2 =0000003C                  echa_radius:	equ $3C	; radius (2 bytes)
000066D2 =0000003E                  echa_angle:	equ $3E	; angle for rotation (2 bytes)
000066D2                            ; ===========================================================================
000066D2                            
000066D2                            ECha_Main:	; Routine 0
000066D2 0C38 0002 D01A             		cmpi.b	#2,(v_player+obFrame).w
000066D8 6700                       		beq.s	ECha_CreateEms
000066DA 588F                       		addq.l	#4,sp
000066DC 4E75                       		rts	
000066DE                            ; ===========================================================================
000066DE                            
000066DE                            ECha_CreateEms:
000066DE 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0) ; match X position with Sonic
000066E4 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0) ; match Y position with Sonic
000066EA 2248                       		movea.l	a0,a1
000066EC 7600                       		moveq	#0,d3
000066EE 7401                       		moveq	#1,d2
000066F0 7205                       		moveq	#5,d1
000066F2                            
000066F2                            	ECha_LoadLoop:
000066F2 12BC 0000                  		move.b	#id_EndChaos,(a1) ; load chaos emerald object
000066F6 5429 0024                  		addq.b	#2,obRoutine(a1)
000066FA 237C 0000 0000 0004        		move.l	#Map_ECha,obMap(a1)
00006702 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
00006708 137C 0004 0001             		move.b	#4,obRender(a1)
0000670E 337C 0080 0018             		move.w	#$80,obPriority(a1)
00006714 3368 0008 0038             		move.w	obX(a0),echa_origX(a1)
0000671A 3368 000C 003A             		move.w	obY(a0),echa_origY(a1)
00006720 1342 001C                  		move.b	d2,obAnim(a1)
00006724 1342 001A                  		move.b	d2,obFrame(a1)
00006728 5202                       		addq.b	#1,d2
0000672A 1343 0026                  		move.b	d3,obAngle(a1)
0000672E 0603 002A                  		addi.b	#$100/6,d3	; angle between each emerald
00006732 43E9 0040                  		lea	$40(a1),a1
00006736 51C9 FFBA                  		dbf	d1,ECha_LoadLoop ; repeat 5 more times
0000673A                            
0000673A                            ECha_Move:	; Routine 2
0000673A 3028 003E                  		move.w	echa_angle(a0),d0
0000673E D168 0026                  		add.w	d0,obAngle(a0)
00006742 1028 0026                  		move.b	obAngle(a0),d0
00006746 4EB9 0000 3BA2             		jsr	(CalcSine).l
0000674C 7800                       		moveq	#0,d4
0000674E 1828 003C                  		move.b	echa_radius(a0),d4
00006752 C3C4                       		muls.w	d4,d1
00006754 E081                       		asr.l	#8,d1
00006756 C1C4                       		muls.w	d4,d0
00006758 E080                       		asr.l	#8,d0
0000675A D268 0038                  		add.w	echa_origX(a0),d1
0000675E D068 003A                  		add.w	echa_origY(a0),d0
00006762 3141 0008                  		move.w	d1,obX(a0)
00006766 3140 000C                  		move.w	d0,obY(a0)
0000676A                            
0000676A                            	ECha_Expand:
0000676A 0C68 2000 003C             		cmpi.w	#$2000,echa_radius(a0)
00006770 6700                       		beq.s	ECha_Rotate
00006772 0668 0020 003C             		addi.w	#$20,echa_radius(a0) ; expand circle of emeralds
00006778                            
00006778                            	ECha_Rotate:
00006778 0C68 2000 003E             		cmpi.w	#$2000,echa_angle(a0)
0000677E 6700                       		beq.s	ECha_Rise
00006780 0668 0020 003E             		addi.w	#$20,echa_angle(a0) ; move emeralds around the centre
00006786                            
00006786                            	ECha_Rise:
00006786 0C68 0140 003A             		cmpi.w	#$140,echa_origY(a0)
0000678C 6700                       		beq.s	ECha_End
0000678E 5368 003A                  		subq.w	#1,echa_origY(a0) ; make circle rise
00006792                            
00006792                            ECha_End:
00006792 4E75                       		rts	
00006792 4E75                       		rts	
00006794                            		include	"_incObj\89 Ending Sequence STH.asm"
00006794                            ; ---------------------------------------------------------------------------
00006794                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00006794                            ; ---------------------------------------------------------------------------
00006794                            
00006794                            EndSTH:
00006794 7000                       		moveq	#0,d0
00006796 1028 0024                  		move.b	$24(a0),d0
0000679A 323B 0000                  		move.w	ESth_Index(pc,d0.w),d1
0000679E 4EBB 1000                  		jsr	ESth_Index(pc,d1.w)
000067A2 4EF9 0000 0000             		jmp	(DisplaySprite).l
000067A8                            ; ===========================================================================
000067A8 0000                       ESth_Index:	dc.w ESth_Main-ESth_Index
000067AA 0000                       		dc.w ESth_Move-ESth_Index
000067AC 0000                       		dc.w ESth_GotoCredits-ESth_Index
000067AE                            
000067AE =00000030                  esth_time:	equ $30		; time until exit
000067AE                            ; ===========================================================================
000067AE                            
000067AE                            ESth_Main:	; Routine 0
000067AE 5428 0024                  		addq.b	#2,obRoutine(a0)
000067B2 317C FFE0 0008             		move.w	#-$20,obX(a0)	; object starts	outside	the level boundary
000067B8 317C 00D8 000A             		move.w	#$D8,obScreenY(a0)
000067BE 217C 0000 0000 0004        		move.l	#Map_ESTH,obMap(a0)
000067C6 317C 05C5 0002             		move.w	#$5C5,obGfx(a0)
000067CC 117C 0000 0001             		move.b	#0,obRender(a0)
000067D2 317C 0000 0018             		move.w	#0,obPriority(a0)
000067D8                            
000067D8                            ESth_Move:	; Routine 2
000067D8 0C68 00C0 0008             		cmpi.w	#$C0,obX(a0)	; has object reached $C0?
000067DE 6700                       		beq.s	ESth_Delay	; if yes, branch
000067E0 0668 0010 0008             		addi.w	#$10,obX(a0)	; move object to the right
000067E6 4E75                       		rts
000067E8                            
000067E8                            ESth_Delay:
000067E8 5428 0024                  		addq.b	#2,obRoutine(a0)
000067EC 317C 012C 0030             		move.w	#300,esth_time(a0) ; set duration for delay (5 seconds)
000067F2                            
000067F2                            ESth_GotoCredits:
000067F2                            		; Routine 4
000067F2 5368 0030                  		subq.w	#1,esth_time(a0) ; subtract 1 from duration
000067F6 6A00                       		bpl.s	ESth_Wait
000067F8 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; exit to credits
000067FE                            
000067FE                            	ESth_Wait:
000067FE 4E75                       		rts
00006800                            Map_ESon:	include	"_maps\Ending Sequence Sonic.asm"
00006800                            ; --------------------------------------------------------------------------------
00006800                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00006800                            ; --------------------------------------------------------------------------------
00006800                            
00006800                            SME_6jV7R:	
00006800 0000 0000                  		dc.w SME_6jV7R_10-SME_6jV7R, SME_6jV7R_1B-SME_6jV7R	
00006804 0000 0000                  		dc.w SME_6jV7R_2B-SME_6jV7R, SME_6jV7R_36-SME_6jV7R	
00006808 0000 0000                  		dc.w SME_6jV7R_4B-SME_6jV7R, SME_6jV7R_60-SME_6jV7R	
0000680C 0000 0000                  		dc.w SME_6jV7R_70-SME_6jV7R, SME_6jV7R_94-SME_6jV7R	
00006810 02                         SME_6jV7R_10:	dc.b 2	
00006811 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	
00006816 0C0C 000C F0               		dc.b $C, $C, 0, $C, $F0	
0000681B 03                         SME_6jV7R_1B:	dc.b 3	
0000681C FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0	
00006821 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	
00006826 0C0C 000C F0               		dc.b $C, $C, 0, $C, $F0	
0000682B 02                         SME_6jV7R_2B:	dc.b 2	
0000682C EC09 0018 F8               		dc.b $EC, 9, 0, $18, $F8	
00006831 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0	
00006836 04                         SME_6jV7R_36:	dc.b 4	
00006837 F40B 002A F8               		dc.b $F4, $B, 0, $2A, $F8	
0000683C EC08 0036 F8               		dc.b $EC, 8, 0, $36, $F8	
00006841 E404 0039 00               		dc.b $E4, 4, 0, $39, 0	
00006846 EC02 003B 10               		dc.b $EC, 2, 0, $3B, $10	
0000684B 04                         SME_6jV7R_4B:	dc.b 4	
0000684C F40B 002A F8               		dc.b $F4, $B, 0, $2A, $F8	
00006851 EC08 0036 F8               		dc.b $EC, 8, 0, $36, $F8	
00006856 E404 0039 00               		dc.b $E4, 4, 0, $39, 0	
0000685B EC02 003B 10               		dc.b $EC, 2, 0, $3B, $10	
00006860 03                         SME_6jV7R_60:	dc.b 3	
00006861 EC06 004C F0               		dc.b $EC, 6, 0, $4C, $F0	
00006866 EC06 084C 00               		dc.b $EC, 6, 8, $4C, 0	
0000686B 040D 0052 F0               		dc.b 4, $D, 0, $52, $F0	
00006870 07                         SME_6jV7R_70:	dc.b 7	
00006871 B20C 005A F8               		dc.b $B2, $C, 0, $5A, $F8	
00006876 BA0F 005E F0               		dc.b $BA, $F, 0, $5E, $F0	
0000687B BA05 006E 10               		dc.b $BA, 5, 0, $6E, $10	
00006880 CA02 0072 10               		dc.b $CA, 2, 0, $72, $10	
00006885 DA0C 0075 F0               		dc.b $DA, $C, 0, $75, $F0	
0000688A E208 0079 F8               		dc.b $E2, 8, 0, $79, $F8	
0000688F EA05 007C F8               		dc.b $EA, 5, 0, $7C, $F8	
00006894 18                         SME_6jV7R_94:	dc.b $18	
00006895 800F 0080 F8               		dc.b $80, $F, 0, $80, $F8	
0000689A 900B 0090 E0               		dc.b $90, $B, 0, $90, $E0	
0000689F 900B 009C 18               		dc.b $90, $B, 0, $9C, $18	
000068A4 980B 00A8 30               		dc.b $98, $B, 0, $A8, $30	
000068A9 A00F 00B4 58               		dc.b $A0, $F, 0, $B4, $58	
000068AE 8800 00C4 F0               		dc.b $88, 0, 0, $C4, $F0	
000068B3 8005 00C5 18               		dc.b $80, 5, 0, $C5, $18	
000068B8 A00F 00C9 F8               		dc.b $A0, $F, 0, $C9, $F8	
000068BD B00B 00D9 E0               		dc.b $B0, $B, 0, $D9, $E0	
000068C2 B80F 00E5 38               		dc.b $B8, $F, 0, $E5, $38	
000068C7 A805 00F5 48               		dc.b $A8, 5, 0, $F5, $48	
000068CC C002 00F9 58               		dc.b $C0, 2, 0, $F9, $58	
000068D1 C00F 00FC F8               		dc.b $C0, $F, 0, $FC, $F8	
000068D6 B80F 010C 18               		dc.b $B8, $F, 1, $C, $18	
000068DB B008 011C 18               		dc.b $B0, 8, 1, $1C, $18	
000068E0 D80D 011F 30               		dc.b $D8, $D, 1, $1F, $30	
000068E5 D808 0127 18               		dc.b $D8, 8, 1, $27, $18	
000068EA D80F 012A D8               		dc.b $D8, $F, 1, $2A, $D8	
000068EF E00D 013A F8               		dc.b $E0, $D, 1, $3A, $F8	
000068F4 E000 0142 28               		dc.b $E0, 0, 1, $42, $28	
000068F9 D004 0143 E0               		dc.b $D0, 4, 1, $43, $E0	
000068FE E805 0145 C8               		dc.b $E8, 5, 1, $45, $C8	
00006903 F80C 0149 C8               		dc.b $F8, $C, 1, $49, $C8	
00006908 F006 014D F8               		dc.b $F0, 6, 1, $4D, $F8	
0000690E 00                         		even
0000690E 00                         		even
0000690E                            Map_ECha:	include	"_maps\Ending Sequence Emeralds.asm"
0000690E                            ; --------------------------------------------------------------------------------
0000690E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000690E                            ; --------------------------------------------------------------------------------
0000690E                            
0000690E                            SME_0ZTmS:	
0000690E 0000 0000                  		dc.w SME_0ZTmS_E-SME_0ZTmS, SME_0ZTmS_14-SME_0ZTmS	
00006912 0000 0000                  		dc.w SME_0ZTmS_1A-SME_0ZTmS, SME_0ZTmS_20-SME_0ZTmS	
00006916 0000 0000                  		dc.w SME_0ZTmS_26-SME_0ZTmS, SME_0ZTmS_2C-SME_0ZTmS	
0000691A 0000                       		dc.w SME_0ZTmS_32-SME_0ZTmS	
0000691C 01                         SME_0ZTmS_E:	dc.b 1	
0000691D F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
00006922 01                         SME_0ZTmS_14:	dc.b 1	
00006923 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
00006928 01                         SME_0ZTmS_1A:	dc.b 1	
00006929 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
0000692E 01                         SME_0ZTmS_20:	dc.b 1	
0000692F F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8	
00006934 01                         SME_0ZTmS_26:	dc.b 1	
00006935 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8	
0000693A 01                         SME_0ZTmS_2C:	dc.b 1	
0000693B F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
00006940 01                         SME_0ZTmS_32:	dc.b 1	
00006941 F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
00006946                            		even
00006946                            		even
00006946                            Map_ESth:	include	"_maps\Ending Sequence STH.asm"
00006946                            ; --------------------------------------------------------------------------------
00006946                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00006946                            ; --------------------------------------------------------------------------------
00006946                            
00006946                            SME_WuUDZ:	
00006946 0000                       		dc.w SME_WuUDZ_2-SME_WuUDZ	
00006948 03                         SME_WuUDZ_2:	dc.b 3	
00006949 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0	
0000694E F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0	
00006953 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10	
00006958                            		even
00006958                            		even
00006958                            
00006958                            ; ===========================================================================
00006958                            ; ---------------------------------------------------------------------------
00006958                            ; Credits ending sequence
00006958                            ; ---------------------------------------------------------------------------
00006958                            
00006958                            GM_Credits:
00006958                            		
00006958 6100 AE3E                  		bsr.w	ClearPLC
0000695C 6100 B8D4                  		bsr.w	PaletteFadeOut
00006960 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00006966 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
0000696A 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
0000696E 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00006972 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00006976 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
0000697A 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
0000697E 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (line 3; colour 0)
00006982 4238 F64E                  		clr.b	(f_wtr_state).w
00006986 6100 A848                  		bsr.w	ClearScreen
0000698A                            
0000698A 43F8 D000                  		lea	(v_objspace).w,a1
0000698E 7000                       		moveq	#0,d0
00006990 323C 07FF                  		move.w	#$7FF,d1
00006994                            	TryAg_ClrObjRam:
00006994 22C0                       		move.l	d0,(a1)+
00006996 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
0000699A                            
0000699A 7000                       		moveq	#plcid_TryAgain,d0
0000699C 6100 AF08                  		bsr.w	QuickPLC	; load "TRY AGAIN" or "END" patterns
000069A0                            
000069A0 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
000069A4 7000                       		moveq	#0,d0
000069A6 323C 001F                  		move.w	#$1F,d1
000069AA                            	TryAg_ClrPal:
000069AA 22C0                       		move.l	d0,(a1)+
000069AC 51C9 FFFC                  		dbf	d1,TryAg_ClrPal ; fill palette with black
000069B0                            
000069B0 7015                       		moveq	#palid_Ending,d0
000069B2 6100 BB28                  		bsr.w	PalLoad1	; load ending palette
000069B6 4278 FBC0                  		clr.w	(v_pal_dry_dup+$40).w
000069BA 11FC 0000 D080             		move.b	#id_EndEggman,(v_objspace+$80).w ; load Eggman object
000069C0 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000069C6 4EB9 0000 0000             		jsr	(BuildSprites).l
000069CC 31FC 0B40 F614             		move.w	#2880,(v_demolength).w ; show screen for 48 seconds
000069D2 6100 B7B8                  		bsr.w	PaletteFadeIn
000069D6                            
000069D6                            ; ---------------------------------------------------------------------------
000069D6                            ; "TRY AGAIN" and "END"	screen main loop
000069D6                            ; ---------------------------------------------------------------------------
000069D6                            TryAg_MainLoop:
000069D6 6100 A8D4                  		bsr.w	PauseGame
000069DA 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000069E0 6100 D18E                  		bsr.w	WaitForVBla
000069E4 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000069EA 4EB9 0000 0000             		jsr	(BuildSprites).l
000069F0 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
000069F6 6600                       		bne.s	TryAg_Exit	; if yes, branch
000069F8 4A78 F614                  		tst.w	(v_demolength).w ; has 30 seconds elapsed?
000069FC 6700                       		beq.s	TryAg_Exit	; if yes, branch
000069FE 0C38 0000 F600             		cmpi.b	#id_Credits,(v_gamemode).w
00006A04 67D0                       		beq.s	TryAg_MainLoop
00006A06                            
00006A06                            TryAg_Exit:
00006A06 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00006A0C 4E75                       		rts	
00006A0E                            
00006A0E                            ; ===========================================================================
00006A0E                            
00006A0E                            		include	"_incObj\8B Try Again & End Eggman.asm"
00006A0E                            ; ---------------------------------------------------------------------------
00006A0E                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006A0E                            ; ---------------------------------------------------------------------------
00006A0E                            
00006A0E                            EndEggman:
00006A0E 7000                       		moveq	#0,d0
00006A10 1028 0024                  		move.b	obRoutine(a0),d0
00006A14 323B 0000                  		move.w	EEgg_Index(pc,d0.w),d1
00006A18 4EBB 1000                  		jsr	EEgg_Index(pc,d1.w)
00006A1C 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006A22                            ; ===========================================================================
00006A22 0000                       EEgg_Index:	dc.w EEgg_Main-EEgg_Index
00006A24 0000                       		dc.w EEgg_Animate-EEgg_Index
00006A26 0000                       		dc.w EEgg_Juggle-EEgg_Index
00006A28 0000                       		dc.w EEgg_Wait-EEgg_Index
00006A2A                            
00006A2A =00000030                  eegg_time:	equ $30		; time between juggle motions
00006A2A                            ; ===========================================================================
00006A2A                            
00006A2A                            EEgg_Main:	; Routine 0
00006A2A 5428 0024                  		addq.b	#2,obRoutine(a0)
00006A2E 317C 0120 0008             		move.w	#$120,obX(a0)
00006A34 317C 00F4 000A             		move.w	#$F4,obScreenY(a0)
00006A3A 217C 0000 0000 0004        		move.l	#Map_EEgg,obMap(a0)
00006A42 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
00006A48 117C 0000 0001             		move.b	#0,obRender(a0)
00006A4E 317C 0100 0018             		move.w	#$100,obPriority(a0)
00006A54 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "END" animation
00006A5A 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
00006A60 6700                       		beq.s	EEgg_Animate	; if yes, branch
00006A62                            
00006A62 11FC 0000 D0C0             		move.b	#id_CreditsText,(v_objspace+$C0).w ; load credits object
00006A68 31FC 0009 FFF4             		move.w	#9,(v_creditsnum).w ; use "TRY AGAIN" text
00006A6E 11FC 0000 D800             		move.b	#id_TryChaos,(v_objspace+$800).w ; load emeralds object on "TRY AGAIN" screen
00006A74 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "TRY AGAIN" animation
00006A7A                            
00006A7A                            EEgg_Animate:	; Routine 2
00006A7A 43F9 0000 0000             		lea	(Ani_EEgg).l,a1
00006A80 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006A86                            ; ===========================================================================
00006A86                            
00006A86                            EEgg_Juggle:	; Routine 4
00006A86 5428 0024                  		addq.b	#2,obRoutine(a0)
00006A8A 7002                       		moveq	#2,d0
00006A8C 0828 0000 001C             		btst	#0,obAnim(a0)
00006A92 6700                       		beq.s	@noflip
00006A94 4440                       		neg.w	d0
00006A96                            
00006A96                            	@noflip:
00006A96 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; get RAM address for emeralds
00006A9A 7205                       		moveq	#5,d1
00006A9C                            
00006A9C                            @emeraldloop:
00006A9C 1340 003E                  		move.b	d0,$3E(a1)
00006AA0 3400                       		move.w	d0,d2
00006AA2 E742                       		asl.w	#3,d2
00006AA4 D529 0026                  		add.b	d2,obAngle(a1)
00006AA8 43E9 0040                  		lea	$40(a1),a1
00006AAC 51C9 FFEE                  		dbf	d1,@emeraldloop
00006AB0 5228 001A                  		addq.b	#1,obFrame(a0)
00006AB4 317C 0070 0030             		move.w	#112,eegg_time(a0)
00006ABA                            
00006ABA                            EEgg_Wait:	; Routine 6
00006ABA 5368 0030                  		subq.w	#1,eegg_time(a0) ; decrement timer
00006ABE 6A00                       		bpl.s	@nochg		; branch if time remains
00006AC0 0868 0000 001C             		bchg	#0,obAnim(a0)
00006AC6 117C 0002 0024             		move.b	#2,obRoutine(a0) ; goto EEgg_Animate next
00006ACC                            
00006ACC                            	@nochg:
00006ACC 4E75                       		rts	
00006ACC 4E75                       		rts	
00006ACE                            		include "_anim\Try Again & End Eggman.asm"
00006ACE                            ; ---------------------------------------------------------------------------
00006ACE                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00006ACE                            ; ---------------------------------------------------------------------------
00006ACE 0000                       Ani_EEgg:	dc.w @tryagain1-Ani_EEgg
00006AD0 0000                       		dc.w @tryagain2-Ani_EEgg
00006AD2 0000                       		dc.w @end-Ani_EEgg
00006AD4 0500 FC01                  @tryagain1:	dc.b 5,	0, afRoutine, 1
00006AD8 0502 FC03                  @tryagain2:	dc.b 5,	2, afRoutine, 3
00006ADC 0704 0506 0504 0506 0504+  @end:		dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	afEnd
00006AEE                            		even
00006AEE                            		even
00006AEE                            		include	"_incObj\8C Try Again Emeralds.asm"
00006AEE                            ; ---------------------------------------------------------------------------
00006AEE                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006AEE                            ; ---------------------------------------------------------------------------
00006AEE                            
00006AEE                            TryChaos:
00006AEE 7000                       		moveq	#0,d0
00006AF0 1028 0024                  		move.b	obRoutine(a0),d0
00006AF4 323B 0000                  		move.w	TCha_Index(pc,d0.w),d1
00006AF8 4EBB 1000                  		jsr	TCha_Index(pc,d1.w)
00006AFC 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006B02                            ; ===========================================================================
00006B02 0000                       TCha_Index:	dc.w TCha_Main-TCha_Index
00006B04 0000                       		dc.w TCha_Move-TCha_Index
00006B06                            ; ===========================================================================
00006B06                            
00006B06                            TCha_Main:	; Routine 0
00006B06 2248                       		movea.l	a0,a1
00006B08 7400                       		moveq	#0,d2
00006B0A 7600                       		moveq	#0,d3
00006B0C 7205                       		moveq	#5,d1
00006B0E 9238 FE57                  		sub.b	(v_emeralds).w,d1
00006B12                            
00006B12                            @makeemerald:
00006B12 12BC 0000                  		move.b	#id_TryChaos,(a1) ; load emerald object
00006B16 5429 0024                  		addq.b	#2,obRoutine(a1)
00006B1A 237C 0000 690E 0004        		move.l	#Map_ECha,obMap(a1)
00006B22 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
00006B28 137C 0000 0001             		move.b	#0,obRender(a1)
00006B2E 337C 0080 0018             		move.w	#$80,obPriority(a1)
00006B34 337C 0104 0008             		move.w	#$104,obX(a1)
00006B3A 337C 0120 0038             		move.w	#$120,$38(a1)
00006B40 337C 00EC 000A             		move.w	#$EC,obScreenY(a1)
00006B46 3369 000A 003A             		move.w	obScreenY(a1),$3A(a1)
00006B4C 137C 001C 003C             		move.b	#$1C,$3C(a1)
00006B52 47F8 FE58                  		lea	(v_emldlist).w,a3
00006B56                            
00006B56                            	@chkemerald:
00006B56 7000                       		moveq	#0,d0
00006B58 1038 FE57                  		move.b	(v_emeralds).w,d0
00006B5C 5340                       		subq.w	#1,d0
00006B5E 6500                       		bcs.s	@loc_5B42
00006B60                            
00006B60                            	@chkloop:
00006B60 B433 0000                  		cmp.b	(a3,d0.w),d2
00006B64 6600                       		bne.s	@notgot
00006B66 5202                       		addq.b	#1,d2
00006B68 60EC                       		bra.s	@chkemerald
00006B6A                            ; ===========================================================================
00006B6A                            
00006B6A                            	@notgot:
00006B6A 51C8 FFF4                  		dbf	d0,@chkloop
00006B6E                            
00006B6E                            @loc_5B42:
00006B6E 1342 001A                  		move.b	d2,obFrame(a1)
00006B72 5229 001A                  		addq.b	#1,obFrame(a1)
00006B76 5202                       		addq.b	#1,d2
00006B78 137C 0080 0026             		move.b	#$80,obAngle(a1)
00006B7E 1343 001E                  		move.b	d3,obTimeFrame(a1)
00006B82 1343 001F                  		move.b	d3,obDelayAni(a1)
00006B86 0643 000A                  		addi.w	#10,d3
00006B8A 43E9 0040                  		lea	$40(a1),a1
00006B8E 51C9 FF82                  		dbf	d1,@makeemerald	; repeat 5 times
00006B92                            
00006B92                            TCha_Move:	; Routine 2
00006B92 4A68 003E                  		tst.w	$3E(a0)
00006B96 6700                       		beq.s	locret_5BBA
00006B98 4A28 001E                  		tst.b	obTimeFrame(a0)
00006B9C 6700                       		beq.s	loc_5B78
00006B9E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00006BA2 6600                       		bne.s	loc_5B80
00006BA4                            
00006BA4                            loc_5B78:
00006BA4 3028 003E                  		move.w	$3E(a0),d0
00006BA8 D168 0026                  		add.w	d0,obAngle(a0)
00006BAC                            
00006BAC                            loc_5B80:
00006BAC 1028 0026                  		move.b	obAngle(a0),d0
00006BB0 6700                       		beq.s	loc_5B8C
00006BB2 0C00 0080                  		cmpi.b	#$80,d0
00006BB6 6600                       		bne.s	loc_5B96
00006BB8                            
00006BB8                            loc_5B8C:
00006BB8 4268 003E                  		clr.w	$3E(a0)
00006BBC 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00006BC2                            
00006BC2                            loc_5B96:
00006BC2 4EB9 0000 3BA2             		jsr	(CalcSine).l
00006BC8 7800                       		moveq	#0,d4
00006BCA 1828 003C                  		move.b	$3C(a0),d4
00006BCE C3C4                       		muls.w	d4,d1
00006BD0 E081                       		asr.l	#8,d1
00006BD2 C1C4                       		muls.w	d4,d0
00006BD4 E080                       		asr.l	#8,d0
00006BD6 D268 0038                  		add.w	$38(a0),d1
00006BDA D068 003A                  		add.w	$3A(a0),d0
00006BDE 3141 0008                  		move.w	d1,obX(a0)
00006BE2 3140 000A                  		move.w	d0,obScreenY(a0)
00006BE6                            
00006BE6                            locret_5BBA:
00006BE6 4E75                       		rts	
00006BE6 4E75                       		rts	
00006BE8                            Map_EEgg:	include	"_maps\Try Again & End Eggman.asm"
00006BE8                            ; ---------------------------------------------------------------------------
00006BE8                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006BE8                            ; ---------------------------------------------------------------------------
00006BE8                            Map_EEgg_internal:
00006BE8 0000                       		dc.w M_EEgg_Try1-Map_EEgg_internal
00006BEA 0000                       		dc.w M_EEgg_Try2-Map_EEgg_internal
00006BEC 0000                       		dc.w M_EEgg_Try3-Map_EEgg_internal
00006BEE 0000                       		dc.w M_EEgg_Try4-Map_EEgg_internal
00006BF0 0000                       		dc.w M_EEgg_End1-Map_EEgg_internal
00006BF2 0000                       		dc.w M_EEgg_End2-Map_EEgg_internal
00006BF4 0000                       		dc.w M_EEgg_End3-Map_EEgg_internal
00006BF6 0000                       		dc.w M_EEgg_End4-Map_EEgg_internal
00006BF8 08                         M_EEgg_Try1:	dc.b 8
00006BF9 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006BFE F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006C03 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006C08 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006C0D 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006C12 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006C17 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006C1C 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006C21 08                         M_EEgg_Try2:	dc.b 8
00006C22 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006C27 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006C2C E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006C31 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006C36 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006C3B 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006C40 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006C45 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006C4A 08                         M_EEgg_Try3:	dc.b 8
00006C4B E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006C50 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006C55 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006C5A F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006C5F 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006C64 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006C69 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006C6E 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006C73 08                         M_EEgg_Try4:	dc.b 8
00006C74 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006C79 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006C7E E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006C83 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006C88 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006C8D 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006C92 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006C97 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006C9C 0C                         M_EEgg_End1:	dc.b $C
00006C9D ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006CA2 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006CA7 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006CAC 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006CB1 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006CB6 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006CBB 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006CC0 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006CC5 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006CCA 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006CCF 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006CD4 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006CD9 0A                         M_EEgg_End2:	dc.b $A
00006CDA D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006CDF DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006CE4 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006CE9 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006CEE DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006CF3 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006CF8 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006CFD 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006D02 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006D07 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006D0C 0A                         M_EEgg_End3:	dc.b $A
00006D0D C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006D12 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006D17 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006D1C C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006D21 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006D26 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006D2B 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006D30 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006D35 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006D3A 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006D3F 0C                         M_EEgg_End4:	dc.b $C
00006D40 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006D45 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006D4A 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006D4F 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006D54 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006D59 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006D5E 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006D63 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006D68 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006D6D 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006D72 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006D77 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006D7C                            		even
00006D7C                            		even
00006D7C                            
00006D7C                            ; ---------------------------------------------------------------------------
00006D7C                            ; Ending sequence demos
00006D7C                            ; ---------------------------------------------------------------------------
00006D7C                            Demo_EndGHZ1:	incbin	"demodata\Ending - GHZ1.bin"
00006DAA                            		even
00006DAA                            Demo_EndMZ:	incbin	"demodata\Ending - MZ.bin"
00006DEA                            		even
00006DEA                            Demo_EndSYZ:	incbin	"demodata\Ending - SYZ.bin"
00006E1A                            		even
00006E1A                            Demo_EndLZ:	incbin	"demodata\Ending - LZ.bin"
00006E4A                            		even
00006E4A                            Demo_EndSLZ:	incbin	"demodata\Ending - SLZ.bin"
00006E6A                            		even
00006E6A                            Demo_EndSBZ1:	incbin	"demodata\Ending - SBZ1.bin"
00006E8A                            		even
00006E8A                            Demo_EndSBZ2:	incbin	"demodata\Ending - SBZ2.bin"
00006EBA                            		even
00006EBA                            Demo_EndGHZ2:	incbin	"demodata\Ending - GHZ2.bin"
00006EEA                            		even
00006EEA                            
00006EEA                            		include	"_inc\LevelSizeLoad & BgScrollSpeed (JP1).asm"
00006EEA                            ; ---------------------------------------------------------------------------
00006EEA                            ; Subroutine to	load level boundaries and start	locations
00006EEA                            ; ---------------------------------------------------------------------------
00006EEA                            
00006EEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EEA                            
00006EEA                            
00006EEA                            LevelSizeLoad:
00006EEA 7000                       		moveq	#0,d0
00006EEC 11C0 F740                  		move.b	d0,($FFFFF740).w
00006EF0 11C0 F741                  		move.b	d0,($FFFFF741).w
00006EF4 11C0 F746                  		move.b	d0,($FFFFF746).w
00006EF8 11C0 F748                  		move.b	d0,($FFFFF748).w
00006EFC 11C0 F742                  		move.b	d0,(v_dle_routine).w
00006F00 3038 FE10                  		move.w	(v_zone).w,d0
00006F04 ED08                       		lsl.b	#6,d0
00006F06 E848                       		lsr.w	#4,d0
00006F08 3200                       		move.w	d0,d1
00006F0A D040                       		add.w	d0,d0
00006F0C D041                       		add.w	d1,d0
00006F0E 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006F12 3018                       		move.w	(a0)+,d0
00006F14 31C0 F730                  		move.w	d0,($FFFFF730).w
00006F18 2018                       		move.l	(a0)+,d0
00006F1A 21C0 F728                  		move.l	d0,(v_limitleft2).w
00006F1E 21C0 F720                  		move.l	d0,(v_limitleft1).w
00006F22 2018                       		move.l	(a0)+,d0
00006F24 21C0 F72C                  		move.l	d0,(v_limittop2).w
00006F28 21C0 F724                  		move.l	d0,(v_limittop1).w
00006F2C 3038 F728                  		move.w	(v_limitleft2).w,d0
00006F30 0640 0240                  		addi.w	#$240,d0
00006F34 31C0 F732                  		move.w	d0,(v_limitleft3).w
00006F38 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006F3E 3018                       		move.w	(a0)+,d0
00006F40 31C0 F73E                  		move.w	d0,(v_lookshift).w
00006F44 31FC 00A0 F7A0             		move.w    #160,(v_camera_pan).w    ; reset the horizontal camera pan value to 160 pixels
00006F4A 6000 0000                  		bra.w	LevSz_ChkLamp
00006F4E                            
00006F4E                            ; ===========================================================================
00006F4E                            ; ---------------------------------------------------------------------------
00006F4E                            ; Level size array
00006F4E                            ; ---------------------------------------------------------------------------
00006F4E                            LevelSizeArray:
00006F4E                            		; GHZ
00006F4E 0004 0000 4470 0000 0400+  		dc.w $0004, $0000, $4470, $0000, $0400, $0060
00006F5A 0004 0000 2E60 0000 0300+  		dc.w $0004, $0000, $2E60, $0000, $0300, $0060
00006F66 0004 0000 2960 0000 0300+  		dc.w $0004, $0000, $2960, $0000, $0300, $0060
00006F72 0004 0000 7EC0 0000 0400+  		dc.w $0004, $0000, $7EC0, $0000, $0400, $0060
00006F7E                            		; LZ
00006F7E 0004 0000 19AF 0000 0530+  		dc.w $0004, $0000, $19AF, $0000, $0530, $0060
00006F8A 0004 0000 10AF 0000 0720+  		dc.w $0004, $0000, $10AF, $0000, $0720, $0060
00006F96 0004 0000 202F FF00 0800+  		dc.w $0004, $0000, $202F, $FF00, $0800, $0060
00006FA2 0004 0000 20BF 0000 0720+  		dc.w $0004, $0000, $20BF, $0000, $0720, $0060
00006FAE                            		; MZ
00006FAE 0004 0000 21C0 0000 0520+  		dc.w $0004, $0000, $21C0, $0000, $0520, $0060
00006FBA 0004 0000 2DE0 0000 0520+  		dc.w $0004, $0000, $2DE0, $0000, $0520, $0060
00006FC6 0004 0000 1800 0000 0720+  		dc.w $0004, $0000, $1800, $0000, $0720, $0060
00006FD2 0004 0000 16BF 0000 0720+  		dc.w $0004, $0000, $16BF, $0000, $0720, $0060
00006FDE                            		; SLZ
00006FDE 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006FEA 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006FF6 0004 0000 2000 0000 0640+  		dc.w $0004, $0000, $2000, $0000, $0640, $0060
00007002 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
0000700E                            		; SYZ
0000700E 0004 0000 1B00 0000 0520+  		dc.w $0004, $0000, $1B00, $0000, $0520, $0060
0000701A 0004 0000 1B60 0000 0520+  		dc.w $0004, $0000, $1B60, $0000, $0520, $0060
00007026 0004 0000 2C00 0000 0620+  		dc.w $0004, $0000, $2C00, $0000, $0620, $0060
00007032 0004 0000 2EC0 0000 0620+  		dc.w $0004, $0000, $2EC0, $0000, $0620, $0060
0000703E                            		; SBZ
0000703E 0004 0000 21C0 0000 0720+  		dc.w $0004, $0000, $21C0, $0000, $0720, $0060
0000704A 0004 0000 1E40 0000 0800+  		dc.w $0004, $0000, $1E40, $0000, $0800, $0060
00007056 0004 2080 2460 0510 0510+  		dc.w $0004, $2080, $2460, $0510, $0510, $0060
00007062 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
0000706E                            		; Ending
0000706E 0004 0000 0500 0110 0110+  		dc.w $0004, $0000, $0500, $0110, $0110, $0060
0000707A 0004 0000 0DC0 0110 0110+  		dc.w $0004, $0000, $0DC0, $0110, $0110, $0060
00007086 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00007092 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
0000709E                            
0000709E                            ; ---------------------------------------------------------------------------
0000709E                            ; Ending start location array
0000709E                            ; ---------------------------------------------------------------------------
0000709E                            EndingStLocArray:
0000709E                            		include	"_inc\Start Location Array - Ending.asm"
0000709E                            ; ---------------------------------------------------------------------------
0000709E                            ; Ending start location array
0000709E                            ; ---------------------------------------------------------------------------
0000709E                            
0000709E                            		incbin	"startpos\ghz1 (Credits demo 1).bin"
000070A2                            		incbin	"startpos\mz2 (Credits demo).bin"
000070A6                            		incbin	"startpos\syz3 (Credits demo).bin"
000070AA                            		incbin	"startpos\lz3 (Credits demo).bin"
000070AE                            		incbin	"startpos\slz3 (Credits demo).bin"
000070B2                            		incbin	"startpos\sbz1 (Credits demo).bin"
000070B6                            		incbin	"startpos\sbz2 (Credits demo).bin"
000070BA                            		incbin	"startpos\ghz1 (Credits demo 2).bin"
000070BE                            		even
000070BE                            		even
000070BE                            
000070BE                            ; ===========================================================================
000070BE                            
000070BE                            LevSz_ChkLamp:
000070BE 4A38 FE30                  		tst.b	(v_lastlamp).w	; have any lampposts been hit?
000070C2 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000070C4                            
000070C4 4EB9 0000 0000             		jsr	(Lamp_LoadInfo).l
000070CA 3238 D008                  		move.w	(v_player+obX).w,d1
000070CE 3038 D00C                  		move.w	(v_player+obY).w,d0
000070D2 6000                       		bra.s	LevSz_SkipStartPos
000070D4                            ; ===========================================================================
000070D4                            
000070D4                            LevSz_StartLoc:
000070D4 3038 FE10                  		move.w	(v_zone).w,d0
000070D8 ED08                       		lsl.b	#6,d0
000070DA E848                       		lsr.w	#4,d0
000070DC 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000070E0 4A78 FFF0                  		tst.w	(f_demo).w	; is ending demo mode on?
000070E4 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000070E6                            
000070E6 3038 FFF4                  		move.w	(v_creditsnum).w,d0
000070EA 5340                       		subq.w	#1,d0
000070EC E548                       		lsl.w	#2,d0
000070EE 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
000070F2                            
000070F2                            LevSz_SonicPos:
000070F2 7200                       		moveq	#0,d1
000070F4 3219                       		move.w	(a1)+,d1
000070F6 31C1 D008                  		move.w	d1,(v_player+obX).w ; set Sonic's position on x-axis
000070FA 7000                       		moveq	#0,d0
000070FC 3011                       		move.w	(a1),d0
000070FE 31C0 D00C                  		move.w	d0,(v_player+obY).w ; set Sonic's position on y-axis
00007102                            
00007102                            SetScreen:
00007102                            	LevSz_SkipStartPos:
00007102 4278 F7A8                  		clr.w (v_trackpos).w ; reset Sonic's position tracking index 
00007106 45F8 CB00                  		lea (v_tracksonic).w,a2 ; load the tracking array into a2 
0000710A 743F                       		moveq #63,d2 ; begin a 64-step loop 
0000710C                            @looppoint: 
0000710C 34C1                       		move.w d1,(a2)+ ; fill in X 
0000710E 34C0                       		move.w d0,(a2)+ ; fill in Y 
00007110 51CA FFFA                  		dbf d2,@looppoint ; loop	
00007114 0441 00A0                  		subi.w	#160,d1		; is Sonic more than 160px from left edge?
00007118 6400                       		bcc.s	SetScr_WithinLeft ; if yes, branch
0000711A 7200                       		moveq	#0,d1
0000711C                            
0000711C                            	SetScr_WithinLeft:
0000711C 3438 F72A                  		move.w	(v_limitright2).w,d2
00007120 B242                       		cmp.w	d2,d1		; is Sonic inside the right edge?
00007122 6500                       		bcs.s	SetScr_WithinRight ; if yes, branch
00007124 3202                       		move.w	d2,d1
00007126                            
00007126                            	SetScr_WithinRight:
00007126 31C1 F700                  		move.w	d1,(v_screenposx).w ; set horizontal screen position
0000712A                            
0000712A 0440 0060                  		subi.w	#96,d0		; is Sonic within 96px of upper edge?
0000712E 6400                       		bcc.s	SetScr_WithinTop ; if yes, branch
00007130 7000                       		moveq	#0,d0
00007132                            
00007132                            	SetScr_WithinTop:
00007132 B078 F72E                  		cmp.w	(v_limitbtm2).w,d0 ; is Sonic above the bottom edge?
00007136 6D00                       		blt.s	SetScr_WithinBottom ; if yes, branch
00007138 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000713C                            
0000713C                            	SetScr_WithinBottom:
0000713C 31C0 F704                  		move.w	d0,(v_screenposy).w ; set vertical screen position
00007140 6100 0000                  		bsr.w	BgScrollSpeed
00007144 7000                       		moveq	#0,d0
00007146 1038 FE10                  		move.b	(v_zone).w,d0
0000714A E508                       		lsl.b	#2,d0
0000714C 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),(v_256loop1).w
00007152 4E75                       		rts
00007154                            ; ===========================================================================
00007154                            ; ---------------------------------------------------------------------------
00007154                            ; Sonic start location array
00007154                            ; ---------------------------------------------------------------------------
00007154                            StartLocArray:	include	"_inc\Start Location Array - Levels.asm"
00007154                            ; ---------------------------------------------------------------------------
00007154                            ; Sonic start location array
00007154                            ; ---------------------------------------------------------------------------
00007154                            
00007154                            		incbin	"startpos\ghz1.bin"
00007158                            		incbin	"startpos\ghz2.bin"
0000715C                            		incbin	"startpos\ghz3.bin"
00007160 0080 00A8                  		dc.w	$80,$A8
00007164                            
00007164                            		incbin	"startpos\lz1.bin"
00007168                            		incbin	"startpos\lz2.bin"
0000716C                            		incbin	"startpos\lz3.bin"
00007170                            		incbin	"startpos\sbz3.bin"
00007174                            
00007174                            		incbin	"startpos\mz1.bin"
00007178                            		incbin	"startpos\mz2.bin"
0000717C                            		incbin	"startpos\mz3.bin"
00007180 0080 00A8                  		dc.w	$80,$A8
00007184                            
00007184                            		incbin	"startpos\slz1.bin"
00007188                            		incbin	"startpos\slz2.bin"
0000718C                            		incbin	"startpos\slz3.bin"
00007190 0080 00A8                  		dc.w	$80,$A8
00007194                            
00007194                            		incbin	"startpos\syz1.bin"
00007198                            		incbin	"startpos\syz2.bin"
0000719C                            		incbin	"startpos\syz3.bin"
000071A0 0080 00A8                  		dc.w	$80,$A8
000071A4                            
000071A4                            		incbin	"startpos\sbz1.bin"
000071A8                            		incbin	"startpos\sbz2.bin"
000071AC                            		incbin	"startpos\fz.bin"
000071B0 0080 00A8                  		dc.w	$80,$A8
000071B4                            
000071B4                            
000071B4                            		incbin	"startpos\end1.bin"
000071B8                            		incbin	"startpos\end2.bin"
000071BC 0080 00A8                  		dc.w	$80,$A8
000071C0 0080 00A8                  		dc.w	$80,$A8
000071C4                            
000071C4                            		even
000071C4                            		even
000071C4                            
000071C4                            ; ---------------------------------------------------------------------------
000071C4                            ; Which	256x256	tiles contain loops or roll-tunnels
000071C4                            ; ---------------------------------------------------------------------------
000071C4                            
000071C4                            LoopTileNums:
000071C4                            
000071C4                            ; 		loop	loop	tunnel	tunnel
000071C4                            
000071C4 B5C0 1F20                  	dc.b	$B5,	$C0,	$1F,	$20	; Green Hill
000071C8 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Labyrinth
000071CC 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Marble
000071D0 AAB4 7F7F                  	dc.b	$AA,	$B4,	$7F,	$7F	; Star Light
000071D4 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Spring Yard
000071D8 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Scrap Brain
000071DC 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Ending (Green Hill)
000071E0                            
000071E0                            		even
000071E0                            
000071E0                            ; ---------------------------------------------------------------------------
000071E0                            ; Subroutine to	set scroll speed of some backgrounds
000071E0                            ; ---------------------------------------------------------------------------
000071E0                            
000071E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071E0                            
000071E0                            
000071E0                            BgScrollSpeed:
000071E0 4A38 FE30                  		tst.b	(v_lastlamp).w
000071E4 6600                       		bne.s	loc_6206
000071E6 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000071EA 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
000071EE 31C1 F708                  		move.w	d1,(v_bgscreenposx).w
000071F2 31C1 F710                  		move.w	d1,(v_bg2screenposx).w
000071F6 31C1 F718                  		move.w	d1,(v_bg3screenposx).w
000071FA                            
000071FA                            loc_6206:
000071FA 7400                       		moveq	#0,d2
000071FC 1438 FE10                  		move.b	(v_zone).w,d2
00007200 D442                       		add.w	d2,d2
00007202 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00007206 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
0000720A                            ; End of function BgScrollSpeed
0000720A                            
0000720A                            ; ===========================================================================
0000720A 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
0000720E 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00007212 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00007216 0000                       		dc.w BgScroll_End-BgScroll_Index
00007218                            ; ===========================================================================
00007218                            
00007218                            BgScroll_GHZ:
00007218 42B8 F708                  		clr.l	(v_bgscreenposx).w
0000721C 42B8 F70C                  		clr.l	(v_bgscreenposy).w
00007220 42B8 F714                  		clr.l	(v_bg2screenposy).w
00007224 42B8 F71C                  		clr.l	(v_bg3screenposy).w
00007228 45F8 A800                  		lea	($FFFFA800).w,a2
0000722C 429A                       		clr.l	(a2)+
0000722E 429A                       		clr.l	(a2)+
00007230 429A                       		clr.l	(a2)+
00007232 4E75                       		rts
00007234                            ; ===========================================================================
00007234                            
00007234                            BgScroll_LZ:
00007234 E280                       		asr.l	#1,d0
00007236 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
0000723A 4E75                       		rts	
0000723C                            ; ===========================================================================
0000723C                            
0000723C                            BgScroll_MZ:
0000723C 4E75                       		rts	
0000723E                            ; ===========================================================================
0000723E                            
0000723E                            BgScroll_SLZ:
0000723E E280                       		asr.l	#1,d0
00007240 0640 00C0                  		addi.w	#$C0,d0
00007244 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007248 42B8 F708                  		clr.l	(v_bgscreenposx).w
0000724C 4E75                       		rts	
0000724E                            ; ===========================================================================
0000724E                            
0000724E                            BgScroll_SYZ:
0000724E E980                       		asl.l	#4,d0
00007250 2400                       		move.l	d0,d2
00007252 E380                       		asl.l	#1,d0
00007254 D082                       		add.l	d2,d0
00007256 E080                       		asr.l	#8,d0
00007258 5240                       		addq.w	#1,d0
0000725A 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
0000725E 42B8 F708                  		clr.l	(v_bgscreenposx).w
00007262 4E75                       		rts	
00007264                            ; ===========================================================================
00007264                            
00007264                            BgScroll_SBZ:
00007264 0240 07F8                  		andi.w	#$7F8,d0
00007268 E640                       		asr.w	#3,d0
0000726A 5240                       		addq.w	#1,d0
0000726C 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007270 4E75                       		rts	
00007272                            ; ===========================================================================
00007272                            
00007272                            BgScroll_End:
00007272 3038 F700                  		move.w	(v_screenposx).w,d0
00007276 E240                       		asr.w	#1,d0
00007278 31C0 F708                  		move.w	d0,(v_bgscreenposx).w
0000727C 31C0 F710                  		move.w	d0,(v_bg2screenposx).w
00007280 E440                       		asr.w	#2,d0
00007282 3200                       		move.w	d0,d1
00007284 D040                       		add.w	d0,d0
00007286 D041                       		add.w	d1,d0
00007288 31C0 F718                  		move.w	d0,(v_bg3screenposx).w
0000728C 42B8 F70C                  		clr.l	(v_bgscreenposy).w
00007290 42B8 F714                  		clr.l	(v_bg2screenposy).w
00007294 42B8 F71C                  		clr.l	(v_bg3screenposy).w
00007298 45F8 A800                  		lea	($FFFFA800).w,a2
0000729C 429A                       		clr.l	(a2)+
0000729E 429A                       		clr.l	(a2)+
000072A0 429A                       		clr.l	(a2)+
000072A2 4E75                       		rts
000072A2 4E75                       		rts
000072A4                            		include	"_inc\DeformLayers (JP1).asm"
000072A4                            ; ---------------------------------------------------------------------------
000072A4                            ; Background layer deformation subroutines
000072A4                            ; ---------------------------------------------------------------------------
000072A4                            
000072A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072A4                            
000072A4                            
000072A4                            DeformLayers:
000072A4 4A38 F744                  		tst.b	(f_nobgscroll).w
000072A8 6700                       		beq.s	@bgscroll
000072AA 4E75                       		rts	
000072AC                            ; ===========================================================================
000072AC                            
000072AC                            	@bgscroll:
000072AC 4278 F754                  		clr.w	(v_fg_scroll_flags).w
000072B0 4278 F756                  		clr.w	(v_bg1_scroll_flags).w
000072B4 4278 F758                  		clr.w	(v_bg2_scroll_flags).w
000072B8 4278 F75A                  		clr.w	(v_bg3_scroll_flags).w
000072BC 6100 0000                  		bsr.w	ScrollHoriz
000072C0 6100 0000                  		bsr.w	ScrollVertical
000072C4 6100 0000                  		bsr.w	DynamicLevelEvents
000072C8 31F8 F704 F616             		move.w	(v_screenposy).w,(v_scrposy_dup).w
000072CE 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000072D4 7000                       		moveq	#0,d0
000072D6 1038 FE10                  		move.b	(v_zone).w,d0
000072DA D040                       		add.w	d0,d0
000072DC 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
000072E0 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
000072E4                            ; End of function DeformLayers
000072E4                            
000072E4                            ; ===========================================================================
000072E4                            ; ---------------------------------------------------------------------------
000072E4                            ; Offset index for background layer deformation	code
000072E4                            ; ---------------------------------------------------------------------------
000072E4 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000072E8 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
000072EC 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
000072F0 0000                       		dc.w Deform_GHZ-Deform_Index
000072F2                            ; ---------------------------------------------------------------------------
000072F2                            ; Green	Hill Zone background layer deformation code
000072F2                            ; ---------------------------------------------------------------------------
000072F2                            
000072F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072F2                            
000072F2                            
000072F2                            Deform_GHZ:
000072F2                            	;cmpi.b    #id_Title,(v_gamemode).w
000072F2                            	;beq.w    Deform_Title
000072F2                            
000072F2                            ;Deform_GHZ_Stage:
000072F2                            	; block 3 - distant mountains
000072F2 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000072F6 48C4                       		ext.l	d4
000072F8 EB84                       		asl.l	#5,d4
000072FA 2204                       		move.l	d4,d1
000072FC E384                       		asl.l	#1,d4
000072FE D881                       		add.l	d1,d4
00007300 7C00                       		moveq	#0,d6
00007302 6100 0000                  		bsr.w	BGScroll_Block3
00007306                            	; block 2 - hills & waterfalls
00007306 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000730A 48C4                       		ext.l	d4
0000730C EF84                       		asl.l	#7,d4
0000730E 7C00                       		moveq	#0,d6
00007310 6100 0000                  		bsr.w	BGScroll_Block2
00007314                            	; calculate Y position
00007314 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007318 3038 F704                  		move.w	(v_screenposy).w,d0
0000731C 0240 07FF                  		andi.w	#$7FF,d0
00007320 EA48                       		lsr.w	#5,d0
00007322 4440                       		neg.w	d0
00007324 0640 0020                  		addi.w	#$20,d0
00007328 6A00                       		bpl.s	@limitY
0000732A 7000                       		moveq	#0,d0
0000732C                            	@limitY:
0000732C 3800                       		move.w	d0,d4
0000732E 31C0 F618                  		move.w	d0,(v_bgscrposy_dup).w
00007332 3038 F700                  		move.w	(v_screenposx).w,d0
00007336 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
0000733C 6600                       		bne.s	@notTitle
0000733E 7000                       		moveq	#0,d0	; reset foreground position in title screen
00007340                            	@notTitle:
00007340 4440                       		neg.w	d0
00007342 4840                       		swap	d0
00007344                            	; auto-scroll clouds
00007344 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007348 069A 0001 0000             		addi.l	#$10000,(a2)+
0000734E 069A 0000 C000             		addi.l	#$C000,(a2)+
00007354 069A 0000 8000             		addi.l	#$8000,(a2)+
0000735A                            	; calculate background scroll	
0000735A 3038 A800                  		move.w	(v_bgscroll_buffer).w,d0
0000735E D078 F718                  		add.w	(v_bg3screenposx).w,d0
00007362 4440                       		neg.w	d0
00007364 323C 001F                  		move.w	#$1F,d1
00007368 9244                       		sub.w	d4,d1
0000736A 6500                       		bcs.s	@gotoCloud2
0000736C                            	@cloudLoop1:		; upper cloud (32px)
0000736C 22C0                       		move.l	d0,(a1)+
0000736E 51C9 FFFC                  		dbf	d1,@cloudLoop1
00007372                            
00007372                            	@gotoCloud2:
00007372 3038 A804                  		move.w	(v_bgscroll_buffer+4).w,d0
00007376 D078 F718                  		add.w	(v_bg3screenposx).w,d0
0000737A 4440                       		neg.w	d0
0000737C 323C 000F                  		move.w	#$F,d1
00007380                            	@cloudLoop2:		; middle cloud (16px)
00007380 22C0                       		move.l	d0,(a1)+
00007382 51C9 FFFC                  		dbf	d1,@cloudLoop2
00007386                            
00007386 3038 A808                  		move.w	(v_bgscroll_buffer+8).w,d0
0000738A D078 F718                  		add.w	(v_bg3screenposx).w,d0
0000738E 4440                       		neg.w	d0
00007390 323C 000F                  		move.w	#$F,d1
00007394                            	@cloudLoop3:		; lower cloud (16px)
00007394 22C0                       		move.l	d0,(a1)+
00007396 51C9 FFFC                  		dbf	d1,@cloudLoop3
0000739A                            
0000739A 323C 002F                  		move.w	#$2F,d1
0000739E 3038 F718                  		move.w	(v_bg3screenposx).w,d0
000073A2 4440                       		neg.w	d0
000073A4                            	@mountainLoop:		; distant mountains (48px)
000073A4 22C0                       		move.l	d0,(a1)+
000073A6 51C9 FFFC                  		dbf	d1,@mountainLoop
000073AA                            
000073AA 323C 0027                  		move.w	#$27,d1
000073AE 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000073B2 4440                       		neg.w	d0
000073B4                            	@hillLoop:			; hills & waterfalls (40px)
000073B4 22C0                       		move.l	d0,(a1)+
000073B6 51C9 FFFC                  		dbf	d1,@hillLoop
000073BA                            
000073BA 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000073BE 3438 F700                  		move.w	(v_screenposx).w,d2
000073C2 9440                       		sub.w	d0,d2
000073C4 48C2                       		ext.l	d2
000073C6 E182                       		asl.l	#8,d2
000073C8 85FC 0068                  		divs.w	#$68,d2
000073CC 48C2                       		ext.l	d2
000073CE E182                       		asl.l	#8,d2
000073D0 7600                       		moveq	#0,d3
000073D2 3600                       		move.w	d0,d3
000073D4 323C 0047                  		move.w	#$47,d1
000073D8 D244                       		add.w	d4,d1
000073DA                            	@waterLoop:			; water deformation
000073DA 3003                       		move.w	d3,d0
000073DC 4440                       		neg.w	d0
000073DE 22C0                       		move.l	d0,(a1)+
000073E0 4843                       		swap	d3
000073E2 D682                       		add.l	d2,d3
000073E4 4843                       		swap	d3
000073E6 51C9 FFF2                  		dbf	d1,@waterLoop
000073EA 4E75                       		rts
000073EC                            ; End of function Deform_GHZ
000073EC                            
000073EC                            Deform_Title:
000073EC 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000073F0 48C4                       		ext.l	d4
000073F2 EB84                       		asl.l	#5,d4
000073F4 2204                       		move.l	d4,d1
000073F6 E384                       		asl.l	#1,d4
000073F8 D881                       		add.l	d1,d4
000073FA 7A00                       		moveq	#0,d5
000073FC 6100 0000                  		bsr.w	BGScroll_Block1
00007400 6100 0000                  		bsr.w	BGScroll_Block3
00007404 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007408 3038 F704                  		move.w	(v_screenposy).w,d0
0000740C 0240 07FF                  		andi.w	#$7FF,d0
00007410 EA48                       		lsr.w	#5,d0
00007412 4440                       		neg.w	d0
00007414 0640 0026                  		addi.w	#$26,d0
00007418 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
0000741C 3800                       		move.w	d0,d4
0000741E 6100 0000                  		bsr.w	BGScroll_Block3
00007422 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007428 323C 006F                  		move.w	#$6F,d1
0000742C 9244                       		sub.w	d4,d1
0000742E 3038 F700                  		move.w	(v_screenposx).w,d0
00007432 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00007438 6600                       		bne.s	loc_633C
0000743A 7000                       		moveq	#0,d0
0000743C                            
0000743C                            loc_633C:
0000743C 4440                       		neg.w	d0
0000743E 4840                       		swap	d0
00007440 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007444 4440                       		neg.w	d0
00007446                            
00007446                            loc_6346:
00007446 22C0                       		move.l	d0,(a1)+
00007448 51C9 FFFC                  		dbf	d1,loc_6346
0000744C 323C 0027                  		move.w	#$27,d1
00007450 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007454 4440                       		neg.w	d0
00007456                            
00007456                            loc_6356:
00007456 22C0                       		move.l	d0,(a1)+
00007458 51C9 FFFC                  		dbf	d1,loc_6356
0000745C 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007460 0640 0000                  		addi.w	#0,d0
00007464 3438 F700                  		move.w	(v_screenposx).w,d2
00007468 0642 FE00                  		addi.w	#-$200,d2
0000746C 9440                       		sub.w	d0,d2
0000746E 48C2                       		ext.l	d2
00007470 E182                       		asl.l	#8,d2
00007472 85FC 0068                  		divs.w	#$68,d2
00007476 48C2                       		ext.l	d2
00007478 E182                       		asl.l	#8,d2
0000747A 7600                       		moveq	#0,d3
0000747C 3600                       		move.w	d0,d3
0000747E 323C 0047                  		move.w	#$47,d1
00007482 D244                       		add.w	d4,d1
00007484                            
00007484                            loc_6384:
00007484 3003                       		move.w	d3,d0
00007486 4440                       		neg.w	d0
00007488 22C0                       		move.l	d0,(a1)+
0000748A 4843                       		swap	d3
0000748C D682                       		add.l	d2,d3
0000748E 4843                       		swap	d3
00007490 51C9 FFF2                  		dbf	d1,loc_6384
00007494 4E75                       		rts	
00007496                            
00007496                            ; ===========================================================================
00007496                            ; ---------------------------------------------------------------------------
00007496                            ; Labyrinth Zone background layer deformation code
00007496                            ; ---------------------------------------------------------------------------
00007496                            
00007496                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007496                            
00007496                            
00007496                            Deform_LZ:
00007496                            	; plain background scroll
00007496 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000749A 48C4                       		ext.l	d4
0000749C EF84                       		asl.l	#7,d4
0000749E 3A38 F73C                  		move.w	(v_scrshifty).w,d5
000074A2 48C5                       		ext.l	d5
000074A4 EF85                       		asl.l	#7,d5
000074A6 6100 0000                  		bsr.w	BGScroll_XY
000074AA                            
000074AA 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000074B0 47F9 0000 0000             		lea	(Lz_Scroll_Data).l,a3
000074B6 45F9 0000 0000             		lea	(Drown_WobbleData).l,a2
000074BC 1438 F7D8                  		move.b	(v_lz_deform).w,d2
000074C0 1602                       		move.b	d2,d3
000074C2 0678 0080 F7D8             		addi.w	#$80,(v_lz_deform).w
000074C8                            
000074C8 D478 F70C                  		add.w	(v_bgscreenposy).w,d2
000074CC 0242 00FF                  		andi.w	#$FF,d2
000074D0 D678 F704                  		add.w	(v_screenposy).w,d3
000074D4 0243 00FF                  		andi.w	#$FF,d3
000074D8 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000074DC 323C 00DF                  		move.w	#$DF,d1
000074E0 3038 F700                  		move.w	(v_screenposx).w,d0
000074E4 4440                       		neg.w	d0
000074E6 3C00                       		move.w	d0,d6
000074E8 4840                       		swap	d0
000074EA 3038 F708                  		move.w	(v_bgscreenposx).w,d0
000074EE 4440                       		neg.w	d0
000074F0 3838 F646                  		move.w	(v_waterpos1).w,d4
000074F4 3A38 F704                  		move.w	(v_screenposy).w,d5
000074F8                            	; write normal scroll before meeting water position
000074F8                            	@normalLoop:		
000074F8 BA44                       		cmp.w	d4,d5	; is current y >= water y?
000074FA 6C00                       		bge.s	@underwaterLoop	; if yes, branch
000074FC 22C0                       		move.l	d0,(a1)+
000074FE 5245                       		addq.w	#1,d5
00007500 5202                       		addq.b	#1,d2
00007502 5203                       		addq.b	#1,d3
00007504 51C9 FFF2                  		dbf	d1,@normalLoop
00007508 4E75                       		rts
0000750A                            	; apply water deformation when underwater
0000750A                            	@underwaterLoop:
0000750A 1833 3000                  		move.b	(a3,d3),d4
0000750E 4884                       		ext.w	d4
00007510 D846                       		add.w	d6,d4
00007512 32C4                       		move.w	d4,(a1)+
00007514 1832 2000                  		move.b	(a2,d2),d4
00007518 4884                       		ext.w	d4
0000751A D840                       		add.w	d0,d4
0000751C 32C4                       		move.w	d4,(a1)+
0000751E 5202                       		addq.b	#1,d2
00007520 5203                       		addq.b	#1,d3
00007522 51C9 FFE6                  		dbf	d1,@underwaterLoop
00007526 4E75                       		rts
00007528                            
00007528                            Lz_Scroll_Data:
00007528 0101 0202 0303 0303 0202+  		dc.b $01,$01,$02,$02,$03,$03,$03,$03,$02,$02,$01,$01,$00,$00,$00,$00
00007538 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007548 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007558 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007568 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007578 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007588 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007598 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000075A8 FFFF FEFE FDFD FDFD FEFE+  		dc.b $FF,$FF,$FE,$FE,$FD,$FD,$FD,$FD,$FE,$FE,$FF,$FF,$00,$00,$00,$00
000075B8 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000075C8 0101 0202 0303 0303 0202+  		dc.b $01,$01,$02,$02,$03,$03,$03,$03,$02,$02,$01,$01,$00,$00,$00,$00
000075D8 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000075E8 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000075F8 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007608 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007618 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007628                            ; End of function Deform_LZ
00007628                            
00007628                            ; ---------------------------------------------------------------------------
00007628                            ; Marble Zone background layer deformation code
00007628                            ; ---------------------------------------------------------------------------
00007628                            
00007628                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007628                            
00007628                            
00007628                            Deform_MZ:
00007628                            	; block 1 - dungeon interior
00007628 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000762C 48C4                       		ext.l	d4
0000762E ED84                       		asl.l	#6,d4
00007630 2204                       		move.l	d4,d1
00007632 E384                       		asl.l	#1,d4
00007634 D881                       		add.l	d1,d4
00007636 7C02                       		moveq	#2,d6
00007638 6100 0000                  		bsr.w	BGScroll_Block1
0000763C                            	; block 3 - mountains
0000763C 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007640 48C4                       		ext.l	d4
00007642 ED84                       		asl.l	#6,d4
00007644 7C06                       		moveq	#6,d6
00007646 6100 0000                  		bsr.w	BGScroll_Block3
0000764A                            	; block 2 - bushes & antique buildings
0000764A 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000764E 48C4                       		ext.l	d4
00007650 EF84                       		asl.l	#7,d4
00007652 7C04                       		moveq	#4,d6
00007654 6100 0000                  		bsr.w	BGScroll_Block2
00007658                            	; calculate y-position of background
00007658 303C 0200                  		move.w	#$200,d0	; start with 512px, ignoring 2 chunks
0000765C 3238 F704                  		move.w	(v_screenposy).w,d1
00007660 0441 01C8                  		subi.w	#$1C8,d1	; 0% scrolling when y <= 56px 
00007664 6500                       		bcs.s	@noYscroll
00007666 3401                       		move.w	d1,d2
00007668 D241                       		add.w	d1,d1
0000766A D242                       		add.w	d2,d1
0000766C E441                       		asr.w	#2,d1
0000766E D041                       		add.w	d1,d0
00007670                            	@noYscroll:
00007670 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007674 31C0 F71C                  		move.w	d0,(v_bg3screenposy).w
00007678 6100 0000                  		bsr.w	BGScroll_YAbsolute
0000767C 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007682                            	; do something with redraw flags
00007682 1038 F756                  		move.b	(v_bg1_scroll_flags).w,d0
00007686 8038 F758                  		or.b	(v_bg2_scroll_flags).w,d0
0000768A 8138 F75A                  		or.b	d0,(v_bg3_scroll_flags).w
0000768E 4238 F756                  		clr.b	(v_bg1_scroll_flags).w
00007692 4238 F758                  		clr.b	(v_bg2_scroll_flags).w
00007696                            	; calculate background scroll buffer
00007696 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
0000769A 3438 F700                  		move.w	(v_screenposx).w,d2
0000769E 4442                       		neg.w	d2
000076A0 3002                       		move.w	d2,d0
000076A2 E440                       		asr.w	#2,d0
000076A4 9042                       		sub.w	d2,d0
000076A6 48C0                       		ext.l	d0
000076A8 E780                       		asl.l	#3,d0
000076AA 81FC 0005                  		divs.w	#5,d0
000076AE 48C0                       		ext.l	d0
000076B0 E980                       		asl.l	#4,d0
000076B2 E180                       		asl.l	#8,d0
000076B4 7600                       		moveq	#0,d3
000076B6 3602                       		move.w	d2,d3
000076B8 E243                       		asr.w	#1,d3
000076BA 323C 0004                  		move.w	#4,d1
000076BE                            	@cloudLoop:		
000076BE 32C3                       		move.w	d3,(a1)+
000076C0 4843                       		swap	d3
000076C2 D680                       		add.l	d0,d3
000076C4 4843                       		swap	d3
000076C6 51C9 FFF6                  		dbf	d1,@cloudLoop
000076CA                            
000076CA 3038 F718                  		move.w	(v_bg3screenposx).w,d0
000076CE 4440                       		neg.w	d0
000076D0 323C 0001                  		move.w	#1,d1
000076D4                            	@mountainLoop:		
000076D4 32C0                       		move.w	d0,(a1)+
000076D6 51C9 FFFC                  		dbf	d1,@mountainLoop
000076DA                            
000076DA 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000076DE 4440                       		neg.w	d0
000076E0 323C 0008                  		move.w	#8,d1
000076E4                            	@bushLoop:		
000076E4 32C0                       		move.w	d0,(a1)+
000076E6 51C9 FFFC                  		dbf	d1,@bushLoop
000076EA                            
000076EA 3038 F708                  		move.w	(v_bgscreenposx).w,d0
000076EE 4440                       		neg.w	d0
000076F0 323C 000F                  		move.w	#$F,d1
000076F4                            	@interiorLoop:		
000076F4 32C0                       		move.w	d0,(a1)+
000076F6 51C9 FFFC                  		dbf	d1,@interiorLoop
000076FA                            
000076FA 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
000076FE 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007702 0440 0200                  		subi.w	#$200,d0	; subtract 512px (unused 2 chunks)
00007706 3400                       		move.w	d0,d2
00007708 0C40 0100                  		cmpi.w	#$100,d0
0000770C 6500                       		bcs.s	@limitY
0000770E 303C 0100                  		move.w	#$100,d0
00007712                            	@limitY:
00007712 0240 01F0                  		andi.w	#$1F0,d0
00007716 E648                       		lsr.w	#3,d0
00007718 45F2 0000                  		lea	(a2,d0),a2
0000771C 6000 0000                  		bra.w	Bg_Scroll_X
00007720                            ; End of function Deform_MZ
00007720                            
00007720                            ; ---------------------------------------------------------------------------
00007720                            ; Star Light Zone background layer deformation code
00007720                            ; ---------------------------------------------------------------------------
00007720                            
00007720                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007720                            
00007720                            
00007720                            Deform_SLZ:
00007720                            	; vertical scrolling
00007720 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007724 48C5                       		ext.l	d5
00007726 EF85                       		asl.l	#7,d5
00007728 6100 0000                  		bsr.w	Bg_Scroll_Y
0000772C 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007732                            	; calculate background scroll buffer
00007732 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007736 3438 F700                  		move.w	(v_screenposx).w,d2
0000773A 4442                       		neg.w	d2
0000773C 3002                       		move.w	d2,d0
0000773E E640                       		asr.w	#3,d0
00007740 9042                       		sub.w	d2,d0
00007742 48C0                       		ext.l	d0
00007744 E980                       		asl.l	#4,d0
00007746 81FC 001C                  		divs.w	#$1C,d0
0000774A 48C0                       		ext.l	d0
0000774C E980                       		asl.l	#4,d0
0000774E E180                       		asl.l	#8,d0
00007750 7600                       		moveq	#0,d3
00007752 3602                       		move.w	d2,d3
00007754 323C 001B                  		move.w	#$1B,d1
00007758                            	@starLoop:		
00007758 32C3                       		move.w	d3,(a1)+
0000775A 4843                       		swap	d3
0000775C D680                       		add.l	d0,d3
0000775E 4843                       		swap	d3
00007760 51C9 FFF6                  		dbf	d1,@starLoop
00007764                            
00007764 3002                       		move.w	d2,d0
00007766 E640                       		asr.w	#3,d0
00007768 3200                       		move.w	d0,d1
0000776A E241                       		asr.w	#1,d1
0000776C D041                       		add.w	d1,d0
0000776E 323C 0004                  		move.w	#4,d1
00007772                            	@buildingLoop1:		; distant black buildings
00007772 32C0                       		move.w	d0,(a1)+
00007774 51C9 FFFC                  		dbf	d1,@buildingLoop1
00007778                            
00007778 3002                       		move.w	d2,d0
0000777A E440                       		asr.w	#2,d0
0000777C 323C 0004                  		move.w	#4,d1
00007780                            	@buildingLoop2:		; closer buildings
00007780 32C0                       		move.w	d0,(a1)+
00007782 51C9 FFFC                  		dbf	d1,@buildingLoop2
00007786                            
00007786 3002                       		move.w	d2,d0
00007788 E240                       		asr.w	#1,d0
0000778A 323C 001D                  		move.w	#$1D,d1
0000778E                            	@bottomLoop:		; bottom part of background
0000778E 32C0                       		move.w	d0,(a1)+
00007790 51C9 FFFC                  		dbf	d1,@bottomLoop
00007794                            
00007794 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007798 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
0000779C 3400                       		move.w	d0,d2
0000779E 0440 00C0                  		subi.w	#$C0,d0
000077A2 0240 03F0                  		andi.w	#$3F0,d0
000077A6 E648                       		lsr.w	#3,d0
000077A8 45F2 0000                  		lea	(a2,d0),a2
000077AC                            ;-------------------------------------------------------------------------------
000077AC                            ;-------------------------------------------------------------------------------
000077AC                            Bg_Scroll_X:
000077AC 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000077B0 323C 000E                  		move.w	#$E,d1
000077B4 3038 F700                  		move.w	(v_screenposx).w,d0
000077B8 4440                       		neg.w	d0
000077BA 4840                       		swap	d0
000077BC 0242 000F                  		andi.w	#$F,d2
000077C0 D442                       		add.w	d2,d2
000077C2 301A                       		move.w	(a2)+,d0
000077C4 4EFB 2000                  		jmp	@pixelJump(pc,d2.w)		; skip pixels for first row
000077C8                            	@blockLoop:
000077C8 301A                       		move.w	(a2)+,d0
000077CA                            	@pixelJump:		
000077CA 22C0                       		move.l	d0,(a1)+
000077CC 22C0                       		move.l	d0,(a1)+
000077CE 22C0                       		move.l	d0,(a1)+
000077D0 22C0                       		move.l	d0,(a1)+
000077D2 22C0                       		move.l	d0,(a1)+
000077D4 22C0                       		move.l	d0,(a1)+
000077D6 22C0                       		move.l	d0,(a1)+
000077D8 22C0                       		move.l	d0,(a1)+
000077DA 22C0                       		move.l	d0,(a1)+
000077DC 22C0                       		move.l	d0,(a1)+
000077DE 22C0                       		move.l	d0,(a1)+
000077E0 22C0                       		move.l	d0,(a1)+
000077E2 22C0                       		move.l	d0,(a1)+
000077E4 22C0                       		move.l	d0,(a1)+
000077E6 22C0                       		move.l	d0,(a1)+
000077E8 22C0                       		move.l	d0,(a1)+
000077EA 51C9 FFDC                  		dbf	d1,@blockLoop
000077EE 4E75                       		rts
000077F0                            
000077F0                            ; ---------------------------------------------------------------------------
000077F0                            ; Spring Yard Zone background layer deformation	code
000077F0                            ; ---------------------------------------------------------------------------
000077F0                            
000077F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000077F0                            
000077F0                            
000077F0                            Deform_SYZ:
000077F0                            	; vertical scrolling
000077F0 3A38 F73C                  		move.w	(v_scrshifty).w,d5
000077F4 48C5                       		ext.l	d5
000077F6 E985                       		asl.l	#4,d5
000077F8 2205                       		move.l	d5,d1
000077FA E385                       		asl.l	#1,d5
000077FC DA81                       		add.l	d1,d5
000077FE 6100 0000                  		bsr.w	Bg_Scroll_Y
00007802 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007808                            	; calculate background scroll buffer
00007808 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
0000780C 3438 F700                  		move.w	(v_screenposx).w,d2
00007810 4442                       		neg.w	d2
00007812 3002                       		move.w	d2,d0
00007814 E640                       		asr.w	#3,d0
00007816 9042                       		sub.w	d2,d0
00007818 48C0                       		ext.l	d0
0000781A E780                       		asl.l	#3,d0
0000781C 81FC 0008                  		divs.w	#8,d0
00007820 48C0                       		ext.l	d0
00007822 E980                       		asl.l	#4,d0
00007824 E180                       		asl.l	#8,d0
00007826 7600                       		moveq	#0,d3
00007828 3602                       		move.w	d2,d3
0000782A E243                       		asr.w	#1,d3
0000782C 323C 0007                  		move.w	#7,d1
00007830                            	@cloudLoop:		
00007830 32C3                       		move.w	d3,(a1)+
00007832 4843                       		swap	d3
00007834 D680                       		add.l	d0,d3
00007836 4843                       		swap	d3
00007838 51C9 FFF6                  		dbf	d1,@cloudLoop
0000783C                            
0000783C 3002                       		move.w	d2,d0
0000783E E640                       		asr.w	#3,d0
00007840 323C 0004                  		move.w	#4,d1
00007844                            	@mountainLoop:		
00007844 32C0                       		move.w	d0,(a1)+
00007846 51C9 FFFC                  		dbf	d1,@mountainLoop
0000784A                            
0000784A 3002                       		move.w	d2,d0
0000784C E440                       		asr.w	#2,d0
0000784E 323C 0005                  		move.w	#5,d1
00007852                            	@buildingLoop:		
00007852 32C0                       		move.w	d0,(a1)+
00007854 51C9 FFFC                  		dbf	d1,@buildingLoop
00007858                            
00007858 3002                       		move.w	d2,d0
0000785A 3202                       		move.w	d2,d1
0000785C E241                       		asr.w	#1,d1
0000785E 9041                       		sub.w	d1,d0
00007860 48C0                       		ext.l	d0
00007862 E980                       		asl.l	#4,d0
00007864 81FC 000E                  		divs.w	#$E,d0
00007868 48C0                       		ext.l	d0
0000786A E980                       		asl.l	#4,d0
0000786C E180                       		asl.l	#8,d0
0000786E 7600                       		moveq	#0,d3
00007870 3602                       		move.w	d2,d3
00007872 E243                       		asr.w	#1,d3
00007874 323C 000D                  		move.w	#$D,d1
00007878                            	@bushLoop:		
00007878 32C3                       		move.w	d3,(a1)+
0000787A 4843                       		swap	d3
0000787C D680                       		add.l	d0,d3
0000787E 4843                       		swap	d3
00007880 51C9 FFF6                  		dbf	d1,@bushLoop
00007884                            
00007884 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007888 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
0000788C 3400                       		move.w	d0,d2
0000788E 0240 01F0                  		andi.w	#$1F0,d0
00007892 E648                       		lsr.w	#3,d0
00007894 45F2 0000                  		lea	(a2,d0),a2
00007898 6000 FF12                  		bra.w	Bg_Scroll_X
0000789C                            ; End of function Deform_SYZ
0000789C                            
0000789C                            ; ---------------------------------------------------------------------------
0000789C                            ; Scrap	Brain Zone background layer deformation	code
0000789C                            ; ---------------------------------------------------------------------------
0000789C                            
0000789C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000789C                            
0000789C                            
0000789C                            Deform_SBZ:
0000789C 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000078A0 48C4                       		ext.l	d4
000078A2 ED84                       		asl.l	#6,d4
000078A4 3A38 F73C                  		move.w	(v_scrshifty).w,d5
000078A8 48C5                       		ext.l	d5
000078AA E985                       		asl.l	#4,d5
000078AC E385                       		asl.l	#1,d5
000078AE 6100 0000                  		bsr.w	BGScroll_XY
000078B2 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000078B8 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000078BC 323C 00DF                  		move.w	#223,d1
000078C0 3038 F700                  		move.w	(v_screenposx).w,d0
000078C4 4440                       		neg.w	d0
000078C6 4840                       		swap	d0
000078C8 3038 F708                  		move.w	(v_bgscreenposx).w,d0
000078CC 4440                       		neg.w	d0
000078CE                            
000078CE                            loc_6576:
000078CE 22C0                       		move.l	d0,(a1)+
000078D0 51C9 FFFC                  		dbf	d1,loc_6576
000078D4 4E75                       		rts	
000078D6                            ;-------------------------------------------------------------------------------
000078D6                            Deform_SBZ2:;loc_68A2:
000078D6 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000078DA 48C4                       		ext.l	d4
000078DC ED84                       		asl.l	#6,d4
000078DE 3A38 F73C                  		move.w	(v_scrshifty).w,d5
000078E2 48C5                       		ext.l	d5
000078E4 E985                       		asl.l	#4,d5
000078E6 E385                       		asl.l	#1,d5
000078E8 6100 0000                  		bsr.w	BGScroll_XY
000078EC 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000078F2 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000078F6 323C 00DF                  		move.w	#223,d1
000078FA 3038 F700                  		move.w	(v_screenposx).w,d0
000078FE 4440                       		neg.w	d0
00007900 4840                       		swap	d0
00007902 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007906 4440                       		neg.w	d0
00007908                            
00007908                            loc_6577:
00007908 22C0                       		move.l	d0,(a1)+
0000790A 51C9 FFFC                  		dbf	d1,loc_6577
0000790E 4E75                       		rts	
00007910                            
00007910                            ; ---------------------------------------------------------------------------
00007910                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007910                            ; ---------------------------------------------------------------------------
00007910                            
00007910                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007910                            
00007910                            
00007910                            ScrollHoriz:
00007910 3838 F700                  		move.w	(v_screenposx).w,d4 ; save old screen position
00007914 6100                       		bsr.s	MoveScreenHoriz
00007916 3038 F700                  		move.w	(v_screenposx).w,d0
0000791A 0240 0010                  		andi.w	#$10,d0
0000791E 1238 F74A                  		move.b	(v_fg_xblock).w,d1
00007922 B300                       		eor.b	d1,d0
00007924 6600                       		bne.s	@return
00007926 0A38 0010 F74A             		eori.b	#$10,(v_fg_xblock).w
0000792C 3038 F700                  		move.w	(v_screenposx).w,d0
00007930 9044                       		sub.w	d4,d0		; compare new with old screen position
00007932 6A00                       		bpl.s	@scrollRight
00007934                            
00007934 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w ; screen moves backward
0000793A 4E75                       		rts	
0000793C                            
0000793C                            	@scrollRight:
0000793C 08F8 0003 F754             		bset	#3,(v_fg_scroll_flags).w ; screen moves forward
00007942                            
00007942                            	@return:
00007942 4E75                       		rts	
00007944                            ; End of function ScrollHoriz
00007944                            
00007944                            
00007944                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007944                            
00007944                            MoveScreenHoriz:
00007944 4A38 FF8B                  		tst.b	($FFFFFF8B).w
00007948 6700 0000                  		beq.w	@cont		
0000794C 4EF9 0000 0000             		jmp	MoveScreenHorizEXT
00007952                            		
00007952                            	@cont:		
00007952 3238 C904                  		move.w	($FFFFC904).w,d1
00007956 6700                       		beq.s	@cont1
00007958 0441 0100                  		sub.w	#$100,d1
0000795C 31C1 C904                  		move.w	d1,($FFFFC904).w
00007960 7200                       		moveq	#0,d1
00007962 1238 C904                  		move.b	($FFFFC904).w,d1
00007966 E509                       		lsl.b	#2,d1
00007968 5801                       		addq.b	#4,d1
0000796A 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
0000796E 9001                       		sub.b	d1,d0
00007970 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007974 3031 0000                  		move.w	(a1,d0.w),d0
00007978 0240 3FFF                  		and.w	#$3FFF,d0
0000797C 6000                       		bra.s	@cont2
0000797E                            		
0000797E                            @cont1:
0000797E 3038 D008                  		move.w	($FFFFD008).w,d0
00007982                            		
00007982                            @cont2:
00007982 9078 F700                  		sub.w	($FFFFF700).w,d0
00007986 0440 0090                          subi.w    #144,d0        ; is distance less than 144px?
0000798A 6500                               bcs.s    SH_BehindMid    ; if yes, branch
0000798C 0440 0010                          subi.w    #16,d0        ; is distance more than 160px?
00007990 6400                               bcc.s    SH_AheadOfMid    ; if yes, branch
00007992 4278 F73A                          clr.w    (v_scrshiftx).w
00007996 4E75                               rts 
00007998                            ; ===========================================================================
00007998                            
00007998                            SH_AheadOfMid:
00007998 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
0000799C 6500                               bcs.s    SH_Ahead16    ; if yes, branch
0000799E 303C 0010                          move.w    #16,d0        ; set to 16 if greater
000079A2                            
000079A2                                SH_Ahead16:
000079A2 D078 F700                          add.w    (v_screenposx).w,d0
000079A6 B078 F72A                          cmp.w    (v_limitright2).w,d0
000079AA 6D00                               blt.s    SH_SetScreen
000079AC 3038 F72A                          move.w    (v_limitright2).w,d0
000079B0                            
000079B0                            SH_SetScreen:
000079B0 3200                               move.w    d0,d1
000079B2 9278 F700                          sub.w    (v_screenposx).w,d1
000079B6 E141                               asl.w    #8,d1
000079B8 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
000079BC 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
000079C0 4E75                               rts 
000079C2                            ; ===========================================================================
000079C2                            
000079C2                            SH_BehindMid:
000079C2 0C40 FFF0                  		cmpi.w	#-$10,d0
000079C6 6400                       		bcc.s	@cont
000079C8 303C FFF0                  		move.w	#-$10,d0	
000079CC                            
000079CC                            @cont:
000079CC D078 F700                  		add.w	(v_screenposx).w,d0
000079D0 B078 F728                  		cmp.w	(v_limitleft2).w,d0
000079D4 6EDA                       		bgt.s	SH_SetScreen
000079D6 3038 F728                  		move.w	(v_limitleft2).w,d0
000079DA 60D4                       		bra.s	SH_SetScreen
000079DC                            ; End of function MoveScreenHoriz
000079DC                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000079DC                            
000079DC                            MoveScreenHorizEXT:
000079DC 3238 C904                  		move.w	($FFFFC904).w,d1
000079E0 6700                       		beq.s	@cont1
000079E2 0441 0100                  		sub.w	#$100,d1
000079E6 31C1 C904                  		move.w	d1,($FFFFC904).w
000079EA 7200                       		moveq	#0,d1
000079EC 1238 C904                  		move.b	($FFFFC904).w,d1
000079F0 E509                       		lsl.b	#2,d1
000079F2 5801                       		addq.b	#4,d1
000079F4 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000079F8 9001                       		sub.b	d1,d0
000079FA 43F8 CB00                  		lea	($FFFFCB00).w,a1
000079FE 3031 0000                  		move.w	(a1,d0.w),d0
00007A02 0240 3FFF                  		and.w	#$3FFF,d0
00007A06 6000                       		bra.s	@cont2
00007A08                            		
00007A08                            @cont1:
00007A08 3038 D008                  		move.w	($FFFFD008).w,d0
00007A0C                            		
00007A0C                            @cont2:
00007A0C 9078 F700                  		sub.w	($FFFFF700).w,d0
00007A10 9078 F7A0                          sub.w    (v_camera_pan).w,d0    ; Horizontal camera pan value
00007A14 6700                               beq.s    SHEXT_ProperlyFramed    ; if zero, branch
00007A16 6500                               bcs.s    SHEXT_BehindMid    ; if less than, branch
00007A18 6000                               bra.s    SHEXT_AheadOfMid    ; branch
00007A1A                            ; ===========================================================================
00007A1A                            
00007A1A                            SHEXT_ProperlyFramed:
00007A1A 4278 F73A                          clr.w    (v_scrshiftx).w
00007A1E 4E75                               rts 
00007A20                            ; ===========================================================================
00007A20                            
00007A20                            SHEXT_AheadOfMid:
00007A20 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007A24 6D00                               blt.s    SHEXT_Ahead16    ; if yes, branch
00007A26 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007A2A                            
00007A2A                            SHEXT_Ahead16:
00007A2A D078 F700                          add.w    (v_screenposx).w,d0
00007A2E B078 F72A                          cmp.w    (v_limitright2).w,d0
00007A32 6D00                               blt.s    SHEXT_SetScreen
00007A34 3038 F72A                          move.w    (v_limitright2).w,d0
00007A38                            
00007A38                            SHEXT_SetScreen:
00007A38 3200                               move.w    d0,d1
00007A3A 9278 F700                          sub.w    (v_screenposx).w,d1
00007A3E E141                               asl.w    #8,d1
00007A40 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007A44 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007A48 4E75                               rts
00007A4A                            
00007A4A                            ; ===========================================================================
00007A4A                            
00007A4A                            SHEXT_BehindMid:
00007A4A 0C40 FFF0                          cmpi.w    #-16,d0        ; is Sonic within 16px of middle area?
00007A4E 6C00                               bge.s    SHEXT_Behind16    ; if no, branch
00007A50 303C FFF0                          move.w    #-16,d0        ; set to -16 if less
00007A54                            
00007A54                            SHEXT_Behind16:
00007A54 D078 F700                          add.w    (v_screenposx).w,d0
00007A58 B078 F728                          cmp.w    (v_limitleft2).w,d0
00007A5C 6EDA                               bgt.s    SHEXT_SetScreen
00007A5E 3038 F728                          move.w    (v_limitleft2).w,d0
00007A62 60D4                               bra.s    SHEXT_SetScreen
00007A64                                  
00007A64                            ; End of function MoveScreenHoriz
00007A64                            
00007A64                            
00007A64                            ; ---------------------------------------------------------------------------
00007A64                            ; Subroutine to	scroll the level vertically as Sonic moves
00007A64                            ; ---------------------------------------------------------------------------
00007A64                            
00007A64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A64                            
00007A64                            
00007A64                            ScrollVertical:
00007A64 7200                       		moveq	#0,d1
00007A66 3038 D00C                  		move.w	(v_player+obY).w,d0
00007A6A 9078 F704                  		sub.w	(v_screenposy).w,d0 ; Sonic's distance from top of screen
00007A6E 0838 0002 D022             		btst	#2,(v_player+obStatus).w ; is Sonic rolling?
00007A74 6700                       		beq.s	SV_NotRolling	; if not, branch
00007A76 5B40                       		subq.w	#5,d0
00007A78                            
00007A78                            	SV_NotRolling:
00007A78 0838 0001 D022             		btst	#1,(v_player+obStatus).w ; is Sonic jumping?
00007A7E 6700                       		beq.s	loc_664A	; if not, branch
00007A80                            
00007A80 0640 0020                  		addi.w	#32,d0
00007A84 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007A88 6500                       		bcs.s	loc_6696
00007A8A 0440 0040                  		subi.w	#64,d0
00007A8E 6400                       		bcc.s	loc_6696
00007A90 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007A94 6600                       		bne.s	loc_66A8
00007A96 6000                       		bra.s	loc_6656
00007A98                            ; ===========================================================================
00007A98                            
00007A98                            loc_664A:
00007A98 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007A9C 6600                       		bne.s	loc_665C
00007A9E 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007AA2 6600                       		bne.s	loc_66A8
00007AA4                            
00007AA4                            loc_6656:
00007AA4 4278 F73C                  		clr.w	(v_scrshifty).w
00007AA8 4E75                       		rts	
00007AAA                            ; ===========================================================================
00007AAA                            
00007AAA                            loc_665C:
00007AAA 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w
00007AB0 6600                       		bne.s	loc_6684
00007AB2 3238 D020                  		move.w	(v_player+obInertia).w,d1
00007AB6 6A00                       		bpl.s	loc_666C
00007AB8 4441                       		neg.w	d1
00007ABA                            
00007ABA                            loc_666C:
00007ABA 0C41 0800                  		cmpi.w	#$800,d1
00007ABE 6400                       		bcc.s	loc_6696
00007AC0 323C 0600                  		move.w	#$600,d1
00007AC4 0C40 0006                  		cmpi.w	#6,d0
00007AC8 6E00                       		bgt.s	loc_66F6
00007ACA 0C40 FFFA                  		cmpi.w	#-6,d0
00007ACE 6D00                       		blt.s	loc_66C0
00007AD0 6000                       		bra.s	loc_66AE
00007AD2                            ; ===========================================================================
00007AD2                            
00007AD2                            loc_6684:
00007AD2 323C 0200                  		move.w	#$200,d1
00007AD6 0C40 0002                  		cmpi.w	#2,d0
00007ADA 6E00                       		bgt.s	loc_66F6
00007ADC 0C40 FFFE                  		cmpi.w	#-2,d0
00007AE0 6D00                       		blt.s	loc_66C0
00007AE2 6000                       		bra.s	loc_66AE
00007AE4                            ; ===========================================================================
00007AE4                            
00007AE4                            loc_6696:
00007AE4 323C 1000                  		move.w	#$1000,d1
00007AE8 0C40 0010                  		cmpi.w	#$10,d0
00007AEC 6E00                       		bgt.s	loc_66F6
00007AEE 0C40 FFF0                  		cmpi.w	#-$10,d0
00007AF2 6D00                       		blt.s	loc_66C0
00007AF4 6000                       		bra.s	loc_66AE
00007AF6                            ; ===========================================================================
00007AF6                            
00007AF6                            loc_66A8:
00007AF6 7000                       		moveq	#0,d0
00007AF8 11C0 F75C                  		move.b	d0,(f_bgscrollvert).w
00007AFC                            
00007AFC                            loc_66AE:
00007AFC 7200                       		moveq	#0,d1
00007AFE 3200                       		move.w	d0,d1
00007B00 D278 F704                  		add.w	(v_screenposy).w,d1
00007B04 4A40                       		tst.w	d0
00007B06 6A00 0000                  		bpl.w	loc_6700
00007B0A 6000 0000                  		bra.w	loc_66CC
00007B0E                            ; ===========================================================================
00007B0E                            
00007B0E                            loc_66C0:
00007B0E 4441                       		neg.w	d1
00007B10 48C1                       		ext.l	d1
00007B12 E181                       		asl.l	#8,d1
00007B14 D2B8 F704                  		add.l	(v_screenposy).w,d1
00007B18 4841                       		swap	d1
00007B1A                            
00007B1A                            loc_66CC:
00007B1A B278 F72C                  		cmp.w	(v_limittop2).w,d1
00007B1E 6E00                       		bgt.s	loc_6724
00007B20 0C41 FF00                  		cmpi.w	#-$100,d1
00007B24 6E00                       		bgt.s	loc_66F0
00007B26 0241 07FF                  		andi.w	#$7FF,d1
00007B2A 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00007B30 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00007B36 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00007B3C 6000                       		bra.s	loc_6724
00007B3E                            ; ===========================================================================
00007B3E                            
00007B3E                            loc_66F0:
00007B3E 3238 F72C                  		move.w	(v_limittop2).w,d1
00007B42 6000                       		bra.s	loc_6724
00007B44                            ; ===========================================================================
00007B44                            
00007B44                            loc_66F6:
00007B44 48C1                       		ext.l	d1
00007B46 E181                       		asl.l	#8,d1
00007B48 D2B8 F704                  		add.l	(v_screenposy).w,d1
00007B4C 4841                       		swap	d1
00007B4E                            
00007B4E                            loc_6700:
00007B4E B278 F72E                  		cmp.w	(v_limitbtm2).w,d1
00007B52 6D00                       		blt.s	loc_6724
00007B54 0441 0800                  		subi.w	#$800,d1
00007B58 6500                       		bcs.s	loc_6720
00007B5A 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00007B60 0478 0800 F704             		subi.w	#$800,(v_screenposy).w
00007B66 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00007B6C 6000                       		bra.s	loc_6724
00007B6E                            ; ===========================================================================
00007B6E                            
00007B6E                            loc_6720:
00007B6E 3238 F72E                  		move.w	(v_limitbtm2).w,d1
00007B72                            
00007B72                            loc_6724:
00007B72 3838 F704                  		move.w	(v_screenposy).w,d4
00007B76 4841                       		swap	d1
00007B78 2601                       		move.l	d1,d3
00007B7A 96B8 F704                  		sub.l	(v_screenposy).w,d3
00007B7E E09B                       		ror.l	#8,d3
00007B80 31C3 F73C                  		move.w	d3,(v_scrshifty).w
00007B84 21C1 F704                  		move.l	d1,(v_screenposy).w
00007B88 3038 F704                  		move.w	(v_screenposy).w,d0
00007B8C 0240 0010                  		andi.w	#$10,d0
00007B90 1238 F74B                  		move.b	(v_fg_yblock).w,d1
00007B94 B300                       		eor.b	d1,d0
00007B96 6600                       		bne.s	@return
00007B98 0A38 0010 F74B             		eori.b	#$10,(v_fg_yblock).w
00007B9E 3038 F704                  		move.w	(v_screenposy).w,d0
00007BA2 9044                       		sub.w	d4,d0
00007BA4 6A00                       		bpl.s	@scrollBottom
00007BA6 08F8 0000 F754             		bset	#0,(v_fg_scroll_flags).w
00007BAC 4E75                       		rts	
00007BAE                            ; ===========================================================================
00007BAE                            
00007BAE                            	@scrollBottom:
00007BAE 08F8 0001 F754             		bset	#1,(v_fg_scroll_flags).w
00007BB4                            
00007BB4                            	@return:
00007BB4 4E75                       		rts	
00007BB6                            ; End of function ScrollVertical
00007BB6                            
00007BB6                            
00007BB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BB6                            ; Scrolls background and sets redraw flags.
00007BB6                            ; d4 - background x offset * $10000
00007BB6                            ; d5 - background y offset * $10000
00007BB6                            
00007BB6                            BGScroll_XY:
00007BB6 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00007BBA 2002                       		move.l	d2,d0
00007BBC D084                       		add.l	d4,d0
00007BBE 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00007BC2 2200                       		move.l	d0,d1
00007BC4 4841                       		swap	d1
00007BC6 0241 0010                  		andi.w	#$10,d1
00007BCA 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00007BCE B701                       		eor.b	d3,d1
00007BD0 6600                       		bne.s	BGScroll_YRelative	; no change in Y
00007BD2 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00007BD8 9082                       		sub.l	d2,d0	; new - old
00007BDA 6A00                       		bpl.s	@scrollRight
00007BDC 08F8 0002 F756             		bset	#2,(v_bg1_scroll_flags).w
00007BE2 6000                       		bra.s	BGScroll_YRelative
00007BE4                            	@scrollRight:
00007BE4 08F8 0003 F756             		bset	#3,(v_bg1_scroll_flags).w
00007BEA                            BGScroll_YRelative:
00007BEA 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00007BEE 2003                       		move.l	d3,d0
00007BF0 D085                       		add.l	d5,d0
00007BF2 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00007BF6 2200                       		move.l	d0,d1
00007BF8 4841                       		swap	d1
00007BFA 0241 0010                  		andi.w	#$10,d1
00007BFE 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007C02 B501                       		eor.b	d2,d1
00007C04 6600                       		bne.s	@return
00007C06 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007C0C 9083                       		sub.l	d3,d0
00007C0E 6A00                       		bpl.s	@scrollBottom
00007C10 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00007C16 4E75                       		rts
00007C18                            	@scrollBottom:
00007C18 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00007C1E                            	@return:
00007C1E 4E75                       		rts
00007C20                            ; End of function BGScroll_XY
00007C20                            
00007C20                            Bg_Scroll_Y:
00007C20 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00007C24 2003                       		move.l	d3,d0
00007C26 D085                       		add.l	d5,d0
00007C28 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00007C2C 2200                       		move.l	d0,d1
00007C2E 4841                       		swap	d1
00007C30 0241 0010                  		andi.w	#$10,d1
00007C34 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007C38 B501                       		eor.b	d2,d1
00007C3A 6600                       		bne.s	@return
00007C3C 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007C42 9083                       		sub.l	d3,d0
00007C44 6A00                       		bpl.s	@scrollBottom
00007C46 08F8 0004 F756             		bset	#4,(v_bg1_scroll_flags).w
00007C4C 4E75                       		rts
00007C4E                            	@scrollBottom:
00007C4E 08F8 0005 F756             		bset	#5,(v_bg1_scroll_flags).w
00007C54                            	@return:
00007C54 4E75                       		rts
00007C56                            
00007C56                            
00007C56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C56                            
00007C56                            
00007C56                            BGScroll_YAbsolute:
00007C56 3638 F70C                  		move.w	(v_bgscreenposy).w,d3
00007C5A 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007C5E 3200                       		move.w	d0,d1
00007C60 0241 0010                  		andi.w	#$10,d1
00007C64 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007C68 B501                       		eor.b	d2,d1
00007C6A 6600                       		bne.s	@return
00007C6C 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007C72 9043                       		sub.w	d3,d0
00007C74 6A00                       		bpl.s	@scrollBottom
00007C76 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00007C7C 4E75                       		rts
00007C7E                            	@scrollBottom:
00007C7E 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00007C84                            	@return:
00007C84 4E75                       		rts
00007C86                            ; End of function BGScroll_YAbsolute
00007C86                            
00007C86                            
00007C86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C86                            ; d6 - bit to set for redraw
00007C86                            
00007C86                            BGScroll_Block1:
00007C86 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00007C8A 2002                       		move.l	d2,d0
00007C8C D084                       		add.l	d4,d0
00007C8E 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00007C92 2200                       		move.l	d0,d1
00007C94 4841                       		swap	d1
00007C96 0241 0010                  		andi.w	#$10,d1
00007C9A 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00007C9E B701                       		eor.b	d3,d1
00007CA0 6600                       		bne.s	@return
00007CA2 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00007CA8 9082                       		sub.l	d2,d0
00007CAA 6A00                       		bpl.s	@scrollRight
00007CAC 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00007CB0 6000                       		bra.s	@return
00007CB2                            	@scrollRight:
00007CB2 5206                       		addq.b	#1,d6
00007CB4 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00007CB8                            	@return:
00007CB8 4E75                       		rts
00007CBA                            ; End of function BGScroll_Block1
00007CBA                            
00007CBA                            
00007CBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CBA                            
00007CBA                            
00007CBA                            BGScroll_Block2:
00007CBA 2438 F710                  		move.l	(v_bg2screenposx).w,d2
00007CBE 2002                       		move.l	d2,d0
00007CC0 D084                       		add.l	d4,d0
00007CC2 21C0 F710                  		move.l	d0,(v_bg2screenposx).w
00007CC6 2200                       		move.l	d0,d1
00007CC8 4841                       		swap	d1
00007CCA 0241 0010                  		andi.w	#$10,d1
00007CCE 1638 F74E                  		move.b	(v_bg2_xblock).w,d3
00007CD2 B701                       		eor.b	d3,d1
00007CD4 6600                       		bne.s	@return
00007CD6 0A38 0010 F74E             		eori.b	#$10,(v_bg2_xblock).w
00007CDC 9082                       		sub.l	d2,d0
00007CDE 6A00                       		bpl.s	@scrollRight
00007CE0 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00007CE4 6000                       		bra.s	@return
00007CE6                            	@scrollRight:
00007CE6 5206                       		addq.b	#1,d6
00007CE8 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00007CEC                            	@return:
00007CEC 4E75                       		rts
00007CEE                            ;-------------------------------------------------------------------------------
00007CEE                            BGScroll_Block3:
00007CEE 2438 F718                  		move.l	(v_bg3screenposx).w,d2
00007CF2 2002                       		move.l	d2,d0
00007CF4 D084                       		add.l	d4,d0
00007CF6 21C0 F718                  		move.l	d0,(v_bg3screenposx).w
00007CFA 2200                       		move.l	d0,d1
00007CFC 4841                       		swap	d1
00007CFE 0241 0010                  		andi.w	#$10,d1
00007D02 1638 F750                  		move.b	(v_bg3_xblock).w,d3
00007D06 B701                       		eor.b	d3,d1
00007D08 6600                       		bne.s	@return
00007D0A 0A38 0010 F750             		eori.b	#$10,(v_bg3_xblock).w
00007D10 9082                       		sub.l	d2,d0
00007D12 6A00                       		bpl.s	@scrollRight
00007D14 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00007D18 6000                       		bra.s	@return
00007D1A                            	@scrollRight:
00007D1A 5206                       		addq.b	#1,d6
00007D1C 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00007D20                            	@return:
00007D20 4E75                       		rts
00007D20 4E75                       		rts
00007D22                            
00007D22                            
00007D22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D22                            
00007D22                            ; sub_6886:
00007D22                            LoadTilesAsYouMove_BGOnly:
00007D22 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00007D28 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00007D2E 45F8 F756                  		lea	(v_bg1_scroll_flags).w,a2
00007D32 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00007D36 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00007D3A 343C 6000                  		move.w	#$6000,d2
00007D3E 6100 0000                  		bsr.w	DrawBGScrollBlock1
00007D42 45F8 F758                  		lea	(v_bg2_scroll_flags).w,a2
00007D46 47F8 F710                  		lea	(v_bg2screenposx).w,a3
00007D4A 6000 0000                  		bra.w	DrawBGScrollBlock2
00007D4E                            ; End of function sub_6886
00007D4E                            
00007D4E                            ; ---------------------------------------------------------------------------
00007D4E                            ; Subroutine to	display	correct	tiles as you move
00007D4E                            ; ---------------------------------------------------------------------------
00007D4E                            
00007D4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D4E                            
00007D4E                            
00007D4E                            LoadTilesAsYouMove:
00007D4E 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00007D54 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00007D5A                            		; First, update the background
00007D5A 45F8 FF32                  		lea	(v_bg1_scroll_flags_dup).w,a2	; Scroll block 1 scroll flags
00007D5E 47F8 FF18                  		lea	(v_bgscreenposx_dup).w,a3	; Scroll block 1 X coordinate
00007D62 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00007D66 343C 6000                  		move.w	#$6000,d2			; VRAM thing for selecting Plane B
00007D6A 6100 0000                  		bsr.w	DrawBGScrollBlock1
00007D6E 45F8 FF34                  		lea	(v_bg2_scroll_flags_dup).w,a2	; Scroll block 2 scroll flags
00007D72 47F8 FF20                  		lea	(v_bg2screenposx_dup).w,a3	; Scroll block 2 X coordinate
00007D76 6100 0000                  		bsr.w	DrawBGScrollBlock2
00007D7A                            		; REV01 added a third scroll block, though, technically,
00007D7A                            		; the RAM for it was already there in REV00
00007D7A 45F8 FF36                  		lea	(v_bg3_scroll_flags_dup).w,a2	; Scroll block 3 scroll flags
00007D7E 47F8 FF28                  		lea	(v_bg3screenposx_dup).w,a3	; Scroll block 3 X coordinate
00007D82 6100 0000                  		bsr.w	DrawBGScrollBlock3
00007D86                            		; Then, update the foreground
00007D86 45F8 FF30                  		lea	(v_fg_scroll_flags_dup).w,a2	; Foreground scroll flags
00007D8A 47F8 FF10                  		lea	(v_screenposx_dup).w,a3		; Foreground X coordinate
00007D8E 49F8 A400                  		lea	(v_lvllayout).w,a4
00007D92 343C 4000                  		move.w	#$4000,d2			; VRAM thing for selecting Plane A
00007D96                            		; The FG's update function is inlined here
00007D96 4A12                       		tst.b	(a2)
00007D98 6700                       		beq.s	locret_6952	; If there are no flags set, nothing needs updating
00007D9A 0892 0000                  		bclr	#0,(a2)
00007D9E 6700                       		beq.s	loc_6908
00007DA0                            		; Draw new tiles at the top
00007DA0 78F0                       		moveq	#-16,d4	; Y coordinate. Note that 16 is the size of a block in pixels
00007DA2 7AF0                       		moveq	#-16,d5 ; X coordinate
00007DA4 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007DA8 78F0                       		moveq	#-16,d4 ; Y coordinate
00007DAA 7AF0                       		moveq	#-16,d5 ; X coordinate
00007DAC 6100 0000                  		bsr.w	DrawBlocks_LR
00007DB0                            
00007DB0                            loc_6908:
00007DB0 0892 0001                  		bclr	#1,(a2)
00007DB4 6700                       		beq.s	loc_6922
00007DB6                            		; Draw new tiles at the bottom
00007DB6 383C 00E0                  		move.w	#224,d4	; Start at bottom of the screen. Since this draws from top to bottom, we don't need 224+16
00007DBA 7AF0                       		moveq	#-16,d5
00007DBC 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007DC0 383C 00E0                  		move.w	#224,d4
00007DC4 7AF0                       		moveq	#-16,d5
00007DC6 6100 0000                  		bsr.w	DrawBlocks_LR
00007DCA                            
00007DCA                            loc_6922:
00007DCA 0892 0002                  		bclr	#2,(a2)
00007DCE 6700                       		beq.s	loc_6938
00007DD0                            		; Draw new tiles on the left
00007DD0 78F0                       		moveq	#-16,d4
00007DD2 7AF0                       		moveq	#-16,d5
00007DD4 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007DD8 78F0                       		moveq	#-16,d4
00007DDA 7AF0                       		moveq	#-16,d5
00007DDC 6100 0000                  		bsr.w	DrawBlocks_TB
00007DE0                            
00007DE0                            loc_6938:
00007DE0 0892 0003                  		bclr	#3,(a2)
00007DE4 6700                       		beq.s	locret_6952
00007DE6                            		; Draw new tiles on the right
00007DE6 78F0                       		moveq	#-16,d4
00007DE8 3A3C 0140                  		move.w	#320,d5
00007DEC 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007DF0 78F0                       		moveq	#-16,d4
00007DF2 3A3C 0140                  		move.w	#320,d5
00007DF6 6100 0000                  		bsr.w	DrawBlocks_TB
00007DFA                            
00007DFA                            locret_6952:
00007DFA 4E75                       		rts	
00007DFC                            ; End of function LoadTilesAsYouMove
00007DFC                            
00007DFC                            
00007DFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DFC                            
00007DFC                            ; sub_6954:
00007DFC                            DrawBGScrollBlock1:
00007DFC 4A12                       		tst.b	(a2)
00007DFE 6700 0000                  		beq.w	locret_69F2
00007E02 0892 0000                  		bclr	#0,(a2)
00007E06 6700                       		beq.s	loc_6972
00007E08                            		; Draw new tiles at the top
00007E08 78F0                       		moveq	#-16,d4
00007E0A 7AF0                       		moveq	#-16,d5
00007E0C 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007E10 78F0                       		moveq	#-16,d4
00007E12 7AF0                       		moveq	#-16,d5
00007E14 6100 0000                  			bsr.w	DrawBlocks_LR
00007E18                            
00007E18                            loc_6972:
00007E18 0892 0001                  		bclr	#1,(a2)
00007E1C 6700                       		beq.s	loc_698E
00007E1E                            		; Draw new tiles at the top
00007E1E 383C 00E0                  		move.w	#224,d4
00007E22 7AF0                       		moveq	#-16,d5
00007E24 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007E28 383C 00E0                  		move.w	#224,d4
00007E2C 7AF0                       		moveq	#-16,d5
00007E2E 6100 0000                  			bsr.w	DrawBlocks_LR
00007E32                            
00007E32                            loc_698E:
00007E32 0892 0002                  		bclr	#2,(a2)
00007E36                            
00007E36                            
00007E36 6700                       			beq.s	locj_6D56
00007E38                            			; Draw new tiles on the left
00007E38 78F0                       			moveq	#-16,d4
00007E3A 7AF0                       			moveq	#-16,d5
00007E3C 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007E40 78F0                       			moveq	#-16,d4
00007E42 7AF0                       			moveq	#-16,d5
00007E44 6100 0000                  			bsr.w	DrawBlocks_TB
00007E48                            	locj_6D56:
00007E48                            
00007E48 0892 0003                  			bclr	#3,(a2)
00007E4C 6700                       			beq.s	locj_6D70
00007E4E                            			; Draw new tiles on the right
00007E4E 78F0                       			moveq	#-16,d4
00007E50 3A3C 0140                  			move.w	#320,d5
00007E54 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007E58 78F0                       			moveq	#-16,d4
00007E5A 3A3C 0140                  			move.w	#320,d5
00007E5E 6100 0000                  			bsr.w	DrawBlocks_TB
00007E62                            	locj_6D70:
00007E62                            
00007E62 0892 0004                  			bclr	#4,(a2)
00007E66 6700                       			beq.s	locj_6D88
00007E68                            			; Draw entire row at the top
00007E68 78F0                       			moveq	#-16,d4
00007E6A 7A00                       			moveq	#0,d5
00007E6C 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00007E70 78F0                       			moveq	#-16,d4
00007E72 7A00                       			moveq	#0,d5
00007E74 7C1F                       			moveq	#(512/16)-1,d6
00007E76 6100 0000                  			bsr.w	DrawBlocks_LR_3
00007E7A                            	locj_6D88:
00007E7A                            
00007E7A 0892 0005                  			bclr	#5,(a2)
00007E7E 6700                       			beq.s	locret_69F2
00007E80                            			; Draw entire row at the bottom
00007E80 383C 00E0                  			move.w	#224,d4
00007E84 7A00                       			moveq	#0,d5
00007E86 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00007E8A 383C 00E0                  			move.w	#224,d4
00007E8E 7A00                       			moveq	#0,d5
00007E90 7C1F                       			moveq	#(512/16)-1,d6
00007E92 6100 0000                  			bsr.w	DrawBlocks_LR_3
00007E96                            
00007E96                            locret_69F2:
00007E96 4E75                       		rts	
00007E98                            ; End of function DrawBGScrollBlock1
00007E98                            
00007E98                            
00007E98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E98                            
00007E98                            ; Essentially, this draws everything that isn't scroll block 1
00007E98                            ; sub_69F4:
00007E98                            DrawBGScrollBlock2:
00007E98                            
00007E98 4A12                       			tst.b	(a2)
00007E9A 6700 0000                  			beq.w	locj_6DF2
00007E9E 0C38 0005 FE10             			cmpi.b	#id_SBZ,(v_zone).w
00007EA4 6700 0000                  			beq.w	Draw_SBz
00007EA8 0892 0000                  			bclr	#0,(a2)
00007EAC 6700                       			beq.s	locj_6DD2
00007EAE                            			; Draw new tiles on the left
00007EAE 383C 0070                  			move.w	#224/2,d4	; Draw the bottom half of the screen
00007EB2 7AF0                       			moveq	#-16,d5
00007EB4 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007EB8 383C 0070                  			move.w	#224/2,d4
00007EBC 7AF0                       			moveq	#-16,d5
00007EBE 7C02                       			moveq	#3-1,d6		; Draw three rows... could this be a repurposed version of the above unused code?
00007EC0 6100 0000                  			bsr.w	DrawBlocks_TB_2
00007EC4                            	locj_6DD2:
00007EC4 0892 0001                  			bclr	#1,(a2)
00007EC8 6700                       			beq.s	locj_6DF2
00007ECA                            			; Draw new tiles on the right
00007ECA 383C 0070                  			move.w	#224/2,d4
00007ECE 3A3C 0140                  			move.w	#320,d5
00007ED2 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007ED6 383C 0070                  			move.w	#224/2,d4
00007EDA 3A3C 0140                  			move.w	#320,d5
00007EDE 7C02                       			moveq	#3-1,d6
00007EE0 6100 0000                  			bsr.w	DrawBlocks_TB_2
00007EE4                            	locj_6DF2:
00007EE4 4E75                       			rts
00007EE6                            ;===============================================================================
00007EE6                            	locj_6DF4:
00007EE6 0000 0000 0006 0606 0606+  			dc.b $00,$00,$00,$00,$00,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$04
00007EF6 0404 0404 0404 0202 0202+  			dc.b $04,$04,$04,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00007F06 0200                       			dc.b $02,$00						
00007F08                            ;===============================================================================
00007F08                            	Draw_SBz:
00007F08 78F0                       			moveq	#-16,d4
00007F0A 0892 0000                  			bclr	#0,(a2)
00007F0E 6600                       			bne.s	locj_6E28
00007F10 0892 0001                  			bclr	#1,(a2)
00007F14 6700                       			beq.s	locj_6E72
00007F16 383C 00E0                  			move.w	#224,d4
00007F1A                            	locj_6E28:
00007F1A 41F9 0000 7EE7             			lea	(locj_6DF4+1).l,a0
00007F20 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00007F24 D044                       			add.w	d4,d0
00007F26 0240 01F0                  			andi.w	#$1F0,d0
00007F2A E848                       			lsr.w	#4,d0
00007F2C 1030 0000                  			move.b	(a0,d0.w),d0
00007F30 47F9 0000 0000             			lea	(locj_6FE4).l,a3
00007F36 3673 0000                  			movea.w	(a3,d0.w),a3
00007F3A 6700                       			beq.s	locj_6E5E
00007F3C 7AF0                       			moveq	#-16,d5
00007F3E 48E7 0C00                  			movem.l	d4/d5,-(sp)
00007F42 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007F46 4CDF 0030                  			movem.l	(sp)+,d4/d5
00007F4A 6100 0000                  			bsr.w	DrawBlocks_LR
00007F4E 6000                       			bra.s	locj_6E72
00007F50                            ;===============================================================================
00007F50                            	locj_6E5E:
00007F50 7A00                       			moveq	#0,d5
00007F52 48E7 0C00                  			movem.l	d4/d5,-(sp)
00007F56 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00007F5A 4CDF 0030                  			movem.l	(sp)+,d4/d5
00007F5E 7C1F                       			moveq	#(512/16)-1,d6
00007F60 6100 0000                  			bsr.w	DrawBlocks_LR_3
00007F64                            	locj_6E72:
00007F64 4A12                       			tst.b	(a2)
00007F66 6600                       			bne.s	locj_6E78
00007F68 4E75                       			rts
00007F6A                            ;===============================================================================			
00007F6A                            	locj_6E78:
00007F6A 78F0                       			moveq	#-16,d4
00007F6C 7AF0                       			moveq	#-16,d5
00007F6E 1012                       			move.b	(a2),d0
00007F70 0200 00A8                  			andi.b	#$A8,d0
00007F74 6700                       			beq.s	locj_6E8C
00007F76 E208                       			lsr.b	#1,d0
00007F78 1480                       			move.b	d0,(a2)
00007F7A 3A3C 0140                  			move.w	#320,d5
00007F7E                            	locj_6E8C:
00007F7E 41F9 0000 7EE6             			lea	(locj_6DF4).l,a0
00007F84 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00007F88 0240 01F0                  			andi.w	#$1F0,d0
00007F8C E848                       			lsr.w	#4,d0
00007F8E 41F0 0000                  			lea	(a0,d0.w),a0
00007F92 6000 0000                  			bra.w	locj_6FEC						
00007F96                            ;===============================================================================
00007F96                            
00007F96                            
00007F96                            	; locj_6EA4:
00007F96                            	DrawBGScrollBlock3:
00007F96 4A12                       			tst.b	(a2)
00007F98 6700 0000                  			beq.w	locj_6EF0
00007F9C 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
00007FA2 6700 0000                  			beq.w	Draw_Mz
00007FA6 0892 0000                  			bclr	#0,(a2)
00007FAA 6700                       			beq.s	locj_6ED0
00007FAC                            			; Draw new tiles on the left
00007FAC 383C 0040                  			move.w	#$40,d4
00007FB0 7AF0                       			moveq	#-16,d5
00007FB2 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007FB6 383C 0040                  			move.w	#$40,d4
00007FBA 7AF0                       			moveq	#-16,d5
00007FBC 7C02                       			moveq	#3-1,d6
00007FBE 6100 0000                  			bsr.w	DrawBlocks_TB_2
00007FC2                            	locj_6ED0:
00007FC2 0892 0001                  			bclr	#1,(a2)
00007FC6 6700                       			beq.s	locj_6EF0
00007FC8                            			; Draw new tiles on the right
00007FC8 383C 0040                  			move.w	#$40,d4
00007FCC 3A3C 0140                  			move.w	#320,d5
00007FD0 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007FD4 383C 0040                  			move.w	#$40,d4
00007FD8 3A3C 0140                  			move.w	#320,d5
00007FDC 7C02                       			moveq	#3-1,d6
00007FDE 6100 0000                  			bsr.w	DrawBlocks_TB_2
00007FE2                            	locj_6EF0:
00007FE2 4E75                       			rts
00007FE4                            	locj_6EF2:
00007FE4 0000 0000 0000 0606 0404+  			dc.b $00,$00,$00,$00,$00,$00,$06,$06,$04,$04,$04,$04,$04,$04,$04,$04
00007FF4 0402 0202 0202 0202 0202+  			dc.b $04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008004 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008014 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008024 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008034 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008044 0200                       			dc.b $02,$00
00008046                            ;===============================================================================
00008046                            	Draw_Mz:
00008046 78F0                       			moveq	#-16,d4
00008048 0892 0000                  			bclr	#0,(a2)
0000804C 6600                       			bne.s	locj_6F66
0000804E 0892 0001                  			bclr	#1,(a2)
00008052 6700                       			beq.s	locj_6FAE
00008054 383C 00E0                  			move.w	#224,d4
00008058                            	locj_6F66:
00008058 41F9 0000 7FE5             			lea	(locj_6EF2+1).l,a0
0000805E 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008062 0440 0200                  			subi.w	#$200,d0
00008066 D044                       			add.w	d4,d0
00008068 0240 07F0                  			andi.w	#$7F0,d0
0000806C E848                       			lsr.w	#4,d0
0000806E 1030 0000                  			move.b	(a0,d0.w),d0
00008072 367B 0000                  			movea.w	locj_6FE4(pc,d0.w),a3
00008076 6700                       			beq.s	locj_6F9A
00008078 7AF0                       			moveq	#-16,d5
0000807A 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000807E 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008082 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008086 6100 0000                  			bsr.w	DrawBlocks_LR
0000808A 6000                       			bra.s	locj_6FAE
0000808C                            ;===============================================================================
0000808C                            	locj_6F9A:
0000808C 7A00                       			moveq	#0,d5
0000808E 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008092 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008096 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000809A 7C1F                       			moveq	#(512/16)-1,d6
0000809C 6100 0000                  			bsr.w	DrawBlocks_LR_3
000080A0                            	locj_6FAE:
000080A0 4A12                       			tst.b	(a2)
000080A2 6600                       			bne.s	locj_6FB4
000080A4 4E75                       			rts
000080A6                            ;===============================================================================			
000080A6                            	locj_6FB4:
000080A6 78F0                       			moveq	#-16,d4
000080A8 7AF0                       			moveq	#-16,d5
000080AA 1012                       			move.b	(a2),d0
000080AC 0200 00A8                  			andi.b	#$A8,d0
000080B0 6700                       			beq.s	locj_6FC8
000080B2 E208                       			lsr.b	#1,d0
000080B4 1480                       			move.b	d0,(a2)
000080B6 3A3C 0140                  			move.w	#320,d5
000080BA                            	locj_6FC8:
000080BA 41F9 0000 7FE4             			lea	(locj_6EF2).l,a0
000080C0 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000080C4 0440 0200                  			subi.w	#$200,d0
000080C8 0240 07F0                  			andi.w	#$7F0,d0
000080CC E848                       			lsr.w	#4,d0
000080CE 41F0 0000                  			lea	(a0,d0.w),a0
000080D2 6000 0000                  			bra.w	locj_6FEC
000080D6                            ;===============================================================================			
000080D6                            	locj_6FE4:
000080D6 FF18 FF18 FF20 FF28        			dc.w v_bgscreenposx_dup, v_bgscreenposx_dup, v_bg2screenposx_dup, v_bg3screenposx_dup
000080DE                            	locj_6FEC:
000080DE 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000080E0 2E3C 0080 0000             			move.l	#$800000,d7
000080E6                            	locj_6FF4:			
000080E6 7000                       			moveq	#0,d0
000080E8 1018                       			move.b	(a0)+,d0
000080EA 0112                       			btst	d0,(a2)
000080EC 6700                       			beq.s	locj_701C
000080EE 367B 00E6                  			move.w	locj_6FE4(pc,d0.w),a3
000080F2 48E7 0C80                  			movem.l	d4/d5/a0,-(sp)
000080F6 48E7 0C00                  			movem.l	d4/d5,-(sp)
000080FA 6100 0000                  			bsr.w	GetBlockData
000080FE 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008102 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008106 6100 0000                  			bsr.w	DrawBlock
0000810A 4CDF 0130                  			movem.l	(sp)+,d4/d5/a0
0000810E                            	locj_701C:
0000810E 0644 0010                  			addi.w	#16,d4
00008112 51CE FFD2                  			dbf	d6,locj_6FF4
00008116 4212                       			clr.b	(a2)
00008118 4E75                       			rts			
0000811A                            
0000811A                            
0000811A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000811A                            
0000811A                            ; Don't be fooled by the name: this function's for drawing from left to right
0000811A                            ; when the camera's moving up or down
0000811A                            ; DrawTiles_LR:
0000811A                            DrawBlocks_LR:
0000811A 7C15                       		moveq	#((320+16+16)/16)-1,d6	; Draw the entire width of the screen + two extra columns
0000811C                            ; DrawTiles_LR_2:
0000811C                            DrawBlocks_LR_2:
0000811C 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
00008122 2200                       		move.l	d0,d1
00008124                            
00008124                            	@loop:
00008124 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008128 6100 0000                  		bsr.w	GetBlockData
0000812C 2001                       		move.l	d1,d0
0000812E 6100 0000                  		bsr.w	DrawBlock
00008132 5801                       		addq.b	#4,d1		; Two tiles ahead
00008134 0201 007F                  		andi.b	#$7F,d1		; Wrap around row
00008138 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000813C 0645 0010                  		addi.w	#16,d5		; Move X coordinate one block ahead
00008140 51CE FFE2                  		dbf	d6,@loop
00008144 4E75                       		rts
00008146                            ; End of function DrawBlocks_LR
00008146                            
00008146                            ; DrawTiles_LR_3:
00008146                            DrawBlocks_LR_3:
00008146 2E3C 0080 0000             		move.l	#$800000,d7
0000814C 2200                       		move.l	d0,d1
0000814E                            
0000814E                            	@loop:
0000814E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008152 6100 0000                  		bsr.w	GetBlockData_2
00008156 2001                       		move.l	d1,d0
00008158 6100 0000                  		bsr.w	DrawBlock
0000815C 5801                       		addq.b	#4,d1
0000815E 0201 007F                  		andi.b	#$7F,d1
00008162 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008166 0645 0010                  		addi.w	#16,d5
0000816A 51CE FFE2                  		dbf	d6,@loop
0000816E 4E75                       		rts	
00008170                            ; End of function DrawBlocks_LR_3
00008170                            
00008170                            
00008170                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008170                            
00008170                            ; Don't be fooled by the name: this function's for drawing from top to bottom
00008170                            ; when the camera's moving left or right
00008170                            ; DrawTiles_TB:
00008170                            DrawBlocks_TB:
00008170 7C0F                       		moveq	#((224+16+16)/16)-1,d6	; Draw the entire height of the screen + two extra rows
00008172                            ; DrawTiles_TB_2:
00008172                            DrawBlocks_TB_2:
00008172 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
00008178 2200                       		move.l	d0,d1
0000817A                            
0000817A                            	@loop:
0000817A 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000817E 6100 0000                  		bsr.w	GetBlockData
00008182 2001                       		move.l	d1,d0
00008184 6100 0000                  		bsr.w	DrawBlock
00008188 0641 0100                  		addi.w	#$100,d1	; Two rows ahead
0000818C 0241 0FFF                  		andi.w	#$FFF,d1	; Wrap around plane
00008190 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008194 0644 0010                  		addi.w	#16,d4		; Move X coordinate one block ahead
00008198 51CE FFE0                  		dbf	d6,@loop
0000819C 4E75                       		rts	
0000819E                            ; End of function DrawBlocks_TB_2
0000819E                            
0000819E                            
0000819E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000819E                            
0000819E                            ; Draws a block's worth of tiles
0000819E                            ; Parameters:
0000819E                            ; a0 = Pointer to block metadata (block index and X/Y flip)
0000819E                            ; a1 = Pointer to block
0000819E                            ; a5 = Pointer to VDP command port
0000819E                            ; a6 = Pointer to VDP data port
0000819E                            ; d0 = VRAM command to access plane
0000819E                            ; d2 = VRAM plane A/B specifier
0000819E                            ; d7 = Plane row delta
0000819E                            ; DrawTiles:
0000819E                            DrawBlock:
0000819E 8042                       		or.w	d2,d0	; OR in that plane A/B specifier to the VRAM command
000081A0 4840                       		swap	d0
000081A2 0810 0004                  		btst	#4,(a0)	; Check Y-flip bit
000081A6 6600                       		bne.s	DrawFlipY
000081A8 0810 0003                  		btst	#3,(a0)	; Check X-flip bit
000081AC 6600                       		bne.s	DrawFlipX
000081AE 2A80                       		move.l	d0,(a5)
000081B0 2C99                       		move.l	(a1)+,(a6)	; Write top two tiles
000081B2 D087                       		add.l	d7,d0		; Next row
000081B4 2A80                       		move.l	d0,(a5)
000081B6 2C99                       		move.l	(a1)+,(a6)	; Write bottom two tiles
000081B8 4E75                       		rts	
000081BA                            ; ===========================================================================
000081BA                            
000081BA                            DrawFlipX:
000081BA 2A80                       		move.l	d0,(a5)
000081BC 2819                       		move.l	(a1)+,d4
000081BE 0A84 0800 0800             		eori.l	#$8000800,d4	; Invert X-flip bits of each tile
000081C4 4844                       		swap	d4		; Swap the tiles around
000081C6 2C84                       		move.l	d4,(a6)		; Write top two tiles
000081C8 D087                       		add.l	d7,d0		; Next row
000081CA 2A80                       		move.l	d0,(a5)
000081CC 2819                       		move.l	(a1)+,d4
000081CE 0A84 0800 0800             		eori.l	#$8000800,d4
000081D4 4844                       		swap	d4
000081D6 2C84                       		move.l	d4,(a6)		; Write bottom two tiles
000081D8 4E75                       		rts	
000081DA                            ; ===========================================================================
000081DA                            
000081DA                            DrawFlipY:
000081DA 0810 0003                  		btst	#3,(a0)
000081DE 6600                       		bne.s	DrawFlipXY
000081E0 2A80                       		move.l	d0,(a5)
000081E2 2A19                       		move.l	(a1)+,d5
000081E4 2819                       		move.l	(a1)+,d4
000081E6 0A84 1000 1000             		eori.l	#$10001000,d4
000081EC 2C84                       		move.l	d4,(a6)
000081EE D087                       		add.l	d7,d0
000081F0 2A80                       		move.l	d0,(a5)
000081F2 0A85 1000 1000             		eori.l	#$10001000,d5
000081F8 2C85                       		move.l	d5,(a6)
000081FA 4E75                       		rts	
000081FC                            ; ===========================================================================
000081FC                            
000081FC                            DrawFlipXY:
000081FC 2A80                       		move.l	d0,(a5)
000081FE 2A19                       		move.l	(a1)+,d5
00008200 2819                       		move.l	(a1)+,d4
00008202 0A84 1800 1800             		eori.l	#$18001800,d4
00008208 4844                       		swap	d4
0000820A 2C84                       		move.l	d4,(a6)
0000820C D087                       		add.l	d7,d0
0000820E 2A80                       		move.l	d0,(a5)
00008210 0A85 1800 1800             		eori.l	#$18001800,d5
00008216 4845                       		swap	d5
00008218 2C85                       		move.l	d5,(a6)
0000821A 4E75                       		rts	
0000821C                            ; End of function DrawBlocks
0000821C                            
0000821C                            ; ===========================================================================
0000821C                            ; unused garbage
0000821C                            
0000821C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000821C                            
0000821C                            ; Gets address of block at a certain coordinate
0000821C                            ; Parameters:
0000821C                            ; a4 = Pointer to level layout
0000821C                            ; d4 = Relative Y coordinate
0000821C                            ; d5 = Relative X coordinate
0000821C                            ; Returns:
0000821C                            ; a0 = Address of block metadata
0000821C                            ; a1 = Address of block
0000821C                            ; DrawBlocks:
0000821C                            GetBlockData:
0000821C DA53                       			add.w	(a3),d5
0000821E                            	GetBlockData_2:
0000821E D86B 0004                  			add.w	4(a3),d4
00008222 43F8 B000                  			lea	(v_16x16).w,a1
00008226                            		; Turn Y coordinate into index into level layout
00008226 3604                       		move.w	d4,d3
00008228 E24B                       		lsr.w	#1,d3
0000822A 0243 0380                  		andi.w	#$380,d3
0000822E                            		; Turn X coordinate into index into level layout
0000822E E64D                       		lsr.w	#3,d5
00008230 3005                       		move.w	d5,d0
00008232 EA48                       		lsr.w	#5,d0
00008234 0240 007F                  		andi.w	#$7F,d0
00008238                            		; Get chunk from level layout
00008238 D043                       		add.w	d3,d0
0000823A 76FF                       		moveq	#-1,d3
0000823C 1634 0000                  		move.b	(a4,d0.w),d3
00008240 6700                       		beq.s	locret_6C1E	; If chunk 00, just return a pointer to the first block (expected to be empty)
00008242                            		; Turn chunk ID into index into chunk table
00008242 5303                       		subq.b	#1,d3
00008244 0243 007F                  		andi.w	#$7F,d3
00008248 EE5B                       		ror.w	#7,d3
0000824A                            		; Turn Y coordinate into index into chunk
0000824A D844                       		add.w	d4,d4
0000824C 0244 01E0                  		andi.w	#$1E0,d4
00008250                            		; Turn X coordinate into index into chunk
00008250 0245 001E                  		andi.w	#$1E,d5
00008254                            		; Get block metadata from chunk
00008254 D644                       		add.w	d4,d3
00008256 D645                       		add.w	d5,d3
00008258 2043                       		movea.l	d3,a0
0000825A 3610                       		move.w	(a0),d3
0000825C                            		; Turn block ID into address
0000825C 0243 03FF                  		andi.w	#$3FF,d3
00008260 E74B                       		lsl.w	#3,d3
00008262 D2C3                       		adda.w	d3,a1
00008264                            
00008264                            locret_6C1E:
00008264 4E75                       		rts	
00008266                            ; End of function GetBlockData
00008266                            
00008266                            
00008266                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008266                            
00008266                            ; Produces a VRAM plane access command from coordinates
00008266                            ; Parameters:
00008266                            ; d4 = Relative Y coordinate
00008266                            ; d5 = Relative X coordinate
00008266                            ; Returns VDP command in d0
00008266                            Calc_VRAM_Pos:
00008266 DA53                       			add.w	(a3),d5
00008268                            	Calc_VRAM_Pos_2:
00008268 D86B 0004                  			add.w	4(a3),d4
0000826C                            		; Floor the coordinates to the nearest pair of tiles (the size of a block).
0000826C                            		; Also note that this wraps the value to the size of the plane:
0000826C                            		; The plane is 64*8 wide, so wrap at $100, and it's 32*8 tall, so wrap at $200
0000826C 0244 00F0                  		andi.w	#$F0,d4
00008270 0245 01F0                  		andi.w	#$1F0,d5
00008274                            		; Transform the adjusted coordinates into a VDP command
00008274 E94C                       		lsl.w	#4,d4
00008276 E44D                       		lsr.w	#2,d5
00008278 D845                       		add.w	d5,d4
0000827A 7003                       		moveq	#3,d0	; Highest bits of plane VRAM address
0000827C 4840                       		swap	d0
0000827E 3004                       		move.w	d4,d0
00008280 4E75                       		rts	
00008282                            ; End of function Calc_VRAM_Pos
00008282                            
00008282                            
00008282                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008282                            ; not used
00008282                            
00008282                            ; This is just like Calc_VRAM_Pos, but seemingly for an earlier
00008282                            ; VRAM layout: the only difference is the high bits of the
00008282                            ; plane's VRAM address, which are 10 instead of 11.
00008282                            ; Both the foreground and background are at $C000 and $E000
00008282                            ; respectively, so this one starting at $8000 makes no sense.
00008282                            ; sub_6C3C:
00008282                            Calc_VRAM_Pos_Unknown:
00008282 D86B 0004                  		add.w	4(a3),d4
00008286 DA53                       		add.w	(a3),d5
00008288 0244 00F0                  		andi.w	#$F0,d4
0000828C 0245 01F0                  		andi.w	#$1F0,d5
00008290 E94C                       		lsl.w	#4,d4
00008292 E44D                       		lsr.w	#2,d5
00008294 D845                       		add.w	d5,d4
00008296 7002                       		moveq	#2,d0
00008298 4840                       		swap	d0
0000829A 3004                       		move.w	d4,d0
0000829C 4E75                       		rts	
0000829E                            ; End of function Calc_VRAM_Pos_Unknown
0000829E                            
0000829E                            ; ---------------------------------------------------------------------------
0000829E                            ; Subroutine to	load tiles as soon as the level	appears
0000829E                            ; ---------------------------------------------------------------------------
0000829E                            
0000829E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000829E                            
0000829E                            
0000829E                            LoadTilesFromStart:
0000829E 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000082A4 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000082AA 47F8 F700                  		lea	(v_screenposx).w,a3
000082AE 49F8 A400                  		lea	(v_lvllayout).w,a4
000082B2 343C 4000                  		move.w	#$4000,d2
000082B6 6100                       		bsr.s	DrawChunks
000082B8 47F8 F708                  		lea	(v_bgscreenposx).w,a3
000082BC 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
000082C0 343C 6000                  		move.w	#$6000,d2
000082C4 4A38 FE10                  			tst.b	(v_zone).w
000082C8 6700 0000                  			beq.w	Draw_GHz_Bg
000082CC 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
000082D2 6700 0000                  			beq.w	Draw_Mz_Bg
000082D6 0C78 0500 FE10             			cmpi.w	#(id_SBZ<<8)+0,(v_zone).w
000082DC 6700 0000                  			beq.w	Draw_SBz_Bg
000082E0 0C38 0006 FE10             			cmpi.b	#id_EndZ,(v_zone).w
000082E6 6700 0000                  			beq.w	Draw_GHz_Bg
000082EA                            ; End of function LoadTilesFromStart
000082EA                            
000082EA                            
000082EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082EA                            
000082EA                            
000082EA                            DrawChunks:
000082EA 78F0                       		moveq	#-16,d4
000082EC 7C0F                       		moveq	#((224+16+16)/16)-1,d6
000082EE                            
000082EE                            	@loop:
000082EE 48E7 0E00                  		movem.l	d4-d6,-(sp)
000082F2 7A00                       		moveq	#0,d5
000082F4 3204                       		move.w	d4,d1
000082F6 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
000082FA 3801                       		move.w	d1,d4
000082FC 7A00                       		moveq	#0,d5
000082FE 7C1F                       		moveq	#(512/16)-1,d6
00008300 6100 FE1A                  		bsr.w	DrawBlocks_LR_2
00008304 4CDF 0070                  		movem.l	(sp)+,d4-d6
00008308 0644 0010                  		addi.w	#16,d4
0000830C 51CE FFE0                  		dbf	d6,@loop
00008310 4E75                       		rts	
00008312                            ; End of function DrawChunks
00008312                            
00008312                            	Draw_GHz_Bg:
00008312 7800                       			moveq	#0,d4
00008314 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008316                            	locj_7224:			
00008316 48E7 0E00                  			movem.l	d4-d6,-(sp)
0000831A 41F9 0000 0000             			lea	(locj_724a),a0
00008320 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008324 D044                       			add.w	d4,d0
00008326 0240 00F0                  			andi.w	#$F0,d0
0000832A 6100 0000                  			bsr.w	locj_72Ba
0000832E 4CDF 0070                  			movem.l	(sp)+,d4-d6
00008332 0644 0010                  			addi.w	#16,d4
00008336 51CE FFDE                  			dbf	d6,locj_7224
0000833A 4E75                       			rts
0000833C                            	locj_724a:
0000833C 0000 0000 0606 0604 0404+  			dc.b $00,$00,$00,$00,$06,$06,$06,$04,$04,$04,$00,$00,$00,$00,$00,$00
0000834C                            ;-------------------------------------------------------------------------------
0000834C                            	Draw_Mz_Bg:;locj_725a:
0000834C 78F0                       			moveq	#-16,d4
0000834E 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008350                            	locj_725E:			
00008350 48E7 0E00                  			movem.l	d4-d6,-(sp)
00008354 41F8 7FE5                  			lea	(locj_6EF2+1),a0
00008358 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
0000835C 0440 0200                  			subi.w	#$200,d0
00008360 D044                       			add.w	d4,d0
00008362 0240 07F0                  			andi.w	#$7F0,d0
00008366 6100 0000                  			bsr.w	locj_72Ba
0000836A 4CDF 0070                  			movem.l	(sp)+,d4-d6
0000836E 0644 0010                  			addi.w	#16,d4
00008372 51CE FFDC                  			dbf	d6,locj_725E
00008376 4E75                       			rts
00008378                            ;-------------------------------------------------------------------------------
00008378                            	Draw_SBz_Bg:;locj_7288:
00008378 78F0                       			moveq	#-16,d4
0000837A 7C0F                       			moveq	#((224+16+16)/16)-1,d6
0000837C                            	locj_728C:			
0000837C 48E7 0E00                  			movem.l	d4-d6,-(sp)
00008380 41F8 7EE7                  			lea	(locj_6DF4+1),a0
00008384 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008388 D044                       			add.w	d4,d0
0000838A 0240 01F0                  			andi.w	#$1F0,d0
0000838E 6100 0000                  			bsr.w	locj_72Ba
00008392 4CDF 0070                  			movem.l	(sp)+,d4-d6
00008396 0644 0010                  			addi.w	#16,d4
0000839A 51CE FFE0                  			dbf	d6,locj_728C
0000839E 4E75                       			rts
000083A0                            ;-------------------------------------------------------------------------------
000083A0                            	locj_72B2:
000083A0 F708 F708 F710 F718        			dc.w v_bgscreenposx, v_bgscreenposx, v_bg2screenposx, v_bg3screenposx
000083A8                            	locj_72Ba:
000083A8 E848                       			lsr.w	#4,d0
000083AA 1030 0000                  			move.b	(a0,d0.w),d0
000083AE 367B 00F0                  			movea.w	locj_72B2(pc,d0.w),a3
000083B2 6700                       			beq.s	locj_72da
000083B4 7AF0                       			moveq	#-16,d5
000083B6 48E7 0C00                  			movem.l	d4/d5,-(sp)
000083BA 6100 FEAA                  			bsr.w	Calc_VRAM_Pos
000083BE 4CDF 0030                  			movem.l	(sp)+,d4/d5
000083C2 6100 FD56                  			bsr.w	DrawBlocks_LR
000083C6 6000                       			bra.s	locj_72EE
000083C8                            	locj_72da:
000083C8 7A00                       			moveq	#0,d5
000083CA 48E7 0C00                  			movem.l	d4/d5,-(sp)
000083CE 6100 FE98                  			bsr.w	Calc_VRAM_Pos_2
000083D2 4CDF 0030                  			movem.l	(sp)+,d4/d5
000083D6 7C1F                       			moveq	#(512/16)-1,d6
000083D8 6100 FD6C                  			bsr.w	DrawBlocks_LR_3
000083DC                            	locj_72EE:
000083DC 4E75                       			rts
000083DE                            
000083DE                            ; ---------------------------------------------------------------------------
000083DE                            ; Subroutine to load basic level data
000083DE                            ; ---------------------------------------------------------------------------
000083DE                            
000083DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083DE                            
000083DE                            
000083DE                            LevelDataLoad:
000083DE 7000                       		moveq	#0,d0
000083E0 1038 FE10                  		move.b	(v_zone).w,d0
000083E4 E948                       		lsl.w	#4,d0
000083E6 45F9 0000 0000             		lea	(LevelHeaders).l,a2
000083EC 45F2 0000                  		lea	(a2,d0.w),a2
000083F0 2F0A                       		move.l	a2,-(sp)
000083F2 588A                       		addq.l	#4,a2
000083F4 205A                       		movea.l	(a2)+,a0
000083F6 43F8 B000                  		lea	(v_16x16).w,a1	; RAM address for 16x16 mappings
000083FA 303C 0000                  		move.w	#0,d0
000083FE 6100 94D8                  		bsr.w	EniDec
00008402 205A                       		movea.l	(a2)+,a0
00008404 43F9 00FF 0000             		lea	(v_256x256).l,a1 ; RAM address for 256x256 mappings
0000840A 6100 964A                  		bsr.w	KosDec
0000840E 6100 0000                  		bsr.w	LevelLayoutLoad
00008412 301A                       		move.w	(a2)+,d0
00008414 3012                       		move.w	(a2),d0
00008416 0240 00FF                  		andi.w	#$FF,d0
0000841A 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; is level SBZ3 (LZ4) ?
00008420 6600                       		bne.s	@notSBZ3	; if not, branch
00008422 700C                       		moveq	#palid_SBZ3,d0	; use SB3 palette
00008424                            
00008424                            	@notSBZ3:
00008424 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2?
0000842A 6700                       		beq.s	@isSBZorFZ	; if yes, branch
0000842C 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; is level FZ?
00008432 6600                       		bne.s	@normalpal	; if not, branch
00008434                            
00008434                            	@isSBZorFZ:
00008434 700E                       		moveq	#palid_SBZ2,d0	; use SBZ2/FZ palette
00008436                            
00008436                            	@normalpal:
00008436 6100 A0A4                  		bsr.w	PalLoad1	; load palette (based on d0)
0000843A 245F                       		movea.l	(sp)+,a2
0000843C 584A                       		addq.w	#4,a2		; read number for 2nd PLC
0000843E 7000                       		moveq	#0,d0
00008440 1012                       		move.b	(a2),d0
00008442 6700                       		beq.s	@skipPLC	; if 2nd PLC is 0 (i.e. the ending sequence), branch
00008444 6100 92F4                  		bsr.w	AddPLC		; load pattern load cues
00008448                            
00008448                            	@skipPLC:
00008448 4E75                       		rts	
0000844A                            ; End of function LevelDataLoad
0000844A                            
0000844A                            ; ---------------------------------------------------------------------------
0000844A                            ; Level	layout loading subroutine
0000844A                            ; ---------------------------------------------------------------------------
0000844A                            
0000844A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000844A                            
0000844A                            
0000844A                            LevelLayoutLoad:
0000844A 47F8 A400                  		lea	(v_lvllayout).w,a3
0000844E 323C 01FF                  		move.w	#$1FF,d1
00008452 7000                       		moveq	#0,d0
00008454                            
00008454                            LevLoad_ClrRam:
00008454 26C0                       		move.l	d0,(a3)+
00008456 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($A400-A7FF)
0000845A                            
0000845A 47F8 A400                  		lea	(v_lvllayout).w,a3 ; RAM address for level layout
0000845E 7200                       		moveq	#0,d1
00008460 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00008464 47F8 A440                  		lea	(v_lvllayout+$40).w,a3 ; RAM address for background layout
00008468 7202                       		moveq	#2,d1
0000846A                            ; End of function LevelLayoutLoad
0000846A                            
0000846A                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
0000846A                            
0000846A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000846A                            
0000846A                            
0000846A                            LevelLayoutLoad2:
0000846A 3038 FE10                  		move.w	(v_zone).w,d0
0000846E ED08                       		lsl.b	#6,d0
00008470 EA48                       		lsr.w	#5,d0
00008472 3400                       		move.w	d0,d2
00008474 D040                       		add.w	d0,d0
00008476 D042                       		add.w	d2,d0
00008478 D041                       		add.w	d1,d0
0000847A 43F9 0000 0000             		lea	(Level_Index).l,a1
00008480 3031 0000                  		move.w	(a1,d0.w),d0
00008484 43F1 0000                  		lea	(a1,d0.w),a1
00008488 7200                       		moveq	#0,d1
0000848A 3401                       		move.w	d1,d2
0000848C 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
0000848E 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00008490                            
00008490                            LevLoad_NumRows:
00008490 3001                       		move.w	d1,d0
00008492 204B                       		movea.l	a3,a0
00008494                            
00008494                            LevLoad_Row:
00008494 10D9                       		move.b	(a1)+,(a0)+
00008496 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
0000849A 47EB 0080                  		lea	$80(a3),a3	; do next row
0000849E 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
000084A2 4E75                       		rts	
000084A4                            ; End of function LevelLayoutLoad2
000084A4                            
000084A4                            		include	"_inc\DynamicLevelEvents.asm"
000084A4                            ; ---------------------------------------------------------------------------
000084A4                            ; Dynamic level events
000084A4                            ; ---------------------------------------------------------------------------
000084A4                            
000084A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084A4                            
000084A4                            
000084A4                            DynamicLevelEvents:
000084A4 7000                       		moveq	#0,d0
000084A6 1038 FE10                  		move.b	(v_zone).w,d0
000084AA D040                       		add.w	d0,d0
000084AC 303B 0000                  		move.w	DLE_Index(pc,d0.w),d0
000084B0 4EBB 0000                  		jsr	DLE_Index(pc,d0.w) ; run level-specific events
000084B4 7202                       		moveq	#2,d1
000084B6 3038 F726                  		move.w	(v_limitbtm1).w,d0
000084BA 9078 F72E                  		sub.w	(v_limitbtm2).w,d0 ; has lower level boundary changed recently?
000084BE 6700                       		beq.s	DLE_NoChg	; if not, branch
000084C0 6400                       		bcc.s	loc_6DAC
000084C2                            
000084C2 4441                       		neg.w	d1
000084C4 3038 F704                  		move.w	(v_screenposy).w,d0
000084C8 B078 F726                  		cmp.w	(v_limitbtm1).w,d0
000084CC 6300                       		bls.s	loc_6DA0
000084CE 31C0 F72E                  		move.w	d0,(v_limitbtm2).w
000084D2 0278 FFFE F72E             		andi.w	#$FFFE,(v_limitbtm2).w
000084D8                            
000084D8                            loc_6DA0:
000084D8 D378 F72E                  		add.w	d1,(v_limitbtm2).w
000084DC 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
000084E2                            
000084E2                            DLE_NoChg:
000084E2 4E75                       		rts	
000084E4                            ; ===========================================================================
000084E4                            
000084E4                            loc_6DAC:
000084E4 3038 F704                  		move.w	(v_screenposy).w,d0
000084E8 5040                       		addq.w	#8,d0
000084EA B078 F72E                  		cmp.w	(v_limitbtm2).w,d0
000084EE 6500                       		bcs.s	loc_6DC4
000084F0 0838 0001 D022             		btst	#1,(v_player+obStatus).w
000084F6 6700                       		beq.s	loc_6DC4
000084F8 D241                       		add.w	d1,d1
000084FA D241                       		add.w	d1,d1
000084FC                            
000084FC                            loc_6DC4:
000084FC D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008500 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
00008506 4E75                       		rts	
00008508                            ; End of function DynamicLevelEvents
00008508                            
00008508                            ; ===========================================================================
00008508                            ; ---------------------------------------------------------------------------
00008508                            ; Offset index for dynamic level events
00008508                            ; ---------------------------------------------------------------------------
00008508 0000 0000                  DLE_Index:	dc.w DLE_GHZ-DLE_Index, DLE_LZ-DLE_Index
0000850C 0000 0000                  		dc.w DLE_MZ-DLE_Index, DLE_SLZ-DLE_Index
00008510 0000 0000                  		dc.w DLE_SYZ-DLE_Index, DLE_SBZ-DLE_Index
00008514 0000                       		dc.w DLE_Ending-DLE_Index
00008516                            ; ===========================================================================
00008516                            ; ---------------------------------------------------------------------------
00008516                            ; Green	Hill Zone dynamic level events
00008516                            ; ---------------------------------------------------------------------------
00008516                            
00008516                            DLE_GHZ:
00008516 7000                       		moveq	#0,d0
00008518 1038 FE11                  		move.b	(v_act).w,d0
0000851C D040                       		add.w	d0,d0
0000851E 303B 0000                  		move.w	DLE_GHZx(pc,d0.w),d0
00008522 4EFB 0000                  		jmp	DLE_GHZx(pc,d0.w)
00008526                            ; ===========================================================================
00008526 0000                       DLE_GHZx:	dc.w DLE_GHZ1-DLE_GHZx
00008528 0000                       		dc.w DLE_GHZ2-DLE_GHZx
0000852A 0000                       		dc.w DLE_GHZ3-DLE_GHZx
0000852C                            ; ===========================================================================
0000852C                            
0000852C                            DLE_GHZ1:
0000852C 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00008532 6600                       		bne.s	gohere
00008534 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
0000853A 4E75                       		rts
0000853C                            gohere:
0000853C 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
00008542 0C78 1680 F700             		cmpi.w	#$1680,(v_screenposx).w ; has the camera reached $1780 on x-axis?
00008548 6500                       		bcs.s	locret_6E08	; if not, branch
0000854A 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w ; set lower y-boundary
00008550                            
00008550                            locret_6E08:
00008550 4E75                       		rts	
00008552                            ; ===========================================================================
00008552                            
00008552                            DLE_GHZ2:
00008552 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008558 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
0000855E 6500                       		bcs.s	locret_6E3A
00008560 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
00008566 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
0000856C 6500                       		bcs.s	locret_6E3A
0000856E 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008574 6500                       		bcs.s	loc_6E9A
00008576 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
0000857C 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008582 6400                       		bcc.s	loc_6E8F
00008584 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
0000858A 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
00008590                            
00008590                            loc_6E8F:
00008590 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008596 6400                       		bcc.s	loc_6E9A
00008598                            
00008598                            locret_6E3A:
00008598 4E75                       		rts	
0000859A                            ; ===========================================================================
0000859A                            
0000859A                            loc_6E9A:
0000859A 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000085A0 5438 F742                  		addq.b	#2,(v_dle_routine).w
000085A4 4E75                       		rts		
000085A6                            ; ===========================================================================
000085A6                            
000085A6                            DLE_GHZ3:
000085A6 7000                       		moveq	#0,d0
000085A8 1038 F742                  		move.b	(v_dle_routine).w,d0
000085AC 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
000085B0 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
000085B4                            ; ===========================================================================
000085B4 0000                       off_6E4A:	dc.w DLE_GHZ3main-off_6E4A
000085B6 0000                       		dc.w DLE_GHZ3boss-off_6E4A
000085B8 0000                       		dc.w DLE_GHZ3end-off_6E4A
000085BA                            ; ===========================================================================
000085BA                            
000085BA                            DLE_GHZ3main:
000085BA 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000085C0 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
000085C6 6500                       		bcs.s	locret_6E96
000085C8 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
000085CE 0C78 0860 F700             		cmpi.w	#$860,(v_screenposx).w
000085D4 6500                       		bcs.s	locret_6E96
000085D6 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
000085DC 6500                       		bcs.s	loc_6E98
000085DE 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
000085E4 0C78 1380 F700             		cmpi.w	#$1380,(v_screenposx).w
000085EA 6400                       		bcc.s	loc_6E8E
000085EC 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
000085F2 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
000085F8                            
000085F8                            loc_6E8E:
000085F8 0C78 1300 F700             		cmpi.w	#$1300,(v_screenposx).w
000085FE 6400                       		bcc.s	loc_6E98
00008600                            
00008600                            locret_6E96:
00008600 4E75                       		rts	
00008602                            ; ===========================================================================
00008602                            
00008602                            loc_6E98:
00008602 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008608 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000860C 4E75                       		rts	
0000860E                            ; ===========================================================================
0000860E                            
0000860E                            DLE_GHZ3boss:
0000860E 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008614 6400                       		bcc.s	loc_6EB0
00008616 5538 F742                  		subq.b	#2,(v_dle_routine).w
0000861A                            
0000861A                            loc_6EB0:
0000861A 0C78 2960 F700             		cmpi.w	#$2960,(v_screenposx).w
00008620 6500                       		bcs.s	locret_6EE8
00008622 6100 0000                  		bsr.w	FindFreeObj
00008626 6600                       		bne.s	loc_6ED0
00008628 12BC 0000                  		move.b	#id_BossGreenHill,0(a1) ; load GHZ boss	object
0000862C 337C 2A60 0008             		move.w	#$2A60,obX(a1)
00008632 337C 0280 000C             		move.w	#$280,obY(a1)
00008638                            
00008638                            loc_6ED0:
00008640 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008646 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000864A 7000                       		moveq	#plcid_Boss,d0
0000864C 6000 90EC                  		bra.w	AddPLC		; load boss patterns
00008650                            ; ===========================================================================
00008650                            
00008650                            locret_6EE8:
00008650 4E75                       		rts	
00008652                            ; ===========================================================================
00008652                            
00008652                            DLE_GHZ3end:
00008652 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008658 4E75                       		rts	
0000865A                            ; ===========================================================================
0000865A                            ; ---------------------------------------------------------------------------
0000865A                            ; Labyrinth Zone dynamic level events
0000865A                            ; ---------------------------------------------------------------------------
0000865A                            
0000865A                            DLE_LZ:
0000865A 7000                       		moveq	#0,d0
0000865C 1038 FE11                  		move.b	(v_act).w,d0
00008660 D040                       		add.w	d0,d0
00008662 303B 0000                  		move.w	DLE_LZx(pc,d0.w),d0
00008666 4EFB 0000                  		jmp	DLE_LZx(pc,d0.w)
0000866A                            ; ===========================================================================
0000866A 0000                       DLE_LZx:	dc.w DLE_LZ12-DLE_LZx
0000866C 0000                       		dc.w DLE_LZ12-DLE_LZx
0000866E 0000                       		dc.w DLE_LZ3-DLE_LZx
00008670 0000                       		dc.w DLE_SBZ3-DLE_LZx
00008672                            ; ===========================================================================
00008672                            
00008672                            DLE_LZ12:
00008672 4E75                       		rts	
00008674                            ; ===========================================================================
00008674                            
00008674                            DLE_LZ3:
00008674 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch $F	been pressed?
00008678 6700                       		beq.s	loc_6F28	; if not, branch
0000867A 43F8 A506                  		lea	(v_lvllayout+$106).w,a1
0000867E 0C11 0007                  		cmpi.b	#7,(a1)
00008682 6700                       		beq.s	loc_6F28
00008684 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00008690                            
00008690                            loc_6F28:
00008690 4A38 F742                  		tst.b	(v_dle_routine).w
00008694 6600                       		bne.s	locret_6F64
00008696 0C78 1CA0 F700             		cmpi.w	#$1CA0,(v_screenposx).w
0000869C 6500                       		bcs.s	locret_6F62
0000869E 0C78 0600 F704             		cmpi.w	#$600,(v_screenposy).w
000086A4 6400                       		bcc.s	locret_6F62
000086A6 6100 0000                  		bsr.w	FindFreeObj
000086AA 6600                       		bne.s	loc_6F4A
000086AC 12BC 0000                  		move.b	#id_BossLabyrinth,0(a1) ; load LZ boss object
000086B0                            
000086B0                            loc_6F4A:
000086B8 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000086BE 5438 F742                  		addq.b	#2,(v_dle_routine).w
000086C2 7000                       		moveq	#plcid_Boss,d0
000086C4 6000 9074                  		bra.w	AddPLC		; load boss patterns
000086C8                            ; ===========================================================================
000086C8                            
000086C8                            locret_6F62:
000086C8 4E75                       		rts	
000086CA                            ; ===========================================================================
000086CA                            
000086CA                            locret_6F64:
000086CA 4E75                       		rts	
000086CC                            ; ===========================================================================
000086CC                            
000086CC                            DLE_SBZ3:
000086CC 4A38 F742                          tst.b	(v_dle_routine).w
000086D0 6600                               bne.s   loc_6C28
000086D2 4A38 F7E1                  		tst.b	(f_switch+$1).w	; has switch $F	been pressed?
000086D6 6700                       		beq.s	loc_6C28	; if not, branch
000086E0 11FC 0001 F742             		move.b	#1, (v_dle_routine).w
000086E6                            loc_6C28:
000086E6 0C78 0D00 F700             		cmpi.w	#$D00,(v_screenposx).w
000086EC 6500                       		bcs.s	locret_6F8C
000086EE 0C78 0018 D00C             		cmpi.w	#$18,(v_player+obY).w ; has Sonic reached the top of the level?
000086F4 6400                       		bcc.s	locret_6F8C	; if not, branch
000086F6 4238 FE30                  		clr.b	(v_lastlamp).w
000086FA 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
00008700 31FC 0502 FE10             		move.w	#(id_SBZ<<8)+2,(v_zone).w ; set level number to 0502 (FZ)
00008706 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; freeze Sonic
0000870C                            
0000870C                            locret_6F8C:
0000870C 4E75                       		rts	
0000870E                            ; ===========================================================================
0000870E                            ; ---------------------------------------------------------------------------
0000870E                            ; Marble Zone dynamic level events
0000870E                            ; ---------------------------------------------------------------------------
0000870E                            
0000870E                            DLE_MZ:
0000870E 7000                       		moveq	#0,d0
00008710 1038 FE11                  		move.b	(v_act).w,d0
00008714 D040                       		add.w	d0,d0
00008716 303B 0000                  		move.w	DLE_MZx(pc,d0.w),d0
0000871A 4EFB 0000                  		jmp	DLE_MZx(pc,d0.w)
0000871E                            ; ===========================================================================
0000871E 0000                       DLE_MZx:	dc.w DLE_MZ1-DLE_MZx
00008720 0000                       		dc.w DLE_MZ2-DLE_MZx
00008722 0000                       		dc.w DLE_MZ3-DLE_MZx
00008724                            ; ===========================================================================
00008724                            
00008724                            DLE_MZ1:
00008724 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
0000872A 0C78 1F40 F700             		cmpi.w	#$1F40,(v_screenposx).w
00008730 6500                       		bcs.s	locret_6FE8
00008732 31FC 0220 F726             		move.w	#$220,(v_limitbtm1).w
00008738                            
00008738                            locret_6FE8:
00008738 4E75                       		rts	
0000873A                            
0000873A                            ; ===========================================================================
0000873A                            
0000873A                            DLE_MZ2:
0000873A 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008740 0C78 2110 F700             		cmpi.w	#$2110,(v_screenposx).w
00008746 6500                       		bcs.s	locret_6FE9
00008748 31FC 0110 F726             		move.w	#$110,(v_limitbtm1).w
0000874E                            		
0000874E                            locret_6FE9:
0000874E 4E75                       		rts	
00008750                            ; ===========================================================================
00008750                            
00008750                            DLE_MZ3:
00008750 7000                       		moveq	#0,d0
00008752 1038 F742                  		move.b	(v_dle_routine).w,d0
00008756 303B 0000                  		move.w	off_7098(pc,d0.w),d0
0000875A 4EFB 0000                  		jmp	off_7098(pc,d0.w)
0000875E                            ; ===========================================================================
0000875E 0000                       off_7098:	dc.w DLE_MZ3boss-off_7098
00008760 0000                       		dc.w DLE_MZ3cutscene-off_7098
00008762 0000                       		dc.w DLE_MZ3boss2-off_7098
00008764 0000                       		dc.w DLE_MZ3end-off_7098
00008766                            ; ===========================================================================
00008766                            
00008766                            DLE_MZ3boss:
00008766 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
0000876C 0C78 0E00 F700             		cmpi.w	#$0E00,(v_screenposx).w
00008772 6500                       		bcs.s	locret_70E8
00008774 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
0000877A 0C78 17F0 F700             		cmpi.w	#$17F0,(v_screenposx).w
00008780 6500                       		bcs.s	locret_70E8
00008782 6100 0000                  		bsr.w	FindFreeObj
00008786 6600                       		bne.s	loc_70D0
00008788 12BC 0000                  		move.b	#id_BossMarble,0(a1) ; load MZ boss object
0000878C 337C 19F0 0008             		move.w	#$19F0,obX(a1)
00008792 337C 022C 000C             		move.w	#$22C,obY(a1)
00008798                            
00008798                            loc_70D0:
000087A0 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000087A6 5438 F742                  		addq.b	#2,(v_dle_routine).w
000087AA 7000                       		moveq	#plcid_Boss,d0
000087AC 6000 8F8C                  		bra.w	AddPLC		; load boss patterns
000087B0                            ; ===========================================================================
000087B0                            
000087B0                            locret_70E8:
000087B0 4E75                       		rts	
000087B2                            		
000087B2                            DLE_MZ3cutscene:
000087B2 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
000087B8 0C78 19B0 F700             		cmpi.w	#$19B0,(v_screenposx).w
000087BE 6500                       		bcs.s	locret_8298
000087C0 6100 0000                  		bsr.w	FindFreeObj
000087C4 6600                       		bne.s	locret_8298
000087C6 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
000087CA 5438 F742                  		addq.b	#2,(v_dle_routine).w
000087CE 7000                       		moveq	#plcid_EggmanSBZ2,d0
000087D0 6000 8F68                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
000087D4                            ; ===========================================================================
000087D4                            
000087D4                            locret_8298:
000087D4 4E75                       		rts	
000087D6                            ; ===========================================================================
000087D6                            
000087D6                            DLE_MZ3boss2:
000087D6 0C78 1A60 F700             		cmpi.w	#$1A60,(v_screenposx).w
000087DC 6500                       		bcs.s	loc_72C6
000087DE 6100 0000                  		bsr.w	FindFreeObj
000087E2 6600                       		bne.s	loc_72C0
000087E4 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
000087E8 5438 F742                  		addq.b	#2,(v_dle_routine).w
000087F4                            
000087F4                            loc_72C0:
000087F4 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000087FA                            
000087FA                            loc_72C6:
000087FA 6000                       		bra.s	loc_72D2
000087FC                            ; ===========================================================================
000087FC                            
000087FC                            DLE_MZ3end:
000087FC 0C78 1B50 F700             		cmpi.w	#$1B50,(v_screenposx).w
00008802 6500                       		bcs.s	loc_72D2
00008804 4E75                       		rts	
00008806                            ; ===========================================================================
00008806                            
00008806                            loc_72D2:
00008806 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
0000880C 4E75                       		rts
0000880E                            
0000880E                            
0000880E                            ; ===========================================================================
0000880E                            ; ---------------------------------------------------------------------------
0000880E                            ; Star Light Zone dynamic level events
0000880E                            ; ---------------------------------------------------------------------------
0000880E                            
0000880E                            DLE_SLZ:
0000880E 7000                       		moveq	#0,d0
00008810 1038 FE11                  		move.b	(v_act).w,d0
00008814 D040                       		add.w	d0,d0
00008816 303B 0000                  		move.w	DLE_SLZx(pc,d0.w),d0
0000881A 4EFB 0000                  		jmp	DLE_SLZx(pc,d0.w)
0000881E                            ; ===========================================================================
0000881E 0000                       DLE_SLZx:	dc.w DLE_SLZ12-DLE_SLZx
00008820 0000                       		dc.w DLE_SLZ12-DLE_SLZx
00008822 0000                       		dc.w DLE_SLZ3-DLE_SLZx
00008824                            ; ===========================================================================
00008824                            
00008824                            DLE_SLZ12:
00008824 4E75                       		rts	
00008826                            ; ===========================================================================
00008826                            
00008826                            DLE_SLZ3:
00008826 7000                       		moveq	#0,d0
00008828 1038 F742                  		move.b	(v_dle_routine).w,d0
0000882C 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00008830 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00008834                            ; ===========================================================================
00008834 0000                       off_7118:	dc.w DLE_SLZ3main-off_7118
00008836 0000                       		dc.w DLE_SLZ3boss-off_7118
00008838 0000                       		dc.w DLE_SLZ3end-off_7118
0000883A                            ; ===========================================================================
0000883A                            
0000883A                            DLE_SLZ3main:
0000883A 0C78 1E70 F700             		cmpi.w	#$1E70,(v_screenposx).w
00008840 6500                       		bcs.s	locret_7130
00008842 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008848 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000884C                            
0000884C                            locret_7130:
0000884C 4E75                       		rts	
0000884E                            ; ===========================================================================
0000884E                            
0000884E                            DLE_SLZ3boss:
0000884E 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008854 6500                       		bcs.s	locret_715C
00008856 6100 0000                  		bsr.w	FindFreeObj
0000885A 6600                       		bne.s	loc_7144
0000885C 12BC 0000                  		move.b	#id_BossStarLight,(a1) ; load SLZ boss object
00008860                            
00008860                            loc_7144:
00008868 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
0000886E 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008872 7000                       		moveq	#plcid_Boss,d0
00008874 6000 8EC4                  		bra.w	AddPLC		; load boss patterns
00008878                            ; ===========================================================================
00008878                            
00008878                            locret_715C:
00008878 4E75                       		rts	
0000887A                            ; ===========================================================================
0000887A                            
0000887A                            DLE_SLZ3end:
0000887A 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008880 4E75                       		rts
00008882 4E75                       		rts
00008884                            ; ===========================================================================
00008884                            ; ---------------------------------------------------------------------------
00008884                            ; Spring Yard Zone dynamic level events
00008884                            ; ---------------------------------------------------------------------------
00008884                            
00008884                            DLE_SYZ:
00008884 7000                       		moveq	#0,d0
00008886 1038 FE11                  		move.b	(v_act).w,d0
0000888A D040                       		add.w	d0,d0
0000888C 303B 0000                  		move.w	DLE_SYZx(pc,d0.w),d0
00008890 4EFB 0000                  		jmp	DLE_SYZx(pc,d0.w)
00008894                            ; ===========================================================================
00008894 0000                       DLE_SYZx:	dc.w DLE_SYZ1-DLE_SYZx
00008896 0000                       		dc.w DLE_SYZ2-DLE_SYZx
00008898 0000                       		dc.w DLE_SYZ3-DLE_SYZx
0000889A                            ; ===========================================================================
0000889A                            
0000889A                            DLE_SYZ1:
0000889A 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
000088A0 0C78 1600 F700             		cmpi.w	#$1600,(v_screenposx).w
000088A6 6500                       		bcs.s	locret_71A2
000088A8 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
000088AE 4E75                       		rts	
000088B0                            ; ===========================================================================
000088B0                            
000088B0                            DLE_SYZ2:
000088B0 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
000088B6 0C78 25A0 F700             		cmpi.w	#$25A0,(v_screenposx).w
000088BC 6500                       		bcs.s	locret_71A2
000088BE 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
000088C4 0C78 04D0 D00C             		cmpi.w	#$4D0,(v_player+obY).w
000088CA 6500                       		bcs.s	locret_71A2
000088CC 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
000088D2                            
000088D2                            locret_71A2:
000088D2 4E75                       		rts	
000088D4                            ; ===========================================================================
000088D4                            
000088D4                            DLE_SYZ3:
000088D4 7000                       		moveq	#0,d0
000088D6 1038 F742                  		move.b	(v_dle_routine).w,d0
000088DA 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000088DE 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000088E2                            ; ===========================================================================
000088E2 0000                       off_71B2:	dc.w DLE_SYZ3main-off_71B2
000088E4 0000                       		dc.w DLE_SYZ3boss-off_71B2
000088E6 0000                       		dc.w DLE_SYZ3end-off_71B2
000088E8                            ; ===========================================================================
000088E8                            
000088E8                            DLE_SYZ3main:
000088E8 0C78 2AC0 F700             		cmpi.w	#$2AC0,(v_screenposx).w
000088EE 6500                       		bcs.s	locret_71CE
000088F0 6100 0000                  		bsr.w	FindFreeObj
000088F4 6600                       		bne.s	locret_71CE
000088F6 12BC 0000                  		move.b	#id_BossBlock,(a1) ; load blocks that boss picks up
000088FA 5438 F742                  		addq.b	#2,(v_dle_routine).w
000088FE                            
000088FE                            locret_71CE:
000088FE 4E75                       		rts	
00008900                            ; ===========================================================================
00008900                            
00008900                            DLE_SYZ3boss:
00008900 0C78 2C00 F700             		cmpi.w	#$2C00,(v_screenposx).w
00008906 6500                       		bcs.s	locret_7200
00008908 31FC 04CC F726             		move.w	#$4CC,(v_limitbtm1).w
0000890E 6100 0000                  		bsr.w	FindFreeObj
00008912 6600                       		bne.s	loc_71EC
00008914 12BC 0000                  		move.b	#id_BossSpringYard,(a1) ; load SYZ boss	object
00008918 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000891C                            
0000891C                            loc_71EC:
00008924 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
0000892A 7000                       		moveq	#plcid_Boss,d0
0000892C 6000 8E0C                  		bra.w	AddPLC		; load boss patterns
00008930                            ; ===========================================================================
00008930                            
00008930                            locret_7200:
00008930 4E75                       		rts	
00008932                            ; ===========================================================================
00008932                            
00008932                            DLE_SYZ3end:
00008932 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008938 4E75                       		rts	
0000893A                            ; ===========================================================================
0000893A                            ; ---------------------------------------------------------------------------
0000893A                            ; Scrap	Brain Zone dynamic level events
0000893A                            ; ---------------------------------------------------------------------------
0000893A                            
0000893A                            DLE_SBZ:
0000893A 7000                       		moveq	#0,d0
0000893C 1038 FE11                  		move.b	(v_act).w,d0
00008940 D040                       		add.w	d0,d0
00008942 303B 0000                  		move.w	DLE_SBZx(pc,d0.w),d0
00008946 4EFB 0000                  		jmp	DLE_SBZx(pc,d0.w)
0000894A                            ; ===========================================================================
0000894A 0000                       DLE_SBZx:	dc.w DLE_SBZ1-DLE_SBZx
0000894C 0000                       		dc.w DLE_SBZ2-DLE_SBZx
0000894E 0000                       		dc.w DLE_FZ-DLE_SBZx
00008950                            ; ===========================================================================
00008950                            
00008950                            DLE_SBZ1:
00008950 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00008956 0C78 1880 F700             		cmpi.w	#$1880,(v_screenposx).w
0000895C 6500                       		bcs.s	locret_7242
0000895E 31FC 0620 F726             		move.w	#$620,(v_limitbtm1).w
00008964 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
0000896A 6500                       		bcs.s	locret_7242
0000896C 31FC 02A0 F726             		move.w	#$2A0,(v_limitbtm1).w
00008972                            
00008972                            locret_7242:
00008972 4E75                       		rts	
00008974                            ; ===========================================================================
00008974                            
00008974                            DLE_SBZ2:
00008974 7000                       		moveq	#0,d0
00008976 1038 F742                  		move.b	(v_dle_routine).w,d0
0000897A 303B 0000                  		move.w	off_7252(pc,d0.w),d0
0000897E 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008982                            ; ===========================================================================
00008982 0000                       off_7252:	dc.w DLE_SBZ2main-off_7252
00008984 0000                       		dc.w DLE_SBZ2boss-off_7252
00008986 0000                       		dc.w DLE_SBZ2boss2-off_7252
00008988 0000                       		dc.w DLE_SBZ2end-off_7252
0000898A                            ; ===========================================================================
0000898A                            
0000898A                            DLE_SBZ2main:
0000898A 31FC 0800 F726             		move.w	#$800,(v_limitbtm1).w
00008990 0C78 1800 F700             		cmpi.w	#$1800,(v_screenposx).w
00008996 6500                       		bcs.s	locret_727A
00008998 31FC 0510 F726             		move.w	#$510,(v_limitbtm1).w
0000899E 0C78 1E00 F700             		cmpi.w	#$1E00,(v_screenposx).w
000089A4 6500                       		bcs.s	locret_727A
000089A6 5438 F742                  		addq.b	#2,(v_dle_routine).w
000089AA                            
000089AA                            locret_727A:
000089AA 4E75                       		rts	
000089AC                            ; ===========================================================================
000089AC                            
000089AC                            DLE_SBZ2boss:
000089AC 0C78 1EB0 F700             		cmpi.w	#$1EB0,(v_screenposx).w
000089B2 6500                       		bcs.s	locret_7298
000089B4 6100 0000                  		bsr.w	FindFreeObj
000089B8 6600                       		bne.s	locret_7298
000089BA 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
000089BE 5438 F742                  		addq.b	#2,(v_dle_routine).w
000089C2 7000                       		moveq	#plcid_EggmanSBZ2,d0
000089C4 6000 8D74                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
000089C8                            ; ===========================================================================
000089C8                            
000089C8                            locret_7298:
000089C8 4E75                       		rts	
000089CA                            ; ===========================================================================
000089CA                            
000089CA                            DLE_SBZ2boss2:
000089CA 0C78 1F60 F700             		cmpi.w	#$1F60,(v_screenposx).w
000089D0 6500                       		bcs.s	loc_72B6
000089D2 6100 0000                  		bsr.w	FindFreeObj
000089D6 6600                       		bne.s	loc_72B0
000089D8 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
000089DC 5438 F742                  		addq.b	#2,(v_dle_routine).w
000089E0                            
000089E0                            loc_72B0:
000089E0 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000089E6                            
000089E6                            loc_72B6:
000089E6 6000                       		bra.s	loc_72C2
000089E8                            ; ===========================================================================
000089E8                            
000089E8                            DLE_SBZ2end:
000089E8 0C78 2050 F700             		cmpi.w	#$2050,(v_screenposx).w
000089EE 6500                       		bcs.s	loc_72C2
000089F0 4E75                       		rts	
000089F2                            ; ===========================================================================
000089F2                            
000089F2                            loc_72C2:
000089F2 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
000089F8 4E75                       		rts	
000089FA                            ; ===========================================================================
000089FA                            
000089FA                            DLE_FZ:
000089FA 7000                       		moveq	#0,d0
000089FC 1038 F742                  		move.b	(v_dle_routine).w,d0
00008A00 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008A04 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00008A08                            ; ===========================================================================
00008A08 0000 0000                  off_72D8:	dc.w DLE_FZmain-off_72D8, DLE_FZboss-off_72D8
00008A0C 0000 0000                  		dc.w DLE_FZend-off_72D8, locret_7322-off_72D8
00008A10 0000                       		dc.w DLE_FZend2-off_72D8
00008A12                            ; ===========================================================================
00008A12                            
00008A12                            DLE_FZmain:
00008A12 0C78 2148 F700             		cmpi.w	#$2148,(v_screenposx).w
00008A18 6500                       		bcs.s	loc_72F4
00008A1A 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008A1E 7000                       		moveq	#plcid_FZBoss,d0
00008A20 6100 8D18                  		bsr.w	AddPLC		; load FZ boss patterns
00008A24                            
00008A24                            loc_72F4:
00008A24 60CC                       		bra.s	loc_72C2
00008A26                            ; ===========================================================================
00008A26                            
00008A26                            DLE_FZboss:
00008A26 0C78 2300 F700             		cmpi.w	#$2300,(v_screenposx).w
00008A2C 6500                       		bcs.s	loc_7312
00008A2E 6100 0000                  		bsr.w	FindFreeObj
00008A32 6600                       		bne.s	loc_7312
00008A34 12BC 0000                  		move.b	#id_BossFinal,(a1) ; load FZ boss object
00008A38 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008A3C 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008A42                            
00008A42                            loc_7312:
00008A42 60AE                       		bra.s	loc_72C2
00008A44                            ; ===========================================================================
00008A44                            
00008A44                            DLE_FZend:
00008A44 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
00008A4A 6500                       		bcs.s	loc_7320
00008A4C 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008A50                            
00008A50                            loc_7320:
00008A50 60A0                       		bra.s	loc_72C2
00008A52                            ; ===========================================================================
00008A52                            
00008A52                            locret_7322:
00008A52 4E75                       		rts	
00008A54                            ; ===========================================================================
00008A54                            
00008A54                            DLE_FZend2:
00008A54 609C                       		bra.s	loc_72C2
00008A56                            ; ===========================================================================
00008A56                            ; ---------------------------------------------------------------------------
00008A56                            ; Ending sequence dynamic level events (empty)
00008A56                            ; ---------------------------------------------------------------------------
00008A56                            
00008A56                            DLE_Ending:
00008A56 4E75                       		rts	
00008A56 4E75                       		rts	
00008A58                            
00008A58                            		include	"_incObj\11 Bridge (part 1).asm"
00008A58                            ; ---------------------------------------------------------------------------
00008A58                            ; Object 11 - GHZ bridge
00008A58                            ; ---------------------------------------------------------------------------
00008A58                            
00008A58                            Bridge:
00008A58 7000                       		moveq	#0,d0
00008A5A 1028 0024                  		move.b	obRoutine(a0),d0
00008A5E 323B 0000                  		move.w	Bri_Index(pc,d0.w),d1
00008A62 4EFB 1000                  		jmp	Bri_Index(pc,d1.w)
00008A66                            ; ===========================================================================
00008A66 0000 0000                  Bri_Index:	dc.w Bri_Main-Bri_Index, Bri_Action-Bri_Index
00008A6A 0000 0000                  		dc.w Bri_Platform-Bri_Index, Bri_Delete-Bri_Index
00008A6E 0000 0000                  		dc.w Bri_Delete-Bri_Index, Bri_Display-Bri_Index
00008A72                            ; ===========================================================================
00008A72                            
00008A72                            Bri_Main:	; Routine 0
00008A72 5428 0024                  		addq.b	#2,obRoutine(a0)
00008A76 217C 0000 0000 0004        		move.l	#Map_Bri,obMap(a0)
00008A7E 317C 438E 0002             		move.w	#$438E,obGfx(a0)
00008A84 117C 0004 0001             		move.b	#4,obRender(a0)
00008A8A 317C 0180 0018             		move.w	#$180,obPriority(a0)
00008A90 117C 0080 0014             		move.b	#$80,obActWid(a0)
00008A96 3428 000C                  		move.w	obY(a0),d2
00008A9A 3628 0008                  		move.w	obX(a0),d3
00008A9E 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008AA0 45E8 0028                  		lea	obSubtype(a0),a2
00008AA4 7200                       		moveq	#0,d1
00008AA6 1212                       		move.b	(a2),d1		; copy bridge length to d1
00008AA8 14FC 0000                  		move.b	#0,(a2)+	; clear bridge length
00008AAC 3001                       		move.w	d1,d0
00008AAE E248                       		lsr.w	#1,d0
00008AB0 E948                       		lsl.w	#4,d0
00008AB2 9640                       		sub.w	d0,d3		; d3 is position of leftmost log
00008AB4 5501                       		subq.b	#2,d1
00008AB6 6500                       		bcs.s	Bri_Action	; don't make more if bridge has only 1 log
00008AB8                            
00008AB8                            @buildloop:
00008AB8 6100 0000                  		bsr.w	FindFreeObj
00008ABC 6600                       		bne.s	Bri_Action
00008ABE 5228 0028                  		addq.b	#1,obSubtype(a0)
00008AC2 B668 0008                  		cmp.w	obX(a0),d3	; is this log the leftmost one?
00008AC6 6600                       		bne.s	@notleftmost	; if not, branch
00008AC8                            
00008AC8 0643 0010                  		addi.w	#$10,d3
00008ACC 3142 000C                  		move.w	d2,obY(a0)
00008AD0 3142 003C                  		move.w	d2,$3C(a0)
00008AD4 3A08                       		move.w	a0,d5
00008AD6 0445 D000                  		subi.w	#$D000,d5
00008ADA EC4D                       		lsr.w	#6,d5
00008ADC 0245 007F                  		andi.w	#$7F,d5
00008AE0 14C5                       		move.b	d5,(a2)+
00008AE2 5228 0028                  		addq.b	#1,obSubtype(a0)
00008AE6                            
00008AE6                            	@notleftmost:
00008AE6 3A09                       		move.w	a1,d5
00008AE8 0445 D000                  		subi.w	#$D000,d5
00008AEC EC4D                       		lsr.w	#6,d5
00008AEE 0245 007F                  		andi.w	#$7F,d5
00008AF2 14C5                       		move.b	d5,(a2)+
00008AF4 137C 000A 0024             		move.b	#$A,obRoutine(a1)
00008AFA 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00008AFC 3342 000C                  		move.w	d2,obY(a1)
00008B00 3342 003C                  		move.w	d2,$3C(a1)
00008B04 3343 0008                  		move.w	d3,obX(a1)
00008B08 237C 0000 0000 0004        		move.l	#Map_Bri,obMap(a1)
00008B10 337C 438E 0002             		move.w	#$438E,obGfx(a1)
00008B16 137C 0004 0001             		move.b	#4,obRender(a1)
00008B1C 337C 0180 0018             		move.w	#$180,obPriority(a1)
00008B22 137C 0008 0014             		move.b	#8,obActWid(a1)
00008B28 0643 0010                  		addi.w	#$10,d3
00008B2C 51C9 FF8A                  		dbf	d1,@buildloop ; repeat d1 times (length of bridge)
00008B30                            
00008B30                            Bri_Action:	; Routine 2
00008B30 6100                       		bsr.s	Bri_Solid
00008B32 4A28 003E                  		tst.b	$3E(a0)
00008B36 6700                       		beq.s	@display
00008B38 5928 003E                  		subq.b	#4,$3E(a0)
00008B3C 6100 0000                  		bsr.w	Bri_Bend
00008B40                            
00008B40                            	@display:
00008B40 6100 0000                  		bsr.w	DisplaySprite
00008B44 6000 0000                  		bra.w	Bri_ChkDel
00008B48                            
00008B48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008B48                            
00008B48                            
00008B48                            Bri_Solid:
00008B48 7200                       		moveq	#0,d1
00008B4A 1228 0028                  		move.b	obSubtype(a0),d1
00008B4E E749                       		lsl.w	#3,d1
00008B50 3401                       		move.w	d1,d2
00008B52 5041                       		addq.w	#8,d1
00008B54 D442                       		add.w	d2,d2
00008B56 43F8 D000                  		lea	(v_player).w,a1
00008B5A 4A69 0012                  		tst.w	obVelY(a1)
00008B5E 6B00 0000                  		bmi.w	Plat_Exit
00008B62 3029 0008                  		move.w	obX(a1),d0
00008B66 9068 0008                  		sub.w	obX(a0),d0
00008B6A D041                       		add.w	d1,d0
00008B6C 6B00 0000                  		bmi.w	Plat_Exit
00008B70 B042                       		cmp.w	d2,d0
00008B72 6400 0000                  		bcc.w	Plat_Exit
00008B76 6000                       		bra.s	Plat_NoXCheck
00008B78                            ; End of function Bri_Solid
00008B78                            ; End of function Bri_Solid
00008B78                            
00008B78                            ; ---------------------------------------------------------------------------
00008B78                            ; Platform subroutine
00008B78                            ; ---------------------------------------------------------------------------
00008B78                            
00008B78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008B78                            
00008B78                            PlatformObject:
00008B78 43F8 D000                  		lea	(v_player).w,a1
00008B7C 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving up/jumping?
00008B80 6B00 0000                  		bmi.w	Plat_Exit	; if yes, branch
00008B84                            
00008B84                            ;		perform x-axis range check
00008B84 3029 0008                  		move.w	obX(a1),d0
00008B88 9068 0008                  		sub.w	obX(a0),d0
00008B8C D041                       		add.w	d1,d0
00008B8E 6B00 0000                  		bmi.w	Plat_Exit
00008B92 D241                       		add.w	d1,d1
00008B94 B041                       		cmp.w	d1,d0
00008B96 6400 0000                  		bhs.w	Plat_Exit
00008B9A                            
00008B9A                            	Plat_NoXCheck:
00008B9A 3028 000C                  		move.w	obY(a0),d0
00008B9E 5140                       		subq.w	#8,d0
00008BA0                            
00008BA0                            Platform3:
00008BA0                            ;		perform y-axis range check
00008BA0 3429 000C                  		move.w	obY(a1),d2
00008BA4 1229 0016                  		move.b	obHeight(a1),d1
00008BA8 4881                       		ext.w	d1
00008BAA D242                       		add.w	d2,d1
00008BAC 5841                       		addq.w	#4,d1
00008BAE 9041                       		sub.w	d1,d0
00008BB0 6200 0000                  		bhi.w	Plat_Exit
00008BB4 0C40 FFF0                  		cmpi.w	#-$10,d0
00008BB8 6500 0000                  		blo.w	Plat_Exit
00008BBC                            
00008BBC 4A38 F7C8                  		tst.b	(f_lockmulti).w
00008BC0 6B00 0000                  		bmi.w	Plat_Exit
00008BC4 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00008BCA 6400 0000                  		bhs.w	Plat_Exit
00008BCE D440                       		add.w	d0,d2
00008BD0 5642                       		addq.w	#3,d2
00008BD2 3342 000C                  		move.w	d2,obY(a1)
00008BD6 5428 0024                  		addq.b	#2,obRoutine(a0)
00008BDA                            
00008BDA                            loc_74AE:
00008BDA 0829 0003 0022             		btst	#3,obStatus(a1)
00008BE0 6700                       		beq.s	loc_74DC
00008BE2 7000                       		moveq	#0,d0
00008BE4 1029 003D                  		move.b	$3D(a1),d0
00008BE8 ED48                       		lsl.w	#6,d0
00008BEA 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008BF0 2440                       		movea.l	d0,a2
00008BF2 08AA 0003 0022             		bclr	#3,obStatus(a2)
00008BF8 422A 0025                  		clr.b	ob2ndRout(a2)
00008BFC 0C2A 0004 0024             		cmpi.b	#4,obRoutine(a2)
00008C02 6600                       		bne.s	loc_74DC
00008C04 552A 0024                  		subq.b	#2,obRoutine(a2)
00008C08                            
00008C08                            loc_74DC:
00008C08 3008                       		move.w	a0,d0
00008C0A 0440 D000                  		subi.w	#-$3000,d0
00008C0E EC48                       		lsr.w	#6,d0
00008C10 0240 007F                  		andi.w	#$7F,d0
00008C14 1340 003D                  		move.b	d0,$3D(a1)
00008C18 137C 0000 0026             		move.b	#0,obAngle(a1)
00008C1E 337C 0000 0012             		move.w	#0,obVelY(a1)
00008C24 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00008C2A 0829 0001 0022             		btst	#1,obStatus(a1)
00008C30 6700                       		beq.s	loc_7512
00008C32 2F08                       		move.l	a0,-(sp)
00008C34 2049                       		movea.l	a1,a0
00008C36 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l
00008C3C 205F                       		movea.l	(sp)+,a0
00008C3E                            
00008C3E                            loc_7512:
00008C3E 08E9 0003 0022             		bset	#3,obStatus(a1)
00008C44 08E8 0003 0022             		bset	#3,obStatus(a0)
00008C4A                            
00008C4A                            Plat_Exit:
00008C4A 4E75                       		rts	
00008C4C                            ; End of function PlatformObject
00008C4C                            
00008C4C                            ; ---------------------------------------------------------------------------
00008C4C                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00008C4C                            ; ---------------------------------------------------------------------------
00008C4C                            
00008C4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C4C                            
00008C4C                            
00008C4C                            SlopeObject:
00008C4C 43F8 D000                  		lea	(v_player).w,a1
00008C50 4A69 0012                  		tst.w	obVelY(a1)
00008C54 6B00 FFF4                  		bmi.w	Plat_Exit
00008C58 3029 0008                  		move.w	obX(a1),d0
00008C5C 9068 0008                  		sub.w	obX(a0),d0
00008C60 D041                       		add.w	d1,d0
00008C62 6BE6                       		bmi.s	Plat_Exit
00008C64 D241                       		add.w	d1,d1
00008C66 B041                       		cmp.w	d1,d0
00008C68 64E0                       		bhs.s	Plat_Exit
00008C6A 0828 0000 0001             		btst	#0,obRender(a0)
00008C70 6700                       		beq.s	loc_754A
00008C72 4640                       		not.w	d0
00008C74 D041                       		add.w	d1,d0
00008C76                            
00008C76                            loc_754A:
00008C76 E248                       		lsr.w	#1,d0
00008C78 7600                       		moveq	#0,d3
00008C7A 1632 0000                  		move.b	(a2,d0.w),d3
00008C7E 3028 000C                  		move.w	obY(a0),d0
00008C82 9043                       		sub.w	d3,d0
00008C84 6000 FF1A                  		bra.w	Platform3
00008C88                            ; End of function SlopeObject
00008C88                            
00008C88                            
00008C88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C88                            
00008C88                            
00008C88                            Swing_Solid:
00008C88 43F8 D000                  		lea	(v_player).w,a1
00008C8C 4A69 0012                  		tst.w	obVelY(a1)
00008C90 6B00 FFB8                  		bmi.w	Plat_Exit
00008C94 3029 0008                  		move.w	obX(a1),d0
00008C98 9068 0008                  		sub.w	obX(a0),d0
00008C9C D041                       		add.w	d1,d0
00008C9E 6B00 FFAA                  		bmi.w	Plat_Exit
00008CA2 D241                       		add.w	d1,d1
00008CA4 B041                       		cmp.w	d1,d0
00008CA6 6400 FFA2                  		bhs.w	Plat_Exit
00008CAA 3028 000C                  		move.w	obY(a0),d0
00008CAE 9043                       		sub.w	d3,d0
00008CB0 6000 FEEE                  		bra.w	Platform3
00008CB4                            ; End of function Obj15_Solid
00008CB4                            
00008CB4                            ; ===========================================================================
00008CB4                            
00008CB4                            		include	"_incObj\11 Bridge (part 2).asm"
00008CB4                            
00008CB4                            Bri_Platform:	; Routine 4
00008CB4 6100                       		bsr.s	Bri_WalkOff
00008CB6 6100 0000                  		bsr.w	DisplaySprite
00008CBA 6000 0000                  		bra.w	Bri_ChkDel
00008CBE                            
00008CBE                            ; ---------------------------------------------------------------------------
00008CBE                            ; Subroutine allowing Sonic to walk off a bridge
00008CBE                            ; ---------------------------------------------------------------------------
00008CBE                            
00008CBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008CBE                            
00008CBE                            
00008CBE                            Bri_WalkOff:
00008CBE 7200                       		moveq	#0,d1
00008CC0 1228 0028                  		move.b	obSubtype(a0),d1
00008CC4 E749                       		lsl.w	#3,d1
00008CC6 3401                       		move.w	d1,d2
00008CC8 5041                       		addq.w	#8,d1
00008CCA 6100                       		bsr.s	ExitPlatform2
00008CCC 6400                       		bcc.s	locret_75BE
00008CCE E848                       		lsr.w	#4,d0
00008CD0 1140 003F                  		move.b	d0,$3F(a0)
00008CD4 1028 003E                  		move.b	$3E(a0),d0
00008CD8 0C00 0040                  		cmpi.b	#$40,d0
00008CDC 6700                       		beq.s	loc_75B6
00008CDE 5828 003E                  		addq.b	#4,$3E(a0)
00008CE2                            
00008CE2                            loc_75B6:
00008CE2 6100 0000                  		bsr.w	Bri_Bend
00008CE6 6100 0000                  		bsr.w	Bri_MoveSonic
00008CEA                            
00008CEA                            locret_75BE:
00008CEA 4E75                       		rts	
00008CEC                            ; End of function Bri_WalkOff
00008CEC                            ; End of function Bri_WalkOff
00008CEC                            
00008CEC                            ; ---------------------------------------------------------------------------
00008CEC                            ; Subroutine allowing Sonic to walk or jump off	a platform
00008CEC                            ; ---------------------------------------------------------------------------
00008CEC                            
00008CEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008CEC                            
00008CEC                            
00008CEC                            ExitPlatform:
00008CEC 3401                       		move.w	d1,d2
00008CEE                            
00008CEE                            ExitPlatform2:
00008CEE D442                       		add.w	d2,d2
00008CF0 43F8 D000                  		lea	(v_player).w,a1
00008CF4 0829 0001 0022             		btst	#1,obStatus(a1)
00008CFA 6600                       		bne.s	loc_75E0
00008CFC 3029 0008                  		move.w	obX(a1),d0
00008D00 9068 0008                  		sub.w	obX(a0),d0
00008D04 D041                       		add.w	d1,d0
00008D06 6B00                       		bmi.s	loc_75E0
00008D08 B042                       		cmp.w	d2,d0
00008D0A 6500                       		blo.s	locret_75F2
00008D0C                            
00008D0C                            loc_75E0:
00008D0C 08A9 0003 0022             		bclr	#3,obStatus(a1)
00008D12 117C 0002 0024             		move.b	#2,obRoutine(a0)
00008D18 08A8 0003 0022             		bclr	#3,obStatus(a0)
00008D1E                            
00008D1E                            locret_75F2:
00008D1E 4E75                       		rts	
00008D20                            ; End of function ExitPlatform
00008D20                            
00008D20                            		include	"_incObj\11 Bridge (part 3).asm"
00008D20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D20                            
00008D20                            
00008D20                            Bri_MoveSonic:
00008D20 7000                       		moveq	#0,d0
00008D22 1028 003F                  		move.b	$3F(a0),d0
00008D26 1030 0029                  		move.b	$29(a0,d0.w),d0
00008D2A ED48                       		lsl.w	#6,d0
00008D2C 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008D32 2440                       		movea.l	d0,a2
00008D34 43F8 D000                  		lea	(v_player).w,a1
00008D38 302A 000C                  		move.w	obY(a2),d0
00008D3C 5140                       		subq.w	#8,d0
00008D3E 7200                       		moveq	#0,d1
00008D40 1229 0016                  		move.b	obHeight(a1),d1
00008D44 9041                       		sub.w	d1,d0
00008D46 3340 000C                  		move.w	d0,obY(a1)	; change Sonic's position on y-axis
00008D4A 4E75                       		rts	
00008D4C                            ; End of function Bri_MoveSonic
00008D4C                            
00008D4C                            
00008D4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D4C                            
00008D4C                            
00008D4C                            Bri_Bend:
00008D4C 1028 003E                  		move.b	$3E(a0),d0
00008D50 6100 AE50                  		bsr.w	CalcSine
00008D54 3800                       		move.w	d0,d4
00008D56 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00008D5C 7000                       		moveq	#0,d0
00008D5E 1028 0028                  		move.b	obSubtype(a0),d0
00008D62 E948                       		lsl.w	#4,d0
00008D64 7600                       		moveq	#0,d3
00008D66 1628 003F                  		move.b	$3F(a0),d3
00008D6A 3403                       		move.w	d3,d2
00008D6C D640                       		add.w	d0,d3
00008D6E 7A00                       		moveq	#0,d5
00008D70 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00008D76 1A35 3000                  		move.b	(a5,d3.w),d5
00008D7A 0243 000F                  		andi.w	#$F,d3
00008D7E E94B                       		lsl.w	#4,d3
00008D80 47F4 3000                  		lea	(a4,d3.w),a3
00008D84 45E8 0029                  		lea	$29(a0),a2
00008D88                            
00008D88                            loc_765C:
00008D88 7000                       		moveq	#0,d0
00008D8A 101A                       		move.b	(a2)+,d0
00008D8C ED48                       		lsl.w	#6,d0
00008D8E 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008D94 2240                       		movea.l	d0,a1
00008D96 7000                       		moveq	#0,d0
00008D98 101B                       		move.b	(a3)+,d0
00008D9A 5240                       		addq.w	#1,d0
00008D9C C0C5                       		mulu.w	d5,d0
00008D9E C0C4                       		mulu.w	d4,d0
00008DA0 4840                       		swap	d0
00008DA2 D069 003C                  		add.w	$3C(a1),d0
00008DA6 3340 000C                  		move.w	d0,obY(a1)
00008DAA 51CA FFDC                  		dbf	d2,loc_765C
00008DAE 7000                       		moveq	#0,d0
00008DB0 1028 0028                  		move.b	obSubtype(a0),d0
00008DB4 7600                       		moveq	#0,d3
00008DB6 1628 003F                  		move.b	$3F(a0),d3
00008DBA 5203                       		addq.b	#1,d3
00008DBC 9600                       		sub.b	d0,d3
00008DBE 4403                       		neg.b	d3
00008DC0 6B00                       		bmi.s	locret_76CA
00008DC2 3403                       		move.w	d3,d2
00008DC4 E94B                       		lsl.w	#4,d3
00008DC6 47F4 3000                  		lea	(a4,d3.w),a3
00008DCA D6C2                       		adda.w	d2,a3
00008DCC 5342                       		subq.w	#1,d2
00008DCE 6500                       		bcs.s	locret_76CA
00008DD0                            
00008DD0                            loc_76A4:
00008DD0 7000                       		moveq	#0,d0
00008DD2 101A                       		move.b	(a2)+,d0
00008DD4 ED48                       		lsl.w	#6,d0
00008DD6 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008DDC 2240                       		movea.l	d0,a1
00008DDE 7000                       		moveq	#0,d0
00008DE0 1023                       		move.b	-(a3),d0
00008DE2 5240                       		addq.w	#1,d0
00008DE4 C0C5                       		mulu.w	d5,d0
00008DE6 C0C4                       		mulu.w	d4,d0
00008DE8 4840                       		swap	d0
00008DEA D069 003C                  		add.w	$3C(a1),d0
00008DEE 3340 000C                  		move.w	d0,obY(a1)
00008DF2 51CA FFDC                  		dbf	d2,loc_76A4
00008DF6                            
00008DF6                            locret_76CA:
00008DF6 4E75                       		rts	
00008DF8                            ; End of function Bri_Bend
00008DF8                            
00008DF8                            ; ===========================================================================
00008DF8                            ; ---------------------------------------------------------------------------
00008DF8                            ; GHZ bridge-bending data
00008DF8                            ; (Defines how the bridge bends	when Sonic walks across	it)
00008DF8                            ; ---------------------------------------------------------------------------
00008DF8                            Obj11_BendData:	incbin	"misc\ghzbend1.bin"
00008F08                            		even
00008F08                            Obj11_BendData2:incbin	"misc\ghzbend2.bin"
00009008                            		even
00009008                            
00009008                            ; ===========================================================================
00009008                            
00009008                            Bri_ChkDel:
00009026 4E75                       		rts	
00009028                            ; ===========================================================================
00009028                            
00009028                            @deletebridge:
00009028 7400                       		moveq	#0,d2
0000902A 45E8 0028                  		lea	obSubtype(a0),a2 ; load bridge length
0000902E 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00009030 5302                       		subq.b	#1,d2		; subtract 1
00009032 6500                       		bcs.s	@delparent
00009034                            
00009034                            	@loop:
00009034 7000                       		moveq	#0,d0
00009036 101A                       		move.b	(a2)+,d0
00009038 ED48                       		lsl.w	#6,d0
0000903A 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009040 2240                       		movea.l	d0,a1
00009042 B048                       		cmp.w	a0,d0
00009044 6700                       		beq.s	@skipdel
00009046 6100 0000                  		bsr.w	DeleteChild
0000904A                            
0000904A                            	@skipdel:
0000904A 51CA FFE8                  		dbf	d2,@loop ; repeat d2 times (bridge length)
0000904E                            
0000904E                            @delparent:
0000904E 6100 0000                  		bsr.w	DeleteObject
00009052 4E75                       		rts	
00009054                            ; ===========================================================================
00009054                            
00009054                            Bri_Delete:	; Routine 6, 8
00009054 6100 0000                  		bsr.w	DeleteObject
00009058 4E75                       		rts	
0000905A                            ; ===========================================================================
0000905A                            
0000905A                            Bri_Display:	; Routine $A
0000905A 6100 0000                  		bsr.w	DisplaySprite
0000905E 4E75                       		rts	
0000905E 4E75                       		rts	
00009060                            Map_Bri:	include	"_maps\Bridge.asm"
00009060                            ; ---------------------------------------------------------------------------
00009060                            ; Sprite mappings - GHZ	bridge
00009060                            ; ---------------------------------------------------------------------------
00009060                            Map_Bri_internal:
00009060 0000                       		dc.w M_Bri_Log-Map_Bri_internal
00009062 0000                       		dc.w M_Bri_Stump-Map_Bri_internal
00009064 0000                       		dc.w M_Bri_Rope-Map_Bri_internal
00009066 01                         M_Bri_Log:	dc.b 1
00009067 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; log
0000906C 02                         M_Bri_Stump:	dc.b 2
0000906D F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0	; stump & rope
00009072 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00009077 01                         M_Bri_Rope:	dc.b 1
00009078 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8	; rope only
0000907E 00                         		even
0000907E 00                         		even
0000907E                            
0000907E                            		include	"_incObj\15 Swinging Platforms (part 1).asm"
0000907E                            ; ---------------------------------------------------------------------------
0000907E                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
0000907E                            ;	    - spiked ball on a chain (SBZ)
0000907E                            ; ---------------------------------------------------------------------------
0000907E                            
0000907E                            SwingingPlatform:
0000907E 7000                       		moveq	#0,d0
00009080 1028 0024                  		move.b	obRoutine(a0),d0
00009084 323B 0000                  		move.w	Swing_Index(pc,d0.w),d1
00009088 4EFB 1000                  		jmp	Swing_Index(pc,d1.w)
0000908C                            ; ===========================================================================
0000908C 0000 0000                  Swing_Index:	dc.w Swing_Main-Swing_Index, Swing_SetSolid-Swing_Index
00009090 0000 0000                  		dc.w Swing_Action2-Swing_Index,	Swing_Delete-Swing_Index
00009094 0000 0000                  		dc.w Swing_Delete-Swing_Index, Swing_Display-Swing_Index
00009098 0000                       		dc.w Swing_Action-Swing_Index
0000909A                            
0000909A =0000003A                  swing_origX:	equ $3A		; original x-axis position
0000909A =00000038                  swing_origY:	equ $38		; original y-axis position
0000909A                            ; ===========================================================================
0000909A                            
0000909A                            Swing_Main:	; Routine 0
0000909A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000909E 217C 0000 0000 0004        		move.l	#Map_Swing_GHZ,obMap(a0) ; GHZ and MZ specific code
000090A6 317C 4380 0002             		move.w	#$4380,obGfx(a0)
000090AC 117C 0004 0001             		move.b	#4,obRender(a0)
000090B2 317C 0180 0018             		move.w	#$180,obPriority(a0)
000090B8 117C 0018 0014             		move.b	#$18,obActWid(a0)
000090BE 117C 0008 0016             		move.b	#8,obHeight(a0)
000090C4 3168 000C 0038             		move.w	obY(a0),swing_origY(a0)
000090CA 3168 0008 003A             		move.w	obX(a0),swing_origX(a0)
000090D0 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
000090D6 6600                       		bne.s	@notSLZ
000090D8                            
000090D8 217C 0000 0000 0004        		move.l	#Map_Swing_SLZ,obMap(a0) ; SLZ specific code
000090E0 317C 43DC 0002             		move.w	#$43DC,obGfx(a0)
000090E6 117C 0020 0014             		move.b	#$20,obActWid(a0)
000090EC 117C 0010 0016             		move.b	#$10,obHeight(a0)
000090F2 117C 0099 0020             		move.b	#$99,obColType(a0)
000090F8                            
000090F8                            	@notSLZ:
000090F8 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
000090FE 6600                       		bne.s	@length
00009100                            
00009100 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0) ; SBZ specific code
00009108 317C 0391 0002             		move.w	#$391,obGfx(a0)
0000910E 117C 0018 0014             		move.b	#$18,obActWid(a0)
00009114 117C 0018 0016             		move.b	#$18,obHeight(a0)
0000911A 117C 0086 0020             		move.b	#$86,obColType(a0)
00009120 117C 000C 0024             		move.b	#$C,obRoutine(a0) ; goto Swing_Action next
00009126                            
00009126                            @length:
00009126 1810                       		move.b	0(a0),d4
00009128 7200                       		moveq	#0,d1
0000912A 45E8 0028                  		lea	obSubtype(a0),a2 ; move chain length to a2
0000912E 1212                       		move.b	(a2),d1		; move a2 to d1
00009130 3F01                       		move.w	d1,-(sp)
00009132 0241 000F                  		andi.w	#$F,d1
00009136 14FC 0000                  		move.b	#0,(a2)+
0000913A 3601                       		move.w	d1,d3
0000913C E94B                       		lsl.w	#4,d3
0000913E 5003                       		addq.b	#8,d3
00009140 1143 003C                  		move.b	d3,$3C(a0)
00009144 5103                       		subq.b	#8,d3
00009146 4A28 001A                  		tst.b	obFrame(a0)
0000914A 6700                       		beq.s	@makechain
0000914C 5003                       		addq.b	#8,d3
0000914E 5341                       		subq.w	#1,d1
00009150                            
00009150                            @makechain:
00009150 6100 0000                  		bsr.w	FindFreeObj
00009154 6600                       		bne.s	@fail
00009156 5228 0028                  		addq.b	#1,obSubtype(a0)
0000915A 3A09                       		move.w	a1,d5
0000915C 0445 D000                  		subi.w	#$D000,d5
00009160 EC4D                       		lsr.w	#6,d5
00009162 0245 007F                  		andi.w	#$7F,d5
00009166 14C5                       		move.b	d5,(a2)+
00009168 137C 000A 0024             		move.b	#$A,obRoutine(a1) ; goto Swing_Display next
0000916E 1284                       		move.b	d4,0(a1)	; load swinging	object
00009170 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00009176 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000917C 08A9 0006 0002             		bclr	#6,obGfx(a1)
00009182 137C 0004 0001             		move.b	#4,obRender(a1)
00009188 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000918E 137C 0008 0014             		move.b	#8,obActWid(a1)
00009194 137C 0001 001A             		move.b	#1,obFrame(a1)
0000919A 1343 003C                  		move.b	d3,$3C(a1)
0000919E 0403 0010                  		subi.b	#$10,d3
000091A2 6400                       		bcc.s	@notanchor
000091A4 137C 0002 001A             		move.b	#2,obFrame(a1)
000091AA 337C 0180 0018             		move.w	#$180,obPriority(a1)
000091B0 08E9 0006 0002             		bset	#6,obGfx(a1)
000091B6                            
000091B6                            	@notanchor:
000091B6 51C9 FF98                  		dbf	d1,@makechain ; repeat d1 times (chain length)
000091BA                            
000091BA                            	@fail:
000091BA 3A08                       		move.w	a0,d5
000091BC 0445 D000                  		subi.w	#$D000,d5
000091C0 EC4D                       		lsr.w	#6,d5
000091C2 0245 007F                  		andi.w	#$7F,d5
000091C6 14C5                       		move.b	d5,(a2)+
000091C8 317C 4080 0026             		move.w	#$4080,obAngle(a0)
000091CE 317C FE00 003E             		move.w	#-$200,$3E(a0)
000091D4 321F                       		move.w	(sp)+,d1
000091D6 0801 0004                  		btst	#4,d1		; is object type $1X ?
000091DA 6700                       		beq.s	@not1X	; if not, branch
000091DC 217C 0000 0000 0004        		move.l	#Map_GBall,obMap(a0) ; use GHZ ball mappings
000091E4 317C 43AA 0002             		move.w	#$43AA,obGfx(a0)
000091EA 117C 0001 001A             		move.b	#1,obFrame(a0)
000091F0 317C 0100 0018             		move.w	#$100,obPriority(a0)
000091F6 117C 0081 0020             		move.b	#$81,obColType(a0) ; make object hurt when touched
000091FC                            
000091FC                            	@not1X:
000091FC 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; is zone SBZ?
00009202 6700                       		beq.s	Swing_Action	; if yes, branch
00009204                            
00009204                            Swing_SetSolid:	; Routine 2
00009204 7200                       		moveq	#0,d1
00009206 1228 0014                  		move.b	obActWid(a0),d1
0000920A 7600                       		moveq	#0,d3
0000920C 1628 0016                  		move.b	obHeight(a0),d3
00009210 6100 FA76                  		bsr.w	Swing_Solid
00009214                            
00009214                            Swing_Action:	; Routine $C
00009214 6100 0000                  		bsr.w	Swing_Move
00009218 6100 0000                  		bsr.w	DisplaySprite
0000921C 6000 0000                  		bra.w	Swing_ChkDel
00009220                            ; ===========================================================================
00009220                            
00009220                            Swing_Action2:	; Routine 4
00009220 7200                       		moveq	#0,d1
00009222 1228 0014                  		move.b	obActWid(a0),d1
00009226 6100 FAC4                  		bsr.w	ExitPlatform
0000922A 3F28 0008                  		move.w	obX(a0),-(sp)
0000922E 6100 0000                  		bsr.w	Swing_Move
00009232 341F                       		move.w	(sp)+,d2
00009234 7600                       		moveq	#0,d3
00009236 1628 0016                  		move.b	obHeight(a0),d3
0000923A 5203                       		addq.b	#1,d3
0000923C 6100 0000                  		bsr.w	MvSonicOnPtfm
00009240 6100 0000                  		bsr.w	DisplaySprite
00009244 6000 0000                  		bra.w	Swing_ChkDel
00009248                            
00009248 4E75                       		rts
00009248 4E75                       		rts
0000924A                            
0000924A                            ; ---------------------------------------------------------------------------
0000924A                            ; Subroutine to	change Sonic's position with a platform
0000924A                            ; ---------------------------------------------------------------------------
0000924A                            
0000924A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000924A                            
0000924A                            
0000924A                            MvSonicOnPtfm:
0000924A 43F8 D000                  		lea	(v_player).w,a1
0000924E 3028 000C                  		move.w	obY(a0),d0
00009252 9043                       		sub.w	d3,d0
00009254 6000                       		bra.s	MvSonic2
00009256                            ; End of function MvSonicOnPtfm
00009256                            
00009256                            ; ---------------------------------------------------------------------------
00009256                            ; Subroutine to	change Sonic's position with a platform
00009256                            ; ---------------------------------------------------------------------------
00009256                            
00009256                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009256                            
00009256                            
00009256                            MvSonicOnPtfm2:
00009256 43F8 D000                  		lea	(v_player).w,a1
0000925A 3028 000C                  		move.w	obY(a0),d0
0000925E 0440 0009                  		subi.w	#9,d0
00009262                            
00009262                            MvSonic2:
00009262 4A38 F7C8                  		tst.b	(f_lockmulti).w
00009266 6B00                       		bmi.s	locret_7B62
00009268 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000926E 6400                       		bhs.s	locret_7B62
00009270 4A78 FE08                  		tst.w	(v_debuguse).w
00009274 6600                       		bne.s	locret_7B62
00009276 7200                       		moveq	#0,d1
00009278 1229 0016                  		move.b	obHeight(a1),d1
0000927C 9041                       		sub.w	d1,d0
0000927E 3340 000C                  		move.w	d0,obY(a1)
00009282 9468 0008                  		sub.w	obX(a0),d2
00009286 9569 0008                  		sub.w	d2,obX(a1)
0000928A                            
0000928A                            locret_7B62:
0000928A 4E75                       		rts	
0000928C                            ; End of function MvSonicOnPtfm2
0000928C                            
0000928C                            		include	"_incObj\15 Swinging Platforms (part 2).asm"
0000928C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000928C                            
0000928C                            
0000928C                            Swing_Move:
0000928C 1038 FE78                  		move.b	(v_oscillate+$1A).w,d0
00009290 323C 0080                  		move.w	#$80,d1
00009294 0828 0000 0022             		btst	#0,obStatus(a0)
0000929A 6700                       		beq.s	loc_7B78
0000929C 4440                       		neg.w	d0
0000929E D041                       		add.w	d1,d0
000092A0                            
000092A0                            loc_7B78:
000092A0 6000                       		bra.s	Swing_Move2
000092A2                            ; End of function Swing_Move
000092A2                            
000092A2                            
000092A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000092A2                            
000092A2                            
000092A2                            Obj48_Move:
000092A2 4A28 003D                  		tst.b	$3D(a0)
000092A6 6600                       		bne.s	loc_7B9C
000092A8 3028 003E                  		move.w	$3E(a0),d0
000092AC 5040                       		addq.w	#8,d0
000092AE 3140 003E                  		move.w	d0,$3E(a0)
000092B2 D168 0026                  		add.w	d0,obAngle(a0)
000092B6 0C40 0200                  		cmpi.w	#$200,d0
000092BA 6600                       		bne.s	loc_7BB6
000092BC 117C 0001 003D             		move.b	#1,$3D(a0)
000092C2 6000                       		bra.s	loc_7BB6
000092C4                            ; ===========================================================================
000092C4                            
000092C4                            loc_7B9C:
000092C4 3028 003E                  		move.w	$3E(a0),d0
000092C8 5140                       		subq.w	#8,d0
000092CA 3140 003E                  		move.w	d0,$3E(a0)
000092CE D168 0026                  		add.w	d0,obAngle(a0)
000092D2 0C40 FE00                  		cmpi.w	#-$200,d0
000092D6 6600                       		bne.s	loc_7BB6
000092D8 117C 0000 003D             		move.b	#0,$3D(a0)
000092DE                            
000092DE                            loc_7BB6:
000092DE 1028 0026                  		move.b	obAngle(a0),d0
000092E2                            ; End of function Obj48_Move
000092E2                            
000092E2                            
000092E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000092E2                            
000092E2                            
000092E2                            Swing_Move2:
000092E2 6100 A8BE                  		bsr.w	CalcSine
000092E6 3428 0038                  		move.w	$38(a0),d2
000092EA 3628 003A                  		move.w	$3A(a0),d3
000092EE 45E8 0028                  		lea	obSubtype(a0),a2
000092F2 7C00                       		moveq	#0,d6
000092F4 1C1A                       		move.b	(a2)+,d6
000092F6                            
000092F6                            loc_7BCE:
000092F6 7800                       		moveq	#0,d4
000092F8 181A                       		move.b	(a2)+,d4
000092FA ED4C                       		lsl.w	#6,d4
000092FC 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00009302 2244                       		movea.l	d4,a1
00009304 7800                       		moveq	#0,d4
00009306 1829 003C                  		move.b	$3C(a1),d4
0000930A 2A04                       		move.l	d4,d5
0000930C C9C0                       		muls.w	d0,d4
0000930E E084                       		asr.l	#8,d4
00009310 CBC1                       		muls.w	d1,d5
00009312 E085                       		asr.l	#8,d5
00009314 D842                       		add.w	d2,d4
00009316 DA43                       		add.w	d3,d5
00009318 3344 000C                  		move.w	d4,obY(a1)
0000931C 3345 0008                  		move.w	d5,obX(a1)
00009320 51CE FFD4                  		dbf	d6,loc_7BCE
00009324 4E75                       		rts	
00009326                            ; End of function Swing_Move2
00009326                            
00009326                            ; ===========================================================================
00009326                            
00009326                            Swing_ChkDel:
00009344 4E75                       		rts	
00009346                            ; ===========================================================================
00009346                            
00009346                            Swing_DelAll:
00009346 7400                       		moveq	#0,d2
00009348 45E8 0028                  		lea	obSubtype(a0),a2
0000934C 141A                       		move.b	(a2)+,d2
0000934E                            
0000934E                            Swing_DelLoop:
0000934E 7000                       		moveq	#0,d0
00009350 101A                       		move.b	(a2)+,d0
00009352 ED48                       		lsl.w	#6,d0
00009354 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0000935A 2240                       		movea.l	d0,a1
0000935C 6100 0000                  		bsr.w	DeleteChild
00009360 51CA FFEC                  		dbf	d2,Swing_DelLoop ; repeat for length of	chain
00009364 4E75                       		rts	
00009366                            ; ===========================================================================
00009366                            
00009366                            Swing_Delete:	; Routine 6, 8
00009366 6100 0000                  		bsr.w	DeleteObject
0000936A 4E75                       		rts	
0000936C                            ; ===========================================================================
0000936C                            
0000936C                            Swing_Display:	; Routine $A
0000936C 6000 0000                  		bra.w	DisplaySprite
0000936C 6000 0000                  		bra.w	DisplaySprite
00009370                            Map_Swing_GHZ:	include	"_maps\Swinging Platforms (GHZ).asm"
00009370                            ; ---------------------------------------------------------------------------
00009370                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00009370                            ; ---------------------------------------------------------------------------
00009370                            Map_Swing_GHZ_internal:
00009370 0000                       		dc.w @block-Map_Swing_GHZ_internal
00009372 0000                       		dc.w @chain-Map_Swing_GHZ_internal
00009374 0000                       		dc.w @anchor-Map_Swing_GHZ_internal
00009376 02                         @block:		dc.b 2
00009377 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
0000937C F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00009381 01                         @chain:		dc.b 1
00009382 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00009387 01                         @anchor:	dc.b 1
00009388 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000938E 00                         		even
0000938E 00                         		even
0000938E                            Map_Swing_SLZ:	include	"_maps\Swinging Platforms (SLZ).asm"
0000938E                            ; ---------------------------------------------------------------------------
0000938E                            ; Sprite mappings - SLZ	swinging platforms
0000938E                            ; ---------------------------------------------------------------------------
0000938E                            Map_Swing_SLZ_internal:
0000938E 0000                       		dc.w @block-Map_Swing_SLZ_internal
00009390 0000                       		dc.w @chain-Map_Swing_SLZ_internal
00009392 0000                       		dc.w @anchor-Map_Swing_SLZ_internal
00009394 08                         @block:		dc.b 8
00009395 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000939A F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000939F F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
000093A4 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
000093A9 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
000093AE 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
000093B3 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
000093B8 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
000093BD 01                         @chain:		dc.b 1
000093BE F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000093C3 01                         @anchor:	dc.b 1
000093C4 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000093CA 00                         		even
000093CA 00                         		even
000093CA                            		include	"_incObj\17 Spiked Pole Helix.asm"
000093CA                            ; ---------------------------------------------------------------------------
000093CA                            ; Object 17 - helix of spikes on a pole	(GHZ)
000093CA                            ; ---------------------------------------------------------------------------
000093CA                            
000093CA                            Helix:
000093CA 7000                       		moveq	#0,d0
000093CC 1028 0024                  		move.b	obRoutine(a0),d0
000093D0 323B 0000                  		move.w	Hel_Index(pc,d0.w),d1
000093D4 4EFB 1000                  		jmp	Hel_Index(pc,d1.w)
000093D8                            ; ===========================================================================
000093D8 0000                       Hel_Index:	dc.w Hel_Main-Hel_Index
000093DA 0000                       		dc.w Hel_Action-Hel_Index
000093DC 0000                       		dc.w Hel_Action-Hel_Index
000093DE 0000                       		dc.w Hel_Delete-Hel_Index
000093E0 0000                       		dc.w Hel_Display-Hel_Index
000093E2                            
000093E2 =0000003E                  hel_frame:	equ $3E		; start frame (different for each spike)
000093E2                            
000093E2                            ;		$29-38 are used for child object addresses
000093E2                            ; ===========================================================================
000093E2                            
000093E2                            Hel_Main:	; Routine 0
000093E2 5428 0024                  		addq.b	#2,obRoutine(a0)
000093E6 217C 0000 0000 0004        		move.l	#Map_Hel,obMap(a0)
000093EE 317C 4398 0002             		move.w	#$4398,obGfx(a0)
000093F4 117C 0007 0022             		move.b	#7,obStatus(a0)
000093FA 117C 0004 0001             		move.b	#4,obRender(a0)
00009400 317C 0180 0018             		move.w	#$180,obPriority(a0)
00009406 117C 0008 0014             		move.b	#8,obActWid(a0)
0000940C 3428 000C                  		move.w	obY(a0),d2
00009410 3628 0008                  		move.w	obX(a0),d3
00009414 1810                       		move.b	0(a0),d4
00009416 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
0000941A 7200                       		moveq	#0,d1
0000941C 1212                       		move.b	(a2),d1		; move helix length to d1
0000941E 14FC 0000                  		move.b	#0,(a2)+	; clear subtype
00009422 3001                       		move.w	d1,d0
00009424 E248                       		lsr.w	#1,d0
00009426 E948                       		lsl.w	#4,d0
00009428 9640                       		sub.w	d0,d3		; d3 is x-axis position of leftmost spike
0000942A 5501                       		subq.b	#2,d1
0000942C 6500                       		bcs.s	Hel_Action	; skip to action if length is only 1
0000942E 7C00                       		moveq	#0,d6
00009430                            
00009430                            Hel_Build:
00009430 6100 0000                  		bsr.w	FindFreeObj
00009434 6600                       		bne.s	Hel_Action
00009436 5228 0028                  		addq.b	#1,obSubtype(a0)
0000943A 3A09                       		move.w	a1,d5
0000943C 0445 D000                  		subi.w	#$D000,d5
00009440 EC4D                       		lsr.w	#6,d5
00009442 0245 007F                  		andi.w	#$7F,d5
00009446 14C5                       		move.b	d5,(a2)+	; copy child address to parent RAM
00009448 137C 0008 0024             		move.b	#8,obRoutine(a1)
0000944E 1284                       		move.b	d4,0(a1)
00009450 3342 000C                  		move.w	d2,ObY(a1)
00009454 3343 0008                  		move.w	d3,obX(a1)
00009458 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
0000945E 337C 4398 0002             		move.w	#$4398,obGfx(a1)
00009464 137C 0004 0001             		move.b	#4,obRender(a1)
0000946A 337C 0180 0018             		move.w	#$180,obPriority(a1)
00009470 137C 0008 0014             		move.b	#8,obActWid(a1)
00009476 1346 003E                  		move.b	d6,hel_frame(a1)
0000947A 5206                       		addq.b	#1,d6
0000947C 0206 0007                  		andi.b	#7,d6
00009480 0643 0010                  		addi.w	#$10,d3
00009484 B668 0008                  		cmp.w	obX(a0),d3	; is this spike in the centre?
00009488 6600                       		bne.s	Hel_NotCentre	; if not, branch
0000948A                            
0000948A 1146 003E                  		move.b	d6,hel_frame(a0) ; set parent spike frame
0000948E 5206                       		addq.b	#1,d6
00009490 0206 0007                  		andi.b	#7,d6
00009494 0643 0010                  		addi.w	#$10,d3		; skip to next spike
00009498 5228 0028                  		addq.b	#1,obSubtype(a0)
0000949C                            
0000949C                            	Hel_NotCentre:
0000949C 51C9 FF92                  		dbf	d1,Hel_Build ; repeat d1 times (helix length)
000094A0                            
000094A0                            Hel_Action:	; Routine 2, 4
000094A0 6100 0000                  		bsr.w	Hel_RotateSpikes
000094A4 6100 0000                  		bsr.w	DisplaySprite
000094A8 6000 0000                  		bra.w	Hel_ChkDel
000094AC                            
000094AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000094AC                            
000094AC                            
000094AC                            Hel_RotateSpikes:
000094AC 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
000094B0 117C 0000 0020             		move.b	#0,obColType(a0) ; make object harmless
000094B6 D028 003E                  		add.b	hel_frame(a0),d0
000094BA 0200 0007                  		andi.b	#7,d0
000094BE 1140 001A                  		move.b	d0,obFrame(a0)	; change current frame
000094C2 6600                       		bne.s	locret_7DA6
000094C4 117C 0084 0020             		move.b	#$84,obColType(a0) ; make object harmful
000094CA                            
000094CA                            locret_7DA6:
000094CA 4E75                       		rts	
000094CC                            ; End of function Hel_RotateSpikes
000094CC                            
000094CC                            ; ===========================================================================
000094CC                            
000094CC                            Hel_ChkDel:
000094EA 4E75                       		rts	
000094EC                            ; ===========================================================================
000094EC                            
000094EC                            Hel_DelAll:
000094EC 7400                       		moveq	#0,d2
000094EE 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
000094F2 141A                       		move.b	(a2)+,d2	; move helix length to d2
000094F4 5502                       		subq.b	#2,d2
000094F6 6500                       		bcs.s	Hel_Delete
000094F8                            
000094F8                            	Hel_DelLoop:
000094F8 7000                       		moveq	#0,d0
000094FA 101A                       		move.b	(a2)+,d0
000094FC ED48                       		lsl.w	#6,d0
000094FE 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009504 2240                       		movea.l	d0,a1		; get child address
00009506 6100 0000                  		bsr.w	DeleteChild	; delete object
0000950A 51CA FFEC                  		dbf	d2,Hel_DelLoop ; repeat d2 times (helix length)
0000950E                            
0000950E                            Hel_Delete:	; Routine 6
0000950E 6100 0000                  		bsr.w	DeleteObject
00009512 4E75                       		rts	
00009514                            ; ===========================================================================
00009514                            
00009514                            Hel_Display:	; Routine 8
00009514 6100 FF96                  		bsr.w	Hel_RotateSpikes
00009518 6000 0000                  		bra.w	DisplaySprite
00009518 6000 0000                  		bra.w	DisplaySprite
0000951C                            Map_Hel:	include	"_maps\Spiked Pole Helix.asm"
0000951C                            ; ---------------------------------------------------------------------------
0000951C                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000951C                            ; ---------------------------------------------------------------------------
0000951C                            Map_Hel_internal:
0000951C 0000                       		dc.w byte_7E08-Map_Hel_internal
0000951E 0000                       		dc.w byte_7E0E-Map_Hel_internal
00009520 0000                       		dc.w byte_7E14-Map_Hel_internal
00009522 0000                       		dc.w byte_7E1A-Map_Hel_internal
00009524 0000                       		dc.w byte_7E20-Map_Hel_internal
00009526 0000                       		dc.w byte_7E26-Map_Hel_internal
00009528 0000                       		dc.w byte_7E2E-Map_Hel_internal
0000952A 0000                       		dc.w byte_7E2C-Map_Hel_internal
0000952C 01                         byte_7E08:	dc.b 1
0000952D F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC	; points straight up (harmful)
00009532 01                         byte_7E0E:	dc.b 1
00009533 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8	; 45 degree
00009538 01                         byte_7E14:	dc.b 1
00009539 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8	; 90 degree
0000953E 01                         byte_7E1A:	dc.b 1
0000953F FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8	; 45 degree
00009544 01                         byte_7E20:	dc.b 1
00009545 0001 000E FC               		dc.b 0,	1, 0, $E, $FC	; straight down
0000954A 01                         byte_7E26:	dc.b 1
0000954B 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD	; 45 degree
00009550 01                         byte_7E2C:	dc.b 1
00009551 F4                         		dc.b $F4
00009552                            byte_7E2E:	; reads the 0 below	; not visible
00009552 0000 11FD                  		dc.b 0, 0,	$11, $FD ; 45 degree
00009556                            		even
00009556                            		even
00009556                            		include	"_incObj\18 Platforms.asm"
00009556                            ; ---------------------------------------------------------------------------
00009556                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00009556                            ; ---------------------------------------------------------------------------
00009556                            
00009556                            BasicPlatform:
00009556 7000                       		moveq	#0,d0
00009558 1028 0024                  		move.b	obRoutine(a0),d0
0000955C 323B 0000                  		move.w	Plat_Index(pc,d0.w),d1
00009560 4EFB 1000                  		jmp	Plat_Index(pc,d1.w)
00009564                            ; ===========================================================================
00009564 0000                       Plat_Index:	dc.w Plat_Main-Plat_Index
00009566 0000                       		dc.w Plat_Solid-Plat_Index
00009568 0000                       		dc.w Plat_Action2-Plat_Index
0000956A 0000                       		dc.w Plat_Delete-Plat_Index
0000956C 0000                       		dc.w Plat_Action-Plat_Index
0000956E                            ; ===========================================================================
0000956E                            
0000956E                            Plat_Main:	; Routine 0
0000956E 5428 0024                  		addq.b	#2,obRoutine(a0)
00009572 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009578 217C 0000 0000 0004        		move.l	#Map_Plat_GHZ,obMap(a0)
00009580 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009586 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SYZ
0000958C 6600                       		bne.s	@notSYZ
0000958E                            
0000958E 217C 0000 0000 0004        		move.l	#Map_Plat_SYZ,obMap(a0) ; SYZ specific code
00009596 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000959C                            
0000959C                            	@notSYZ:
0000959C 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
000095A2 6600                       		bne.s	@notSLZ
000095A4 217C 0000 0000 0004        		move.l	#Map_Plat_SLZ,obMap(a0) ; SLZ specific code
000095AC 117C 0020 0014             		move.b	#$20,obActWid(a0)
000095B2 317C 4000 0002             		move.w	#$4000,obGfx(a0)
000095B8 117C 0003 0028             		move.b	#3,obSubtype(a0)
000095BE                            
000095BE                            	@notSLZ:
000095BE 117C 0004 0001             		move.b	#4,obRender(a0)
000095C4 317C 0200 0018             		move.w	#$200,obPriority(a0)
000095CA 3168 000C 002C             		move.w	obY(a0),$2C(a0)
000095D0 3168 000C 0034             		move.w	obY(a0),$34(a0)
000095D6 3168 0008 0032             		move.w	obX(a0),$32(a0)
000095DC 317C 0080 0026             		move.w	#$80,obAngle(a0)
000095E2 7200                       		moveq	#0,d1
000095E4 1028 0028                  		move.b	obSubtype(a0),d0
000095E8 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
000095EC 6600                       		bne.s	@setframe	; if not, branch
000095EE 5201                       		addq.b	#1,d1		; use frame #1
000095F0 117C 0020 0014             		move.b	#$20,obActWid(a0) ; set width
000095F6                            
000095F6                            	@setframe:
000095F6 1141 001A                  		move.b	d1,obFrame(a0)	; set frame to d1
000095FA                            
000095FA                            Plat_Solid:	; Routine 2
000095FA 4A28 0038                  		tst.b	$38(a0)
000095FE 6700                       		beq.s	loc_7EE0
00009600 5928 0038                  		subq.b	#4,$38(a0)
00009604                            
00009604                            	loc_7EE0:
00009604 7200                       		moveq	#0,d1
00009606 1228 0014                  		move.b	obActWid(a0),d1
0000960A 6100 F56C                  		bsr.w	PlatformObject
0000960E                            
0000960E                            Plat_Action:	; Routine 8
0000960E 6100 0000                  		bsr.w	Plat_Move
00009612 6100 0000                  		bsr.w	Plat_Nudge
00009616 6100 0000                  		bsr.w	DisplaySprite
0000961A 6000 0000                  		bra.w	Plat_ChkDel
0000961E                            ; ===========================================================================
0000961E                            
0000961E                            Plat_Action2:	; Routine 4
0000961E 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00009624 6700                       		beq.s	loc_7F06
00009626 5828 0038                  		addq.b	#4,$38(a0)
0000962A                            
0000962A                            	loc_7F06:
0000962A 7200                       		moveq	#0,d1
0000962C 1228 0014                  		move.b	obActWid(a0),d1
00009630 6100 F6BA                  		bsr.w	ExitPlatform
00009634 3F28 0008                  		move.w	obX(a0),-(sp)
00009638 6100 0000                  		bsr.w	Plat_Move
0000963C 6100 0000                  		bsr.w	Plat_Nudge
00009640 341F                       		move.w	(sp)+,d2
00009642 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00009646 6100 0000                  		bsr.w	DisplaySprite
0000964A 6000 0000                  		bra.w	Plat_ChkDel
0000964E                            
0000964E 4E75                       		rts
00009650                            
00009650                            ; ---------------------------------------------------------------------------
00009650                            ; Subroutine to	move platform slightly when you	stand on it
00009650                            ; ---------------------------------------------------------------------------
00009650                            
00009650                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009650                            
00009650                            
00009650                            Plat_Nudge:
00009650 1028 0038                  		move.b	$38(a0),d0
00009654 6100 A54C                  		bsr.w	CalcSine
00009658 323C 0400                  		move.w	#$400,d1
0000965C C1C1                       		muls.w	d1,d0
0000965E 4840                       		swap	d0
00009660 D068 002C                  		add.w	$2C(a0),d0
00009664 3140 000C                  		move.w	d0,obY(a0)
00009668 4E75                       		rts	
0000966A                            ; End of function Plat_Nudge
0000966A                            
0000966A                            ; ---------------------------------------------------------------------------
0000966A                            ; Subroutine to	move platforms
0000966A                            ; ---------------------------------------------------------------------------
0000966A                            
0000966A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000966A                            
0000966A                            
0000966A                            Plat_Move:
0000966A 7000                       		moveq	#0,d0
0000966C 1028 0028                  		move.b	obSubtype(a0),d0
00009670 0240 000F                  		andi.w	#$F,d0
00009674 D040                       		add.w	d0,d0
00009676 323B 0000                  		move.w	@index(pc,d0.w),d1
0000967A 4EFB 1000                  		jmp	@index(pc,d1.w)
0000967E                            ; End of function Plat_Move
0000967E                            
0000967E                            ; ===========================================================================
0000967E 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00009682 0000 0000                  		dc.w @type02-@index, @type03-@index
00009686 0000 0000                  		dc.w @type04-@index, @type05-@index
0000968A 0000 0000                  		dc.w @type06-@index, @type07-@index
0000968E 0000 0000                  		dc.w @type08-@index, @type00-@index
00009692 0000 0000                  		dc.w @type0A-@index, @type0B-@index
00009696 0000                       		dc.w @type0C-@index
00009698                            ; ===========================================================================
00009698                            
00009698                            @type00:
00009698 4E75                       		rts			; platform 00 doesn't move
0000969A                            ; ===========================================================================
0000969A                            
0000969A                            @type05:
0000969A 3028 0032                  		move.w	$32(a0),d0
0000969E 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
000096A2 4401                       		neg.b	d1		; reverse platform-motion
000096A4 0601 0040                  		addi.b	#$40,d1
000096A8 6000                       		bra.s	@type01_move
000096AA                            ; ===========================================================================
000096AA                            
000096AA                            @type01:
000096AA 3028 0032                  		move.w	$32(a0),d0
000096AE 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
000096B2 0401 0040                  		subi.b	#$40,d1
000096B6                            
000096B6                            	@type01_move:
000096B6 4881                       		ext.w	d1
000096B8 D041                       		add.w	d1,d0
000096BA 3140 0008                  		move.w	d0,obX(a0)	; change position on x-axis
000096BE 6000 0000                  		bra.w	@chgmotion
000096C2                            ; ===========================================================================
000096C2                            
000096C2                            @type0C:
000096C2 3028 0034                  		move.w	$34(a0),d0
000096C6 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
000096CA 4401                       		neg.b	d1		; reverse platform-motion
000096CC 0601 0030                  		addi.b	#$30,d1
000096D0 6000                       		bra.s	@type02_move
000096D2                            ; ===========================================================================
000096D2                            
000096D2                            @type0B:
000096D2 3028 0034                  		move.w	$34(a0),d0
000096D6 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
000096DA 0401 0030                  		subi.b	#$30,d1
000096DE 6000                       		bra.s	@type02_move
000096E0                            ; ===========================================================================
000096E0                            
000096E0                            @type06:
000096E0 3028 0034                  		move.w	$34(a0),d0
000096E4 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
000096E8 4401                       		neg.b	d1		; reverse platform-motion
000096EA 0601 0040                  		addi.b	#$40,d1
000096EE 6000                       		bra.s	@type02_move
000096F0                            ; ===========================================================================
000096F0                            
000096F0                            @type02:
000096F0 3028 0034                  		move.w	$34(a0),d0
000096F4 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
000096F8 0401 0040                  		subi.b	#$40,d1
000096FC                            
000096FC                            	@type02_move:
000096FC 4881                       		ext.w	d1
000096FE D041                       		add.w	d1,d0
00009700 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009704 6000 0000                  		bra.w	@chgmotion
00009708                            ; ===========================================================================
00009708                            
00009708                            @type03:
00009708 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000970C 6600                       		bne.s	@type03_wait	; if yes, branch
0000970E 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the platform?
00009714 6700                       		beq.s	@type03_nomove	; if not, branch
00009716 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
0000971C                            
0000971C                            	@type03_nomove:
0000971C 4E75                       		rts	
0000971E                            
0000971E                            	@type03_wait:
0000971E 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00009722 66F8                       		bne.s	@type03_nomove	; if time is > 0, branch
00009724 317C 0020 003A             		move.w	#32,$3A(a0)
0000972A 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 04 (falling)
0000972E 4E75                       		rts	
00009730                            ; ===========================================================================
00009730                            
00009730                            @type04:
00009730 4A68 003A                  		tst.w	$3A(a0)
00009734 6700                       		beq.s	@loc_8048
00009736 5368 003A                  		subq.w	#1,$3A(a0)
0000973A 6600                       		bne.s	@loc_8048
0000973C 0828 0003 0022             		btst	#3,obStatus(a0)
00009742 6700                       		beq.s	@loc_8042
00009744 08E9 0001 0022             		bset	#1,obStatus(a1)
0000974A 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009750 137C 0002 0024             		move.b	#2,obRoutine(a1)
00009756 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000975C 4228 0025                  		clr.b	$25(a0)
00009760 3368 0012 0012             		move.w	obVelY(a0),obVelY(a1)
00009766                            
00009766                            	@loc_8042:
00009766 117C 0008 0024             		move.b	#8,obRoutine(a0)
0000976C                            
0000976C                            	@loc_8048:
0000976C 2628 002C                  		move.l	$2C(a0),d3
00009770 3028 0012                  		move.w	obVelY(a0),d0
00009774 48C0                       		ext.l	d0
00009776 E180                       		asl.l	#8,d0
00009778 D680                       		add.l	d0,d3
0000977A 2143 002C                  		move.l	d3,$2C(a0)
0000977E 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00009784 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00009788 0640 00E0                  		addi.w	#$E0,d0
0000978C B068 002C                  		cmp.w	$2C(a0),d0
00009790 6400                       		bcc.s	@locret_8074
00009792 117C 0006 0024             		move.b	#6,obRoutine(a0)
00009798                            
00009798                            	@locret_8074:
00009798 4E75                       		rts	
0000979A                            ; ===========================================================================
0000979A                            
0000979A                            @type07:
0000979A 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000979E 6600                       		bne.s	@type07_wait	; if yes, branch
000097A0 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
000097A4 7000                       		moveq	#0,d0
000097A6 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type ($x7) to d0
000097AA E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
000097AC 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
000097B0 6700                       		beq.s	@type07_nomove	; if not, branch
000097B2 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000097B8                            
000097B8                            	@type07_nomove:
000097B8 4E75                       		rts	
000097BA                            
000097BA                            	@type07_wait:
000097BA 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000097BE 66F8                       		bne.s	@type07_nomove	; if time is > 0, branch
000097C0 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 08
000097C4 4E75                       		rts	
000097C6                            ; ===========================================================================
000097C6                            
000097C6                            @type08:
000097C6 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000097CA 3028 0034                  		move.w	$34(a0),d0
000097CE 0440 0200                  		subi.w	#$200,d0
000097D2 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000097D6 6600                       		bne.s	@type08_nostop	; if not, branch
000097D8 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (stop moving)
000097DC                            
000097DC                            	@type08_nostop:
000097DC 4E75                       		rts	
000097DE                            ; ===========================================================================
000097DE                            
000097DE                            @type0A:
000097DE 3028 0034                  		move.w	$34(a0),d0
000097E2 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
000097E6 0401 0040                  		subi.b	#$40,d1
000097EA 4881                       		ext.w	d1
000097EC E241                       		asr.w	#1,d1
000097EE D041                       		add.w	d1,d0
000097F0 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000097F4                            
000097F4                            @chgmotion:
000097F4 1178 FE78 0026             		move.b	(v_oscillate+$1A).w,$26(a0) ; update platform-movement variable
000097FA 4E75                       		rts	
000097FC                            ; ===========================================================================
000097FC                            
000097FC                            Plat_ChkDel:
00009818 4E75                       		rts	
0000981A                            ; ===========================================================================
0000981A                            
0000981A                            Plat_Delete:	; Routine 6
0000981A 6000 0000                  		bra.w	DeleteObject
0000981A 6000 0000                  		bra.w	DeleteObject
0000981E                            Map_Plat_Unused:include	"_maps\Platforms (unused).asm"
0000981E                            ; ---------------------------------------------------------------------------
0000981E                            ; Sprite mappings - unused
0000981E                            ; ---------------------------------------------------------------------------
0000981E                            Map_Plat_Unused_internal:
0000981E 0000                       		dc.w @small-Map_Plat_Unused_internal
00009820 0000                       		dc.w @large-Map_Plat_Unused_internal
00009822 02                         @small:		dc.b 2
00009823 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00009828 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
0000982D 0A                         @large:		dc.b $A
0000982E F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00009833 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00009838 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
0000983D 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00009842 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00009847 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
0000984C 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00009851 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009856 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
0000985B 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00009860                            		even
00009860                            		even
00009860                            Map_Plat_GHZ:	include	"_maps\Platforms (GHZ).asm"
00009860                            ; ---------------------------------------------------------------------------
00009860                            ; Sprite mappings - GHZ	platforms
00009860                            ; ---------------------------------------------------------------------------
00009860                            Map_Plat_GHZ_internal:
00009860 0000                       		dc.w @small-Map_Plat_GHZ_internal
00009862 0000                       		dc.w @large-Map_Plat_GHZ_internal
00009864 04                         @small:		dc.b 4
00009865 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
0000986A F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
0000986F F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009874 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00009879 0A                         @large:		dc.b $A
0000987A F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
0000987F 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009884 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00009889 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
0000988E 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00009893 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00009898 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
0000989D 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
000098A2 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
000098A7 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
000098AC                            		even
000098AC                            		even
000098AC                            Map_Plat_SYZ:	include	"_maps\Platforms (SYZ).asm"
000098AC                            ; ---------------------------------------------------------------------------
000098AC                            ; Sprite mappings - SYZ	platforms
000098AC                            ; ---------------------------------------------------------------------------
000098AC                            Map_Plat_SYZ_internal:
000098AC 0000                       		dc.w @platform-Map_Plat_SYZ_internal
000098AE 03                         @platform:	dc.b 3
000098AF F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
000098B4 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
000098B9 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000098BE                            		even
000098BE                            		even
000098BE                            Map_Plat_SLZ:	include	"_maps\Platforms (SLZ).asm"
000098BE                            ; ---------------------------------------------------------------------------
000098BE                            ; Sprite mappings - SLZ	platforms
000098BE                            ; ---------------------------------------------------------------------------
000098BE                            Map_Plat_SLZ_internal:
000098BE 0000                       		dc.w @platform-Map_Plat_SLZ_internal
000098C0 02                         @platform:	dc.b 2
000098C1 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000098C6 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000098CC 00                         		even
000098CC 00                         		even
000098CC                            Map_GBall:	include	"_maps\GHZ Ball.asm"
000098CC                            ; ---------------------------------------------------------------------------
000098CC                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000098CC                            ; ---------------------------------------------------------------------------
000098CC                            Map_GBall_internal:
000098CC 0000                       		dc.w @shiny-Map_GBall_internal
000098CE 0000                       		dc.w @check1-Map_GBall_internal
000098D0 0000                       		dc.w @check2-Map_GBall_internal
000098D2 0000                       		dc.w @check3-Map_GBall_internal
000098D4 06                         @shiny:		dc.b 6
000098D5 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
000098DA F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
000098DF E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000098E4 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000098E9 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
000098EE 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000098F3 04                         @check1:	dc.b 4
000098F4 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
000098F9 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
000098FE 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009903 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00009908 04                         @check2:	dc.b 4
00009909 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
0000990E E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009913 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00009918 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
0000991D 04                         @check3:	dc.b 4
0000991E E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00009923 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00009928 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
0000992D 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00009932                            		even
00009932                            		even
00009932                            		include	"_incObj\1A Collapsing Ledge (part 1).asm"
00009932                            ; ---------------------------------------------------------------------------
00009932                            ; Object 1A - GHZ collapsing ledge
00009932                            ; ---------------------------------------------------------------------------
00009932                            
00009932                            CollapseLedge:
00009932 7000                       		moveq	#0,d0
00009934 1028 0024                  		move.b	obRoutine(a0),d0
00009938 323B 0000                  		move.w	Ledge_Index(pc,d0.w),d1
0000993C 4EFB 1000                  		jmp	Ledge_Index(pc,d1.w)
00009940                            ; ===========================================================================
00009940 0000 0000                  Ledge_Index:	dc.w Ledge_Main-Ledge_Index, Ledge_Touch-Ledge_Index
00009944 0000 0000                  		dc.w Ledge_Collapse-Ledge_Index, Ledge_Display-Ledge_Index
00009948 0000 0000                  		dc.w Ledge_Delete-Ledge_Index, Ledge_WalkOff-Ledge_Index
0000994C                            
0000994C =00000038                  ledge_timedelay:	equ $38		; time between touching the ledge and it collapsing
0000994C =0000003A                  ledge_collapse_flag:	equ $3A		; collapse flag
0000994C                            ; ===========================================================================
0000994C                            
0000994C                            Ledge_Main:	; Routine 0
0000994C 5428 0024                  		addq.b	#2,obRoutine(a0)
00009950 217C 0000 0000 0004        		move.l	#Map_Ledge,obMap(a0)
00009958 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0000995E 0028 0004 0001             		ori.b	#4,obRender(a0)
00009964 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000996A 117C 0007 0038             		move.b	#7,ledge_timedelay(a0) ; set time delay for collapse
00009970 117C 0064 0014             		move.b	#$64,obActWid(a0)
00009976 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0000997C 117C 0038 0016             		move.b	#$38,obHeight(a0)
00009982 08E8 0004 0001             		bset	#4,obRender(a0)
00009988                            
00009988                            Ledge_Touch:	; Routine 2
00009988 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
0000998C 6700                       		beq.s	@slope		; if not, branch
0000998E 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time reached zero?
00009992 6700 0000                  		beq.w	Ledge_Fragment	; if yes, branch
00009996 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
0000999A                            
0000999A                            	@slope:
0000999A 323C 0030                  		move.w	#$30,d1
0000999E 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
000099A4 6100 F2A6                  		bsr.w	SlopeObject
000099A8 6000 0000                  		bra.w	RememberState
000099AC                            ; ===========================================================================
000099AC                            
000099AC                            Ledge_Collapse:	; Routine 4
000099AC 4A28 0038                  		tst.b	ledge_timedelay(a0)
000099B0 6700 0000                  		beq.w	loc_847A
000099B4 117C 0001 003A             		move.b	#1,ledge_collapse_flag(a0)	; set collapse flag
000099BA 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
000099BE                            
000099BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000099BE                            
000099BE                            
000099BE                            Ledge_WalkOff:	; Routine $A
000099BE 323C 0030                  		move.w	#$30,d1
000099C2 6100 F328                  		bsr.w	ExitPlatform
000099C6 323C 0030                  		move.w	#$30,d1
000099CA 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
000099D0 3428 0008                  		move.w	obX(a0),d2
000099D4 6100 0000                  		bsr.w	SlopeObject2
000099D8 6000 0000                  		bra.w	RememberState
000099DC                            ; End of function Ledge_WalkOff
000099DC                            
000099DC                            ; ===========================================================================
000099DC                            
000099DC                            Ledge_Display:	; Routine 6
000099DC 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time delay reached zero?
000099E0 6700                       		beq.s	Ledge_TimeZero	; if yes, branch
000099E2 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
000099E6 6600 0000                  		bne.w	loc_82D0	; if yes, branch
000099EA 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
000099EE 6000 0000                  		bra.w	DisplaySprite
000099F2                            ; ===========================================================================
000099F2                            
000099F2                            loc_82D0:
000099F2 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
000099F6 6100 FFC6                  		bsr.w	Ledge_WalkOff
000099FA 43F8 D000                  		lea	(v_player).w,a1
000099FE 0829 0003 0022             		btst	#3,obStatus(a1)
00009A04 6700                       		beq.s	loc_82FC
00009A06 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009A0A 6600                       		bne.s	locret_8308
00009A0C 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009A12 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009A18 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009A1E                            
00009A1E                            loc_82FC:
00009A1E 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009A24 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "Ledge_Display" routine
00009A2A                            
00009A2A                            locret_8308:
00009A2A 4E75                       		rts	
00009A2C                            ; ===========================================================================
00009A2C                            
00009A2C                            Ledge_TimeZero:
00009A2C 6100 0000                  		bsr.w	ObjectFall
00009A30 6100 0000                  		bsr.w	DisplaySprite
00009A34 4A28 0001                  		tst.b	obRender(a0)
00009A38 6A00                       		bpl.s	Ledge_Delete
00009A3A 4E75                       		rts	
00009A3C                            ; ===========================================================================
00009A3C                            
00009A3C                            Ledge_Delete:	; Routine 8
00009A3C 6100 0000                  		bsr.w	DeleteObject
00009A40 4E75                       		rts	
00009A40 4E75                       		rts	
00009A42                            		include	"_incObj\53 Collapsing Floors.asm"
00009A42                            ; ---------------------------------------------------------------------------
00009A42                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00009A42                            ; ---------------------------------------------------------------------------
00009A42                            
00009A42                            CollapseFloor:
00009A42 7000                       		moveq	#0,d0
00009A44 1028 0024                  		move.b	obRoutine(a0),d0
00009A48 323B 0000                  		move.w	CFlo_Index(pc,d0.w),d1
00009A4C 4EFB 1000                  		jmp	CFlo_Index(pc,d1.w)
00009A50                            ; ===========================================================================
00009A50 0000 0000                  CFlo_Index:	dc.w CFlo_Main-CFlo_Index, CFlo_Touch-CFlo_Index
00009A54 0000 0000                  		dc.w CFlo_Collapse-CFlo_Index, CFlo_Display-CFlo_Index
00009A58 0000 0000                  		dc.w CFlo_Delete-CFlo_Index, CFlo_WalkOff-CFlo_Index
00009A5C                            
00009A5C =00000038                  cflo_timedelay:		equ $38
00009A5C =0000003A                  cflo_collapse_flag:	equ $3A
00009A5C                            ; ===========================================================================
00009A5C                            
00009A5C                            CFlo_Main:	; Routine 0
00009A5C 5428 0024                  		addq.b	#2,obRoutine(a0)
00009A60 217C 0000 0000 0004        		move.l	#Map_CFlo,obMap(a0)
00009A68 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00009A6E 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009A74 6600                       		bne.s	@notSLZ
00009A76                            
00009A76 317C 44E0 0002             		move.w	#$44E0,obGfx(a0) ; SLZ specific code
00009A7C 5428 001A                  		addq.b	#2,obFrame(a0)
00009A80                            
00009A80                            	@notSLZ:
00009A80 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SBZ
00009A86 6600                       		bne.s	@notSBZ
00009A88 317C 43C2 0002             		move.w	#$43C2,obGfx(a0) ; SBZ specific code
00009A8E                            
00009A8E                            	@notSBZ:
00009A8E 0028 0004 0001             		ori.b	#4,obRender(a0)
00009A94 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009A9A 117C 0007 0038             		move.b	#7,cflo_timedelay(a0)
00009AA0 117C 0044 0014             		move.b	#$44,obActWid(a0)
00009AA6                            
00009AA6                            CFlo_Touch:	; Routine 2
00009AA6 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009AAA 6700                       		beq.s	@solid		; if not, branch
00009AAC 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009AB0 6700 0000                  		beq.w	CFlo_Fragment	; if yes, branch
00009AB4 5328 0038                  		subq.b	#1,cflo_timedelay(a0) ; subtract 1 from time
00009AB8                            
00009AB8                            	@solid:
00009AB8 323C 0020                  		move.w	#$20,d1
00009ABC 6100 F0BA                  		bsr.w	PlatformObject
00009AC0 4A28 0028                  		tst.b	obSubtype(a0)
00009AC4 6A00                       		bpl.s	@remstate
00009AC6 0829 0003 0022             		btst	#3,obStatus(a1)
00009ACC 6700                       		beq.s	@remstate
00009ACE 08A8 0000 0001             		bclr	#0,obRender(a0)
00009AD4 3029 0008                  		move.w	obX(a1),d0
00009AD8 9068 0008                  		sub.w	obX(a0),d0
00009ADC 6400                       		bcc.s	@remstate
00009ADE 08E8 0000 0001             		bset	#0,obRender(a0)
00009AE4                            
00009AE4                            	@remstate:
00009AE4 6000 0000                  		bra.w	RememberState
00009AE8                            ; ===========================================================================
00009AE8                            
00009AE8                            CFlo_Collapse:	; Routine 4
00009AE8 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009AEC 6700 0000                  		beq.w	loc_8458
00009AF0 117C 0001 003A             		move.b	#1,cflo_collapse_flag(a0)	; set object as	"touched"
00009AF6 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009AFA                            
00009AFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009AFA                            
00009AFA                            
00009AFA                            CFlo_WalkOff:	; Routine $A
00009AFA 323C 0020                  		move.w	#$20,d1
00009AFE 6100 F1EC                  		bsr.w	ExitPlatform
00009B02 3428 0008                  		move.w	obX(a0),d2
00009B06 6100 F74E                  		bsr.w	MvSonicOnPtfm2
00009B0A 6000 0000                  		bra.w	RememberState
00009B0E                            ; End of function CFlo_WalkOff
00009B0E                            
00009B0E                            ; ===========================================================================
00009B0E                            
00009B0E                            CFlo_Display:	; Routine 6
00009B0E 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009B12 6700                       		beq.s	CFlo_TimeZero	; if yes, branch
00009B14 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009B18 6600 0000                  		bne.w	loc_8402	; if yes, branch
00009B1C 5328 0038                  		subq.b	#1,cflo_timedelay(a0); subtract 1 from time
00009B20 6000 0000                  		bra.w	DisplaySprite
00009B24                            ; ===========================================================================
00009B24                            
00009B24                            loc_8402:
00009B24 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009B28 6100 FFD0                  		bsr.w	CFlo_WalkOff
00009B2C 43F8 D000                  		lea	(v_player).w,a1
00009B30 0829 0003 0022             		btst	#3,obStatus(a1)
00009B36 6700                       		beq.s	loc_842E
00009B38 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009B3C 6600                       		bne.s	locret_843A
00009B3E 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009B44 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009B4A 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009B50                            
00009B50                            loc_842E:
00009B50 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009B56 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "CFlo_Display" routine
00009B5C                            
00009B5C                            locret_843A:
00009B5C 4E75                       		rts	
00009B5E                            ; ===========================================================================
00009B5E                            
00009B5E                            CFlo_TimeZero:
00009B5E 6100 0000                  		bsr.w	ObjectFall
00009B62 6100 0000                  		bsr.w	DisplaySprite
00009B66 4A28 0001                  		tst.b	obRender(a0)
00009B6A 6A00                       		bpl.s	CFlo_Delete
00009B6C 4E75                       		rts	
00009B6E                            ; ===========================================================================
00009B6E                            
00009B6E                            CFlo_Delete:	; Routine 8
00009B6E 6100 0000                  		bsr.w	DeleteObject
00009B72 4E75                       		rts	
00009B74                            ; ===========================================================================
00009B74                            
00009B74                            CFlo_Fragment:
00009B74 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009B7A                            
00009B7A                            loc_8458:
00009B7A 49F9 0000 0000             		lea	(CFlo_Data2).l,a4
00009B80 0828 0000 0028             		btst	#0,obSubtype(a0)
00009B86 6700                       		beq.s	loc_846C
00009B88 49F9 0000 0000             		lea	(CFlo_Data3).l,a4
00009B8E                            
00009B8E                            loc_846C:
00009B8E 7207                       		moveq	#7,d1
00009B90 5228 001A                  		addq.b	#1,obFrame(a0)
00009B94 6000                       		bra.s	loc_8486
00009B94 6000                       		bra.s	loc_8486
00009B96                            
00009B96                            ; ===========================================================================
00009B96                            
00009B96                            Ledge_Fragment:
00009B96 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009B9C                            
00009B9C                            loc_847A:
00009B9C 49F9 0000 0000             		lea	(CFlo_Data1).l,a4
00009BA2 7218                       		moveq	#$18,d1
00009BA4 5428 001A                  		addq.b	#2,obFrame(a0)
00009BA8                            
00009BA8                            loc_8486:
00009BA8 7000                       		moveq	#0,d0
00009BAA 1028 001A                  		move.b	obFrame(a0),d0
00009BAE D040                       		add.w	d0,d0
00009BB0 2668 0004                  		movea.l	obMap(a0),a3
00009BB4 D6F3 0000                  		adda.w	(a3,d0.w),a3
00009BB8 524B                       		addq.w	#1,a3
00009BBA 08E8 0005 0001             		bset	#5,obRender(a0)
00009BC0 1810                       		move.b	0(a0),d4
00009BC2 1A28 0001                  		move.b	obRender(a0),d5
00009BC6 2248                       		movea.l	a0,a1
00009BC8 137C 0006 0024             		move.b	#6,obRoutine(a1)
00009BCE 1284                       		move.b	d4,0(a1)
00009BD0 234B 0004                  		move.l	a3,obMap(a1)
00009BD4 1345 0001                  		move.b	d5,obRender(a1)
00009BD8 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009BDE 3368 000C 000C             		move.w	obY(a0),obY(a1)
00009BE4 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009BEA 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00009BF0 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00009BF6 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
00009BFA 5341                       		subq.w	#1,d1
00009BFC 43F8 D800                  		lea		(v_lvlobjspace).w,a1
00009C00 303C 005F                  		move.w	#$5F,d0
00009C04                            ; ===========================================================================
00009C04                            
00009C04                            loc_84AA:
00009C04 4A11                       		tst.b	(a1)
00009C06 6700                       		beq.s	@cont		
00009C08 43E9 0040                  		lea		$40(a1),a1
00009C0C 51C8 FFF6                  		dbf		d0,loc_84AA	
00009C10 6600                       		bne.s	loc_84F2	
00009C12                            	@cont:
00009C12 5A4B                       		addq.w	#5,a3
00009C14                            
00009C14                            loc_84B2:
00009C14 137C 0006 0024             		move.b	#6,obRoutine(a1)
00009C1A 1284                       		move.b	d4,0(a1)
00009C1C 234B 0004                  		move.l	a3,obMap(a1)
00009C20 1345 0001                  		move.b	d5,obRender(a1)
00009C24 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009C2A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00009C30 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009C36 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00009C3C 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00009C42 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
00009C46 6100 0000                  		bsr.w	DisplaySprite1
00009C4A                            
00009C4A                            loc_84EE:
00009C4A 51C9 FFB8                  		dbf	d1,loc_84AA
00009C4E                            
00009C4E                            loc_84F2:
00009C4E 6100 0000                  		bsr.w	DisplaySprite
00009C5C                            ; ===========================================================================
00009C5C                            ; ---------------------------------------------------------------------------
00009C5C                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00009C5C                            ; ---------------------------------------------------------------------------
00009C5C 1C18 1410 1A16 120E 0A06+  CFlo_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00009C6C 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00009C76 1E16 0E06 1A12 0A02        CFlo_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00009C7E 161E 1A12 060E 0A02        CFlo_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00009C86                            
00009C86                            ; ---------------------------------------------------------------------------
00009C86                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00009C86                            ; ---------------------------------------------------------------------------
00009C86                            
00009C86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C86                            
00009C86                            
00009C86                            SlopeObject2:
00009C86 43F8 D000                  		lea	(v_player).w,a1
00009C8A 0829 0003 0022             		btst	#3,obStatus(a1)
00009C90 6700                       		beq.s	locret_856E
00009C92 3029 0008                  		move.w	obX(a1),d0
00009C96 9068 0008                  		sub.w	obX(a0),d0
00009C9A D041                       		add.w	d1,d0
00009C9C E248                       		lsr.w	#1,d0
00009C9E 0828 0000 0001             		btst	#0,obRender(a0)
00009CA4 6700                       		beq.s	loc_854E
00009CA6 4640                       		not.w	d0
00009CA8 D041                       		add.w	d1,d0
00009CAA                            
00009CAA                            loc_854E:
00009CAA 7200                       		moveq	#0,d1
00009CAC 1232 0000                  		move.b	(a2,d0.w),d1
00009CB0 3028 000C                  		move.w	obY(a0),d0
00009CB4 9041                       		sub.w	d1,d0
00009CB6 7200                       		moveq	#0,d1
00009CB8 1229 0016                  		move.b	obHeight(a1),d1
00009CBC 9041                       		sub.w	d1,d0
00009CBE 3340 000C                  		move.w	d0,obY(a1)
00009CC2 9468 0008                  		sub.w	obX(a0),d2
00009CC6 9569 0008                  		sub.w	d2,obX(a1)
00009CCA                            
00009CCA                            locret_856E:
00009CCA 4E75                       		rts	
00009CCC                            ; End of function SlopeObject2
00009CCC                            
00009CCC                            ; ===========================================================================
00009CCC                            ; ---------------------------------------------------------------------------
00009CCC                            ; Collision data for GHZ collapsing ledge
00009CCC                            ; ---------------------------------------------------------------------------
00009CCC                            Ledge_SlopeData:
00009CCC                            		incbin	"misc\GHZ Collapsing Ledge Heightmap.bin"
00009CFC                            		even
00009CFC                            
00009CFC                            Map_Ledge:	include	"_maps\Collapsing Ledge.asm"
00009CFC                            ; ---------------------------------------------------------------------------
00009CFC                            ; Sprite mappings - GHZ	collapsing ledge
00009CFC                            ; ---------------------------------------------------------------------------
00009CFC                            Map_Ledge_internal:
00009CFC 0000                       		dc.w @left-Map_Ledge_internal
00009CFE 0000                       		dc.w @right-Map_Ledge_internal
00009D00 0000                       		dc.w @leftsmash-Map_Ledge_internal
00009D02 0000                       		dc.w @rightsmash-Map_Ledge_internal
00009D04 10                         @left:		dc.b $10
00009D05 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00009D0A D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009D0F E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009D14 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009D19 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009D1E D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009D23 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009D28 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009D2D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009D32 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009D37 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009D3C 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009D41 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009D46 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009D4B 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009D50 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009D55 10                         @right:		dc.b $10
00009D56 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00009D5B D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009D60 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009D65 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009D6A D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009D6F D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009D74 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009D79 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009D7E F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009D83 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009D88 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009D8D 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009D92 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009D97 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009D9C 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009DA1 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009DA6 19                         @leftsmash:	dc.b $19
00009DA7 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00009DAC C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009DB1 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009DB6 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009DBB E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009DC0 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009DC5 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009DCA E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009DCF D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009DD4 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009DD9 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009DDE F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009DE3 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009DE8 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009DED F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009DF2 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009DF7 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009DFC 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009E01 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009E06 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009E0B 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009E10 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009E15 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009E1A 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009E1F 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009E24 19                         @rightsmash:	dc.b $19
00009E25 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00009E2A C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009E2F D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009E34 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009E39 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009E3E E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009E43 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009E48 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009E4D D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009E52 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009E57 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009E5C F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009E61 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009E66 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009E6B F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009E70 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009E75 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009E7A 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009E7F 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009E84 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009E89 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009E8E 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009E93 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009E98 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009E9D 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009EA2                            		even
00009EA2                            		even
00009EA2                            Map_CFlo:	include	"_maps\Collapsing Floors.asm"
00009EA2                            ; --------------------------------------------------------------------------------
00009EA2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00009EA2                            ; --------------------------------------------------------------------------------
00009EA2                            
00009EA2                            SME_WNa9T:	
00009EA2 0000 0000                  		dc.w SME_WNa9T_8-SME_WNa9T, SME_WNa9T_31-SME_WNa9T	
00009EA6 0000 0000                  		dc.w SME_WNa9T_5A-SME_WNa9T, SME_WNa9T_6F-SME_WNa9T	
00009EAA 08                         SME_WNa9T_8:	dc.b 8	
00009EAB F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00009EB0 0805 0004 E0               		dc.b 8, 5, 0, 4, $E0	
00009EB5 F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
00009EBA 0805 0004 F0               		dc.b 8, 5, 0, 4, $F0	
00009EBF F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
00009EC4 0805 0004 00               		dc.b 8, 5, 0, 4, 0	
00009EC9 F805 0000 10               		dc.b $F8, 5, 0, 0, $10	
00009ECE 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
00009ED3 08                         SME_WNa9T_31:	dc.b 8	
00009ED4 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00009ED9 0805 0004 E0               		dc.b 8, 5, 0, 4, $E0	
00009EDE F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
00009EE3 0805 0004 F0               		dc.b 8, 5, 0, 4, $F0	
00009EE8 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
00009EED 0805 0004 00               		dc.b 8, 5, 0, 4, 0	
00009EF2 F805 0000 10               		dc.b $F8, 5, 0, 0, $10	
00009EF7 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
00009EFC 04                         SME_WNa9T_5A:	dc.b 4	
00009EFD F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
00009F02 080D 0008 E0               		dc.b 8, $D, 0, 8, $E0	
00009F07 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
00009F0C 080D 0008 00               		dc.b 8, $D, 0, 8, 0	
00009F11 08                         SME_WNa9T_6F:	dc.b 8	
00009F12 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00009F17 F805 0004 F0               		dc.b $F8, 5, 0, 4, $F0	
00009F1C F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
00009F21 F805 0004 10               		dc.b $F8, 5, 0, 4, $10	
00009F26 0805 0008 E0               		dc.b 8, 5, 0, 8, $E0	
00009F2B 0805 000C F0               		dc.b 8, 5, 0, $C, $F0	
00009F30 0805 0008 00               		dc.b 8, 5, 0, 8, 0	
00009F35 0805 000C 10               		dc.b 8, 5, 0, $C, $10	
00009F3A                            		even
00009F3A                            		even
00009F3A                            
00009F3A                            		include	"_incObj\1C Scenery.asm"
00009F3A                            ; ---------------------------------------------------------------------------
00009F3A                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00009F3A                            ; ---------------------------------------------------------------------------
00009F3A                            
00009F3A                            Scenery:
00009F3A 7000                       		moveq	#0,d0
00009F3C 1028 0024                  		move.b	obRoutine(a0),d0
00009F40 323B 0000                  		move.w	Scen_Index(pc,d0.w),d1
00009F44 4EFB 1000                  		jmp	Scen_Index(pc,d1.w)
00009F48                            ; ===========================================================================
00009F48 0000                       Scen_Index:	dc.w Scen_Main-Scen_Index
00009F4A 0000                       		dc.w Scen_ChkDel-Scen_Index
00009F4C                            ; ===========================================================================
00009F4C                            
00009F4C                            Scen_Main:	; Routine 0
00009F4C 5428 0024                  		addq.b	#2,obRoutine(a0)
00009F50 7000                       		moveq	#0,d0
00009F52 1028 0028                  		move.b	obSubtype(a0),d0 ; copy object subtype to d0
00009F56 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00009F5A 43FB 0000                  		lea	Scen_Values(pc,d0.w),a1
00009F5E 2159 0004                  		move.l	(a1)+,obMap(a0)
00009F62 3159 0002                  		move.w	(a1)+,obGfx(a0)
00009F66 0028 0004 0001             		ori.b	#4,obRender(a0)
00009F6C 1159 001A                  		move.b	(a1)+,obFrame(a0)
00009F70 1159 0014                  		move.b	(a1)+,obActWid(a0)
00009F74 1159 0018                  		move.b	(a1)+,obPriority(a0)
00009F78 3028 0018                  		move.w obPriority(a0),d0 
00009F7C E248                       		lsr.w #1,d0 
00009F7E 0240 0380                  		andi.w #$380,d0 
00009F82 3140 0018                  		move.w d0,obPriority(a0)		
00009F86 1159 0020                  		move.b	(a1)+,obColType(a0)
00009F8A                            
00009F8A                            Scen_ChkDel:	; Routine 2
00009FA8 6000 0000                  		bra.w	DisplaySprite
00009FAC                            ; ===========================================================================
00009FAC                            ; ---------------------------------------------------------------------------
00009FAC                            ; Variables for	object $1C are stored in an array
00009FAC                            ; ---------------------------------------------------------------------------
00009FAC 0000 0000                  Scen_Values:	dc.l Map_Scen		; mappings address
00009FB0 44D8                       		dc.w $44D8		; VRAM setting
00009FB2 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00009FB6 0000 0000                  		dc.l Map_Scen
00009FBA 44D8                       		dc.w $44D8
00009FBC 0008 0200                  		dc.b 0,	8, 2, 0
00009FC0 0000 0000                  		dc.l Map_Scen
00009FC4 44D8                       		dc.w $44D8
00009FC6 0008 0200                  		dc.b 0,	8, 2, 0
00009FCA 0000 9060                  		dc.l Map_Bri
00009FCE 438E                       		dc.w $438E
00009FD0 0110 0100                  		dc.b 1,	$10, 1,	0
00009FD4                            		even
00009FD4                            		even
00009FD4                            Map_Scen:	include	"_maps\Scenery.asm"
00009FD4                            ; ---------------------------------------------------------------------------
00009FD4                            ; Sprite mappings - SLZ	lava thrower
00009FD4                            ; ---------------------------------------------------------------------------
00009FD4                            Map_Scen_internal:
00009FD4 0000                       		dc.w byte_8858-Map_Scen_internal
00009FD6 01                         byte_8858:	dc.b 1
00009FD7 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00009FDC                            		even
00009FDC                            		even
00009FDC                            
00009FDC                            		include	"_incObj\1D Unused Switch.asm"
00009FDC                            ; ---------------------------------------------------------------------------
00009FDC                            ; Object 1D - switch that activates when Sonic touches it
00009FDC                            ; (this	is not used anywhere in	the game)
00009FDC                            ; ---------------------------------------------------------------------------
00009FDC                            
00009FDC                            MagicSwitch:
00009FDC 7000                       		moveq	#0,d0
00009FDE 1028 0024                  		move.b	obRoutine(a0),d0
00009FE2 323B 0000                  		move.w	Swi_Index(pc,d0.w),d1
00009FE6 4EFB 1000                  		jmp	Swi_Index(pc,d1.w)
00009FEA                            ; ===========================================================================
00009FEA 0000                       Swi_Index:	dc.w Swi_Main-Swi_Index
00009FEC 0000                       		dc.w Swi_Action-Swi_Index
00009FEE 0000                       		dc.w Swi_Delete-Swi_Index
00009FF0                            
00009FF0 =00000030                  swi_origY:	equ $30		; original y-axis position
00009FF0                            ; ===========================================================================
00009FF0                            
00009FF0                            Swi_Main:	; Routine 0
00009FF0 5428 0024                  		addq.b	#2,obRoutine(a0)
00009FF4 217C 0000 0000 0004        		move.l	#Map_Swi,obMap(a0)
00009FFC 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0000A002 117C 0004 0001             		move.b	#4,obRender(a0)
0000A008 3168 000C 0030             		move.w	obY(a0),swi_origY(a0) ; save position on y-axis
0000A00E 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000A014 317C 0280 0018             		move.w	#$280,obPriority(a0)
0000A01A                            
0000A01A                            Swi_Action:	; Routine 2
0000A01A 3168 0030 000C             		move.w	swi_origY(a0),obY(a0) ; restore position on y-axis
0000A020 323C 0010                  		move.w	#$10,d1
0000A024 6100 0000                  		bsr.w	Swi_ChkTouch	; check if Sonic touches the switch
0000A028 6700                       		beq.s	Swi_ChkDel	; if not, branch
0000A02A                            
0000A02A 5468 000C                  		addq.w	#2,obY(a0)	; move object 2	pixels
0000A02E 7001                       		moveq	#1,d0
0000A030 31C0 F7E0                  		move.w	d0,(f_switch).w	; set switch 0 as "pressed"
0000A034                            
0000A034                            Swi_ChkDel:
0000A034 6100 0000                  		bsr.w	DisplaySprite
0000A056 4E75                       		rts	
0000A058                            ; ===========================================================================
0000A058                            
0000A058                            Swi_Delete:	; Routine 4
0000A058 6100 0000                  		bsr.w	DeleteObject
0000A05C 4E75                       		rts	
0000A05E                            
0000A05E                            ; ---------------------------------------------------------------------------
0000A05E                            ; Subroutine to	check if Sonic touches the object
0000A05E                            ; ---------------------------------------------------------------------------
0000A05E                            
0000A05E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A05E                            
0000A05E                            
0000A05E                            Swi_ChkTouch:
0000A05E 43F8 D000                  		lea	(v_player).w,a1
0000A062 3029 0008                  		move.w	obX(a1),d0
0000A066 9068 0008                  		sub.w	obX(a0),d0
0000A06A D041                       		add.w	d1,d0
0000A06C 6B00                       		bmi.s	Swi_NoTouch
0000A06E D241                       		add.w	d1,d1
0000A070 B041                       		cmp.w	d1,d0
0000A072 6400                       		bcc.s	Swi_NoTouch
0000A074 3429 000C                  		move.w	obY(a1),d2
0000A078 1229 0016                  		move.b	obHeight(a1),d1
0000A07C 4881                       		ext.w	d1
0000A07E D242                       		add.w	d2,d1
0000A080 3028 000C                  		move.w	obY(a0),d0
0000A084 0440 0010                  		subi.w	#$10,d0
0000A088 9041                       		sub.w	d1,d0
0000A08A 6200                       		bhi.s	Swi_NoTouch
0000A08C 0C40 FFF0                  		cmpi.w	#-$10,d0
0000A090 6500                       		bcs.s	Swi_NoTouch
0000A092 70FF                       		moveq	#-1,d0		; Sonic has touched it
0000A094 4E75                       		rts	
0000A096                            ; ===========================================================================
0000A096                            
0000A096                            Swi_NoTouch:
0000A096 7000                       		moveq	#0,d0		; Sonic hasn't touched it
0000A098 4E75                       		rts	
0000A09A                            ; End of function Swi_ChkTouch
0000A09A                            ; End of function Swi_ChkTouch
0000A09A                            Map_Swi:	include	"_maps\Unused Switch.asm"
0000A09A                            ; ---------------------------------------------------------------------------
0000A09A                            ; Sprite mappings - Unused switch thingy
0000A09A                            ; ---------------------------------------------------------------------------
0000A09A                            Map_Swi_internal:
0000A09A 0000                       		dc.w byte_891E-Map_Swi_internal
0000A09C 04                         byte_891E:	dc.b 4
0000A09D E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000A0A2 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000A0A7 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000A0AC 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000A0B2 00                         		even
0000A0B2 00                         		even
0000A0B2                            
0000A0B2                            		include	"_incObj\2A SBZ Small Door.asm"
0000A0B2                            ; ---------------------------------------------------------------------------
0000A0B2                            ; Object 2A - small vertical door (SBZ)
0000A0B2                            ; ---------------------------------------------------------------------------
0000A0B2                            
0000A0B2                            AutoDoor:
0000A0B2 7000                       		moveq	#0,d0
0000A0B4 1028 0024                  		move.b	obRoutine(a0),d0
0000A0B8 323B 0000                  		move.w	ADoor_Index(pc,d0.w),d1
0000A0BC 4EFB 1000                  		jmp	ADoor_Index(pc,d1.w)
0000A0C0                            ; ===========================================================================
0000A0C0 0000                       ADoor_Index:	dc.w ADoor_Main-ADoor_Index
0000A0C2 0000                       		dc.w ADoor_OpenShut-ADoor_Index
0000A0C4                            ; ===========================================================================
0000A0C4                            
0000A0C4                            ADoor_Main:	; Routine 0
0000A0C4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A0C8 217C 0000 0000 0004        		move.l	#Map_ADoor,obMap(a0)
0000A0D0 317C 42EA 0002             		move.w	#$42EA,obGfx(a0)
0000A0D6 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A0DC 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A0E2                            		;move.b	#4,obPriority(a0)
0000A0E2                            
0000A0E2                            ADoor_OpenShut:	; Routine 2
0000A0E2 323C 0040                  		move.w	#$40,d1		; set range for door detection
0000A0E6 4228 001C                  		clr.b	obAnim(a0)	; use "closing"	animation
0000A0EA 3038 D008                  		move.w	(v_player+obX).w,d0
0000A0EE D041                       		add.w	d1,d0
0000A0F0 B068 0008                  		cmp.w	obX(a0),d0
0000A0F4 6500                       		bcs.s	ADoor_Animate
0000A0F6 9041                       		sub.w	d1,d0
0000A0F8 9041                       		sub.w	d1,d0
0000A0FA B068 0008                  		cmp.w	obX(a0),d0	; is Sonic > $40 pixels from door?
0000A0FE 6400                       		bcc.s	ADoor_Animate	; close door
0000A100 D041                       		add.w	d1,d0
0000A102 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic left of the door?
0000A106 6400                       		bcc.s	loc_899A	; if yes, branch
0000A108 0828 0000 0022             		btst	#0,obStatus(a0)
0000A10E 6600                       		bne.s	ADoor_Animate
0000A110 6000                       		bra.s	ADoor_Open
0000A112                            ; ===========================================================================
0000A112                            
0000A112                            loc_899A:
0000A112 0828 0000 0022             		btst	#0,obStatus(a0)
0000A118 6700                       		beq.s	ADoor_Animate
0000A11A                            
0000A11A                            ADoor_Open:
0000A11A 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "opening"	animation
0000A120                            
0000A120                            ADoor_Animate:
0000A120 43F9 0000 0000             		lea	(Ani_ADoor).l,a1
0000A126 6100 0000                  		bsr.w	AnimateSprite
0000A12A 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
0000A12E 6600                       		bne.s	@remember	; if yes, branch
0000A130 323C 0011                  		move.w	#$11,d1
0000A134 343C 0020                  		move.w	#$20,d2
0000A138 3602                       		move.w	d2,d3
0000A13A 5243                       		addq.w	#1,d3
0000A13C 3828 0008                  		move.w	obX(a0),d4
0000A140 6100 0000                  		bsr.w	SolidObject
0000A144                            
0000A144                            	@remember:
0000A144 6000 0000                  		bra.w	RememberState
0000A144 6000 0000                  		bra.w	RememberState
0000A148                            		include	"_anim\SBZ Small Door.asm"
0000A148                            ; ---------------------------------------------------------------------------
0000A148                            ; Animation script - doors (SBZ)
0000A148                            ; ---------------------------------------------------------------------------
0000A148 0000                       Ani_ADoor:	dc.w @close-Ani_ADoor
0000A14A 0000                       		dc.w @open-Ani_ADoor
0000A14C 0008 0706 0504 0302 0100+  @close:		dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, afBack, 1
0000A158 0000 0102 0304 0506 0708+  @open:		dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, afBack, 1
0000A164                            		even
0000A164                            		even
0000A164                            Map_ADoor:	include	"_maps\SBZ Small Door.asm"
0000A164                            ; --------------------------------------------------------------------------------
0000A164                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A164                            ; --------------------------------------------------------------------------------
0000A164                            
0000A164                            SME_YnmwF:	
0000A164 0000 0000                  		dc.w SME_YnmwF_12-SME_YnmwF, SME_YnmwF_1D-SME_YnmwF	
0000A168 0000 0000                  		dc.w SME_YnmwF_28-SME_YnmwF, SME_YnmwF_33-SME_YnmwF	
0000A16C 0000 0000                  		dc.w SME_YnmwF_3E-SME_YnmwF, SME_YnmwF_49-SME_YnmwF	
0000A170 0000 0000                  		dc.w SME_YnmwF_54-SME_YnmwF, SME_YnmwF_5F-SME_YnmwF	
0000A174 0000                       		dc.w SME_YnmwF_6A-SME_YnmwF	
0000A176 02                         SME_YnmwF_12:	dc.b 2	
0000A177 E007 0800 F8               		dc.b $E0, 7, 8, 0, $F8	
0000A17C 0007 0800 F8               		dc.b 0, 7, 8, 0, $F8	
0000A181 02                         SME_YnmwF_1D:	dc.b 2	
0000A182 DC07 0800 F8               		dc.b $DC, 7, 8, 0, $F8	
0000A187 0407 0800 F8               		dc.b 4, 7, 8, 0, $F8	
0000A18C 02                         SME_YnmwF_28:	dc.b 2	
0000A18D D807 0800 F8               		dc.b $D8, 7, 8, 0, $F8	
0000A192 0807 0800 F8               		dc.b 8, 7, 8, 0, $F8	
0000A197 02                         SME_YnmwF_33:	dc.b 2	
0000A198 D407 0800 F8               		dc.b $D4, 7, 8, 0, $F8	
0000A19D 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8	
0000A1A2 02                         SME_YnmwF_3E:	dc.b 2	
0000A1A3 D007 0800 F8               		dc.b $D0, 7, 8, 0, $F8	
0000A1A8 1007 0800 F8               		dc.b $10, 7, 8, 0, $F8	
0000A1AD 02                         SME_YnmwF_49:	dc.b 2	
0000A1AE CC07 0800 F8               		dc.b $CC, 7, 8, 0, $F8	
0000A1B3 1407 0800 F8               		dc.b $14, 7, 8, 0, $F8	
0000A1B8 02                         SME_YnmwF_54:	dc.b 2	
0000A1B9 C807 0800 F8               		dc.b $C8, 7, 8, 0, $F8	
0000A1BE 1807 0800 F8               		dc.b $18, 7, 8, 0, $F8	
0000A1C3 02                         SME_YnmwF_5F:	dc.b 2	
0000A1C4 C407 0800 F8               		dc.b $C4, 7, 8, 0, $F8	
0000A1C9 1C07 0800 F8               		dc.b $1C, 7, 8, 0, $F8	
0000A1CE 02                         SME_YnmwF_6A:	dc.b 2	
0000A1CF C007 0800 F8               		dc.b $C0, 7, 8, 0, $F8	
0000A1D4 2007 0800 F8               		dc.b $20, 7, 8, 0, $F8	
0000A1DA 00                         		even
0000A1DA 00                         		even
0000A1DA                            
0000A1DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A1DA                            
0000A1DA                            
0000A1DA                            Obj44_SolidWall:
0000A1DA 6100 0000                  		bsr.w	Obj44_SolidWall2
0000A1DE 6700                       		beq.s	loc_8AA8
0000A1E0 6B00 0000                  		bmi.w	loc_8AC4
0000A1E4 4A40                       		tst.w	d0
0000A1E6 6700 0000                  		beq.w	loc_8A92
0000A1EA 6B00                       		bmi.s	loc_8A7C
0000A1EC 4A69 0010                  		tst.w	obVelX(a1)
0000A1F0 6B00                       		bmi.s	loc_8A92
0000A1F2 6000                       		bra.s	loc_8A82
0000A1F4                            ; ===========================================================================
0000A1F4                            
0000A1F4                            loc_8A7C:
0000A1F4 4A69 0010                  		tst.w	obVelX(a1)
0000A1F8 6A00                       		bpl.s	loc_8A92
0000A1FA                            
0000A1FA                            loc_8A82:
0000A1FA 9169 0008                  		sub.w	d0,obX(a1)
0000A1FE 337C 0000 0020             		move.w	#0,obInertia(a1)
0000A204 337C 0000 0010             		move.w	#0,obVelX(a1)
0000A20A                            
0000A20A                            loc_8A92:
0000A20A 0829 0001 0022             		btst	#1,obStatus(a1)
0000A210 6600                       		bne.s	loc_8AB6
0000A212 08E9 0005 0022             		bset	#5,obStatus(a1)
0000A218 08E8 0005 0022             		bset	#5,obStatus(a0)
0000A21E 4E75                       		rts	
0000A220                            ; ===========================================================================
0000A220                            
0000A220                            loc_8AA8:
0000A220 0828 0005 0022             		btst	#5,obStatus(a0)
0000A226 6700                       		beq.s	locret_8AC2
0000A228 337C 0000 001C             		move.w	#id_Run,obAnim(a1)
0000A22E                            
0000A22E                            loc_8AB6:
0000A22E 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000A234 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A23A                            
0000A23A                            locret_8AC2:
0000A23A 4E75                       		rts	
0000A23C                            ; ===========================================================================
0000A23C                            
0000A23C                            loc_8AC4:
0000A23C 4A69 0012                  		tst.w	obVelY(a1)
0000A240 6A00                       		bpl.s	locret_8AD8
0000A242 4A43                       		tst.w	d3
0000A244 6A00                       		bpl.s	locret_8AD8
0000A246 9769 000C                  		sub.w	d3,obY(a1)
0000A24A 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A250                            
0000A250                            locret_8AD8:
0000A250 4E75                       		rts	
0000A252                            ; End of function Obj44_SolidWall
0000A252                            
0000A252                            
0000A252                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A252                            
0000A252                            
0000A252                            Obj44_SolidWall2:
0000A252 43F8 D000                  		lea	(v_player).w,a1
0000A256 3029 0008                  		move.w	obX(a1),d0
0000A25A 9068 0008                  		sub.w	obX(a0),d0
0000A25E D041                       		add.w	d1,d0
0000A260 6B00                       		bmi.s	loc_8B48
0000A262 3601                       		move.w	d1,d3
0000A264 D643                       		add.w	d3,d3
0000A266 B043                       		cmp.w	d3,d0
0000A268 6200                       		bhi.s	loc_8B48
0000A26A 1629 0016                  		move.b	obHeight(a1),d3
0000A26E 4883                       		ext.w	d3
0000A270 D443                       		add.w	d3,d2
0000A272 3629 000C                  		move.w	obY(a1),d3
0000A276 9668 000C                  		sub.w	obY(a0),d3
0000A27A D642                       		add.w	d2,d3
0000A27C 6B00                       		bmi.s	loc_8B48
0000A27E 3802                       		move.w	d2,d4
0000A280 D844                       		add.w	d4,d4
0000A282 B644                       		cmp.w	d4,d3
0000A284 6400                       		bhs.s	loc_8B48
0000A286 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000A28A 6B00                       		bmi.s	loc_8B48
0000A28C 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000A292 6400                       		bhs.s	loc_8B48
0000A294 4A78 FE08                  		tst.w	(v_debuguse).w
0000A298 6600                       		bne.s	loc_8B48
0000A29A 3A00                       		move.w	d0,d5
0000A29C B240                       		cmp.w	d0,d1
0000A29E 6400                       		bhs.s	loc_8B30
0000A2A0 D241                       		add.w	d1,d1
0000A2A2 9041                       		sub.w	d1,d0
0000A2A4 3A00                       		move.w	d0,d5
0000A2A6 4445                       		neg.w	d5
0000A2A8                            
0000A2A8                            loc_8B30:
0000A2A8 3203                       		move.w	d3,d1
0000A2AA B443                       		cmp.w	d3,d2
0000A2AC 6400                       		bhs.s	loc_8B3C
0000A2AE 9644                       		sub.w	d4,d3
0000A2B0 3203                       		move.w	d3,d1
0000A2B2 4441                       		neg.w	d1
0000A2B4                            
0000A2B4                            loc_8B3C:
0000A2B4 BA41                       		cmp.w	d1,d5
0000A2B6 6200                       		bhi.s	loc_8B44
0000A2B8 7801                       		moveq	#1,d4
0000A2BA 4E75                       		rts	
0000A2BC                            ; ===========================================================================
0000A2BC                            
0000A2BC                            loc_8B44:
0000A2BC 78FF                       		moveq	#-1,d4
0000A2BE 4E75                       		rts	
0000A2C0                            ; ===========================================================================
0000A2C0                            
0000A2C0                            loc_8B48:
0000A2C0 7800                       		moveq	#0,d4
0000A2C2 4E75                       		rts	
0000A2C4                            ; End of function Obj44_SolidWall2
0000A2C4                            
0000A2C4                            ; ===========================================================================
0000A2C4                            
0000A2C4                            		include	"_incObj\1E Ball Hog.asm"
0000A2C4                            ; ---------------------------------------------------------------------------
0000A2C4                            ; Object 1E - Ball Hog enemy (SBZ)
0000A2C4                            ; ---------------------------------------------------------------------------
0000A2C4                            
0000A2C4                            BallHog:
0000A2C4 7000                       		moveq	#0,d0
0000A2C6 1028 0024                  		move.b	obRoutine(a0),d0
0000A2CA 323B 0000                  		move.w	Hog_Index(pc,d0.w),d1
0000A2CE 4EFB 1000                  		jmp	Hog_Index(pc,d1.w)
0000A2D2                            ; ===========================================================================
0000A2D2 0000                       Hog_Index:	dc.w Hog_Main-Hog_Index
0000A2D4 0000                       		dc.w Hog_Action-Hog_Index
0000A2D6                            
0000A2D6 =00000032                  hog_launchflag:	equ $32		; 0 to launch a cannonball
0000A2D6                            ; ===========================================================================
0000A2D6                            
0000A2D6                            Hog_Main:	; Routine 0
0000A2D6 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000A2DC 117C 0008 0017             		move.b	#8,obWidth(a0)
0000A2E2 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A2EA 317C 0302 0002             		move.w	#$302,obGfx(a0)
0000A2F0 117C 0004 0001             		move.b	#4,obRender(a0)
0000A2F6 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000A2FC 117C 0005 0020             		move.b	#5,obColType(a0)
0000A302 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A308 6100 0000                  		bsr.w	ObjectFall
0000A30C 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000A312 4A41                       		tst.w	d1
0000A314 6A00                       		bpl.s	@floornotfound
0000A316 D368 000C                  		add.w	d1,obY(a0)
0000A31A 317C 0000 0012             		move.w	#0,obVelY(a0)
0000A320 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A324                            
0000A324                            	@floornotfound:
0000A324 4E75                       		rts	
0000A326                            ; ===========================================================================
0000A326                            
0000A326                            Hog_Action:	; Routine 2
0000A326 43F9 0000 0000             		lea	(Ani_Hog).l,a1
0000A32C 6100 0000                  		bsr.w	AnimateSprite
0000A330 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is final frame (01) displayed?
0000A336 6600                       		bne.s	@setlaunchflag	; if not, branch
0000A338 4A28 0032                  		tst.b	hog_launchflag(a0)	; is it	set to launch cannonball?
0000A33C 6700                       		beq.s	@makeball	; if yes, branch
0000A33E 6000                       		bra.s	@remember
0000A340                            ; ===========================================================================
0000A340                            
0000A340                            @setlaunchflag:
0000A340 4228 0032                  		clr.b	hog_launchflag(a0)	; set to launch	cannonball
0000A344                            
0000A344                            @remember:
0000A344 6000 0000                  		bra.w	RememberState
0000A348                            ; ===========================================================================
0000A348                            
0000A348                            @makeball:
0000A348 117C 0001 0032             		move.b	#1,hog_launchflag(a0)
0000A34E 6100 0000                  		bsr.w	FindFreeObj
0000A352 6600                       		bne.s	@fail
0000A354 12BC 0000                  		move.b	#id_Cannonball,0(a1) ; load cannonball object ($20)
0000A358 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A35E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A364 337C FF00 0010             		move.w	#-$100,obVelX(a1) ; cannonball bounces to the left
0000A36A 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A370 70FC                       		moveq	#-4,d0
0000A372 0828 0000 0022             		btst	#0,obStatus(a0)	; is Ball Hog facing right?
0000A378 6700                       		beq.s	@noflip		; if not, branch
0000A37A 4440                       		neg.w	d0
0000A37C 4469 0010                  		neg.w	obVelX(a1)	; cannonball bounces to	the right
0000A380                            
0000A380                            	@noflip:
0000A380 D169 0008                  		add.w	d0,obX(a1)
0000A384 0669 000C 000C             		addi.w	#$C,obY(a1)
0000A38A 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1) ; copy object type from Ball Hog
0000A390                            
0000A390                            	@fail:
0000A390 60B2                       		bra.s	@remember
0000A390 60B2                       		bra.s	@remember
0000A392                            		include	"_incObj\20 Cannonball.asm"
0000A392                            ; ---------------------------------------------------------------------------
0000A392                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A392                            ; ---------------------------------------------------------------------------
0000A392                            
0000A392                            Cannonball:
0000A392 7000                       		moveq	#0,d0
0000A394 1028 0024                  		move.b	obRoutine(a0),d0
0000A398 323B 0000                  		move.w	Cbal_Index(pc,d0.w),d1
0000A39C 4EFB 1000                  		jmp	Cbal_Index(pc,d1.w)
0000A3A0                            ; ===========================================================================
0000A3A0 0000                       Cbal_Index:	dc.w Cbal_Main-Cbal_Index
0000A3A2 0000                       		dc.w Cbal_Bounce-Cbal_Index
0000A3A4                            
0000A3A4 =00000030                  cbal_time:	equ $30		; time until the cannonball explodes (2 bytes)
0000A3A4                            ; ===========================================================================
0000A3A4                            
0000A3A4                            Cbal_Main:	; Routine 0
0000A3A4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A3A8 117C 0007 0016             		move.b	#7,obHeight(a0)
0000A3AE 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A3B6 317C 2302 0002             		move.w	#$2302,obGfx(a0)
0000A3BC 117C 0004 0001             		move.b	#4,obRender(a0)
0000A3C2 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000A3C8 117C 0087 0020             		move.b	#$87,obColType(a0)
0000A3CE 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A3D4 7000                       		moveq	#0,d0
0000A3D6 1028 0028                  		move.b	obSubtype(a0),d0 ; move subtype to d0
0000A3DA C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A3DE 3140 0030                  		move.w	d0,cbal_time(a0) ; set explosion time
0000A3E2 117C 0004 001A             		move.b	#4,obFrame(a0)
0000A3E8                            
0000A3E8                            Cbal_Bounce:	; Routine 2
0000A3E8 4EB9 0000 0000             		jsr	(ObjectFall).l
0000A3EE 4A68 0012                  		tst.w	obVelY(a0)
0000A3F2 6B00                       		bmi.s	Cbal_ChkExplode
0000A3F4 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A3FA 4A41                       		tst.w	d1		; has ball hit the floor?
0000A3FC 6A00                       		bpl.s	Cbal_ChkExplode	; if not, branch
0000A3FE                            
0000A3FE D368 000C                  		add.w	d1,obY(a0)
0000A402 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; bounce
0000A408 4A03                       		tst.b	d3
0000A40A 6700                       		beq.s	Cbal_ChkExplode
0000A40C 6B00                       		bmi.s	loc_8CA4
0000A40E 4A68 0010                  		tst.w	obVelX(a0)
0000A412 6A00                       		bpl.s	Cbal_ChkExplode
0000A414 4468 0010                  		neg.w	obVelX(a0)
0000A418 6000                       		bra.s	Cbal_ChkExplode
0000A41A                            ; ===========================================================================
0000A41A                            
0000A41A                            loc_8CA4:
0000A41A 4A68 0010                  		tst.w	obVelX(a0)
0000A41E 6B00                       		bmi.s	Cbal_ChkExplode
0000A420 4468 0010                  		neg.w	obVelX(a0)
0000A424                            
0000A424                            Cbal_ChkExplode:
0000A424 5368 0030                  		subq.w	#1,cbal_time(a0) ; subtract 1 from explosion time
0000A428 6A00                       		bpl.s	Cbal_Animate	; if time is > 0, branch
0000A42A                            
0000A42A                            	Cbal_Explode:
0000A42A 10BC 0000                  		move.b	#id_MissileDissolve,0(a0)
0000A42E 10BC 0000                  		move.b	#id_ExplosionBomb,0(a0)	; change object	to an explosion	($3F)
0000A432 117C 0000 0024             		move.b	#0,obRoutine(a0) ; reset routine counter
0000A438 6000 0000                  		bra.w	ExplosionBomb	; jump to explosion code
0000A43C                            ; ===========================================================================
0000A43C                            
0000A43C                            Cbal_Animate:
0000A43C 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A440 6A00                       		bpl.s	Cbal_Display
0000A442 117C 0005 001E             		move.b	#5,obTimeFrame(a0) ; set frame duration to 5 frames
0000A448 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
0000A44E                            
0000A44E                            Cbal_Display:
0000A44E 6100 0000                  		bsr.w	DisplaySprite
0000A452 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000A456 0640 00E0                  		addi.w	#$E0,d0
0000A45A B068 000C                  		cmp.w	obY(a0),d0	; has object fallen off	the level?
0000A45E 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A462 4E75                       		rts	
0000A462 4E75                       		rts	
0000A464                            		include	"_incObj\24, 27 & 3F Explosions.asm"
0000A464                            ; ---------------------------------------------------------------------------
0000A464                            ; Object 24 - buzz bomber missile vanishing (unused?)
0000A464                            ; ---------------------------------------------------------------------------
0000A464                            
0000A464                            MissileDissolve:
0000A464 7000                       		moveq	#0,d0
0000A466 1028 0024                  		move.b	obRoutine(a0),d0
0000A46A 323B 0000                  		move.w	MDis_Index(pc,d0.w),d1
0000A46E 4EFB 1000                  		jmp	MDis_Index(pc,d1.w)
0000A472                            ; ===========================================================================
0000A472 0000                       MDis_Index:	dc.w MDis_Main-MDis_Index
0000A474 0000                       		dc.w MDis_Animate-MDis_Index
0000A476                            ; ===========================================================================
0000A476                            
0000A476                            MDis_Main:	; Routine 0
0000A476 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A47A 217C 0000 0000 0004        		move.l	#Map_MisDissolve,obMap(a0)
0000A482 317C 041C 0002             		move.w	#$41C,obGfx(a0)
0000A488 117C 0004 0001             		move.b	#4,obRender(a0)
0000A48E 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A494 117C 0000 0020             		move.b	#0,obColType(a0)
0000A49A 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A4A0 117C 0009 001E             		move.b	#9,obTimeFrame(a0)
0000A4A6 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A4B6                            
0000A4B6                            MDis_Animate:	; Routine 2
0000A4B6 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A4BA 6A00                       		bpl.s	@display
0000A4BC 117C 0009 001E             		move.b	#9,obTimeFrame(a0) ; set frame duration to 9 frames
0000A4C2 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A4C6 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has animation completed?
0000A4CC 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A4D0                            
0000A4D0                            	@display:
0000A4D0 6000 0000                  		bra.w	DisplaySprite
0000A4D4                            ; ===========================================================================
0000A4D4                            
0000A4D4                            ; ---------------------------------------------------------------------------
0000A4D4                            ; Object 27 - explosion	from a destroyed enemy or monitor
0000A4D4                            ; ---------------------------------------------------------------------------
0000A4D4                            
0000A4D4                            ExplosionItem:
0000A4D4 7000                       		moveq	#0,d0
0000A4D6 1028 0024                  		move.b	obRoutine(a0),d0
0000A4DA 323B 0000                  		move.w	ExItem_Index(pc,d0.w),d1
0000A4DE 4EFB 1000                  		jmp	ExItem_Index(pc,d1.w)
0000A4E2                            ; ===========================================================================
0000A4E2 0000                       ExItem_Index:	dc.w ExItem_Animal-ExItem_Index
0000A4E4 0000                       		dc.w ExItem_Main-ExItem_Index
0000A4E6 0000                       		dc.w ExItem_Animate-ExItem_Index
0000A4E8                            ; ===========================================================================
0000A4E8                            
0000A4E8                            ExItem_Animal:	; Routine 0
0000A4E8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A4EC 6100 0000                  		bsr.w	FindFreeObj
0000A4F0 6600                       		bne.s	ExItem_Main
0000A4F2 12BC 0000                  		move.b	#id_Animals,0(a1) ; load animal object
0000A4F6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A4FC 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A502 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000A508                            
0000A508                            ExItem_Main:	; Routine 2
0000A508 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A50C 217C 0000 0000 0004        		move.l	#Map_ExplodeItem,obMap(a0)
0000A514 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A51A 117C 0004 0001             		move.b	#4,obRender(a0)
0000A520 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A526 117C 0000 0020             		move.b	#0,obColType(a0)
0000A52C 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A532 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A538 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A548                            
0000A548                            ExItem_Animate:	; Routine 4 (2 for ExplosionBomb)
0000A548 5528 001E                  		subq.b	#2,obTimeFrame(a0) ; subtract 1 from frame duration
0000A54C 6A00                       		bpl.s	@display
0000A54E 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A554 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A558 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is the final frame (05) displayed?
0000A55E 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A562                            
0000A562                            	@display:
0000A562 6000 0000                  		bra.w	DisplaySprite
0000A566                            ; ===========================================================================
0000A566                            ; ---------------------------------------------------------------------------
0000A566                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000A566                            ; ---------------------------------------------------------------------------
0000A566                            
0000A566                            ExplosionBomb:
0000A566 7000                       		moveq	#0,d0
0000A568 1028 0024                  		move.b	obRoutine(a0),d0
0000A56C 323B 0000                  		move.w	ExBom_Index(pc,d0.w),d1
0000A570 4EFB 1000                  		jmp	ExBom_Index(pc,d1.w)
0000A574                            ; ===========================================================================
0000A574 0000                       ExBom_Index:	dc.w ExBom_Main-ExBom_Index
0000A576 FFD4                       		dc.w ExItem_Animate-ExBom_Index
0000A578                            ; ===========================================================================
0000A578                            
0000A578                            ExBom_Main:	; Routine 0
0000A578 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A57C 217C 0000 0000 0004        		move.l	#Map_ExplodeBomb,obMap(a0)
0000A584 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A58A 117C 0004 0001             		move.b	#4,obRender(a0)
0000A590 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A596 117C 0000 0020             		move.b	#0,obColType(a0)
0000A59C 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A5A2 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000A5A8 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A5B8                            		include	"_anim\Ball Hog.asm"
0000A5B8                            ; ---------------------------------------------------------------------------
0000A5B8                            ; Animation script - doors (SBZ)
0000A5B8                            ; ---------------------------------------------------------------------------
0000A5B8 0000                       Ani_Hog:	dc.w @hog-Ani_Hog
0000A5BA 0900 0002 0203 0200 0002+  @hog:		dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, afEnd
0000A5D2 00                         		even
0000A5D2 00                         		even
0000A5D2                            Map_Hog:	include	"_maps\Ball Hog.asm"
0000A5D2                            ; --------------------------------------------------------------------------------
0000A5D2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A5D2                            ; --------------------------------------------------------------------------------
0000A5D2                            
0000A5D2                            SME_ZER01:	
0000A5D2 0000 0000                  		dc.w SME_ZER01_C-SME_ZER01, SME_ZER01_17-SME_ZER01	
0000A5D6 0000 0000                  		dc.w SME_ZER01_22-SME_ZER01, SME_ZER01_2D-SME_ZER01	
0000A5DA 0000 0000                  		dc.w SME_ZER01_38-SME_ZER01, SME_ZER01_3E-SME_ZER01	
0000A5DE 02                         SME_ZER01_C:	dc.b 2	
0000A5DF EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000A5E4 FF0A 2006 F4               		dc.b $FF, $A, $20, 6, $F4	
0000A5E9 02                         SME_ZER01_17:	dc.b 2	
0000A5EA EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000A5EF FF0A 200F F4               		dc.b $FF, $A, $20, $F, $F4	
0000A5F4 02                         SME_ZER01_22:	dc.b 2	
0000A5F5 F409 2000 F4               		dc.b $F4, 9, $20, 0, $F4	
0000A5FA 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000A5FF 02                         SME_ZER01_2D:	dc.b 2	
0000A600 E409 2000 F4               		dc.b $E4, 9, $20, 0, $F4	
0000A605 F40A 201E F4               		dc.b $F4, $A, $20, $1E, $F4	
0000A60A 01                         SME_ZER01_38:	dc.b 1	
0000A60B F805 0027 F8               		dc.b $F8, 5, 0, $27, $F8	
0000A610 01                         SME_ZER01_3E:	dc.b 1	
0000A611 F805 602B F8               		dc.b $F8, 5, $60, $2B, $F8	
0000A616                            		even
0000A616                            		even
0000A616                            Map_MisDissolve:include	"_maps\Buzz Bomber Missile Dissolve.asm"
0000A616                            ; ---------------------------------------------------------------------------
0000A616                            ; Sprite mappings - buzz bomber missile vanishing
0000A616                            ; ---------------------------------------------------------------------------
0000A616                            Map_MisDissolve_internal:
0000A616 0000                       		dc.w byte_8EAE-Map_MisDissolve_internal
0000A618 0000                       		dc.w byte_8EB4-Map_MisDissolve_internal
0000A61A 0000                       		dc.w byte_8EBA-Map_MisDissolve_internal
0000A61C 0000                       		dc.w byte_8EC0-Map_MisDissolve_internal
0000A61E 01                         byte_8EAE:	dc.b 1
0000A61F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000A624 01                         byte_8EB4:	dc.b 1
0000A625 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000A62A 01                         byte_8EBA:	dc.b 1
0000A62B F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000A630 01                         byte_8EC0:	dc.b 1
0000A631 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000A636                            		even
0000A636                            		even
0000A636                            		include	"_maps\Explosions.asm"
0000A636                            ; ---------------------------------------------------------------------------
0000A636                            ; Sprite mappings - explosion from a badnik or monitor
0000A636                            ; ---------------------------------------------------------------------------
0000A636 0000 0000                  Map_ExplodeItem:dc.w byte_8ED0-Map_ExplodeItem, byte_8ED6-Map_ExplodeItem
0000A63A 0000 0000                  		dc.w byte_8EDC-Map_ExplodeItem, byte_8EE2-Map_ExplodeItem
0000A63E 0000                       		dc.w byte_8EF7-Map_ExplodeItem
0000A640 01                         byte_8ED0:	dc.b 1
0000A641 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000A646 01                         byte_8ED6:	dc.b 1
0000A647 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000A64C 01                         byte_8EDC:	dc.b 1
0000A64D F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000A652 04                         byte_8EE2:	dc.b 4
0000A653 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000A658 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000A65D 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000A662 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000A667 04                         byte_8EF7:	dc.b 4
0000A668 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000A66D EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000A672 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000A677 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000A67C                            		even
0000A67C                            ; ---------------------------------------------------------------------------
0000A67C                            ; Sprite mappings - explosion from when	a boss is destroyed
0000A67C                            ; ---------------------------------------------------------------------------
0000A67C FFC4                       Map_ExplodeBomb:dc.w byte_8ED0-Map_ExplodeBomb
0000A67E 0000                       		dc.w byte_8F16-Map_ExplodeBomb
0000A680 0000                       		dc.w byte_8F1C-Map_ExplodeBomb
0000A682 FFD6                       		dc.w byte_8EE2-Map_ExplodeBomb
0000A684 FFEB                       		dc.w byte_8EF7-Map_ExplodeBomb
0000A686 01                         byte_8F16:	dc.b 1
0000A687 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000A68C 01                         byte_8F1C:	dc.b 1
0000A68D F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000A692                            		even
0000A692                            		even
0000A692                            
0000A692                            		include	"_incObj\28 Animals.asm"
0000A692                            ; ---------------------------------------------------------------------------
0000A692                            ; Object 28 - animals
0000A692                            ; ---------------------------------------------------------------------------
0000A692                            
0000A692                            Animals:
0000A692 7000                       		moveq	#0,d0
0000A694 1028 0024                  		move.b	obRoutine(a0),d0
0000A698 323B 0000                  		move.w	Anml_Index(pc,d0.w),d1
0000A69C 4EFB 1000                  		jmp	Anml_Index(pc,d1.w)
0000A6A0                            ; ===========================================================================
0000A6A0 0000 0000                  Anml_Index:	dc.w Anml_Ending-Anml_Index, loc_912A-Anml_Index
0000A6A4 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000A6A8 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9184-Anml_Index
0000A6AC 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000A6B0 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9240-Anml_Index
0000A6B4 0000 0000                  		dc.w loc_9260-Anml_Index, loc_9260-Anml_Index
0000A6B8 0000 0000                  		dc.w loc_9280-Anml_Index, loc_92BA-Anml_Index
0000A6BC 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000A6C0 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000A6C4 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9370-Anml_Index
0000A6C8 0000                       		dc.w loc_92D6-Anml_Index
0000A6CA                            
0000A6CA 0005 0203 0603 0405 0401+  Anml_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000A6D6                            
0000A6D6 FE00 FC00                  Anml_Variables:	dc.w $FE00, $FC00
0000A6DA 0000 0000                  		dc.l Map_Animal1
0000A6DE FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000A6E2 0000 0000                  		dc.l Map_Animal2	; mappings address
0000A6E6 FE80 FD00                  		dc.w $FE80, $FD00
0000A6EA 0000 0000                  		dc.l Map_Animal1
0000A6EE FEC0 FE80                  		dc.w $FEC0, $FE80
0000A6F2 0000 0000                  		dc.l Map_Animal2
0000A6F6 FE40 FD00                  		dc.w $FE40, $FD00
0000A6FA 0000 0000                  		dc.l Map_Animal3
0000A6FE FD00 FC00                  		dc.w $FD00, $FC00
0000A702 0000 0000                  		dc.l Map_Animal2
0000A706 FD80 FC80                  		dc.w $FD80, $FC80
0000A70A 0000 0000                  		dc.l Map_Animal3
0000A70E                            
0000A70E FBC0 FC00 FBC0 FC00 FBC0+  Anml_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000A71E FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000A72E FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000A73A                            
0000A73A 0000 0000 0000 0000 0000+  Anml_EndMap:	dc.l Map_Animal2, Map_Animal2, Map_Animal2, Map_Animal1, Map_Animal1
0000A74E 0000 0000 0000 0000 0000+  		dc.l Map_Animal1, Map_Animal1, Map_Animal2, Map_Animal3, Map_Animal2
0000A762 0000 0000                  		dc.l Map_Animal3
0000A766                            
0000A766 05A5 05A5 05A5 0553 0553+  Anml_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000A778 0565 05B3                  		dc.w $565, $5B3
0000A77C                            ; ===========================================================================
0000A77C                            
0000A77C                            Anml_Ending:	; Routine 0
0000A77C 4A28 0028                  		tst.b	obSubtype(a0)	; did animal come from a destroyed enemy?
0000A780 6700 0000                  		beq.w	Anml_FromEnemy	; if yes, branch
0000A784 7000                       		moveq	#0,d0
0000A786 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type to d0
0000A78A D040                       		add.w	d0,d0		; multiply d0 by 2
0000A78C 1140 0024                  		move.b	d0,obRoutine(a0) ; move d0 to routine counter
0000A790 0440 0014                  		subi.w	#$14,d0
0000A794 317B 00D0 0002             		move.w	Anml_EndVram(pc,d0.w),obGfx(a0)
0000A79A D040                       		add.w	d0,d0
0000A79C 217B 009C 0004             		move.l	Anml_EndMap(pc,d0.w),obMap(a0)
0000A7A2 43FA FF6A                  		lea	Anml_EndSpeed(pc),a1
0000A7A6 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000A7AC 3171 0000 0010             		move.w	(a1,d0.w),obVelX(a0)
0000A7B2 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000A7B8 3171 0002 0012             		move.w	2(a1,d0.w),obVelY(a0)
0000A7BE 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000A7C4 117C 0004 0001             		move.b	#4,obRender(a0)
0000A7CA 08E8 0000 0001             		bset	#0,obRender(a0)
0000A7D0 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000A7D6 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A7DC 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000A7E2 6000 0000                  		bra.w	DisplaySprite
0000A7E6                            ; ===========================================================================
0000A7E6                            
0000A7E6                            Anml_FromEnemy:
0000A7E6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A7EA 6100 9390                  		bsr.w	RandomNumber
0000A7EE 0240 0001                  		andi.w	#1,d0
0000A7F2 7200                       		moveq	#0,d1
0000A7F4 1238 FE10                  		move.b	(v_zone).w,d1
0000A7F8 D241                       		add.w	d1,d1
0000A7FA D240                       		add.w	d0,d1
0000A7FC 43FA FECC                  		lea	Anml_VarIndex(pc),a1
0000A800 1031 1000                  		move.b	(a1,d1.w),d0
0000A804 1140 0030                  		move.b	d0,$30(a0)
0000A808 E748                       		lsl.w	#3,d0
0000A80A 43FA FECA                  		lea	Anml_Variables(pc),a1
0000A80E D2C0                       		adda.w	d0,a1
0000A810 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000A814 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000A818 2159 0004                  		move.l	(a1)+,obMap(a0)	; load mappings
0000A81C 317C 0580 0002             		move.w	#$580,obGfx(a0)	; VRAM setting for 1st animal
0000A822 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000A828 6700                       		beq.s	loc_90C0	; if yes, branch
0000A82A 317C 0592 0002             		move.w	#$592,obGfx(a0)	; VRAM setting for 2nd animal
0000A830                            
0000A830                            loc_90C0:
0000A830 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000A836 117C 0004 0001             		move.b	#4,obRender(a0)
0000A83C 08E8 0000 0001             		bset	#0,obRender(a0)
0000A842 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000A848 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A84E 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000A854 117C 0002 001A             		move.b	#2,obFrame(a0)
0000A85A 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000A860 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000A864 6600                       		bne.s	loc_911C
0000A866 6100 0000                  		bsr.w	FindFreeObj
0000A86A 6600                       		bne.s	Anml_Display
0000A86C 12BC 0000                  		move.b	#id_Points,0(a1) ; load points object
0000A870 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A876 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A87C 3028 003E                  		move.w	$3E(a0),d0
0000A880 E248                       		lsr.w	#1,d0
0000A882 1340 001A                  		move.b	d0,obFrame(a1)
0000A886                            
0000A886                            Anml_Display:
0000A886 6000 0000                  		bra.w	DisplaySprite
0000A88A                            ; ===========================================================================
0000A88A                            
0000A88A                            loc_911C:
0000A88A 117C 0012 0024             		move.b	#$12,obRoutine(a0)
0000A890 4268 0010                  		clr.w	obVelX(a0)
0000A894 6000 0000                  		bra.w	DisplaySprite
0000A898                            ; ===========================================================================
0000A898                            
0000A898                            loc_912A:
0000A898 4A28 0001                  		tst.b	obRender(a0)
0000A89C 6A00 0000                  		bpl.w	DeleteObject
0000A8A0 6100 0000                  		bsr.w	ObjectFall
0000A8A4 4A68 0012                  		tst.w	obVelY(a0)
0000A8A8 6B00                       		bmi.s	loc_9180
0000A8AA 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A8B0 4A41                       		tst.w	d1
0000A8B2 6A00                       		bpl.s	loc_9180
0000A8B4 D368 000C                  		add.w	d1,obY(a0)
0000A8B8 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000A8BE 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000A8C4 117C 0001 001A             		move.b	#1,obFrame(a0)
0000A8CA 1028 0030                  		move.b	$30(a0),d0
0000A8CE D000                       		add.b	d0,d0
0000A8D0 5800                       		addq.b	#4,d0
0000A8D2 1140 0024                  		move.b	d0,obRoutine(a0)
0000A8D6 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000A8DA 6700                       		beq.s	loc_9180
0000A8DC 0838 0004 FE0F             		btst	#4,(v_vbla_byte).w
0000A8E2 6700                       		beq.s	loc_9180
0000A8E4 4468 0010                  		neg.w	obVelX(a0)
0000A8E8 0868 0000 0001             		bchg	#0,obRender(a0)
0000A8EE                            
0000A8EE                            loc_9180:
0000A8EE 6000 0000                  		bra.w	DisplaySprite
0000A8F2                            ; ===========================================================================
0000A8F2                            
0000A8F2                            loc_9184:
0000A8F2 6100 0000                  		bsr.w	ObjectFall
0000A8F6 117C 0001 001A             		move.b	#1,obFrame(a0)
0000A8FC 4A68 0012                  		tst.w	obVelY(a0)
0000A900 6B00                       		bmi.s	loc_91AE
0000A902 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A908 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A90E 4A41                       		tst.w	d1
0000A910 6A00                       		bpl.s	loc_91AE
0000A912 D368 000C                  		add.w	d1,obY(a0)
0000A916 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000A91C                            
0000A91C                            loc_91AE:
0000A91C 4A28 0028                  		tst.b	obSubtype(a0)
0000A920 6600                       		bne.s	loc_9224
0000A922 4A28 0001                  		tst.b	obRender(a0)
0000A926 6A00 0000                  		bpl.w	DeleteObject
0000A92A 6000 0000                  		bra.w	DisplaySprite
0000A92E                            ; ===========================================================================
0000A92E                            
0000A92E                            loc_91C0:
0000A92E 6100 0000                  		bsr.w	SpeedToPos
0000A932 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000A938 4A68 0012                  		tst.w	obVelY(a0)
0000A93C 6B00                       		bmi.s	loc_91FC
0000A93E 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A944 4A41                       		tst.w	d1
0000A946 6A00                       		bpl.s	loc_91FC
0000A948 D368 000C                  		add.w	d1,obY(a0)
0000A94C 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000A952 4A28 0028                  		tst.b	obSubtype(a0)
0000A956 6700                       		beq.s	loc_91FC
0000A958 0C28 000A 0028             		cmpi.b	#$A,obSubtype(a0)
0000A95E 6700                       		beq.s	loc_91FC
0000A960 4468 0010                  		neg.w	obVelX(a0)
0000A964 0868 0000 0001             		bchg	#0,obRender(a0)
0000A96A                            
0000A96A                            loc_91FC:
0000A96A 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000A96E 6A00                       		bpl.s	loc_9212
0000A970 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000A976 5228 001A                  		addq.b	#1,obFrame(a0)
0000A97A 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000A980                            
0000A980                            loc_9212:
0000A980 4A28 0028                  		tst.b	obSubtype(a0)
0000A984 6600                       		bne.s	loc_9224
0000A986 4A28 0001                  		tst.b	obRender(a0)
0000A98A 6A00 0000                  		bpl.w	DeleteObject
0000A98E 6000 0000                  		bra.w	DisplaySprite
0000A992                            ; ===========================================================================
0000A992                            
0000A992                            loc_9224:
0000A992 3028 0008                  		move.w	obX(a0),d0
0000A996 9078 D008                  		sub.w	(v_player+obX).w,d0
0000A99A 6500                       		bcs.s	loc_923C
0000A99C 0440 0180                  		subi.w	#$180,d0
0000A9A0 6A00                       		bpl.s	loc_923C
0000A9A2 4A28 0001                  		tst.b	obRender(a0)
0000A9A6 6A00 0000                  		bpl.w	DeleteObject
0000A9AA                            
0000A9AA                            loc_923C:
0000A9AA 6000 0000                  		bra.w	DisplaySprite
0000A9AE                            ; ===========================================================================
0000A9AE                            
0000A9AE                            loc_9240:
0000A9AE 4A28 0001                  		tst.b	obRender(a0)
0000A9B2 6A00 0000                  		bpl.w	DeleteObject
0000A9B6 5368 0036                  		subq.w	#1,$36(a0)
0000A9BA 6600 0000                  		bne.w	loc_925C
0000A9BE 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000A9C4 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000A9CA                            
0000A9CA                            loc_925C:
0000A9CA 6000 0000                  		bra.w	DisplaySprite
0000A9CE                            ; ===========================================================================
0000A9CE                            
0000A9CE                            loc_9260:
0000A9CE 6100 0000                  		bsr.w	sub_9404
0000A9D2 6400                       		bcc.s	loc_927C
0000A9D4 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000A9DA 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000A9E0 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000A9E6 6000 FF46                  		bra.w	loc_91C0
0000A9EA                            ; ===========================================================================
0000A9EA                            
0000A9EA                            loc_927C:
0000A9EA 6000 FFA6                  		bra.w	loc_9224
0000A9EE                            ; ===========================================================================
0000A9EE                            
0000A9EE                            loc_9280:
0000A9EE 6100 0000                  		bsr.w	sub_9404
0000A9F2 6A00                       		bpl.s	loc_92B6
0000A9F4 4268 0010                  		clr.w	obVelX(a0)
0000A9F8 4268 0032                  		clr.w	$32(a0)
0000A9FC 6100 0000                  		bsr.w	SpeedToPos
0000AA00 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AA06 6100 0000                  		bsr.w	loc_93C4
0000AA0A 6100 0000                  		bsr.w	loc_93EC
0000AA0E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AA12 6A00                       		bpl.s	loc_92B6
0000AA14 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AA1A 5228 001A                  		addq.b	#1,obFrame(a0)
0000AA1E 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AA24                            
0000AA24                            loc_92B6:
0000AA24 6000 FF6C                  		bra.w	loc_9224
0000AA28                            ; ===========================================================================
0000AA28                            
0000AA28                            loc_92BA:
0000AA28 6100 0000                  		bsr.w	sub_9404
0000AA2C 6A00                       		bpl.s	loc_9310
0000AA2E 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AA34 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AA3A 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000AA40 6000 FEB0                  		bra.w	loc_9184
0000AA44                            ; ===========================================================================
0000AA44                            
0000AA44                            loc_92D6:
0000AA44 6100 0000                  		bsr.w	ObjectFall
0000AA48 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AA4E 4A68 0012                  		tst.w	obVelY(a0)
0000AA52 6B00                       		bmi.s	loc_9310
0000AA54 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AA5A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AA60 4A41                       		tst.w	d1
0000AA62 6A00                       		bpl.s	loc_9310
0000AA64 4628 0029                  		not.b	$29(a0)
0000AA68 6600                       		bne.s	loc_9306
0000AA6A 4468 0010                  		neg.w	obVelX(a0)
0000AA6E 0868 0000 0001             		bchg	#0,obRender(a0)
0000AA74                            
0000AA74                            loc_9306:
0000AA74 D368 000C                  		add.w	d1,obY(a0)
0000AA78 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AA7E                            
0000AA7E                            loc_9310:
0000AA7E 6000 FF12                  		bra.w	loc_9224
0000AA82                            ; ===========================================================================
0000AA82                            
0000AA82                            loc_9314:
0000AA82 6100 0000                  		bsr.w	sub_9404
0000AA86 6A00                       		bpl.s	loc_932E
0000AA88 4268 0010                  		clr.w	obVelX(a0)
0000AA8C 4268 0032                  		clr.w	$32(a0)
0000AA90 6100 0000                  		bsr.w	ObjectFall
0000AA94 6100 0000                  		bsr.w	loc_93C4
0000AA98 6100 0000                  		bsr.w	loc_93EC
0000AA9C                            
0000AA9C                            loc_932E:
0000AA9C 6000 FEF4                  		bra.w	loc_9224
0000AAA0                            ; ===========================================================================
0000AAA0                            
0000AAA0                            loc_9332:
0000AAA0 6100 0000                  		bsr.w	sub_9404
0000AAA4 6A00                       		bpl.s	loc_936C
0000AAA6 6100 0000                  		bsr.w	ObjectFall
0000AAAA 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AAB0 4A68 0012                  		tst.w	obVelY(a0)
0000AAB4 6B00                       		bmi.s	loc_936C
0000AAB6 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AABC 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AAC2 4A41                       		tst.w	d1
0000AAC4 6A00                       		bpl.s	loc_936C
0000AAC6 4468 0010                  		neg.w	obVelX(a0)
0000AACA 0868 0000 0001             		bchg	#0,obRender(a0)
0000AAD0 D368 000C                  		add.w	d1,obY(a0)
0000AAD4 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AADA                            
0000AADA                            loc_936C:
0000AADA 6000 FEB6                  		bra.w	loc_9224
0000AADE                            ; ===========================================================================
0000AADE                            
0000AADE                            loc_9370:
0000AADE 6100 0000                  		bsr.w	sub_9404
0000AAE2 6A00                       		bpl.s	loc_93C0
0000AAE4 6100 0000                  		bsr.w	SpeedToPos
0000AAE8 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AAEE 4A68 0012                  		tst.w	obVelY(a0)
0000AAF2 6B00                       		bmi.s	loc_93AA
0000AAF4 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AAFA 4A41                       		tst.w	d1
0000AAFC 6A00                       		bpl.s	loc_93AA
0000AAFE 4628 0029                  		not.b	$29(a0)
0000AB02 6600                       		bne.s	loc_93A0
0000AB04 4468 0010                  		neg.w	obVelX(a0)
0000AB08 0868 0000 0001             		bchg	#0,obRender(a0)
0000AB0E                            
0000AB0E                            loc_93A0:
0000AB0E D368 000C                  		add.w	d1,obY(a0)
0000AB12 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AB18                            
0000AB18                            loc_93AA:
0000AB18 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AB1C 6A00                       		bpl.s	loc_93C0
0000AB1E 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AB24 5228 001A                  		addq.b	#1,obFrame(a0)
0000AB28 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AB2E                            
0000AB2E                            loc_93C0:
0000AB2E 6000 FE62                  		bra.w	loc_9224
0000AB32                            ; ===========================================================================
0000AB32                            
0000AB32                            loc_93C4:
0000AB32 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AB38 4A68 0012                  		tst.w	obVelY(a0)
0000AB3C 6B00                       		bmi.s	locret_93EA
0000AB3E 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AB44 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AB4A 4A41                       		tst.w	d1
0000AB4C 6A00                       		bpl.s	locret_93EA
0000AB4E D368 000C                  		add.w	d1,obY(a0)
0000AB52 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AB58                            
0000AB58                            locret_93EA:
0000AB58 4E75                       		rts	
0000AB5A                            ; ===========================================================================
0000AB5A                            
0000AB5A                            loc_93EC:
0000AB5A 08E8 0000 0001             		bset	#0,obRender(a0)
0000AB60 3028 0008                  		move.w	obX(a0),d0
0000AB64 9078 D008                  		sub.w	(v_player+obX).w,d0
0000AB68 6400                       		bcc.s	locret_9402
0000AB6A 08A8 0000 0001             		bclr	#0,obRender(a0)
0000AB70                            
0000AB70                            locret_9402:
0000AB70 4E75                       		rts	
0000AB72                            
0000AB72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AB72                            
0000AB72                            
0000AB72                            sub_9404:
0000AB72 3038 D008                  		move.w	(v_player+obX).w,d0
0000AB76 9068 0008                  		sub.w	obX(a0),d0
0000AB7A 0440 00B8                  		subi.w	#$B8,d0
0000AB7E 4E75                       		rts	
0000AB80                            ; End of function sub_9404
0000AB80                            ; End of function sub_9404
0000AB80                            		include	"_incObj\29 Points.asm"
0000AB80                            ; ---------------------------------------------------------------------------
0000AB80                            ; Object 29 - points that appear when you destroy something
0000AB80                            ; ---------------------------------------------------------------------------
0000AB80                            
0000AB80                            Points:
0000AB80 7000                       		moveq	#0,d0
0000AB82 1028 0024                  		move.b	obRoutine(a0),d0
0000AB86 323B 0000                  		move.w	Poi_Index(pc,d0.w),d1
0000AB8A 4EBB 1000                  		jsr	Poi_Index(pc,d1.w)
0000AB8E 6000 0000                  		bra.w	DisplaySprite
0000AB92                            ; ===========================================================================
0000AB92 0000                       Poi_Index:	dc.w Poi_Main-Poi_Index
0000AB94 0000                       		dc.w Poi_Slower-Poi_Index
0000AB96                            ; ===========================================================================
0000AB96                            
0000AB96                            Poi_Main:	; Routine 0
0000AB96 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AB9A 217C 0000 0000 0004        		move.l	#Map_Poi,obMap(a0)
0000ABA2 317C 256D 0002             		move.w	#$256D,obGfx(a0)
0000ABA8 117C 0004 0001             		move.b	#4,obRender(a0)
0000ABAE 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000ABB4 117C 0008 0014             		move.b	#8,obActWid(a0)
0000ABBA 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; move object upwards
0000ABC0                            
0000ABC0                            Poi_Slower:	; Routine 2
0000ABC0 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000ABC4 6A00 0000                  		bpl.w	DeleteObject	; if not, delete
0000ABC8 6100 0000                  		bsr.w	SpeedToPos
0000ABCC 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000ABD2 4E75                       		rts	
0000ABD2 4E75                       		rts	
0000ABD4                            Map_Animal1:	include	"_maps\Animals 1.asm"
0000ABD4                            ; ---------------------------------------------------------------------------
0000ABD4                            ; Sprite mappings - animals
0000ABD4                            ; ---------------------------------------------------------------------------
0000ABD4                            Map_Animal1_internal:
0000ABD4 0000                       		dc.w byte_9472-Map_Animal1_internal
0000ABD6 0000                       		dc.w byte_9478-Map_Animal1_internal
0000ABD8 0000                       		dc.w byte_946C-Map_Animal1_internal
0000ABDA 01                         byte_946C:	dc.b 1
0000ABDB F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000ABE0 01                         byte_9472:	dc.b 1
0000ABE1 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000ABE6 01                         byte_9478:	dc.b 1
0000ABE7 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000ABEC                            		even
0000ABEC                            		even
0000ABEC                            Map_Animal2:	include	"_maps\Animals 2.asm"
0000ABEC                            ; ---------------------------------------------------------------------------
0000ABEC                            ; Sprite mappings - animals
0000ABEC                            ; ---------------------------------------------------------------------------
0000ABEC                            Map_Animal2_internal:
0000ABEC 0000                       		dc.w byte_948A-Map_Animal2_internal
0000ABEE 0000                       		dc.w byte_9490-Map_Animal2_internal
0000ABF0 0000                       		dc.w byte_9484-Map_Animal2_internal
0000ABF2 01                         byte_9484:	dc.b 1
0000ABF3 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000ABF8 01                         byte_948A:	dc.b 1
0000ABF9 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000ABFE 01                         byte_9490:	dc.b 1
0000ABFF FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000AC04                            		even
0000AC04                            		even
0000AC04                            Map_Animal3:	include	"_maps\Animals 3.asm"
0000AC04                            ; ---------------------------------------------------------------------------
0000AC04                            ; Sprite mappings - animals
0000AC04                            ; ---------------------------------------------------------------------------
0000AC04                            Map_Animal3_internal:
0000AC04 0000                       		dc.w byte_94A2-Map_Animal3_internal
0000AC06 0000                       		dc.w byte_94A8-Map_Animal3_internal
0000AC08 0000                       		dc.w byte_949C-Map_Animal3_internal
0000AC0A 01                         byte_949C:	dc.b 1
0000AC0B F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AC10 01                         byte_94A2:	dc.b 1
0000AC11 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000AC16 01                         byte_94A8:	dc.b 1
0000AC17 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000AC1C                            		even
0000AC1C                            		even
0000AC1C                            Map_Poi:	include	"_maps\Points.asm"
0000AC1C                            ; --------------------------------------------------------------------------------
0000AC1C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000AC1C                            ; --------------------------------------------------------------------------------
0000AC1C                            
0000AC1C                            SME_qLvsg:	
0000AC1C 0000 0000                  		dc.w SME_qLvsg_E-SME_qLvsg, SME_qLvsg_14-SME_qLvsg	
0000AC20 0000 0000                  		dc.w SME_qLvsg_1A-SME_qLvsg, SME_qLvsg_20-SME_qLvsg	
0000AC24 0000 0000                  		dc.w SME_qLvsg_26-SME_qLvsg, SME_qLvsg_2C-SME_qLvsg	
0000AC28 0000                       		dc.w SME_qLvsg_37-SME_qLvsg	
0000AC2A 01                         SME_qLvsg_E:	dc.b 1	
0000AC2B FC04 0000 F8               		dc.b $FC, 4, 0, 0, $F8	
0000AC30 01                         SME_qLvsg_14:	dc.b 1	
0000AC31 FC04 0002 F8               		dc.b $FC, 4, 0, 2, $F8	
0000AC36 01                         SME_qLvsg_1A:	dc.b 1	
0000AC37 FC04 0004 F8               		dc.b $FC, 4, 0, 4, $F8	
0000AC3C 01                         SME_qLvsg_20:	dc.b 1	
0000AC3D FC04 0006 F8               		dc.b $FC, 4, 0, 6, $F8	
0000AC42 01                         SME_qLvsg_26:	dc.b 1	
0000AC43 FC00 0006 FC               		dc.b $FC, 0, 0, 6, $FC	
0000AC48 02                         SME_qLvsg_2C:	dc.b 2	
0000AC49 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000AC4E FC04 0007 01               		dc.b $FC, 4, 0, 7, 1	
0000AC53 02                         SME_qLvsg_37:	dc.b 2	
0000AC54 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000AC59 FC04 0007 06               		dc.b $FC, 4, 0, 7, 6	
0000AC5E                            		even
0000AC5E                            		even
0000AC5E                            
0000AC5E                            		include	"_incObj\1F Crabmeat.asm"
0000AC5E                            ; ---------------------------------------------------------------------------
0000AC5E                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000AC5E                            ; ---------------------------------------------------------------------------
0000AC5E                            
0000AC5E                            Crabmeat:
0000AC5E 7000                       		moveq	#0,d0
0000AC60 1028 0024                  		move.b	obRoutine(a0),d0
0000AC64 323B 0000                  		move.w	Crab_Index(pc,d0.w),d1
0000AC68 4EFB 1000                  		jmp	Crab_Index(pc,d1.w)
0000AC6C                            ; ===========================================================================
0000AC6C                            Crab_Index:
0000AC6C 0000                       ptr_Crab_Main:		dc.w Crab_Main-Crab_Index
0000AC6E 0000                       ptr_Crab_Action:	dc.w Crab_Action-Crab_Index
0000AC70 0000                       ptr_Crab_Delete:	dc.w Crab_Delete-Crab_Index
0000AC72 0000                       ptr_Crab_BallMain:	dc.w Crab_BallMain-Crab_Index
0000AC74 0000                       ptr_Crab_BallMove:	dc.w Crab_BallMove-Crab_Index
0000AC76                            
0000AC76 =00000000                  id_Crab_Main:		equ ptr_Crab_Main-Crab_Index	; 0
0000AC76 =00000002                  id_Crab_Action:		equ ptr_Crab_Action-Crab_Index	; 2
0000AC76 =00000004                  id_Crab_Delete:		equ ptr_Crab_Delete-Crab_Index	; 4
0000AC76 =00000006                  id_Crab_BallMain:	equ ptr_Crab_BallMain-Crab_Index	; 6
0000AC76 =00000008                  id_Crab_BallMove:	equ ptr_Crab_BallMove-Crab_Index	; 8
0000AC76                            
0000AC76 =00000030                  crab_timedelay:	equ $30
0000AC76 =00000032                  crab_mode:	equ $32
0000AC76                            ; ===========================================================================
0000AC76                            
0000AC76                            Crab_Main:	; Routine 0
0000AC76 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000AC7C 117C 0008 0017             		move.b	#8,obWidth(a0)
0000AC82 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000AC8A 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000AC90 117C 0004 0001             		move.b	#4,obRender(a0)
0000AC96 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AC9C 117C 0006 0020             		move.b	#6,obColType(a0)
0000ACA2 117C 0015 0014             		move.b	#$15,obActWid(a0)
0000ACA8 6100 0000                  		bsr.w	ObjectFall
0000ACAC 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000ACB2 4A41                       		tst.w	d1
0000ACB4 6A00                       		bpl.s	@floornotfound
0000ACB6 D368 000C                  		add.w	d1,obY(a0)
0000ACBA 1143 0026                  		move.b	d3,obAngle(a0)
0000ACBE 317C 0000 0012             		move.w	#0,obVelY(a0)
0000ACC4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000ACC8                            
0000ACC8                            	@floornotfound:
0000ACC8 4E75                       		rts	
0000ACCA                            ; ===========================================================================
0000ACCA                            
0000ACCA                            Crab_Action:	; Routine 2
0000ACCA 7000                       		moveq	#0,d0
0000ACCC 1028 0025                  		move.b	ob2ndRout(a0),d0
0000ACD0 323B 0000                  		move.w	@index(pc,d0.w),d1
0000ACD4 4EBB 1000                  		jsr	@index(pc,d1.w)
0000ACD8 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000ACDE 6100 0000                  		bsr.w	AnimateSprite
0000ACE2 6000 0000                  		bra.w	RememberState
0000ACE6                            ; ===========================================================================
0000ACE6 0000                       @index:		dc.w @waittofire-@index
0000ACE8 0000                       		dc.w @walkonfloor-@index
0000ACEA                            ; ===========================================================================
0000ACEA                            
0000ACEA                            @waittofire:
0000ACEA 5368 0030                  		subq.w	#1,crab_timedelay(a0) ; subtract 1 from time delay
0000ACEE 6A00                       		bpl.s	@dontmove
0000ACF0 4A28 0001                  		tst.b	obRender(a0)
0000ACF4 6A00                       		bpl.s	@movecrab
0000ACF6 0868 0001 0032             		bchg	#1,crab_mode(a0)
0000ACFC 6600                       		bne.s	@fire
0000ACFE                            
0000ACFE                            	@movecrab:
0000ACFE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000AD02 317C 007F 0030             		move.w	#127,crab_timedelay(a0) ; set time delay to approx 2 seconds
0000AD08 317C 0080 0010             		move.w	#$80,obVelX(a0)	; move Crabmeat	to the right
0000AD0E 6100 0000                  		bsr.w	Crab_SetAni
0000AD12 5600                       		addq.b	#3,d0
0000AD14 1140 001C                  		move.b	d0,obAnim(a0)
0000AD18 0868 0000 0022             		bchg	#0,obStatus(a0)
0000AD1E 6600                       		bne.s	@noflip
0000AD20 4468 0010                  		neg.w	obVelX(a0)	; change direction
0000AD24                            
0000AD24                            	@dontmove:
0000AD24                            	@noflip:
0000AD24 4E75                       		rts	
0000AD26                            ; ===========================================================================
0000AD26                            
0000AD26                            @fire:
0000AD26 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000AD2C 117C 0006 001C             		move.b	#6,obAnim(a0)	; use firing animation
0000AD32 6100 0000                  		bsr.w	FindFreeObj
0000AD36 6600                       		bne.s	@failleft
0000AD38 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load left fireball
0000AD3C 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000AD42 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000AD48 0469 0010 0008             		subi.w	#$10,obX(a1)
0000AD4E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AD54 337C FF00 0010             		move.w	#-$100,obVelX(a1)
0000AD5A                            
0000AD5A                            	@failleft:
0000AD5A 6100 0000                  		bsr.w	FindFreeObj
0000AD5E 6600                       		bne.s	@failright
0000AD60 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load right fireball
0000AD64 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000AD6A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000AD70 0669 0010 0008             		addi.w	#$10,obX(a1)
0000AD76 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AD7C 337C 0100 0010             		move.w	#$100,obVelX(a1)
0000AD82                            
0000AD82                            	@failright:
0000AD82 4E75                       		rts	
0000AD84                            ; ===========================================================================
0000AD84                            
0000AD84                            @walkonfloor:
0000AD84 5368 0030                  		subq.w	#1,crab_timedelay(a0)
0000AD88 6B00                       		bmi.s	loc_966E
0000AD8A 6100 0000                  		bsr.w	SpeedToPos
0000AD8E 0868 0000 0032             		bchg	#0,crab_mode(a0)
0000AD94 6600                       		bne.s	loc_9654
0000AD96 3628 0008                  		move.w	obX(a0),d3
0000AD9A 0643 0010                  		addi.w	#$10,d3
0000AD9E 0828 0000 0022             		btst	#0,obStatus(a0)
0000ADA4 6700                       		beq.s	loc_9640
0000ADA6 0443 0020                  		subi.w	#$20,d3
0000ADAA                            
0000ADAA                            loc_9640:
0000ADAA 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000ADB0 0C41 FFF8                  		cmpi.w	#-8,d1
0000ADB4 6D00                       		blt.s	loc_966E
0000ADB6 0C41 000C                  		cmpi.w	#$C,d1
0000ADBA 6C00                       		bge.s	loc_966E
0000ADBC 4E75                       		rts	
0000ADBE                            ; ===========================================================================
0000ADBE                            
0000ADBE                            loc_9654:
0000ADBE 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000ADC4 D368 000C                  		add.w	d1,obY(a0)
0000ADC8 1143 0026                  		move.b	d3,obAngle(a0)
0000ADCC 6100 0000                  		bsr.w	Crab_SetAni
0000ADD0 5600                       		addq.b	#3,d0
0000ADD2 1140 001C                  		move.b	d0,obAnim(a0)
0000ADD6 4E75                       		rts	
0000ADD8                            ; ===========================================================================
0000ADD8                            
0000ADD8                            loc_966E:
0000ADD8 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000ADDC 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000ADE2 317C 0000 0010             		move.w	#0,obVelX(a0)
0000ADE8 6100 0000                  		bsr.w	Crab_SetAni
0000ADEC 1140 001C                  		move.b	d0,obAnim(a0)
0000ADF0 4E75                       		rts	
0000ADF2                            ; ---------------------------------------------------------------------------
0000ADF2                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000ADF2                            ; ---------------------------------------------------------------------------
0000ADF2                            
0000ADF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ADF2                            
0000ADF2                            
0000ADF2                            Crab_SetAni:
0000ADF2 7000                       		moveq	#0,d0
0000ADF4 1628 0026                  		move.b	obAngle(a0),d3
0000ADF8 6B00                       		bmi.s	loc_96A4
0000ADFA 0C03 0006                  		cmpi.b	#6,d3
0000ADFE 6500                       		bcs.s	locret_96A2
0000AE00 7001                       		moveq	#1,d0
0000AE02 0828 0000 0022             		btst	#0,obStatus(a0)
0000AE08 6600                       		bne.s	locret_96A2
0000AE0A 7002                       		moveq	#2,d0
0000AE0C                            
0000AE0C                            locret_96A2:
0000AE0C 4E75                       		rts	
0000AE0E                            ; ===========================================================================
0000AE0E                            
0000AE0E                            loc_96A4:
0000AE0E 0C03 00FA                  		cmpi.b	#-6,d3
0000AE12 6200                       		bhi.s	locret_96B6
0000AE14 7002                       		moveq	#2,d0
0000AE16 0828 0000 0022             		btst	#0,obStatus(a0)
0000AE1C 6600                       		bne.s	locret_96B6
0000AE1E 7001                       		moveq	#1,d0
0000AE20                            
0000AE20                            locret_96B6:
0000AE20 4E75                       		rts	
0000AE22                            ; End of function Crab_SetAni
0000AE22                            
0000AE22                            ; ===========================================================================
0000AE22                            
0000AE22                            Crab_Delete:	; Routine 4
0000AE22 6100 0000                  		bsr.w	DeleteObject
0000AE26 4E75                       		rts	
0000AE28                            ; ===========================================================================
0000AE28                            ; ---------------------------------------------------------------------------
0000AE28                            ; Sub-object - missile that the	Crabmeat throws
0000AE28                            ; ---------------------------------------------------------------------------
0000AE28                            
0000AE28                            Crab_BallMain:	; Routine 6
0000AE28 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AE2C 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000AE34 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000AE3A 117C 0004 0001             		move.b	#4,obRender(a0)
0000AE40 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AE46 117C 0087 0020             		move.b	#$87,obColType(a0)
0000AE4C 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AE52 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000AE58 117C 0007 001C             		move.b	#7,obAnim(a0)
0000AE5E                            
0000AE5E                            Crab_BallMove:	; Routine 8
0000AE5E 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000AE64 6100 0000                  		bsr.w	AnimateSprite
0000AE68 6100 0000                  		bsr.w	ObjectFall
0000AE6C 6100 0000                  		bsr.w	DisplaySprite
0000AE70 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000AE74 0640 00E0                  		addi.w	#$E0,d0
0000AE78 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000AE7C 6500                       		bcs.s	@delete		; if yes, branch
0000AE7E 4E75                       		rts	
0000AE80                            
0000AE80                            	@delete:
0000AE80 6000 0000                  		bra.w	DeleteObject
0000AE80 6000 0000                  		bra.w	DeleteObject
0000AE84                            		include	"_anim\Crabmeat.asm"
0000AE84                            ; ---------------------------------------------------------------------------
0000AE84                            ; Animation script - Crabmeat enemy
0000AE84                            ; ---------------------------------------------------------------------------
0000AE84 0000 0000 0000             Ani_Crab:	dc.w @stand-Ani_Crab, @standslope-Ani_Crab, @standsloperev-Ani_Crab
0000AE8A 0000 0000 0000             		dc.w @walk-Ani_Crab, @walkslope-Ani_Crab, @walksloperev-Ani_Crab
0000AE90 0000 0000                  		dc.w @firing-Ani_Crab, @ball-Ani_Crab
0000AE94 0F00 FF                    @stand:		dc.b $F, 0, afEnd
0000AE98 00                         		even
0000AE98 0F02 FF                    @standslope:	dc.b $F, 2, afEnd
0000AE9C 00                         		even
0000AE9C 0F22 FF                    @standsloperev:	dc.b $F, $22, afEnd
0000AEA0 00                         		even
0000AEA0 0F01 2100 FF               @walk:		dc.b $F, 1, $21, 0, afEnd
0000AEA6 00                         		even
0000AEA6 0F21 0302 FF               @walkslope:	dc.b $F, $21, 3, 2, afEnd
0000AEAC 00                         		even
0000AEAC 0F01 2322 FF               @walksloperev:	dc.b $F, 1, $23, $22, afEnd
0000AEB2 00                         		even
0000AEB2 0F04 FF                    @firing:	dc.b $F, 4, afEnd
0000AEB6 00                         		even
0000AEB6 0105 06FF                  @ball:		dc.b 1,	5, 6, afEnd
0000AEBA                            		even
0000AEBA                            		even
0000AEBA                            Map_Crab:	include	"_maps\Crabmeat.asm"
0000AEBA                            ; ---------------------------------------------------------------------------
0000AEBA                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000AEBA                            ; ---------------------------------------------------------------------------
0000AEBA                            Map_Crab_internal:
0000AEBA 0000                       		dc.w @stand-Map_Crab_internal
0000AEBC 0000                       		dc.w @walk-Map_Crab_internal
0000AEBE 0000                       		dc.w @slope1-Map_Crab_internal
0000AEC0 0000                       		dc.w @slope2-Map_Crab_internal
0000AEC2 0000                       		dc.w @firing-Map_Crab_internal
0000AEC4 0000                       		dc.w @ball1-Map_Crab_internal
0000AEC6 0000                       		dc.w @ball2-Map_Crab_internal
0000AEC8 04                         @stand:		dc.b 4
0000AEC9 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8	; standing/middle walking frame
0000AECE F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000AED3 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000AED8 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000AEDD 04                         @walk:		dc.b 4
0000AEDE F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8	; walking
0000AEE3 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000AEE8 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000AEED 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000AEF2 04                         @slope1:	dc.b 4
0000AEF3 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8	; walking on slope
0000AEF8 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000AEFD FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000AF02 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000AF07 04                         @slope2:	dc.b 4
0000AF08 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8	; walking on slope
0000AF0D EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000AF12 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000AF17 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000AF1C 06                         @firing:	dc.b 6
0000AF1D F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0 ; firing projectiles
0000AF22 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000AF27 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000AF2C F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000AF31 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000AF36 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000AF3B 01                         @ball1:		dc.b 1
0000AF3C F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8 ; projectile
0000AF41 01                         @ball2:		dc.b 1
0000AF42 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8 ; projectile
0000AF48 00                         		even
0000AF48 00                         		even
0000AF48                            		include	"_incObj\06 Mozzietron.asm"
0000AF48                            ; ===========================================================================
0000AF48                            ; ---------------------------------------------------------------------------
0000AF48                            ; Object 06 - Mozzietron enemy	(GHZ)
0000AF48                            ; ---------------------------------------------------------------------------
0000AF48                            
0000AF48                            Mozzietron:					; XREF: Obj_Index
0000AF48 7000                       		moveq	#0,d0
0000AF4A 1028 0024                  		move.b	$24(a0),d0
0000AF4E 323B 0000                  		move.w	MozIndex(pc,d0.w),d1
0000AF52 4EFB 1000                  		jmp	MozIndex(pc,d1.w)
0000AF56                            ; ===========================================================================
0000AF56 0000                       MozIndex:	dc.w MozMain-MozIndex
0000AF58 0000                       		dc.w MozAction-MozIndex
0000AF5A 0000                       		dc.w MozDelete-MozIndex
0000AF5C                            ; ===========================================================================
0000AF5C                            
0000AF5C                            MozMain:				; XREF: MozIndex
0000AF5C 5428 0024                  		addq.b	#2,$24(a0)
0000AF60 217C 0000 0000 0004        		move.l	#Map_Mozzietron,4(a0)
0000AF68 317C 0444 0002             		move.w	#$444,2(a0)
0000AF6E 117C 0004 0001             		move.b	#4,1(a0)
0000AF74 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AF7A 117C 0005 0020             		move.b	#5,$20(a0) ; hit box
0000AF80 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000AF86                            MozAction:				; XREF: MozIndex
0000AF86 7000                       		moveq	#0,d0
0000AF88 1028 0025                  		move.b	$25(a0),d0
0000AF8C 323B 0000                  		move.w	MozIndex2(pc,d0.w),d1
0000AF90 4EBB 1000                  		jsr	MozIndex2(pc,d1.w)
0000AF94 43F9 0000 0000             		lea	(Ani_Mozzietron).l,a1
0000AF9A 6100 0000                  		bsr.w	AnimateSprite
0000AF9E 6000 0000                  		bra.w	RememberState
0000AFA2                            ; ===========================================================================
0000AFA2 0000                       MozIndex2:	dc.w MozMove-MozIndex2
0000AFA4 0000                       		dc.w MozChkNrSonic-MozIndex2
0000AFA6 0000                       		dc.w MozPinned-MozIndex2
0000AFA8                            ; ===========================================================================
0000AFA8                            
0000AFA8                            MozMove:				; XREF: MozIndex2
0000AFA8 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000AFAC 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000AFAE 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000AFB4 6600                       		bne.s	MozFire	; if yes, branch
0000AFB6 5428 0025                  		addq.b	#2,$25(a0)
0000AFBA 317C 0064 0032             		move.w	#100,$32(a0)	; set time delay to just over 2	seconds
0000AFC0 317C 0100 0010             		move.w	#$100,$10(a0)	; move Buzz Bomber to the right
0000AFC6 117C 0000 001C             		move.b	#0,$1C(a0)	; use "flying" animation
0000AFCC 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000AFD2 6600                       		bne.s	locret_986C	; if not, branch
0000AFD4 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000AFD8                            
0000AFD8                            locret_986C:
0000AFD8 4E75                       		rts	
0000AFDA                            ; ===========================================================================
0000AFDA                            
0000AFDA                            MozFire:				; XREF: MozMove
0000AFDA 117C 0002 001C             		move.b	#2,$1C(a0)	; use "diving" animation
0000AFE0 6100 0000                  		bsr.w	ObjectFall
0000AFE4 4EB9 0000 0000             		jsr     ObjFloorDist ; check distance between object and floor
0000AFEA 4A41                       		tst.w	d1 ; is floor distance positive? 
0000AFEC 6A00                       		bpl.s   @return ; if yes, branch 
0000AFEE 303C 00B6                  		move.w    #$B6,d0
0000AFF2 4EB9 0000 12A0             		jsr    (PlaySound_Special).l ;    play "spikes moving" sound
0000AFF8 117C 0004 0025             		move.b #4,$25(a0) ; set 2nd state to pinned
0000AFFE D368 000C                  		add.w	d1,$C(a0) ; snap to the ground
0000B002 4268 0012                  		clr.w	$12(a0) ; clear Y Velocity 
0000B006 4228 0015                  		clr.b	$15(a0) ; $15(a0) is unused in this object, except this line
0000B00A                            		@return:
0000B00A 4E75                       	    		rts
0000B00C                            		
0000B00C                            
0000B00C                            ; ===========================================================================
0000B00C                            
0000B00C                            MozPinned:
0000B00C 4E75                               rts
0000B00E                                    
0000B00E                            ; ===========================================================================
0000B00E                            
0000B00E                            MozChkDel:				; XREF: Obj55_DropFly
0000B00E 4A28 0001                  		tst.b	1(a0)
0000B012 6A00 0000                  		bpl.w	DeleteObject
0000B016 4E75                       		rts	
0000B018                            ; ===========================================================================
0000B018                            
0000B018                            MozChkNrSonic:			; XREF: MozIndex2
0000B018                            ;		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B018 6B00                       		bmi.s	MozChgDir
0000B01A 6100 0000                  		bsr.w	SpeedToPos
0000B01E 4A28 0034                  		tst.b	$34(a0)
0000B022 6600                       		bne.s	locret_992A
0000B024 3038 D008                  		move.w	($FFFFD008).w,d0
0000B028 9068 0008                  		sub.w	8(a0),d0
0000B02C 6A00                       		bpl.s	MozSetNrSonic
0000B02E 4440                       		neg.w	d0
0000B030                            
0000B030                            MozSetNrSonic:
0000B030 0C40 0005                  		cmpi.w	#$05,d0		; is Buzz Bomber within	$05 pixels of Sonic?
0000B034 6400                       		bcc.s	locret_992A	; if not, branch
0000B036 4A28 0001                  		tst.b	1(a0)
0000B03A 6A00                       		bpl.s	locret_992A
0000B03C 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000B042 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000B048 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000B04E 6000                       		bra.s	MozStop
0000B050                            ; ===========================================================================
0000B050                            
0000B050                            MozChgDir:				; XREF: MozChkNrSonic
0000B050 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000B056 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000B05C 317C 003B 0032             		move.w	#59,$32(a0)
0000B062                            
0000B062                            MozStop:				; XREF: MozSetNrSonic
0000B062 5528 0025                  		subq.b	#2,$25(a0)	; run "MozFire" routine
0000B066 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000B06C 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000B072                            
0000B072                            locret_992A:
0000B072 4E75                       		rts	
0000B074                            ; ===========================================================================
0000B074                            
0000B074                            MozDelete:				; XREF: MozIndex
0000B074 6100 0000                  		bsr.w	DeleteObject
0000B078 4E75                       		rts	
0000B078 4E75                       		rts	
0000B07A                            		include	"_incObj\22 Buzz Bomber.asm"
0000B07A                            ; ===========================================================================
0000B07A                            ; ---------------------------------------------------------------------------
0000B07A                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000B07A                            ; ---------------------------------------------------------------------------
0000B07A                            
0000B07A                            BuzzBomber:
0000B07A 7000                       		moveq	#0,d0
0000B07C 1028 0024                  		move.b	obRoutine(a0),d0
0000B080 323B 0000                  		move.w	Buzz_Index(pc,d0.w),d1
0000B084 4EFB 1000                  		jmp	Buzz_Index(pc,d1.w)
0000B088                            ; ===========================================================================
0000B088 0000                       Buzz_Index:	dc.w Buzz_Main-Buzz_Index
0000B08A 0000                       		dc.w Buzz_Action-Buzz_Index
0000B08C 0000                       		dc.w Buzz_Delete-Buzz_Index
0000B08E                            
0000B08E =00000032                  buzz_timedelay:	equ $32
0000B08E =00000034                  buzz_buzzstatus:	equ $34
0000B08E =0000003C                  buzz_parent:	equ $3C
0000B08E                            ; ===========================================================================
0000B08E                            
0000B08E                            Buzz_Main:	; Routine 0
0000B08E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B092 217C 0000 0000 0004        		move.l	#Map_Buzz,obMap(a0)
0000B09A 317C 0444 0002             		move.w	#$444,obGfx(a0)
0000B0A0 117C 0004 0001             		move.b	#4,obRender(a0)
0000B0A6 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B0AC 117C 0008 0020             		move.b	#8,obColType(a0)
0000B0B2 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B0B8                            
0000B0B8                            Buzz_Action:	; Routine 2
0000B0B8 7000                       		moveq	#0,d0
0000B0BA 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B0BE 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B0C2 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B0C6 43F9 0000 0000             		lea	(Ani_Buzz).l,a1
0000B0CC 6100 0000                  		bsr.w	AnimateSprite
0000B0D0 6000 0000                  		bra.w	RememberState
0000B0D4                            ; ===========================================================================
0000B0D4 0000                       @index:		dc.w @move-@index
0000B0D6 0000                       		dc.w @chknearsonic-@index
0000B0D8                            ; ===========================================================================
0000B0D8                            
0000B0D8                            @move:
0000B0D8 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B0DC 6A00                       		bpl.s	@noflip		; if time remains, branch
0000B0DE 0828 0001 0034             		btst	#1,buzz_buzzstatus(a0) ; is Buzz Bomber near Sonic?
0000B0E4 6600                       		bne.s	@fire		; if yes, branch
0000B0E6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B0EA 317C 007F 0032             		move.w	#127,buzz_timedelay(a0) ; set time delay to just over 2 seconds
0000B0F0 317C 0400 0010             		move.w	#$400,obVelX(a0) ; move Buzz Bomber to the right
0000B0F6 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "flying" animation
0000B0FC 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B102 6600                       		bne.s	@noflip		; if not, branch
0000B104 4468 0010                  		neg.w	obVelX(a0)	; move Buzz Bomber to the left
0000B108                            
0000B108                            	@noflip:
0000B108 4E75                       		rts	
0000B10A                            ; ===========================================================================
0000B10A                            
0000B10A                            	@fire:
0000B10A 6100 0000                  		bsr.w	FindFreeObj
0000B10E 6600                       		bne.s	@fail
0000B110 12BC 0000                  		move.b	#id_Missile,0(a1) ; load missile object
0000B114 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B11A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B120 0669 001C 000C             		addi.w	#$1C,obY(a1)
0000B126 337C 0200 0012             		move.w	#$200,obVelY(a1) ; move missile downwards
0000B12C 337C 0200 0010             		move.w	#$200,obVelX(a1) ; move missile to the right
0000B132 303C 0018                  		move.w	#$18,d0
0000B136 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B13C 6600                       		bne.s	@noflip2	; if not, branch
0000B13E 4440                       		neg.w	d0
0000B140 4469 0010                  		neg.w	obVelX(a1)	; move missile to the left
0000B144                            
0000B144                            	@noflip2:
0000B144 D169 0008                  		add.w	d0,obX(a1)
0000B148 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000B14E 337C 000E 0032             		move.w	#$E,buzz_timedelay(a1)
0000B154 2348 003C                  		move.l	a0,buzz_parent(a1)
0000B158 117C 0001 0034             		move.b	#1,buzz_buzzstatus(a0) ; set to "already fired" to prevent refiring
0000B15E 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B164 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "firing" animation
0000B16A                            
0000B16A                            	@fail:
0000B16A 4E75                       		rts	
0000B16C                            ; ===========================================================================
0000B16C                            
0000B16C                            @chknearsonic:
0000B16C 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B170 6B00                       		bmi.s	@chgdirection
0000B172 6100 0000                  		bsr.w	SpeedToPos
0000B176 4A28 0034                  		tst.b	buzz_buzzstatus(a0)
0000B17A 6600                       		bne.s	@keepgoing
0000B17C 3038 D008                  		move.w	(v_player+obX).w,d0
0000B180 9068 0008                  		sub.w	obX(a0),d0
0000B184 6A00                       		bpl.s	@isleft
0000B186 4440                       		neg.w	d0
0000B188                            
0000B188                            	@isleft:
0000B188 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000B18C 6400                       		bcc.s	@keepgoing	; if not, branch
0000B18E 4A28 0001                  		tst.b	obRender(a0)
0000B192 6A00                       		bpl.s	@keepgoing
0000B194 117C 0002 0034             		move.b	#2,buzz_buzzstatus(a0) ; set Buzz Bomber to "near Sonic"
0000B19A 317C 001D 0032             		move.w	#29,buzz_timedelay(a0) ; set time delay to half a second
0000B1A0 6000                       		bra.s	@stop
0000B1A2                            ; ===========================================================================
0000B1A2                            
0000B1A2                            	@chgdirection:
0000B1A2 117C 0000 0034             		move.b	#0,buzz_buzzstatus(a0) ; set Buzz Bomber to "normal"
0000B1A8 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction
0000B1AE 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B1B4                            
0000B1B4                            	@stop:
0000B1B4 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B1B8 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Buzz Bomber moving
0000B1BE 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "hovering" animation
0000B1C4                            
0000B1C4                            @keepgoing:
0000B1C4 4E75                       		rts	
0000B1C6                            ; ===========================================================================
0000B1C6                            
0000B1C6                            Buzz_Delete:	; Routine 4
0000B1C6 6100 0000                  		bsr.w	DeleteObject
0000B1CA 4E75                       		rts	
0000B1CA 4E75                       		rts	
0000B1CC                            		include	"_incObj\23 Buzz Bomber Missile.asm"
0000B1CC                            ; ---------------------------------------------------------------------------
0000B1CC                            ; Object 23 - missile that Buzz	Bomber throws
0000B1CC                            ; ---------------------------------------------------------------------------
0000B1CC                            
0000B1CC                            Missile:
0000B1CC 7000                       		moveq	#0,d0
0000B1CE 1028 0024                  		move.b	obRoutine(a0),d0
0000B1D2 323B 0000                  		move.w	Msl_Index(pc,d0.w),d1
0000B1D6 4EFB 1000                  		jmp	Msl_Index(pc,d1.w)
0000B1DA                            ; ===========================================================================
0000B1DA 0000                       Msl_Index:	dc.w Msl_Main-Msl_Index
0000B1DC 0000                       		dc.w Msl_Animate-Msl_Index
0000B1DE 0000                       		dc.w Msl_FromBuzz-Msl_Index
0000B1E0 0000                       		dc.w Msl_Delete-Msl_Index
0000B1E2 0000                       		dc.w Msl_FromNewt-Msl_Index
0000B1E4                            
0000B1E4 =0000003C                  msl_parent:	equ $3C
0000B1E4                            ; ===========================================================================
0000B1E4                            
0000B1E4                            Msl_Main:	; Routine 0
0000B1E4 5368 0032                  		subq.w	#1,$32(a0)
0000B1E8 6A00                       		bpl.s	Msl_ChkCancel
0000B1EA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B1EE 217C 0000 0000 0004        		move.l	#Map_Missile,obMap(a0)
0000B1F6 317C 2444 0002             		move.w	#$2444,obGfx(a0)
0000B1FC 117C 0004 0001             		move.b	#4,obRender(a0)
0000B202 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B208 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B20E 0228 0003 0022             		andi.b	#3,obStatus(a0)
0000B214 4A28 0028                  		tst.b	obSubtype(a0)	; was object created by	a Newtron?
0000B218 6700                       		beq.s	Msl_Animate	; if not, branch
0000B21A                            
0000B21A 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Msl_FromNewt" routine
0000B220 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B226 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B22C 6000                       		bra.s	Msl_Animate2
0000B22E                            ; ===========================================================================
0000B22E                            
0000B22E                            Msl_Animate:	; Routine 2
0000B22E 6100                       		bsr.s	Msl_ChkCancel
0000B230 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B236 6100 0000                  		bsr.w	AnimateSprite
0000B23A 6000 0000                  		bra.w	DisplaySprite
0000B23E                            
0000B23E                            ; ---------------------------------------------------------------------------
0000B23E                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000B23E                            ; destroyed, and if it has, then cancel	the missile
0000B23E                            ; ---------------------------------------------------------------------------
0000B23E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B23E                            
0000B23E                            
0000B23E                            Msl_ChkCancel:
0000B23E 2268 003C                  		movea.l	msl_parent(a0),a1
0000B242 0C11 0000                  		cmpi.b	#id_ExplosionItem,0(a1) ; has Buzz Bomber been destroyed?
0000B246 6700                       		beq.s	Msl_Delete	; if yes, branch
0000B248 4E75                       		rts	
0000B24A                            ; End of function Msl_ChkCancel
0000B24A                            
0000B24A                            ; ===========================================================================
0000B24A                            
0000B24A                            Msl_FromBuzz:	; Routine 4
0000B24A 0828 0007 0022             		btst	#7,obStatus(a0)
0000B250 6600                       		bne.s	@explode
0000B252 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B258 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B25E 6100 0000                  		bsr.w	SpeedToPos
0000B262 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B268 6100 0000                  		bsr.w	AnimateSprite
0000B26C 6100 0000                  		bsr.w	DisplaySprite
0000B270 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B274 0640 00E0                  		addi.w	#$E0,d0
0000B278 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B27C 6500                       		bcs.s	Msl_Delete	; if yes, branch
0000B27E 4E75                       		rts	
0000B280                            ; ===========================================================================
0000B280                            
0000B280                            	@explode:
0000B280 10BC 0000                  		move.b	#id_MissileDissolve,0(a0) ; change object to an explosion (Obj24)
0000B284 117C 0000 0024             		move.b	#0,obRoutine(a0)
0000B28A 6000 F1D8                  		bra.w	MissileDissolve
0000B28E                            ; ===========================================================================
0000B28E                            
0000B28E                            Msl_Delete:	; Routine 6
0000B28E 6100 0000                  		bsr.w	DeleteObject
0000B292 4E75                       		rts	
0000B294                            ; ===========================================================================
0000B294                            
0000B294                            Msl_FromNewt:	; Routine 8
0000B294 4A28 0001                  		tst.b	obRender(a0)
0000B298 6AF4                       		bpl.s	Msl_Delete
0000B29A 6100 0000                  		bsr.w	SpeedToPos
0000B29E                            
0000B29E                            Msl_Animate2:
0000B29E 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B2A4 6100 0000                  		bsr.w	AnimateSprite
0000B2A8 6100 0000                  		bsr.w	DisplaySprite
0000B2AC 4E75                       		rts	
0000B2AC 4E75                       		rts	
0000B2AE                            		include	"_anim\Mozzietron.asm"
0000B2AE                            ; ---------------------------------------------------------------------------
0000B2AE                            ; Animation script - Buzz Bomber enemy
0000B2AE                            ; ---------------------------------------------------------------------------
0000B2AE 0000                       Ani_Mozzietron:	dc.w byte_9A1E-Ani_Mozzietron;0
0000B2B0 0000                       		dc.w byte_9A22-Ani_Mozzietron;1
0000B2B2 0000                       		dc.w byte_9A26-Ani_Mozzietron;2
0000B2B4 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000B2B8 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000B2BC 0502 0304 05FE 01          byte_9A26:	dc.b 5, 2, 3, 4, 5, $FE, 1
0000B2C4 00                         		even
0000B2C4 00                         		even
0000B2C4                            		include	"_anim\Buzz Bomber.asm"
0000B2C4                            ; ---------------------------------------------------------------------------
0000B2C4                            ; Animation script - Buzz Bomber enemy
0000B2C4                            ; ---------------------------------------------------------------------------
0000B2C4 0000                       Ani_Buzz:	dc.w @fly1-Ani_Buzz
0000B2C6 0000                       		dc.w @fly2-Ani_Buzz
0000B2C8 0000                       		dc.w @fires-Ani_Buzz
0000B2CA 0100 01FF                  @fly1:		dc.b 1,	0, 1, afEnd
0000B2CE 0102 03FF                  @fly2:		dc.b 1,	2, 3, afEnd
0000B2D2 0104 05FF                  @fires:		dc.b 1,	4, 5, afEnd
0000B2D6                            		even
0000B2D6                            		even
0000B2D6                            		include	"_anim\Buzz Bomber Missile.asm"
0000B2D6                            ; ---------------------------------------------------------------------------
0000B2D6                            ; Animation script - missile that Buzz Bomber throws
0000B2D6                            ; ---------------------------------------------------------------------------
0000B2D6 0000                       Ani_Missile:	dc.w @flare-Ani_Missile
0000B2D8 0000                       		dc.w @missile-Ani_Missile
0000B2DA 0700 01FC                  @flare:		dc.b 7,	0, 1, afRoutine
0000B2DE 0102 03FF                  @missile:	dc.b 1,	2, 3, afEnd
0000B2E2                            		even
0000B2E2                            		even
0000B2E2                            Map_Mozzietron:	include	"_maps\Mozzietron.asm"
0000B2E2                            ; --------------------------------------------------------------------------------
0000B2E2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B2E2                            ; --------------------------------------------------------------------------------
0000B2E2                            
0000B2E2                            SME_qvHIs:	
0000B2E2 0000 0000                  		dc.w SME_qvHIs_C-SME_qvHIs, SME_qvHIs_17-SME_qvHIs	
0000B2E6 0000 0000                  		dc.w SME_qvHIs_1D-SME_qvHIs, SME_qvHIs_28-SME_qvHIs	
0000B2EA 0000 0000                  		dc.w SME_qvHIs_38-SME_qvHIs, SME_qvHIs_4D-SME_qvHIs	
0000B2EE 02                         SME_qvHIs_C:	dc.b 2	
0000B2EF FD0C 2000 F0               		dc.b $FD, $C, $20, 0, $F0	
0000B2F4 ED09 2004 F8               		dc.b $ED, 9, $20, 4, $F8	
0000B2F9 01                         SME_qvHIs_17:	dc.b 1	
0000B2FA F80D 200A F0               		dc.b $F8, $D, $20, $A, $F0	
0000B2FF 02                         SME_qvHIs_1D:	dc.b 2	
0000B300 E90A 2012 F8               		dc.b $E9, $A, $20, $12, $F8	
0000B305 F901 201B F0               		dc.b $F9, 1, $20, $1B, $F0	
0000B30A 03                         SME_qvHIs_28:	dc.b 3	
0000B30B DF07 2025 FB               		dc.b $DF, 7, $20, $25, $FB	
0000B310 E700 2030 0B               		dc.b $E7, 0, $20, $30, $B	
0000B315 FF00 002D FB               		dc.b $FF, 0, 0, $2D, $FB	
0000B31A 04                         SME_qvHIs_38:	dc.b 4	
0000B31B E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B320 F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B325 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B32A F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B32F 04                         SME_qvHIs_4D:	dc.b 4	
0000B330 E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B335 F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B33A F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B33F F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B344                            		even
0000B344                            		even
0000B344                            Map_Buzz:	include	"_maps\Buzz Bomber.asm"
0000B344                            ; --------------------------------------------------------------------------------
0000B344                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B344                            ; --------------------------------------------------------------------------------
0000B344                            
0000B344                            SME_yccqJ:	
0000B344 0000 0000                  		dc.w SME_yccqJ_C-SME_yccqJ, SME_yccqJ_2B-SME_yccqJ	
0000B348 0000 0000                  		dc.w SME_yccqJ_4A-SME_yccqJ, SME_yccqJ_69-SME_yccqJ	
0000B34C 0000 0000                  		dc.w SME_yccqJ_88-SME_yccqJ, SME_yccqJ_AC-SME_yccqJ	
0000B350 06                         SME_yccqJ_C:	dc.b 6	
0000B351 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B356 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B35B 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B360 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B365 EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B36A EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B36F 06                         SME_yccqJ_2B:	dc.b 6	
0000B370 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B375 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B37A 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B37F 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B384 F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B389 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B38E 06                         SME_yccqJ_4A:	dc.b 6	
0000B38F F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B394 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B399 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B39E 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B3A3 EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B3A8 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B3AD 06                         SME_yccqJ_69:	dc.b 6	
0000B3AE F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B3B3 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B3B8 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B3BD 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B3C2 F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B3C7 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B3CC 07                         SME_yccqJ_88:	dc.b 7	
0000B3CD F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B3D2 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B3D7 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B3DC EE04 201D 04               		dc.b $EE, 4, $20, $1D, 4	
0000B3E1 0C00 200E FC               		dc.b $C, 0, $20, $E, $FC	
0000B3E6 0C00 200D F4               		dc.b $C, 0, $20, $D, $F4	
0000B3EB EE08 201A EC               		dc.b $EE, 8, $20, $1A, $EC	
0000B3F0 04                         SME_yccqJ_AC:	dc.b 4	
0000B3F1 F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B3F6 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B3FB 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B400 0C04 200D F4               		dc.b $C, 4, $20, $D, $F4	
0000B406 00                         		even
0000B406 00                         		even
0000B406                            Map_Missile:	include	"_maps\Buzz Bomber Missile.asm"
0000B406                            ; ---------------------------------------------------------------------------
0000B406                            ; Sprite mappings - missile that Buzz Bomber throws
0000B406                            ; ---------------------------------------------------------------------------
0000B406                            Map_Missile_internal:
0000B406 0000                       		dc.w @Flare1-Map_Missile_internal
0000B408 0000                       		dc.w @Flare2-Map_Missile_internal
0000B40A 0000                       		dc.w @Ball1-Map_Missile_internal
0000B40C 0000                       		dc.w @Ball2-Map_Missile_internal
0000B40E 01                         @Flare1:	dc.b 1
0000B40F F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8 ; buzz bomber firing flare
0000B414 01                         @Flare2:	dc.b 1
0000B415 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B41A 01                         @Ball1:		dc.b 1
0000B41B F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8 ; missile itself
0000B420 01                         @Ball2:		dc.b 1
0000B421 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B426                            		even
0000B426                            		even
0000B426                            
0000B426                            		include	"_incObj\25 & 37 Rings.asm"
0000B426                            ; ---------------------------------------------------------------------------
0000B426                            ; Object 25 - rings
0000B426                            ; ---------------------------------------------------------------------------
0000B426                            
0000B426                            Rings:
0000B426 7000                       		moveq	#0,d0
0000B428 1028 0024                  		move.b	obRoutine(a0),d0
0000B42C 323B 0000                  		move.w	Ring_Index(pc,d0.w),d1
0000B430 4EFB 1000                  		jmp	Ring_Index(pc,d1.w)
0000B434                            ; ===========================================================================
0000B434                            Ring_Index:
0000B434 0000                       ptr_Ring_Main:		dc.w Ring_Main-Ring_Index
0000B436 0000                       ptr_Ring_Animate:	dc.w Ring_Animate-Ring_Index
0000B438 0000                       ptr_Ring_Collect:	dc.w Ring_Collect-Ring_Index
0000B43A 0000                       ptr_Ring_Sparkle:	dc.w Ring_Sparkle-Ring_Index
0000B43C 0000                       ptr_Ring_Delete:	dc.w Ring_Delete-Ring_Index
0000B43E 0000                       ptr_Ring_Attract:	dc.w Ring_Attract-Ring_Index
0000B440 0000                       ptr_Ring_Collect1:	dc.w Ring_Collect-Ring_Index
0000B442 0000                       ptr_Ring_Sparkle1:	dc.w Ring_Sparkle-Ring_Index
0000B444 0000                       ptr_Ring_Delete1:	dc.w Ring_Delete-Ring_Index
0000B446                            
0000B446 =00000000                  id_Ring_Main:			equ ptr_Ring_Main-Ring_Index	; 0
0000B446 =00000002                  id_Ring_Animate:		equ ptr_Ring_Animate-Ring_Index	; 2
0000B446 =00000004                  id_Ring_Collect:		equ ptr_Ring_Collect-Ring_Index	; 4
0000B446 =00000006                  id_Ring_Sparkle:		equ ptr_Ring_Sparkle-Ring_Index	; 6
0000B446 =00000008                  id_Ring_Delete:			equ ptr_Ring_Delete-Ring_Index	; 8
0000B446 =0000000A                  id_Ring_Attract:		equ ptr_Ring_Attract-Ring_Index	; $A
0000B446 =00000004                  id_Ring_Collect1:		equ ptr_Ring_Collect-Ring_Index	; $C
0000B446 =00000006                  id_Ring_Sparkle1:		equ ptr_Ring_Sparkle-Ring_Index	; $E
0000B446 =00000008                  id_Ring_Delete1:		equ ptr_Ring_Delete-Ring_Index	; $10
0000B446                            ; ---------------------------------------------------------------------------
0000B446                            ; Distances between rings (format: horizontal, vertical)
0000B446                            ; ---------------------------------------------------------------------------
0000B446 1000                       Ring_PosData:	dc.b $10, 0		; horizontal tight
0000B448 1800                       		dc.b $18, 0		; horizontal normal
0000B44A 2000                       		dc.b $20, 0		; horizontal wide
0000B44C 0010                       		dc.b 0,	$10		; vertical tight
0000B44E 0018                       		dc.b 0,	$18		; vertical normal
0000B450 0020                       		dc.b 0,	$20		; vertical wide
0000B452 1010                       		dc.b $10, $10		; diagonal
0000B454 1818                       		dc.b $18, $18
0000B456 2020                       		dc.b $20, $20
0000B458 F010                       		dc.b $F0, $10
0000B45A E818                       		dc.b $E8, $18
0000B45C E020                       		dc.b $E0, $20
0000B45E 1008                       		dc.b $10, 8
0000B460 1810                       		dc.b $18, $10
0000B462 F008                       		dc.b $F0, 8
0000B464 E810                       		dc.b $E8, $10
0000B466                            ; ===========================================================================
0000B466                            
0000B466                            Ring_Main:	; Routine 0
0000B466 45F8 FC00                  		lea	(v_objstate).w,a2
0000B46A 7000                       		moveq	#0,d0
0000B46C 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B470 45F2 0002                  		lea	2(a2,d0.w),a2
0000B474 1812                       		move.b	(a2),d4
0000B476 1228 0028                  		move.b	obSubtype(a0),d1
0000B47A 1001                       		move.b	d1,d0
0000B47C 0241 0007                  		andi.w	#7,d1
0000B480 0C41 0007                  		cmpi.w	#7,d1
0000B484 6600                       		bne.s	loc_9B80
0000B486 7206                       		moveq	#6,d1
0000B488                            
0000B488                            	loc_9B80:
0000B488 4841                       		swap	d1
0000B48A 323C 0000                  		move.w	#0,d1
0000B48E E808                       		lsr.b	#4,d0
0000B490 D040                       		add.w	d0,d0
0000B492 1A3B 00B2                  		move.b	Ring_PosData(pc,d0.w),d5 ; load ring spacing data
0000B496 4885                       		ext.w	d5
0000B498 1C3B 00AD                  		move.b	Ring_PosData+1(pc,d0.w),d6
0000B49C 4886                       		ext.w	d6
0000B49E 2248                       		movea.l	a0,a1
0000B4A0 3428 0008                  		move.w	obX(a0),d2
0000B4A4 3628 000C                  		move.w	obY(a0),d3
0000B4A8 E20C                       		lsr.b	#1,d4
0000B4AA 6500                       		bcs.s	loc_9C02
0000B4AC 0892 0007                  		bclr	#7,(a2)
0000B4B0 6000                       		bra.s	loc_9BBA
0000B4B2                            ; ===========================================================================
0000B4B2                            
0000B4B2                            Ring_MakeRings:
0000B4B2 4841                       		swap	d1
0000B4B4 E20C                       		lsr.b	#1,d4
0000B4B6 6500                       		bcs.s	loc_9C02
0000B4B8 0892 0007                  		bclr	#7,(a2)
0000B4BC 6100 0000                  		bsr.w	FindFreeObj
0000B4C0 6600                       		bne.s	loc_9C0E
0000B4C2                            
0000B4C2                            loc_9BBA:
0000B4C2 12BC 0000                  		move.b	#id_Rings,0(a1)	; load ring object
0000B4C6 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B4CA 3342 0008                  		move.w	d2,obX(a1)	; set x-axis position based on d2
0000B4CE 3368 0008 0032             		move.w	obX(a0),$32(a1)
0000B4D4 3343 000C                  		move.w	d3,obY(a1)	; set y-axis position based on d3
0000B4D8 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B4E0 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B4E6 137C 0004 0001             		move.b	#4,obRender(a1)
0000B4EC 337C 0100 0018             		move.w	#$100,obPriority(a1)
0000B4F2 137C 0047 0020             		move.b	#$47,obColType(a1)
0000B4F8 137C 0008 0014             		move.b	#8,obActWid(a1)
0000B4FE 1368 0023 0023             		move.b	obRespawnNo(a0),obRespawnNo(a1)
0000B504 1341 0034                  		move.b	d1,$34(a1)
0000B508                            
0000B508                            loc_9C02:
0000B508 5241                       		addq.w	#1,d1
0000B50A D445                       		add.w	d5,d2		; add ring spacing value to d2
0000B50C D646                       		add.w	d6,d3		; add ring spacing value to d3
0000B50E 4841                       		swap	d1
0000B510 51C9 FFA0                  		dbf	d1,Ring_MakeRings ; repeat for	number of rings
0000B514                            
0000B514                            loc_9C0E:
0000B514 0812 0000                  		btst	#0,(a2)
0000B518 6600 0000                  		bne.w	DeleteObject
0000B51C                            
0000B51C                            Ring_Animate:	; Routine 2
0000B51C 4A38 FE2C                  		tst.b	(v_shield).w
0000B520 6700                       		beq.s	@skip
0000B522 4A28 0001                  		tst.b	obRender(a0)
0000B526 6A00                       		bpl.s	@skip
0000B528                            		
0000B528 43F8 D000                  		lea (v_player).w,a1
0000B52C                            		
0000B52C 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000B530 9068 0008                  		sub.w	obX(a0),d0
0000B534 6A00                       		bpl.s	@a1
0000B536 4440                       		neg.w	d0
0000B538                            		
0000B538                            	@a1:
0000B538 0C40 0040                  		cmpi.w	#$40,d0
0000B53C 6200                       		bhi.s	@skip
0000B53E                            		
0000B53E 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000B542 9068 000C                  		sub.w	obY(a0),d0
0000B546 6A00                       		bpl.s	@a2
0000B548 4440                       		neg.w	d0
0000B54A                            		
0000B54A                            	@a2:
0000B54A 0C40 0040                  		cmpi.w	#$40,d0
0000B54E 6200                       		bhi.s	@skip
0000B550                            		
0000B550 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000B556 45F8 FC00                  		lea	(v_objstate).w,a2
0000B55A 7000                       		moveq	#0,d0
0000B55C 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B560 1228 0034                  		move.b	$34(a0),d1
0000B564 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B568                            		
0000B568                            	@skip:
0000B568 1178 FEC5 001A             		move.b	(v_ani2_frame).w,obFrame(a0) ; set frame
0000B56E 6100 0000                  		bsr.w	DisplaySprite
0000B58E 4E75                       		rts	
0000B590                            ; ===========================================================================
0000B590                            
0000B590                            Ring_Collect:	; Routine 4
0000B590 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B594 117C 0000 0020             		move.b	#0,obColType(a0)
0000B59A 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000B5A0 6100 0000                  		bsr.w	CollectRing
0000B5A4 45F8 FC00                  		lea	(v_objstate).w,a2
0000B5A8 7000                       		moveq	#0,d0
0000B5AA 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B5AE 1228 0034                  		move.b	$34(a0),d1
0000B5B2 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B5B6                            
0000B5B6                            Ring_Sparkle:	; Routine 6
0000B5B6 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000B5BC 6100 0000                  		bsr.w	AnimateSprite
0000B5C0 6000 0000                  		bra.w	DisplaySprite
0000B5C4                            ; ===========================================================================
0000B5C4                            
0000B5C4                            Ring_Delete:	; Routine 8
0000B5C4 6000 0000                  		bra.w	DeleteObject
0000B5C8                            
0000B5C8                            Ring_Attract:	; Routine $A
0000B5C8 4A38 FE2C                  		tst.b	(v_shield).w
0000B5CC 6600                       		bne.s	@skip
0000B5CE 10BC 0000                  		move.b	#id_RingLoss,0(a0)
0000B5D2 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000B5D8 11FC 00FF FEC6             		move.b	#-1,(v_ani3_time).w
0000B5DE 6000                       		bra.s	@display
0000B5E0                            		
0000B5E0                            	@skip:
0000B5E0 323C 0030                  		move.w	#$30,d1	; horizontal
0000B5E4 3038 D008                  		move.w	(v_player+obX).w,d0
0000B5E8 B068 0008                  		cmp.w	obX(a0),d0
0000B5EC 6400                       		bcc.s	@a1
0000B5EE 4441                       		neg.w	d1
0000B5F0 4A68 0010                  		tst.w	obVelX(a0)
0000B5F4 6B00                       		bmi.s	@a2
0000B5F6 D241                       		add.w	d1,d1
0000B5F8 D241                       		add.w	d1,d1
0000B5FA 6000                       		bra.s	@a2
0000B5FC                            
0000B5FC                            	@a1:
0000B5FC 4A68 0010                  		tst.w	obVelX(a0)
0000B600 6A00                       		bpl.s	@a2
0000B602 D241                       		add.w	d1,d1
0000B604 D241                       		add.w	d1,d1
0000B606                            
0000B606                            	@a2:
0000B606 D368 0010                  		add.w	d1,obVelX(a0)
0000B60A 323C 0030                  		move.w	#$30,d1	; vertical
0000B60E 3038 D00C                  		move.w	(v_player+obY).w,d0
0000B612 B068 000C                  		cmp.w	obY(a0),d0
0000B616 6400                       		bcc.s	@a3
0000B618 4441                       		neg.w	d1
0000B61A 4A68 0012                  		tst.w	obVelY(a0)
0000B61E 6B00                       		bmi.s	@a4
0000B620 D241                       		add.w	d1,d1
0000B622 D241                       		add.w	d1,d1
0000B624 6000                       		bra.s	@a4
0000B626                            
0000B626                            	@a3:
0000B626 4A68 0012                  		tst.w	obVelY(a0)
0000B62A 6A00                       		bpl.s	@a4
0000B62C D241                       		add.w	d1,d1
0000B62E D241                       		add.w	d1,d1
0000B630                            
0000B630                            	@a4:
0000B630 D368 0012                  		add.w	d1,obVelY(a0)
0000B634 6100 0000                  		bsr.w	SpeedToPos
0000B638                            		
0000B638                            	@display:
0000B638 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0) ; set frame
0000B63E 6000 0000                  		bra.w	DisplaySprite
0000B642                            
0000B642                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B642                            
0000B642                            
0000B642                            CollectRing:
0000B642 5278 FE20                  		addq.w	#1,(v_rings).w	; add 1 to rings
0000B646 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the rings counter
0000B64C 303C 0000                  		move.w	#sfx_Ring,d0	; play ring sound
0000B650 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; do you have < 100 rings?
0000B656 6500                       		bcs.s	@playsnd	; if yes, branch
0000B658 08F8 0001 FE1B             		bset	#1,(v_lifecount).w ; update lives counter
0000B65E 6700                       		beq.s	@got100
0000B660 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; do you have < 200 rings?
0000B666 6500                       		bcs.s	@playsnd	; if yes, branch
0000B668 08F8 0002 FE1B             		bset	#2,(v_lifecount).w ; update lives counter
0000B66E 6600                       		bne.s	@playsnd
0000B670                            
0000B670                            	@got100:
0000B670 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000B674 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000B678 303C 0000                  		move.w	#bgm_ExtraLife,d0 ; play extra life music
0000B67C                            		
0000B67C                            
0000B67C                            	@playsnd:
0000B67C 4EF9 0000 12A0             		jmp	(PlaySound_Special).l
0000B682                            ; End of function CollectRing
0000B682                            
0000B682                            ; ===========================================================================
0000B682                            ; ---------------------------------------------------------------------------
0000B682                            ; Object 37 - rings flying out of Sonic	when he's hit
0000B682                            ; ---------------------------------------------------------------------------
0000B682                            
0000B682                            RingLoss:
0000B682 7000                       		moveq	#0,d0
0000B684 1028 0024                  		move.b	obRoutine(a0),d0
0000B688 323B 0000                  		move.w	RLoss_Index(pc,d0.w),d1
0000B68C 4EFB 1000                  		jmp	RLoss_Index(pc,d1.w)
0000B690                            ; ===========================================================================
0000B690 0000                       RLoss_Index:	dc.w RLoss_Count-RLoss_Index
0000B692 0000                       		dc.w RLoss_Bounce-RLoss_Index
0000B694 0000                       		dc.w RLoss_Collect-RLoss_Index
0000B696 0000                       		dc.w RLoss_Sparkle-RLoss_Index
0000B698 0000                       		dc.w RLoss_Delete-RLoss_Index
0000B69A                            ; ===========================================================================
0000B69A                            
0000B69A                            RLoss_Count:	; Routine 0
0000B69A 2248                       		movea.l	a0,a1
0000B69C 7A00                       		moveq	#0,d5
0000B69E 3A38 FE20                  		move.w	(v_rings).w,d5	; check number of rings you have
0000B6A2 47F9 0000 0000                     lea     SpillRingData,a3        ; load the address of the array in a3
0000B6A8 7018                               moveq   #24,d0                  ; lose a max of 24 rings
0000B6AA 45F8 D000                          lea     (v_player).w,a2    ; a2=character
0000B6AE 082A 0006 0022                     btst    #6,obStatus(a2)           ; is Sonic underwater?
0000B6B4 6700                               beq.s   @cont                       ; if not, branch
0000B6B6 47F9 0000 0000                     lea    SpillRingData_Water,a3        ; load the UNDERWATER address of the array in a3
0000B6BC 7010                               moveq   #16,d0                   ; lose a max of 16 rings underwater
0000B6BE                            @cont:
0000B6BE BA40                               cmp.w   d0,d5
0000B6C0 6500                               bcs.s   @belowmax
0000B6C2 3A00                               move.w  d0,d5
0000B6C4                            
0000B6C4                            @belowmax:
0000B6C4 5345                               subq.w  #1,d5
0000B6C6 383C 0288                          move.w  #$288,d4
0000B6CA 6000                       		bra.s	@makerings
0000B6CC                            ; ===========================================================================
0000B6CC                            
0000B6CC                            	@loop:
0000B6CC 6100 0000                  		bsr.w	FindFreeObj
0000B6D0 6600 0000                  		bne.w	@resetcounter
0000B6D4                            
0000B6D4                            @makerings:
0000B6D4 12BC 0000                  		move.b	#id_RingLoss,0(a1) ; load bouncing ring object
0000B6D8 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B6DC 137C 0008 0016             		move.b	#8,obHeight(a1)
0000B6E2 137C 0008 0017             		move.b	#8,obWidth(a1)
0000B6E8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B6EE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B6F4 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B6FC 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B702 137C 0004 0001             		move.b	#4,obRender(a1)
0000B708 137C 0047 0020             		move.b	#$47,obColType(a1)
0000B70E 137C 0008 0014             		move.b	#8,obActWid(a1)
0000B714 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000B718 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000B71A 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000B71E BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000B722 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000B724 E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000B726 E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000B728                            @skiphalvingvel:
0000B728 335B 0010                  		move.w  (a3)+,obVelX(a1)         ; move the data contained in the array to the x velocity and increment the address in a3
0000B72C 335B 0012                  		move.w  (a3)+,obVelY(a1)         ; move the data contained in the array to the y velocity and increment the address in a3	
0000B730 51CD FF9A                  		dbf	d5,@loop	; repeat for number of rings (max 31)
0000B734                            
0000B734                            @resetcounter:
0000B734 31FC 0000 FE20             		move.w	#0,(v_rings).w	; reset number of rings to zero
0000B73A 11FC 0080 FE1D             		move.b	#$80,(f_ringcount).w ; update ring counter
0000B740 11FC 0000 FE1B             		move.b	#0,(v_lifecount).w
0000B746 70FF                               moveq   #-1,d0                  ; Move #-1 to d0
0000B748 1140 001F                          move.b  d0,obDelayAni(a0)       ; Move d0 to new timer
0000B74C 11C0 FEC6                          move.b  d0,(v_ani3_time).w      ; Move d0 to old timer (for animated purposes)
0000B75A                            
0000B75A                            RLoss_Bounce:	; Routine 2
0000B75A 1178 FEC7 001A             		move.b	(v_ani3_frame).w,obFrame(a0)
0000B760 6100 0000                  		bsr.w	SpeedToPos
0000B764 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000B76A 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000B76E 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000B770 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000B774 BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000B778 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000B77A 0468 000E 0012             		subi.w	#$E,obVelY(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000B780                            	@skipbounceslow:
0000B780 6B00                       		bmi.s	@chkdel
0000B782 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000B786 D007                       		add.b	d7,d0
0000B788 0200 0003                  		andi.b	#3,d0
0000B78C 6600                       		bne.s	@chkdel
0000B78E 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B794 4A41                       		tst.w	d1
0000B796 6A00                       		bpl.s	@chkdel
0000B798 D368 000C                  		add.w	d1,obY(a0)
0000B79C 3028 0012                  		move.w	obVelY(a0),d0
0000B7A0 E440                       		asr.w	#2,d0
0000B7A2 9168 0012                  		sub.w	d0,obVelY(a0)
0000B7A6 4468 0012                  		neg.w	obVelY(a0)
0000B7AA                            
0000B7AA                            	@chkdel:
0000B7AA 5328 001F                  		subq.b  #1,obDelayAni(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000B7AE 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000B7B2 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B7B6 0640 00E0                  		addi.w	#$E0,d0
0000B7BA B068 000C                  		cmp.w	obY(a0),d0	   ; has object moved below level boundary?
0000B7BE 6500 0000                  		bcs.w	RLoss_Delete	   ; if yes, branch
0000B7C2 4A38 FE2C                  		tst.b	(v_shield).w
0000B7C6 6700                       		beq.s	@skip
0000B7C8 4A28 0001                  		tst.b	obRender(a0)
0000B7CC 6A00                       		bpl.s	@skip
0000B7CE                            		
0000B7CE 43F8 D000                  		lea (v_player).w,a1
0000B7D2                            		
0000B7D2 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000B7D6 9068 0008                  		sub.w	obX(a0),d0
0000B7DA 6A00                       		bpl.s	@a1
0000B7DC 4440                       		neg.w	d0
0000B7DE                            		
0000B7DE                            	@a1:
0000B7DE 0C40 00A0                  		cmpi.w	#$A0,d0
0000B7E2 6200                       		bhi.s	@skip
0000B7E4                            		
0000B7E4 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000B7E8 9068 000C                  		sub.w	obY(a0),d0
0000B7EC 6A00                       		bpl.s	@a2
0000B7EE 4440                       		neg.w	d0
0000B7F0                            		
0000B7F0                            	@a2:
0000B7F0 0C40 00A0                  		cmpi.w	#$A0,d0
0000B7F4 6200                       		bhi.s	@skip
0000B7F6                            		
0000B7F6 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000B7FC 10BC 0000                  		move.b	#id_Rings,0(a0)
0000B800                            		
0000B800                            	@skip:		
0000B800 43F8 AD80                          lea     v_spritequeue+$180,a1
0000B804 D2FC 0080                          adda.w  #$80,a1
0000B808 0C51 007E                          cmpi.w  #$7E,(a1)
0000B80C 6400                               bcc.s   @cont
0000B80E 5451                               addq.w  #2,(a1)
0000B810 D2D1                               adda.w  (a1),a1
0000B812 3288                               move.w  a0,(a1)
0000B814                            		
0000B814                            	@cont:
0000B814 4E75                               rts		
0000B816                            ; ===========================================================================
0000B816                            
0000B816                            RLoss_Collect:	; Routine 4
0000B816 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B81A 117C 0000 0020             		move.b	#0,obColType(a0)
0000B820 6100 FE20                  		bsr.w	CollectRing
0000B824                            
0000B824                            RLoss_Sparkle:	; Routine 6
0000B824 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000B82A 6100 0000                  		bsr.w	AnimateSprite
0000B82E 43F8 AD80                  		lea     v_spritequeue+$180,a1
0000B832 0C51 007E                          cmpi.w  #$7E,(a1)
0000B836 6400                               bcc.s   @cont
0000B838 5451                               addq.w  #2,(a1)
0000B83A D2D1                               adda.w  (a1),a1
0000B83C 3288                               move.w  a0,(a1)
0000B83E                            			
0000B83E                            	@cont:
0000B83E 4E75                               rts
0000B840                            ; ===========================================================================
0000B840                            
0000B840                            RLoss_Delete:	; Routine 8
0000B840 6000 0000                  		bra.w	DeleteObject
0000B844                            
0000B844                            ; ----------------------------------------------------------------------------------------------
0000B844                            ; Ring Spawn Array 
0000B844                            ; ----------------------------------------------------------------------------------------------
0000B844                            
0000B844 FF3C FC14 00C4 FC14 FDC8+  SpillRingData:  dc.w    $FF3C,$FC14, $00C4,$FC14, $FDC8,$FCB0, $0238,$FCB0 ; 4
0000B854 FCB0 FDC8 0350 FDC8 FC14+                  dc.w    $FCB0,$FDC8, $0350,$FDC8, $FC14,$FF3C, $03EC,$FF3C ; 8
0000B864 FC14 00C4 03EC 00C4 FCB0+                  dc.w    $FC14,$00C4, $03EC,$00C4, $FCB0,$0238, $0350,$0238 ; 12
0000B874 FDC8 0350 0238 0350 FF3C+                  dc.w    $FDC8,$0350, $0238,$0350, $FF3C,$03EC, $00C4,$03EC ; 16
0000B884 FF9E FE0A 0062 FE0A FEE4+                  dc.w    $FF9E,$FE0A, $0062,$FE0A, $FEE4,$FE58, $011C,$FE58 ; 20
0000B894 FE58 FEE4 01A8 FEE4 FE0A+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE0A,$FF9E, $01F6,$FF9E ; 24
0000B8A4 FE0A 0062 01F6 0062 FE58+                  dc.w    $FE0A,$0062, $01F6,$0062, $FE58,$011C, $01A8,$011C ; 28
0000B8B4 FEE4 01A8 011C 01A8 FF9E+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9E,$0156, $0062,$0156 ; 32
0000B8C4                                            even
0000B8C4                            ; ===========================================================================
0000B8C4                            ; -------------------------------------------------------------------------------------
0000B8C4                            ; Ring Spawn Array - Underwater - same thing as I said above. Edit at your own risk!!!
0000B8C4                            ; -------------------------------------------------------------------------------------
0000B8C4                            
0000B8C4                            SpillRingData_Water:
0000B8C4 FF9C FE08 0064 FE08 FEE4+  				dc.w    $FF9C,$FE08, $0064,$FE08, $FEE4,$FE58, $011C,$FE58 ; 4
0000B8D4 FE58 FEE4 01A8 FEE4 FE08+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE08,$FF9C, $01F8,$FF9C ; 8
0000B8E4 FE08 0060 01F8 0060 FE58+                  dc.w    $FE08,$0060, $01F8,$0060, $FE58,$011C, $01A8,$011C ; 12
0000B8F4 FEE4 01A8 011C 01A8 FF9C+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9C,$01F4, $0064,$01F4 ; 16
0000B904 FFCE FF04 0032 FF04 FF72+                  dc.w    $FFCE,$FF04, $0032,$FF04, $FF72,$FF2C, $008E,$FF2C ; 20
0000B914 FF2C FF72 00D4 FF72 FF04+                  dc.w    $FF2C,$FF72, $00D4,$FF72, $FF04,$FFCE, $00FC,$FFCE ; 24
0000B924 FF04 0030 00FC 0030 FF2C+                  dc.w    $FF04,$0030, $00FC,$0030, $FF2C,$008E, $00D4,$008E ; 28
0000B934 FF72 00D4 008E 00D4 FFCE+                  dc.w    $FF72,$00D4, $008E,$00D4, $FFCE,$00FA, $0032,$00FA ; 32
0000B944                                            even
0000B944                            ; ===========================================================================				
0000B944                            ; ===========================================================================				
0000B944                            		include	"_incObj\4B Giant Ring.asm"
0000B944                            ; ---------------------------------------------------------------------------
0000B944                            ; Object 4B - giant ring for entry to special stage
0000B944                            ; ---------------------------------------------------------------------------
0000B944                            
0000B944                            GiantRing:
0000B944 7000                       		moveq	#0,d0
0000B946 1028 0024                  		move.b	obRoutine(a0),d0
0000B94A 323B 0000                  		move.w	GRing_Index(pc,d0.w),d1
0000B94E 4EFB 1000                  		jmp	GRing_Index(pc,d1.w)
0000B952                            ; ===========================================================================
0000B952 0000                       GRing_Index:	dc.w GRing_Main-GRing_Index
0000B954 0000                       		dc.w GRing_Animate-GRing_Index
0000B956 0000                       		dc.w GRing_Collect-GRing_Index
0000B958 0000                       		dc.w GRing_Delete-GRing_Index
0000B95A                            ; ===========================================================================
0000B95A                            
0000B95A                            GRing_Main:    ; Routine 0
0000B95A 217C 0000 0000 0004        		move.l	#Map_GRing,obMap(a0)
0000B962 317C 2400 0002             		move.w	#$2400,obGfx(a0)
0000B968 0028 0004 0001             		ori.b	#4,obRender(a0)
0000B96E 117C 0040 0014             		move.b	#$40,obActWid(a0)
0000B974 4A28 0001                  		tst.b	obRender(a0)
0000B978 6A00                       		bpl.s	GRing_Animate
0000B97A 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have 6 emeralds?
0000B980 6700 0000                  		beq.w	GRing_Delete    ; if yes, branch
0000B984 0C38 0002 F5C3             		cmpi.b	#2,(f_emeraldm).w    ;TIS Did you  hit the S-Monitor?
0000B98A 6700                       		beq.s	GRing_Okay    ; if yes, branch
0000B98C                            
0000B98C 4E75                       		rts    
0000B98E                            ; ===========================================================================
0000B98E                            
0000B98E                            GRing_Okay:
0000B98E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B992 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000B998 117C 0052 0020             		move.b	#$52,obColType(a0)
0000B99E 31FC 0C40 F7BE             		move.w	#$C40,(v_gfxbigring).w	; Signal that Art_BigRing should be loaded ($C40 is the size of Art_BigRing)
0000B9A4                            
0000B9A4                            GRing_Animate:	; Routine 2
0000B9A4 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0)
0000B9C8 6000 0000                  		bra.w	DisplaySprite
0000B9CC                            ; ===========================================================================
0000B9CC                            
0000B9CC                            GRing_Collect:	; Routine 4
0000B9CC 5528 0024                  		subq.b	#2,obRoutine(a0)
0000B9D0 117C 0000 0020             		move.b	#0,obColType(a0)
0000B9D6 6100 0000                  		bsr.w	FindFreeObj
0000B9DA 6600 0000                  		bne.w	GRing_PlaySnd
0000B9DE 12BC 0000                  		move.b	#id_RingFlash,0(a1) ; load giant ring flash object
0000B9E2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B9E8 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B9EE 2348 003C                  		move.l	a0,$3C(a1)
0000B9F2 3038 D008                  		move.w	(v_player+obX).w,d0
0000B9F6 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic come from the left?
0000B9FA 6500                       		bcs.s	GRing_PlaySnd	; if yes, branch
0000B9FC 08E9 0000 0001             		bset	#0,obRender(a1)	; reverse flash	object	
0000BA02 11FC 0001 FE57             		move.b  #1,(v_emeralds).w
0000BA08 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000BA0E                            		
0000BA0E                            GRing_PlaySnd:
0000BA18 608A                       		bra.s	GRing_Animate
0000BA1A                            ; ===========================================================================
0000BA1A                            
0000BA1A                            GRing_Delete:	; Routine 6
0000BA1A 6000 0000                  		bra.w	DeleteObject
0000BA1A 6000 0000                  		bra.w	DeleteObject
0000BA1E                            		include	"_incObj\7C Ring Flash.asm"
0000BA1E                            ; ---------------------------------------------------------------------------
0000BA1E                            ; Object 7C - flash effect when	you collect the	giant ring
0000BA1E                            ; ---------------------------------------------------------------------------
0000BA1E                            
0000BA1E                            RingFlash:
0000BA1E 7000                       		moveq	#0,d0
0000BA20 1028 0024                  		move.b	obRoutine(a0),d0
0000BA24 323B 0000                  		move.w	Flash_Index(pc,d0.w),d1
0000BA28 4EFB 1000                  		jmp	Flash_Index(pc,d1.w)
0000BA2C                            ; ===========================================================================
0000BA2C 0000                       Flash_Index:	dc.w Flash_Main-Flash_Index
0000BA2E 0000                       		dc.w Flash_ChkDel-Flash_Index
0000BA30 0000                       		dc.w Flash_Delete-Flash_Index
0000BA32                            ; ===========================================================================
0000BA32                            
0000BA32                            Flash_Main:	; Routine 0
0000BA32 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BA36 217C 0000 0000 0004        		move.l	#Map_Flash,obMap(a0)
0000BA3E 317C 2462 0002             		move.w	#$2462,obGfx(a0)
0000BA44 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BA4A 317C 0000 0018             		move.w	#0,obPriority(a0)
0000BA50 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000BA56 117C 00FF 001A             		move.b	#$FF,obFrame(a0)
0000BA5C                            
0000BA5C                            Flash_ChkDel:	; Routine 2
0000BA5C 6100                       		bsr.s	Flash_Collect
0000BA7C 6000 0000                  		bra.w	DisplaySprite
0000BA80                            
0000BA80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BA80                            
0000BA80                            
0000BA80                            Flash_Collect:
0000BA80 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000BA84 6A00                       		bpl.s	locret_9F76
0000BA86 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000BA8C 5228 001A                  		addq.b	#1,obFrame(a0)
0000BA90 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)	; has animation	finished?
0000BA96 6400                       		bcc.s	Flash_End	; if yes, branch
0000BA98 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is 3rd frame displayed?
0000BA9E 6600                       		bne.s	locret_9F76	; if not, branch
0000BAA0 2268 003C                  		movea.l	$3C(a0),a1	; get parent object address
0000BAA4 137C 0006 0024             		move.b	#6,obRoutine(a1) ; delete parent object
0000BAAA 11FC 0000 D01C             		move.b	#id_Null,(v_player+obAnim).w ; make Sonic invisible
0000BAB0 11FC 0001 F7CD             		move.b	#1,(f_bigring).w ; stop	Sonic getting bonuses
0000BAB6 4238 FE2D                  		clr.b	(v_invinc).w	; remove invincibility
0000BABA 4238 FE2C                  		clr.b	(v_shield).w	; remove shield
0000BABE                            
0000BABE                            locret_9F76:
0000BABE 4E75                       		rts	
0000BAC0                            ; ===========================================================================
0000BAC0                            
0000BAC0                            Flash_End:
0000BAC0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BAC4 31FC 0000 D000             		move.w	#0,(v_player).w ; remove Sonic object
0000BACA 588F                       		addq.l	#4,sp
0000BACC 4E75                       		rts	
0000BACE                            ; End of function Flash_Collect
0000BACE                            
0000BACE                            ; ===========================================================================
0000BACE                            
0000BACE                            Flash_Delete:	; Routine 4
0000BACE 6000 0000                  		bra.w	DeleteObject
0000BACE 6000 0000                  		bra.w	DeleteObject
0000BAD2                            
0000BAD2                            		include	"_anim\Rings.asm"
0000BAD2                            ; ---------------------------------------------------------------------------
0000BAD2                            ; Animation script - ring
0000BAD2                            ; ---------------------------------------------------------------------------
0000BAD2 0000                       Ani_Ring:	dc.w @ring-Ani_Ring
0000BAD4 0706 0708 09FC             @ring:		dc.b 7,	6, 7, 8, 9, afRoutine
0000BADA                            		even
0000BADA                            		even
0000BADA                            Map_Ring:		include	"_maps\Rings (JP1).asm"
0000BADA                            ; --------------------------------------------------------------------------------
0000BADA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BADA                            ; --------------------------------------------------------------------------------
0000BADA                            
0000BADA                            SME_aSMQh:	
0000BADA 0000 0000                  		dc.w SME_aSMQh_14-SME_aSMQh, SME_aSMQh_1A-SME_aSMQh	
0000BADE 0000 0000                  		dc.w SME_aSMQh_20-SME_aSMQh, SME_aSMQh_26-SME_aSMQh	
0000BAE2 0000 0000                  		dc.w SME_aSMQh_2C-SME_aSMQh, SME_aSMQh_32-SME_aSMQh	
0000BAE6 0000 0000                  		dc.w SME_aSMQh_38-SME_aSMQh, SME_aSMQh_3E-SME_aSMQh	
0000BAEA 0000 0000                  		dc.w SME_aSMQh_44-SME_aSMQh, SME_aSMQh_4A-SME_aSMQh	
0000BAEE 01                         SME_aSMQh_14:	dc.b 1	
0000BAEF F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
0000BAF4 01                         SME_aSMQh_1A:	dc.b 1	
0000BAF5 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0000BAFA 01                         SME_aSMQh_20:	dc.b 1	
0000BAFB F805 000A F8               		dc.b $F8, 5, 0, $A, $F8	
0000BB00 01                         SME_aSMQh_26:	dc.b 1	
0000BB01 F801 0008 FC               		dc.b $F8, 1, 0, 8, $FC	
0000BB06 01                         SME_aSMQh_2C:	dc.b 1	
0000BB07 F805 080A F8               		dc.b $F8, 5, 8, $A, $F8	
0000BB0C 01                         SME_aSMQh_32:	dc.b 1	
0000BB0D F805 0804 F8               		dc.b $F8, 5, 8, 4, $F8	
0000BB12 01                         SME_aSMQh_38:	dc.b 1	
0000BB13 F805 0010 F8               		dc.b $F8, 5, 0, $10, $F8	
0000BB18 01                         SME_aSMQh_3E:	dc.b 1	
0000BB19 F805 1810 F8               		dc.b $F8, 5, $18, $10, $F8	
0000BB1E 01                         SME_aSMQh_44:	dc.b 1	
0000BB1F F805 0810 F8               		dc.b $F8, 5, 8, $10, $F8	
0000BB24 01                         SME_aSMQh_4A:	dc.b 1	
0000BB25 F805 1010 F8               		dc.b $F8, 5, $10, $10, $F8	
0000BB2A                            		even
0000BB2A                            		even
0000BB2A                            Map_GRing:	include	"_maps\Giant Ring.asm"
0000BB2A                            ; ---------------------------------------------------------------------------
0000BB2A                            ; Sprite mappings - giant ring
0000BB2A                            ; ---------------------------------------------------------------------------
0000BB2A                            Map_GRing_internal:
0000BB2A 0000                       		dc.w byte_9FDA-Map_GRing_internal
0000BB2C 0000                       		dc.w byte_A00D-Map_GRing_internal
0000BB2E 0000                       		dc.w byte_A036-Map_GRing_internal
0000BB30 0000                       		dc.w byte_A04B-Map_GRing_internal
0000BB32 0A                         byte_9FDA:	dc.b $A
0000BB33 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8	; ring front
0000BB38 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000BB3D E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000BB42 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000BB47 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000BB4C F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000BB51 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000BB56 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000BB5B 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000BB60 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000BB65 08                         byte_A00D:	dc.b 8
0000BB66 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0 ; ring angle
0000BB6B E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000BB70 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000BB75 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000BB7A F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000BB7F 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000BB84 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000BB89 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000BB8E 04                         byte_A036:	dc.b 4
0000BB8F E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4 ; ring perpendicular
0000BB94 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000BB99 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000BB9E 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000BBA3 08                         byte_A04B:	dc.b 8
0000BBA4 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0 ; ring angle
0000BBA9 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000BBAE E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000BBB3 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000BBB8 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000BBBD 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000BBC2 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000BBC7 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000BBCC                            		even
0000BBCC                            		even
0000BBCC                            Map_Flash:	include	"_maps\Ring Flash.asm"
0000BBCC                            ; ---------------------------------------------------------------------------
0000BBCC                            ; Sprite mappings - flash effect when you collect the giant ring
0000BBCC                            ; ---------------------------------------------------------------------------
0000BBCC                            Map_Flash_internal:
0000BBCC 0000                       		dc.w byte_A084-Map_Flash_internal
0000BBCE 0000                       		dc.w byte_A08F-Map_Flash_internal
0000BBD0 0000                       		dc.w byte_A0A4-Map_Flash_internal
0000BBD2 0000                       		dc.w byte_A0B9-Map_Flash_internal
0000BBD4 0000                       		dc.w byte_A0CE-Map_Flash_internal
0000BBD6 0000                       		dc.w byte_A0E3-Map_Flash_internal
0000BBD8 0000                       		dc.w byte_A0F8-Map_Flash_internal
0000BBDA 0000                       		dc.w byte_A103-Map_Flash_internal
0000BBDC 02                         byte_A084:	dc.b 2
0000BBDD E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000BBE2 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000BBE7 04                         byte_A08F:	dc.b 4
0000BBE8 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000BBED E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000BBF2 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000BBF7 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000BBFC 04                         byte_A0A4:	dc.b 4
0000BBFD E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000BC02 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000BC07 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000BC0C 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000BC11 04                         byte_A0B9:	dc.b 4
0000BC12 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000BC17 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000BC1C 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000BC21 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000BC26 04                         byte_A0CE:	dc.b 4
0000BC27 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000BC2C E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000BC31 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000BC36 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000BC3B 04                         byte_A0E3:	dc.b 4
0000BC3C E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000BC41 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000BC46 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000BC4B 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000BC50 02                         byte_A0F8:	dc.b 2
0000BC51 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000BC56 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000BC5B 04                         byte_A103:	dc.b 4
0000BC5C E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000BC61 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000BC66 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000BC6B 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000BC70                            		even
0000BC70                            		even
0000BC70                            		include	"_incObj\26 Monitor.asm"
0000BC70                            ; ---------------------------------------------------------------------------
0000BC70                            ; Object 26 - monitors
0000BC70                            ; ---------------------------------------------------------------------------
0000BC70                            
0000BC70                            Monitor:
0000BC70 7000                       		moveq	#0,d0
0000BC72 1028 0024                  		move.b	obRoutine(a0),d0
0000BC76 323B 0000                  		move.w	Mon_Index(pc,d0.w),d1
0000BC7A 4EFB 1000                  		jmp	Mon_Index(pc,d1.w)
0000BC7E                            ; ===========================================================================
0000BC7E 0000                       Mon_Index:	dc.w Mon_Main-Mon_Index
0000BC80 0000                       		dc.w Mon_Solid-Mon_Index
0000BC82 0000                       		dc.w Mon_BreakOpen-Mon_Index
0000BC84 0000                       		dc.w Mon_Animate-Mon_Index
0000BC86 0000                       		dc.w Mon_Display-Mon_Index
0000BC88                            ; ===========================================================================
0000BC88                            
0000BC88                            Mon_Main:	; Routine 0
0000BC88 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BC8C 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000BC92 117C 000E 0017             		move.b	#$E,obWidth(a0)
0000BC98 217C 0000 0000 0004        		move.l	#Map_Monitor,obMap(a0)
0000BCA0 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000BCA6 117C 0004 0001             		move.b	#4,obRender(a0)
0000BCAC 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000BCB2 117C 000F 0014             		move.b	#$F,obActWid(a0)
0000BCB8 45F8 FC00                  		lea	(v_objstate).w,a2
0000BCBC 7000                       		moveq	#0,d0
0000BCBE 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BCC2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000BCC8 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000BCCE 6700                       		beq.s	@notbroken	; if not, branch
0000BCD0 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Mon_Display" routine
0000BCD6 117C 000B 001A             		move.b	#$B,obFrame(a0)	; use broken monitor frame
0000BCDC 4E75                       		rts	
0000BCDE                            ; ===========================================================================
0000BCDE                            
0000BCDE                            	@notbroken:
0000BCDE 117C 0046 0020             		move.b	#$46,obColType(a0)
0000BCE4 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0)
0000BCEA                            
0000BCEA                            Mon_Solid:	; Routine 2
0000BCEA 1028 0025                  		move.b	ob2ndRout(a0),d0 ; is monitor set to fall?
0000BCEE 6700                       		beq.s	@normal		; if not, branch
0000BCF0 5500                       		subq.b	#2,d0
0000BCF2 6600                       		bne.s	@fall
0000BCF4                            
0000BCF4                            		; 2nd Routine 2
0000BCF4 7200                       		moveq	#0,d1
0000BCF6 1228 0014                  		move.b	obActWid(a0),d1
0000BCFA 0641 000B                  		addi.w	#$B,d1
0000BCFE 6100 CFEC                  		bsr.w	ExitPlatform
0000BD02 0829 0003 0022             		btst	#3,obStatus(a1) ; is Sonic on top of the monitor?
0000BD08 6600 0000                  		bne.w	@ontop		; if yes, branch
0000BD0C 4228 0025                  		clr.b	ob2ndRout(a0)
0000BD10 6000 0000                  		bra.w	Mon_Animate
0000BD14                            ; ===========================================================================
0000BD14                            
0000BD14                            	@ontop:
0000BD14 363C 0010                  		move.w	#$10,d3
0000BD18 3428 0008                  		move.w	obX(a0),d2
0000BD1C 6100 D52C                  		bsr.w	MvSonicOnPtfm
0000BD20 6000 0000                  		bra.w	Mon_Animate
0000BD24                            ; ===========================================================================
0000BD24                            
0000BD24                            @fall:		; 2nd Routine 4
0000BD24 6100 0000                  		bsr.w	ObjectFall
0000BD28 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000BD2E 4A41                       		tst.w	d1
0000BD30 6A00 0000                  		bpl.w	Mon_Animate
0000BD34 D368 000C                  		add.w	d1,obY(a0)
0000BD38 4268 0012                  		clr.w	obVelY(a0)
0000BD3C 4228 0025                  		clr.b	ob2ndRout(a0)
0000BD40 6000 0000                  		bra.w	Mon_Animate
0000BD44                            ; ===========================================================================
0000BD44                            
0000BD44                            @normal:	; 2nd Routine 0
0000BD44 323C 001A                  		move.w	#$1A,d1
0000BD48 343C 000F                  		move.w	#$F,d2
0000BD4C 6100 0000                  		bsr.w	Mon_SolidSides
0000BD50 6700 0000                  		beq.w	loc_A25C
0000BD54 4A69 0012                  		tst.w	obVelY(a1)
0000BD58 6B00                       		bmi.s	loc_A20A
0000BD5A 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000BD60 6700                       		beq.s	loc_A25C	; if yes, branch
0000BD62 0C29 0000 001C             		cmpi.b	#id_SpinDash,obAnim(a1) ; is Sonic Spindashing?
0000BD68 6700                       		beq.s	loc_A25C	; if yes, branch
0000BD6A 0C29 0000 001C             		cmpi.b	#id_Peelout,obAnim(a1) ; is Sonic Spindashing?
0000BD70 6700                       		beq.s	loc_A25C	; if yes, branch
0000BD72                            
0000BD72                            loc_A20A:
0000BD72 4A41                       		tst.w	d1
0000BD74 6A00                       		bpl.s	loc_A220
0000BD76 9769 000C                  		sub.w	d3,obY(a1)
0000BD7A 6100 CE5E                  		bsr.w	loc_74AE
0000BD7E 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0000BD84 6000 0000                  		bra.w	Mon_Animate
0000BD88                            ; ===========================================================================
0000BD88                            
0000BD88                            loc_A220:
0000BD88 4A40                       		tst.w	d0
0000BD8A 6700 0000                  		beq.w	loc_A246
0000BD8E 6B00                       		bmi.s	loc_A230
0000BD90 4A69 0010                  		tst.w	obVelX(a1)
0000BD94 6B00                       		bmi.s	loc_A246
0000BD96 6000                       		bra.s	loc_A236
0000BD98                            ; ===========================================================================
0000BD98                            
0000BD98                            loc_A230:
0000BD98 4A69 0010                  		tst.w	obVelX(a1)
0000BD9C 6A00                       		bpl.s	loc_A246
0000BD9E                            
0000BD9E                            loc_A236:
0000BD9E 9169 0008                  		sub.w	d0,obX(a1)
0000BDA2 337C 0000 0020             		move.w	#0,obInertia(a1)
0000BDA8 337C 0000 0010             		move.w	#0,obVelX(a1)
0000BDAE                            
0000BDAE                            loc_A246:
0000BDAE 0829 0001 0022             		btst	#1,obStatus(a1)
0000BDB4 6600                       		bne.s	loc_A26A
0000BDB6 08E9 0005 0022             		bset	#5,obStatus(a1)
0000BDBC 08E8 0005 0022             		bset	#5,obStatus(a0)
0000BDC2 6000                       		bra.s	Mon_Animate
0000BDC4                            ; ===========================================================================
0000BDC4                            
0000BDC4                            loc_A25C:
0000BDC4 0828 0005 0022             		btst	#5,obStatus(a0)
0000BDCA 6700                       		beq.s	Mon_Animate
0000BDCC 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
0000BDD2 6700                       		beq.s	loc_A26A	; if so, branch
0000BDD4 337C 0001 001C             		move.w	#1,obAnim(a1)	; clear obAnim and set obNextAni to 1, putting Sonic in his walking animation
0000BDDA                            
0000BDDA                            loc_A26A:
0000BDDA 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000BDE0 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000BDE6                            
0000BDE6                            Mon_Animate:	; Routine 6
0000BDE6 43F9 0000 0000             		lea	(Ani_Monitor).l,a1
0000BDEC 6100 0000                  		bsr.w	AnimateSprite
0000BDF0                            
0000BDF0                            Mon_Display:	; Routine 8
0000BDF0 6100 0000                  		bsr.w	DisplaySprite
0000BE12 4E75                       		rts	
0000BE14                            ; ===========================================================================
0000BE14                            
0000BE14                            Mon_BreakOpen:	; Routine 4
0000BE14 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BE18 117C 0000 0020             		move.b	#0,obColType(a0)
0000BE1E 6100 0000                  		bsr.w	FindFreeObj
0000BE22 6600                       		bne.s	Mon_Explode
0000BE24 12BC 0000                  		move.b	#id_PowerUp,0(a1) ; load monitor contents object
0000BE28 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BE2E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BE34 1368 001C 001C             		move.b	obAnim(a0),obAnim(a1)
0000BE3A                            
0000BE3A                            Mon_Explode:
0000BE3A 6100 0000                  		bsr.w	FindFreeObj
0000BE3E 6600                       		bne.s	@fail
0000BE40 12BC 0000                  		move.b	#id_ExplosionItem,0(a1) ; load explosion object
0000BE44 5429 0024                  		addq.b	#2,obRoutine(a1) ; don't create an animal
0000BE48 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BE4E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BE54                            
0000BE54                            	@fail:
0000BE54 45F8 FC00                  		lea	(v_objstate).w,a2
0000BE58 7000                       		moveq	#0,d0
0000BE5A 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BE5E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000BE64 117C 0009 001C             		move.b	#9,obAnim(a0)	; set monitor type to broken
0000BE6A 6000 0000                  		bra.w	DisplaySprite
0000BE6A 6000 0000                  		bra.w	DisplaySprite
0000BE6E                            		include	"_incObj\2E Monitor Content Power-Up.asm"
0000BE6E                            ; ---------------------------------------------------------------------------
0000BE6E                            ; Object 2E - contents of monitors
0000BE6E                            ; ---------------------------------------------------------------------------
0000BE6E                            
0000BE6E                            PowerUp:
0000BE6E 7000                       		moveq	#0,d0
0000BE70 1028 0024                  		move.b	obRoutine(a0),d0
0000BE74 323B 0000                  		move.w	Pow_Index(pc,d0.w),d1
0000BE78 4EBB 1000                  		jsr	Pow_Index(pc,d1.w)
0000BE7C 6000 0000                  		bra.w	DisplaySprite
0000BE80                            ; ===========================================================================
0000BE80 0000                       Pow_Index:	dc.w Pow_Main-Pow_Index
0000BE82 0000                       		dc.w Pow_Move-Pow_Index
0000BE84 0000                       		dc.w Pow_Delete-Pow_Index
0000BE86                            ; ===========================================================================
0000BE86                            
0000BE86                            Pow_Main:	; Routine 0
0000BE86 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BE8A 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000BE90 117C 0024 0001             		move.b	#$24,obRender(a0)
0000BE96 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000BE9C 117C 0008 0014             		move.b	#8,obActWid(a0)
0000BEA2 317C FD00 0012             		move.w	#-$300,obVelY(a0)
0000BEA8 7000                       		moveq	#0,d0
0000BEAA 1028 001C                  		move.b	obAnim(a0),d0	; get subtype
0000BEAE 5400                       		addq.b	#2,d0
0000BEB0 1140 001A                  		move.b	d0,obFrame(a0)	; use correct frame
0000BEB4 227C 0000 0000             		movea.l	#Map_Monitor,a1
0000BEBA D000                       		add.b	d0,d0
0000BEBC D2F1 0000                  		adda.w	(a1,d0.w),a1
0000BEC0 5249                       		addq.w	#1,a1
0000BEC2 2149 0004                  		move.l	a1,obMap(a0)
0000BEC6                            
0000BEC6                            Pow_Move:	; Routine 2
0000BEC6 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000BECA 6A00 0000                  		bpl.w	Pow_Checks	; if not, branch
0000BECE 6100 0000                  		bsr.w	SpeedToPos
0000BED2 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000BED8 4E75                       		rts	
0000BEDA                            ; ===========================================================================
0000BEDA                            
0000BEDA                            Pow_Checks:
0000BEDA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BEDE 317C 001D 001E             		move.w	#29,obTimeFrame(a0) ; display icon for half a second
0000BEE4                            
0000BEE4                            Pow_ChkEggman:
0000BEE4 1028 001C                  		move.b	obAnim(a0),d0
0000BEE8 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000BEEC 6600                       		bne.s	Pow_ChkSonic
0000BEEE                            		
0000BEEE 4EF9 0000 0000             		jmp	Spik_Hurt
0000BEF4                            		
0000BEF4 4E75                       		rts
0000BEF6                            ; ===========================================================================
0000BEF6                            
0000BEF6                            Pow_ChkSonic:
0000BEF6 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000BEFA 6600                       		bne.s	Pow_ChkShoes
0000BEFC                            
0000BEFC                            	ExtraLife:
0000BEFC 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000BF00 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000BF0E                            
0000BF0E                            ; ===========================================================================
0000BF0E                            
0000BF0E                            Pow_ChkShoes:
0000BF0E 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000BF12 6600                       		bne.s	Pow_ChkShield
0000BF14                            
0000BF14 11FC 0001 FE2E             		move.b	#1,(v_shoes).w	; speed up the BG music
0000BF1A 31FC 04B0 D034             		move.w	#$4B0,(v_player+$34).w	; time limit for the power-up
0000BF20 31FC 0C00 F760             		move.w	#$C00,(v_sonspeedmax).w ; change Sonic's top speed
0000BF26 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w	; change Sonic's acceleration
0000BF2C 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w	; change Sonic's deceleration
0000BF32 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000BF36 6600                       		bne.s	Pow_NoMus	; if yes, branch
0000BF38 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000BF3E 6300                       			bls.s	Pow_NoMus
0000BF4A                            ; ===========================================================================
0000BF4A                            
0000BF4A                            Pow_NoMus:
0000BF4A 4E75                       		rts	
0000BF4C                            ; ===========================================================================
0000BF4C                            
0000BF4C                            Pow_ChkShield:
0000BF4C 0C00 0004                          cmpi.b    #4,d0        ; does monitor contain a shield?
0000BF50 6600                               bne.s    Pow_ChkInvinc
0000BF52                            
0000BF52 11FC 0001 FE2C                     move.b    #1,(v_shield).w    ; give Sonic a shield
0000BF58 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove red shield
0000BF5E 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000BF64 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000BF6A 11FC 0000 D180                     move.b    #id_ShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000BF70 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000BF74 303C 0000                          move.w    #sfx_Shield,d0
0000BF78 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000BF7E                            ; ===========================================================================
0000BF7E                            
0000BF7E                            Pow_ChkInvinc:
0000BF7E 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000BF82 6600                       		bne.s	Pow_ChkRings
0000BF84                            
0000BF84 11FC 0001 FE2D             		move.b	#1,(v_invinc).w	; make Sonic invincible
0000BF8A 31FC 0560 D032             		move.w	#$560,(v_player+$32).w ; time limit for the power-up
0000BF90 11FC 0000 D200             		move.b	#id_InvStars,(v_objspace+$200).w ; load stars object ($3801)
0000BF96 11FC 0001 D21C             		move.b	#1,(v_objspace+$200+obAnim).w
0000BF9C 11FC 0000 D240             		move.b	#id_InvStars,(v_objspace+$240).w ; load stars object ($3802)
0000BFA2 11FC 0002 D25C             		move.b	#2,(v_objspace+$240+obAnim).w
0000BFA8 11FC 0000 D280             		move.b	#id_InvStars,(v_objspace+$280).w ; load stars object ($3803)
0000BFAE 11FC 0003 D29C             		move.b	#3,(v_objspace+$280+obAnim).w
0000BFB4 11FC 0000 D2C0             		move.b	#id_InvStars,(v_objspace+$2C0).w ; load stars object ($3804)
0000BFBA 11FC 0004 D2DC             		move.b	#4,(v_objspace+$2C0+obAnim).w
0000BFC0 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000BFC4 6600                       		bne.s	Pow_NoMusic	; if yes, branch
0000BFC6 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000BFCC 6300                       			bls.s	Pow_NoMusic
0000BFD8                            ; ===========================================================================
0000BFD8                            
0000BFD8                            Pow_NoMusic:
0000BFD8 4E75                       		rts	
0000BFDA                            ; ===========================================================================
0000BFDA                            
0000BFDA                            Pow_ChkRings:
0000BFDA 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000BFDE 6600                       		bne.s	Pow_ChkS
0000BFE0                            
0000BFE0 0678 000A FE20             		addi.w	#10,(v_rings).w	; add 10 rings to the number of rings you have
0000BFE6 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the ring counter
0000BFEC 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000BFF2 6500                       		bcs.s	Pow_RingSound
0000BFF4 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000BFFA 6700 FF00                  		beq.w	ExtraLife
0000BFFE 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C004 6500                       		bcs.s	Pow_RingSound
0000C006 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C00C 6700 FEEE                  		beq.w	ExtraLife
0000C010                            
0000C010                            	Pow_RingSound:
0000C01A                            ; ===========================================================================
0000C01A                            
0000C01A                            Pow_ChkS:
0000C01A 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'?
0000C01E 6600                       		bne.s	Pow_ChkSRing
0000C020                            		
0000C020 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0000C026 6700                       		beq.s	PowS2	; if yes, branch
0000C028 0404 003B                  		subi.b	#$3B,d4
0000C02C 7000                       		moveq	#0,d0
0000C02E 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000C034 11FC 0001 F5C3             		move.b	#1,(f_emeraldm).w
0000C03A 6000                       		bra.s	PowSPlay
0000C03C                            
0000C03C                            PowS2:
0000C03C 0678 0032 FE20             		addi.w	#50,(v_rings).w	; add 50 rings to the number of rings you have
0000C042 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000C048 0038 0005 FE1D             		ori.b	#5,(f_ringcount).w ; update the ring counter
0000C04E 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C054 6500                       		bcs.s	PowSPlay
0000C056 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C05C 6700 FE9E                  		beq.w	ExtraLife
0000C060 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C066 6500                       		bcs.s	PowSPlay
0000C068 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C06E 6700 FE8C                  		beq.w	ExtraLife	
0000C072                            
0000C072                            PowSPlay:
0000C07C                            
0000C07C                            		
0000C07C                            
0000C07C                            
0000C07C                            Pow_ChkSRing:
0000C07C 0C00 0008                  		cmpi.b	#8,d0		; does monitor contain 'S'?
0000C080 6600                       		bne.s	Pow_ChkRShield
0000C082                            
0000C082                            		
0000C082 0678 0014 FE20             		addi.w	#20,(v_rings).w	; add 20 rings to the number of rings you have
0000C088 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C08E 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C094 6500                       		bcs.s	Pow_ChkSRingSound
0000C096 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C09C 6700 FE5E                  		beq.w	ExtraLife
0000C0A0 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C0A6 6500                       		bcs.s	Pow_ChkSRingSound
0000C0A8 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C0AE 6700 FE4C                  		beq.w	ExtraLife	
0000C0B2                            
0000C0B2                            Pow_ChkSRingSound:
0000C0BC                            
0000C0BC                            
0000C0BC                            Pow_ChkRShield:
0000C0BC 0C00 000A                          cmpi.b    #10,d0        ; does monitor contain a shield?
0000C0C0 6600                               bne.s    Pow_ChkGShield
0000C0C2                            
0000C0C2 11FC 0002 F5C8                     move.b    #2,(v_rshield).w    ; give Sonic a shield
0000C0C8 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C0CE 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C0D4 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C0DA 11FC 0000 D180                     move.b    #id_RShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C0E0 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C0E4 303C 0000                          move.w    #sfx_FireShield,d0
0000C0E8 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000C0EE                            
0000C0EE                            Pow_ChkGShield:
0000C0EE 0C00 000B                          cmpi.b    #11,d0        ; does monitor contain a shield?
0000C0F2 6600                               bne.s    Pow_ChkSpShield
0000C0F4                            
0000C0F4 11FC 0001 F5C9                     move.b    #1,(v_gshield).w    ; give Sonic a shield
0000C0FA 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C100 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove g shield
0000C106 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C10C 11FC 0000 D180                     move.b    #id_GShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C112 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C116 303C 0000                          move.w    #sfx_LightningShield,d0
0000C11A 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000C120                            
0000C120                            Pow_ChkSpShield:
0000C120 0C00 000C                         cmpi.b    #12,d0        ; does monitor contain a shield?
0000C124 66FA                               bne.s    Pow_ChkSpShield
0000C126                            
0000C126 11FC 0001 F5CA                     move.b    #1,(v_spshield).w    ; give Sonic a shield
0000C12C 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C132 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove g shield
0000C138 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove s shield
0000C13E 11FC 0000 D180                     move.b    #id_SpShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C144 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C148 303C 0000                          move.w    #sfx_SpikesMove,d0
0000C14C 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000C152                            
0000C152                            Pow_ChkEnd:
0000C152 4E75                       		rts
0000C154                            ; ===========================================================================
0000C154                            
0000C154                            Pow_Delete:	; Routine 4
0000C154 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0000C158 6B00 0000                  		bmi.w	DeleteObject	; delete after half a second
0000C15C 4E75                       		rts	
0000C15C 4E75                       		rts	
0000C15E                            		include	"_incObj\26 Monitor (SolidSides subroutine).asm"
0000C15E                            ; ---------------------------------------------------------------------------
0000C15E                            ; Subroutine to	make the sides of a monitor solid
0000C15E                            ; ---------------------------------------------------------------------------
0000C15E                            
0000C15E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C15E                            
0000C15E                            
0000C15E                            Mon_SolidSides:
0000C15E 43F8 D000                  		lea	(v_player).w,a1
0000C162 3029 0008                  		move.w	obX(a1),d0
0000C166 9068 0008                  		sub.w	obX(a0),d0
0000C16A D041                       		add.w	d1,d0
0000C16C 6B00                       		bmi.s	loc_A4E6
0000C16E 3601                       		move.w	d1,d3
0000C170 D643                       		add.w	d3,d3
0000C172 B043                       		cmp.w	d3,d0
0000C174 6200                       		bhi.s	loc_A4E6
0000C176 1629 0016                  		move.b	obHeight(a1),d3
0000C17A 4883                       		ext.w	d3
0000C17C D443                       		add.w	d3,d2
0000C17E 3629 000C                  		move.w	obY(a1),d3
0000C182 9668 000C                  		sub.w	obY(a0),d3
0000C186 D642                       		add.w	d2,d3
0000C188 6B00                       		bmi.s	loc_A4E6
0000C18A D442                       		add.w	d2,d2
0000C18C B642                       		cmp.w	d2,d3
0000C18E 6400                       		bcc.s	loc_A4E6
0000C190 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000C194 6B00                       		bmi.s	loc_A4E6
0000C196 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000C19C 6400                       		bcc.s	loc_A4E6
0000C19E 4A78 FE08                  		tst.w	(v_debuguse).w
0000C1A2 6600                       		bne.s	loc_A4E6
0000C1A4 B240                       		cmp.w	d0,d1
0000C1A6 6400                       		bcc.s	loc_A4DC
0000C1A8 D241                       		add.w	d1,d1
0000C1AA 9041                       		sub.w	d1,d0
0000C1AC                            
0000C1AC                            loc_A4DC:
0000C1AC 0C43 0010                  		cmpi.w	#$10,d3
0000C1B0 6500                       		bcs.s	loc_A4EA
0000C1B2                            
0000C1B2                            loc_A4E2:
0000C1B2 7201                       		moveq	#1,d1
0000C1B4 4E75                       		rts	
0000C1B6                            ; ===========================================================================
0000C1B6                            
0000C1B6                            loc_A4E6:
0000C1B6 7200                       		moveq	#0,d1
0000C1B8 4E75                       		rts	
0000C1BA                            ; ===========================================================================
0000C1BA                            
0000C1BA                            loc_A4EA:
0000C1BA 7200                       		moveq	#0,d1
0000C1BC 1228 0014                  		move.b	obActWid(a0),d1
0000C1C0 5841                       		addq.w	#4,d1
0000C1C2 3401                       		move.w	d1,d2
0000C1C4 D442                       		add.w	d2,d2
0000C1C6 D269 0008                  		add.w	obX(a1),d1
0000C1CA 9268 0008                  		sub.w	obX(a0),d1
0000C1CE 6BE2                       		bmi.s	loc_A4E2
0000C1D0 B242                       		cmp.w	d2,d1
0000C1D2 64DE                       		bcc.s	loc_A4E2
0000C1D4 72FF                       		moveq	#-1,d1
0000C1D6 4E75                       		rts	
0000C1D8                            ; End of function Obj26_SolidSides
0000C1D8                            ; End of function Obj26_SolidSides
0000C1D8                            		include	"_anim\Monitor.asm"
0000C1D8                            ; ---------------------------------------------------------------------------
0000C1D8                            ; Animation script - monitors
0000C1D8                            ; ---------------------------------------------------------------------------
0000C1D8 0000 0000 0000             Ani_Monitor:	dc.w @static-Ani_Monitor, @eggman-Ani_Monitor, @sonic-Ani_Monitor
0000C1DE 0000 0000 0000             		dc.w @shoes-Ani_Monitor, @shield-Ani_Monitor, @invincible-Ani_Monitor
0000C1E4 0000 0000 0000             		dc.w @rings-Ani_Monitor, @s-Ani_Monitor, @goggles-Ani_Monitor
0000C1EA 0000 0000 0000             		dc.w @breaking-Ani_Monitor, @rshield-Ani_Monitor, @yshield-Ani_Monitor
0000C1F0 0000                       		dc.w @spshield-Ani_Monitor
0000C1F2                            		
0000C1F2 0100 0102 FF               @static:	dc.b 1,	0, 1, 2, afEnd
0000C1F8 00                         		even
0000C1F8 0100 0303 0103 0302 0303+  @eggman:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, afEnd
0000C204 00                         		even
0000C204 0100 0404 0104 0402 0404+  @sonic:		dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, afEnd
0000C210 00                         		even
0000C210 0100 0505 0105 0502 0505+  @shoes:		dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, afEnd
0000C21C 00                         		even
0000C21C 0100 0606 0106 0602 0606+  @shield:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, afEnd
0000C228 00                         		even
0000C228 0100 0707 0107 0702 0707+  @invincible:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, afEnd
0000C234 00                         		even
0000C234 0100 0808 0108 0802 0808+  @rings:		dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, afEnd
0000C240 00                         		even
0000C240 0100 0909 0109 0902 0909+  @s:		dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, afEnd
0000C24C 00                         		even
0000C24C 0100 0A0A 010A 0A02 0A0A+  @goggles:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, afEnd
0000C258 00                         		even
0000C258 0200 0102 0BFE 01          @breaking:	dc.b 2,	0, 1, 2, $B, afBack, 1
0000C260 00                         		even
0000C260 0100 0C0C 010C 0C02 0C0C+  @rshield:	dc.b 1,	0, $C, $C, 1, $C, $C, 2, $C, $C, afEnd
0000C26C 00                         		even
0000C26C 0100 0D0D 010D 0D02 0D0D+  @yshield:	dc.b 1,	0, $D, $D, 1, $D, $D, 2, $D, $D, afEnd
0000C278 00                         		even
0000C278 0100 0E0E 010E 0E02 0E0E+  @spshield:	dc.b 1,	0, $E, $E, 1, $E, $E, 2, $E, $E, afEnd
0000C284 00                         		even
0000C284 00                         		even
0000C284                            Map_Monitor:	include	"_maps\Monitor.asm"
0000C284                            ; --------------------------------------------------------------------------------
0000C284                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C284                            ; --------------------------------------------------------------------------------
0000C284                            
0000C284                            SME_0IgQe:	
0000C284 0000 0000                  		dc.w SME_0IgQe_1E-SME_0IgQe, SME_0IgQe_24-SME_0IgQe	
0000C288 0000 0000                  		dc.w SME_0IgQe_2F-SME_0IgQe, SME_0IgQe_3A-SME_0IgQe	
0000C28C 0000 0000                  		dc.w SME_0IgQe_45-SME_0IgQe, SME_0IgQe_50-SME_0IgQe	
0000C290 0000 0000                  		dc.w SME_0IgQe_5B-SME_0IgQe, SME_0IgQe_66-SME_0IgQe	
0000C294 0000 0000                  		dc.w SME_0IgQe_71-SME_0IgQe, SME_0IgQe_7C-SME_0IgQe	
0000C298 0000 0000                  		dc.w SME_0IgQe_87-SME_0IgQe, SME_0IgQe_92-SME_0IgQe	
0000C29C 0000 0000                  		dc.w SME_0IgQe_AC-SME_0IgQe, SME_0IgQe_B7-SME_0IgQe	
0000C2A0 0000                       		dc.w SME_0IgQe_C2-SME_0IgQe	
0000C2A2 01                         SME_0IgQe_1E:	dc.b 1	
0000C2A3 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C2A8 02                         SME_0IgQe_24:	dc.b 2	
0000C2A9 F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000C2AE F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C2B3 02                         SME_0IgQe_2F:	dc.b 2	
0000C2B4 F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000C2B9 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C2BE 02                         SME_0IgQe_3A:	dc.b 2	
0000C2BF F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000C2C4 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C2C9 02                         SME_0IgQe_45:	dc.b 2	
0000C2CA F505 0154 F8               		dc.b $F5, 5, 1, $54, $F8	
0000C2CF F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C2D4 02                         SME_0IgQe_50:	dc.b 2	
0000C2D5 F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000C2DA F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C2DF 02                         SME_0IgQe_5B:	dc.b 2	
0000C2E0 F505 2028 F8               		dc.b $F5, 5, $20, $28, $F8	
0000C2E5 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C2EA 02                         SME_0IgQe_66:	dc.b 2	
0000C2EB F505 002C F8               		dc.b $F5, 5, 0, $2C, $F8	
0000C2F0 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C2F5 02                         SME_0IgQe_71:	dc.b 2	
0000C2F6 F505 2030 F8               		dc.b $F5, 5, $20, $30, $F8	
0000C2FB F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C300 02                         SME_0IgQe_7C:	dc.b 2	
0000C301 F505 0034 F8               		dc.b $F5, 5, 0, $34, $F8	
0000C306 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C30B 02                         SME_0IgQe_87:	dc.b 2	
0000C30C F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000C311 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C316 05                         SME_0IgQe_92:	dc.b 5	
0000C317 010C 0038 F0               		dc.b 1, $C, 0, $38, $F0	
0000C31C 0900 0003 F0               		dc.b 9, 0, 0, 3, $F0	
0000C321 0900 0007 F8               		dc.b 9, 0, 0, 7, $F8	
0000C326 0900 000B 00               		dc.b 9, 0, 0, $B, 0	
0000C32B 0900 000F 08               		dc.b 9, 0, 0, $F, 8	
0000C330 02                         SME_0IgQe_AC:	dc.b 2	
0000C331 F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000C336 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C33B 02                         SME_0IgQe_B7:	dc.b 2	
0000C33C F505 201C F8               		dc.b $F5, 5, $20, $1C, $F8	
0000C341 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C346 02                         SME_0IgQe_C2:	dc.b 2	
0000C347 F505 003C F8               		dc.b $F5, 5, 0, $3C, $F8	
0000C34C F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C352 00                         		even
0000C352 00                         		even
0000C352                            
0000C352                            		include	"_incObj\0E Title Screen Sonic.asm"
0000C352                            ; ---------------------------------------------------------------------------
0000C352                            ; Object 0E - Sonic on the title screen
0000C352                            ; ---------------------------------------------------------------------------
0000C352                            
0000C352                            TitleSonic:
0000C352 7000                       		moveq	#0,d0
0000C354 1028 0024                  		move.b	obRoutine(a0),d0
0000C358 323B 0000                  		move.w	TSon_Index(pc,d0.w),d1
0000C35C 4EFB 1000                  		jmp	TSon_Index(pc,d1.w)
0000C360                            ; ===========================================================================
0000C360 0000                       TSon_Index:	dc.w TSon_Main-TSon_Index
0000C362 0000                       		dc.w TSon_Delay-TSon_Index
0000C364 0000                       		dc.w TSon_Move-TSon_Index
0000C366 0000                       		dc.w TSon_Animate-TSon_Index
0000C368                            ; ===========================================================================
0000C368                            
0000C368                            TSon_Main:	; Routine 0
0000C368 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C36C 317C 00F0 0008             		move.w	#$F0,obX(a0)
0000C372 317C 00DE 000A             		move.w	#$DE,obScreenY(a0) ; position is fixed to screen
0000C378 217C 0000 0000 0004        		move.l	#Map_TSon,obMap(a0)
0000C380 317C 2348 0002             		move.w	#$2348,obGfx(a0)
0000C386 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000C38C 117C 001D 001F             		move.b	#29,obDelayAni(a0) ; set time delay to 0.5 seconds
0000C392 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C398 6100 0000                  		bsr.w	AnimateSprite
0000C39C                            
0000C39C                            TSon_Delay:	;Routine 2
0000C39C 5328 001F                  		subq.b	#1,obDelayAni(a0) ; subtract 1 from time delay
0000C3A0 6A00                       		bpl.s	@wait		; if time remains, branch
0000C3A2 5428 0024                  		addq.b	#2,obRoutine(a0) ; go to next routine
0000C3A6 6000 0000                  		bra.w	DisplaySprite
0000C3AA                            
0000C3AA                            	@wait:
0000C3AA 4E75                       		rts	
0000C3AC                            ; ===========================================================================
0000C3AC                            
0000C3AC                            TSon_Move:	; Routine 4
0000C3AC 5168 000A                  		subq.w	#8,obScreenY(a0) ; move Sonic up
0000C3B0 0C68 0096 000A             		cmpi.w	#$96,obScreenY(a0) ; has Sonic reached final position?
0000C3B6 6600                       		bne.s	@display	; if not, branch
0000C3B8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C3BC                            
0000C3BC                            	@display:
0000C3BC 6000 0000                  		bra.w	DisplaySprite
0000C3C0                            
0000C3C0 4E75                       		rts	
0000C3C2                            ; ===========================================================================
0000C3C2                            
0000C3C2                            TSon_Animate:	; Routine 6
0000C3C2 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C3C8 6100 0000                  		bsr.w	AnimateSprite
0000C3CC 6000 0000                  		bra.w	DisplaySprite
0000C3D0                            
0000C3D0 4E75                       		rts	
0000C3D0 4E75                       		rts	
0000C3D2                            		include	"_incObj\0F Press Start and TM.asm"
0000C3D2                            ; ---------------------------------------------------------------------------
0000C3D2                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000C3D2                            ; ---------------------------------------------------------------------------
0000C3D2                            
0000C3D2                            PSBTM:
0000C3D2 7000                       		moveq	#0,d0
0000C3D4 1028 0024                  		move.b	obRoutine(a0),d0
0000C3D8 323B 0000                  		move.w	PSB_Index(pc,d0.w),d1
0000C3DC 4EBB 1000                  		jsr	PSB_Index(pc,d1.w)
0000C3E0 6000 0000                  		bra.w	DisplaySprite
0000C3E4                            ; ===========================================================================
0000C3E4 0000                       PSB_Index:	dc.w PSB_Main-PSB_Index
0000C3E6 0000                       		dc.w PSB_PrsStart-PSB_Index
0000C3E8 0000                       		dc.w PSB_Exit-PSB_Index
0000C3EA 0000                       		dc.w PSB_Menu-PSB_Index		
0000C3EC                            ; ===========================================================================
0000C3EC                            
0000C3EC                            PSB_Main:	; Routine 0
0000C3EC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C3F0 317C 00D0 0008             		move.w	#$D0,obX(a0)
0000C3F6 317C 0130 000A             		move.w	#$130,obScreenY(a0)
0000C3FC 217C 0000 0000 0004        		move.l	#Map_PSB,obMap(a0)
0000C404 317C 0200 0002             		move.w	#$200,obGfx(a0)
0000C40A 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)	; is object "PRESS START"?
0000C410 6500                       		bcs.s	PSB_PrsStart	; if yes, branch
0000C412                            
0000C412 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C416 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is the object	"TM"?
0000C41C 6600                       		bne.s	PSB_Exit	; if not, branch
0000C41E                            
0000C41E 317C 2510 0002             		move.w	#$2510,obGfx(a0) ; "TM" specific code
0000C424 317C 0170 0008             		move.w	#$170,obX(a0)
0000C42A 317C 00F8 000A             		move.w	#$F8,obScreenY(a0)
0000C430                            
0000C430                            PSB_Exit:	; Routine 4
0000C430 4E75                       		rts	
0000C432                            ; ===========================================================================
0000C432                            
0000C432                            PSB_PrsStart:	; Routine 2
0000C432 0838 0007 F605             		btst   #7,(v_jpadpress1).w   ; check if Start is pressed
0000C438 6700                       		beq.s   PSB_PrsStart_Show   ; if not, branch
0000C43A 5828 0024                  		addq.b   #4,obRoutine(a0)      ; go to Menu in next frame
0000C43E 303C 00A1                  		move.w   #$A1,d0 
0000C442 4EB8 12A0                  		jsr   PlaySound_Special
0000C446 317C 056F 0002             		move.w   #$56F,obGfx(a0)
0000C44C 217C 0000 0000 0004        		move.l   #Map_TitleMenu,obMap(a0) 
0000C454 317C 00F8 0008             		move.w	#$F8,obX(a0)
0000C45A 317C 0150 000A             		move.w	#$150,obScreenY(a0)
0000C460 4E75                       		rts
0000C462                            
0000C462                            PSB_PrsStart_Show:
0000C462 43F9 0000 0000             		lea	(Ani_PSBTM).l,a1
0000C468 6000 0000                  		bra.w	AnimateSprite	; "PRESS START" is animated
0000C46C                            
0000C46C                            PSB_Menu:
0000C46C 7400                             moveq   #0,d2
0000C46E 1438 FFB0                        move.b   (Title_screen_option).w,d2
0000C472 1038 F605                        move.b   (v_jpadpress1).w,d0
0000C476 0800 0000                        btst   #0,d0
0000C47A 6700                             beq.s   MAIN2
0000C47C 5302                             subq.b   #1,d2
0000C47E 6400                             bcc.s   MAIN2
0000C480 143C 0001                        move.b   #1,d2
0000C484                            
0000C484                            MAIN2:
0000C484 0800 0001                        btst   #1,d0
0000C488 6700                             beq.s   MAIN3
0000C48A 5202                             addq.b   #1,d2
0000C48C 0C02 0002                        cmpi.b   #2,d2
0000C490 6500                             blo.s   MAIN3
0000C492 7400                             moveq   #0,d2
0000C494                            
0000C494                            MAIN3:
0000C494 1142 001A                        move.b   d2,$1A(a0)
0000C498 11C2 FFB0                        move.b   d2,(Title_screen_option).w
0000C49C 0200 0003                        andi.b   #3,d0
0000C4A0 6700                             beq.s   MAIN4   
0000C4A2 303C 00CD                        move.w   #$CD,d0 ; selection blip sound
0000C4A6 4EB8 12A0                        jsr   PlaySound_Special
0000C4AA                            
0000C4AA                            MAIN4:
0000C4AA 0838 0007 F605                   btst   #7,(v_jpadpress1).w   ; check if Start is pressed
0000C4B0 6700                             beq.s   MENURTS   ; if not, branch
0000C4B2 4EF9 0000 0000                   jmp   DeleteObject   ; if yes, delete the Title Screen Menu
0000C4B8                            
0000C4B8                            MENURTS:
0000C4B8 4E75                             rts															 
0000C4BA                            ; ===========================================================================
0000C4BA                            
0000C4BA                            
0000C4BA                            Map_TitleMenu:
0000C4BA                            		include "_maps\Title Screen Menu.asm"		
0000C4BA                            ; --------------------------------------------------------------------------------
0000C4BA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C4BA                            ; --------------------------------------------------------------------------------
0000C4BA                            
0000C4BA                            SME_g2Qfx:	
0000C4BA 0000 0000                  		dc.w SME_g2Qfx_6-SME_g2Qfx, SME_g2Qfx_6B-SME_g2Qfx	
0000C4BE 10                         SME_g2Qfx_6:	dc.b $10	
0000C4BF E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C4C4 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C4C9 E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C4CE E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C4D3 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C4D8 E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C4DD E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C4E2 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C4E7 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C4EC F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C4F1 F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C4F6 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C4FB F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C500 F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C505 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C50A E004 0028 E0               		dc.b $E0, 4, 0, $28, $E0	
0000C50F 10                         SME_g2Qfx_6B:	dc.b $10	
0000C510 E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C515 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C51A E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C51F E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C524 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C529 E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C52E E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C533 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C538 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C53D F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C542 F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C547 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C54C F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C551 F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C556 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C55B F004 0028 E0               		dc.b $F0, 4, 0, $28, $E0
0000C560                            		even
0000C560                            		even
0000C560                            		even
0000C560                            
0000C560                            		include	"_anim\Title Screen Sonic.asm"
0000C560                            ; ---------------------------------------------------------------------------
0000C560                            ; Animation script - Sonic on the title screen
0000C560                            ; ---------------------------------------------------------------------------
0000C560 0000                       Ani_TSon:	dc.w byte_A706-Ani_TSon
0000C562 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	afBack, 2
0000C56E 00                         		even
0000C56E 00                         		even
0000C56E                            		include	"_anim\Press Start and TM.asm"
0000C56E                            ; ---------------------------------------------------------------------------
0000C56E                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000C56E                            ; ---------------------------------------------------------------------------
0000C56E 0000                       Ani_PSBTM:	dc.w @flash-Ani_PSBTM
0000C570 1F00 01FF                  @flash:		dc.b $1F, 0, 1,	afEnd
0000C574                            		even
0000C574                            		even
0000C574                            
0000C574                            		include	"_incObj\sub AnimateSprite.asm"
0000C574                            ; ---------------------------------------------------------------------------
0000C574                            ; Subroutine to	animate	a sprite using an animation script
0000C574                            ; ---------------------------------------------------------------------------
0000C574                            
0000C574                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C574                            
0000C574                            
0000C574                            AnimateSprite:
0000C574 7000                       		moveq	#0,d0
0000C576 1028 001C                  		move.b	obAnim(a0),d0	; move animation number	to d0
0000C57A B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
0000C57E 6700                       		beq.s	Anim_Run	; if not, branch
0000C580                            
0000C580 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
0000C584 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C58A 117C 0000 001E             		move.b	#0,obTimeFrame(a0) ; reset frame duration
0000C590                            
0000C590                            Anim_Run:
0000C590 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000C594 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000C596 D040                       		add.w	d0,d0
0000C598 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000C59C 1151 001E                  		move.b	(a1),obTimeFrame(a0) ; load frame duration
0000C5A0 7200                       		moveq	#0,d1
0000C5A2 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0000C5A6 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000C5AA 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000C5AC                            
0000C5AC                            Anim_Next:
0000C5AC 1200                       		move.b	d0,d1
0000C5AE 0200 001F                  		andi.b	#$1F,d0
0000C5B2 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0000C5B6 1028 0022                  		move.b	obStatus(a0),d0
0000C5BA E719                       		rol.b	#3,d1
0000C5BC B101                       		eor.b	d0,d1
0000C5BE 0201 0003                  		andi.b	#3,d1
0000C5C2 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0000C5C8 8328 0001                  		or.b	d1,obRender(a0)
0000C5CC 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
0000C5D0                            
0000C5D0                            Anim_Wait:
0000C5D0 4E75                       		rts	
0000C5D2                            ; ===========================================================================
0000C5D2                            
0000C5D2                            Anim_End_FF:
0000C5D2 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000C5D4 6600                       		bne.s	Anim_End_FE	; if not, branch
0000C5D6 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; restart the animation
0000C5DC 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000C5E0 60CA                       		bra.s	Anim_Next
0000C5E2                            ; ===========================================================================
0000C5E2                            
0000C5E2                            Anim_End_FE:
0000C5E2 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000C5E4 6600                       		bne.s	Anim_End_FD	; if not, branch
0000C5E6 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000C5EA 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0000C5EE 9200                       		sub.b	d0,d1
0000C5F0 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000C5F4 60B6                       		bra.s	Anim_Next
0000C5F6                            ; ===========================================================================
0000C5F6                            
0000C5F6                            Anim_End_FD:
0000C5F6 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000C5F8 6600                       		bne.s	Anim_End_FC	; if not, branch
0000C5FA 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0000C600                            
0000C600                            Anim_End_FC:
0000C600 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000C602 6600                       		bne.s	Anim_End_FB	; if not, branch
0000C604 5428 0024                  		addq.b	#2,obRoutine(a0) ; jump to next routine
0000C608                            
0000C608                            Anim_End_FB:
0000C608 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000C60A 6600                       		bne.s	Anim_End_FA	; if not, branch
0000C60C 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C612 4228 0025                  		clr.b	ob2ndRout(a0)	; reset	2nd routine counter
0000C616                            
0000C616                            Anim_End_FA:
0000C616 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000C618 6600                       		bne.s	Anim_End	; if not, branch
0000C61A 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; jump to next routine
0000C61E                            
0000C61E                            Anim_End:
0000C61E 4E75                       		rts	
0000C620                            ; End of function AnimateSprite
0000C620                            ; End of function AnimateSprite
0000C620                            
0000C620                            Map_PSB:	include	"_maps\Press Start and TM.asm"
0000C620                            ; ---------------------------------------------------------------------------
0000C620                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000C620                            ; ---------------------------------------------------------------------------
0000C620                            Map_PSB_internal:
0000C620 0000                       		dc.w byte_A7CD-Map_PSB_internal
0000C622 0000                       		dc.w M_PSB_PSB-Map_PSB_internal
0000C624 0000                       		dc.w M_PSB_Limiter-Map_PSB_internal
0000C626 0000                       		dc.w M_PSB_TM-Map_PSB_internal
0000C628 06                         M_PSB_PSB:	dc.b 6			; "PRESS START BUTTON"
0000C629 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000C62E 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000C633 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000C638 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000C63D 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000C642 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000C647 1E                         M_PSB_Limiter:	dc.b $1E		; sprite line limiter
0000C648 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C64D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C652 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C657 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C65C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C661 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C666 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C66B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C670 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C675 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C67A D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C67F D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C684 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C689 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C68E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C693 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C698 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C69D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C6A2 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C6A7 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C6AC F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C6B1 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C6B6 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C6BB F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C6C0 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C6C5 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C6CA F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C6CF F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C6D4 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C6D9 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C6DE 01                         M_PSB_TM:	dc.b 1			; "TM"
0000C6DF FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000C6E4                            		even
0000C6E4                            		even
0000C6E4                            Map_TSon:	include	"_maps\Title Screen Sonic.asm"
0000C6E4                            ; ---------------------------------------------------------------------------
0000C6E4                            ; Sprite mappings - Sonic on the title screen
0000C6E4                            ; ---------------------------------------------------------------------------
0000C6E4                            Map_TSon_internal:
0000C6E4 0000                       		dc.w byte_A898-Map_TSon_internal
0000C6E6 0000                       		dc.w byte_A8CB-Map_TSon_internal
0000C6E8 0000                       		dc.w byte_A917-Map_TSon_internal
0000C6EA 0000                       		dc.w byte_A96D-Map_TSon_internal
0000C6EC 0000                       		dc.w byte_A9AF-Map_TSon_internal
0000C6EE 0000                       		dc.w byte_A9E7-Map_TSon_internal
0000C6F0 0000                       		dc.w byte_AA47-Map_TSon_internal
0000C6F2 0000                       		dc.w byte_AAB1-Map_TSon_internal
0000C6F4 0A                         byte_A898:	dc.b $A
0000C6F5 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000C6FA 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000C6FF 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000C704 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000C709 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000C70E 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000C713 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000C718 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000C71D 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000C722 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000C727 0F                         byte_A8CB:	dc.b $F
0000C728 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000C72D 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000C732 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000C737 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000C73C 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000C741 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000C746 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000C74B 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000C750 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000C755 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000C75A 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000C75F 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000C764 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000C769 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000C76E 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000C773 11                         byte_A917:	dc.b $11
0000C774 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000C779 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000C77E 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000C783 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000C788 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000C78D 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000C792 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000C797 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000C79C 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000C7A1 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000C7A6 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000C7AB 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000C7B0 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000C7B5 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000C7BA 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000C7BF 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000C7C4 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000C7C9 0D                         byte_A96D:	dc.b $D
0000C7CA 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000C7CF 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000C7D4 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000C7D9 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000C7DE 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000C7E3 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000C7E8 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000C7ED 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000C7F2 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000C7F7 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000C7FC 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000C801 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000C806 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000C80B 0B                         byte_A9AF:	dc.b $B
0000C80C 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000C811 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000C816 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000C81B 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000C820 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000C825 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000C82A 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000C82F 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000C834 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000C839 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000C83E 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000C843 13                         byte_A9E7:	dc.b $13
0000C844 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000C849 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000C84E 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000C853 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000C858 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C85D 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C862 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C867 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C86C 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C871 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C876 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C87B 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C880 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C885 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C88A 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C88F 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C894 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C899 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C89E 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C8A3 15                         byte_AA47:	dc.b $15
0000C8A4 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000C8A9 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000C8AE 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000C8B3 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000C8B8 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000C8BD 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000C8C2 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C8C7 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C8CC 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C8D1 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C8D6 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C8DB 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C8E0 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C8E5 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C8EA 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C8EF 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C8F4 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C8F9 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C8FE 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C903 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C908 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C90D 16                         byte_AAB1:	dc.b $16
0000C90E 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000C913 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000C918 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000C91D 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000C922 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000C927 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000C92C 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000C931 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C936 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C93B 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C940 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C945 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C94A 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C94F 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C954 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C959 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C95E 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C963 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C968 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C96D 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C972 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C977 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C97C                            		even
0000C97C                            		even
0000C97C                            
0000C97C                            		include	"_incObj\2B Chopper.asm"
0000C97C                            ; ---------------------------------------------------------------------------
0000C97C                            ; Object 2B - Chopper enemy (GHZ)
0000C97C                            ; ---------------------------------------------------------------------------
0000C97C                            
0000C97C                            Chopper:
0000C97C 7000                       		moveq	#0,d0
0000C97E 1028 0024                  		move.b	obRoutine(a0),d0
0000C982 323B 0000                  		move.w	Chop_Index(pc,d0.w),d1
0000C986 4EBB 1000                  		jsr	Chop_Index(pc,d1.w)
0000C98A 6000 0000                  		bra.w	RememberState
0000C98E                            ; ===========================================================================
0000C98E 0000                       Chop_Index:	dc.w Chop_Main-Chop_Index
0000C990 0000                       		dc.w Chop_ChgSpeed-Chop_Index
0000C992                            
0000C992 =00000030                  chop_origY:	equ $30
0000C992                            ; ===========================================================================
0000C992                            
0000C992                            Chop_Main:	; Routine 0
0000C992 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C996 217C 0000 0000 0004        		move.l	#Map_Chop,obMap(a0)
0000C99E 317C 047B 0002             		move.w	#$47B,obGfx(a0)
0000C9A4 117C 0004 0001             		move.b	#4,obRender(a0)
0000C9AA 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000C9B0 117C 0009 0020             		move.b	#9,obColType(a0)
0000C9B6 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000C9BC 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000C9C2 3168 000C 0030             		move.w	obY(a0),chop_origY(a0) ; save original position
0000C9C8                            
0000C9C8                            Chop_ChgSpeed:	; Routine 2
0000C9C8 43F9 0000 0000             		lea	(Ani_Chop).l,a1
0000C9CE 6100 FBA4                  		bsr.w	AnimateSprite
0000C9D2 6100 0000                  		bsr.w	SpeedToPos
0000C9D6 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce speed
0000C9DC 3028 0030                  		move.w	chop_origY(a0),d0
0000C9E0 B068 000C                  		cmp.w	obY(a0),d0	; has Chopper returned to its original position?
0000C9E4 6400                       		bcc.s	@chganimation	; if not, branch
0000C9E6 3140 000C                  		move.w	d0,obY(a0)
0000C9EA 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000C9F0                            
0000C9F0                            	@chganimation:
0000C9F0 117C 0001 001C             		move.b	#1,obAnim(a0)	; use fast animation
0000C9F6 0440 00C0                  		subi.w	#$C0,d0
0000C9FA B068 000C                  		cmp.w	obY(a0),d0
0000C9FE 6400                       		bcc.s	@nochg
0000CA00 117C 0000 001C             		move.b	#0,obAnim(a0)	; use slow animation
0000CA06 4A68 0012                  		tst.w	obVelY(a0)	; is Chopper at	its highest point?
0000CA0A 6B00                       		bmi.s	@nochg		; if not, branch
0000CA0C 117C 0002 001C             		move.b	#2,obAnim(a0)	; use stationary animation
0000CA12                            
0000CA12                            	@nochg:
0000CA12 4E75                       		rts	
0000CA12 4E75                       		rts	
0000CA14                            		include	"_anim\Chopper.asm"
0000CA14                            ; ---------------------------------------------------------------------------
0000CA14                            ; Animation script - Chopper enemy
0000CA14                            ; ---------------------------------------------------------------------------
0000CA14 0000                       Ani_Chop:	dc.w @slow-Ani_Chop
0000CA16 0000                       		dc.w @fast-Ani_Chop
0000CA18 0000                       		dc.w @still-Ani_Chop
0000CA1A 0700 01FF                  @slow:		dc.b 7,	0, 1, afEnd
0000CA1E 0300 01FF                  @fast:		dc.b 3,	0, 1, afEnd
0000CA22 0700 FF                    @still:		dc.b 7,	0, afEnd
0000CA26 00                         		even
0000CA26 00                         		even
0000CA26                            Map_Chop:	include	"_maps\Chopper.asm"
0000CA26                            ; ---------------------------------------------------------------------------
0000CA26                            ; Sprite mappings - Chopper enemy (GHZ)
0000CA26                            ; ---------------------------------------------------------------------------
0000CA26                            Map_Chop_internal:
0000CA26 0000                       		dc.w @mouthshut-Map_Chop_internal
0000CA28 0000                       		dc.w @mouthopen-Map_Chop_internal
0000CA2A 01                         @mouthshut:	dc.b 1
0000CA2B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000CA30 01                         @mouthopen:	dc.b 1
0000CA31 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000CA36                            		even
0000CA36                            		even
0000CA36                            		include	"_incObj\2C Jaws.asm"
0000CA36                            ; ---------------------------------------------------------------------------
0000CA36                            ; Object 2C - Jaws enemy (LZ)
0000CA36                            ; ---------------------------------------------------------------------------
0000CA36                            
0000CA36                            Jaws:
0000CA36 7000                       		moveq	#0,d0
0000CA38 1028 0024                  		move.b	obRoutine(a0),d0
0000CA3C 323B 0000                  		move.w	Jaws_Index(pc,d0.w),d1
0000CA40 4EFB 1000                  		jmp	Jaws_Index(pc,d1.w)
0000CA44                            ; ===========================================================================
0000CA44 0000                       Jaws_Index:	dc.w Jaws_Main-Jaws_Index
0000CA46 0000                       		dc.w Jaws_Turn-Jaws_Index
0000CA48                            
0000CA48 =00000030                  jaws_timecount:	equ $30
0000CA48 =00000032                  jaws_timedelay:	equ $32
0000CA48                            ; ===========================================================================
0000CA48                            
0000CA48                            Jaws_Main:	; Routine 0
0000CA48 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CA4C 217C 0000 0000 0004        		move.l	#Map_Jaws,obMap(a0)
0000CA54 317C 2486 0002             		move.w	#$2486,obGfx(a0)
0000CA5A 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CA60 117C 000A 0020             		move.b	#$A,obColType(a0)
0000CA66 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CA6C 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CA72 7000                       		moveq	#0,d0
0000CA74 1028 0028                  		move.b	obSubtype(a0),d0 ; load object subtype number
0000CA78 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000CA7A 5340                       		subq.w	#1,d0
0000CA7C 3140 0030                  		move.w	d0,jaws_timecount(a0) ; set turn delay time
0000CA80 3140 0032                  		move.w	d0,jaws_timedelay(a0)
0000CA84 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move Jaws to the left
0000CA8A 0828 0000 0022             		btst	#0,obStatus(a0)	; is Jaws facing left?
0000CA90 6700                       		beq.s	Jaws_Turn	; if yes, branch
0000CA92 4468 0010                  		neg.w	obVelX(a0)	; move Jaws to the right
0000CA96                            
0000CA96                            Jaws_Turn:	; Routine 2
0000CA96 5368 0030                  		subq.w	#1,jaws_timecount(a0) ; subtract 1 from turn delay time
0000CA9A 6A00                       		bpl.s	@animate	; if time remains, branch
0000CA9C 3168 0032 0030             		move.w	jaws_timedelay(a0),jaws_timecount(a0) ; reset turn delay time
0000CAA2 4468 0010                  		neg.w	obVelX(a0)	; change speed direction
0000CAA6 0868 0000 0022             		bchg	#0,obStatus(a0)	; change Jaws facing direction
0000CAAC 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000CAB2                            
0000CAB2                            	@animate:
0000CAB2 43F9 0000 0000             		lea	(Ani_Jaws).l,a1
0000CAB8 6100 FABA                  		bsr.w	AnimateSprite
0000CABC 6100 0000                  		bsr.w	SpeedToPos
0000CAC0 6000 0000                  		bra.w	RememberState
0000CAC0 6000 0000                  		bra.w	RememberState
0000CAC4                            		include	"_anim\Jaws.asm"
0000CAC4                            ; ---------------------------------------------------------------------------
0000CAC4                            ; Animation script - Jaws enemy
0000CAC4                            ; ---------------------------------------------------------------------------
0000CAC4 0000                       Ani_Jaws:	dc.w @swim-Ani_Jaws
0000CAC6 0700 0102 03FF             @swim:		dc.b 7,	0, 1, 2, 3, afEnd
0000CACC                            		even
0000CACC                            		even
0000CACC                            Map_Jaws:	include	"_maps\Jaws.asm"
0000CACC                            ; --------------------------------------------------------------------------------
0000CACC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CACC                            ; --------------------------------------------------------------------------------
0000CACC                            
0000CACC                            SME_O5C0c:	
0000CACC 0000 0000                  		dc.w SME_O5C0c_8-SME_O5C0c, SME_O5C0c_13-SME_O5C0c	
0000CAD0 0000 0000                  		dc.w SME_O5C0c_1E-SME_O5C0c, SME_O5C0c_29-SME_O5C0c	
0000CAD4 02                         SME_O5C0c_8:	dc.b 2	
0000CAD5 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CADA F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CADF 02                         SME_O5C0c_13:	dc.b 2	
0000CAE0 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CAE5 F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CAEA 02                         SME_O5C0c_1E:	dc.b 2	
0000CAEB F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CAF0 F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CAF5 02                         SME_O5C0c_29:	dc.b 2	
0000CAF6 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CAFB F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CB00                            		even
0000CB00                            		even
0000CB00                            		include	"_incObj\2D Burrobot.asm"
0000CB00                            ; ---------------------------------------------------------------------------
0000CB00                            ; Object 2D - Burrobot enemy (LZ)
0000CB00                            ; ---------------------------------------------------------------------------
0000CB00                            
0000CB00                            Burrobot:
0000CB00 7000                       		moveq	#0,d0
0000CB02 1028 0024                  		move.b	obRoutine(a0),d0
0000CB06 323B 0000                  		move.w	Burro_Index(pc,d0.w),d1
0000CB0A 4EFB 1000                  		jmp	Burro_Index(pc,d1.w)
0000CB0E                            ; ===========================================================================
0000CB0E 0000                       Burro_Index:	dc.w Burro_Main-Burro_Index
0000CB10 0000                       		dc.w Burro_Action-Burro_Index
0000CB12                            
0000CB12 =00000030                  burro_timedelay:	equ $30		; time between direction changes
0000CB12                            ; ===========================================================================
0000CB12                            
0000CB12                            Burro_Main:	; Routine 0
0000CB12 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CB16 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000CB1C 117C 0008 0017             		move.b	#8,obWidth(a0)
0000CB22 217C 0000 0000 0004        		move.l	#Map_Burro,obMap(a0)
0000CB2A 317C 04A6 0002             		move.w	#$4A6,obGfx(a0)
0000CB30 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CB36 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CB3C 117C 0005 0020             		move.b	#5,obColType(a0)
0000CB42 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000CB48 5C28 0025                  		addq.b	#6,ob2ndRout(a0) ; run "Burro_ChkSonic" routine
0000CB4C 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CB52                            
0000CB52                            Burro_Action:	; Routine 2
0000CB52 7000                       		moveq	#0,d0
0000CB54 1028 0025                  		move.b	ob2ndRout(a0),d0
0000CB58 323B 0000                  		move.w	@index(pc,d0.w),d1
0000CB5C 4EBB 1000                  		jsr	@index(pc,d1.w)
0000CB60 43F9 0000 0000             		lea	(Ani_Burro).l,a1
0000CB66 6100 FA0C                  		bsr.w	AnimateSprite
0000CB6A 6000 0000                  		bra.w	RememberState
0000CB6E                            ; ===========================================================================
0000CB6E 0000                       @index:		dc.w @changedir-@index
0000CB70 0000                       		dc.w Burro_Move-@index
0000CB72 0000                       		dc.w Burro_Jump-@index
0000CB74 0000                       		dc.w Burro_ChkSonic-@index
0000CB76                            ; ===========================================================================
0000CB76                            
0000CB76                            @changedir:
0000CB76 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CB7A 6A00                       		bpl.s	@nochg
0000CB7C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CB80 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CB86 317C 0080 0010             		move.w	#$80,obVelX(a0)
0000CB8C 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CB92 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction the Burrobot	is facing
0000CB98 6700                       		beq.s	@nochg
0000CB9A 4468 0010                  		neg.w	obVelX(a0)	; change direction the Burrobot	is moving
0000CB9E                            
0000CB9E                            	@nochg:
0000CB9E 4E75                       		rts	
0000CBA0                            ; ===========================================================================
0000CBA0                            
0000CBA0                            Burro_Move:
0000CBA0 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CBA4 6B00                       		bmi.s	loc_AD84
0000CBA6 6100 0000                  		bsr.w	SpeedToPos
0000CBAA 0868 0000 0032             		bchg	#0,$32(a0)
0000CBB0 6600                       		bne.s	loc_AD78
0000CBB2 3628 0008                  		move.w	obX(a0),d3
0000CBB6 0643 000C                  		addi.w	#$C,d3
0000CBBA 0828 0000 0022             		btst	#0,obStatus(a0)
0000CBC0 6600                       		bne.s	loc_AD6A
0000CBC2 0443 0018                  		subi.w	#$18,d3
0000CBC6                            
0000CBC6                            loc_AD6A:
0000CBC6 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000CBCC 0C41 000C                  		cmpi.w	#$C,d1
0000CBD0 6C00                       		bge.s	loc_AD84
0000CBD2 4E75                       		rts	
0000CBD4                            ; ===========================================================================
0000CBD4                            
0000CBD4                            loc_AD78:
0000CBD4 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CBDA D368 000C                  		add.w	d1,obY(a0)
0000CBDE 4E75                       		rts	
0000CBE0                            ; ===========================================================================
0000CBE0                            
0000CBE0                            loc_AD84:
0000CBE0 0838 0002 FE0F             		btst	#2,(v_vbla_byte).w
0000CBE6 6700                       		beq.s	loc_ADA4
0000CBE8 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CBEC 317C 003B 0030             		move.w	#59,burro_timedelay(a0)
0000CBF2 317C 0000 0010             		move.w	#0,obVelX(a0)
0000CBF8 117C 0000 001C             		move.b	#0,obAnim(a0)
0000CBFE 4E75                       		rts	
0000CC00                            ; ===========================================================================
0000CC00                            
0000CC00                            loc_ADA4:
0000CC00 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CC04 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CC0A 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CC10 4E75                       		rts	
0000CC12                            ; ===========================================================================
0000CC12                            
0000CC12                            Burro_Jump:
0000CC12 6100 0000                  		bsr.w	SpeedToPos
0000CC16 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000CC1C 6B00                       		bmi.s	locret_ADF0
0000CC1E 117C 0003 001C             		move.b	#3,obAnim(a0)
0000CC24 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CC2A 4A41                       		tst.w	d1
0000CC2C 6A00                       		bpl.s	locret_ADF0
0000CC2E D368 000C                  		add.w	d1,obY(a0)
0000CC32 317C 0000 0012             		move.w	#0,obVelY(a0)
0000CC38 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CC3E 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CC44 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CC48 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CC4C                            
0000CC4C                            locret_ADF0:
0000CC4C 4E75                       		rts	
0000CC4E                            ; ===========================================================================
0000CC4E                            
0000CC4E                            Burro_ChkSonic:
0000CC4E 343C 0060                  		move.w	#$60,d2
0000CC52 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CC56 6400                       		bcc.s	locret_AE20
0000CC58 3038 D00C                  		move.w	(v_player+obY).w,d0
0000CC5C 9068 000C                  		sub.w	obY(a0),d0
0000CC60 6400                       		bcc.s	locret_AE20
0000CC62 0C40 FF80                  		cmpi.w	#-$80,d0
0000CC66 6500                       		bcs.s	locret_AE20
0000CC68 4A78 FE08                  		tst.w	(v_debuguse).w
0000CC6C 6600                       		bne.s	locret_AE20
0000CC6E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CC72 3141 0010                  		move.w	d1,obVelX(a0)
0000CC76 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CC7C                            
0000CC7C                            locret_AE20:
0000CC7C 4E75                       		rts	
0000CC7E                            
0000CC7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CC7E                            
0000CC7E                            
0000CC7E                            Burro_ChkSonic2:
0000CC7E 323C 0080                  		move.w	#$80,d1
0000CC82 08E8 0000 0022             		bset	#0,obStatus(a0)
0000CC88 3038 D008                  		move.w	(v_player+obX).w,d0
0000CC8C 9068 0008                  		sub.w	obX(a0),d0
0000CC90 6400                       		bcc.s	loc_AE40
0000CC92 4440                       		neg.w	d0
0000CC94 4441                       		neg.w	d1
0000CC96 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000CC9C                            
0000CC9C                            loc_AE40:
0000CC9C B042                       		cmp.w	d2,d0
0000CC9E 4E75                       		rts	
0000CCA0                            ; End of function Burro_ChkSonic2
0000CCA0                            ; End of function Burro_ChkSonic2
0000CCA0                            		include	"_anim\Burrobot.asm"
0000CCA0                            ; ---------------------------------------------------------------------------
0000CCA0                            ; Animation script - Burrobot enemy
0000CCA0                            ; ---------------------------------------------------------------------------
0000CCA0 0000                       Ani_Burro:	dc.w @walk1-Ani_Burro
0000CCA2 0000                       		dc.w @walk2-Ani_Burro
0000CCA4 0000                       		dc.w @digging-Ani_Burro
0000CCA6 0000                       		dc.w @fall-Ani_Burro
0000CCA8 0300 06FF                  @walk1:		dc.b 3,	0, 6, afEnd
0000CCAC 0300 01FF                  @walk2:		dc.b 3,	0, 1, afEnd
0000CCB0 0302 03FF                  @digging:	dc.b 3,	2, 3, afEnd
0000CCB4 0304 FF                    @fall:		dc.b 3,	4, afEnd
0000CCB8 00                         		even
0000CCB8 00                         		even
0000CCB8                            Map_Burro:	include	"_maps\Burrobot.asm"
0000CCB8                            ; --------------------------------------------------------------------------------
0000CCB8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CCB8                            ; --------------------------------------------------------------------------------
0000CCB8                            
0000CCB8                            SME_Ag_86:	
0000CCB8 0000 0000                  		dc.w SME_Ag_86_E-SME_Ag_86, SME_Ag_86_19-SME_Ag_86	
0000CCBC 0000 0000                  		dc.w SME_Ag_86_24-SME_Ag_86, SME_Ag_86_2F-SME_Ag_86	
0000CCC0 0000 0000                  		dc.w SME_Ag_86_3A-SME_Ag_86, SME_Ag_86_45-SME_Ag_86	
0000CCC4 0000                       		dc.w SME_Ag_86_50-SME_Ag_86	
0000CCC6 02                         SME_Ag_86_E:	dc.b 2	
0000CCC7 EC0A 2000 F0               		dc.b $EC, $A, $20, 0, $F0	
0000CCCC 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000CCD1 02                         SME_Ag_86_19:	dc.b 2	
0000CCD2 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000CCD7 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000CCDC 02                         SME_Ag_86_24:	dc.b 2	
0000CCDD E80A 201E F4               		dc.b $E8, $A, $20, $1E, $F4	
0000CCE2 000A 2027 F4               		dc.b 0, $A, $20, $27, $F4	
0000CCE7 02                         SME_Ag_86_2F:	dc.b 2	
0000CCE8 E80A 2030 F4               		dc.b $E8, $A, $20, $30, $F4	
0000CCED 000A 2039 F4               		dc.b 0, $A, $20, $39, $F4	
0000CCF2 02                         SME_Ag_86_3A:	dc.b 2	
0000CCF3 E80A 200F F0               		dc.b $E8, $A, $20, $F, $F0	
0000CCF8 000A 2042 F4               		dc.b 0, $A, $20, $42, $F4	
0000CCFD 02                         SME_Ag_86_45:	dc.b 2	
0000CCFE F406 204B E8               		dc.b $F4, 6, $20, $4B, $E8	
0000CD03 F40A 2051 F8               		dc.b $F4, $A, $20, $51, $F8	
0000CD08 02                         SME_Ag_86_50:	dc.b 2	
0000CD09 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000CD0E 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000CD14 00                         		even
0000CD14 00                         		even
0000CD14                            
0000CD14                            		include	"_incObj\2F MZ Large Grassy Platforms.asm"
0000CD14                            ; ---------------------------------------------------------------------------
0000CD14                            ; Object 2F - large grass-covered platforms (MZ)
0000CD14                            ; ---------------------------------------------------------------------------
0000CD14                            
0000CD14                            LargeGrass:
0000CD14 7000                       		moveq	#0,d0
0000CD16 1028 0024                  		move.b	obRoutine(a0),d0
0000CD1A 323B 0000                  		move.w	LGrass_Index(pc,d0.w),d1
0000CD1E 4EFB 1000                  		jmp	LGrass_Index(pc,d1.w)
0000CD22                            ; ===========================================================================
0000CD22 0000                       LGrass_Index:	dc.w LGrass_Main-LGrass_Index
0000CD24 0000                       		dc.w LGrass_Action-LGrass_Index
0000CD26                            
0000CD26 =0000002A                  lgrass_origX:	equ $2A
0000CD26 =0000002C                  lgrass_origY:	equ $2C
0000CD26                            
0000CD26 0000                       LGrass_Data:	dc.w LGrass_Data1-LGrass_Data 	; collision angle data
0000CD28 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000CD2A 0000                       		dc.w LGrass_Data3-LGrass_Data
0000CD2C 0140                       		dc.b 1,	$40
0000CD2E 0000                       		dc.w LGrass_Data2-LGrass_Data
0000CD30 0220                       		dc.b 2,	$20
0000CD32                            ; ===========================================================================
0000CD32                            
0000CD32                            LGrass_Main:	; Routine 0
0000CD32 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CD36 217C 0000 0000 0004        		move.l	#Map_LGrass,obMap(a0)
0000CD3E 317C C000 0002             		move.w	#$C000,obGfx(a0)
0000CD44 117C 0004 0001             		move.b	#4,obRender(a0)
0000CD4A 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CD50 3168 000C 002C             		move.w	obY(a0),lgrass_origY(a0)
0000CD56 3168 0008 002A             		move.w	obX(a0),lgrass_origX(a0)
0000CD5C 7000                       		moveq	#0,d0
0000CD5E 1028 0028                  		move.b	obSubtype(a0),d0
0000CD62 E448                       		lsr.w	#2,d0
0000CD64 0240 001C                  		andi.w	#$1C,d0
0000CD68 43FB 00BC                  		lea	LGrass_Data(pc,d0.w),a1
0000CD6C 3019                       		move.w	(a1)+,d0
0000CD6E 45FB 00B6                  		lea	LGrass_Data(pc,d0.w),a2
0000CD72 214A 0030                  		move.l	a2,$30(a0)
0000CD76 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000CD7A 1151 0014                  		move.b	(a1),obActWid(a0)
0000CD7E 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000CD84 117C 0040 0016             		move.b	#$40,obHeight(a0)
0000CD8A 08E8 0004 0001             		bset	#4,1(a0)
0000CD90                            
0000CD90                            LGrass_Action:	; Routine 2
0000CD90 6100 0000                  		bsr.w	LGrass_Types
0000CD94 4A28 0025                  		tst.b	ob2ndRout(a0)
0000CD98 6700                       		beq.s	LGrass_Solid
0000CD9A 7200                       		moveq	#0,d1
0000CD9C 1228 0014                  		move.b	obActWid(a0),d1
0000CDA0 0641 000B                  		addi.w	#$B,d1
0000CDA4 6100 BF46                  		bsr.w	ExitPlatform
0000CDA8 0829 0003 0022             		btst	#3,obStatus(a1)
0000CDAE 6600 0000                  		bne.w	LGrass_Slope
0000CDB2 4228 0025                  		clr.b	ob2ndRout(a0)
0000CDB6 6000                       		bra.s	LGrass_Display
0000CDB8                            ; ===========================================================================
0000CDB8                            
0000CDB8                            LGrass_Slope:
0000CDB8 7200                       		moveq	#0,d1
0000CDBA 1228 0014                  		move.b	obActWid(a0),d1
0000CDBE 0641 000B                  		addi.w	#$B,d1
0000CDC2 2468 0030                  		movea.l	$30(a0),a2
0000CDC6 3428 0008                  		move.w	obX(a0),d2
0000CDCA 6100 CEBA                  		bsr.w	SlopeObject2
0000CDCE 6000                       		bra.s	LGrass_Display
0000CDD0                            ; ===========================================================================
0000CDD0                            
0000CDD0                            LGrass_Solid:
0000CDD0 7200                       		moveq	#0,d1
0000CDD2 1228 0014                  		move.b	obActWid(a0),d1
0000CDD6 0641 000B                  		addi.w	#$B,d1
0000CDDA 343C 0020                  		move.w	#$20,d2
0000CDDE 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000CDE4 6600                       		bne.s	loc_AF8E
0000CDE6 343C 0030                  		move.w	#$30,d2
0000CDEA                            
0000CDEA                            loc_AF8E:
0000CDEA 2468 0030                  		movea.l	$30(a0),a2
0000CDEE 6100 0000                  		bsr.w	SolidObject2F
0000CDF2                            
0000CDF2                            LGrass_Display:
0000CDF2 6100 0000                  		bsr.w	DisplaySprite
0000CDF6 6000 0000                  		bra.w	LGrass_ChkDel
0000CDFA                            
0000CDFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CDFA                            
0000CDFA                            
0000CDFA                            LGrass_Types:
0000CDFA 7000                       		moveq	#0,d0
0000CDFC 1028 0028                  		move.b	obSubtype(a0),d0
0000CE00 0240 0007                  		andi.w	#7,d0
0000CE04 D040                       		add.w	d0,d0
0000CE06 323B 0000                  		move.w	LGrass_TypeIndex(pc,d0.w),d1
0000CE0A 4EFB 1000                  		jmp	LGrass_TypeIndex(pc,d1.w)
0000CE0E                            ; End of function LGrass_Types
0000CE0E                            
0000CE0E                            ; ===========================================================================
0000CE0E 0000                       LGrass_TypeIndex:dc.w LGrass_Type00-LGrass_TypeIndex
0000CE10 0000                       		dc.w LGrass_Type01-LGrass_TypeIndex
0000CE12 0000                       		dc.w LGrass_Type02-LGrass_TypeIndex
0000CE14 0000                       		dc.w LGrass_Type03-LGrass_TypeIndex
0000CE16 0000                       		dc.w LGrass_Type04-LGrass_TypeIndex
0000CE18 0000                       		dc.w LGrass_Type05-LGrass_TypeIndex
0000CE1A                            ; ===========================================================================
0000CE1A                            
0000CE1A                            LGrass_Type00:
0000CE1A 4E75                       		rts			; type 00 platform doesn't move
0000CE1C                            ; ===========================================================================
0000CE1C                            
0000CE1C                            LGrass_Type01:
0000CE1C 1038 FE60                  		move.b	(v_oscillate+2).w,d0
0000CE20 323C 0020                  		move.w	#$20,d1
0000CE24 6000                       		bra.s	LGrass_Move
0000CE26                            ; ===========================================================================
0000CE26                            
0000CE26                            LGrass_Type02:
0000CE26 1038 FE64                  		move.b	(v_oscillate+6).w,d0
0000CE2A 323C 0030                  		move.w	#$30,d1
0000CE2E 6000                       		bra.s	LGrass_Move
0000CE30                            ; ===========================================================================
0000CE30                            
0000CE30                            LGrass_Type03:
0000CE30 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0000CE34 323C 0040                  		move.w	#$40,d1
0000CE38 6000                       		bra.s	LGrass_Move
0000CE3A                            ; ===========================================================================
0000CE3A                            
0000CE3A                            LGrass_Type04:
0000CE3A 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0000CE3E 323C 0060                  		move.w	#$60,d1
0000CE42                            
0000CE42                            LGrass_Move:
0000CE42 0828 0003 0028             		btst	#3,obSubtype(a0)
0000CE48 6700                       		beq.s	loc_AFF2
0000CE4A 4440                       		neg.w	d0
0000CE4C D041                       		add.w	d1,d0
0000CE4E                            
0000CE4E                            loc_AFF2:
0000CE4E 3228 002C                  		move.w	lgrass_origY(a0),d1
0000CE52 9240                       		sub.w	d0,d1
0000CE54 3141 000C                  		move.w	d1,obY(a0)	; update position on y-axis
0000CE58 4E75                       		rts	
0000CE5A                            ; ===========================================================================
0000CE5A                            
0000CE5A                            LGrass_Type05:
0000CE5A 1028 0034                  		move.b	$34(a0),d0
0000CE5E 4A28 0025                  		tst.b	ob2ndRout(a0)
0000CE62 6600                       		bne.s	loc_B010
0000CE64 5500                       		subq.b	#2,d0
0000CE66 6400                       		bcc.s	loc_B01C
0000CE68 7000                       		moveq	#0,d0
0000CE6A 6000                       		bra.s	loc_B01C
0000CE6C                            ; ===========================================================================
0000CE6C                            
0000CE6C                            loc_B010:
0000CE6C 5800                       		addq.b	#4,d0
0000CE6E 0C00 0040                  		cmpi.b	#$40,d0
0000CE72 6500                       		bcs.s	loc_B01C
0000CE74 103C 0040                  		move.b	#$40,d0
0000CE78                            
0000CE78                            loc_B01C:
0000CE78 1140 0034                  		move.b	d0,$34(a0)
0000CE7C 4EB9 0000 3BA2             		jsr	(CalcSine).l
0000CE82 E848                       		lsr.w	#4,d0
0000CE84 3200                       		move.w	d0,d1
0000CE86 D068 002C                  		add.w	lgrass_origY(a0),d0
0000CE8A 3140 000C                  		move.w	d0,obY(a0)
0000CE8E 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000CE94 6600                       		bne.s	loc_B07A
0000CE96 4A28 0035                  		tst.b	$35(a0)
0000CE9A 6600                       		bne.s	loc_B07A
0000CE9C 117C 0001 0035             		move.b	#1,$35(a0)
0000CEA2 6100 0000                  		bsr.w	FindNextFreeObj
0000CEA6 6600                       		bne.s	loc_B07A
0000CEA8 12BC 0000                  		move.b	#id_GrassFire,0(a1) ; load sitting flame object
0000CEAC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000CEB2 3368 002C 002C             		move.w	lgrass_origY(a0),lgrass_origY(a1)
0000CEB8 5069 002C                  		addq.w	#8,lgrass_origY(a1)
0000CEBC 5769 002C                  		subq.w	#3,lgrass_origY(a1)
0000CEC0 0469 0040 0008             		subi.w	#$40,obX(a1)
0000CEC6 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000CECC 2348 0038                  		move.l	a0,$38(a1)
0000CED0 2448                       		movea.l	a0,a2
0000CED2 6100                       		bsr.s	sub_B09C
0000CED4                            
0000CED4                            loc_B07A:
0000CED4 7400                       		moveq	#0,d2
0000CED6 45E8 0036                  		lea	$36(a0),a2
0000CEDA 141A                       		move.b	(a2)+,d2
0000CEDC 5302                       		subq.b	#1,d2
0000CEDE 6500                       		bcs.s	locret_B09A
0000CEE0                            
0000CEE0                            loc_B086:
0000CEE0 7000                       		moveq	#0,d0
0000CEE2 101A                       		move.b	(a2)+,d0
0000CEE4 ED48                       		lsl.w	#6,d0
0000CEE6 0640 D000                  		addi.w	#$D000,d0
0000CEEA 3240                       		movea.w	d0,a1
0000CEEC 3341 003C                  		move.w	d1,$3C(a1)
0000CEF0 51CA FFEE                  		dbf	d2,loc_B086
0000CEF4                            
0000CEF4                            locret_B09A:
0000CEF4 4E75                       		rts	
0000CEF6                            
0000CEF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CEF6                            
0000CEF6                            
0000CEF6                            sub_B09C:
0000CEF6 45EA 0036                  		lea	$36(a2),a2
0000CEFA 7000                       		moveq	#0,d0
0000CEFC 1012                       		move.b	(a2),d0
0000CEFE 5212                       		addq.b	#1,(a2)
0000CF00 45F2 0001                  		lea	1(a2,d0.w),a2
0000CF04 3009                       		move.w	a1,d0
0000CF06 0440 D000                  		subi.w	#$D000,d0
0000CF0A EC48                       		lsr.w	#6,d0
0000CF0C 0240 007F                  		andi.w	#$7F,d0
0000CF10 1480                       		move.b	d0,(a2)
0000CF12 4E75                       		rts	
0000CF14                            ; End of function sub_B09C
0000CF14                            
0000CF14                            ; ===========================================================================
0000CF14                            
0000CF14                            LGrass_ChkDel:
0000CF14 4A28 0035                  		tst.b	$35(a0)
0000CF18 6700                       		beq.s	loc_B0C6
0000CF1A 4A28 0001                  		tst.b	obRender(a0)
0000CF1E 6A00                       		bpl.s	LGrass_DelFlames
0000CF20                            
0000CF20                            loc_B0C6:
0000CF3E 4E75                       		rts	
0000CF40                            ; ===========================================================================
0000CF40                            
0000CF40                            LGrass_DelFlames:
0000CF40 7400                       		moveq	#0,d2
0000CF42                            
0000CF42                            loc_B0E8:
0000CF42 45E8 0036                  		lea	$36(a0),a2
0000CF46 1412                       		move.b	(a2),d2
0000CF48 421A                       		clr.b	(a2)+
0000CF4A 5302                       		subq.b	#1,d2
0000CF4C 6500                       		bcs.s	locret_B116
0000CF4E                            
0000CF4E                            loc_B0F4:
0000CF4E 7000                       		moveq	#0,d0
0000CF50 1012                       		move.b	(a2),d0
0000CF52 421A                       		clr.b	(a2)+
0000CF54 ED48                       		lsl.w	#6,d0
0000CF56 0640 D000                  		addi.w	#$D000,d0
0000CF5A 3240                       		movea.w	d0,a1
0000CF5C 6100 0000                  		bsr.w	DeleteChild
0000CF60 51CA FFEC                  		dbf	d2,loc_B0F4
0000CF64 117C 0000 0035             		move.b	#0,$35(a0)
0000CF6A 117C 0000 0034             		move.b	#0,$34(a0)
0000CF70                            
0000CF70                            locret_B116:
0000CF70 4E75                       		rts	
0000CF72                            ; ===========================================================================
0000CF72                            ; ---------------------------------------------------------------------------
0000CF72                            ; Collision data for large moving platforms (MZ)
0000CF72                            ; ---------------------------------------------------------------------------
0000CF72                            LGrass_Data1:	incbin	"misc\mz_pfm1.bin"
0000CFBE                            		even
0000CFBE                            LGrass_Data2:	incbin	"misc\mz_pfm2.bin"
0000CFEA                            		even
0000CFEA                            LGrass_Data3:	incbin	"misc\mz_pfm3.bin"
0000D036                            		even
0000D036                            		even
0000D036                            		include	"_incObj\35 Burning Grass.asm"
0000D036                            ; ---------------------------------------------------------------------------
0000D036                            ; Object 35 - fireball that sits on the	floor (MZ)
0000D036                            ; (appears when	you walk on sinking platforms)
0000D036                            ; ---------------------------------------------------------------------------
0000D036                            
0000D036                            GrassFire:
0000D036 7000                       		moveq	#0,d0
0000D038 1028 0024                  		move.b	obRoutine(a0),d0
0000D03C 323B 0000                  		move.w	GFire_Index(pc,d0.w),d1
0000D040 4EFB 1000                  		jmp	GFire_Index(pc,d1.w)
0000D044                            ; ===========================================================================
0000D044 0000                       GFire_Index:	dc.w GFire_Main-GFire_Index
0000D046 0000                       		dc.w loc_B238-GFire_Index
0000D048 0000                       		dc.w GFire_Move-GFire_Index
0000D04A                            
0000D04A =0000002A                  gfire_origX:	equ $2A
0000D04A                            ; ===========================================================================
0000D04A                            
0000D04A                            GFire_Main:	; Routine 0
0000D04A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D04E 217C 0000 0000 0004        		move.l	#Map_Fire,obMap(a0)
0000D056 317C 0345 0002             		move.w	#$345,obGfx(a0)
0000D05C 3168 0008 002A             		move.w	obX(a0),gfire_origX(a0)
0000D062 117C 0004 0001             		move.b	#4,obRender(a0)
0000D068 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000D06E 117C 008B 0020             		move.b	#$8B,obColType(a0)
0000D074 117C 0008 0014             		move.b	#8,obActWid(a0)
0000D084 4A28 0028                  		tst.b	obSubtype(a0)
0000D088 6700                       		beq.s	loc_B238
0000D08A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D08E 6000 0000                  		bra.w	GFire_Move
0000D092                            ; ===========================================================================
0000D092                            
0000D092                            loc_B238:	; Routine 2
0000D092 2268 0030                  		movea.l	$30(a0),a1
0000D096 3228 0008                  		move.w	obX(a0),d1
0000D09A 9268 002A                  		sub.w	gfire_origX(a0),d1
0000D09E 0641 000C                  		addi.w	#$C,d1
0000D0A2 3001                       		move.w	d1,d0
0000D0A4 E248                       		lsr.w	#1,d0
0000D0A6 1031 0000                  		move.b	(a1,d0.w),d0
0000D0AA 4440                       		neg.w	d0
0000D0AC D068 002C                  		add.w	$2C(a0),d0
0000D0B0 3400                       		move.w	d0,d2
0000D0B2 D068 003C                  		add.w	$3C(a0),d0
0000D0B6 3140 000C                  		move.w	d0,obY(a0)
0000D0BA 0C41 0084                  		cmpi.w	#$84,d1
0000D0BE 6400                       		bcc.s	loc_B2B0
0000D0C0 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000D0C8 0C41 0080                  		cmpi.w	#$80,d1
0000D0CC 6400                       		bcc.s	loc_B2B0
0000D0CE 2028 0008                  		move.l	obX(a0),d0
0000D0D2 0680 0008 0000             		addi.l	#$80000,d0
0000D0D8 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000D0DE 6600                       		bne.s	loc_B2B0
0000D0E0 6100 0000                  		bsr.w	FindNextFreeObj
0000D0E4 6600                       		bne.s	loc_B2B0
0000D0E6 12BC 0000                  		move.b	#id_GrassFire,0(a1)
0000D0EA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D0F0 3342 002C                  		move.w	d2,$2C(a1)
0000D0F4 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000D0FA 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000D100 2468 0038                  		movea.l	$38(a0),a2
0000D104 6100 FDF0                  		bsr.w	sub_B09C
0000D108                            
0000D108                            loc_B2B0:
0000D108 6000                       		bra.s	GFire_Animate
0000D10A                            ; ===========================================================================
0000D10A                            
0000D10A                            GFire_Move:	; Routine 4
0000D10A 3028 002C                  		move.w	$2C(a0),d0
0000D10E D068 003C                  		add.w	$3C(a0),d0
0000D112 3140 000C                  		move.w	d0,obY(a0)
0000D116                            
0000D116                            GFire_Animate:
0000D116 43F9 0000 0000             		lea	(Ani_GFire).l,a1
0000D11C 6100 F456                  		bsr.w	AnimateSprite
0000D120 6000 0000                  		bra.w	DisplaySprite
0000D120 6000 0000                  		bra.w	DisplaySprite
0000D124                            		include	"_anim\Burning Grass.asm"
0000D124                            ; ---------------------------------------------------------------------------
0000D124                            ; Animation script - burning grass that sits on the floor (MZ)
0000D124                            ; ---------------------------------------------------------------------------
0000D124 0000                       Ani_GFire:	dc.w @burn-Ani_GFire
0000D126 0500 2001 21FF             @burn:		dc.b 5,	0, $20,	1, $21,	afEnd
0000D12C                            		even
0000D12C                            		even
0000D12C                            Map_LGrass:	include	"_maps\MZ Large Grassy Platforms.asm"
0000D12C                            ; ---------------------------------------------------------------------------
0000D12C                            ; Sprite mappings - large moving grass-covered platforms (MZ)
0000D12C                            ; ---------------------------------------------------------------------------
0000D12C                            Map_LGrass_internal:
0000D12C 0000                       		dc.w @wide-Map_LGrass_internal
0000D12E 0000                       		dc.w @sloped-Map_LGrass_internal
0000D130 0000                       		dc.w @narrow-Map_LGrass_internal
0000D132 0D                         @wide:		dc.b $D
0000D133 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0 ; wide platform
0000D138 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000D13D 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D142 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000D147 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000D14C F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D151 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000D156 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000D15B F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000D160 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D165 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000D16A D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000D16F F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000D174 0A                         @sloped:	dc.b $A
0000D175 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0 ; sloped platform (catches fire)
0000D17A F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000D17F 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D184 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000D189 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000D18E F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D193 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000D198 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000D19D C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000D1A2 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000D1A7 06                         @narrow:	dc.b 6
0000D1A8 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0 ; narrow platform
0000D1AD F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D1B2 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000D1B7 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000D1BC F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D1C1 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000D1C6                            		even
0000D1C6                            		even
0000D1C6                            Map_Fire:	include	"_maps\Fireballs.asm"
0000D1C6                            ; --------------------------------------------------------------------------------
0000D1C6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D1C6                            ; --------------------------------------------------------------------------------
0000D1C6                            
0000D1C6                            SME_gyvTV:	
0000D1C6 0000 0000                  		dc.w SME_gyvTV_C-SME_gyvTV, SME_gyvTV_12-SME_gyvTV	
0000D1CA 0000 0000                  		dc.w SME_gyvTV_18-SME_gyvTV, SME_gyvTV_1E-SME_gyvTV	
0000D1CE 0000 0000                  		dc.w SME_gyvTV_24-SME_gyvTV, SME_gyvTV_2A-SME_gyvTV	
0000D1D2 01                         SME_gyvTV_C:	dc.b 1	
0000D1D3 E807 6000 F8               		dc.b $E8, 7, $60, 0, $F8	
0000D1D8 01                         SME_gyvTV_12:	dc.b 1	
0000D1D9 E807 6008 F8               		dc.b $E8, 7, $60, 8, $F8	
0000D1DE 01                         SME_gyvTV_18:	dc.b 1	
0000D1DF F006 6010 F8               		dc.b $F0, 6, $60, $10, $F8	
0000D1E4 01                         SME_gyvTV_1E:	dc.b 1	
0000D1E5 F80D 6016 E8               		dc.b $F8, $D, $60, $16, $E8	
0000D1EA 01                         SME_gyvTV_24:	dc.b 1	
0000D1EB F80D 601E E8               		dc.b $F8, $D, $60, $1E, $E8	
0000D1F0 01                         SME_gyvTV_2A:	dc.b 1	
0000D1F1 F809 6026 F0               		dc.b $F8, 9, $60, $26, $F0	
0000D1F6                            		even
0000D1F6                            		even
0000D1F6                            		include	"_incObj\30 MZ Large Green Glass Blocks.asm"
0000D1F6                            ; ---------------------------------------------------------------------------
0000D1F6                            ; Object 30 - large green glass blocks (MZ)
0000D1F6                            ; ---------------------------------------------------------------------------
0000D1F6                            
0000D1F6                            GlassBlock:
0000D1F6 7000                       		moveq	#0,d0
0000D1F8 1028 0024                  		move.b	obRoutine(a0),d0
0000D1FC 323B 0000                  		move.w	Glass_Index(pc,d0.w),d1
0000D200 4EBB 1000                  		jsr	Glass_Index(pc,d1.w)
0000D222 6000 0000                  		bra.w	DisplaySprite
0000D226                            ; ===========================================================================
0000D226                            
0000D226                            Glass_Delete:
0000D226 6000 0000                  		bra.w	DeleteObject
0000D22A                            ; ===========================================================================
0000D22A 0000                       Glass_Index:	dc.w Glass_Main-Glass_Index
0000D22C 0000                       		dc.w Glass_Block012-Glass_Index
0000D22E 0000                       		dc.w Glass_Reflect012-Glass_Index
0000D230 0000                       		dc.w Glass_Block34-Glass_Index
0000D232 0000                       		dc.w Glass_Reflect34-Glass_Index
0000D234                            
0000D234 =00000032                  glass_dist:	equ $32		; distance block moves when switch is pressed
0000D234 =0000003C                  glass_parent:	equ $3C		; address of parent object
0000D234                            
0000D234 0200 00                    Glass_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000D237 0400 01                    		dc.b 4,	0, 1
0000D23A 0600 02                    Glass_Vars2:	dc.b 6,	0, 2
0000D23D 0800 01                    		dc.b 8,	0, 1
0000D240                            ; ===========================================================================
0000D240                            
0000D240                            Glass_Main:	; Routine 0
0000D240 45F9 0000 D234             		lea	(Glass_Vars1).l,a2
0000D246 7201                       		moveq	#1,d1
0000D248 117C 0048 0016             		move.b	#$48,obHeight(a0)
0000D24E 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object type 0/1/2 ?
0000D254 6500                       		bcs.s	@IsType012	; if yes, branch
0000D256                            
0000D256 45F9 0000 D23A             		lea	(Glass_Vars2).l,a2
0000D25C 7201                       		moveq	#1,d1
0000D25E 117C 0038 0016             		move.b	#$38,obHeight(a0)
0000D264                            
0000D264                            	@IsType012:
0000D264 2248                       		movea.l	a0,a1
0000D266 6000                       		bra.s	@Load		; load main object
0000D268                            ; ===========================================================================
0000D268                            
0000D268                            	@Repeat:
0000D268 6100 0000                  		bsr.w	FindNextFreeObj
0000D26C 6600                       		bne.s	@Fail
0000D26E                            
0000D26E                            @Load:
0000D26E 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D272 12BC 0000                  		move.b	#id_GlassBlock,0(a1)
0000D276 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D27C 101A                       		move.b	(a2)+,d0
0000D27E 4880                       		ext.w	d0
0000D280 D068 000C                  		add.w	obY(a0),d0
0000D284 3340 000C                  		move.w	d0,obY(a1)
0000D288 237C 0000 0000 0004        		move.l	#Map_Glass,obMap(a1)
0000D290 337C C38E 0002             		move.w	#$C38E,obGfx(a1)
0000D296 137C 0004 0001             		move.b	#4,obRender(a1)
0000D29C 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D2A2 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D2A8 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000D2AE 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D2B4 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D2B8 2348 003C                  		move.l	a0,glass_parent(a1)
0000D2BC 51C9 FFAA                  		dbf	d1,@Repeat	; repeat once to load "reflection object"
0000D2C0                            
0000D2C0 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D2C6 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D2CC 5029 0028                  		addq.b	#8,obSubtype(a1)
0000D2D0 0229 000F 0028             		andi.b	#$F,obSubtype(a1)
0000D2D6                            
0000D2D6                            	@Fail:
0000D2D6 317C 0090 0032             		move.w	#$90,glass_dist(a0)
0000D2DC 08E8 0004 0001             		bset	#4,obRender(a0)
0000D2E2                            
0000D2E2                            Glass_Block012:	; Routine 2
0000D2E2 6100 0000                  		bsr.w	Glass_Types
0000D2E6 323C 002B                  		move.w	#$2B,d1
0000D2EA 343C 0048                  		move.w	#$48,d2
0000D2EE 363C 0049                  		move.w	#$49,d3
0000D2F2 3828 0008                  		move.w	obX(a0),d4
0000D2F6 6000 0000                  		bra.w	SolidObject
0000D2FA                            ; ===========================================================================
0000D2FA                            
0000D2FA                            Glass_Reflect012:
0000D2FA                            		; Routine 4
0000D2FA 2268 003C                  		movea.l	$3C(a0),a1
0000D2FE 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D304 6000 0000                  		bra.w	Glass_Types
0000D308                            ; ===========================================================================
0000D308                            
0000D308                            Glass_Block34:	; Routine 6
0000D308 6100 0000                  		bsr.w	Glass_Types
0000D30C 323C 002B                  		move.w	#$2B,d1
0000D310 343C 0038                  		move.w	#$38,d2
0000D314 363C 0039                  		move.w	#$39,d3
0000D318 3828 0008                  		move.w	obX(a0),d4
0000D31C 6000 0000                  		bra.w	SolidObject
0000D320                            ; ===========================================================================
0000D320                            
0000D320                            Glass_Reflect34:
0000D320                            		; Routine 8
0000D320 2268 003C                  		movea.l	$3C(a0),a1
0000D324 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D32A 3169 000C 0030             		move.w	obY(a1),$30(a0)
0000D330 6000 0000                  		bra.w	Glass_Types
0000D334                            
0000D334                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D334                            
0000D334                            
0000D334                            Glass_Types:
0000D334 7000                       		moveq	#0,d0
0000D336 1028 0028                  		move.b	obSubtype(a0),d0
0000D33A 0240 0007                  		andi.w	#7,d0
0000D33E D040                       		add.w	d0,d0
0000D340 323B 0000                  		move.w	Glass_TypeIndex(pc,d0.w),d1
0000D344 4EFB 1000                  		jmp	Glass_TypeIndex(pc,d1.w)
0000D348                            ; End of function Glass_Types
0000D348                            
0000D348                            ; ===========================================================================
0000D348 0000                       Glass_TypeIndex:dc.w Glass_Type00-Glass_TypeIndex
0000D34A 0000                       		dc.w Glass_Type01-Glass_TypeIndex
0000D34C 0000                       		dc.w Glass_Type02-Glass_TypeIndex
0000D34E 0000                       		dc.w Glass_Type03-Glass_TypeIndex
0000D350 0000                       		dc.w Glass_Type04-Glass_TypeIndex
0000D352                            ; ===========================================================================
0000D352                            
0000D352                            Glass_Type00:
0000D352 4E75                       		rts	
0000D354                            ; ===========================================================================
0000D354                            
0000D354                            Glass_Type01:
0000D354 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D358 323C 0040                  		move.w	#$40,d1
0000D35C 6000                       		bra.s	loc_B514
0000D35E                            ; ===========================================================================
0000D35E                            
0000D35E                            Glass_Type02:
0000D35E 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D362 323C 0040                  		move.w	#$40,d1
0000D366 4440                       		neg.w	d0
0000D368 D041                       		add.w	d1,d0
0000D36A                            
0000D36A                            loc_B514:
0000D36A 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D370 6700                       		beq.s	loc_B526
0000D372 4440                       		neg.w	d0
0000D374 D041                       		add.w	d1,d0
0000D376 E208                       		lsr.b	#1,d0
0000D378 0640 0020                  		addi.w	#$20,d0
0000D37C                            
0000D37C                            loc_B526:
0000D37C 6000 0000                  		bra.w	loc_B5EE
0000D380                            ; ===========================================================================
0000D380                            
0000D380                            Glass_Type03:
0000D380 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D386 6700                       		beq.s	loc_B53E
0000D388 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D38C 0440 0010                  		subi.w	#$10,d0
0000D390 6000 0000                  		bra.w	loc_B5EE
0000D394                            ; ===========================================================================
0000D394                            
0000D394                            loc_B53E:
0000D394 0828 0003 0022             		btst	#3,obStatus(a0)
0000D39A 6600                       		bne.s	loc_B54E
0000D39C 08A8 0000 0034             		bclr	#0,$34(a0)
0000D3A2 6000                       		bra.s	loc_B582
0000D3A4                            ; ===========================================================================
0000D3A4                            
0000D3A4                            loc_B54E:
0000D3A4 4A28 0034                  		tst.b	$34(a0)
0000D3A8 6600                       		bne.s	loc_B582
0000D3AA 117C 0001 0034             		move.b	#1,$34(a0)
0000D3B0 08E8 0000 0035             		bset	#0,$35(a0)
0000D3B6 6700                       		beq.s	loc_B582
0000D3B8 08E8 0007 0034             		bset	#7,$34(a0)
0000D3BE 317C 0010 0036             		move.w	#$10,$36(a0)
0000D3C4 117C 000A 0038             		move.b	#$A,$38(a0)
0000D3CA 0C68 0040 0032             		cmpi.w	#$40,glass_dist(a0)
0000D3D0 6600                       		bne.s	loc_B582
0000D3D2 317C 0040 0036             		move.w	#$40,$36(a0)
0000D3D8                            
0000D3D8                            loc_B582:
0000D3D8 4A28 0034                  		tst.b	$34(a0)
0000D3DC 6A00                       		bpl.s	loc_B5AA
0000D3DE 4A28 0038                  		tst.b	$38(a0)
0000D3E2 6700                       		beq.s	loc_B594
0000D3E4 5328 0038                  		subq.b	#1,$38(a0)
0000D3E8 6600                       		bne.s	loc_B5AA
0000D3EA                            
0000D3EA                            loc_B594:
0000D3EA 4A68 0032                  		tst.w	glass_dist(a0)
0000D3EE 6700                       		beq.s	loc_B5A4
0000D3F0 5368 0032                  		subq.w	#1,glass_dist(a0)
0000D3F4 5368 0036                  		subq.w	#1,$36(a0)
0000D3F8 6600                       		bne.s	loc_B5AA
0000D3FA                            
0000D3FA                            loc_B5A4:
0000D3FA 08A8 0007 0034             		bclr	#7,$34(a0)
0000D400                            
0000D400                            loc_B5AA:
0000D400 3028 0032                  		move.w	glass_dist(a0),d0
0000D404 6000                       		bra.s	loc_B5EE
0000D406                            ; ===========================================================================
0000D406                            
0000D406                            Glass_Type04:
0000D406 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D40C 6700                       		beq.s	Glass_ChkSwitch
0000D40E 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D412 0440 0010                  		subi.w	#$10,d0
0000D416 6000                       		bra.s	loc_B5EE
0000D418                            ; ===========================================================================
0000D418                            
0000D418                            Glass_ChkSwitch:
0000D418 4A28 0034                  		tst.b	$34(a0)
0000D41C 6600                       		bne.s	loc_B5E0
0000D41E 45F8 F7E0                  		lea	(f_switch).w,a2
0000D422 7000                       		moveq	#0,d0
0000D424 1028 0028                  		move.b	obSubtype(a0),d0 ; load object type number
0000D428 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000D42A 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000D42E 6700                       		beq.s	loc_B5EA	; if not, branch
0000D430 117C 0001 0034             		move.b	#1,$34(a0)
0000D436                            
0000D436                            loc_B5E0:
0000D436 4A68 0032                  		tst.w	glass_dist(a0)
0000D43A 6700                       		beq.s	loc_B5EA
0000D43C 5568 0032                  		subq.w	#2,glass_dist(a0)
0000D440                            
0000D440                            loc_B5EA:
0000D440 3028 0032                  		move.w	glass_dist(a0),d0
0000D444                            
0000D444                            loc_B5EE:
0000D444 3228 0030                  		move.w	$30(a0),d1
0000D448 9240                       		sub.w	d0,d1
0000D44A 3141 000C                  		move.w	d1,obY(a0)
0000D44E 4E75                       		rts	
0000D44E 4E75                       		rts	
0000D450                            Map_Glass:	include	"_maps\MZ Large Green Glass Blocks.asm"
0000D450                            ; --------------------------------------------------------------------------------
0000D450                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D450                            ; --------------------------------------------------------------------------------
0000D450                            
0000D450                            SME_NEyTf:	
0000D450 0000 0000                  		dc.w SME_NEyTf_6-SME_NEyTf, SME_NEyTf_43-SME_NEyTf	
0000D454 0000                       		dc.w SME_NEyTf_4E-SME_NEyTf	
0000D456 0C                         SME_NEyTf_6:	dc.b $C	
0000D457 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0	
0000D45C B80C 0800 00               		dc.b $B8, $C, 8, 0, 0	
0000D461 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0	
0000D466 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0	
0000D46B E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0	
0000D470 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0	
0000D475 000F 0004 E0               		dc.b 0, $F, 0, 4, $E0	
0000D47A 000F 0804 00               		dc.b 0, $F, 8, 4, 0	
0000D47F 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0	
0000D484 200F 0804 00               		dc.b $20, $F, 8, 4, 0	
0000D489 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0	
0000D48E 400C 1800 00               		dc.b $40, $C, $18, 0, 0	
0000D493 02                         SME_NEyTf_43:	dc.b 2	
0000D494 0806 6014 F0               		dc.b 8, 6, $60, $14, $F0	
0000D499 0006 6014 00               		dc.b 0, 6, $60, $14, 0	
0000D49E 0A                         SME_NEyTf_4E:	dc.b $A	
0000D49F C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0	
0000D4A4 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0	
0000D4A9 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0	
0000D4AE D00F 0804 00               		dc.b $D0, $F, 8, 4, 0	
0000D4B3 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0	
0000D4B8 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0	
0000D4BD 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0	
0000D4C2 100F 0804 00               		dc.b $10, $F, 8, 4, 0	
0000D4C7 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0	
0000D4CC 300C 1800 00               		dc.b $30, $C, $18, 0, 0	
0000D4D2 00                         		even
0000D4D2 00                         		even
0000D4D2                            		include	"_incObj\31 Chained Stompers.asm"
0000D4D2                            ; ---------------------------------------------------------------------------
0000D4D2                            ; Object 31 - stomping metal blocks on chains (MZ)
0000D4D2                            ; ---------------------------------------------------------------------------
0000D4D2                            
0000D4D2                            ChainStomp:
0000D4D2 7000                       		moveq	#0,d0
0000D4D4 1028 0024                  		move.b	obRoutine(a0),d0
0000D4D8 323B 0000                  		move.w	CStom_Index(pc,d0.w),d1
0000D4DC 4EFB 1000                  		jmp	CStom_Index(pc,d1.w)
0000D4E0                            ; ===========================================================================
0000D4E0 0000                       CStom_Index:	dc.w CStom_Main-CStom_Index
0000D4E2 0000                       		dc.w loc_B798-CStom_Index
0000D4E4 0000                       		dc.w loc_B7FE-CStom_Index
0000D4E6 0000                       		dc.w CStom_Display2-CStom_Index
0000D4E8 0000                       		dc.w loc_B7E2-CStom_Index
0000D4EA                            
0000D4EA =0000003A                  CStom_switch:	equ $3A			; switch number for the current stomper
0000D4EA                            
0000D4EA 0000                       CStom_SwchNums:	dc.b 0,	0		; switch number, obj number
0000D4EC 0100                       		dc.b 1,	0
0000D4EE                            
0000D4EE 0200 00                    CStom_Var:	dc.b 2,	0, 0		; routine number, y-position, frame number
0000D4F1 041C 01                    		dc.b 4,	$1C, 1
0000D4F4 08CC 03                    		dc.b 8,	$CC, 3
0000D4F7 06F0 02                    		dc.b 6,	$F0, 2
0000D4FA                            
0000D4FA 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000D4FE 5000 7800                  		dc.w $5000, $7800
0000D502 3800 5800                  		dc.w $3800, $5800
0000D506 B800                       		dc.w $B800
0000D508                            ; ===========================================================================
0000D508                            
0000D508                            CStom_Main:	; Routine 0
0000D508 7000                       		moveq	#0,d0
0000D50A 1028 0028                  		move.b	obSubtype(a0),d0
0000D50E 6A00                       		bpl.s	loc_B6CE
0000D510 0240 007F                  		andi.w	#$7F,d0
0000D514 D040                       		add.w	d0,d0
0000D516 45FB 00D2                  		lea	CStom_SwchNums(pc,d0.w),a2
0000D51A 115A 003A                  		move.b	(a2)+,CStom_switch(a0)
0000D51E 101A                       		move.b	(a2)+,d0
0000D520 1140 0028                  		move.b	d0,obSubtype(a0)
0000D524                            
0000D524                            loc_B6CE:
0000D524 0200 000F                  		andi.b	#$F,d0
0000D528 D040                       		add.w	d0,d0
0000D52A 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000D52E 4A40                       		tst.w	d0
0000D530 6600                       		bne.s	loc_B6E0
0000D532 3142 0032                  		move.w	d2,$32(a0)
0000D536                            
0000D536                            loc_B6E0:
0000D536 45F9 0000 D4EE             		lea	(CStom_Var).l,a2
0000D53C 2248                       		movea.l	a0,a1
0000D53E 7203                       		moveq	#3,d1
0000D540 6000                       		bra.s	CStom_MakeStomper
0000D542                            ; ===========================================================================
0000D542                            
0000D542                            CStom_Loop:
0000D542 6100 0000                  		bsr.w	FindNextFreeObj
0000D546 6600 0000                  		bne.w	CStom_SetSize
0000D54A                            
0000D54A                            CStom_MakeStomper:
0000D54A 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D54E 12BC 0000                  		move.b	#id_ChainStomp,0(a1)
0000D552 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D558 101A                       		move.b	(a2)+,d0
0000D55A 4880                       		ext.w	d0
0000D55C D068 000C                  		add.w	obY(a0),d0
0000D560 3340 000C                  		move.w	d0,obY(a1)
0000D564 237C 0000 0000 0004        		move.l	#Map_CStom,obMap(a1)
0000D56C 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000D572 137C 0004 0001             		move.b	#4,obRender(a1)
0000D578 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D57E 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D584 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D58A 3342 0034                  		move.w	d2,$34(a1)
0000D58E 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D594 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D598 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0000D59E 6600                       		bne.s	loc_B76A
0000D5A0 5341                       		subq.w	#1,d1
0000D5A2 1028 0028                  		move.b	obSubtype(a0),d0
0000D5A6 0240 00F0                  		andi.w	#$F0,d0
0000D5AA 0C40 0020                  		cmpi.w	#$20,d0
0000D5AE 679A                       		beq.s	CStom_MakeStomper
0000D5B0 137C 0038 0014             		move.b	#$38,obActWid(a1)
0000D5B6 137C 0090 0020             		move.b	#$90,obColType(a1)
0000D5BC 5241                       		addq.w	#1,d1
0000D5BE                            
0000D5BE                            loc_B76A:
0000D5BE 2348 003C                  		move.l	a0,$3C(a1)
0000D5C2 51C9 FF7E                  		dbf	d1,CStom_Loop
0000D5C6                            
0000D5C6 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D5CC                            
0000D5CC                            CStom_SetSize:
0000D5CC 7000                       		moveq	#0,d0
0000D5CE 1028 0028                  		move.b	obSubtype(a0),d0
0000D5D2 E648                       		lsr.w	#3,d0
0000D5D4 0200 000E                  		andi.b	#$E,d0
0000D5D8 45FB 0000                  		lea	CStom_Var2(pc,d0.w),a2
0000D5DC 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000D5E0 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000D5E4 6000                       		bra.s	loc_B798
0000D5E6                            ; ===========================================================================
0000D5E6 3800                       CStom_Var2:	dc.b $38, 0		; width, frame number
0000D5E8 3009                       		dc.b $30, 9
0000D5EA 100A                       		dc.b $10, $A
0000D5EC                            ; ===========================================================================
0000D5EC                            
0000D5EC                            loc_B798:	; Routine 2
0000D5EC 6100 0000                  		bsr.w	CStom_Types
0000D5F0 31E8 000C F7A4             		move.w	obY(a0),(v_obj31ypos).w
0000D5F6 7200                       		moveq	#0,d1
0000D5F8 1228 0014                  		move.b	obActWid(a0),d1
0000D5FC 0641 000B                  		addi.w	#$B,d1
0000D600 343C 000C                  		move.w	#$C,d2
0000D604 363C 000D                  		move.w	#$D,d3
0000D608 3828 0008                  		move.w	obX(a0),d4
0000D60C 6100 0000                  		bsr.w	SolidObject
0000D610 0828 0003 0022             		btst	#3,obStatus(a0)
0000D616 6700                       		beq.s	CStom_Display
0000D618 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D61E 6400                       		bcc.s	CStom_Display
0000D620 2448                       		movea.l	a0,a2
0000D622 41F8 D000                  		lea	(v_player).w,a0
0000D626 4EB9 0000 0000             		jsr	(KillSonic).l
0000D62C 204A                       		movea.l	a2,a0
0000D62E                            
0000D62E                            CStom_Display:
0000D62E 6100 0000                  		bsr.w	DisplaySprite
0000D632 6000 0000                  		bra.w	CStom_ChkDel
0000D636                            ; ===========================================================================
0000D636                            
0000D636                            loc_B7E2:	; Routine 8
0000D636 117C 0080 0016             		move.b	#$80,obHeight(a0)
0000D63C 08E8 0004 0001             		bset	#4,obRender(a0)
0000D642 2268 003C                  		movea.l	$3C(a0),a1
0000D646 1029 0032                  		move.b	$32(a1),d0
0000D64A EA08                       		lsr.b	#5,d0
0000D64C 5600                       		addq.b	#3,d0
0000D64E 1140 001A                  		move.b	d0,obFrame(a0)
0000D652                            
0000D652                            loc_B7FE:	; Routine 4
0000D652 2268 003C                  		movea.l	$3C(a0),a1
0000D656 7000                       		moveq	#0,d0
0000D658 1029 0032                  		move.b	$32(a1),d0
0000D65C D068 0030                  		add.w	$30(a0),d0
0000D660 3140 000C                  		move.w	d0,obY(a0)
0000D664                            
0000D664                            CStom_Display2:	; Routine 6
0000D664 6100 0000                  		bsr.w	DisplaySprite
0000D668                            
0000D668                            CStom_ChkDel:
0000D686 4E75                       		rts	
0000D688                            ; ===========================================================================
0000D688                            
0000D688                            CStom_Types:
0000D688 1028 0028                  		move.b	obSubtype(a0),d0
0000D68C 0240 000F                  		andi.w	#$F,d0
0000D690 D040                       		add.w	d0,d0
0000D692 323B 0000                  		move.w	CStom_TypeIndex(pc,d0.w),d1
0000D696 4EFB 1000                  		jmp	CStom_TypeIndex(pc,d1.w)
0000D69A                            ; ===========================================================================
0000D69A 0000                       CStom_TypeIndex:dc.w CStom_Type00-CStom_TypeIndex
0000D69C 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D69E 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D6A0 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000D6A2 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D6A4 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000D6A6 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D6A8                            ; ===========================================================================
0000D6A8                            
0000D6A8                            CStom_Type00:
0000D6A8 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
0000D6AC 7000                       		moveq	#0,d0
0000D6AE 1028 003A                  		move.b	CStom_switch(a0),d0 ; move number 0 or 1 to d0
0000D6B2 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000D6B6 6700                       		beq.s	loc_B8A8	; if not, branch
0000D6B8 4A78 F7A4                  		tst.w	(v_obj31ypos).w
0000D6BC 6A00                       		bpl.s	loc_B872
0000D6BE 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D6C4 6700                       		beq.s	loc_B8A0
0000D6C6                            
0000D6C6                            loc_B872:
0000D6C6 4A68 0032                  		tst.w	$32(a0)
0000D6CA 6700                       		beq.s	loc_B8A0
0000D6CC 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000D6D0 0200 000F                  		andi.b	#$F,d0
0000D6D4 6600                       		bne.s	loc_B892
0000D6D6 4A28 0001                  		tst.b	1(a0)
0000D6DA 6A00                       		bpl.s	loc_B892
0000D6E6                            
0000D6E6                            loc_B892:
0000D6E6 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D6EC 6400                       		bcc.s	CStom_Restart
0000D6EE 317C 0000 0032             		move.w	#0,$32(a0)
0000D6F4                            
0000D6F4                            loc_B8A0:
0000D6F4 317C 0000 0012             		move.w	#0,obVelY(a0)
0000D6FA 6000                       		bra.s	CStom_Restart
0000D6FC                            ; ===========================================================================
0000D6FC                            
0000D6FC                            loc_B8A8:
0000D6FC 3228 0034                  		move.w	$34(a0),d1
0000D700 B268 0032                  		cmp.w	$32(a0),d1
0000D704 6700                       		beq.s	CStom_Restart
0000D706 3028 0012                  		move.w	obVelY(a0),d0
0000D70A 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000D710 D168 0032                  		add.w	d0,$32(a0)
0000D714 B268 0032                  		cmp.w	$32(a0),d1
0000D718 6200                       		bhi.s	CStom_Restart
0000D71A 3141 0032                  		move.w	d1,$32(a0)
0000D71E 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000D724 4A28 0001                  		tst.b	obRender(a0)
0000D728 6A00                       		bpl.s	CStom_Restart
0000D734                            
0000D734                            CStom_Restart:
0000D734 7000                       		moveq	#0,d0
0000D736 1028 0032                  		move.b	$32(a0),d0
0000D73A D068 0030                  		add.w	$30(a0),d0
0000D73E 3140 000C                  		move.w	d0,obY(a0)
0000D742 4E75                       		rts	
0000D744                            ; ===========================================================================
0000D744                            
0000D744                            CStom_Type01:
0000D744 4A68 0036                  		tst.w	$36(a0)
0000D748 6700                       		beq.s	loc_B938
0000D74A 4A68 0038                  		tst.w	$38(a0)
0000D74E 6700                       		beq.s	loc_B902
0000D750 5368 0038                  		subq.w	#1,$38(a0)
0000D754 6000                       		bra.s	loc_B97C
0000D756                            ; ===========================================================================
0000D756                            
0000D756                            loc_B902:
0000D756 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000D75A 0200 000F                  		andi.b	#$F,d0
0000D75E 6600                       		bne.s	loc_B91C
0000D760 4A28 0001                  		tst.b	obRender(a0)
0000D764 6A00                       		bpl.s	loc_B91C
0000D770                            
0000D770                            loc_B91C:
0000D770 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D776 6400                       		bcc.s	loc_B97C
0000D778 317C 0000 0032             		move.w	#0,$32(a0)
0000D77E 317C 0000 0012             		move.w	#0,obVelY(a0)
0000D784 317C 0000 0036             		move.w	#0,$36(a0)
0000D78A 6000                       		bra.s	loc_B97C
0000D78C                            ; ===========================================================================
0000D78C                            
0000D78C                            loc_B938:
0000D78C 3228 0034                  		move.w	$34(a0),d1
0000D790 B268 0032                  		cmp.w	$32(a0),d1
0000D794 6700                       		beq.s	loc_B97C
0000D796 3028 0012                  		move.w	obVelY(a0),d0
0000D79A 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000D7A0 D168 0032                  		add.w	d0,$32(a0)
0000D7A4 B268 0032                  		cmp.w	$32(a0),d1
0000D7A8 6200                       		bhi.s	loc_B97C
0000D7AA 3141 0032                  		move.w	d1,$32(a0)
0000D7AE 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000D7B4 317C 0001 0036             		move.w	#1,$36(a0)
0000D7BA 317C 003C 0038             		move.w	#$3C,$38(a0)
0000D7C0 4A28 0001                  		tst.b	obRender(a0)
0000D7C4 6A00                       		bpl.s	loc_B97C
0000D7D0                            
0000D7D0                            loc_B97C:
0000D7D0 6000 FF62                  		bra.w	CStom_Restart
0000D7D4                            ; ===========================================================================
0000D7D4                            
0000D7D4                            CStom_Type03:
0000D7D4 3038 D008                  		move.w	(v_player+obX).w,d0
0000D7D8 9068 0008                  		sub.w	obX(a0),d0
0000D7DC 6400                       		bcc.s	loc_B98C
0000D7DE 4440                       		neg.w	d0
0000D7E0                            
0000D7E0                            loc_B98C:
0000D7E0 0C40 0090                  		cmpi.w	#$90,d0
0000D7E4 6400                       		bcc.s	loc_B996
0000D7E6 5228 0028                  		addq.b	#1,obSubtype(a0)
0000D7EA                            
0000D7EA                            loc_B996:
0000D7EA 6000 FF48                  		bra.w	CStom_Restart
0000D7EA 6000 FF48                  		bra.w	CStom_Restart
0000D7EE                            		include	"_incObj\45 Sideways Stomper.asm"
0000D7EE                            ; ---------------------------------------------------------------------------
0000D7EE                            ; Object 45 - spiked metal block from beta version (MZ)
0000D7EE                            ; ---------------------------------------------------------------------------
0000D7EE                            
0000D7EE                            SideStomp:
0000D7EE 7000                       		moveq	#0,d0
0000D7F0 1028 0024                  		move.b	obRoutine(a0),d0
0000D7F4 323B 0000                  		move.w	SStom_Index(pc,d0.w),d1
0000D7F8 4EFB 1000                  		jmp	SStom_Index(pc,d1.w)
0000D7FC                            ; ===========================================================================
0000D7FC 0000                       SStom_Index:	dc.w SStom_Main-SStom_Index
0000D7FE 0000                       		dc.w SStom_Solid-SStom_Index
0000D800 0000                       		dc.w loc_BA8E-SStom_Index
0000D802 0000                       		dc.w SStom_Display-SStom_Index
0000D804 0000                       		dc.w SStom_Pole-SStom_Index
0000D806                            
0000D806                            		;	routine		frame
0000D806                            		;		 xpos
0000D806 0204 00                    SStom_Var:	dc.b	2,  	 4,	0	; main block
0000D809 04E4 01                    		dc.b	4,	-$1C,	1	; spikes
0000D80C 0834 03                    		dc.b	8,	 $34,	3	; pole
0000D80F 0628 02                    		dc.b	6,	 $28,	2	; wall bracket
0000D812                            
0000D812                            ;word_B9BE:	; Note that this indicates three subtypes
0000D812 3800                       SStom_Len:	dc.w $3800	; short
0000D814 A000                       		dc.w $A000	; long
0000D816 5000                       		dc.w $5000	; medium
0000D818                            ; ===========================================================================
0000D818                            
0000D818                            SStom_Main:	; Routine 0
0000D818 7000                       		moveq	#0,d0
0000D81A 1028 0028                  		move.b	obSubtype(a0),d0
0000D81E D040                       		add.w	d0,d0
0000D820 343B 00F0                  		move.w	SStom_Len(pc,d0.w),d2
0000D824 45F9 0000 D806             		lea	(SStom_Var).l,a2
0000D82A 2248                       		movea.l	a0,a1
0000D82C 7203                       		moveq	#3,d1
0000D82E 6000                       		bra.s	@load
0000D830                            
0000D830                            	@loop:
0000D830 6100 0000                  		bsr.w	FindNextFreeObj
0000D834 6600                       		bne.s	@fail
0000D836                            
0000D836                            	@load:
0000D836 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D83A 12BC 0000                  		move.b	#id_SideStomp,0(a1)
0000D83E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000D844 101A                       		move.b	(a2)+,d0
0000D846 4880                       		ext.w	d0
0000D848 D068 0008                  		add.w	obX(a0),d0
0000D84C 3340 0008                  		move.w	d0,obX(a1)
0000D850 237C 0000 0000 0004        		move.l	#Map_SStom,obMap(a1)
0000D858 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000D85E 137C 0004 0001             		move.b	#4,obRender(a1)
0000D864 3369 0008 0030             		move.w	obX(a1),$30(a1)
0000D86A 3368 0008 003A             		move.w	obX(a0),$3A(a1)
0000D870 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D876 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000D87C 3342 0034                  		move.w	d2,$34(a1)
0000D880 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D886 0C12 0001                  		cmpi.b	#1,(a2)		; is subobject spikes?
0000D88A 6600                       		bne.s	@notspikes	; if not, branch
0000D88C 137C 0091 0020             		move.b	#$91,obColType(a1) ; use harmful collision type
0000D892                            
0000D892                            	@notspikes:
0000D892 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D896 2348 003C                  		move.l	a0,$3C(a1)
0000D89A 51C9 FF94                  		dbf	d1,@loop	; repeat 3 times
0000D89E                            
0000D89E 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D8A4                            
0000D8A4                            	@fail:
0000D8A4 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000D8AA                            
0000D8AA                            SStom_Solid:	; Routine 2
0000D8AA 3F28 0008                  		move.w	obX(a0),-(sp)
0000D8AE 6100 0000                  		bsr.w	SStom_Move
0000D8B2 323C 0017                  		move.w	#$17,d1
0000D8B6 343C 0020                  		move.w	#$20,d2
0000D8BA 363C 0020                  		move.w	#$20,d3
0000D8BE 381F                       		move.w	(sp)+,d4
0000D8C0 6100 0000                  		bsr.w	SolidObject
0000D8C4 6100 0000                  		bsr.w	DisplaySprite
0000D8C8 6000 0000                  		bra.w	SStom_ChkDel
0000D8CC                            ; ===========================================================================
0000D8CC                            
0000D8CC                            SStom_Pole:	; Routine 8
0000D8CC 2268 003C                  		movea.l	$3C(a0),a1
0000D8D0 1029 0032                  		move.b	$32(a1),d0
0000D8D4 0600 0010                  		addi.b	#$10,d0
0000D8D8 EA08                       		lsr.b	#5,d0
0000D8DA 5600                       		addq.b	#3,d0
0000D8DC 1140 001A                  		move.b	d0,obFrame(a0)
0000D8E0                            
0000D8E0                            loc_BA8E:	; Routine 4
0000D8E0 2268 003C                  		movea.l	$3C(a0),a1
0000D8E4 7000                       		moveq	#0,d0
0000D8E6 1029 0032                  		move.b	$32(a1),d0
0000D8EA 4440                       		neg.w	d0
0000D8EC D068 0030                  		add.w	$30(a0),d0
0000D8F0 3140 0008                  		move.w	d0,obX(a0)
0000D8F4                            
0000D8F4                            SStom_Display:	; Routine 6
0000D8F4 6100 0000                  		bsr.w	DisplaySprite
0000D8F8                            
0000D8F8                            SStom_ChkDel:
0000D916 4E75                       		rts	
0000D918                            
0000D918                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D918                            
0000D918                            
0000D918                            SStom_Move:
0000D918 7000                       		moveq	#0,d0
0000D91A 1028 0028                  		move.b	obSubtype(a0),d0
0000D91E D040                       		add.w	d0,d0
0000D920 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000D924 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000D928                            ; End of function SStom_Move
0000D928                            
0000D928                            ; ===========================================================================
0000D928                            		; This indicates only two subtypes... that do the same thing
0000D928                            		; Compare to SStom_Len. This breaks subtype 02
0000D928 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000D92A 0000                       		dc.w loc_BADA-off_BAD6
0000D92C                            ; ===========================================================================
0000D92C                            
0000D92C                            loc_BADA:
0000D92C 4A68 0036                  		tst.w	$36(a0)
0000D930 6700                       		beq.s	loc_BB08
0000D932 4A68 0038                  		tst.w	$38(a0)
0000D936 6700                       		beq.s	loc_BAEC
0000D938 5368 0038                  		subq.w	#1,$38(a0)
0000D93C 6000                       		bra.s	loc_BB3C
0000D93E                            ; ===========================================================================
0000D93E                            
0000D93E                            loc_BAEC:
0000D93E 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D944 6400                       		bcc.s	loc_BB3C
0000D946 317C 0000 0032             		move.w	#0,$32(a0)
0000D94C 317C 0000 0010             		move.w	#0,obVelX(a0)
0000D952 317C 0000 0036             		move.w	#0,$36(a0)
0000D958 6000                       		bra.s	loc_BB3C
0000D95A                            ; ===========================================================================
0000D95A                            
0000D95A                            loc_BB08:
0000D95A 3228 0034                  		move.w	$34(a0),d1
0000D95E B268 0032                  		cmp.w	$32(a0),d1
0000D962 6700                       		beq.s	loc_BB3C
0000D964 3028 0010                  		move.w	obVelX(a0),d0
0000D968 0668 0070 0010             		addi.w	#$70,obVelX(a0)
0000D96E D168 0032                  		add.w	d0,$32(a0)
0000D972 B268 0032                  		cmp.w	$32(a0),d1
0000D976 6200                       		bhi.s	loc_BB3C
0000D978 3141 0032                  		move.w	d1,$32(a0)
0000D97C 317C 0000 0010             		move.w	#0,obVelX(a0)
0000D982 317C 0001 0036             		move.w	#1,$36(a0)
0000D988 317C 003C 0038             		move.w	#$3C,$38(a0)
0000D98E                            
0000D98E                            loc_BB3C:
0000D98E 7000                       		moveq	#0,d0
0000D990 1028 0032                  		move.b	$32(a0),d0
0000D994 4440                       		neg.w	d0
0000D996 D068 0030                  		add.w	$30(a0),d0
0000D99A 3140 0008                  		move.w	d0,obX(a0)
0000D99E 4E75                       		rts	
0000D99E 4E75                       		rts	
0000D9A0                            Map_CStom:	include	"_maps\Chained Stompers.asm"
0000D9A0                            ; ---------------------------------------------------------------------------
0000D9A0                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000D9A0                            ; ---------------------------------------------------------------------------
0000D9A0                            Map_CStom_internal:
0000D9A0 0000                       		dc.w @wideblock-Map_CStom_internal
0000D9A2 0000                       		dc.w @spikes-Map_CStom_internal
0000D9A4 0000                       		dc.w @ceiling-Map_CStom_internal
0000D9A6 0000                       		dc.w @chain1-Map_CStom_internal
0000D9A8 0000                       		dc.w @chain2-Map_CStom_internal
0000D9AA 0000                       		dc.w @chain3-Map_CStom_internal
0000D9AC 0000                       		dc.w @chain4-Map_CStom_internal
0000D9AE 0000                       		dc.w @chain5-Map_CStom_internal
0000D9B0 0000                       		dc.w @chain5-Map_CStom_internal
0000D9B2 0000                       		dc.w @mediumblock-Map_CStom_internal
0000D9B4 0000                       		dc.w @smallblock-Map_CStom_internal
0000D9B6 05                         @wideblock:	dc.b 5
0000D9B7 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000D9BC F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000D9C1 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000D9C6 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000D9CB F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000D9D0 05                         @spikes:	dc.b 5
0000D9D1 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000D9D6 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000D9DB F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000D9E0 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000D9E5 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000D9EA 01                         @ceiling:	dc.b 1
0000D9EB DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000D9F0 02                         @chain1:	dc.b 2
0000D9F1 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D9F6 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D9FB 04                         @chain2:	dc.b 4
0000D9FC E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DA01 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DA06 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DA0B 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DA10 06                         @chain3:	dc.b 6
0000DA11 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DA16 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DA1B E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DA20 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DA25 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DA2A 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DA2F 08                         @chain4:	dc.b 8
0000DA30 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DA35 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DA3A C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DA3F D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DA44 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DA49 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DA4E 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DA53 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DA58 0A                         @chain5:	dc.b $A
0000DA59 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000DA5E 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000DA63 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DA68 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DA6D C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DA72 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DA77 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DA7C F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DA81 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DA86 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DA8B 05                         @mediumblock:	dc.b 5
0000DA8C F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000DA91 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000DA96 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000DA9B F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000DAA0 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DAA5 01                         @smallblock:	dc.b 1
0000DAA6 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000DAAC 00                         		even
0000DAAC 00                         		even
0000DAAC                            Map_SStom:	include	"_maps\Sideways Stomper.asm"
0000DAAC                            ; ---------------------------------------------------------------------------
0000DAAC                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000DAAC                            ; ---------------------------------------------------------------------------
0000DAAC                            Map_SStom_internal:
0000DAAC 0000                       		dc.w @block-Map_SStom_internal
0000DAAE 0000                       		dc.w @spikes-Map_SStom_internal
0000DAB0 0000                       		dc.w @wallbracket-Map_SStom_internal
0000DAB2 0000                       		dc.w @pole1-Map_SStom_internal
0000DAB4 0000                       		dc.w @pole2-Map_SStom_internal
0000DAB6 0000                       		dc.w @pole3-Map_SStom_internal
0000DAB8 0000                       		dc.w @pole4-Map_SStom_internal
0000DABA 0000                       		dc.w @pole5-Map_SStom_internal
0000DABC 0000                       		dc.w @pole5-Map_SStom_internal
0000DABE 03                         @block:		dc.b 3
0000DABF E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4 ; main metal block
0000DAC4 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000DAC9 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000DACE 03                         @spikes:	dc.b 3
0000DACF E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0 ; three spikes
0000DAD4 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000DAD9 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000DADE 01                         @wallbracket:	dc.b 1
0000DADF F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC ; thing holding it to the wall
0000DAE4 02                         @pole1:		dc.b 2
0000DAE5 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0 ; poles of various lengths
0000DAEA F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DAEF 04                         @pole2:		dc.b 4
0000DAF0 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DAF5 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DAFA F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DAFF F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DB04 06                         @pole3:		dc.b 6
0000DB05 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DB0A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DB0F F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DB14 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DB19 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DB1E F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DB23 08                         @pole4:		dc.b 8
0000DB24 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DB29 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DB2E F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DB33 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DB38 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DB3D F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DB42 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DB47 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DB4C 08                         @pole5:		dc.b 8		; Incorrect: this should be $A
0000DB4D F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DB52 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DB57 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DB5C F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DB61 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DB66 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DB6B F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DB70 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DB75 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000DB7A F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000DB7F                            		; @pole6 should be here, but it isn't...
0000DB80 00                         		even
0000DB80 00                         		even
0000DB80                            
0000DB80                            		include	"_incObj\32 Button.asm"
0000DB80                            ; ---------------------------------------------------------------------------
0000DB80                            ; Object 32 - buttons (MZ, SYZ, LZ, SBZ)
0000DB80                            ; ---------------------------------------------------------------------------
0000DB80                            
0000DB80                            Button:
0000DB80 7000                       		moveq	#0,d0
0000DB82 1028 0024                  		move.b	obRoutine(a0),d0
0000DB86 323B 0000                  		move.w	But_Index(pc,d0.w),d1
0000DB8A 4EFB 1000                  		jmp	But_Index(pc,d1.w)
0000DB8E                            ; ===========================================================================
0000DB8E 0000                       But_Index:	dc.w But_Main-But_Index
0000DB90 0000                       		dc.w But_Pressed-But_Index
0000DB92                            ; ===========================================================================
0000DB92                            
0000DB92                            But_Main:	; Routine 0
0000DB92 5428 0024                  		addq.b	#2,obRoutine(a0)
0000DB96 217C 0000 0000 0004        		move.l	#Map_But,obMap(a0)
0000DB9E 317C 4513 0002             		move.w	#$4513,obGfx(a0) ; MZ specific code
0000DBA4 0C38 0002 FE10             		cmpi.b	#id_MZ,(v_zone).w ; is level Marble Zone?
0000DBAA 6700                       		beq.s	But_IsMZ	; if yes, branch
0000DBAC                            
0000DBAC 317C 0513 0002             		move.w	#$513,obGfx(a0)	; SYZ, LZ and SBZ specific code
0000DBB2                            
0000DBB2                            	But_IsMZ:
0000DBB2 117C 0004 0001             		move.b	#4,obRender(a0)
0000DBB8 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DBBE 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000DBC4 5668 000C                  		addq.w	#3,obY(a0)
0000DBC8                            
0000DBC8                            But_Pressed:	; Routine 2
0000DBC8 4A28 0001                  		tst.b	obRender(a0)
0000DBCC 6A00                       		bpl.s	But_Display
0000DBCE 323C 001B                  		move.w	#$1B,d1
0000DBD2 343C 0005                  		move.w	#5,d2
0000DBD6 363C 0005                  		move.w	#5,d3
0000DBDA 3828 0008                  		move.w	obX(a0),d4
0000DBDE 6100 0000                  		bsr.w	SolidObject
0000DBE2 08A8 0000 001A             		bclr	#0,obFrame(a0)	; use "unpressed" frame
0000DBE8 1028 0028                  		move.b	obSubtype(a0),d0
0000DBEC 0240 000F                  		andi.w	#$F,d0
0000DBF0 47F8 F7E0                  		lea	(f_switch).w,a3
0000DBF4 47F3 0000                  		lea	(a3,d0.w),a3
0000DBF8 7600                       		moveq	#0,d3
0000DBFA 0828 0006 0028             		btst	#6,obSubtype(a0)
0000DC00 6700                       		beq.s	loc_BDB2
0000DC02 7607                       		moveq	#7,d3
0000DC04                            
0000DC04                            loc_BDB2:
0000DC04 4A28 0028                  		tst.b	obSubtype(a0)
0000DC08 6A00                       		bpl.s	loc_BDBE
0000DC0A 6100 0000                  		bsr.w	But_MZBlock
0000DC0E 6600                       		bne.s	loc_BDC8
0000DC10                            
0000DC10                            loc_BDBE:
0000DC10 4A28 0025                  		tst.b	ob2ndRout(a0)
0000DC14 6600                       		bne.s	loc_BDC8
0000DC16 0793                       		bclr	d3,(a3)
0000DC18 6000                       		bra.s	loc_BDDE
0000DC1A                            ; ===========================================================================
0000DC1A                            
0000DC1A                            loc_BDC8:
0000DC1A 4A13                       		tst.b	(a3)
0000DC1C 6600                       		bne.s	loc_BDD6
0000DC28                            
0000DC28                            loc_BDD6:
0000DC28 07D3                       		bset	d3,(a3)
0000DC2A 08E8 0000 001A             		bset	#0,obFrame(a0)	; use "pressed"	frame
0000DC30                            
0000DC30                            loc_BDDE:
0000DC30 0828 0005 0028             		btst	#5,obSubtype(a0)
0000DC36 6700                       		beq.s	But_Display
0000DC38 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000DC3C 6A00                       		bpl.s	But_Display
0000DC3E 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000DC44 0868 0001 001A             		bchg	#1,obFrame(a0)
0000DC4A                            
0000DC4A                            But_Display:
0000DC4A 6100 0000                  		bsr.w	DisplaySprite
0000DC6C 4E75                       		rts	
0000DC6E                            ; ===========================================================================
0000DC6E                            
0000DC6E                            But_Delete:
0000DC6E 6100 0000                  		bsr.w	DeleteObject
0000DC72 4E75                       		rts	
0000DC74                            
0000DC74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC74                            
0000DC74                            
0000DC74                            But_MZBlock:
0000DC74 3F03                       		move.w	d3,-(sp)
0000DC76 3428 0008                  		move.w	obX(a0),d2
0000DC7A 3628 000C                  		move.w	obY(a0),d3
0000DC7E 0442 0010                  		subi.w	#$10,d2
0000DC82 5143                       		subq.w	#8,d3
0000DC84 383C 0020                  		move.w	#$20,d4
0000DC88 3A3C 0010                  		move.w	#$10,d5
0000DC8C 43F8 D800                  		lea	(v_lvlobjspace).w,a1 ; begin checking object RAM
0000DC90 3C3C 005F                  		move.w	#$5F,d6
0000DC94                            
0000DC94                            But_MZLoop:
0000DC94 4A29 0001                  		tst.b	obRender(a1)
0000DC98 6A00                       		bpl.s	loc_BE4E
0000DC9A 0C11 0000                  		cmpi.b	#id_PushBlock,(a1) ; is the object a green MZ block?
0000DC9E 6700                       		beq.s	loc_BE5E	; if yes, branch
0000DCA0                            
0000DCA0                            loc_BE4E:
0000DCA0 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000DCA4 51CE FFEE                  		dbf	d6,But_MZLoop	; repeat $5F times
0000DCA8                            
0000DCA8 361F                       		move.w	(sp)+,d3
0000DCAA 7000                       		moveq	#0,d0
0000DCAC                            
0000DCAC                            locret_BE5A:
0000DCAC 4E75                       		rts	
0000DCAE                            ; ===========================================================================
0000DCAE 1010                       But_MZData:	dc.b $10, $10
0000DCB0                            ; ===========================================================================
0000DCB0                            
0000DCB0                            loc_BE5E:
0000DCB0 7001                       		moveq	#1,d0
0000DCB2 0240 003F                  		andi.w	#$3F,d0
0000DCB6 D040                       		add.w	d0,d0
0000DCB8 45FB 00F2                  		lea	But_MZData-2(pc,d0.w),a2
0000DCBC 121A                       		move.b	(a2)+,d1
0000DCBE 4881                       		ext.w	d1
0000DCC0 3029 0008                  		move.w	obX(a1),d0
0000DCC4 9041                       		sub.w	d1,d0
0000DCC6 9042                       		sub.w	d2,d0
0000DCC8 6400                       		bcc.s	loc_BE80
0000DCCA D241                       		add.w	d1,d1
0000DCCC D041                       		add.w	d1,d0
0000DCCE 6500                       		bcs.s	loc_BE84
0000DCD0 60CE                       		bra.s	loc_BE4E
0000DCD2                            ; ===========================================================================
0000DCD2                            
0000DCD2                            loc_BE80:
0000DCD2 B044                       		cmp.w	d4,d0
0000DCD4 62CA                       		bhi.s	loc_BE4E
0000DCD6                            
0000DCD6                            loc_BE84:
0000DCD6 121A                       		move.b	(a2)+,d1
0000DCD8 4881                       		ext.w	d1
0000DCDA 3029 000C                  		move.w	obY(a1),d0
0000DCDE 9041                       		sub.w	d1,d0
0000DCE0 9043                       		sub.w	d3,d0
0000DCE2 6400                       		bcc.s	loc_BE9A
0000DCE4 D241                       		add.w	d1,d1
0000DCE6 D041                       		add.w	d1,d0
0000DCE8 6500                       		bcs.s	loc_BE9E
0000DCEA 60B4                       		bra.s	loc_BE4E
0000DCEC                            ; ===========================================================================
0000DCEC                            
0000DCEC                            loc_BE9A:
0000DCEC B045                       		cmp.w	d5,d0
0000DCEE 62B0                       		bhi.s	loc_BE4E
0000DCF0                            
0000DCF0                            loc_BE9E:
0000DCF0 361F                       		move.w	(sp)+,d3
0000DCF2 7001                       		moveq	#1,d0
0000DCF4 4E75                       		rts	
0000DCF6                            ; End of function But_MZBlock
0000DCF6                            ; End of function But_MZBlock
0000DCF6                            Map_But:	include	"_maps\Button.asm"
0000DCF6                            ; ---------------------------------------------------------------------------
0000DCF6                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000DCF6                            ; ---------------------------------------------------------------------------
0000DCF6                            Map_But_internal:
0000DCF6 0000                       		dc.w byte_BEAC-Map_But_internal
0000DCF8 0000                       		dc.w byte_BEB7-Map_But_internal
0000DCFA 0000                       		dc.w byte_BEC2-Map_But_internal
0000DCFC 0000                       		dc.w byte_BEB7-Map_But_internal
0000DCFE 02                         byte_BEAC:	dc.b 2
0000DCFF F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000DD04 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000DD09 02                         byte_BEB7:	dc.b 2
0000DD0A F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000DD0F F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000DD14 02                         byte_BEC2:	dc.b 2
0000DD15 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000DD1A F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000DD1F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000DD24                            		even
0000DD24                            		even
0000DD24                            
0000DD24                            		include	"_incObj\33 Pushable Blocks.asm"
0000DD24                            ; ---------------------------------------------------------------------------
0000DD24                            ; Object 33 - pushable blocks (MZ, LZ)
0000DD24                            ; ---------------------------------------------------------------------------
0000DD24                            
0000DD24                            PushBlock:
0000DD24 7000                       		moveq	#0,d0
0000DD26 1028 0024                  		move.b	obRoutine(a0),d0
0000DD2A 323B 0000                  		move.w	PushB_Index(pc,d0.w),d1
0000DD2E 4EFB 1000                  		jmp	PushB_Index(pc,d1.w)
0000DD32                            ; ===========================================================================
0000DD32 0000                       PushB_Index:	dc.w PushB_Main-PushB_Index
0000DD34 0000                       		dc.w loc_BF6E-PushB_Index
0000DD36 0000                       		dc.w loc_C02C-PushB_Index
0000DD38                            
0000DD38 1000                       PushB_Var:	dc.b $10, 0	; object width,	frame number
0000DD3A 4001                       		dc.b $40, 1
0000DD3C                            ; ===========================================================================
0000DD3C                            
0000DD3C                            PushB_Main:	; Routine 0
0000DD3C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000DD40 117C 000F 0016             		move.b	#$F,obHeight(a0)
0000DD46 117C 000F 0017             		move.b	#$F,obWidth(a0)
0000DD4C 217C 0000 0000 0004        		move.l	#Map_Push,obMap(a0)
0000DD54 317C 42B8 0002             		move.w	#$42B8,obGfx(a0) ; MZ specific code
0000DD5A 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w
0000DD60 6600                       		bne.s	@notLZ
0000DD62 317C 43DE 0002             		move.w	#$43DE,obGfx(a0) ; LZ specific code
0000DD68                            
0000DD68                            	@notLZ:
0000DD68 117C 0004 0001             		move.b	#4,obRender(a0)
0000DD6E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000DD74 3168 0008 0034             		move.w	obX(a0),$34(a0)
0000DD7A 3168 000C 0036             		move.w	obY(a0),$36(a0)
0000DD80 7000                       		moveq	#0,d0
0000DD82 1028 0028                  		move.b	obSubtype(a0),d0
0000DD86 D040                       		add.w	d0,d0
0000DD88 0240 000E                  		andi.w	#$E,d0
0000DD8C 45FB 00AA                  		lea	PushB_Var(pc,d0.w),a2
0000DD90 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000DD94 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000DD98 4A28 0028                  		tst.b	obSubtype(a0)
0000DD9C 6700                       		beq.s	@chkgone
0000DD9E 317C C2B8 0002             		move.w	#$C2B8,obGfx(a0)
0000DDA4                            
0000DDA4                            	@chkgone:
0000DDA4 45F8 FC00                  		lea	(v_objstate).w,a2
0000DDA8 7000                       		moveq	#0,d0
0000DDAA 1028 0023                  		move.b	obRespawnNo(a0),d0
0000DDAE 6700                       		beq.s	loc_BF6E
0000DDB0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000DDB6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000DDBC 6600 0000                  		bne.w	DeleteObject
0000DDC0                            
0000DDC0                            loc_BF6E:	; Routine 2
0000DDC0 4A28 0032                  		tst.b	$32(a0)
0000DDC4 6600 0000                  		bne.w	loc_C046
0000DDC8 7200                       		moveq	#0,d1
0000DDCA 1228 0014                  		move.b	obActWid(a0),d1
0000DDCE 0641 000B                  		addi.w	#$B,d1
0000DDD2 343C 0010                  		move.w	#$10,d2
0000DDD6 363C 0011                  		move.w	#$11,d3
0000DDDA 3828 0008                  		move.w	obX(a0),d4
0000DDDE 6100 0000                  		bsr.w	loc_C186
0000DDE2 0C78 0200 FE10             		cmpi.w	#(id_MZ<<8)+0,(v_zone).w ; is the level MZ act 1?
0000DDE8 6600                       		bne.s	loc_BFC6	; if not, branch
0000DDEA 08A8 0007 0028             		bclr	#7,obSubtype(a0)
0000DDF0 3028 0008                  		move.w	obX(a0),d0
0000DDF4 0C40 0A20                  		cmpi.w	#$A20,d0
0000DDF8 6500                       		bcs.s	loc_BFC6
0000DDFA 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000DDFE 6400                       		bcc.s	loc_BFC6
0000DE00 3038 F7A4                  		move.w	(v_obj31ypos).w,d0
0000DE04 0440 001C                  		subi.w	#$1C,d0
0000DE08 3140 000C                  		move.w	d0,obY(a0)
0000DE0C 08F8 0007 F7A4             		bset	#7,(v_obj31ypos).w
0000DE12 08E8 0007 0028             		bset	#7,obSubtype(a0)
0000DE18                            
0000DE18                            	loc_BFC6:
0000DE34 6000 0000                  		bra.w	DisplaySprite
0000DE38                            ; ===========================================================================
0000DE38                            
0000DE38                            loc_ppppp:
0000DE54 3168 0034 0008             		move.w	$34(a0),obX(a0)
0000DE5A 3168 0036 000C             		move.w	$36(a0),obY(a0)
0000DE60 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000DE66 6000                       		bra.s	loc_C02C
0000DE68                            ; ===========================================================================
0000DE68                            
0000DE68                            loc_C016:
0000DE68 45F8 FC00                  		lea	(v_objstate).w,a2
0000DE6C 7000                       		moveq	#0,d0
0000DE6E 1028 0023                  		move.b	obRespawnNo(a0),d0
0000DE72 6700                       		beq.s	loc_C028
0000DE74 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000DE7A                            
0000DE7A                            loc_C028:
0000DE7A 6000 0000                  		bra.w	DeleteObject
0000DE7E                            ; ===========================================================================
0000DE7E                            
0000DE7E                            loc_C02C:	; Routine 4
0000DE7E 6100 0000                  		bsr.w	ChkPartiallyVisible
0000DE82 6700                       		beq.s	locret_C044
0000DE84 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000DE8A 4228 0032                  		clr.b	$32(a0)
0000DE8E 4268 0010                  		clr.w	obVelX(a0)
0000DE92 4268 0012                  		clr.w	obVelY(a0)
0000DE96                            
0000DE96                            locret_C044:
0000DE96 4E75                       		rts	
0000DE98                            ; ===========================================================================
0000DE98                            
0000DE98                            loc_C046:
0000DE98 3F28 0008                  		move.w	obX(a0),-(sp)
0000DE9C 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0000DEA2 6400                       		bcc.s	loc_C056
0000DEA4 6100 0000                  		bsr.w	SpeedToPos
0000DEA8                            
0000DEA8                            loc_C056:
0000DEA8 0828 0001 0022             		btst	#1,obStatus(a0)
0000DEAE 6700                       		beq.s	loc_C0A0
0000DEB0 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000DEB6 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000DEBC 4A41                       		tst.w	d1
0000DEBE 6A00 0000                  		bpl.w	loc_C09E
0000DEC2 D368 000C                  		add.w	d1,obY(a0)
0000DEC6 4268 0012                  		clr.w	obVelY(a0)
0000DECA 08A8 0001 0022             		bclr	#1,obStatus(a0)
0000DED0 3011                       		move.w	(a1),d0
0000DED2 0240 03FF                  		andi.w	#$3FF,d0
0000DED6 0C40 016A                  		cmpi.w	#$16A,d0
0000DEDA 6500                       		bcs.s	loc_C09E
0000DEDC 3028 0030                  		move.w	$30(a0),d0
0000DEE0 E640                       		asr.w	#3,d0
0000DEE2 3140 0010                  		move.w	d0,obVelX(a0)
0000DEE6 117C 0001 0032             		move.b	#1,$32(a0)
0000DEEC 4268 000E                  		clr.w	$E(a0)
0000DEF0                            
0000DEF0                            loc_C09E:
0000DEF0 6000                       		bra.s	loc_C0E6
0000DEF2                            ; ===========================================================================
0000DEF2                            
0000DEF2                            loc_C0A0:
0000DEF2 4A68 0010                  		tst.w	obVelX(a0)
0000DEF6 6700 0000                  		beq.w	loc_C0D6
0000DEFA 6B00                       		bmi.s	loc_C0BC
0000DEFC 7600                       		moveq	#0,d3
0000DEFE 1628 0014                  		move.b	obActWid(a0),d3
0000DF02 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000DF08 4A41                       		tst.w	d1		; has block touched a wall?
0000DF0A 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000DF0C 6000                       		bra.s	loc_C0E6
0000DF0E                            ; ===========================================================================
0000DF0E                            
0000DF0E                            loc_C0BC:
0000DF0E 7600                       		moveq	#0,d3
0000DF10 1628 0014                  		move.b	obActWid(a0),d3
0000DF14 4643                       		not.w	d3
0000DF16 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000DF1C 4A41                       		tst.w	d1		; has block touched a wall?
0000DF1E 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000DF20 6000                       		bra.s	loc_C0E6
0000DF22                            ; ===========================================================================
0000DF22                            
0000DF22                            PushB_StopPush:
0000DF22 4268 0010                  		clr.w	obVelX(a0)		; stop block moving
0000DF26 6000                       		bra.s	loc_C0E6
0000DF28                            ; ===========================================================================
0000DF28                            
0000DF28                            loc_C0D6:
0000DF28 06A8 0000 2001 000C        		addi.l	#$2001,obY(a0)
0000DF30 0C28 00A0 000F             		cmpi.b	#$A0,obY+3(a0)
0000DF36 6400                       		bcc.s	loc_C104
0000DF38                            
0000DF38                            loc_C0E6:
0000DF38 7200                       		moveq	#0,d1
0000DF3A 1228 0014                  		move.b	obActWid(a0),d1
0000DF3E 0641 000B                  		addi.w	#$B,d1
0000DF42 343C 0010                  		move.w	#$10,d2
0000DF46 363C 0011                  		move.w	#$11,d3
0000DF4A 381F                       		move.w	(sp)+,d4
0000DF4C 6100 0000                  		bsr.w	loc_C186
0000DF50 6100                       		bsr.s	PushB_ChkLava
0000DF52 6000 FEC4                  		bra.w	loc_BFC6
0000DF56                            ; ===========================================================================
0000DF56                            
0000DF56                            loc_C104:
0000DF56 381F                       		move.w	(sp)+,d4
0000DF58 43F8 D000                  		lea	(v_player).w,a1
0000DF5C 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000DF62 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000DF68 6000 FECE                  		bra.w	loc_ppppp
0000DF6C                            ; ===========================================================================
0000DF6C                            
0000DF6C                            PushB_ChkLava:
0000DF6C 0C78 0201 FE10             		cmpi.w	#(id_MZ<<8)+1,(v_zone).w ; is the level MZ act 2?
0000DF72 6600                       		bne.s	PushB_ChkLava2	; if not, branch
0000DF74 343C FFE0                  		move.w	#-$20,d2
0000DF78 0C68 0DD0 0008             		cmpi.w	#$DD0,obX(a0)
0000DF7E 6700                       		beq.s	PushB_LoadLava
0000DF80 0C68 0CC0 0008             		cmpi.w	#$CC0,obX(a0)
0000DF86 6700                       		beq.s	PushB_LoadLava
0000DF88 0C68 0BA0 0008             		cmpi.w	#$BA0,obX(a0)
0000DF8E 6700                       		beq.s	PushB_LoadLava
0000DF90 4E75                       		rts	
0000DF92                            ; ===========================================================================
0000DF92                            
0000DF92                            PushB_ChkLava2:
0000DF92 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is the level MZ act 3?
0000DF98 6600                       		bne.s	PushB_NoLava	; if not, branch
0000DF9A 343C 0020                  		move.w	#$20,d2
0000DF9E 0C68 0560 0008             		cmpi.w	#$560,obX(a0)
0000DFA4 6700                       		beq.s	PushB_LoadLava
0000DFA6 0C68 05C0 0008             		cmpi.w	#$5C0,obX(a0)
0000DFAC 6700                       		beq.s	PushB_LoadLava
0000DFAE                            
0000DFAE                            PushB_NoLava:
0000DFAE 4E75                       		rts	
0000DFB0                            ; ===========================================================================
0000DFB0                            
0000DFB0                            PushB_LoadLava:
0000DFB0 6100 0000                  		bsr.w	FindFreeObj
0000DFB4 6600                       		bne.s	locret_C184
0000DFB6 12BC 0000                  		move.b	#id_GeyserMaker,0(a1) ; load lava geyser object
0000DFBA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000DFC0 D569 0008                  		add.w	d2,obX(a1)
0000DFC4 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000DFCA 0669 0010 000C             		addi.w	#$10,obY(a1)
0000DFD0 2348 003C                  		move.l	a0,$3C(a1)
0000DFD4                            
0000DFD4                            locret_C184:
0000DFD4 4E75                       		rts	
0000DFD6                            ; ===========================================================================
0000DFD6                            
0000DFD6                            loc_C186:
0000DFD6 1028 0025                  		move.b	ob2ndRout(a0),d0
0000DFDA 6700 0000                  		beq.w	loc_C218
0000DFDE 5500                       		subq.b	#2,d0
0000DFE0 6600                       		bne.s	loc_C1AA
0000DFE2 6100 AD08                  		bsr.w	ExitPlatform
0000DFE6 0829 0003 0022             		btst	#3,obStatus(a1)
0000DFEC 6600                       		bne.s	loc_C1A4
0000DFEE 4228 0025                  		clr.b	ob2ndRout(a0)
0000DFF2 4E75                       		rts	
0000DFF4                            ; ===========================================================================
0000DFF4                            
0000DFF4                            loc_C1A4:
0000DFF4 3404                       		move.w	d4,d2
0000DFF6 6000 B252                  		bra.w	MvSonicOnPtfm
0000DFFA                            ; ===========================================================================
0000DFFA                            
0000DFFA                            loc_C1AA:
0000DFFA 5500                       		subq.b	#2,d0
0000DFFC 6600                       		bne.s	loc_C1F2
0000DFFE 6100 0000                  		bsr.w	SpeedToPos
0000E002 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E008 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E00E 4A41                       		tst.w	d1
0000E010 6A00 0000                  		bpl.w	locret_C1F0
0000E014 D368 000C                  		add.w	d1,obY(a0)
0000E018 4268 0012                  		clr.w	obVelY(a0)
0000E01C 4228 0025                  		clr.b	ob2ndRout(a0)
0000E020 3011                       		move.w	(a1),d0
0000E022 0240 03FF                  		andi.w	#$3FF,d0
0000E026 0C40 016A                  		cmpi.w	#$16A,d0
0000E02A 6500                       		bcs.s	locret_C1F0
0000E02C 3028 0030                  		move.w	$30(a0),d0
0000E030 E640                       		asr.w	#3,d0
0000E032 3140 0010                  		move.w	d0,obVelX(a0)
0000E036 117C 0001 0032             		move.b	#1,$32(a0)
0000E03C 4268 000E                  		clr.w	obY+2(a0)
0000E040                            
0000E040                            locret_C1F0:
0000E040 4E75                       		rts	
0000E042                            ; ===========================================================================
0000E042                            
0000E042                            loc_C1F2:
0000E042 6100 0000                  		bsr.w	SpeedToPos
0000E046 3028 0008                  		move.w	obX(a0),d0
0000E04A 0240 000C                  		andi.w	#$C,d0
0000E04E 6600 0000                  		bne.w	locret_C2E4
0000E052 0268 FFF0 0008             		andi.w	#-$10,obX(a0)
0000E058 3168 0010 0030             		move.w	obVelX(a0),$30(a0)
0000E05E 4268 0010                  		clr.w	obVelX(a0)
0000E062 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000E066 4E75                       		rts	
0000E068                            ; ===========================================================================
0000E068                            
0000E068                            loc_C218:
0000E068 6100 0000                  		bsr.w	Solid_ChkEnter
0000E06C 4A44                       		tst.w	d4
0000E06E 6700 0000                  		beq.w	locret_C2E4
0000E072 6B00 0000                  		bmi.w	locret_C2E4
0000E076 4A28 0032                  		tst.b	$32(a0)
0000E07A 6700                       		beq.s	loc_C230
0000E07C 6000 0000                  		bra.w	locret_C2E4
0000E080                            ; ===========================================================================
0000E080                            
0000E080                            loc_C230:
0000E080 4A40                       		tst.w	d0
0000E082 6700 0000                  		beq.w	locret_C2E4
0000E086 6B00                       		bmi.s	loc_C268
0000E088 0829 0000 0022             		btst	#0,obStatus(a1)
0000E08E 6600 0000                  		bne.w	locret_C2E4
0000E092 3F00                       		move.w	d0,-(sp)
0000E094 7600                       		moveq	#0,d3
0000E096 1628 0014                  		move.b	obActWid(a0),d3
0000E09A 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E0A0 301F                       		move.w	(sp)+,d0
0000E0A2 4A41                       		tst.w	d1
0000E0A4 6B00 0000                  		bmi.w	locret_C2E4
0000E0A8 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000E0B0 7001                       		moveq	#1,d0
0000E0B2 323C 0040                  		move.w	#$40,d1
0000E0B6 6000                       		bra.s	loc_C294
0000E0B8                            ; ===========================================================================
0000E0B8                            
0000E0B8                            loc_C268:
0000E0B8 0829 0000 0022             		btst	#0,obStatus(a1)
0000E0BE 6700                       		beq.s	locret_C2E4
0000E0C0 3F00                       		move.w	d0,-(sp)
0000E0C2 7600                       		moveq	#0,d3
0000E0C4 1628 0014                  		move.b	obActWid(a0),d3
0000E0C8 4643                       		not.w	d3
0000E0CA 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E0D0 301F                       		move.w	(sp)+,d0
0000E0D2 4A41                       		tst.w	d1
0000E0D4 6B00                       		bmi.s	locret_C2E4
0000E0D6 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
0000E0DE 70FF                       		moveq	#-1,d0
0000E0E0 323C FFC0                  		move.w	#-$40,d1
0000E0E4                            
0000E0E4                            loc_C294:
0000E0E4 43F8 D000                  		lea	(v_player).w,a1
0000E0E8 D169 0008                  		add.w	d0,obX(a1)
0000E0EC 3341 0020                  		move.w	d1,obInertia(a1)
0000E0F0 337C 0000 0010             		move.w	#0,obVelX(a1)
0000E0F6 3F00                       		move.w	d0,-(sp)
0000E102 301F                       		move.w	(sp)+,d0
0000E104 4A28 0028                  		tst.b	obSubtype(a0)
0000E108 6B00                       		bmi.s	locret_C2E4
0000E10A 3F00                       		move.w	d0,-(sp)
0000E10C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E112 301F                       		move.w	(sp)+,d0
0000E114 0C41 0004                  		cmpi.w	#4,d1
0000E118 6F00                       		ble.s	loc_C2E0
0000E11A 317C 0400 0010             		move.w	#$400,obVelX(a0)
0000E120 4A40                       		tst.w	d0
0000E122 6A00                       		bpl.s	loc_C2D8
0000E124 4468 0010                  		neg.w	obVelX(a0)
0000E128                            
0000E128                            loc_C2D8:
0000E128 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0000E12E 6000                       		bra.s	locret_C2E4
0000E130                            ; ===========================================================================
0000E130                            
0000E130                            loc_C2E0:
0000E130 D368 000C                  		add.w	d1,obY(a0)
0000E134                            
0000E134                            locret_C2E4:
0000E134 4E75                       		rts	
0000E134 4E75                       		rts	
0000E136                            Map_Push:	include	"_maps\Pushable Blocks.asm"
0000E136                            ; ---------------------------------------------------------------------------
0000E136                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000E136                            ; ---------------------------------------------------------------------------
0000E136                            Map_Push_internal:
0000E136 0000                       		dc.w @single-Map_Push_internal
0000E138 0000                       		dc.w @four-Map_Push_internal
0000E13A 01                         @single:	dc.b 1
0000E13B F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000E140 04                         @four:		dc.b 4
0000E141 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000E146 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000E14B F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000E150 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000E156 00                         		even
0000E156 00                         		even
0000E156                            
0000E156                            		include	"_incObj\34 Title Cards.asm"
0000E156                            ; ---------------------------------------------------------------------------
0000E156                            ; Object 34 - zone title cards
0000E156                            ; ---------------------------------------------------------------------------
0000E156                            
0000E156                            TitleCard:
0000E156 7000                       		moveq	#0,d0
0000E158 1028 0024                  		move.b	obRoutine(a0),d0
0000E15C 323B 0000                  		move.w	Card_Index(pc,d0.w),d1
0000E160 4EFB 1000                  		jmp	Card_Index(pc,d1.w)
0000E164                            ; ===========================================================================
0000E164 0000                       Card_Index:	dc.w Card_CheckSBZ3-Card_Index
0000E166 0000                       		dc.w Card_ChkPos-Card_Index
0000E168 0000                       		dc.w Card_Wait-Card_Index
0000E16A 0000                       		dc.w Card_Wait-Card_Index
0000E16C                            
0000E16C =00000030                  card_mainX:	equ $30		; position for card to display on
0000E16C =00000032                  card_finalX:	equ $32		; position for card to finish on
0000E16C                            ; ===========================================================================
0000E16C                            
0000E16C                            Card_CheckSBZ3:	; Routine 0
0000E16C 2248                       		movea.l	a0,a1
0000E16E 7000                       		moveq	#0,d0
0000E170 1038 FE10                  		move.b	(v_zone).w,d0
0000E174 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; check if level is SBZ 3
0000E17A 6600                       		bne.s	Card_CheckFZ
0000E17C 7001                       		moveq	#1,d0		; load title card number 6 (FZ)
0000E17E                            
0000E17E                            	Card_CheckFZ:
0000E17E 3400                       		move.w	d0,d2
0000E180 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; check if level is FZ
0000E186 6600                       		bne.s	Card_LoadConfig
0000E188 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000E18A 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000E18C                            
0000E18C                            	Card_LoadConfig:
0000E18C 47F9 0000 0000             		lea	(Card_ConData).l,a3
0000E192 E948                       		lsl.w	#4,d0
0000E194 D6C0                       		adda.w	d0,a3
0000E196 45F9 0000 0000             		lea	(Card_ItemData).l,a2
0000E19C 7203                       		moveq	#3,d1
0000E19E                            
0000E19E                            Card_Loop:
0000E19E 12BC 0000                  		move.b	#id_TitleCard,0(a1)
0000E1A2 3353 0008                  		move.w	(a3),obX(a1)	; load start x-position
0000E1A6 335B 0032                  		move.w	(a3)+,card_finalX(a1) ; load finish x-position (same as start)
0000E1AA 335B 0030                  		move.w	(a3)+,card_mainX(a1) ; load main x-position
0000E1AE 335A 000A                  		move.w	(a2)+,obScreenY(a1)
0000E1B2 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E1B6 101A                       		move.b	(a2)+,d0
0000E1B8 6600                       		bne.s	Card_ActNumber
0000E1BA 1002                       		move.b	d2,d0
0000E1BC                            
0000E1BC                            	Card_ActNumber:
0000E1BC 0C00 0007                  		cmpi.b	#7,d0
0000E1C0 6600                       		bne.s	Card_MakeSprite
0000E1C2 D038 FE11                  		add.b	(v_act).w,d0
0000E1C6 0C38 0003 FE11             		cmpi.b	#3,(v_act).w
0000E1CC 6600                       		bne.s	Card_MakeSprite
0000E1CE 5300                       		subq.b	#1,d0
0000E1D0                            
0000E1D0                            	Card_MakeSprite:
0000E1D0 1340 001A                  		move.b	d0,obFrame(a1)	; display frame	number d0
0000E1D4 237C 0000 0000 0004        		move.l	#Map_Card,obMap(a1)
0000E1DC 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E1E2 137C 0078 0014             		move.b	#$78,obActWid(a1)
0000E1E8 137C 0000 0001             		move.b	#0,obRender(a1)
0000E1EE 337C 0000 0018             		move.w	#0,obPriority(a1)
0000E1F4 337C 003C 001E             		move.w	#60,obTimeFrame(a1) ; set time delay to 1 second
0000E1FA 43E9 0040                  		lea	$40(a1),a1	; next object
0000E1FE 51C9 FF9E                  		dbf	d1,Card_Loop	; repeat sequence another 3 times
0000E202                            
0000E202                            Card_ChkPos:	; Routine 2
0000E202 7210                       		moveq	#$10,d1		; set horizontal speed
0000E204 3028 0030                  		move.w	card_mainX(a0),d0
0000E208 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the target position?
0000E20C 6700                       		beq.s	Card_NoMove	; if yes, branch
0000E20E 6C00                       		bge.s	Card_Move
0000E210 4441                       		neg.w	d1
0000E212                            
0000E212                            Card_Move:
0000E212 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E216                            
0000E216                            Card_NoMove:
0000E216 3028 0008                  		move.w	obX(a0),d0
0000E21A 6B00                       		bmi.s	locret_C3D8
0000E21C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E220 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000E222 6000 0000                  		bra.w	DisplaySprite
0000E226                            ; ===========================================================================
0000E226                            
0000E226                            locret_C3D8:
0000E226 4E75                       		rts	
0000E228                            ; ===========================================================================
0000E228                            
0000E228                            Card_Wait:	; Routine 4/6
0000E228 4A68 001E                  		tst.w	obTimeFrame(a0)	; is time remaining zero?
0000E22C 6700                       		beq.s	Card_ChkPos2	; if yes, branch
0000E22E 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time
0000E232 6000 0000                  		bra.w	DisplaySprite
0000E236                            ; ===========================================================================
0000E236                            
0000E236                            Card_ChkPos2:
0000E236 4A28 0001                  		tst.b	obRender(a0)
0000E23A 6A00                       		bpl.s	Card_ChangeArt
0000E23C 7220                       		moveq	#$20,d1
0000E23E 3028 0032                  		move.w	card_finalX(a0),d0
0000E242 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the finish position?
0000E246 6700                       		beq.s	Card_ChangeArt	; if yes, branch
0000E248 6C00                       		bge.s	Card_Move2
0000E24A 4441                       		neg.w	d1
0000E24C                            
0000E24C                            Card_Move2:
0000E24C D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E250 3028 0008                  		move.w	obX(a0),d0
0000E254 6B00                       		bmi.s	locret_C412
0000E256 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E25A 6400                       		bcc.s	locret_C412	; if yes, branch
0000E25C 6000 0000                  		bra.w	DisplaySprite
0000E260                            ; ===========================================================================
0000E260                            
0000E260                            locret_C412:
0000E260 4E75                       		rts	
0000E262                            ; ===========================================================================
0000E262                            
0000E262                            Card_ChangeArt:
0000E262 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000E268 6600                       		bne.s	Card_Delete
0000E26A 7000                       		moveq	#plcid_Explode,d0
0000E26C 4EB9 0000 173A             		jsr	(AddPLC).l	; load explosion patterns
0000E272 7000                       		moveq	#0,d0
0000E274 1038 FE10                  		move.b	(v_zone).w,d0
0000E278 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
0000E27C 4EB9 0000 173A             		jsr	(AddPLC).l	; load animal patterns
0000E282                            
0000E282                            Card_Delete:
0000E282 6000 0000                  		bra.w	DeleteObject
0000E286                            ; ===========================================================================
0000E286 00D0                       Card_ItemData:	dc.w $D0	; y-axis position
0000E288 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000E28A 00E4                       		dc.w $E4
0000E28C 0206                       		dc.b 2,	6
0000E28E 00EA                       		dc.w $EA
0000E290 0207                       		dc.b 2,	7
0000E292 00E0                       		dc.w $E0
0000E294 020A                       		dc.b 2,	$A
0000E296                            ; ---------------------------------------------------------------------------
0000E296                            ; Title	card configuration data
0000E296                            ; Format:
0000E296                            ; 4 bytes per item (YYYY XXXX)
0000E296                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000E296                            ; ---------------------------------------------------------------------------
0000E296 0000 0120 FEFC 013C 0414+  Card_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000E2A6 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000E2B6 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000E2C6 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000E2D6 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000E2E6 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000E2F6 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000E306                            ; ===========================================================================
0000E306                            ; ===========================================================================
0000E306                            		include	"_incObj\39 Game Over.asm"
0000E306                            ; ---------------------------------------------------------------------------
0000E306                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000E306                            ; ---------------------------------------------------------------------------
0000E306                            
0000E306                            GameOverCard:
0000E306 7000                       		moveq	#0,d0
0000E308 1028 0024                  		move.b	obRoutine(a0),d0
0000E30C 323B 0000                  		move.w	Over_Index(pc,d0.w),d1
0000E310 4EFB 1000                  		jmp	Over_Index(pc,d1.w)
0000E314                            ; ===========================================================================
0000E314 0000                       Over_Index:	dc.w Over_ChkPLC-Over_Index
0000E316 0000                       		dc.w Over_Move-Over_Index
0000E318 0000                       		dc.w Over_Wait-Over_Index
0000E31A                            ; ===========================================================================
0000E31A                            
0000E31A                            Over_ChkPLC:	; Routine 0
0000E31A 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E31E 6700                       		beq.s	Over_Main	; if yes, branch
0000E320 4E75                       		rts	
0000E322                            ; ===========================================================================
0000E322                            
0000E322                            Over_Main:
0000E322 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E326 317C 0050 0008             		move.w	#$50,obX(a0)	; set x-position
0000E32C 0828 0000 001A             		btst	#0,obFrame(a0)	; is the object	"OVER"?
0000E332 6700                       		beq.s	Over_1stWord	; if not, branch
0000E334 317C 01F0 0008             		move.w	#$1F0,obX(a0)	; set x-position for "OVER"
0000E33A                            
0000E33A                            	Over_1stWord:
0000E33A 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0000E340 217C 0000 0000 0004        		move.l	#Map_Over,obMap(a0)
0000E348 317C 855E 0002             		move.w	#$855E,obGfx(a0)
0000E34E 117C 0000 0001             		move.b	#0,obRender(a0)
0000E354 317C 0000 0018             		move.w	#0,obPriority(a0)
0000E35A                            
0000E35A                            Over_Move:	; Routine 2
0000E35A 7210                       		moveq	#$10,d1		; set horizontal speed
0000E35C 0C68 0120 0008             		cmpi.w	#$120,obX(a0)	; has item reached its target position?
0000E362 6700                       		beq.s	Over_SetWait	; if yes, branch
0000E364 6500                       		bcs.s	Over_UpdatePos
0000E366 4441                       		neg.w	d1
0000E368                            
0000E368                            	Over_UpdatePos:
0000E368 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E36C 6000 0000                  		bra.w	DisplaySprite
0000E370                            ; ===========================================================================
0000E370                            
0000E370                            Over_SetWait:
0000E370 317C 02D0 001E             		move.w	#720,obTimeFrame(a0) ; set time delay to 12 seconds
0000E376 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E37A 4E75                       		rts	
0000E37C                            ; ===========================================================================
0000E37C                            
0000E37C                            Over_Wait:	; Routine 4
0000E37C 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000E380 0200 0070                  		andi.b	#btnABC,d0	; is button A, B or C pressed?
0000E384 6600                       		bne.s	Over_ChgMode	; if yes, branch
0000E386 0828 0000 001A             		btst	#0,obFrame(a0)
0000E38C 6600                       		bne.s	Over_Display
0000E38E 4A68 001E                  		tst.w	obTimeFrame(a0)	; has time delay reached zero?
0000E392 6700                       		beq.s	Over_ChgMode	; if yes, branch
0000E394 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E398 6000 0000                  		bra.w	DisplaySprite
0000E39C                            ; ===========================================================================
0000E39C                            
0000E39C                            Over_ChgMode:
0000E39C 4A38 FE1A                  		tst.b	(f_timeover).w	; is time over flag set?
0000E3A0 6600                       		bne.s	Over_ResetLvl	; if yes, branch
0000E3A2 11FC 0000 F600             		move.b	#id_Continue,(v_gamemode).w ; set mode to $14 (continue screen)
0000E3A8 4A38 FE18                  		tst.b	(v_continues).w	; do you have any continues?
0000E3AC 6600                       		bne.s	Over_Display	; if yes, branch
0000E3AE 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set mode to 0 (Sega screen)
0000E3B4 6000                       		bra.s	Over_Display
0000E3B6                            ; ===========================================================================
0000E3B6                            
0000E3B6                            Over_ResetLvl:
0000E3B6 42B8 FE38                  			clr.l	(v_lamp_time).w
0000E3BA 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E3C0                            
0000E3C0                            Over_Display:
0000E3C0 6000 0000                  		bra.w	DisplaySprite
0000E3C0 6000 0000                  		bra.w	DisplaySprite
0000E3C4                            		include	"_incObj\3A Got Through Card.asm"
0000E3C4                            ; ---------------------------------------------------------------------------
0000E3C4                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000E3C4                            ; ---------------------------------------------------------------------------
0000E3C4                            
0000E3C4                            GotThroughCard:
0000E3C4 7000                       		moveq	#0,d0
0000E3C6 1028 0024                  		move.b	obRoutine(a0),d0
0000E3CA 323B 0000                  		move.w	Got_Index(pc,d0.w),d1
0000E3CE 4EFB 1000                  		jmp	Got_Index(pc,d1.w)
0000E3D2                            ; ===========================================================================
0000E3D2 0000                       Got_Index:	dc.w Got_ChkPLC-Got_Index
0000E3D4 0000                       		dc.w Got_Move-Got_Index
0000E3D6 0000                       		dc.w Got_Wait-Got_Index
0000E3D8 0000                       		dc.w Got_TimeBonus-Got_Index
0000E3DA 0000                       		dc.w Got_Wait-Got_Index
0000E3DC 0000                       		dc.w Got_NextLevel-Got_Index
0000E3DE 0000                       		dc.w Got_Wait-Got_Index
0000E3E0 0000                       		dc.w Got_Move2-Got_Index
0000E3E2 0000                       		dc.w loc_C766-Got_Index
0000E3E4                            
0000E3E4 =00000030                  got_mainX:	equ $30		; position for card to display on
0000E3E4 =00000032                  got_finalX:	equ $32		; position for card to finish on
0000E3E4                            ; ===========================================================================
0000E3E4                            
0000E3E4                            Got_ChkPLC:	; Routine 0
0000E3E4 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E3E8 6700                       		beq.s	Got_Main	; if yes, branch
0000E3EA 4E75                       		rts	
0000E3EC                            ; ===========================================================================
0000E3EC                            
0000E3EC                            Got_Main:
0000E3EC 2248                       		movea.l	a0,a1
0000E3EE 45F9 0000 0000             		lea	(Got_Config).l,a2
0000E3F4 7206                       		moveq	#6,d1
0000E3F6                            
0000E3F6                            Got_Loop:
0000E3F6 12BC 0000                  		move.b	#id_GotThroughCard,0(a1)
0000E3FA 3352 0008                  		move.w	(a2),obX(a1)	; load start x-position
0000E3FE 335A 0032                  		move.w	(a2)+,got_finalX(a1) ; load finish x-position (same as start)
0000E402 335A 0030                  		move.w	(a2)+,got_mainX(a1) ; load main x-position
0000E406 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E40A 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E40E 101A                       		move.b	(a2)+,d0
0000E410 0C00 0006                  		cmpi.b	#6,d0
0000E414 6600                       		bne.s	loc_C5CA
0000E416 D038 FE11                  		add.b	(v_act).w,d0	; add act number to frame number
0000E41A                            
0000E41A                            	loc_C5CA:
0000E41A 1340 001A                  		move.b	d0,obFrame(a1)
0000E41E 237C 0000 0000 0004        		move.l	#Map_Got,obMap(a1)
0000E426 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E42C 137C 0000 0001             		move.b	#0,obRender(a1)
0000E432 43E9 0040                  		lea	$40(a1),a1
0000E436 51C9 FFBE                  		dbf	d1,Got_Loop	; repeat 6 times
0000E43A                            
0000E43A                            Got_Move:	; Routine 2
0000E43A 7210                       		moveq	#$10,d1		; set horizontal speed
0000E43C 3028 0030                  		move.w	got_mainX(a0),d0
0000E440 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E444 6700                       		beq.s	loc_C61A	; if yes, branch
0000E446 6C00                       		bge.s	Got_ChgPos
0000E448 4441                       		neg.w	d1
0000E44A                            
0000E44A                            	Got_ChgPos:
0000E44A D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E44E                            
0000E44E                            	loc_C5FE:
0000E44E 3028 0008                  		move.w	obX(a0),d0
0000E452 6B00                       		bmi.s	locret_C60E
0000E454 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E458 6400                       		bcc.s	locret_C60E	; if yes, branch
0000E45A 6000 0000                  		bra.w	DisplaySprite
0000E45E                            ; ===========================================================================
0000E45E                            
0000E45E                            locret_C60E:
0000E45E 4E75                       		rts	
0000E460                            ; ===========================================================================
0000E460                            
0000E460                            loc_C610:
0000E460 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000E466 6000 0000                  		bra.w	Got_Move2
0000E46A                            ; ===========================================================================
0000E46A                            
0000E46A                            loc_C61A:
0000E46A 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000E470 67EE                       		beq.s	loc_C610
0000E472 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E478 66D4                       		bne.s	loc_C5FE
0000E47A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E47E 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E484                            		;move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E484                            
0000E484                            Got_Wait:	; Routine 4, 8, $C
0000E484 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E488 6600                       		bne.s	Got_Display
0000E48A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E48E                            
0000E48E                            Got_Display:
0000E48E 6000 0000                  		bra.w	DisplaySprite
0000E492                            ; ===========================================================================
0000E492                            
0000E492                            Got_TimeBonus:	; Routine 6
0000E492 6100 0000                  		bsr.w	DisplaySprite
0000E496 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set time/ring bonus update flag
0000E49C 7000                       		moveq	#0,d0
0000E49E 4A78 F7D2                  		tst.w	(v_timebonus).w	; is time bonus	= zero?
0000E4A2 6700                       		beq.s	Got_RingBonus	; if yes, branch
0000E4A4 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E4A8 0478 000A F7D2             		subi.w	#10,(v_timebonus).w ; subtract 10 from time bonus
0000E4AE                            
0000E4AE                            Got_RingBonus:
0000E4AE 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E4B2 6700                       		beq.s	Got_ChkBonus	; if yes, branch
0000E4B4 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E4B8 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E4BE                            
0000E4BE                            Got_ChkBonus:
0000E4BE 4A40                       		tst.w	d0		; is there any bonus?
0000E4C0 6600                       		bne.s	Got_AddBonus	; if yes, branch
0000E4CC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E4D0 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w
0000E4D6 6600                       		bne.s	Got_SetDelay
0000E4D8 5828 0024                  		addq.b	#4,obRoutine(a0)
0000E4DC                            
0000E4DC                            Got_SetDelay:
0000E4DC 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E4E2                            
0000E4E2                            locret_C692:
0000E4E2 4E75                       		rts	
0000E4E4                            ; ===========================================================================
0000E4E4                            
0000E4E4                            Got_AddBonus:
0000E4E4 4EB9 0000 0000             		jsr	(AddPoints).l
0000E4EA 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E4EE 0200 0003                  		andi.b	#3,d0
0000E4F2 66EE                       		bne.s	locret_C692
0000E4FE                            ; ===========================================================================
0000E4FE                            
0000E4FE                            Got_NextLevel:	; Routine $A
0000E4FE 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E504 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E50A 1038 FE10                  		move.b	(v_zone).w,d0
0000E50E 0240 0007                  		andi.w	#7,d0
0000E512 E748                       		lsl.w	#3,d0
0000E514 1238 FE11                  		move.b	(v_act).w,d1
0000E518 0241 0003                  		andi.w	#3,d1
0000E51C D241                       		add.w	d1,d1
0000E51E D041                       		add.w	d1,d0
0000E520 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000E524 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
0000E528 4A40                       		tst.w	d0
0000E52A 6600                       		bne.s	Got_ChkSS
0000E52C 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
0000E532 6000                       		bra.s	Got_Display2
0000E534                            ; ===========================================================================
0000E534                            
0000E534                            Got_ChkSS:	
0000E534 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
0000E538                            		;tst.b	(f_emeraldm).w
0000E538                            		;beq.s	VBla_08A
0000E538                            		;addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0000E538                            		;sfx		bgm_Emerald,1,0,0 ;	play emerald music
0000E538                            		;bra.s	Got_Display2
0000E538 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E53E                            		
0000E53E                            ; ===========================================================================
0000E53E                            
0000E53E                            VBla_08A:
0000E53E 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E544                            
0000E544                            Got_Display2:
0000E544 6000 0000                  		bra.w	DisplaySprite
0000E548                            ; ===========================================================================
0000E548                            ; ---------------------------------------------------------------------------
0000E548                            ; Level	order array
0000E548                            ; ---------------------------------------------------------------------------
0000E548                            LevelOrder:
0000E548                            		; Green Hill Zone
0000E548 0001                       		dc.b id_GHZ, 1	; Act 2
0000E54A 0002                       		dc.b id_GHZ, 2	; Act 2
0000E54C 0400                       		dc.b id_SYZ, 0	; Act 3
0000E54E 0000                       		dc.b 0, 0
0000E550                            
0000E550                            		; Labyrinth Zone
0000E550 0101                       		dc.b id_LZ, 1	; Act 1
0000E552 0102                       		dc.b id_LZ, 2	; Act 2
0000E554 0000                       		dc.b id_GHZ, 0 	; Act 3
0000E556 0502                       		dc.b id_SBZ, 2	; Scrap Brain Zone Act 3
0000E558                            
0000E558                            		; Marble Zone
0000E558 0201                       		dc.b id_MZ, 1	; Act 1
0000E55A 0202                       		dc.b id_MZ, 2	; Act 2
0000E55C 0502                       		dc.b id_SBZ, 2	; Act 3
0000E55E 0000                       		dc.b 0, 0
0000E560                            
0000E560                            		; Star Light Zone
0000E560 0301                       		dc.b id_SLZ, 1	; Act 1
0000E562 0302                       		dc.b id_SLZ, 2	; Act 2
0000E564 0500                       		dc.b id_SBZ, 0	; Act 3
0000E566 0000                       		dc.b 0, 0
0000E568                            
0000E568                            		; Spring Yard Zone
0000E568 0401                       		dc.b id_SYZ, 1	; Act 1
0000E56A 0200                       		dc.b id_MZ,  0	; Act 2
0000E56C 0200                       		dc.b id_MZ,	 0	; Act 3
0000E56E 0000                       		dc.b 0, 0
0000E570                            
0000E570                            		; Scrap Brain Zone
0000E570 0501                       		dc.b id_SBZ, 1	; Act 1
0000E572 0103                       		dc.b id_LZ, 3	; Act 2
0000E574 0000                       		dc.b 0, 0	; Final Zone
0000E576 0000                       		dc.b 0, 0
0000E578                            		even
0000E578                            ; ===========================================================================
0000E578                            
0000E578                            Got_Move2:	; Routine $E
0000E578 7220                       		moveq	#$20,d1		; set horizontal speed
0000E57A 3028 0032                  		move.w	got_finalX(a0),d0
0000E57E B068 0008                  		cmp.w	obX(a0),d0	; has item reached its finish position?
0000E582 6700                       		beq.s	Got_SBZ2	; if yes, branch
0000E584 6C00                       		bge.s	Got_ChgPos2
0000E586 4441                       		neg.w	d1
0000E588                            
0000E588                            	Got_ChgPos2:
0000E588 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E58C 3028 0008                  		move.w	obX(a0),d0
0000E590 6B00                       		bmi.s	locret_C748
0000E592 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E596 6400                       		bcc.s	locret_C748	; if yes, branch
0000E598 6000 0000                  		bra.w	DisplaySprite
0000E59C                            ; ===========================================================================
0000E59C                            
0000E59C                            locret_C748:
0000E59C 4E75                       		rts	
0000E59E                            ; ===========================================================================
0000E59E                            
0000E59E                            Got_SBZ2:
0000E59E 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E5A4 6600 0000                  		bne.w	DeleteObject
0000E5A8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E5AC 4238 F7CC                  		clr.b	(f_lockctrl).w	; unlock controls
0000E5B0 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E5B6                            ; ===========================================================================
0000E5B6                            
0000E5B6                            loc_C766:	; Routine $10
0000E5B6 5478 F72A                  		addq.w	#2,(v_limitright2).w
0000E5BA 0C78 2100 F72A             		cmpi.w	#$2100,(v_limitright2).w
0000E5C0 6700 0000                  		beq.w	DeleteObject
0000E5C4 4E75                       		rts	
0000E5C6                            ; ===========================================================================
0000E5C6                            		;    x-start,	x-main,	y-main,
0000E5C6                            		;				routine, frame number
0000E5C6                            
0000E5C6 0004 0124 00BC             Got_Config:	dc.w 4,		$124,	$BC			; "SONIC HAS"
0000E5CC 0200                       		dc.b 				2,	0
0000E5CE                            
0000E5CE FEE0 0120 00D0             		dc.w -$120,	$120,	$D0			; "PASSED"
0000E5D4 0201                       		dc.b 				2,	1
0000E5D6                            
0000E5D6 040C 014C 00D6             		dc.w $40C,	$14C,	$D6			; "ACT" 1/2/3
0000E5DC 0206                       		dc.b 				2,	6
0000E5DE                            
0000E5DE 0520 0120 0112             		dc.w $520,	$120,	$112			; score
0000E5E4 0202                       		dc.b 				2,	2
0000E5E6                            
0000E5E6 0540 0120 00F2             		dc.w $540,	$120,	$F2			; time bonus
0000E5EC 0203                       		dc.b 				2,	3
0000E5EE                            
0000E5EE 0560 0120 0102             		dc.w $560,	$120,	$102			; ring bonus
0000E5F4 0204                       		dc.b 				2,	4
0000E5F6                            
0000E5F6 020C 014C 00CC             		dc.w $20C,	$14C,	$CC			; oval
0000E5FC 0205                       		dc.b 				2,	5
0000E5FC 0205                       		dc.b 				2,	5
0000E5FE                            		include	"_incObj\7E Special Stage Results.asm"
0000E5FE                            ; ---------------------------------------------------------------------------
0000E5FE                            ; Object 7E - special stage results screen
0000E5FE                            ; ---------------------------------------------------------------------------
0000E5FE                            
0000E5FE                            SSResult:
0000E5FE 7000                       		moveq	#0,d0
0000E600 1028 0024                  		move.b	obRoutine(a0),d0
0000E604 323B 0000                  		move.w	SSR_Index(pc,d0.w),d1
0000E608 4EFB 1000                  		jmp	SSR_Index(pc,d1.w)
0000E60C                            ; ===========================================================================
0000E60C 0000                       SSR_Index:	dc.w SSR_ChkPLC-SSR_Index
0000E60E 0000                       		dc.w SSR_Move-SSR_Index
0000E610 0000                       		dc.w SSR_Wait-SSR_Index
0000E612 0000                       		dc.w SSR_RingBonus-SSR_Index
0000E614 0000                       		dc.w SSR_Wait-SSR_Index
0000E616 0000                       		dc.w SSR_Exit-SSR_Index
0000E618 0000                       		dc.w SSR_Wait-SSR_Index
0000E61A 0000                       		dc.w SSR_Continue-SSR_Index
0000E61C 0000                       		dc.w SSR_Wait-SSR_Index
0000E61E 0000                       		dc.w SSR_Exit-SSR_Index
0000E620 0000                       		dc.w loc_C91A-SSR_Index
0000E622                            
0000E622 =00000030                  ssr_mainX:	equ $30		; position for card to display on
0000E622                            ; ===========================================================================
0000E622                            
0000E622                            SSR_ChkPLC:	; Routine 0
0000E622 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E626 6700                       		beq.s	SSR_Main	; if yes, branch
0000E628 4E75                       		rts	
0000E62A                            ; ===========================================================================
0000E62A                            
0000E62A                            SSR_Main:
0000E62A 2248                       		movea.l	a0,a1
0000E62C 45F9 0000 0000             		lea	(SSR_Config).l,a2
0000E632 7203                       		moveq	#3,d1
0000E634 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have 50 or more rings?
0000E63A 6500                       		bcs.s	SSR_Loop	; if no, branch
0000E63C 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000E63E                            
0000E63E                            	SSR_Loop:
0000E63E 12BC 0000                  		move.b	#id_SSResult,0(a1)
0000E642 335A 0008                  		move.w	(a2)+,obX(a1)	; load start x-position
0000E646 335A 0030                  		move.w	(a2)+,ssr_mainX(a1) ; load main x-position
0000E64A 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E64E 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E652 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000E656 237C 0000 0000 0004        		move.l	#Map_SSR,obMap(a1)
0000E65E 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E664 137C 0000 0001             		move.b	#0,obRender(a1)
0000E66A 43E9 0040                  		lea	$40(a1),a1
0000E66E 51C9 FFCE                  		dbf	d1,SSR_Loop	; repeat sequence 3 or 4 times
0000E672                            
0000E672 7007                       		moveq	#7,d0
0000E674 1238 FE57                  		move.b	(v_emeralds).w,d1
0000E678 6700                       		beq.s	loc_C842
0000E67A 7000                       		moveq	#0,d0
0000E67C 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000E680 6600                       		bne.s	loc_C842	; if not, branch
0000E682 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000E684 317C 0018 0008             		move.w	#$18,obX(a0)
0000E68A 317C 0118 0030             		move.w	#$118,ssr_mainX(a0) ; change position of text
0000E690                            
0000E690                            loc_C842:
0000E690 1140 001A                  		move.b	d0,obFrame(a0)
0000E694                            
0000E694                            SSR_Move:	; Routine 2
0000E694 7210                       		moveq	#$10,d1		; set horizontal speed
0000E696 3028 0030                  		move.w	ssr_mainX(a0),d0
0000E69A B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E69E 6700                       		beq.s	loc_C86C	; if yes, branch
0000E6A0 6C00                       		bge.s	SSR_ChgPos
0000E6A2 4441                       		neg.w	d1
0000E6A4                            
0000E6A4                            SSR_ChgPos:
0000E6A4 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E6A8                            
0000E6A8                            loc_C85A:
0000E6A8 3028 0008                  		move.w	obX(a0),d0
0000E6AC 6B00                       		bmi.s	locret_C86A
0000E6AE 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E6B2 6400                       		bcc.s	locret_C86A	; if yes, branch
0000E6B4 6000 0000                  		bra.w	DisplaySprite
0000E6B8                            ; ===========================================================================
0000E6B8                            
0000E6B8                            locret_C86A:
0000E6B8 4E75                       		rts	
0000E6BA                            ; ===========================================================================
0000E6BA                            
0000E6BA                            loc_C86C:
0000E6BA 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000E6C0 66E6                       		bne.s	loc_C85A
0000E6C2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E6C6 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E6CC 11FC 0000 D800             		move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E6D2                            
0000E6D2                            SSR_Wait:	; Routine 4, 8, $C, $10
0000E6D2 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E6D6 6600                       		bne.s	SSR_Display
0000E6D8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E6DC                            
0000E6DC                            SSR_Display:
0000E6DC 6000 0000                  		bra.w	DisplaySprite
0000E6E0                            ; ===========================================================================
0000E6E0                            
0000E6E0                            SSR_RingBonus:	; Routine 6
0000E6E0 6100 0000                  		bsr.w	DisplaySprite
0000E6E4 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set ring bonus update flag
0000E6EA 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E6EE 6700                       		beq.s	loc_C8C4	; if yes, branch
0000E6F0 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E6F6 700A                       		moveq	#10,d0		; add 10 to score
0000E6F8 4EB9 0000 0000             		jsr	(AddPoints).l
0000E6FE 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E702 0200 0003                  		andi.b	#3,d0
0000E706 6600                       		bne.s	locret_C8EA
0000E712                            ; ===========================================================================
0000E712                            
0000E712                            loc_C8C4:
0000E71C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E720 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E726 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have at least 50 rings?
0000E72C 6500                       		bcs.s	locret_C8EA	; if not, branch
0000E72E 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time delay to 1 second
0000E734 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto "SSR_Continue" routine
0000E738                            
0000E738                            locret_C8EA:
0000E738 4E75                       		rts	
0000E73A                            ; ===========================================================================
0000E73A                            
0000E73A                            SSR_Exit:	; Routine $A, $12
0000E73A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E740 6000 0000                  		bra.w	DisplaySprite
0000E744                            ; ===========================================================================
0000E744                            
0000E744                            SSR_Continue:	; Routine $E
0000E744 11FC 0004 D6DA             		move.b	#4,(v_objspace+$6C0+obFrame).w
0000E74A 11FC 0014 D6E4             		move.b	#$14,(v_objspace+$6C0+obRoutine).w
0000E75A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E75E 317C 0168 001E             		move.w	#360,obTimeFrame(a0) ; set time delay to 6 seconds
0000E764 6000 0000                  		bra.w	DisplaySprite
0000E768                            ; ===========================================================================
0000E768                            
0000E768                            loc_C91A:	; Routine $14
0000E768 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E76C 0200 000F                  		andi.b	#$F,d0
0000E770 6600                       		bne.s	SSR_Display2
0000E772 0868 0000 001A             		bchg	#0,obFrame(a0)
0000E778                            
0000E778                            SSR_Display2:
0000E778 6000 0000                  		bra.w	DisplaySprite
0000E77C                            ; ===========================================================================
0000E77C 0020 0120 00C4             SSR_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000E782 0200                       		dc.b 2,	0		; rountine number, frame number
0000E784 0320 0120 0118             		dc.w $320, $120, $118
0000E78A 0201                       		dc.b 2,	1
0000E78C 0360 0120 0128             		dc.w $360, $120, $128
0000E792 0202                       		dc.b 2,	2
0000E794 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000E79A 0203                       		dc.b 2,	3
0000E79C 03A0 0120 0138             		dc.w $3A0, $120, $138
0000E7A2 0206                       		dc.b 2,	6
0000E7A2 0206                       		dc.b 2,	6
0000E7A4                            		include	"_incObj\7F SS Result Chaos Emeralds.asm"
0000E7A4                            ; ---------------------------------------------------------------------------
0000E7A4                            ; Object 7F - chaos emeralds from the special stage results screen
0000E7A4                            ; ---------------------------------------------------------------------------
0000E7A4                            
0000E7A4                            SSRChaos:
0000E7A4 7000                       		moveq	#0,d0
0000E7A6 1028 0024                  		move.b	obRoutine(a0),d0
0000E7AA 323B 0000                  		move.w	SSRC_Index(pc,d0.w),d1
0000E7AE 4EFB 1000                  		jmp	SSRC_Index(pc,d1.w)
0000E7B2                            ; ===========================================================================
0000E7B2 0000                       SSRC_Index:	dc.w SSRC_Main-SSRC_Index
0000E7B4 0000                       		dc.w SSRC_Flash-SSRC_Index
0000E7B6                            
0000E7B6                            ; ---------------------------------------------------------------------------
0000E7B6                            ; X-axis positions for chaos emeralds
0000E7B6                            ; ---------------------------------------------------------------------------
0000E7B6 0110 0128 00F8 0140 00E0+  SSRC_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000E7C2                            ; ===========================================================================
0000E7C2                            
0000E7C2                            SSRC_Main:	; Routine 0
0000E7C2 2248                       		movea.l	a0,a1
0000E7C4 45F9 0000 E7B6             		lea	(SSRC_PosData).l,a2
0000E7CA 7400                       		moveq	#0,d2
0000E7CC 7200                       		moveq	#0,d1
0000E7CE 1238 FE57                  		move.b	(v_emeralds).w,d1 ; d1 is number of emeralds
0000E7D2 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000E7D4 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000E7D8                            
0000E7D8                            	SSRC_Loop:
0000E7D8 12BC 0000                  		move.b	#id_SSRChaos,0(a1)
0000E7DC 335A 0008                  		move.w	(a2)+,obX(a1)	; set x-position
0000E7E0 337C 00F0 000A             		move.w	#$F0,obScreenY(a1) ; set y-position
0000E7E6 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0000E7EA 1633 2000                  		move.b	(a3,d2.w),d3
0000E7EE 1343 001A                  		move.b	d3,obFrame(a1)
0000E7F2 1343 001C                  		move.b	d3,obAnim(a1)
0000E7F6 5202                       		addq.b	#1,d2
0000E7F8 5429 0024                  		addq.b	#2,obRoutine(a1)
0000E7FC 237C 0000 0000 0004        		move.l	#Map_SSRC,obMap(a1)
0000E804 337C 8541 0002             		move.w	#$8541,obGfx(a1)
0000E80A 137C 0000 0001             		move.b	#0,obRender(a1)
0000E810 43E9 0040                  		lea	$40(a1),a1	; next object
0000E814 51C9 FFC2                  		dbf	d1,SSRC_Loop	; loop for d1 number of	emeralds
0000E818                            
0000E818                            SSRC_Flash:	; Routine 2
0000E818 1028 001A                  		move.b	obFrame(a0),d0
0000E81C 117C 0006 001A             		move.b	#6,obFrame(a0)	; load 6th frame (blank)
0000E822 0C00 0006                  		cmpi.b	#6,d0
0000E826 6600                       		bne.s	SSRC_Display
0000E828 1168 001C 001A             		move.b	obAnim(a0),obFrame(a0) ; load visible frame
0000E82E                            
0000E82E                            	SSRC_Display:
0000E82E 6000 0000                  		bra.w	DisplaySprite
0000E82E 6000 0000                  		bra.w	DisplaySprite
0000E832                            
0000E832                            ; ---------------------------------------------------------------------------
0000E832                            ; Sprite mappings - zone title cards
0000E832                            ; ---------------------------------------------------------------------------
0000E832 0000                       Map_Card:	dc.w M_Card_GHZ-Map_Card
0000E834 0000                       		dc.w M_Card_LZ-Map_Card
0000E836 0000                       		dc.w M_Card_MZ-Map_Card
0000E838 0000                       		dc.w M_Card_SLZ-Map_Card
0000E83A 0000                       		dc.w M_Card_SYZ-Map_Card
0000E83C 0000                       		dc.w M_Card_SBZ-Map_Card
0000E83E 0000                       		dc.w M_Card_Zone-Map_Card
0000E840 0000                       		dc.w M_Card_Act1-Map_Card
0000E842 0000                       		dc.w M_Card_Act2-Map_Card
0000E844 0000                       		dc.w M_Card_Act3-Map_Card
0000E846 0000                       		dc.w M_Card_Oval-Map_Card
0000E848 0000                       		dc.w M_Card_FZ-Map_Card
0000E84A 09                         M_Card_GHZ:	dc.b 9 			; GREEN HILL
0000E84B F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000E850 F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000E855 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000E85A F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000E85F F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000E864 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000E869 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000E86E F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000E873 F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000E878                            		even
0000E878 0D                         M_Card_LZ:	dc.b $D	;  LABYRINTH | ROBOTIC ABYSS
0000E879 F805 003A 9C               		dc.b $F8, 5, 0, $3A, $9C	; R
0000E87E F805 0032 AC               		dc.b $F8, 5, 0, $32, $AC	; O
0000E883 F805 0004 BC               		dc.b $F8, 5, 0, 4, $BC		; B
0000E888 F805 0032 CC               		dc.b $F8, 5, 0, $32, $CC	; O
0000E88D F805 0042 DC               		dc.b $F8, 5, 0, $42, $DC	; T
0000E892 F801 0020 EC               		dc.b $F8, 1, 0, $20, $EC	; I
0000E897 F805 0008 F4               		dc.b $F8, 5, 0, 8, $F4		; C
0000E89C F800 0056 04               		dc.b $F8, 0, 0, $56, $4	; Space
0000E8A1 F805 0000 14               		dc.b $F8, 5, 0, 0, $14		; A
0000E8A6 F805 0004 24               		dc.b $F8, 5, 0, 4, $24		; B
0000E8AB F805 004A 34               		dc.b $F8, 5, 0, $4A, $34	; Y
0000E8B0 F805 003E 44               		dc.b $F8, 5, 0, $3E, $44	; S
0000E8B5 F805 003E 54               		dc.b $F8, 5, 0, $3E, $54	; S
0000E8BA 0B                         M_Card_MZ:	dc.b $B	;  MARBLE | SCRAP RUINS
0000E8BB F805 003E A4               		dc.b $F8, 5, 0, $3E, $A4	; S
0000E8C0 F805 0008 B4               		dc.b $F8, 5, 0, 8, $B4		; C
0000E8C5 F805 003A C4               		dc.b $F8, 5, 0, $3A, $C4	; R
0000E8CA F805 0000 D4               		dc.b $F8, 5, 0, 0, $D4		; A
0000E8CF F805 0036 E4               		dc.b $F8, 5, 0, $36, $E4	; P
0000E8D4 F800 0056 F4               		dc.b $F8, 0, 0, $56, $F4	; Space
0000E8D9 F805 003A 04               		dc.b $F8, 5, 0, $3A, $4	; R
0000E8DE F805 0046 14               		dc.b $F8, 5, 0, $46, $14	; U
0000E8E3 F801 0020 24               		dc.b $F8, 1, 0, $20, $24	; I
0000E8E8 F805 002E 2C               		dc.b $F8, 5, 0, $2E, $2C	; N
0000E8ED F805 003E 3C               		dc.b $F8, 5, 0, $3E, $3C	; S
0000E8F2 09                         M_Card_SLZ:	dc.b 9			; STAR LIGHT
0000E8F3 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000E8F8 F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000E8FD F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000E902 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000E907 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000E90C F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000E911 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000E916 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000E91B F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000E920                            		even
0000E920 0A                         M_Card_SYZ:	dc.b $A	;  SPRING YARD | FUTURE BAY
0000E921 F805 0014 AC               		dc.b $F8, 5, 0, $14, $AC	; F
0000E926 F805 0046 BC               		dc.b $F8, 5, 0, $46, $BC	; U
0000E92B F805 0042 CC               		dc.b $F8, 5, 0, $42, $CC	; T
0000E930 F805 0046 DC               		dc.b $F8, 5, 0, $46, $DC	; U
0000E935 F805 003A EC               		dc.b $F8, 5, 0, $3A, $EC	; R
0000E93A F805 0010 FC               		dc.b $F8, 5, 0, $10, $FC	; E
0000E93F F800 0056 0C               		dc.b $F8, 0, 0, $56, $C	; Space
0000E944 F805 0004 1C               		dc.b $F8, 5, 0, 4, $1C		; B
0000E949 F805 0000 2C               		dc.b $F8, 5, 0, 0, $2C		; A
0000E94E F805 004A 3C               		dc.b $F8, 5, 0, $4A, $3C	; Y
0000E953 0A                         M_Card_SBZ:	dc.b $A			; SCRAP BRAIN
0000E954 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000E959 F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000E95E F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000E963 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000E968 F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000E96D F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000E972 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000E977 F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000E97C F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000E981 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000E986                            		even
0000E986 04                         M_Card_Zone:	dc.b 4			; ZONE
0000E987 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000E98C F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000E991 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000E996 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000E99C 00                         		even
0000E99C 02                         M_Card_Act1:	dc.b 2			; ACT 1
0000E99D 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000E9A2 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000E9A7 02                         M_Card_Act2:	dc.b 2			; ACT 2
0000E9A8 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000E9AD F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000E9B2 02                         M_Card_Act3:	dc.b 2			; ACT 3
0000E9B3 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000E9B8 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000E9BD 0D                         M_Card_Oval:	dc.b $D			; Oval
0000E9BE E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000E9C3 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000E9C8 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000E9CD F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000E9D2 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000E9D7 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000E9DC 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000E9E1 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000E9E6 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000E9EB F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000E9F0 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000E9F5 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000E9FA 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000EA00 00                         		even
0000EA00 05                         M_Card_FZ:	dc.b 5			; FINAL
0000EA01 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000EA06 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000EA0B F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000EA10 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000EA15 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000EA1A                            		even
0000EA1A                            
0000EA1A                            Map_Over:	include	"_maps\Game Over.asm"
0000EA1A                            ; ---------------------------------------------------------------------------
0000EA1A                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000EA1A                            ; ---------------------------------------------------------------------------
0000EA1A                            Map_Over_internal:
0000EA1A 0000                       		dc.w byte_CBAC-Map_Over_internal
0000EA1C 0000                       		dc.w byte_CBB7-Map_Over_internal
0000EA1E 0000                       		dc.w byte_CBC2-Map_Over_internal
0000EA20 0000                       		dc.w byte_CBCD-Map_Over_internal
0000EA22 02                         byte_CBAC:	dc.b 2			; GAME
0000EA23 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000EA28 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000EA2D 02                         byte_CBB7:	dc.b 2			; OVER
0000EA2E F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000EA33 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000EA38 02                         byte_CBC2:	dc.b 2			; TIME
0000EA39 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000EA3E F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000EA43 02                         byte_CBCD:	dc.b 2			; OVER
0000EA44 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000EA49 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000EA4E                            		even
0000EA4E                            		even
0000EA4E                            
0000EA4E                            ; ---------------------------------------------------------------------------
0000EA4E                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000EA4E                            ; ---------------------------------------------------------------------------
0000EA4E 0000                       Map_Got:	dc.w M_Got_SonicHas-Map_Got
0000EA50 0000                       		dc.w M_Got_Passed-Map_Got
0000EA52 0000                       		dc.w M_Got_Score-Map_Got
0000EA54 0000                       		dc.w M_Got_TBonus-Map_Got
0000EA56 0000                       		dc.w M_Got_RBonus-Map_Got
0000EA58 FF6F                       		dc.w M_Card_Oval-Map_Got
0000EA5A FF4E                       		dc.w M_Card_Act1-Map_Got
0000EA5C FF59                       		dc.w M_Card_Act2-Map_Got
0000EA5E FF64                       		dc.w M_Card_Act3-Map_Got
0000EA60 08                         M_Got_SonicHas:	dc.b 8			; SONIC HAS
0000EA61 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000EA66 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000EA6B F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000EA70 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000EA75 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000EA7A F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000EA7F F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000EA84 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000EA89 06                         M_Got_Passed:	dc.b 6			; PASSED
0000EA8A F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000EA8F F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000EA94 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000EA99 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000EA9E F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EAA3 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000EAA8 06                         M_Got_Score:	dc.b 6			; SCORE
0000EAA9 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EAAE F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EAB3 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EAB8 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EABD F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EAC2 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EAC7 07                         M_Got_TBonus:	dc.b 7			; TIME BONUS
0000EAC8 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000EACD F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EAD2 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EAD7 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EADC FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EAE1 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000EAE6 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EAEB 07                         M_Got_RBonus:	dc.b 7			; RING BONUS
0000EAEC F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EAF1 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EAF6 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EAFB F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EB00 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EB05 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EB0A F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EB10 00                         		even
0000EB10                            ; ---------------------------------------------------------------------------
0000EB10                            ; Sprite mappings - special stage results screen
0000EB10                            ; ---------------------------------------------------------------------------
0000EB10 0000                       Map_SSR:	dc.w M_SSR_Chaos-Map_SSR
0000EB12 0000                       		dc.w M_SSR_Score-Map_SSR
0000EB14 0000                       		dc.w byte_CD0D-Map_SSR
0000EB16 FEAD                       		dc.w M_Card_Oval-Map_SSR
0000EB18 0000                       		dc.w byte_CD31-Map_SSR
0000EB1A 0000                       		dc.w byte_CD46-Map_SSR
0000EB1C 0000                       		dc.w byte_CD5B-Map_SSR
0000EB1E 0000                       		dc.w byte_CD6B-Map_SSR
0000EB20 0000                       		dc.w byte_CDA8-Map_SSR
0000EB22 0D                         M_SSR_Chaos:	dc.b $D			; "CHAOS EMERALDS"
0000EB23 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000EB28 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000EB2D F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000EB32 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000EB37 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000EB3C F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000EB41 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000EB46 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EB4B F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000EB50 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000EB55 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000EB5A F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000EB5F F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000EB64 06                         M_SSR_Score:	dc.b 6			; "SCORE"
0000EB65 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EB6A F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EB6F F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EB74 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EB79 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EB7E FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EB83 07                         byte_CD0D:	dc.b 7
0000EB84 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EB89 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EB8E F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EB93 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EB98 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EB9D F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EBA2 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EBA7 04                         byte_CD31:	dc.b 4
0000EBA8 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EBAD F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EBB2 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EBB7 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000EBBC 04                         byte_CD46:	dc.b 4
0000EBBD F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EBC2 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EBC7 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EBCC F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000EBD1 03                         byte_CD5B:	dc.b 3
0000EBD2 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EBD7 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EBDC F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EBE1 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000EBE2 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000EBE7 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000EBEC F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000EBF1 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000EBF6 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000EBFB F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000EC00 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000EC05 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000EC0A F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000EC0F F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000EC14 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000EC19 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000EC1E 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000EC1F F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000EC24 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000EC29 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000EC2E F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000EC33 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000EC38 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000EC3D F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000EC42 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000EC47 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000EC4C F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000EC51 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000EC56 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000EC5B F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000EC60 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000EC65 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000EC6A                            		even
0000EC6A                            
0000EC6A                            Map_SSRC:	include	"_maps\SS Result Chaos Emeralds.asm"
0000EC6A                            ; ---------------------------------------------------------------------------
0000EC6A                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000EC6A                            ; ---------------------------------------------------------------------------
0000EC6A                            Map_SSRC_internal:
0000EC6A 0000                       		dc.w byte_CE02-Map_SSRC_internal
0000EC6C 0000                       		dc.w byte_CE08-Map_SSRC_internal
0000EC6E 0000                       		dc.w byte_CE0E-Map_SSRC_internal
0000EC70 0000                       		dc.w byte_CE14-Map_SSRC_internal
0000EC72 0000                       		dc.w byte_CE1A-Map_SSRC_internal
0000EC74 0000                       		dc.w byte_CE20-Map_SSRC_internal
0000EC76 0000                       		dc.w byte_CE26-Map_SSRC_internal
0000EC78 01                         byte_CE02:	dc.b 1
0000EC79 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000EC7E 01                         byte_CE08:	dc.b 1
0000EC7F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000EC84 01                         byte_CE0E:	dc.b 1
0000EC85 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000EC8A 01                         byte_CE14:	dc.b 1
0000EC8B F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000EC90 01                         byte_CE1A:	dc.b 1
0000EC91 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000EC96 01                         byte_CE20:	dc.b 1
0000EC97 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000EC9C 00                         byte_CE26:	dc.b 0			; Blank frame
0000EC9E 00                         		even
0000EC9E 00                         		even
0000EC9E                            
0000EC9E                            		include	"_incObj\36 Spikes.asm"
0000EC9E                            ; ---------------------------------------------------------------------------
0000EC9E                            ; Object 36 - spikes
0000EC9E                            ; ---------------------------------------------------------------------------
0000EC9E                            
0000EC9E                            Spikes:
0000EC9E 7000                       		moveq	#0,d0
0000ECA0 1028 0024                  		move.b	obRoutine(a0),d0
0000ECA4 323B 0000                  		move.w	Spik_Index(pc,d0.w),d1
0000ECA8 4EFB 1000                  		jmp	Spik_Index(pc,d1.w)
0000ECAC                            ; ===========================================================================
0000ECAC 0000                       Spik_Index:	dc.w Spik_Main-Spik_Index
0000ECAE 0000                       		dc.w Spik_Solid-Spik_Index
0000ECB0                            
0000ECB0 =00000030                  spik_origX:	equ $30		; start X position
0000ECB0 =00000032                  spik_origY:	equ $32		; start Y position
0000ECB0                            
0000ECB0 0014                       Spik_Var:	dc.b 0,	$14		; frame	number,	object width
0000ECB2 0110                       		dc.b 1,	$10
0000ECB4 0204                       		dc.b 2,	4
0000ECB6 031C                       		dc.b 3,	$1C
0000ECB8 0440                       		dc.b 4,	$40
0000ECBA 0510                       		dc.b 5,	$10
0000ECBC                            ; ===========================================================================
0000ECBC                            
0000ECBC                            Spik_Main:	; Routine 0
0000ECBC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000ECC0 217C 0000 0000 0004        		move.l	#Map_Spike,obMap(a0)
0000ECC8 317C 051B 0002             		move.w	#$51B,obGfx(a0)
0000ECCE 0028 0004 0001             		ori.b	#4,obRender(a0)
0000ECD4 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000ECDA 1028 0028                  		move.b	obSubtype(a0),d0
0000ECDE 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000ECE4 0240 00F0                  		andi.w	#$F0,d0
0000ECE8 43F9 0000 ECB0             		lea	(Spik_Var).l,a1
0000ECEE E648                       		lsr.w	#3,d0
0000ECF0 D2C0                       		adda.w	d0,a1
0000ECF2 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000ECF6 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000ECFA 3168 0008 0030             		move.w	obX(a0),spik_origX(a0)
0000ED00 3168 000C 0032             		move.w	obY(a0),spik_origY(a0)
0000ED06                            
0000ED06                            Spik_Solid:	; Routine 2
0000ED06 6100 0000                  		bsr.w	Spik_Type0x	; make the object move
0000ED0A 343C 0004                  		move.w	#4,d2
0000ED0E 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is object type $5x ?
0000ED14 6700                       		beq.s	Spik_SideWays	; if yes, branch
0000ED16 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is object type $1x ?
0000ED1C 6600                       		bne.s	Spik_Upright	; if not, branch
0000ED1E 343C 0014                  		move.w	#$14,d2
0000ED22                            
0000ED22                            ; Spikes types $1x and $5x face	sideways
0000ED22                            
0000ED22                            Spik_SideWays:
0000ED22 323C 001B                  		move.w	#$1B,d1
0000ED26 3602                       		move.w	d2,d3
0000ED28 5243                       		addq.w	#1,d3
0000ED2A 3828 0008                  		move.w	obX(a0),d4
0000ED2E 6100 0000                  		bsr.w	SolidObject
0000ED32 0828 0003 0022             		btst	#3,obStatus(a0)
0000ED38 6600                       		bne.s	Spik_Display
0000ED3A 0C44 0001                  		cmpi.w	#1,d4
0000ED3E 6700                       		beq.s	Spik_Hurt
0000ED40 6000                       		bra.s	Spik_Display
0000ED42                            ; ===========================================================================
0000ED42                            
0000ED42                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000ED42                            
0000ED42                            Spik_Upright:
0000ED42 7200                       		moveq	#0,d1
0000ED44 1228 0014                  		move.b	obActWid(a0),d1
0000ED48 0641 000B                  		addi.w	#$B,d1
0000ED4C 343C 0010                  		move.w	#$10,d2
0000ED50 363C 0011                  		move.w	#$11,d3
0000ED54 3828 0008                  		move.w	obX(a0),d4
0000ED58 6100 0000                  		bsr.w	SolidObject
0000ED5C 0828 0003 0022             		btst	#3,obStatus(a0)
0000ED62 6600                       		bne.s	Spik_Hurt
0000ED64 4A44                       		tst.w	d4
0000ED66 6A00                       		bpl.s	Spik_Display
0000ED68                            
0000ED68                            Spik_Hurt:
0000ED68 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0000ED6C 6600                       		bne.s	Spik_Display	; if yes, branch
0000ED6E 4A78 D030                  		tst.w	(v_player+$30).w ; +++ is Sonic invulnerable?
0000ED72 6600                       		bne.s	Spik_Display	; +++ if yes, branch
0000ED74 2F08                       		move.l	a0,-(sp)
0000ED76 2448                       		movea.l	a0,a2
0000ED78 41F8 D000                  		lea	(v_player).w,a0
0000ED7C 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000ED82 6400                       		bcc.s	loc_CF20
0000ED84                            		; This fixes the infamous "spike bug"
0000ED84 4A68 0030                  		tst.w	flashtime(a0)	; Is Sonic flashing after being hurt?
0000ED88 6600                       		bne.s	loc_CF20	; If so, skip getting hurt
0000ED8A 4EF9 0000 00E0             		jmp	(loc_E0).l	; This is a copy of the above code that was pushed aside for this
0000ED90                            loc_D5A2:
0000ED90 9680                       		sub.l	d0,d3
0000ED92 2143 000C                  		move.l	d3,obY(a0)
0000ED96 4EB9 0000 0000             		jsr	(HurtSonic).l
0000ED9C                            
0000ED9C                            loc_CF20:
0000ED9C 205F                       		movea.l	(sp)+,a0
0000ED9E                            
0000ED9E                            Spik_Display:
0000ED9E 6100 0000                  		bsr.w	DisplaySprite
0000EDC0 4E75                       		rts	
0000EDC2                            ; ===========================================================================
0000EDC2                            
0000EDC2                            Spik_Type0x:
0000EDC2 7000                       		moveq	#0,d0
0000EDC4 1028 0028                  		move.b	obSubtype(a0),d0
0000EDC8 D040                       		add.w	d0,d0
0000EDCA 323B 0000                  		move.w	Spik_TypeIndex(pc,d0.w),d1
0000EDCE 4EFB 1000                  		jmp	Spik_TypeIndex(pc,d1.w)
0000EDD2                            ; ===========================================================================
0000EDD2 0000                       Spik_TypeIndex:	dc.w Spik_Type00-Spik_TypeIndex
0000EDD4 0000                       		dc.w Spik_Type01-Spik_TypeIndex
0000EDD6 0000                       		dc.w Spik_Type02-Spik_TypeIndex
0000EDD8                            ; ===========================================================================
0000EDD8                            
0000EDD8                            Spik_Type00:
0000EDD8 4E75                       		rts			; don't move the object
0000EDDA                            ; ===========================================================================
0000EDDA                            
0000EDDA                            Spik_Type01:
0000EDDA 6100 0000                  		bsr.w	Spik_Wait
0000EDDE 7000                       		moveq	#0,d0
0000EDE0 1028 0034                  		move.b	$34(a0),d0
0000EDE4 D068 0032                  		add.w	spik_origY(a0),d0
0000EDE8 3140 000C                  		move.w	d0,obY(a0)	; move the object vertically
0000EDEC 4E75                       		rts	
0000EDEE                            ; ===========================================================================
0000EDEE                            
0000EDEE                            Spik_Type02:
0000EDEE 6100 0000                  		bsr.w	Spik_Wait
0000EDF2 7000                       		moveq	#0,d0
0000EDF4 1028 0034                  		move.b	$34(a0),d0
0000EDF8 D068 0030                  		add.w	spik_origX(a0),d0
0000EDFC 3140 0008                  		move.w	d0,obX(a0)	; move the object horizontally
0000EE00 4E75                       		rts	
0000EE02                            ; ===========================================================================
0000EE02                            
0000EE02                            Spik_Wait:
0000EE02 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000EE06 6700                       		beq.s	loc_CFA4	; if yes, branch
0000EE08 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000EE0C 6600                       		bne.s	locret_CFE6
0000EE0E 4A28 0001                  		tst.b	obRender(a0)
0000EE12 6A00                       		bpl.s	locret_CFE6
0000EE1E 6000                       		bra.s	locret_CFE6
0000EE20                            ; ===========================================================================
0000EE20                            
0000EE20                            loc_CFA4:
0000EE20 4A68 0036                  		tst.w	$36(a0)
0000EE24 6700                       		beq.s	loc_CFC6
0000EE26 0468 0800 0034             		subi.w	#$800,$34(a0)
0000EE2C 6400                       		bcc.s	locret_CFE6
0000EE2E 317C 0000 0034             		move.w	#0,$34(a0)
0000EE34 317C 0000 0036             		move.w	#0,$36(a0)
0000EE3A 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000EE40 6000                       		bra.s	locret_CFE6
0000EE42                            ; ===========================================================================
0000EE42                            
0000EE42                            loc_CFC6:
0000EE42 0668 0800 0034             		addi.w	#$800,$34(a0)
0000EE48 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000EE4E 6500                       		bcs.s	locret_CFE6
0000EE50 317C 2000 0034             		move.w	#$2000,$34(a0)
0000EE56 317C 0001 0036             		move.w	#1,$36(a0)
0000EE5C 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000EE62                            
0000EE62                            locret_CFE6:
0000EE62 4E75                       		rts	
0000EE62 4E75                       		rts	
0000EE64                            Map_Spike:	include	"_maps\Spikes.asm"
0000EE64                            ; --------------------------------------------------------------------------------
0000EE64                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000EE64                            ; --------------------------------------------------------------------------------
0000EE64                            
0000EE64                            SME_XgeaQ:	
0000EE64 0000 0000                  		dc.w SME_XgeaQ_C-SME_XgeaQ, SME_XgeaQ_1C-SME_XgeaQ	
0000EE68 0000 0000                  		dc.w SME_XgeaQ_2C-SME_XgeaQ, SME_XgeaQ_32-SME_XgeaQ	
0000EE6C 0000 0000                  		dc.w SME_XgeaQ_42-SME_XgeaQ, SME_XgeaQ_61-SME_XgeaQ	
0000EE70 03                         SME_XgeaQ_C:	dc.b 3	
0000EE71 F003 2004 EC               		dc.b $F0, 3, $20, 4, $EC	
0000EE76 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000EE7B F003 2004 0C               		dc.b $F0, 3, $20, 4, $C	
0000EE80 03                         SME_XgeaQ_1C:	dc.b 3	
0000EE81 EC0C 2000 F0               		dc.b $EC, $C, $20, 0, $F0	
0000EE86 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000EE8B 0C0C 2000 F0               		dc.b $C, $C, $20, 0, $F0	
0000EE90 01                         SME_XgeaQ_2C:	dc.b 1	
0000EE91 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000EE96 03                         SME_XgeaQ_32:	dc.b 3	
0000EE97 F003 2004 E4               		dc.b $F0, 3, $20, 4, $E4	
0000EE9C F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000EEA1 F003 2004 14               		dc.b $F0, 3, $20, 4, $14	
0000EEA6 06                         SME_XgeaQ_42:	dc.b 6	
0000EEA7 F003 2004 C0               		dc.b $F0, 3, $20, 4, $C0	
0000EEAC F003 2004 D8               		dc.b $F0, 3, $20, 4, $D8	
0000EEB1 F003 2004 F0               		dc.b $F0, 3, $20, 4, $F0	
0000EEB6 F003 2004 08               		dc.b $F0, 3, $20, 4, 8	
0000EEBB F003 2004 20               		dc.b $F0, 3, $20, 4, $20	
0000EEC0 F003 2004 38               		dc.b $F0, 3, $20, 4, $38	
0000EEC5 01                         SME_XgeaQ_61:	dc.b 1	
0000EEC6 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000EECC 00                         		even
0000EECC 00                         		even
0000EECC                            		include	"_incObj\3B Purple Rock.asm"
0000EECC                            ; ---------------------------------------------------------------------------
0000EECC                            ; Object 3B - purple rock (GHZ)
0000EECC                            ; ---------------------------------------------------------------------------
0000EECC                            
0000EECC                            PurpleRock:
0000EECC 7000                       		moveq	#0,d0
0000EECE 1028 0024                  		move.b	obRoutine(a0),d0
0000EED2 323B 0000                  		move.w	Rock_Index(pc,d0.w),d1
0000EED6 4EFB 1000                  		jmp	Rock_Index(pc,d1.w)
0000EEDA                            ; ===========================================================================
0000EEDA 0000                       Rock_Index:	dc.w Rock_Main-Rock_Index
0000EEDC 0000                       		dc.w Rock_Solid-Rock_Index
0000EEDE                            ; ===========================================================================
0000EEDE                            
0000EEDE                            Rock_Main:	; Routine 0
0000EEDE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EEE2 217C 0000 0000 0004        		move.l	#Map_PRock,obMap(a0)
0000EEEA 317C 63D0 0002             		move.w	#$63D0,obGfx(a0)
0000EEF0 117C 0004 0001             		move.b	#4,obRender(a0)
0000EEF6 117C 0013 0014             		move.b	#$13,obActWid(a0)
0000EEFC 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000EF02                            
0000EF02                            Rock_Solid:	; Routine 2
0000EF02 323C 001B                  		move.w	#$1B,d1
0000EF06 343C 0010                  		move.w	#$10,d2
0000EF0A 363C 0010                  		move.w	#$10,d3
0000EF0E 3828 0008                  		move.w	obX(a0),d4
0000EF12 6100 0000                  		bsr.w	SolidObject
0000EF16 6100 0000                  		bsr.w	DisplaySprite
0000EF38 4E75                       		rts	
0000EF38 4E75                       		rts	
0000EF3A                            		include	"_incObj\49 Waterfall Sound.asm"
0000EF3A                            ; ---------------------------------------------------------------------------
0000EF3A                            ; Object 49 - waterfall	sound effect (GHZ)
0000EF3A                            ; ---------------------------------------------------------------------------
0000EF3A                            
0000EF3A                            WaterSound:
0000EF3A 7000                       		moveq	#0,d0
0000EF3C 1028 0024                  		move.b	obRoutine(a0),d0
0000EF40 323B 0000                  		move.w	WSnd_Index(pc,d0.w),d1
0000EF44 4EFB 1000                  		jmp	WSnd_Index(pc,d1.w)
0000EF48                            ; ===========================================================================
0000EF48 0000                       WSnd_Index:	dc.w WSnd_Main-WSnd_Index
0000EF4A 0000                       		dc.w WSnd_PlaySnd-WSnd_Index
0000EF4C                            ; ===========================================================================
0000EF4C                            
0000EF4C                            WSnd_Main:	; Routine 0
0000EF4C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EF50 117C 0004 0001             		move.b	#4,obRender(a0)
0000EF56                            
0000EF56                            WSnd_PlaySnd:	; Routine 2
0000EF56 1038 FE0F                  		move.b	(v_vbla_byte).w,d0 ; get low byte of VBlank counter
0000EF5A 0200 003F                  		andi.b	#$3F,d0
0000EF5E 6600                       		bne.s	WSnd_ChkDel
0000EF6A                            
0000EF6A                            	WSnd_ChkDel:
0000EF88 4E75                       		rts	
0000EF88 4E75                       		rts	
0000EF8A                            Map_PRock:	include	"_maps\Purple Rock.asm"
0000EF8A                            ; ---------------------------------------------------------------------------
0000EF8A                            ; Sprite mappings - purple rock	(GHZ)
0000EF8A                            ; ---------------------------------------------------------------------------
0000EF8A                            Map_PRock_internal:
0000EF8A 0000                       		dc.w byte_D110-Map_PRock_internal
0000EF8C 02                         byte_D110:	dc.b 2
0000EF8D F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000EF92 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000EF98 00                         		even
0000EF98 00                         		even
0000EF98                            		include	"_incObj\3C Smashable Wall.asm"
0000EF98                            ; ---------------------------------------------------------------------------
0000EF98                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000EF98                            ; ---------------------------------------------------------------------------
0000EF98                            
0000EF98                            SmashWall:
0000EF98 7000                       		moveq	#0,d0
0000EF9A 1028 0024                  		move.b	obRoutine(a0),d0
0000EF9E 323B 0000                  		move.w	Smash_Index(pc,d0.w),d1
0000EFA2 4EBB 1000                  		jsr	Smash_Index(pc,d1.w)
0000EFA6 6000 0000                  		bra.w	RememberState
0000EFAA                            ; ===========================================================================
0000EFAA 0000                       Smash_Index:	dc.w Smash_Main-Smash_Index
0000EFAC 0000                       		dc.w Smash_Solid-Smash_Index
0000EFAE 0000                       		dc.w Smash_FragMove-Smash_Index
0000EFB0                            
0000EFB0 =00000030                  smash_speed:	equ $30		; Sonic's horizontal speed
0000EFB0                            ; ===========================================================================
0000EFB0                            
0000EFB0                            Smash_Main:	; Routine 0
0000EFB0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EFB4 217C 0000 0000 0004        		move.l	#Map_Smash,obMap(a0)
0000EFBC 317C 450F 0002             		move.w	#$450F,obGfx(a0)
0000EFC2 117C 0004 0001             		move.b	#4,obRender(a0)
0000EFC8 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000EFCE 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000EFD4 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0000EFDA                            
0000EFDA                            Smash_Solid:	; Routine 2
0000EFDA 3178 D010 0030             		move.w	(v_player+obVelX).w,smash_speed(a0) ; load Sonic's horizontal speed
0000EFE0 323C 001B                  		move.w	#$1B,d1
0000EFE4 343C 0020                  		move.w	#$20,d2
0000EFE8 363C 0020                  		move.w	#$20,d3
0000EFEC 3828 0008                  		move.w	obX(a0),d4
0000EFF0 6100 0000                  		bsr.w	SolidObject	
0000EFF4 4A04                       		tst.b	d4
0000EFF6 6E00 0000                  		bgt.w	@chkroll	
0000EFFA 6700 0000                  		beq.w	@donothing								
0000EFFE 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing against the wall?
0000F004 6700 0000                  		beq.w	@donothing	; if yes, branch
0000F008                            ; ===========================================================================
0000F008                            
0000F008                            @chkroll:
0000F008 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000F00E 6600                       		bne.s	@donothing	; if not, branch	
0000F010 3028 0030                  		move.w	smash_speed(a0),d0
0000F014 6A00                       		bpl.s	@chkspeed
0000F016 4440                       		neg.w	d0
0000F018                            
0000F018                            	@chkspeed:
0000F018 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000F01C 6500                       		bcs.s	@donothing	; if not, branch	
0000F01E                            		
0000F01E                            	@continue:	
0000F01E 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000F024 3368 0030 0010             		move.w	smash_speed(a0),obVelX(a1)
0000F02A 49F9 0000 0000             		lea	(Smash_FragSpd1).l,a4 ;	use fragments that move	right
0000F030 3028 0008                  		move.w	obX(a0),d0
0000F034 B069 0008                  		cmp.w	obX(a1),d0	; is Sonic to the right	of the block?
0000F038 6500                       		bcs.s	@smash		; if yes, branch
0000F03A 49F9 0000 0000             		lea	(Smash_FragSpd2).l,a4 ;	use fragments that move	left
0000F040                            
0000F040                            	@smash:
0000F040 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000F046 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000F04C 7206                       		moveq	#6,d1		; load 7 fragments
0000F04E 343C 0070                  		move.w	#$70,d2
0000F052 6100                       		bsr.s	SmashObject
0000F054                            
0000F054                            @donothing:
0000F054 4E75                       		rts	
0000F056                            
0000F056                            Smash_FragMove:	; Routine 4
0000F056 588F                       		addq.l	#4,sp
0000F058 6100 0000                  		bsr.w	SpeedToPos
0000F05C 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make fragment	fall faster
0000F062 4A28 0001                  		tst.b	obRender(a0)
0000F066 6A00 0000                  		bpl.w	DeleteObject
0000F06A 6000 0000                  		bra.w	DisplaySprite
0000F06E                            
0000F06E                            
0000F06E                            
0000F06E                            		include	"_incObj\sub SmashObject.asm"
0000F06E                            ; ---------------------------------------------------------------------------
0000F06E                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000F06E                            ; ---------------------------------------------------------------------------
0000F06E                            
0000F06E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F06E                            
0000F06E                            
0000F06E                            SmashObject:
0000F06E 7000                       		moveq	#0,d0
0000F070 1028 001A                  		move.b	obFrame(a0),d0
0000F074 D040                       		add.w	d0,d0
0000F076 2668 0004                  		movea.l	obMap(a0),a3
0000F07A D6F3 0000                  		adda.w	(a3,d0.w),a3
0000F07E 524B                       		addq.w	#1,a3
0000F080 08E8 0005 0001             		bset	#5,obRender(a0)
0000F086 1810                       		move.b	0(a0),d4
0000F088 1A28 0001                  		move.b	obRender(a0),d5
0000F08C 2248                       		movea.l	a0,a1
0000F08E 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F094 1284                       		move.b	d4,0(a1)
0000F096 234B 0004                  		move.l	a3,obMap(a1)
0000F09A 1345 0001                  		move.b	d5,obRender(a1)
0000F09E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F0A4 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F0AA 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F0B0 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F0B6 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F0BC 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F0C0 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F0C4 5341                       		subq.w #1,d1
0000F0C6 43F8 D800                  		lea (v_lvlobjspace).w,a1
0000F0CA 303C 005F                  		move.w #$5F,d0
0000F0CE                            ; ===========================================================================
0000F0CE                            
0000F0CE                            Smash_Loop:
0000F0CE 4A11                       		tst.b	(a1)
0000F0D0 6700                       		beq.s	@cont
0000F0D2 43E9 0040                  		lea		$40(a1),a1
0000F0D6 51C8 FFF6                  		dbf 	d0,Smash_Loop 
0000F0DA 6600                       		bne.s	Smash_PlaySnd
0000F0DC                            
0000F0DC                            	@cont:
0000F0DC 5A4B                       		addq.w #5,a3
0000F0DE                            
0000F0DE                            Smash_LoadFrag:				; XREF: SmashObject
0000F0DE 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F0E4 1284                       		move.b	d4,0(a1)
0000F0E6 234B 0004                  		move.l	a3,obMap(a1)
0000F0EA 1345 0001                  		move.b	d5,obRender(a1)
0000F0EE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F0F4 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F0FA 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F100 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F106 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F10C 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F110 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F114 51C9 FFB8                  		dbf	d1,Smash_Loop
0000F118                            
0000F118                            Smash_PlaySnd:
0000F118 303C 0000                  		move.w	#sfx_WallSmash,d0
0000F11C 4EF9 0000 12A0             		jmp	(PlaySound_Special).l ; play smashing sound
0000F122                            
0000F122                            ; End of function SmashObject
0000F122                            ; End of function SmashObject
0000F122                            
0000F122                            ; ===========================================================================
0000F122                            ; Smashed block	fragment speeds
0000F122                            ;
0000F122 0400 FB00                  Smash_FragSpd1:	dc.w $400, -$500	; x-move speed,	y-move speed
0000F126 0600 FF00                  		dc.w $600, -$100
0000F12A 0600 0100                  		dc.w $600, $100
0000F12E 0400 0500                  		dc.w $400, $500
0000F132 0600 FA00                  		dc.w $600, -$600
0000F136 0800 FE00                  		dc.w $800, -$200
0000F13A 0800 0200                  		dc.w $800, $200
0000F13E 0600 0600                  		dc.w $600, $600
0000F142                            
0000F142 FA00 FA00                  Smash_FragSpd2:	dc.w -$600, -$600
0000F146 F800 FE00                  		dc.w -$800, -$200
0000F14A F800 0200                  		dc.w -$800, $200
0000F14E FA00 0600                  		dc.w -$600, $600
0000F152 FC00 FB00                  		dc.w -$400, -$500
0000F156 FA00 FF00                  		dc.w -$600, -$100
0000F15A FA00 0100                  		dc.w -$600, $100
0000F15E FC00 0500                  		dc.w -$400, $500
0000F162                            
0000F162                            Map_Smash:	include	"_maps\Smashable Walls.asm"
0000F162                            ; ---------------------------------------------------------------------------
0000F162                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000F162                            ; ---------------------------------------------------------------------------
0000F162                            Map_Smash_internal:
0000F162 0000                       		dc.w @left-Map_Smash_internal
0000F164 0000                       		dc.w @middle-Map_Smash_internal
0000F166 0000                       		dc.w @right-Map_Smash_internal
0000F168 08                         @left:		dc.b 8
0000F169 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000F16E F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000F173 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000F178 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000F17D E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F182 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F187 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F18C 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F191 08                         @middle:	dc.b 8
0000F192 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F197 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F19C 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F1A1 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F1A6 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F1AB F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F1B0 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F1B5 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F1BA 08                         @right:		dc.b 8
0000F1BB E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F1C0 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F1C5 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F1CA 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F1CF E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000F1D4 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000F1D9 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000F1DE 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000F1E4 00                         		even
0000F1E4 00                         		even
0000F1E4                            
0000F1E4                            ; ---------------------------------------------------------------------------
0000F1E4                            ; Object code execution subroutine
0000F1E4                            ; ---------------------------------------------------------------------------
0000F1E4                            
0000F1E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F1E4                            
0000F1E4                            
0000F1E4                            
0000F1E4                            ExecuteObjects: ; XREF: GM_Title; et al
0000F1E4 41F8 D000                  		lea (v_objspace).w,a0 ; set address for object RAM
0000F1E8 7E7F                       		moveq #$7F,d7
0000F1EA 7000                       		moveq #0,d0
0000F1EC 0C38 0006 D024             		cmpi.b #6,(v_player+obRoutine).w
0000F1F2 6400                       		bcc.s loc_D362
0000F1F4                            
0000F1F4                            loc_D348:
0000F1F4 1010                       		move.b (a0),d0 ; load object number from RAM
0000F1F6 6700                       		beq.s loc_D358
0000F1F8 D040                       		add.w d0,d0
0000F1FA D040                       		add.w d0,d0
0000F1FC 227B 0000                  		movea.l Obj_Index-4(pc,d0.w),a1
0000F200 4E91                       		jsr (a1) ; run the object's code
0000F202 7000                       		moveq #0,d0
0000F204                            
0000F204                            loc_D358:
0000F204 41E8 0040                  		lea $40(a0),a0 ; next object
0000F208 51CF FFEA                  		dbf d7,loc_D348
0000F20C 4E75                       		rts
0000F20E                            ; ===========================================================================
0000F20E                            
0000F20E                            loc_D362:
0000F20E 7E1F                       		moveq #$1F,d7
0000F210 61E2                       		bsr.s loc_D348
0000F212 7E5F                       		moveq #$5F,d7
0000F214                            
0000F214                            loc_D368:
0000F214 7000                       		moveq #0,d0 ; Clear d0 quickly
0000F216 1010                       		move.b (a0),d0 ; get the object's ID
0000F218 6700                       		beq.s loc_D37C ; if it's obj00, skip it
0000F21A 4A28 0001                  		tst.b obRender(a0) ; should we render it?
0000F21E 6A00                       		bpl.s loc_D37C ; if not, skip it
0000F220 3028 0018                  		move.w obpriority(a0),d0 ; move object's priority to d0
0000F224 0828 0006 0001             		btst #6,obRender(a0) ; is the compound sprites flag set?
0000F22A 6700                       		beq.s loc_D378 ; if not, branch
0000F22C 303C 0200                  		move.w #$200,d0 ; move $200 to d0
0000F230                            
0000F230                            loc_D378:
0000F230 6100 0000                  		bsr.w DisplaySprite2
0000F234                            		
0000F234                            loc_D37C:
0000F234 41E8 0040                  		lea $40(a0),a0
0000F238 51CF FFDA                  		dbf d7,loc_D368
0000F23C 4E75                       		rts
0000F23E                            ; End of function ExecuteObjects
0000F23E                            
0000F23E                            ; ===========================================================================
0000F23E                            ; ---------------------------------------------------------------------------
0000F23E                            ; Object pointers
0000F23E                            ; ---------------------------------------------------------------------------
0000F23E                            Obj_Index:
0000F23E                            		include	"_inc\Object Pointers.asm"
0000F23E                            ; ---------------------------------------------------------------------------
0000F23E                            ; Object pointers
0000F23E                            ; ---------------------------------------------------------------------------
0000F23E 0000 0000                  ptr_SonicPlayer:	dc.l SonicPlayer	; $01
0000F242 0000 0000                  ptr_Obj02:			dc.l ObjectFall
0000F246 0000 0000                  ptr_Obj03:			dc.l Obj03
0000F24A 0000 0000                  ptr_GShieldItem:	dc.l GShieldItem
0000F24E 0000 0000                  ptr_Obj05:		dc.l Spindash_dust
0000F252 0000 AF48                  ptr_Mozzietron:		dc.l Mozzietron
0000F256 0000 0000                  ptr_RShieldItem:	dc.l RShieldItem	
0000F25A 0000 0000                  ptr_Splash:		dc.l Splash		; $08
0000F25E 0000 0000                  ptr_SonicSpecial:	dc.l SonicSpecial
0000F262 0000 0000                  ptr_DrownCount:		dc.l DrownCount
0000F266 0000 0000                  ptr_Pole:		dc.l Pole
0000F26A 0000 0000                  ptr_FlapDoor:		dc.l FlapDoor
0000F26E 0000 0000                  ptr_Signpost:		dc.l Signpost
0000F272 0000 C352                  ptr_TitleSonic:		dc.l TitleSonic
0000F276 0000 C3D2                  ptr_PSBTM:		dc.l PSBTM
0000F27A 0000 0000                  ptr_Obj10:		dc.l Obj10		; $10
0000F27E 0000 8A58                  ptr_Bridge:		dc.l Bridge
0000F282 0000 0000                  ptr_SpinningLight:	dc.l SpinningLight
0000F286 0000 0000                  ptr_LavaMaker:		dc.l LavaMaker
0000F28A 0000 0000                  ptr_LavaBall:		dc.l LavaBall
0000F28E 0000 907E                  ptr_SwingingPlatform:	dc.l SwingingPlatform
0000F292 0000 0000                  ptr_Harpoon:		dc.l Harpoon
0000F296 0000 93CA                  ptr_Helix:		dc.l Helix
0000F29A 0000 9556                  ptr_BasicPlatform:	dc.l BasicPlatform	; $18
0000F29E 0000 0000                  ptr_InvStars:		dc.l InvStarsObj
0000F2A2 0000 9932                  ptr_CollapseLedge:	dc.l CollapseLedge
0000F2A6 0000 0000                  ptr_WaterSurface:	dc.l WaterSurface
0000F2AA 0000 9F3A                  ptr_Scenery:		dc.l Scenery
0000F2AE 0000 9FDC                  ptr_MagicSwitch:	dc.l MagicSwitch
0000F2B2 0000 A2C4                  ptr_BallHog:		dc.l BallHog
0000F2B6 0000 AC5E                  ptr_Crabmeat:		dc.l Crabmeat
0000F2BA 0000 A392                  ptr_Cannonball:		dc.l Cannonball		; $20
0000F2BE 0000 0000                  ptr_HUD:		dc.l HUD
0000F2C2 0000 B07A                  ptr_BuzzBomber:		dc.l BuzzBomber
0000F2C6 0000 B1CC                  ptr_Missile:		dc.l Missile
0000F2CA 0000 A464                  ptr_MissileDissolve:	dc.l MissileDissolve
0000F2CE 0000 B426                  ptr_Rings:		dc.l Rings
0000F2D2 0000 BC70                  ptr_Monitor:		dc.l Monitor
0000F2D6 0000 A4D4                  ptr_ExplosionItem:	dc.l ExplosionItem
0000F2DA 0000 A692                  ptr_Animals:		dc.l Animals		; $28
0000F2DE 0000 AB80                  ptr_Points:		dc.l Points
0000F2E2 0000 A0B2                  ptr_AutoDoor:		dc.l AutoDoor
0000F2E6 0000 C97C                  ptr_Chopper:		dc.l Chopper
0000F2EA 0000 CA36                  ptr_Jaws:		dc.l Jaws
0000F2EE 0000 CB00                  ptr_Burrobot:		dc.l Burrobot
0000F2F2 0000 BE6E                  ptr_PowerUp:		dc.l PowerUp
0000F2F6 0000 CD14                  ptr_LargeGrass:		dc.l LargeGrass
0000F2FA 0000 D1F6                  ptr_GlassBlock:		dc.l GlassBlock		; $30
0000F2FE 0000 D4D2                  ptr_ChainStomp:		dc.l ChainStomp
0000F302 0000 DB80                  ptr_Button:		dc.l Button
0000F306 0000 DD24                  ptr_PushBlock:		dc.l PushBlock
0000F30A 0000 E156                  ptr_TitleCard:		dc.l TitleCard
0000F30E 0000 D036                  ptr_GrassFire:		dc.l GrassFire
0000F312 0000 EC9E                  ptr_Spikes:		dc.l Spikes
0000F316 0000 B682                  ptr_RingLoss:		dc.l RingLoss
0000F31A 0000 0000                  ptr_ShieldItem:		dc.l ShieldItem		; $38
0000F31E 0000 E306                  ptr_GameOverCard:	dc.l GameOverCard
0000F322 0000 E3C4                  ptr_GotThroughCard:	dc.l GotThroughCard
0000F326 0000 EECC                  ptr_PurpleRock:		dc.l PurpleRock
0000F32A 0000 EF98                  ptr_SmashWall:		dc.l SmashWall
0000F32E 0000 0000                  ptr_BossGreenHill:	dc.l BossGreenHill
0000F332 0000 0000                  ptr_Prison:		dc.l Prison
0000F336 0000 A566                  ptr_ExplosionBomb:	dc.l ExplosionBomb
0000F33A 0000 0000                  ptr_MotoBug:		dc.l MotoBug		; $40
0000F33E 0000 0000                  ptr_Springs:		dc.l Springs
0000F342 0000 0000                  ptr_Newtron:		dc.l Newtron
0000F346 0000 0000                  ptr_Roller:		dc.l Roller
0000F34A 0000 0000                  ptr_EdgeWalls:		dc.l EdgeWalls
0000F34E 0000 D7EE                  ptr_SideStomp:		dc.l SideStomp
0000F352 0000 0000                  ptr_MarbleBrick:	dc.l MarbleBrick
0000F356 0000 0000                  ptr_Bumper:		dc.l Bumper
0000F35A 0000 0000                  ptr_BossBall:		dc.l BossBall		; $48
0000F35E 0000 EF3A                  ptr_WaterSound:		dc.l WaterSound
0000F362 0000 0000                  ptr_VanishSonic:	dc.l VanishSonic
0000F366 0000 B944                  ptr_GiantRing:		dc.l GiantRing
0000F36A 0000 0000                  ptr_GeyserMaker:	dc.l GeyserMaker
0000F36E 0000 0000                  ptr_LavaGeyser:		dc.l LavaGeyser
0000F372 0000 0000                  ptr_SpShieldItem:	dc.l SpShieldItem
0000F376 0000 0000                  ptr_Obj4F:		dc.l Obj4F
0000F37A 0000 0000                  ptr_Yadrin:		dc.l Yadrin		; $50
0000F37E 0000 0000                  ptr_SmashBlock:		dc.l SmashBlock
0000F382 0000 0000                  ptr_MovingBlock:	dc.l MovingBlock
0000F386 0000 9A42                  ptr_CollapseFloor:	dc.l CollapseFloor
0000F38A 0000 0000                  ptr_LavaTag:		dc.l LavaTag
0000F38E 0000 0000                  ptr_Basaran:		dc.l Basaran
0000F392 0000 0000                  ptr_FloatingBlock:	dc.l FloatingBlock
0000F396 0000 0000                  ptr_SpikeBall:		dc.l SpikeBall
0000F39A 0000 0000                  ptr_BigSpikeBall:	dc.l BigSpikeBall	; $58
0000F39E 0000 0000                  ptr_Elevator:		dc.l Elevator
0000F3A2 0000 0000                  ptr_CirclingPlatform:	dc.l CirclingPlatform
0000F3A6 0000 0000                  ptr_Staircase:		dc.l Staircase
0000F3AA 0000 0000                  ptr_Pylon:		dc.l Pylon
0000F3AE 0000 0000                  ptr_Fan:		dc.l Fan
0000F3B2 0000 0000                  ptr_Seesaw:		dc.l Seesaw
0000F3B6 0000 0000                  ptr_Bomb:		dc.l Bomb
0000F3BA 0000 0000                  ptr_Orbinaut:		dc.l Orbinaut		; $60
0000F3BE 0000 0000                  ptr_LabyrinthBlock:	dc.l LabyrinthBlock
0000F3C2 0000 0000                  ptr_Gargoyle:		dc.l Gargoyle
0000F3C6 0000 0000                  ptr_LabyrinthConvey:	dc.l LabyrinthConvey
0000F3CA 0000 0000                  ptr_Bubble:		dc.l Bubble
0000F3CE 0000 0000                  ptr_Waterfall:		dc.l Waterfall
0000F3D2 0000 0000                  ptr_Junction:		dc.l Junction
0000F3D6 0000 0000                  ptr_RunningDisc:	dc.l RunningDisc
0000F3DA 0000 0000                  ptr_Conveyor:		dc.l Conveyor		; $68
0000F3DE 0000 0000                  ptr_SpinPlatform:	dc.l SpinPlatform
0000F3E2 0000 0000                  ptr_Saws:		dc.l Saws
0000F3E6 0000 0000                  ptr_ScrapStomp:		dc.l ScrapStomp
0000F3EA 0000 0000                  ptr_VanishPlatform:	dc.l VanishPlatform
0000F3EE 0000 0000                  ptr_Flamethrower:	dc.l Flamethrower
0000F3F2 0000 0000                  ptr_Electro:		dc.l Electro
0000F3F6 0000 0000                  ptr_SpinConvey:		dc.l SpinConvey
0000F3FA 0000 0000                  ptr_Girder:		dc.l Girder		; $70
0000F3FE 0000 0000                  ptr_Invisibarrier:	dc.l Invisibarrier
0000F402 0000 0000                  ptr_Teleport:		dc.l Teleport
0000F406 0000 0000                  ptr_BossMarble:		dc.l BossMarble
0000F40A 0000 0000                  ptr_BossFire:		dc.l BossFire
0000F40E 0000 0000                  ptr_BossSpringYard:	dc.l BossSpringYard
0000F412 0000 0000                  ptr_BossBlock:		dc.l BossBlock
0000F416 0000 0000                  ptr_BossLabyrinth:	dc.l BossLabyrinth
0000F41A 0000 0000                  ptr_Caterkiller:	dc.l Caterkiller	; $78
0000F41E 0000 0000                  ptr_Lamppost:		dc.l Lamppost
0000F422 0000 0000                  ptr_BossStarLight:	dc.l BossStarLight
0000F426 0000 0000                  ptr_BossSpikeball:	dc.l BossSpikeball
0000F42A 0000 BA1E                  ptr_RingFlash:		dc.l RingFlash
0000F42E 0000 0000                  ptr_HiddenBonus:	dc.l HiddenBonus
0000F432 0000 E5FE                  ptr_SSResult:		dc.l SSResult
0000F436 0000 E7A4                  ptr_SSRChaos:		dc.l SSRChaos
0000F43A 0000 5FC2                  ptr_ContScrItem:	dc.l ContScrItem	; $80
0000F43E 0000 60DA                  ptr_ContSonic:		dc.l ContSonic
0000F442 0000 0000                  ptr_ScrapEggman:	dc.l ScrapEggman
0000F446 0000 0000                  ptr_FalseFloor:		dc.l FalseFloor
0000F44A 0000 0000                  ptr_EggmanCylinder:	dc.l EggmanCylinder
0000F44E 0000 0000                  ptr_BossFinal:		dc.l BossFinal
0000F452 0000 0000                  ptr_BossPlasma:		dc.l BossPlasma
0000F456 0000 6560                  ptr_EndSonic:		dc.l EndSonic
0000F45A 0000 66BA                  ptr_EndChaos:		dc.l EndChaos		; $88
0000F45E 0000 6794                  ptr_EndSTH:		dc.l EndSTH
0000F462 0000 0000                  ptr_CreditsText:	dc.l CreditsText
0000F466 0000 6A0E                  ptr_EndEggman:		dc.l EndEggman
0000F46A 0000 6AEE                  ptr_TryChaos:		dc.l TryChaos
0000F46E                            
0000F46E                            NullObject:
0000F46E                            		;jmp	(DeleteObject).l	; It would be safer to have this instruction here, but instead it just falls through to ObjectFall
0000F46E                            
0000F46E =00000001                  id_SonicPlayer:		equ ((ptr_SonicPlayer-Obj_Index)/4)+1		; $01
0000F46E =00000002                  id_Obj02:		equ ((ptr_Obj02-Obj_Index)/4)+1
0000F46E =00000003                  id_Obj03:		equ ((ptr_Obj03-Obj_Index)/4)+1
0000F46E =00000004                  id_GShielditem:		equ ((ptr_GShieldItem-Obj_Index)/4)+1
0000F46E =00000005                  id_Obj05:		equ ((ptr_Obj05-Obj_Index)/4)+1
0000F46E =00000006                  id_Mozzietron:		equ ((ptr_Mozzietron-Obj_Index)/4)+1
0000F46E =00000007                  id_RShieldItem:		equ ((ptr_RShieldItem-Obj_Index)/4)+1	
0000F46E =00000008                  id_Splash:		equ ((ptr_Splash-Obj_Index)/4)+1		; $08
0000F46E =00000009                  id_SonicSpecial:	equ ((ptr_SonicSpecial-Obj_Index)/4)+1
0000F46E =0000000A                  id_DrownCount:		equ ((ptr_DrownCount-Obj_Index)/4)+1
0000F46E =0000000B                  id_Pole:		equ ((ptr_Pole-Obj_Index)/4)+1
0000F46E =0000000C                  id_FlapDoor:		equ ((ptr_FlapDoor-Obj_Index)/4)+1
0000F46E =0000000D                  id_Signpost:		equ ((ptr_Signpost-Obj_Index)/4)+1
0000F46E =0000000E                  id_TitleSonic:		equ ((ptr_TitleSonic-Obj_Index)/4)+1
0000F46E =0000000F                  id_PSBTM:		equ ((ptr_PSBTM-Obj_Index)/4)+1
0000F46E =00000010                  id_Obj10:		equ ((ptr_Obj10-Obj_Index)/4)+1			; $10
0000F46E =00000011                  id_Bridge:		equ ((ptr_Bridge-Obj_Index)/4)+1
0000F46E =00000012                  id_SpinningLight:	equ ((ptr_SpinningLight-Obj_Index)/4)+1
0000F46E =00000013                  id_LavaMaker:		equ ((ptr_LavaMaker-Obj_Index)/4)+1
0000F46E =00000014                  id_LavaBall:		equ ((ptr_LavaBall-Obj_Index)/4)+1
0000F46E =00000015                  id_SwingingPlatform:	equ ((ptr_SwingingPlatform-Obj_Index)/4)+1
0000F46E =00000016                  id_Harpoon:		equ ((ptr_Harpoon-Obj_Index)/4)+1
0000F46E =00000017                  id_Helix:		equ ((ptr_Helix-Obj_Index)/4)+1
0000F46E =00000018                  id_BasicPlatform:	equ ((ptr_BasicPlatform-Obj_Index)/4)+1		; $18
0000F46E =00000019                  id_InvStars:		equ ((ptr_InvStars-Obj_Index)/4)+1
0000F46E =0000001A                  id_CollapseLedge:	equ ((ptr_CollapseLedge-Obj_Index)/4)+1
0000F46E =0000001B                  id_WaterSurface:	equ ((ptr_WaterSurface-Obj_Index)/4)+1
0000F46E =0000001C                  id_Scenery:		equ ((ptr_Scenery-Obj_Index)/4)+1
0000F46E =0000001D                  id_MagicSwitch:		equ ((ptr_MagicSwitch-Obj_Index)/4)+1
0000F46E =0000001E                  id_BallHog:		equ ((ptr_BallHog-Obj_Index)/4)+1
0000F46E =0000001F                  id_Crabmeat:		equ ((ptr_Crabmeat-Obj_Index)/4)+1
0000F46E =00000020                  id_Cannonball:		equ ((ptr_Cannonball-Obj_Index)/4)+1		; $20
0000F46E =00000021                  id_HUD:			equ ((ptr_HUD-Obj_Index)/4)+1
0000F46E =00000022                  id_BuzzBomber:		equ ((ptr_BuzzBomber-Obj_Index)/4)+1
0000F46E =00000023                  id_Missile:		equ ((ptr_Missile-Obj_Index)/4)+1
0000F46E =00000024                  id_MissileDissolve:	equ ((ptr_MissileDissolve-Obj_Index)/4)+1
0000F46E =00000025                  id_Rings:		equ ((ptr_Rings-Obj_Index)/4)+1
0000F46E =00000026                  id_Monitor:		equ ((ptr_Monitor-Obj_Index)/4)+1
0000F46E =00000027                  id_ExplosionItem:	equ ((ptr_ExplosionItem-Obj_Index)/4)+1
0000F46E =00000028                  id_Animals:		equ ((ptr_Animals-Obj_Index)/4)+1		; $28
0000F46E =00000029                  id_Points:		equ ((ptr_Points-Obj_Index)/4)+1
0000F46E =0000002A                  id_AutoDoor:		equ ((ptr_AutoDoor-Obj_Index)/4)+1
0000F46E =0000002B                  id_Chopper:		equ ((ptr_Chopper-Obj_Index)/4)+1
0000F46E =0000002C                  id_Jaws:		equ ((ptr_Jaws-Obj_Index)/4)+1
0000F46E =0000002D                  id_Burrobot:		equ ((ptr_Burrobot-Obj_Index)/4)+1
0000F46E =0000002E                  id_PowerUp:		equ ((ptr_PowerUp-Obj_Index)/4)+1
0000F46E =0000002F                  id_LargeGrass:		equ ((ptr_LargeGrass-Obj_Index)/4)+1
0000F46E =00000030                  id_GlassBlock:		equ ((ptr_GlassBlock-Obj_Index)/4)+1		; $30
0000F46E =00000031                  id_ChainStomp:		equ ((ptr_ChainStomp-Obj_Index)/4)+1
0000F46E =00000032                  id_Button:		equ ((ptr_Button-Obj_Index)/4)+1
0000F46E =00000033                  id_PushBlock:		equ ((ptr_PushBlock-Obj_Index)/4)+1
0000F46E =00000034                  id_TitleCard:		equ ((ptr_TitleCard-Obj_Index)/4)+1
0000F46E =00000035                  id_GrassFire:		equ ((ptr_GrassFire-Obj_Index)/4)+1
0000F46E =00000036                  id_Spikes:		equ ((ptr_Spikes-Obj_Index)/4)+1
0000F46E =00000037                  id_RingLoss:		equ ((ptr_RingLoss-Obj_Index)/4)+1
0000F46E =00000038                  id_ShieldItem:		equ ((ptr_ShieldItem-Obj_Index)/4)+1		; $38
0000F46E =00000039                  id_GameOverCard:	equ ((ptr_GameOverCard-Obj_Index)/4)+1
0000F46E =0000003A                  id_GotThroughCard:	equ ((ptr_GotThroughCard-Obj_Index)/4)+1
0000F46E =0000003B                  id_PurpleRock:		equ ((ptr_PurpleRock-Obj_Index)/4)+1
0000F46E =0000003C                  id_SmashWall:		equ ((ptr_SmashWall-Obj_Index)/4)+1
0000F46E =0000003D                  id_BossGreenHill:	equ ((ptr_BossGreenHill-Obj_Index)/4)+1
0000F46E =0000003E                  id_Prison:		equ ((ptr_Prison-Obj_Index)/4)+1
0000F46E =0000003F                  id_ExplosionBomb:	equ ((ptr_ExplosionBomb-Obj_Index)/4)+1
0000F46E =00000040                  id_MotoBug:		equ ((ptr_MotoBug-Obj_Index)/4)+1		; $40
0000F46E =00000041                  id_Springs:		equ ((ptr_Springs-Obj_Index)/4)+1
0000F46E =00000042                  id_Newtron:		equ ((ptr_Newtron-Obj_Index)/4)+1
0000F46E =00000043                  id_Roller:		equ ((ptr_Roller-Obj_Index)/4)+1
0000F46E =00000044                  id_EdgeWalls:		equ ((ptr_EdgeWalls-Obj_Index)/4)+1
0000F46E =00000045                  id_SideStomp:		equ ((ptr_SideStomp-Obj_Index)/4)+1
0000F46E =00000046                  id_MarbleBrick:		equ ((ptr_MarbleBrick-Obj_Index)/4)+1
0000F46E =00000047                  id_Bumper:		equ ((ptr_Bumper-Obj_Index)/4)+1
0000F46E =00000048                  id_BossBall:		equ ((ptr_BossBall-Obj_Index)/4)+1		; $48
0000F46E =00000049                  id_WaterSound:		equ ((ptr_WaterSound-Obj_Index)/4)+1
0000F46E =0000004A                  id_VanishSonic:		equ ((ptr_VanishSonic-Obj_Index)/4)+1
0000F46E =0000004B                  id_GiantRing:		equ ((ptr_GiantRing-Obj_Index)/4)+1
0000F46E =0000004C                  id_GeyserMaker:		equ ((ptr_GeyserMaker-Obj_Index)/4)+1
0000F46E =0000004D                  id_LavaGeyser:		equ ((ptr_LavaGeyser-Obj_Index)/4)+1
0000F46E =0000004E                  id_SpShieldItem:		equ ((ptr_SpShieldItem-Obj_Index)/4)+1
0000F46E =0000004F                  id_Obj4F:		equ ((ptr_Obj4F-Obj_Index)/4)+1
0000F46E =00000050                  id_Yadrin:		equ ((ptr_Yadrin-Obj_Index)/4)+1		; $50
0000F46E =00000051                  id_SmashBlock:		equ ((ptr_SmashBlock-Obj_Index)/4)+1
0000F46E =00000052                  id_MovingBlock:		equ ((ptr_MovingBlock-Obj_Index)/4)+1
0000F46E =00000053                  id_CollapseFloor:	equ ((ptr_CollapseFloor-Obj_Index)/4)+1
0000F46E =00000054                  id_LavaTag:		equ ((ptr_LavaTag-Obj_Index)/4)+1
0000F46E =00000055                  id_Basaran:		equ ((ptr_Basaran-Obj_Index)/4)+1
0000F46E =00000056                  id_FloatingBlock:	equ ((ptr_FloatingBlock-Obj_Index)/4)+1
0000F46E =00000057                  id_SpikeBall:		equ ((ptr_SpikeBall-Obj_Index)/4)+1
0000F46E =00000058                  id_BigSpikeBall:	equ ((ptr_BigSpikeBall-Obj_Index)/4)+1		; $58
0000F46E =00000059                  id_Elevator:		equ ((ptr_Elevator-Obj_Index)/4)+1
0000F46E =0000005A                  id_CirclingPlatform:	equ ((ptr_CirclingPlatform-Obj_Index)/4)+1
0000F46E =0000005B                  id_Staircase:		equ ((ptr_Staircase-Obj_Index)/4)+1
0000F46E =0000005C                  id_Pylon:		equ ((ptr_Pylon-Obj_Index)/4)+1
0000F46E =0000005D                  id_Fan:			equ ((ptr_Fan-Obj_Index)/4)+1
0000F46E =0000005E                  id_Seesaw:		equ ((ptr_Seesaw-Obj_Index)/4)+1
0000F46E =0000005F                  id_Bomb:		equ ((ptr_Bomb-Obj_Index)/4)+1
0000F46E =00000060                  id_Orbinaut:		equ ((ptr_Orbinaut-Obj_Index)/4)+1		; $60
0000F46E =00000061                  id_LabyrinthBlock:	equ ((ptr_LabyrinthBlock-Obj_Index)/4)+1
0000F46E =00000062                  id_Gargoyle:		equ ((ptr_Gargoyle-Obj_Index)/4)+1
0000F46E =00000063                  id_LabyrinthConvey:	equ ((ptr_LabyrinthConvey-Obj_Index)/4)+1
0000F46E =00000064                  id_Bubble:		equ ((ptr_Bubble-Obj_Index)/4)+1
0000F46E =00000065                  id_Waterfall:		equ ((ptr_Waterfall-Obj_Index)/4)+1
0000F46E =00000066                  id_Junction:		equ ((ptr_Junction-Obj_Index)/4)+1
0000F46E =00000067                  id_RunningDisc:		equ ((ptr_RunningDisc-Obj_Index)/4)+1
0000F46E =00000068                  id_Conveyor:		equ ((ptr_Conveyor-Obj_Index)/4)+1		; $68
0000F46E =00000069                  id_SpinPlatform:	equ ((ptr_SpinPlatform-Obj_Index)/4)+1
0000F46E =0000006A                  id_Saws:		equ ((ptr_Saws-Obj_Index)/4)+1
0000F46E =0000006B                  id_ScrapStomp:		equ ((ptr_ScrapStomp-Obj_Index)/4)+1
0000F46E =0000006C                  id_VanishPlatform:	equ ((ptr_VanishPlatform-Obj_Index)/4)+1
0000F46E =0000006D                  id_Flamethrower:	equ ((ptr_Flamethrower-Obj_Index)/4)+1
0000F46E =0000006E                  id_Electro:		equ ((ptr_Electro-Obj_Index)/4)+1
0000F46E =0000006F                  id_SpinConvey:		equ ((ptr_SpinConvey-Obj_Index)/4)+1
0000F46E =00000070                  id_Girder:		equ ((ptr_Girder-Obj_Index)/4)+1		; $70
0000F46E =00000071                  id_Invisibarrier:	equ ((ptr_Invisibarrier-Obj_Index)/4)+1
0000F46E =00000072                  id_Teleport:		equ ((ptr_Teleport-Obj_Index)/4)+1
0000F46E =00000073                  id_BossMarble:		equ ((ptr_BossMarble-Obj_Index)/4)+1
0000F46E =00000074                  id_BossFire:		equ ((ptr_BossFire-Obj_Index)/4)+1
0000F46E =00000075                  id_BossSpringYard:	equ ((ptr_BossSpringYard-Obj_Index)/4)+1
0000F46E =00000076                  id_BossBlock:		equ ((ptr_BossBlock-Obj_Index)/4)+1
0000F46E =00000077                  id_BossLabyrinth:	equ ((ptr_BossLabyrinth-Obj_Index)/4)+1
0000F46E =00000078                  id_Caterkiller:		equ ((ptr_Caterkiller-Obj_Index)/4)+1		; $78
0000F46E =00000079                  id_Lamppost:		equ ((ptr_Lamppost-Obj_Index)/4)+1
0000F46E =0000007A                  id_BossStarLight:	equ ((ptr_BossStarLight-Obj_Index)/4)+1
0000F46E =0000007B                  id_BossSpikeball:	equ ((ptr_BossSpikeball-Obj_Index)/4)+1
0000F46E =0000007C                  id_RingFlash:		equ ((ptr_RingFlash-Obj_Index)/4)+1
0000F46E =0000007D                  id_HiddenBonus:		equ ((ptr_HiddenBonus-Obj_Index)/4)+1
0000F46E =0000007E                  id_SSResult:		equ ((ptr_SSResult-Obj_Index)/4)+1
0000F46E =0000007F                  id_SSRChaos:		equ ((ptr_SSRChaos-Obj_Index)/4)+1
0000F46E =00000080                  id_ContScrItem:		equ ((ptr_ContScrItem-Obj_Index)/4)+1		; $80
0000F46E =00000081                  id_ContSonic:		equ ((ptr_ContSonic-Obj_Index)/4)+1
0000F46E =00000082                  id_ScrapEggman:		equ ((ptr_ScrapEggman-Obj_Index)/4)+1
0000F46E =00000083                  id_FalseFloor:		equ ((ptr_FalseFloor-Obj_Index)/4)+1
0000F46E =00000084                  id_EggmanCylinder:	equ ((ptr_EggmanCylinder-Obj_Index)/4)+1
0000F46E =00000085                  id_BossFinal:		equ ((ptr_BossFinal-Obj_Index)/4)+1
0000F46E =00000086                  id_BossPlasma:		equ ((ptr_BossPlasma-Obj_Index)/4)+1
0000F46E =00000087                  id_EndSonic:		equ ((ptr_EndSonic-Obj_Index)/4)+1
0000F46E =00000088                  id_EndChaos:		equ ((ptr_EndChaos-Obj_Index)/4)+1		; $88
0000F46E =00000089                  id_EndSTH:		equ ((ptr_EndSTH-Obj_Index)/4)+1
0000F46E =0000008A                  id_CreditsText:		equ ((ptr_CreditsText-Obj_Index)/4)+1
0000F46E =0000008B                  id_EndEggman:		equ ((ptr_EndEggman-Obj_Index)/4)+1
0000F46E =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F46E =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F46E                            
0000F46E                            		include	"_incObj\sub ObjectFall.asm"
0000F46E                            ; ---------------------------------------------------------------------------
0000F46E                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000F46E                            ; ---------------------------------------------------------------------------
0000F46E                            
0000F46E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F46E                            
0000F46E                            
0000F46E                            ObjectFall:
0000F46E 0C28 0050 0012             		cmpi.b	#$50,obVelY(a0)
0000F474 6700                       		beq.s	@donothing
0000F476 3028 0010                  		move.w	obVelX(a0),d0
0000F47A 48C0                       		ext.l	d0
0000F47C E188                       		lsl.l	#8,d0
0000F47E D1A8 0008                  		add.l	d0,obX(a0)
0000F482 0C68 0FC8 0012                     cmp.w   #$FC8,obVelY(a0)   ; check if Sonic's Y speed is lower than this value
0000F488 6F00                               ble.s   @skipline       ; if yes, branch
0000F48A 317C 0FC8 0012                     move.w  #$FC8,obVelY(a0)    ; alter Sonic's Y speed
0000F490                                @skipline:		
0000F490 3028 0012                  		move.w	obVelY(a0),d0
0000F494 0668 0038 0012             		addi.w	#$38,obVelY(a0)	; increase vertical speed
0000F49A 48C0                       		ext.l	d0
0000F49C E188                       		lsl.l	#8,d0
0000F49E D1A8 000C                  		add.l	d0,obY(a0)
0000F4A2 4E75                       		rts	
0000F4A4                            	
0000F4A4                            	@donothing:
0000F4A4 4E75                       		rts
0000F4A6                            
0000F4A6                            ; End of function ObjectFall
0000F4A6                            ; End of function ObjectFall
0000F4A6                            		include	"_incObj\sub SpeedToPos.asm"
0000F4A6                            ; ---------------------------------------------------------------------------
0000F4A6                            ; Subroutine translating object	speed to update	object position
0000F4A6                            ; ---------------------------------------------------------------------------
0000F4A6                            
0000F4A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F4A6                            
0000F4A6                            
0000F4A6                            SpeedToPos:
0000F4A6 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0000F4AC E188                       		lsl.l	#8,d0
0000F4AE D1A8 0008                  		add.l	d0,obX(a0)
0000F4B2 E18A                       		lsl.l	#8,d2
0000F4B4 D5A8 000C                  		add.l	d2,obY(a0)
0000F4B8 4E75                       		rts
0000F4BA                            ; End of function SpeedToPos
0000F4BA                            ; End of function SpeedToPos
0000F4BA                            		include	"_incObj\sub DisplaySprite.asm"
0000F4BA                            ; ---------------------------------------------------------------------------
0000F4BA                            ; Subroutine to    display    a sprite/object, when a0 is the    object RAM
0000F4BA                            ; ---------------------------------------------------------------------------
0000F4BA                            
0000F4BA                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F4BA                            
0000F4BA                            
0000F4BA                            DisplaySprite:
0000F4BA 43F8 AC00                          lea    (v_spritequeue).w,a1
0000F4BE D2E8 0018                          adda.w  obpriority(a0),a1 ; get sprite priority
0000F4C2 0C51 007E                          cmpi.w    #$7E,(a1)    ; is this part of the queue full?
0000F4C6 6400                               bcc.s    DSpr_Full    ; if yes, branch
0000F4C8 5451                               addq.w    #2,(a1)        ; increment sprite count
0000F4CA D2D1                               adda.w    (a1),a1        ; jump to empty position
0000F4CC 3288                               move.w    a0,(a1)        ; insert RAM address for object
0000F4CE                            
0000F4CE                                DSpr_Full:
0000F4CE 4E75                               rts    
0000F4D0                            
0000F4D0                            ; End of function DisplaySprite
0000F4D0                            
0000F4D0                            
0000F4D0                            ; ---------------------------------------------------------------------------
0000F4D0                            ; Subroutine to    display    a 2nd sprite/object, when a1 is    the object RAM
0000F4D0                            ; ---------------------------------------------------------------------------
0000F4D0                            
0000F4D0                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F4D0                            
0000F4D0                            
0000F4D0                            DisplaySprite1:
0000F4D0 45F8 AC00                          lea    (v_spritequeue).w,a2
0000F4D4 D4E9 0018                          adda.w  obpriority(a1),a2
0000F4D8 0C52 007E                          cmpi.w    #$7E,(a2)
0000F4DC 6400                               bcc.s    DSpr1_Full
0000F4DE 5452                               addq.w    #2,(a2)
0000F4E0 D4D2                               adda.w    (a2),a2
0000F4E2 3489                               move.w    a1,(a2)
0000F4E4                            
0000F4E4                                DSpr1_Full:
0000F4E4 4E75                               rts    
0000F4E6                            
0000F4E6                            ; End of function DisplaySprite1
0000F4E6                            
0000F4E6                            ; ---------------------------------------------------------------------------
0000F4E6                            ; Subroutine to display a sprite/object, when a0 is the object RAM
0000F4E6                            ; and d0 is already (priority/2)&$380
0000F4E6                            ; ---------------------------------------------------------------------------
0000F4E6                            
0000F4E6                            ; loc_16530:
0000F4E6                            DisplaySprite2:
0000F4E6 43F8 AC00                      lea    (v_spritequeue).w,a1
0000F4EA D2C0                           adda.w    d0,a1
0000F4EC 0C51 007E                      cmpi.w    #$7E,(a1)
0000F4F0 6400                           bhs.s    return_16542
0000F4F2 5451                           addq.w    #2,(a1)
0000F4F4 D2D1                           adda.w    (a1),a1
0000F4F6 3288                           move.w    a0,(a1)
0000F4F8                            
0000F4F8                            return_16542:
0000F4F8 4E75                           rts
0000F4F8 4E75                           rts
0000F4FA                            		include	"_incObj\sub DeleteObject.asm"
0000F4FA                            ; ---------------------------------------------------------------------------
0000F4FA                            ; Subroutine to	delete an object
0000F4FA                            ; ---------------------------------------------------------------------------
0000F4FA                            
0000F4FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F4FA                            
0000F4FA                            
0000F4FA                            DeleteObject:
0000F4FA 2248                       		movea.l	a0,a1		; move object RAM address to (a1)
0000F4FC                            
0000F4FC                            DeleteChild:				; child objects are already in (a1)
0000F4FC 7200                       		moveq	#0,d1
0000F4FE 700F                       		moveq	#$F,d0
0000F500                            
0000F500                            	DelObj_Loop:
0000F500 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000F502 51C8 FFFC                  		dbf	d0,DelObj_Loop	; repeat for length of object RAM
0000F506 4E75                       		rts	
0000F508                            
0000F508                            ; End of function DeleteObject
0000F508                            ; End of function DeleteObject
0000F508                            
0000F508                            ; ===========================================================================
0000F508 0000 0000                  BldSpr_ScrPos:	dc.l 0				; blank
0000F50C 00FF F700                  		dc.l v_screenposx&$FFFFFF	; main screen x-position
0000F510 00FF F708                  		dc.l v_bgscreenposx&$FFFFFF	; background x-position	1
0000F514 00FF F718                  		dc.l v_bg3screenposx&$FFFFFF	; background x-position	2
0000F518                            ; ---------------------------------------------------------------------------
0000F518                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000F518                            ; ---------------------------------------------------------------------------
0000F518                            
0000F518                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F518                            BuildSprites:                ; XREF: TitleScreen; et al
0000F518 45F8 F800                  		lea	(v_spritetablebuffer).w,a2 ; set address for sprite table
0000F51C 7A00                       		moveq	#0,d5
0000F51E 49F8 AC00                  		lea	(v_spritequeue).w,a4
0000F522 7E07                       		moveq	#7,d7
0000F524                            		
0000F524                            loc_D66A:
0000F524 4A54                       		tst.w	(a4)
0000F526 6700 0000                  		beq.w	loc_D72E
0000F52A 7C02                       		moveq	#2,d6
0000F52C                            
0000F52C                            loc_D672:
0000F52C 3074 6000                          movea.w    (a4,d6.w),a0
0000F530 4A10                               tst.b    (a0)
0000F532 6700 0000                          beq.w    loc_D726
0000F536 08A8 0007 0001                     bclr    #7,1(a0)
0000F53C 1028 0001                          move.b    1(a0),d0
0000F540 1800                               move.b    d0,d4
0000F542 0C10 0001                          cmpi.b    #1,(a0)    ; is this object is Sonic
0000F546 6700                               beq.s    @skip    ; if it is, branch
0000F548 0800 0006                          btst    #6,d0    ; is the multi-draw flag set?
0000F54C 6600 0000                          bne.w   BuildSprites_MultiDraw    ; if it is, branch
0000F550                               @skip:
0000F550 0240 000C                  		andi.w	#$C,d0
0000F554 6700                       		beq.s	loc_D6DE
0000F556 227B 00B0                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000F55A 7000                       		moveq	#0,d0
0000F55C 1028 0014                  		move.b	width_pixels(a0),d0
0000F560 3628 0008                  		move.w	8(a0),d3
0000F564 9651                       		sub.w	(a1),d3
0000F566 3203                       		move.w	d3,d1
0000F568 D240                       		add.w	d0,d1
0000F56A 6B00 0000                  		bmi.w	loc_D726
0000F56E 3203                       		move.w	d3,d1
0000F570 9240                       		sub.w	d0,d1
0000F572 0C41 0140                  		cmpi.w	#$140,d1
0000F576 6C00                       		bge.s	loc_D726
0000F578 0643 0080                  		addi.w	#$80,d3
0000F57C 0804 0004                  		btst	#4,d4
0000F580 6700                       		beq.s	loc_D6E8
0000F582 7000                       		moveq	#0,d0
0000F584 1028 0016                  		move.b	$16(a0),d0
0000F588 3428 000C                  		move.w	$C(a0),d2
0000F58C 9469 0004                  		sub.w	4(a1),d2
0000F590 3202                       		move.w	d2,d1
0000F592 D240                       		add.w	d0,d1
0000F594 6B00                       		bmi.s	loc_D726
0000F596 3202                       		move.w	d2,d1
0000F598 9240                       		sub.w	d0,d1
0000F59A 0C41 00E0                  		cmpi.w	#$E0,d1
0000F59E 6C00                       		bge.s	loc_D726
0000F5A0 0642 0080                  		addi.w	#$80,d2
0000F5A4 6000                       		bra.s	loc_D700
0000F5A6                            ; ===========================================================================
0000F5A6                            
0000F5A6                            loc_D6DE:
0000F5A6 3428 000A                  		move.w	$A(a0),d2
0000F5AA 3628 0008                  		move.w	8(a0),d3
0000F5AE 6000                       		bra.s	loc_D700
0000F5B0                            ; ===========================================================================
0000F5B0                            
0000F5B0                            loc_D6E8:
0000F5B0 3428 000C                  		move.w	$C(a0),d2
0000F5B4 9469 0004                  		sub.w	4(a1),d2
0000F5B8 0642 0080                  		addi.w	#$80,d2
0000F5BC 0C42 0060                  		cmpi.w	#$60,d2
0000F5C0 6500                       		bcs.s	loc_D726
0000F5C2 0C42 0180                  		cmpi.w	#$180,d2
0000F5C6 6400                       		bcc.s	loc_D726
0000F5C8                            
0000F5C8                            loc_D700:
0000F5C8 2268 0004                  		movea.l	4(a0),a1
0000F5CC 7200                       		moveq	#0,d1
0000F5CE 0804 0005                  		btst	#5,d4
0000F5D2 6600                       		bne.s	loc_D71C
0000F5D4 1228 001A                  		move.b	$1A(a0),d1
0000F5D8 D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000F5DA D2F1 1000                  		adda.w	(a1,d1.w),a1
0000F5DE 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000F5E0 1219                       		move.b	(a1)+,d1
0000F5E2 5301                       		subq.b	#1,d1
0000F5E4 6B00                       		bmi.s	loc_D720
0000F5E6                            
0000F5E6                            loc_D71C:
0000F5E6 4EB9 0000 0000             		jsr	sub_D750
0000F5EC                            
0000F5EC                            loc_D720:
0000F5EC 08E8 0007 0001             		bset	#7,1(a0)
0000F5F2                            
0000F5F2                            loc_D726:
0000F5F2 5446                       		addq.w	#2,d6
0000F5F4 5554                       		subq.w	#2,(a4)
0000F5F6 6600 FF34                  		bne.w	loc_D672
0000F5FA                            
0000F5FA                            loc_D72E:
0000F5FA 49EC 0080                  		lea	$80(a4),a4
0000F5FE 51CF FF24                  		dbf	d7,loc_D66A
0000F602 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000F606 0C05 0050                  		cmpi.b	#$50,d5
0000F60A 6700                       		beq.s	loc_D748
0000F60C 24BC 0000 0000             		move.l	#0,(a2)
0000F612 4E75                       		rts	
0000F614                            ; ===========================================================================
0000F614                            
0000F614                            loc_D748:
0000F614 157C 0000 FFFB             		move.b	#0,-5(a2)
0000F61A 4E75                       		rts	
0000F61C                            ; End of function BuildSprites
0000F61C                            
0000F61C                            BuildSprites_MultiDraw:
0000F61C 2F0C                       	move.l	a4,-(sp)
0000F61E 49F8 F700                  	lea	($FFFFF700).w,a4
0000F622 3668 0002                  	movea.w	art_tile(a0),a3
0000F626 2A68 0004                  	movea.l	mappings(a0),a5
0000F62A 7000                       	moveq	#0,d0
0000F62C                            
0000F62C                            	; check if object is within X bounds
0000F62C 1028 000E                  	move.b	mainspr_width(a0),d0	; load pixel width
0000F630 3628 0008                  	move.w	x_pos(a0),d3
0000F634 9654                       	sub.w	(a4),d3
0000F636 3203                       	move.w	d3,d1                            
0000F638 D240                       	add.w	d0,d1                            ; is the object right edge to the left of the screen? 
0000F63A 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000F63E 3203                       	move.w	d3,d1
0000F640 9240                       	sub.w	d0,d1
0000F642 0C41 0140                  	cmpi.w	#320,d1                          ; is the object left edge to the right of the screen?
0000F646 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000F64A 0643 0080                  	addi.w	#128,d3
0000F64E                            
0000F64E                            	; check if object is within Y bounds
0000F64E 0804 0004                  	btst	#4,d4                            ; is the accurate Y check flag set?
0000F652 6700                       	beq.s	BuildSpritesMulti_ApproxYCheck
0000F654 7000                       	moveq	#0,d0
0000F656 1028 0014                  	move.b	mainspr_height(a0),d0	         ; load pixel height
0000F65A 3428 000C                  	move.w	y_pos(a0),d2
0000F65E 946C 0004                  	sub.w	4(a4),d2
0000F662 3202                       	move.w	d2,d1
0000F664 D240                       	add.w	d0,d1
0000F666 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj  ; if the object is above the screen
0000F66A 3202                       	move.w	d2,d1
0000F66C 9240                       	sub.w	d0,d1
0000F66E 0C41 00E0                  	cmpi.w	#224,d1
0000F672 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj  ; if the object is below the screen
0000F676 0642 0080                  	addi.w	#128,d2
0000F67A 6000                       	bra.s	BuildSpritesMulti_DrawSprite
0000F67C                            BuildSpritesMulti_ApproxYCheck:
0000F67C 3428 000C                  	move.w	y_pos(a0),d2
0000F680 946C 0004                  	sub.w	4(a4),d2
0000F684 0642 0080                  	addi.w	#128,d2
0000F688 0242 07FF                  	andi.w	#$7FF,d2
0000F68C 0C42 0060                  	cmpi.w	#-32+128,d2
0000F690 6500                       	blo.s	BuildSprites_MultiDraw_NextObj
0000F692 0C42 0180                  	cmpi.w	#32+128+224,d2
0000F696 6400                       	bhs.s	BuildSprites_MultiDraw_NextObj
0000F698                            BuildSpritesMulti_DrawSprite:
0000F698 7200                       	moveq	#0,d1
0000F69A 1228 000B                  	move.b	mainspr_mapframe(a0),d1	         ; get current frame
0000F69E 6700                       	beq.s	.noparenttodraw
0000F6A0 D241                       	add.w	d1,d1
0000F6A2 224D                       	movea.l	a5,a1                            ; a5 is mappings(a0), copy to a1
0000F6A4 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000F6A8 7200                       	moveq	#0,d1
0000F6AA 1219                       	move.b	(a1)+,d1
0000F6AC 5301                       	subq.b	#1,d1                            ; get number of pieces
0000F6AE 6B00                       	bmi.s	.noparenttodraw                  ; if there are 0 pieces, branch
0000F6B0 3F04                       	move.w	d4,-(sp)
0000F6B2 4EB9 0000 0000             	jsr	ChkDrawSprite	                 ; draw the sprite
0000F6B8 381F                       	move.w	(sp)+,d4
0000F6BA                            .noparenttodraw:
0000F6BA 0028 0080 0001             	ori.b	#$80,render_flags(a0)	         ; set onscreen flag
0000F6C0 4DE8 0010                  	lea	sub2_x_pos(a0),a6                ; address of first child sprite info
0000F6C4 7000                       	moveq	#0,d0
0000F6C6 1028 000F                  	move.b	mainspr_childsprites(a0),d0	 ; get child sprite count
0000F6CA 5340                       	subq.w	#1,d0		                 ; if there are 0, go to next object
0000F6CC 6500                       	bcs.s	BuildSprites_MultiDraw_NextObj
0000F6CE                            
0000F6CE                            @drawchildloop:
0000F6CE 4840                       	swap	d0
0000F6D0 361E                       	move.w	(a6)+,d3	                 ; get X pos
0000F6D2 9654                       	sub.w	(a4),d3                          ; subtract the screen's x position
0000F6D4 0643 0080                  	addi.w	#128,d3
0000F6D8 341E                       	move.w	(a6)+,d2	                 ; get Y pos
0000F6DA 946C 0004                  	sub.w	4(a4),d2   ; subtract the screen's y position
0000F6DE 0642 0080                  	addi.w	#128,d2
0000F6E2 0242 07FF                  	andi.w	#$7FF,d2
0000F6E6 524E                       	addq.w	#1,a6
0000F6E8 7200                       	moveq	#0,d1
0000F6EA 121E                       	move.b	(a6)+,d1	                 ; get mapping frame
0000F6EC D241                       	add.w	d1,d1
0000F6EE 224D                       	movea.l	a5,a1
0000F6F0 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000F6F4 7200                       	moveq	#0,d1
0000F6F6 1219                       	move.b	(a1)+,d1
0000F6F8 5301                       	subq.b	#1,d1                            ; get number of pieces
0000F6FA 6B00                       	bmi.s	@nochildleft                     ; if there are 0 pieces, branch
0000F6FC 3F04                       	move.w	d4,-(sp)
0000F6FE 4EB9 0000 0000             	jsr	ChkDrawSprite
0000F704 381F                       	move.w	(sp)+,d4
0000F706                            @nochildleft:
0000F706 4840                       	swap	d0
0000F708 51C8 FFC4                  	dbf	d0,@drawchildloop	         ; repeat for number of child sprites
0000F70C                            ; loc_16804:
0000F70C                            BuildSprites_MultiDraw_NextObj:
0000F70C 285F                       	movea.l	(sp)+,a4
0000F70E 6000 FEE2                  	bra.w	loc_D726; End of function BuildSprites
0000F712                            
0000F712                            
0000F712                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000F712                            
0000F712                            ; sub_1680A:
0000F712                            ChkDrawSprite:
0000F712 0C05 0050                  	cmpi.b	#80,d5		; has the sprite limit been reached?
0000F716 6500                       	blo.s	loc_1681C	; if it hasn't, branch
0000F718 4E75                       	rts	; otherwise, return
0000F71A                            
0000F71A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F71A                            
0000F71A                            
0000F71A                            sub_D750:				; XREF: BuildSprites
0000F71A 3668 0002                  		movea.w	2(a0),a3
0000F71E                            loc_1681C:
0000F71E 0804 0000                  		btst	#0,d4
0000F722 6600                       		bne.s	loc_D796
0000F724 0804 0001                  		btst	#1,d4
0000F728 6600 0000                  		bne.w	loc_D7E4
0000F72C                            ; End of function sub_D750
0000F72C                            
0000F72C                            
0000F72C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F72C                            
0000F72C                            
0000F72C                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000F72C 0C05 0050                  		cmpi.b	#$50,d5
0000F730 6700                       		beq.s	locret_D794
0000F732                            sub_D762_2:				; XREF: sub_D762; SS_ShowLayout
0000F732 1019                       		move.b	(a1)+,d0
0000F734 4880                       		ext.w	d0
0000F736 D042                       		add.w	d2,d0
0000F738 34C0                       		move.w	d0,(a2)+
0000F73A 14D9                       		move.b	(a1)+,(a2)+
0000F73C 5205                       		addq.b	#1,d5
0000F73E 14C5                       		move.b	d5,(a2)+
0000F740 1019                       		move.b	(a1)+,d0
0000F742 E148                       		lsl.w	#8,d0
0000F744 1019                       		move.b	(a1)+,d0
0000F746 D04B                       		add.w	a3,d0
0000F748 34C0                       		move.w	d0,(a2)+
0000F74A 1019                       		move.b	(a1)+,d0
0000F74C 4880                       		ext.w	d0
0000F74E D043                       		add.w	d3,d0
0000F750 0240 01FF                  		andi.w	#$1FF,d0
0000F754 6600                       		bne.s	loc_D78E
0000F756 5240                       		addq.w	#1,d0
0000F758                            
0000F758                            loc_D78E:
0000F758 34C0                       		move.w	d0,(a2)+
0000F75A 51C9 FFD0                  		dbf	d1,sub_D762
0000F75E                            
0000F75E                            locret_D794:
0000F75E 4E75                       		rts
0000F760                            ; End of function sub_D762
0000F760                            
0000F760                            ; ===========================================================================
0000F760                            
0000F760                            loc_D796:
0000F760 0804 0001                  		btst	#1,d4
0000F764 6600 0000                  		bne.w	loc_D82A
0000F768                            
0000F768                            loc_D79E:
0000F768 0C05 0050                  		cmpi.b	#$50,d5
0000F76C 6700                       		beq.s	locret_D7E2
0000F76E 1019                       		move.b	(a1)+,d0
0000F770 4880                       		ext.w	d0
0000F772 D042                       		add.w	d2,d0
0000F774 34C0                       		move.w	d0,(a2)+
0000F776 1819                       		move.b	(a1)+,d4
0000F778 14C4                       		move.b	d4,(a2)+
0000F77A 5205                       		addq.b	#1,d5
0000F77C 14C5                       		move.b	d5,(a2)+
0000F77E 1019                       		move.b	(a1)+,d0
0000F780 E148                       		lsl.w	#8,d0
0000F782 1019                       		move.b	(a1)+,d0
0000F784 D04B                       		add.w	a3,d0
0000F786 0A40 0800                  		eori.w	#$800,d0
0000F78A 34C0                       		move.w	d0,(a2)+
0000F78C 1019                       		move.b	(a1)+,d0
0000F78E 4880                       		ext.w	d0
0000F790 4440                       		neg.w	d0
0000F792 D804                       		add.b	d4,d4
0000F794 0244 0018                  		andi.w	#$18,d4
0000F798 5044                       		addq.w	#8,d4
0000F79A 9044                       		sub.w	d4,d0
0000F79C D043                       		add.w	d3,d0
0000F79E 0240 01FF                  		andi.w	#$1FF,d0
0000F7A2 6600                       		bne.s	loc_D7DC
0000F7A4 5240                       		addq.w	#1,d0
0000F7A6                            
0000F7A6                            loc_D7DC:
0000F7A6 34C0                       		move.w	d0,(a2)+
0000F7A8 51C9 FFBE                  		dbf	d1,loc_D79E
0000F7AC                            
0000F7AC                            locret_D7E2:
0000F7AC 4E75                       		rts
0000F7AE                            ; ===========================================================================
0000F7AE                            
0000F7AE                            loc_D7E4:				; XREF: sub_D750
0000F7AE 0C05 0050                  		cmpi.b	#$50,d5
0000F7B2 6700                       		beq.s	locret_D828
0000F7B4 1019                       		move.b	(a1)+,d0
0000F7B6 1811                       		move.b	(a1),d4
0000F7B8 4880                       		ext.w	d0
0000F7BA 4440                       		neg.w	d0
0000F7BC E70C                       		lsl.b	#3,d4
0000F7BE 0244 0018                  		andi.w	#$18,d4
0000F7C2 5044                       		addq.w	#8,d4
0000F7C4 9044                       		sub.w	d4,d0
0000F7C6 D042                       		add.w	d2,d0
0000F7C8 34C0                       		move.w	d0,(a2)+
0000F7CA 14D9                       		move.b	(a1)+,(a2)+
0000F7CC 5205                       		addq.b	#1,d5
0000F7CE 14C5                       		move.b	d5,(a2)+
0000F7D0 1019                       		move.b	(a1)+,d0
0000F7D2 E148                       		lsl.w	#8,d0
0000F7D4 1019                       		move.b	(a1)+,d0
0000F7D6 D04B                       		add.w	a3,d0
0000F7D8 0A40 1000                  		eori.w	#$1000,d0
0000F7DC 34C0                       		move.w	d0,(a2)+
0000F7DE 1019                       		move.b	(a1)+,d0
0000F7E0 4880                       		ext.w	d0
0000F7E2 D043                       		add.w	d3,d0
0000F7E4 0240 01FF                  		andi.w	#$1FF,d0
0000F7E8 6600                       		bne.s	loc_D822
0000F7EA 5240                       		addq.w	#1,d0
0000F7EC                            
0000F7EC                            loc_D822:
0000F7EC 34C0                       		move.w	d0,(a2)+
0000F7EE 51C9 FFBE                  		dbf	d1,loc_D7E4
0000F7F2                            
0000F7F2                            locret_D828:
0000F7F2 4E75                       		rts
0000F7F4                            ; ===========================================================================
0000F7F4                            
0000F7F4                            loc_D82A:
0000F7F4 0C05 0050                  		cmpi.b	#$50,d5
0000F7F8 6700                       		beq.s	locret_D87C
0000F7FA 1019                       		move.b	(a1)+,d0
0000F7FC 1811                       		move.b	(a1),d4
0000F7FE 4880                       		ext.w	d0
0000F800 4440                       		neg.w	d0
0000F802 E70C                       		lsl.b	#3,d4
0000F804 0244 0018                  		andi.w	#$18,d4
0000F808 5044                       		addq.w	#8,d4
0000F80A 9044                       		sub.w	d4,d0
0000F80C D042                       		add.w	d2,d0
0000F80E 34C0                       		move.w	d0,(a2)+
0000F810 1819                       		move.b	(a1)+,d4
0000F812 14C4                       		move.b	d4,(a2)+
0000F814 5205                       		addq.b	#1,d5
0000F816 14C5                       		move.b	d5,(a2)+
0000F818 1019                       		move.b	(a1)+,d0
0000F81A E148                       		lsl.w	#8,d0
0000F81C 1019                       		move.b	(a1)+,d0
0000F81E D04B                       		add.w	a3,d0
0000F820 0A40 1800                  		eori.w	#$1800,d0
0000F824 34C0                       		move.w	d0,(a2)+
0000F826 1019                       		move.b	(a1)+,d0
0000F828 4880                       		ext.w	d0
0000F82A 4440                       		neg.w	d0
0000F82C D804                       		add.b	d4,d4
0000F82E 0244 0018                  		andi.w	#$18,d4
0000F832 5044                       		addq.w	#8,d4
0000F834 9044                       		sub.w	d4,d0
0000F836 D043                       		add.w	d3,d0
0000F838 0240 01FF                  		andi.w	#$1FF,d0
0000F83C 6600                       		bne.s	loc_D876
0000F83E 5240                       		addq.w	#1,d0
0000F840                            
0000F840                            loc_D876:
0000F840 34C0                       		move.w	d0,(a2)+
0000F842 51C9 FFB0                  		dbf	d1,loc_D82A
0000F846                            
0000F846                            locret_D87C:
0000F846 4E75                       		rts
0000F848                            ; End of function BuildSpr_Normal
0000F848                            
0000F848                            ; ===========================================================================
0000F848                            
0000F848                            		include	"_incObj\sub ChkObjectVisible.asm"
0000F848                            ; ---------------------------------------------------------------------------
0000F848                            ; Subroutine to	check if an object is off screen
0000F848                            
0000F848                            ; output:
0000F848                            ;	d0 = flag set if object is off screen
0000F848                            ; ---------------------------------------------------------------------------
0000F848                            
0000F848                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F848                            
0000F848                            
0000F848                            ChkObjectVisible:
0000F848 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000F84C 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000F850 6B00                       		bmi.s	@offscreen
0000F852 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000F856 6C00                       		bge.s	@offscreen	; if not, branch
0000F858                            
0000F858 3228 000C                  		move.w	obY(a0),d1	; get object y-position
0000F85C 9278 F704                  		sub.w	(v_screenposy).w,d1 ; subtract screen y-position
0000F860 6B00                       		bmi.s	@offscreen
0000F862 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000F866 6C00                       		bge.s	@offscreen	; if not, branch
0000F868                            
0000F868 7000                       		moveq	#0,d0		; set flag to 0
0000F86A 4E75                       		rts	
0000F86C                            
0000F86C                            	@offscreen:
0000F86C 7001                       		moveq	#1,d0		; set flag to 1
0000F86E 4E75                       		rts	
0000F870                            ; End of function ChkObjectVisible
0000F870                            
0000F870                            ; ---------------------------------------------------------------------------
0000F870                            ; Subroutine to	check if an object is off screen
0000F870                            ; More precise than above subroutine, taking width into account
0000F870                            
0000F870                            ; output:
0000F870                            ;	d0 = flag set if object is off screen
0000F870                            ; ---------------------------------------------------------------------------
0000F870                            
0000F870                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F870                            
0000F870                            
0000F870                            ChkPartiallyVisible:
0000F870 7200                       		moveq	#0,d1
0000F872 1228 0014                  		move.b	obActWid(a0),d1
0000F876 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000F87A 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000F87E D041                       		add.w	d1,d0		; add object width
0000F880 6B00                       		bmi.s	@offscreen2
0000F882 D241                       		add.w	d1,d1
0000F884 9041                       		sub.w	d1,d0
0000F886 0C40 0140                  		cmpi.w	#320,d0
0000F88A 6C00                       		bge.s	@offscreen2
0000F88C                            
0000F88C 3228 000C                  		move.w	obY(a0),d1
0000F890 9278 F704                  		sub.w	(v_screenposy).w,d1
0000F894 6B00                       		bmi.s	@offscreen2
0000F896 0C41 00E0                  		cmpi.w	#224,d1
0000F89A 6C00                       		bge.s	@offscreen2
0000F89C                            
0000F89C 7000                       		moveq	#0,d0
0000F89E 4E75                       		rts	
0000F8A0                            
0000F8A0                            	@offscreen2:
0000F8A0 7001                       		moveq	#1,d0
0000F8A2 4E75                       		rts	
0000F8A4                            ; End of function ChkPartiallyVisible
0000F8A4                            ; End of function ChkPartiallyVisible
0000F8A4                            
0000F8A4                            ; ---------------------------------------------------------------------------
0000F8A4                            ; Subroutine to	load a level's objects
0000F8A4                            ; ---------------------------------------------------------------------------
0000F8A4                            
0000F8A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F8A4                            
0000F8A4                            
0000F8A4                            ObjPosLoad:
0000F8A4 7000                       		moveq	#0,d0
0000F8A6 1038 F76C                  		move.b	(v_opl_routine).w,d0
0000F8AA 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000F8AE 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000F8B2                            ; End of function ObjPosLoad
0000F8B2                            
0000F8B2                            ; ===========================================================================
0000F8B2 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000F8B4 0000                       		dc.w OPL_Next-OPL_Index
0000F8B6                            ; ===========================================================================
0000F8B6                            
0000F8B6                            OPL_Main:
0000F8B6 5438 F76C                  		addq.b	#2,(v_opl_routine).w
0000F8BA 3038 FE10                  		move.w	(v_zone).w,d0
0000F8BE ED08                       		lsl.b	#6,d0
0000F8C0 E848                       		lsr.w	#4,d0
0000F8C2 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000F8C8 2248                       		movea.l	a0,a1
0000F8CA D0F0 0000                  		adda.w	(a0,d0.w),a0
0000F8CE 21C8 F770                  		move.l	a0,(v_opl_data).w
0000F8D2 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000F8D6 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000F8DA 21C9 F778                  		move.l	a1,(v_opl_data+8).w
0000F8DE 21C9 F77C                  		move.l	a1,(v_opl_data+$C).w
0000F8E2 45F8 FC00                  		lea	(v_objstate).w,a2
0000F8E6 34FC 0101                  		move.w	#$101,(a2)+
0000F8EA 303C 005E                  		move.w	#$5E,d0
0000F8EE                            
0000F8EE                            OPL_ClrList:
0000F8EE 429A                       		clr.l	(a2)+
0000F8F0 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000F8F4                            
0000F8F4 45F8 FC00                  		lea	(v_objstate).w,a2
0000F8F8 7400                       		moveq	#0,d2
0000F8FA 3C38 F700                  		move.w	(v_screenposx).w,d6
0000F8FE 0446 0080                  		subi.w	#$80,d6
0000F902 6400                       		bhs.s	loc_D93C
0000F904 7C00                       		moveq	#0,d6
0000F906                            
0000F906                            loc_D93C:
0000F906 0246 FF80                  		andi.w	#$FF80,d6
0000F90A 2078 F770                  		movea.l	(v_opl_data).w,a0
0000F90E                            
0000F90E                            loc_D944:
0000F90E BC50                       		cmp.w	(a0),d6
0000F910 6300                       		bls.s	loc_D956
0000F912 4A28 0004                  		tst.b	4(a0)
0000F916 6A00                       		bpl.s	loc_D952
0000F918 1412                       		move.b	(a2),d2
0000F91A 5212                       		addq.b	#1,(a2)
0000F91C                            
0000F91C                            loc_D952:
0000F91C 5C48                       		addq.w	#6,a0
0000F91E 60EE                       		bra.s	loc_D944
0000F920                            ; ===========================================================================
0000F920                            
0000F920                            loc_D956:
0000F920 21C8 F770                  		move.l	a0,(v_opl_data).w
0000F924 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000F928 0446 0080                  		subi.w	#$80,d6
0000F92C 6500                       		blo.s	loc_D976
0000F92E                            
0000F92E                            loc_D964:
0000F92E BC50                       		cmp.w	(a0),d6
0000F930 6300                       		bls.s	loc_D976
0000F932 4A28 0004                  		tst.b	4(a0)
0000F936 6A00                       		bpl.s	loc_D972
0000F938 522A 0001                  		addq.b	#1,1(a2)
0000F93C                            
0000F93C                            loc_D972:
0000F93C 5C48                       		addq.w	#6,a0
0000F93E 60EE                       		bra.s	loc_D964
0000F940                            ; ===========================================================================
0000F940                            
0000F940                            loc_D976:
0000F940 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000F944 31FC FFFF F76E             		move.w	#-1,(v_opl_screen).w
0000F94A                            
0000F94A                            OPL_Next:
0000F94A 45F8 FC00                  		lea	(v_objstate).w,a2
0000F94E 7400                       		moveq	#0,d2
0000F950 3C38 F700                  		move.w	(v_screenposx).w,d6
0000F954 0246 FF80                  		andi.w	#$FF80,d6
0000F958 BC78 F76E                  		cmp.w	(v_opl_screen).w,d6
0000F95C 6700 0000                  		beq.w	locret_DA3A
0000F960 6C00                       		bge.s	loc_D9F6
0000F962 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000F966 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000F96A 0446 0080                  		subi.w	#$80,d6
0000F96E 6500                       		blo.s	loc_D9D2
0000F970                            
0000F970                            loc_D9A6:
0000F970 BC68 FFFA                  		cmp.w	-6(a0),d6
0000F974 6C00                       		bge.s	loc_D9D2
0000F976 5D48                       		subq.w	#6,a0
0000F978 4A28 0004                  		tst.b	4(a0)
0000F97C 6A00                       		bpl.s	loc_D9BC
0000F97E 532A 0001                  		subq.b	#1,1(a2)
0000F982 142A 0001                  		move.b	1(a2),d2
0000F986                            
0000F986                            loc_D9BC:
0000F986 6100 0000                  		bsr.w	loc_DA3C
0000F98A 6600                       		bne.s	loc_D9C6
0000F98C 5D48                       		subq.w	#6,a0
0000F98E 60E0                       		bra.s	loc_D9A6
0000F990                            ; ===========================================================================
0000F990                            
0000F990                            loc_D9C6:
0000F990 4A28 0004                  		tst.b	4(a0)
0000F994 6A00                       		bpl.s	loc_D9D0
0000F996 522A 0001                  		addq.b	#1,1(a2)
0000F99A                            
0000F99A                            loc_D9D0:
0000F99A 5C48                       		addq.w	#6,a0
0000F99C                            
0000F99C                            loc_D9D2:
0000F99C 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000F9A0 2078 F770                  		movea.l	(v_opl_data).w,a0
0000F9A4 0646 0300                  		addi.w	#$300,d6
0000F9A8                            
0000F9A8                            loc_D9DE:
0000F9A8 BC68 FFFA                  		cmp.w	-6(a0),d6
0000F9AC 6E00                       		bgt.s	loc_D9F0
0000F9AE 4A28 FFFE                  		tst.b	-2(a0)
0000F9B2 6A00                       		bpl.s	loc_D9EC
0000F9B4 5312                       		subq.b	#1,(a2)
0000F9B6                            
0000F9B6                            loc_D9EC:
0000F9B6 5D48                       		subq.w	#6,a0
0000F9B8 60EE                       		bra.s	loc_D9DE
0000F9BA                            ; ===========================================================================
0000F9BA                            
0000F9BA                            loc_D9F0:
0000F9BA 21C8 F770                  		move.l	a0,(v_opl_data).w
0000F9BE 4E75                       		rts	
0000F9C0                            ; ===========================================================================
0000F9C0                            
0000F9C0                            loc_D9F6:
0000F9C0 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000F9C4 2078 F770                  		movea.l	(v_opl_data).w,a0
0000F9C8 0646 0280                  		addi.w	#$280,d6
0000F9CC                            
0000F9CC                            loc_DA02:
0000F9CC BC50                       		cmp.w	(a0),d6
0000F9CE 6300                       		bls.s	loc_DA16
0000F9D0 4A28 0004                  		tst.b	4(a0)
0000F9D4 6A00                       		bpl.s	loc_DA10
0000F9D6 1412                       		move.b	(a2),d2
0000F9D8 5212                       		addq.b	#1,(a2)
0000F9DA                            
0000F9DA                            loc_DA10:
0000F9DA 6100 0000                  		bsr.w	loc_DA3C
0000F9DE 67EC                       		beq.s	loc_DA02
0000F9E0                            
0000F9E0                            loc_DA16:
0000F9E0 21C8 F770                  		move.l	a0,(v_opl_data).w
0000F9E4 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000F9E8 0446 0300                  		subi.w	#$300,d6
0000F9EC 6500                       		blo.s	loc_DA36
0000F9EE                            
0000F9EE                            loc_DA24:
0000F9EE BC50                       		cmp.w	(a0),d6
0000F9F0 6300                       		bls.s	loc_DA36
0000F9F2 4A28 0004                  		tst.b	4(a0)
0000F9F6 6A00                       		bpl.s	loc_DA32
0000F9F8 522A 0001                  		addq.b	#1,1(a2)
0000F9FC                            
0000F9FC                            loc_DA32:
0000F9FC 5C48                       		addq.w	#6,a0
0000F9FE 60EE                       		bra.s	loc_DA24
0000FA00                            ; ===========================================================================
0000FA00                            
0000FA00                            loc_DA36:
0000FA00 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FA04                            
0000FA04                            locret_DA3A:
0000FA04 4E75                       		rts	
0000FA06                            ; ===========================================================================
0000FA06                            
0000FA06                            loc_DA3C:
0000FA06 4A28 0004                  		tst.b	4(a0)
0000FA0A 6A00                       		bpl.s	OPL_MakeItem
0000FA0C 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000FA12 6700                       		beq.s	OPL_MakeItem
0000FA14 5C48                       		addq.w	#6,a0
0000FA16 7000                       		moveq	#0,d0
0000FA18 4E75                       		rts	
0000FA1A                            ; ===========================================================================
0000FA1A                            
0000FA1A                            OPL_MakeItem:
0000FA1A 6100 0000                  		bsr.w	FindFreeObj
0000FA1E 6600                       		bne.s	locret_DA8A
0000FA20 3358 0008                  		move.w	(a0)+,obX(a1)
0000FA24 3018                       		move.w	(a0)+,d0
0000FA26 3200                       		move.w	d0,d1
0000FA28 0240 0FFF                  		andi.w	#$FFF,d0
0000FA2C 3340 000C                  		move.w	d0,obY(a1)
0000FA30 E559                       		rol.w	#2,d1
0000FA32 0201 0003                  		andi.b	#3,d1
0000FA36 1341 0001                  		move.b	d1,obRender(a1)
0000FA3A 1341 0022                  		move.b	d1,obStatus(a1)
0000FA3E 1018                       		move.b	(a0)+,d0
0000FA40 6A00                       		bpl.s	loc_DA80
0000FA42 0200 007F                  		andi.b	#$7F,d0
0000FA46 1342 0023                  		move.b	d2,obRespawnNo(a1)
0000FA4A                            
0000FA4A                            loc_DA80:
0000FA4A 1280                       		move.b	d0,0(a1)
0000FA4C 1358 0028                  		move.b	(a0)+,obSubtype(a1)
0000FA50 7000                       		moveq	#0,d0
0000FA52                            
0000FA52                            locret_DA8A:
0000FA52 4E75                       		rts	
0000FA54                            
0000FA54                            		include	"_incObj\sub FindFreeObj.asm"
0000FA54                            ; ---------------------------------------------------------------------------
0000FA54                            ; Subroutine to find a free object space
0000FA54                            
0000FA54                            ; output:
0000FA54                            ;	a1 = free position in object RAM
0000FA54                            ; ---------------------------------------------------------------------------
0000FA54                            
0000FA54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FA54                            
0000FA54                            
0000FA54                            FindFreeObj:
0000FA54 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; start address for object RAM
0000FA58 303C 005F                  		move.w	#$5F,d0
0000FA5C                            
0000FA5C                            	FFree_Loop:
0000FA5C 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000FA5E 6700                       		beq.s	FFree_Found	; if yes, branch
0000FA60 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000FA64 51C8 FFF6                  		dbf	d0,FFree_Loop	; repeat $5F times
0000FA68                            
0000FA68                            	FFree_Found:
0000FA68 4E75                       		rts	
0000FA6A                            
0000FA6A                            ; End of function FindFreeObj
0000FA6A                            
0000FA6A                            
0000FA6A                            ; ---------------------------------------------------------------------------
0000FA6A                            ; Subroutine to find a free object space AFTER the current one
0000FA6A                            
0000FA6A                            ; output:
0000FA6A                            ;	a1 = free position in object RAM
0000FA6A                            ; ---------------------------------------------------------------------------
0000FA6A                            
0000FA6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FA6A                            
0000FA6A                            
0000FA6A                            FindNextFreeObj:
0000FA6A 2248                       		movea.l	a0,a1
0000FA6C 303C F000                  		move.w	#$F000,d0
0000FA70 9048                       		sub.w	a0,d0
0000FA72 EC48                       		lsr.w	#6,d0
0000FA74 5340                       		subq.w	#1,d0
0000FA76 6500                       		bcs.s	NFree_Found
0000FA78                            
0000FA78                            	NFree_Loop:
0000FA78 4A11                       		tst.b	(a1)
0000FA7A 6700                       		beq.s	NFree_Found
0000FA7C 43E9 0040                  		lea	$40(a1),a1
0000FA80 51C8 FFF6                  		dbf	d0,NFree_Loop
0000FA84                            
0000FA84                            	NFree_Found:
0000FA84 4E75                       		rts	
0000FA86                            
0000FA86                            ; End of function FindNextFreeObj
0000FA86                            ; End of function FindNextFreeObj
0000FA86                            		include	"_incObj\41 Springs.asm"
0000FA86                            ; ---------------------------------------------------------------------------
0000FA86                            ; Object 41 - springs
0000FA86                            ; ---------------------------------------------------------------------------
0000FA86                            
0000FA86                            Springs:
0000FA86 7000                       		moveq	#0,d0
0000FA88 1028 0024                  		move.b	obRoutine(a0),d0
0000FA8C 323B 0000                  		move.w	Spring_Index(pc,d0.w),d1
0000FA90 4EBB 1000                  		jsr	Spring_Index(pc,d1.w)
0000FA94 6100 FA24                  		bsr.w	DisplaySprite
0000FAB6 4E75                       		rts	
0000FAB8                            ; ===========================================================================
0000FAB8 0000                       Spring_Index:	dc.w Spring_Main-Spring_Index
0000FABA 0000                       		dc.w Spring_Up-Spring_Index
0000FABC 0000                       		dc.w Spring_AniUp-Spring_Index
0000FABE 0000                       		dc.w Spring_ResetUp-Spring_Index
0000FAC0 0000                       		dc.w Spring_LR-Spring_Index
0000FAC2 0000                       		dc.w Spring_AniLR-Spring_Index
0000FAC4 0000                       		dc.w Spring_ResetLR-Spring_Index
0000FAC6 0000                       		dc.w Spring_Dwn-Spring_Index
0000FAC8 0000                       		dc.w Spring_AniDwn-Spring_Index
0000FACA 0000                       		dc.w Spring_ResetDwn-Spring_Index
0000FACC                            
0000FACC =00000030                  spring_pow:	equ $30			; power of current spring
0000FACC                            
0000FACC F000                       Spring_Powers:	dc.w -$1000		; power	of red spring
0000FACE F600                       		dc.w -$A00		; power	of yellow spring
0000FAD0                            ; ===========================================================================
0000FAD0                            
0000FAD0                            Spring_Main:	; Routine 0
0000FAD0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FAD4 217C 0000 0000 0004        		move.l	#Map_Spring,obMap(a0)
0000FADC 317C 0523 0002             		move.w	#$523,obGfx(a0)
0000FAE2 0028 0004 0001             		ori.b	#4,obRender(a0)
0000FAE8 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000FAEE 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FAF4 1028 0028                  		move.b	obSubtype(a0),d0
0000FAF8 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000FAFC 6700                       		beq.s	Spring_NotLR	; if not, branch
0000FAFE                            
0000FAFE 117C 0008 0024             		move.b	#8,obRoutine(a0) ; use "Spring_LR" routine
0000FB04 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FB0A 117C 0003 001A             		move.b	#3,obFrame(a0)
0000FB10 317C 0533 0002             		move.w	#$533,obGfx(a0)
0000FB16 117C 0008 0014             		move.b	#8,obActWid(a0)
0000FB1C                            
0000FB1C                            	Spring_NotLR:
0000FB1C 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000FB20 6700                       		beq.s	Spring_NotDwn	; if not, branch
0000FB22                            
0000FB22 117C 000E 0024             		move.b	#$E,obRoutine(a0) ; use "Spring_Dwn" routine
0000FB28 08E8 0001 0022             		bset	#1,obStatus(a0)
0000FB2E                            
0000FB2E                            	Spring_NotDwn:
0000FB2E 0800 0001                  		btst	#1,d0
0000FB32 6700                       		beq.s	loc_DB72
0000FB34 08E8 0005 0002             		bset	#5,obGfx(a0)
0000FB3A                            
0000FB3A                            loc_DB72:
0000FB3A 0240 000F                  		andi.w	#$F,d0
0000FB3E 317B 008C 0030             		move.w	Spring_Powers(pc,d0.w),spring_pow(a0)
0000FB44 4E75                       		rts	
0000FB46                            ; ===========================================================================
0000FB46                            
0000FB46                            Spring_Up:	; Routine 2
0000FB46 323C 001B                  		move.w	#$1B,d1
0000FB4A 343C 0008                  		move.w	#8,d2
0000FB4E 363C 0010                  		move.w	#$10,d3
0000FB52 3828 0008                  		move.w	obX(a0),d4
0000FB56 6100 0000                  		bsr.w	SolidObject
0000FB5A 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic on top of the spring?
0000FB5E 6600                       		bne.s	Spring_BounceUp	; if yes, branch
0000FB60 4E75                       		rts	
0000FB62                            ; ===========================================================================
0000FB62                            
0000FB62                            Spring_BounceUp:
0000FB62 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FB66 5069 000C                  		addq.w	#8,obY(a1)
0000FB6A 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1) ; move Sonic upwards
0000FB70 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FB76 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FB7C 137C 0000 001C             		move.b	#id_Spring,obAnim(a1) ; use "bouncing" animation
0000FB82 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FB88 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FB8E 4228 0025                  		clr.b	obSolid(a0)
0000FB9C                            
0000FB9C                            Spring_AniUp:	; Routine 4
0000FB9C 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FBA2 6000 C9D0                  		bra.w	AnimateSprite
0000FBA6                            ; ===========================================================================
0000FBA6                            
0000FBA6                            Spring_ResetUp:	; Routine 6
0000FBA6 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FBAC 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Up" routine
0000FBB0 4E75                       		rts	
0000FBB2                            ; ===========================================================================
0000FBB2                            
0000FBB2                            Spring_LR:	; Routine 8
0000FBB2 323C 0013                  		move.w	#$13,d1
0000FBB6 343C 000E                  		move.w	#$E,d2
0000FBBA 363C 000F                  		move.w	#$F,d3
0000FBBE 3828 0008                  		move.w	obX(a0),d4
0000FBC2 6100 0000                  		bsr.w	SolidObject
0000FBC6 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FBCC 6600                       		bne.s	loc_DC0C
0000FBCE 117C 0008 0024             		move.b	#8,obRoutine(a0)
0000FBD4                            
0000FBD4                            loc_DC0C:
0000FBD4 0828 0005 0022             		btst	#5,obStatus(a0)
0000FBDA 6600                       		bne.s	Spring_BounceLR
0000FBDC 4E75                       		rts	
0000FBDE                            ; ===========================================================================
0000FBDE                            
0000FBDE                            Spring_BounceLR:
0000FBDE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FBE2 3368 0030 0010             		move.w	spring_pow(a0),obVelX(a1) ; move Sonic to the left
0000FBE8 5069 0008                  		addq.w	#8,obX(a1)
0000FBEC 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
0000FBF2 6600                       		bne.s	Spring_Flipped	; if yes, branch
0000FBF4 0469 0010 0008             		subi.w	#$10,obX(a1)
0000FBFA 4469 0010                  		neg.w	obVelX(a1)	; move Sonic to	the right
0000FBFE                            
0000FBFE                            	Spring_Flipped:
0000FBFE 337C 000F 003E             		move.w	#$F,$3E(a1)
0000FC04 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000FC0A 0869 0000 0022             		bchg	#0,obStatus(a1)
0000FC10 0829 0002 0022             		btst	#2,obStatus(a1)
0000FC16 6600                       		bne.s	loc_DC56
0000FC18 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
0000FC1E                            
0000FC1E                            loc_DC56:
0000FC1E 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000FC24 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000FC34                            
0000FC34                            Spring_AniLR:	; Routine $A
0000FC34 4278 C904                  		clr.w ($FFFFC904).w	; clear screen delay counter
0000FC38 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FC3E 6000 C934                  		bra.w	AnimateSprite
0000FC42                            ; ===========================================================================
0000FC42                            
0000FC42                            Spring_ResetLR:	; Routine $C
0000FC42 117C 0002 001D             		move.b	#2,obNextAni(a0) ; reset animation
0000FC48 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_LR" routine
0000FC4C 4E75                       		rts	
0000FC4E                            ; ===========================================================================
0000FC4E                            
0000FC4E                            Spring_Dwn:	; Routine $E
0000FC4E 323C 001B                  		move.w	#$1B,d1
0000FC52 343C 0008                  		move.w	#8,d2
0000FC56 363C 0010                  		move.w	#$10,d3
0000FC5A 3828 0008                  		move.w	obX(a0),d4
0000FC5E 6100 0000                  		bsr.w	SolidObject
0000FC62 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FC68 6600                       		bne.s	loc_DCA4
0000FC6A 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000FC70                            
0000FC70                            loc_DCA4:
0000FC70 4A28 0025                  		tst.b	obSolid(a0)
0000FC74 6600                       		bne.s	locret_DCAE
0000FC76 4A44                       		tst.w	d4
0000FC78 6B00                       		bmi.s	Spring_BounceDwn
0000FC7A                            
0000FC7A                            locret_DCAE:
0000FC7A 4E75                       		rts	
0000FC7C                            ; ===========================================================================
0000FC7C                            
0000FC7C                            Spring_BounceDwn:
0000FC7C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FC80 5169 000C                  		subq.w	#8,obY(a1)
0000FC84 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1)
0000FC8A 4469 0012                  		neg.w	obVelY(a1)	; move Sonic downwards
0000FC8E 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FC94 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FC9A 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FCA0 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FCA6 4228 0025                  		clr.b	obSolid(a0)
0000FCB4                            
0000FCB4                            Spring_AniDwn:	; Routine $10
0000FCB4 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FCBA 6000 C8B8                  		bra.w	AnimateSprite
0000FCBE                            ; ===========================================================================
0000FCBE                            
0000FCBE                            Spring_ResetDwn:
0000FCBE                            		; Routine $12
0000FCBE 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FCC4 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Dwn" routine
0000FCC8 4E75                       		rts	
0000FCC8 4E75                       		rts	
0000FCCA                            		include	"_anim\Springs.asm"
0000FCCA                            ; ---------------------------------------------------------------------------
0000FCCA                            ; Animation script - springs
0000FCCA                            ; ---------------------------------------------------------------------------
0000FCCA 0000                       Ani_Spring:	dc.w byte_DD02-Ani_Spring
0000FCCC 0000                       		dc.w byte_DD0E-Ani_Spring
0000FCCE 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, afRoutine
0000FCDA 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, afRoutine
0000FCE6                            		even
0000FCE6                            		even
0000FCE6                            Map_Spring:	include	"_maps\Springs.asm"
0000FCE6                            ; ---------------------------------------------------------------------------
0000FCE6                            ; Sprite mappings - springs
0000FCE6                            ; ---------------------------------------------------------------------------
0000FCE6                            Map_Spring_internal:
0000FCE6 0000                       		dc.w M_Spg_Up-Map_Spring_internal
0000FCE8 0000                       		dc.w M_Spg_UpFlat-Map_Spring_internal
0000FCEA 0000                       		dc.w M_Spg_UpExt-Map_Spring_internal
0000FCEC 0000                       		dc.w M_Spg_Left-Map_Spring_internal
0000FCEE 0000                       		dc.w M_Spg_LeftFlat-Map_Spring_internal
0000FCF0 0000                       		dc.w M_Spg_LeftExt-Map_Spring_internal
0000FCF2 02                         M_Spg_Up:	dc.b 2			; facing up
0000FCF3 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000FCF8 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000FCFD 01                         M_Spg_UpFlat:	dc.b 1			; facing up, flattened
0000FCFE 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000FD03 03                         M_Spg_UpExt:	dc.b 3			; facing up, extended
0000FD04 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000FD09 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FD0E 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000FD13 01                         M_Spg_Left:	dc.b 1			; facing left
0000FD14 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000FD19 01                         M_Spg_LeftFlat:	dc.b 1			; facing left, flattened
0000FD1A F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000FD1F 04                         M_Spg_LeftExt:	dc.b 4			; facing left, extended
0000FD20 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000FD25 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000FD2A F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000FD2F 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000FD34                            		even
0000FD34                            		even
0000FD34                            
0000FD34                            		include	"_incObj\42 Newtron.asm"
0000FD34                            ; ---------------------------------------------------------------------------
0000FD34                            ; Object 42 - Newtron enemy (GHZ)
0000FD34                            ; ---------------------------------------------------------------------------
0000FD34                            
0000FD34                            Newtron:
0000FD34 7000                       		moveq	#0,d0
0000FD36 1028 0024                  		move.b	obRoutine(a0),d0
0000FD3A 323B 0000                  		move.w	Newt_Index(pc,d0.w),d1
0000FD3E 4EFB 1000                  		jmp	Newt_Index(pc,d1.w)
0000FD42                            ; ===========================================================================
0000FD42 0000                       Newt_Index:	dc.w Newt_Main-Newt_Index
0000FD44 0000                       		dc.w Newt_Action-Newt_Index
0000FD46 0000                       		dc.w Newt_Delete-Newt_Index
0000FD48                            ; ===========================================================================
0000FD48                            
0000FD48                            Newt_Main:	; Routine 0
0000FD48 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FD4C 217C 0000 0000 0004        		move.l	#Map_Newt,obMap(a0)
0000FD54 317C 049B 0002             		move.w	#$49B,obGfx(a0)
0000FD5A 117C 0004 0001             		move.b	#4,obRender(a0)
0000FD60 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FD66 117C 0014 0014             		move.b	#$14,obActWid(a0)
0000FD6C 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000FD72 117C 0008 0017             		move.b	#8,obWidth(a0)
0000FD78                            
0000FD78                            Newt_Action:	; Routine 2
0000FD78 7000                       		moveq	#0,d0
0000FD7A 1028 0025                  		move.b	ob2ndRout(a0),d0
0000FD7E 323B 0000                  		move.w	@index(pc,d0.w),d1
0000FD82 4EBB 1000                  		jsr	@index(pc,d1.w)
0000FD86 43F9 0000 0000             		lea	(Ani_Newt).l,a1
0000FD8C 6100 C7E6                  		bsr.w	AnimateSprite
0000FD90 6000 0000                  		bra.w	RememberState
0000FD94                            ; ===========================================================================
0000FD94 0000                       @index:		dc.w @chkdistance-@index
0000FD96 0000                       		dc.w @type00-@index
0000FD98 0000                       		dc.w @matchfloor-@index
0000FD9A 0000                       		dc.w @speed-@index
0000FD9C 0000                       		dc.w @type01-@index
0000FD9E                            ; ===========================================================================
0000FD9E                            
0000FD9E                            @chkdistance:
0000FD9E 08E8 0000 0022             		bset	#0,obStatus(a0)
0000FDA4 3038 D008                  		move.w	(v_player+obX).w,d0
0000FDA8 9068 0008                  		sub.w	obX(a0),d0
0000FDAC 6400                       		bcc.s	@sonicisright
0000FDAE 4440                       		neg.w	d0
0000FDB0 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000FDB6                            
0000FDB6                            	@sonicisright:
0000FDB6 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000FDBA 6400                       		bcc.s	@outofrange	; if not, branch
0000FDBC 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @type00 next
0000FDC0 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FDC6 4A28 0028                  		tst.b	obSubtype(a0)	; check	object type
0000FDCA 6700                       		beq.s	@istype00	; if type is 00, branch
0000FDCC                            
0000FDCC 317C 249B 0002             		move.w	#$249B,obGfx(a0)
0000FDD2 117C 0008 0025             		move.b	#8,ob2ndRout(a0) ; goto @type01 next
0000FDD8 117C 0004 001C             		move.b	#4,obAnim(a0)	; use different	animation
0000FDDE                            
0000FDDE                            	@outofrange:
0000FDDE                            	@istype00:
0000FDDE 4E75                       		rts	
0000FDE0                            ; ===========================================================================
0000FDE0                            
0000FDE0                            @type00:
0000FDE0 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has "appearing" animation finished?
0000FDE6 6400                       		bcc.s	@fall		; is yes, branch
0000FDE8 08E8 0000 0022             		bset	#0,obStatus(a0)
0000FDEE 3038 D008                  		move.w	(v_player+obX).w,d0
0000FDF2 9068 0008                  		sub.w	obX(a0),d0
0000FDF6 6400                       		bcc.s	@sonicisright2
0000FDF8 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000FDFE                            
0000FDFE                            	@sonicisright2:
0000FDFE 4E75                       		rts	
0000FE00                            ; ===========================================================================
0000FE00                            
0000FE00                            	@fall:
0000FE00 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
0000FE06 6600                       		bne.s	@loc_DE42
0000FE08 117C 000C 0020             		move.b	#$C,obColType(a0)
0000FE0E                            
0000FE0E                            	@loc_DE42:
0000FE0E 6100 F65E                  		bsr.w	ObjectFall
0000FE12 4EB9 0000 0000             		jsr		ObjFloorDist
0000FE18 4A41                       		tst.w	d1		; has newtron hit the floor?
0000FE1A 6A00                       		bpl.s	@keepfalling	; if not, branch
0000FE1C                            
0000FE1C D368 000C                  		add.w	d1,obY(a0)
0000FE20 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop newtron falling
0000FE26 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000FE2A 117C 0002 001C             		move.b	#2,obAnim(a0)
0000FE30 0828 0005 0002             		btst	#5,obGfx(a0)
0000FE36 6700                       		beq.s	@pppppppp
0000FE38 5228 001C                  		addq.b	#1,obAnim(a0)
0000FE3C                            
0000FE3C                            	@pppppppp:
0000FE3C 117C 000D 0020             		move.b	#$D,obColType(a0)
0000FE42 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move newtron horizontally
0000FE48 0828 0000 0022             		btst	#0,obStatus(a0)
0000FE4E 6600                       		bne.s	@keepfalling
0000FE50 4468 0010                  		neg.w	obVelX(a0)
0000FE54                            
0000FE54                            	@keepfalling:
0000FE54 4E75                       		rts	
0000FE56                            ; ===========================================================================
0000FE56                            
0000FE56                            @matchfloor:
0000FE56 6100 F64E                  		bsr.w	SpeedToPos
0000FE5A 4EB9 0000 0000             		jsr		ObjFloorDist
0000FE60 0C41 FFF8                  		cmpi.w	#-8,d1
0000FE64 6D00                       		blt.s	@nextroutine
0000FE66 0C41 000C                  		cmpi.w	#$C,d1
0000FE6A 6C00                       		bge.s	@nextroutine
0000FE6C D368 000C                  		add.w	d1,obY(a0)	; match	newtron's position with floor
0000FE70 4E75                       		rts	
0000FE72                            ; ===========================================================================
0000FE72                            
0000FE72                            	@nextroutine:
0000FE72 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @speed next
0000FE76 4E75                       		rts	
0000FE78                            ; ===========================================================================
0000FE78                            
0000FE78                            @speed:
0000FE78 6100 F62C                  		bsr.w	SpeedToPos
0000FE7C 4E75                       		rts	
0000FE7E                            ; ===========================================================================
0000FE7E                            
0000FE7E                            @type01:
0000FE7E 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
0000FE84 6600                       		bne.s	@firemissile
0000FE86 117C 000C 0020             		move.b	#$C,obColType(a0)
0000FE8C                            
0000FE8C                            	@firemissile:
0000FE8C 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000FE92 6600                       		bne.s	@fail
0000FE94 4A28 0032                  		tst.b	$32(a0)
0000FE98 6600                       		bne.s	@fail
0000FE9A 117C 0001 0032             		move.b	#1,$32(a0)
0000FEA0 6100 FBB2                  		bsr.w	FindFreeObj
0000FEA4 6600                       		bne.s	@fail
0000FEA6 12BC 0023                  		move.b	#id_Missile,0(a1) ; load missile object
0000FEAA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000FEB0 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000FEB6 5169 000C                  		subq.w	#8,obY(a1)
0000FEBA 337C 0200 0010             		move.w	#$200,obVelX(a1)
0000FEC0 303C 0014                  		move.w	#$14,d0
0000FEC4 0828 0000 0022             		btst	#0,obStatus(a0)
0000FECA 6600                       		bne.s	@noflip
0000FECC 4440                       		neg.w	d0
0000FECE 4469 0010                  		neg.w	obVelX(a1)
0000FED2                            
0000FED2                            	@noflip:
0000FED2 D169 0008                  		add.w	d0,obX(a1)
0000FED6 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000FEDC 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000FEE2                            
0000FEE2                            	@fail:
0000FEE2 4E75                       		rts	
0000FEE4                            ; ===========================================================================
0000FEE4                            
0000FEE4                            Newt_Delete:	; Routine 4
0000FEE4 6000 F614                  		bra.w	DeleteObject
0000FEE4 6000 F614                  		bra.w	DeleteObject
0000FEE8                            		include	"_anim\Newtron.asm"
0000FEE8                            ; ---------------------------------------------------------------------------
0000FEE8                            ; Animation script - Newtron enemy
0000FEE8                            ; ---------------------------------------------------------------------------
0000FEE8 0000                       Ani_Newt:	dc.w A_Newt_Blank-Ani_Newt
0000FEEA 0000                       		dc.w A_Newt_Drop-Ani_Newt
0000FEEC 0000                       		dc.w A_Newt_Fly1-Ani_Newt
0000FEEE 0000                       		dc.w A_Newt_Fly2-Ani_Newt
0000FEF0 0000                       		dc.w A_Newt_Fires-Ani_Newt
0000FEF2 0F0A FF                    A_Newt_Blank:	dc.b $F, $A, afEnd
0000FEF6 00                         		even
0000FEF6 1300 0103 0405 FE01        A_Newt_Drop:	dc.b $13, 0, 1,	3, 4, 5, afBack, 1
0000FEFE 0206 07FF                  A_Newt_Fly1:	dc.b 2,	6, 7, afEnd
0000FF02 0208 09FF                  A_Newt_Fly2:	dc.b 2,	8, 9, afEnd
0000FF06 1300 0101 0201 0100 FC     A_Newt_Fires:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, afRoutine
0000FF10 00                         		even
0000FF10 00                         		even
0000FF10                            Map_Newt:	include	"_maps\Newtron.asm"
0000FF10                            ; ---------------------------------------------------------------------------
0000FF10                            ; Sprite mappings - Newtron enemy (GHZ)
0000FF10                            ; ---------------------------------------------------------------------------
0000FF10                            Map_Newt_internal:
0000FF10 0000                       		dc.w M_Newt_Trans-Map_Newt_internal
0000FF12 0000                       		dc.w M_Newt_Norm-Map_Newt_internal
0000FF14 0000                       		dc.w M_Newt_Fires-Map_Newt_internal
0000FF16 0000                       		dc.w M_Newt_Drop1-Map_Newt_internal
0000FF18 0000                       		dc.w M_Newt_Drop2-Map_Newt_internal
0000FF1A 0000                       		dc.w M_Newt_Drop3-Map_Newt_internal
0000FF1C 0000                       		dc.w M_Newt_Fly1a-Map_Newt_internal
0000FF1E 0000                       		dc.w M_Newt_Fly1b-Map_Newt_internal
0000FF20 0000                       		dc.w M_Newt_Fly2a-Map_Newt_internal
0000FF22 0000                       		dc.w M_Newt_Fly2b-Map_Newt_internal
0000FF24 0000                       		dc.w M_Newt_Blank-Map_Newt_internal
0000FF26 03                         M_Newt_Trans:	dc.b 3
0000FF27 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC	; partially visible
0000FF2C F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000FF31 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000FF36 03                         M_Newt_Norm:	dc.b 3
0000FF37 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC ; visible
0000FF3C EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000FF41 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000FF46 03                         M_Newt_Fires:	dc.b 3
0000FF47 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC ; open mouth, firing
0000FF4C EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000FF51 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000FF56 04                         M_Newt_Drop1:	dc.b 4
0000FF57 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC ; dropping
0000FF5C EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000FF61 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000FF66 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000FF6B 03                         M_Newt_Drop2:	dc.b 3
0000FF6C F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000FF71 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000FF76 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000FF7B 02                         M_Newt_Drop3:	dc.b 2
0000FF7C F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FF81 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FF86 03                         M_Newt_Fly1a:	dc.b 3
0000FF87 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC ; flying
0000FF8C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FF91 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000FF96 03                         M_Newt_Fly1b:	dc.b 3
0000FF97 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FF9C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FFA1 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000FFA6 03                         M_Newt_Fly2a:	dc.b 3
0000FFA7 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FFAC F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FFB1 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000FFB6 03                         M_Newt_Fly2b:	dc.b 3
0000FFB7 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FFBC F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FFC1 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000FFC6 00                         M_Newt_Blank:	dc.b 0
0000FFC8 00                         		even
0000FFC8 00                         		even
0000FFC8                            		include	"_incObj\43 Roller.asm"
0000FFC8                            ; ---------------------------------------------------------------------------
0000FFC8                            ; Object 43 - Roller enemy (SYZ)
0000FFC8                            ; ---------------------------------------------------------------------------
0000FFC8                            
0000FFC8                            Roller:
0000FFC8 7000                       		moveq	#0,d0
0000FFCA 1028 0024                  		move.b	obRoutine(a0),d0
0000FFCE 323B 0000                  		move.w	Roll_Index(pc,d0.w),d1
0000FFD2 4EFB 1000                  		jmp	Roll_Index(pc,d1.w)
0000FFD6                            ; ===========================================================================
0000FFD6 0000                       Roll_Index:	dc.w Roll_Main-Roll_Index
0000FFD8 0000                       		dc.w Roll_Action-Roll_Index
0000FFDA                            ; ===========================================================================
0000FFDA                            
0000FFDA                            Roll_Main:	; Routine 0
0000FFDA 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000FFE0 117C 0008 0017             		move.b	#8,obWidth(a0)
0000FFE6 6100 F486                  		bsr.w	ObjectFall
0000FFEA 6100 0000                  		bsr.w	ObjFloorDist
0000FFEE 4A41                       		tst.w	d1
0000FFF0 6A00                       		bpl.s	locret_E052
0000FFF2 D368 000C                  		add.w	d1,obY(a0)	; match	roller's position with the floor
0000FFF6 317C 0000 0012             		move.w	#0,obVelY(a0)
0000FFFC 5428 0024                  		addq.b	#2,obRoutine(a0)
00010000 217C 0000 0000 0004        		move.l	#Map_Roll,obMap(a0)
00010008 317C 04B8 0002             		move.w	#$4B8,obGfx(a0)
0001000E 117C 0004 0001             		move.b	#4,obRender(a0)
00010014 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001001A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010020                            
00010020                            	locret_E052:
00010020 4E75                       		rts	
00010022                            ; ===========================================================================
00010022                            
00010022                            Roll_Action:	; Routine 2
00010022 7000                       		moveq	#0,d0
00010024 1028 0025                  		move.b	ob2ndRout(a0),d0
00010028 323B 0000                  		move.w	Roll_Index2(pc,d0.w),d1
0001002C 4EBB 1000                  		jsr	Roll_Index2(pc,d1.w)
00010030 43F9 0000 0000             		lea	(Ani_Roll).l,a1
00010036 6100 C53C                  		bsr.w	AnimateSprite
0001003A 3028 0008                  		move.w	obX(a0),d0
0001003E 0240 FF80                  		andi.w	#$FF80,d0
00010042 3238 F700                  		move.w	(v_screenposx).w,d1
00010046 0441 0080                  		subi.w	#$80,d1
0001004A 0241 FF80                  		andi.w	#$FF80,d1
0001004E 9041                       		sub.w	d1,d0
00010050 0C40 0280                  		cmpi.w	#$280,d0
00010054 6E00 0000                  		bgt.w	Roll_ChkGone
00010058 6000 F460                  		bra.w	DisplaySprite
0001005C                            ; ===========================================================================
0001005C                            
0001005C                            Roll_ChkGone:
0001005C 45F8 FC00                  		lea	(v_objstate).w,a2
00010060 7000                       		moveq	#0,d0
00010062 1028 0023                  		move.b	obRespawnNo(a0),d0
00010066 6700                       		beq.s	Roll_Delete
00010068 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001006E                            
0001006E                            Roll_Delete:
0001006E 6000 F48A                  		bra.w	DeleteObject
00010072                            ; ===========================================================================
00010072 0000                       Roll_Index2:	dc.w Roll_RollChk-Roll_Index2
00010074 0000                       		dc.w Roll_RollNoChk-Roll_Index2
00010076 0000                       		dc.w Roll_ChkJump-Roll_Index2
00010078 0000                       		dc.w Roll_MatchFloor-Roll_Index2
0001007A                            ; ===========================================================================
0001007A                            
0001007A                            Roll_RollChk:
0001007A 3038 D008                  		move.w	(v_player+obX).w,d0
0001007E 0440 0100                  		subi.w	#$100,d0
00010082 6500                       		bcs.s	loc_E0D2
00010084 9068 0008                  		sub.w	obX(a0),d0	; check	distance between Roller	and Sonic
00010088 6500                       		bcs.s	loc_E0D2
0001008A 5828 0025                  		addq.b	#4,ob2ndRout(a0)
0001008E 117C 0002 001C             		move.b	#2,obAnim(a0)
00010094 317C 0700 0010             		move.w	#$700,obVelX(a0) ; move Roller horizontally
0001009A 117C 008E 0020             		move.b	#$8E,obColType(a0) ; make Roller invincible
000100A0                            
000100A0                            loc_E0D2:
000100A0 588F                       		addq.l	#4,sp
000100A2 4E75                       		rts	
000100A4                            ; ===========================================================================
000100A4                            
000100A4                            Roll_RollNoChk:
000100A4 0C28 0002 001C             		cmpi.b	#2,obAnim(a0)
000100AA 6700                       		beq.s	loc_E0F8
000100AC 5368 0030                  		subq.w	#1,$30(a0)
000100B0 6A00                       		bpl.s	locret_E0F6
000100B2 117C 0001 001C             		move.b	#1,obAnim(a0)
000100B8 317C 0700 0010             		move.w	#$700,obVelX(a0)
000100BE 117C 008E 0020             		move.b	#$8E,obColType(a0)
000100C4                            
000100C4                            locret_E0F6:
000100C4 4E75                       		rts	
000100C6                            ; ===========================================================================
000100C6                            
000100C6                            loc_E0F8:
000100C6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000100CA 4E75                       		rts	
000100CC                            ; ===========================================================================
000100CC                            
000100CC                            Roll_ChkJump:
000100CC 6100 0000                  		bsr.w	Roll_Stop
000100D0 6100 F3D4                  		bsr.w	SpeedToPos
000100D4 6100 0000                  		bsr.w	ObjFloorDist
000100D8 0C41 FFF8                  		cmpi.w	#-8,d1
000100DC 6D00                       		blt.s	Roll_Jump
000100DE 0C41 000C                  		cmpi.w	#$C,d1
000100E2 6C00                       		bge.s	Roll_Jump
000100E4 D368 000C                  		add.w	d1,obY(a0)
000100E8 4E75                       		rts	
000100EA                            ; ===========================================================================
000100EA                            
000100EA                            Roll_Jump:
000100EA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000100EE 08E8 0000 0032             		bset	#0,$32(a0)
000100F4 6700                       		beq.s	locret_E12E
000100F6 317C FA00 0012             		move.w	#-$600,obVelY(a0)	; move Roller vertically
000100FC                            
000100FC                            locret_E12E:
000100FC 4E75                       		rts	
000100FE                            ; ===========================================================================
000100FE                            
000100FE                            Roll_MatchFloor:
000100FE 6100 F36E                  		bsr.w	ObjectFall
00010102 4A68 0012                  		tst.w	obVelY(a0)
00010106 6B00                       		bmi.s	locret_E150
00010108 6100 0000                  		bsr.w	ObjFloorDist
0001010C 4A41                       		tst.w	d1
0001010E 6A00                       		bpl.s	locret_E150
00010110 D368 000C                  		add.w	d1,obY(a0)	; match	Roller's position with the floor
00010114 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00010118 317C 0000 0012             		move.w	#0,obVelY(a0)
0001011E                            
0001011E                            locret_E150:
0001011E 4E75                       		rts	
00010120                            
00010120                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010120                            
00010120                            
00010120                            Roll_Stop:
00010120 4A28 0032                  		tst.b	$32(a0)
00010124 6B00                       		bmi.s	locret_E188
00010126 3038 D008                  		move.w	(v_player+obX).w,d0
0001012A 0440 0030                  		subi.w	#$30,d0
0001012E 9068 0008                  		sub.w	obX(a0),d0
00010132 6400                       		bcc.s	locret_E188
00010134 117C 0000 001C             		move.b	#0,obAnim(a0)
0001013A 117C 000E 0020             		move.b	#$E,obColType(a0)
00010140 4268 0010                  		clr.w	obVelX(a0)
00010144 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0001014A 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
00010150 08E8 0007 0032             		bset	#7,$32(a0)
00010156                            
00010156                            locret_E188:
00010156 4E75                       		rts	
00010158                            ; End of function Roll_Stop
00010158                            ; End of function Roll_Stop
00010158                            		include	"_anim\Roller.asm"
00010158                            ; ---------------------------------------------------------------------------
00010158                            ; Animation script - Roller enemy
00010158                            ; ---------------------------------------------------------------------------
00010158 0000                       Ani_Roll:	dc.w A_Roll_Unfold-Ani_Roll
0001015A 0000                       		dc.w A_Roll_Fold-Ani_Roll
0001015C 0000                       		dc.w A_Roll_Roll-Ani_Roll
0001015E 0F02 0100 FE01             A_Roll_Unfold:	dc.b $F, 2, 1, 0, afBack, 1
00010164 0F01 02FD 02               A_Roll_Fold:	dc.b $F, 1, 2, afChange, 2
0001016A 00                         		even
0001016A 0303 0402 FF               A_Roll_Roll:	dc.b 3,	3, 4, 2, afEnd
00010170 00                         		even
00010170 00                         		even
00010170                            Map_Roll:	include	"_maps\Roller.asm"
00010170                            ; --------------------------------------------------------------------------------
00010170                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010170                            ; --------------------------------------------------------------------------------
00010170                            
00010170                            SME_q3BmU:	
00010170 0000 0000                  		dc.w SME_q3BmU_A-SME_q3BmU, SME_q3BmU_15-SME_q3BmU	
00010174 0000 0000                  		dc.w SME_q3BmU_20-SME_q3BmU, SME_q3BmU_26-SME_q3BmU	
00010178 0000                       		dc.w SME_q3BmU_2C-SME_q3BmU	
0001017A 02                         SME_q3BmU_A:	dc.b 2	
0001017B DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0	
00010180 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0	
00010185 02                         SME_q3BmU_15:	dc.b 2	
00010186 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
0001018B FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0	
00010190 01                         SME_q3BmU_20:	dc.b 1	
00010191 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0	
00010196 01                         SME_q3BmU_26:	dc.b 1	
00010197 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0	
0001019C 01                         SME_q3BmU_2C:	dc.b 1	
0001019D F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0	
000101A2                            		even
000101A2                            		even
000101A2                            
000101A2                            		include	"_incObj\44 GHZ Edge Walls.asm"
000101A2                            ; ---------------------------------------------------------------------------
000101A2                            ; Object 44 - edge walls (GHZ)
000101A2                            ; ---------------------------------------------------------------------------
000101A2                            
000101A2                            EdgeWalls:
000101A2 7000                       		moveq	#0,d0
000101A4 1028 0024                  		move.b	obRoutine(a0),d0
000101A8 323B 0000                  		move.w	Edge_Index(pc,d0.w),d1
000101AC 4EFB 1000                  		jmp	Edge_Index(pc,d1.w)
000101B0                            ; ===========================================================================
000101B0 0000                       Edge_Index:	dc.w Edge_Main-Edge_Index
000101B2 0000                       		dc.w Edge_Solid-Edge_Index
000101B4 0000                       		dc.w Edge_Display-Edge_Index
000101B6                            ; ===========================================================================
000101B6                            
000101B6                            Edge_Main:	; Routine 0
000101B6 5428 0024                  		addq.b	#2,obRoutine(a0)
000101BA 217C 0000 0000 0004        		move.l	#Map_Edge,obMap(a0)
000101C2 317C 434C 0002             		move.w	#$434C,obGfx(a0)
000101C8 0028 0004 0001             		ori.b	#4,obRender(a0)
000101CE 117C 0008 0014             		move.b	#8,obActWid(a0)
000101D4 317C 0300 0018             		move.w	#$300,obPriority(a0)
000101DA 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0) ; copy object type number to frame number
000101E0 08A8 0004 001A             		bclr	#4,obFrame(a0)	; clear	4th bit	(deduct	$10)
000101E6 6700                       		beq.s	Edge_Solid	; make object solid if 4th bit = 0
000101E8 5428 0024                  		addq.b	#2,obRoutine(a0)
000101EC 6000                       		bra.s	Edge_Display	; don't make it solid if 4th bit = 1
000101EE                            ; ===========================================================================
000101EE                            
000101EE                            Edge_Solid:	; Routine 2
000101EE 323C 0013                  		move.w	#$13,d1
000101F2 343C 0028                  		move.w	#$28,d2
000101F6 6100 9FE2                  		bsr.w	Obj44_SolidWall
000101FA                            
000101FA                            Edge_Display:	; Routine 4
000101FA 6100 F2BE                  		bsr.w	DisplaySprite
0001021C 4E75                       		rts	
0001021C 4E75                       		rts	
0001021E                            Map_Edge:	include	"_maps\GHZ Edge Walls.asm"
0001021E                            ; ---------------------------------------------------------------------------
0001021E                            ; Sprite mappings - walls (GHZ)
0001021E                            ; ---------------------------------------------------------------------------
0001021E                            Map_Edge_internal:
0001021E 0000                       		dc.w M_Edge_Shadow-Map_Edge_internal
00010220 0000                       		dc.w M_Edge_Light-Map_Edge_internal
00010222 0000                       		dc.w M_Edge_Dark-Map_Edge_internal
00010224 04                         M_Edge_Shadow:	dc.b 4
00010225 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8	; light with shadow
0001022A F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0001022F 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
00010234 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
00010239 04                         M_Edge_Light:	dc.b 4
0001023A E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8	; light with no shadow
0001023F F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
00010244 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
00010249 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0001024E 04                         M_Edge_Dark:	dc.b 4
0001024F E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8	; all shadow
00010254 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
00010259 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0001025E 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
00010264 00                         		even
00010264 00                         		even
00010264                            
00010264                            		include	"_incObj\13 Lava Ball Maker.asm"
00010264                            ; ---------------------------------------------------------------------------
00010264                            ; Object 13 - lava ball	maker (MZ, SLZ)
00010264                            ; ---------------------------------------------------------------------------
00010264                            
00010264                            LavaMaker:
00010264 7000                       		moveq	#0,d0
00010266 1028 0024                  		move.b	obRoutine(a0),d0
0001026A 323B 0000                  		move.w	LavaM_Index(pc,d0.w),d1
0001026E 4EBB 1000                  		jsr	LavaM_Index(pc,d1.w)
00010272 6000 0000                  		bra.w	LBall_ChkDel
00010276                            ; ===========================================================================
00010276 0000                       LavaM_Index:	dc.w LavaM_Main-LavaM_Index
00010278 0000                       		dc.w LavaM_MakeLava-LavaM_Index
0001027A                            ; ---------------------------------------------------------------------------
0001027A                            ;
0001027A                            ; Lava ball production rates
0001027A                            ;
0001027A 1E3C 5A78 96B4             LavaM_Rates:	dc.b 30, 60, 90, 120, 150, 180
00010280                            ; ===========================================================================
00010280                            
00010280                            LavaM_Main:	; Routine 0
00010280 5428 0024                  		addq.b	#2,obRoutine(a0)
00010284 1028 0028                  		move.b	obSubtype(a0),d0
00010288 E848                       		lsr.w	#4,d0
0001028A 0240 000F                  		andi.w	#$F,d0
0001028E 117B 00EA 001F             		move.b	LavaM_Rates(pc,d0.w),obDelayAni(a0)
00010294 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; set time delay for lava balls
0001029A 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
000102A0                            
000102A0                            LavaM_MakeLava:	; Routine 2
000102A0 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from time delay
000102A4 6600                       		bne.s	LavaM_Wait	; if time still	remains, branch
000102A6 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset time delay
000102AC 6100 F59A                  		bsr.w	ChkObjectVisible
000102B0 6600                       		bne.s	LavaM_Wait
000102B2 6100 F7A0                  		bsr.w	FindFreeObj
000102B6 6600                       		bne.s	LavaM_Wait
000102B8 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
000102BC 3368 0008 0008             		move.w	obX(a0),obX(a1)
000102C2 3368 000C 000C             		move.w	obY(a0),obY(a1)
000102C8 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
000102CE                            
000102CE                            	LavaM_Wait:
000102CE 4E75                       		rts	
000102CE 4E75                       		rts	
000102D0                            		include	"_incObj\14 Lava Ball.asm"
000102D0                            ; ---------------------------------------------------------------------------
000102D0                            ; Object 14 - lava balls (MZ, SLZ)
000102D0                            ; ---------------------------------------------------------------------------
000102D0                            
000102D0                            LavaBall:
000102D0 7000                       		moveq	#0,d0
000102D2 1028 0024                  		move.b	obRoutine(a0),d0
000102D6 323B 0000                  		move.w	LBall_Index(pc,d0.w),d1
000102DA 4EBB 1000                  		jsr	LBall_Index(pc,d1.w)
000102DE 6000 F1DA                  		bra.w	DisplaySprite
000102E2                            ; ===========================================================================
000102E2 0000                       LBall_Index:	dc.w LBall_Main-LBall_Index
000102E4 0000                       		dc.w LBall_Action-LBall_Index
000102E6 0000                       		dc.w LBall_Delete-LBall_Index
000102E8                            
000102E8 FC00 FB00 FA00 F900 FE00   LBall_Speeds:	dc.w -$400, -$500, -$600, -$700, -$200
000102F2 0200 FE00 0200 0000        		dc.w $200, -$200, $200,	0
000102FA                            ; ===========================================================================
000102FA                            
000102FA                            LBall_Main:	; Routine 0
000102FA 5428 0024                  		addq.b	#2,obRoutine(a0)
000102FE 117C 0008 0016             		move.b	#8,obHeight(a0)
00010304 117C 0008 0017             		move.b	#8,obWidth(a0)
0001030A 217C 0000 D1C6 0004        		move.l	#Map_Fire,obMap(a0)
00010312 317C 0345 0002             		move.w	#$345,obGfx(a0)
00010318 0C38 0003 FE10             		cmpi.b	#3,(v_zone).w	; check if level is SLZ
0001031E 6600                       		bne.s	@notSLZ
00010320 317C 0480 0002             		move.w	#$480,obGfx(a0)	; SLZ specific code
00010326                            
00010326                            	@notSLZ:
00010326 117C 0004 0001             		move.b	#4,obRender(a0)
0001032C 317C 0180 0018             		move.w	#$180,obPriority(a0)
00010332 117C 008B 0020             		move.b	#$8B,obColType(a0)
00010338 3168 000C 0030             		move.w	obY(a0),$30(a0)
0001033E 4A28 0029                  		tst.b	$29(a0)
00010342 6700                       		beq.s	@speed
00010344 5428 0018                  		addq.b	#2,obPriority(a0)
00010348                            
00010348                            	@speed:
00010348 7000                       		moveq	#0,d0
0001034A 1028 0028                  		move.b	obSubtype(a0),d0
0001034E D040                       		add.w	d0,d0
00010350 317B 0096 0012             		move.w	LBall_Speeds(pc,d0.w),obVelY(a0) ; load object speed (vertical)
00010356 117C 0008 0014             		move.b	#8,obActWid(a0)
0001035C 0C28 0006 0028             		cmpi.b	#6,obSubtype(a0) ; is object type below $6 ?
00010362 6500                       		bcs.s	@sound		; if yes, branch
00010364                            
00010364 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001036A 117C 0002 001C             		move.b	#2,obAnim(a0)	; use horizontal animation
00010370 3168 0012 0010             		move.w	obVelY(a0),obVelX(a0) ; set horizontal speed
00010376 317C 0000 0012             		move.w	#0,obVelY(a0)	; delete vertical speed
0001037C                            
0001037C                            	@sound:
00010386                            
00010386                            LBall_Action:	; Routine 2
00010386 7000                       		moveq	#0,d0
00010388 1028 0028                  		move.b	obSubtype(a0),d0
0001038C D040                       		add.w	d0,d0
0001038E 323B 0000                  		move.w	LBall_TypeIndex(pc,d0.w),d1
00010392 4EBB 1000                  		jsr	LBall_TypeIndex(pc,d1.w)
00010396 6100 F10E                  		bsr.w	SpeedToPos
0001039A 43F9 0000 0000             		lea	(Ani_Fire).l,a1
000103A0 6100 C1D2                  		bsr.w	AnimateSprite
000103A4                            
000103A4                            LBall_ChkDel:
000103C2 4E75                       		rts	
000103C4                            ; ===========================================================================
000103C4 0000 0000                  LBall_TypeIndex:dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
000103C8 0000 0000                  		dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
000103CC 0000 0000                  		dc.w LBall_Type04-LBall_TypeIndex, LBall_Type05-LBall_TypeIndex
000103D0 0000 0000                  		dc.w LBall_Type06-LBall_TypeIndex, LBall_Type07-LBall_TypeIndex
000103D4 0000                       		dc.w LBall_Type08-LBall_TypeIndex
000103D6                            ; ===========================================================================
000103D6                            ; lavaball types 00-03 fly up and fall back down
000103D6                            
000103D6                            LBall_Type00:
000103D6 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's downward speed
000103DC 3028 0030                  		move.w	$30(a0),d0
000103E0 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen back to its	original position?
000103E4 6400                       		bcc.s	loc_E41E	; if not, branch
000103E6 5428 0024                  		addq.b	#2,obRoutine(a0)	; goto "LBall_Delete" routine
000103EA                            
000103EA                            loc_E41E:
000103EA 08A8 0001 0022             		bclr	#1,obStatus(a0)
000103F0 4A68 0012                  		tst.w	obVelY(a0)
000103F4 6A00                       		bpl.s	locret_E430
000103F6 08E8 0001 0022             		bset	#1,obStatus(a0)
000103FC                            
000103FC                            locret_E430:
000103FC 4E75                       		rts	
000103FE                            ; ===========================================================================
000103FE                            ; lavaball type	04 flies up until it hits the ceiling
000103FE                            
000103FE                            LBall_Type04:
000103FE 08E8 0001 0022             		bset	#1,obStatus(a0)
00010404 6100 0000                  		bsr.w	ObjHitCeiling
00010408 4A41                       		tst.w	d1
0001040A 6A00                       		bpl.s	locret_E452
0001040C 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010412 117C 0001 001C             		move.b	#1,obAnim(a0)
00010418 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the ceiling
0001041E                            
0001041E                            locret_E452:
0001041E 4E75                       		rts	
00010420                            ; ===========================================================================
00010420                            ; lavaball type	05 falls down until it hits the	floor
00010420                            
00010420                            LBall_Type05:
00010420 08A8 0001 0022             		bclr	#1,obStatus(a0)
00010426 6100 0000                  		bsr.w	ObjFloorDist
0001042A 4A41                       		tst.w	d1
0001042C 6A00                       		bpl.s	locret_E474
0001042E 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010434 117C 0001 001C             		move.b	#1,obAnim(a0)
0001043A 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the floor
00010440                            
00010440                            locret_E474:
00010440 4E75                       		rts	
00010442                            ; ===========================================================================
00010442                            ; lavaball types 06-07 move sideways
00010442                            
00010442                            LBall_Type06:
00010442 08E8 0000 0022             		bset	#0,obStatus(a0)
00010448 76F8                       		moveq	#-8,d3
0001044A 6100 0000                  		bsr.w	ObjHitWallLeft
0001044E 4A41                       		tst.w	d1
00010450 6A00                       		bpl.s	locret_E498
00010452 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010458 117C 0003 001C             		move.b	#3,obAnim(a0)
0001045E 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
00010464                            
00010464                            locret_E498:
00010464 4E75                       		rts	
00010466                            ; ===========================================================================
00010466                            
00010466                            LBall_Type07:
00010466 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001046C 7608                       		moveq	#8,d3
0001046E 6100 0000                  		bsr.w	ObjHitWallRight
00010472 4A41                       		tst.w	d1
00010474 6A00                       		bpl.s	locret_E4BC
00010476 117C 0008 0028             		move.b	#8,obSubtype(a0)
0001047C 117C 0003 001C             		move.b	#3,obAnim(a0)
00010482 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
00010488                            
00010488                            locret_E4BC:
00010488 4E75                       		rts	
0001048A                            ; ===========================================================================
0001048A                            
0001048A                            LBall_Type08:
0001048A 4E75                       		rts	
0001048C                            ; ===========================================================================
0001048C                            
0001048C                            LBall_Delete:
0001048C 6000 F06C                  		bra.w	DeleteObject
0001048C 6000 F06C                  		bra.w	DeleteObject
00010490                            		include	"_anim\Fireballs.asm"
00010490                            ; ---------------------------------------------------------------------------
00010490                            ; Animation script - lava balls
00010490                            ; ---------------------------------------------------------------------------
00010490 0000                       Ani_Fire:	dc.w @vertical-Ani_Fire
00010492 0000                       		dc.w @vertcollide-Ani_Fire
00010494 0000                       		dc.w @horizontal-Ani_Fire
00010496 0000                       		dc.w @horicollide-Ani_Fire
00010498 0500 2001 21FF             @vertical:	dc.b 5,	0, $20,	1, $21,	afEnd
0001049E 0502 FC                    @vertcollide:	dc.b 5,	2, afRoutine
000104A2 00                         		even
000104A2 0503 4304 44FF             @horizontal:	dc.b 5,	3, $43,	4, $44,	afEnd
000104A8 0505 FC                    @horicollide:	dc.b 5,	5, afRoutine
000104AC 00                         		even
000104AC 00                         		even
000104AC                            
000104AC                            		include	"_incObj\6D Flamethrower.asm"
000104AC                            ; ---------------------------------------------------------------------------
000104AC                            ; Object 6D - flame thrower (SBZ)
000104AC                            ; ---------------------------------------------------------------------------
000104AC                            
000104AC                            Flamethrower:
000104AC 7000                       		moveq	#0,d0
000104AE 1028 0024                  		move.b	obRoutine(a0),d0
000104B2 323B 0000                  		move.w	Flame_Index(pc,d0.w),d1
000104B6 4EFB 1000                  		jmp	Flame_Index(pc,d1.w)
000104BA                            ; ===========================================================================
000104BA 0000                       Flame_Index:	dc.w Flame_Main-Flame_Index
000104BC 0000                       		dc.w Flame_Action-Flame_Index
000104BE                            ; ===========================================================================
000104BE                            
000104BE                            Flame_Main:	; Routine 0
000104BE 5428 0024                  		addq.b	#2,obRoutine(a0)
000104C2 217C 0000 0000 0004        		move.l	#Map_Flame,obMap(a0)
000104CA 317C 83D9 0002             		move.w	#$83D9,obGfx(a0)
000104D0 0028 0004 0001             		ori.b	#4,obRender(a0)
000104D6 317C 0080 0018             		move.w	#$80,obPriority(a0)
000104DC 3168 000C 0030             		move.w	obY(a0),$30(a0)	; store obY (gets overwritten later though)
000104E2 117C 000C 0014             		move.b	#$C,obActWid(a0)
000104E8 1028 0028                  		move.b	obSubtype(a0),d0
000104EC 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
000104F0 D040                       		add.w	d0,d0		; multiply by 2
000104F2 3140 0030                  		move.w	d0,$30(a0)
000104F6 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
000104FA 1028 0028                  		move.b	obSubtype(a0),d0
000104FE 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
00010502 EB48                       		lsl.w	#5,d0		; multiply by $20
00010504 3140 0034                  		move.w	d0,$34(a0)	; set pause time
00010508 117C 000A 0036             		move.b	#$A,$36(a0)
0001050E 0828 0001 0022             		btst	#1,obStatus(a0)
00010514 6700                       		beq.s	Flame_Action
00010516 117C 0002 001C             		move.b	#2,obAnim(a0)
0001051C 117C 0015 0036             		move.b	#$15,$36(a0)
00010522                            
00010522                            Flame_Action:	; Routine 2
00010522 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00010526 6A00                       		bpl.s	loc_E57A	; if time remains, branch
00010528 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0001052E 0868 0000 001C             		bchg	#0,obAnim(a0)
00010534 6700                       		beq.s	loc_E57A
00010536 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
00010546                            
00010546                            loc_E57A:
00010546 43F9 0000 0000             		lea	(Ani_Flame).l,a1
0001054C 6100 C026                  		bsr.w	AnimateSprite
00010550 117C 0000 0020             		move.b	#0,obColType(a0)
00010556 1028 0036                  		move.b	$36(a0),d0
0001055A B028 001A                  		cmp.b	obFrame(a0),d0
0001055E 6600                       		bne.s	Flame_ChkDel
00010560 117C 00A3 0020             		move.b	#$A3,obColType(a0)
00010566                            
00010566                            Flame_ChkDel:
00010584 6000 EF34                  		bra.w	DisplaySprite
00010584 6000 EF34                  		bra.w	DisplaySprite
00010588                            		include	"_anim\Flamethrower.asm"
00010588                            ; ---------------------------------------------------------------------------
00010588                            ; Animation script - flamethrower (SBZ)
00010588                            ; ---------------------------------------------------------------------------
00010588 0000                       Ani_Flame:	dc.w @pipe1-Ani_Flame
0001058A 0000                       		dc.w @pipe2-Ani_Flame
0001058C 0000                       		dc.w @valve1-Ani_Flame
0001058E 0000                       		dc.w @valve2-Ani_Flame
00010590 0300 0102 0304 0506 0708+  @pipe1:		dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, afBack, 2
0001059E 0009 0705 0301 00FE 01     @pipe2:		dc.b 0,	9, 7, 5, 3, 1, 0, afBack, 1
000105A8 00                         		even
000105A8 030B 0C0D 0E0F 1011 1213+  @valve1:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, afBack, 2
000105B6 0014 1211 0F0D 0BFE 01     @valve2:	dc.b 0,	$14, $12, $11, $F, $D, $B, afBack, 1
000105C0 00                         		even
000105C0 00                         		even
000105C0                            Map_Flame:	include	"_maps\Flamethrower.asm"
000105C0                            ; ---------------------------------------------------------------------------
000105C0                            ; Sprite mappings - flame thrower (SBZ)
000105C0                            ; ---------------------------------------------------------------------------
000105C0                            Map_Flame_internal:
000105C0 0000                       		dc.w @pipe1-Map_Flame_internal
000105C2 0000                       		dc.w @pipe2-Map_Flame_internal
000105C4 0000                       		dc.w @pipe3-Map_Flame_internal
000105C6 0000                       		dc.w @pipe4-Map_Flame_internal
000105C8 0000                       		dc.w @pipe5-Map_Flame_internal
000105CA 0000                       		dc.w @pipe6-Map_Flame_internal
000105CC 0000                       		dc.w @pipe7-Map_Flame_internal
000105CE 0000                       		dc.w @pipe8-Map_Flame_internal
000105D0 0000                       		dc.w @pipe9-Map_Flame_internal
000105D2 0000                       		dc.w @pipe10-Map_Flame_internal
000105D4 0000                       		dc.w @pipe11-Map_Flame_internal
000105D6 0000                       		dc.w @valve1-Map_Flame_internal
000105D8 0000                       		dc.w @valve2-Map_Flame_internal
000105DA 0000                       		dc.w @valve3-Map_Flame_internal
000105DC 0000                       		dc.w @valve4-Map_Flame_internal
000105DE 0000                       		dc.w @valve5-Map_Flame_internal
000105E0 0000                       		dc.w @valve6-Map_Flame_internal
000105E2 0000                       		dc.w @valve7-Map_Flame_internal
000105E4 0000                       		dc.w @valve8-Map_Flame_internal
000105E6 0000                       		dc.w @valve9-Map_Flame_internal
000105E8 0000                       		dc.w @valve10-Map_Flame_internal
000105EA 0000                       		dc.w @valve11-Map_Flame_internal
000105EC 01                         @pipe1:		dc.b 1
000105ED 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB ; broken pipe style flamethrower
000105F2 02                         @pipe2:		dc.b 2
000105F3 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000105F8 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000105FD 02                         @pipe3:		dc.b 2
000105FE 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010603 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010608 03                         @pipe4:		dc.b 3
00010609 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001060E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010613 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010618 03                         @pipe5:		dc.b 3
00010619 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001061E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010623 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010628 04                         @pipe6:		dc.b 4
00010629 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001062E 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010633 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010638 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001063D 04                         @pipe7:		dc.b 4
0001063E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010643 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010648 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001064D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010652 05                         @pipe8:		dc.b 5
00010653 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010658 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001065D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010662 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010667 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001066C 05                         @pipe9:		dc.b 5
0001066D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010672 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010677 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001067C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010681 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010686 06                         @pipe10:	dc.b 6
00010687 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0001068C F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010691 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010696 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0001069B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000106A0 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000106A5 06                         @pipe11:	dc.b 6
000106A6 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
000106AB F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000106B0 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
000106B5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000106BA 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000106BF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000106C4 01                         @valve1:	dc.b 1
000106C5 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9 ; valve style flamethrower
000106CA 02                         @valve2:	dc.b 2
000106CB 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000106D0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000106D5 02                         @valve3:	dc.b 2
000106D6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000106DB 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000106E0 03                         @valve4:	dc.b 3
000106E1 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000106E6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000106EB 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000106F0 03                         @valve5:	dc.b 3
000106F1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000106F6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000106FB 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010700 04                         @valve6:	dc.b 4
00010701 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010706 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001070B 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010710 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010715 04                         @valve7:	dc.b 4
00010716 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0001071B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010720 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010725 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001072A 05                         @valve8:	dc.b 5
0001072B F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010730 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010735 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001073A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001073F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010744 05                         @valve9:	dc.b 5
00010745 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0001074A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0001074F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010754 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010759 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001075E 06                         @valve10:	dc.b 6
0001075F E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010764 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010769 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001076E 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010773 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010778 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001077D 06                         @valve11:	dc.b 6
0001077E E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010783 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010788 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0001078D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010792 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010797 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001079C                            		even
0001079C                            		even
0001079C                            
0001079C                            		include	"_incObj\46 MZ Bricks.asm"
0001079C                            ; ---------------------------------------------------------------------------
0001079C                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0001079C                            ; ---------------------------------------------------------------------------
0001079C                            
0001079C                            MarbleBrick:
0001079C 7000                       		moveq	#0,d0
0001079E 1028 0024                  		move.b	obRoutine(a0),d0
000107A2 323B 0000                  		move.w	Brick_Index(pc,d0.w),d1
000107A6 4EFB 1000                  		jmp	Brick_Index(pc,d1.w)
000107AA                            ; ===========================================================================
000107AA 0000                       Brick_Index:	dc.w Brick_Main-Brick_Index
000107AC 0000                       		dc.w Brick_Action-Brick_Index
000107AE                            
000107AE =00000030                  brick_origY:	equ $30
000107AE                            ; ===========================================================================
000107AE                            
000107AE                            Brick_Main:	; Routine 0
000107AE 5428 0024                  		addq.b	#2,obRoutine(a0)
000107B2 117C 000F 0016             		move.b	#$F,obHeight(a0)
000107B8 117C 000F 0017             		move.b	#$F,obWidth(a0)
000107BE 217C 0000 0000 0004        		move.l	#Map_Brick,obMap(a0)
000107C6 317C 4000 0002             		move.w	#$4000,obGfx(a0)
000107CC 117C 0004 0001             		move.b	#4,obRender(a0)
000107D2 317C 0180 0018             		move.w	#$180,obPriority(a0)
000107D8 117C 0010 0014             		move.b	#$10,obActWid(a0)
000107DE 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
000107E4 317C 05C0 0032             		move.w	#$5C0,$32(a0)
000107EA                            
000107EA                            Brick_Action:	; Routine 2
000107EA 4A28 0001                  		tst.b	obRender(a0)
000107EE 6A00                       		bpl.s	@chkdel
000107F0 7000                       		moveq	#0,d0
000107F2 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000107F6 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
000107FA D040                       		add.w	d0,d0
000107FC 323B 0000                  		move.w	Brick_TypeIndex(pc,d0.w),d1
00010800 4EBB 1000                  		jsr	Brick_TypeIndex(pc,d1.w)
00010804 323C 001B                  		move.w	#$1B,d1
00010808 343C 0010                  		move.w	#$10,d2
0001080C 363C 0011                  		move.w	#$11,d3
00010810 3828 0008                  		move.w	obX(a0),d4
00010814 6100 0000                  		bsr.w	SolidObject
00010818                            
00010818                            	@chkdel:
00010836 6000 EC82                  			bra.w	DisplaySprite
0001083A                            ; ===========================================================================
0001083A 0000                       Brick_TypeIndex:dc.w Brick_Type00-Brick_TypeIndex
0001083C 0000                       		dc.w Brick_Type01-Brick_TypeIndex
0001083E 0000                       		dc.w Brick_Type02-Brick_TypeIndex
00010840 0000                       		dc.w Brick_Type03-Brick_TypeIndex
00010842 0000                       		dc.w Brick_Type04-Brick_TypeIndex
00010844                            ; ===========================================================================
00010844                            
00010844                            Brick_Type00:
00010844 4E75                       		rts	
00010846                            ; ===========================================================================
00010846                            
00010846                            Brick_Type02:
00010846 3038 D008                  		move.w	(v_player+obX).w,d0
0001084A 9068 0008                  		sub.w	obX(a0),d0
0001084E 6400                       		bcc.s	loc_E888
00010850 4440                       		neg.w	d0
00010852                            
00010852                            loc_E888:
00010852 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00010856 6400                       		bcc.s	Brick_Type01	; if not, resume wobbling
00010858 117C 0003 0028             		move.b	#3,obSubtype(a0)	; if yes, make the block fall
0001085E                            
0001085E                            Brick_Type01:
0001085E 7000                       		moveq	#0,d0
00010860 1038 FE74                  		move.b	(v_oscillate+$16).w,d0
00010864 0828 0003 0028             		btst	#3,obSubtype(a0)
0001086A 6700                       		beq.s	loc_E8A8
0001086C 4440                       		neg.w	d0
0001086E 0640 0010                  		addi.w	#$10,d0
00010872                            
00010872                            loc_E8A8:
00010872 3228 0030                  		move.w	brick_origY(a0),d1
00010876 9240                       		sub.w	d0,d1
00010878 3141 000C                  		move.w	d1,obY(a0)	; update the block's position to make it wobble
0001087C 4E75                       		rts	
0001087E                            ; ===========================================================================
0001087E                            
0001087E                            Brick_Type03:
0001087E 6100 EC26                  		bsr.w	SpeedToPos
00010882 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase falling speed
00010888 6100 0000                  		bsr.w	ObjFloorDist
0001088C 4A41                       		tst.w	d1		; has the block	hit the	floor?
0001088E 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00010892 D368 000C                  		add.w	d1,obY(a0)
00010896 4268 0012                  		clr.w	obVelY(a0)	; stop the block falling
0001089A 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
000108A0 117C 0004 0028             		move.b	#4,obSubtype(a0)
000108A6 3011                       		move.w	(a1),d0
000108A8 0240 03FF                  		andi.w	#$3FF,d0
000108AC 0C40 016A                  			cmpi.w	#$16A,d0
000108B0 6400                       		bcc.s	locret_E8EE
000108B2 117C 0000 0028             		move.b	#0,obSubtype(a0)
000108B8                            
000108B8                            locret_E8EE:
000108B8 4E75                       		rts	
000108BA                            ; ===========================================================================
000108BA                            
000108BA                            Brick_Type04:
000108BA 7000                       		moveq	#0,d0
000108BC 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
000108C0 E648                       		lsr.w	#3,d0
000108C2 3228 0030                  		move.w	brick_origY(a0),d1
000108C6 9240                       		sub.w	d0,d1
000108C8 3141 000C                  		move.w	d1,obY(a0)	; make the block wobble
000108CC 4E75                       		rts	
000108CC 4E75                       		rts	
000108CE                            Map_Brick:	include	"_maps\MZ Bricks.asm"
000108CE                            ; ---------------------------------------------------------------------------
000108CE                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
000108CE                            ; ---------------------------------------------------------------------------
000108CE                            Map_Brick_internal:
000108CE 0000                       		dc.w @brick-Map_Brick_internal
000108D0 01                         @brick:		dc.b 1
000108D1 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
000108D6                            		even
000108D6                            		even
000108D6                            
000108D6                            		include	"_incObj\12 Light.asm"
000108D6                            ; ---------------------------------------------------------------------------
000108D6                            ; Object 12 - lamp (SYZ)
000108D6                            ; ---------------------------------------------------------------------------
000108D6                            
000108D6                            SpinningLight:
000108D6 7000                       		moveq	#0,d0
000108D8 1028 0024                  		move.b	obRoutine(a0),d0
000108DC 323B 0000                  		move.w	Light_Index(pc,d0.w),d1
000108E0 4EFB 1000                  		jmp	Light_Index(pc,d1.w)
000108E4                            ; ===========================================================================
000108E4 0000                       Light_Index:	dc.w Light_Main-Light_Index
000108E6 0000                       		dc.w Light_Animate-Light_Index
000108E8                            ; ===========================================================================
000108E8                            
000108E8                            Light_Main:	; Routine 0
000108E8 5428 0024                  		addq.b	#2,obRoutine(a0)
000108EC 217C 0000 0000 0004        		move.l	#Map_Light,obMap(a0)
000108F4 317C 0000 0002             		move.w	#0,obGfx(a0)
000108FA 117C 0004 0001             		move.b	#4,obRender(a0)
00010900 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010906 317C 0300 0018             		move.w	#$300,obPriority(a0)
0001090C                            
0001090C                            Light_Animate:	; Routine 2
0001090C 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00010910 6A00                       		bpl.s	@chkdel
00010912 117C 000C 001E             		move.b	#12,obTimeFrame(a0)
00010918 5228 001A                  		addq.b	#1,obFrame(a0)
0001091C 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
00010922 6500                       		bcs.s	@chkdel
00010924 117C 0000 001A             		move.b	#0,obFrame(a0)
0001092A                            
0001092A                            	@chkdel:
00010948 6000 EB70                  		bra.w	DisplaySprite
00010948 6000 EB70                  		bra.w	DisplaySprite
0001094C                            Map_Light	include	"_maps\Light.asm"
0001094C                            ; --------------------------------------------------------------------------------
0001094C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001094C                            ; --------------------------------------------------------------------------------
0001094C                            
0001094C                            SME_FBl1X:	
0001094C 0000 0000                  		dc.w SME_FBl1X_8-SME_FBl1X, SME_FBl1X_22-SME_FBl1X	
00010950 0000 0000                  		dc.w SME_FBl1X_3C-SME_FBl1X, SME_FBl1X_5B-SME_FBl1X	
00010954 05                         SME_FBl1X_8:	dc.b 5	
00010955 E004 006D 00               		dc.b $E0, 4, 0, $6D, 0	
0001095A E80C 006F F8               		dc.b $E8, $C, 0, $6F, $F8	
0001095F F00C 0073 F8               		dc.b $F0, $C, 0, $73, $F8	
00010964 F800 0090 00               		dc.b $F8, 0, 0, $90, 0	
00010969 F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
0001096E 05                         SME_FBl1X_22:	dc.b 5	
0001096F E004 0077 00               		dc.b $E0, 4, 0, $77, 0	
00010974 E804 0079 00               		dc.b $E8, 4, 0, $79, 0	
00010979 E800 007B 10               		dc.b $E8, 0, 0, $7B, $10	
0001097E F008 007C F8               		dc.b $F0, 8, 0, $7C, $F8	
00010983 F804 0091 00               		dc.b $F8, 4, 0, $91, 0	
00010988 06                         SME_FBl1X_3C:	dc.b 6	
00010989 E000 007F 00               		dc.b $E0, 0, 0, $7F, 0	
0001098E E000 0078 08               		dc.b $E0, 0, 0, $78, 8	
00010993 E80C 0080 F8               		dc.b $E8, $C, 0, $80, $F8	
00010998 F00C 0084 F8               		dc.b $F0, $C, 0, $84, $F8	
0001099D F800 0093 08               		dc.b $F8, 0, 0, $93, 8	
000109A2 F800 0091 00               		dc.b $F8, 0, 0, $91, 0	
000109A7 05                         SME_FBl1X_5B:	dc.b 5	
000109A8 E004 0088 00               		dc.b $E0, 4, 0, $88, 0	
000109AD E808 008A F8               		dc.b $E8, 8, 0, $8A, $F8	
000109B2 F008 008D 00               		dc.b $F0, 8, 0, $8D, 0	
000109B7 F800 0094 00               		dc.b $F8, 0, 0, $94, 0	
000109BC F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
000109C2 00                         		even
000109C2 00                         		even
000109C2                            		include	"_incObj\47 Bumper.asm"
000109C2                            ; ---------------------------------------------------------------------------
000109C2                            ; Object 47 - pinball bumper (SYZ)
000109C2                            ; ---------------------------------------------------------------------------
000109C2                            
000109C2                            Bumper:
000109C2 7000                       		moveq	#0,d0
000109C4 1028 0024                  		move.b	obRoutine(a0),d0
000109C8 323B 0000                  		move.w	Bump_Index(pc,d0.w),d1
000109CC 4EFB 1000                  		jmp	Bump_Index(pc,d1.w)
000109D0                            ; ===========================================================================
000109D0 0000                       Bump_Index:	dc.w Bump_Main-Bump_Index
000109D2 0000                       		dc.w Bump_Hit-Bump_Index
000109D4                            ; ===========================================================================
000109D4                            
000109D4                            Bump_Main:	; Routine 0
000109D4 5428 0024                  		addq.b	#2,obRoutine(a0)
000109D8 217C 0000 0000 0004        		move.l	#Map_Bump,obMap(a0)
000109E0 317C 0380 0002             		move.w	#$380,obGfx(a0)
000109E6 117C 0004 0001             		move.b	#4,obRender(a0)
000109EC 117C 0010 0014             		move.b	#$10,obActWid(a0)
000109F2 317C 0080 0018             		move.w	#$80,obPriority(a0)
000109F8 117C 00D7 0020             		move.b	#$D7,obColType(a0)
000109FE                            
000109FE                            Bump_Hit:	; Routine 2
000109FE 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	bumper?
00010A02 6700 0000                  		beq.w	@display	; if not, branch
00010A06 4228 0021                  		clr.b	obColProp(a0)
00010A0A 43F8 D000                  		lea	(v_player).w,a1
00010A0E 3228 0008                  		move.w	obX(a0),d1
00010A12 3428 000C                  		move.w	obY(a0),d2
00010A16 9269 0008                  		sub.w	obX(a1),d1
00010A1A 9469 000C                  		sub.w	obY(a1),d2
00010A1E 4EB9 0000 3E34             		jsr	(CalcAngle).l
00010A24 4EB9 0000 3BA2             		jsr	(CalcSine).l
00010A2A C3FC F900                  		muls.w	#-$700,d1
00010A2E E081                       		asr.l	#8,d1
00010A30 3341 0010                  		move.w	d1,obVelX(a1)	; bounce Sonic away
00010A34 C1FC F900                  		muls.w	#-$700,d0
00010A38 E080                       		asr.l	#8,d0
00010A3A 3340 0012                  		move.w	d0,obVelY(a1)	; bounce Sonic away
00010A3E 08E9 0001 0022             		bset	#1,obStatus(a1)
00010A44 08A9 0004 0022             		bclr	#4,obStatus(a1)
00010A4A 08A9 0005 0022             		bclr	#5,obStatus(a1)
00010A50 4229 003C                  		clr.b	$3C(a1)
00010A54 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "hit" animation
00010A64 45F8 FC00                  		lea	(v_objstate).w,a2
00010A68 7000                       		moveq	#0,d0
00010A6A 1028 0023                  		move.b	obRespawnNo(a0),d0
00010A6E 6700                       		beq.s	@addscore
00010A70 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit 10 times?
00010A76 6400                       		bcc.s	@display	; if yes, Sonic	gets no	points
00010A78 5232 0002                  		addq.b	#1,2(a2,d0.w)
00010A7C                            
00010A7C                            	@addscore:
00010A7C 7001                       		moveq	#1,d0
00010A7E 4EB9 0000 0000             		jsr	(AddPoints).l	; add 10 to score
00010A84 6100 EFCE                  		bsr.w	FindFreeObj
00010A88 6600                       		bne.s	@display
00010A8A 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00010A8E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010A94 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010A9A 137C 0004 001A             		move.b	#4,obFrame(a1)
00010AA0                            
00010AA0                            	@display:
00010AA0 43F9 0000 0000             		lea	(Ani_Bump).l,a1
00010AA6 6100 BACC                  		bsr.w	AnimateSprite
00010AC6 6000 E9F2                  		bra.w	DisplaySprite
00010ACA                            ; ===========================================================================
00010ACA                            
00010ACA                            @resetcount:
00010ACA 45F8 FC00                  		lea	(v_objstate).w,a2
00010ACE 7000                       		moveq	#0,d0
00010AD0 1028 0023                  		move.b	obRespawnNo(a0),d0
00010AD4 6700                       		beq.s	@delete
00010AD6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010ADC                            
00010ADC                            	@delete:
00010ADC 6000 EA1C                  		bra.w	DeleteObject
00010ADC 6000 EA1C                  		bra.w	DeleteObject
00010AE0                            		include	"_anim\Bumper.asm"
00010AE0                            ; ---------------------------------------------------------------------------
00010AE0                            ; Animation script - flamethrower (SBZ)
00010AE0                            ; ---------------------------------------------------------------------------
00010AE0 0000                       Ani_Bump:	dc.w byte_EAF4-Ani_Bump
00010AE2 0000                       		dc.w byte_EAF8-Ani_Bump
00010AE4 0F00 FF                    byte_EAF4:	dc.b $F, 0, afEnd
00010AE8 00                         		even
00010AE8 0301 0201 02FD 00          byte_EAF8:	dc.b 3,	1, 2, 1, 2, afChange, 0
00010AF0 00                         		even
00010AF0 00                         		even
00010AF0                            Map_Bump:	include	"_maps\Bumper.asm"
00010AF0                            ; ---------------------------------------------------------------------------
00010AF0                            ; Sprite mappings - pinball bumper (SYZ)
00010AF0                            ; ---------------------------------------------------------------------------
00010AF0                            Map_Bump_internal:
00010AF0 0000                       		dc.w @normal-Map_Bump_internal
00010AF2 0000                       		dc.w @bumped1-Map_Bump_internal
00010AF4 0000                       		dc.w @bumped2-Map_Bump_internal
00010AF6 02                         @normal:	dc.b 2
00010AF7 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00010AFC F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00010B01 02                         @bumped1:	dc.b 2
00010B02 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
00010B07 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
00010B0C 02                         @bumped2:	dc.b 2
00010B0D F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00010B12 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
00010B18 00                         		even
00010B18 00                         		even
00010B18                            
00010B18                            		include	"_incObj\0D Signpost.asm" ; includes "GotThroughAct" subroutine
00010B18                            ; ---------------------------------------------------------------------------
00010B18                            ; Object 0D - signpost at the end of a level
00010B18                            ; ---------------------------------------------------------------------------
00010B18                            
00010B18                            Signpost:
00010B18 7000                       		moveq	#0,d0
00010B1A 1028 0024                  		move.b	obRoutine(a0),d0
00010B1E 323B 0000                  		move.w	Sign_Index(pc,d0.w),d1
00010B22 4EBB 1000                  		jsr	Sign_Index(pc,d1.w)
00010B26 43F9 0000 0000             		lea	(Ani_Sign).l,a1
00010B2C 6100 BA46                  		bsr.w	AnimateSprite
00010B30 6100 E988                  		bsr.w	DisplaySprite
00010B52 4E75                       		rts	
00010B54                            ; ===========================================================================
00010B54 0000                       Sign_Index:	dc.w Sign_Main-Sign_Index
00010B56 0000                       		dc.w Sign_Touch-Sign_Index
00010B58 0000                       		dc.w Sign_Spin-Sign_Index
00010B5A 0000                       		dc.w Sign_SonicRun-Sign_Index
00010B5C 0000                       		dc.w Sign_Exit-Sign_Index
00010B5E                            
00010B5E =00000030                  spintime:	equ $30		; time for signpost to spin
00010B5E =00000032                  sparkletime:	equ $32		; time between sparkles
00010B5E =00000034                  sparkle_id:	equ $34		; counter to keep track of sparkles
00010B5E                            ; ===========================================================================
00010B5E                            
00010B5E                            Sign_Main:	; Routine 0
00010B5E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010B62 217C 0000 0000 0004        		move.l	#Map_Sign,obMap(a0)
00010B6A 317C 0680 0002             		move.w	#$680,obGfx(a0)
00010B70 117C 0004 0001             		move.b	#4,obRender(a0)
00010B76 117C 0018 0014             		move.b	#$18,obActWid(a0)
00010B7C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010B82                            
00010B82                            Sign_Touch:	; Routine 2
00010B82 3038 D008                  		move.w	(v_player+obX).w,d0
00010B86 9068 0008                  		sub.w	obX(a0),d0
00010B8A 6500                       		bcs.s	@notouch
00010B8C 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010B90 6400                       		bcc.s	@notouch	; if not, branch
00010B92 11FC 0001 F7AA             		move.b  #1,($FFFFF7AA).w ; Lock the screen
00010BA2 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010BA6 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w ; lock screen position
00010BAC 5428 0024                  		addq.b	#2,obRoutine(a0)
00010BB0 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is level MZ3?
00010BB6 6700                       		beq.s	@normal
00010BB8 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010BBE                            
00010BBE                            	@normal:
00010BBE 4A38 F5C3                  		tst.b	(f_emeraldm).w
00010BC2 6700                       		beq.s	@notouch
00010BC4 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
00010BD2                            
00010BD2                            	@notouch:
00010BD2 4E75                       		rts	
00010BD4                            	
00010BD4                            ; ===========================================================================
00010BD4                            
00010BD4                            Sign_Spin:	; Routine 4
00010BD4 5368 0030                  		subq.w	#1,spintime(a0)	; subtract 1 from spin time
00010BD8 6A00                       		bpl.s	@chksparkle	; if time remains, branch
00010BDA 317C 003C 0030             		move.w	#60,spintime(a0) ; set spin cycle time to 1 second
00010BE0 5228 001C                  		addq.b	#1,obAnim(a0)	; next spin cycle
00010BE4 0C28 0003 001C             		cmpi.b	#3,obAnim(a0)	; have 3 spin cycles completed?
00010BEA 6600                       		bne.s	@chksparkle	; if not, branch
00010BEC 5428 0024                  		addq.b	#2,obRoutine(a0)
00010BF0                            
00010BF0                            	@chksparkle:
00010BF0 5368 0032                  		subq.w	#1,sparkletime(a0) ; subtract 1 from time delay
00010BF4 6A00                       		bpl.s	@fail		; if time remains, branch
00010BF6 317C 000B 0032             		move.w	#$B,sparkletime(a0) ; set time between sparkles to $B frames
00010BFC 7000                       		moveq	#0,d0
00010BFE 1028 0034                  		move.b	sparkle_id(a0),d0 ; get sparkle id
00010C02 5428 0034                  		addq.b	#2,sparkle_id(a0) ; increment sparkle counter
00010C06 0228 000E 0034             		andi.b	#$E,sparkle_id(a0)
00010C0C 45FB 0000                  		lea	Sign_SparkPos(pc,d0.w),a2 ; load sparkle position data
00010C10 6100 EE42                  		bsr.w	FindFreeObj
00010C14 6600                       		bne.s	@fail
00010C16 12BC 0025                  		move.b	#id_Rings,0(a1)	; load rings object
00010C1A 137C 0006 0024             		move.b	#id_Ring_Sparkle,obRoutine(a1) ; jump to ring sparkle subroutine
00010C20 101A                       		move.b	(a2)+,d0
00010C22 4880                       		ext.w	d0
00010C24 D068 0008                  		add.w	obX(a0),d0
00010C28 3340 0008                  		move.w	d0,obX(a1)
00010C2C 101A                       		move.b	(a2)+,d0
00010C2E 4880                       		ext.w	d0
00010C30 D068 000C                  		add.w	obY(a0),d0
00010C34 3340 000C                  		move.w	d0,obY(a1)
00010C38 237C 0000 BADA 0004        		move.l	#Map_Ring,obMap(a1)
00010C40 337C 2798 0002             		move.w	#$2798,obGfx(a1)
00010C46 137C 0004 0001             		move.b	#4,obRender(a1)
00010C4C 337C 0100 0018             		move.w	#$100,obPriority(a1)
00010C52 137C 0008 0014             		move.b	#8,obActWid(a1)
00010C58                            
00010C58                            	@fail:
00010C58 4E75                       		rts	
00010C5A                            ; ===========================================================================
00010C5A E8F0                       Sign_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00010C5C 0808                       		dc.b	8,   8
00010C5E F000                       		dc.b -$10,   0
00010C60 18F8                       		dc.b  $18,  -8
00010C62 00F8                       		dc.b	0,  -8
00010C64 1000                       		dc.b  $10,   0
00010C66 E808                       		dc.b -$18,   8
00010C68 1810                       		dc.b  $18, $10
00010C6A                            ; ===========================================================================
00010C6A                            
00010C6A                            Sign_SonicRun:	; Routine 6
00010C6A 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00010C6E 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
00010C72 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010C78                            		
00010C78                            
00010C78                            	loc_EC86:
00010C78 5428 0024                  		addq.b	#2,obRoutine(a0)
00010C7C                            
00010C7C                            ; ---------------------------------------------------------------------------
00010C7C                            ; Subroutine to	set up bonuses at the end of an	act
00010C7C                            ; ---------------------------------------------------------------------------
00010C7C                            
00010C7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010C7C                            
00010C7C                            
00010C7C                            GotThroughAct:
00010C7C 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00010C80 6600                       		bne.s	locret_ECEE
00010C82 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00010C88 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00010C8C 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00010C90 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010C94 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00010C9A 7000                       		moveq	#plcid_TitleCard,d0
00010C9C 4EB9 0000 176C             		jsr	(NewPLC).l	; load title card patterns
00010CA2 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00010CA8 7000                       		moveq	#0,d0
00010CAA 1038 FE23                  		move.b	(v_timemin).w,d0
00010CAE C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010CB2 7200                       		moveq	#0,d1
00010CB4 1238 FE24                  		move.b	(v_timesec).w,d1
00010CB8 D041                       		add.w	d1,d0		; add up your time
00010CBA 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010CBE 7214                       		moveq	#$14,d1
00010CC0 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010CC2 6500                       		bcs.s	hastimebonus	; if not, branch
00010CC4 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010CC6                            
00010CC6                            	hastimebonus:
00010CC6 D040                       		add.w	d0,d0
00010CC8 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),(v_timebonus).w ; set time bonus
00010CCE 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00010CD2 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010CD6 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00010CE4 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00010CEA                            
00010CEA                            locret_ECEE:
00010CEA 4E75                       		rts	
00010CEC                            
00010CEC                            ; End of function GotThroughAct
00010CEC                            
00010CEC                            ; ===========================================================================
00010CEC 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00010D00 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010D16                            ; ===========================================================================
00010D16                            
00010D16                            Sign_Exit:	; Routine 8
00010D16 4E75                       		rts	
00010D18                            
00010D18                            ; ---------------------------------------------------------------------------
00010D18                            ; Subroutine to	set up bonuses at the end of an	zone
00010D18                            ; ---------------------------------------------------------------------------
00010D18                            
00010D18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010D18                            
00010D18                            
00010D18                            GotThroughAct1:
00010D18 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00010D1C 6600                       		bne.s	locret_ECEE1
00010D1E 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00010D24 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00010D28 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00010D2C 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010D30 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00010D36 7000                       		moveq	#plcid_TitleCard,d0
00010D38 4EB9 0000 176C             		jsr	(NewPLC).l	; load title card patterns
00010D3E 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00010D44 7000                       		moveq	#0,d0
00010D46 1038 FE23                  		move.b	(v_timemin).w,d0
00010D4A C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010D4E 7200                       		moveq	#0,d1
00010D50 1238 FE24                  		move.b	(v_timesec).w,d1
00010D54 D041                       		add.w	d1,d0		; add up your time
00010D56 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010D5A 7214                       		moveq	#$14,d1
00010D5C B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010D5E 6500 0000                  		bcs.w	hastimebonus2	; if not, branch
00010D62 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010D64                            
00010D64                            	hastimebonus2:
00010D64 D040                       		add.w	d0,d0
00010D66 31FB 0000 F7D2             		move.w	TimeBonuses1(pc,d0.w),(v_timebonus).w ; set time bonus
00010D6C 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00010D70 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010D74 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00010D82 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00010D88                            
00010D88                            locret_ECEE1:
00010D88 4E75                       		rts	
00010D8A                            
00010D8A                            ; End of function GotThroughAct		
00010D8A                            
00010D8A 1388 1388 03E8 01F4 0190+  TimeBonuses1:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00010D9E 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010D9E 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010DB4                            		include	"_anim\Signpost.asm"
00010DB4                            ; ---------------------------------------------------------------------------
00010DB4                            ; Animation script - signpost
00010DB4                            ; ---------------------------------------------------------------------------
00010DB4 0000                       Ani_Sign:	dc.w @eggman-Ani_Sign
00010DB6 0000                       		dc.w @spin1-Ani_Sign
00010DB8 0000                       		dc.w @spin2-Ani_Sign
00010DBA 0000                       		dc.w @sonic-Ani_Sign
00010DBC 0F00 FF                    @eggman:	dc.b $F, 0, afEnd
00010DC0 00                         		even
00010DC0 0100 0102 03FF             @spin1:		dc.b 1,	0, 1, 2, 3, afEnd
00010DC6 0104 0102 03FF             @spin2:		dc.b 1,	4, 1, 2, 3, afEnd
00010DCC 0F04 FF                    @sonic:		dc.b $F, 4, afEnd
00010DD0 00                         		even
00010DD0 00                         		even
00010DD0                            Map_Sign:	include	"_maps\Signpost.asm"
00010DD0                            ; --------------------------------------------------------------------------------
00010DD0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010DD0                            ; --------------------------------------------------------------------------------
00010DD0                            
00010DD0                            SME_KvSue:	
00010DD0 0000 0000                  		dc.w SME_KvSue_A-SME_KvSue, SME_KvSue_1F-SME_KvSue	
00010DD4 0000 0000                  		dc.w SME_KvSue_2F-SME_KvSue, SME_KvSue_3F-SME_KvSue	
00010DD8 0000                       		dc.w SME_KvSue_4F-SME_KvSue	
00010DDA 04                         SME_KvSue_A:	dc.b 4	
00010DDB F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8	
00010DE0 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0	
00010DE5 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010DEA 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010DEF 03                         SME_KvSue_1F:	dc.b 3	
00010DF0 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0	
00010DF5 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010DFA 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010DFF 03                         SME_KvSue_2F:	dc.b 3	
00010E00 F003 001C FC               		dc.b $F0, 3, 0, $1C, $FC	
00010E05 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
00010E0A 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010E0F 03                         SME_KvSue_3F:	dc.b 3	
00010E10 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0	
00010E15 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
00010E1A 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010E1F 04                         SME_KvSue_4F:	dc.b 4	
00010E20 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8	
00010E25 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0	
00010E2A 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010E2F 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010E34                            		even
00010E34                            		even
00010E34                            
00010E34                            		include	"_incObj\4C & 4D Lava Geyser Maker.asm"
00010E34                            ; ---------------------------------------------------------------------------
00010E34                            ; Object 4C - lava geyser / lavafall producer (MZ)
00010E34                            ; ---------------------------------------------------------------------------
00010E34                            
00010E34                            GeyserMaker:
00010E34 7000                       		moveq	#0,d0
00010E36 1028 0024                  		move.b	obRoutine(a0),d0
00010E3A 323B 0000                  		move.w	GMake_Index(pc,d0.w),d1
00010E3E 4EBB 1000                  		jsr	GMake_Index(pc,d1.w)
00010E42 6000 0000                  		bra.w	Geyser_ChkDel
00010E46                            ; ===========================================================================
00010E46 0000                       GMake_Index:	dc.w GMake_Main-GMake_Index
00010E48 0000                       		dc.w GMake_Wait-GMake_Index
00010E4A 0000                       		dc.w GMake_ChkType-GMake_Index
00010E4C 0000                       		dc.w GMake_MakeLava-GMake_Index
00010E4E 0000                       		dc.w GMake_Display-GMake_Index
00010E50 0000                       		dc.w GMake_Delete-GMake_Index
00010E52                            
00010E52 =00000034                  gmake_time:	equ $34		; time delay (2 bytes)
00010E52 =00000032                  gmake_timer:	equ $32		; current time remaining (2 bytes)
00010E52 =0000003C                  gmake_parent:	equ $3C		; address of parent object
00010E52                            ; ===========================================================================
00010E52                            
00010E52                            GMake_Main:	; Routine 0
00010E52 5428 0024                  		addq.b	#2,obRoutine(a0)
00010E56 217C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a0)
00010E5E 317C E3A8 0002             		move.w	#$E3A8,obGfx(a0)
00010E64 117C 0004 0001             		move.b	#4,obRender(a0)
00010E6A 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010E70 117C 0038 0014             		move.b	#$38,obActWid(a0)
00010E76 317C 0078 0034             		move.w	#120,gmake_time(a0) ; set time delay to 2 seconds
00010E7C                            
00010E7C                            GMake_Wait:	; Routine 2
00010E7C 5368 0032                  		subq.w	#1,gmake_timer(a0) ; decrement timer
00010E80 6A00                       		bpl.s	@cancel		; if time remains, branch
00010E82                            
00010E82 3168 0034 0032             		move.w	gmake_time(a0),gmake_timer(a0) ; reset timer
00010E88 3038 D00C                  		move.w	(v_player+obY).w,d0
00010E8C 3228 000C                  		move.w	obY(a0),d1
00010E90 B041                       		cmp.w	d1,d0
00010E92 6400                       		bcc.s	@cancel
00010E94 0441 0170                  		subi.w	#$170,d1
00010E98 B041                       		cmp.w	d1,d0
00010E9A 6500                       		bcs.s	@cancel
00010E9C 5428 0024                  		addq.b	#2,obRoutine(a0) ; if Sonic is within range, goto GMake_ChkType
00010EA0                            
00010EA0                            	@cancel:
00010EA0 4E75                       		rts	
00010EA2                            ; ===========================================================================
00010EA2                            
00010EA2                            GMake_MakeLava:	; Routine 6
00010EA2 5428 0024                  		addq.b	#2,obRoutine(a0)
00010EA6 6100 EBC2                  		bsr.w	FindNextFreeObj
00010EAA 6600                       		bne.s	@fail
00010EAC 12BC 004D                  		move.b	#id_LavaGeyser,0(a1) ; load lavafall object
00010EB0 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010EB6 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010EBC 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00010EC2 2348 003C                  		move.l	a0,gmake_parent(a1)
00010EC6                            
00010EC6                            	@fail:
00010EC6 117C 0001 001C             		move.b	#1,obAnim(a0)
00010ECC 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 0 (geyser) ?
00010ED0 6700                       		beq.s	@isgeyser	; if yes, branch
00010ED2 117C 0004 001C             		move.b	#4,obAnim(a0)
00010ED8 6000                       		bra.s	GMake_Display
00010EDA                            ; ===========================================================================
00010EDA                            
00010EDA                            	@isgeyser:
00010EDA 2268 003C                  		movea.l	gmake_parent(a0),a1 ; get parent object address
00010EDE 08E9 0001 0022             		bset	#1,obStatus(a1)
00010EE4 337C FA80 0012             		move.w	#-$580,obVelY(a1)
00010EEA 6000                       		bra.s	GMake_Display
00010EEC                            ; ===========================================================================
00010EEC                            
00010EEC                            GMake_ChkType:	; Routine 4
00010EEC 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 (geyser) ?
00010EF0 6700                       		beq.s	GMake_Display	; if yes, branch
00010EF2 5428 0024                  		addq.b	#2,obRoutine(a0)
00010EF6 4E75                       		rts	
00010EF8                            ; ===========================================================================
00010EF8                            
00010EF8                            GMake_Display:	; Routine 8
00010EF8 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
00010EFE 6100 B674                  		bsr.w	AnimateSprite
00010F02 6100 E5B6                  		bsr.w	DisplaySprite
00010F06 4E75                       		rts	
00010F08                            ; ===========================================================================
00010F08                            
00010F08                            GMake_Delete:	; Routine $A
00010F08 117C 0000 001C             		move.b	#0,obAnim(a0)
00010F0E 117C 0002 0024             		move.b	#2,obRoutine(a0)
00010F14 4A28 0028                  		tst.b	obSubtype(a0)
00010F18 6700 E5E0                  		beq.w	DeleteObject
00010F1C 4E75                       		rts	
00010F1E                            
00010F1E                            
00010F1E                            ; ---------------------------------------------------------------------------
00010F1E                            ; Object 4D - lava geyser / lavafall (MZ)
00010F1E                            ; ---------------------------------------------------------------------------
00010F1E                            
00010F1E                            LavaGeyser:
00010F1E 7000                       		moveq	#0,d0
00010F20 1028 0024                  		move.b	obRoutine(a0),d0
00010F24 323B 0000                  		move.w	Geyser_Index(pc,d0.w),d1
00010F28 4EBB 1000                  		jsr	Geyser_Index(pc,d1.w)
00010F2C 6000 E58C                  		bra.w	DisplaySprite
00010F30                            ; ===========================================================================
00010F30 0000                       Geyser_Index:	dc.w Geyser_Main-Geyser_Index
00010F32 0000                       		dc.w Geyser_Action-Geyser_Index
00010F34 0000                       		dc.w loc_EFFC-Geyser_Index
00010F36 0000                       		dc.w Geyser_Delete-Geyser_Index
00010F38                            
00010F38 FB00 0000                  Geyser_Speeds:	dc.w $FB00, 0
00010F3C                            ; ===========================================================================
00010F3C                            
00010F3C                            Geyser_Main:	; Routine 0
00010F3C 5428 0024                  		addq.b	#2,obRoutine(a0)
00010F40 3168 000C 0030             		move.w	obY(a0),$30(a0)
00010F46 4A28 0028                  		tst.b	obSubtype(a0)
00010F4A 6700                       		beq.s	@isgeyser
00010F4C 0468 0250 000C             		subi.w	#$250,obY(a0)
00010F52                            
00010F52                            	@isgeyser:
00010F52 7000                       		moveq	#0,d0
00010F54 1028 0028                  		move.b	obSubtype(a0),d0
00010F58 D040                       		add.w	d0,d0
00010F5A 317B 00DC 0012             		move.w	Geyser_Speeds(pc,d0.w),obVelY(a0)
00010F60 2248                       		movea.l	a0,a1
00010F62 7201                       		moveq	#1,d1
00010F64 6100                       		bsr.s	@makelava
00010F66 6000                       		bra.s	@activate
00010F68                            ; ===========================================================================
00010F68                            
00010F68                            	@loop:
00010F68 6100 EB00                  		bsr.w	FindNextFreeObj
00010F6C 6600                       		bne.s	@fail
00010F6E                            
00010F6E                            @makelava:
00010F6E 12BC 004D                  		move.b	#id_LavaGeyser,0(a1)
00010F72 237C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a1)
00010F7A 337C 63A8 0002             		move.w	#$63A8,obGfx(a1)
00010F80 137C 0004 0001             		move.b	#4,obRender(a1)
00010F86 137C 0020 0014             		move.b	#$20,obActWid(a1)
00010F8C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010F92 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010F98 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00010F9E 337C 0080 0018             		move.w	#$80,obPriority(a1)
00010FA4 137C 0005 001C             		move.b	#5,obAnim(a1)
00010FAA 4A28 0028                  		tst.b	obSubtype(a0)
00010FAE 6700                       		beq.s	@fail
00010FB0 137C 0002 001C             		move.b	#2,obAnim(a1)
00010FB6                            
00010FB6                            	@fail:
00010FB6 51C9 FFB0                  		dbf	d1,@loop
00010FBA 4E75                       		rts	
00010FBC                            ; ===========================================================================
00010FBC                            
00010FBC                            @activate:
00010FBC 0669 0060 000C             		addi.w	#$60,obY(a1)
00010FC2 3368 0030 0030             		move.w	$30(a0),$30(a1)
00010FC8 0669 0060 0030             		addi.w	#$60,$30(a1)
00010FCE 137C 0093 0020             		move.b	#$93,obColType(a1)
00010FD4 137C 0080 0016             		move.b	#$80,obHeight(a1)
00010FDA 08E9 0004 0001             		bset	#4,obRender(a1)
00010FE0 5829 0024                  		addq.b	#4,obRoutine(a1)
00010FE4 2348 003C                  		move.l	a0,$3C(a1)
00010FE8 4A28 0028                  		tst.b	obSubtype(a0)
00010FEC 6700                       		beq.s	@sound
00010FEE 7200                       		moveq	#0,d1
00010FF0 6100 FF76                  		bsr.w	@loop
00010FF4 5429 0024                  		addq.b	#2,obRoutine(a1)
00010FF8 08E9 0004 0002             		bset	#4,obGfx(a1)
00010FFE 0669 0100 000C             		addi.w	#$100,obY(a1)
00011004 337C 0000 0018             		move.w	#0,obPriority(a1)
0001100A 3368 0030 0030             		move.w	$30(a0),$30(a1)
00011010 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
00011016 117C 0000 0028             		move.b	#0,obSubtype(a0)
0001101C                            
0001101C                            	@sound:
00011026                            
00011026                            Geyser_Action:	; Routine 2
00011026 7000                       		moveq	#0,d0
00011028 1028 0028                  		move.b	obSubtype(a0),d0
0001102C D040                       		add.w	d0,d0
0001102E 323B 0000                  		move.w	Geyser_Types(pc,d0.w),d1
00011032 4EBB 1000                  		jsr	Geyser_Types(pc,d1.w)
00011036 6100 E46E                  		bsr.w	SpeedToPos
0001103A 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
00011040 6100 B532                  		bsr.w	AnimateSprite
00011044                            
00011044                            Geyser_ChkDel:
00011062 4E75                       		rts	
00011064                            ; ===========================================================================
00011064 0000                       Geyser_Types:	dc.w Geyser_Type00-Geyser_Types
00011066 0000                       		dc.w Geyser_Type01-Geyser_Types
00011068                            ; ===========================================================================
00011068                            
00011068                            Geyser_Type00:
00011068 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
0001106E 3028 0030                  		move.w	$30(a0),d0
00011072 B068 000C                  		cmp.w	obY(a0),d0
00011076 6400                       		bcc.s	locret_EFDA
00011078 5828 0024                  		addq.b	#4,obRoutine(a0)
0001107C 2268 003C                  		movea.l	$3C(a0),a1
00011080 137C 0003 001C             		move.b	#3,obAnim(a1)
00011086                            
00011086                            locret_EFDA:
00011086 4E75                       		rts	
00011088                            ; ===========================================================================
00011088                            
00011088                            Geyser_Type01:
00011088 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
0001108E 3028 0030                  		move.w	$30(a0),d0
00011092 B068 000C                  		cmp.w	obY(a0),d0
00011096 6400                       		bcc.s	locret_EFFA
00011098 5828 0024                  		addq.b	#4,obRoutine(a0)
0001109C 2268 003C                  		movea.l	$3C(a0),a1
000110A0 137C 0001 001C             		move.b	#1,obAnim(a1)
000110A6                            
000110A6                            locret_EFFA:
000110A6 4E75                       		rts	
000110A8                            ; ===========================================================================
000110A8                            
000110A8                            loc_EFFC:	; Routine 4
000110A8 2268 003C                  		movea.l	$3C(a0),a1
000110AC 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
000110B2 6700 0000                  		beq.w	Geyser_Delete
000110B6 3029 000C                  		move.w	obY(a1),d0
000110BA 0640 0060                  		addi.w	#$60,d0
000110BE 3140 000C                  		move.w	d0,obY(a0)
000110C2 9068 0030                  		sub.w	$30(a0),d0
000110C6 4440                       		neg.w	d0
000110C8 7208                       		moveq	#8,d1
000110CA 0C40 0040                  		cmpi.w	#$40,d0
000110CE 6C00                       		bge.s	loc_F026
000110D0 720B                       		moveq	#$B,d1
000110D2                            
000110D2                            loc_F026:
000110D2 0C40 0080                  		cmpi.w	#$80,d0
000110D6 6F00                       		ble.s	loc_F02E
000110D8 720E                       		moveq	#$E,d1
000110DA                            
000110DA                            loc_F02E:
000110DA 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000110DE 6A00                       		bpl.s	loc_F04C
000110E0 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
000110E6 5228 001B                  		addq.b	#1,obAniFrame(a0)
000110EA 0C28 0002 001B             		cmpi.b	#2,obAniFrame(a0)
000110F0 6500                       		bcs.s	loc_F04C
000110F2 117C 0000 001B             		move.b	#0,obAniFrame(a0)
000110F8                            
000110F8                            loc_F04C:
000110F8 1028 001B                  		move.b	obAniFrame(a0),d0
000110FC D001                       		add.b	d1,d0
000110FE 1140 001A                  		move.b	d0,obFrame(a0)
00011102 6000 FF40                  		bra.w	Geyser_ChkDel
00011106                            ; ===========================================================================
00011106                            
00011106                            Geyser_Delete:	; Routine 6
00011106 6000 E3F2                  		bra.w	DeleteObject
00011106 6000 E3F2                  		bra.w	DeleteObject
0001110A                            		include	"_incObj\54 Lava Tag.asm"
0001110A                            ; ---------------------------------------------------------------------------
0001110A                            ; Object 54 - invisible	lava tag (MZ)
0001110A                            ; ---------------------------------------------------------------------------
0001110A                            
0001110A                            LavaTag:
0001110A 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)	;TIS
00011110 6E00 0000                  		bgt	WaterTag	;TIS
00011114 7000                       		moveq	#0,d0
00011116 1028 0024                  		move.b	obRoutine(a0),d0
0001111A 323B 0000                  		move.w	LTag_Index(pc,d0.w),d1
0001111E 4EFB 1000                  		jmp	LTag_Index(pc,d1.w)
00011122                            ; ===========================================================================
00011122 0000                       LTag_Index:	dc.w LTag_Main-LTag_Index
00011124 0000                       		dc.w LTag_ChkDel-LTag_Index
00011126                            
00011126 9694 95                    LTag_ColTypes:	dc.b $96, $94, $95
0001112A 00                         		even
0001112A                            ; ===========================================================================
0001112A                            
0001112A                            LTag_Main:	; Routine 0
0001112A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001112E 7000                       		moveq	#0,d0
00011130 1028 0028                  		move.b	obSubtype(a0),d0
00011134 117B 00F0 0020             		move.b	LTag_ColTypes(pc,d0.w),obColType(a0)
0001113A 217C 0000 0000 0004        		move.l	#Map_LTag,obMap(a0)
00011142 117C 0084 0001             		move.b	#$84,obRender(a0)
00011148                            
00011148                            LTag_ChkDel:	; Routine 2
00011148 3028 0008                  		move.w	obX(a0),d0
0001114C 0240 FF80                  		andi.w	#$FF80,d0
00011150 3238 F700                  		move.w	(v_screenposx).w,d1
00011154 0441 0080                  		subi.w	#$80,d1
00011158 0241 FF80                  		andi.w	#$FF80,d1
0001115C 9041                       		sub.w	d1,d0
0001115E 6B00 E39A                  		bmi.w	DeleteObject
00011162 0C40 0280                  		cmpi.w	#$280,d0
00011166 6200 E392                  		bhi.w	DeleteObject
0001116A 4E75                       		rts
0001116C                            
0001116C                            
0001116C                            ; ---------------------------------------------------------------------------
0001116C                            ; Object 54a - invisible	water tag (MZ) - TIS
0001116C                            ; ---------------------------------------------------------------------------
0001116C                            
0001116C                            WaterTag:	
0001116C 7000                       		moveq	#0,d0
0001116E 1028 0024                  		move.b	obRoutine(a0),d0
00011172 323B 0000                  		move.w	WTag_Index(pc,d0.w),d1
00011176 4EFB 1000                  		jmp	WTag_Index(pc,d1.w)
0001117A                            ; ===========================================================================
0001117A 0000                       WTag_Index:	dc.w WTag_Main-WTag_Index
0001117C 0000                       		dc.w WTag_ChkDel-WTag_Index
0001117E                            
0001117E 9694 95                    WTag_ColTypes:	dc.b $96, $94, $95
00011182 00                         		even
00011182                            ; ===========================================================================
00011182                            
00011182                            
00011182                            WTag_Main:	; Routine 0
00011182 5428 0024                  		addq.b	#2,obRoutine(a0)
00011186 7000                       		moveq	#0,d0
00011188                            		;move.b	obSubtype(a0),d0
00011188                            		;move.b	WTag_ColTypes(pc,d0.w),obColType(a0)
00011188 0400 00F0                  		sub.b	#$F0,d0
0001118C 1178 0096 0020             		move.b	$96,obColType(a0)							
00011192                            		;move.l	#Map_LTag,obMap(a0)
00011192                            		;move.b	#$84,obRender(a0)
00011192                            
00011192                            WTag_ChkDel:	; Routine 2
00011192 3028 0008                  		move.w	obX(a0),d0
00011196 0240 FF80                  		andi.w	#$FF80,d0
0001119A 3238 F700                  		move.w	(v_screenposx).w,d1
0001119E 0441 0080                  		subi.w	#$80,d1
000111A2 0241 FF80                  		andi.w	#$FF80,d1
000111A6 9041                       		sub.w	d1,d0
000111A8 6B00 E350                  		bmi.w	DeleteObject
000111AC 0C40 0280                  		cmpi.w	#$280,d0
000111B0 6200 E348                  		bhi.w	DeleteObject
000111B4 4E75                       		rts
000111B6                            
000111B6                            
000111B6                            Map_LTag:	include	"_maps\Lava Tag.asm"
000111B6                            ; ---------------------------------------------------------------------------
000111B6                            ; Sprite mappings - invisible lava tag (MZ)
000111B6                            ; ---------------------------------------------------------------------------
000111B6                            Map_LTag_internal:
000111B6 0000                       		dc.w @0-Map_LTag_internal
000111B8 00                         @0:		dc.b 0		; no sprite, because the tag is invisible!
000111BA 00                         		even
000111BA 00                         		even
000111BA                            		include	"_anim\Lava Geyser.asm"
000111BA                            ; ---------------------------------------------------------------------------
000111BA                            ; Animation script - geyser of lava (MZ)
000111BA                            ; ---------------------------------------------------------------------------
000111BA 0000                       Ani_Geyser:	dc.w @bubble1-Ani_Geyser
000111BC 0000                       		dc.w @bubble2-Ani_Geyser
000111BE 0000                       		dc.w @end-Ani_Geyser
000111C0 0000                       		dc.w @bubble3-Ani_Geyser
000111C2 0000                       		dc.w @blank-Ani_Geyser
000111C4 0000                       		dc.w @bubble4-Ani_Geyser
000111C6 0200 0100 0104 0504 05FC   @bubble1:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	afRoutine
000111D0 0202 03FF                  @bubble2:	dc.b 2,	2, 3, afEnd
000111D4 0206 07FF                  @end:		dc.b 2,	6, 7, afEnd
000111D8 0202 0300 0100 01FC        @bubble3:	dc.b 2,	2, 3, 0, 1, 0, 1, afRoutine
000111E0 0F13 FF                    @blank:		dc.b $F, $13, afEnd
000111E4 00                         		even
000111E4 0211 12FF                  @bubble4:	dc.b 2,	$11, $12, afEnd
000111E8                            		even
000111E8                            		even
000111E8                            Map_Geyser:	include	"_maps\Lava Geyser.asm"
000111E8                            ; ---------------------------------------------------------------------------
000111E8                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
000111E8                            ; ---------------------------------------------------------------------------
000111E8                            Map_Geyser_internal:
000111E8 0000                       		dc.w @bubble1-Map_Geyser_internal
000111EA 0000                       		dc.w @bubble2-Map_Geyser_internal
000111EC 0000                       		dc.w @bubble3-Map_Geyser_internal
000111EE 0000                       		dc.w @bubble4-Map_Geyser_internal
000111F0 0000                       		dc.w @bubble5-Map_Geyser_internal
000111F2 0000                       		dc.w @bubble6-Map_Geyser_internal
000111F4 0000                       		dc.w @end1-Map_Geyser_internal
000111F6 0000                       		dc.w @end2-Map_Geyser_internal
000111F8 0000                       		dc.w @medcolumn1-Map_Geyser_internal
000111FA 0000                       		dc.w @medcolumn2-Map_Geyser_internal
000111FC 0000                       		dc.w @medcolumn3-Map_Geyser_internal
000111FE 0000                       		dc.w @shortcolumn1-Map_Geyser_internal
00011200 0000                       		dc.w @shortcolumn2-Map_Geyser_internal
00011202 0000                       		dc.w @shortcolumn3-Map_Geyser_internal
00011204 0000                       		dc.w @longcolumn1-Map_Geyser_internal
00011206 0000                       		dc.w @longcolumn2-Map_Geyser_internal
00011208 0000                       		dc.w @longcolumn3-Map_Geyser_internal
0001120A 0000                       		dc.w @bubble7-Map_Geyser_internal
0001120C 0000                       		dc.w @bubble8-Map_Geyser_internal
0001120E 0000                       		dc.w @blank-Map_Geyser_internal
00011210 02                         @bubble1:	dc.b 2
00011211 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
00011216 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0001121B 02                         @bubble2:	dc.b 2
0001121C EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
00011221 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
00011226 04                         @bubble3:	dc.b 4
00011227 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0001122C F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00011231 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00011236 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0001123B 04                         @bubble4:	dc.b 4
0001123C EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00011241 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00011246 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0001124B EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00011250 06                         @bubble5:	dc.b 6
00011251 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00011256 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0001125B F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00011260 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00011265 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0001126A E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0001126F 06                         @bubble6:	dc.b 6
00011270 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00011275 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0001127A F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0001127F EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00011284 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
00011289 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0001128E 02                         @end1:		dc.b 2
0001128F E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00011294 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
00011299 02                         @end2:		dc.b 2
0001129A E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0001129F E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
000112A4 0A                         @medcolumn1:	dc.b $A
000112A5 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000112AA 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000112AF B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000112B4 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000112B9 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000112BE D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000112C3 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
000112C8 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
000112CD 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
000112D2 100F 0840 00               		dc.b $10, $F, 8, $40, 0
000112D7 0A                         @medcolumn2:	dc.b $A
000112D8 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000112DD 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000112E2 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000112E7 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000112EC D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000112F1 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000112F6 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
000112FB F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00011300 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00011305 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0001130A 0A                         @medcolumn3:	dc.b $A
0001130B 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011310 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011315 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001131A B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0001131F D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011324 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00011329 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0001132E F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00011333 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00011338 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0001133D 06                         @shortcolumn1:	dc.b 6
0001133E 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00011343 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00011348 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0001134D B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00011352 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00011357 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0001135C 06                         @shortcolumn2:	dc.b 6
0001135D 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011362 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011367 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001136C B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011371 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011376 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001137B 06                         @shortcolumn3:	dc.b 6
0001137C 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011381 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011386 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001138B B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00011390 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011395 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001139A 10                         @longcolumn1:	dc.b $10
0001139B 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000113A0 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000113A5 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000113AA B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000113AF D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000113B4 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000113B9 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
000113BE F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
000113C3 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
000113C8 100F 0840 00               		dc.b $10, $F, 8, $40, 0
000113CD 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
000113D2 300F 0840 00               		dc.b $30, $F, 8, $40, 0
000113D7 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
000113DC 500F 0840 00               		dc.b $50, $F, 8, $40, 0
000113E1 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
000113E6 700F 0840 00               		dc.b $70, $F, 8, $40, 0
000113EB 10                         @longcolumn2:	dc.b $10
000113EC 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000113F1 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000113F6 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000113FB B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011400 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011405 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001140A F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0001140F F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00011414 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00011419 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0001141E 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00011423 300F 0850 00               		dc.b $30, $F, 8, $50, 0
00011428 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0001142D 500F 0850 00               		dc.b $50, $F, 8, $50, 0
00011432 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
00011437 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0001143C 10                         @longcolumn3:	dc.b $10
0001143D 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011442 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011447 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001144C B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00011451 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011456 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001145B F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00011460 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00011465 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0001146A 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0001146F 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00011474 300F 0860 00               		dc.b $30, $F, 8, $60, 0
00011479 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0001147E 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00011483 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
00011488 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0001148D 06                         @bubble7:	dc.b 6
0001148E E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00011493 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00011498 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0001149D E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
000114A2 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
000114A7 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
000114AC 06                         @bubble8:	dc.b 6
000114AD E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
000114B2 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
000114B7 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
000114BC E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
000114C1 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
000114C6 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
000114CB 00                         @blank:	dc.b 0
000114CC                            		even
000114CC                            		even
000114CC                            
000114CC                            		include	"_incObj\40 Moto Bug.asm" ; includes "_incObj\sub RememberState.asm"
000114CC                            ; ---------------------------------------------------------------------------
000114CC                            ; Object 40 - Moto Bug enemy (GHZ)
000114CC                            ; ---------------------------------------------------------------------------
000114CC                            
000114CC                            MotoBug:
000114CC 7000                       		moveq	#0,d0
000114CE 1028 0024                  		move.b	obRoutine(a0),d0
000114D2 323B 0000                  		move.w	Moto_Index(pc,d0.w),d1
000114D6 4EFB 1000                  		jmp	Moto_Index(pc,d1.w)
000114DA                            ; ===========================================================================
000114DA 0000                       Moto_Index:	dc.w Moto_Main-Moto_Index
000114DC 0000                       		dc.w Moto_Action-Moto_Index
000114DE 0000                       		dc.w Moto_Animate-Moto_Index
000114E0 0000                       		dc.w Moto_Delete-Moto_Index
000114E2                            ; ===========================================================================
000114E2                            
000114E2                            Moto_Main:	; Routine 0
000114E2 217C 0000 0000 0004        		move.l	#Map_Moto,obMap(a0)
000114EA 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
000114F0 117C 0004 0001             		move.b	#4,obRender(a0)
000114F6 317C 0200 0018             		move.w	#$200,obPriority(a0)
000114FC 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011502 4A28 001C                  		tst.b	obAnim(a0)	; is object a smoke trail?
00011506 6600                       		bne.s	@smoke		; if yes, branch
00011508 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001150E 117C 0008 0017             		move.b	#8,obWidth(a0)
00011514 117C 000C 0020             		move.b	#$C,obColType(a0)
0001151A 6100 DF52                  		bsr.w	ObjectFall
0001151E 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00011524 4A41                       		tst.w	d1
00011526 6A00                       		bpl.s	@notonfloor
00011528 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
0001152C 317C 0000 0012             		move.w	#0,obVelY(a0)
00011532 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Moto_Action next
00011536 0868 0000 0022             		bchg	#0,obStatus(a0)
0001153C                            
0001153C                            	@notonfloor:
0001153C 4E75                       		rts	
0001153E                            ; ===========================================================================
0001153E                            
0001153E                            @smoke:
0001153E 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Moto_Animate next
00011542 6000 0000                  		bra.w	Moto_Animate
00011546                            ; ===========================================================================
00011546                            
00011546                            Moto_Action:	; Routine 2
00011546 7000                       		moveq	#0,d0
00011548 1028 0025                  		move.b	ob2ndRout(a0),d0
0001154C 323B 0000                  		move.w	Moto_ActIndex(pc,d0.w),d1
00011550 4EBB 1000                  		jsr	Moto_ActIndex(pc,d1.w)
00011554 43F9 0000 0000             		lea	(Ani_Moto).l,a1
0001155A 6100 B018                  		bsr.w	AnimateSprite
0001155E                            
0001155E                            		include	"_incObj\sub RememberState.asm" ; Moto_Action terminates in this file
0001155E                            ; ---------------------------------------------------------------------------
0001155E                            ; Subroutine to remember whether an object is destroyed/collected
0001155E                            ; ---------------------------------------------------------------------------
0001155E                            
0001155E                            RememberState:
0001157C 6000 DF3C                  		bra.w	DisplaySprite
00011580                            
00011580                            	@offscreen:
00011580 45F8 FC00                  		lea	(v_objstate).w,a2
00011584 7000                       		moveq	#0,d0
00011586 1028 0023                  		move.b	obRespawnNo(a0),d0
0001158A 6700                       		beq.s	@delete
0001158C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011592                            
00011592                            	@delete:
00011592 6000 DF66                  		bra.w	DeleteObject
00011592 6000 DF66                  		bra.w	DeleteObject
00011596                            
00011596                            ; ===========================================================================
00011596 0000                       Moto_ActIndex:	dc.w @move-Moto_ActIndex
00011598 0000                       		dc.w @findfloor-Moto_ActIndex
0001159A                            
0001159A =00000030                  @time:		equ $30
0001159A =00000033                  @smokedelay:	equ $33
0001159A                            ; ===========================================================================
0001159A                            
0001159A                            @move:
0001159A 5368 0030                  		subq.w	#1,@time(a0)	; subtract 1 from pause	time
0001159E 6A00                       		bpl.s	@wait		; if time remains, branch
000115A0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000115A4 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object to the left
000115AA 117C 0001 001C             		move.b	#1,obAnim(a0)
000115B0 0868 0000 0022             		bchg	#0,obStatus(a0)
000115B6 6600                       		bne.s	@wait
000115B8 4468 0010                  		neg.w	obVelX(a0)	; change direction
000115BC                            
000115BC                            	@wait:
000115BC 4E75                       		rts	
000115BE                            ; ===========================================================================
000115BE                            
000115BE                            @findfloor:
000115BE 6100 DEE6                  		bsr.w	SpeedToPos
000115C2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
000115C8 0C41 FFF8                  		cmpi.w	#-8,d1
000115CC 6D00                       		blt.s	@pause
000115CE 0C41 000C                  		cmpi.w	#$C,d1
000115D2 6C00                       		bge.s	@pause
000115D4 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
000115D8 5328 0033                  		subq.b	#1,@smokedelay(a0)
000115DC 6A00                       		bpl.s	@nosmoke
000115DE 117C 000F 0033             		move.b	#$F,@smokedelay(a0)
000115E4 6100 E46E                  		bsr.w	FindFreeObj
000115E8 6600                       		bne.s	@nosmoke
000115EA 12BC 0040                  		move.b	#id_MotoBug,0(a1) ; load exhaust smoke object
000115EE 3368 0008 0008             		move.w	obX(a0),obX(a1)
000115F4 3368 000C 000C             		move.w	obY(a0),obY(a1)
000115FA 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00011600 137C 0002 001C             		move.b	#2,obAnim(a1)
00011606                            
00011606                            	@nosmoke:
00011606 4E75                       		rts	
00011608                            
00011608                            @pause:
00011608 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001160C 317C 003B 0030             		move.w	#59,@time(a0)	; set pause time to 1 second
00011612 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop the object moving
00011618 117C 0000 001C             		move.b	#0,obAnim(a0)
0001161E 4E75                       		rts	
00011620                            ; ===========================================================================
00011620                            
00011620                            Moto_Animate:	; Routine 4
00011620 43F9 0000 0000             		lea	(Ani_Moto).l,a1
00011626 6100 AF4C                  		bsr.w	AnimateSprite
0001162A 6000 DE8E                  		bra.w	DisplaySprite
0001162E                            ; ===========================================================================
0001162E                            
0001162E                            Moto_Delete:	; Routine 6
0001162E 6000 DECA                  		bra.w	DeleteObject
0001162E 6000 DECA                  		bra.w	DeleteObject
00011632                            		include	"_anim\Moto Bug.asm"
00011632                            ; ---------------------------------------------------------------------------
00011632                            ; Animation script - Motobug enemy
00011632                            ; ---------------------------------------------------------------------------
00011632 0000                       Ani_Moto:	dc.w @stand-Ani_Moto
00011634 0000                       		dc.w @walk-Ani_Moto
00011636 0000                       		dc.w @smoke-Ani_Moto
00011638                            
00011638 0F02 FF                    @stand:		dc.b $F, 2, afEnd
0001163C 00                         		even
0001163C 0700 0100 02FF             @walk:		dc.b 7,	0, 1, 0, 2, afEnd
00011642 0103 0603 0604 0604 0604+  @smoke:		dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, afRoutine
00011650 00                         		even
00011650 00                         		even
00011650                            Map_Moto:	include	"_maps\Moto Bug.asm"
00011650                            ; --------------------------------------------------------------------------------
00011650                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011650                            ; --------------------------------------------------------------------------------
00011650                            
00011650                            SME_TTY9T:	
00011650 0000 0000                  		dc.w SME_TTY9T_E-SME_TTY9T, SME_TTY9T_23-SME_TTY9T	
00011654 0000 0000                  		dc.w SME_TTY9T_38-SME_TTY9T, SME_TTY9T_52-SME_TTY9T	
00011658 0000 0000                  		dc.w SME_TTY9T_58-SME_TTY9T, SME_TTY9T_5E-SME_TTY9T	
0001165C 0000                       		dc.w SME_TTY9T_64-SME_TTY9T	
0001165E 04                         SME_TTY9T_E:	dc.b 4	
0001165F F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
00011664 000C 2008 EC               		dc.b 0, $C, $20, 8, $EC	
00011669 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
0001166E 0808 200E F4               		dc.b 8, 8, $20, $E, $F4	
00011673 04                         SME_TTY9T_23:	dc.b 4	
00011674 F10D 2000 EC               		dc.b $F1, $D, $20, 0, $EC	
00011679 010C 2008 EC               		dc.b 1, $C, $20, 8, $EC	
0001167E F901 200C 0C               		dc.b $F9, 1, $20, $C, $C	
00011683 0908 2011 F4               		dc.b 9, 8, $20, $11, $F4	
00011688 05                         SME_TTY9T_38:	dc.b 5	
00011689 F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
0001168E 000C 2014 EC               		dc.b 0, $C, $20, $14, $EC	
00011693 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
00011698 0804 2018 EC               		dc.b 8, 4, $20, $18, $EC	
0001169D 0804 2012 FC               		dc.b 8, 4, $20, $12, $FC	
000116A2 01                         SME_TTY9T_52:	dc.b 1	
000116A3 FA00 001A 10               		dc.b $FA, 0, 0, $1A, $10	
000116A8 01                         SME_TTY9T_58:	dc.b 1	
000116A9 FA00 001B 10               		dc.b $FA, 0, 0, $1B, $10	
000116AE 01                         SME_TTY9T_5E:	dc.b 1	
000116AF FA00 001C 10               		dc.b $FA, 0, 0, $1C, $10	
000116B4 00                         SME_TTY9T_64:	dc.b 0	
000116B6 00                         		even
000116B6 00                         		even
000116B6                            		include	"_incObj\4F.asm"
000116B6                            ; ---------------------------------------------------------------------------
000116B6                            ; Object 4F - Splats
000116B6                            ; ---------------------------------------------------------------------------
000116B6                            
000116B6                            Obj4F:
000116B6 7000                                       moveq   #0,d0
000116B8 1028 0024                                  move.b  $24(a0),d0
000116BC 323B 0000                                  move.w  ObjSplats_Index(pc,d0.w),d1
000116C0 4EFB 1000                                  jmp     ObjSplats_Index(pc,d1.w)
000116C4                            ; ---------------------------------------------------------------------------
000116C4 0000                       ObjSplats_Index:dc.w ObjSplats_Init-*
000116C6 0000                                       dc.w loc_D246-ObjSplats_Index
000116C8 0000                                       dc.w ObjSplats_Bounce-ObjSplats_Index
000116CA 0000                                       dc.w loc_D2C8-ObjSplats_Index
000116CC                            ; ---------------------------------------------------------------------------
000116CC                            
000116CC                            ObjSplats_Init:
000116CC 5428 0024                                  addq.b  #2,$24(a0)
000116D0 217C 0000 0000 0004                        move.l  #Map_Splats,4(a0)
000116D8 317C 24E4 0002                             move.w  #$24E4,2(a0)
000116DE 117C 0004 0001                             move.b  #4,1(a0)
000116E4 117C 0004 0014                             move.b  #4,obActWid(a0)
000116EA 317C 0200 0018             				move.w	#$200,obPriority(a0)
000116F0 117C 0014 0016                             move.b  #$14,$16(a0)
000116F6 117C 0002 0020                             move.b  #2,$20(a0)
000116FC 4A28 0028                                  tst.b   $28(a0)
00011700 6700                                       beq.s   loc_D246
00011702 343C 0300                                  move.w  #$300,d2
00011706 6000                                       bra.s   ObjSplats_FaceRight
00011708                            ; ---------------------------------------------------------------------------
00011708                            
00011708                            loc_D246:
00011708 343C 00E0                                  move.w  #$E0,d2
0001170C                            
0001170C                            ObjSplats_FaceRight:
0001170C 323C 0100                                  move.w  #$100,d1
00011710 08E8 0000 0001                             bset    #0,1(a0)
00011716 3038 D008                                  move.w  ($FFFFD008).w,d0
0001171A 9068 0008                                  sub.w   8(a0),d0
0001171E 6400                                       bcc.s   ObjSplats_Move
00011720 4440                                       neg.w   d0
00011722 4441                                       neg.w   d1
00011724 08A8 0000 0001                             bclr    #0,1(a0)
0001172A                            
0001172A                            ObjSplats_Move:
0001172A B042                                       cmp.w   d2,d0
0001172C 6400                                       bcc.s   ObjSplats_Bounce
0001172E 3141 0010                                  move.w  d1,$10(a0)
00011732 5428 0024                                  addq.b  #2,$24(a0)
00011736                            
00011736                            ObjSplats_Bounce:
00011736 6100 DD36                                  bsr.w   ObjectFall
0001173A 117C 0001 001A                             move.b  #1,$1A(a0)
00011740 4A68 0012                                  tst.w   $12(a0)
00011744 6B00                                       bmi.s   ObjSplats_Turn
00011746 117C 0000 001A                             move.b  #0,$1A(a0)
0001174C 6100 0000                                  bsr.w   ObjFloorDist
00011750 4A41                                       tst.w   d1
00011752 6A00                                       bpl.s   ObjSplats_Turn
00011754 3011                                       move.w  (a1),d0
00011756 0240 03FF                                  andi.w  #$3FF,d0
0001175A 0C40 02D2                                  cmpi.w  #$2D2,d0
0001175E 6500                                       bcs.s   ObjSplats_Fall
00011760 5428 0024                                  addq.b  #2,$24(a0)
00011764 6000                                       bra.s   ObjSplats_Turn
00011766                            ; ---------------------------------------------------------------------------
00011766                            
00011766                            ObjSplats_Fall:
00011766 D368 000C                                  add.w   d1,$C(a0)
0001176A 317C FC00 0012                             move.w  #$FC00,$12(a0)
00011770                            
00011770                            ObjSplats_Turn:
00011770 6100 0000                                  bsr.w   Yad_ChkWall
00011774 6700                                       beq.s   loc_D2C4
00011776 4468 0010                                  neg.w   $10(a0)
0001177A 0868 0000 0001                             bchg    #0,1(a0)
00011780 0868 0000 0022                             bchg    #0,$22(a0)
00011786                            
00011786                            loc_D2C4:
00011786 6000 FDD6                                  bra.w   RememberState
0001178A                            ; ---------------------------------------------------------------------------
0001178A                            
0001178A                            loc_D2C8:
0001178A 6100 DCE2                                  bsr.w   ObjectFall
0001178E 6100 DD2A                                  bsr.w   DisplaySprite
00011792 4A28 0001                                  tst.b   1(a0)
00011796 6A00 DD62                                  bpl.w   DeleteObject
0001179A 4E75                                       rts
0001179A 4E75                                       rts
0001179C                            Map_Splats:	include	"_maps\Splats.asm"
0001179C 0000                       Map_Splats_internal:     dc.w unk_D310-*
0001179E 0000                                       dc.w unk_D31B-Map_Splats_internal
000117A0 02                         unk_D310:       dc.b   2
000117A1 EC0B 0000 F40C 0800 0CF4                   dc.b $EC, $B, 0, 0, $F4, $C, 8, 0, $C, $F4
000117AB 02                         unk_D31B:       dc.b   2
000117AC EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
000117AC EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
000117B6                            
000117B6                            		include	"_incObj\50 Yadrin.asm"
000117B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000117B6                            
000117B6                            
000117B6                            Yad_ChkWall:
000117B6 3038 FE04                  		move.w	(v_framecount).w,d0
000117BA D047                       		add.w	d7,d0
000117BC 0240 0003                  		andi.w	#3,d0
000117C0 6600                       		bne.s	loc_F836
000117C2 7600                       		moveq	#0,d3
000117C4 1628 0014                  		move.b	obActWid(a0),d3
000117C8 4A68 0010                  		tst.w	obVelX(a0)
000117CC 6B00                       		bmi.s	loc_F82C
000117CE 6100 0000                  		bsr.w	ObjHitWallRight
000117D2 4A41                       		tst.w	d1
000117D4 6A00                       		bpl.s	loc_F836
000117D6                            
000117D6                            loc_F828:
000117D6 7001                       		moveq	#1,d0
000117D8 4E75                       		rts	
000117DA                            ; ===========================================================================
000117DA                            
000117DA                            loc_F82C:
000117DA 4643                       		not.w	d3
000117DC 6100 0000                  		bsr.w	ObjHitWallLeft
000117E0 4A41                       		tst.w	d1
000117E2 6BF2                       		bmi.s	loc_F828
000117E4                            
000117E4                            loc_F836:
000117E4 7000                       		moveq	#0,d0
000117E6 4E75                       		rts	
000117E8                            ; End of function Yad_ChkWall
000117E8                            
000117E8                            ; ===========================================================================
000117E8                            ; ---------------------------------------------------------------------------
000117E8                            ; Object 50 - Yadrin enemy (SYZ)
000117E8                            ; ---------------------------------------------------------------------------
000117E8                            
000117E8                            Yadrin:
000117E8 7000                       		moveq	#0,d0
000117EA 1028 0024                  		move.b	obRoutine(a0),d0
000117EE 323B 0000                  		move.w	Yad_Index(pc,d0.w),d1
000117F2 4EFB 1000                  		jmp	Yad_Index(pc,d1.w)
000117F6                            ; ===========================================================================
000117F6 0000                       Yad_Index:	dc.w Yad_Main-Yad_Index
000117F8 0000                       		dc.w Yad_Action-Yad_Index
000117FA                            
000117FA =00000030                  yad_timedelay:	equ $30
000117FA                            ; ===========================================================================
000117FA                            
000117FA                            Yad_Main:	; Routine 0
000117FA 217C 0000 0000 0004        		move.l	#Map_Yad,obMap(a0)
00011802 317C 247B 0002             		move.w	#$247B,obGfx(a0)
00011808 117C 0004 0001             		move.b	#4,obRender(a0)
0001180E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011814 117C 0014 0014             		move.b	#$14,obActWid(a0)
0001181A 117C 0011 0016             		move.b	#$11,obHeight(a0)
00011820 117C 0008 0017             		move.b	#8,obWidth(a0)
00011826 117C 00CC 0020             		move.b	#$CC,obColType(a0)
0001182C 6100 DC40                  		bsr.w	ObjectFall
00011830 6100 0000                  		bsr.w	ObjFloorDist
00011834 4A41                       		tst.w	d1
00011836 6A00                       		bpl.s	locret_F89E
00011838 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
0001183C 317C 0000 0012             		move.w	#0,obVelY(a0)
00011842 5428 0024                  		addq.b	#2,obRoutine(a0)
00011846 0868 0000 0022             		bchg	#0,obStatus(a0)
0001184C                            
0001184C                            	locret_F89E:
0001184C 4E75                       		rts	
0001184E                            ; ===========================================================================
0001184E                            
0001184E                            Yad_Action:	; Routine 2
0001184E 7000                       		moveq	#0,d0
00011850 1028 0025                  		move.b	ob2ndRout(a0),d0
00011854 323B 0000                  		move.w	Yad_Index2(pc,d0.w),d1
00011858 4EBB 1000                  		jsr	Yad_Index2(pc,d1.w)
0001185C 43F9 0000 0000             		lea	(Ani_Yad).l,a1
00011862 6100 AD10                  		bsr.w	AnimateSprite
00011866 6000 FCF6                  		bra.w	RememberState
0001186A                            ; ===========================================================================
0001186A 0000                       Yad_Index2:	dc.w Yad_Move-Yad_Index2
0001186C 0000                       		dc.w Yad_FixToFloor-Yad_Index2
0001186E                            ; ===========================================================================
0001186E                            
0001186E                            Yad_Move:
0001186E 5368 0030                  		subq.w	#1,yad_timedelay(a0) ; subtract 1 from pause time
00011872 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00011874 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011878 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object
0001187E 117C 0001 001C             		move.b	#1,obAnim(a0)
00011884 0868 0000 0022             		bchg	#0,obStatus(a0)
0001188A 6600                       		bne.s	locret_F8E2
0001188C 4468 0010                  		neg.w	obVelX(a0)	; change direction
00011890                            
00011890                            	locret_F8E2:
00011890 4E75                       		rts	
00011892                            ; ===========================================================================
00011892                            
00011892                            Yad_FixToFloor:
00011892 6100 DC12                  		bsr.w	SpeedToPos
00011896 6100 0000                  		bsr.w	ObjFloorDist
0001189A 0C41 FFF8                  		cmpi.w	#-8,d1
0001189E 6D00                       		blt.s	Yad_Pause
000118A0 0C41 000C                  		cmpi.w	#$C,d1
000118A4 6C00                       		bge.s	Yad_Pause
000118A6 D368 000C                  		add.w	d1,obY(a0)	; match	object's position to the floor
000118AA 6100 FF0A                  		bsr.w	Yad_ChkWall
000118AE 6600                       		bne.s	Yad_Pause
000118B0 4E75                       		rts	
000118B2                            ; ===========================================================================
000118B2                            
000118B2                            Yad_Pause:
000118B2 5528 0025                  		subq.b	#2,ob2ndRout(a0)
000118B6 317C 003B 0030             		move.w	#59,yad_timedelay(a0) ; set pause time to 1 second
000118BC 317C 0000 0010             		move.w	#0,obVelX(a0)
000118C2 117C 0000 001C             		move.b	#0,obAnim(a0)
000118C8 4E75                       		rts	
000118C8 4E75                       		rts	
000118CA                            		include	"_anim\Yadrin.asm"
000118CA                            ; ---------------------------------------------------------------------------
000118CA                            ; Animation script - Yadrin enemy
000118CA                            ; ---------------------------------------------------------------------------
000118CA 0000                       Ani_Yad:	dc.w @stand-Ani_Yad
000118CC 0000                       		dc.w @walk-Ani_Yad
000118CE                            
000118CE 0800 FF                    @stand:		dc.b 8,	0, afEnd
000118D2 00                         		even
000118D2 0800 0002 0000 0101 0103+  @walk:		dc.b 8, 0, 0, 2, 0, 0, 1, 1, 1, 3, 1, 1, 1, afEnd
000118E0                            		even
000118E0                            		even
000118E0                            Map_Yad:	include	"_maps\Yadrin.asm"
000118E0                            ; --------------------------------------------------------------------------------
000118E0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000118E0                            ; --------------------------------------------------------------------------------
000118E0                            
000118E0                            SME_4WhIu:	
000118E0 0000 0000                  		dc.w SME_4WhIu_C-SME_4WhIu, SME_4WhIu_3A-SME_4WhIu	
000118E4 0000 0000                  		dc.w SME_4WhIu_68-SME_4WhIu, SME_4WhIu_A5-SME_4WhIu	
000118E8 0000 0000                  		dc.w SME_4WhIu_E2-SME_4WhIu, SME_4WhIu_FC-SME_4WhIu	
000118EC 09                         SME_4WhIu_C:	dc.b 9	
000118ED F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
000118F2 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
000118F7 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
000118FC FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011901 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011906 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
0001190B FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011910 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011915 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
0001191A 09                         SME_4WhIu_3A:	dc.b 9	
0001191B F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011920 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011925 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
0001192A FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
0001192F FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011934 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011939 F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
0001193E EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011943 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011948 0C                         SME_4WhIu_68:	dc.b $C	
00011949 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
0001194E FB00 601D FC               		dc.b $FB, 0, $60, $1D, $FC	
00011953 FB00 6020 04               		dc.b $FB, 0, $60, $20, 4	
00011958 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
0001195D FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011962 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011967 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
0001196C FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011971 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011976 F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
0001197B 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011980 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011985 0C                         SME_4WhIu_A5:	dc.b $C	
00011986 F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
0001198B FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011990 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011995 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
0001199A 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
0001199F F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
000119A4 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
000119A9 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
000119AE FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
000119B3 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
000119B8 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
000119BD 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
000119C2 05                         SME_4WhIu_E2:	dc.b 5	
000119C3 F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
000119C8 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
000119CD EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
000119D2 F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
000119D7 0409 0031 FC               		dc.b 4, 9, 0, $31, $FC	
000119DC 05                         SME_4WhIu_FC:	dc.b 5	
000119DD F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
000119E2 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
000119E7 EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
000119EC F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
000119F1 0409 0037 FC               		dc.b 4, 9, 0, $37, $FC	
000119F6                            		even
000119F6                            		even
000119F6                            
000119F6                            		include	"_incObj\sub SolidObject.asm"
000119F6                            ; ---------------------------------------------------------------------------
000119F6                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
000119F6                            ;
000119F6                            ; input:
000119F6                            ;	d1 = width
000119F6                            ;	d2 = height / 2 (when jumping)
000119F6                            ;	d3 = height / 2 (when walking)
000119F6                            ;	d4 = x-axis position
000119F6                            ; ---------------------------------------------------------------------------
000119F6                            
000119F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000119F6                            
000119F6                            
000119F6                            SolidObject:
000119F6 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic standing on the object?
000119FA 6700 0000                  		beq.w	Solid_ChkEnter	; if not, branch
000119FE 3401                       		move.w	d1,d2
00011A00 D442                       		add.w	d2,d2
00011A02 43F8 D000                  		lea	(v_player).w,a1
00011A06 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011A0C 6600                       		bne.s	@leave		; if yes, branch
00011A0E 3029 0008                  		move.w	obX(a1),d0
00011A12 9068 0008                  		sub.w	obX(a0),d0
00011A16 D041                       		add.w	d1,d0
00011A18 6B00                       		bmi.s	@leave		; if Sonic moves off the left, branch
00011A1A B042                       		cmp.w	d2,d0		; has Sonic moved off the right?
00011A1C 6500                       		bcs.s	@stand		; if not, branch
00011A1E                            
00011A1E                            	@leave:
00011A1E 08A9 0003 0022             		bclr	#3,obStatus(a1)	; clear Sonic's standing flag
00011A24 08A8 0003 0022             		bclr	#3,obStatus(a0)	; clear object's standing flag
00011A2A 4228 0025                  		clr.b	obSolid(a0)
00011A2E 7800                       		moveq	#0,d4
00011A30 4E75                       		rts	
00011A32                            
00011A32                            	@stand:
00011A32 3404                       		move.w	d4,d2
00011A34 4EB9 0000 924A             		jsr	MvSonicOnPtfm
00011A3A 7800                       		moveq	#0,d4
00011A3C 4E75                       		rts	
00011A3E                            ; ===========================================================================
00011A3E                            
00011A3E                            SolidObject71:
00011A3E 4A28 0025                  		tst.b	obSolid(a0)
00011A42 6700 0000                  		beq.w	loc_FAD0
00011A46 3401                       		move.w	d1,d2
00011A48 D442                       		add.w	d2,d2
00011A4A 43F8 D000                  		lea	(v_player).w,a1
00011A4E 0829 0001 0022             		btst	#1,obStatus(a1)
00011A54 6600                       		bne.s	@leave
00011A56 3029 0008                  		move.w	obX(a1),d0
00011A5A 9068 0008                  		sub.w	obX(a0),d0
00011A5E D041                       		add.w	d1,d0
00011A60 6B00                       		bmi.s	@leave
00011A62 B042                       		cmp.w	d2,d0
00011A64 6500                       		bcs.s	@stand
00011A66                            
00011A66                            	@leave:
00011A66 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011A6C 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011A72 4228 0025                  		clr.b	obSolid(a0)
00011A76 7800                       		moveq	#0,d4
00011A78 4E75                       		rts	
00011A7A                            
00011A7A                            	@stand:
00011A7A 3404                       		move.w	d4,d2
00011A7C 4EB9 0000 924A             		jsr	MvSonicOnPtfm
00011A82 7800                       		moveq	#0,d4
00011A84 4E75                       		rts	
00011A86                            ; ===========================================================================
00011A86                            
00011A86                            SolidObject2F:
00011A86 43F8 D000                  		lea	(v_player).w,a1
00011A8A 4A28 0001                  		tst.b	obRender(a0)
00011A8E 6A00 0000                  		bpl.w	Solid_Ignore
00011A92 3029 0008                  		move.w	obX(a1),d0
00011A96 9068 0008                  		sub.w	obX(a0),d0
00011A9A D041                       		add.w	d1,d0
00011A9C 6B00 0000                  		bmi.w	Solid_Ignore
00011AA0 3601                       		move.w	d1,d3
00011AA2 D643                       		add.w	d3,d3
00011AA4 B043                       		cmp.w	d3,d0
00011AA6 6200 0000                  		bhi.w	Solid_Ignore
00011AAA 3A00                       		move.w	d0,d5
00011AAC 0828 0000 0001             		btst	#0,obRender(a0)	; is object horizontally flipped?
00011AB2 6700                       		beq.s	@notflipped	; if not, branch
00011AB4 4645                       		not.w	d5
00011AB6 DA43                       		add.w	d3,d5
00011AB8                            
00011AB8                            	@notflipped:
00011AB8 E24D                       		lsr.w	#1,d5
00011ABA 7600                       		moveq	#0,d3
00011ABC 1632 5000                  		move.b	(a2,d5.w),d3
00011AC0 9612                       		sub.b	(a2),d3
00011AC2 3A28 000C                  		move.w	obY(a0),d5
00011AC6 9A43                       		sub.w	d3,d5
00011AC8 1629 0016                  		move.b	obHeight(a1),d3
00011ACC 4883                       		ext.w	d3
00011ACE D443                       		add.w	d3,d2
00011AD0 3629 000C                  		move.w	obY(a1),d3
00011AD4 9645                       		sub.w	d5,d3
00011AD6 5843                       		addq.w	#4,d3
00011AD8 D642                       		add.w	d2,d3
00011ADA 6B00 0000                  		bmi.w	Solid_Ignore
00011ADE 3802                       		move.w	d2,d4
00011AE0 D844                       		add.w	d4,d4
00011AE2 B644                       		cmp.w	d4,d3
00011AE4 6400 0000                  		bcc.w	Solid_Ignore
00011AE8 6000 0000                  		bra.w	loc_FB0E
00011AEC                            ; ===========================================================================
00011AEC                            
00011AEC                            Solid_ChkEnter:
00011AEC 4A28 0001                  		tst.b	obRender(a0)
00011AF0 6A00 0000                  		bpl.w	Solid_Ignore
00011AF4                            
00011AF4                            loc_FAD0:
00011AF4 43F8 D000                  		lea	(v_player).w,a1
00011AF8 3029 0008                  		move.w	obX(a1),d0
00011AFC 9068 0008                  		sub.w	obX(a0),d0
00011B00 D041                       		add.w	d1,d0
00011B02 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves off the left, branch
00011B06 3601                       		move.w	d1,d3
00011B08 D643                       		add.w	d3,d3
00011B0A B043                       		cmp.w	d3,d0		; has Sonic moved off the right?
00011B0C 6200 0000                  		bhi.w	Solid_Ignore	; if yes, branch
00011B10 1629 0016                  		move.b	obHeight(a1),d3
00011B14 4883                       		ext.w	d3
00011B16 D443                       		add.w	d3,d2
00011B18 3629 000C                  		move.w	obY(a1),d3
00011B1C 9668 000C                  		sub.w	obY(a0),d3
00011B20 5843                       		addq.w	#4,d3
00011B22 D642                       		add.w	d2,d3
00011B24 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves above, branch
00011B28 3802                       		move.w	d2,d4
00011B2A D844                       		add.w	d4,d4
00011B2C B644                       		cmp.w	d4,d3		; has Sonic moved below?
00011B2E 6400 0000                  		bcc.w	Solid_Ignore	; if yes, branch
00011B32                            
00011B32                            loc_FB0E:
00011B32 4A38 F7C8                  		tst.b	(f_lockmulti).w	; are controls locked?
00011B36 6B00 0000                  		bmi.w	Solid_Ignore	; if yes, branch
00011B3A 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic dying?
00011B40 6400 0000                  			bcc.w	Solid_Debug
00011B44 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00011B48 6600 0000                  		bne.w	Solid_Debug	; if yes, branch
00011B4C 3A00                       		move.w	d0,d5
00011B4E B240                       		cmp.w	d0,d1		; is Sonic right of centre of object?
00011B50 6400                       		bcc.s	@isright	; if yes, branch
00011B52 D241                       		add.w	d1,d1
00011B54 9041                       		sub.w	d1,d0
00011B56 3A00                       		move.w	d0,d5
00011B58 4445                       		neg.w	d5
00011B5A                            
00011B5A                            	@isright:
00011B5A 3203                       		move.w	d3,d1
00011B5C B443                       		cmp.w	d3,d2		; is Sonic below centre of object?
00011B5E 6400                       		bcc.s	@isbelow	; if yes, branch
00011B60                            
00011B60 5943                       		subq.w	#4,d3
00011B62 9644                       		sub.w	d4,d3
00011B64 3203                       		move.w	d3,d1
00011B66 4441                       		neg.w	d1
00011B68                            
00011B68                            	@isbelow:
00011B68 BA41                       		cmp.w	d1,d5
00011B6A 6200 0000                  		bhi.w	Solid_TopBottom	; if Sonic hits top or bottom, branch
00011B6E 0C41 0004                  		cmpi.w	#4,d1
00011B72 6300                       		bls.s	Solid_SideAir
00011B74 4A40                       		tst.w	d0		; where is Sonic?
00011B76 6700                       		beq.s	Solid_Centre	; if inside the object, branch
00011B78 6B00                       		bmi.s	Solid_Right	; if right of the object, branch
00011B7A 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving left?
00011B7E 6B00                       		bmi.s	Solid_Centre	; if yes, branch
00011B80 6000                       		bra.s	Solid_Left
00011B82                            ; ===========================================================================
00011B82                            
00011B82                            Solid_Right:
00011B82 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving right?
00011B86 6A00                       		bpl.s	Solid_Centre	; if yes, branch
00011B88                            
00011B88                            Solid_Left:
00011B88 337C 0000 0020             		move.w	#0,obInertia(a1)
00011B8E 337C 0000 0010             		move.w	#0,obVelX(a1)	; stop Sonic moving
00011B94                            
00011B94                            Solid_Centre:
00011B94 9169 0008                  		sub.w	d0,obX(a1)	; correct Sonic's position
00011B98 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011B9E 6600                       		bne.s	Solid_SideAir	; if yes, branch
00011BA0 08E9 0005 0022             		bset	#5,obStatus(a1)	; make Sonic push object
00011BA6 08E8 0005 0022             		bset	#5,obStatus(a0)	; make object be pushed
00011BAC 7801                       		moveq	#1,d4		; return side collision
00011BAE 4E75                       		rts	
00011BB0                            ; ===========================================================================
00011BB0                            
00011BB0                            Solid_SideAir:
00011BB0 6100                       		bsr.s	Solid_NotPushing
00011BB2 7801                       		moveq	#1,d4		; return side collision
00011BB4 4E75                       		rts	
00011BB6                            ; ===========================================================================
00011BB6                            
00011BB6                            Solid_Ignore:
00011BB6 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing?
00011BBC 6700                       		beq.s	Solid_Debug	; if not, branch
00011BBE 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
00011BC4 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011BC6 0C29 0000 001C             		cmpi.b	#id_Drown,obAnim(a1)	; is Sonic in his drowning animation?
00011BCC 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011BCE 0C29 0000 001C             		cmpi.b	#id_Hurt,obAnim(a1)	; is Sonic in his hurt animation?
00011BD4 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011BD6 337C 0000 001C             		move.w	#id_Run,obAnim(a1) ; use running animation
00011BDC                            
00011BDC                            
00011BDC                            Solid_NotPushing:
00011BDC 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag
00011BE2 08A9 0005 0022             		bclr	#5,obStatus(a1)	; clear Sonic's pushing flag
00011BE8                            
00011BE8                            Solid_Debug:
00011BE8 7800                       		moveq	#0,d4		; return no collision
00011BEA 4E75                       		rts	
00011BEC                            ; ===========================================================================
00011BEC                            
00011BEC                            Solid_TopBottom:
00011BEC 4A43                       		tst.w	d3		; is Sonic below the object?
00011BEE 6B00                       		bmi.s	Solid_Below	; if yes, branch
00011BF0 0C43 0010                  		cmpi.w	#$10,d3		; has Sonic landed on the object?
00011BF4 6500                       		bcs.s	Solid_Landed	; if yes, branch
00011BF6 60BE                       		bra.s	Solid_Ignore
00011BF8                            ; ===========================================================================
00011BF8                            
00011BF8                            Solid_Below:
00011BF8 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving vertically?
00011BFC 6700                       		beq.s	Solid_Squash	; if not, branch
00011BFE 6A00                       		bpl.s	Solid_TopBtmAir	; if moving downwards, branch
00011C00 4A43                       		tst.w	d3		; is Sonic above the object?
00011C02 6A00                       		bpl.s	Solid_TopBtmAir	; if yes, branch
00011C04 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011C08 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic moving
00011C0E                            
00011C0E                            Solid_TopBtmAir:
00011C0E 78FF                       		moveq	#-1,d4
00011C10 4E75                       		rts	
00011C12                            ; ===========================================================================
00011C12                            
00011C12                            Solid_Squash:
00011C12 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011C18 66F4                       		bne.s	Solid_TopBtmAir	; if yes, branch
00011C1A 2F08                       		move.l	a0,-(sp)
00011C1C 2049                       		movea.l	a1,a0
00011C1E 4EB9 0000 0000             		jsr	(KillSonic).l	; kill Sonic
00011C24 205F                       		movea.l	(sp)+,a0
00011C26 78FF                       		moveq	#-1,d4
00011C28 4E75                       		rts	
00011C2A                            ; ===========================================================================
00011C2A                            
00011C2A                            Solid_Landed:
00011C2A 5943                       		subq.w	#4,d3
00011C2C 7200                       		moveq	#0,d1
00011C2E 1228 0014                  		move.b	obActWid(a0),d1
00011C32 3401                       		move.w	d1,d2
00011C34 D442                       		add.w	d2,d2
00011C36 D269 0008                  		add.w	obX(a1),d1
00011C3A 9268 0008                  		sub.w	obX(a0),d1
00011C3E 6B00                       		bmi.s	Solid_Miss	; if Sonic is right of object, branch
00011C40 B242                       		cmp.w	d2,d1		; is Sonic left of object?
00011C42 6400                       		bcc.s	Solid_Miss	; if yes, branch
00011C44 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving upwards?
00011C48 6B00                       		bmi.s	Solid_Miss	; if yes, branch
00011C4A 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011C4E 5369 000C                  		subq.w	#1,obY(a1)
00011C52 6100                       		bsr.s	Solid_ResetFloor
00011C54 117C 0002 0025             		move.b	#2,obSolid(a0) ; set standing flags
00011C5A 08E8 0003 0022             		bset	#3,obStatus(a0)
00011C60 78FF                       		moveq	#-1,d4		; return top/bottom collision
00011C62 4E75                       		rts	
00011C64                            ; ===========================================================================
00011C64                            
00011C64                            Solid_Miss:
00011C64 7800                       		moveq	#0,d4
00011C66 4E75                       		rts	
00011C68                            ; End of function SolidObject
00011C68                            
00011C68                            
00011C68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011C68                            
00011C68                            
00011C68                            Solid_ResetFloor:
00011C68 0829 0003 0022             		btst	#3,obStatus(a1)	; is Sonic standing on something?
00011C6E 6700                       		beq.s	@notonobj	; if not, branch
00011C70                            
00011C70 7000                       		moveq	#0,d0
00011C72 1029 003D                  		move.b	$3D(a1),d0	; get object being stood on
00011C76 ED48                       		lsl.w	#6,d0
00011C78 0680 00FF D000             		addi.l	#(v_objspace&$FFFFFF),d0
00011C7E 2440                       		movea.l	d0,a2
00011C80 08AA 0003 0022             		bclr	#3,obStatus(a2)	; clear object's standing flags
00011C86 422A 0025                  		clr.b	obSolid(a2)
00011C8A                            
00011C8A                            	@notonobj:
00011C8A 3008                       		move.w	a0,d0
00011C8C 0440 D000                  		subi.w	#$D000,d0
00011C90 EC48                       		lsr.w	#6,d0
00011C92 0240 007F                  		andi.w	#$7F,d0
00011C96 1340 003D                  		move.b	d0,$3D(a1)	; set object being stood on
00011C9A 137C 0000 0026             		move.b	#0,obAngle(a1)	; clear Sonic's angle
00011CA0 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic
00011CA6 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00011CAC 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011CB2 6700                       		beq.s	@notinair	; if not, branch
00011CB4 2F08                       		move.l	a0,-(sp)
00011CB6 2049                       		movea.l	a1,a0
00011CB8 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l ; reset Sonic as if on floor
00011CBE 205F                       		movea.l	(sp)+,a0
00011CC0                            
00011CC0                            	@notinair:
00011CC0 08E9 0003 0022             		bset	#3,obStatus(a1)	; set object standing flag
00011CC6 08E8 0003 0022             		bset	#3,obStatus(a0)	; set Sonic standing on object flag
00011CCC 4E75                       		rts	
00011CCE                            ; End of function Solid_ResetFloor
00011CCE                            ; End of function Solid_ResetFloor
00011CCE                            
00011CCE                            		include	"_incObj\51 Smashable Green Block.asm"
00011CCE                            ; ---------------------------------------------------------------------------
00011CCE                            ; Object 51 - smashable	green block (MZ)
00011CCE                            ; ---------------------------------------------------------------------------
00011CCE                            
00011CCE                            SmashBlock:
00011CCE 7000                       		moveq	#0,d0
00011CD0 1028 0024                  		move.b	obRoutine(a0),d0
00011CD4 323B 0000                  		move.w	Smab_Index(pc,d0.w),d1
00011CD8 4EBB 1000                  		jsr	Smab_Index(pc,d1.w)
00011CDC 6000 F880                  		bra.w	RememberState
00011CE0                            ; ===========================================================================
00011CE0 0000                       Smab_Index:	dc.w Smab_Main-Smab_Index
00011CE2 0000                       		dc.w Smab_Solid-Smab_Index
00011CE4 0000                       		dc.w Smab_Points-Smab_Index
00011CE6                            ; ===========================================================================
00011CE6                            
00011CE6                            Smab_Main:	; Routine 0
00011CE6 5428 0024                  		addq.b	#2,obRoutine(a0)
00011CEA 217C 0000 0000 0004        		move.l	#Map_Smab,obMap(a0)
00011CF2 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00011CF8 117C 0004 0001             		move.b	#4,obRender(a0)
00011CFE 117C 0010 0014             		move.b	#$10,obActWid(a0)
00011D04 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011D0A 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00011D10                            
00011D10                            Smab_Solid:	; Routine 2
00011D10                            
00011D10 =00000032                  sonicAniFrame:	equ $32		; Sonic's current animation number
00011D10 =00000034                  @count:		equ $34		; number of blocks hit + previous stuff
00011D10                            
00011D10 3178 F7D0 0034             		move.w	(v_itembonus).w,$34(a0)
00011D16 1178 D01C 0032             		move.b	(v_player+obAnim).w,sonicAniFrame(a0) ; load Sonic's animation number
00011D1C 323C 001B                  		move.w	#$1B,d1
00011D20 343C 0010                  		move.w	#$10,d2
00011D24 363C 0011                  		move.w	#$11,d3
00011D28 3828 0008                  		move.w	obX(a0),d4
00011D2C 6100 FCC8                  		bsr.w	SolidObject
00011D30 0828 0003 0022             		btst	#3,obStatus(a0)	; has Sonic landed on the block?
00011D36 6600                       		bne.s	@smash		; if yes, branch
00011D38                            
00011D38                            	@notspinning:
00011D38 4E75                       		rts	
00011D3A                            ; ===========================================================================
00011D3A                            
00011D3A                            @smash:
00011D3A 0C28 0000 0032             		cmpi.b	#id_Roll,sonicAniFrame(a0) ; is Sonic rolling/jumping?
00011D40 66F6                       		bne.s	@notspinning	; if not, branch
00011D42 31E8 0034 F7D0             		move.w	@count(a0),(v_itembonus).w
00011D48 08E9 0002 0022             		bset	#2,obStatus(a1)
00011D4E 137C 000E 0016             		move.b	#$E,obHeight(a1)
00011D54 137C 0007 0017             		move.b	#7,obWidth(a1)
00011D5A 137C 0000 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic roll
00011D60 337C FD00 0012             		move.w	#-$300,obVelY(a1) ; rebound Sonic
00011D66 08E9 0001 0022             		bset	#1,obStatus(a1)
00011D6C 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011D72 137C 0002 0024             		move.b	#2,obRoutine(a1)
00011D78 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011D7E 4228 0025                  		clr.b	obSolid(a0)
00011D82 117C 0001 001A             		move.b	#1,obFrame(a0)
00011D88 49F9 0000 0000             		lea	(Smab_Speeds).l,a4 ; load broken fragment speed data
00011D8E 7203                       		moveq	#3,d1		; set number of	fragments to 4
00011D90 343C 0038                  		move.w	#$38,d2
00011D94 6100 D2D8                  		bsr.w	SmashObject
00011D98 6100 DCBA                  		bsr.w	FindFreeObj
00011D9C 6600                       		bne.s	Smab_Points
00011D9E 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00011DA2 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011DA8 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011DAE 3438 F7D0                  		move.w	(v_itembonus).w,d2
00011DB2 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; increment bonus counter
00011DB6 0C42 0006                  		cmpi.w	#6,d2		; have fewer than 3 blocks broken?
00011DBA 6500                       		bcs.s	@bonus		; if yes, branch
00011DBC 7406                       		moveq	#6,d2		; set cap for points
00011DBE                            
00011DBE                            	@bonus:
00011DBE 7000                       		moveq	#0,d0
00011DC0 303B 2000                  		move.w	Smab_Scores(pc,d2.w),d0
00011DC4 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 blocks been smashed?
00011DCA 6500                       		bcs.s	@givepoints	; if not, branch
00011DCC 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00011DD0 740A                       		moveq	#10,d2
00011DD2                            
00011DD2                            	@givepoints:
00011DD2 4EB9 0000 0000             		jsr	(AddPoints).l
00011DD8 E24A                       		lsr.w	#1,d2
00011DDA 1342 001A                  		move.b	d2,obFrame(a1)
00011DDE                            
00011DDE                            Smab_Points:	; Routine 4
00011DDE 6100 D6C6                  		bsr.w	SpeedToPos
00011DE2 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00011DE8 6100 D6D0                  		bsr.w	DisplaySprite
00011DEC 4A28 0001                  		tst.b	obRender(a0)
00011DF0 6A00 D708                  		bpl.w	DeleteObject
00011DF4 4E75                       		rts	
00011DF6                            ; ===========================================================================
00011DF6 FE00 FE00                  Smab_Speeds:	dc.w -$200, -$200	; x-speed, y-speed
00011DFA FF00 FF00                  		dc.w -$100, -$100
00011DFE 0200 FE00                  		dc.w $200, -$200
00011E02 0100 FF00                  		dc.w $100, -$100
00011E06                            
00011E06 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
00011E06 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
00011E0E                            Map_Smab:	include	"_maps\Smashable Green Block.asm"
00011E0E                            ; --------------------------------------------------------------------------------
00011E0E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011E0E                            ; --------------------------------------------------------------------------------
00011E0E                            
00011E0E                            SME_wdHTM:	
00011E0E 0000 0000                  		dc.w SME_wdHTM_6-SME_wdHTM, SME_wdHTM_1B-SME_wdHTM	
00011E12 0000                       		dc.w SME_wdHTM_30-SME_wdHTM	
00011E14 04                         SME_wdHTM_6:	dc.b 4	
00011E15 F005 0000 00               		dc.b $F0, 5, 0, 0, 0	
00011E1A 0005 0000 00               		dc.b 0, 5, 0, 0, 0	
00011E1F 0005 0000 F0               		dc.b 0, 5, 0, 0, $F0	
00011E24 F005 0000 F0               		dc.b $F0, 5, 0, 0, $F0	
00011E29 04                         SME_wdHTM_1B:	dc.b 4	
00011E2A F005 0000 00               		dc.b $F0, 5, 0, 0, 0	
00011E2F 0005 0000 00               		dc.b 0, 5, 0, 0, 0	
00011E34 0005 0000 F0               		dc.b 0, 5, 0, 0, $F0	
00011E39 F005 0000 F0               		dc.b $F0, 5, 0, 0, $F0	
00011E3E 00                         SME_wdHTM_30:	dc.b 0	
00011E40 00                         		even
00011E40 00                         		even
00011E40                            
00011E40                            		include	"_incObj\52 Moving Blocks.asm"
00011E40                            ; ---------------------------------------------------------------------------
00011E40                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00011E40                            ; ---------------------------------------------------------------------------
00011E40                            
00011E40                            MovingBlock:
00011E40 7000                       		moveq	#0,d0
00011E42 1028 0024                  		move.b	obRoutine(a0),d0
00011E46 323B 0000                  		move.w	MBlock_Index(pc,d0.w),d1
00011E4A 4EFB 1000                  		jmp	MBlock_Index(pc,d1.w)
00011E4E                            ; ===========================================================================
00011E4E 0000                       MBlock_Index:	dc.w MBlock_Main-MBlock_Index
00011E50 0000                       		dc.w MBlock_Platform-MBlock_Index
00011E52 0000                       		dc.w MBlock_StandOn-MBlock_Index
00011E54                            
00011E54 =00000030                  mblock_origX:	equ $30
00011E54 =00000032                  mblock_origY:	equ $32
00011E54                            
00011E54 1000                       MBlock_Var:	dc.b $10, 0		; object width,	frame number
00011E56 2001                       		dc.b $20, 1
00011E58 2002                       		dc.b $20, 2
00011E5A 4003                       		dc.b $40, 3
00011E5C 3004                       		dc.b $30, 4
00011E5E                            ; ===========================================================================
00011E5E                            
00011E5E                            MBlock_Main:	; Routine 0
00011E5E 5428 0024                  		addq.b	#2,obRoutine(a0)
00011E62 217C 0000 0000 0004        		move.l	#Map_MBlock,obMap(a0)
00011E6A 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00011E70 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00011E76 6600                       		bne.s	loc_FE44
00011E78 217C 0000 0000 0004        		move.l	#Map_MBlockLZ,obMap(a0) ; LZ specific code
00011E80 317C 43BC 0002             		move.w	#$43BC,obGfx(a0)
00011E86 117C 0007 0016             		move.b	#7,obHeight(a0)
00011E8C                            
00011E8C                            loc_FE44:
00011E8C 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00011E92 6600                       		bne.s	loc_FE60
00011E94 317C 22C0 0002             		move.w	#$22C0,obGfx(a0) ; SBZ specific code (object 5228)
00011E9A 0C28 0028 0028             		cmpi.b	#$28,obSubtype(a0) ; is object 5228 ?
00011EA0 6700                       		beq.s	loc_FE60	; if yes, branch
00011EA2 317C 4460 0002             		move.w	#$4460,obGfx(a0) ; SBZ specific code (object 523x)
00011EA8                            
00011EA8                            loc_FE60:
00011EA8 117C 0004 0001             		move.b	#4,obRender(a0)
00011EAE 7000                       		moveq	#0,d0
00011EB0 1028 0028                  		move.b	obSubtype(a0),d0
00011EB4 E648                       		lsr.w	#3,d0
00011EB6 0240 001E                  		andi.w	#$1E,d0
00011EBA 45FB 0098                  		lea	MBlock_Var(pc,d0.w),a2
00011EBE 115A 0014                  		move.b	(a2)+,obActWid(a0)
00011EC2 115A 001A                  		move.b	(a2)+,obFrame(a0)
00011EC6 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011ECC 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00011ED2 3168 000C 0032             		move.w	obY(a0),mblock_origY(a0)
00011ED8 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00011EDE                            
00011EDE                            MBlock_Platform: ; Routine 2
00011EDE 6100 0000                  		bsr.w	MBlock_Move
00011EE2 7200                       		moveq	#0,d1
00011EE4 1228 0014                  		move.b	obActWid(a0),d1
00011EE8 4EB9 0000 8B78             		jsr	(PlatformObject).l
00011EEE 6000                       		bra.s	MBlock_ChkDel
00011EF0                            ; ===========================================================================
00011EF0                            
00011EF0                            MBlock_StandOn:	; Routine 4
00011EF0 7200                       		moveq	#0,d1
00011EF2 1228 0014                  		move.b	obActWid(a0),d1
00011EF6 4EB9 0000 8CEC             		jsr	(ExitPlatform).l
00011EFC 3F28 0008                  		move.w	obX(a0),-(sp)
00011F00 6100 0000                  		bsr.w	MBlock_Move
00011F04 341F                       		move.w	(sp)+,d2
00011F06 4EB9 0000 9256             		jsr	(MvSonicOnPtfm2).l
00011F0C                            
00011F0C                            MBlock_ChkDel:
00011F2A 6000 D58E                  		bra.w	DisplaySprite
00011F2E                            ; ===========================================================================
00011F2E                            
00011F2E                            MBlock_Move:
00011F2E 7000                       		moveq	#0,d0
00011F30 1028 0028                  		move.b	obSubtype(a0),d0
00011F34 0240 000F                  		andi.w	#$F,d0
00011F38 D040                       		add.w	d0,d0
00011F3A 323B 0000                  		move.w	MBlock_TypeIndex(pc,d0.w),d1
00011F3E 4EFB 1000                  		jmp	MBlock_TypeIndex(pc,d1.w)
00011F42                            ; ===========================================================================
00011F42 0000 0000                  MBlock_TypeIndex:dc.w MBlock_Type00-MBlock_TypeIndex, MBlock_Type01-MBlock_TypeIndex
00011F46 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type03-MBlock_TypeIndex
00011F4A 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type05-MBlock_TypeIndex
00011F4E 0000 0000                  		dc.w MBlock_Type06-MBlock_TypeIndex, MBlock_Type07-MBlock_TypeIndex
00011F52 0000 0000                  		dc.w MBlock_Type08-MBlock_TypeIndex, MBlock_Type02-MBlock_TypeIndex
00011F56 0000                       		dc.w MBlock_Type0A-MBlock_TypeIndex
00011F58                            ; ===========================================================================
00011F58                            
00011F58                            MBlock_Type00:
00011F58 4E75                       		rts	
00011F5A                            ; ===========================================================================
00011F5A                            
00011F5A                            MBlock_Type01:
00011F5A 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00011F5E 323C 0060                  		move.w	#$60,d1
00011F62 0828 0000 0022             		btst	#0,obStatus(a0)
00011F68 6700                       		beq.s	loc_FF26
00011F6A 4440                       		neg.w	d0
00011F6C D041                       		add.w	d1,d0
00011F6E                            
00011F6E                            loc_FF26:
00011F6E 3228 0030                  		move.w	mblock_origX(a0),d1
00011F72 9240                       		sub.w	d0,d1
00011F74 3141 0008                  		move.w	d1,obX(a0)
00011F78 4E75                       		rts	
00011F7A                            ; ===========================================================================
00011F7A                            
00011F7A                            MBlock_Type02:
00011F7A 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; is Sonic standing on the platform?
00011F80 6600                       		bne.s	MBlock_02_Wait
00011F82 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
00011F86                            
00011F86                            MBlock_02_Wait:
00011F86 4E75                       		rts	
00011F88                            ; ===========================================================================
00011F88                            
00011F88                            MBlock_Type03:
00011F88 7600                       		moveq	#0,d3
00011F8A 1628 0014                  		move.b	obActWid(a0),d3
00011F8E 6100 0000                  		bsr.w	ObjHitWallRight
00011F92 4A41                       		tst.w	d1		; has the platform hit a wall?
00011F94 6B00                       		bmi.s	MBlock_03_End	; if yes, branch
00011F96 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
00011F9A 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00011FA0 4E75                       		rts	
00011FA2                            ; ===========================================================================
00011FA2                            
00011FA2                            MBlock_03_End:
00011FA2 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving	type)
00011FA6 4E75                       		rts	
00011FA8                            ; ===========================================================================
00011FA8                            
00011FA8                            MBlock_Type05:
00011FA8 7600                       		moveq	#0,d3
00011FAA 1628 0014                  		move.b	obActWid(a0),d3
00011FAE 6100 0000                  		bsr.w	ObjHitWallRight
00011FB2 4A41                       		tst.w	d1		; has the platform hit a wall?
00011FB4 6B00                       		bmi.s	MBlock_05_End	; if yes, branch
00011FB6 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
00011FBA 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00011FC0 4E75                       		rts	
00011FC2                            ; ===========================================================================
00011FC2                            
00011FC2                            MBlock_05_End:
00011FC2 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 06 (falling)
00011FC6 4E75                       		rts	
00011FC8                            ; ===========================================================================
00011FC8                            
00011FC8                            MBlock_Type06:
00011FC8 6100 D4DC                  		bsr.w	SpeedToPos
00011FCC 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make the platform fall
00011FD2 6100 0000                  		bsr.w	ObjFloorDist
00011FD6 4A41                       		tst.w	d1		; has platform hit the floor?
00011FD8 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00011FDC D368 000C                  		add.w	d1,obY(a0)
00011FE0 4268 0012                  		clr.w	obVelY(a0)	; stop platform	falling
00011FE4 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving)
00011FE8                            
00011FE8                            locret_FFA0:
00011FE8 4E75                       		rts	
00011FEA                            ; ===========================================================================
00011FEA                            
00011FEA                            MBlock_Type07:
00011FEA 4A38 F7E2                  		tst.b	(f_switch+2).w	; has switch number 02 been pressed?
00011FEE 6700                       		beq.s	MBlock_07_ChkDel
00011FF0 5728 0028                  		subq.b	#3,obSubtype(a0) ; if yes, change object type to 04
00011FF4                            
00011FF4                            MBlock_07_ChkDel:
00011FF4 588F                       		addq.l	#4,sp
00012014 4E75                       		rts	
00012016                            ; ===========================================================================
00012016                            
00012016                            MBlock_Type08:
00012016 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
0001201A 323C 0080                  		move.w	#$80,d1
0001201E 0828 0000 0022             		btst	#0,obStatus(a0)
00012024 6700                       		beq.s	loc_FFE2
00012026 4440                       		neg.w	d0
00012028 D041                       		add.w	d1,d0
0001202A                            
0001202A                            loc_FFE2:
0001202A 3228 0032                  		move.w	mblock_origY(a0),d1
0001202E 9240                       		sub.w	d0,d1
00012030 3141 000C                  		move.w	d1,obY(a0)
00012034 4E75                       		rts	
00012036                            ; ===========================================================================
00012036                            
00012036                            MBlock_Type0A:
00012036 7600                       		moveq	#0,d3
00012038 1628 0014                  		move.b	obActWid(a0),d3
0001203C D643                       		add.w	d3,d3
0001203E 7208                       		moveq	#8,d1
00012040 0828 0000 0022             		btst	#0,obStatus(a0)
00012046 6700                       		beq.s	loc_10004
00012048 4441                       		neg.w	d1
0001204A 4443                       		neg.w	d3
0001204C                            
0001204C                            loc_10004:
0001204C 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00012050 6600                       		bne.s	MBlock_0A_Back	; if yes, branch
00012052 3028 0008                  		move.w	obX(a0),d0
00012056 9068 0030                  		sub.w	mblock_origX(a0),d0
0001205A B043                       		cmp.w	d3,d0
0001205C 6700                       		beq.s	MBlock_0A_Wait
0001205E D368 0008                  		add.w	d1,obX(a0)	; move platform
00012062 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00012068 4E75                       		rts	
0001206A                            ; ===========================================================================
0001206A                            
0001206A                            MBlock_0A_Wait:
0001206A 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
0001206E 6600                       		bne.s	locret_1002E	; if time remains, branch
00012070 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00012076                            
00012076                            locret_1002E:
00012076 4E75                       		rts	
00012078                            ; ===========================================================================
00012078                            
00012078                            MBlock_0A_Back:
00012078 3028 0008                  		move.w	obX(a0),d0
0001207C 9068 0030                  		sub.w	mblock_origX(a0),d0
00012080 6700                       		beq.s	MBlock_0A_Reset
00012082 9368 0008                  		sub.w	d1,obX(a0)	; return platform to its original position
00012086 4E75                       		rts	
00012088                            ; ===========================================================================
00012088                            
00012088                            MBlock_0A_Reset:
00012088 4268 0036                  		clr.w	$36(a0)
0001208C 5328 0028                  		subq.b	#1,obSubtype(a0)
00012090 4E75                       		rts	
00012090 4E75                       		rts	
00012092                            Map_MBlock:	include	"_maps\Moving Blocks (MZ and SBZ).asm"
00012092                            ; ---------------------------------------------------------------------------
00012092                            ; Sprite mappings - moving blocks (MZ, SBZ)
00012092                            ; ---------------------------------------------------------------------------
00012092                            Map_MBlock_internal:
00012092 0000                       		dc.w @mz1-Map_MBlock_internal
00012094 0000                       		dc.w @mz2-Map_MBlock_internal
00012096 0000                       		dc.w @sbz-Map_MBlock_internal
00012098 0000                       		dc.w @sbzwide-Map_MBlock_internal
0001209A 0000                       		dc.w @mz3-Map_MBlock_internal
0001209C 01                         @mz1:		dc.b 1
0001209D F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000120A2 02                         @mz2:		dc.b 2
000120A3 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000120A8 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000120AD 04                         @sbz:		dc.b 4
000120AE F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000120B3 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000120B8 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000120BD 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000120C2 04                         @sbzwide:	dc.b 4
000120C3 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000120C8 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000120CD F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000120D2 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000120D7 03                         @mz3:		dc.b 3
000120D8 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
000120DD F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000120E2 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
000120E8 00                         		even
000120E8 00                         		even
000120E8                            Map_MBlockLZ:	include	"_maps\Moving Blocks (LZ).asm"
000120E8                            ; ---------------------------------------------------------------------------
000120E8                            ; Sprite mappings - moving block (LZ)
000120E8                            ; ---------------------------------------------------------------------------
000120E8                            Map_MBlockLZ_internal:
000120E8 0000                       		dc.w @0-Map_MBlockLZ_internal
000120EA 01                         @0:		dc.b 1
000120EB F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
000120F0                            		even
000120F0                            		even
000120F0                            
000120F0                            		include	"_incObj\55 Basaran.asm"
000120F0                            ; ---------------------------------------------------------------------------
000120F0                            ; Object 55 - Basaran enemy (MZ)
000120F0                            ; ---------------------------------------------------------------------------
000120F0                            
000120F0                            Basaran:
000120F0 7000                       		moveq	#0,d0
000120F2 1028 0024                  		move.b	obRoutine(a0),d0
000120F6 323B 0000                  		move.w	Bas_Index(pc,d0.w),d1
000120FA 4EFB 1000                  		jmp	Bas_Index(pc,d1.w)
000120FE                            ; ===========================================================================
000120FE 0000                       Bas_Index:	dc.w Bas_Main-Bas_Index
00012100 0000                       		dc.w Bas_Action-Bas_Index
00012102                            ; ===========================================================================
00012102                            
00012102                            Bas_Main:	; Routine 0
00012102 5428 0024                  		addq.b	#2,obRoutine(a0)
00012106 217C 0000 0000 0004        		move.l	#Map_Bas,obMap(a0)
0001210E 317C 84B8 0002             		move.w	#$84B8,obGfx(a0)
00012114 117C 0004 0001             		move.b	#4,obRender(a0)
0001211A 117C 000C 0016             		move.b	#$C,obHeight(a0)
00012120 317C 0100 0018             		move.w	#$100,obPriority(a0)
00012126 117C 000B 0020             		move.b	#$B,obColType(a0)
0001212C 117C 0010 0014             		move.b	#$10,obActWid(a0)
00012132                            
00012132                            Bas_Action:	; Routine 2
00012132 7000                       		moveq	#0,d0
00012134 1028 0025                  		move.b	ob2ndRout(a0),d0
00012138 323B 0000                  		move.w	@index(pc,d0.w),d1
0001213C 4EBB 1000                  		jsr	@index(pc,d1.w)
00012140 43F9 0000 0000             		lea	(Ani_Bas).l,a1
00012146 6100 A42C                  		bsr.w	AnimateSprite
0001214A 6000 F412                  		bra.w	RememberState
0001214E                            ; ===========================================================================
0001214E 0000                       @index:		dc.w @dropcheck-@index
00012150 0000                       		dc.w @dropfly-@index
00012152 0000                       		dc.w @flapsound-@index
00012154 0000                       		dc.w @flyup-@index
00012156                            ; ===========================================================================
00012156                            
00012156                            @dropcheck:
00012156 343C 0080                  		move.w	#$80,d2
0001215A 6100 0000                  		bsr.w	@chkdistance	; is Sonic < $80 pixels from basaran?
0001215E 6400                       		bcc.s	@nodrop		; if not, branch
00012160 3038 D00C                  		move.w	(v_player+obY).w,d0
00012164 3140 0036                  		move.w	d0,$36(a0)
00012168 9068 000C                  		sub.w	obY(a0),d0
0001216C 6500                       		bcs.s	@nodrop
0001216E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic < $80 pixels from basaran?
00012172 6400                       		bcc.s	@nodrop		; if not, branch
00012174 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00012178 6600                       		bne.s	@nodrop		; if yes, branch
0001217A                            
0001217A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001217E D007                       		add.b	d7,d0
00012180 0200 0007                  		andi.b	#7,d0
00012184 6600                       		bne.s	@nodrop
00012186 117C 0001 001C             		move.b	#1,obAnim(a0)
0001218C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012190                            
00012190                            	@nodrop:
00012190 4E75                       		rts	
00012192                            ; ===========================================================================
00012192                            
00012192                            @dropfly:
00012192 6100 D312                  		bsr.w	SpeedToPos
00012196 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make basaran fall
0001219C 343C 0080                  		move.w	#$80,d2
000121A0 6100 0000                  		bsr.w	@chkdistance
000121A4 3028 0036                  		move.w	$36(a0),d0
000121A8 9068 000C                  		sub.w	obY(a0),d0
000121AC 6500                       		bcs.s	@chkdel
000121AE 0C40 0010                  		cmpi.w	#$10,d0		; is basaran close to Sonic vertically?
000121B2 6400                       		bcc.s	@dropmore	; if not, branch
000121B4 3141 0010                  		move.w	d1,obVelX(a0)	; make basaran fly horizontally
000121B8 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop basaran falling
000121BE 117C 0002 001C             		move.b	#2,obAnim(a0)
000121C4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000121C8                            
000121C8                            	@dropmore:
000121C8 4E75                       		rts	
000121CA                            
000121CA                            	@chkdel:
000121CA 4A28 0001                  		tst.b	obRender(a0)
000121CE 6A00 D32A                  		bpl.w	DeleteObject
000121D2 4E75                       		rts	
000121D4                            ; ===========================================================================
000121D4                            
000121D4                            @flapsound:
000121D4 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000121D8 0200 000F                  		andi.b	#$F,d0
000121DC 6600                       		bne.s	@nosound
000121E8                            
000121E8                            	@nosound:
000121E8 6100 D2BC                  		bsr.w	SpeedToPos
000121EC 3038 D008                  		move.w	(v_player+obX).w,d0
000121F0 9068 0008                  		sub.w	obX(a0),d0
000121F4 6400                       		bcc.s	@isright	; if Sonic is right of basaran, branch
000121F6 4440                       		neg.w	d0
000121F8                            
000121F8                            	@isright:
000121F8 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of basaran?
000121FC 6500                       		bcs.s	@dontflyup	; if yes, branch
000121FE 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012202 D007                       		add.b	d7,d0
00012204 0200 0007                  		andi.b	#7,d0
00012208 6600                       		bne.s	@dontflyup
0001220A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001220E                            
0001220E                            @dontflyup:
0001220E 4E75                       		rts	
00012210                            ; ===========================================================================
00012210                            
00012210                            @flyup:
00012210 6100 D294                  		bsr.w	SpeedToPos
00012214 0468 0018 0012             		subi.w	#$18,obVelY(a0)	; make basaran fly upwards
0001221A 6100 0000                  		bsr.w	ObjHitCeiling
0001221E 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00012220 6A00                       		bpl.s	@noceiling	; if not, branch
00012222 9368 000C                  		sub.w	d1,obY(a0)
00012226 0268 FFF8 0008             		andi.w	#$FFF8,obX(a0)
0001222C 4268 0010                  		clr.w	obVelX(a0)	; stop basaran moving
00012230 4268 0012                  		clr.w	obVelY(a0)
00012234 4228 001C                  		clr.b	obAnim(a0)
00012238 4228 0025                  		clr.b	ob2ndRout(a0)
0001223C                            
0001223C                            	@noceiling:
0001223C 4E75                       		rts	
0001223E                            ; ===========================================================================
0001223E                            
0001223E                            ; Subroutine to check Sonic's distance from the basaran
0001223E                            
0001223E                            ; input:
0001223E                            ;	d2 = distance to compare
0001223E                            
0001223E                            ; output:
0001223E                            ;	d0 = distance between Sonic and basaran
0001223E                            ;	d1 = speed/direction for basaran to fly
0001223E                            
0001223E                            @chkdistance:
0001223E 323C 0100                  		move.w	#$100,d1
00012242 08E8 0000 0022             		bset	#0,obStatus(a0)
00012248 3038 D008                  		move.w	(v_player+obX).w,d0
0001224C 9068 0008                  		sub.w	obX(a0),d0
00012250 6400                       		bcc.s	@right		; if Sonic is right of basaran, branch
00012252 4440                       		neg.w	d0
00012254 4441                       		neg.w	d1
00012256 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001225C                            
0001225C                            	@right:
0001225C B042                       		cmp.w	d2,d0
0001225E 4E75                       		rts	
00012260                            ; ===========================================================================
00012260                            ; unused crap
00012260 6100 D244                  		bsr.w	SpeedToPos
00012264 6100 D254                  		bsr.w	DisplaySprite
00012268 4A28 0001                  		tst.b	obRender(a0)
0001226C 6A00 D28C                  		bpl.w	DeleteObject
00012270 4E75                       		rts	
00012270 4E75                       		rts	
00012272                            		include	"_anim\Basaran.asm"
00012272                            ; ---------------------------------------------------------------------------
00012272                            ; Animation script - Basaran enemy
00012272                            ; ---------------------------------------------------------------------------
00012272 0000                       Ani_Bas:	dc.w @still-Ani_Bas
00012274 0000                       		dc.w @fall-Ani_Bas
00012276 0000                       		dc.w @fly-Ani_Bas
00012278 0F00 FF                    @still:		dc.b $F, 0, afEnd
0001227C 00                         		even
0001227C 0F01 FF                    @fall:		dc.b $F, 1, afEnd
00012280 00                         		even
00012280 0301 0203 02FF             @fly:		dc.b 3,	1, 2, 3, 2, afEnd
00012286                            		even
00012286                            		even
00012286                            Map_Bas:	include	"_maps\Basaran.asm"
00012286                            ; --------------------------------------------------------------------------------
00012286                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012286                            ; --------------------------------------------------------------------------------
00012286                            
00012286                            SME_RhYYA:	
00012286 0000 0000                  		dc.w SME_RhYYA_8-SME_RhYYA, SME_RhYYA_E-SME_RhYYA	
0001228A 0000 0000                  		dc.w SME_RhYYA_1E-SME_RhYYA, SME_RhYYA_33-SME_RhYYA	
0001228E 01                         SME_RhYYA_8:	dc.b 1	
0001228F F406 2000 F8               		dc.b $F4, 6, $20, 0, $F8	
00012294 03                         SME_RhYYA_E:	dc.b 3	
00012295 F20E 2006 F4               		dc.b $F2, $E, $20, 6, $F4	
0001229A 0A04 2012 FC               		dc.b $A, 4, $20, $12, $FC	
0001229F 0200 2027 0C               		dc.b 2, 0, $20, $27, $C	
000122A4 04                         SME_RhYYA_1E:	dc.b 4	
000122A5 F804 2014 F8               		dc.b $F8, 4, $20, $14, $F8	
000122AA 000C 2016 F0               		dc.b 0, $C, $20, $16, $F0	
000122AF 0804 201A 00               		dc.b 8, 4, $20, $1A, 0	
000122B4 0000 2028 0C               		dc.b 0, 0, $20, $28, $C	
000122B9 04                         SME_RhYYA_33:	dc.b 4	
000122BA F609 201C F5               		dc.b $F6, 9, $20, $1C, $F5	
000122BF 0608 2022 F4               		dc.b 6, 8, $20, $22, $F4	
000122C4 0E04 2025 F4               		dc.b $E, 4, $20, $25, $F4	
000122C9 FE00 2027 0C               		dc.b $FE, 0, $20, $27, $C	
000122CE                            		even
000122CE                            		even
000122CE                            
000122CE                            		include	"_incObj\56 Floating Blocks and Doors.asm"
000122CE                            ; ---------------------------------------------------------------------------
000122CE                            ; Object 56 - floating blocks (SYZ/SLZ), large doors (LZ)
000122CE                            ; ---------------------------------------------------------------------------
000122CE                            
000122CE                            FloatingBlock:
000122CE 7000                       		moveq	#0,d0
000122D0 1028 0024                  		move.b	obRoutine(a0),d0
000122D4 323B 0000                  		move.w	FBlock_Index(pc,d0.w),d1
000122D8 4EFB 1000                  		jmp	FBlock_Index(pc,d1.w)
000122DC                            ; ===========================================================================
000122DC 0000                       FBlock_Index:	dc.w FBlock_Main-FBlock_Index
000122DE 0000                       		dc.w FBlock_Action-FBlock_Index
000122E0                            
000122E0 =00000034                  fb_origX:	equ $34		; original x-axis position
000122E0 =00000030                  fb_origY:	equ $30		; original y-axis position
000122E0 =0000003A                  fb_height:	equ $3A		; total object height
000122E0 =0000003C                  fb_type:		equ $3C		; subtype (2nd digit only)
000122E0                            
000122E0                            FBlock_Var:	; width/2, height/2
000122E0 1010                       		dc.b  $10, $10	; subtype 0x/8x
000122E2 2020                       		dc.b  $20, $20	; subtype 1x/9x
000122E4 1020                       		dc.b  $10, $20	; subtype 2x/Ax
000122E6 201A                       		dc.b  $20, $1A	; subtype 3x/Bx
000122E8 1027                       		dc.b  $10, $27	; subtype 4x/Cx
000122EA 1010                       		dc.b  $10, $10	; subtype 5x/Dx
000122EC 0820                       		dc.b	8, $20	; subtype 6x/Ex
000122EE 4010                       		dc.b  $40, $10	; subtype 7x/Fx
000122F0                            ; ===========================================================================
000122F0                            
000122F0                            FBlock_Main:	; Routine 0
000122F0 5428 0024                  		addq.b	#2,obRoutine(a0)
000122F4 217C 0000 0000 0004        		move.l	#Map_FBlock,obMap(a0)
000122FC 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012302 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012308 6600                       		bne.s	@notLZ
0001230A 317C 43C4 0002             		move.w	#$43C4,obGfx(a0) ; LZ specific code
00012310                            
00012310                            	@notLZ:
00012310 117C 0004 0001             		move.b	#4,obRender(a0)
00012316 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001231C 7000                       		moveq	#0,d0
0001231E 1028 0028                  		move.b	obSubtype(a0),d0 ; get subtype
00012322 E648                       		lsr.w	#3,d0
00012324 0240 000E                  		andi.w	#$E,d0		; read only the 1st digit
00012328 45FB 00B6                  		lea	FBlock_Var(pc,d0.w),a2 ; get size data
0001232C 115A 0014                  		move.b	(a2)+,obActWid(a0)
00012330 1152 0016                  		move.b	(a2),obHeight(a0)
00012334 E248                       		lsr.w	#1,d0
00012336 1140 001A                  		move.b	d0,obFrame(a0)
0001233A 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
00012340 3168 000C 0030             		move.w	obY(a0),fb_origY(a0)
00012346 7000                       		moveq	#0,d0
00012348 1012                       		move.b	(a2),d0
0001234A D040                       		add.w	d0,d0
0001234C 3140 003A                  		move.w	d0,fb_height(a0)
00012350 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
00012356 6600                       			bne.s	@dontdelete
00012358 0C68 1BB8 0008             			cmpi.w	#$1BB8,obX(a0)
0001235E 6600                       			bne.s	@notatpos
00012360 4A38 F7CE                  			tst.b	($FFFFF7CE).w
00012364 6700                       			beq.s	@dontdelete
00012366 4EF9 0000 F4FA             			jmp	(DeleteObject).l
0001236C                            	@notatpos:
0001236C 4228 0028                  			clr.b	obSubtype(a0)
00012370 4A38 F7CE                  			tst.b	($FFFFF7CE).w
00012374 6600                       			bne.s	@dontdelete
00012376 4EF9 0000 F4FA             			jmp	(DeleteObject).l
0001237C                            	@dontdelete:
0001237C 7000                       		moveq	#0,d0
0001237E 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012384 6700                       		beq.s	@stillnotLZ
00012386 1028 0028                  		move.b	obSubtype(a0),d0 ; SYZ/SLZ specific code
0001238A 0240 000F                  		andi.w	#$F,d0
0001238E 5140                       		subq.w	#8,d0
00012390 6500                       		bcs.s	@stillnotLZ
00012392 E548                       		lsl.w	#2,d0
00012394 45F8 FE8A                  		lea	(v_oscillate+$2C).w,a2
00012398 45F2 0000                  		lea	(a2,d0.w),a2
0001239C 4A52                       		tst.w	(a2)
0001239E 6A00                       		bpl.s	@stillnotLZ
000123A0 0868 0000 0022             		bchg	#0,obStatus(a0)
000123A6                            
000123A6                            	@stillnotLZ:
000123A6 1028 0028                  		move.b	obSubtype(a0),d0
000123AA 6A00                       		bpl.s	FBlock_Action
000123AC 0200 000F                  		andi.b	#$F,d0
000123B0 1140 003C                  		move.b	d0,fb_type(a0)
000123B4 117C 0005 0028             		move.b	#5,obSubtype(a0)
000123BA 0C28 0007 001A             		cmpi.b	#7,obFrame(a0)
000123C0 6600                       		bne.s	@chkstate
000123C2 117C 000C 0028             		move.b	#$C,obSubtype(a0)
000123C8 317C 0080 003A             		move.w	#$80,fb_height(a0)
000123CE                            
000123CE                            @chkstate:
000123CE 45F8 FC00                  		lea	(v_objstate).w,a2
000123D2 7000                       		moveq	#0,d0
000123D4 1028 0023                  		move.b	obRespawnNo(a0),d0
000123D8 6700                       		beq.s	FBlock_Action
000123DA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000123E0 0832 0000 0002             		btst	#0,2(a2,d0.w)
000123E6 6700                       		beq.s	FBlock_Action
000123E8 5228 0028                  		addq.b	#1,obSubtype(a0)
000123EC 4268 003A                  		clr.w	fb_height(a0)
000123F0                            
000123F0                            FBlock_Action:	; Routine 2
000123F0 3F28 0008                  		move.w	obX(a0),-(sp)
000123F4 7000                       		moveq	#0,d0
000123F6 1028 0028                  		move.b	obSubtype(a0),d0 ; get object subtype
000123FA 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000123FE D040                       		add.w	d0,d0
00012400 323B 0000                  		move.w	@index(pc,d0.w),d1
00012404 4EBB 1000                  		jsr	@index(pc,d1.w)	; move block subroutines
00012408 381F                       		move.w	(sp)+,d4
0001240A 4A28 0001                  		tst.b	obRender(a0)
0001240E 6A00                       		bpl.s	@chkdel
00012410 7200                       		moveq	#0,d1
00012412 1228 0014                  		move.b	obActWid(a0),d1
00012416 0641 000B                  		addi.w	#$B,d1
0001241A 7400                       		moveq	#0,d2
0001241C 1428 0016                  		move.b	obHeight(a0),d2
00012420 3602                       		move.w	d2,d3
00012422 5243                       		addq.w	#1,d3
00012424 6100 F5D0                  		bsr.w	SolidObject
00012428                            
00012428                            	@chkdel:
00012444                            		@display:
00012444 6000 D074                  			bra.w	DisplaySprite
00012448                            		@chkdel2:
00012448 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
0001244E 6600                       			bne.s	@delete
00012450 4A28 0038                  			tst.b	$38(a0)
00012454 66EE                       			bne.s	@display
00012456                            		@delete:
00012456 4EF9 0000 F4FA             			jmp	(DeleteObject).l
0001245C                            ; ===========================================================================
0001245C 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00012460 0000 0000                  		dc.w @type02-@index, @type03-@index
00012464 0000 0000                  		dc.w @type04-@index, @type05-@index
00012468 0000 0000                  		dc.w @type06-@index, @type07-@index
0001246C 0000 0000                  		dc.w @type08-@index, @type09-@index
00012470 0000 0000                  		dc.w @type0A-@index, @type0B-@index
00012474 0000 0000                  		dc.w @type0C-@index, @type0D-@index
00012478                            ; ===========================================================================
00012478                            
00012478                            @type00:
00012478                            ; doesn't move
00012478 4E75                       		rts	
0001247A                            ; ===========================================================================
0001247A                            
0001247A                            @type01:
0001247A                            ; moves side-to-side
0001247A 323C 0040                  		move.w	#$40,d1		; set move distance
0001247E 7000                       		moveq	#0,d0
00012480 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
00012484 6000                       		bra.s	@moveLR
00012486                            ; ===========================================================================
00012486                            
00012486                            @type02:
00012486                            ; moves side-to-side
00012486 323C 0080                  		move.w	#$80,d1		; set move distance
0001248A 7000                       		moveq	#0,d0
0001248C 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00012490                            
00012490                            	@moveLR:
00012490 0828 0000 0022             		btst	#0,obStatus(a0)
00012496 6700                       		beq.s	@noflip
00012498 4440                       		neg.w	d0
0001249A D041                       		add.w	d1,d0
0001249C                            
0001249C                            	@noflip:
0001249C 3228 0034                  		move.w	fb_origX(a0),d1
000124A0 9240                       		sub.w	d0,d1
000124A2 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
000124A6 4E75                       		rts	
000124A8                            ; ===========================================================================
000124A8                            
000124A8                            @type03:
000124A8                            ; moves up/down
000124A8 323C 0040                  		move.w	#$40,d1		; set move distance
000124AC 7000                       		moveq	#0,d0
000124AE 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
000124B2 6000                       		bra.s	@moveUD
000124B4                            ; ===========================================================================
000124B4                            
000124B4                            @type04:
000124B4                            ; moves up/down
000124B4 323C 0080                  		move.w	#$80,d1		; set move distance
000124B8 7000                       		moveq	#0,d0
000124BA 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
000124BE                            
000124BE                            	@moveUD:
000124BE 0828 0000 0022             		btst	#0,obStatus(a0)
000124C4 6700                       		beq.s	@noflip04
000124C6 4440                       		neg.w	d0
000124C8 D041                       		add.w	d1,d0
000124CA                            
000124CA                            	@noflip04:
000124CA 3228 0030                  		move.w	fb_origY(a0),d1
000124CE 9240                       		sub.w	d0,d1
000124D0 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
000124D4 4E75                       		rts	
000124D6                            ; ===========================================================================
000124D6                            
000124D6                            @type05:
000124D6                            ; moves up when a switch is pressed
000124D6 4A28 0038                  		tst.b	$38(a0)
000124DA 6600                       		bne.s	@loc_104A4
000124DC 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
000124E2 6600                       		bne.s	@aaa		; if not, branch
000124E4 0C28 0003 003C             		cmpi.b	#3,fb_type(a0)
000124EA 6600                       		bne.s	@aaa
000124EC 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000124F0 3038 D008                  		move.w	(v_player+obX).w,d0
000124F4 B068 0008                  		cmp.w	obX(a0),d0
000124F8 6400                       		bcc.s	@aaa
000124FA 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w
00012500                            
00012500                            	@aaa:
00012500 45F8 F7E0                  		lea	(f_switch).w,a2
00012504 7000                       		moveq	#0,d0
00012506 1028 003C                  		move.b	fb_type(a0),d0
0001250A 0832 0000 0000             		btst	#0,(a2,d0.w)
00012510 6700                       		beq.s	@loc_104AE
00012512 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
00012518 6600                       		bne.s	@loc_1049E	; if not, branch
0001251A 0C00 0003                  		cmpi.b	#3,d0
0001251E 6600                       		bne.s	@loc_1049E
00012520 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00012524                            
00012524                            @loc_1049E:
00012524 117C 0001 0038             		move.b	#1,$38(a0)
0001252A                            
0001252A                            @loc_104A4:
0001252A 4A68 003A                  		tst.w	fb_height(a0)
0001252E 6700                       		beq.s	@loc_104C8
00012530 5568 003A                  		subq.w	#2,fb_height(a0)
00012534                            
00012534                            @loc_104AE:
00012534 3028 003A                  		move.w	fb_height(a0),d0
00012538 0828 0000 0022             		btst	#0,$22(a0)
0001253E 6700                       		beq.s	@loc_104BC
00012540 4440                       		neg.w	d0
00012542                            
00012542                            @loc_104BC:
00012542 3228 0030                  		move.w	fb_origY(a0),d1
00012546 D240                       		add.w	d0,d1
00012548 3141 000C                  		move.w	d1,obY(a0)
0001254C 4E75                       		rts	
0001254E                            ; ===========================================================================
0001254E                            
0001254E                            @loc_104C8:
0001254E 5228 0028                  		addq.b	#1,$28(a0)
00012552 4228 0038                  		clr.b	$38(a0)
00012556 45F8 FC00                  		lea	(v_objstate).w,a2
0001255A 7000                       		moveq	#0,d0
0001255C 1028 0023                  		move.b	obRespawnNo(a0),d0
00012560 67D2                       		beq.s	@loc_104AE
00012562 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00012568 60CA                       		bra.s	@loc_104AE
0001256A                            ; ===========================================================================
0001256A                            
0001256A                            @type06:
0001256A 4A28 0038                  		tst.b	$38(a0)
0001256E 6600                       		bne.s	@loc_10500
00012570 45F8 F7E0                  		lea	(f_switch).w,a2
00012574 7000                       		moveq	#0,d0
00012576 1028 003C                  		move.b	fb_type(a0),d0
0001257A 4A32 0000                  		tst.b	(a2,d0.w)
0001257E 6A00                       		bpl.s	@loc_10512
00012580 117C 0001 0038             		move.b	#1,$38(a0)
00012586                            
00012586                            @loc_10500:
00012586 7000                       		moveq	#0,d0
00012588 1028 0016                  		move.b	obHeight(a0),d0
0001258C D040                       		add.w	d0,d0
0001258E B068 003A                  		cmp.w	fb_height(a0),d0
00012592 6700                       		beq.s	@loc_1052C
00012594 5468 003A                  		addq.w	#2,fb_height(a0)
00012598                            
00012598                            @loc_10512:
00012598 3028 003A                  		move.w	fb_height(a0),d0
0001259C 0828 0000 0022             		btst	#0,obStatus(a0)
000125A2 6700                       		beq.s	@loc_10520
000125A4 4440                       		neg.w	d0
000125A6                            
000125A6                            @loc_10520:
000125A6 3228 0030                  		move.w	fb_origY(a0),d1
000125AA D240                       		add.w	d0,d1
000125AC 3141 000C                  		move.w	d1,obY(a0)
000125B0 4E75                       		rts	
000125B2                            ; ===========================================================================
000125B2                            
000125B2                            @loc_1052C:
000125B2 5328 0028                  		subq.b	#1,obSubtype(a0)
000125B6 4228 0038                  		clr.b	$38(a0)
000125BA 45F8 FC00                  		lea	(v_objstate).w,a2
000125BE 7000                       		moveq	#0,d0
000125C0 1028 0023                  		move.b	obRespawnNo(a0),d0
000125C4 67D2                       		beq.s	@loc_10512
000125C6 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000125CC 60CA                       		bra.s	@loc_10512
000125CE                            ; ===========================================================================
000125CE                            
000125CE                            @type07:
000125CE 4A28 0038                  		tst.b	$38(a0)
000125D2 6600                       		bne.s	@loc_1055E
000125D4 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch number $F been pressed?
000125D8 6700                       		beq.s	@locret_10578
000125DA 117C 0001 0038             		move.b	#1,$38(a0)
000125E0 4268 003A                  		clr.w	fb_height(a0)
000125E4                            
000125E4                            @loc_1055E:
000125E4 5268 0008                  		addq.w	#1,obX(a0)
000125E8 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
000125EE 5268 003A                  		addq.w	#1,fb_height(a0)
000125F2 0C68 0380 003A             		cmpi.w	#$380,fb_height(a0)
000125F8 6600                       		bne.s	@locret_10578
000125FA 11FC 0001 F7CE             			move.b	#1,($FFFFF7CE).w
00012600 4228 0038                  			clr.b	$38(a0)
00012604 4228 0028                  		clr.b	obSubtype(a0)
00012608                            
00012608                            @locret_10578:
00012608 4E75                       		rts	
0001260A                            ; ===========================================================================
0001260A                            
0001260A                            @type0C:
0001260A 4A28 0038                  		tst.b	$38(a0)
0001260E 6600                       		bne.s	@loc_10598
00012610 45F8 F7E0                  		lea	(f_switch).w,a2
00012614 7000                       		moveq	#0,d0
00012616 1028 003C                  		move.b	fb_type(a0),d0
0001261A 0832 0000 0000             		btst	#0,(a2,d0.w)
00012620 6700                       		beq.s	@loc_105A2
00012622 117C 0001 0038             		move.b	#1,$38(a0)
00012628                            
00012628                            @loc_10598:
00012628 4A68 003A                  		tst.w	fb_height(a0)
0001262C 6700                       		beq.s	@loc_105C0
0001262E 5568 003A                  		subq.w	#2,fb_height(a0)
00012632                            
00012632                            @loc_105A2:
00012632 3028 003A                  		move.w	fb_height(a0),d0
00012636 0828 0000 0022             		btst	#0,obStatus(a0)
0001263C 6700                       		beq.s	@loc_105B4
0001263E 4440                       		neg.w	d0
00012640 0640 0080                  		addi.w	#$80,d0
00012644                            
00012644                            @loc_105B4:
00012644 3228 0034                  		move.w	fb_origX(a0),d1
00012648 D240                       		add.w	d0,d1
0001264A 3141 0008                  		move.w	d1,obX(a0)
0001264E 4E75                       		rts	
00012650                            ; ===========================================================================
00012650                            
00012650                            @loc_105C0:
00012650 5228 0028                  		addq.b	#1,obSubtype(a0)
00012654 4228 0038                  		clr.b	$38(a0)
00012658 45F8 FC00                  		lea	(v_objstate).w,a2
0001265C 7000                       		moveq	#0,d0
0001265E 1028 0023                  		move.b	obRespawnNo(a0),d0
00012662 67CE                       		beq.s	@loc_105A2
00012664 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001266A 60C6                       		bra.s	@loc_105A2
0001266C                            ; ===========================================================================
0001266C                            
0001266C                            @type0D:
0001266C 4A28 0038                  		tst.b	$38(a0)
00012670 6600                       		bne.s	@loc_105F8
00012672 45F8 F7E0                  		lea	(f_switch).w,a2
00012676 7000                       		moveq	#0,d0
00012678 1028 003C                  		move.b	fb_type(a0),d0
0001267C 4A32 0000                  		tst.b	(a2,d0.w)
00012680 6A00                       		bpl.s	@wtf
00012682 117C 0001 0038             		move.b	#1,$38(a0)
00012688                            
00012688                            @loc_105F8:
00012688 303C 0080                  		move.w	#$80,d0
0001268C B068 003A                  		cmp.w	fb_height(a0),d0
00012690 6700                       		beq.s	@loc_10624
00012692 5468 003A                  		addq.w	#2,fb_height(a0)
00012696                            
00012696                            @wtf:
00012696 3028 003A                  		move.w	fb_height(a0),d0
0001269A 0828 0000 0022             		btst	#0,obStatus(a0)
000126A0 6700                       		beq.s	@loc_10618
000126A2 4440                       		neg.w	d0
000126A4 0640 0080                  		addi.w	#$80,d0
000126A8                            
000126A8                            @loc_10618:
000126A8 3228 0034                  		move.w	fb_origX(a0),d1
000126AC D240                       		add.w	d0,d1
000126AE 3141 0008                  		move.w	d1,obX(a0)
000126B2 4E75                       		rts	
000126B4                            ; ===========================================================================
000126B4                            
000126B4                            @loc_10624:
000126B4 5328 0028                  		subq.b	#1,obSubtype(a0)
000126B8 4228 0038                  		clr.b	$38(a0)
000126BC 45F8 FC00                  		lea	(v_objstate).w,a2
000126C0 7000                       		moveq	#0,d0
000126C2 1028 0023                  		move.b	obRespawnNo(a0),d0
000126C6 67CE                       		beq.s	@wtf
000126C8 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000126CE 60C6                       		bra.s	@wtf
000126D0                            ; ===========================================================================
000126D0                            
000126D0                            @type08:
000126D0 323C 0010                  		move.w	#$10,d1
000126D4 7000                       		moveq	#0,d0
000126D6 1038 FE88                  		move.b	(v_oscillate+$2A).w,d0
000126DA E248                       		lsr.w	#1,d0
000126DC 3638 FE8A                  		move.w	(v_oscillate+$2C).w,d3
000126E0 6000                       		bra.s	@square
000126E2                            ; ===========================================================================
000126E2                            
000126E2                            @type09:
000126E2 323C 0030                  		move.w	#$30,d1
000126E6 7000                       		moveq	#0,d0
000126E8 1038 FE8C                  		move.b	(v_oscillate+$2E).w,d0
000126EC 3638 FE8E                  		move.w	(v_oscillate+$30).w,d3
000126F0 6000                       		bra.s	@square
000126F2                            ; ===========================================================================
000126F2                            
000126F2                            @type0A:
000126F2 323C 0050                  		move.w	#$50,d1
000126F6 7000                       		moveq	#0,d0
000126F8 1038 FE90                  		move.b	(v_oscillate+$32).w,d0
000126FC 3638 FE92                  		move.w	(v_oscillate+$34).w,d3
00012700 6000                       		bra.s	@square
00012702                            ; ===========================================================================
00012702                            
00012702                            @type0B:
00012702 323C 0070                  		move.w	#$70,d1
00012706 7000                       		moveq	#0,d0
00012708 1038 FE94                  		move.b	(v_oscillate+$36).w,d0
0001270C 3638 FE96                  		move.w	(v_oscillate+$38).w,d3
00012710                            
00012710                            @square:
00012710 4A43                       		tst.w	d3
00012712 6600                       		bne.s	@loc_1068E
00012714 5228 0022                  		addq.b	#1,obStatus(a0)
00012718 0228 0003 0022             		andi.b	#3,obStatus(a0)
0001271E                            
0001271E                            @loc_1068E:
0001271E 1428 0022                  		move.b	obStatus(a0),d2
00012722 0202 0003                  		andi.b	#3,d2
00012726 6600                       		bne.s	@loc_106AE
00012728 9041                       		sub.w	d1,d0
0001272A D068 0034                  		add.w	fb_origX(a0),d0
0001272E 3140 0008                  		move.w	d0,obX(a0)
00012732 4441                       		neg.w	d1
00012734 D268 0030                  		add.w	fb_origY(a0),d1
00012738 3141 000C                  		move.w	d1,obY(a0)
0001273C 4E75                       		rts	
0001273E                            ; ===========================================================================
0001273E                            
0001273E                            @loc_106AE:
0001273E 5302                       		subq.b	#1,d2
00012740 6600                       		bne.s	@loc_106CC
00012742 5341                       		subq.w	#1,d1
00012744 9041                       		sub.w	d1,d0
00012746 4440                       		neg.w	d0
00012748 D068 0030                  		add.w	fb_origY(a0),d0
0001274C 3140 000C                  		move.w	d0,obY(a0)
00012750 5241                       		addq.w	#1,d1
00012752 D268 0034                  		add.w	fb_origX(a0),d1
00012756 3141 0008                  		move.w	d1,obX(a0)
0001275A 4E75                       		rts	
0001275C                            ; ===========================================================================
0001275C                            
0001275C                            @loc_106CC:
0001275C 5302                       		subq.b	#1,d2
0001275E 6600                       		bne.s	@loc_106EA
00012760 5341                       		subq.w	#1,d1
00012762 9041                       		sub.w	d1,d0
00012764 4440                       		neg.w	d0
00012766 D068 0034                  		add.w	fb_origX(a0),d0
0001276A 3140 0008                  		move.w	d0,obX(a0)
0001276E 5241                       		addq.w	#1,d1
00012770 D268 0030                  		add.w	fb_origY(a0),d1
00012774 3141 000C                  		move.w	d1,obY(a0)
00012778 4E75                       		rts	
0001277A                            ; ===========================================================================
0001277A                            
0001277A                            @loc_106EA:
0001277A 9041                       		sub.w	d1,d0
0001277C D068 0030                  		add.w	fb_origY(a0),d0
00012780 3140 000C                  		move.w	d0,obY(a0)
00012784 4441                       		neg.w	d1
00012786 D268 0034                  		add.w	fb_origX(a0),d1
0001278A 3141 0008                  		move.w	d1,obX(a0)
0001278E 4E75                       		rts	
0001278E 4E75                       		rts	
00012790                            Map_FBlock:	include	"_maps\Floating Blocks and Doors.asm"
00012790                            ; ---------------------------------------------------------------------------
00012790                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00012790                            ; ---------------------------------------------------------------------------
00012790                            Map_FBlock_internal:
00012790 0000                       		dc.w @syz1x1-Map_FBlock_internal
00012792 0000                       		dc.w @syz2x2-Map_FBlock_internal
00012794 0000                       		dc.w @syz1x2-Map_FBlock_internal
00012796 0000                       		dc.w @syzrect2x2-Map_FBlock_internal
00012798 0000                       		dc.w @syzrect1x3-Map_FBlock_internal
0001279A 0000                       		dc.w @slz-Map_FBlock_internal
0001279C 0000                       		dc.w @lzvert-Map_FBlock_internal
0001279E 0000                       		dc.w @lzhoriz-Map_FBlock_internal
000127A0 01                         @syz1x1:	dc.b 1
000127A1 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0 ; SYZ - 1x1 square block
000127A6 04                         @syz2x2:	dc.b 4
000127A7 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0 ; SYZ - 2x2 square blocks
000127AC E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
000127B1 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
000127B6 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
000127BB 02                         @syz1x2:	dc.b 2
000127BC E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0 ; SYZ - 1x2 square blocks
000127C1 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
000127C6 04                         @syzrect2x2:	dc.b 4
000127C7 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0 ; SYZ - 2x2 rectangular blocks
000127CC E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
000127D1 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
000127D6 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
000127DB 03                         @syzrect1x3:	dc.b 3
000127DC D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0 ; SYZ - 1x3 rectangular blocks
000127E1 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
000127E6 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
000127EB 01                         @slz:		dc.b 1
000127EC F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0 ; SLZ - 1x1 square block
000127F1 02                         @lzvert:	dc.b 2
000127F2 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8	; LZ - small vertical door
000127F7 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000127FC 04                         @lzhoriz:	dc.b 4
000127FD F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0 ; LZ - large horizontal door
00012802 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00012807 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
0001280C F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00012812 00                         		even
00012812 00                         		even
00012812                            
00012812                            		include	"_incObj\57 Spiked Ball and Chain.asm"
00012812                            ; ---------------------------------------------------------------------------
00012812                            ; Object 57 - spiked balls (SYZ, LZ)
00012812                            ; ---------------------------------------------------------------------------
00012812                            
00012812                            SpikeBall:
00012812 7000                       		moveq	#0,d0
00012814 1028 0024                  		move.b	obRoutine(a0),d0
00012818 323B 0000                  		move.w	SBall_Index(pc,d0.w),d1
0001281C 4EFB 1000                  		jmp	SBall_Index(pc,d1.w)
00012820                            ; ===========================================================================
00012820 0000                       SBall_Index:	dc.w SBall_Main-SBall_Index
00012822 0000                       		dc.w SBall_Move-SBall_Index
00012824 0000                       		dc.w SBall_Display-SBall_Index
00012826                            
00012826 =00000029                  sball_childs:	equ $29		; number of child objects (1 byte)
00012826                            		; $30-$37	; object RAM numbers of childs (1 byte each)
00012826 =0000003A                  sball_origX:	equ $3A		; centre x-axis position (2 bytes)
00012826 =00000038                  sball_origY:	equ $38		; centre y-axis position (2 bytes)
00012826 =0000003C                  sball_radius:	equ $3C		; radius (1 byte)
00012826 =0000003E                  sball_speed:	equ $3E		; rate of spin (2 bytes)
00012826                            ; ===========================================================================
00012826                            
00012826                            SBall_Main:	; Routine 0
00012826 5428 0024                  		addq.b	#2,obRoutine(a0)
0001282A 217C 0000 0000 0004        		move.l	#Map_SBall,obMap(a0)
00012832 317C 03BA 0002             		move.w	#$3BA,obGfx(a0)
00012838 117C 0004 0001             		move.b	#4,obRender(a0)
0001283E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012844 117C 0008 0014             		move.b	#8,obActWid(a0)
0001284A 3168 0008 003A             		move.w	obX(a0),sball_origX(a0)
00012850 3168 000C 0038             		move.w	obY(a0),sball_origY(a0)
00012856 117C 0098 0020             		move.b	#$98,obColType(a0) ; SYZ specific code (chain hurts Sonic)
0001285C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012862 6600                       		bne.s	@notlz
00012864                            
00012864 117C 0000 0020             		move.b	#0,obColType(a0) ; LZ specific code (chain doesn't hurt)
0001286A 317C 0310 0002             		move.w	#$310,obGfx(a0)
00012870 217C 0000 0000 0004        		move.l	#Map_SBall2,obMap(a0)
00012878                            
00012878                            	@notlz:
00012878 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
0001287C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012880 4881                       		ext.w	d1
00012882 E741                       		asl.w	#3,d1		; multiply by 8
00012884 3141 003E                  		move.w	d1,sball_speed(a0) ; set object twirl speed
00012888 1028 0022                  		move.b	obStatus(a0),d0
0001288C E418                       		ror.b	#2,d0
0001288E 0200 00C0                  		andi.b	#$C0,d0
00012892 1140 0026                  		move.b	d0,obAngle(a0)
00012896 45E8 0029                  		lea	sball_childs(a0),a2
0001289A 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
0001289E 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
000128A2 14FC 0000                  		move.b	#0,(a2)+
000128A6 3601                       		move.w	d1,d3
000128A8 E94B                       		lsl.w	#4,d3
000128AA 1143 003C                  		move.b	d3,sball_radius(a0)
000128AE 5341                       		subq.w	#1,d1		; set chain length (type-1)
000128B0 6500                       		bcs.s	@fail
000128B2 0828 0003 0028             		btst	#3,obSubtype(a0)
000128B8 6700                       		beq.s	@makechain
000128BA 5341                       		subq.w	#1,d1
000128BC 6500                       		bcs.s	@fail
000128BE                            
000128BE                            @makechain:
000128BE 6100 D194                  		bsr.w	FindFreeObj
000128C2 6600                       		bne.s	@fail
000128C4 5228 0029                  		addq.b	#1,sball_childs(a0) ; increment child object counter
000128C8 3A09                       		move.w	a1,d5		; get child object RAM address
000128CA 0445 D000                  		subi.w	#$D000,d5	; subtract $D000
000128CE EC4D                       		lsr.w	#6,d5		; divide by $40
000128D0 0245 007F                  		andi.w	#$7F,d5
000128D4 14C5                       		move.b	d5,(a2)+	; copy child RAM number
000128D6 137C 0004 0024             		move.b	#4,obRoutine(a1)
000128DC 1290                       		move.b	0(a0),0(a1)
000128DE 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
000128E4 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
000128EA 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
000128F0 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
000128F6 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
000128FC 1368 0020 0020             		move.b	obColType(a0),obColType(a1)
00012902 0403 0010                  		subi.b	#$10,d3
00012906 1343 003C                  		move.b	d3,sball_radius(a1)
0001290A 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012910 6600                       		bne.s	@notlzagain
00012912                            
00012912 4A03                       		tst.b	d3
00012914 6600                       		bne.s	@notlzagain
00012916 137C 0002 001A             		move.b	#2,obFrame(a1)	; use different frame for LZ chain
0001291C                            
0001291C                            	@notlzagain:
0001291C 51C9 FFA0                  		dbf	d1,@makechain ; repeat for length of chain
00012920                            
00012920                            	@fail:
00012920 3A08                       		move.w	a0,d5
00012922 0445 D000                  		subi.w	#$D000,d5
00012926 EC4D                       		lsr.w	#6,d5
00012928 0245 007F                  		andi.w	#$7F,d5
0001292C 14C5                       		move.b	d5,(a2)+
0001292E 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012934 6600                       		bne.s	SBall_Move
00012936                            
00012936 117C 008B 0020             		move.b	#$8B,obColType(a0) ; if yes, make last spikeball larger
0001293C 117C 0001 001A             		move.b	#1,obFrame(a0)	; use different	frame
00012942                            
00012942                            SBall_Move:	; Routine 2
00012942 6100 0000                  		bsr.w	@movesub
00012946 6000 0000                  		bra.w	@chkdel
0001294A                            ; ===========================================================================
0001294A                            
0001294A                            @movesub:
0001294A 3028 003E                  		move.w	sball_speed(a0),d0
0001294E D168 0026                  		add.w	d0,obAngle(a0)
00012952 1028 0026                  		move.b	obAngle(a0),d0
00012956 4EB9 0000 3BA2             		jsr	(CalcSine).l
0001295C 3428 0038                  		move.w	sball_origY(a0),d2
00012960 3628 003A                  		move.w	sball_origX(a0),d3
00012964 45E8 0029                  		lea	sball_childs(a0),a2
00012968 7C00                       		moveq	#0,d6
0001296A 1C1A                       		move.b	(a2)+,d6
0001296C                            
0001296C                            	@loop:
0001296C 7800                       		moveq	#0,d4
0001296E 181A                       		move.b	(a2)+,d4
00012970 ED4C                       		lsl.w	#6,d4
00012972 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00012978 2244                       		movea.l	d4,a1
0001297A 7800                       		moveq	#0,d4
0001297C 1829 003C                  		move.b	sball_radius(a1),d4
00012980 2A04                       		move.l	d4,d5
00012982 C9C0                       		muls.w	d0,d4
00012984 E084                       		asr.l	#8,d4
00012986 CBC1                       		muls.w	d1,d5
00012988 E085                       		asr.l	#8,d5
0001298A D842                       		add.w	d2,d4
0001298C DA43                       		add.w	d3,d5
0001298E 3344 000C                  		move.w	d4,obY(a1)
00012992 3345 0008                  		move.w	d5,obX(a1)
00012996 51CE FFD4                  		dbf	d6,@loop
0001299A 4E75                       		rts	
0001299C                            ; ===========================================================================
0001299C                            
0001299C                            @chkdel:
000129BA 6000 CAFE                  		bra.w	DisplaySprite
000129BE                            ; ===========================================================================
000129BE                            
000129BE                            @delete:
000129BE 7400                       		moveq	#0,d2
000129C0 45E8 0029                  		lea	sball_childs(a0),a2
000129C4 141A                       		move.b	(a2)+,d2
000129C6                            
000129C6                            	@deleteloop:
000129C6 7000                       		moveq	#0,d0
000129C8 101A                       		move.b	(a2)+,d0
000129CA ED48                       		lsl.w	#6,d0
000129CC 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000129D2 2240                       		movea.l	d0,a1
000129D4 6100 CB26                  		bsr.w	DeleteChild
000129D8 51CA FFEC                  		dbf	d2,@deleteloop ; delete all pieces of	chain
000129DC                            
000129DC 4E75                       		rts	
000129DE                            ; ===========================================================================
000129DE                            
000129DE                            SBall_Display:	; Routine 4
000129DE 6000 CADA                  		bra.w	DisplaySprite
000129DE 6000 CADA                  		bra.w	DisplaySprite
000129E2                            Map_SBall:	include	"_maps\Spiked Ball and Chain (SYZ).asm"
000129E2                            ; ---------------------------------------------------------------------------
000129E2                            ; Sprite mappings - chain of spiked balls (SYZ)
000129E2                            ; ---------------------------------------------------------------------------
000129E2                            Map_SBall_internal:
000129E2 0000                       		dc.w @0-Map_SBall_internal
000129E4 01                         @0:		dc.b 1
000129E5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000129EA                            		even
000129EA                            		even
000129EA                            Map_SBall2:	include	"_maps\Spiked Ball and Chain (LZ).asm"
000129EA                            ; ---------------------------------------------------------------------------
000129EA                            ; Sprite mappings - spiked ball	on a chain (LZ)
000129EA                            ; ---------------------------------------------------------------------------
000129EA                            Map_SBall2_internal:
000129EA 0000                       		dc.w @chain-Map_SBall2_internal
000129EC 0000                       		dc.w @spikeball-Map_SBall2_internal
000129EE 0000                       		dc.w @base-Map_SBall2_internal
000129F0 01                         @chain:		dc.b 1
000129F1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; chain link
000129F6 01                         @spikeball:	dc.b 1
000129F7 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0	; spikeball
000129FC 01                         @base:		dc.b 1
000129FD F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8 ; wall attachment
00012A02                            		even
00012A02                            		even
00012A02                            		include	"_incObj\58 Big Spiked Ball.asm"
00012A02                            ; ---------------------------------------------------------------------------
00012A02                            ; Object 58 - giant spiked balls (SYZ)
00012A02                            ; ---------------------------------------------------------------------------
00012A02                            
00012A02                            BigSpikeBall:
00012A02 7000                       		moveq	#0,d0
00012A04 1028 0024                  		move.b	obRoutine(a0),d0
00012A08 323B 0000                  		move.w	BBall_Index(pc,d0.w),d1
00012A0C 4EFB 1000                  		jmp	BBall_Index(pc,d1.w)
00012A10                            ; ===========================================================================
00012A10 0000                       BBall_Index:	dc.w BBall_Main-BBall_Index
00012A12 0000                       		dc.w BBall_Move-BBall_Index
00012A14                            
00012A14 =0000003A                  bball_origX:	equ $3A		; original x-axis position
00012A14 =00000038                  bball_origY:	equ $38		; original y-axis position
00012A14 =0000003C                  bball_radius:	equ $3C		; radius of circle
00012A14 =0000003E                  bball_speed:	equ $3E		; speed
00012A14                            ; ===========================================================================
00012A14                            
00012A14                            BBall_Main:	; Routine 0
00012A14 5428 0024                  		addq.b	#2,obRoutine(a0)
00012A18 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0)
00012A20 317C 0396 0002             		move.w	#$396,obGfx(a0)
00012A26 117C 0004 0001             		move.b	#4,obRender(a0)
00012A2C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012A32 117C 0018 0014             		move.b	#$18,obActWid(a0)
00012A38 3168 0008 003A             		move.w	obX(a0),bball_origX(a0)
00012A3E 3168 000C 0038             		move.w	obY(a0),bball_origY(a0)
00012A44 117C 0086 0020             		move.b	#$86,obColType(a0)
00012A4A 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012A4E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012A52 4881                       		ext.w	d1
00012A54 E741                       		asl.w	#3,d1		; multiply by 8
00012A56 3141 003E                  		move.w	d1,bball_speed(a0) ; set object speed
00012A5A 1028 0022                  		move.b	obStatus(a0),d0
00012A5E E418                       		ror.b	#2,d0
00012A60 0200 00C0                  		andi.b	#$C0,d0
00012A64 1140 0026                  		move.b	d0,obAngle(a0)
00012A68 117C 0050 003C             		move.b	#$50,bball_radius(a0) ; set radius of circle motion
00012A6E                            
00012A6E                            BBall_Move:	; Routine 2
00012A6E 7000                       		moveq	#0,d0
00012A70 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00012A74 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00012A78 D040                       		add.w	d0,d0
00012A7A 323B 0000                  		move.w	@index(pc,d0.w),d1
00012A7E 4EBB 1000                  		jsr	@index(pc,d1.w)
00012AA0 6000 CA18                  		bra.w	DisplaySprite
00012AA4                            ; ===========================================================================
00012AA4 0000                       @index:		dc.w @type00-@index
00012AA6 0000                       		dc.w @type01-@index
00012AA8 0000                       		dc.w @type02-@index
00012AAA 0000                       		dc.w @type03-@index
00012AAC                            ; ===========================================================================
00012AAC                            
00012AAC                            @type00:
00012AAC 4E75                       		rts	
00012AAE                            ; ===========================================================================
00012AAE                            
00012AAE                            @type01:
00012AAE 323C 0060                  		move.w	#$60,d1
00012AB2 7000                       		moveq	#0,d0
00012AB4 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012AB8 0828 0000 0022             		btst	#0,obStatus(a0)
00012ABE 6700                       		beq.s	@noflip1
00012AC0 4440                       		neg.w	d0
00012AC2 D041                       		add.w	d1,d0
00012AC4                            
00012AC4                            	@noflip1:
00012AC4 3228 003A                  		move.w	bball_origX(a0),d1
00012AC8 9240                       		sub.w	d0,d1
00012ACA 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00012ACE 4E75                       		rts	
00012AD0                            ; ===========================================================================
00012AD0                            
00012AD0                            @type02:
00012AD0 323C 0060                  		move.w	#$60,d1
00012AD4 7000                       		moveq	#0,d0
00012AD6 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012ADA 0828 0000 0022             		btst	#0,obStatus(a0)
00012AE0 6700                       		beq.s	@noflip2
00012AE2 4440                       		neg.w	d0
00012AE4 0640 0080                  		addi.w	#$80,d0
00012AE8                            
00012AE8                            	@noflip2:
00012AE8 3228 0038                  		move.w	bball_origY(a0),d1
00012AEC 9240                       		sub.w	d0,d1
00012AEE 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012AF2 4E75                       		rts	
00012AF4                            ; ===========================================================================
00012AF4                            
00012AF4                            @type03:
00012AF4 3028 003E                  		move.w	bball_speed(a0),d0
00012AF8 D168 0026                  		add.w	d0,obAngle(a0)
00012AFC 1028 0026                  		move.b	obAngle(a0),d0
00012B00 4EB9 0000 3BA2             		jsr	(CalcSine).l
00012B06 3428 0038                  		move.w	bball_origY(a0),d2
00012B0A 3628 003A                  		move.w	bball_origX(a0),d3
00012B0E 7800                       		moveq	#0,d4
00012B10 1828 003C                  		move.b	bball_radius(a0),d4
00012B14 2A04                       		move.l	d4,d5
00012B16 C9C0                       		muls.w	d0,d4
00012B18 E084                       		asr.l	#8,d4
00012B1A CBC1                       		muls.w	d1,d5
00012B1C E085                       		asr.l	#8,d5
00012B1E D842                       		add.w	d2,d4
00012B20 DA43                       		add.w	d3,d5
00012B22 3144 000C                  		move.w	d4,obY(a0)	; move object circularly
00012B26 3145 0008                  		move.w	d5,obX(a0)
00012B2A 4E75                       		rts	
00012B2A 4E75                       		rts	
00012B2C                            Map_BBall:	include	"_maps\Big Spiked Ball.asm"
00012B2C                            ; --------------------------------------------------------------------------------
00012B2C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012B2C                            ; --------------------------------------------------------------------------------
00012B2C                            
00012B2C                            SME_u_DKx:	
00012B2C 0000 0000                  		dc.w SME_u_DKx_6-SME_u_DKx, SME_u_DKx_20-SME_u_DKx	
00012B30 0000                       		dc.w SME_u_DKx_26-SME_u_DKx	
00012B32 05                         SME_u_DKx_6:	dc.b 5	
00012B33 E804 0000 F8               		dc.b $E8, 4, 0, 0, $F8	
00012B38 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0	
00012B3D F801 0012 E8               		dc.b $F8, 1, 0, $12, $E8	
00012B42 F801 0014 10               		dc.b $F8, 1, 0, $14, $10	
00012B47 1004 0016 F8               		dc.b $10, 4, 0, $16, $F8	
00012B4C 01                         SME_u_DKx_20:	dc.b 1	
00012B4D F805 0020 F8               		dc.b $F8, 5, 0, $20, $F8	
00012B52 02                         SME_u_DKx_26:	dc.b 2	
00012B53 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0	
00012B58 E80D 1018 F0               		dc.b $E8, $D, $10, $18, $F0	
00012B5E 00                         		even
00012B5E 00                         		even
00012B5E                            		include	"_incObj\59 SLZ Elevators.asm"
00012B5E                            ; ---------------------------------------------------------------------------
00012B5E                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00012B5E                            ; ---------------------------------------------------------------------------
00012B5E                            
00012B5E                            Elevator:
00012B5E 7000                       		moveq	#0,d0
00012B60 1028 0024                  		move.b	obRoutine(a0),d0
00012B64 323B 0000                  		move.w	Elev_Index(pc,d0.w),d1
00012B68 4EBB 1000                  		jsr	Elev_Index(pc,d1.w)
00012B8A 6000 C92E                  		bra.w	DisplaySprite
00012B8E                            ; ===========================================================================
00012B8E 0000                       Elev_Index:	dc.w Elev_Main-Elev_Index
00012B90 0000                       		dc.w Elev_Platform-Elev_Index
00012B92 0000                       		dc.w Elev_Action-Elev_Index
00012B94 0000                       		dc.w Elev_MakeMulti-Elev_Index
00012B96                            
00012B96 =00000032                  elev_origX:	equ $32		; original x-axis position
00012B96 =00000030                  elev_origY:	equ $30		; original y-axis position
00012B96 =0000003C                  elev_dist:	equ $3C		; distance to move (2 bytes)
00012B96                            
00012B96 2800                       Elev_Var1:	dc.b $28, 0		; width, frame number
00012B98                            
00012B98 1001                       Elev_Var2:	dc.b $10, 1		; distance to move, action type
00012B9A 2001                       		dc.b $20, 1
00012B9C 3401                       		dc.b $34, 1
00012B9E 1003                       		dc.b $10, 3
00012BA0 2003                       		dc.b $20, 3
00012BA2 3403                       		dc.b $34, 3
00012BA4 1401                       		dc.b $14, 1
00012BA6 2401                       		dc.b $24, 1
00012BA8 2C01                       		dc.b $2C, 1
00012BAA 1403                       		dc.b $14, 3
00012BAC 2403                       		dc.b $24, 3
00012BAE 2C03                       		dc.b $2C, 3
00012BB0 2005                       		dc.b $20, 5
00012BB2 2007                       		dc.b $20, 7
00012BB4 3009                       		dc.b $30, 9
00012BB6                            ; ===========================================================================
00012BB6                            
00012BB6                            Elev_Main:	; Routine 0
00012BB6 5428 0024                  		addq.b	#2,obRoutine(a0)
00012BBA 7000                       		moveq	#0,d0
00012BBC 1028 0028                  		move.b	obSubtype(a0),d0
00012BC0 6A00                       		bpl.s	@normal		; branch for types 00-7F
00012BC2 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Elev_MakeMulti next
00012BC6 0240 007F                  		andi.w	#$7F,d0
00012BCA C0FC 0006                  		mulu.w	#6,d0
00012BCE 3140 003C                  		move.w	d0,elev_dist(a0)
00012BD2 3140 003E                  		move.w	d0,$3E(a0)
00012BD6 588F                       		addq.l	#4,sp
00012BD8 4E75                       		rts	
00012BDA                            ; ===========================================================================
00012BDA                            
00012BDA                            	@normal:
00012BDA E648                       		lsr.w	#3,d0
00012BDC 0240 001E                  		andi.w	#$1E,d0
00012BE0 45FB 00B4                  		lea	Elev_Var1(pc,d0.w),a2
00012BE4 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00012BE8 115A 001A                  		move.b	(a2)+,obFrame(a0) ; set frame
00012BEC 7000                       		moveq	#0,d0
00012BEE 1028 0028                  		move.b	obSubtype(a0),d0
00012BF2 D040                       		add.w	d0,d0
00012BF4 0240 001E                  		andi.w	#$1E,d0
00012BF8 45FB 009E                  		lea	Elev_Var2(pc,d0.w),a2
00012BFC 101A                       		move.b	(a2)+,d0
00012BFE E548                       		lsl.w	#2,d0
00012C00 3140 003C                  		move.w	d0,elev_dist(a0)	; set distance to move
00012C04 115A 0028                  		move.b	(a2)+,obSubtype(a0)	; set type
00012C08 217C 0000 0000 0004        		move.l	#Map_Elev,obMap(a0)
00012C10 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012C16 117C 0004 0001             		move.b	#4,obRender(a0)
00012C1C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012C22 3168 0008 0032             		move.w	obX(a0),elev_origX(a0)
00012C28 3168 000C 0030             		move.w	obY(a0),elev_origY(a0)
00012C2E                            
00012C2E                            Elev_Platform:	; Routine 2
00012C2E 7200                       		moveq	#0,d1
00012C30 1228 0014                  		move.b	obActWid(a0),d1
00012C34 4EB9 0000 8B78             		jsr	(PlatformObject).l
00012C3A 6000 0000                  		bra.w	Elev_Types
00012C3E                            ; ===========================================================================
00012C3E                            
00012C3E                            Elev_Action:	; Routine 4
00012C3E 7200                       		moveq	#0,d1
00012C40 1228 0014                  		move.b	obActWid(a0),d1
00012C44 4EB9 0000 8CEC             		jsr	(ExitPlatform).l
00012C4A 3F28 0008                  		move.w	obX(a0),-(sp)
00012C4E 6100 0000                  		bsr.w	Elev_Types
00012C52 341F                       		move.w	(sp)+,d2
00012C54 4A10                       		tst.b	0(a0)
00012C56 6700                       		beq.s	@deleted
00012C58 4EF9 0000 9256             		jmp	(MvSonicOnPtfm2).l
00012C5E                            
00012C5E                            	@deleted:
00012C5E 4E75                       		rts	
00012C60                            ; ===========================================================================
00012C60                            
00012C60                            Elev_Types:
00012C60 7000                       		moveq	#0,d0
00012C62 1028 0028                  		move.b	obSubtype(a0),d0
00012C66 0240 000F                  		andi.w	#$F,d0
00012C6A D040                       		add.w	d0,d0
00012C6C 323B 0000                  		move.w	@index(pc,d0.w),d1
00012C70 4EFB 1000                  		jmp	@index(pc,d1.w)
00012C74                            ; ===========================================================================
00012C74 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00012C78 0000 0000                  		dc.w @type02-@index, @type01-@index
00012C7C 0000 0000                  		dc.w @type04-@index, @type01-@index
00012C80 0000 0000                  		dc.w @type06-@index, @type01-@index
00012C84 0000 0000                  		dc.w @type08-@index, @type09-@index
00012C88                            ; ===========================================================================
00012C88                            
00012C88                            @type00:
00012C88 4E75                       		rts	
00012C8A                            ; ===========================================================================
00012C8A                            
00012C8A                            @type01:
00012C8A 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; check if Sonic is standing on the object
00012C90 6600                       		bne.s	@notstanding
00012C92 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
00012C96                            
00012C96                            	@notstanding:
00012C96 4E75                       		rts	
00012C98                            ; ===========================================================================
00012C98                            
00012C98                            @type02:
00012C98 6100 0000                  		bsr.w	Elev_Move
00012C9C 3028 0034                  		move.w	$34(a0),d0
00012CA0 4440                       		neg.w	d0
00012CA2 D068 0030                  		add.w	elev_origY(a0),d0
00012CA6 3140 000C                  		move.w	d0,obY(a0)
00012CAA 4E75                       		rts	
00012CAC                            ; ===========================================================================
00012CAC                            
00012CAC                            @type04:
00012CAC 6100 0000                  		bsr.w	Elev_Move
00012CB0 3028 0034                  		move.w	$34(a0),d0
00012CB4 D068 0030                  		add.w	elev_origY(a0),d0
00012CB8 3140 000C                  		move.w	d0,obY(a0)
00012CBC 4E75                       		rts	
00012CBE                            ; ===========================================================================
00012CBE                            
00012CBE                            @type06:
00012CBE 6100 0000                  		bsr.w	Elev_Move
00012CC2 3028 0034                  		move.w	$34(a0),d0
00012CC6 E240                       		asr.w	#1,d0
00012CC8 4440                       		neg.w	d0
00012CCA D068 0030                  		add.w	elev_origY(a0),d0
00012CCE 3140 000C                  		move.w	d0,obY(a0)
00012CD2 3028 0034                  		move.w	$34(a0),d0
00012CD6 D068 0032                  		add.w	elev_origX(a0),d0
00012CDA 3140 0008                  		move.w	d0,obX(a0)
00012CDE 4E75                       		rts	
00012CE0                            ; ===========================================================================
00012CE0                            
00012CE0                            @type08:
00012CE0 6100 0000                  		bsr.w	Elev_Move
00012CE4 3028 0034                  		move.w	$34(a0),d0
00012CE8 E240                       		asr.w	#1,d0
00012CEA D068 0030                  		add.w	elev_origY(a0),d0
00012CEE 3140 000C                  		move.w	d0,obY(a0)
00012CF2 3028 0034                  		move.w	$34(a0),d0
00012CF6 4440                       		neg.w	d0
00012CF8 D068 0032                  		add.w	elev_origX(a0),d0
00012CFC 3140 0008                  		move.w	d0,obX(a0)
00012D00 4E75                       		rts	
00012D02                            ; ===========================================================================
00012D02                            
00012D02                            @type09:
00012D02 6100 0000                  		bsr.w	Elev_Move
00012D06 3028 0034                  		move.w	$34(a0),d0
00012D0A 4440                       		neg.w	d0
00012D0C D068 0030                  		add.w	elev_origY(a0),d0
00012D10 3140 000C                  		move.w	d0,obY(a0)
00012D14 4A28 0028                  		tst.b	obSubtype(a0)
00012D18 6700 0000                  		beq.w	@typereset
00012D1C 4E75                       		rts	
00012D1E                            ; ===========================================================================
00012D1E                            
00012D1E                            	@typereset:
00012D1E 0828 0003 0022             		btst	#3,obStatus(a0)
00012D24 6700                       		beq.s	@delete
00012D26 08E9 0001 0022             		bset	#1,obStatus(a1)
00012D2C 08A9 0003 0022             		bclr	#3,obStatus(a1)
00012D32 137C 0002 0024             		move.b	#2,obRoutine(a1)
00012D38                            
00012D38                            	@delete:
00012D38 6000 C7C0                  		bra.w	DeleteObject
00012D3C                            
00012D3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012D3C                            
00012D3C                            
00012D3C                            Elev_Move:
00012D3C 3028 0038                  		move.w	$38(a0),d0
00012D40 4A28 003A                  		tst.b	$3A(a0)
00012D44 6600                       		bne.s	loc_10CC8
00012D46 0C40 0800                  		cmpi.w	#$800,d0
00012D4A 6400                       		bcc.s	loc_10CD0
00012D4C 0640 0010                  		addi.w	#$10,d0
00012D50 6000                       		bra.s	loc_10CD0
00012D52                            ; ===========================================================================
00012D52                            
00012D52                            loc_10CC8:
00012D52 4A40                       		tst.w	d0
00012D54 6700                       		beq.s	loc_10CD0
00012D56 0440 0010                  		subi.w	#$10,d0
00012D5A                            
00012D5A                            loc_10CD0:
00012D5A 3140 0038                  		move.w	d0,$38(a0)
00012D5E 48C0                       		ext.l	d0
00012D60 E180                       		asl.l	#8,d0
00012D62 D0A8 0034                  		add.l	$34(a0),d0
00012D66 2140 0034                  		move.l	d0,$34(a0)
00012D6A 4840                       		swap	d0
00012D6C 3428 003C                  		move.w	elev_dist(a0),d2
00012D70 B042                       		cmp.w	d2,d0
00012D72 6300                       		bls.s	loc_10CF0
00012D74 117C 0001 003A             		move.b	#1,$3A(a0)
00012D7A                            
00012D7A                            loc_10CF0:
00012D7A D442                       		add.w	d2,d2
00012D7C B042                       		cmp.w	d2,d0
00012D7E 6600                       		bne.s	locret_10CFA
00012D80 4228 0028                  		clr.b	obSubtype(a0)
00012D84                            
00012D84                            locret_10CFA:
00012D84 4E75                       		rts	
00012D86                            ; End of function Elev_Move
00012D86                            
00012D86                            ; ===========================================================================
00012D86                            
00012D86                            Elev_MakeMulti:	; Routine 6
00012D86 5368 003C                  		subq.w	#1,elev_dist(a0)
00012D8A 6600                       		bne.s	@chkdel
00012D8C 3168 003E 003C             		move.w	$3E(a0),elev_dist(a0)
00012D92 6100 CCC0                  		bsr.w	FindFreeObj
00012D96 6600                       		bne.s	@chkdel
00012D98 12BC 0059                  		move.b	#id_Elevator,0(a1) ; duplicate the object
00012D9C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00012DA2 3368 000C 000C             		move.w	obY(a0),obY(a1)
00012DA8 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00012DAE                            
00012DAE                            @chkdel:
00012DAE 588F                       		addq.l	#4,sp
00012DCE 4E75                       		rts	
00012DCE 4E75                       		rts	
00012DD0                            Map_Elev:	include	"_maps\SLZ Elevators.asm"
00012DD0                            ; ---------------------------------------------------------------------------
00012DD0                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00012DD0                            ; ---------------------------------------------------------------------------
00012DD0                            Map_Elev_internal:
00012DD0 0000                       		dc.w @elevator-Map_Elev_internal
00012DD2 03                         @elevator:	dc.b 3
00012DD3 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00012DD8 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00012DDD F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00012DE2                            		even
00012DE2                            		even
00012DE2                            		include	"_incObj\5A SLZ Circling Platform.asm"
00012DE2                            ; ---------------------------------------------------------------------------
00012DE2                            ; Object 5A - platforms	moving in circles (SLZ)
00012DE2                            ; ---------------------------------------------------------------------------
00012DE2                            
00012DE2                            CirclingPlatform:
00012DE2 7000                       		moveq	#0,d0
00012DE4 1028 0024                  		move.b	obRoutine(a0),d0
00012DE8 323B 0000                  		move.w	Circ_Index(pc,d0.w),d1
00012DEC 4EBB 1000                  		jsr	Circ_Index(pc,d1.w)
00012E0E 6000 C6AA                  		bra.w	DisplaySprite
00012E12                            ; ===========================================================================
00012E12 0000                       Circ_Index:	dc.w Circ_Main-Circ_Index
00012E14 0000                       		dc.w Circ_Platform-Circ_Index
00012E16 0000                       		dc.w Circ_Action-Circ_Index
00012E18                            
00012E18 =00000032                  circ_origX:	equ $32		; original x-axis position
00012E18 =00000030                  circ_origY:	equ $30		; original y-axis position
00012E18                            ; ===========================================================================
00012E18                            
00012E18                            Circ_Main:	; Routine 0
00012E18 5428 0024                  		addq.b	#2,obRoutine(a0)
00012E1C 217C 0000 0000 0004        		move.l	#Map_Circ,obMap(a0)
00012E24 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012E2A 117C 0004 0001             		move.b	#4,obRender(a0)
00012E30 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012E36 117C 0018 0014             		move.b	#$18,obActWid(a0)
00012E3C 3168 0008 0032             		move.w	obX(a0),circ_origX(a0)
00012E42 3168 000C 0030             		move.w	obY(a0),circ_origY(a0)
00012E48                            
00012E48                            Circ_Platform:	; Routine 2
00012E48 7200                       		moveq	#0,d1
00012E4A 1228 0014                  		move.b	obActWid(a0),d1
00012E4E 4EB9 0000 8B78             		jsr	(PlatformObject).l
00012E54 6000 0000                  		bra.w	Circ_Types
00012E58                            ; ===========================================================================
00012E58                            
00012E58                            Circ_Action:	; Routine 4
00012E58 7200                       		moveq	#0,d1
00012E5A 1228 0014                  		move.b	obActWid(a0),d1
00012E5E 4EB9 0000 8CEC             		jsr	(ExitPlatform).l
00012E64 3F28 0008                  		move.w	obX(a0),-(sp)
00012E68 6100 0000                  		bsr.w	Circ_Types
00012E6C 341F                       		move.w	(sp)+,d2
00012E6E 4EF9 0000 9256             		jmp	(MvSonicOnPtfm2).l
00012E74                            ; ===========================================================================
00012E74                            
00012E74                            Circ_Types:
00012E74 7000                       		moveq	#0,d0
00012E76 1028 0028                  		move.b	obSubtype(a0),d0
00012E7A 0240 000C                  		andi.w	#$C,d0
00012E7E E248                       		lsr.w	#1,d0
00012E80 323B 0000                  		move.w	@index(pc,d0.w),d1
00012E84 4EFB 1000                  		jmp	@index(pc,d1.w)
00012E88                            ; ===========================================================================
00012E88 0000                       @index:		dc.w @type00-@index
00012E8A 0000                       		dc.w @type04-@index
00012E8C                            ; ===========================================================================
00012E8C                            
00012E8C                            @type00:
00012E8C 1238 FE80                  		move.b	(v_oscillate+$22).w,d1 ; get rotating value
00012E90 0401 0050                  		subi.b	#$50,d1		; set radius of circle
00012E94 4881                       		ext.w	d1
00012E96 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
00012E9A 0402 0050                  		subi.b	#$50,d2
00012E9E 4882                       		ext.w	d2
00012EA0 0828 0000 0028             		btst	#0,obSubtype(a0)
00012EA6 6700                       		beq.s	@noshift00a
00012EA8 4441                       		neg.w	d1
00012EAA 4442                       		neg.w	d2
00012EAC                            
00012EAC                            	@noshift00a:
00012EAC 0828 0001 0028             		btst	#1,obSubtype(a0)
00012EB2 6700                       		beq.s	@noshift00b
00012EB4 4441                       		neg.w	d1
00012EB6 C342                       		exg	d1,d2
00012EB8                            
00012EB8                            	@noshift00b:
00012EB8 D268 0032                  		add.w	circ_origX(a0),d1
00012EBC 3141 0008                  		move.w	d1,obX(a0)
00012EC0 D468 0030                  		add.w	circ_origY(a0),d2
00012EC4 3142 000C                  		move.w	d2,obY(a0)
00012EC8 4E75                       		rts	
00012ECA                            ; ===========================================================================
00012ECA                            
00012ECA                            @type04:
00012ECA 1238 FE80                  		move.b	(v_oscillate+$22).w,d1
00012ECE 0401 0050                  		subi.b	#$50,d1
00012ED2 4881                       		ext.w	d1
00012ED4 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
00012ED8 0402 0050                  		subi.b	#$50,d2
00012EDC 4882                       		ext.w	d2
00012EDE 0828 0000 0028             		btst	#0,obSubtype(a0)
00012EE4 6700                       		beq.s	@noshift04a
00012EE6 4441                       		neg.w	d1
00012EE8 4442                       		neg.w	d2
00012EEA                            
00012EEA                            	@noshift04a:
00012EEA 0828 0001 0028             		btst	#1,obSubtype(a0)
00012EF0 6700                       		beq.s	@noshift04b
00012EF2 4441                       		neg.w	d1
00012EF4 C342                       		exg	d1,d2
00012EF6                            
00012EF6                            	@noshift04b:
00012EF6 4441                       		neg.w	d1
00012EF8 D268 0032                  		add.w	circ_origX(a0),d1
00012EFC 3141 0008                  		move.w	d1,obX(a0)
00012F00 D468 0030                  		add.w	circ_origY(a0),d2
00012F04 3142 000C                  		move.w	d2,obY(a0)
00012F08 4E75                       		rts	
00012F08 4E75                       		rts	
00012F0A                            Map_Circ:	include	"_maps\SLZ Circling Platform.asm"
00012F0A                            ; ---------------------------------------------------------------------------
00012F0A                            ; Sprite mappings - platforms that move	in circles (SLZ)
00012F0A                            ; ---------------------------------------------------------------------------
00012F0A                            Map_Circ_internal:
00012F0A 0000                       		dc.w @platform-Map_Circ_internal
00012F0C 02                         @platform:	dc.b 2
00012F0D F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00012F12 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00012F18 00                         		even
00012F18 00                         		even
00012F18                            		include	"_incObj\5B Staircase.asm"
00012F18                            ; ---------------------------------------------------------------------------
00012F18                            ; Object 5B - blocks that form a staircase (SLZ)
00012F18                            ; ---------------------------------------------------------------------------
00012F18                            
00012F18                            Staircase:
00012F18 7000                       		moveq	#0,d0
00012F1A 1028 0024                  		move.b	obRoutine(a0),d0
00012F1E 323B 0000                  		move.w	Stair_Index(pc,d0.w),d1
00012F22 4EBB 1000                  		jsr	Stair_Index(pc,d1.w)
00012F44 6000 C574                  		bra.w	DisplaySprite
00012F48                            ; ===========================================================================
00012F48 0000                       Stair_Index:	dc.w Stair_Main-Stair_Index
00012F4A 0000                       		dc.w Stair_Move-Stair_Index
00012F4C 0000                       		dc.w Stair_Solid-Stair_Index
00012F4E                            
00012F4E =00000030                  stair_origX:	equ $30		; original x-axis position
00012F4E =00000032                  stair_origY:	equ $32		; original y-axis position
00012F4E                            
00012F4E =0000003C                  stair_parent:	equ $3C		; address of parent object (4 bytes)
00012F4E                            ; ===========================================================================
00012F4E                            
00012F4E                            Stair_Main:	; Routine 0
00012F4E 5428 0024                  		addq.b	#2,obRoutine(a0)
00012F52 7638                       		moveq	#$38,d3
00012F54 7801                       		moveq	#1,d4
00012F56 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
00012F5C 6700                       		beq.s	@notflipped	; if not, branch
00012F5E 763B                       		moveq	#$3B,d3
00012F60 78FF                       		moveq	#-1,d4
00012F62                            
00012F62                            	@notflipped:
00012F62 3428 0008                  		move.w	obX(a0),d2
00012F66 2248                       		movea.l	a0,a1
00012F68 7203                       		moveq	#3,d1
00012F6A 6000                       		bra.s	@makeblocks
00012F6C                            ; ===========================================================================
00012F6C                            
00012F6C                            @loop:
00012F6C 6100 CAFC                  		bsr.w	FindNextFreeObj
00012F70 6600 0000                  		bne.w	@fail
00012F74 137C 0004 0024             		move.b	#4,obRoutine(a1)
00012F7A                            
00012F7A                            @makeblocks:
00012F7A 12BC 005B                  		move.b	#id_Staircase,0(a1) ; load another block object
00012F7E 237C 0000 0000 0004        		move.l	#Map_Stair,obMap(a1)
00012F86 337C 4000 0002             		move.w	#$4000,obGfx(a1)
00012F8C 137C 0004 0001             		move.b	#4,obRender(a1)
00012F92 337C 0180 0018             		move.w	#$180,obPriority(a1)
00012F98 137C 0010 0014             		move.b	#$10,obActWid(a1)
00012F9E 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00012FA4 3342 0008                  		move.w	d2,obX(a1)
00012FA8 3368 000C 000C             		move.w	obY(a0),obY(a1)
00012FAE 3368 0008 0030             		move.w	obX(a0),stair_origX(a1)
00012FB4 3369 000C 0032             		move.w	obY(a1),stair_origY(a1)
00012FBA 0642 0020                  		addi.w	#$20,d2
00012FBE 1343 0037                  		move.b	d3,$37(a1)
00012FC2 2348 003C                  		move.l	a0,stair_parent(a1)
00012FC6 D604                       		add.b	d4,d3
00012FC8 51C9 FFA2                  		dbf	d1,@loop	; repeat sequence 3 times
00012FCC                            
00012FCC                            	@fail:
00012FCC                            
00012FCC                            Stair_Move:	; Routine 2
00012FCC 7000                       		moveq	#0,d0
00012FCE 1028 0028                  		move.b	obSubtype(a0),d0
00012FD2 0240 0007                  		andi.w	#7,d0
00012FD6 D040                       		add.w	d0,d0
00012FD8 323B 0000                  		move.w	Stair_TypeIndex(pc,d0.w),d1
00012FDC 4EBB 1000                  		jsr	Stair_TypeIndex(pc,d1.w)
00012FE0                            
00012FE0                            Stair_Solid:	; Routine 4
00012FE0 2468 003C                  		movea.l	stair_parent(a0),a2
00012FE4 7000                       		moveq	#0,d0
00012FE6 1028 0037                  		move.b	$37(a0),d0
00012FEA 1032 0000                  		move.b	(a2,d0.w),d0
00012FEE D068 0032                  		add.w	stair_origY(a0),d0
00012FF2 3140 000C                  		move.w	d0,obY(a0)
00012FF6 7200                       		moveq	#0,d1
00012FF8 1228 0014                  		move.b	obActWid(a0),d1
00012FFC 0641 000B                  		addi.w	#$B,d1
00013000 343C 0010                  		move.w	#$10,d2
00013004 363C 0011                  		move.w	#$11,d3
00013008 3828 0008                  		move.w	obX(a0),d4
0001300C 6100 E9E8                  		bsr.w	SolidObject
00013010 4A04                       		tst.b	d4
00013012 6A00                       		bpl.s	loc_10F92
00013014 1544 0036                  		move.b	d4,$36(a2)
00013018                            
00013018                            loc_10F92:
00013018 0828 0003 0022             		btst	#3,obStatus(a0)
0001301E 6700                       		beq.s	locret_10FA0
00013020 157C 0001 0036             		move.b	#1,$36(a2)
00013026                            
00013026                            locret_10FA0:
00013026 4E75                       		rts	
00013028                            ; ===========================================================================
00013028 0000                       Stair_TypeIndex:dc.w Stair_Type00-Stair_TypeIndex
0001302A 0000                       		dc.w Stair_Type01-Stair_TypeIndex
0001302C 0000                       		dc.w Stair_Type02-Stair_TypeIndex
0001302E 0000                       		dc.w Stair_Type01-Stair_TypeIndex
00013030                            ; ===========================================================================
00013030                            
00013030                            Stair_Type00:
00013030 4A68 0034                  		tst.w	$34(a0)
00013034 6600                       		bne.s	loc_10FC0
00013036 0C28 0001 0036             		cmpi.b	#1,$36(a0)
0001303C 6600                       		bne.s	locret_10FBE
0001303E 317C 001E 0034             		move.w	#$1E,$34(a0)
00013044                            
00013044                            locret_10FBE:
00013044 4E75                       		rts	
00013046                            ; ===========================================================================
00013046                            
00013046                            loc_10FC0:
00013046 5368 0034                  		subq.w	#1,$34(a0)
0001304A 66F8                       		bne.s	locret_10FBE
0001304C 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
00013050 4E75                       		rts	
00013052                            ; ===========================================================================
00013052                            
00013052                            Stair_Type02:
00013052 4A68 0034                  		tst.w	$34(a0)
00013056 6600                       		bne.s	loc_10FE0
00013058 4A28 0036                  		tst.b	$36(a0)
0001305C 6A00                       		bpl.s	locret_10FDE
0001305E 317C 003C 0034             		move.w	#$3C,$34(a0)
00013064                            
00013064                            locret_10FDE:
00013064 4E75                       		rts	
00013066                            ; ===========================================================================
00013066                            
00013066                            loc_10FE0:
00013066 5368 0034                  		subq.w	#1,$34(a0)
0001306A 6600                       		bne.s	loc_10FEC
0001306C 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
00013070 4E75                       		rts	
00013072                            ; ===========================================================================
00013072                            
00013072                            loc_10FEC:
00013072 43E8 0038                  		lea	$38(a0),a1
00013076 3028 0034                  		move.w	$34(a0),d0
0001307A E408                       		lsr.b	#2,d0
0001307C 0200 0001                  		andi.b	#1,d0
00013080 12C0                       		move.b	d0,(a1)+
00013082 0A00 0001                  		eori.b	#1,d0
00013086 12C0                       		move.b	d0,(a1)+
00013088 0A00 0001                  		eori.b	#1,d0
0001308C 12C0                       		move.b	d0,(a1)+
0001308E 0A00 0001                  		eori.b	#1,d0
00013092 12C0                       		move.b	d0,(a1)+
00013094 4E75                       		rts	
00013096                            ; ===========================================================================
00013096                            
00013096                            Stair_Type01:
00013096 43E8 0038                  		lea	$38(a0),a1
0001309A 0C11 0080                  		cmpi.b	#$80,(a1)
0001309E 6700                       		beq.s	locret_11038
000130A0 5211                       		addq.b	#1,(a1)
000130A2 7200                       		moveq	#0,d1
000130A4 1219                       		move.b	(a1)+,d1
000130A6 4841                       		swap	d1
000130A8 E289                       		lsr.l	#1,d1
000130AA 2401                       		move.l	d1,d2
000130AC E289                       		lsr.l	#1,d1
000130AE 2601                       		move.l	d1,d3
000130B0 D682                       		add.l	d2,d3
000130B2 4841                       		swap	d1
000130B4 4842                       		swap	d2
000130B6 4843                       		swap	d3
000130B8 12C3                       		move.b	d3,(a1)+
000130BA 12C2                       		move.b	d2,(a1)+
000130BC 12C1                       		move.b	d1,(a1)+
000130BE                            
000130BE                            locret_11038:
000130BE 4E75                       		rts	
000130C0 4E75                       		rts	
000130C0 4E75                       		rts	
000130C2                            Map_Stair:	include	"_maps\Staircase.asm"
000130C2                            ; ---------------------------------------------------------------------------
000130C2                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000130C2                            ; ---------------------------------------------------------------------------
000130C2                            Map_Stair_internal:
000130C2 0000                       		dc.w @block-Map_Stair_internal
000130C4 01                         @block:		dc.b 1
000130C5 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000130CA                            		even
000130CA                            		even
000130CA                            		include	"_incObj\5C Pylon.asm"
000130CA                            ; ---------------------------------------------------------------------------
000130CA                            ; Object 5C - metal pylons in foreground (SLZ)
000130CA                            ; ---------------------------------------------------------------------------
000130CA                            
000130CA                            Pylon:
000130CA 7000                       		moveq	#0,d0
000130CC 1028 0024                  		move.b	obRoutine(a0),d0
000130D0 323B 0000                  		move.w	Pyl_Index(pc,d0.w),d1
000130D4 4EFB 1000                  		jmp	Pyl_Index(pc,d1.w)
000130D8                            ; ===========================================================================
000130D8 0000                       Pyl_Index:	dc.w Pyl_Main-Pyl_Index
000130DA 0000                       		dc.w Pyl_Display-Pyl_Index
000130DC                            ; ===========================================================================
000130DC                            
000130DC                            Pyl_Main:	; Routine 0
000130DC 5428 0024                  		addq.b	#2,obRoutine(a0)
000130E0 217C 0000 0000 0004        		move.l	#Map_Pylon,obMap(a0)
000130E8 317C 83CC 0002             		move.w	#$83CC,obGfx(a0)
000130EE 117C 0010 0014             		move.b	#$10,obActWid(a0)
000130F4                            
000130F4                            Pyl_Display:	; Routine 2
000130F4 2238 F700                  		move.l	(v_screenposx).w,d1
000130F8 D281                       		add.l	d1,d1
000130FA 4841                       		swap	d1
000130FC 4441                       		neg.w	d1
000130FE 3141 0008                  		move.w	d1,obX(a0)
00013102 2238 F704                  		move.l	(v_screenposy).w,d1
00013106 D281                       		add.l	d1,d1
00013108 4841                       		swap	d1
0001310A 0241 003F                  		andi.w	#$3F,d1
0001310E 4441                       		neg.w	d1
00013110 0641 0100                  		addi.w	#$100,d1
00013114 3141 000A                  		move.w	d1,obScreenY(a0)
00013118 6000 C3A0                  		bra.w	DisplaySprite
00013118 6000 C3A0                  		bra.w	DisplaySprite
0001311C                            Map_Pylon:	include	"_maps\Pylon.asm"
0001311C                            ; ---------------------------------------------------------------------------
0001311C                            ; Sprite mappings - metal pylons in foreground (SLZ)
0001311C                            ; ---------------------------------------------------------------------------
0001311C                            Map_Pylon_internal:
0001311C 0000                       		dc.w @pylon-Map_Pylon_internal
0001311E 09                         @pylon:		dc.b 9
0001311F 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00013124 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00013129 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
0001312E E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00013133 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00013138 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
0001313D 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00013142 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00013147 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
0001314C                            		even
0001314C                            		even
0001314C                            
0001314C                            		include	"_incObj\1B Water Surface.asm"
0001314C                            ; ---------------------------------------------------------------------------
0001314C                            ; Object 1B - water surface (LZ)
0001314C                            ; ---------------------------------------------------------------------------
0001314C                            
0001314C                            WaterSurface:
0001314C 7000                       		moveq	#0,d0
0001314E 1028 0024                  		move.b	obRoutine(a0),d0
00013152 323B 0000                  		move.w	Surf_Index(pc,d0.w),d1
00013156 4EFB 1000                  		jmp	Surf_Index(pc,d1.w)
0001315A                            ; ===========================================================================
0001315A 0000                       Surf_Index:	dc.w Surf_Main-Surf_Index
0001315C 0000                       		dc.w Surf_Action-Surf_Index
0001315E                            
0001315E =00000030                  surf_origX:	equ $30		; original x-axis position
0001315E =00000032                  surf_freeze:	equ $32		; flag to freeze animation
0001315E                            ; ===========================================================================
0001315E                            
0001315E                            Surf_Main:	; Routine 0
0001315E 5428 0024                  		addq.b	#2,obRoutine(a0)
00013162 217C 0000 0000 0004        		move.l	#Map_Surf,obMap(a0)
0001316A 317C C300 0002             		move.w	#$C300,obGfx(a0)
00013170 117C 0004 0001             		move.b	#4,obRender(a0)
00013176 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001317C 3168 0008 0030             		move.w	obX(a0),surf_origX(a0)
00013182                            
00013182                            Surf_Action:	; Routine 2
00013182 3238 F700                  		move.w	(v_screenposx).w,d1
00013186 0241 FFE0                  		andi.w	#$FFE0,d1
0001318A D268 0030                  		add.w	surf_origX(a0),d1
0001318E 0838 0000 FE05             		btst	#0,(v_framebyte).w
00013194 6700                       		beq.s	@even		; branch on even frames
00013196 0641 0020                  		addi.w	#$20,d1
0001319A                            
0001319A                            	@even:
0001319A 3141 0008                  		move.w	d1,obX(a0)	; match	obj x-position to screen position
0001319E 3238 F646                  		move.w	(v_waterpos1).w,d1
000131A2 3141 000C                  		move.w	d1,obY(a0)	; match	obj y-position to water	height
000131A6 4A28 0032                  		tst.b	surf_freeze(a0)
000131AA 6600                       		bne.s	@stopped
000131AC 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
000131B2 6700                       		beq.s	@animate	; if not, branch
000131B4 5628 001A                  		addq.b	#3,obFrame(a0)	; use different	frames
000131B8 117C 0001 0032             		move.b	#1,surf_freeze(a0) ; stop animation
000131BE 6000                       		bra.s	@display
000131C0                            ; ===========================================================================
000131C0                            
000131C0                            @stopped:
000131C0 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
000131C4 6600                       		bne.s	@display	; if yes, branch
000131C6 117C 0000 0032             		move.b	#0,surf_freeze(a0) ; resume animation
000131CC 5728 001A                  		subq.b	#3,obFrame(a0)	; use normal frames
000131D0                            
000131D0                            @animate:
000131D0 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000131D4 6A00                       		bpl.s	@display
000131D6 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
000131DC 5228 001A                  		addq.b	#1,obFrame(a0)
000131E0 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)
000131E6 6500                       		bcs.s	@display
000131E8 117C 0000 001A             		move.b	#0,obFrame(a0)
000131EE                            
000131EE                            @display:
000131EE 6000 C2CA                  		bra.w	DisplaySprite
000131EE 6000 C2CA                  		bra.w	DisplaySprite
000131F2                            Map_Surf:	include	"_maps\Water Surface.asm"
000131F2                            ; --------------------------------------------------------------------------------
000131F2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000131F2                            ; --------------------------------------------------------------------------------
000131F2                            
000131F2                            SME_LGSi8:	
000131F2 0000 0000                  		dc.w SME_LGSi8_C-SME_LGSi8, SME_LGSi8_1C-SME_LGSi8	
000131F6 0000 0000                  		dc.w SME_LGSi8_2C-SME_LGSi8, SME_LGSi8_3C-SME_LGSi8	
000131FA 0000 0000                  		dc.w SME_LGSi8_5B-SME_LGSi8, SME_LGSi8_7A-SME_LGSi8	
000131FE 03                         SME_LGSi8_C:	dc.b 3	
000131FF F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
00013204 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
00013209 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
0001320E 03                         SME_LGSi8_1C:	dc.b 3	
0001320F F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
00013214 F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
00013219 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
0001321E 03                         SME_LGSi8_2C:	dc.b 3	
0001321F F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
00013224 F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
00013229 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
0001322E 06                         SME_LGSi8_3C:	dc.b 6	
0001322F F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
00013234 F80D 0000 C0               		dc.b $F8, $D, 0, 0, $C0	
00013239 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
0001323E F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
00013243 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
00013248 F80D 0000 40               		dc.b $F8, $D, 0, 0, $40	
0001324D 06                         SME_LGSi8_5B:	dc.b 6	
0001324E F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
00013253 F80D 0008 C0               		dc.b $F8, $D, 0, 8, $C0	
00013258 F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
0001325D F80D 0008 00               		dc.b $F8, $D, 0, 8, 0	
00013262 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
00013267 F80D 0008 40               		dc.b $F8, $D, 0, 8, $40	
0001326C 06                         SME_LGSi8_7A:	dc.b 6	
0001326D F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
00013272 F80D 0800 C0               		dc.b $F8, $D, 8, 0, $C0	
00013277 F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
0001327C F80D 0800 00               		dc.b $F8, $D, 8, 0, 0	
00013281 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
00013286 F80D 0800 40               		dc.b $F8, $D, 8, 0, $40	
0001328C 00                         		even
0001328C 00                         		even
0001328C                            		include	"_incObj\0B Pole that Breaks.asm"
0001328C                            ; ---------------------------------------------------------------------------
0001328C                            ; Object 0B - pole that	breaks (LZ)
0001328C                            ; ---------------------------------------------------------------------------
0001328C                            
0001328C                            Pole:
0001328C 7000                       		moveq	#0,d0
0001328E 1028 0024                  		move.b	obRoutine(a0),d0
00013292 323B 0000                  		move.w	Pole_Index(pc,d0.w),d1
00013296 4EFB 1000                  		jmp	Pole_Index(pc,d1.w)
0001329A                            ; ===========================================================================
0001329A 0000                       Pole_Index:	dc.w Pole_Main-Pole_Index
0001329C 0000                       		dc.w Pole_Action-Pole_Index
0001329E 0000                       		dc.w Pole_Display-Pole_Index
000132A0                            
000132A0 =00000030                  pole_time:	equ $30		; time between grabbing the pole & breaking
000132A0 =00000032                  pole_grabbed:	equ $32		; flag set when Sonic grabs the pole
000132A0                            ; ===========================================================================
000132A0                            
000132A0                            Pole_Main:	; Routine 0
000132A0 5428 0024                  		addq.b	#2,obRoutine(a0)
000132A4 217C 0000 0000 0004        		move.l	#Map_Pole,obMap(a0)
000132AC 317C 43DE 0002             		move.w	#$43DE,obGfx(a0)
000132B2 117C 0004 0001             		move.b	#4,obRender(a0)
000132B8 117C 0008 0014             		move.b	#8,obActWid(a0)
000132BE 317C 0200 0018             		move.w	#$200,obPriority(a0)
000132C4 117C 00E1 0020             		move.b	#$E1,obColType(a0)
000132CA 7000                       		moveq	#0,d0
000132CC 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000132D0 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000132D4 3140 0030                  		move.w	d0,pole_time(a0) ; set breakage time
000132D8                            
000132D8                            Pole_Action:	; Routine 2
000132D8 4A28 0032                  		tst.b	pole_grabbed(a0) ; has pole already been grabbed?
000132DC 6700                       		beq.s	@grab		; if not, branch
000132DE 4A68 0030                  		tst.w	pole_time(a0)
000132E2 6700                       		beq.s	@moveup
000132E4 5368 0030                  		subq.w	#1,pole_time(a0) ; decrement time until break
000132E8 6600                       		bne.s	@moveup
000132EA 117C 0001 001A             		move.b	#1,obFrame(a0)	; break	the pole
000132F0 6000                       		bra.s	@release
000132F2                            ; ===========================================================================
000132F2                            
000132F2                            @moveup:
000132F2 43F8 D000                  		lea	(v_player).w,a1
000132F6 3028 000C                  		move.w	obY(a0),d0
000132FA 0440 0018                  		subi.w	#$18,d0
000132FE 0838 0000 F604             		btst	#bitUp,(v_jpadhold1).w ; is "up" pressed?
00013304 6700                       		beq.s	@movedown	; if not, branch
00013306 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up
0001330A B069 000C                  		cmp.w	obY(a1),d0
0001330E 6500                       		bcs.s	@movedown
00013310 3340 000C                  		move.w	d0,obY(a1)
00013314                            
00013314                            @movedown:
00013314 0640 0024                  		addi.w	#$24,d0
00013318 0838 0001 F604             		btst	#bitDn,(v_jpadhold1).w ; is "down" pressed?
0001331E 6700                       		beq.s	@letgo		; if not, branch
00013320 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down
00013324 B069 000C                  		cmp.w	obY(a1),d0
00013328 6400                       		bcc.s	@letgo
0001332A 3340 000C                  		move.w	d0,obY(a1)
0001332E                            
0001332E                            @letgo:
0001332E 1038 F603                  		move.b	(v_jpadpress2).w,d0
00013332 0240 0070                  		andi.w	#btnABC,d0	; is A/B/C pressed?
00013336 6700                       		beq.s	Pole_Display	; if not, branch
00013338                            
00013338                            @release:
00013338 4228 0020                  		clr.b	obColType(a0)
0001333C 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Pole_Display next
00013340 4238 F7C8                  		clr.b	(f_lockmulti).w
00013344 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00013348 4228 0032                  		clr.b	pole_grabbed(a0)
0001334C 6000                       		bra.s	Pole_Display
0001334E                            ; ===========================================================================
0001334E                            
0001334E                            @grab:
0001334E 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	pole?
00013352 6700                       		beq.s	Pole_Display	; if not, branch
00013354 43F8 D000                  		lea	(v_player).w,a1
00013358 3028 0008                  		move.w	obX(a0),d0
0001335C 0640 0014                  		addi.w	#$14,d0
00013360 B069 0008                  		cmp.w	obX(a1),d0
00013364 6400                       		bcc.s	Pole_Display
00013366 4228 0021                  		clr.b	obColProp(a0)
0001336A 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1)
00013370 6400                       		bcc.s	Pole_Display
00013372 4269 0010                  		clr.w	obVelX(a1)	; stop Sonic moving
00013376 4269 0012                  		clr.w	obVelY(a1)	; stop Sonic moving
0001337A 3028 0008                  		move.w	obX(a0),d0
0001337E 0640 0014                  		addi.w	#$14,d0
00013382 3340 0008                  		move.w	d0,obX(a1)
00013386 08A9 0000 0022             		bclr	#0,obStatus(a1)
0001338C 137C 0000 001C             		move.b	#id_Hang,obAnim(a1) ; set Sonic's animation to "hanging" ($11)
00013392 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
00013398 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
0001339E 117C 0001 0032             		move.b	#1,pole_grabbed(a0) ; begin countdown to breakage
000133A4                            
000133A4                            Pole_Display:	; Routine 4
000133A4 6000 E1B8                  		bra.w	RememberState
000133A4 6000 E1B8                  		bra.w	RememberState
000133A8                            Map_Pole:	include	"_maps\Pole that Breaks.asm"
000133A8                            ; ---------------------------------------------------------------------------
000133A8                            ; Sprite mappings - pole that breaks (LZ)
000133A8                            ; ---------------------------------------------------------------------------
000133A8                            Map_Pole_internal:
000133A8 0000                       		dc.w @normal-Map_Pole_internal
000133AA 0000                       		dc.w @broken-Map_Pole_internal
000133AC 02                         @normal:	dc.b 2			; normal pole
000133AD E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
000133B2 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
000133B7 04                         @broken:	dc.b 4			; broken pole
000133B8 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
000133BD F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
000133C2 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
000133C7 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
000133CC                            		even
000133CC                            		even
000133CC                            		include	"_incObj\0C Flapping Door.asm"
000133CC                            ; ---------------------------------------------------------------------------
000133CC                            ; Object 0C - flapping door (LZ)
000133CC                            ; ---------------------------------------------------------------------------
000133CC                            
000133CC                            FlapDoor:
000133CC 7000                       		moveq	#0,d0
000133CE 1028 0024                  		move.b	obRoutine(a0),d0
000133D2 323B 0000                  		move.w	Flap_Index(pc,d0.w),d1
000133D6 4EFB 1000                  		jmp	Flap_Index(pc,d1.w)
000133DA                            ; ===========================================================================
000133DA 0000                       Flap_Index:	dc.w Flap_Main-Flap_Index
000133DC 0000                       		dc.w Flap_OpenClose-Flap_Index
000133DE                            
000133DE =00000032                  flap_time:	equ $32		; time between opening/closing
000133DE =00000030                  flap_wait:	equ $30		; time until change
000133DE                            ; ===========================================================================
000133DE                            
000133DE                            Flap_Main:	; Routine 0
000133DE 5428 0024                  		addq.b	#2,obRoutine(a0)
000133E2 217C 0000 0000 0004        		move.l	#Map_Flap,obMap(a0)
000133EA 317C 4328 0002             		move.w	#$4328,obGfx(a0)
000133F0 0028 0004 0001             		ori.b	#4,obRender(a0)
000133F6 117C 0028 0014             		move.b	#$28,obActWid(a0)
000133FC 7000                       		moveq	#0,d0
000133FE 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013402 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00013406 3140 0032                  		move.w	d0,flap_time(a0) ; set flap delay time
0001340A                            
0001340A                            Flap_OpenClose:	; Routine 2
0001340A 5368 0030                  		subq.w	#1,flap_wait(a0) ; decrement time delay
0001340E 6A00                       		bpl.s	@wait		; if time remains, branch
00013410 3168 0032 0030             		move.w	flap_time(a0),flap_wait(a0) ; reset time delay
00013416 0868 0000 001C             		bchg	#0,obAnim(a0)	; open/close door
0001341C 4A28 0001                  		tst.b	obRender(a0)
00013420 6A00                       		bpl.s	@nosound
0001342C                            
0001342C                            	@wait:
0001342C                            	@nosound:
0001342C 43F9 0000 0000             		lea	(Ani_Flap).l,a1
00013432 6100 9140                  		bsr.w	AnimateSprite
00013436 4238 F7C9                  		clr.b	(f_wtunnelallow).w ; enable wind tunnel
0001343A 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
0001343E 6600                       		bne.s	@display	; if yes, branch
00013440 3038 D008                  		move.w	(v_player+obX).w,d0
00013444 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic passed through the door?
00013448 6400                       		bcc.s	@display	; if yes, branch
0001344A 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
00013450 323C 0013                  		move.w	#$13,d1
00013454 343C 0020                  		move.w	#$20,d2
00013458 3602                       		move.w	d2,d3
0001345A 5243                       		addq.w	#1,d3
0001345C 3828 0008                  		move.w	obX(a0),d4
00013460 6100 E594                  		bsr.w	SolidObject	; make the door	solid
00013464                            
00013464                            	@display:
00013464 6000 E0F8                  		bra.w	RememberState
00013464 6000 E0F8                  		bra.w	RememberState
00013468                            		include	"_anim\Flapping Door.asm"
00013468                            ; ---------------------------------------------------------------------------
00013468                            ; Animation script - flapping door (LZ)
00013468                            ; ---------------------------------------------------------------------------
00013468 0000                       Ani_Flap:	dc.w @opening-Ani_Flap
0001346A 0000                       		dc.w @closing-Ani_Flap
0001346C 0300 0102 FE01             @opening:	dc.b 3,	0, 1, 2, afBack, 1
00013472 0302 0100 FE01             @closing:	dc.b 3,	2, 1, 0, afBack, 1
00013478                            		even
00013478                            		even
00013478                            Map_Flap:	include	"_maps\Flapping Door.asm"
00013478                            ; ---------------------------------------------------------------------------
00013478                            ; Sprite mappings - flapping door (LZ)
00013478                            ; ---------------------------------------------------------------------------
00013478                            Map_Flap_internal:
00013478 0000                       		dc.w @closed-Map_Flap_internal
0001347A 0000                       		dc.w @halfway-Map_Flap_internal
0001347C 0000                       		dc.w @open-Map_Flap_internal
0001347E 02                         @closed:	dc.b 2
0001347F E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00013484 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00013489 02                         @halfway:	dc.b 2
0001348A DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
0001348F 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00013494 02                         @open:		dc.b 2
00013495 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
0001349A 180D 1018 00               		dc.b $18, $D, $10, $18,	0
000134A0 00                         		even
000134A0 00                         		even
000134A0                            
000134A0                            		include	"_incObj\71 Invisible Barriers.asm"
000134A0                            ; ---------------------------------------------------------------------------
000134A0                            ; Object 71 - invisible	solid barriers
000134A0                            ; ---------------------------------------------------------------------------
000134A0                            
000134A0                            Invisibarrier:
000134A0 7000                       		moveq	#0,d0
000134A2 1028 0024                  		move.b	obRoutine(a0),d0
000134A6 323B 0000                  		move.w	Invis_Index(pc,d0.w),d1
000134AA 4EFB 1000                  		jmp	Invis_Index(pc,d1.w)
000134AE                            ; ===========================================================================
000134AE 0000                       Invis_Index:	dc.w Invis_Main-Invis_Index
000134B0 0000                       		dc.w Invis_Solid-Invis_Index
000134B2                            
000134B2 =00000016                  invis_height:	equ $16		; height in pixels
000134B2                            ; ===========================================================================
000134B2                            
000134B2                            Invis_Main:	; Routine 0
000134B2 5428 0024                  		addq.b	#2,obRoutine(a0)
000134B6 217C 0000 0000 0004        		move.l	#Map_Invis,obMap(a0)
000134BE 317C 8680 0002             		move.w	#$8680,obGfx(a0)
000134C4 0028 0004 0001             		ori.b	#4,obRender(a0)
000134CA 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000134CE 1200                       		move.b	d0,d1
000134D0 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
000134D4 0640 0010                  		addi.w	#$10,d0
000134D8 E248                       		lsr.w	#1,d0
000134DA 1140 0014                  		move.b	d0,obActWid(a0)	; set object width
000134DE 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
000134E2 5241                       		addq.w	#1,d1
000134E4 E749                       		lsl.w	#3,d1
000134E6 1141 0016                  		move.b	d1,invis_height(a0) ; set object height
000134EA                            
000134EA                            Invis_Solid:	; Routine 2
000134EA 6100 C35C                  		bsr.w	ChkObjectVisible
000134EE 6600                       		bne.s	@chkdel
000134F0 7200                       		moveq	#0,d1
000134F2 1228 0014                  		move.b	obActWid(a0),d1
000134F6 0641 000B                  		addi.w	#$B,d1
000134FA 7400                       		moveq	#0,d2
000134FC 1428 0016                  		move.b	invis_height(a0),d2
00013500 3602                       		move.w	d2,d3
00013502 5243                       		addq.w	#1,d3
00013504 3828 0008                  		move.w	obX(a0),d4
00013508 6100 E534                  		bsr.w	SolidObject71
0001350C                            
0001350C                            @chkdel:
00013528 4A78 FE08                  		tst.w	(v_debuguse).w	; are you using	debug mode?
0001352C 6700                       		beq.s	@nodisplay	; if not, branch
0001352E 4EF9 0000 F4BA             		jmp	(DisplaySprite).l	; if yes, display the object
00013534                            
00013534                            	@nodisplay:
00013534 4E75                       		rts	
00013536                            
00013536                            	@delete:
00013536 4EF9 0000 F4FA             		jmp	(DeleteObject).l
00013536 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001353C                            Map_Invis:	include	"_maps\Invisible Barriers.asm"
0001353C                            ; --------------------------------------------------------------------------------
0001353C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001353C                            ; --------------------------------------------------------------------------------
0001353C                            
0001353C                            SME_t60cE:	
0001353C 0000 0000                  		dc.w SME_t60cE_6-SME_t60cE, SME_t60cE_1B-SME_t60cE	
00013540 0000                       		dc.w SME_t60cE_30-SME_t60cE	
00013542 04                         SME_t60cE_6:	dc.b 4	
00013543 0005 0028 F0               		dc.b 0, 5, 0, $28, $F0	
00013548 0005 0028 00               		dc.b 0, 5, 0, $28, 0	
0001354D F005 0028 00               		dc.b $F0, 5, 0, $28, 0	
00013552 F005 0028 F0               		dc.b $F0, 5, 0, $28, $F0	
00013557 04                         SME_t60cE_1B:	dc.b 4	
00013558 E005 0028 C0               		dc.b $E0, 5, 0, $28, $C0	
0001355D E005 0028 30               		dc.b $E0, 5, 0, $28, $30	
00013562 1005 0028 30               		dc.b $10, 5, 0, $28, $30	
00013567 1005 0028 C0               		dc.b $10, 5, 0, $28, $C0	
0001356C 04                         SME_t60cE_30:	dc.b 4	
0001356D E005 0028 80               		dc.b $E0, 5, 0, $28, $80	
00013572 E005 0028 70               		dc.b $E0, 5, 0, $28, $70	
00013577 1005 0028 70               		dc.b $10, 5, 0, $28, $70	
0001357C 1005 0028 80               		dc.b $10, 5, 0, $28, $80	
00013582 00                         		even
00013582 00                         		even
00013582                            
00013582                            		include	"_incObj\5D Fan.asm"
00013582                            ; ---------------------------------------------------------------------------
00013582                            ; Object 5D - fans (SLZ)
00013582                            ; ---------------------------------------------------------------------------
00013582                            
00013582                            Fan:
00013582 7000                       		moveq	#0,d0
00013584 1028 0024                  		move.b	obRoutine(a0),d0
00013588 323B 0000                  		move.w	Fan_Index(pc,d0.w),d1
0001358C 4EFB 1000                  		jmp	Fan_Index(pc,d1.w)
00013590                            ; ===========================================================================
00013590 0000                       Fan_Index:	dc.w Fan_Main-Fan_Index
00013592 0000                       		dc.w Fan_Delay-Fan_Index
00013594                            
00013594 =00000030                  fan_time:	equ $30		; time between switching on/off
00013594 =00000032                  fan_switch:	equ $32		; on/off switch
00013594                            ; ===========================================================================
00013594                            
00013594                            Fan_Main:	; Routine 0
00013594 5428 0024                  		addq.b	#2,obRoutine(a0)
00013598 217C 0000 0000 0004        		move.l	#Map_Fan,obMap(a0)
000135A0 317C 43A0 0002             		move.w	#$43A0,obGfx(a0)
000135A6 0028 0004 0001             		ori.b	#4,obRender(a0)
000135AC 117C 0010 0014             		move.b	#$10,obActWid(a0)
000135B2 317C 0200 0018             		move.w	#$200,obPriority(a0)
000135B8                            
000135B8                            Fan_Delay:	; Routine 2
000135B8 0828 0001 0028             		btst	#1,obSubtype(a0) ; is object type 02/03 (always on)?
000135BE 6600                       		bne.s	@blow		; if yes, branch
000135C0 5368 0030                  		subq.w	#1,fan_time(a0)	; subtract 1 from time delay
000135C4 6A00                       		bpl.s	@blow		; if time remains, branch
000135C6 317C 0078 0030             		move.w	#120,fan_time(a0) ; set delay to 2 seconds
000135CC 0868 0000 0032             		bchg	#0,fan_switch(a0) ; switch fan on/off
000135D2 6700                       		beq.s	@blow		; if fan is off, branch
000135D4 317C 00B4 0030             		move.w	#180,fan_time(a0) ; set delay to 3 seconds
000135DA                            
000135DA                            @blow:
000135DA 4A28 0032                  		tst.b	fan_switch(a0)	; is fan switched on?
000135DE 6600 0000                  		bne.w	@chkdel		; if not, branch
000135E2 43F8 D000                  		lea	(v_player).w,a1
000135E6 3029 0008                  		move.w	obX(a1),d0
000135EA 9068 0008                  		sub.w	obX(a0),d0
000135EE 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
000135F4 6600                       		bne.s	@chksonic	; if yes, branch
000135F6 4440                       		neg.w	d0
000135F8                            
000135F8                            @chksonic:
000135F8 0640 0050                  		addi.w	#$50,d0
000135FC 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00013600 6400                       		bcc.s	@animate	; if yes, branch
00013602 3229 000C                  		move.w	obY(a1),d1
00013606 0641 0060                  		addi.w	#$60,d1
0001360A 9268 000C                  		sub.w	obY(a0),d1
0001360E 6500                       		bcs.s	@animate	; branch if Sonic is too low
00013610 0C41 0070                  		cmpi.w	#$70,d1
00013614 6400                       		bcc.s	@animate	; branch if Sonic is too high
00013616 0440 0050                  		subi.w	#$50,d0		; is Sonic more than $50 pixels from the fan?
0001361A 6400                       		bcc.s	@faraway	; if yes, branch
0001361C 4640                       		not.w	d0
0001361E D040                       		add.w	d0,d0
00013620                            
00013620                            	@faraway:
00013620 0640 0060                  		addi.w	#$60,d0
00013624 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
0001362A 6600                       		bne.s	@right		; if yes, branch
0001362C 4440                       		neg.w	d0
0001362E                            
0001362E                            	@right:
0001362E 4400                       		neg.b	d0
00013630 E840                       		asr.w	#4,d0
00013632 0828 0000 0028             		btst	#0,obSubtype(a0)
00013638 6700                       		beq.s	@movesonic
0001363A 4440                       		neg.w	d0
0001363C                            
0001363C                            	@movesonic:
0001363C D169 0008                  		add.w	d0,obX(a1)	; push Sonic away from the fan
00013640                            
00013640                            @animate:
00013640 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00013644 6A00                       		bpl.s	@chkdel
00013646 117C 0000 001E             		move.b	#0,obTimeFrame(a0)
0001364C 5228 001B                  		addq.b	#1,obAniFrame(a0)
00013650 0C28 0003 001B             		cmpi.b	#3,obAniFrame(a0)
00013656 6500                       		bcs.s	@noreset
00013658 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset after 4 frames
0001365E                            
0001365E                            	@noreset:
0001365E 7000                       		moveq	#0,d0
00013660 0828 0000 0028             		btst	#0,obSubtype(a0)
00013666 6700                       		beq.s	@noflip
00013668 7002                       		moveq	#2,d0
0001366A                            
0001366A                            	@noflip:
0001366A D028 001B                  		add.b	obAniFrame(a0),d0
0001366E 1140 001A                  		move.b	d0,obFrame(a0)
00013672                            
00013672                            @chkdel:
00013672 6100 BE46                  		bsr.w	DisplaySprite
00013694 4E75                       		rts	
00013694 4E75                       		rts	
00013696                            Map_Fan:	include	"_maps\Fan.asm"
00013696                            ; ---------------------------------------------------------------------------
00013696                            ; Sprite mappings - fans (SLZ)
00013696                            ; ---------------------------------------------------------------------------
00013696                            Map_Fan_internal:
00013696 0000                       		dc.w @fan1-Map_Fan_internal
00013698 0000                       		dc.w @fan2-Map_Fan_internal
0001369A 0000                       		dc.w @fan3-Map_Fan_internal
0001369C 0000                       		dc.w @fan2-Map_Fan_internal
0001369E 0000                       		dc.w @fan1-Map_Fan_internal
000136A0 02                         @fan1:		dc.b 2
000136A1 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
000136A6 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
000136AB 02                         @fan2:		dc.b 2
000136AC F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
000136B1 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
000136B6 02                         @fan3:		dc.b 2
000136B7 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
000136BC 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
000136C2 00                         		even
000136C2 00                         		even
000136C2                            		include	"_incObj\5E Seesaw.asm"
000136C2                            ; ---------------------------------------------------------------------------
000136C2                            ; Object 5E - seesaws (SLZ)
000136C2                            ; ---------------------------------------------------------------------------
000136C2                            
000136C2                            Seesaw:
000136C2 7000                       		moveq	#0,d0
000136C4 1028 0024                  		move.b	obRoutine(a0),d0
000136C8 323B 0000                  		move.w	See_Index(pc,d0.w),d1
000136CC 4EBB 1000                  		jsr	See_Index(pc,d1.w)
000136D0 3028 0000                  		move.w	see_origX(a0),d0
000136D4 0240 FF80                  		andi.w	#$FF80,d0
000136D8 3238 F700                  		move.w	(v_screenposx).w,d1
000136DC 0441 0080                  		subi.w	#$80,d1
000136E0 0241 FF80                  		andi.w	#$FF80,d1
000136E4 9041                       		sub.w	d1,d0
000136E6 6B00 BE12                  		bmi.w	DeleteObject
000136EA 0C40 0280                  		cmpi.w	#$280,d0
000136EE 6200 BE0A                  		bhi.w	DeleteObject
000136F2 6000 BDC6                  		bra.w	DisplaySprite
000136F6                            ; ===========================================================================
000136F6 0000                       See_Index:	dc.w See_Main-See_Index
000136F8 0000                       		dc.w See_Slope-See_Index
000136FA 0000                       		dc.w See_Slope2-See_Index
000136FC 0000                       		dc.w See_Spikeball-See_Index
000136FE 0000                       		dc.w See_MoveSpike-See_Index
00013700 0000                       		dc.w See_SpikeFall-See_Index
00013702                            
00013702 =00000030                  see_origX:	equ $30		; original x-axis position
00013702 =00000034                  see_origY:	equ $34		; original y-axis position
00013702 =00000038                  see_speed:	equ $38		; speed of collision
00013702 =0000003A                  see_frame:	equ $3A		; 
00013702 =0000003C                  see_parent:	equ $3C		; RAM address of parent object
00013702                            ; ===========================================================================
00013702                            
00013702                            See_Main:	; Routine 0
00013702 5428 0024                  		addq.b	#2,obRoutine(a0)
00013706 217C 0000 0000 0004        		move.l	#Map_Seesaw,obMap(a0)
0001370E 317C 0374 0002             		move.w	#$374,obGfx(a0)
00013714 0028 0004 0001             		ori.b	#4,obRender(a0)
0001371A 117C 0004 0018             		move.b	#4,obPriority(a0)
00013720 117C 0030 0014             		move.b	#$30,obActWid(a0)
00013726 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
0001372C 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 ?
00013730 6600                       		bne.s	@noball		; if not, branch
00013732                            
00013732 6100 C336                  		bsr.w	FindNextFreeObj
00013736 6600                       		bne.s	@noball
00013738 12BC 005E                  		move.b	#id_Seesaw,0(a1) ; load spikeball object
0001373C 5C29 0024                  		addq.b	#6,obRoutine(a1) ; use See_Spikeball routine
00013740 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013746 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001374C 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013752 2348 003C                  		move.l	a0,see_parent(a1)
00013756                            
00013756                            	@noball:
00013756 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
0001375C 6700                       		beq.s	@noflip		; if not, branch
0001375E 117C 0002 001A             		move.b	#2,obFrame(a0)	; use different frame
00013764                            
00013764                            	@noflip:
00013764 1168 001A 003A             		move.b	obFrame(a0),see_frame(a0)
0001376A                            
0001376A                            See_Slope:	; Routine 2
0001376A 1228 003A                  		move.b	see_frame(a0),d1
0001376E 6100 0000                  		bsr.w	See_ChgFrame
00013772 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013778 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
0001377E 6700                       		beq.s	@notflat	; if not, branch
00013780 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013786                            
00013786                            	@notflat:
00013786 43F8 D000                  		lea	(v_player).w,a1
0001378A 3169 0012 0038             		move.w	obVelY(a1),see_speed(a0)
00013790 323C 0030                  		move.w	#$30,d1
00013794 4EB9 0000 8C4C             		jsr	(SlopeObject).l
0001379A 4E75                       		rts	
0001379C                            ; ===========================================================================
0001379C                            
0001379C                            See_Slope2:	; Routine 4
0001379C 6100 0000                  		bsr.w	See_ChkSide
000137A0 45F9 0000 0000             		lea	(See_DataSlope).l,a2
000137A6 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
000137AC 6700                       		beq.s	@notflat	; if not, branch
000137AE 45F9 0000 0000             		lea	(See_DataFlat).l,a2
000137B4                            
000137B4                            	@notflat:
000137B4 323C 0030                  		move.w	#$30,d1
000137B8 4EB9 0000 8CEC             		jsr	(ExitPlatform).l
000137BE 323C 0030                  		move.w	#$30,d1
000137C2 3428 0008                  		move.w	obX(a0),d2
000137C6 4EB9 0000 9C86             		jsr	(SlopeObject2).l
000137CC 4E75                       		rts	
000137CE                            ; ===========================================================================
000137CE                            
000137CE                            See_ChkSide:
000137CE 7202                       		moveq	#2,d1
000137D0 43F8 D000                  		lea	(v_player).w,a1
000137D4 3028 0008                  		move.w	obX(a0),d0
000137D8 9069 0008                  		sub.w	obX(a1),d0	; is Sonic on the left side of the seesaw?
000137DC 6400                       		bcc.s	@leftside	; if yes, branch
000137DE 4440                       		neg.w	d0
000137E0 7200                       		moveq	#0,d1
000137E2                            
000137E2                            	@leftside:
000137E2 0C40 0008                  		cmpi.w	#8,d0
000137E6 6400                       		bcc.s	See_ChgFrame
000137E8 7201                       		moveq	#1,d1
000137EA                            
000137EA                            See_ChgFrame:
000137EA 1028 001A                  		move.b	obFrame(a0),d0
000137EE B001                       		cmp.b	d1,d0		; does frame need to change?
000137F0 6700                       		beq.s	@noflip		; if not, branch
000137F2 6400                       		bcc.s	@loc_11772
000137F4 5400                       		addq.b	#2,d0
000137F6                            
000137F6                            	@loc_11772:
000137F6 5300                       		subq.b	#1,d0
000137F8 1140 001A                  		move.b	d0,obFrame(a0)
000137FC 1141 003A                  		move.b	d1,see_frame(a0)
00013800 08A8 0000 0001             		bclr	#0,obRender(a0)
00013806 0828 0001 001A             		btst	#1,obFrame(a0)
0001380C 6700                       		beq.s	@noflip
0001380E 08E8 0000 0001             		bset	#0,obRender(a0)
00013814                            
00013814                            	@noflip:
00013814 4E75                       		rts	
00013816                            ; ===========================================================================
00013816                            
00013816                            See_Spikeball:	; Routine 6
00013816 5428 0024                  		addq.b	#2,obRoutine(a0)
0001381A 217C 0000 0000 0004        		move.l	#Map_SSawBall,obMap(a0)
00013822 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00013828 0028 0004 0001             		ori.b	#4,obRender(a0)
0001382E 117C 0004 0018             		move.b	#4,obPriority(a0)
00013834 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001383A 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013840 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013846 0668 0028 0008             		addi.w	#$28,obX(a0)
0001384C 3168 000C 0034             		move.w	obY(a0),see_origY(a0)
00013852 117C 0001 001A             		move.b	#1,obFrame(a0)
00013858 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
0001385E 6700                       		beq.s	See_MoveSpike	; if not, branch
00013860 0468 0050 0008             		subi.w	#$50,obX(a0)	; move spikeball to the other side
00013866 117C 0002 003A             		move.b	#2,see_frame(a0)
0001386C                            
0001386C                            See_MoveSpike:	; Routine 8
0001386C 2268 003C                  		movea.l	see_parent(a0),a1
00013870 7000                       		moveq	#0,d0
00013872 1028 003A                  		move.b	see_frame(a0),d0
00013876 9029 003A                  		sub.b	see_frame(a1),d0
0001387A 6700                       		beq.s	loc_1183E
0001387C 6400                       		bcc.s	loc_117FC
0001387E 4400                       		neg.b	d0
00013880                            
00013880                            loc_117FC:
00013880 323C F7E8                  		move.w	#-$818,d1
00013884 343C FEEC                  		move.w	#-$114,d2
00013888 0C00 0001                  		cmpi.b	#1,d0
0001388C 6700                       		beq.s	loc_11822
0001388E 323C F510                  		move.w	#-$AF0,d1
00013892 343C FF34                  		move.w	#-$CC,d2
00013896 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
0001389C 6D00                       		blt.s	loc_11822
0001389E 323C F200                  		move.w	#-$E00,d1
000138A2 343C FF60                  		move.w	#-$A0,d2
000138A6                            
000138A6                            loc_11822:
000138A6 3141 0012                  		move.w	d1,obVelY(a0)
000138AA 3142 0010                  		move.w	d2,obVelX(a0)
000138AE 3028 0008                  		move.w	obX(a0),d0
000138B2 9068 0030                  		sub.w	see_origX(a0),d0
000138B6 6400                       		bcc.s	loc_11838
000138B8 4468 0010                  		neg.w	obVelX(a0)
000138BC                            
000138BC                            loc_11838:
000138BC 5428 0024                  		addq.b	#2,obRoutine(a0)
000138C0 6000                       		bra.s	See_SpikeFall
000138C2                            ; ===========================================================================
000138C2                            
000138C2                            loc_1183E:
000138C2 45F9 0000 0000             		lea	(See_Speeds).l,a2
000138C8 7000                       		moveq	#0,d0
000138CA 1029 001A                  		move.b	obFrame(a1),d0
000138CE 343C 0028                  		move.w	#$28,d2
000138D2 3228 0008                  		move.w	obX(a0),d1
000138D6 9268 0030                  		sub.w	see_origX(a0),d1
000138DA 6400                       		bcc.s	loc_1185C
000138DC 4442                       		neg.w	d2
000138DE 5440                       		addq.w	#2,d0
000138E0                            
000138E0                            loc_1185C:
000138E0 D040                       		add.w	d0,d0
000138E2 3228 0034                  		move.w	see_origY(a0),d1
000138E6 D272 0000                  		add.w	(a2,d0.w),d1
000138EA 3141 000C                  		move.w	d1,obY(a0)
000138EE D468 0030                  		add.w	see_origX(a0),d2
000138F2 3142 0008                  		move.w	d2,obX(a0)
000138F6 4268 000E                  		clr.w	obY+2(a0)
000138FA 4268 000A                  		clr.w	obX+2(a0)
000138FE 4E75                       		rts	
00013900                            ; ===========================================================================
00013900                            
00013900                            See_SpikeFall:	; Routine $A
00013900 4A68 0012                  		tst.w	obVelY(a0)	; is spikeball falling down?
00013904 6A00                       		bpl.s	loc_1189A	; if yes, branch
00013906 6100 BB66                  		bsr.w	ObjectFall
0001390A 3028 0034                  		move.w	see_origY(a0),d0
0001390E 0440 002F                  		subi.w	#$2F,d0
00013912 B068 000C                  		cmp.w	obY(a0),d0
00013916 6E00                       		bgt.s	locret_11898
00013918 6100 BB54                  		bsr.w	ObjectFall
0001391C                            
0001391C                            locret_11898:
0001391C 4E75                       		rts	
0001391E                            ; ===========================================================================
0001391E                            
0001391E                            loc_1189A:
0001391E 6100 BB4E                  		bsr.w	ObjectFall
00013922 2268 003C                  		movea.l	see_parent(a0),a1
00013926 45F9 0000 0000             		lea	(See_Speeds).l,a2
0001392C 7000                       		moveq	#0,d0
0001392E 1029 001A                  		move.b	obFrame(a1),d0
00013932 3228 0008                  		move.w	obX(a0),d1
00013936 9268 0030                  		sub.w	see_origX(a0),d1
0001393A 6400                       		bcc.s	loc_118BA
0001393C 5440                       		addq.w	#2,d0
0001393E                            
0001393E                            loc_118BA:
0001393E D040                       		add.w	d0,d0
00013940 3228 0034                  		move.w	see_origY(a0),d1
00013944 D272 0000                  		add.w	(a2,d0.w),d1
00013948 B268 000C                  		cmp.w	obY(a0),d1
0001394C 6E00                       		bgt.s	locret_11938
0001394E 2268 003C                  		movea.l	see_parent(a0),a1
00013952 7202                       		moveq	#2,d1
00013954 4A68 0010                  		tst.w	obVelX(a0)
00013958 6B00                       		bmi.s	See_Spring
0001395A 7200                       		moveq	#0,d1
0001395C                            
0001395C                            See_Spring:
0001395C 1341 003A                  		move.b	d1,$3A(a1)
00013960 1141 003A                  		move.b	d1,see_frame(a0)
00013964 B229 001A                  		cmp.b	obFrame(a1),d1
00013968 6700                       		beq.s	loc_1192C
0001396A 08A9 0003 0022             		bclr	#3,obStatus(a1)
00013970 6700                       		beq.s	loc_1192C
00013972 4229 0025                  		clr.b	ob2ndRout(a1)
00013976 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001397C 45F8 D000                  		lea	(v_player).w,a2
00013980 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
00013986 446A 0012                  		neg.w	obVelY(a2)
0001398A 08EA 0001 0022             		bset	#1,obStatus(a2)
00013990 08AA 0003 0022             		bclr	#3,obStatus(a2)
00013996 422A 003C                  		clr.b	$3C(a2)
0001399A 157C 0000 001C             		move.b	#id_Spring,obAnim(a2) ; change Sonic's animation to "spring" ($10)
000139A0 157C 0002 0024             		move.b	#2,obRoutine(a2)
000139B0                            
000139B0                            loc_1192C:
000139B0 4268 0010                  		clr.w	obVelX(a0)
000139B4 4268 0012                  		clr.w	obVelY(a0)
000139B8 5528 0024                  		subq.b	#2,obRoutine(a0)
000139BC                            
000139BC                            locret_11938:
000139BC 4E75                       		rts	
000139BE                            ; ===========================================================================
000139BE FFF8 FFE4 FFD1 FFE4 FFF8   See_Speeds:	dc.w -8, -$1C, -$2F, -$1C, -8
000139C8                            
000139C8                            See_DataSlope:	incbin	"misc\slzssaw1.bin"
000139F8                            		even
000139F8                            See_DataFlat:	incbin	"misc\slzssaw2.bin"
00013A28                            		even
00013A28                            		even
00013A28                            Map_Seesaw:	include	"_maps\Seesaw.asm"
00013A28                            ; ---------------------------------------------------------------------------
00013A28                            ; Sprite mappings - seesaws (SLZ)
00013A28                            ; ---------------------------------------------------------------------------
00013A28                            Map_Seesaw_internal:
00013A28 0000                       		dc.w @sloping-Map_Seesaw_internal
00013A2A 0000                       		dc.w @flat-Map_Seesaw_internal
00013A2C 0000                       		dc.w @sloping-Map_Seesaw_internal
00013A2E 0000                       		dc.w @flat-Map_Seesaw_internal
00013A30 07                         @sloping:	dc.b 7
00013A31 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00013A36 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00013A3B E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00013A40 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00013A45 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00013A4A F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00013A4F FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00013A54 04                         @flat:		dc.b 4
00013A55 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00013A5A E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00013A5F E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00013A64 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00013A6A 00                         		even
00013A6A 00                         		even
00013A6A                            Map_SSawBall:	include	"_maps\Seesaw Ball.asm"
00013A6A                            ; ---------------------------------------------------------------------------
00013A6A                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00013A6A                            ; ---------------------------------------------------------------------------
00013A6A                            Map_SSawBall_internal:
00013A6A 0000                       		dc.w @red-Map_SSawBall_internal
00013A6C 0000                       		dc.w @silver-Map_SSawBall_internal
00013A6E 01                         @red:		dc.b 1
00013A6F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013A74 01                         @silver:	dc.b 1
00013A75 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00013A7A                            		even
00013A7A                            		even
00013A7A                            		include	"_incObj\5F Bomb Enemy.asm"
00013A7A                            ; ---------------------------------------------------------------------------
00013A7A                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00013A7A                            ; ---------------------------------------------------------------------------
00013A7A                            
00013A7A                            Bomb:
00013A7A 7000                       		moveq	#0,d0
00013A7C 1028 0024                  		move.b	obRoutine(a0),d0
00013A80 323B 0000                  		move.w	Bom_Index(pc,d0.w),d1
00013A84 4EFB 1000                  		jmp	Bom_Index(pc,d1.w)
00013A88                            ; ===========================================================================
00013A88 0000                       Bom_Index:	dc.w Bom_Main-Bom_Index
00013A8A 0000                       		dc.w Bom_Action-Bom_Index
00013A8C 0000                       		dc.w Bom_Display-Bom_Index
00013A8E 0000                       		dc.w Bom_End-Bom_Index
00013A90                            
00013A90 =00000030                  bom_time:	equ $30		; time of fuse
00013A90 =00000034                  bom_origY:	equ $34		; original y-axis position
00013A90 =0000003C                  bom_parent:	equ $3C		; address of parent object
00013A90                            ; ===========================================================================
00013A90                            
00013A90                            Bom_Main:	; Routine 0
00013A90 5428 0024                  		addq.b	#2,obRoutine(a0)
00013A94 217C 0000 0000 0004        		move.l	#Map_Bomb,obMap(a0)
00013A9C 317C 0400 0002             		move.w	#$400,obGfx(a0)
00013AA2 0028 0004 0001             		ori.b	#4,obRender(a0)
00013AA8 317C 0180 0018             		move.w	#$180,obPriority(a0)
00013AAE 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013AB4 1028 0028                  		move.b	obSubtype(a0),d0
00013AB8 6700                       		beq.s	loc_11A3C
00013ABA 1140 0024                  		move.b	d0,obRoutine(a0)
00013ABE 4E75                       		rts	
00013AC0                            ; ===========================================================================
00013AC0                            
00013AC0                            loc_11A3C:
00013AC0 117C 009A 0020             		move.b	#$9A,obColType(a0)
00013AC6 0868 0000 0022             		bchg	#0,obStatus(a0)
00013ACC                            
00013ACC                            Bom_Action:	; Routine 2
00013ACC 7000                       		moveq	#0,d0
00013ACE 1028 0025                  		move.b	ob2ndRout(a0),d0
00013AD2 323B 0000                  		move.w	@index(pc,d0.w),d1
00013AD6 4EBB 1000                  		jsr	@index(pc,d1.w)
00013ADA 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013AE0 6100 8A92                  		bsr.w	AnimateSprite
00013AE4 6000 DA78                  		bra.w	RememberState
00013AE8                            ; ===========================================================================
00013AE8 0000                       @index:		dc.w @walk-@index
00013AEA 0000                       		dc.w @wait-@index
00013AEC 0000                       		dc.w @explode-@index
00013AEE                            ; ===========================================================================
00013AEE                            
00013AEE                            @walk:
00013AEE 6100 0000                  		bsr.w	@chksonic
00013AF2 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013AF6 6A00                       		bpl.s	@noflip		; if time remains, branch
00013AF8 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @wait
00013AFC 317C 05FF 0030             		move.w	#1535,bom_time(a0) ; set time delay to 25 seconds
00013B02 317C 0010 0010             		move.w	#$10,obVelX(a0)
00013B08 117C 0001 001C             		move.b	#1,obAnim(a0)	; use walking animation
00013B0E 0868 0000 0022             		bchg	#0,obStatus(a0)
00013B14 6700                       		beq.s	@noflip
00013B16 4468 0010                  		neg.w	obVelX(a0)	; change direction
00013B1A                            
00013B1A                            	@noflip:
00013B1A 4E75                       		rts	
00013B1C                            ; ===========================================================================
00013B1C                            
00013B1C                            @wait:
00013B1C 6100 0000                  		bsr.w	@chksonic
00013B20 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013B24 6B00                       		bmi.s	@stopwalking	; if time expires, branch
00013B26 6100 B97E                  		bsr.w	SpeedToPos
00013B2A 4E75                       		rts	
00013B2C                            ; ===========================================================================
00013B2C                            
00013B2C                            	@stopwalking:
00013B2C 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00013B30 317C 00B3 0030             		move.w	#179,bom_time(a0) ; set time delay to 3 seconds
00013B36 4268 0010                  		clr.w	obVelX(a0)	; stop walking
00013B3A 117C 0000 001C             		move.b	#0,obAnim(a0)	; use waiting animation
00013B40 4E75                       		rts	
00013B42                            ; ===========================================================================
00013B42                            
00013B42                            @explode:
00013B42 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013B46 6A00                       		bpl.s	@noexplode	; if time remains, branch
00013B48 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0) ; change bomb into an explosion
00013B4C 117C 0000 0024             		move.b	#0,obRoutine(a0)
00013B52                            
00013B52                            	@noexplode:
00013B52 4E75                       		rts	
00013B54                            ; ===========================================================================
00013B54                            
00013B54                            @chksonic:
00013B54 3038 D008                  		move.w	(v_player+obX).w,d0
00013B58 9068 0008                  		sub.w	obX(a0),d0
00013B5C 6400                       		bcc.s	@isleft
00013B5E 4440                       		neg.w	d0
00013B60                            
00013B60                            	@isleft:
00013B60 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels?
00013B64 6400                       		bcc.s	@outofrange	; if not, branch
00013B66 3038 D00C                  		move.w	(v_player+obY).w,d0
00013B6A 9068 000C                  		sub.w	obY(a0),d0
00013B6E 6400                       		bcc.s	@isabove
00013B70 4440                       		neg.w	d0
00013B72                            
00013B72                            	@isabove:
00013B72 0C40 0060                  		cmpi.w	#$60,d0
00013B76 6400                       		bcc.s	@outofrange
00013B78 4A78 FE08                  		tst.w	(v_debuguse).w
00013B7C 6600                       		bne.s	@outofrange
00013B7E                            
00013B7E 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
00013B84 317C 008F 0030             		move.w	#143,bom_time(a0) ; set fuse time
00013B8A 4268 0010                  		clr.w	obVelX(a0)
00013B8E 117C 0002 001C             		move.b	#2,obAnim(a0)	; use activated animation
00013B94 6100 BED4                  		bsr.w	FindNextFreeObj
00013B98 6600                       		bne.s	@outofrange
00013B9A 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load fuse object
00013B9E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013BA4 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013BAA 3368 000C 0034             		move.w	obY(a0),bom_origY(a1)
00013BB0 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013BB6 137C 0004 0028             		move.b	#4,obSubtype(a1)
00013BBC 137C 0003 001C             		move.b	#3,obAnim(a1)
00013BC2 337C 0010 0012             		move.w	#$10,obVelY(a1)
00013BC8 0828 0001 0022             		btst	#1,obStatus(a0)	; is bomb upside-down?
00013BCE 6700                       		beq.s	@normal		; if not, branch
00013BD0 4469 0012                  		neg.w	obVelY(a1)	; reverse direction for fuse
00013BD4                            
00013BD4                            	@normal:
00013BD4 337C 008F 0030             		move.w	#143,bom_time(a1) ; set fuse time
00013BDA 2348 003C                  		move.l	a0,bom_parent(a1)
00013BDE                            
00013BDE                            @outofrange:
00013BDE 4E75                       		rts	
00013BE0                            ; ===========================================================================
00013BE0                            
00013BE0                            Bom_Display:	; Routine 4
00013BE0 6100                       		bsr.s	loc_11B70
00013BE2 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013BE8 6100 898A                  		bsr.w	AnimateSprite
00013BEC 6000 D970                  		bra.w	RememberState
00013BF0                            ; ===========================================================================
00013BF0                            
00013BF0                            loc_11B70:
00013BF0 5368 0030                  		subq.w	#1,bom_time(a0)
00013BF4 6B00                       		bmi.s	loc_11B7C
00013BF6 6100 B8AE                  		bsr.w	SpeedToPos
00013BFA 4E75                       		rts	
00013BFC                            ; ===========================================================================
00013BFC                            
00013BFC                            loc_11B7C:
00013BFC 4268 0030                  		clr.w	bom_time(a0)
00013C00 4228 0024                  		clr.b	obRoutine(a0)
00013C04 3168 0034 000C             		move.w	bom_origY(a0),obY(a0)
00013C0A 7203                       		moveq	#3,d1
00013C0C 2248                       		movea.l	a0,a1
00013C0E 45F9 0000 0000             		lea	(Bom_ShrSpeed).l,a2 ; load shrapnel speed data
00013C14 6000                       		bra.s	@makeshrapnel
00013C16                            ; ===========================================================================
00013C16                            
00013C16                            	@loop:
00013C16 6100 BE52                  		bsr.w	FindNextFreeObj
00013C1A 6600                       		bne.s	@fail
00013C1C                            
00013C1C                            @makeshrapnel:
00013C1C 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load shrapnel	object
00013C20 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013C26 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013C2C 137C 0006 0028             		move.b	#6,obSubtype(a1)
00013C32 137C 0004 001C             		move.b	#4,obAnim(a1)
00013C38 335A 0010                  		move.w	(a2)+,obVelX(a1)
00013C3C 335A 0012                  		move.w	(a2)+,obVelY(a1)
00013C40 137C 0098 0020             		move.b	#$98,obColType(a1)
00013C46 08E9 0007 0001             		bset	#7,obRender(a1)
00013C4C                            
00013C4C                            	@fail:
00013C4C 51C9 FFC8                  		dbf	d1,@loop	; repeat 3 more	times
00013C50                            
00013C50 117C 0006 0024             		move.b	#6,obRoutine(a0)
00013C56                            
00013C56                            Bom_End:	; Routine 6
00013C56 6100 B84E                  		bsr.w	SpeedToPos
00013C5A 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00013C60 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013C66 6100 890C                  		bsr.w	AnimateSprite
00013C6A 4A28 0001                  		tst.b	obRender(a0)
00013C6E 6A00 B88A                  		bpl.w	DeleteObject
00013C72 6000 B846                  		bra.w	DisplaySprite
00013C76                            ; ===========================================================================
00013C76 FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013C76 FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013C86                            		include	"_anim\Bomb Enemy.asm"
00013C86                            ; ---------------------------------------------------------------------------
00013C86                            ; Animation script - Bomb enemy
00013C86                            ; ---------------------------------------------------------------------------
00013C86 0000                       Ani_Bomb:	dc.w @stand-Ani_Bomb
00013C88 0000                       		dc.w @walk-Ani_Bomb
00013C8A 0000                       		dc.w @activated-Ani_Bomb
00013C8C 0000                       		dc.w @fuse-Ani_Bomb
00013C8E 0000                       		dc.w @shrapnel-Ani_Bomb
00013C90 1301 00FF                  @stand:		dc.b $13, 1, 0,	afEnd
00013C94 1305 0403 02FF             @walk:		dc.b $13, 5, 4,	3, 2, afEnd
00013C9A 1307 06FF                  @activated:	dc.b $13, 7, 6,	afEnd
00013C9E 0308 09FF                  @fuse:		dc.b 3,	8, 9, afEnd
00013CA2 030A 0BFF                  @shrapnel:	dc.b 3,	$A, $B,	afEnd
00013CA6                            		even
00013CA6                            		even
00013CA6                            Map_Bomb:	include	"_maps\Bomb Enemy.asm"
00013CA6                            ; ---------------------------------------------------------------------------
00013CA6                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00013CA6                            ; ---------------------------------------------------------------------------
00013CA6                            Map_Bomb_internal:
00013CA6 0000                       		dc.w @stand1-Map_Bomb_internal
00013CA8 0000                       		dc.w @stand2-Map_Bomb_internal
00013CAA 0000                       		dc.w @walk1-Map_Bomb_internal
00013CAC 0000                       		dc.w @walk2-Map_Bomb_internal
00013CAE 0000                       		dc.w @walk3-Map_Bomb_internal
00013CB0 0000                       		dc.w @walk4-Map_Bomb_internal
00013CB2 0000                       		dc.w @activate1-Map_Bomb_internal
00013CB4 0000                       		dc.w @activate2-Map_Bomb_internal
00013CB6 0000                       		dc.w @fuse1-Map_Bomb_internal
00013CB8 0000                       		dc.w @fuse2-Map_Bomb_internal
00013CBA 0000                       		dc.w @shrapnel1-Map_Bomb_internal
00013CBC 0000                       		dc.w @shrapnel2-Map_Bomb_internal
00013CBE 03                         @stand1:	dc.b 3
00013CBF F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb standing still
00013CC4 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013CC9 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013CCE 03                         @stand2:	dc.b 3
00013CCF F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013CD4 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013CD9 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013CDE 03                         @walk1:		dc.b 3
00013CDF F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4	; bomb walking
00013CE4 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00013CE9 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013CEE 03                         @walk2:		dc.b 3
00013CEF F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013CF4 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00013CF9 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013CFE 03                         @walk3:		dc.b 3
00013CFF F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00013D04 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00013D09 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013D0E 03                         @walk4:		dc.b 3
00013D0F F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013D14 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00013D19 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013D1E 02                         @activate1:	dc.b 2
00013D1F F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb during detonation countdown
00013D24 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013D29 02                         @activate2:	dc.b 2
00013D2A F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013D2F 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013D34 01                         @fuse1:		dc.b 1
00013D35 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC ; fuse	(just before it	explodes)
00013D3A 01                         @fuse2:		dc.b 1
00013D3B E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00013D40 01                         @shrapnel1:	dc.b 1
00013D41 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC ; shrapnel (after it exploded)
00013D46 01                         @shrapnel2:	dc.b 1
00013D47 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00013D4C                            		even
00013D4C                            		even
00013D4C                            
00013D4C                            		include	"_incObj\60 Orbinaut.asm"
00013D4C                            ; ---------------------------------------------------------------------------
00013D4C                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00013D4C                            ; ---------------------------------------------------------------------------
00013D4C                            
00013D4C                            Orbinaut:
00013D4C 7000                       		moveq	#0,d0
00013D4E 1028 0024                  		move.b	obRoutine(a0),d0
00013D52 323B 0000                  		move.w	Orb_Index(pc,d0.w),d1
00013D56 4EFB 1000                  		jmp	Orb_Index(pc,d1.w)
00013D5A                            ; ===========================================================================
00013D5A 0000                       Orb_Index:	dc.w Orb_Main-Orb_Index
00013D5C 0000                       		dc.w Orb_ChkSonic-Orb_Index
00013D5E 0000                       		dc.w Orb_Display-Orb_Index
00013D60 0000                       		dc.w Orb_MoveOrb-Orb_Index
00013D62 0000                       		dc.w Orb_ChkDel2-Orb_Index
00013D64                            
00013D64 =0000003C                  orb_parent:	equ $3C		; address of parent object
00013D64                            ; ===========================================================================
00013D64                            
00013D64                            Orb_Main:	; Routine 0
00013D64 217C 0000 0000 0004        		move.l	#Map_Orb,obMap(a0)
00013D6C 317C 0429 0002             		move.w	#$429,obGfx(a0)	; SBZ specific code
00013D72 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00013D78 6700                       		beq.s	@isscrap
00013D7A 317C 2429 0002             		move.w	#$2429,obGfx(a0) ; SLZ specific code
00013D80                            
00013D80                            	@isscrap:
00013D80 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00013D86 6600                       		bne.s	@notlabyrinth
00013D88 317C 0467 0002             		move.w	#$467,obGfx(a0)	; LZ specific code
00013D8E                            
00013D8E                            	@notlabyrinth:
00013D8E 0028 0004 0001             		ori.b	#4,obRender(a0)
00013D94 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013D9A 117C 000B 0020             		move.b	#$B,obColType(a0)
00013DA0 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013DA6 7400                       		moveq	#0,d2
00013DA8 45E8 0037                  		lea	$37(a0),a2
00013DAC 264A                       		movea.l	a2,a3
00013DAE 524A                       		addq.w	#1,a2
00013DB0 7203                       		moveq	#3,d1
00013DB2                            
00013DB2                            @makesatellites:
00013DB2 6100 BCB6                  		bsr.w	FindNextFreeObj
00013DB6 6600                       		bne.s	@fail
00013DB8 5213                       		addq.b	#1,(a3)
00013DBA 3A09                       		move.w	a1,d5
00013DBC 0445 D000                  		subi.w	#$D000,d5
00013DC0 EC4D                       		lsr.w	#6,d5
00013DC2 0245 007F                  		andi.w	#$7F,d5
00013DC6 14C5                       		move.b	d5,(a2)+
00013DC8 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00013DCA 137C 0006 0024             		move.b	#6,obRoutine(a1) ; use Orb_MoveOrb routine
00013DD0 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00013DD6 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00013DDC 0029 0004 0001             		ori.b	#4,obRender(a1)
00013DE2 337C 0200 0018             		move.w	#$200,obPriority(a1)
00013DE8 137C 0008 0014             		move.b	#8,obActWid(a1)
00013DEE 137C 0003 001A             		move.b	#3,obFrame(a1)
00013DF4 137C 0098 0020             		move.b	#$98,obColType(a1)
00013DFA 1342 0026                  		move.b	d2,obAngle(a1)
00013DFE 0602 0040                  		addi.b	#$40,d2
00013E02 2348 003C                  		move.l	a0,orb_parent(a1)
00013E06 51C9 FFAA                  		dbf	d1,@makesatellites ; repeat sequence 3 more times
00013E0A                            
00013E0A                            	@fail:
00013E0A 7001                       		moveq	#1,d0
00013E0C 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left?
00013E12 6700                       		beq.s	@noflip		; if not, branch
00013E14 4440                       		neg.w	d0
00013E16                            
00013E16                            	@noflip:
00013E16 1140 0036                  		move.b	d0,$36(a0)
00013E1A 1168 0028 0024             		move.b	obSubtype(a0),obRoutine(a0) ; if type is 02, skip Orb_ChkSonic
00013E20 5428 0024                  		addq.b	#2,obRoutine(a0)
00013E24 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move orbinaut to the left
00013E2A 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left??
00013E30 6700                       		beq.s	@noflip2	; if not, branch
00013E32 4468 0010                  		neg.w	obVelX(a0)	; move orbinaut	to the right
00013E36                            
00013E36                            	@noflip2:
00013E36 4E75                       		rts	
00013E38                            ; ===========================================================================
00013E38                            
00013E38                            Orb_ChkSonic:	; Routine 2
00013E38 3038 D008                  		move.w	(v_player+obX).w,d0
00013E3C 9068 0008                  		sub.w	obX(a0),d0	; is Sonic to the right of the orbinaut?
00013E40 6400                       		bcc.s	@isright	; if yes, branch
00013E42 4440                       		neg.w	d0
00013E44                            
00013E44                            	@isright:
00013E44 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00013E48 6400                       		bcc.s	@animate	; if not, branch
00013E4A 3038 D00C                  		move.w	(v_player+obY).w,d0
00013E4E 9068 000C                  		sub.w	obY(a0),d0	; is Sonic above the orbinaut?
00013E52 6400                       		bcc.s	@isabove	; if yes, branch
00013E54 4440                       		neg.w	d0
00013E56                            
00013E56                            	@isabove:
00013E56 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00013E5A 6400                       		bcc.s	@animate	; if not, branch
00013E5C 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00013E60 6600                       		bne.s	@animate	; if yes, branch
00013E62 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "angry" animation
00013E68                            
00013E68                            @animate:
00013E68 43F9 0000 0000             		lea	(Ani_Orb).l,a1
00013E6E 6100 8704                  		bsr.w	AnimateSprite
00013E72 6000 0000                  		bra.w	Orb_ChkDel
00013E76                            ; ===========================================================================
00013E76                            
00013E76                            Orb_Display:	; Routine 4
00013E76 6100 B62E                  		bsr.w	SpeedToPos
00013E7A                            
00013E7A                            Orb_ChkDel:
00013E98 6000 B620                  		bra.w	DisplaySprite
00013E9C                            
00013E9C                            @chkgone:
00013E9C 45F8 FC00                  		lea	(v_objstate).w,a2
00013EA0 7000                       		moveq	#0,d0
00013EA2 1028 0023                  		move.b	obRespawnNo(a0),d0
00013EA6 6700                       		beq.s	loc_11E34
00013EA8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00013EAE                            
00013EAE                            loc_11E34:
00013EAE 45E8 0037                  		lea	$37(a0),a2
00013EB2 7400                       		moveq	#0,d2
00013EB4 141A                       		move.b	(a2)+,d2
00013EB6 5342                       		subq.w	#1,d2
00013EB8 6500                       		bcs.s	Orb_Delete
00013EBA                            
00013EBA                            loc_11E40:
00013EBA 7000                       		moveq	#0,d0
00013EBC 101A                       		move.b	(a2)+,d0
00013EBE ED48                       		lsl.w	#6,d0
00013EC0 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00013EC6 2240                       		movea.l	d0,a1
00013EC8 6100 B632                  		bsr.w	DeleteChild
00013ECC 51CA FFEC                  		dbf	d2,loc_11E40
00013ED0                            
00013ED0                            Orb_Delete:
00013ED0 6000 B628                  		bra.w	DeleteObject
00013ED4                            ; ===========================================================================
00013ED4                            
00013ED4                            Orb_MoveOrb:	; Routine 6
00013ED4 2268 003C                  		movea.l	orb_parent(a0),a1
00013ED8 0C11 0060                  		cmpi.b	#id_Orbinaut,0(a1) ; does parent object still exist?
00013EDC 6600 B61C                  		bne.w	DeleteObject	; if not, delete
00013EE0 0C29 0002 001A             		cmpi.b	#2,obFrame(a1)	; is orbinaut angry?
00013EE6 6600                       		bne.s	@circle		; if not, branch
00013EE8 0C28 0040 0026             		cmpi.b	#$40,obAngle(a0) ; is spikeorb directly under the orbinaut?
00013EEE 6600                       		bne.s	@circle		; if not, branch
00013EF0 5428 0024                  		addq.b	#2,obRoutine(a0)
00013EF4 5329 0037                  		subq.b	#1,$37(a1)
00013EF8 6600                       		bne.s	@fire
00013EFA 5429 0024                  		addq.b	#2,obRoutine(a1)
00013EFE                            
00013EFE                            	@fire:
00013EFE 317C FE00 0010             		move.w	#-$200,obVelX(a0) ; move orb to the left (quickly)
00013F04 0829 0000 0022             		btst	#0,obStatus(a1)
00013F0A 6700                       		beq.s	@noflip
00013F0C 4468 0010                  		neg.w	obVelX(a0)
00013F10                            
00013F10                            	@noflip:
00013F10 6000 B5A8                  		bra.w	DisplaySprite
00013F14                            ; ===========================================================================
00013F14                            
00013F14                            @circle:
00013F14 1028 0026                  		move.b	obAngle(a0),d0
00013F18 4EB9 0000 3BA2             		jsr	(CalcSine).l
00013F1E E841                       		asr.w	#4,d1
00013F20 D269 0008                  		add.w	obX(a1),d1
00013F24 3141 0008                  		move.w	d1,obX(a0)
00013F28 E840                       		asr.w	#4,d0
00013F2A D069 000C                  		add.w	obY(a1),d0
00013F2E 3140 000C                  		move.w	d0,obY(a0)
00013F32 1029 0036                  		move.b	$36(a1),d0
00013F36 D128 0026                  		add.b	d0,obAngle(a0)
00013F3A 6000 B57E                  		bra.w	DisplaySprite
00013F3E                            ; ===========================================================================
00013F3E                            
00013F3E                            Orb_ChkDel2:	; Routine 8
00013F3E 6100 B566                  		bsr.w	SpeedToPos
00013F42 4A28 0001                  		tst.b	obRender(a0)
00013F46 6A00 B5B2                  		bpl.w	DeleteObject
00013F4A 6000 B56E                  		bra.w	DisplaySprite
00013F4A 6000 B56E                  		bra.w	DisplaySprite
00013F4E                            		include	"_anim\Orbinaut.asm"
00013F4E                            ; ---------------------------------------------------------------------------
00013F4E                            ; Animation script - Orbinaut enemy
00013F4E                            ; ---------------------------------------------------------------------------
00013F4E 0000                       Ani_Orb:	dc.w @normal-Ani_Orb
00013F50 0000                       		dc.w @angers-Ani_Orb
00013F52 0F00 FF                    @normal:	dc.b $F, 0, afEnd
00013F56 00                         		even
00013F56 0F01 02FE 01               @angers:	dc.b $F, 1, 2, afBack, 1
00013F5C 00                         		even
00013F5C 00                         		even
00013F5C                            Map_Orb:	include	"_maps\Orbinaut.asm"
00013F5C                            ; ---------------------------------------------------------------------------
00013F5C                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00013F5C                            ; ---------------------------------------------------------------------------
00013F5C                            Map_Orb_internal:
00013F5C 0000                       		dc.w @normal-Map_Orb_internal
00013F5E 0000                       		dc.w @medium-Map_Orb_internal
00013F60 0000                       		dc.w @angry-Map_Orb_internal
00013F62 0000                       		dc.w @spikeball-Map_Orb_internal
00013F64 01                         @normal:	dc.b 1
00013F65 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013F6A 01                         @medium:	dc.b 1
00013F6B F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00013F70 01                         @angry:		dc.b 1
00013F71 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00013F76 01                         @spikeball:	dc.b 1
00013F77 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00013F7C                            		even
00013F7C                            		even
00013F7C                            
00013F7C                            		include	"_incObj\16 Harpoon.asm"
00013F7C                            ; ---------------------------------------------------------------------------
00013F7C                            ; Object 16 - harpoon (LZ)
00013F7C                            ; ---------------------------------------------------------------------------
00013F7C                            
00013F7C                            Harpoon:
00013F7C 7000                       		moveq	#0,d0
00013F7E 1028 0024                  		move.b	obRoutine(a0),d0
00013F82 323B 0000                  		move.w	Harp_Index(pc,d0.w),d1
00013F86 4EFB 1000                  		jmp	Harp_Index(pc,d1.w)
00013F8A                            ; ===========================================================================
00013F8A 0000                       Harp_Index:	dc.w Harp_Main-Harp_Index
00013F8C 0000                       		dc.w Harp_Move-Harp_Index
00013F8E 0000                       		dc.w Harp_Wait-Harp_Index
00013F90                            
00013F90 =00000030                  harp_time:	equ $30		; time between stabbing/retracting
00013F90                            ; ===========================================================================
00013F90                            
00013F90                            Harp_Main:	; Routine 0
00013F90 5428 0024                  		addq.b	#2,obRoutine(a0)
00013F94 217C 0000 0000 0004        		move.l	#Map_Harp,obMap(a0)
00013F9C 317C 03CC 0002             		move.w	#$3CC,obGfx(a0)
00013FA2 0028 0004 0001             		ori.b	#4,obRender(a0)
00013FA8 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013FAE 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0) ; get type (vert/horiz)
00013FB4 117C 0014 0014             		move.b	#$14,obActWid(a0)
00013FBA 317C 003C 0030             		move.w	#60,harp_time(a0) ; set time to 1 second
00013FC0                            
00013FC0                            Harp_Move:	; Routine 2
00013FC0 43F9 0000 0000             		lea	(Ani_Harp).l,a1
00013FC6 6100 85AC                  		bsr.w	AnimateSprite
00013FCA 7000                       		moveq	#0,d0
00013FCC 1028 001A                  		move.b	obFrame(a0),d0	; get frame number
00013FD0 117B 0000 0020             		move.b	@types(pc,d0.w),obColType(a0) ; get collision type
00013FD6 6000 D586                  		bra.w	RememberState
00013FDA                            
00013FDA                            	@types:
00013FDA 9B9C 9D9E 9FA0             		dc.b $9B, $9C, $9D, $9E, $9F, $A0
00013FE0                            		even
00013FE0                            
00013FE0                            Harp_Wait:	; Routine 4
00013FE0 5368 0030                  		subq.w	#1,harp_time(a0) ; decrement timer
00013FE4 6A00                       		bpl.s	@chkdel		; branch if time remains
00013FE6 317C 003C 0030             		move.w	#60,harp_time(a0) ; reset timer
00013FEC 5528 0024                  		subq.b	#2,obRoutine(a0) ; run "Harp_Move" subroutine
00013FF0 0868 0000 001C             		bchg	#0,obAnim(a0)	; reverse animation
00013FF6                            
00013FF6                            	@chkdel:
00013FF6 6000 D566                  		bra.w	RememberState
00013FF6 6000 D566                  		bra.w	RememberState
00013FFA                            		include	"_anim\Harpoon.asm"
00013FFA                            ; ---------------------------------------------------------------------------
00013FFA                            ; Animation script - harpoon (LZ)
00013FFA                            ; ---------------------------------------------------------------------------
00013FFA 0000                       Ani_Harp:	dc.w @h_extending-Ani_Harp
00013FFC 0000                       		dc.w @h_retracting-Ani_Harp
00013FFE 0000                       		dc.w @v_extending-Ani_Harp
00014000 0000                       		dc.w @v_retracting-Ani_Harp
00014002 0301 02FC                  @h_extending:	dc.b 3,	1, 2, afRoutine
00014006 0301 00FC                  @h_retracting:	dc.b 3,	1, 0, afRoutine
0001400A 0304 05FC                  @v_extending:	dc.b 3,	4, 5, afRoutine
0001400E 0304 03FC                  @v_retracting:	dc.b 3,	4, 3, afRoutine
00014012                            		even
00014012                            		even
00014012                            Map_Harp:	include	"_maps\Harpoon.asm"
00014012                            ; --------------------------------------------------------------------------------
00014012                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00014012                            ; --------------------------------------------------------------------------------
00014012                            
00014012                            SME_JPFHb:	
00014012 0000 0000                  		dc.w SME_JPFHb_C-SME_JPFHb, SME_JPFHb_12-SME_JPFHb	
00014016 0000 0000                  		dc.w SME_JPFHb_18-SME_JPFHb, SME_JPFHb_23-SME_JPFHb	
0001401A 0000 0000                  		dc.w SME_JPFHb_29-SME_JPFHb, SME_JPFHb_2F-SME_JPFHb	
0001401E 01                         SME_JPFHb_C:	dc.b 1	
0001401F FC04 2000 F8               		dc.b $FC, 4, $20, 0, $F8	
00014024 01                         SME_JPFHb_12:	dc.b 1	
00014025 FC0C 2002 F8               		dc.b $FC, $C, $20, 2, $F8	
0001402A 02                         SME_JPFHb_18:	dc.b 2	
0001402B FC08 2006 F8               		dc.b $FC, 8, $20, 6, $F8	
00014030 FC08 2003 10               		dc.b $FC, 8, $20, 3, $10	
00014035 01                         SME_JPFHb_23:	dc.b 1	
00014036 F801 2009 FC               		dc.b $F8, 1, $20, 9, $FC	
0001403B 01                         SME_JPFHb_29:	dc.b 1	
0001403C E803 200B FC               		dc.b $E8, 3, $20, $B, $FC	
00014041 02                         SME_JPFHb_2F:	dc.b 2	
00014042 D802 200B FC               		dc.b $D8, 2, $20, $B, $FC	
00014047 F002 200F FC               		dc.b $F0, 2, $20, $F, $FC	
0001404C                            		even
0001404C                            		even
0001404C                            		include	"_incObj\61 LZ Blocks.asm"
0001404C                            ; ---------------------------------------------------------------------------
0001404C                            ; Object 61 - blocks (LZ)
0001404C                            ; ---------------------------------------------------------------------------
0001404C                            
0001404C                            LabyrinthBlock:
0001404C 7000                       		moveq	#0,d0
0001404E 1028 0024                  		move.b	obRoutine(a0),d0
00014052 323B 0000                  		move.w	LBlk_Index(pc,d0.w),d1
00014056 4EFB 1000                  		jmp	LBlk_Index(pc,d1.w)
0001405A                            ; ===========================================================================
0001405A 0000                       LBlk_Index:	dc.w LBlk_Main-LBlk_Index
0001405C 0000                       		dc.w LBlk_Action-LBlk_Index
0001405E                            
0001405E 1010                       LBlk_Var:	dc.b $10, $10		; width, height
00014060 200C                       		dc.b $20, $C
00014062 1010                       		dc.b $10, $10
00014064 1010                       		dc.b $10, $10
00014066                            
00014066 =00000016                  lblk_height:	equ $16		; block height
00014066 =00000034                  lblk_origX:	equ $34		; original x-axis position
00014066 =00000030                  lblk_origY:	equ $30		; original y-axis position
00014066 =00000036                  lblk_time:	equ $36		; time delay for block movement
00014066 =00000038                  lblk_untouched:	equ $38		; flag block as untouched
00014066                            ; ===========================================================================
00014066                            
00014066                            LBlk_Main:	; Routine 0
00014066 5428 0024                  		addq.b	#2,obRoutine(a0)
0001406A 217C 0000 0000 0004        		move.l	#Map_LBlock,obMap(a0)
00014072 317C 43E6 0002             		move.w	#$43E6,obGfx(a0)
00014078 117C 0004 0001             		move.b	#4,obRender(a0)
0001407E 317C 0180 0018             		move.w	#$180,obPriority(a0)
00014084 7000                       		moveq	#0,d0
00014086 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
0001408A E648                       		lsr.w	#3,d0		; read only the 1st digit
0001408C 0240 000E                  		andi.w	#$E,d0
00014090 45FB 00CC                  		lea	LBlk_Var(pc,d0.w),a2
00014094 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00014098 1152 0016                  		move.b	(a2),lblk_height(a0) ; set height
0001409C E248                       		lsr.w	#1,d0
0001409E 1140 001A                  		move.b	d0,obFrame(a0)
000140A2 3168 0008 0034             		move.w	obX(a0),lblk_origX(a0)
000140A8 3168 000C 0030             		move.w	obY(a0),lblk_origY(a0)
000140AE 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
000140B2 0200 000F                  		andi.b	#$F,d0		; read only the 2nd digit
000140B6 6700                       		beq.s	LBlk_Action	; branch if 0
000140B8 0C00 0007                  		cmpi.b	#7,d0
000140BC 6700                       		beq.s	LBlk_Action	; branch if 7
000140BE 117C 0001 0038             		move.b	#1,lblk_untouched(a0)
000140C4                            
000140C4                            LBlk_Action:	; Routine 2
000140C4 3F28 0008                  		move.w	obX(a0),-(sp)
000140C8 7000                       		moveq	#0,d0
000140CA 1028 0028                  		move.b	obSubtype(a0),d0
000140CE 0240 000F                  		andi.w	#$F,d0
000140D2 D040                       		add.w	d0,d0
000140D4 323B 0000                  		move.w	@index(pc,d0.w),d1
000140D8 4EBB 1000                  		jsr	@index(pc,d1.w)
000140DC 381F                       		move.w	(sp)+,d4
000140DE 4A28 0001                  		tst.b	obRender(a0)
000140E2 6A00                       		bpl.s	@chkdel
000140E4 7200                       		moveq	#0,d1
000140E6 1228 0014                  		move.b	obActWid(a0),d1
000140EA 0641 000B                  		addi.w	#$B,d1
000140EE 7400                       		moveq	#0,d2
000140F0 1428 0016                  		move.b	lblk_height(a0),d2
000140F4 3602                       		move.w	d2,d3
000140F6 5243                       		addq.w	#1,d3
000140F8 6100 D8FC                  		bsr.w	SolidObject
000140FC 1144 003F                  		move.b	d4,$3F(a0)
00014100 6100 0000                  		bsr.w	loc_12180
00014104                            
00014104                            @chkdel:
00014122 6000 B396                  		bra.w	DisplaySprite
00014126                            ; ===========================================================================
00014126 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
0001412A 0000 0000                  		dc.w @type02-@index, @type03-@index
0001412E 0000 0000                  		dc.w @type04-@index, @type05-@index
00014132 0000 0000                  		dc.w @type06-@index, @type07-@index
00014136                            ; ===========================================================================
00014136                            
00014136                            @type00:
00014136 4E75                       		rts	
00014138                            ; ===========================================================================
00014138                            
00014138                            @type01:
00014138                            @type03:
00014138 4A68 0036                  		tst.w	lblk_time(a0)	; does time remain?
0001413C 6600                       		bne.s	@wait01		; if yes, branch
0001413E 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the object?
00014144 6700                       		beq.s	@donothing01	; if not, branch
00014146 317C 001E 0036             		move.w	#30,lblk_time(a0) ; wait for half second
0001414C                            
0001414C                            	@donothing01:
0001414C 4E75                       		rts	
0001414E                            ; ===========================================================================
0001414E                            
0001414E                            	@wait01:
0001414E 5368 0036                  		subq.w	#1,lblk_time(a0); decrement waiting time
00014152 66F8                       		bne.s	@donothing01	; if time remains, branch
00014154 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type02 or @type04
00014158 4228 0038                  		clr.b	lblk_untouched(a0) ; flag block as touched
0001415C 4E75                       		rts	
0001415E                            ; ===========================================================================
0001415E                            
0001415E                            @type02:
0001415E                            @type06:
0001415E 6100 B346                  		bsr.w	SpeedToPos
00014162 5068 0012                  		addq.w	#8,obVelY(a0)	; make block fall
00014166 6100 0000                  		bsr.w	ObjFloorDist
0001416A 4A41                       		tst.w	d1		; has block hit the floor?
0001416C 6A00 0000                  		bpl.w	@nofloor02	; if not, branch
00014170 5241                       		addq.w	#1,d1
00014172 D368 000C                  		add.w	d1,obY(a0)
00014176 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the floor
0001417A 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
0001417E                            
0001417E                            	@nofloor02:
0001417E 4E75                       		rts	
00014180                            ; ===========================================================================
00014180                            
00014180                            @type04:
00014180 6100 B324                  		bsr.w	SpeedToPos
00014184 5168 0012                  		subq.w	#8,obVelY(a0)	; make block rise
00014188 6100 0000                  		bsr.w	ObjHitCeiling
0001418C 4A41                       		tst.w	d1		; has block hit the ceiling?
0001418E 6A00 0000                  		bpl.w	@noceiling04	; if not, branch
00014192 9368 000C                  		sub.w	d1,obY(a0)
00014196 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the ceiling
0001419A 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
0001419E                            
0001419E                            	@noceiling04:
0001419E 4E75                       		rts	
000141A0                            ; ===========================================================================
000141A0                            
000141A0                            @type05:
000141A0 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	block?
000141A6 6600                       		bne.s	@notouch05	; if not, branch
000141A8 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type06
000141AC 4228 0038                  		clr.b	lblk_untouched(a0)
000141B0                            
000141B0                            	@notouch05:
000141B0 4E75                       		rts	
000141B2                            ; ===========================================================================
000141B2                            
000141B2                            @type07:
000141B2 3038 F646                  		move.w	(v_waterpos1).w,d0
000141B6 9068 000C                  		sub.w	obY(a0),d0	; is block level with water?
000141BA 6700                       		beq.s	@stop07		; if yes, branch
000141BC 6400                       		bcc.s	@fall07		; branch if block is above water
000141BE 0C40 FFFE                  		cmpi.w	#-2,d0
000141C2 6C00                       		bge.s	@loc_1214E
000141C4 70FE                       		moveq	#-2,d0
000141C6                            
000141C6                            	@loc_1214E:
000141C6 D168 000C                  		add.w	d0,obY(a0)	; make the block rise with water level
000141CA 6100 0000                  		bsr.w	ObjHitCeiling
000141CE 4A41                       		tst.w	d1		; has block hit the ceiling?
000141D0 6A00 0000                  		bpl.w	@noceiling07	; if not, branch
000141D4 9368 000C                  		sub.w	d1,obY(a0)	; stop block
000141D8                            
000141D8                            	@noceiling07:
000141D8 4E75                       		rts	
000141DA                            ; ===========================================================================
000141DA                            
000141DA                            @fall07:
000141DA 0C40 0002                  		cmpi.w	#2,d0
000141DE 6F00                       		ble.s	@loc_1216A
000141E0 7002                       		moveq	#2,d0
000141E2                            
000141E2                            	@loc_1216A:
000141E2 D168 000C                  		add.w	d0,obY(a0)	; make the block sink with water level
000141E6 6100 0000                  		bsr.w	ObjFloorDist
000141EA 4A41                       		tst.w	d1
000141EC 6A00 0000                  		bpl.w	@stop07
000141F0 5241                       		addq.w	#1,d1
000141F2 D368 000C                  		add.w	d1,obY(a0)
000141F6                            
000141F6                            	@stop07:
000141F6 4E75                       		rts	
000141F8                            ; ===========================================================================
000141F8                            
000141F8                            loc_12180:
000141F8 4A28 0038                  		tst.b	lblk_untouched(a0) ; has block been stood on or touched?
000141FC 6700                       		beq.s	locret_121C0	; if yes, branch
000141FE 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on it now?
00014204 6600                       		bne.s	loc_1219A	; if yes, branch
00014206 4A28 003E                  		tst.b	$3E(a0)
0001420A 6700                       		beq.s	locret_121C0
0001420C 5928 003E                  		subq.b	#4,$3E(a0)
00014210 6000                       		bra.s	loc_121A6
00014212                            ; ===========================================================================
00014212                            
00014212                            loc_1219A:
00014212 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00014218 6700                       		beq.s	locret_121C0
0001421A 5828 003E                  		addq.b	#4,$3E(a0)
0001421E                            
0001421E                            loc_121A6:
0001421E 1028 003E                  		move.b	$3E(a0),d0
00014222 4EB9 0000 3BA2             		jsr	(CalcSine).l
00014228 323C 0400                  		move.w	#$400,d1
0001422C C1C1                       		muls.w	d1,d0
0001422E 4840                       		swap	d0
00014230 D068 0030                  		add.w	lblk_origY(a0),d0
00014234 3140 000C                  		move.w	d0,obY(a0)
00014238                            
00014238                            locret_121C0:
00014238 4E75                       		rts	
00014238 4E75                       		rts	
0001423A                            Map_LBlock:	include	"_maps\LZ Blocks.asm"
0001423A                            Map_6865:
0001423A 0000                       Map_6865_0: 	dc.w Map_6865_8-Map_6865
0001423C 0000                       Map_6865_2: 	dc.w Map_6865_E-Map_6865
0001423E 0000                       Map_6865_4: 	dc.w Map_6865_19-Map_6865
00014240 0000                       Map_6865_6: 	dc.w Map_6865_1F-Map_6865
00014242 01                         Map_6865_8: 	dc.b $1
00014243 F00F 2000 F0               	dc.b $F0, $F, $20, $0, $F0
00014248 02                         Map_6865_E: 	dc.b $2
00014249 F40E 0069 E0               	dc.b $F4, $E, $0, $69, $E0
0001424E F40E 0075 00               	dc.b $F4, $E, $0, $75, $0
00014253 01                         Map_6865_19: 	dc.b $1
00014254 F00F 011A F0               	dc.b $F0, $F, $1, $1A, $F0
00014259 01                         Map_6865_1F: 	dc.b $1
0001425A F00F FDFA F0               	dc.b $F0, $F, $FD, $FA, $F0
00014260 00                         	even
00014260 00                         	even
00014260                            		include	"_incObj\62 Gargoyle.asm"
00014260                            ; ---------------------------------------------------------------------------
00014260                            ; Object 62 - gargoyle head (LZ)
00014260                            ; ---------------------------------------------------------------------------
00014260                            
00014260                            Gargoyle:
00014260 7000                       		moveq	#0,d0
00014262 1028 0024                  		move.b	obRoutine(a0),d0
00014266 323B 0000                  		move.w	Gar_Index(pc,d0.w),d1
0001426A 4EBB 1000                  		jsr	Gar_Index(pc,d1.w)
0001426E 6000 D2EE                  		bra.w	RememberState
00014272                            ; ===========================================================================
00014272 0000                       Gar_Index:	dc.w Gar_Main-Gar_Index
00014274 0000                       		dc.w Gar_MakeFire-Gar_Index
00014276 0000                       		dc.w Gar_FireBall-Gar_Index
00014278 0000                       		dc.w Gar_AniFire-Gar_Index
0001427A                            
0001427A 1E3C 5A78 96B4 D2F0        Gar_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00014282                            ; ===========================================================================
00014282                            
00014282                            Gar_Main:	; Routine 0
00014282 5428 0024                  		addq.b	#2,obRoutine(a0)
00014286 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
0001428E 317C 42E9 0002             		move.w	#$42E9,obGfx(a0)
00014294 0028 0004 0001             		ori.b	#4,obRender(a0)
0001429A 317C 0180 0018             		move.w	#$180,obPriority(a0)
000142A0 117C 0010 0014             		move.b	#$10,obActWid(a0)
000142A6 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000142AA 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000142AE 117B 00CA 001F             		move.b	Gar_SpitRate(pc,d0.w),obDelayAni(a0) ; set fireball spit rate
000142B4 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
000142BA 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
000142C0                            
000142C0                            Gar_MakeFire:	; Routine 2
000142C0 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement timer
000142C4 6600                       		bne.s	@nofire		; if time remains, branch
000142C6                            
000142C6 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset timer
000142CC 6100 B57A                  		bsr.w	ChkObjectVisible
000142D0 6600                       		bne.s	@nofire
000142D2 6100 B780                  		bsr.w	FindFreeObj
000142D6 6600                       		bne.s	@nofire
000142D8 12BC 0062                  		move.b	#id_Gargoyle,0(a1) ; load fireball object
000142DC 5829 0024                  		addq.b	#4,obRoutine(a1) ; use Gar_FireBall routine
000142E0 3368 0008 0008             		move.w	obX(a0),obX(a1)
000142E6 3368 000C 000C             		move.w	obY(a0),obY(a1)
000142EC 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
000142F2 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
000142F8                            
000142F8                            	@nofire:
000142F8 4E75                       		rts	
000142FA                            ; ===========================================================================
000142FA                            
000142FA                            Gar_FireBall:	; Routine 4
000142FA 5428 0024                  		addq.b	#2,obRoutine(a0)
000142FE 117C 0008 0016             		move.b	#8,obHeight(a0)
00014304 117C 0008 0017             		move.b	#8,obWidth(a0)
0001430A 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
00014312 317C 02E9 0002             		move.w	#$2E9,obGfx(a0)
00014318 0028 0004 0001             		ori.b	#4,obRender(a0)
0001431E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00014324 117C 0098 0020             		move.b	#$98,obColType(a0)
0001432A 117C 0008 0014             		move.b	#8,obActWid(a0)
00014330 117C 0002 001A             		move.b	#2,obFrame(a0)
00014336 5068 000C                  		addq.w	#8,obY(a0)
0001433A 317C 0200 0010             		move.w	#$200,obVelX(a0)
00014340 0828 0000 0022             		btst	#0,obStatus(a0)	; is gargoyle facing left?
00014346 6600                       		bne.s	@noflip		; if not, branch
00014348 4468 0010                  		neg.w	obVelX(a0)
0001434C                            
0001434C                            	@noflip:
00014356                            
00014356                            Gar_AniFire:	; Routine 6
00014356 1038 FE05                  		move.b	(v_framebyte).w,d0
0001435A 0200 0007                  		andi.b	#7,d0
0001435E 6600                       		bne.s	@nochg
00014360 0868 0000 001A             		bchg	#0,obFrame(a0)	; change every 8 frames
00014366                            
00014366                            	@nochg:
00014366 6100 B13E                  		bsr.w	SpeedToPos
0001436A 0828 0000 0022             		btst	#0,obStatus(a0) ; is fireball moving left?
00014370 6600                       		bne.s	@isright	; if not, branch
00014372 76F8                       		moveq	#-8,d3
00014374 6100 0000                  		bsr.w	ObjHitWallLeft
00014378 4A41                       		tst.w	d1
0001437A 6B00 B17E                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
0001437E 4E75                       		rts	
00014380                            
00014380                            	@isright:
00014380 7608                       		moveq	#8,d3
00014382 6100 0000                  		bsr.w	ObjHitWallRight
00014386 4A41                       		tst.w	d1
00014388 6B00 B170                  		bmi.w	DeleteObject
0001438C 4E75                       		rts	
0001438C 4E75                       		rts	
0001438E                            Map_Gar:	include	"_maps\Gargoyle.asm"
0001438E                            ; ---------------------------------------------------------------------------
0001438E                            ; Sprite mappings - gargoyle head (LZ)
0001438E                            ; ---------------------------------------------------------------------------
0001438E                            Map_Gar_internal:
0001438E 0000                       		dc.w @head-Map_Gar_internal
00014390 0000                       		dc.w @head-Map_Gar_internal
00014392 0000                       		dc.w @fireball1-Map_Gar_internal
00014394 0000                       		dc.w @fireball2-Map_Gar_internal
00014396 03                         @head:		dc.b 3
00014397 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
0001439C F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
000143A1 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
000143A6 01                         @fireball1:	dc.b 1
000143A7 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
000143AC 01                         @fireball2:	dc.b 1
000143AD FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
000143B2                            		even
000143B2                            		even
000143B2                            		include	"_incObj\63 LZ Conveyor.asm"
000143B2                            ; ---------------------------------------------------------------------------
000143B2                            ; Object 63 - platforms	on a conveyor belt (LZ)
000143B2                            ; ---------------------------------------------------------------------------
000143B2                            
000143B2                            LabyrinthConvey:
000143B2 7000                       		moveq	#0,d0
000143B4 1028 0024                  		move.b	obRoutine(a0),d0
000143B8 323B 0000                  		move.w	LCon_Index(pc,d0.w),d1
000143BC 4EBB 1000                  		jsr	LCon_Index(pc,d1.w)
000143DC                            
000143DC                            LCon_Display:
000143DC 6000 B0DC                  		bra.w	DisplaySprite
000143E0                            ; ===========================================================================
000143E0                            
000143E0                            loc_1236A:
000143E0 0C38 0002 FE11             		cmpi.b	#2,(v_act).w
000143E6 6600                       		bne.s	loc_12378
000143E8 0C40 FF80                  		cmpi.w	#-$80,d0
000143EC 64EE                       		bcc.s	LCon_Display
000143EE                            
000143EE                            loc_12378:
000143EE 1028 002F                  		move.b	$2F(a0),d0
000143F2 6A00 B106                  		bpl.w	DeleteObject
000143F6 0240 007F                  		andi.w	#$7F,d0
000143FA 45F8 F7C1                  		lea	(v_obj63).w,a2
000143FE 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00014404 6000 B0F4                  		bra.w	DeleteObject
00014408                            ; ===========================================================================
00014408 0000                       LCon_Index:	dc.w LCon_Main-LCon_Index
0001440A 0000                       		dc.w loc_124B2-LCon_Index
0001440C 0000                       		dc.w loc_124C2-LCon_Index
0001440E 0000                       		dc.w loc_124DE-LCon_Index
00014410                            ; ===========================================================================
00014410                            
00014410                            LCon_Main:	; Routine 0
00014410 1028 0028                  		move.b	obSubtype(a0),d0
00014414 6B00 0000                  		bmi.w	loc_12460
00014418 5428 0024                  		addq.b	#2,obRoutine(a0)
0001441C 217C 0000 0000 0004        		move.l	#Map_LConv,obMap(a0)
00014424 317C 43F6 0002             		move.w	#$43F6,obGfx(a0)
0001442A 0028 0004 0001             		ori.b	#4,obRender(a0)
00014430 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014436 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001443C 0C28 007F 0028             		cmpi.b	#$7F,obSubtype(a0)
00014442 6600                       		bne.s	loc_123E2
00014444 5828 0024                  		addq.b	#4,obRoutine(a0)
00014448 317C 03F6 0002             		move.w	#$3F6,obGfx(a0)
0001444E 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014454 6000 0000                  		bra.w	loc_124DE
00014458                            ; ===========================================================================
00014458                            
00014458                            loc_123E2:
00014458 117C 0004 001A             		move.b	#4,obFrame(a0)
0001445E 7000                       		moveq	#0,d0
00014460 1028 0028                  		move.b	obSubtype(a0),d0
00014464 3200                       		move.w	d0,d1
00014466 E648                       		lsr.w	#3,d0
00014468 0240 001E                  		andi.w	#$1E,d0
0001446C 45FA 0000                  		lea	LCon_Data(pc),a2
00014470 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014474 315A 0038                  		move.w	(a2)+,$38(a0)
00014478 315A 0030                  		move.w	(a2)+,$30(a0)
0001447C 214A 003C                  		move.l	a2,$3C(a0)
00014480 0241 000F                  		andi.w	#$F,d1
00014484 E549                       		lsl.w	#2,d1
00014486 1141 0038                  		move.b	d1,$38(a0)
0001448A 117C 0004 003A             		move.b	#4,$3A(a0)
00014490 4A38 F7C0                  		tst.b	(f_conveyrev).w
00014494 6700                       		beq.s	loc_1244C
00014496 117C 0001 003B             		move.b	#1,$3B(a0)
0001449C 4428 003A                  		neg.b	$3A(a0)
000144A0 7200                       		moveq	#0,d1
000144A2 1228 0038                  		move.b	$38(a0),d1
000144A6 D228 003A                  		add.b	$3A(a0),d1
000144AA B228 0039                  		cmp.b	$39(a0),d1
000144AE 6500                       		bcs.s	loc_12448
000144B0 1001                       		move.b	d1,d0
000144B2 7200                       		moveq	#0,d1
000144B4 4A00                       		tst.b	d0
000144B6 6A00                       		bpl.s	loc_12448
000144B8 1228 0039                  		move.b	$39(a0),d1
000144BC 5901                       		subq.b	#4,d1
000144BE                            
000144BE                            loc_12448:
000144BE 1141 0038                  		move.b	d1,$38(a0)
000144C2                            
000144C2                            loc_1244C:
000144C2 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000144C8 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000144CE 6100 0000                  		bsr.w	LCon_ChangeDir
000144D2 6000 0000                  		bra.w	loc_124B2
000144D6                            ; ===========================================================================
000144D6                            
000144D6                            loc_12460:
000144D6 1140 002F                  		move.b	d0,$2F(a0)
000144DA 0240 007F                  		andi.w	#$7F,d0
000144DE 45F8 F7C1                  		lea	(v_obj63).w,a2
000144E2 08F2 0000 0000             		bset	#0,(a2,d0.w)
000144E8 6600 B010                  		bne.w	DeleteObject
000144EC D040                       		add.w	d0,d0
000144EE 0240 001E                  		andi.w	#$1E,d0
000144F2 0640 0000                  		addi.w	#ObjPosLZPlatform_Index-ObjPos_Index,d0
000144F6 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000144FC D4F2 0000                  		adda.w	(a2,d0.w),a2
00014500 321A                       		move.w	(a2)+,d1
00014502 2248                       		movea.l	a0,a1
00014504 6000                       		bra.s	LCon_MakePtfms
00014506                            ; ===========================================================================
00014506                            
00014506                            LCon_Loop:
00014506 6100 B54C                  		bsr.w	FindFreeObj
0001450A 6600                       		bne.s	loc_124AA
0001450C                            
0001450C                            LCon_MakePtfms:
0001450C 12BC 0063                  		move.b	#id_LabyrinthConvey,0(a1)
00014510 335A 0008                  		move.w	(a2)+,obX(a1)
00014514 335A 000C                  		move.w	(a2)+,obY(a1)
00014518 301A                       		move.w	(a2)+,d0
0001451A 1340 0028                  		move.b	d0,obSubtype(a1)
0001451E                            
0001451E                            loc_124AA:
0001451E 51C9 FFE6                  		dbf	d1,LCon_Loop
00014522                            
00014522 588F                       		addq.l	#4,sp
00014524 4E75                       		rts	
00014526                            ; ===========================================================================
00014526                            
00014526                            loc_124B2:	; Routine 2
00014526 7200                       		moveq	#0,d1
00014528 1228 0014                  		move.b	obActWid(a0),d1
0001452C 4EB9 0000 8B78             		jsr	(PlatformObject).l
00014532 6000 0000                  		bra.w	sub_12502
00014536                            ; ===========================================================================
00014536                            
00014536                            loc_124C2:	; Routine 4
00014536 7200                       		moveq	#0,d1
00014538 1228 0014                  		move.b	obActWid(a0),d1
0001453C 4EB9 0000 8CEC             		jsr	(ExitPlatform).l
00014542 3F28 0008                  		move.w	obX(a0),-(sp)
00014546 6100 0000                  		bsr.w	sub_12502
0001454A 341F                       		move.w	(sp)+,d2
0001454C 4EF9 0000 9256             		jmp	(MvSonicOnPtfm2).l
00014552                            ; ===========================================================================
00014552                            
00014552                            loc_124DE:	; Routine 6
00014552 3038 FE04                  		move.w	(v_framecount).w,d0
00014556 0240 0003                  		andi.w	#3,d0
0001455A 6600                       		bne.s	loc_124FC
0001455C 7201                       		moveq	#1,d1
0001455E 4A38 F7C0                  		tst.b	(f_conveyrev).w
00014562 6700                       		beq.s	loc_124F2
00014564 4401                       		neg.b	d1
00014566                            
00014566                            loc_124F2:
00014566 D328 001A                  		add.b	d1,obFrame(a0)
0001456A 0228 0003 001A             		andi.b	#3,obFrame(a0)
00014570                            
00014570                            loc_124FC:
00014570 588F                       		addq.l	#4,sp
00014572 6000 CFEA                  		bra.w	RememberState
00014576                            
00014576                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014576                            
00014576                            
00014576                            sub_12502:
00014576 4A38 F7EE                  		tst.b	(f_switch+$E).w
0001457A 6700                       		beq.s	loc_12520
0001457C 4A28 003B                  		tst.b	$3B(a0)
00014580 6600                       		bne.s	loc_12520
00014582 117C 0001 003B             		move.b	#1,$3B(a0)
00014588 11FC 0001 F7C0             		move.b	#1,(f_conveyrev).w
0001458E 4428 003A                  		neg.b	$3A(a0)
00014592 6000                       		bra.s	loc_12534
00014594                            ; ===========================================================================
00014594                            
00014594                            loc_12520:
00014594 3028 0008                  		move.w	obX(a0),d0
00014598 B068 0034                  		cmp.w	$34(a0),d0
0001459C 6600                       		bne.s	loc_1256A
0001459E 3028 000C                  		move.w	obY(a0),d0
000145A2 B068 0036                  		cmp.w	$36(a0),d0
000145A6 6600                       		bne.s	loc_1256A
000145A8                            
000145A8                            loc_12534:
000145A8 7200                       		moveq	#0,d1
000145AA 1228 0038                  		move.b	$38(a0),d1
000145AE D228 003A                  		add.b	$3A(a0),d1
000145B2 B228 0039                  		cmp.b	$39(a0),d1
000145B6 6500                       		bcs.s	loc_12552
000145B8 1001                       		move.b	d1,d0
000145BA 7200                       		moveq	#0,d1
000145BC 4A00                       		tst.b	d0
000145BE 6A00                       		bpl.s	loc_12552
000145C0 1228 0039                  		move.b	$39(a0),d1
000145C4 5901                       		subq.b	#4,d1
000145C6                            
000145C6                            loc_12552:
000145C6 1141 0038                  		move.b	d1,$38(a0)
000145CA 2268 003C                  		movea.l	$3C(a0),a1
000145CE 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000145D4 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000145DA 6100 0000                  		bsr.w	LCon_ChangeDir
000145DE                            
000145DE                            loc_1256A:
000145DE 6100 AEC6                  		bsr.w	SpeedToPos
000145E2 4E75                       		rts	
000145E4                            ; End of function sub_12502
000145E4                            
000145E4                            
000145E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000145E4                            
000145E4                            
000145E4                            LCon_ChangeDir:
000145E4 7000                       		moveq	#0,d0
000145E6 343C FF00                  		move.w	#-$100,d2
000145EA 3028 0008                  		move.w	obX(a0),d0
000145EE 9068 0034                  		sub.w	$34(a0),d0
000145F2 6400                       		bcc.s	loc_12584
000145F4 4440                       		neg.w	d0
000145F6 4442                       		neg.w	d2
000145F8                            
000145F8                            loc_12584:
000145F8 7200                       		moveq	#0,d1
000145FA 363C FF00                  		move.w	#-$100,d3
000145FE 3228 000C                  		move.w	obY(a0),d1
00014602 9268 0036                  		sub.w	$36(a0),d1
00014606 6400                       		bcc.s	loc_12598
00014608 4441                       		neg.w	d1
0001460A 4443                       		neg.w	d3
0001460C                            
0001460C                            loc_12598:
0001460C B240                       		cmp.w	d0,d1
0001460E 6500                       		bcs.s	loc_125C2
00014610 3028 0008                  		move.w	obX(a0),d0
00014614 9068 0034                  		sub.w	$34(a0),d0
00014618 6700                       		beq.s	loc_125AE
0001461A 48C0                       		ext.l	d0
0001461C E180                       		asl.l	#8,d0
0001461E 81C1                       		divs.w	d1,d0
00014620 4440                       		neg.w	d0
00014622                            
00014622                            loc_125AE:
00014622 3140 0010                  		move.w	d0,obVelX(a0)
00014626 3143 0012                  		move.w	d3,obVelY(a0)
0001462A 4840                       		swap	d0
0001462C 3140 000A                  		move.w	d0,obX+2(a0)
00014630 4268 000E                  		clr.w	obY+2(a0)
00014634 4E75                       		rts	
00014636                            ; ===========================================================================
00014636                            
00014636                            loc_125C2:
00014636 3228 000C                  		move.w	obY(a0),d1
0001463A 9268 0036                  		sub.w	$36(a0),d1
0001463E 6700                       		beq.s	loc_125D4
00014640 48C1                       		ext.l	d1
00014642 E181                       		asl.l	#8,d1
00014644 83C0                       		divs.w	d0,d1
00014646 4441                       		neg.w	d1
00014648                            
00014648                            loc_125D4:
00014648 3141 0012                  		move.w	d1,obVelY(a0)
0001464C 3142 0010                  		move.w	d2,obVelX(a0)
00014650 4841                       		swap	d1
00014652 3141 000E                  		move.w	d1,obY+2(a0)
00014656 4268 000A                  		clr.w	obX+2(a0)
0001465A 4E75                       		rts	
0001465C                            ; End of function LCon_ChangeDir
0001465C                            
0001465C                            ; ===========================================================================
0001465C 0000                       LCon_Data:	dc.w word_125F4-LCon_Data
0001465E 0000                       		dc.w word_12610-LCon_Data
00014660 0000                       		dc.w word_12628-LCon_Data
00014662 0000                       		dc.w word_1263C-LCon_Data
00014664 0000                       		dc.w word_12650-LCon_Data
00014666 0000                       		dc.w word_12668-LCon_Data
00014668 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00014678 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00014684 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00014694 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
0001469C 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
000146B0 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
000146C4 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
000146DC 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
000146DC 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
000146F0                            Map_LConv:	include	"_maps\LZ Conveyor.asm"
000146F0                            ; ---------------------------------------------------------------------------
000146F0                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000146F0                            ; ---------------------------------------------------------------------------
000146F0                            Map_LConv_internal:
000146F0 0000                       		dc.w @wheel1-Map_LConv_internal
000146F2 0000                       		dc.w @wheel2-Map_LConv_internal
000146F4 0000                       		dc.w @wheel3-Map_LConv_internal
000146F6 0000                       		dc.w @wheel4-Map_LConv_internal
000146F8 0000                       		dc.w @platform-Map_LConv_internal
000146FA 01                         @wheel1:	dc.b 1
000146FB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00014700 01                         @wheel2:	dc.b 1
00014701 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00014706 01                         @wheel3:	dc.b 1
00014707 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0001470C 01                         @wheel4:	dc.b 1
0001470D F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00014712 01                         @platform:	dc.b 1
00014713 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00014718                            		even
00014718                            		even
00014718                            		include	"_incObj\64 Bubbles.asm"
00014718                            ; ---------------------------------------------------------------------------
00014718                            ; Object 64 - bubbles (LZ)
00014718                            ; ---------------------------------------------------------------------------
00014718                            
00014718                            Bubble:
00014718 7000                       		moveq	#0,d0
0001471A 1028 0024                  		move.b	obRoutine(a0),d0
0001471E 323B 0000                  		move.w	Bub_Index(pc,d0.w),d1
00014722 4EFB 1000                  		jmp	Bub_Index(pc,d1.w)
00014726                            ; ===========================================================================
00014726 0000                       Bub_Index:	dc.w Bub_Main-Bub_Index
00014728 0000                       		dc.w Bub_Animate-Bub_Index
0001472A 0000                       		dc.w Bub_ChkWater-Bub_Index
0001472C 0000                       		dc.w Bub_Display-Bub_Index
0001472E 0000                       		dc.w Bub_Delete-Bub_Index
00014730 0000                       		dc.w Bub_BblMaker-Bub_Index
00014732                            
00014732 =0000002E                  bub_inhalable:	equ $2E		; flag set when bubble is collectable
00014732 =00000030                  bub_origX:	equ $30		; original x-axis position
00014732 =00000032                  bub_time:	equ $32		; time until next bubble spawn
00014732 =00000033                  bub_freq:	equ $33		; frequency of bubble spawn
00014732                            ; ===========================================================================
00014732                            
00014732                            Bub_Main:	; Routine 0
00014732 5428 0024                  		addq.b	#2,obRoutine(a0)
00014736 217C 0000 0000 0004        		move.l	#Map_Bub,obMap(a0)
0001473E 317C 8348 0002             		move.w	#$8348,obGfx(a0)
00014744 117C 0084 0001             		move.b	#$84,obRender(a0)
0001474A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014750 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014756 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
0001475A 6A00                       		bpl.s	@bubble		; if type is $0-$7F, branch
0001475C                            
0001475C 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Bub_BblMaker next
00014760 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00014764 1140 0032                  		move.b	d0,bub_time(a0)
00014768 1140 0033                  		move.b	d0,bub_freq(a0)	; set bubble frequency
0001476C 117C 0006 001C             		move.b	#6,obAnim(a0)
00014772 6000 0000                  		bra.w	Bub_BblMaker
00014776                            ; ===========================================================================
00014776                            
00014776                            @bubble:
00014776 1140 001C                  		move.b	d0,obAnim(a0)
0001477A 3168 0008 0030             		move.w	obX(a0),bub_origX(a0)
00014780 317C FF78 0012             		move.w	#-$88,obVelY(a0) ; float bubble upwards
00014786 4EB9 0000 3B7C             		jsr	(RandomNumber).l
0001478C 1140 0026                  		move.b	d0,obAngle(a0)
00014790                            
00014790                            Bub_Animate:	; Routine 2
00014790 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014796 4EB9 0000 C574             		jsr	(AnimateSprite).l
0001479C 0C28 0006 001A             		cmpi.b	#6,obFrame(a0)	; is bubble full-size?
000147A2 6600                       		bne.s	Bub_ChkWater	; if not, branch
000147A4                            
000147A4 117C 0001 002E             		move.b	#1,bub_inhalable(a0) ; set "inhalable" flag
000147AA                            
000147AA                            Bub_ChkWater:	; Routine 4
000147AA 3038 F646                  		move.w	(v_waterpos1).w,d0
000147AE B068 000C                  		cmp.w	obY(a0),d0	; is bubble underwater?
000147B2 6500                       		bcs.s	@wobble		; if yes, branch
000147B4                            
000147B4                            @burst:
000147B4 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto Bub_Display next
000147BA 5628 001C                  		addq.b	#3,obAnim(a0)	; run "bursting" animation
000147BE 6000 0000                  		bra.w	Bub_Display
000147C2                            ; ===========================================================================
000147C2                            
000147C2                            @wobble:
000147C2 1028 0026                  		move.b	obAngle(a0),d0
000147C6 5228 0026                  		addq.b	#1,obAngle(a0)
000147CA 0240 007F                  		andi.w	#$7F,d0
000147CE 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
000147D4 1031 0000                  		move.b	(a1,d0.w),d0
000147D8 4880                       		ext.w	d0
000147DA D068 0030                  		add.w	bub_origX(a0),d0
000147DE 3140 0008                  		move.w	d0,obX(a0)	; change bubble's x-axis position
000147E2 4A28 002E                  		tst.b	bub_inhalable(a0)
000147E6 6700                       		beq.s	@display
000147E8 6100 0000                  		bsr.w	Bub_ChkSonic	; has Sonic touched the	bubble?
000147EC 6700                       		beq.s	@display	; if not, branch
000147EE                            
000147EE 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
000147FC 43F8 D000                  		lea	(v_player).w,a1
00014800 4269 0010                  		clr.w	obVelX(a1)
00014804 4269 0012                  		clr.w	obVelY(a1)
00014808 4269 0020                  		clr.w	obInertia(a1)	; stop Sonic
0001480C 137C 0000 001C             		move.b	#id_GetAir,obAnim(a1) ; use bubble-collecting animation
00014812 337C 0023 003E             		move.w	#$23,$3E(a1)
00014818 137C 0000 003C             		move.b	#0,$3C(a1)
0001481E 08A9 0005 0022             		bclr	#5,obStatus(a1)
00014824 08A9 0004 0022             		bclr	#4,obStatus(a1)
0001482A 0829 0002 0022             		btst	#2,obStatus(a1)
00014830 6700 FF82                  		beq.w	@burst
00014834 08A9 0002 0022             		bclr	#2,obStatus(a1)
0001483A 137C 0013 0016             		move.b	#$13,obHeight(a1)
00014840 137C 0009 0017             		move.b	#9,obWidth(a1)
00014846 5B69 000C                  		subq.w	#5,obY(a1)
0001484A 6000 FF68                  		bra.w	@burst
0001484E                            ; ===========================================================================
0001484E                            
0001484E                            @display:
0001484E 6100 AC56                  		bsr.w	SpeedToPos
00014852 4A28 0001                  		tst.b	obRender(a0)
00014856 6A00                       		bpl.s	@delete
00014858 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001485E                            
0001485E                            	@delete:
0001485E 4EF9 0000 F4FA             		jmp	(DeleteObject).l
00014864                            ; ===========================================================================
00014864                            
00014864                            Bub_Display:	; Routine 6
00014864 43F9 0000 0000             		lea	(Ani_Bub).l,a1
0001486A 4EB9 0000 C574             		jsr	(AnimateSprite).l
00014870 4A28 0001                  		tst.b	obRender(a0)
00014874 6A00                       		bpl.s	@delete
00014876 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001487C                            
0001487C                            	@delete:
0001487C 4EF9 0000 F4FA             		jmp	(DeleteObject).l
00014882                            ; ===========================================================================
00014882                            
00014882                            Bub_Delete:	; Routine 8
00014882 6000 AC76                  		bra.w	DeleteObject
00014886                            ; ===========================================================================
00014886                            
00014886                            Bub_BblMaker:	; Routine $A
00014886 4A68 0036                  		tst.w	$36(a0)
0001488A 6600                       		bne.s	@loc_12874
0001488C 3038 F646                  		move.w	(v_waterpos1).w,d0
00014890 B068 000C                  		cmp.w	obY(a0),d0	; is bubble maker underwater?
00014894 6400 0000                  		bcc.w	@chkdel		; if not, branch
00014898 4A28 0001                  		tst.b	obRender(a0)
0001489C 6A00 0000                  		bpl.w	@chkdel
000148A0 5368 0038                  		subq.w	#1,$38(a0)
000148A4 6A00 0000                  		bpl.w	@loc_12914
000148A8 317C 0001 0036             		move.w	#1,$36(a0)
000148AE                            
000148AE                            	@tryagain:
000148AE 4EB9 0000 3B7C             		jsr	(RandomNumber).l
000148B4 3200                       		move.w	d0,d1
000148B6 0240 0007                  		andi.w	#7,d0
000148BA 0C40 0006                  		cmpi.w	#6,d0		; random number over 6?
000148BE 64EE                       		bcc.s	@tryagain	; if yes, branch
000148C0                            
000148C0 1140 0034                  		move.b	d0,$34(a0)
000148C4 0241 000C                  		andi.w	#$C,d1
000148C8 43F9 0000 0000             		lea	(Bub_BblTypes).l,a1
000148CE D2C1                       		adda.w	d1,a1
000148D0 2149 003C                  		move.l	a1,$3C(a0)
000148D4 5328 0032                  		subq.b	#1,bub_time(a0)
000148D8 6A00                       		bpl.s	@loc_12872
000148DA 1168 0033 0032             		move.b	bub_freq(a0),bub_time(a0)
000148E0 08E8 0007 0036             		bset	#7,$36(a0)
000148E6                            
000148E6                            @loc_12872:
000148E6 6000                       		bra.s	@loc_1287C
000148E8                            ; ===========================================================================
000148E8                            
000148E8                            @loc_12874:
000148E8 5368 0038                  		subq.w	#1,$38(a0)
000148EC 6A00 0000                  		bpl.w	@loc_12914
000148F0                            
000148F0                            @loc_1287C:
000148F0 4EB9 0000 3B7C             		jsr	(RandomNumber).l
000148F6 0240 001F                  		andi.w	#$1F,d0
000148FA 3140 0038                  		move.w	d0,$38(a0)
000148FE 6100 B154                  		bsr.w	FindFreeObj
00014902 6600                       		bne.s	@fail
00014904 12BC 0064                  		move.b	#id_Bubble,0(a1) ; load bubble object
00014908 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001490E 4EB9 0000 3B7C             		jsr	(RandomNumber).l
00014914 0240 000F                  		andi.w	#$F,d0
00014918 5140                       		subq.w	#8,d0
0001491A D169 0008                  		add.w	d0,obX(a1)
0001491E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00014924 7000                       		moveq	#0,d0
00014926 1028 0034                  		move.b	$34(a0),d0
0001492A 2468 003C                  		movea.l	$3C(a0),a2
0001492E 1372 0000 0028             		move.b	(a2,d0.w),obSubtype(a1)
00014934 0828 0007 0036             		btst	#7,$36(a0)
0001493A 6700                       		beq.s	@fail
0001493C 4EB9 0000 3B7C             		jsr	(RandomNumber).l
00014942 0240 0003                  		andi.w	#3,d0
00014946 6600                       		bne.s	@loc_buh
00014948 08E8 0006 0036             		bset	#6,$36(a0)
0001494E 6600                       		bne.s	@fail
00014950 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014956                            
00014956                            @loc_buh:
00014956 4A28 0034                  		tst.b	$34(a0)
0001495A 6600                       		bne.s	@fail
0001495C 08E8 0006 0036             		bset	#6,$36(a0)
00014962 6600                       		bne.s	@fail
00014964 137C 0002 0028             		move.b	#2,obSubtype(a1)
0001496A                            
0001496A                            	@fail:
0001496A 5328 0034                  		subq.b	#1,$34(a0)
0001496E 6A00                       		bpl.s	@loc_12914
00014970 4EB9 0000 3B7C             		jsr	(RandomNumber).l
00014976 0240 007F                  		andi.w	#$7F,d0
0001497A 0640 0080                  		addi.w	#$80,d0
0001497E D168 0038                  		add.w	d0,$38(a0)
00014982 4268 0036                  		clr.w	$36(a0)
00014986                            
00014986                            @loc_12914:
00014986 43F9 0000 0000             		lea	(Ani_Bub).l,a1
0001498C 4EB9 0000 C574             		jsr	(AnimateSprite).l
00014992                            
00014992                            @chkdel:
000149B0 3038 F646                  		move.w	(v_waterpos1).w,d0
000149B4 B068 000C                  		cmp.w	obY(a0),d0
000149B8 6500 AB00                  		bcs.w	DisplaySprite
000149BC 4E75                       		rts	
000149BE                            ; ===========================================================================
000149BE                            ; bubble production sequence
000149BE                            
000149BE                            ; 0 = small bubble, 1 =	large bubble
000149BE                            
000149BE 0001 0000 0000 0100 0000+  Bub_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
000149D0                            
000149D0                            ; ===========================================================================
000149D0                            
000149D0                            Bub_ChkSonic:
000149D0 4A38 F7C8                  		tst.b	(f_lockmulti).w
000149D4 6B00                       		bmi.s	@loc_12998
000149D6 43F8 D000                  		lea	(v_player).w,a1
000149DA 3029 0008                  		move.w	obX(a1),d0
000149DE 3228 0008                  		move.w	obX(a0),d1
000149E2 0441 0010                  		subi.w	#$10,d1
000149E6 B240                       		cmp.w	d0,d1
000149E8 6400                       		bcc.s	@loc_12998
000149EA 0641 0020                  		addi.w	#$20,d1
000149EE B240                       		cmp.w	d0,d1
000149F0 6500                       		bcs.s	@loc_12998
000149F2 3029 000C                  		move.w	obY(a1),d0
000149F6 3228 000C                  		move.w	obY(a0),d1
000149FA B240                       		cmp.w	d0,d1
000149FC 6400                       		bcc.s	@loc_12998
000149FE 0641 0010                  		addi.w	#$10,d1
00014A02 B240                       		cmp.w	d0,d1
00014A04 6500                       		bcs.s	@loc_12998
00014A06 7001                       		moveq	#1,d0
00014A08 4E75                       		rts	
00014A0A                            ; ===========================================================================
00014A0A                            
00014A0A                            @loc_12998:
00014A0A 7000                       		moveq	#0,d0
00014A0C 4E75                       		rts	
00014A0C 4E75                       		rts	
00014A0E                            		include	"_anim\Bubbles.asm"
00014A0E                            ; ---------------------------------------------------------------------------
00014A0E                            ; Animation script - bubbles (LZ)
00014A0E                            ; ---------------------------------------------------------------------------
00014A0E 0000                       Ani_Bub:	dc.w @small-Ani_Bub
00014A10 0000                       		dc.w @medium-Ani_Bub
00014A12 0000                       		dc.w @large-Ani_Bub
00014A14 0000                       		dc.w @incroutine-Ani_Bub
00014A16 0000                       		dc.w @incroutine-Ani_Bub
00014A18 0000                       		dc.w @burst-Ani_Bub
00014A1A 0000                       		dc.w @bubmaker-Ani_Bub
00014A1C 0D00 0102 FC               @small:		dc.b $D, 0, 1, 2, afRoutine ; small bubble forming
00014A22 00                         		even
00014A22 0D01 0203 04FC             @medium:	dc.b $D, 1, 2, 3, 4, afRoutine ; medium bubble forming
00014A28 0D02 0304 0506 FC          @large:		dc.b $D, 2, 3, 4, 5, 6,	afRoutine ; full size bubble forming
00014A30 00                         		even
00014A30 04FC                       @incroutine:	dc.b 4,	afRoutine	; increment routine counter (no animation)
00014A32 0406 0708 FC               @burst:		dc.b 4,	6, 7, 8, afRoutine ; large bubble bursts
00014A38 00                         		even
00014A38 0E13 1415 FF               @bubmaker:	dc.b $E, $13, $14, $15,	afEnd ; bubble maker on the floor
00014A3E 00                         		even
00014A3E 00                         		even
00014A3E                            Map_Bub:	include	"_maps\Bubbles.asm"
00014A3E                            ; ---------------------------------------------------------------------------
00014A3E                            ; Sprite mappings - bubbles (LZ)
00014A3E                            ; ---------------------------------------------------------------------------
00014A3E                            Map_Bub_internal:
00014A3E 0000                       		dc.w @bubble1-Map_Bub_internal
00014A40 0000                       		dc.w @bubble2-Map_Bub_internal
00014A42 0000                       		dc.w @bubble3-Map_Bub_internal
00014A44 0000                       		dc.w @bubble4-Map_Bub_internal
00014A46 0000                       		dc.w @bubble5-Map_Bub_internal
00014A48 0000                       		dc.w @bubble6-Map_Bub_internal
00014A4A 0000                       		dc.w @bubblefull-Map_Bub_internal
00014A4C 0000                       		dc.w @burst1-Map_Bub_internal
00014A4E 0000                       		dc.w @burst2-Map_Bub_internal
00014A50 0000                       		dc.w @zero_sm-Map_Bub_internal
00014A52 0000                       		dc.w @five_sm-Map_Bub_internal
00014A54 0000                       		dc.w @three_sm-Map_Bub_internal
00014A56 0000                       		dc.w @one_sm-Map_Bub_internal
00014A58 0000                       		dc.w @zero-Map_Bub_internal
00014A5A 0000                       		dc.w @five-Map_Bub_internal
00014A5C 0000                       		dc.w @four-Map_Bub_internal
00014A5E 0000                       		dc.w @three-Map_Bub_internal
00014A60 0000                       		dc.w @two-Map_Bub_internal
00014A62 0000                       		dc.w @one-Map_Bub_internal
00014A64 0000                       		dc.w @bubmaker1-Map_Bub_internal
00014A66 0000                       		dc.w @bubmaker2-Map_Bub_internal
00014A68 0000                       		dc.w @bubmaker3-Map_Bub_internal
00014A6A 0000                       		dc.w @blank-Map_Bub_internal
00014A6C 01                         @bubble1:	dc.b 1
00014A6D FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC	; bubbles, increasing in size
00014A72 01                         @bubble2:	dc.b 1
00014A73 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00014A78 01                         @bubble3:	dc.b 1
00014A79 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00014A7E 01                         @bubble4:	dc.b 1
00014A7F F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00014A84 01                         @bubble5:	dc.b 1
00014A85 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00014A8A 01                         @bubble6:	dc.b 1
00014A8B F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00014A90 01                         @bubblefull:	dc.b 1
00014A91 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00014A96 04                         @burst1:	dc.b 4
00014A97 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0 ; large bubble bursting
00014A9C F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00014AA1 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00014AA6 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00014AAB 04                         @burst2:	dc.b 4
00014AAC F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00014AB1 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00014AB6 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00014ABB 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00014AC0 01                         @zero_sm:	dc.b 1
00014AC1 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8 ; small, partially-formed countdown numbers
00014AC6 01                         @five_sm:	dc.b 1
00014AC7 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00014ACC 01                         @three_sm:	dc.b 1
00014ACD F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00014AD2 01                         @one_sm:	dc.b 1
00014AD3 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00014AD8 01                         @zero:		dc.b 1
00014AD9 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8 ; fully-formed countdown numbers
00014ADE 01                         @five:		dc.b 1
00014ADF F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00014AE4 01                         @four:		dc.b 1
00014AE5 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00014AEA 01                         @three:		dc.b 1
00014AEB F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00014AF0 01                         @two:		dc.b 1
00014AF1 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00014AF6 01                         @one:		dc.b 1
00014AF7 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00014AFC 01                         @bubmaker1:	dc.b 1
00014AFD F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00014B02 01                         @bubmaker2:	dc.b 1
00014B03 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00014B08 01                         @bubmaker3:	dc.b 1
00014B09 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00014B0E 00                         @blank:		dc.b 0
00014B10 00                         		even
00014B10 00                         		even
00014B10                            		include	"_incObj\65 Waterfalls.asm"
00014B10                            ; ---------------------------------------------------------------------------
00014B10                            ; Object 65 - waterfalls (LZ)
00014B10                            ; ---------------------------------------------------------------------------
00014B10                            
00014B10                            Waterfall:
00014B10 7000                       		moveq	#0,d0
00014B12 1028 0024                  		move.b	obRoutine(a0),d0
00014B16 323B 0000                  		move.w	WFall_Index(pc,d0.w),d1
00014B1A 4EFB 1000                  		jmp	WFall_Index(pc,d1.w)
00014B1E                            ; ===========================================================================
00014B1E 0000                       WFall_Index:	dc.w WFall_Main-WFall_Index
00014B20 0000                       		dc.w WFall_Animate-WFall_Index
00014B22 0000                       		dc.w WFall_ChkDel-WFall_Index
00014B24 0000                       		dc.w WFall_OnWater-WFall_Index
00014B26 0000                       		dc.w loc_12B36-WFall_Index
00014B28                            ; ===========================================================================
00014B28                            
00014B28                            WFall_Main:	; Routine 0
00014B28 5828 0024                  		addq.b	#4,obRoutine(a0)
00014B2C 217C 0000 0000 0004        		move.l	#Map_WFall,obMap(a0)
00014B34 317C 4259 0002             		move.w	#$4259,obGfx(a0)
00014B3A 0028 0004 0001             		ori.b	#4,obRender(a0)
00014B40 117C 0018 0014             		move.b	#$18,obActWid(a0)
00014B46 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014B4C 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014B50 6A00                       		bpl.s	@under80	; branch if $00-$7F
00014B52 08E8 0007 0002             		bset	#7,obGfx(a0)
00014B58                            
00014B58                            	@under80:
00014B58 0200 000F                  		andi.b	#$F,d0		; read only the	2nd digit
00014B5C 1140 001A                  		move.b	d0,obFrame(a0)	; set frame number
00014B60 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00014B64 6600                       		bne.s	WFall_ChkDel	; if not, branch
00014B66                            
00014B66 4228 0018                  		clr.b	obPriority(a0)	; object is in front of Sonic
00014B6A 5528 0024                  		subq.b	#2,obRoutine(a0) ; goto WFall_Animate next
00014B6E 0828 0006 0028             		btst	#6,obSubtype(a0) ; is object type $49 ?
00014B74 6700                       		beq.s	@not49		; if not, branch
00014B76                            
00014B76 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto WFall_OnWater next
00014B7C                            
00014B7C                            	@not49:
00014B7C 0828 0005 0028             		btst	#5,obSubtype(a0) ; is object type $A9 ?
00014B82 6700                       		beq.s	WFall_Animate	; if not, branch
00014B84 117C 0008 0024             		move.b	#8,obRoutine(a0) ; goto loc_12B36 next
00014B8A                            
00014B8A                            WFall_Animate:	; Routine 2
00014B8A 43F9 0000 0000             		lea	(Ani_WFall).l,a1
00014B90 4EB9 0000 C574             		jsr	(AnimateSprite).l
00014B96                            
00014B96                            WFall_ChkDel:	; Routine 4
00014B96 6000 C9C6                  		bra.w	RememberState
00014B9A                            ; ===========================================================================
00014B9A                            
00014B9A                            WFall_OnWater:	; Routine 6
00014B9A 3038 F646                  		move.w	(v_waterpos1).w,d0
00014B9E 0440 0010                  		subi.w	#$10,d0
00014BA2 3140 000C                  		move.w	d0,obY(a0)	; match	object position	to water height
00014BA6 60E2                       		bra.s	WFall_Animate
00014BA8                            ; ===========================================================================
00014BA8                            
00014BA8                            loc_12B36:	; Routine 8
00014BA8 08A8 0007 0002             		bclr	#7,obGfx(a0)
00014BAE 0C38 0007 A506             		cmpi.b	#7,(v_lvllayout+$106).w
00014BB4 6600                       		bne.s	@animate
00014BB6 08E8 0007 0002             		bset	#7,obGfx(a0)
00014BBC                            
00014BBC                            	@animate:
00014BBC 60CC                       		bra.s	WFall_Animate
00014BBC 60CC                       		bra.s	WFall_Animate
00014BBE                            		include	"_anim\Waterfalls.asm"
00014BBE                            ; ---------------------------------------------------------------------------
00014BBE                            ; Animation script - waterfall (LZ)
00014BBE                            ; ---------------------------------------------------------------------------
00014BBE 0000                       Ani_WFall:	dc.w @splash-Ani_WFall
00014BC0 0509 0A0B FF               @splash:	dc.b 5,	9, $A, $B, afEnd
00014BC6 00                         		even
00014BC6 00                         		even
00014BC6                            Map_WFall	include	"_maps\Waterfalls.asm"
00014BC6                            ; ---------------------------------------------------------------------------
00014BC6                            ; Sprite mappings - waterfalls (LZ)
00014BC6                            ; ---------------------------------------------------------------------------
00014BC6                            Map_WFall_internal:
00014BC6 0000                       		dc.w @vertnarrow-Map_WFall_internal
00014BC8 0000                       		dc.w @cornerwide-Map_WFall_internal
00014BCA 0000                       		dc.w @cornermedium-Map_WFall_internal
00014BCC 0000                       		dc.w @cornernarrow-Map_WFall_internal
00014BCE 0000                       		dc.w @cornermedium2-Map_WFall_internal
00014BD0 0000                       		dc.w @cornernarrow2-Map_WFall_internal
00014BD2 0000                       		dc.w @cornernarrow3-Map_WFall_internal
00014BD4 0000                       		dc.w @vertwide-Map_WFall_internal
00014BD6 0000                       		dc.w @diagonal-Map_WFall_internal
00014BD8 0000                       		dc.w @splash1-Map_WFall_internal
00014BDA 0000                       		dc.w @splash2-Map_WFall_internal
00014BDC 0000                       		dc.w @splash3-Map_WFall_internal
00014BDE 01                         @vertnarrow:	dc.b 1
00014BDF F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014BE4 02                         @cornerwide:	dc.b 2
00014BE5 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00014BEA 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00014BEF 02                         @cornermedium:	dc.b 2
00014BF0 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014BF5 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014BFA 01                         @cornernarrow:	dc.b 1
00014BFB F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00014C00 02                         @cornermedium2:	dc.b 2
00014C01 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014C06 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014C0B 01                         @cornernarrow2:	dc.b 1
00014C0C F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00014C11 01                         @cornernarrow3:	dc.b 1
00014C12 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014C17 01                         @vertwide:	dc.b 1
00014C18 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00014C1D 02                         @diagonal:	dc.b 2
00014C1E F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00014C23 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00014C28 02                         @splash1:	dc.b 2
00014C29 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00014C2E F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00014C33 02                         @splash2:	dc.b 2
00014C34 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00014C39 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00014C3E 02                         @splash3:	dc.b 2
00014C3F F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00014C44 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00014C4A 00                         		even
00014C4A 00                         		even
00014C4A                            
00014C4A                            
00014C4A                            SpinDash_dust:
00014C4A                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00014C4A 7000                       		moveq	#0,d0
00014C4C 1028 0024                  		move.b	$24(a0),d0
00014C50 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00014C54 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00014C58                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014C58 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00014C5A 0000                       		dc loc_1DD90-off_1DD2E; 1
00014C5C 0000                       		dc loc_1DE46-off_1DD2E; 2
00014C5E 0000                       		dc loc_1DE4A-off_1DD2E; 3
00014C60                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014C60                            
00014C60                            loc_1DD36:				; DATA XREF: h+6DBA?o
00014C60 5428 0024                  		addq.b	#2,$24(a0)
00014C64 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00014C6C 0028 0004 0001             		or.b	#4,1(a0)
00014C72 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014C78 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014C7E 317C 07AC 0002             		move	#$7AC,2(a0)
00014C84 317C D000 003E             		move	#-$3000,$3E(a0)
00014C8A 317C F580 003C             		move	#$F580,$3C(a0)
00014C90 B0FC D1C0                  		cmp	#-$2E40,a0
00014C94 6700                       		beq.s	loc_1DD8C
00014C96 117C 0001 0034             		move.b	#1,$34(a0)
00014C9C                            ;		cmp	#2,($FFFFFF70).w
00014C9C                            ;		beq.s	loc_1DD8C
00014C9C                            ;		move	#$48C,2(a0)
00014C9C                            ;		move	#-$4FC0,$3E(a0)
00014C9C                            ;		move	#-$6E80,$3C(a0)
00014C9C                            
00014C9C                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
00014C9C                            ;		bsr.w	sub_16D6E
00014C9C                            
00014C9C                            loc_1DD90:				; DATA XREF: h+6DBA?o
00014C9C 3468 003E                  		movea.w	$3E(a0),a2
00014CA0 7000                       		moveq	#0,d0
00014CA2 1028 001C                  		move.b	$1C(a0),d0
00014CA6 D040                       		add	d0,d0
00014CA8 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
00014CAC 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
00014CB0                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014CB0 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
00014CB2 0000                       		dc loc_1DDAC-off_1DDA4; 1
00014CB4 0000                       		dc loc_1DDCC-off_1DDA4; 2
00014CB6 0000                       		dc loc_1DE20-off_1DDA4; 3
00014CB8                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014CB8                            
00014CB8                            loc_1DDAC:				; DATA XREF: h+6E30?o
00014CB8 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
00014CBE 4A28 001D                  		tst.b	$1D(a0)
00014CC2 6600                       		bne.s	loc_1DE28
00014CC4 316A 0008 0008             		move	8(a2),8(a0)
00014CCA 117C 0000 0022             		move.b	#0,$22(a0)
00014CD0 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014CD6 6000                       		bra.s	loc_1DE28
00014CD8                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014CD8                            
00014CD8                            loc_1DDCC:				; DATA XREF: h+6E30?o
00014CD8                            ;		cmp.b	#$C,$28(a2)
00014CD8                            ;		bcs.s	loc_1DE3E
00014CD8 0C2A 0004 0024             		cmp.b	#4,$24(a2)
00014CDE 6400                       		bcc.s	loc_1DE3E
00014CE0 4A2A 0039                  		tst.b	$39(a2)
00014CE4 6700                       		beq.s	loc_1DE3E
00014CE6 316A 0008 0008             		move	8(a2),8(a0)
00014CEC 316A 000C 000C             		move	$C(a2),$C(a0)
00014CF2 116A 0022 0022             		move.b	$22(a2),$22(a0)
00014CF8 0228 0001 0022             		and.b	#1,$22(a0)
00014CFE 4A28 0034                  		tst.b	$34(a0)
00014D02 6700                       		beq.s	loc_1DE06
00014D04 5968 000C                  		sub	#4,$C(a0)
00014D08                            
00014D08                            loc_1DE06:				; CODE XREF: h+6E8A?j
00014D08 4A28 001D                  		tst.b	$1D(a0)
00014D0C 6600                       		bne.s	loc_1DE28
00014D0E 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014D14 4A6A 0002                  		tst	2(a2)
00014D18 6A00                       		bpl.s	loc_1DE28
00014D1A 0068 8000 0002             		or	#-$8000,2(a0)
00014D20                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014D20                            
00014D20                            loc_1DE20:				; DATA XREF: h+6E30?o
00014D20                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
00014D20 43F9 0000 0000             		lea	(off_1DF38).l,a1
00014D26 4EB9 0000 C574             		jsr	AnimateSprite
00014D2C 6100 0000                  		bsr.w	loc_1DEE4
00014D30 4EFA A788                  		jmp	DisplaySprite
00014D34                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014D34                            
00014D34                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
00014D34 117C 0000 001C             		move.b	#0,$1C(a0)
00014D3A 4E75                       		rts	
00014D3C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014D3C                            
00014D3C                            loc_1DE46:				; DATA XREF: h+6DBA?o
00014D3C 6000 A7BC                  		bra.w	DeleteObject
00014D40                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014D40                            
00014D40                            
00014D40                            
00014D40                            loc_1DE4A:
00014D40 3468 003E                  	movea.w	$3E(a0),a2
00014D44 7210                       	moveq	#$10,d1
00014D46 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
00014D4C 6700                       	beq.s	loc_1DE64
00014D4E 7206                       	moveq	#$6,d1
00014D50 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
00014D56 6700                       	beq.s	loc_1DE64
00014D58 117C 0002 0024             	move.b	#2,$24(a0)
00014D5E 117C 0000 0032             	move.b	#0,$32(a0)
00014D64 4E75                       	rts
00014D66                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014D66                            
00014D66                            loc_1DE64:				; CODE XREF: h+6EE0?j
00014D66 5328 0032                  		subq.b	#1,$32(a0)
00014D6A 6A00                       		bpl.s	loc_1DEE0
00014D6C 117C 0003 0032             		move.b	#3,$32(a0)
00014D72 4EBA ACE0                  		jsr	FindFreeObj
00014D76 6600                       		bne.s	loc_1DEE0
00014D78 1290                       		move.b	0(a0),0(a1)
00014D7A 336A 0008 0008             		move	8(a2),8(a1)
00014D80 336A 000C 000C             		move	$C(a2),$C(a1)
00014D86 4A28 0034                  		tst.b	$34(a0)
00014D8A 6700                       		beq.s	loc_1DE9A
00014D8C 5941                       		sub	#4,d1
00014D8E                            
00014D8E                            loc_1DE9A:				; CODE XREF: h+6F1E?j
00014D8E D369 000C                  		add	d1,$C(a1)
00014D92 137C 0000 0022             		move.b	#0,$22(a1)
00014D98 137C 0003 001C             		move.b	#3,$1C(a1)
00014D9E 5429 0024                  		addq.b	#2,$24(a1)
00014DA2 2368 0004 0004             		move.l	4(a0),4(a1)
00014DA8 1368 0001 0001             		move.b	1(a0),1(a1)
00014DAE 337C 0080 0018             		move.w	#$80,obPriority(a1)
00014DB4 137C 0004 0014             		move.b	#4,obActWid(a1)
00014DBA 3368 0002 0002             		move	2(a0),2(a1)
00014DC0 3368 003E 003E             		move	$3E(a0),$3E(a1)
00014DC6 0269 7FFF 0002             		and	#$7FFF,2(a1)
00014DCC 4A6A 0002                  		tst	2(a2)
00014DD0 6A00                       		bpl.s	loc_1DEE0
00014DD2 0069 8000 0002             		or	#-$8000,2(a1)
00014DD8                            
00014DD8                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
00014DD8 6100                       		bsr.s	loc_1DEE4
00014DDA 4E75                       		rts	
00014DDC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014DDC                            
00014DDC                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
00014DDC 7000                       		moveq	#0,d0
00014DDE 1028 001A                  		move.b	$1A(a0),d0
00014DE2 B028 0030                  		cmp.b	$30(a0),d0
00014DE6 6700 0000                  		beq.w	locret_1DF36
00014DEA 1140 0030                  		move.b	d0,$30(a0)
00014DEE 45F9 0000 0000             		lea	(off_1E074).l,a2
00014DF4 D040                       		add	d0,d0
00014DF6 D4F2 0000                  		add	(a2,d0.w),a2
00014DFA 3A1A                       		move	(a2)+,d5
00014DFC 5345                       		subq	#1,d5
00014DFE 6B00 0000                  		bmi.w	locret_1DF36
00014E02 3828 003C                  		move $3C(a0),d4
00014E06                            
00014E06                            loc_1DF0A:				; CODE XREF: h+6FBE?j
00014E06 7200                       		moveq	#0,d1
00014E08 321A                       		move	(a2)+,d1
00014E0A 3601                       		move	d1,d3
00014E0C E04B                       		lsr.w	#8,d3
00014E0E 0243 00F0                  		and	#$F0,d3	; 'ð'
00014E12 0643 0010                  		add	#$10,d3
00014E16 0241 0FFF                  		and	#$FFF,d1
00014E1A EB89                       		lsl.l	#5,d1
00014E1C 0681 0000 0000             		add.l	#Art_Dust,d1
00014E22 3404                       		move	d4,d2
00014E24 D843                       		add	d3,d4
00014E26 D843                       		add	d3,d4
00014E28 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
00014E2E 51CD FFD6                  		dbf	d5,loc_1DF0A
00014E32 4E75                           rts
00014E34                            
00014E34                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
00014E34 4E75                       		rts	
00014E36                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014E36 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
00014E38 0000                       		dc byte_1DF43-off_1DF38; 1
00014E3A 0000                       		dc byte_1DF4F-off_1DF38; 2
00014E3C 0000                       		dc byte_1DF58-off_1DF38; 3
00014E3E 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
00014E41 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
00014E4D 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
00014E56 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
00014E5C                            ; -------------------------------------------------------------------------------
00014E5C                            ; Unknown Sprite Mappings
00014E5C                            ; -------------------------------------------------------------------------------
00014E5C                            MapUnc_1DF5E:
00014E5C 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
00014E5E 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
00014E60 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
00014E62 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
00014E64 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
00014E66 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
00014E68 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
00014E6A 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
00014E6C 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
00014E6E 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
00014E70 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
00014E72 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
00014E74 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
00014E76 0000                       	dc word_1E004-MapUnc_1DF5E; 13
00014E78 0000                       	dc word_1E016-MapUnc_1DF5E; 14
00014E7A 0000                       	dc word_1E028-MapUnc_1DF5E; 15
00014E7C 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
00014E7E 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
00014E80 0000                       	dc word_1E056-MapUnc_1DF5E; 18
00014E82 0000                       	dc word_1E060-MapUnc_1DF5E; 19
00014E84 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
00014E86 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
00014E88 00                         word_1DF8A:	dc.b 0
00014E89 01                         word_1DF8C:	dc.b 1
00014E8A F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014E8F 01                         word_1DF96:	dc.b 1
00014E90 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014E95 01                         word_1DFA0:	dc.b 1
00014E96 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014E9B 01                         word_1DFAA:	dc.b 1
00014E9C E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014EA1 01                         word_1DFB4:	dc.b 1
00014EA2 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014EA7 01                         word_1DFBE:	dc.b 1
00014EA8 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014EAD 01                         word_1DFC8:	dc.b 1
00014EAE F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014EB3 01                         word_1DFD2:	dc.b 1
00014EB4 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014EB9 01                         word_1DFDC:	dc.b 1
00014EBA F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014EBF 01                         word_1DFE6:	dc.b 1
00014EC0 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014EC5 01                         word_1DFF0:	dc.b 1
00014EC6 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014ECB 01                         word_1DFFA:	dc.b 1
00014ECC 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014ED1 02                         word_1E004:	dc.b 2
00014ED2 F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
00014ED7 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
00014EDC 02                         word_1E016:	dc.b 2
00014EDD F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
00014EE2 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
00014EE7 02                         word_1E028:	dc.b 2
00014EE8 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00014EED 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00014EF2 02                         word_1E03A:	dc.b 2
00014EF3 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00014EF8 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00014EFD 01                         word_1E04C:	dc.b 1
00014EFE F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00014F03 01                         word_1E056:	dc.b 1
00014F04 F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
00014F09 01                         word_1E060:	dc.b 1
00014F0A F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
00014F0F 01                         word_1E06A:	dc.b 1
00014F10 F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
00014F15 00                         	dc.b 0
00014F16 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
00014F18 0000                       	dc word_1E0A2-off_1E074; 1
00014F1A 0000                       	dc word_1E0A6-off_1E074; 2
00014F1C 0000                       	dc word_1E0AA-off_1E074; 3
00014F1E 0000                       	dc word_1E0AE-off_1E074; 4
00014F20 0000                       	dc word_1E0B2-off_1E074; 5
00014F22 0000                       	dc word_1E0B6-off_1E074; 6
00014F24 0000                       	dc word_1E0BA-off_1E074; 7
00014F26 0000                       	dc word_1E0BE-off_1E074; 8
00014F28 0000                       	dc word_1E0C2-off_1E074; 9
00014F2A 0000                       	dc word_1E0C6-off_1E074; 10
00014F2C 0000                       	dc word_1E0CA-off_1E074; 11
00014F2E 0000                       	dc word_1E0CE-off_1E074; 12
00014F30 0000                       	dc word_1E0D2-off_1E074; 13
00014F32 0000                       	dc word_1E0D8-off_1E074; 14
00014F34 0000                       	dc word_1E0DE-off_1E074; 15
00014F36 0000                       	dc word_1E0E4-off_1E074; 16
00014F38 0000                       	dc word_1E0EA-off_1E074; 17
00014F3A 0000                       	dc word_1E0EA-off_1E074; 18
00014F3C 0000                       	dc word_1E0EA-off_1E074; 19
00014F3E 0000                       	dc word_1E0EA-off_1E074; 20
00014F40 0000                       	dc word_1E0EC-off_1E074; 21
00014F42 0000                       word_1E0A0:	dc 0
00014F44 0001                       word_1E0A2:	dc 1
00014F46 7000                       	dc $7000
00014F48 0001                       word_1E0A6:	dc 1
00014F4A F008                       	dc $F008
00014F4C 0001                       word_1E0AA:	dc 1
00014F4E F018                       	dc $F018
00014F50 0001                       word_1E0AE:	dc 1
00014F52 F028                       	dc $F028
00014F54 0001                       word_1E0B2:	dc 1
00014F56 F038                       	dc $F038
00014F58 0001                       word_1E0B6:	dc 1
00014F5A F048                       	dc $F048
00014F5C 0001                       word_1E0BA:	dc 1
00014F5E 7058                       	dc $7058
00014F60 0001                       word_1E0BE:	dc 1
00014F62 7060                       	dc $7060
00014F64 0001                       word_1E0C2:	dc 1
00014F66 7068                       	dc $7068
00014F68 0001                       word_1E0C6:	dc 1
00014F6A 7070                       	dc $7070
00014F6C 0001                       word_1E0CA:	dc 1
00014F6E 7078                       	dc $7078
00014F70 0001                       word_1E0CE:	dc 1
00014F72 7080                       	dc $7080
00014F74 0002                       word_1E0D2:	dc 2
00014F76 1088                       	dc $1088
00014F78 708A                       	dc $708A
00014F7A 0002                       word_1E0D8:	dc 2
00014F7C 3092                       	dc $3092
00014F7E 7096                       	dc $7096
00014F80 0002                       word_1E0DE:	dc 2
00014F82 509E                       	dc $509E
00014F84 70A4                       	dc $70A4
00014F86 0002                       word_1E0E4:	dc 2
00014F88 50AC                       	dc $50AC
00014F8A 70B2                       	dc $70B2
00014F8C 0000                       word_1E0EA:	dc 0
00014F8E 0001                       word_1E0EC:	dc 1
00014F90 F0BA                       	dc $F0BA
00014F92                            	even
00014F92                            
00014F92                            ; ===========================================================================
00014F92                            
00014F92                            LoadPlayerPal:
00014F92 7000                       		moveq	#0,d0
00014F94 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
00014F98 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
00014F9C 4E75                       		rts
00014F9E                            
00014F9E                            	@palLUT:
00014F9E 0316 1718 19               		dc.b	palid_Sonic, palid_Sonic2, palid_Sonic3, palid_Sonic4, palid_Sonic5
00014FA3 1A1B 1C1D 1E1F             		dc.b	palid_Sonic6, palid_Sonic7, palid_Sonic8, palid_Sonic9, palid_Sonic10, palid_Sonic11
00014FAA 00                         		even
00014FAA                            
00014FAA                            LoadPlayerWaterPal:
00014FAA 7000                       		moveq	#0,d0
00014FAC 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
00014FB0 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
00014FB4 4E75                       		rts
00014FB6                            
00014FB6                            	@palLUT:
00014FB6 1020 2122 23               		dc.b	palid_SBZ3SonWat, palid_SonWater2, palid_SonWater3, palid_SonWater4, palid_SonWater5
00014FBB 2425 2627 2829             		dc.b	palid_SonWater6, palid_SonWater7, palid_SonWater8, palid_SonWater9, palid_SonWater10, palid_SonWater11
00014FC2 00                         		even
00014FC2                            
00014FC2                            LoadLifeIcon:
00014FC2 7000                       		moveq	#0,d0
00014FC4 3038 FE10                  		move.w	(v_zone).w,d0	
00014FC8 E418                       		ror.b	#2,d0
00014FCA EC48                               lsr.w 	#6,d0		
00014FCC 103B 0000                  		move.b	LoadLifeIcon_Table(pc,d0.w),d0	
00014FD0 4EB8 173A                  		jsr		AddPLC	
00014FD4 4E75                       		rts
00014FD6                            
00014FD6                            LoadLifeIcon_Table:
00014FD6                            		; GHZ
00014FD6 00                         		dc.b	plcid_LifeIcon
00014FD7 00                         		dc.b	plcid_LifeIcon
00014FD8 00                         		dc.b	plcid_LifeIcon	
00014FD9 00                         		dc.b	plcid_LifeIcon	
00014FDA                            		; LZ
00014FDA 00                         		dc.b	plcid_LifeIcon
00014FDB 00                         		dc.b	plcid_LifeIcon
00014FDC 00                         		dc.b	plcid_LifeIcon	
00014FDD 00                         		dc.b	plcid_LifeIconF	
00014FDE                            		; MZ
00014FDE 00                         		dc.b	plcid_LifeIconF
00014FDF 00                         		dc.b	plcid_LifeIconF
00014FE0 00                         		dc.b	plcid_LifeIconF
00014FE1 00                         		dc.b	plcid_LifeIconF
00014FE2                            		; SLZ
00014FE2 00                         		dc.b	plcid_LifeIcon
00014FE3 00                         		dc.b	plcid_LifeIcon
00014FE4 00                         		dc.b	plcid_LifeIcon	
00014FE5 00                         		dc.b	plcid_LifeIcon	
00014FE6                            		; SYZ
00014FE6 00                         		dc.b	plcid_LifeIconF
00014FE7 00                         		dc.b	plcid_LifeIconF
00014FE8 00                         		dc.b	plcid_LifeIconF
00014FE9 00                         		dc.b	plcid_LifeIconF	
00014FEA                            		; SBZ
00014FEA 00                         		dc.b	plcid_LifeIconF
00014FEB 00                         		dc.b	plcid_LifeIconF
00014FEC 00                         		dc.b	plcid_LifeIconF
00014FED 00                         		dc.b	plcid_LifeIconF	
00014FEE                            		even
00014FEE                            
00014FEE                            ; ---------------------------------------------------------------------------
00014FEE                            ; Object 01 - Sonic
00014FEE                            ; ---------------------------------------------------------------------------
00014FEE                            
00014FEE                            SonicPlayer:
00014FEE 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00014FF2 6700                       		beq.s	Sonic_Normal	; if not, branch
00014FF4 4EF9 0000 0000             		jmp	(DebugMode).l
00014FFA                            ; ===========================================================================
00014FFA                            
00014FFA                            Sonic_Normal:
00014FFA 7000                       		moveq	#0,d0
00014FFC 1028 0024                  		move.b	obRoutine(a0),d0
00015000 323B 0000                  		move.w	Sonic_Index(pc,d0.w),d1
00015004 4EFB 1000                  		jmp	Sonic_Index(pc,d1.w)
00015008                            ; ===========================================================================
00015008 0000                       Sonic_Index:	dc.w Sonic_Main-Sonic_Index
0001500A 0000                       		dc.w Sonic_Control-Sonic_Index
0001500C 0000                       		dc.w Sonic_Hurt-Sonic_Index
0001500E 0000                       		dc.w Sonic_Death-Sonic_Index
00015010 0000                       		dc.w Sonic_ResetLevel-Sonic_Index
00015012                            ; ===========================================================================
00015012                            
00015012                            Sonic_Main:	; Routine 0
00015012 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
00015018 5428 0024                  		addq.b	#2,obRoutine(a0)
0001501C 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015022 117C 0009 0017             		move.b	#9,obWidth(a0)
00015028 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00015030 317C 0780 0002             		move.w	#$780,obGfx(a0)
00015036 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001503C 117C 0018 0014             		move.b	#$18,obActWid(a0)
00015042 117C 0004 0001             		move.b	#4,obRender(a0)
00015048 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; Sonic's top speed
0001504E 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; Sonic's acceleration
00015054 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; Sonic's deceleration
0001505A 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
00015060                            
00015060                            Sonic_Control:    ; Routine 2
00015060 4A38 FF8B                   		tst.b	($FFFFFF8B).w
00015064 6700 0000                  		beq.w	@cont    
00015068 6100                       		bsr.s    Sonic_PanCamera    ; ++add this++
0001506A                             
0001506A                            	@cont: 
0001506A 4A78 FFFA                  		tst.w    (f_debugmode).w    ; is debug cheat enabled?
0001506E 6700                       		beq.s    loc_12C58    ; if not, branch
00015070 0838 0004 F605             		btst    #bitB,(v_jpadpress1).w ; is button B pressed?
00015076 6700                       		beq.s    loc_12C58    ; if not, branch
00015078 31FC 0001 FE08             		move.w    #1,(v_debuguse).w ; change Sonic into a ring/item
0001507E 4238 F7CC                  		clr.b    (f_lockctrl).w
00015082 4E75                       		rts
00015084                            		
00015084                            		include    "_incObj\Sonic PanCamera.asm"    ; ++add this++
00015084                            ; ---------------------------------------------------------------------------
00015084                            ; Subroutine to    horizontally pan the camera view ahead of the player
00015084                            ; (Ported from the US version of Sonic CD's "R11A__.MMD" by Nat The Porcupine)
00015084                            ; ---------------------------------------------------------------------------
00015084                            
00015084                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00015084                            
00015084                            
00015084                            Sonic_PanCamera:
00015084 3238 F7A0                          move.w    (v_camera_pan).w,d1        ; get the current camera pan value
00015088 3028 0020                          move.w    obInertia(a0),d0        ; get sonic's inertia
0001508C 6A00                               bpl.s    @abs_inertia            ; if sonic's inertia is positive, branch ahead
0001508E 4440                               neg.w    d0                        ; otherwise, we negate it to get the absolute value
00015090                            
00015090                                @abs_inertia:
00015090                            
00015090                            ; These lines were intended to prevent the Camera from panning while
00015090                            ; going up the very first giant ramp in Palmtree Panic Zone Act 1.
00015090                            ; However, given that no such object exists in Sonic 1, I just went
00015090                            ; ahead and commented these out.
00015090                                    ;tst.b	($FFFFF5C2).w               ; is sonic going up a giant ramp in PPZ?
00015090                                   ; bne.s	@reset_pan                   ; if not, branch
00015090                                    ;cmpi.w 	#$1B00,obX(a0)            ; is sonic's x position lower than $1B00?
00015090                                    ;bcs.s    @reset_pan                ; if so, branch
00015090                            
00015090                            ; These lines aren't part of the original routine; I added them myself.
00015090                            ; If you've ported the Spin Dash, uncomment the following lines of code
00015090                            ; to allow the camera to pan ahead while charging the Spin Dash:
00015090 4A28 0039                          tst.b    $39(a0)                    ; is sonic charging up a spin dash?
00015094 6700                               beq.s    @skip                    ; if not, branch
00015096 0828 0000 0022                     btst    #0,obStatus(a0)            ; check the direction that sonic is facing
0001509C 6600                               bne.s    @pan_right                ; if he's facing right, pan the camera to the right
0001509E 6000                               bra.s    @pan_left                ; otherwise, pan the camera to the left
000150A0                            
000150A0                                @skip:
000150A0 0C40 0600                          cmpi.w    #$600,d0                ; is sonic's inertia greater than $600
000150A4 6500                               bcs.s    @reset_pan                ; if not, recenter the screen (if needed)
000150A6 4A68 0020                          tst.w    obInertia(a0)            ; otherwise, check the direction of inertia (by subtracting it from 0)
000150AA 6A00                               bpl.s    @pan_left                ; if the result was positive, then inertia was negative, so we pan the screen left
000150AC                            
000150AC                                @pan_right:
000150AC 5441                               addq.w    #2,d1                    ; add 2 to the pan value
000150AE 0C41 00E0                          cmpi.w    #224,d1                    ; is the pan value greater than 224 pixels?
000150B2 6500                               bcs.s    @update_pan                ; if not, branch
000150B4 323C 00E0                          move.w    #224,d1                    ; otherwise, cap the value at the maximum of 224 pixels
000150B8 6000                               bra.s    @update_pan                ; branch
000150BA                            ; ---------------------------------------------------------------------------
000150BA                            
000150BA                                @pan_left:
000150BA 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
000150BC 0C41 0060                          cmpi.w    #96,d1                    ; is the pan value less than 96 pixels?
000150C0 6400                               bcc.s    @update_pan                ; if not, branch
000150C2 323C 0060                          move.w    #96,d1                    ; otherwise, cap the value at the minimum of 96 pixels
000150C6 6000                               bra.s    @update_pan                ; branch
000150C8                            ; ---------------------------------------------------------------------------
000150C8                            
000150C8                                @reset_pan:
000150C8 0C41 00A0                          cmpi.w    #160,d1                    ; is the pan value 160 pixels?
000150CC 6700                               beq.s    @update_pan                ; if so, branch
000150CE 6400                               bcc.s    @reset_left                ; otherwise, branch if it greater than 160
000150D0                                 
000150D0                                @reset_right:
000150D0 5441                               addq.w    #2,d1                    ; add 2 to the pan value
000150D2 6000                               bra.s    @update_pan                ; branch
000150D4                            ; ---------------------------------------------------------------------------
000150D4                            
000150D4                                @reset_left:
000150D4 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
000150D6                            
000150D6                                @update_pan:
000150D6 31C1 F7A0                          move.w    d1,(v_camera_pan).w        ; update the camera pan value
000150DA 4E75                               rts                                ; return
000150DC                                 
000150DC                            ; End of function Sonic_PanCamera
000150DC                            
000150DC                            
000150DC                            ; ===========================================================================
000150DC                            
000150DC                            loc_12C58:
000150DC 4A38 F7CC                  		tst.b	(f_lockctrl).w	; are controls locked?
000150E0 6600                       		bne.s	loc_12C64	; if yes, branch
000150E2 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w ; enable joypad control
000150E8                            
000150E8                            loc_12C64:
000150E8 0838 0000 F7C8             		btst	#0,(f_lockmulti).w ; are controls locked?
000150EE 6600                       		bne.s	loc_12C7E	; if yes, branch
000150F0 7000                       		moveq	#0,d0
000150F2 1028 0022                  		move.b	obStatus(a0),d0
000150F6 0240 0006                  		andi.w	#6,d0
000150FA 323B 0000                  		move.w	Sonic_Modes(pc,d0.w),d1
000150FE 4EBB 1000                  		jsr	Sonic_Modes(pc,d1.w)
00015102                            
00015102                            loc_12C7E:
00015102 6100                       		bsr.s	Sonic_Display
00015104 6100 0000                  		bsr.w	Sonic_RecordPosition
00015108 6100 0000                  		bsr.w	Sonic_Water
0001510C 1178 F768 0036             		move.b	(v_anglebuffer).w,$36(a0)
00015112 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00015118 4A38 F7C7                  		tst.b	(f_wtunnelmode).w
0001511C 6700                       		beq.s	loc_12CA6
0001511E 4A28 001C                  		tst.b	obAnim(a0)
00015122 6600                       		bne.s	loc_12CA6
00015124 1168 001D 001C             		move.b	obNextAni(a0),obAnim(a0)
0001512A                            
0001512A                            loc_12CA6:
0001512A 6100 0000                  		bsr.w	Sonic_Animate
0001512E 4A38 F7C8                  		tst.b	(f_lockmulti).w
00015132 6B00                       		bmi.s	loc_12CB6
00015134 4EB9 0000 0000             		jsr	(ReactToItem).l
0001513A                            
0001513A                            loc_12CB6:
0001513A 6100 0000                  		bsr.w	Sonic_Loops
0001513E 6100 0000                  		bsr.w	Sonic_LoadGfx
00015142 4E75                       		rts	
00015144                            ; ===========================================================================
00015144 0000                       Sonic_Modes:	dc.w Sonic_MdNormal-Sonic_Modes
00015146 0000                       		dc.w Sonic_MdJump-Sonic_Modes
00015148 0000                       		dc.w Sonic_MdRoll-Sonic_Modes
0001514A 0000                       		dc.w Sonic_MdJump2-Sonic_Modes
0001514C                            ; ---------------------------------------------------------------------------
0001514C                            ; Music	to play	after invincibility wears off
0001514C                            ; ---------------------------------------------------------------------------
0001514C                            MusicList2:
0001514C 00                         		dc.b bgm_GHZ
0001514D 00                         		dc.b bgm_LZ
0001514E 00                         		dc.b bgm_MZ
0001514F 00                         		dc.b bgm_SLZ
00015150 00                         		dc.b bgm_SYZ
00015151 00                         		dc.b bgm_SBZ
00015152                            		; The ending doesn't get an entry
00015152                            		even
00015152                            
00015152                            		include	"_incObj\Sonic Display.asm"
00015152                            ; ---------------------------------------------------------------------------
00015152                            ; Subroutine to display Sonic and set music
00015152                            ; ---------------------------------------------------------------------------
00015152                            
00015152                            Sonic_Display:
00015152 3028 0030                  		move.w    flashtime(a0),d0
00015156 6700                       		beq.s    @showAfterImage
00015158 5368 0030                  		subq.w    #1,flashtime(a0)
0001515C E648                               	lsr.w    #3,d0
0001515E 6400                               	bcc.s    @chkinvincible
00015160                            
00015160                            	@showAfterImage:
00015160 3028 0020                          	move.w    obInertia(a0),d0            ; get inertia
00015164 4A40                       		tst.w    d0                    ; is inertia greater than 0?
00015166 6C00                       		bge.s    @AfterImage_Start    ; if yes, don't negate it
00015168 4440                       		neg        d0                    ; if not, negate it
0001516A                            
0001516A                            	@AfterImage_Start:        
0001516A 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
0001516E 6700                       		beq.s	@display	; if not, don't show the After Image
00015170                            		;cmpi.w    #$900,d0	; is the sonic inertia greater than A00?
00015170                            		;blt.s    @display	; if not, don't show the After Image
00015170                            	
00015170                            	@AfterImage_Start2:    
00015170 6100 A8E2                          	bsr.w    FindFreeObj    ; search a free space in object RAM
00015174 6600                               	bne.s    @display    ; if not have, don't load the After Image
00015176 12BC 0010                          	move.b  #$10,0(a1)        ; load after-image object
0001517A 2368 0004 0004                     	move.l    obMap(a0),obMap(a1)        ; copy Sonic mappings to after-image mappings
00015180 3368 0008 0008                     	move.w    obX(a0),obX(a1)        ; copy Sonic x-pos to after-image x-pos
00015186 3368 000C 000C                     	move.w    obY(a0),obY(a1)    ; copy Sonic y-pos to after-image y-pos
0001518C                            
0001518C                                	@display:
0001518C 4EB9 0000 F4BA                     	jsr    (DisplaySprite).l
00015192                            
00015192                            	@chkinvincible:
00015192 4A38 FE2D                  		tst.b	(v_invinc).w	; does Sonic have invincibility?
00015196 6700                       		beq.s	@chkshoes	; if not, branch
00015198 4A68 0032                  		tst.w	invtime(a0)	; check	time remaining for invinciblity
0001519C 6700                       		beq.s	@chkshoes	; if no	time remains, branch
0001519E 5368 0032                  		subq.w	#1,invtime(a0)	; subtract 1 from time
000151A2 6600                       		bne.s	@chkshoes
000151A4 4A38 F7AA                  		tst.b	(f_lockscreen).w
000151A8 6600                       		bne.s	@removeinvincible
000151AA 0C78 000C FE14             		cmpi.w	#$C,(v_air).w
000151B0 6500                       		bcs.s	@removeinvincible	
000151B2 0C38 0001 F7AA             		cmpi.b	#$1,(f_lockscreen).w	
000151B8 6700                       		beq.s	@removeinvincible	
000151BA 0C38 0001 FE2E             		cmpi.b	#$1,(v_shoes).w	; does Sonic have speed shoes?
000151C0 6600                       		bne.s	@haveshoes	; if no, branch, and load regular stage music
000151C2 103C 008B                  		move.b	#$8B,d0		; if yes, load regular speed shoes music
000151C6 6000                       		bra.s	@playtune
000151C8                            		
000151C8                            @haveshoes:		
000151C8 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
000151CC                            
000151CC                            @playtune: 
000151CC 4EB9 0000 129A             		jsr	(PlaySound).l    ; play normal music
000151D2                            
000151D2                            	@removeinvincible:
000151D2 11FC 0000 FE2D             		move.b	#0,(v_invinc).w ; cancel invincibility
000151D8                            
000151D8                            	@chkshoes:
000151D8 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
000151DC 6700                       		beq.s	@exit		; if not, branch
000151DE 4A68 0034                  		tst.w	shoetime(a0)	; check	time remaining
000151E2 6700                       		beq.s	@exit
000151E4 5368 0034                  		subq.w	#1,shoetime(a0)	; subtract 1 from time
000151E8 6600                       		bne.s	@exit
000151EA 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
000151F0 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
000151F6 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
000151FC 11FC 0000 FE2E             		move.b	#0,(v_shoes).w	; cancel speed shoes
00015202 0C38 0001 F7AA             		cmpi.b	#$1,(f_lockscreen).w	
00015208 6700                       		beq.s	@exit
0001520A 0C38 0001 FE2D             		cmpi.b	#$1,($FFFFFE2D).w	; does Sonic have invincibility?
00015210 6600                       		bne.s	@isinvincible	; if no, branch, and load regular stage music
00015212 103C 0087                  		move.b	#$87,d0		; if yes, load regular invincibility music
00015216 6000                       		bra.b	@playtune2
00015218                            @isinvincible:		
00015218 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
0001521C                            @playtune2:
0001521C 4EB9 0000 129A             		jsr	(PlaySound).l    ; play normal music
00015222                            		
00015222                            	@exit:
00015222 4E75                       		rts	
00015222 4E75                       		rts	
00015224                            		include	"_incObj\Sonic RecordPosition.asm"
00015224                            ; ---------------------------------------------------------------------------
00015224                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00015224                            ; ---------------------------------------------------------------------------
00015224                            
00015224                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015224                            
00015224                            
00015224                            Sonic_RecordPosition:
00015224 3038 F7A8                  		move.w	(v_trackpos).w,d0
00015228 43F8 CB00                  		lea	(v_tracksonic).w,a1
0001522C 43F1 0000                  		lea	(a1,d0.w),a1
00015230 32E8 0008                  		move.w	obX(a0),(a1)+
00015234 32E8 000C                  		move.w	obY(a0),(a1)+
00015238 5838 F7A9                  		addq.b	#4,(v_trackbyte).w
0001523C 4E75                       		rts	
0001523E                            ; End of function Sonic_RecordPosition
0001523E                            ; End of function Sonic_RecordPosition
0001523E                            		include	"_incObj\Sonic Water.asm"
0001523E                            ; ---------------------------------------------------------------------------
0001523E                            ; Subroutine for Sonic when he's underwater
0001523E                            ; ---------------------------------------------------------------------------
0001523E                            
0001523E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001523E                            
0001523E                            
0001523E                            Sonic_Water:
0001523E 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w	;TIS is level MZ?
00015244 6700                       		beq.s	WaterTagforMZ	; if yes, branch
00015246 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level LZ?
0001524C 6700                       		beq.s	Sonic_Water_LZ	; if yes, branch
0001524E                            
0001524E                            	Sonic_Water_Exit:
0001524E 4E75                       		rts	
00015250                            ; ===========================================================================
00015250                            
00015250                            	Sonic_Water_LZ:
00015250 3038 F646                  		move.w	(v_waterpos1).w,d0
00015254 B068 000C                  		cmp.w	obY(a0),d0	; is Sonic above the water?
00015258 6C00 0000                  		bge.w	Abovewater	; if yes, branch
0001525C 6000 0000                  		bra	WaterStatus
00015260                            	WaterTagforMZ:
00015260 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
00015266 6700 0000                  		beq.w	Abovewater	; if yes, branch
0001526A                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0001526A                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
0001526A                                ;    	lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0001526A                            	;	jsr	Palload_Loop
0001526A                            	WaterStatus:
0001526A 08E8 0006 0022             		bset	#6,obStatus(a0)
00015270 6600 FFDC                  		bne.w	Sonic_Water_Exit
00015274 6100 0000                  		bsr.w	ResumeMusic
00015278 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
0001527E 11FC 000A D340             		move.b	#id_DrownCount,(v_objspace+$340).w ; load bubbles object from Sonic's mouth
00015284 11FC 0081 D368             		move.b	#$81,(v_objspace+$340+obSubtype).w
0001528A 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w ; change Sonic's top speed
00015290 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w ; change Sonic's acceleration
00015296 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w ; change Sonic's deceleration
0001529C E0E8 0010                  		asr	obVelX(a0)
000152A0 E0E8 0012                  		asr	obVelY(a0)
000152A4 E0E8 0012                  		asr	obVelY(a0)	; slow Sonic
000152A8 6700 FFA4                  		beq.w	Sonic_Water_Exit		; branch if Sonic stops moving
000152AC                            		;move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000152AC 31FC 0100 D1DC                     	move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
000152BC 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
000152C2 6600 0000                  		bne.w	@return
000152C6                            		
000152C6                            		
000152C6                            	@return:
000152C6 4E75                       		rts
000152C8                            ; ===========================================================================
000152C8                            
000152C8                            Abovewater:
000152C8 08A8 0006 0022             		bclr	#6,obStatus(a0)
000152CE 6700 FF7E                  		beq.w	Sonic_Water_Exit
000152D2 6100 0000                  		bsr.w	ResumeMusic
000152D6 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000152DC                            
000152DC 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
000152E2 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
000152E8 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
000152EE E1E8 0012                  		asl	obVelY(a0)
000152F2 6700 FF5A                  		beq.w	Sonic_Water_Exit
000152F6 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
000152FC 0C68 F000 0012             		cmpi.w	#-$1000,obVelY(a0)
00015302 6E00                       		bgt.s	@belowmaxspeed
00015304 317C F000 0012             		move.w	#-$1000,obVelY(a0) ; set maximum speed on leaving water
0001530A                            
0001530A                            	@belowmaxspeed:
00015314                            ; End of function Sonic_Water
00015314                            ; End of function Sonic_Water
00015314                            		include "_incObj\03 Hangable Sprite.asm"
00015314                            ; ===========================================================================
00015314                            ; ----------------------------------------------------------------------------
00015314                            ; Object 03 - Invisible sprite that you can hang on to
00015314                            ; ----------------------------------------------------------------------------
00015314                            ; Sprite_2C92C:
00015314                            Obj03:
00015314 7000                       	moveq    #0,d0
00015316 1028 0024                      move.b    obRoutine(a0),d0            ;just use s1 version of this variable
0001531A 323B 0000                      move.w    Obj03_Index(pc,d0.w),d1
0001531E 4EFB 1000                      jmp    Obj03_Index(pc,d1.w)
00015322                            ; ===========================================================================
00015322                            ; off_2C93A:
00015322                            Obj03_Index:
00015322 0000                           dc.w Obj03_Main-Obj03_Index
00015324 0000                               dc.w Obj03_Init-Obj03_Index
00015326                            ; ===========================================================================
00015326                            ; loc_2C93E:
00015326                            Obj03_Init:
00015326 5428 0024                      addq.b    #2,obRoutine(a0)        ;just use s1 version of this variable
0001532A 117C 0004 0001                 move.b    #4,obRender(a0)    ;just use s1 version of this variable
00015330 117C 0018 0014                 move.b    #$18,obActWid(a0)    ;just use s1 version of this variable
00015336 317C 0200 0018                 move.w    #$200,obPriority(a0)            ;just use s1 version of this variable
0001533C                            ; loc_2C954:
0001533C                            Obj03_Main:
0001533C 45E8 0030                      lea    $30(a0),a2
00015340 43F8 D000                      lea    (v_player).w,a1 ; a1=character
00015344 3038 F604                      move.w    (v_jpadhold1).w,d0 			;S1 has same ram address for controller as S2 just different variable name like on the line above
00015348 6100                           bsr.s    Obj03_Check
0001534A                            ;    lea    (Sidekick).w,a1 ; a1=character  ;disabled
0001534A                            ;    addq.w    #1,a2                          ;disabled
0001534A                            ;    move.w    (Ctrl_2).w,d0                    ;disabled
0001534A                            ;    bsr.s    Obj03_Check         	;disabled
0001534A 4EF9 0000 0000             	jmp		bonu_chkdel
00015350                            ; ===========================================================================
00015350                            ; loc_2C972:
00015350                            Obj03_Check:
00015350 4A12                       		tst.b	(a2)
00015352 6700                       		beq.s	loc_2C9A0
00015354 0200 0070                  		andi.b	#btnABC,d0
00015358 6700 0000                  		beq.w	Obj03_Check_End
0001535C 4238 F7C8                  		clr.b	f_lockmulti.w
00015360 4212                       		clr.b	(a2)
00015362 157C 0012 0002             		move.b	#$12,2(a2)
00015368 0240 0F00                  		andi.w	#$F00,d0
0001536C 6700                       		beq.s	loc_2C954
0001536E 157C 003C 0002             		move.b	#$3C,2(a2)
00015374                            	
00015374                            loc_2C954:
00015374 337C FD00 0012             		move.w	#-$300,y_vel(a1)
0001537A 6000 0000                  		bra.w	Obj03_Check_End
0001537E                            ; ===========================================================================
0001537E                            
0001537E                            loc_2C9A0:
0001537E 4A2A 0002                  		tst.b	2(a2)
00015382 6700                       		beq.s	loc_2C972
00015384 532A 0002                  		subq.b	#1,2(a2)
00015388 6600 0000                  		bne.w	Obj03_Check_End
0001538C                            
0001538C                            loc_2C972:
0001538C 3029 0008                  		move.w	obX(a1),d0
00015390 9068 0008                  		sub.w	obX(a0),d0
00015394 0640 0018                  		addi.w	#$18,d0
00015398 0C40 0030                  		cmpi.w	#$30,d0
0001539C 6400 0000                  		bhs.w	Obj03_Check_End
000153A0 3229 000C                  		move.w	obY(a1),d1
000153A4 9268 000C                  		sub.w	obY(a0),d1
000153A8 0C41 0010                  		cmpi.w	#$10,d1
000153AC 6400 0000                  		bhs.w	Obj03_Check_End
000153B0 4A38 F7C8                  		tst.b	f_lockmulti.w
000153B4 6B00                       		bmi.s	Obj03_Check_End
000153B6 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
000153BC 6400                       		bhs.s	Obj03_Check_End
000153BE 4A78 FFFA                  		tst.w	(f_debugmode).w
000153C2 6600                       		bne.s	Obj03_Check_End
000153C4 4269 0010                  		clr.w	x_vel(a1)
000153C8 4269 0012                  		clr.w	y_vel(a1)
000153CC 4269 0020                  		clr.w	obInertia(a1)
000153D0 3368 000C 000C             		move.w	obY(a0),obY(a1)
000153D6 137C 0000 001C             		move.b	#id_Hang2,obAnim(a1)
000153DC 11FC 0001 F7C8             		move.b	#1,f_lockmulti.w
000153E2 14BC 0001                  		move.b	#1,(a2)
000153E6                            
000153E6                            ; return_2CA08:
000153E6                            Obj03_Check_End:
000153E6 4E75                       		rts
000153E6 4E75                       		rts
000153E8                            
000153E8                            ; ===========================================================================
000153E8                            ; ---------------------------------------------------------------------------
000153E8                            ; Modes	for controlling	Sonic
000153E8                            ; ---------------------------------------------------------------------------
000153E8                            
000153E8                            Sonic_MdNormal:
000153E8                            		;bsr.w	Sonic_Peelout
000153E8                            		;bsr.w	Sonic_SpinDash
000153E8 6100 0000                  		bsr.w	Sonic_Jump
000153EC 6100 0000                  		bsr.w	Sonic_SlopeResist
000153F0 6100 0000                  		bsr.w	Sonic_Move
000153F4 6100 0000                  		bsr.w	Sonic_Roll
000153F8 6100 0000                  		bsr.w	Sonic_LevelBound
000153FC 4EB9 0000 F4A6             		jsr	(SpeedToPos).l
00015402 6100 0000                  		bsr.w	Sonic_AnglePos
00015406 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001540A 4E75                       		rts	
0001540C                            
0001540C                            ; ===========================================================================
0001540C                            
0001540C                            Sonic_MdJump:
0001540C 6100 0000                  		bsr.w   Sonic_AirRoll
00015410 6100 0000                  		bsr.w	Sonic_JumpHeight
00015414 6100 0000                  		bsr.w	Sonic_JumpDirection
00015418 6100 0000                  		bsr.w	Sonic_LevelBound
0001541C 4EB9 0000 F46E             		jsr	(ObjectFall).l
00015422 0828 0006 0022             		btst	#6,obStatus(a0)
00015428 6700                       		beq.s	loc_12E5C
0001542A 0468 0028 0012             		subi.w	#$28,obVelY(a0)
00015430                            
00015430                            loc_12E5C:
00015430 6100 0000                  		bsr.w	Sonic_JumpAngle
00015434 6100 0000                  		bsr.w	Sonic_Floor
00015438 4E75                       		rts	
0001543A                            ; ===========================================================================
0001543A                            
0001543A                            Sonic_MdRoll:
0001543A 6100 0000                  		bsr.w	Sonic_Jump
0001543E 6100 0000                  		bsr.w	Sonic_RollRepel
00015442 6100 0000                  		bsr.w	Sonic_RollSpeed
00015446 6100 0000                  		bsr.w	Sonic_LevelBound
0001544A 4EB9 0000 F4A6             		jsr	(SpeedToPos).l
00015450 6100 0000                  		bsr.w	Sonic_AnglePos
00015454 6100 0000                  		bsr.w	Sonic_SlopeRepel
00015458 4E75                       		rts	
0001545A                            ; ===========================================================================
0001545A                            
0001545A                            Sonic_MdJump2:
0001545A 6100 0000                  		bsr.w	Sonic_HomingAttack
0001545E 6100 0000                  		bsr.w	Sonic_JumpHeight
00015462 6100 0000                  		bsr.w	Sonic_JumpDirection
00015466 6100 0000                  		bsr.w	Sonic_LevelBound
0001546A 4EB9 0000 F46E             		jsr	(ObjectFall).l
00015470 0828 0006 0022             		btst	#6,obStatus(a0)
00015476 6700                       		beq.s	loc_12EA6
00015478 0468 0028 0012             		subi.w	#$28,obVelY(a0)
0001547E                            
0001547E                            loc_12EA6:
0001547E 6100 0000                  		bsr.w	Sonic_JumpAngle
00015482 6100 0000                  		bsr.w	Sonic_Floor
00015486 4E75                       		rts	
00015488                            
00015488                            		include	"_incObj\Sonic Move.asm"
00015488                            ; ---------------------------------------------------------------------------
00015488                            ; Subroutine to	make Sonic walk/run
00015488                            ; ---------------------------------------------------------------------------
00015488                            
00015488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015488                            
00015488                            
00015488                            Sonic_Move:
00015488 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
0001548C 3A38 F762                  		move.w	(v_sonspeedacc).w,d5
00015490 3838 F764                  		move.w	(v_sonspeeddec).w,d4
00015494 4A38 F7CA                  		tst.b	(f_jumponly).w
00015498 6600 0000                  		bne.w	loc_12FEE
0001549C 4A68 003E                  		tst.w	$3E(a0)
000154A0 6600 0000                  		bne.w	Sonic_ResetScr
000154A4 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
000154AA 6700                       		beq.s	@notleft	; if not, branch
000154AC 6100 0000                  		bsr.w	Sonic_MoveLeft
000154B0                            
000154B0                            	@notleft:
000154B0 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
000154B6 6700                       		beq.s	@notright	; if not, branch
000154B8 6100 0000                  		bsr.w	Sonic_MoveRight
000154BC                            
000154BC                            	@notright:
000154BC 1028 0026                  		move.b	obAngle(a0),d0
000154C0 0600 0020                  		addi.b	#$20,d0
000154C4 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
000154C8 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
000154CC 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
000154D0 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
000154D4 08A8 0005 0022             		bclr	#5,obStatus(a0)
000154DA 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
000154E0 0828 0003 0022             		btst	#3,obStatus(a0)
000154E6 6700                       		beq.s	Sonic_Balance
000154E8 7000                       		moveq	#0,d0
000154EA 1028 003D                  		move.b	$3D(a0),d0
000154EE ED48                       		lsl.w	#6,d0
000154F0 43F8 D000                  		lea	(v_objspace).w,a1
000154F4 43F1 0000                  		lea	(a1,d0.w),a1
000154F8 4A29 0022                  		tst.b	obStatus(a1)
000154FC 6B00                       		bmi.s	Sonic_LookUp
000154FE 7200                       		moveq	#0,d1
00015500 1229 0014                  		move.b	obActWid(a1),d1
00015504 3401                       		move.w	d1,d2
00015506 D442                       		add.w	d2,d2
00015508 5942                       		subq.w	#4,d2
0001550A D268 0008                  		add.w	obX(a0),d1
0001550E 9269 0008                  		sub.w	obX(a1),d1
00015512 0C41 0004                  		cmpi.w	#4,d1
00015516 6D00                       		blt.s	loc_12F6A
00015518 B242                       		cmp.w	d2,d1
0001551A 6C00                       		bge.s	loc_12F5A
0001551C 6000                       		bra.s	Sonic_LookUp
0001551E                            ; ===========================================================================
0001551E                            
0001551E                            Sonic_Balance:
0001551E 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00015524 0C41 000C                  		cmpi.w	#$C,d1
00015528 6D00                       		blt.s	Sonic_LookUp
0001552A 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00015530 6600                       		bne.s	loc_12F62
00015532                            
00015532                            loc_12F5A:
00015532 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015538 6000                       		bra.s	loc_12F70
0001553A                            ; ===========================================================================
0001553A                            
0001553A                            loc_12F62:
0001553A 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00015540 6600                       		bne.s	Sonic_LookUp
00015542                            
00015542                            loc_12F6A:
00015542 08E8 0000 0022             		bset	#0,obStatus(a0)
00015548                            
00015548                            loc_12F70:
00015548 117C 0000 001C             		move.b	#id_Balance,obAnim(a0) ; use "balancing" animation
0001554E 6000 0000                  		bra.w	Sonic_ResetScr
00015552                            ; ===========================================================================
00015552                            
00015552                            Sonic_LookUp:
00015552 0838 0000 F602             		btst	#bitUp,(v_jpadhold2).w ; is up being pressed?
00015558 6700                       		beq.s	Sonic_Duck	; if not, branch
0001555A 117C 0000 001C             		move.b	#id_LookUp,obAnim(a0) ; use "looking up" animation
00015560 0C78 00C8 F73E             		cmpi.w	#$C8,(v_lookshift).w
00015566 6700                       		beq.s	loc_12FC2
00015568 5478 F73E                  		addq.w	#2,(v_lookshift).w
0001556C 6000                       		bra.s	loc_12FC2
0001556E                            ; ===========================================================================
0001556E                            
0001556E                            Sonic_Duck:
0001556E 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
00015574 6700                       		beq.s	Sonic_ResetScr	; if not, branch
00015576 117C 0000 001C             		move.b	#id_Duck,obAnim(a0) ; use "ducking" animation
0001557C 0C78 0008 F73E             		cmpi.w	#8,(v_lookshift).w
00015582 6700                       		beq.s	loc_12FC2
00015584 5578 F73E                  		subq.w	#2,(v_lookshift).w
00015588 6000                       		bra.s	loc_12FC2
0001558A                            ; =============================================
0001558A                            ; ===========================================================================
0001558A                            
0001558A                            Sonic_ResetScr:
0001558A 11FC 0000 C903             		move.b	#0,($FFFFC903).w
00015590                            		
00015590                            Sonic_ResetScr_Part2:
00015590 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00015596 6700                       		beq.s	loc_12FC2	; if yes, branch
00015598 6400                       		bcc.s	loc_12FBE
0001559A 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
0001559E                            
0001559E                            loc_12FBE:
0001559E 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000155A2                            
000155A2                            loc_12FC2:
000155A2 1038 F602                  		move.b	(v_jpadhold2).w,d0
000155A6 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	pressed?
000155AA 6600                       		bne.s	loc_12FEE	; if yes, branch
000155AC 3028 0020                  		move.w	obInertia(a0),d0
000155B0 6700                       		beq.s	loc_12FEE
000155B2 6B00                       		bmi.s	loc_12FE2
000155B4 9045                       		sub.w	d5,d0
000155B6 6400                       		bcc.s	loc_12FDC
000155B8 303C 0000                  		move.w	#0,d0
000155BC                            
000155BC                            loc_12FDC:
000155BC 3140 0020                  		move.w	d0,obInertia(a0)
000155C0 6000                       		bra.s	loc_12FEE
000155C2                            ; ===========================================================================
000155C2                            
000155C2                            loc_12FE2:
000155C2 D045                       		add.w	d5,d0
000155C4 6400                       		bcc.s	loc_12FEA
000155C6 303C 0000                  		move.w	#0,d0
000155CA                            
000155CA                            loc_12FEA:
000155CA 3140 0020                  		move.w	d0,obInertia(a0)
000155CE                            
000155CE                            loc_12FEE:
000155CE 4A28 0039                  		tst.b	$39(a0) 	;Peelout
000155D2 6600                       		bne.s	loc_1300C 	;Peelout
000155D4 1028 0026                  		move.b	obAngle(a0),d0
000155D8 4EB9 0000 3BA2             		jsr	(CalcSine).l
000155DE C3E8 0020                  		muls.w	obInertia(a0),d1
000155E2 E081                       		asr.l	#8,d1
000155E4 3141 0010                  		move.w	d1,obVelX(a0)
000155E8 C1E8 0020                  		muls.w	obInertia(a0),d0
000155EC E080                       		asr.l	#8,d0
000155EE 3140 0012                  		move.w	d0,obVelY(a0)
000155F2                            
000155F2                            loc_1300C:
000155F2 1028 0026                  		move.b	obAngle(a0),d0
000155F6 0600 0040                  		addi.b	#$40,d0
000155FA 6B00                       		bmi.s	locret_1307C
000155FC 123C 0040                  		move.b	#$40,d1
00015600 4A68 0020                  		tst.w	obInertia(a0)
00015604 6700                       		beq.s	locret_1307C
00015606 6B00                       		bmi.s	loc_13024
00015608 4441                       		neg.w	d1
0001560A                            
0001560A                            loc_13024:
0001560A 1028 0026                  		move.b	obAngle(a0),d0
0001560E D001                       		add.b	d1,d0
00015610 3F00                       		move.w	d0,-(sp)
00015612 6100 0000                  		bsr.w	Sonic_WalkSpeed
00015616 301F                       		move.w	(sp)+,d0
00015618 4A41                       		tst.w	d1
0001561A 6A00                       		bpl.s	locret_1307C
0001561C E141                       		asl.w	#8,d1
0001561E 0600 0020                  		addi.b	#$20,d0
00015622 0200 00C0                  		andi.b	#$C0,d0
00015626 6700                       		beq.s	loc_13078
00015628 0C00 0040                  		cmpi.b	#$40,d0
0001562C 6700                       		beq.s	loc_13066
0001562E 0C00 0080                  		cmpi.b	#$80,d0
00015632 6700                       		beq.s	loc_13060
00015634 D368 0010                  		add.w	d1,obVelX(a0)
00015638 08E8 0005 0022             		bset	#5,obStatus(a0)
0001563E 317C 0000 0020             		move.w	#0,obInertia(a0)
00015644 4E75                       		rts	
00015646                            ; ===========================================================================
00015646                            
00015646                            loc_13060:
00015646 9368 0012                  		sub.w	d1,obVelY(a0)
0001564A 4E75                       		rts	
0001564C                            ; ===========================================================================
0001564C                            
0001564C                            loc_13066:
0001564C 9368 0010                  		sub.w	d1,obVelX(a0)
00015650 08E8 0005 0022             		bset	#5,obStatus(a0)
00015656 317C 0000 0020             		move.w	#0,obInertia(a0)
0001565C 4E75                       		rts	
0001565E                            ; ===========================================================================
0001565E                            
0001565E                            loc_13078:
0001565E D368 0012                  		add.w	d1,obVelY(a0)
00015662                            
00015662                            locret_1307C:
00015662 4E75                       		rts	
00015664                            ; End of function Sonic_Move
00015664                            
00015664                            
00015664                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015664                            
00015664                            
00015664                            Sonic_MoveLeft:
00015664 3028 0020                  		move.w	obInertia(a0),d0
00015668 6700                       		beq.s	loc_13086
0001566A 6A00                       		bpl.s	loc_130B2
0001566C                            
0001566C                            loc_13086:
0001566C 08E8 0000 0022             		bset	#0,$22(a0)
00015672 6600                       		bne.s	loc_1309A
00015674 08A8 0005 0022             		bclr	#5,$22(a0)
0001567A 117C 0001 001D             		move.b	#1,$1D(a0)
00015680                            
00015680                            loc_1309A:
00015680 9045                       		sub.w	d5,d0
00015682 3206                       		move.w	d6,d1
00015684 4441                       		neg.w	d1
00015686 B041                       		cmp.w	d1,d0
00015688 6E00                       		bgt.s	loc_130A6
0001568A D045                       		add.w	d5,d0
0001568C B041                       		cmp.w	d1,d0
0001568E 6F00                       		ble.s	loc_130A6
00015690 3001                       		move.w	d1,d0
00015692                            
00015692                            loc_130A6:
00015692 3140 0020                  		move.w	d0,obInertia(a0)
00015696 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
0001569C 4E75                       		rts
0001569E                            ; ===========================================================================
0001569E                            
0001569E                            loc_130B2:
0001569E 9044                       		sub.w	d4,d0
000156A0 6400                       		bcc.s	loc_130BA
000156A2 303C FF80                  		move.w	#-$80,d0
000156A6                            
000156A6                            loc_130BA:
000156A6 3140 0020                  		move.w	d0,obInertia(a0)
000156AA 1228 0026                  		move.b	obAngle(a0),d1
000156AE 0601 0020                  		addi.b	#$20,d1
000156B2 0201 00C0                  		andi.b	#$C0,d1
000156B6 6600                       		bne.s	locret_130E8
000156B8 0C40 0400                  		cmpi.w	#$400,d0
000156BC 6D00                       		blt.s	locret_130E8
000156BE 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
000156C4 08A8 0000 0022             		bclr	#0,obStatus(a0)
000156D4 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
000156DA 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
000156E0                            		
000156E0                            locret_130E8:
000156E0 4E75                       		rts	
000156E2                            ; End of function Sonic_MoveLeft
000156E2                            
000156E2                            
000156E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156E2                            
000156E2                            
000156E2                            Sonic_MoveRight:
000156E2 3028 0020                  		move.w	obInertia(a0),d0
000156E6 6B00                       		bmi.s	loc_13118
000156E8 08A8 0000 0022             		bclr	#0,$22(a0)
000156EE 6700                       		beq.s	loc_13104
000156F0 08A8 0005 0022             		bclr	#5,$22(a0)
000156F6 117C 0001 001D             		move.b	#1,$1D(a0)
000156FC                            
000156FC                            loc_13104:
000156FC D045                       		add.w	d5,d0
000156FE B046                       		cmp.w	d6,d0
00015700 6D00                       		blt.s	loc_1310C
00015702 9045                       		sub.w	d5,d0
00015704 B046                       		cmp.w	d6,d0
00015706 6C00                       		bge.s	loc_1310C
00015708 3006                       		move.w	d6,d0
0001570A                            
0001570A                            loc_1310C:
0001570A 3140 0020                  		move.w	d0,obInertia(a0)
0001570E 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00015714 4E75                       		rts
00015716                            ; ===========================================================================
00015716                            
00015716                            loc_13118:
00015716 D044                       		add.w	d4,d0
00015718 6400                       		bcc.s	loc_13120
0001571A 303C 0080                  		move.w	#$80,d0
0001571E                            
0001571E                            loc_13120:
0001571E 3140 0020                  		move.w	d0,obInertia(a0)
00015722 1228 0026                  		move.b	obAngle(a0),d1
00015726 0601 0020                  		addi.b	#$20,d1
0001572A 0201 00C0                  		andi.b	#$C0,d1
0001572E 6600                       		bne.s	locret_1314E
00015730 0C40 FC00                  		cmpi.w	#-$400,d0
00015734 6E00                       		bgt.s	locret_1314E
00015736 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
0001573C 08E8 0000 0022             		bset	#0,obStatus(a0)
0001574C 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015752 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015758                            		
00015758                            locret_1314E:
00015758 4E75                       		rts	
0001575A                            ; End of function Sonic_MoveRight
0001575A                            ; End of function Sonic_MoveRight
0001575A                            		include	"_incObj\Sonic RollSpeed.asm"
0001575A                            ; ---------------------------------------------------------------------------
0001575A                            ; Subroutine to	change Sonic's speed as he rolls
0001575A                            ; ---------------------------------------------------------------------------
0001575A                            
0001575A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001575A                            
0001575A                            
0001575A                            Sonic_RollSpeed:
0001575A 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
0001575E E346                       		asl.w	#1,d6
00015760 7A06                       		moveq	#6,d5	; natural roll deceleration = 1/2 normal acceleration
00015762 3838 F764                  		move.w	(v_sonspeeddec).w,d4
00015766 E444                       		asr.w	#2,d4
00015768 4A38 F7CA                  		tst.b	(f_jumponly).w
0001576C 6600 0000                  		bne.w	loc_131CC
00015770 4A68 003E                  		tst.w	$3E(a0)
00015774 6600                       		bne.s	@notright
00015776 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001577C 6700                       		beq.s	@notleft	; if not, branch
0001577E 6100 0000                  		bsr.w	Sonic_RollLeft
00015782                            
00015782                            	@notleft:
00015782 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
00015788 6700                       		beq.s	@notright	; if not, branch
0001578A 6100 0000                  		bsr.w	Sonic_RollRight
0001578E                            
0001578E                            	@notright:
0001578E 3028 0020                  		move.w	obInertia(a0),d0
00015792 6700                       		beq.s	loc_131AA
00015794 6B00                       		bmi.s	loc_1319E
00015796 9045                       		sub.w	d5,d0
00015798 6400                       		bcc.s	loc_13198
0001579A 303C 0000                  		move.w	#0,d0
0001579E                            
0001579E                            loc_13198:
0001579E 3140 0020                  		move.w	d0,obInertia(a0)
000157A2 6000                       		bra.s	loc_131AA
000157A4                            ; ===========================================================================
000157A4                            
000157A4                            loc_1319E:
000157A4 D045                       		add.w	d5,d0
000157A6 6400                       		bcc.s	loc_131A6
000157A8 303C 0000                  		move.w	#0,d0
000157AC                            
000157AC                            loc_131A6:
000157AC 3140 0020                  		move.w	d0,obInertia(a0)
000157B0                            
000157B0                            loc_131AA:
000157B0 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
000157B4 6600                       		bne.s	loc_131CC	; if yes, branch
000157B6 08A8 0002 0022             		bclr	#2,obStatus(a0)
000157BC 117C 0013 0016             		move.b	#$13,obHeight(a0)
000157C2 117C 0009 0017             		move.b	#9,obWidth(a0)
000157C8 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
000157CE 5B68 000C                  		subq.w	#5,obY(a0)
000157D2                            
000157D2                            loc_131CC:
000157D2 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
000157D8 6700                       		beq.s	@cont2
000157DA 6400                       		bcc.s	@cont1
000157DC 5878 F73E                  		addq.w	#4,($FFFFF73E).w
000157E0                            		
000157E0                            @cont1:
000157E0 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000157E4                            		
000157E4                            @cont2:
000157E4 1028 0026                  		move.b	obAngle(a0),d0
000157E8 4EB9 0000 3BA2             		jsr	(CalcSine).l
000157EE C1E8 0020                  		muls.w	obInertia(a0),d0
000157F2 E080                       		asr.l	#8,d0
000157F4 3140 0012                  		move.w	d0,obVelY(a0)
000157F8 C3E8 0020                  		muls.w	obInertia(a0),d1
000157FC E081                       		asr.l	#8,d1
000157FE 0C41 1000                  		cmpi.w	#$1000,d1
00015802 6F00                       		ble.s	loc_131F0
00015804 323C 1000                  		move.w	#$1000,d1
00015808                            
00015808                            loc_131F0:
00015808 0C41 F000                  		cmpi.w	#-$1000,d1
0001580C 6C00                       		bge.s	loc_131FA
0001580E 323C F000                  		move.w	#-$1000,d1
00015812                            
00015812                            loc_131FA:
00015812 3141 0010                  		move.w	d1,obVelX(a0)
00015816 6000 FDDA                  		bra.w	loc_1300C
0001581A                            ; End of function Sonic_RollSpeed
0001581A                            
0001581A                            
0001581A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001581A                            
0001581A                            
0001581A                            Sonic_RollLeft:
0001581A 3028 0020                  		move.w	obInertia(a0),d0
0001581E 6700                       		beq.s	loc_1320A
00015820 6A00                       		bpl.s	loc_13218
00015822                            
00015822                            loc_1320A:
00015822 08E8 0000 0022             		bset	#0,obStatus(a0)
00015828 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
0001582E 4E75                       		rts	
00015830                            ; ===========================================================================
00015830                            
00015830                            loc_13218:
00015830 9044                       		sub.w	d4,d0
00015832 6400                       		bcc.s	loc_13220
00015834 303C FF80                  		move.w	#-$80,d0
00015838                            
00015838                            loc_13220:
00015838 3140 0020                  		move.w	d0,obInertia(a0)
0001583C 4E75                       		rts	
0001583E                            ; End of function Sonic_RollLeft
0001583E                            
0001583E                            
0001583E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001583E                            
0001583E                            
0001583E                            Sonic_RollRight:
0001583E 3028 0020                  		move.w	obInertia(a0),d0
00015842 6B00                       		bmi.s	loc_1323A
00015844 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001584A 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015850 4E75                       		rts	
00015852                            ; ===========================================================================
00015852                            
00015852                            loc_1323A:
00015852 D044                       		add.w	d4,d0
00015854 6400                       		bcc.s	loc_13242
00015856 303C 0080                  		move.w	#$80,d0
0001585A                            
0001585A                            loc_13242:
0001585A 3140 0020                  		move.w	d0,obInertia(a0)
0001585E 4E75                       		rts	
00015860                            ; End of function Sonic_RollRight
00015860                            ; End of function Sonic_RollRight
00015860                            		include	"_incObj\Sonic JumpDirection.asm"
00015860                            ; ---------------------------------------------------------------------------
00015860                            ; Subroutine to	change Sonic's direction while jumping
00015860                            ; ---------------------------------------------------------------------------
00015860                            
00015860                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015860                            
00015860                            
00015860                            Sonic_JumpDirection:
00015860 3C38 F760                  		move.w	($FFFFF760).w,d6
00015864 3A38 F762                  		move.w	($FFFFF762).w,d5
00015868 E345                       		asl.w	#1,d5
0001586A 3028 0010                  		move.w	$10(a0),d0	
0001586E 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
00015874 6700                       		beq.s	loc_13278; if not, branch	
00015876 08E8 0000 0022             		bset	#0,$22(a0)	
0001587C 9045                       		sub.w	d5,d0	
0001587E 3206                       		move.w	d6,d1	
00015880 4441                       		neg.w	d1	
00015882 B041                       		cmp.w	d1,d0	
00015884 6E00                       		bgt.s	loc_13278	
00015886 D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
00015888 B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
0001588A 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
0001588C 3001                       		move.w	d1,d0
0001588E                            
0001588E                            loc_13278:
0001588E 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00015894 6700                       		beq.s	Obj01_JumpMove; if not, branch	
00015896 08A8 0000 0022             		bclr	#0,$22(a0)	
0001589C D045                       		add.w	d5,d0	
0001589E B046                       		cmp.w	d6,d0	
000158A0 6D00                       		blt.s	Obj01_JumpMove
000158A2 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
000158A4 B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
000158A6 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
000158A8 3006                       		move.w	d6,d0
000158AA                            
000158AA                            Obj01_JumpMove:
000158AA 3140 0010                  		move.w	d0,obVelX(a0)	; change Sonic's horizontal speed
000158AE                            
000158AE                            Obj01_ResetScr2:
000158AE 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w ; is the screen in its default position?
000158B4 6700                       		beq.s	loc_132A4	; if yes, branch
000158B6 6400                       		bcc.s	loc_132A0
000158B8 5878 F73E                  		addq.w	#4,(v_lookshift).w
000158BC                            
000158BC                            loc_132A0:
000158BC 5578 F73E                  		subq.w	#2,(v_lookshift).w
000158C0                            
000158C0                            loc_132A4:
000158C0 0C68 FC00 0012             		cmpi.w	#-$400,obVelY(a0) ; is Sonic moving faster than -$400 upwards?
000158C6 6500                       		bcs.s	locret_132D2	; if yes, branch
000158C8 3028 0010                  		move.w	obVelX(a0),d0
000158CC 3200                       		move.w	d0,d1
000158CE EA41                       		asr.w	#5,d1
000158D0 6700                       		beq.s	locret_132D2
000158D2 6B00                       		bmi.s	loc_132C6
000158D4 9041                       		sub.w	d1,d0
000158D6 6400                       		bcc.s	loc_132C0
000158D8 303C 0000                  		move.w	#0,d0
000158DC                            
000158DC                            loc_132C0:
000158DC 3140 0010                  		move.w	d0,obVelX(a0)
000158E0 4E75                       		rts	
000158E2                            ; ===========================================================================
000158E2                            
000158E2                            loc_132C6:
000158E2 9041                       		sub.w	d1,d0
000158E4 6500                       		bcs.s	loc_132CE
000158E6 303C 0000                  		move.w	#0,d0
000158EA                            
000158EA                            loc_132CE:
000158EA 3140 0010                  		move.w	d0,obVelX(a0)
000158EE                            
000158EE                            locret_132D2:
000158EE 4E75                       		rts	
000158F0                            ; End of function Sonic_JumpDirection
000158F0                            ; End of function Sonic_JumpDirection
000158F0                            		include "_incObj\Sonic Peelout.asm"
000158F0                            ; ---------------------------------------------------------------------------
000158F0                            ; Subroutine to make Sonic perform a peelout
000158F0                            ; ---------------------------------------------------------------------------
000158F0                            ; If you use this makes sure to search for ;Peelout in Sonic1.asm
000158F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000158F0                            
000158F0                            Sonic_Peelout:
000158F0 0828 0001 0039             		btst	#1,$39(a0)
000158F6 6600                       		bne.s	SCDPeelout_Launch
000158F8 0C28 0007 001C             		cmpi.b	#7,$1C(a0) ;check to see if your looking up
000158FE 6600                       		bne.s	@return
00015900 1038 F603                  		move.b	($FFFFF603).w,d0
00015904 0200 0070                  		andi.b	#%01110000,d0
00015908 6700 0000                  		beq.w	@return
0001590C 117C 0001 001C             		move.b	#1,$1C(a0)
00015912 317C 0000 003A             		move.w	#0,$3A(a0)
00015918 303C 00D2                  		move.w	#$D2,d0
0001591C 4EB9 0000 12A0             		jsr	(PlaySound_Special).l 		; Play peelout charge sound
00015922                            	;	sfx 	sfx_PeeloutCharge 		; These are if you use AMPS
00015922 588F                       		addq.l	#4,sp
00015924 08E8 0001 0039             		bset	#1,$39(a0)
0001592A                            		
0001592A 4268 0020                  		clr.w	obInertia(a0)
0001592E                             
0001592E 6100 0000                  		bsr.w	Sonic_LevelBound
00015932 6100 0000                  		bsr.w	Sonic_AnglePos
00015936                             
00015936                            	@return:
00015936 4E75                       		rts	
00015938                            ; ---------------------------------------------------------------------------
00015938                             
00015938                            SCDPeelout_Launch:
00015938 0828 0001 0039             		btst	#1,$39(a0)
0001593E 1038 F602                  		move.b	($FFFFF602).w,d0
00015942 0800 0000                  		btst	#0,d0
00015946 6600 0000                  		bne.w	SCDPeelout_Charge
0001594A 08A8 0001 0039             		bclr	#1,$39(a0)	; stop Dashing
00015950 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)	; have we been charging long enough?
00015956 6600 0000                  		bne.w	SCDPeelout_Stop_Sound
0001595A 117C 0000 001C             		move.b	#0,$1C(a0)	; launches here (peelout sprites)
00015960 317C 0001 0010             		move.w	#1,$10(a0)	; force X speed to nonzero for camera lag's benefit
00015966 3028 0020                  		move.w	obInertia(a0),d0
0001596A 0440 0800                  		subi.w	#$800,d0
0001596E D040                       		add.w	d0,d0
00015970 0240 1F00                  		andi.w	#$1F00,d0
00015974 4440                       		neg.w	d0
00015976 0640 2000                  		addi.w	#$2000,d0
0001597A 31C0 C904                  		move.w	d0,($FFFFC904).w
0001597E 0828 0000 0022             		btst	#0,$22(a0)
00015984 6700                       		beq.s	@dontflip
00015986 4468 0020                  		neg.w	obInertia(a0)
0001598A                             
0001598A                            @dontflip:
0001598A 08A8 0007 0022             		bclr	#7,$22(a0)
00015990 303C 00D3                  		move.w	#$D3,d0
00015994 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001599A                            	;	sfx 	sfx_PeeloutRelease
0001599A 1028 0026                  		move.b	obAngle(a0),d0
0001599E 4EB9 0000 3BA2             		jsr	(CalcSine).l
000159A4 C3E8 0020                  		muls.w	obInertia(a0),d1
000159A8 E081                       		asr.l	#8,d1
000159AA 3141 0010                  		move.w	d1,obVelX(a0)
000159AE C1E8 0020                  		muls.w	obInertia(a0),d0
000159B2 E080                       		asr.l	#8,d0
000159B4 3140 0012                  		move.w	d0,obVelY(a0)	
000159B8 6000 0000                  		bra.w	SCDPeelout_ResetScr
000159BC                            ; ---------------------------------------------------------------------------
000159BC                             
000159BC                            SCDPeelout_Charge:				; If still charging the dash...
000159BC 3238 F760                  		move.w	($FFFFF760).w,d1	; get top peelout speed
000159C0 3401                       		move.w	d1,d2
000159C2 D241                       		add.w	d1,d1
000159C4 4A38 FE2E                  		tst.b   ($FFFFFE2E).w 		; test for speed shoes
000159C8 6700                       		beq.s	@noshoes
000159CA E242                       		asr.w	#1,d2
000159CC 9242                       		sub.w	d2,d1
000159CE                            
000159CE                            @noshoes:
000159CE 0668 0064 0020             		addi.w	#$64,obInertia(a0)		; increment speed
000159D4 B268 0020                  		cmp.w	obInertia(a0),d1
000159D8 6E00                       		bgt.s	@inctimer
000159DA 3141 0020                  		move.w	d1,obInertia(a0)
000159DE                            
000159DE                            @inctimer:
000159DE 5228 003A                  		addq.b	#1,$3A(a0)		; increment timer
000159E2 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)
000159E8 6500                       		bcs.s	SCDPeelout_ResetScr
000159EA 117C 001E 003A             		move.b	#$1E,$3A(a0)
000159F0 4EF9 0000 0000             		jmp 	SCDPeelout_ResetScr
000159F6                            		
000159F6                            SCDPeelout_Stop_Sound:
000159F6 303C 00D4                  		move.w	#$D4,d0
000159FA 4EB9 0000 12A0             		jsr		(PlaySound_Special).l
00015A00                            	;	sfx 	sfx_PeeloutStop
00015A00 4268 0020                  		clr.w	obInertia(a0)
00015A04                            
00015A04                            SCDPeelout_ResetScr:
00015A04 588F                       		addq.l	#4,sp			; increase stack ptr ; was 4
00015A06 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00015A0C 6700                       		beq.s	@finish
00015A0E 6400                       		bcc.s	@skip
00015A10 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015A14                             
00015A14                            	@skip:
00015A14 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015A18                             
00015A18                            	@finish:
00015A18 6100 0000                  		bsr.w	Sonic_LevelBound
00015A1C 6100 0000                  		bsr.w	Sonic_AnglePos
00015A20 4E75                       		rts
00015A22                            		
00015A22                            		
00015A22                            		include "_incObj\Sonic Spindash.asm"
00015A22                            ; ---------------------------------------------------------------------------
00015A22                            ; Subroutine to make Sonic perform a spindash
00015A22                            ; ---------------------------------------------------------------------------
00015A22                             
00015A22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A22                             
00015A22                             
00015A22                            Sonic_SpinDash:
00015A22 4A28 0039                  		tst.b	f_spindash(a0)			; already Spin Dashing?
00015A26 6600                       		bne.s	loc2_1AC8E		; if set, branch
00015A28 0C28 0000 001C             		cmpi.b	#id_duck,obAnim(a0)		; is anim duck
00015A2E 6600                       		bne.s	locret2_1AC8C		; if not, return
00015A30 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015A34 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
00015A38 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
00015A3C 117C 0000 001C             		move.b	#id_spindash,obAnim(a0)		; set Spin Dash anim (9 in s2)
00015A42 303C 00D5                  		move.w	#$D5,d0			; spin sound ($E0 in s2)
00015A46 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play spin sound
00015A4C 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015A4E 117C 0001 0039             		move.b	#1,f_spindash(a0)		; set Spin Dash flag
00015A54 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
00015A5A                            		;cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
00015A5A                            		;bcs.s	loc2_1AC84		; ??? branch if carry
00015A5A 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
00015A60                            						; the smoke/dust object
00015A60                            loc2_1AC84:
00015A60 6100 0000                  		bsr.w	Sonic_LevelBound
00015A64 6100 0000                  		bsr.w	Sonic_AnglePos
00015A68                            
00015A68                            locret2_1AC8C:
00015A68 4E75                       		rts	
00015A6A                            ; ---------------------------------------------------------------------------
00015A6A                            
00015A6A                            loc2_1AC8E:	
00015A6A 117C 001F 001C             		move.b	#$1F,$1C(a0)
00015A70 1038 F602                  		move.b	(v_jpadhold2).w,d0	; read controller
00015A74 0800 0001                  		btst	#1,d0			; check down button
00015A78 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
00015A7C 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
00015A82 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
00015A88 117C 0000 001C             		move.b	#id_roll,obAnim(a0)		; set animation to roll
00015A8E 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
00015A92 117C 0000 0039             		move.b	#0,f_spindash(a0)		; clear Spin Dash flag
00015A98 7000                       		moveq	#0,d0
00015A9A 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
00015A9E D040                       		add.w	d0,d0			; double it
00015AA0 317B 0000 0020             		move.w	Dash_Speeds(pc,d0.w),obInertia(a0) ; get normal speed
00015AA6 3028 0020                  		move.w	obInertia(a0),d0		; get inertia
00015AAA 0440 0800                  		subi.w	#$800,d0		; subtract $800
00015AAE D040                       		add.w	d0,d0			; double it
00015AB0 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
00015AB4 4440                       		neg.w	d0			; negate it
00015AB6 0640 2000                  		addi.w	#$2000,d0		; add $2000
00015ABA 31C0 C904                  		move.w	d0,($FFFFC904).w	; move to $EED0
00015ABE 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
00015AC4 6700                       		beq.s	loc2_1ACF4		; if not, branch
00015AC6 4468 0020                  		neg.w	obInertia(a0)			; negate inertia
00015ACA                            
00015ACA                            loc2_1ACF4:
00015ACA 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
00015AD0 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
00015AD6 303C 00BC                  		move.w	#$BC,d0			; spin release sound
00015ADA 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play it!
00015AE0 1028 0026                  		move.b	obAngle(a0),d0
00015AE4 4EB9 0000 3BA2             		jsr	(CalcSine).l
00015AEA C3E8 0020                  		muls.w	obInertia(a0),d1
00015AEE E081                       		asr.l	#8,d1
00015AF0 3141 0010                  		move.w	d1,obVelX(a0)
00015AF4 C1E8 0020                  		muls.w	obInertia(a0),d0
00015AF8 E080                       		asr.l	#8,d0
00015AFA 3140 0012                  		move.w	d0,obVelY(a0)
00015AFE                            	
00015AFE 6000                       		bra.s	loc2_1AD78
00015B00                            ; ===========================================================================
00015B00                            Dash_Speeds:
00015B00 0700                       		dc.w  $700		; 0
00015B02 0780                       		dc.w  $780		; 1
00015B04 0800                       		dc.w  $800		; 2
00015B06 0880                       		dc.w  $880		; 3
00015B08 0900                       		dc.w  $900		; 4
00015B0A 0980                       		dc.w  $980		; 5
00015B0C 0A00                       		dc.w  $A00		; 6
00015B0E 0A80                       		dc.w  $A80		; 7
00015B10 0B00                       		dc.w  $B00		; 8
00015B12                            ; ===========================================================================
00015B12                            
00015B12                            loc2_1AD30:				; If still charging the dash...
00015B12 4A68 003A                  		tst.w	$3A(a0)		; check charge count
00015B16 6700                       		beq.s	loc2_1AD48	; if zero, branch
00015B18 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
00015B1C EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
00015B1E 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
00015B22 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
00015B24 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
00015B2A                            
00015B2A                            loc2_1AD48:
00015B2A 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015B2E 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
00015B32 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
00015B36 317C 1F00 001C             		move.w	#$1F00,obAnim(a0)	; reset spdsh animation
00015B3C 303C 00D5                  		move.w	#$D5,d0			; was $E0 in sonic 2
00015B40 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w		; Set the Spin Dash dust animation to $2.
00015B46 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play charge sound
00015B4C 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
00015B52 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
00015B58 6500                       		bcs.s	loc2_1AD78		; if not, then branch
00015B5A 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
00015B60                            
00015B60                            loc2_1AD78:
00015B60 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015B62 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w	; $EED8 only ever seems
00015B68 6700                       		beq.s	loc2_1AD8C		; to be used in Spin Dash
00015B6A 6400                       		bcc.s	loc2_1AD88
00015B6C 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015B70                            
00015B70                            loc2_1AD88:
00015B70 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015B74                            
00015B74                            loc2_1AD8C:
00015B74 6100 0000                  		bsr.w	Sonic_LevelBound
00015B78 6100 0000                  		bsr.w	Sonic_AnglePos
00015B7C                            		;move.w	#$60,(v_lookshift).w	; reset looking up/down
00015B7C 4E75                       		rts
00015B7E                            ; End of subroutine Sonic_SpinDash
00015B7E                            ; End of subroutine Sonic_SpinDash
00015B7E                            		include	"_incObj\Sonic HomingAttack.asm"
00015B7E                            ; ===========================================================================
00015B7E                            ; ---------------------------------------------------------------------------
00015B7E                            ; Subroutine to perform Homing Attack
00015B7E                            ; ---------------------------------------------------------------------------
00015B7E                            
00015B7E                            ;HomingAttackType = 1 ; 0 is Sonic Winter Adventures, 1 is Sonic and the Mystic Gems
00015B7E                            
00015B7E                            Sonic_HomingAttack:     
00015B7E 4A38 F5C9                  		tst.b	(v_gshield)
00015B82 6700                       		beq.s	@Return2
00015B84 0C38 0002 F5CD             		cmpi.b	#2,(v_homingattack).w	; already Homing?
00015B8A 6700                       		beq.s	@Homing_Process		; if yes, branch
00015B8C 0238 0070 F603             		andi.b	#btnABC,(v_jpadpress2).w	; is A, B or C pressed?
00015B92 6600                       		bne.s	@Homing_Perform
00015B94 4E75                       		rts
00015B96                            	@Return2:
00015B96 4E75                       		rts
00015B98                            ; ---------------------------------------------------------------------------
00015B98                            @Homing_Process:
00015B98 5328 001E                  		subq.b	#1,obTimeFrame(a0)		; is timer over?
00015B9C 6600                       		bne.s	@SetSpeeds		; if not, branch
00015B9E 4238 F5CD                  		clr.b	(v_homingattack).w
00015BA2 4E75                       		rts
00015BA4                            
00015BA4                            	@SetSpeeds:
00015BA4 3268 003A                  		movea.w	$3A(a0),a1		; load object to follow
00015BA8                            
00015BA8                            			
00015BA8                            
00015BA8 3229 000C                  		move.w	obY(a1),d1
00015BAC 9268 000C                  		sub.w	obY(a0),d1		; d1 -> Ydist
00015BB0 3429 0008                  		move.w	obX(a1),d2
00015BB4 9468 0008                  		sub.w	obX(a0),d2		; d2 -> Xdist
00015BB8 4EB9 0000 3E34                             jsr     (CalcAngle).l		; Calcuate Angle
00015BBE 4EB9 0000 3BA2                             jsr     (CalcSine).l		; Get Sine
00015BC4 363C 0000                                  move.w	#$0,d3		; d3 -> Homing Attack Speed
00015BC8 363C 0A00                                  move.w	#$A00,d3		; d3 -> Homing Attack Speed
00015BCC C1C3                       		muls.w	d3,d0
00015BCE C3C3                       		muls.w	d3,d1
00015BD0 E080                       		asr.l	#8,d0
00015BD2 E081                       		asr.l	#8,d1
00015BD4 3141 0012                                  move.w  d1,obVelY(a0)		; set speed
00015BD8 3140 0010                                  move.w  d0,obVelX(a0)		; set speed
00015BDC 3140 0020                  		move.w	d0,obInertia(a0)
00015BE0 4E75                       		rts
00015BE2                            
00015BE2                            ; ---------------------------------------------------------------------------
00015BE2                            @Homing_Perform:
00015BE2 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015BE8 76FF                       		moveq	#-1,d3			; d3 will contain the direct distance for current d4,d5 (Piphagor yay)
00015BEA 78FF                       		moveq	#-1,d4			; d4 will contain the shortest X-dist
00015BEC 7AFF                       		moveq	#-1,d5			; d5 will contain the shortest Y-dist
00015BEE 3C3C 005F                  		move.w	#$5F,d6
00015BF2 43F8 D800                  		lea	(v_lvlobjspace).w,a1	; Load in-level objects RAM
00015BF6 3C3C 005F                  		move.w	#$5F,d6			; do $60 objects
00015BFA                            		
00015BFA                            	@ObjectsLoop:                  
00015BFA 4A29 0001                  		tst.b	1(a1)			; is object on-screen?
00015BFE 6A00                       		bpl.s	@NextObject		; if yes, branch
00015C00 4A29 0020                  		tst.b	obColType(a1)			; load touch response
00015C04 6600                       		bne.s	@Homing_TestObject	; if touch response is not zero, branch
00015C06                            
00015C06                            	@NextObject:
00015C06 43E9 0040                  		lea	$40(a1),a1		; load next object slot
00015C0A 51CE FFEE                  		dbf	d6,@ObjectsLoop		; repeat for all objects in RAM
00015C0E                            		
00015C0E 0C83 0000 6400             		cmpi.l	#$A0*$A0,d3		; if Distance ^ 2 > $A0 ^ 2, quit
00015C14 6200 0000                  		bhi.w	Sonic_JumpDash
00015C18                            
00015C18                            
00015C18                            
00015C18 117C 003C 001E             		move.b	#60,obTimeFrame(a0)		; follow object for 60 frames
00015C1E 11FC 0002 F5CD             		move.b  #2,(v_homingattack).w	; set flag as #2 (Homing Attack)
00015C24 303C 00BC                  		move.w	#$BC,d0			; play JD sound
00015C28 4EF9 0000 12A0             		jmp	(PlaySound_Special).l   ;
00015C2E                            
00015C2E                            
00015C2E                            ; ---------------------------------------------------------------------------
00015C2E                            @Homing_TestObject:
00015C2E 45FA 0000                  		lea	@Homing_ObjectList(pc),a2
00015C32 1011                       		move.b	(a1),d0
00015C34                            		
00015C34                            	@CheckID:
00015C34 B01A                       		cmp.b	(a2)+,d0		; compare current obj ID to one in list
00015C36 6700                       		beq.s	@CalcXDist		; if object is in list, branch
00015C38 62FA                       		bhi.s	@CheckID		; if current obj ID is higer, go on looking
00015C3A 60CA                       		bra.s	@NextObject		; the object is not in list, quit
00015C3C                            		
00015C3C                            	@CalcXDist:
00015C3C 3229 0008                  		move.w	obX(a1),d1		; d1 -> ObjX
00015C40 9268 0008                  		sub.w	obX(a0),d1		; d1 -> ObjX - SonX
00015C44 6A00                       		bpl.s	@ObjAhead
00015C46                            
00015C46                            	; Object is behind Sonic
00015C46 0828 0000 0022             		btst	#0,obStatus(a0)		; is Sonic faced left?
00015C4C 67B8                       		beq.s	@NextObject		; if not, we can't home at object
00015C4E 6000                       		bra.s	@CalcYDist
00015C50                            
00015C50                            	@ObjAhead:
00015C50 0828 0000 0022             		btst	#0,obStatus(a0)		; is Sonic faced right?
00015C56 66AE                       		bne.s	@NextObject		; if not, we can't home at object
00015C58                            
00015C58                            	@CalcYDist:
00015C58 3429 000C                  		move.w	obY(a1),d2		; d2 -> ObjY
00015C5C 9468 000C                  		sub.w	obY(a0),d2		; d2 -> ObjY - SonY
00015C60                            		
00015C60                            	; Calculate absolute distance ( d1 * d1 + d2 * d2 )
00015C60 3002                       		move.w	d2,d0			; d0 -> d2
00015C62 4840                       		swap	d0
00015C64 3001                       		move.w	d1,d0			; d0 -> d2 d1
00015C66 C3C1                       		muls.w	d1,d1			; d1 -> d1 * d1
00015C68 C5C2                       		muls.w	d2,d2			; d2 -> d2 * d2
00015C6A D481                       		add.l	d1,d2			; d2 -> d1 * d1 + d2 * d2
00015C6C B483                       		cmp.l	d3,d2			; is new distance shorter after all?
00015C6E 6400 FF96                  		bcc.w	@NextObject		; if not, branch
00015C72                            
00015C72 2602                       		move.l	d2,d3			; set new distance
00015C74 3800                       		move.w	d0,d4			; set new Xdist
00015C76 4840                       		swap	d0
00015C78 3A00                       		move.w	d0,d5			; set new Ydist
00015C7A 3149 003A                  		move.w	a1,$3A(a0)		; save obj ID
00015C7E 6000 FF86                  		bra.w	@NextObject
00015C82                            
00015C82                            
00015C82                            ; ---------------------------------------------------------------------------
00015C82                            ; Object ids that are available for homming
00015C82                            ; NOTE: They should go in increasing order (1,2,3..)
00015C82                            ; ---------------------------------------------------------------------------
00015C82                            
00015C82                            @Homing_ObjectList:
00015C82 1E1F 2226 2B2C 2D40 4243   		dc.b	$1E, $1F, $22, $26, $2B, $2C, $2D, $40, $42, $43
00015C8C 5055 6078                  		dc.b	$50, $55, $60, $78
00015C90 FF                         		dc.b	-1	; mark end of list
00015C92 00                         		even
00015C92                            
00015C92                            
00015C92                            ; ===========================================================================
00015C92                            ; ---------------------------------------------------------------------------
00015C92                            ; Subroutine to perform Jump Dash
00015C92                            ; ---------------------------------------------------------------------------
00015C92                            
00015C92                            Sonic_JumpDash:
00015C92 4A38 F5CD                  		tst.b	(v_homingattack).w		; already Jump Dashing?
00015C96 6600                       		bne.s	@Return			; if yes, branch
00015C98 11FC 0001 F5CD             		move.b	#1,(v_homingattack).w
00015C9E 303C 0800                  		move.w	#$800,d0		; set Jump Dash speed
00015CA2 0828 0006 0022             		btst	#6,obStatus(a0)		; is Sonic underwater
00015CA8 6700                       		beq.s	@ChkShoes
00015CAA 303C 0600                  		move.w	#$600,d0		; set JD speed for underwater
00015CAE                            	
00015CAE                            	@ChkShoes:
00015CAE 4A38 FE2E                  		tst.b	(v_shoes).w		; does Sonic have speed	shoes?
00015CB2 6700                       		beq.s	@SetSpeeds		; if not, branch
00015CB4 0640 0200                  		addi.w	#$200,d0
00015CB8                            
00015CB8                            	;@ChkOrientation:
00015CB8                            		;btst	#0,obStatus(a0)
00015CB8                            		;beq.s	@SetSpeeds
00015CB8                            		;neg.w	d0
00015CB8                            
00015CB8                            	@SetSpeeds:
00015CB8 3140 0012                  		move.w	d0,obVelY(a0)
00015CBC 3140 0020                  		move.w	d0,obInertia(a0)
00015CC0                            		;move.w	#0,obVelY(a0)
00015CC0 303C 00BC                  		move.w	#$BC,d0			; play JD sound
00015CC4 4EF9 0000 12A0             		jmp	(PlaySound_Special).l   ;
00015CCA                            
00015CCA                            	@Return:
00015CCA 4E75                       		rts
00015CCC                            
00015CCC                            ; -------------------------------------------------------------------------
00015CCC                            ; Subroutine to stop Sonic, bounce him up and to give him the ability to
00015CCC                            ; Jumpdash again when he has performed a Jumpdash
00015CCC                            ; -------------------------------------------------------------------------
00015CCC                            
00015CCC                            BounceJD:
00015CCC 0C38 0002 F5CD             		cmp.b	#2,(v_homingattack).w; was HA flag set?
00015CD2 6600                       		bne.s	BounceJD_End	; if not, branch
00015CD4 4238 F5CD                  		clr.b	(v_homingattack).w	; if yes, clear HA flag (allow Sonic to HA again)
00015CD8 4268 0010                  		clr.w	obVelX(a0)		; clear X-velocity (stop sonic)
00015CDC 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015CE2 303C FF10                  		move.w	#-$F0,d0
00015CE6 0828 0000 0022             		btst	#0,obStatus(a0)		; is Sonic faced left?
00015CEC 6600                       		bne.s	@MoveAhead		; if not, we can't move right
00015CEE 4440                       		neg.w	d0
00015CF0                            
00015CF0                            	@MoveAhead:
00015CF0 3140 0010                  		move.w	d0,obVelX(a0)
00015CF4                            	@Cont:
00015CF4 317C F810 0012             		move.w	#-$7F0,obVelY(a0)	; move sonic upwards
00015CFA 0828 0006 0022             		btst	#6,obStatus(a0)	; is sonic underwater?
00015D00 6700                       		beq.s	BounceJD_Shoes	; if not, branch
00015D02 317C FAE0 0012             		move.w	#-$520,obVelY(a0)
00015D08                            		
00015D08                            BounceJD_Shoes:
00015D08 4A38 FE2E                  		tst.b	(v_shoes).w	; does sonic has speed shoes?
00015D0C 6700                       		beq.s	BounceJD_End	; if not, branch
00015D0E 317C F7E0 0012             		move.w	#-$820,obVelY(a0)	; use -$620 for Y-velocity (move sonic upwards)
00015D14                            		
00015D14                            BounceJD_End:
00015D14 4E75                       		rts			; return
00015D16                            ; End of function BounceJD
00015D16                            ; End of function BounceJD
00015D16                            
00015D16                            Sonic_AirRoll:
00015D16 0C28 0000 001C             	cmpi.b  #id_spring,$1C(a0)      ; is sonic in the spring animation?
00015D1C 6600                               bne.s   AirRoll_Return   ; if not, return
00015D1E                            
00015D1E                            AirRoll_CheckBtn:
00015D1E 1038 F603                          move.b	($FFFFF603).w,d0 ; Move $FFFFF603 to d0
00015D22 0200 0070                          andi.b	#btnABC,d0 ; Has A/B/C been pressed?
00015D26 6700                               beq.s	AirRoll_Return
00015D28 117C 0000 001C             	move.b	#id_roll,$1C(a0) ; Set Sonic's animation to rolling.
00015D2E                                   ; move.w	#$BC,d0
00015D2E                                   ; jsr	(PlaySound_Special).l ;    play Sonic rolling sound
00015D2E                            
00015D2E                            AirRoll_Return:
00015D2E 4E75                               rts
00015D30                            ; ===========================================================================
00015D30                            ; ---------------------------------------------------------------------------
00015D30                            ; Unused subroutine to squash Sonic
00015D30                            ; ---------------------------------------------------------------------------
00015D30 1028 0026                  		move.b	obAngle(a0),d0
00015D34 0600 0020                  		addi.b	#$20,d0
00015D38 0200 00C0                  		andi.b	#$C0,d0
00015D3C 6600                       		bne.s	locret_13302
00015D3E 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015D42 4A41                       		tst.w	d1
00015D44 6A00                       		bpl.s	locret_13302
00015D46 317C 0000 0020             		move.w	#0,obInertia(a0) ; stop Sonic moving
00015D4C 317C 0000 0010             		move.w	#0,obVelX(a0)
00015D52 317C 0000 0012             		move.w	#0,obVelY(a0)
00015D58 117C 0000 001C             		move.b	#id_Warp3,obAnim(a0) ; use "warping" animation
00015D5E                            
00015D5E                            locret_13302:
00015D5E 4E75                       		rts		
00015D60                            		include	"_incObj\Sonic LevelBound.asm"
00015D60                            ; ---------------------------------------------------------------------------
00015D60                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00015D60                            ; ---------------------------------------------------------------------------
00015D60                            
00015D60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D60                            
00015D60                            
00015D60                            Sonic_LevelBound:
00015D60 2228 0008                  		move.l	obX(a0),d1
00015D64 3028 0010                  		move.w	obVelX(a0),d0
00015D68 48C0                       		ext.l	d0
00015D6A E180                       		asl.l	#8,d0
00015D6C D280                       		add.l	d0,d1
00015D6E 4841                       		swap	d1
00015D70 3038 F728                  		move.w	(v_limitleft2).w,d0
00015D74 0640 0010                  		addi.w	#$10,d0
00015D78 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015D7A 6200                       		bhi.s	@sides		; if yes, branch
00015D7C 3038 F72A                  		move.w	(v_limitright2).w,d0
00015D80 0640 0128                  		addi.w	#$128,d0
00015D84 4A38 F7AA                  		tst.b	(f_lockscreen).w
00015D88 6600                       		bne.s	@screenlocked
00015D8A 0640 0040                  		addi.w	#$40,d0
00015D8E                            
00015D8E                            	@screenlocked:
00015D8E B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015D90 6300                       		bls.s	@sides		; if yes, branch
00015D92                            
00015D92                            	@chkbottom:
00015D92 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00015D96 0640 00E0                  		addi.w	#$E0,d0
00015D9A B068 000C                  		cmp.w	obY(a0),d0	; has Sonic touched the	bottom boundary?
00015D9E 6D00                       		blt.s	@bottom		; if yes, branch
00015DA0 4E75                       		rts	
00015DA2                            ; ===========================================================================
00015DA2                            
00015DA2                            @bottom:
00015DA2 3038 F726                  		move.w (v_limitbtm1).w,d0 
00015DA6 3238 F72E                  		move.w (v_limitbtm2).w,d1 
00015DAA B240                       		cmp.w d0,d1 ; screen still scrolling down? 
00015DAC 6D00                       		blt.s @dontkill; if so, don't kill Sonic 
00015DAE 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is level SBZ2 ?
00015DB4 6600 0000                  		bne.w	Kill_transport	; if not, kill Sonic
00015DB8 0C78 1B00 D008             		cmpi.w	#$1B00,(v_player+obX).w
00015DBE 6500 0000                  		bcs.w	Kill_transport
00015DC2 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
00015DC6 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
00015DCC 31FC 0103 FE10             		move.w	#(id_LZ<<8)+3,(v_zone).w ; set level to SBZ3 (LZ4)
00015DD2 4E75                       		rts	
00015DD4                            @dontkill: 
00015DD4 4E75                       		rts
00015DD6                            ; ===========================================================================
00015DD6                            
00015DD6                            @sides:
00015DD6 3140 0008                  		move.w	d0,obX(a0)
00015DDA 317C 0000 000A             		move.w	#0,obX+2(a0)
00015DE0 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Sonic moving
00015DE6 317C 0000 0020             		move.w	#0,obInertia(a0)
00015DEC 60A4                       		bra.s	@chkbottom
00015DEE                            
00015DEE                            Kill_transport: 
00015DEE 4EF9 0000 0000                     	jmp        (KillSonic).l
00015DF4                            
00015DF4                            ; End of function Sonic_LevelBound
00015DF4                            ; End of function Sonic_LevelBound
00015DF4                            		include	"_incObj\Sonic Roll.asm"
00015DF4                            ; ---------------------------------------------------------------------------
00015DF4                            ; Subroutine allowing Sonic to roll when he's moving
00015DF4                            ; ---------------------------------------------------------------------------
00015DF4                            
00015DF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015DF4                            
00015DF4                            
00015DF4                            Sonic_Roll:
00015DF4 4A38 F7CA                  		tst.b	(f_jumponly).w
00015DF8 6600                       		bne.s	@noroll
00015DFA 3028 0020                  		move.w	obInertia(a0),d0
00015DFE 6A00                       		bpl.s	@ispositive
00015E00 4440                       		neg.w	d0
00015E02                            
00015E02                            	@ispositive:
00015E02 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00015E06 6500                       		bcs.s	@noroll		; if not, branch
00015E08 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015E0C 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	being pressed?
00015E10 6600                       		bne.s	@noroll		; if yes, branch
00015E12 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
00015E18 6600                       		bne.s	Sonic_ChkRoll	; if yes, branch
00015E1A                            
00015E1A                            	@noroll:
00015E1A 4E75                       		rts	
00015E1C                            ; ===========================================================================
00015E1C                            
00015E1C                            Sonic_ChkRoll:
00015E1C 0828 0002 0022             		btst	#2,obStatus(a0)	; is Sonic already rolling?
00015E22 6700                       		beq.s	@roll		; if not, branch
00015E24 4E75                       		rts	
00015E26                            ; ===========================================================================
00015E26                            
00015E26                            @roll:
00015E26 08E8 0002 0022             		bset	#2,obStatus(a0)
00015E2C 117C 000E 0016             		move.b	#$E,obHeight(a0)
00015E32 117C 0007 0017             		move.b	#7,obWidth(a0)
00015E38 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015E3E 5A68 000C                  		addq.w	#5,obY(a0)
00015E4C 4A68 0020                  		tst.w	obInertia(a0)
00015E50 6600                       		bne.s	@ismoving
00015E52 317C 0200 0020             		move.w	#$200,obInertia(a0) ; set inertia if 0
00015E58                            
00015E58                            	@ismoving:
00015E58 4E75                       		rts	
00015E5A                            ; End of function Sonic_Roll
00015E5A                            ; End of function Sonic_Roll
00015E5A                            		include	"_incObj\Sonic Jump.asm"
00015E5A                            ; ---------------------------------------------------------------------------
00015E5A                            ; Subroutine allowing Sonic to jump
00015E5A                            ; ---------------------------------------------------------------------------
00015E5A                            
00015E5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015E5A                            
00015E5A                            
00015E5A                            Sonic_Jump:
00015E5A 1038 F603                  		move.b	(v_jpadpress2).w,d0
00015E5E 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00015E62 6700 0000                  		beq.w	locret_1348E	; if not, branch
00015E66 7000                       		moveq	#0,d0
00015E68 1028 0026                  		move.b	obAngle(a0),d0
00015E6C 0600 0080                  		addi.b	#$80,d0
00015E70 6100 0000                  		bsr.w	sub_14D48
00015E74 0C41 0006                  		cmpi.w	#6,d1
00015E78 6D00 0000                  		blt.w	locret_1348E
00015E7C 343C 0680                  		move.w	#$680,d2
00015E80 0828 0006 0022             		btst	#6,obStatus(a0)
00015E86 6700                       		beq.s	loc_1341C
00015E88 343C 0380                  		move.w	#$380,d2
00015E8C                            
00015E8C                            loc_1341C:
00015E8C 7000                       		moveq	#0,d0
00015E8E 1028 0026                  		move.b	obAngle(a0),d0
00015E92 0400 0040                  		subi.b	#$40,d0
00015E96 4EB9 0000 3BA2             		jsr	(CalcSine).l
00015E9C C3C2                       		muls.w	d2,d1
00015E9E E081                       		asr.l	#8,d1
00015EA0 D368 0010                  		add.w	d1,obVelX(a0)	; make Sonic jump
00015EA4 C1C2                       		muls.w	d2,d0
00015EA6 E080                       		asr.l	#8,d0
00015EA8 D168 0012                  		add.w	d0,obVelY(a0)	; make Sonic jump
00015EAC 08E8 0001 0022             		bset	#1,obStatus(a0)
00015EB2 08A8 0005 0022             		bclr	#5,obStatus(a0)
00015EB8 588F                       		addq.l	#4,sp
00015EBA 117C 0001 003C             		move.b	#1,$3C(a0)
00015EC0 4228 0038                  		clr.b	$38(a0)
00015ECE 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015ED4 117C 0009 0017             		move.b	#9,obWidth(a0)
00015EDA 117C 000E 0016             		move.b	#$E,obHeight(a0)
00015EE0 117C 0007 0017             		move.b	#7,obWidth(a0)
00015EE6                            Result_Check:
00015EE6 4A38 F5C2                  		tst.b   ($FFFFF5C2).w ; Has the victory animation flag been set?
00015EEA 6700                       		beq.s   NormalJump ; If not, branch
00015EEC 117C 0000 001C             		move.b  #id_Leap2,$1C(a0) ; Play the victory animation
00015EF2 6000                       		bra.s   cont ; Continue
00015EF4                            NormalJump:
00015EF4 117C 0002 001C             		move.b  #2,$1C(a0)    ; use "jumping"    animation
00015EFA                            cont:
00015EFA 08E8 0002 0022             		bset	#2,obStatus(a0)
00015F00 5A68 000C                  		addq.w	#5,obY(a0)
00015F04                            
00015F04                            locret_1348E:
00015F04 4E75                       		rts	
00015F06                            ; ===========================================================================
00015F06                            
00015F06                            ; End of function Sonic_Jump
00015F06                            ; End of function Sonic_Jump
00015F06                            		include	"_incObj\Sonic JumpHeight.asm"
00015F06                            ; ---------------------------------------------------------------------------
00015F06                            ; Subroutine controlling Sonic's jump height/duration
00015F06                            ; ---------------------------------------------------------------------------
00015F06                            
00015F06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F06                            
00015F06                            
00015F06                            Sonic_JumpHeight:
00015F06 4A28 003C                  		tst.b	$3C(a0)
00015F0A 6700                       		beq.s	loc_134C4
00015F0C 323C FC00                  		move.w	#-$400,d1
00015F10 0828 0006 0022             		btst	#6,obStatus(a0)
00015F16 6700                       		beq.s	loc_134AE
00015F18 323C FE00                  		move.w	#-$200,d1
00015F1C                            
00015F1C                            loc_134AE:
00015F1C B268 0012                  		cmp.w	obVelY(a0),d1
00015F20 6F00                       		ble.s	locret_134C2
00015F22 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015F26 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00015F2A 6600                       		bne.s	locret_134C2	; if yes, branch
00015F2C 3141 0012                  		move.w	d1,obVelY(a0)
00015F30                            
00015F30                            locret_134C2:
00015F30 4E75                       		rts	
00015F32                            ; ===========================================================================
00015F32                            
00015F32                            loc_134C4:
00015F32 0C68 F040 0012             		cmpi.w	#-$FC0,obVelY(a0)
00015F38 6C00                       		bge.s	locret_134D2
00015F3A 317C F040 0012             		move.w	#-$FC0,obVelY(a0)
00015F40                            
00015F40                            locret_134D2:
00015F40 4E75                       		rts	
00015F42                            ; End of function Sonic_JumpHeight
00015F42                            ; End of function Sonic_JumpHeight
00015F42                            		include	"_incObj\Sonic SlopeResist.asm"
00015F42                            ; ---------------------------------------------------------------------------
00015F42                            ; Subroutine to	slow Sonic walking up a	slope
00015F42                            ; ---------------------------------------------------------------------------
00015F42                            
00015F42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F42                            
00015F42                            
00015F42                            Sonic_SlopeResist:
00015F42 1028 0026                  		move.b	obAngle(a0),d0
00015F46 0600 0060                  		addi.b	#$60,d0
00015F4A 0C00 00C0                  		cmpi.b	#$C0,d0
00015F4E 6400                       		bcc.s	locret_13508
00015F50 1028 0026                  		move.b	obAngle(a0),d0
00015F54 4EB9 0000 3BA2             		jsr	(CalcSine).l
00015F5A C1FC 0020                  		muls.w	#$20,d0
00015F5E E080                       		asr.l	#8,d0
00015F60 4A68 0020                  		tst.w	obInertia(a0)
00015F64 6700                       		beq.s	locret_13508
00015F66 6B00                       		bmi.s	loc_13504
00015F68 4A40                       		tst.w	d0
00015F6A 6700                       		beq.s	locret_13502
00015F6C D168 0020                  		add.w	d0,obInertia(a0) ; change Sonic's inertia
00015F70                            
00015F70                            locret_13502:
00015F70 4E75                       		rts	
00015F72                            ; ===========================================================================
00015F72                            
00015F72                            loc_13504:
00015F72 D168 0020                  		add.w	d0,obInertia(a0)
00015F76                            
00015F76                            locret_13508:
00015F76 4E75                       		rts	
00015F78                            ; End of function Sonic_SlopeResist
00015F78                            ; End of function Sonic_SlopeResist
00015F78                            		include	"_incObj\Sonic RollRepel.asm"
00015F78                            ; ---------------------------------------------------------------------------
00015F78                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00015F78                            ; ---------------------------------------------------------------------------
00015F78                            
00015F78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F78                            
00015F78                            
00015F78                            Sonic_RollRepel:
00015F78 1028 0026                  		move.b	obAngle(a0),d0
00015F7C 0600 0060                  		addi.b	#$60,d0
00015F80 0C00 00C0                  		cmpi.b	#-$40,d0
00015F84 6400                       		bcc.s	locret_13544
00015F86 1028 0026                  		move.b	obAngle(a0),d0
00015F8A 4EB9 0000 3BA2             		jsr	(CalcSine).l
00015F90 C1FC 0050                  		muls.w	#$50,d0
00015F94 E080                       		asr.l	#8,d0
00015F96 4A68 0020                  		tst.w	obInertia(a0)
00015F9A 6B00                       		bmi.s	loc_1353A
00015F9C 4A40                       		tst.w	d0
00015F9E 6A00                       		bpl.s	loc_13534
00015FA0 E480                       		asr.l	#2,d0
00015FA2                            
00015FA2                            loc_13534:
00015FA2 D168 0020                  		add.w	d0,obInertia(a0)
00015FA6 4E75                       		rts	
00015FA8                            ; ===========================================================================
00015FA8                            
00015FA8                            loc_1353A:
00015FA8 4A40                       		tst.w	d0
00015FAA 6B00                       		bmi.s	loc_13540
00015FAC E480                       		asr.l	#2,d0
00015FAE                            
00015FAE                            loc_13540:
00015FAE D168 0020                  		add.w	d0,obInertia(a0)
00015FB2                            
00015FB2                            locret_13544:
00015FB2 4E75                       		rts	
00015FB4                            ; End of function Sonic_RollRepel
00015FB4                            ; End of function Sonic_RollRepel
00015FB4                            		include	"_incObj\Sonic SlopeRepel.asm"
00015FB4                            ; ---------------------------------------------------------------------------
00015FB4                            ; Subroutine to	push Sonic down	a slope
00015FB4                            ; ---------------------------------------------------------------------------
00015FB4                            
00015FB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015FB4                            
00015FB4                            
00015FB4                            Sonic_SlopeRepel:
00015FB4 4E71                       		nop	
00015FB6 4A28 0038                  		tst.b	$38(a0)
00015FBA 6600                       		bne.s	locret_13580
00015FBC 4A68 003E                  		tst.w	$3E(a0)
00015FC0 6600                       		bne.s	loc_13582
00015FC2 1028 0026                  		move.b	obAngle(a0),d0
00015FC6 0600 0020                  		addi.b	#$20,d0
00015FCA 0200 00C0                  		andi.b	#$C0,d0
00015FCE 6700                       		beq.s	locret_13580
00015FD0 3028 0020                  		move.w	obInertia(a0),d0
00015FD4 6A00                       		bpl.s	loc_1356A
00015FD6 4440                       		neg.w	d0
00015FD8                            
00015FD8                            loc_1356A:
00015FD8 0C40 0280                  		cmpi.w	#$280,d0
00015FDC 6400                       		bcc.s	locret_13580
00015FDE 4268 0020                  		clr.w	obInertia(a0)
00015FE2 08E8 0001 0022             		bset	#1,obStatus(a0)
00015FE8 317C 001E 003E             		move.w	#$1E,$3E(a0)
00015FEE                            
00015FEE                            locret_13580:
00015FEE 4E75                       		rts	
00015FF0                            ; ===========================================================================
00015FF0                            
00015FF0                            loc_13582:
00015FF0 5368 003E                  		subq.w	#1,$3E(a0)
00015FF4 4E75                       		rts	
00015FF6                            ; End of function Sonic_SlopeRepel
00015FF6                            ; End of function Sonic_SlopeRepel
00015FF6                            		include	"_incObj\Sonic JumpAngle.asm"
00015FF6                            ; ---------------------------------------------------------------------------
00015FF6                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00015FF6                            ; ---------------------------------------------------------------------------
00015FF6                            
00015FF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015FF6                            
00015FF6                            
00015FF6                            Sonic_JumpAngle:
00015FF6 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
00015FFA 6700                       		beq.s	locret_135A2	; if already 0,	branch
00015FFC 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00015FFE                            
00015FFE 5400                       		addq.b	#2,d0		; increase angle
00016000 6400                       		bcc.s	loc_13596
00016002 7000                       		moveq	#0,d0
00016004                            
00016004                            loc_13596:
00016004 6000                       		bra.s	loc_1359E
00016006                            ; ===========================================================================
00016006                            
00016006                            loc_13598:
00016006 5500                       		subq.b	#2,d0		; decrease angle
00016008 6400                       		bcc.s	loc_1359E
0001600A 7000                       		moveq	#0,d0
0001600C                            
0001600C                            loc_1359E:
0001600C 1140 0026                  		move.b	d0,obAngle(a0)
00016010                            
00016010                            locret_135A2:
00016010 4E75                       		rts	
00016012                            ; End of function Sonic_JumpAngle
00016012                            ; End of function Sonic_JumpAngle
00016012                            		include	"_incObj\Sonic Floor.asm"
00016012                            ; ---------------------------------------------------------------------------
00016012                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00016012                            ; ---------------------------------------------------------------------------
00016012                            
00016012                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016012                            
00016012                            
00016012                            Sonic_Floor:
00016012 3228 0010                  		move.w	obVelX(a0),d1
00016016 3428 0012                  		move.w	obVelY(a0),d2
0001601A 4EB9 0000 3E34             		jsr	(CalcAngle).l
00016020 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00016024 0400 0020                  		subi.b	#$20,d0
00016028 11C0 FFED                  		move.b	d0,($FFFFFFED).w
0001602C 0200 00C0                  		andi.b	#$C0,d0
00016030 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00016034 0C00 0040                  		cmpi.b	#$40,d0
00016038 6700 0000                  		beq.w	loc_13680
0001603C 0C00 0080                  		cmpi.b	#$80,d0
00016040 6700 0000                  		beq.w	loc_136E2
00016044 0C00 00C0                  		cmpi.b	#$C0,d0
00016048 6700 0000                  		beq.w	loc_1373E
0001604C 6100 0000                  		bsr.w	Sonic_HitWall
00016050 4A41                       		tst.w	d1
00016052 6A00                       		bpl.s	loc_135F0
00016054 9368 0008                  		sub.w	d1,obX(a0)
00016058 317C 0000 0010             		move.w	#0,obVelX(a0)
0001605E                            
0001605E                            loc_135F0:
0001605E 6100 0000                  		bsr.w	sub_14EB4
00016062 4A41                       		tst.w	d1
00016064 6A00                       		bpl.s	loc_13602
00016066 D368 0008                  		add.w	d1,obX(a0)
0001606A 317C 0000 0010             		move.w	#0,obVelX(a0)
00016070                            
00016070                            loc_13602:
00016070 6100 0000                  		bsr.w	Sonic_HitFloor
00016074 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00016078 4A41                       		tst.w	d1
0001607A 6A00                       		bpl.s	locret_1367E
0001607C 1428 0012                  		move.b	obVelY(a0),d2
00016080 5002                       		addq.b	#8,d2
00016082 4402                       		neg.b	d2
00016084 B202                       		cmp.b	d2,d1
00016086 6C00                       		bge.s	loc_1361E
00016088 B002                       		cmp.b	d2,d0
0001608A 6D00                       		blt.s	locret_1367E
0001608C                            
0001608C                            loc_1361E:
0001608C D368 000C                  		add.w	d1,obY(a0)
00016090 1143 0026                  		move.b	d3,obAngle(a0)
00016094 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016098 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0001609E 1003                       		move.b	d3,d0
000160A0 0600 0020                  		addi.b	#$20,d0
000160A4 0200 0040                  		andi.b	#$40,d0
000160A8 6600                       		bne.s	loc_1365C
000160AA 1003                       		move.b	d3,d0
000160AC 0600 0010                  		addi.b	#$10,d0
000160B0 0200 0020                  		andi.b	#$20,d0
000160B4 6700                       		beq.s	loc_1364E
000160B6 E0E8 0012                  		asr	obVelY(a0)
000160BA 6000                       		bra.s	loc_13670
000160BC                            ; ===========================================================================
000160BC                            
000160BC                            loc_1364E:
000160BC 317C 0000 0012             		move.w	#0,obVelY(a0)
000160C2 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
000160C8 4E75                       		rts	
000160CA                            ; ===========================================================================
000160CA                            
000160CA                            loc_1365C:
000160CA 317C 0000 0010             		move.w	#0,obVelX(a0)
000160D0 0C68 0FC0 0012             		cmpi.w	#$FC0,obVelY(a0)
000160D6 6F00                       		ble.s	loc_13670
000160D8 317C 0FC0 0012             		move.w	#$FC0,obVelY(a0)
000160DE                            
000160DE                            loc_13670:
000160DE 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000160E4 4A03                       		tst.b	d3
000160E6 6A00                       		bpl.s	locret_1367E
000160E8 4468 0020                  		neg.w	obInertia(a0)
000160EC                            
000160EC                            locret_1367E:
000160EC 4E75                       		rts	
000160EE                            ; ===========================================================================
000160EE                            
000160EE                            loc_13680:
000160EE 6100 0000                  		bsr.w	Sonic_HitWall
000160F2 4A41                       		tst.w	d1
000160F4 6A00                       		bpl.s	loc_1369A
000160F6 9368 0008                  		sub.w	d1,obX(a0)
000160FA 317C 0000 0010             		move.w	#0,obVelX(a0)
00016100 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016106 4E75                       		rts	
00016108                            ; ===========================================================================
00016108                            
00016108                            loc_1369A:
00016108 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001610C 4A41                       		tst.w	d1
0001610E 6A00                       		bpl.s	loc_136B4
00016110 9368 000C                  		sub.w	d1,obY(a0)
00016114 4A68 0012                  		tst.w	obVelY(a0)
00016118 6A00                       		bpl.s	locret_136B2
0001611A 317C 0000 0012             		move.w	#0,obVelY(a0)
00016120                            
00016120                            locret_136B2:
00016120 4E75                       		rts	
00016122                            ; ===========================================================================
00016122                            
00016122                            loc_136B4:
00016122 4A68 0012                  		tst.w	obVelY(a0)
00016126 6B00                       		bmi.s	locret_136E0
00016128 6100 0000                  		bsr.w	Sonic_HitFloor
0001612C 4A41                       		tst.w	d1
0001612E 6A00                       		bpl.s	locret_136E0
00016130 D368 000C                  		add.w	d1,obY(a0)
00016134 1143 0026                  		move.b	d3,obAngle(a0)
00016138 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001613C 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016142 317C 0000 0012             		move.w	#0,obVelY(a0)
00016148 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
0001614E                            
0001614E                            locret_136E0:
0001614E 4E75                       		rts	
00016150                            ; ===========================================================================
00016150                            
00016150                            loc_136E2:
00016150 6100 0000                  		bsr.w	Sonic_HitWall
00016154 4A41                       		tst.w	d1
00016156 6A00                       		bpl.s	loc_136F4
00016158 9368 0008                  		sub.w	d1,obX(a0)
0001615C 317C 0000 0010             		move.w	#0,obVelX(a0)
00016162                            
00016162                            loc_136F4:
00016162 6100 0000                  		bsr.w	sub_14EB4
00016166 4A41                       		tst.w	d1
00016168 6A00                       		bpl.s	loc_13706
0001616A D368 0008                  		add.w	d1,obX(a0)
0001616E 317C 0000 0010             		move.w	#0,obVelX(a0)
00016174                            
00016174                            loc_13706:
00016174 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016178 4A41                       		tst.w	d1
0001617A 6A00                       		bpl.s	locret_1373C
0001617C 9368 000C                  		sub.w	d1,obY(a0)
00016180 1003                       		move.b	d3,d0
00016182 0600 0020                  		addi.b	#$20,d0
00016186 0200 0040                  		andi.b	#$40,d0
0001618A 6600                       		bne.s	loc_13726
0001618C 317C 0000 0012             		move.w	#0,obVelY(a0)
00016192 4E75                       		rts	
00016194                            ; ===========================================================================
00016194                            
00016194                            loc_13726:
00016194 1143 0026                  		move.b	d3,obAngle(a0)
00016198 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001619C 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000161A2 4A03                       		tst.b	d3
000161A4 6A00                       		bpl.s	locret_1373C
000161A6 4468 0020                  		neg.w	obInertia(a0)
000161AA                            
000161AA                            locret_1373C:
000161AA 4E75                       		rts	
000161AC                            ; ===========================================================================
000161AC                            
000161AC                            loc_1373E:
000161AC 6100 0000                  		bsr.w	sub_14EB4
000161B0 4A41                       		tst.w	d1
000161B2 6A00                       		bpl.s	loc_13758
000161B4 D368 0008                  		add.w	d1,obX(a0)
000161B8 317C 0000 0010             		move.w	#0,obVelX(a0)
000161BE 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000161C4 4E75                       		rts	
000161C6                            ; ===========================================================================
000161C6                            
000161C6                            loc_13758:
000161C6 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000161CA 4A41                       		tst.w	d1
000161CC 6A00                       		bpl.s	loc_13772
000161CE 9368 000C                  		sub.w	d1,obY(a0)
000161D2 4A68 0012                  		tst.w	obVelY(a0)
000161D6 6A00                       		bpl.s	locret_13770
000161D8 317C 0000 0012             		move.w	#0,obVelY(a0)
000161DE                            
000161DE                            locret_13770:
000161DE 4E75                       		rts	
000161E0                            ; ===========================================================================
000161E0                            
000161E0                            loc_13772:
000161E0 4A68 0012                  		tst.w	obVelY(a0)
000161E4 6B00                       		bmi.s	locret_1379E
000161E6 6100 0000                  		bsr.w	Sonic_HitFloor
000161EA 4A41                       		tst.w	d1
000161EC 6A00                       		bpl.s	locret_1379E
000161EE D368 000C                  		add.w	d1,obY(a0)
000161F2 1143 0026                  		move.b	d3,obAngle(a0)
000161F6 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000161FA 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016200 317C 0000 0012             		move.w	#0,obVelY(a0)
00016206 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
0001620C                            
0001620C                            locret_1379E:
0001620C 4E75                       		rts	
0001620E                            ; End of function Sonic_Floor
0001620E                            ; End of function Sonic_Floor
0001620E                            		include	"_incObj\Sonic ResetOnFloor.asm"
0001620E                            ; ---------------------------------------------------------------------------
0001620E                            ; Subroutine to	reset Sonic's mode when he lands on the floor
0001620E                            ; ---------------------------------------------------------------------------
0001620E                            
0001620E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001620E                            
0001620E                            
0001620E                            Sonic_ResetOnFloor:            ; XREF: PlatformObject; et al
0001620E 4238 F5CD                  		clr.b	(v_homingattack).w
00016212 08A8 0005 0022                     	bclr    #5,$22(a0)
00016218 08A8 0001 0022                     	bclr    #1,$22(a0)
0001621E 0828 0002 0022                     	btst    #2,$22(a0)
00016224 6700                               	beq.s    loc_137E4
00016226 08A8 0002 0022             		bclr	#2,obStatus(a0)
0001622C 117C 0013 0016             		move.b	#$13,obHeight(a0)
00016232 117C 0009 0017             		move.b	#9,obWidth(a0)
00016238 117C 0000 001C             		move.b	#id_Walk,obAnim(a0) ; use running/walking animation
0001623E 5B68 000C                  		subq.w	#5,obY(a0)
00016242                            
00016242                            loc_137E4:
00016242 117C 0000 003C             		move.b	#0,$3C(a0)
00016248 31FC 0000 F7D0             		move.w	#0,(v_itembonus).w
0001624E 4E75                       		rts	
00016250                            ; End of function Sonic_ResetOnFloor
00016250                            ; End of function Sonic_ResetOnFloor
00016250                            		include	"_incObj\Sonic (part 2).asm"
00016250                            ; ---------------------------------------------------------------------------
00016250                            ; Sonic	when he	gets hurt
00016250                            ; ---------------------------------------------------------------------------
00016250                            
00016250                            Sonic_Hurt:	; Routine 4
00016250 4EB9 0000 F4A6             		jsr	(SpeedToPos).l
00016256 0668 0030 0012             		addi.w	#$30,obVelY(a0)
0001625C 0828 0006 0022             		btst	#6,obStatus(a0)
00016262 6700                       		beq.s	loc_1380C
00016264 0468 0020 0012             		subi.w	#$20,obVelY(a0)
0001626A                            
0001626A                            loc_1380C:
0001626A 6100 0000                  		bsr.w	Sonic_HurtStop
0001626E 6100 FAF0                  		bsr.w	Sonic_LevelBound
00016272 6100 EFB0                  		bsr.w	Sonic_RecordPosition
00016276 6100 0000                  		bsr.w	Sonic_Animate
0001627A 6100 0000                  		bsr.w	Sonic_LoadGfx
0001627E 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
00016284                            
00016284                            ; ---------------------------------------------------------------------------
00016284                            ; Subroutine to	stop Sonic falling after he's been hurt
00016284                            ; ---------------------------------------------------------------------------
00016284                            
00016284                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016284                            
00016284                            
00016284                            Sonic_HurtStop:
00016284 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00016288 0640 00E0                  		addi.w	#$E0,d0
0001628C                            		;cmp.w	obY(a0),d0
0001628C                            		;bcs.w	KillSonic
0001628C 6100 FD84                  		bsr.w	Sonic_Floor
00016290 0828 0001 0022             		btst	#1,obStatus(a0)
00016296 6600                       		bne.s	locret_13860
00016298 7000                       		moveq	#0,d0
0001629A 3140 0012                  		move.w	d0,obVelY(a0)
0001629E 3140 0010                  		move.w	d0,obVelX(a0)
000162A2 3140 0020                  		move.w	d0,obInertia(a0)
000162A6 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000162AC 5528 0024                  		subq.b	#2,obRoutine(a0)
000162B0 317C 0078 0030             		move.w	#$78,$30(a0)
000162B6                            
000162B6                            locret_13860:
000162B6 4E75                       		rts	
000162B8                            ; End of function Sonic_HurtStop
000162B8                            
000162B8                            ; ---------------------------------------------------------------------------
000162B8                            ; Sonic	when he	dies
000162B8                            ; ---------------------------------------------------------------------------
000162B8                            
000162B8                            Sonic_Death:	; Routine 6
000162B8 6100 0000                  		bsr.w	GameOver
000162BC 4EB9 0000 F46E             		jsr	(ObjectFall).l
000162C2 6100 EF60                  		bsr.w	Sonic_RecordPosition
000162C6 6100 0000                  		bsr.w	Sonic_Animate
000162CA 6100 0000                  		bsr.w	Sonic_LoadGfx
000162CE 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
000162D4                            
000162D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000162D4                            
000162D4                            GameOver:
000162D4 3038 F72E                  		move.w	(v_limitbtm2).w,d0
000162D8 0640 0100                  		addi.w	#$100,d0
000162DC B068 000C                  		cmp.w	obY(a0),d0
000162E0 6400 0000                  		bcc.w	locret_13900
000162E4 317C FFC8 0012             		move.w	#-$38,obVelY(a0)
000162EA 5428 0024                  		addq.b	#2,obRoutine(a0)
000162EE 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
000162F2 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update lives counter
000162F6 5338 FE12                  		subq.b	#1,(v_lives).w	; subtract 1 from number of lives
000162FA 6600                       		bne.s	loc_138D4
000162FC 317C 0000 003A             		move.w	#0,$3A(a0)
00016302 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load GAME object
00016308 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
0001630E 11FC 0001 D0DA             		move.b	#1,(v_objspace+$C0+obFrame).w ; set OVER object to correct frame
00016314 4238 FE1A                  		clr.b	(f_timeover).w
00016318                            
00016318                            loc_138C2:
00016322 7003                       		moveq	#3,d0
00016324 4EF9 0000 173A             		jmp	(AddPLC).l	; load game over patterns
0001632A                            		
0001632A                            loc_138C3:
00016334 7003                       		moveq	#3,d0
00016336 4EF9 0000 173A             		jmp	(AddPLC).l	; load game over patterns
0001633C                            ; ===========================================================================
0001633C                            
0001633C                            loc_138D4:
0001633C 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00016342 4A38 FE1A                  		tst.b	(f_timeover).w	; is TIME OVER tag set?
00016346 6700                       		beq.s	locret_13900	; if not, branch
00016348 317C 0000 003A             		move.w	#0,$3A(a0)
0001634E 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load TIME object
00016354 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
0001635A 11FC 0002 D09A             		move.b	#2,(v_objspace+$80+obFrame).w
00016360 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
00016366 60B0                       		bra.s	loc_138C2
00016368                            		
00016368                            
00016368                            ; ===========================================================================
00016368                            
00016368                            locret_13900:
00016368 4E75                       		rts	
0001636A                            ; End of function GameOver
0001636A                            
0001636A                            ; ---------------------------------------------------------------------------
0001636A                            ; Sonic	when the level is restarted
0001636A                            ; ---------------------------------------------------------------------------
0001636A                            
0001636A                            Sonic_ResetLevel:; Routine 8
0001636A 4A68 003A                  		tst.w	$3A(a0)
0001636E 6700                       		beq.s	locret_13914
00016370 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00016374 6600                       		bne.s	locret_13914
00016376 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
0001637C                            
0001637C                            	locret_13914:
0001637C 4E75                       		rts	
0001637C 4E75                       		rts	
0001637E                            		include	"_incObj\Sonic Loops.asm"
0001637E                            ; ---------------------------------------------------------------------------
0001637E                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
0001637E                            ; ---------------------------------------------------------------------------
0001637E                            
0001637E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001637E                            
0001637E                            
0001637E                            Sonic_Loops:
0001637E 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; is level SLZ ?
00016384 6700                       		beq.s	@isstarlight	; if yes, branch
00016386 4A38 FE10                  		tst.b	(v_zone).w	; is level GHZ ?
0001638A 6600 0000                  		bne.w	@noloops	; if not, branch
0001638E                            
0001638E                            	@isstarlight:
0001638E 3028 000C                  		move.w	obY(a0),d0
00016392 E248                       		lsr.w	#1,d0
00016394 0240 0380                  		andi.w	#$380,d0
00016398 1228 0008                  		move.b	obX(a0),d1
0001639C 0241 007F                  		andi.w	#$7F,d1
000163A0 D041                       		add.w	d1,d0
000163A2 43F8 A400                  		lea	(v_lvllayout).w,a1
000163A6 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
000163AA                            
000163AA B238 F7AE                  		cmp.b	(v_256roll1).w,d1 ; is Sonic on a "roll tunnel" tile?
000163AE 6700 FA6C                  		beq.w	Sonic_ChkRoll	; if yes, branch
000163B2 B238 F7AF                  		cmp.b	(v_256roll2).w,d1
000163B6 6700 FA64                  		beq.w	Sonic_ChkRoll
000163BA                            
000163BA B238 F7AC                  		cmp.b	(v_256loop1).w,d1 ; is Sonic on a loop tile?
000163BE 6700                       		beq.s	@chkifleft	; if yes, branch
000163C0 B238 F7AD                  		cmp.b	(v_256loop2).w,d1
000163C4 6700                       		beq.s	@chkifinair
000163C6 08A8 0006 0001             		bclr	#6,obRender(a0) ; return Sonic to high plane
000163CC 4E75                       		rts	
000163CE                            ; ===========================================================================
000163CE                            
000163CE                            @chkifinair:
000163CE 0828 0001 0022             		btst	#1,obStatus(a0)	; is Sonic in the air?
000163D4 6700                       		beq.s	@chkifleft	; if not, branch
000163D6                            
000163D6 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
000163DC 4E75                       		rts	
000163DE                            ; ===========================================================================
000163DE                            
000163DE                            @chkifleft:
000163DE 3428 0008                  		move.w	obX(a0),d2
000163E2 0C02 002C                  		cmpi.b	#$2C,d2
000163E6 6400                       		bcc.s	@chkifright
000163E8                            
000163E8 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
000163EE 4E75                       		rts	
000163F0                            ; ===========================================================================
000163F0                            
000163F0                            @chkifright:
000163F0 0C02 00E0                  		cmpi.b	#$E0,d2
000163F4 6500                       		bcs.s	@chkangle1
000163F6                            
000163F6 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
000163FC 4E75                       		rts	
000163FE                            ; ===========================================================================
000163FE                            
000163FE                            @chkangle1:
000163FE 0828 0006 0001             		btst	#6,obRender(a0) ; is Sonic on low plane?
00016404 6600                       		bne.s	@chkangle2	; if yes, branch
00016406                            
00016406 1228 0026                  		move.b	obAngle(a0),d1
0001640A 6700                       		beq.s	@done
0001640C 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upside-down?
00016410 6200                       		bhi.s	@done		; if yes, branch
00016412 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
00016418 4E75                       		rts	
0001641A                            ; ===========================================================================
0001641A                            
0001641A                            @chkangle2:
0001641A 1228 0026                  		move.b	obAngle(a0),d1
0001641E 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upright?
00016422 6300                       		bls.s	@done		; if yes, branch
00016424 08A8 0006 0001             		bclr	#6,obRender(a0)	; send Sonic to	high plane
0001642A                            
0001642A                            @noloops:
0001642A                            @done:
0001642A 4E75                       		rts	
0001642C                            ; End of function Sonic_Loops
0001642C                            ; End of function Sonic_Loops
0001642C                            		include	"_incObj\Sonic Animate.asm"
0001642C                            ; ---------------------------------------------------------------------------
0001642C                            ; Subroutine to	animate	Sonic's sprites
0001642C                            ; ---------------------------------------------------------------------------
0001642C                            
0001642C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001642C                            
0001642C                            
0001642C                            Sonic_Animate:				; XREF: Obj01_Control; et al
0001642C 43F9 0000 0000             		lea	(Ani_Sonic).l,a1
00016432 7000                       		moveq	#0,d0
00016434 1028 001C                  		move.b	obAnim(a0),d0
00016438 B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
0001643C 6700                       		beq.s	@do		; if not, branch
0001643E 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
00016442 4228 001B                  		clr.b	obAniFrame(a0) ; reset animation
00016446 4228 001E                  		clr.b	obTimeFrame(a0) ; reset frame duration
0001644A                            		
0001644A 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag	;Mercury Pushing While Walking Fix	;Mercury Constants
00016450                            
00016450                            	@do:
00016450 D040                       		add.w	d0,d0
00016452 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00016456 1011                       		move.b	(a1),d0
00016458 6B00                       		bmi.s	@walkrunroll	; if animation is walk/run/roll/jump, branch
0001645A 1228 0022                  		move.b	obStatus(a0),d1
0001645E 0201 0001                  		andi.b	#1,d1
00016462 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016468 8328 0001                  		or.b	d1,obRender(a0)
0001646C 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016470 6A00                       		bpl.s	@delay		; if time remains, branch
00016472 1140 001E                  		move.b	d0,obTimeFrame(a0) ; load frame duration
00016476                            
00016476                            @loadframe:
00016476 7200                       		moveq	#0,d1
00016478 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0001647C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00016480 0C00 00FD                  		cmp.b	#$FD,d0				; MJ: is it a flag from FD to FF?
00016484 6400 0000                  		bhs		@end_FF				; MJ: if so, branch to flag routines
00016488                            
00016488                            	@next:
00016488 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0001648C 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
00016490                            
00016490                            	@delay:
00016490 4E75                       		rts	
00016492                            ; ===========================================================================
00016492                            
00016492                            @end_FF:
00016492 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00016494 6600                       		bne.s	@end_FE		; if not, branch
00016496 4228 001B                  		clr.b	obAniFrame(a0) ; restart the animation
0001649A 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001649E 60E8                       		bra.s	@next
000164A0                            ; ===========================================================================
000164A0                            
000164A0                            @end_FE:
000164A0 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
000164A2 6600                       		bne.s	@end_FD		; if not, branch
000164A4 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
000164A8 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
000164AC 9200                       		sub.b	d0,d1
000164AE 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000164B2 60D4                       		bra.s	@next
000164B4                            ; ===========================================================================
000164B4                            
000164B4                            @end_FD:
000164B4 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000164B6 6600                       		bne.s	@end		; if not, branch
000164B8 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
000164BE                            
000164BE                            	@end:
000164BE 4E75                       		rts	
000164C0                            ; ===========================================================================
000164C0                            
000164C0                            @walkrunroll:
000164C0 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
000164C4 6ACA                       		bpl.s	@delay		; if time remains, branch
000164C6 5200                       		addq.b	#1,d0		; is animation walking/running?
000164C8 6600 0000                  		bne.w	@rolljump	; if not, branch
000164CC 7200                       		moveq	#0,d1
000164CE 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
000164D2 6B00                       		bmi.s	@ble 			; better handling of angles
000164D4 6700                       		beq.s	@ble
000164D6 5300                       		subq.b	#1,d0
000164D8                            
000164D8                            	@ble:																
000164D8 1428 0022                  		move.b	obStatus(a0),d2
000164DC 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
000164E0 6600                       		bne.s	@flip		; if yes, branch
000164E2 4600                       		not.b	d0		; reverse angle
000164E4                            
000164E4                            	@flip:
000164E4 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
000164E8 6A00                       		bpl.s	@noinvert	; if angle is $0-$7F, branch
000164EA 7203                       		moveq	#3,d1
000164EC                            
000164EC                            	@noinvert:
000164EC 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
000164F2 B302                       		eor.b	d1,d2
000164F4 8528 0001                  		or.b	d2,obRender(a0)
000164F8 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing something?	;Mercury Constants
000164FE 6600 0000                  		bne.w	@push		; if yes, branch
00016502                            
00016502 E808                       		lsr.b	#4,d0		; divide angle by $10
00016504 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00016508 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
0001650C 6A00                       		bpl.s	@nomodspeed
0001650E 4442                       		neg.w	d2		; modulus speed
00016510                            
00016510                            	@nomodspeed:
00016510 43F9 0000 0000             		lea	(SonAni_MaxRun).l,a1 ; use	Dashing	animation
00016516 0C42 0A00                  		cmpi.w	#$A00,d2	; is Sonic at Dashing speed?
0001651A 6400                       		bcc.s	@maxrunning	; if yes, branch
0001651C                            
0001651C 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00016522 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00016526 6400                       		bcc.s	@running	; if yes, branch
00016528                            
00016528 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
0001652E                            
0001652E                            	@running:
0001652E D000                       		add.b	d0,d0
00016530 D000                       		add.b	d0,d0
00016532 1600                       		move.b	d0,d3
00016534 4442                       		neg.w	d2
00016536 0642 0780                  		addi.w	#$780,d2
0001653A 6A00                       		bpl.s	@belowmax
0001653C 7400                       		moveq	#0,d2		; max animation speed
0001653E 6000                       		bra.s	@belowmax
00016540                            
00016540                            	@maxrunning:
00016540 D000                       		add.b d0,d0
00016542 1600                       		move.b d0,d3
00016544 4442                       		neg.w d2
00016546 0642 0800                  		addi.w #$800, d2
0001654A 6A00                       		bpl.s @belowmax
0001654C 7400                       		moveq #0, d2 
0001654E                            
0001654E                            	@belowmax:
0001654E E04A                       		lsr.w	#8,d2
00016550 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016554 6100 FF20                  		bsr.w	@loadframe
00016558 D728 001A                  		add.b	d3,obFrame(a0)	; modify frame number
0001655C 4E75                       		rts	
0001655E                            ; ===========================================================================
0001655E                            
0001655E                            @rolljump:
0001655E 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00016560 6600                       		bne.s	@push		; if not, branch
00016562 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016566 6A00                       		bpl.s	@nomodspeed2
00016568 4442                       		neg.w	d2
0001656A                            
0001656A                            	@nomodspeed2:
0001656A 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00016570 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00016574 6400                       		bcc.s	@rollfast	; if yes, branch
00016576 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
0001657C                            
0001657C                            	@rollfast:
0001657C 4442                       		neg.w	d2
0001657E 0642 0400                  		addi.w	#$400,d2
00016582 6A00                       		bpl.s	@belowmax2
00016584 7400                       		moveq	#0,d2
00016586                            
00016586                            	@belowmax2:
00016586 E04A                       		lsr.w	#8,d2
00016588 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
0001658C 1228 0022                  		move.b	obStatus(a0),d1
00016590 0201 0001                  		andi.b	#1,d1
00016594 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001659A 8328 0001                  		or.b	d1,obRender(a0)
0001659E 6000 FED6                  		bra.w	@loadframe
000165A2                            ; ===========================================================================
000165A2                            
000165A2                            @push:
000165A2 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
000165A6 6B00                       		bmi.s	@negspeed
000165A8 4442                       		neg.w	d2
000165AA                            
000165AA                            	@negspeed:
000165AA 0642 0800                  		addi.w	#$800,d2
000165AE 6A00                       		bpl.s	@belowmax3	
000165B0 7400                       		moveq	#0,d2
000165B2                            
000165B2                            	@belowmax3:
000165B2 EC4A                       		lsr.w	#6,d2
000165B4 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
000165B8 43F9 0000 0000             		lea	(SonAni_Push).l,a1
000165BE 1228 0022                  		move.b	obStatus(a0),d1
000165C2 0201 0001                  		andi.b	#1,d1
000165C6 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
000165CC 8328 0001                  		or.b	d1,obRender(a0)
000165D0 6000 FEA4                  		bra.w	@loadframe
000165D4                            
000165D4                            ; End of function Sonic_Animate
000165D4                            ; End of function Sonic_Animate
000165D4                            		include	"_anim\Sonic.asm"
000165D4                            ; ---------------------------------------------------------------------------
000165D4                            ; Animation script - Sonic
000165D4                            ; ---------------------------------------------------------------------------
000165D4                            Ani_Sonic:
000165D4                            
000165D4 0000                       ptr_Walk:	dc.w SonAni_Walk-Ani_Sonic
000165D6 0000                       ptr_Run:	dc.w SonAni_Run-Ani_Sonic
000165D8 0000                       ptr_Roll:	dc.w SonAni_Roll-Ani_Sonic
000165DA 0000                       ptr_Roll2:	dc.w SonAni_Roll2-Ani_Sonic
000165DC 0000                       ptr_Push:	dc.w SonAni_Push-Ani_Sonic
000165DE 0000                       ptr_Wait:	dc.w SonAni_Wait-Ani_Sonic
000165E0 0000                       ptr_Balance:	dc.w SonAni_Balance-Ani_Sonic
000165E2 0000                       ptr_LookUp:	dc.w SonAni_LookUp-Ani_Sonic
000165E4 0000                       ptr_Duck:	dc.w SonAni_Duck-Ani_Sonic
000165E6 0000                       ptr_Warp1:	dc.w SonAni_Warp1-Ani_Sonic
000165E8 0000                       ptr_Warp2:	dc.w SonAni_Warp2-Ani_Sonic
000165EA 0000                       ptr_Warp3:	dc.w SonAni_Warp3-Ani_Sonic
000165EC 0000                       ptr_Warp4:	dc.w SonAni_Warp4-Ani_Sonic
000165EE 0000                       ptr_Stop:	dc.w SonAni_Stop-Ani_Sonic
000165F0 0000                       ptr_Float1:	dc.w SonAni_Float1-Ani_Sonic
000165F2 0000                       ptr_Float2:	dc.w SonAni_Float2-Ani_Sonic
000165F4 0000                       ptr_Spring:	dc.w SonAni_Spring-Ani_Sonic
000165F6 0000                       ptr_Hang:	dc.w SonAni_Hang-Ani_Sonic
000165F8 0000                       ptr_Leap1:	dc.w SonAni_Leap1-Ani_Sonic
000165FA 0000                       ptr_Leap2:	dc.w SonAni_Leap2-Ani_Sonic
000165FC 0000                       ptr_Surf:	dc.w SonAni_Surf-Ani_Sonic
000165FE 0000                       ptr_GetAir:	dc.w SonAni_GetAir-Ani_Sonic
00016600 0000                       ptr_Burnt:	dc.w SonAni_Burnt-Ani_Sonic
00016602 0000                       ptr_Drown:	dc.w SonAni_Drown-Ani_Sonic
00016604 0000                       ptr_Death:	dc.w SonAni_Death-Ani_Sonic
00016606 0000                       ptr_Hurt:	dc.w SonAni_Hurt-Ani_Sonic
00016608 0000                       ptr_WaterSlide:	dc.w SonAni_WaterSlide-Ani_Sonic
0001660A 0000                       ptr_Null:	dc.w SonAni_Null-Ani_Sonic
0001660C 0000                       ptr_Float3:	dc.w SonAni_Float3-Ani_Sonic
0001660E 0000                       ptr_Float4:	dc.w SonAni_Float4-Ani_Sonic
00016610 0000                       ptr_MaxRun:	dc.w SonAni_MaxRun-Ani_Sonic
00016612 0000                       ptr_Spindash:	dc.w SonAni_SpinDash-Ani_Sonic ;1F
00016614 0000                       ptr_Hurt2:	dc.w SonAni_Hurt2-Ani_Sonic
00016616 0000                       ptr_GetUp:	dc.w SonAni_GetUp-Ani_Sonic
00016618 0000                       ptr_Blink:	dc.w SonAni_Blink-Ani_Sonic
0001661A 0000                       ptr_Sit:	dc.w SonAni_Sit-Ani_Sonic
0001661C 0000                       ptr_Peelout:	dc.w SonAni_Peelout-Ani_Sonic
0001661E 0000                       ptr_Hang2:	dc.w SonAni_Hang2-Ani_Sonic
00016620 0000                       ptr_GetAir2:	dc.w SonAni_GetAir2-Ani_Sonic
00016622 0000                       ptr_Transform:	dc.w SonAni_Transform-Ani_Sonic
00016624                            
00016624 FF10 1112 1314 150E 0FFF+  SonAni_Walk:	dc.b $FF, fr_walk13, fr_walk14,	fr_walk15, fr_walk16, fr_walk17, fr_walk18, fr_walk11, fr_walk12, afEnd, afEnd, afEnd, afEnd
00016632 00                         		even
00016632 FF2E 2F30 3132 3334 35FF+  SonAni_Run:	dc.b $FF, fr_run11,  fr_run12,  fr_run13,  fr_run14, fr_run15,  fr_run16,  fr_run17,  fr_run18, afEnd, afEnd, afEnd, afEnd
00016640 00                         		even
00016640 FE5E 5F60 6162 66          SonAni_Roll:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016647 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
0001664E 00                         		even
0001664E FE5E 5F60 6162 66          SonAni_Roll2:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016655 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
0001665C 00                         		even
0001665C 0D89 8A8B 8C8D 8E8F 90FF+  SonAni_Push:	dc.b $D,  fr_push1,  fr_push2,  fr_push3,  fr_push4, fr_push5,  fr_push6,  fr_push7,  fr_push8, afEnd, afEnd, afEnd, afEnd
0001666A 00                         		even
0001666A                            SonAni_Wait:	
0001666A 0501 0101 0101 0101 0102+  		dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016679 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016688 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016697 0203 0303 0404 0505 0506+  		dc.b   2,  3,  3,  3,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  7
000166A6 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
000166B5 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
000166C4 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
000166D3 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
000166E2 0808 0909 0A0A FE04        		dc.b   8,  8,  9,  9,  $A, $A, $FE, 4
000166EA                            		even
000166EA 0F72 7374 75FF             SonAni_Balance:	dc.b $F, fr_balance1, fr_balance2, fr_balance3, fr_balance4, afEnd
000166F0                            		even
000166F0 030C 0DFE 01               SonAni_LookUp:	dc.b $3, fr_lookup1, fr_lookup2, afBack, 1
000166F6 00                         		even
000166F6 0270 71FE 01               SonAni_Duck:	dc.b $2, fr_duck2, fr_duck, afBack, 1
000166FC 00                         		even
000166FC 3F67 FF                    SonAni_Warp1:	dc.b $3F, fr_warp1, afEnd
00016700 00                         		even
00016700 3F68 FF                    SonAni_Warp2:	dc.b $3F, fr_warp2, afEnd
00016704 00                         		even
00016704 3F69 FF                    SonAni_Warp3:	dc.b $3F, fr_warp3, afEnd
00016708 00                         		even
00016708 3F6A FF                    SonAni_Warp4:	dc.b $3F, fr_warp4, afEnd
0001670C 00                         		even
0001670C 026B 6C6C 6D6D 6E6E FD00   SonAni_Stop:	dc.b 2,	fr_stop1, fr_stop2, fr_stop2, fr_stop3, fr_stop3, fr_stop4, fr_stop4, $FD,  0
00016716                            		even
00016716 077C 82FE 02               SonAni_Float1:	dc.b 7,	fr_float1, fr_float4, afBack, 2
0001671C 00                         		even
0001671C 037C 7D7E 7F80 817B FF     SonAni_Float2:	dc.b 3,	fr_float1, fr_float7, fr_float2, fr_float8, fr_float5, fr_float3, fr_float6, afEnd
00016726 00                         		even
00016726 0783 8483 8483 84FD 00     SonAni_Spring:	dc.b 7, fr_spring, fr_spring2, fr_spring, fr_spring2, fr_spring, fr_spring2, afChange, id_Walk
00016730 00                         		even
00016730 0485 86FF                  SonAni_Hang:	dc.b 4,	fr_hang1, fr_hang2, afEnd
00016734                            		even
00016734 036F 8888 8888 8888 6F87+  SonAni_Leap1:	dc.b $3, fr_leap3, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap3, fr_leap1, afBack, 1
00016740                            		even
00016740 0D87 FD00                  SonAni_Leap2:	dc.b $D, fr_leap1, afChange, id_Leap1
00016744                            		even
00016744 3F91 FF                    SonAni_Surf:	dc.b $3F, fr_surf, afEnd
00016748 00                         		even
00016748 0B95 FD00                  SonAni_GetAir:	dc.b $B, fr_getair, afChange, id_GetAir2
0001674C                            		even
0001674C 2092 FF                    SonAni_Burnt:	dc.b $20, fr_burnt, afEnd
00016750 00                         		even
00016750 2F93 FF                    SonAni_Drown:	dc.b $2F, fr_drown, afEnd
00016754 00                         		even
00016754 0394 FF                    SonAni_Death:	dc.b 3,	fr_death, afEnd
00016758 00                         		even
00016758 0396 FF                    SonAni_Hurt:	dc.b 3,	fr_injury, afEnd
0001675C 00                         		even
0001675C                            SonAni_WaterSlide:
0001675C 0796 97FF                  		dc.b 7, fr_injury, fr_waterslide, afEnd
00016760                            		even
00016760 7700 FD00                  SonAni_Null:	dc.b $77, fr_null, afChange, id_Walk
00016764                            		even
00016764 037C 7E80 817B FF          SonAni_Float3:	dc.b 3,	fr_float1, fr_float2, fr_float5, fr_float3, fr_float6, afEnd
0001676C 00                         		even
0001676C 037C FD00                  SonAni_Float4:	dc.b 3,	fr_float1, afChange, id_Walk
00016770                            		even
00016770 FF4E 4F50 51FF FFFF FFFF+  SonAni_MaxRun:  dc.b $FF, fr_peelout11, fr_peelout12, fr_peelout13, fr_peelout14, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd
0001677E 00                         		even
0001677E 009B 9C9B 9D9B 9E9B 9F9B+  SonAni_SpinDash: dc.b 0, fr_Spindash1, fr_spindash2, fr_spindash1, fr_spindash3, fr_spindash1, fr_spindash4, fr_spindash1, fr_spindash5, fr_spindash1, fr_spindash6, afEnd
0001678A                            		even
0001678A 0298 9699 FF               SonAni_Hurt2:	dc.b 2, fr_skele1, fr_injury, fr_skele2, afEnd	
00016790 00                         		even
00016790 030B FD00                  SonAni_GetUp:	dc.b 3, $B,$FD,  0
00016794                            		even
00016794 0102 FD00                  SonAni_Blink:	dc.b   1,  2,$FD,  0
00016798                            		even
00016798 0808 0909 0A0A 09FE 05     SonAni_Sit:	dc.b   8, 8, 9, 9, $A, $A,  9, $FE, 5
000167A2 00                         		even
000167A2 000E 0E0E 0E0E 0E0F 0F     SonAni_Peelout: dc.b 	0, $E, $E, $E, $E, $E, $E, $F, $F
000167AB 0F0F 1010 1111 1213        		dc.b	$F, $F, $10, $10, $11, $11, $12, $13
000167B3 1415 2E2F 3031 32          		dc.b	$14, $15, $2E, $2F, $30, $31, $32
000167BA 3334 35                    		dc.b	$33, $34, $35
000167BD 4E4F 5051 FE04 FE          		dc.b	$4E, $4F, $50,  $51, -2, 4, $FE
000167C4                            		even
000167C4 137A 7879 78FF             SonAni_Hang2:	dc.b $13, fr_vhang3, fr_vhang1, fr_vhang2, fr_vhang1, $FF	
000167CA                            		even
000167CA 0576 FD00                  SonAni_GetAir2: dc.b $5, fr_getair2, afChange, id_Roll
000167CE                            		even
000167CE                            SonAni_Transform:
000167CE 02A1 A1A2 A3A3 A4A4 A4A5   				dc.b 2, $A1,$A1,$A2,$A3,$A3,$A4,$A4,$A4,$A5
000167D8 A6A5 A7A7 A9A8 A9A8 A9A8+  		dc.b	$A6,$A5,$A7,$A7,$A9,$A8,$A9,$A8,$A9,$A8, afchange, id_Walk
000167E4                            		even
000167E4                            
000167E4 =00000000                  id_Walk:	equ (ptr_Walk-Ani_Sonic)/2	; 0
000167E4 =00000001                  id_Run:		equ (ptr_Run-Ani_Sonic)/2	; 1
000167E4 =00000002                  id_Roll:	equ (ptr_Roll-Ani_Sonic)/2	; 2
000167E4 =00000003                  id_Roll2:	equ (ptr_Roll2-Ani_Sonic)/2	; 3
000167E4 =00000004                  id_Push:	equ (ptr_Push-Ani_Sonic)/2	; 4
000167E4 =00000005                  id_Wait:	equ (ptr_Wait-Ani_Sonic)/2	; 5
000167E4 =00000006                  id_Balance:	equ (ptr_Balance-Ani_Sonic)/2	; 6
000167E4 =00000007                  id_LookUp:	equ (ptr_LookUp-Ani_Sonic)/2	; 7
000167E4 =00000008                  id_Duck:	equ (ptr_Duck-Ani_Sonic)/2	; 8
000167E4 =00000009                  id_Warp1:	equ (ptr_Warp1-Ani_Sonic)/2	; 9
000167E4 =0000000A                  id_Warp2:	equ (ptr_Warp2-Ani_Sonic)/2	; $A
000167E4 =0000000B                  id_Warp3:	equ (ptr_Warp3-Ani_Sonic)/2	; $B
000167E4 =0000000C                  id_Warp4:	equ (ptr_Warp4-Ani_Sonic)/2	; $C
000167E4 =0000000D                  id_Stop:	equ (ptr_Stop-Ani_Sonic)/2	; $D
000167E4 =0000000E                  id_Float1:	equ (ptr_Float1-Ani_Sonic)/2	; $E
000167E4 =0000000F                  id_Float2:	equ (ptr_Float2-Ani_Sonic)/2	; $F
000167E4 =00000010                  id_Spring:	equ (ptr_Spring-Ani_Sonic)/2	; $10
000167E4 =00000011                  id_Hang:	equ (ptr_Hang-Ani_Sonic)/2	; $11
000167E4 =00000012                  id_Leap1:	equ (ptr_Leap1-Ani_Sonic)/2	; $12
000167E4 =00000013                  id_Leap2:	equ (ptr_Leap2-Ani_Sonic)/2	; $13
000167E4 =00000014                  id_Surf:	equ (ptr_Surf-Ani_Sonic)/2	; $14
000167E4 =00000015                  id_GetAir:	equ (ptr_GetAir-Ani_Sonic)/2	; $15
000167E4 =00000016                  id_Burnt:	equ (ptr_Burnt-Ani_Sonic)/2	; $16
000167E4 =00000017                  id_Drown:	equ (ptr_Drown-Ani_Sonic)/2	; $17
000167E4 =00000018                  id_Death:	equ (ptr_Death-Ani_Sonic)/2	; $18
000167E4 =00000019                  id_Hurt:	equ (ptr_Hurt-Ani_Sonic)/2	; $19
000167E4 =0000001A                  id_WaterSlide:	equ (ptr_WaterSlide-Ani_Sonic)/2 ; $1A
000167E4 =0000001B                  id_Null:	equ (ptr_Null-Ani_Sonic)/2	; $1B
000167E4 =0000001C                  id_Float3:	equ (ptr_Float3-Ani_Sonic)/2	; $1C
000167E4 =0000001D                  id_Float4:	equ (ptr_Float4-Ani_Sonic)/2	; $1D
000167E4 =0000001E                  id_MaxRun:	equ (ptr_MaxRun-Ani_Sonic)/2	; $1E
000167E4 =0000001F                  id_Spindash:	equ (ptr_Spindash-Ani_Sonic)/2	; $1F
000167E4 =00000020                  id_Hurt2:	equ (ptr_Hurt2-Ani_Sonic)/2	; $21
000167E4 =00000021                  id_GetUp:	equ (ptr_GetUp-Ani_Sonic)/2	; $22
000167E4 =00000022                  id_Blink:	equ (ptr_Blink-Ani_Sonic)/2	; $23
000167E4 =00000023                  id_Sit:		equ (ptr_Sit-Ani_Sonic)/2	; $24
000167E4 =00000024                  id_Peelout:	equ (ptr_Peelout-Ani_Sonic)/2	; $25
000167E4 =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
000167E4 =00000026                  id_GetAir2:	equ (ptr_GetAir2-Ani_Sonic)/2
000167E4 =00000027                  id_Transform:		equ	(ptr_Transform-Ani_Sonic)/2
000167E4 =00000027                  id_Transform:		equ	(ptr_Transform-Ani_Sonic)/2
000167E4                            		include	"_incObj\Sonic LoadGfx.asm"
000167E4                            ; ---------------------------------------------------------------------------
000167E4                            ; Sonic	graphics loading subroutine
000167E4                            ; ---------------------------------------------------------------------------
000167E4                            
000167E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000167E4                            
000167E4                            
000167E4                            Sonic_LoadGfx:			; XREF: Obj01_Control; et al
000167E4 7000                       		moveq	#0,d0
000167E6 1028 001A                  		move.b	$1A(a0),d0	; load frame number
000167EA B038 F766                  		cmp.b	($FFFFF766).w,d0
000167EE 6700                       		beq.s	locret_13C96
000167F0 11C0 F766                  		move.b	d0,($FFFFF766).w
000167F4 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
000167FA D040                       		add.w	d0,d0
000167FC D4F2 0000                  		adda.w	(a2,d0.w),a2
00016800 7A00                       		moveq	#0,d5
00016802 1A1A                       		move.b	(a2)+,d5
00016804 5345                       		subq.w	#1,d5
00016806 6B00                       		bmi.s	locret_13C96
00016808 383C F000                  		move.w	#$F000,d4
0001680C 2C3C 0000 0000             		move.l	#Art_Sonic,d6
00016812                            
00016812                            SPLC_ReadEntry:
00016812 7200                       		moveq	#0,d1
00016814 121A                       		move.b	(a2)+,d1
00016816 E149                       		lsl.w	#8,d1
00016818 121A                       		move.b	(a2)+,d1
0001681A 3601                       		move.w	d1,d3
0001681C E04B                       		lsr.w	#8,d3
0001681E 0243 00F0                  		andi.w	#$F0,d3
00016822 0643 0010                  		addi.w	#$10,d3
00016826 0241 0FFF                  		andi.w	#$FFF,d1
0001682A EB89                       		lsl.l	#5,d1
0001682C D286                       		add.l	d6,d1
0001682E 3404                       		move.w	d4,d2
00016830 D843                       		add.w	d3,d4
00016832 D843                       		add.w	d3,d4
00016834 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
0001683A 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
0001683E                            
0001683E                            locret_13C96:
0001683E 4E75                       		rts	
00016840                            ; End of function Sonic_LoadGfx
00016840                            ; End of function Sonic_LoadGfx
00016840                            
00016840                            		include	"_incObj\0A Drowning Countdown.asm"
00016840                            ; ---------------------------------------------------------------------------
00016840                            ; Object 0A - drowning countdown numbers and small bubbles that float out of
00016840                            ; Sonic's mouth (LZ)
00016840                            ; ---------------------------------------------------------------------------
00016840                            
00016840                            DrownCount:
00016840 7000                       		moveq	#0,d0
00016842 1028 0024                  		move.b	obRoutine(a0),d0
00016846 323B 0000                  		move.w	Drown_Index(pc,d0.w),d1
0001684A 4EFB 1000                  		jmp	Drown_Index(pc,d1.w)
0001684E                            ; ===========================================================================
0001684E                            Drown_Index:
0001684E 0000                       ptr_Drown_Main:		dc.w Drown_Main-Drown_Index
00016850 0000                       ptr_Drown_Animate:	dc.w Drown_Animate-Drown_Index
00016852 0000                       ptr_Drown_ChkWater:	dc.w Drown_ChkWater-Drown_Index
00016854 0000                       ptr_Drown_Display:	dc.w Drown_Display-Drown_Index
00016856 0000                       ptr_Drown_Delete:	dc.w Drown_Delete-Drown_Index
00016858 0000                       ptr_Drown_Countdown:	dc.w Drown_Countdown-Drown_Index
0001685A 0000                       ptr_Drown_AirLeft:	dc.w Drown_AirLeft-Drown_Index
0001685C 0000                       			dc.w Drown_Display-Drown_Index
0001685E 0000                       			dc.w Drown_Delete-Drown_Index
00016860                            
00016860 =00000030                  drown_origX:		equ $30		; original x-axis position
00016860 =00000038                  drown_time:		equ $38		; time between each number changes
00016860                            
00016860 =00000000                  id_Drown_Main:		equ ptr_Drown_Main-Drown_Index		; 0
00016860 =00000002                  id_Drown_Animate:	equ ptr_Drown_Animate-Drown_Index		; 2
00016860 =00000004                  id_Drown_ChkWater:	equ ptr_Drown_ChkWater-Drown_Index	; 4
00016860 =00000006                  id_Drown_Display:	equ ptr_Drown_Display-Drown_Index		; 6
00016860 =00000008                  id_Drown_Delete:		equ ptr_Drown_Delete-Drown_Index		; 8
00016860 =0000000A                  id_Drown_Countdown:	equ ptr_Drown_Countdown-Drown_Index	; $A
00016860 =0000000C                  id_Drown_AirLeft:	equ ptr_Drown_AirLeft-Drown_Index		; $C
00016860                            ; ===========================================================================
00016860                            
00016860                            Drown_Main:	; Routine 0
00016860 5428 0024                  		addq.b	#2,obRoutine(a0)
00016864 217C 0001 4A3E 0004        		move.l	#Map_Bub,obMap(a0)
0001686C 317C 83F5 0002             		move.w	#$83F5,obGfx(a0)
00016872 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone?
00016878 6700                       		beq.s	Drown_IsSYZ	; if yes, branch
0001687A 317C 8348 0002             		move.w	#$8348,obGfx(a0)	; LZ
00016880                            
00016880                            	Drown_IsSYZ:	
00016880 117C 0084 0001             		move.b	#$84,obRender(a0)
00016886 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001688C 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016892 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00016896 6A00                       		bpl.s	@smallbubble	; branch if $00-$7F
00016898                            
00016898 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Drown_Countdown next
0001689C 217C 0000 0000 0004        		move.l	#Map_Drown,obMap(a0)
000168A4 317C 0440 0002             		move.w	#$440,obGfx(a0)
000168AA 0240 007F                  		andi.w	#$7F,d0
000168AE 1140 0033                  		move.b	d0,$33(a0)
000168B2 6000 0000                  		bra.w	Drown_Countdown
000168B6                            ; ===========================================================================
000168B6                            
000168B6                            @smallbubble:
000168B6 1140 001C                  		move.b	d0,obAnim(a0)
000168BA 3168 0008 0030             		move.w	obX(a0),drown_origX(a0)
000168C0 317C FF78 0012             		move.w	#-$88,obVelY(a0)
000168C6                            
000168C6                            Drown_Animate:	; Routine 2
000168C6 43F9 0000 0000             		lea	(Ani_Drown).l,a1
000168CC 4EB9 0000 C574             		jsr	(AnimateSprite).l
000168D2                            
000168D2                            Drown_ChkWater:	; Routine 4
000168D2 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone? TIS
000168D8 6600                       		bne.s	Normal_Water_Level	; if not, branch TIS
000168DA 3038 FF92                  		move.w	(v_watersplashpos).w,d0	;TIS
000168DE 0640 0010                  		add.w	#$10,d0	;Lower it a little - TIS
000168E2 B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water tag surface? - TIS
000168E6 6200                       		bhi.s	Display_Next		; if so, branch TIS
000168E8                            		
000168E8                            
000168E8                            Normal_Water_Level:
000168E8 3038 F646                  		move.w	(v_waterpos1).w,d0
000168EC B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water surface?
000168F0 6500                       		bcs.s	Wobble		; if not, branch
000168F2                            Display_Next:	;TIS		
000168F2 117C 0006 0024             		move.b	#id_Drown_Display,obRoutine(a0) ; goto Drown_Display next
000168F8 5E28 001C                  		addq.b	#7,obAnim(a0)
000168FC 0C28 000D 001C             		cmpi.b	#$D,obAnim(a0)
00016902 6700                       		beq.s	Drown_Display
00016904 6000                       		bra.s	Drown_Display
00016906                            ; ===========================================================================
00016906                            
00016906                            Wobble:
00016906 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic in a water tunnel?
0001690A 6700                       		beq.s	@notunnel	; if not, branch
0001690C 5868 0030                  		addq.w	#4,drown_origX(a0)
00016910                            
00016910                            	@notunnel:
00016910 1028 0026                  		move.b	obAngle(a0),d0
00016914 5228 0026                  		addq.b	#1,obAngle(a0)
00016918 0240 007F                  		andi.w	#$7F,d0
0001691C 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00016922 1031 0000                  		move.b	(a1,d0.w),d0
00016926 4880                       		ext.w	d0
00016928 D068 0030                  		add.w	drown_origX(a0),d0
0001692C 3140 0008                  		move.w	d0,obX(a0)
00016930 6100                       		bsr.s	Drown_ShowNumber
00016932 4EB9 0000 F4A6             		jsr	(SpeedToPos).l
00016938 4A28 0001                  		tst.b	obRender(a0)
0001693C 6A00                       		bpl.s	@delete
0001693E 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
00016944                            
00016944                            	@delete:
00016944 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001694A                            ; ===========================================================================
0001694A                            
0001694A                            Drown_Display:	; Routine 6, Routine $E
0001694A 6100                       		bsr.s	Drown_ShowNumber
0001694C 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016952 4EB9 0000 C574             		jsr	(AnimateSprite).l
00016958 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001695E                            ; ===========================================================================
0001695E                            
0001695E                            Drown_Delete:	; Routine 8, Routine $10
0001695E 4EF9 0000 F4FA             		jmp	(DeleteObject).l
00016964                            ; ===========================================================================
00016964                            
00016964                            Drown_AirLeft:	; Routine $C
00016964 0C78 000C FE14             		cmpi.w	#$C,(v_air).w	; check air remaining
0001696A 6200                       		bhi.s	Drown_AirLeft_Delete		; if higher than $C, branch
0001696C 5368 0038                  		subq.w	#1,drown_time(a0)
00016970 6600                       		bne.s	@display
00016972 117C 000E 0024             		move.b	#id_Drown_Display+8,obRoutine(a0) ; goto Drown_Display next
00016978 5E28 001C                  		addq.b	#7,obAnim(a0)
0001697C 60CC                       		bra.s	Drown_Display
0001697E                            ; ===========================================================================
0001697E                            
0001697E                            	@display:
0001697E 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016984 4EB9 0000 C574             		jsr	(AnimateSprite).l
0001698A 4A28 0001                  		tst.b	obRender(a0)
0001698E 6A00                       		bpl.s	Drown_AirLeft_Delete
00016990 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
00016996                            
00016996                            Drown_AirLeft_Delete:	
00016996 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001699C                            ; ===========================================================================
0001699C                            
0001699C                            Drown_ShowNumber:
0001699C 4A68 0038                  		tst.w	drown_time(a0)
000169A0 6700                       		beq.s	@nonumber
000169A2 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
000169A6 6600                       		bne.s	@nonumber	; if time remains, branch
000169A8 0C28 0007 001C             		cmpi.b	#7,obAnim(a0)
000169AE 6400                       		bcc.s	@nonumber
000169B0                            
000169B0 317C 000F 0038             		move.w	#15,drown_time(a0)
000169B6 4268 0012                  		clr.w	obVelY(a0)
000169BA 117C 0080 0001             		move.b	#$80,obRender(a0)
000169C0 3028 0008                  		move.w	obX(a0),d0
000169C4 9078 F700                  		sub.w	(v_screenposx).w,d0
000169C8 0640 0080                  		addi.w	#$80,d0
000169CC 3140 0008                  		move.w	d0,obX(a0)
000169D0 3028 000C                  		move.w	obY(a0),d0
000169D4 9078 F704                  		sub.w	(v_screenposy).w,d0
000169D8 0640 0080                  		addi.w	#$80,d0
000169DC 3140 000A                  		move.w	d0,obScreenY(a0)
000169E0 117C 000C 0024             		move.b	#id_Drown_AirLeft,obRoutine(a0) ; goto Drown_AirLeft next
000169E6                            
000169E6                            	@nonumber:
000169E6 4E75                       		rts	
000169E8                            ; ===========================================================================
000169E8                            Drown_WobbleData:
000169E8 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
000169F8 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00016A08 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00016A18 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00016A28 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00016A38 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00016A48 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
00016A58 FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00016A68 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00016A78 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00016A88 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00016A98 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00016AA8 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00016AB8 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00016AC8 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
00016AD8 FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00016AE8                            ; ===========================================================================
00016AE8                            
00016AE8                            Drown_Countdown:; Routine $A
00016AE8 4A68 002C                  		tst.w	$2C(a0)
00016AEC 6600 0000                  		bne.w	@loc_13F86
00016AF0 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00016AF6 6400 0000                  		bcc.w	@nocountdown
00016AFA 0838 0006 D022             		btst	#6,(v_player+obStatus).w ; is Sonic underwater?
00016B00 6700 0000                  		beq.w	@nocountdown	; if not, branch
00016B04                            
00016B04 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
00016B08 6A00 0000                  		bpl.w	@nochange	; branch if time remains
00016B0C 317C 003B 0038             		move.w	#59,drown_time(a0)
00016B12 317C 0001 0036             		move.w	#1,$36(a0)
00016B18 4EB9 0000 3B7C             		jsr	(RandomNumber).l
00016B1E 0240 0001                  		andi.w	#1,d0
00016B22 1140 0034                  		move.b	d0,$34(a0)
00016B26 3038 FE14                  		move.w	(v_air).w,d0	; check air remaining
00016B2A 0C40 0019                  		cmpi.w	#25,d0
00016B2E 6700                       		beq.s	@warnsound	; play sound if	air is 25
00016B30 0C40 0014                  		cmpi.w	#20,d0
00016B34 6700                       		beq.s	@warnsound
00016B36 0C40 000F                  		cmpi.w	#15,d0
00016B3A 6700                       		beq.s	@warnsound
00016B3C 0C40 000C                  		cmpi.w	#12,d0
00016B40 6200                       		bhi.s	@reduceair	; if air is above 12, branch
00016B42                            
00016B42                            	@skipmusic:
00016B4C 5328 0032                  		subq.b	#1,$32(a0)
00016B50 6A00                       		bpl.s	@reduceair
00016B52 1168 0033 0032             		move.b	$33(a0),$32(a0)
00016B58 08E8 0007 0036             		bset	#7,$36(a0)
00016B5E 6000                       		bra.s	@reduceair
00016B60                            ; ===========================================================================
00016B60                            
00016B60                            @warnsound:
00016B6A                            
00016B6A                            @reduceair:
00016B6A 5378 FE14                  		subq.w	#1,(v_air).w	; subtract 1 from air remaining
00016B6E 6400 0000                  		bcc.w	@gotomakenum	; if air is above 0, branch
00016B72                            
00016B72                            		; Sonic drowns here
00016B72 6100 0000                  		bsr.w	ResumeMusic
00016B76 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
00016B86 31FC 0000 FF92             		move.w	#0,(v_watersplashpos).w	;max it out for now - TIS
00016B8C 117C 000A 0034             		move.b	#$A,$34(a0)
00016B92 317C 0001 0036             		move.w	#1,$36(a0)
00016B98 317C 0078 002C             		move.w	#$78,$2C(a0)
00016B9E 2F08                       		move.l	a0,-(sp)
00016BA0 41F8 D000                  		lea	(v_player).w,a0
00016BA4 6100 F668                  		bsr.w	Sonic_ResetOnFloor
00016BA8 117C 0017 001C             		move.b	#id_Drown,obAnim(a0)	; use Sonic's drowning animation
00016BAE 08E8 0001 0022             		bset	#1,obStatus(a0)
00016BB4 08E8 0007 0002             		bset	#7,obGfx(a0)
00016BBA 317C 0000 0012             		move.w	#0,obVelY(a0)
00016BC0 317C 0000 0010             		move.w	#0,obVelX(a0)
00016BC6 317C 0000 0020             		move.w	#0,obInertia(a0)
00016BCC 11FC 0001 F744             		move.b	#1,(f_nobgscroll).w
00016BD2 205F                       		movea.l	(sp)+,a0
00016BD4 4E75                       		rts	
00016BD6                            ; ===========================================================================
00016BD6                            
00016BD6                            @loc_13F86:
00016BD6 5368 002C                  		subq.w	#1,$2C(a0)
00016BDA 6600                       		bne.s	@loc_13F94
00016BDC 11FC 0006 D024             		move.b	#6,(v_player+obRoutine).w
00016BE2 4E75                       		rts	
00016BE4                            ; ===========================================================================
00016BE4                            
00016BE4                            	@loc_13F94:
00016BE4 2F08                       		move.l	a0,-(sp)
00016BE6 41F8 D000                  		lea	(v_player).w,a0
00016BEA 4EB9 0000 F4A6             		jsr	(SpeedToPos).l
00016BF0 0668 0010 0012             		addi.w	#$10,obVelY(a0)
00016BF6 205F                       		movea.l	(sp)+,a0
00016BF8 6000                       		bra.s	@nochange
00016BFA                            ; ===========================================================================
00016BFA                            
00016BFA                            @gotomakenum:
00016BFA 6000                       		bra.s	@makenum
00016BFC                            ; ===========================================================================
00016BFC                            
00016BFC                            @nochange:
00016BFC 4A68 0036                  		tst.w	$36(a0)
00016C00 6700 0000                  		beq.w	@nocountdown
00016C04 5368 003A                  		subq.w	#1,$3A(a0)
00016C08 6A00 0000                  		bpl.w	@nocountdown
00016C0C                            
00016C0C                            @makenum:
00016C0C 4EB9 0000 3B7C             		jsr	(RandomNumber).l
00016C12 0240 000F                  		andi.w	#$F,d0
00016C16 3140 003A                  		move.w	d0,$3A(a0)
00016C1A 4EB9 0000 FA54             		jsr	(FindFreeObj).l
00016C20 6600 0000                  		bne.w	@nocountdown
00016C24 12BC 000A                  		move.b	#id_DrownCount,0(a1) ; load object
00016C28 3378 D008 0008             		move.w	(v_player+obX).w,obX(a1) ; match X position to Sonic
00016C2E 7006                       		moveq	#6,d0
00016C30 0838 0000 D022             		btst	#0,(v_player+obStatus).w
00016C36 6700                       		beq.s	@noflip
00016C38 4440                       		neg.w	d0
00016C3A 137C 0040 0026             		move.b	#$40,obAngle(a1)
00016C40                            
00016C40                            	@noflip:
00016C40 D169 0008                  		add.w	d0,obX(a1)
00016C44 3378 D00C 000C             		move.w	(v_player+obY).w,obY(a1)
00016C4A 137C 0006 0028             		move.b	#6,obSubtype(a1)
00016C50 4A68 002C                  		tst.w	$2C(a0)
00016C54 6700 0000                  		beq.w	@loc_1403E
00016C58 0268 0007 003A             		andi.w	#7,$3A(a0)
00016C5E 0668 0000 003A             		addi.w	#0,$3A(a0)
00016C64 3038 D00C                  		move.w	(v_player+obY).w,d0
00016C68 0440 000C                  		subi.w	#$C,d0
00016C6C 3340 000C                  		move.w	d0,obY(a1)
00016C70 4EB9 0000 3B7C             		jsr	(RandomNumber).l
00016C76 1340 0026                  		move.b	d0,obAngle(a1)
00016C7A 3038 FE04                  		move.w	(v_framecount).w,d0
00016C7E 0200 0003                  		andi.b	#3,d0
00016C82 6600                       		bne.s	@loc_14082
00016C84 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00016C8A 6000                       		bra.s	@loc_14082
00016C8C                            ; ===========================================================================
00016C8C                            
00016C8C                            @loc_1403E:
00016C8C 0828 0007 0036             		btst	#7,$36(a0)
00016C92 6700                       		beq.s	@loc_14082
00016C94 3438 FE14                  		move.w	(v_air).w,d2
00016C98 E24A                       		lsr.w	#1,d2
00016C9A 4EB9 0000 3B7C             		jsr	(RandomNumber).l
00016CA0 0240 0003                  		andi.w	#3,d0
00016CA4 6600                       		bne.s	@loc_1406A
00016CA6 08E8 0006 0036             		bset	#6,$36(a0)
00016CAC 6600                       		bne.s	@loc_14082
00016CAE 1342 0028                  		move.b	d2,obSubtype(a1)
00016CB2 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016CB8                            
00016CB8                            	@loc_1406A:
00016CB8 4A28 0034                  		tst.b	$34(a0)
00016CBC 6600                       		bne.s	@loc_14082
00016CBE 08E8 0006 0036             		bset	#6,$36(a0)
00016CC4 6600                       		bne.s	@loc_14082
00016CC6 1342 0028                  		move.b	d2,obSubtype(a1)
00016CCA 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016CD0                            
00016CD0                            @loc_14082:
00016CD0 5328 0034                  		subq.b	#1,$34(a0)
00016CD4 6A00                       		bpl.s	@nocountdown
00016CD6 4268 0036                  		clr.w	$36(a0)
00016CDA                            
00016CDA                            @nocountdown:
00016CDA 4E75                       		rts	
00016CDA 4E75                       		rts	
00016CDC                            
00016CDC                            
00016CDC                            ; ---------------------------------------------------------------------------
00016CDC                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00016CDC                            ; ---------------------------------------------------------------------------
00016CDC                            
00016CDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016CDC                            
00016CDC                            
00016CDC                            ResumeMusic:
00016CDC                            		;cmpi.w	#12,(v_air).w	; more than 12 seconds of air left?
00016CDC                            		;bhi.s	@over12		; if yes, branch
00016CDC                            		;move.b	(v_Saved_music),d0
00016CDC                            		;tst.b	(v_invinc).w ; is Sonic invincible?
00016CDC                            		;beq.s	@notinvinc ; if not, branch
00016CDC                            		;move.w	#bgm_Invincible,d0
00016CDC                            		;tst.b	(v_shoes).w ; is Sonic speed shoes?
00016CDC                            		;beq.s	@notinvinc	; if not, branch
00016CDC                            		;move.w	#bgm_Ending,d0
00016CDC                            
00016CDC                            	;@notinvinc:
00016CDC                            		;tst.b	(f_lockscreen).w ; is Sonic at a boss?
00016CDC                            		;beq.s	@playselected ; if not, branch
00016CDC                            		;move.w	#bgm_Boss,d0
00016CDC                            
00016CDC                            	;@playselected:
00016CDC                            		;jsr	(PlaySound).l
00016CDC                            
00016CDC                            	;@over12:
00016CDC 31FC 001E FE14             		move.w	#30,(v_air).w	; reset air to 30 seconds
00016CE2 4238 D372                  		clr.b	(v_objspace+$340+$32).w
00016CE6 4E75                       		rts	
00016CE8                            
00016CE8                            ;End of function ResumeMusic
00016CE8                            
00016CE8                            ; ===========================================================================
00016CE8                            
00016CE8                            		include	"_anim\Drowning Countdown.asm"
00016CE8                            ; ---------------------------------------------------------------------------
00016CE8                            ; Animation script - countdown numbers and bubbles (LZ)
00016CE8                            ; ---------------------------------------------------------------------------
00016CE8 0000                       Ani_Drown:	dc.w @zeroappear-Ani_Drown
00016CEA 0000                       		dc.w @oneappear-Ani_Drown
00016CEC 0000                       		dc.w @twoappear-Ani_Drown
00016CEE 0000                       		dc.w @threeappear-Ani_Drown
00016CF0 0000                       		dc.w @fourappear-Ani_Drown
00016CF2 0000                       		dc.w @fiveappear-Ani_Drown
00016CF4 0000                       		dc.w @smallbubble-Ani_Drown
00016CF6 0000                       		dc.w @zeroflash-Ani_Drown
00016CF8 0000                       		dc.w @oneflash-Ani_Drown
00016CFA 0000                       		dc.w @twoflash-Ani_Drown
00016CFC 0000                       		dc.w @threeflash-Ani_Drown
00016CFE 0000                       		dc.w @fourflash-Ani_Drown
00016D00 0000                       		dc.w @fiveflash-Ani_Drown
00016D02 0000                       		dc.w @blank-Ani_Drown
00016D04 0000                       		dc.w @mediumbubble-Ani_Drown
00016D06 0500 0102 0304 090D FC     @zeroappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, afRoutine
00016D10 00                         		even
00016D10 0500 0102 0304 0C12 FC     @oneappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	afRoutine
00016D1A 00                         		even
00016D1A 0500 0102 0304 0C11 FC     @twoappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	afRoutine
00016D24 00                         		even
00016D24 0500 0102 0304 0B10 FC     @threeappear:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	afRoutine
00016D2E 00                         		even
00016D2E 0500 0102 0304 090F FC     @fourappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, afRoutine
00016D38 00                         		even
00016D38 0500 0102 0304 0A0E FC     @fiveappear:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, afRoutine
00016D42 00                         		even
00016D42 0E00 0102 FC               @smallbubble:	dc.b $E, 0, 1, 2, afRoutine
00016D48 00                         		even
00016D48 0716 0D16 0D16 0DFC        @zeroflash:	dc.b 7,	$16, $D, $16, $D, $16, $D, afRoutine
00016D50 0716 1216 1216 12FC        @oneflash:	dc.b 7,	$16, $12, $16, $12, $16, $12, afRoutine
00016D58 0716 1116 1116 11FC        @twoflash:	dc.b 7,	$16, $11, $16, $11, $16, $11, afRoutine
00016D60 0716 1016 1016 10FC        @threeflash:	dc.b 7,	$16, $10, $16, $10, $16, $10, afRoutine
00016D68 0716 0F16 0F16 0FFC        @fourflash:	dc.b 7,	$16, $F, $16, $F, $16, $F, afRoutine
00016D70 0716 0E16 0E16 0EFC        @fiveflash:	dc.b 7,	$16, $E, $16, $E, $16, $E, afRoutine
00016D78 0EFC                       @blank:		dc.b $E, afRoutine
00016D7A 0E01 0203 04FC             @mediumbubble:	dc.b $E, 1, 2, 3, 4, afRoutine
00016D80                            		even
00016D80                            		even
00016D80                            Map_Drown:	include	"_maps\Drowning Countdown.asm"
00016D80                            ; ---------------------------------------------------------------------------
00016D80                            ; Sprite mappings - drowning countdown numbers (LZ)
00016D80                            ; ---------------------------------------------------------------------------
00016D80                            Map_Drown_internal:
00016D80 0000                       		dc.w @num-Map_Drown_internal
00016D82 01                         @num:		dc.b 1
00016D83 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00016D88                            		even
00016D88                            		even
00016D88                            
00016D88                            ; --------------------------------------------------
00016D88                            ; Subroutine to load the shield's art over DMA
00016D88                            ; --------------------------------------------------
00016D88                            
00016D88                            PLCLoad_Shields:
00016D88 7000                       		moveq	#0,d0
00016D8A 1028 001A                  		move.b	obFrame(a0),d0	; load frame number
00016D8E B028 0033                  		cmp.b	shield_LastLoadedDPLC(a0),d0
00016D92 6700                       		beq.s	locret2_13C96
00016D94 1140 0033                  		move.b	d0,shield_LastLoadedDPLC(a0)
00016D98 2468 003C                  		move.l  shield_DPLC_Address(A0),a2
00016D9C D040                       		add.w   d0,d0
00016D9E D4F2 0000                  		adda.w  (a2,D0),a2
00016DA2 3A1A                       		move.w  (a2)+,d5
00016DA4 5345                       		subq.w  #1,d5
00016DA6 6B00                       		bmi.s	locret2_13C96
00016DA8 3828 0036                  		move.w  shield_vram_art(A0),d4
00016DAC                            
00016DAC                            loc_199BE:
00016DAC 7200                       		moveq	#0,d1
00016DAE 121A                       		move.b	(a2)+,d1
00016DB0 E149                       		lsl.w	#8,d1
00016DB2 121A                       		move.b	(a2)+,d1
00016DB4 3601                       		move.w	d1,d3
00016DB6 E04B                       		lsr.w	#8,d3
00016DB8 0243 00F0                  		andi.w	#$F0,d3
00016DBC 0643 0010                  		addi.w	#$10,d3
00016DC0 0241 0FFF                  		andi.w	#$FFF,d1
00016DC4 EB89                       		lsl.l	#5,d1
00016DC6 D2A8 0038                  		add.l   shield_Art_Address(a0),d1
00016DCA 3404                       		move.w  d4,d2
00016DCC D843                       		add.w   d3,d4
00016DCE D843                       		add.w   d3,d4
00016DD0 4EB9 0000 1476             		jsr     (QueueDMATransfer).l
00016DD6 51CD FFD4                  		dbf     d5,loc_199BE	; repeat for number of entries
00016DDA                            
00016DDA                            locret2_13C96:
00016DDA 4E75                       		rts	
00016DDC                            ; End of function PLCLoad_Shields
00016DDC                            
00016DDC                            		include	"_incObj\4E Silver Shield.asm"
00016DDC                            ; ---------------------------------------------------------------------------
00016DDC                            ; Object 4E - Silver Shield
00016DDC                            ; ---------------------------------------------------------------------------
00016DDC                            SPShieldItem: ; XREF: Obj_Index
00016DDC 7000                       		moveq	#0,d0
00016DDE 1028 0024                  		move.b	obRoutine(a0),d0
00016DE2 323B 0000                  		move.w	SPShieldItem_Index(pc,d0.w),d1
00016DE6 4EFB 1000                  		jmp	SPShieldItem_Index(pc,d1.w)
00016DEA                            ; ===========================================================================
00016DEA                            ; off_1D900:
00016DEA                            SPShieldItem_Index:
00016DEA 0000                       		dc.w SPShieldItem_Init-SPShieldItem_Index	; 0
00016DEC 0000                       		dc.w SPShieldItem_Main-SPShieldItem_Index	; 2
00016DEE                            ; ===========================================================================
00016DEE                            ; loc_1D904:
00016DEE                            SPShieldItem_Init:
00016DEE 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
00016DF6 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
00016DFE 217C 0000 0000 0038        		move.l	#Art_SpShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
00016E06 117C 0004 0001             		move.b	#4,obRender(a0)
00016E0C 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016E12 117C 0018 0014             		move.b	#$18,obActWid(a0)
00016E18 317C 0541 0002             		move.w	#$541,obGfx(a0)
00016E1E 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
00016E24 0838 0007 D002             		btst	#7,(v_player+obGfx).w
00016E2A 6700                       		beq.s	@animclear
00016E2C 08E8 0007 0002             		bset	#7,obGfx(a0)
00016E32                            
00016E32                            @animclear:
00016E32 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
00016E38 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
00016E3E 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
00016E42                            ; loc_1D92C:
00016E42                            SPShieldItem_Main:
00016E42 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
00016E46 4A38 FE2D                  		tst.b	(v_invinc).w
00016E4A 6600                       		bne.s	@return
00016E4C                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
00016E4C                            		;beq.s	@return	; If so, do not display and do not update variables
00016E4C 4A38 F5CA                  		tst.b	(v_SpShield).w
00016E50 6700 0000                  		beq.w	SPShieldItem_Destroy	; If not, change to Insta-Shield
00016E54 316A 0008 0008             		move.w	obX(a2),obX(a0)
00016E5A 316A 000C 000C             		move.w	obY(a2),obY(a0)
00016E60 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
00016E66 4A6A 0002                  		tst.w	obGFX(a2)
00016E6A 6A00                       		bpl.s	@nothighpriority
00016E6C 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
00016E72                            
00016E72                            		@nothighpriority:
00016E72 43F9 0000 0000             		lea	(Ani_Shield).l,a1
00016E78 4EB9 0000 C574             		jsr	(AnimateSprite).l
00016E7E 4EB9 0001 6D88             		jsr	(PLCLoad_Shields).l
00016E84 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
00016E8A                            ; ---------------------------------------------------------------------------
00016E8A                            ; ===========================================================================
00016E8A                            
00016E8A                            @return:
00016E8A 4E75                       		rts
00016E8C                            
00016E8C                            SPShieldItem_Destroy:
00016E8C 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
00016E90 4E75                       		rts
00016E92                            ; ===========================================================================
00016E92                            ; ===========================================================================
00016E92                            		include	"_incObj\04 Gold Shield.asm"
00016E92                            ; ---------------------------------------------------------------------------
00016E92                            ; Object 04 - Gold Shield
00016E92                            ; ---------------------------------------------------------------------------
00016E92                            GShieldItem: ; XREF: Obj_Index
00016E92 7000                       		moveq	#0,d0
00016E94 1028 0024                  		move.b	obRoutine(a0),d0
00016E98 323B 0000                  		move.w	GShieldItem_Index(pc,d0.w),d1
00016E9C 4EFB 1000                  		jmp	GShieldItem_Index(pc,d1.w)
00016EA0                            ; ===========================================================================
00016EA0                            ; off_1D900:
00016EA0                            GShieldItem_Index:
00016EA0 0000                       		dc.w GShieldItem_Init-GShieldItem_Index	; 0
00016EA2 0000                       		dc.w GShieldItem_Main-GShieldItem_Index	; 2
00016EA4                            ; ===========================================================================
00016EA4                            ; loc_1D904:
00016EA4                            GShieldItem_Init:
00016EA4 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
00016EAC 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
00016EB4 217C 0000 0000 0038        		move.l	#Art_GShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
00016EBC 117C 0004 0001             		move.b	#4,obRender(a0)
00016EC2 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016EC8 117C 0018 0014             		move.b	#$18,obActWid(a0)
00016ECE 317C 0541 0002             		move.w	#$541,obGfx(a0)
00016ED4 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
00016EDA 0838 0007 D002             		btst	#7,(v_player+obGfx).w
00016EE0 6700                       		beq.s	@animclear
00016EE2 08E8 0007 0002             		bset	#7,obGfx(a0)
00016EE8                            
00016EE8                            @animclear:
00016EE8 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
00016EEE 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
00016EF4 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
00016EF8                            ; loc_1D92C:
00016EF8                            GShieldItem_Main:
00016EF8 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
00016EFC 4A38 FE2D                  		tst.b	(v_invinc).w
00016F00 6600                       		bne.s	@return
00016F02                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
00016F02                            		;beq.s	@return	; If so, do not display and do not update variables
00016F02 4A38 F5C9                  		tst.b	(v_GShield).w
00016F06 6700 0000                  		beq.w	GShieldItem_Destroy	; If not, change to Insta-Shield
00016F0A 316A 0008 0008             		move.w	obX(a2),obX(a0)
00016F10 316A 000C 000C             		move.w	obY(a2),obY(a0)
00016F16 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
00016F1C 4A6A 0002                  		tst.w	obGFX(a2)
00016F20 6A00                       		bpl.s	@nothighpriority
00016F22 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
00016F28                            
00016F28                            		@nothighpriority:
00016F28 43F9 0000 0000             		lea	(Ani_Shield).l,a1
00016F2E 4EB9 0000 C574             		jsr	(AnimateSprite).l
00016F34 4EB9 0001 6D88             		jsr	(PLCLoad_Shields).l
00016F3A 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
00016F40                            ; ---------------------------------------------------------------------------
00016F40                            ; ===========================================================================
00016F40                            
00016F40                            @return:
00016F40 4E75                       		rts
00016F42                            
00016F42                            GShieldItem_Destroy:
00016F42 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
00016F46 4E75                       		rts
00016F48                            ; ===========================================================================
00016F48                            ; ===========================================================================
00016F48                            		include	"_incObj\07 Red Shield.asm"
00016F48                            ; ---------------------------------------------------------------------------
00016F48                            ; Object 07 - Red Shield
00016F48                            ; ---------------------------------------------------------------------------
00016F48                            RShieldItem: ; XREF: Obj_Index
00016F48 7000                       		moveq	#0,d0
00016F4A 1028 0024                  		move.b	obRoutine(a0),d0
00016F4E 323B 0000                  		move.w	RShieldItem_Index(pc,d0.w),d1
00016F52 4EFB 1000                  		jmp	RShieldItem_Index(pc,d1.w)
00016F56                            ; ===========================================================================
00016F56                            ; off_1D900:
00016F56                            RShieldItem_Index:
00016F56 0000                       		dc.w RShieldItem_Init-RShieldItem_Index	; 0
00016F58 0000                       		dc.w RShieldItem_Main-RShieldItem_Index	; 2
00016F5A                            ; ===========================================================================
00016F5A                            ; loc_1D904:
00016F5A                            RShieldItem_Init:
00016F5A 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
00016F62 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
00016F6A 217C 0000 0000 0038        		move.l	#Art_RedShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
00016F72 117C 0004 0001             		move.b	#4,obRender(a0)
00016F78 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016F7E 117C 0018 0014             		move.b	#$18,obActWid(a0)
00016F84 317C 0541 0002             		move.w	#$541,obGfx(a0)
00016F8A 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
00016F90 0838 0007 D002             		btst	#7,(v_player+obGfx).w
00016F96 6700                       		beq.s	@animclear
00016F98 08E8 0007 0002             		bset	#7,obGfx(a0)
00016F9E                            
00016F9E                            @animclear:
00016F9E 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
00016FA4 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
00016FAA 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
00016FAE                            ; loc_1D92C:
00016FAE                            RShieldItem_Main:
00016FAE 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
00016FB2 4A38 FE2D                  		tst.b	(v_invinc).w
00016FB6 6600                       		bne.s	@return
00016FB8                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
00016FB8                            		;beq.s	@return	; If so, do not display and do not update variables
00016FB8 4A38 F5C8                  		tst.b	(v_RShield).w
00016FBC 6700 0000                  		beq.w	RShieldItem_Destroy	; If not, change to Insta-Shield
00016FC0 316A 0008 0008             		move.w	obX(a2),obX(a0)
00016FC6 316A 000C 000C             		move.w	obY(a2),obY(a0)
00016FCC 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
00016FD2 4A6A 0002                  		tst.w	obGFX(a2)
00016FD6 6A00                       		bpl.s	@nothighpriority
00016FD8 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
00016FDE                            
00016FDE                            		@nothighpriority:
00016FDE 43F9 0000 0000             		lea	(Ani_Shield).l,a1
00016FE4 4EB9 0000 C574             		jsr	(AnimateSprite).l
00016FEA 4EB9 0001 6D88             		jsr	(PLCLoad_Shields).l
00016FF0 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
00016FF6                            ; ---------------------------------------------------------------------------
00016FF6                            ; ===========================================================================
00016FF6                            
00016FF6                            @return:
00016FF6 4E75                       		rts
00016FF8                            
00016FF8                            RShieldItem_Destroy:
00016FF8 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
00016FFC 4E75                       		rts
00016FFE                            ; ===========================================================================
00016FFE                            ; ===========================================================================
00016FFE                            		include	"_incObj\38 Shield.asm"
00016FFE                            ; ---------------------------------------------------------------------------
00016FFE                            ; Object 38 - Shield
00016FFE                            ; ---------------------------------------------------------------------------
00016FFE                            ShieldItem: ; XREF: Obj_Index
00016FFE 7000                       		moveq	#0,d0
00017000 1028 0024                  		move.b	obRoutine(a0),d0
00017004 323B 0000                  		move.w	ShieldItem_Index(pc,d0.w),d1
00017008 4EFB 1000                  		jmp	ShieldItem_Index(pc,d1.w)
0001700C                            ; ===========================================================================
0001700C                            ; off_1D900:
0001700C                            ShieldItem_Index:
0001700C 0000                       		dc.w ShieldItem_Init-ShieldItem_Index	; 0
0001700E 0000                       		dc.w ShieldItem_Main-ShieldItem_Index	; 2
00017010                            ; ===========================================================================
00017010                            ; loc_1D904:
00017010                            ShieldItem_Init:
00017010 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
00017018 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
00017020 217C 0000 0000 0038        		move.l	#Art_Shield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
00017028 117C 0004 0001             		move.b	#4,obRender(a0)
0001702E 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017034 117C 0018 0014             		move.b	#$18,obActWid(a0)
0001703A 317C 0541 0002             		move.w	#$541,obGfx(a0)
00017040 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
00017046 0838 0007 D002             		btst	#7,(v_player+obGfx).w
0001704C 6700                       		beq.s	loc_195F0S
0001704E 08E8 0007 0002             		bset	#7,obGfx(a0)
00017054                            
00017054                            loc_195F0S:
00017054 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
0001705A 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
00017060 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
00017064                            ; loc_1D92C:
00017064                            ShieldItem_Main:
00017064 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
00017068 4A38 FE2D                  		tst.b	(v_invinc).w
0001706C 6600                       		bne.s	return_1D976
0001706E                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
0001706E                            		;beq.s	return_1D976	; If so, do not display and do not update variables
0001706E 4A38 FE2C                  		tst.b	(v_shield).w
00017072 6700 0000                  		beq.w	ShieldItem_Destroy	; If not, change to Insta-Shield
00017076 316A 0008 0008             		move.w	obX(a2),obX(a0)
0001707C 316A 000C 000C             		move.w	obY(a2),obY(a0)
00017082 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
00017088 4A6A 0002                  		tst.w	obGFX(a2)
0001708C 6A00                       		bpl.s	@nothighpriority
0001708E 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
00017094                            
00017094                            		@nothighpriority:
00017094 43F9 0000 0000             		lea	(Ani_Shield).l,a1
0001709A 4EB9 0000 C574             		jsr	(AnimateSprite).l
000170A0 4EB9 0001 6D88             		jsr	(PLCLoad_Shields).l
000170A6 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
000170AC                            ; ---------------------------------------------------------------------------
000170AC                            ; ===========================================================================
000170AC                            
000170AC                            return_1D976:
000170AC 4E75                       		rts
000170AE                            
000170AE                            ShieldItem_Destroy:
000170AE 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
000170B2 4E75                       		rts
000170B4                            ; ===========================================================================
000170B4                            ; ===========================================================================
000170B4                            		include	"_incObj\19 Invincibility Stars.asm"		
000170B4                            ; ---------------------------------------------------------------------------
000170B4                            ; Object 10 - invincibility stars
000170B4                            ; ---------------------------------------------------------------------------
000170B4 =00000024                  invstars_obroutine: equ obRoutine ; the same as routine in other objects
000170B4 =00000030                  InvStars_AniScript: equ $30 ; animation script used by sub-objects(in main object it's clear and unused) (4 bytes)
000170B4 =00000034                  InvStars_SpeedIndex: equ $34  ; (2 bytes)
000170B4 =00000036                  InvStars_PrevPosIndex: equ $36 ; clear and unused in main object
000170B4                            
000170B4                            InvStarsObj: 
000170B4 7000                       		moveq	#0,d0
000170B6 1028 0024                  		move.b	InvStars_obRoutine(a0),d0
000170BA 323B 0000                  		move.w	InvStars_Index(pc,d0.w),d1
000170BE 4EFB 1000                  		jmp	InvStars_Index(pc,d1.w)
000170C2                            ; ===========================================================================
000170C2 0000                       InvStars_Index:	dc.w @InitObjects-InvStars_Index
000170C4 0000                       		dc.w @MainObject-InvStars_Index
000170C6 0000                       		dc.w @SubObject-InvStars_Index
000170C8                            ; ===========================================================================
000170C8                            
000170C8                            	@SubObjectsData:
000170C8 0000 0000                  		dc.l Ani_InvStars2 ; animation script
000170CC 0B00                       		dc.w $0B00 ; speed index,sub3 anim
000170CE 0000 0000                  		dc.l Ani_InvStars3
000170D2 160D                       		dc.w $160D
000170D4 0000 0000                  		dc.l Ani_InvStars4
000170D8 2C0D                       		dc.w $2C0D
000170DA                            ; ===========================================================================
000170DA                            
000170DA                            	@InitObjects:
000170DA 223C 0000 0000             		move.l	#Unc_Stars,d1
000170E0 343C ABC0                  		move.w	#$ABC0,d2
000170E4 363C 0220                  		move.w	#$220,d3
000170E8 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
000170EE 7400                       		moveq	#0,d2
000170F0 45FA FFD0                  		lea	@SubObjectsData-6(pc),a2
000170F4 43D0                       		lea	(a0),a1
000170F6 7203                       		moveq	#3,d1
000170F8                            		
000170F8                            	@initStars:
000170F8 1290                       		move.b	(a0),(a1) ; load obj35
000170FA 137C 0004 0024             		move.b	#4,InvStars_obRoutine(a1)		; => @SubObject
00017100 237C 0000 0000 0004        		move.l	#Map_InvStars,obMap(a1)
00017108 337C 055E 0002             		move.w	#$55E,obGfx(a1)
0001710E 137C 0044 0001             		move.b  #%001000100,obRender(a1)
00017114 137C 0010 000E             		move.b	#$10,mainspr_width(a1)
0001711A 137C 0002 000F             		move.b	#2,mainspr_childsprites(a1)							 
00017120 1342 0036                  		move.b	d2,InvStars_PrevPosIndex(a1)
00017124 5242                       		addq.w	#1,d2
00017126 235A 0030                  		move.l	(a2)+,InvStars_AniScript(a1)
0001712A 335A 0034                  		move.w	(a2)+,InvStars_SpeedIndex(a1)
0001712E 43E9 0040                  		lea	$40(a1),a1 ; a1=object
00017132 51C9 FFC4                  		dbf	d1,@initStars
00017136                            
00017136 117C 0002 0024             		move.b	#2,InvStars_obRoutine(a0)		; => @MainObject
0001713C 117C 0004 0034             		move.b	#4,InvStars_SpeedIndex(a0)
00017142                            
00017142                            	@MainObject:
00017142 43F8 D000                  		lea (v_player).w,a1 ; a1=character
00017146 4A38 FE2D                  		tst.b   (v_invinc).w
0001714A 6700 83AE                  		beq.w	DeleteObject
0001714E 3029 0008                  		move.w	obX(a1),d0
00017152 3140 0008                  		move.w	d0,obX(a0)
00017156 3229 000C                  		move.w	obY(a1),d1
0001715A 3141 000C                  		move.w	d1,obY(a0)
0001715E 45E8 0010                  		lea	sub2_x_pos(a0),a2
00017162 47F9 0000 0000             		lea	Ani_InvStars1,a3
00017168 7A00                       		moveq	#0,d5
0001716A                            
0001716A                            	@getFrame_main:
0001716A 3428 0038                  		move.w	$38(a0),d2
0001716E 1A33 2000                  		move.b	(a3,d2.w),d5
00017172 6A00                       		bpl.s	@setFrameAndPosition_main
00017174 4268 0038                  		clr.w	$38(a0)
00017178 60F0                       		bra.s	@getFrame_main
0001717A                            ; ===========================================================================
0001717A                            
0001717A                            	@setFrameAndPosition_main:
0001717A 5268 0038                  		addq.w	#1,$38(a0)
0001717E 4DF9 0000 0000             		lea	InvStars_Speeds,a6
00017184 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
00017188 6100 0000                  		bsr.w	InvStars_get_speed
0001718C 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
0001718E 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
00017190 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
00017192 0646 0020                  		addi.w	#$20,d6
00017196 6100 0000                  		bsr.w	InvStars_get_speed
0001719A 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
0001719C 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
0001719E 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
000171A0 7012                       		moveq	#$12,d0
000171A2 0829 0000 0022             		btst	#0,obStatus(a1)
000171A8 6700                       		beq.s	@display_main
000171AA 4440                       		neg.w	d0
000171AC                            
000171AC                            	@display_main:
000171AC D128 0034                  		add.b	d0,InvStars_SpeedIndex(a0)
000171B0 303C 0080                  		move.w	#(1*$80),d0
000171B4 6000 8330                  		bra.w	DisplaySprite2
000171B8                            ; ===========================================================================
000171B8                            
000171B8                            	@SubObject:
000171B8 43F8 D000                  		lea 	(v_player).w,a1 ; a1=character
000171BC 4A38 FE2D                  		tst.b   (v_invinc).w
000171C0 6700 8338                  		beq.w	DeleteObject
000171C4 4BF8 F7A8                  		lea		(v_trackpos).w,a5
000171C8 4DF8 CB00                  		lea		(v_tracksonic).w,a6
000171CC                            
000171CC                            	@getPosition_sub:
000171CC 1228 0036                  		move.b	InvStars_PrevPosIndex(a0),d1
000171D0 E509                       		lsl.b	#2,d1
000171D2 3401                       		move.w	d1,d2
000171D4 D241                       		add.w	d1,d1
000171D6 D242                       		add.w	d2,d1
000171D8 3015                       		move.w	(a5),d0
000171DA 9001                       		sub.b	d1,d0
000171DC 45F6 0000                  		lea	(a6,d0.w),a2
000171E0 301A                       		move.w	(a2)+,d0
000171E2 321A                       		move.w	(a2)+,d1
000171E4 3140 0008                  		move.w	d0,obX(a0)
000171E8 3141 000C                  		move.w	d1,obY(a0)
000171EC 45E8 0010                  		lea	sub2_x_pos(a0),a2
000171F0 2668 0030                  		movea.l	InvStars_AniScript(a0),a3
000171F4                            
000171F4                            	@getFrame_sub:
000171F4 3428 0038                  		move.w	$38(a0),d2
000171F8 1A33 2000                  		move.b	(a3,d2.w),d5
000171FC 6A00                       		bpl.s	@setFrameAndPosition_sub
000171FE 4268 0038                  		clr.w	$38(a0)
00017202 60F0                       		bra.s	@getFrame_sub
00017204                            ; ===========================================================================
00017204                            
00017204                            	@setFrameAndPosition_sub:
00017204 4845                       		swap	d5
00017206 D428 0035                  		add.b	$35(a0),d2
0001720A 1A33 2000                  		move.b	(a3,d2.w),d5
0001720E 5268 0038                  		addq.w	#1,$38(a0)
00017212 4DFA 0000                  		lea	InvStars_Speeds(pc),a6
00017216 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
0001721A 6100                       		bsr.s	InvStars_get_speed
0001721C 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
0001721E 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
00017220 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
00017222 0646 0020                  		addi.w	#$20,d6
00017226 4845                       		swap	d5
00017228 6100                       		bsr.s	InvStars_get_speed
0001722A 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
0001722C 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
0001722E 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
00017230 7002                       		moveq	#2,d0
00017232 0829 0000 0022             		btst	#0,obStatus(a1)
00017238 6700                       		beq.s	loc_1DB20
0001723A 4440                       		neg.w	d0
0001723C                            
0001723C                            loc_1DB20:
0001723C D128 0034                  		add.b    d0,InvStars_SpeedIndex(a0)
00017240 303C 0080                  		move.w    #(1*$80),d0
00017244 6000 82A0                  		bra.w    DisplaySprite2
00017248                            ; ===========================================================================
00017248                            
00017248                            InvStars_get_speed:
00017248 0246 003E                  		andi.w	#$3E,d6 ; limit to 6 bits and clear first bit
0001724C 1436 6000                  		move.b	(a6,d6.w),d2 ; move x-move speed to d2
00017250 1636 6001                  		move.b	1(a6,d6.w),d3 ; move y-move speed to d3
00017254 4882                       		ext.w	d2
00017256 4883                       		ext.w	d3
00017258 D440                       		add.w	d0,d2 ; add object x position to x-move speed
0001725A D641                       		add.w	d1,d3 ; add object y position to y-move speed
0001725C 4E75                       		rts
0001725E                            
0001725E                            InvStars_Speeds: ; x-move speed,	y-move speed	
0001725E 0F00 0F03 0E06 0D08 0B0B+  		dc.w   $F00,  $F03,  $E06,  $D08,  $B0B,  $80D,  $60E,  $30F
0001726E 0010 FC0F F90E F70D F40B+  		dc.w    $10, -$3F1, -$6F2, -$8F3, -$BF5, -$DF8, -$EFA, -$FFD
0001727E F000 F0FC F1F9 F2F7 F4F4+  		dc.w  $F000, -$F04, -$E07, -$D09, -$B0C, -$80E, -$60F, -$310
0001728E FFF0 03F0 06F1 08F2 0BF4+  		dc.w   -$10,  $3F0,  $6F1,  $8F2,  $BF4,  $DF7,  $EF9,  $FFC
0001729E                            
0001729E                            ; ---------------------------------------------------------------------------
0001729E                            ; Animation script - invincibility stars
0001729E                            ; ---------------------------------------------------------------------------
0001729E                            
0001729E                            ; The animation script differs from the animate_sprite subroutine
0001729E                            ; Every positive byte - mapping
0001729E                            ; Every negative byte - loop flag 
0001729E                            
0001729E 0805 0706 0607 0508 0607+  Ani_InvStars1:	dc.b   8,  5,  7,  6,  6,  7,  5,  8,  6,  7,  7,  6,$FF
000172AC 00                         		even
000172AC 0807 0605 0403 0405 0607+  Ani_InvStars2:	dc.b   8,  7,  6,  5,  4,  3,  4,  5,  6,  7,$FF
000172B7 0304 0506 0708 0706 0504   		dc.b   3,  4,  5,  6,  7,  8,  7,  6,  5,  4
000172C2 00                         		even
000172C2 0807 0605 0403 0203 0405+  Ani_InvStars3:	dc.b   8,  7,  6,  5,  4,  3,  2,  3,  4,  5,  6,  7,$FF
000172CF 0203 0405 0607 0807 0605+  		dc.b   2,  3,  4,  5,  6,  7,  8,  7,  6,  5,  4,  3
000172DC 00                         		even
000172DC 0706 0504 0302 0102 0304+  Ani_InvStars4:	dc.b   7,  6,  5,  4,  3,  2,  1,  2,  3,  4,  5,  6,$FF
000172E9 0102 0304 0506 0706 0504+  		dc.b   1,  2,  3,  4,  5,  6,  7,  6,  5,  4,  3,  2
000172F6 00                         		even			
000172F6 00                         		even			
000172F6                            		include	"_incObj\4A Special Stage Entry (Unused).asm"
000172F6                            ; ---------------------------------------------------------------------------
000172F6                            ; Object 4A - special stage entry from beta
000172F6                            ; ---------------------------------------------------------------------------
000172F6                            
000172F6                            VanishSonic:
000172F6 7000                       		moveq	#0,d0
000172F8 1028 0024                  		move.b	obRoutine(a0),d0
000172FC 323B 0000                  		move.w	Van_Index(pc,d0.w),d1
00017300 4EFB 1000                  		jmp	Van_Index(pc,d1.w)
00017304                            ; ===========================================================================
00017304 0000                       Van_Index:	dc.w Van_Main-Van_Index
00017306 0000                       		dc.w Van_RmvSonic-Van_Index
00017308 0000                       		dc.w Van_LoadSonic-Van_Index
0001730A                            
0001730A =00000030                  van_time:	equ $30		; time for Sonic to disappear
0001730A                            ; ===========================================================================
0001730A                            
0001730A                            Van_Main:	; Routine 0
0001730A 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are pattern load cues empty?
0001730E 6700                       		beq.s	@isempty	; if yes, branch
00017310 4E75                       		rts	
00017312                            
00017312                            	@isempty:
00017312 5428 0024                  		addq.b	#2,obRoutine(a0)
00017316 217C 0000 0000 0004        		move.l	#Map_Vanish,obMap(a0)
0001731E 117C 0004 0001             		move.b	#4,obRender(a0)
00017324 317C 0080 0018             		move.w	#$80,obPriority(a0)
0001732A 117C 0038 0014             		move.b	#$38,obActWid(a0)
00017330 317C 0541 0002             		move.w	#$541,obGfx(a0)
00017336 317C 0078 0030             		move.w	#120,van_time(a0) ; set time for Sonic's disappearance to 2 seconds
0001733C                            
0001733C                            Van_RmvSonic:	; Routine 2
0001733C 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
00017342 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
00017348 1178 D022 0022             		move.b	(v_player+obStatus).w,obStatus(a0)
0001734E 43F9 0000 0000             		lea	(Ani_Vanish).l,a1
00017354 4EB9 0000 C574             		jsr	(AnimateSprite).l
0001735A 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
00017360 6600                       		bne.s	@display
00017362 4A38 D000                  		tst.b	(v_player).w
00017366 6700                       		beq.s	@display
00017368 11FC 0000 D000             		move.b	#0,(v_player).w	; remove Sonic
00017378                            
00017378                            	@display:
00017378 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001737E                            ; ===========================================================================
0001737E                            
0001737E                            Van_LoadSonic:	; Routine 4
0001737E 5368 0030                  		subq.w	#1,van_time(a0)	; subtract 1 from time
00017382 6600                       		bne.s	@wait		; if time remains, branch
00017384 11FC 0001 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
0001738A 4EF9 0000 F4FA             		jmp	(DeleteObject).l
00017390                            
00017390                            	@wait:
00017390 4E75                       		rts	
00017390 4E75                       		rts	
00017392                            		include	"_incObj\08 Water Splash.asm"
00017392                            ; ---------------------------------------------------------------------------
00017392                            ; Object 08 - water splash (LZ)
00017392                            ; ---------------------------------------------------------------------------
00017392                            
00017392                            Splash:
00017392 7000                       		moveq	#0,d0
00017394 1028 0024                  		move.b	obRoutine(a0),d0
00017398 323B 0000                  		move.w	Spla_Index(pc,d0.w),d1
0001739C 4EFB 1000                  		jmp	Spla_Index(pc,d1.w)
000173A0                            ; ===========================================================================
000173A0 0000                       Spla_Index:	dc.w Spla_Main-Spla_Index
000173A2 0000                       		dc.w Spla_Display-Spla_Index
000173A4 0000                       		dc.w Spla_Delete-Spla_Index
000173A6                            ; ===========================================================================
000173A6                            
000173A6                            Spla_Main:    ; Routine 0
000173A6 5428 0024                          addq.b    #2,obRoutine(a0)
000173AA 217C 0000 0000 0004                move.l    #Map_Splash,obMap(a0)
000173B2 0028 0004 0001                     ori.b    #4,obRender(a0)
000173B8 117C 0001 0018                     move.b    #1,obPriority(a0)
000173BE 117C 0010 0014                     move.b    #$10,obActWid(a0)
000173C4 317C 4259 0002                     move.w    #$4259,obGfx(a0)
000173CA 3178 D008 0008                     move.w    (v_player+obX).w,obX(a0) ; copy x-position from Sonic
000173D0                            
000173D0                            Spla_Display:    ; Routine 2
000173D0                                    ;move.w    (v_waterpos1).w,obY(a0) ; copy y-position from water height
000173D0 3178 FF92 000C                     move.w    (v_watersplashpos).w,obY(a0) ;TIS copy y-position from player
000173D6 43F9 0000 0000                     lea    (Ani_Splash).l,a1
000173DC 4EB9 0000 C574                     jsr    (AnimateSprite).l
000173E2 4EF9 0000 F4BA                     jmp    (DisplaySprite).l
000173E8                            ; ===========================================================================
000173E8                            
000173E8                            Spla_Delete:	; Routine 4
000173E8 4EF9 0000 F4FA             		jmp	(DeleteObject).l	; delete when animation	is complete
000173E8 4EF9 0000 F4FA             		jmp	(DeleteObject).l	; delete when animation	is complete
000173EE                            		include	"_anim\Shield and Invincibility.asm"
000173EE                            ; ---------------------------------------------------------------------------
000173EE                            ; Animation script - shield and invincibility stars
000173EE                            ; ---------------------------------------------------------------------------
000173EE 0000                       Ani_Shield:	dc.w @shield-Ani_Shield
000173F0 0101 0002 0003 0004 0005+  @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, $A, 0, $B, 0, $C, 0, afEnd
000173F0 0101 0002 0003 0004 0005+  @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, $A, 0, $B, 0, $C, 0, afEnd
0001740A                            Map_Shield:	include	"_maps\Shield.asm"
0001740A                            ; --------------------------------------------------------------------------------
0001740A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001740A                            ; --------------------------------------------------------------------------------
0001740A                            
0001740A                            SME_ocN6K:	
0001740A 0000 0000                  		dc.w SME_ocN6K_1A-SME_ocN6K, SME_ocN6K_1B-SME_ocN6K	
0001740E 0000 0000                  		dc.w SME_ocN6K_30-SME_ocN6K, SME_ocN6K_45-SME_ocN6K	
00017412 0000 0000                  		dc.w SME_ocN6K_5A-SME_ocN6K, SME_ocN6K_6F-SME_ocN6K	
00017416 0000 0000                  		dc.w SME_ocN6K_7A-SME_ocN6K, SME_ocN6K_85-SME_ocN6K	
0001741A 0000 0000                  		dc.w SME_ocN6K_90-SME_ocN6K, SME_ocN6K_9B-SME_ocN6K	
0001741E 0000 0000                  		dc.w SME_ocN6K_A6-SME_ocN6K, SME_ocN6K_BB-SME_ocN6K	
00017422 0000                       		dc.w SME_ocN6K_D0-SME_ocN6K	
00017424 00                         SME_ocN6K_1A:	dc.b 0	
00017425 04                         SME_ocN6K_1B:	dc.b 4	
00017426 E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
0001742B E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
00017430 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
00017435 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
0001743A 04                         SME_ocN6K_30:	dc.b 4	
0001743B E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
00017440 E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
00017445 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
0001744A 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
0001744F 04                         SME_ocN6K_45:	dc.b 4	
00017450 E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
00017455 E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
0001745A 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
0001745F 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
00017464 04                         SME_ocN6K_5A:	dc.b 4	
00017465 E80E 2000 EB               		dc.b $E8, $E, $20, 0, $EB	
0001746A E802 200C 0B               		dc.b $E8, 2, $20, $C, $B	
0001746F 000E 300F EB               		dc.b 0, $E, $30, $F, $EB	
00017474 0002 301B 0B               		dc.b 0, 2, $30, $1B, $B	
00017479 02                         SME_ocN6K_6F:	dc.b 2	
0001747A E80E 2000 EC               		dc.b $E8, $E, $20, 0, $EC	
0001747F 000E 300C EC               		dc.b 0, $E, $30, $C, $EC	
00017484 02                         SME_ocN6K_7A:	dc.b 2	
00017485 E80A 2000 F1               		dc.b $E8, $A, $20, 0, $F1	
0001748A 000A 3009 F1               		dc.b 0, $A, $30, 9, $F1	
0001748F 02                         SME_ocN6K_85:	dc.b 2	
00017490 E802 2000 F9               		dc.b $E8, 2, $20, 0, $F9	
00017495 0002 3003 F9               		dc.b 0, 2, $30, 3, $F9	
0001749A 02                         SME_ocN6K_90:	dc.b 2	
0001749B E80A 2800 F1               		dc.b $E8, $A, $28, 0, $F1	
000174A0 000A 3809 F1               		dc.b 0, $A, $38, 9, $F1	
000174A5 02                         SME_ocN6K_9B:	dc.b 2	
000174A6 E80E 2800 EC               		dc.b $E8, $E, $28, 0, $EC	
000174AB 000E 380C EC               		dc.b 0, $E, $38, $C, $EC	
000174B0 04                         SME_ocN6K_A6:	dc.b 4	
000174B1 E80E 2800 F3               		dc.b $E8, $E, $28, 0, $F3	
000174B6 E802 280C EB               		dc.b $E8, 2, $28, $C, $EB	
000174BB 000E 380F F3               		dc.b 0, $E, $38, $F, $F3	
000174C0 0002 381B EB               		dc.b 0, 2, $38, $1B, $EB	
000174C5 04                         SME_ocN6K_BB:	dc.b 4	
000174C6 E80E 2800 FB               		dc.b $E8, $E, $28, 0, $FB	
000174CB E80A 280C E3               		dc.b $E8, $A, $28, $C, $E3	
000174D0 000A 3815 E3               		dc.b 0, $A, $38, $15, $E3	
000174D5 000E 381E FB               		dc.b 0, $E, $38, $1E, $FB	
000174DA 04                         SME_ocN6K_D0:	dc.b 4	
000174DB E80E 2800 FB               		dc.b $E8, $E, $28, 0, $FB	
000174E0 E80A 280C E3               		dc.b $E8, $A, $28, $C, $E3	
000174E5 000A 3815 E3               		dc.b 0, $A, $38, $15, $E3	
000174EA 000E 381E FB               		dc.b 0, $E, $38, $1E, $FB	
000174F0 00                         		even
000174F0 00                         		even
000174F0                            DPLC_Shield:	include	"_maps\Shield - Dynamic Gfx Script.asm"
000174F0                            ; --------------------------------------------------------------------------------
000174F0                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 3 & Knuckles format; --------------------------------------------------------------------------------
000174F0                            
000174F0                            SME_yRIsY:	
000174F0 0000 0000                  		dc.w SME_yRIsY_1A-SME_yRIsY, SME_yRIsY_1C-SME_yRIsY	
000174F4 0000 0000                  		dc.w SME_yRIsY_26-SME_yRIsY, SME_yRIsY_30-SME_yRIsY	
000174F8 0000 0000                  		dc.w SME_yRIsY_3A-SME_yRIsY, SME_yRIsY_44-SME_yRIsY	
000174FC 0000 0000                  		dc.w SME_yRIsY_4A-SME_yRIsY, SME_yRIsY_50-SME_yRIsY	
00017500 0000 0000                  		dc.w SME_yRIsY_56-SME_yRIsY, SME_yRIsY_5C-SME_yRIsY	
00017504 0000 0000                  		dc.w SME_yRIsY_62-SME_yRIsY, SME_yRIsY_6C-SME_yRIsY	
00017508 0000                       		dc.w SME_yRIsY_76-SME_yRIsY	
0001750A 0000                       SME_yRIsY_1A:	dc.b 0, 0	
0001750C 0004 B000 800C 800C B000   SME_yRIsY_1C:	dc.b 0, 4, $B0, 0, $80, $C, $80, $C, $B0, 0	
00017516 0004 B015 8021 8021 B015   SME_yRIsY_26:	dc.b 0, 4, $B0, $15, $80, $21, $80, $21, $B0, $15	
00017520 0004 B02A 8036 8036 B02A   SME_yRIsY_30:	dc.b 0, 4, $B0, $2A, $80, $36, $80, $36, $B0, $2A	
0001752A 0004 B03F 204B B03F 204B   SME_yRIsY_3A:	dc.b 0, 4, $B0, $3F, $20, $4B, $B0, $3F, $20, $4B	
00017534 0002 B04E B04E             SME_yRIsY_44:	dc.b 0, 2, $B0, $4E, $B0, $4E	
0001753A 0002 805A 805A             SME_yRIsY_4A:	dc.b 0, 2, $80, $5A, $80, $5A	
00017540 0002 2063 2063             SME_yRIsY_50:	dc.b 0, 2, $20, $63, $20, $63	
00017546 0002 805A 805A             SME_yRIsY_56:	dc.b 0, 2, $80, $5A, $80, $5A	
0001754C 0002 B04E B04E             SME_yRIsY_5C:	dc.b 0, 2, $B0, $4E, $B0, $4E	
00017552 0004 B03F 204B B03F 204B   SME_yRIsY_62:	dc.b 0, 4, $B0, $3F, $20, $4B, $B0, $3F, $20, $4B	
0001755C 0004 B02A 8036 8036 B02A   SME_yRIsY_6C:	dc.b 0, 4, $B0, $2A, $80, $36, $80, $36, $B0, $2A	
00017566 0004 B015 8021 8021 B015   SME_yRIsY_76:	dc.b 0, 4, $B0, $15, $80, $21, $80, $21, $B0, $15	
00017570                            		even
00017570                            		even
00017570                            Map_InvStars:	include	"_maps\Invincibility Stars.asm"
00017570                            ; ================================================================================
00017570                            ; Sprite Mappings - generated by Flex 2 Thu Apr 23 2020 12:30:36 GMT+0300 (RTZ 2 (зима))
00017570                            ; ================================================================================
00017570                            
00017570                            InvStarMap:
00017570 0000 0000                  	dc.w $0, InvStarMap_1-InvStarMap
00017574 0000 0000                  	dc.w InvStarMap_2-InvStarMap, InvStarMap_3-InvStarMap
00017578 0000 0000                  	dc.w InvStarMap_4-InvStarMap, InvStarMap_5-InvStarMap
0001757C 0000 0000                  	dc.w InvStarMap_6-InvStarMap, InvStarMap_7-InvStarMap
00017580 0000                       	dc.w InvStarMap_8-InvStarMap
00017582 01                         InvStarMap_1: dc.b $1
00017583 F800 0000 FC               	dc.b $F8, $0, $0, $0, $FC
00017588 01                         InvStarMap_2: dc.b $1
00017589 F800 0001 FC               	dc.b $F8, $0, $0, $1, $FC
0001758E 01                         InvStarMap_3: dc.b $1
0001758F F801 0002 FC               	dc.b $F8, $1, $0, $2, $FC
00017594 01                         InvStarMap_4: dc.b $1
00017595 F801 0004 FC               	dc.b $F8, $1, $0, $4, $FC
0001759A 01                         InvStarMap_5: dc.b $1
0001759B F801 0006 FC               	dc.b $F8, $1, $0, $6, $FC
000175A0 01                         InvStarMap_6: dc.b $1
000175A1 F805 0008 F8               	dc.b $F8, $5, $0, $8, $F8
000175A6 01                         InvStarMap_7: dc.b $1
000175A7 F805 000C F8               	dc.b $F8, $5, $0, $C, $F8
000175AC 01                         InvStarMap_8: dc.b $1
000175AD F00F 0010 F0               	dc.b $F0, $F, $0, $10, $F0
000175B2                            	even
000175B2                            	even
000175B2                            		include	"_anim\Special Stage Entry (Unused).asm"
000175B2                            ; ---------------------------------------------------------------------------
000175B2                            ; Animation script - special stage entry effect from beta
000175B2                            ; ---------------------------------------------------------------------------
000175B2 0000                       Ani_Vanish:	dc.w @vanish-Ani_Vanish
000175B4 0500 0100 0100 0701 0702+  @vanish:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, afRoutine
000175C8                            		even
000175C8                            		even
000175C8                            Map_Vanish:	include	"_maps\Special Stage Entry (Unused).asm"
000175C8                            ; ---------------------------------------------------------------------------
000175C8                            ; Sprite mappings - special stage entry	from beta
000175C8                            ; ---------------------------------------------------------------------------
000175C8                            Map_Vanish_internal:
000175C8 0000                       		dc.w @flash1-Map_Vanish_internal
000175CA 0000                       		dc.w @flash2-Map_Vanish_internal
000175CC 0000                       		dc.w @flash3-Map_Vanish_internal
000175CE 0000                       		dc.w @sparkle1-Map_Vanish_internal
000175D0 0000                       		dc.w @sparkle2-Map_Vanish_internal
000175D2 0000                       		dc.w @sparkle3-Map_Vanish_internal
000175D4 0000                       		dc.w @sparkle4-Map_Vanish_internal
000175D6 0000                       		dc.w @blank-Map_Vanish_internal
000175D8 03                         @flash1:	dc.b 3
000175D9 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
000175DE 0004 0001 00               		dc.b 0,	4, 0, 1, 0
000175E3 0800 1000 08               		dc.b 8,	0, $10,	0, 8
000175E8 03                         @flash2:	dc.b 3
000175E9 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
000175EE 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
000175F3 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
000175F8 05                         @flash3:	dc.b 5
000175F9 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
000175FE EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00017603 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00017608 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
0001760D 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00017612 09                         @sparkle1:	dc.b 9
00017613 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00017618 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
0001761D 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00017622 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00017627 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
0001762C F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00017631 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00017636 0000 0825 28               		dc.b 0,	0, 8, $25, $28
0001763B F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00017640 12                         @sparkle2:	dc.b $12
00017641 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00017646 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
0001764B F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00017650 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00017655 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
0001765A 1000 1026 00               		dc.b $10, 0, $10, $26, 0
0001765F 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00017664 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00017669 0000 0026 10               		dc.b 0,	0, 0, $26, $10
0001766E 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00017673 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00017678 0800 0029 20               		dc.b 8,	0, 0, $29, $20
0001767D F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00017682 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00017687 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
0001768C F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00017691 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00017696 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
0001769B 11                         @sparkle3:	dc.b $11
0001769C F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
000176A1 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
000176A6 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
000176AB 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
000176B0 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
000176B5 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000176BA 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
000176BF F800 1025 30               		dc.b $F8, 0, $10, $25, $30
000176C4 0000 0025 30               		dc.b 0,	0, 0, $25, $30
000176C9 0800 0825 30               		dc.b 8,	0, 8, $25, $30
000176CE 0000 0826 38               		dc.b 0,	0, 8, $26, $38
000176D3 0800 0029 38               		dc.b 8,	0, 0, $29, $38
000176D8 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
000176DD 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
000176E2 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
000176E7 0000 0025 48               		dc.b 0,	0, 0, $25, $48
000176EC 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
000176F1 09                         @sparkle4:	dc.b 9
000176F2 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
000176F7 0400 0825 28               		dc.b 4,	0, 8, $25, $28
000176FC 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00017701 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00017706 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
0001770B FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00017710 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00017715 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
0001771A 04                         		dc.b 4
0001771B 0008 2758 00               @blank:		dc.b 0,	8, $27,	$58, 0
00017720                            		even
00017720                            		even
00017720                            		include	"_anim\Water Splash.asm"
00017720                            ; ---------------------------------------------------------------------------
00017720                            ; Animation script - water splash (LZ)
00017720                            ; ---------------------------------------------------------------------------
00017720 0000                       Ani_Splash:	dc.w @splash-Ani_Splash
00017722 0400 0102 FC               @splash:	dc.b 4,	0, 1, 2, afRoutine
00017728 00                         		even
00017728 00                         		even
00017728                            Map_Splash:	include	"_maps\Water Splash.asm"
00017728                            ; ---------------------------------------------------------------------------
00017728                            ; Sprite mappings - water splash (LZ)
00017728                            ; ---------------------------------------------------------------------------
00017728                            Map_Splash_internal:
00017728 0000                       		dc.w @splash1-Map_Splash_internal
0001772A 0000                       		dc.w @splash2-Map_Splash_internal
0001772C 0000                       		dc.w @splash3-Map_Splash_internal
0001772E 02                         @splash1:	dc.b 2
0001772F F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00017734 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00017739 02                         @splash2:	dc.b 2
0001773A E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
0001773F EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00017744 01                         @splash3:	dc.b 1
00017745 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
0001774A                            		even
0001774A                            		even
0001774A                            
0001774A                            		include	"_incObj\Sonic AnglePos.asm"
0001774A                            ; ---------------------------------------------------------------------------
0001774A                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
0001774A                            ; ---------------------------------------------------------------------------
0001774A                            
0001774A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001774A                            
0001774A                            
0001774A                            Sonic_AnglePos:
0001774A 0828 0003 0022             		btst	#3,obStatus(a0)
00017750 6700                       		beq.s	loc_14602
00017752 7000                       		moveq	#0,d0
00017754 11C0 F768                  		move.b	d0,($FFFFF768).w
00017758 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001775C 4E75                       		rts	
0001775E                            ; ===========================================================================
0001775E                            
0001775E                            loc_14602:
0001775E 7003                       		moveq	#3,d0
00017760 11C0 F768                  		move.b	d0,($FFFFF768).w
00017764 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017768 1028 0026                  		move.b	obAngle(a0),d0
0001776C 0600 0020                  		addi.b	#$20,d0
00017770 6A00                       		bpl.s	loc_14624
00017772 1028 0026                  		move.b	obAngle(a0),d0
00017776 6A00                       		bpl.s	loc_1461E
00017778 5300                       		subq.b	#1,d0
0001777A                            
0001777A                            loc_1461E:
0001777A 0600 0020                  		addi.b	#$20,d0
0001777E 6000                       		bra.s	loc_14630
00017780                            ; ===========================================================================
00017780                            
00017780                            loc_14624:
00017780 1028 0026                  		move.b	obAngle(a0),d0
00017784 6A00                       		bpl.s	loc_1462C
00017786 5200                       		addq.b	#1,d0
00017788                            
00017788                            loc_1462C:
00017788 0600 001F                  		addi.b	#$1F,d0
0001778C                            
0001778C                            loc_14630:
0001778C 0200 00C0                  		andi.b	#$C0,d0
00017790 0C00 0040                  		cmpi.b	#$40,d0
00017794 6700 0000                  		beq.w	Sonic_WalkVertL
00017798 0C00 0080                  		cmpi.b	#$80,d0
0001779C 6700 0000                  		beq.w	Sonic_WalkCeiling
000177A0 0C00 00C0                  		cmpi.b	#$C0,d0
000177A4 6700 0000                  		beq.w	Sonic_WalkVertR
000177A8 3428 000C                  		move.w	obY(a0),d2
000177AC 3628 0008                  		move.w	obX(a0),d3
000177B0 7000                       		moveq	#0,d0
000177B2 1028 0016                  		move.b	obHeight(a0),d0
000177B6 4880                       		ext.w	d0
000177B8 D440                       		add.w	d0,d2
000177BA 1028 0017                  		move.b	obWidth(a0),d0
000177BE 4880                       		ext.w	d0
000177C0 D640                       		add.w	d0,d3
000177C2 49F8 F768                  		lea	($FFFFF768).w,a4
000177C6 367C 0010                  		movea.w	#$10,a3
000177CA 3C3C 0000                  		move.w	#0,d6
000177CE 7A0D                       		moveq	#$D,d5
000177D0 6100 0000                  		bsr.w	FindFloor
000177D4 3F01                       		move.w	d1,-(sp)
000177D6 3428 000C                  		move.w	obY(a0),d2
000177DA 3628 0008                  		move.w	obX(a0),d3
000177DE 7000                       		moveq	#0,d0
000177E0 1028 0016                  		move.b	obHeight(a0),d0
000177E4 4880                       		ext.w	d0
000177E6 D440                       		add.w	d0,d2
000177E8 1028 0017                  		move.b	obWidth(a0),d0
000177EC 4880                       		ext.w	d0
000177EE 4440                       		neg.w	d0
000177F0 D640                       		add.w	d0,d3
000177F2 49F8 F76A                  		lea	($FFFFF76A).w,a4
000177F6 367C 0010                  		movea.w	#$10,a3
000177FA 3C3C 0000                  		move.w	#0,d6
000177FE 7A0D                       		moveq	#$D,d5
00017800 6100 0000                  		bsr.w	FindFloor
00017804 301F                       		move.w	(sp)+,d0
00017806 6100 0000                  		bsr.w	Sonic_Angle
0001780A 4A41                       		tst.w	d1
0001780C 6700                       		beq.s	locret_146BE
0001780E 6A00                       		bpl.s	loc_146C0
00017810 0C41 FFF2                  		cmpi.w	#-$E,d1
00017814 6D00                       		blt.s	locret_146E6
00017816 D368 000C                  		add.w	d1,obY(a0)
0001781A                            
0001781A                            locret_146BE:
0001781A 4E75                       		rts	
0001781C                            ; ===========================================================================
0001781C                            
0001781C                            loc_146C0:
0001781C 0C41 000E                  		cmpi.w	#$E,d1
00017820 6E00                       		bgt.s	loc_146CC
00017822                            
00017822                            loc_146C6:
00017822 D368 000C                  		add.w	d1,obY(a0)
00017826 4E75                       		rts	
00017828                            ; ===========================================================================
00017828                            
00017828                            loc_146CC:
00017828 4A28 0038                  		tst.b	$38(a0)
0001782C 66F4                       		bne.s	loc_146C6
0001782E 08E8 0001 0022             		bset	#1,obStatus(a0)
00017834 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001783A 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017840 4E75                       		rts	
00017842                            ; ===========================================================================
00017842                            
00017842                            locret_146E6:
00017842 4E75                       		rts	
00017844                            ; End of function Sonic_AnglePos
00017844                            
00017844                            ; ===========================================================================
00017844 2428 0008                  		move.l	obX(a0),d2
00017848 3028 0010                  		move.w	obVelX(a0),d0
0001784C 48C0                       		ext.l	d0
0001784E E180                       		asl.l	#8,d0
00017850 9480                       		sub.l	d0,d2
00017852 2142 0008                  		move.l	d2,obX(a0)
00017856 303C 0038                  		move.w	#$38,d0
0001785A 48C0                       		ext.l	d0
0001785C E180                       		asl.l	#8,d0
0001785E 9680                       		sub.l	d0,d3
00017860 2143 000C                  		move.l	d3,obY(a0)
00017864 4E75                       		rts	
00017866                            ; ===========================================================================
00017866                            
00017866                            locret_1470A:
00017866 4E75                       		rts	
00017868                            ; ===========================================================================
00017868 2628 000C                  		move.l	obY(a0),d3
0001786C 3028 0012                  		move.w	obVelY(a0),d0
00017870 0440 0038                  		subi.w	#$38,d0
00017874 3140 0012                  		move.w	d0,obVelY(a0)
00017878 48C0                       		ext.l	d0
0001787A E180                       		asl.l	#8,d0
0001787C 9680                       		sub.l	d0,d3
0001787E 2143 000C                  		move.l	d3,obY(a0)
00017882 4E75                       		rts	
00017884 4E75                       		rts	
00017886                            ; ===========================================================================
00017886 2428 0008                  		move.l	obX(a0),d2
0001788A 2628 000C                  		move.l	obY(a0),d3
0001788E 3028 0010                  		move.w	obVelX(a0),d0
00017892 48C0                       		ext.l	d0
00017894 E180                       		asl.l	#8,d0
00017896 9480                       		sub.l	d0,d2
00017898 3028 0012                  		move.w	obVelY(a0),d0
0001789C 48C0                       		ext.l	d0
0001789E E180                       		asl.l	#8,d0
000178A0 9680                       		sub.l	d0,d3
000178A2 2142 0008                  		move.l	d2,obX(a0)
000178A6 2143 000C                  		move.l	d3,obY(a0)
000178AA 4E75                       		rts	
000178AC                            
000178AC                            ; ---------------------------------------------------------------------------
000178AC                            ; Subroutine to	change Sonic's angle as he walks along the floor
000178AC                            ; ---------------------------------------------------------------------------
000178AC                            
000178AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000178AC                            
000178AC                            
000178AC                            Sonic_Angle:
000178AC 1438 F76A                  		move.b	($FFFFF76A).w,d2
000178B0 B240                       		cmp.w	d0,d1
000178B2 6F00                       		ble.s	loc_1475E
000178B4 1438 F768                  		move.b	($FFFFF768).w,d2
000178B8 3200                       		move.w	d0,d1
000178BA                            
000178BA                            loc_1475E:
000178BA 0802 0000                  		btst	#0,d2
000178BE 6600                       		bne.s	loc_1476A
000178C0 1142 0026                  		move.b	d2,obAngle(a0)
000178C4 4E75                       		rts	
000178C6                            ; ===========================================================================
000178C6                            
000178C6                            loc_1476A:
000178C6 1428 0026                  		move.b	obAngle(a0),d2
000178CA 0602 0020                  		addi.b	#$20,d2
000178CE 0202 00C0                  		andi.b	#$C0,d2
000178D2 1142 0026                  		move.b	d2,obAngle(a0)
000178D6 4E75                       		rts	
000178D8                            ; End of function Sonic_Angle
000178D8                            
000178D8                            ; ---------------------------------------------------------------------------
000178D8                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000178D8                            ; ---------------------------------------------------------------------------
000178D8                            
000178D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000178D8                            
000178D8                            
000178D8                            Sonic_WalkVertR:
000178D8 3428 000C                  		move.w	obY(a0),d2
000178DC 3628 0008                  		move.w	obX(a0),d3
000178E0 7000                       		moveq	#0,d0
000178E2 1028 0017                  		move.b	obWidth(a0),d0
000178E6 4880                       		ext.w	d0
000178E8 4440                       		neg.w	d0
000178EA D440                       		add.w	d0,d2
000178EC 1028 0016                  		move.b	obHeight(a0),d0
000178F0 4880                       		ext.w	d0
000178F2 D640                       		add.w	d0,d3
000178F4 49F8 F768                  		lea	($FFFFF768).w,a4
000178F8 367C 0010                  		movea.w	#$10,a3
000178FC 3C3C 0000                  		move.w	#0,d6
00017900 7A0D                       		moveq	#$D,d5
00017902 6100 0000                  		bsr.w	FindWall
00017906 3F01                       		move.w	d1,-(sp)
00017908 3428 000C                  		move.w	obY(a0),d2
0001790C 3628 0008                  		move.w	obX(a0),d3
00017910 7000                       		moveq	#0,d0
00017912 1028 0017                  		move.b	obWidth(a0),d0
00017916 4880                       		ext.w	d0
00017918 D440                       		add.w	d0,d2
0001791A 1028 0016                  		move.b	obHeight(a0),d0
0001791E 4880                       		ext.w	d0
00017920 D640                       		add.w	d0,d3
00017922 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017926 367C 0010                  		movea.w	#$10,a3
0001792A 3C3C 0000                  		move.w	#0,d6
0001792E 7A0D                       		moveq	#$D,d5
00017930 6100 0000                  		bsr.w	FindWall
00017934 301F                       		move.w	(sp)+,d0
00017936 6100 FF74                  		bsr.w	Sonic_Angle
0001793A 4A41                       		tst.w	d1
0001793C 6700                       		beq.s	locret_147F0
0001793E 6A00                       		bpl.s	loc_147F2
00017940 0C41 FFF2                  		cmpi.w	#-$E,d1
00017944 6D00 FF20                  		blt.w	locret_1470A
00017948 D368 0008                  		add.w	d1,obX(a0)
0001794C                            
0001794C                            locret_147F0:
0001794C 4E75                       		rts	
0001794E                            ; ===========================================================================
0001794E                            
0001794E                            loc_147F2:
0001794E 0C41 000E                  		cmpi.w	#$E,d1
00017952 6E00                       		bgt.s	loc_147FE
00017954                            
00017954                            loc_147F8:
00017954 D368 0008                  		add.w	d1,obX(a0)
00017958 4E75                       		rts	
0001795A                            ; ===========================================================================
0001795A                            
0001795A                            loc_147FE:
0001795A 4A28 0038                  		tst.b	$38(a0)
0001795E 66F4                       		bne.s	loc_147F8
00017960 08E8 0001 0022             		bset	#1,obStatus(a0)
00017966 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001796C 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017972 4E75                       		rts	
00017974                            ; End of function Sonic_WalkVertR
00017974                            
00017974                            ; ---------------------------------------------------------------------------
00017974                            ; Subroutine allowing Sonic to walk upside-down
00017974                            ; ---------------------------------------------------------------------------
00017974                            
00017974                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017974                            
00017974                            
00017974                            Sonic_WalkCeiling:
00017974 3428 000C                  		move.w	obY(a0),d2
00017978 3628 0008                  		move.w	obX(a0),d3
0001797C 7000                       		moveq	#0,d0
0001797E 1028 0016                  		move.b	obHeight(a0),d0
00017982 4880                       		ext.w	d0
00017984 9440                       		sub.w	d0,d2
00017986 0A42 000F                  		eori.w	#$F,d2
0001798A 1028 0017                  		move.b	obWidth(a0),d0
0001798E 4880                       		ext.w	d0
00017990 D640                       		add.w	d0,d3
00017992 49F8 F768                  		lea	($FFFFF768).w,a4
00017996 367C FFF0                  		movea.w	#-$10,a3
0001799A 3C3C 1000                  		move.w	#$1000,d6
0001799E 7A0D                       		moveq	#$D,d5
000179A0 6100 0000                  		bsr.w	FindFloor
000179A4 3F01                       		move.w	d1,-(sp)
000179A6 3428 000C                  		move.w	obY(a0),d2
000179AA 3628 0008                  		move.w	obX(a0),d3
000179AE 7000                       		moveq	#0,d0
000179B0 1028 0016                  		move.b	obHeight(a0),d0
000179B4 4880                       		ext.w	d0
000179B6 9440                       		sub.w	d0,d2
000179B8 0A42 000F                  		eori.w	#$F,d2
000179BC 1028 0017                  		move.b	obWidth(a0),d0
000179C0 4880                       		ext.w	d0
000179C2 9640                       		sub.w	d0,d3
000179C4 49F8 F76A                  		lea	($FFFFF76A).w,a4
000179C8 367C FFF0                  		movea.w	#-$10,a3
000179CC 3C3C 1000                  		move.w	#$1000,d6
000179D0 7A0D                       		moveq	#$D,d5
000179D2 6100 0000                  		bsr.w	FindFloor
000179D6 301F                       		move.w	(sp)+,d0
000179D8 6100 FED2                  		bsr.w	Sonic_Angle
000179DC 4A41                       		tst.w	d1
000179DE 6700                       		beq.s	locret_14892
000179E0 6A00                       		bpl.s	loc_14894
000179E2 0C41 FFF2                  		cmpi.w	#-$E,d1
000179E6 6D00 FE5A                  		blt.w	locret_146E6
000179EA 9368 000C                  		sub.w	d1,obY(a0)
000179EE                            
000179EE                            locret_14892:
000179EE 4E75                       		rts	
000179F0                            ; ===========================================================================
000179F0                            
000179F0                            loc_14894:
000179F0 0C41 000E                  		cmpi.w	#$E,d1
000179F4 6E00                       		bgt.s	loc_148A0
000179F6                            
000179F6                            loc_1489A:
000179F6 9368 000C                  		sub.w	d1,obY(a0)
000179FA 4E75                       		rts	
000179FC                            ; ===========================================================================
000179FC                            
000179FC                            loc_148A0:
000179FC 4A28 0038                  		tst.b	$38(a0)
00017A00 66F4                       		bne.s	loc_1489A
00017A02 08E8 0001 0022             		bset	#1,obStatus(a0)
00017A08 08A8 0005 0022             		bclr	#5,obStatus(a0)
00017A0E 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017A14 4E75                       		rts	
00017A16                            ; End of function Sonic_WalkCeiling
00017A16                            
00017A16                            ; ---------------------------------------------------------------------------
00017A16                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00017A16                            ; ---------------------------------------------------------------------------
00017A16                            
00017A16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017A16                            
00017A16                            
00017A16                            Sonic_WalkVertL:
00017A16 3428 000C                  		move.w	obY(a0),d2
00017A1A 3628 0008                  		move.w	obX(a0),d3
00017A1E 7000                       		moveq	#0,d0
00017A20 1028 0017                  		move.b	obWidth(a0),d0
00017A24 4880                       		ext.w	d0
00017A26 9440                       		sub.w	d0,d2
00017A28 1028 0016                  		move.b	obHeight(a0),d0
00017A2C 4880                       		ext.w	d0
00017A2E 9640                       		sub.w	d0,d3
00017A30 0A43 000F                  		eori.w	#$F,d3
00017A34 49F8 F768                  		lea	($FFFFF768).w,a4
00017A38 367C FFF0                  		movea.w	#-$10,a3
00017A3C 3C3C 0800                  		move.w	#$800,d6
00017A40 7A0D                       		moveq	#$D,d5
00017A42 6100 0000                  		bsr.w	FindWall
00017A46 3F01                       		move.w	d1,-(sp)
00017A48 3428 000C                  		move.w	obY(a0),d2
00017A4C 3628 0008                  		move.w	obX(a0),d3
00017A50 7000                       		moveq	#0,d0
00017A52 1028 0017                  		move.b	obWidth(a0),d0
00017A56 4880                       		ext.w	d0
00017A58 D440                       		add.w	d0,d2
00017A5A 1028 0016                  		move.b	obHeight(a0),d0
00017A5E 4880                       		ext.w	d0
00017A60 9640                       		sub.w	d0,d3
00017A62 0A43 000F                  		eori.w	#$F,d3
00017A66 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017A6A 367C FFF0                  		movea.w	#-$10,a3
00017A6E 3C3C 0800                  		move.w	#$800,d6
00017A72 7A0D                       		moveq	#$D,d5
00017A74 6100 0000                  		bsr.w	FindWall
00017A78 301F                       		move.w	(sp)+,d0
00017A7A 6100 FE30                  		bsr.w	Sonic_Angle
00017A7E 4A41                       		tst.w	d1
00017A80 6700                       		beq.s	locret_14934
00017A82 6A00                       		bpl.s	loc_14936
00017A84 0C41 FFF2                  		cmpi.w	#-$E,d1
00017A88 6D00 FDDC                  		blt.w	locret_1470A
00017A8C 9368 0008                  		sub.w	d1,obX(a0)
00017A90                            
00017A90                            locret_14934:
00017A90 4E75                       		rts	
00017A92                            ; ===========================================================================
00017A92                            
00017A92                            loc_14936:
00017A92 0C41 000E                  		cmpi.w	#$E,d1
00017A96 6E00                       		bgt.s	loc_14942
00017A98                            
00017A98                            loc_1493C:
00017A98 9368 0008                  		sub.w	d1,obX(a0)
00017A9C 4E75                       		rts	
00017A9E                            ; ===========================================================================
00017A9E                            
00017A9E                            loc_14942:
00017A9E 4A28 0038                  		tst.b	$38(a0)
00017AA2 66F4                       		bne.s	loc_1493C
00017AA4 08E8 0001 0022             		bset	#1,obStatus(a0)
00017AAA 08A8 0005 0022             		bclr	#5,obStatus(a0)
00017AB0 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017AB6 4E75                       		rts	
00017AB8                            ; End of function Sonic_WalkVertL
00017AB8                            ; End of function Sonic_WalkVertL
00017AB8                            
00017AB8                            		include	"_incObj\sub FindNearestTile.asm"
00017AB8                            ; ---------------------------------------------------------------------------
00017AB8                            ; Subroutine to	find which tile	the object is standing on
00017AB8                            
00017AB8                            ; input:
00017AB8                            ;	d2 = y-position of object's bottom edge
00017AB8                            ;	d3 = x-position of object
00017AB8                            
00017AB8                            ; output:
00017AB8                            ;	a1 = address within 256x256 mappings where object is standing
00017AB8                            ;	     (refers to a 16x16 tile number)
00017AB8                            ; ---------------------------------------------------------------------------
00017AB8                            
00017AB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017AB8                            
00017AB8                            
00017AB8                            FindNearestTile:
00017AB8 3002                       		move.w	d2,d0		; get y-pos. of bottom edge of object
00017ABA E248                       		lsr.w	#1,d0
00017ABC 0240 0380                  		andi.w	#$380,d0
00017AC0 3203                       		move.w	d3,d1		; get x-pos. of object
00017AC2 E049                       		lsr.w	#8,d1
00017AC4 0241 007F                  		andi.w	#$7F,d1
00017AC8 D041                       		add.w	d1,d0		; combine
00017ACA 72FF                       		moveq	#-1,d1
00017ACC 43F8 A400                  		lea	(v_lvllayout).w,a1
00017AD0 1231 0000                  		move.b	(a1,d0.w),d1	; get 256x256 tile number
00017AD4 6700                       		beq.s	@blanktile	; branch if 0
00017AD6 6B00                       		bmi.s	@specialtile	; branch if >$7F
00017AD8 5301                       		subq.b	#1,d1
00017ADA 4881                       		ext.w	d1
00017ADC EE59                       		ror.w	#7,d1
00017ADE 3002                       		move.w	d2,d0
00017AE0 D040                       		add.w	d0,d0
00017AE2 0240 01E0                  		andi.w	#$1E0,d0
00017AE6 D240                       		add.w	d0,d1
00017AE8 3003                       		move.w	d3,d0
00017AEA E648                       		lsr.w	#3,d0
00017AEC 0240 001E                  		andi.w	#$1E,d0
00017AF0 D240                       		add.w	d0,d1
00017AF2                            
00017AF2                            @blanktile:
00017AF2 2241                       		movea.l	d1,a1
00017AF4 4E75                       		rts	
00017AF6                            ; ===========================================================================
00017AF6                            
00017AF6                            @specialtile:
00017AF6 0241 007F                  		andi.w	#$7F,d1
00017AFA 0828 0006 0001             		btst	#6,obRender(a0) ; is object "behind a loop"?
00017B00 6700                       		beq.s	@treatasnormal	; if not, branch
00017B02 5241                       		addq.w	#1,d1
00017B04 0C41 0029                  		cmpi.w	#$29,d1
00017B08 6600                       		bne.s	@treatasnormal
00017B0A 323C 0051                  		move.w	#$51,d1
00017B0E                            
00017B0E                            	@treatasnormal:
00017B0E 5301                       		subq.b	#1,d1
00017B10 EE59                       		ror.w	#7,d1
00017B12 3002                       		move.w	d2,d0
00017B14 D040                       		add.w	d0,d0
00017B16 0240 01E0                  		andi.w	#$1E0,d0
00017B1A D240                       		add.w	d0,d1
00017B1C 3003                       		move.w	d3,d0
00017B1E E648                       		lsr.w	#3,d0
00017B20 0240 001E                  		andi.w	#$1E,d0
00017B24 D240                       		add.w	d0,d1
00017B26 2241                       		movea.l	d1,a1
00017B28 4E75                       		rts	
00017B2A                            ; End of function FindNearestTile
00017B2A                            ; End of function FindNearestTile
00017B2A                            		include	"_incObj\sub FindFloor.asm"
00017B2A                            ; ---------------------------------------------------------------------------
00017B2A                            ; Subroutine to	find the floor
00017B2A                            
00017B2A                            ; input:
00017B2A                            ;	d2 = y-position of object's bottom edge
00017B2A                            ;	d3 = x-position of object
00017B2A                            ;	d5 = bit to test for solidness
00017B2A                            
00017B2A                            ; output:
00017B2A                            ;	d1 = distance to the floor
00017B2A                            ;	a1 = address within 256x256 mappings where object is standing
00017B2A                            ;	     (refers to a 16x16 tile number)
00017B2A                            ;	(a4) = floor angle
00017B2A                            ; ---------------------------------------------------------------------------
00017B2A                            
00017B2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B2A                            
00017B2A                            
00017B2A                            FindFloor:
00017B2A 618C                       		bsr.s	FindNearestTile
00017B2C 3011                       		move.w	(a1),d0		; get value for solidness, orientation and 16x16 tile number
00017B2E 3800                       		move.w	d0,d4
00017B30 0240 07FF                  		andi.w	#$7FF,d0
00017B34 6700                       		beq.s	@isblank	; branch if tile is blank
00017B36 0B04                       		btst	d5,d4		; is the tile solid?
00017B38 6600                       		bne.s	@issolid	; if yes, branch
00017B3A                            
00017B3A                            @isblank:
00017B3A D44B                       		add.w	a3,d2
00017B3C 6100 0000                  		bsr.w	FindFloor2	; try tile below the nearest
00017B40 944B                       		sub.w	a3,d2
00017B42 0641 0010                  		addi.w	#$10,d1		; return distance to floor
00017B46 4E75                       		rts	
00017B48                            ; ===========================================================================
00017B48                            
00017B48                            @issolid:
00017B48 2478 F796                  		movea.l	(v_collindex).w,a2
00017B4C 1032 0000                  		move.b	(a2,d0.w),d0	; get collision block number
00017B50 0240 00FF                  		andi.w	#$FF,d0
00017B54 67E4                       		beq.s	@isblank	; branch if 0
00017B56 45F9 0000 0000             		lea	(AngleMap).l,a2
00017B5C 18B2 0000                  		move.b	(a2,d0.w),(a4)	; get collision angle value
00017B60 E948                       		lsl.w	#4,d0
00017B62 3203                       		move.w	d3,d1		; get x-pos. of object
00017B64 0804 000B                  		btst	#$B,d4		; is block flipped horizontally?
00017B68 6700                       		beq.s	@noflip		; if not, branch
00017B6A 4641                       		not.w	d1
00017B6C 4414                       		neg.b	(a4)
00017B6E                            
00017B6E                            	@noflip:
00017B6E 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00017B72 6700                       		beq.s	@noflip2	; if not, branch
00017B74 0614 0040                  		addi.b	#$40,(a4)
00017B78 4414                       		neg.b	(a4)
00017B7A 0414 0040                  		subi.b	#$40,(a4)
00017B7E                            
00017B7E                            	@noflip2:
00017B7E 0241 000F                  		andi.w	#$F,d1
00017B82 D240                       		add.w	d0,d1		; (block num. * $10) + x-pos. = place in array
00017B84 45F9 0000 0000             		lea	(CollArray1).l,a2
00017B8A 1032 1000                  		move.b	(a2,d1.w),d0	; get collision height
00017B8E 4880                       		ext.w	d0
00017B90 BD44                       		eor.w	d6,d4
00017B92 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00017B96 6700                       		beq.s	@noflip3	; if not, branch
00017B98 4440                       		neg.w	d0
00017B9A                            
00017B9A                            	@noflip3:
00017B9A 4A40                       		tst.w	d0
00017B9C 679C                       		beq.s	@isblank	; branch if height is 0
00017B9E 6B00                       		bmi.s	@negfloor	; branch if height is negative
00017BA0 0C00 0010                  		cmpi.b	#$10,d0
00017BA4 6700                       		beq.s	@maxfloor	; branch if height is $10 (max)
00017BA6 3202                       		move.w	d2,d1		; get y-pos. of object
00017BA8 0241 000F                  		andi.w	#$F,d1
00017BAC D041                       		add.w	d1,d0
00017BAE 323C 000F                  		move.w	#$F,d1
00017BB2 9240                       		sub.w	d0,d1		; return distance to floor
00017BB4 4E75                       		rts	
00017BB6                            ; ===========================================================================
00017BB6                            
00017BB6                            @negfloor:
00017BB6 3202                       		move.w	d2,d1
00017BB8 0241 000F                  		andi.w	#$F,d1
00017BBC D041                       		add.w	d1,d0
00017BBE 6A00 FF7A                  		bpl.w	@isblank
00017BC2                            
00017BC2                            @maxfloor:
00017BC2 944B                       		sub.w	a3,d2
00017BC4 6100 0000                  		bsr.w	FindFloor2	; try tile above the nearest
00017BC8 D44B                       		add.w	a3,d2
00017BCA 0441 0010                  		subi.w	#$10,d1		; return distance to floor
00017BCE 4E75                       		rts	
00017BD0                            ; End of function FindFloor
00017BD0                            
00017BD0                            
00017BD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017BD0                            
00017BD0                            
00017BD0                            FindFloor2:
00017BD0 6100 FEE6                  		bsr.w	FindNearestTile
00017BD4 3011                       		move.w	(a1),d0
00017BD6 3800                       		move.w	d0,d4
00017BD8 0240 07FF                  		andi.w	#$7FF,d0
00017BDC 6700                       		beq.s	@isblank2
00017BDE 0B04                       		btst	d5,d4
00017BE0 6600                       		bne.s	@issolid
00017BE2                            
00017BE2                            @isblank2:
00017BE2 323C 000F                  		move.w	#$F,d1
00017BE6 3002                       		move.w	d2,d0
00017BE8 0240 000F                  		andi.w	#$F,d0
00017BEC 9240                       		sub.w	d0,d1
00017BEE 4E75                       		rts	
00017BF0                            ; ===========================================================================
00017BF0                            
00017BF0                            @issolid:
00017BF0 2478 F796                  		movea.l	(v_collindex).w,a2
00017BF4 1032 0000                  		move.b	(a2,d0.w),d0
00017BF8 0240 00FF                  		andi.w	#$FF,d0
00017BFC 67E4                       		beq.s	@isblank2
00017BFE 45F9 0000 0000             		lea	(AngleMap).l,a2
00017C04 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017C08 E948                       		lsl.w	#4,d0
00017C0A 3203                       		move.w	d3,d1
00017C0C 0804 000B                  		btst	#$B,d4
00017C10 6700                       		beq.s	@noflip
00017C12 4641                       		not.w	d1
00017C14 4414                       		neg.b	(a4)
00017C16                            
00017C16                            	@noflip:
00017C16 0804 000C                  		btst	#$C,d4
00017C1A 6700                       		beq.s	@noflip2
00017C1C 0614 0040                  		addi.b	#$40,(a4)
00017C20 4414                       		neg.b	(a4)
00017C22 0414 0040                  		subi.b	#$40,(a4)
00017C26                            
00017C26                            	@noflip2:
00017C26 0241 000F                  		andi.w	#$F,d1
00017C2A D240                       		add.w	d0,d1
00017C2C 45F9 0000 0000             		lea	(CollArray1).l,a2
00017C32 1032 1000                  		move.b	(a2,d1.w),d0
00017C36 4880                       		ext.w	d0
00017C38 BD44                       		eor.w	d6,d4
00017C3A 0804 000C                  		btst	#$C,d4
00017C3E 6700                       		beq.s	@noflip3
00017C40 4440                       		neg.w	d0
00017C42                            
00017C42                            	@noflip3:
00017C42 4A40                       		tst.w	d0
00017C44 679C                       		beq.s	@isblank2
00017C46 6B00                       		bmi.s	@negfloor
00017C48 3202                       		move.w	d2,d1
00017C4A 0241 000F                  		andi.w	#$F,d1
00017C4E D041                       		add.w	d1,d0
00017C50 323C 000F                  		move.w	#$F,d1
00017C54 9240                       		sub.w	d0,d1
00017C56 4E75                       		rts	
00017C58                            ; ===========================================================================
00017C58                            
00017C58                            @negfloor:
00017C58 3202                       		move.w	d2,d1
00017C5A 0241 000F                  		andi.w	#$F,d1
00017C5E D041                       		add.w	d1,d0
00017C60 6A00 FF80                  		bpl.w	@isblank2
00017C64 4641                       		not.w	d1
00017C66 4E75                       		rts	
00017C68                            ; End of function FindFloor2
00017C68                            ; End of function FindFloor2
00017C68                            		include	"_incObj\sub FindWall.asm"
00017C68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C68                            
00017C68                            
00017C68                            FindWall:
00017C68 6100 FE4E                  		bsr.w	FindNearestTile
00017C6C 3011                       		move.w	(a1),d0
00017C6E 3800                       		move.w	d0,d4
00017C70 0240 07FF                  		andi.w	#$7FF,d0
00017C74 6700                       		beq.s	loc_14B1E
00017C76 0B04                       		btst	d5,d4
00017C78 6600                       		bne.s	loc_14B2C
00017C7A                            
00017C7A                            loc_14B1E:
00017C7A D64B                       		add.w	a3,d3
00017C7C 6100 0000                  		bsr.w	FindWall2
00017C80 964B                       		sub.w	a3,d3
00017C82 0641 0010                  		addi.w	#$10,d1
00017C86 4E75                       		rts	
00017C88                            ; ===========================================================================
00017C88                            
00017C88                            loc_14B2C:
00017C88 2478 F796                  		movea.l	(v_collindex).w,a2
00017C8C 1032 0000                  		move.b	(a2,d0.w),d0
00017C90 0240 00FF                  		andi.w	#$FF,d0
00017C94 67E4                       		beq.s	loc_14B1E
00017C96 45F9 0000 0000             		lea	(AngleMap).l,a2
00017C9C 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017CA0 E948                       		lsl.w	#4,d0
00017CA2 3202                       		move.w	d2,d1
00017CA4 0804 000C                  		btst	#$C,d4
00017CA8 6700                       		beq.s	loc_14B5A
00017CAA 4641                       		not.w	d1
00017CAC 0614 0040                  		addi.b	#$40,(a4)
00017CB0 4414                       		neg.b	(a4)
00017CB2 0414 0040                  		subi.b	#$40,(a4)
00017CB6                            
00017CB6                            loc_14B5A:
00017CB6 0804 000B                  		btst	#$B,d4
00017CBA 6700                       		beq.s	loc_14B62
00017CBC 4414                       		neg.b	(a4)
00017CBE                            
00017CBE                            loc_14B62:
00017CBE 0241 000F                  		andi.w	#$F,d1
00017CC2 D240                       		add.w	d0,d1
00017CC4 45F9 0000 0000             		lea	(CollArray2).l,a2
00017CCA 1032 1000                  		move.b	(a2,d1.w),d0
00017CCE 4880                       		ext.w	d0
00017CD0 BD44                       		eor.w	d6,d4
00017CD2 0804 000B                  		btst	#$B,d4
00017CD6 6700                       		beq.s	loc_14B7E
00017CD8 4440                       		neg.w	d0
00017CDA                            
00017CDA                            loc_14B7E:
00017CDA 4A40                       		tst.w	d0
00017CDC 679C                       		beq.s	loc_14B1E
00017CDE 6B00                       		bmi.s	loc_14B9A
00017CE0 0C00 0010                  		cmpi.b	#$10,d0
00017CE4 6700                       		beq.s	loc_14BA6
00017CE6 3203                       		move.w	d3,d1
00017CE8 0241 000F                  		andi.w	#$F,d1
00017CEC D041                       		add.w	d1,d0
00017CEE 323C 000F                  		move.w	#$F,d1
00017CF2 9240                       		sub.w	d0,d1
00017CF4 4E75                       		rts	
00017CF6                            ; ===========================================================================
00017CF6                            
00017CF6                            loc_14B9A:
00017CF6 3203                       		move.w	d3,d1
00017CF8 0241 000F                  		andi.w	#$F,d1
00017CFC D041                       		add.w	d1,d0
00017CFE 6A00 FF7A                  		bpl.w	loc_14B1E
00017D02                            
00017D02                            loc_14BA6:
00017D02 964B                       		sub.w	a3,d3
00017D04 6100 0000                  		bsr.w	FindWall2
00017D08 D64B                       		add.w	a3,d3
00017D0A 0441 0010                  		subi.w	#$10,d1
00017D0E 4E75                       		rts	
00017D10                            ; End of function FindWall
00017D10                            
00017D10                            
00017D10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D10                            
00017D10                            
00017D10                            FindWall2:
00017D10 6100 FDA6                  		bsr.w	FindNearestTile
00017D14 3011                       		move.w	(a1),d0
00017D16 3800                       		move.w	d0,d4
00017D18 0240 07FF                  		andi.w	#$7FF,d0
00017D1C 6700                       		beq.s	loc_14BC6
00017D1E 0B04                       		btst	d5,d4
00017D20 6600                       		bne.s	loc_14BD4
00017D22                            
00017D22                            loc_14BC6:
00017D22 323C 000F                  		move.w	#$F,d1
00017D26 3003                       		move.w	d3,d0
00017D28 0240 000F                  		andi.w	#$F,d0
00017D2C 9240                       		sub.w	d0,d1
00017D2E 4E75                       		rts	
00017D30                            ; ===========================================================================
00017D30                            
00017D30                            loc_14BD4:
00017D30 2478 F796                  		movea.l	(v_collindex).w,a2
00017D34 1032 0000                  		move.b	(a2,d0.w),d0
00017D38 0240 00FF                  		andi.w	#$FF,d0
00017D3C 67E4                       		beq.s	loc_14BC6
00017D3E 45F9 0000 0000             		lea	(AngleMap).l,a2
00017D44 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017D48 E948                       		lsl.w	#4,d0
00017D4A 3202                       		move.w	d2,d1
00017D4C 0804 000C                  		btst	#$C,d4
00017D50 6700                       		beq.s	loc_14C02
00017D52 4641                       		not.w	d1
00017D54 0614 0040                  		addi.b	#$40,(a4)
00017D58 4414                       		neg.b	(a4)
00017D5A 0414 0040                  		subi.b	#$40,(a4)
00017D5E                            
00017D5E                            loc_14C02:
00017D5E 0804 000B                  		btst	#$B,d4
00017D62 6700                       		beq.s	loc_14C0A
00017D64 4414                       		neg.b	(a4)
00017D66                            
00017D66                            loc_14C0A:
00017D66 0241 000F                  		andi.w	#$F,d1
00017D6A D240                       		add.w	d0,d1
00017D6C 45F9 0000 0000             		lea	(CollArray2).l,a2
00017D72 1032 1000                  		move.b	(a2,d1.w),d0
00017D76 4880                       		ext.w	d0
00017D78 BD44                       		eor.w	d6,d4
00017D7A 0804 000B                  		btst	#$B,d4
00017D7E 6700                       		beq.s	loc_14C26
00017D80 4440                       		neg.w	d0
00017D82                            
00017D82                            loc_14C26:
00017D82 4A40                       		tst.w	d0
00017D84 679C                       		beq.s	loc_14BC6
00017D86 6B00                       		bmi.s	loc_14C3C
00017D88 3203                       		move.w	d3,d1
00017D8A 0241 000F                  		andi.w	#$F,d1
00017D8E D041                       		add.w	d1,d0
00017D90 323C 000F                  		move.w	#$F,d1
00017D94 9240                       		sub.w	d0,d1
00017D96 4E75                       		rts	
00017D98                            ; ===========================================================================
00017D98                            
00017D98                            loc_14C3C:
00017D98 3203                       		move.w	d3,d1
00017D9A 0241 000F                  		andi.w	#$F,d1
00017D9E D041                       		add.w	d1,d0
00017DA0 6A00 FF80                  		bpl.w	loc_14BC6
00017DA4 4641                       		not.w	d1
00017DA6 4E75                       		rts	
00017DA8                            ; End of function FindWall2
00017DA8                            ; End of function FindWall2
00017DA8                            
00017DA8                            ; ---------------------------------------------------------------------------
00017DA8                            ; Unused floor/wall subroutine - logs something	to do with collision
00017DA8                            ; ---------------------------------------------------------------------------
00017DA8                            
00017DA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017DA8                            
00017DA8                            
00017DA8                            FloorLog_Unk:
00017DA8 4E75                       		rts	
00017DAA                            
00017DAA 43F9 0000 0000             		lea	(CollArray1).l,a1
00017DB0 45F9 0000 0000             		lea	(CollArray1).l,a2
00017DB6 363C 00FF                  		move.w	#$FF,d3
00017DBA                            
00017DBA                            loc_14C5E:
00017DBA 7A10                       		moveq	#$10,d5
00017DBC 343C 000F                  		move.w	#$F,d2
00017DC0                            
00017DC0                            loc_14C64:
00017DC0 7800                       		moveq	#0,d4
00017DC2 323C 000F                  		move.w	#$F,d1
00017DC6                            
00017DC6                            loc_14C6A:
00017DC6 3019                       		move.w	(a1)+,d0
00017DC8 EAA8                       		lsr.l	d5,d0
00017DCA D944                       		addx.w	d4,d4
00017DCC 51C9 FFF8                  		dbf	d1,loc_14C6A
00017DD0                            
00017DD0 34C4                       		move.w	d4,(a2)+
00017DD2 92FC 0020                  		suba.w	#$20,a1
00017DD6 5345                       		subq.w	#1,d5
00017DD8 51CA FFE6                  		dbf	d2,loc_14C64
00017DDC                            
00017DDC D2FC 0020                  		adda.w	#$20,a1
00017DE0 51CB FFD8                  		dbf	d3,loc_14C5E
00017DE4                            
00017DE4 43F9 0000 0000             		lea	(CollArray1).l,a1
00017DEA 45F9 0000 0000             		lea	(CollArray2).l,a2
00017DF0 6100                       		bsr.s	FloorLog_Unk2
00017DF2 43F9 0000 0000             		lea	(CollArray1).l,a1
00017DF8 45F9 0000 0000             		lea	(CollArray1).l,a2
00017DFE                            
00017DFE                            ; End of function FloorLog_Unk
00017DFE                            
00017DFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017DFE                            
00017DFE                            
00017DFE                            FloorLog_Unk2:
00017DFE 363C 0FFF                  		move.w	#$FFF,d3
00017E02                            
00017E02                            loc_14CA6:
00017E02 7400                       		moveq	#0,d2
00017E04 323C 000F                  		move.w	#$F,d1
00017E08 3019                       		move.w	(a1)+,d0
00017E0A 6700                       		beq.s	loc_14CD4
00017E0C 6B00                       		bmi.s	loc_14CBE
00017E0E                            
00017E0E                            loc_14CB2:
00017E0E E248                       		lsr.w	#1,d0
00017E10 6400                       		bhs.s	loc_14CB8
00017E12 5202                       		addq.b	#1,d2
00017E14                            
00017E14                            loc_14CB8:
00017E14 51C9 FFF8                  		dbf	d1,loc_14CB2
00017E18                            
00017E18 6000                       		bra.s	loc_14CD6
00017E1A                            ; ===========================================================================
00017E1A                            
00017E1A                            loc_14CBE:
00017E1A 0C40 FFFF                  		cmpi.w	#-1,d0
00017E1E 6700                       		beq.s	loc_14CD0
00017E20                            
00017E20                            loc_14CC4:
00017E20 E348                       		lsl.w	#1,d0
00017E22 6400                       		bhs.s	loc_14CCA
00017E24 5302                       		subq.b	#1,d2
00017E26                            
00017E26                            loc_14CCA:
00017E26 51C9 FFF8                  		dbf	d1,loc_14CC4
00017E2A                            
00017E2A 6000                       		bra.s	loc_14CD6
00017E2C                            ; ===========================================================================
00017E2C                            
00017E2C                            loc_14CD0:
00017E2C 303C 0010                  		move.w	#$10,d0
00017E30                            
00017E30                            loc_14CD4:
00017E30 3400                       		move.w	d0,d2
00017E32                            
00017E32                            loc_14CD6:
00017E32 14C2                       		move.b	d2,(a2)+
00017E34 51CB FFCC                  		dbf	d3,loc_14CA6
00017E38                            
00017E38 4E75                       		rts	
00017E3A                            
00017E3A                            ; End of function FloorLog_Unk2
00017E3A                            
00017E3A                            
00017E3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E3A                            
00017E3A                            
00017E3A                            Sonic_WalkSpeed:
00017E3A 2628 0008                  		move.l	obX(a0),d3
00017E3E 2428 000C                  		move.l	obY(a0),d2
00017E42 3228 0010                  		move.w	obVelX(a0),d1
00017E46 48C1                       		ext.l	d1
00017E48 E181                       		asl.l	#8,d1
00017E4A D681                       		add.l	d1,d3
00017E4C 3228 0012                  		move.w	obVelY(a0),d1
00017E50 48C1                       		ext.l	d1
00017E52 E181                       		asl.l	#8,d1
00017E54 D481                       		add.l	d1,d2
00017E56 4842                       		swap	d2
00017E58 4843                       		swap	d3
00017E5A 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017E5E 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017E62 1200                       		move.b	d0,d1
00017E64 0600 0020                  		addi.b	#$20,d0
00017E68 6A00                       		bpl.s	loc_14D1A
00017E6A 1001                       		move.b	d1,d0
00017E6C 6A00                       		bpl.s	loc_14D14
00017E6E 5300                       		subq.b	#1,d0
00017E70                            
00017E70                            loc_14D14:
00017E70 0600 0020                  		addi.b	#$20,d0
00017E74 6000                       		bra.s	loc_14D24
00017E76                            ; ===========================================================================
00017E76                            
00017E76                            loc_14D1A:
00017E76 1001                       		move.b	d1,d0
00017E78 6A00                       		bpl.s	loc_14D20
00017E7A 5200                       		addq.b	#1,d0
00017E7C                            
00017E7C                            loc_14D20:
00017E7C 0600 001F                  		addi.b	#$1F,d0
00017E80                            
00017E80                            loc_14D24:
00017E80 0200 00C0                  		andi.b	#$C0,d0
00017E84 6700 0000                  		beq.w	loc_14DF0
00017E88 0C00 0080                  		cmpi.b	#$80,d0
00017E8C 6700 0000                  		beq.w	loc_14F7C
00017E90 0201 0038                  		andi.b	#$38,d1
00017E94 6600                       		bne.s	loc_14D3C
00017E96 5042                       		addq.w	#8,d2
00017E98                            
00017E98                            loc_14D3C:
00017E98 0C00 0040                  		cmpi.b	#$40,d0
00017E9C 6700 0000                  		beq.w	loc_1504A
00017EA0 6000 0000                  		bra.w	loc_14EBC
00017EA4                            
00017EA4                            ; End of function Sonic_WalkSpeed
00017EA4                            
00017EA4                            
00017EA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017EA4                            
00017EA4                            
00017EA4                            sub_14D48:
00017EA4 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017EA8 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017EAC 0600 0020                  		addi.b	#$20,d0
00017EB0 0200 00C0                  		andi.b	#$C0,d0
00017EB4 0C00 0040                  		cmpi.b	#$40,d0
00017EB8 6700 0000                  		beq.w	loc_14FD6
00017EBC 0C00 0080                  		cmpi.b	#$80,d0
00017EC0 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00017EC4 0C00 00C0                  		cmpi.b	#$C0,d0
00017EC8 6700 0000                  		beq.w	sub_14E50
00017ECC                            
00017ECC                            ; End of function sub_14D48
00017ECC                            
00017ECC                            ; ---------------------------------------------------------------------------
00017ECC                            ; Subroutine to	make Sonic land	on the floor after jumping
00017ECC                            ; ---------------------------------------------------------------------------
00017ECC                            
00017ECC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017ECC                            
00017ECC                            
00017ECC                            Sonic_HitFloor:
00017ECC 3428 000C                  		move.w	obY(a0),d2
00017ED0 3628 0008                  		move.w	obX(a0),d3
00017ED4 7000                       		moveq	#0,d0
00017ED6 1028 0016                  		move.b	obHeight(a0),d0
00017EDA 4880                       		ext.w	d0
00017EDC D440                       		add.w	d0,d2
00017EDE 1028 0017                  		move.b	obWidth(a0),d0
00017EE2 4880                       		ext.w	d0
00017EE4 D640                       		add.w	d0,d3
00017EE6 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017EEA 367C 0010                  		movea.w	#$10,a3
00017EEE 3C3C 0000                  		move.w	#0,d6
00017EF2 7A0D                       		moveq	#$D,d5
00017EF4 6100 FC34                  		bsr.w	FindFloor
00017EF8 3F01                       		move.w	d1,-(sp)
00017EFA 3428 000C                  		move.w	obY(a0),d2
00017EFE 3628 0008                  		move.w	obX(a0),d3
00017F02 7000                       		moveq	#0,d0
00017F04 1028 0016                  		move.b	obHeight(a0),d0
00017F08 4880                       		ext.w	d0
00017F0A D440                       		add.w	d0,d2
00017F0C 1028 0017                  		move.b	obWidth(a0),d0
00017F10 4880                       		ext.w	d0
00017F12 9640                       		sub.w	d0,d3
00017F14 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017F18 367C 0010                  		movea.w	#$10,a3
00017F1C 3C3C 0000                  		move.w	#0,d6
00017F20 7A0D                       		moveq	#$D,d5
00017F22 6100 FC06                  		bsr.w	FindFloor
00017F26 301F                       		move.w	(sp)+,d0
00017F28 143C 0000                  		move.b	#0,d2
00017F2C                            
00017F2C                            loc_14DD0:
00017F2C 1638 F76A                  		move.b	($FFFFF76A).w,d3
00017F30 B240                       		cmp.w	d0,d1
00017F32 6F00                       		ble.s	loc_14DDE
00017F34 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017F38 C141                       		exg	d0,d1
00017F3A                            
00017F3A                            loc_14DDE:
00017F3A 0803 0000                  		btst	#0,d3
00017F3E 6700                       		beq.s	locret_14DE6
00017F40 1602                       		move.b	d2,d3
00017F42                            
00017F42                            locret_14DE6:
00017F42 4E75                       		rts	
00017F44                            
00017F44                            ; End of function Sonic_HitFloor
00017F44                            
00017F44                            ; ===========================================================================
00017F44 3428 000C                  		move.w	obY(a0),d2
00017F48 3628 0008                  		move.w	obX(a0),d3
00017F4C                            
00017F4C                            loc_14DF0:
00017F4C 0642 000A                  		addi.w	#$A,d2
00017F50 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F54 367C 0010                  		movea.w	#$10,a3
00017F58 3C3C 0000                  		move.w	#0,d6
00017F5C 7A0E                       		moveq	#$E,d5
00017F5E 6100 FBCA                  		bsr.w	FindFloor
00017F62 143C 0000                  		move.b	#0,d2
00017F66                            
00017F66                            loc_14E0A:
00017F66 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017F6A 0803 0000                  		btst	#0,d3
00017F6E 6700                       		beq.s	locret_14E16
00017F70 1602                       		move.b	d2,d3
00017F72                            
00017F72                            locret_14E16:
00017F72 4E75                       		rts	
00017F74                            
00017F74                            		include	"_incObj\sub ObjFloorDist.asm"
00017F74                            ; ---------------------------------------------------------------------------
00017F74                            ; Subroutine to find the distance of an object to the floor
00017F74                            
00017F74                            ; input:
00017F74                            ;	d3 = x-pos. of object (ObjFloorDist2 only)
00017F74                            
00017F74                            ; output:
00017F74                            ;	d1 = distance to the floor
00017F74                            ;	d3 = floor angle
00017F74                            ;	a1 = address within 256x256 mappings where object is standing
00017F74                            ;	     (refers to a 16x16 tile number)
00017F74                            ;	(a4) = floor angle
00017F74                            ; ---------------------------------------------------------------------------
00017F74                            
00017F74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F74                            
00017F74                            
00017F74                            ObjFloorDist:
00017F74 3628 0008                  		move.w	obX(a0),d3
00017F78                            
00017F78                            
00017F78                            ObjFloorDist2:
00017F78 3428 000C                  		move.w	obY(a0),d2
00017F7C 7000                       		moveq	#0,d0
00017F7E 1028 0016                  		move.b	obHeight(a0),d0
00017F82 4880                       		ext.w	d0
00017F84 D440                       		add.w	d0,d2
00017F86 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F8A 18BC 0000                  		move.b	#0,(a4)
00017F8E 367C 0010                  		movea.w	#$10,a3		; height of a 16x16 tile
00017F92 3C3C 0000                  		move.w	#0,d6
00017F96 7A0D                       		moveq	#$D,d5		; bit to test for solidness
00017F98 6100 FB90                  		bsr.w	FindFloor
00017F9C 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017FA0 0803 0000                  		btst	#0,d3
00017FA4 6700                       		beq.s	locret_14E4E
00017FA6 163C 0000                  		move.b	#0,d3
00017FAA                            
00017FAA                            	locret_14E4E:
00017FAA 4E75                       		rts	
00017FAC                            
00017FAC                            ; End of function ObjFloorDist2
00017FAC                            ; End of function ObjFloorDist2
00017FAC                            
00017FAC                            
00017FAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017FAC                            
00017FAC                            
00017FAC                            sub_14E50:
00017FAC 3428 000C                  		move.w	obY(a0),d2
00017FB0 3628 0008                  		move.w	obX(a0),d3
00017FB4 7000                       		moveq	#0,d0
00017FB6 1028 0017                  		move.b	obWidth(a0),d0
00017FBA 4880                       		ext.w	d0
00017FBC 9440                       		sub.w	d0,d2
00017FBE 1028 0016                  		move.b	obHeight(a0),d0
00017FC2 4880                       		ext.w	d0
00017FC4 D640                       		add.w	d0,d3
00017FC6 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017FCA 367C 0010                  		movea.w	#$10,a3
00017FCE 3C3C 0000                  		move.w	#0,d6
00017FD2 7A0E                       		moveq	#$E,d5
00017FD4 6100 FC92                  		bsr.w	FindWall
00017FD8 3F01                       		move.w	d1,-(sp)
00017FDA 3428 000C                  		move.w	obY(a0),d2
00017FDE 3628 0008                  		move.w	obX(a0),d3
00017FE2 7000                       		moveq	#0,d0
00017FE4 1028 0017                  		move.b	obWidth(a0),d0
00017FE8 4880                       		ext.w	d0
00017FEA D440                       		add.w	d0,d2
00017FEC 1028 0016                  		move.b	obHeight(a0),d0
00017FF0 4880                       		ext.w	d0
00017FF2 D640                       		add.w	d0,d3
00017FF4 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017FF8 367C 0010                  		movea.w	#$10,a3
00017FFC 3C3C 0000                  		move.w	#0,d6
00018000 7A0E                       		moveq	#$E,d5
00018002 6100 FC64                  		bsr.w	FindWall
00018006 301F                       		move.w	(sp)+,d0
00018008 143C 00C0                  		move.b	#-$40,d2
0001800C 6000 FF1E                  		bra.w	loc_14DD0
00018010                            
00018010                            ; End of function sub_14E50
00018010                            
00018010                            
00018010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018010                            
00018010                            
00018010                            sub_14EB4:
00018010 3428 000C                  		move.w	obY(a0),d2
00018014 3628 0008                  		move.w	obX(a0),d3
00018018                            
00018018                            loc_14EBC:
00018018 0643 000A                  		addi.w	#$A,d3
0001801C 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018020 367C 0010                  		movea.w	#$10,a3
00018024 3C3C 0000                  		move.w	#0,d6
00018028 7A0E                       		moveq	#$E,d5
0001802A 6100 FC3C                  		bsr.w	FindWall
0001802E 143C 00C0                  		move.b	#-$40,d2
00018032 6000 FF32                  		bra.w	loc_14E0A
00018036                            
00018036                            ; End of function sub_14EB4
00018036                            
00018036                            ; ---------------------------------------------------------------------------
00018036                            ; Subroutine to	detect when an object hits a wall to its right
00018036                            ; ---------------------------------------------------------------------------
00018036                            
00018036                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018036                            
00018036                            
00018036                            ObjHitWallRight:
00018036 D668 0008                  		add.w	obX(a0),d3
0001803A 3428 000C                  		move.w	obY(a0),d2
0001803E 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018042 18BC 0000                  		move.b	#0,(a4)
00018046 367C 0010                  		movea.w	#$10,a3
0001804A 3C3C 0000                  		move.w	#0,d6
0001804E 7A0E                       		moveq	#$E,d5
00018050 6100 FC16                  		bsr.w	FindWall
00018054 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018058 0803 0000                  		btst	#0,d3
0001805C 6700                       		beq.s	locret_14F06
0001805E 163C 00C0                  		move.b	#-$40,d3
00018062                            
00018062                            locret_14F06:
00018062 4E75                       		rts	
00018064                            
00018064                            ; End of function ObjHitWallRight
00018064                            
00018064                            ; ---------------------------------------------------------------------------
00018064                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00018064                            ; touches them
00018064                            ; ---------------------------------------------------------------------------
00018064                            
00018064                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018064                            
00018064                            
00018064                            Sonic_DontRunOnWalls:
00018064 3428 000C                  		move.w	obY(a0),d2
00018068 3628 0008                  		move.w	obX(a0),d3
0001806C 7000                       		moveq	#0,d0
0001806E 1028 0016                  		move.b	obHeight(a0),d0
00018072 4880                       		ext.w	d0
00018074 9440                       		sub.w	d0,d2
00018076 0A42 000F                  		eori.w	#$F,d2
0001807A 1028 0017                  		move.b	obWidth(a0),d0
0001807E 4880                       		ext.w	d0
00018080 D640                       		add.w	d0,d3
00018082 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018086 367C FFF0                  		movea.w	#-$10,a3
0001808A 3C3C 1000                  		move.w	#$1000,d6
0001808E 7A0E                       		moveq	#$E,d5
00018090 6100 FA98                  		bsr.w	FindFloor
00018094 3F01                       		move.w	d1,-(sp)
00018096 3428 000C                  		move.w	obY(a0),d2
0001809A 3628 0008                  		move.w	obX(a0),d3
0001809E 7000                       		moveq	#0,d0
000180A0 1028 0016                  		move.b	obHeight(a0),d0
000180A4 4880                       		ext.w	d0
000180A6 9440                       		sub.w	d0,d2
000180A8 0A42 000F                  		eori.w	#$F,d2
000180AC 1028 0017                  		move.b	obWidth(a0),d0
000180B0 4880                       		ext.w	d0
000180B2 9640                       		sub.w	d0,d3
000180B4 49F8 F76A                  		lea	($FFFFF76A).w,a4
000180B8 367C FFF0                  		movea.w	#-$10,a3
000180BC 3C3C 1000                  		move.w	#$1000,d6
000180C0 7A0E                       		moveq	#$E,d5
000180C2 6100 FA66                  		bsr.w	FindFloor
000180C6 301F                       		move.w	(sp)+,d0
000180C8 143C 0080                  		move.b	#-$80,d2
000180CC 6000 FE5E                  		bra.w	loc_14DD0
000180D0                            ; End of function Sonic_DontRunOnWalls
000180D0                            
000180D0                            ; ===========================================================================
000180D0 3428 000C                  		move.w	obY(a0),d2
000180D4 3628 0008                  		move.w	obX(a0),d3
000180D8                            
000180D8                            loc_14F7C:
000180D8 0442 000A                  		subi.w	#$A,d2
000180DC 0A42 000F                  		eori.w	#$F,d2
000180E0 49F8 F768                  		lea	(v_anglebuffer).w,a4
000180E4 367C FFF0                  		movea.w	#-$10,a3
000180E8 3C3C 1000                  		move.w	#$1000,d6
000180EC 7A0E                       		moveq	#$E,d5
000180EE 6100 FA3A                  		bsr.w	FindFloor
000180F2 143C 0080                  		move.b	#-$80,d2
000180F6 6000 FE6E                  		bra.w	loc_14E0A
000180FA                            
000180FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000180FA                            
000180FA                            
000180FA                            ObjHitCeiling:
000180FA 3428 000C                  		move.w	obY(a0),d2
000180FE 3628 0008                  		move.w	obX(a0),d3
00018102 7000                       		moveq	#0,d0
00018104 1028 0016                  		move.b	obHeight(a0),d0
00018108 4880                       		ext.w	d0
0001810A 9440                       		sub.w	d0,d2
0001810C 0A42 000F                  		eori.w	#$F,d2
00018110 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018114 367C FFF0                  		movea.w	#-$10,a3
00018118 3C3C 1000                  		move.w	#$1000,d6
0001811C 7A0E                       		moveq	#$E,d5
0001811E 6100 FA0A                  		bsr.w	FindFloor
00018122 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018126 0803 0000                  		btst	#0,d3
0001812A 6700                       		beq.s	locret_14FD4
0001812C 163C 0080                  		move.b	#-$80,d3
00018130                            
00018130                            locret_14FD4:
00018130 4E75                       		rts	
00018132                            ; End of function ObjHitCeiling
00018132                            
00018132                            ; ===========================================================================
00018132                            
00018132                            loc_14FD6:
00018132 3428 000C                  		move.w	obY(a0),d2
00018136 3628 0008                  		move.w	obX(a0),d3
0001813A 7000                       		moveq	#0,d0
0001813C 1028 0017                  		move.b	obWidth(a0),d0
00018140 4880                       		ext.w	d0
00018142 9440                       		sub.w	d0,d2
00018144 1028 0016                  		move.b	obHeight(a0),d0
00018148 4880                       		ext.w	d0
0001814A 9640                       		sub.w	d0,d3
0001814C 0A43 000F                  		eori.w	#$F,d3
00018150 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018154 367C FFF0                  		movea.w	#-$10,a3
00018158 3C3C 0800                  		move.w	#$800,d6
0001815C 7A0E                       		moveq	#$E,d5
0001815E 6100 FB08                  		bsr.w	FindWall
00018162 3F01                       		move.w	d1,-(sp)
00018164 3428 000C                  		move.w	obY(a0),d2
00018168 3628 0008                  		move.w	obX(a0),d3
0001816C 7000                       		moveq	#0,d0
0001816E 1028 0017                  		move.b	obWidth(a0),d0
00018172 4880                       		ext.w	d0
00018174 D440                       		add.w	d0,d2
00018176 1028 0016                  		move.b	obHeight(a0),d0
0001817A 4880                       		ext.w	d0
0001817C 9640                       		sub.w	d0,d3
0001817E 0A43 000F                  		eori.w	#$F,d3
00018182 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018186 367C FFF0                  		movea.w	#-$10,a3
0001818A 3C3C 0800                  		move.w	#$800,d6
0001818E 7A0E                       		moveq	#$E,d5
00018190 6100 FAD6                  		bsr.w	FindWall
00018194 301F                       		move.w	(sp)+,d0
00018196 143C 0040                  		move.b	#$40,d2
0001819A 6000 FD90                  		bra.w	loc_14DD0
0001819E                            
0001819E                            ; ---------------------------------------------------------------------------
0001819E                            ; Subroutine to	stop Sonic when	he jumps at a wall
0001819E                            ; ---------------------------------------------------------------------------
0001819E                            
0001819E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001819E                            
0001819E                            
0001819E                            Sonic_HitWall:
0001819E 3428 000C                  		move.w	obY(a0),d2
000181A2 3628 0008                  		move.w	obX(a0),d3
000181A6                            
000181A6                            loc_1504A:
000181A6 0443 000A                  		subi.w	#$A,d3
000181AA 0A43 000F                  		eori.w	#$F,d3
000181AE 49F8 F768                  		lea	(v_anglebuffer).w,a4
000181B2 367C FFF0                  		movea.w	#-$10,a3
000181B6 3C3C 0800                  		move.w	#$800,d6
000181BA 7A0E                       		moveq	#$E,d5
000181BC 6100 FAAA                  		bsr.w	FindWall
000181C0 143C 0040                  		move.b	#$40,d2
000181C4 6000 FDA0                  		bra.w	loc_14E0A
000181C8                            ; End of function Sonic_HitWall
000181C8                            
000181C8                            ; ---------------------------------------------------------------------------
000181C8                            ; Subroutine to	detect when an object hits a wall to its left
000181C8                            ; ---------------------------------------------------------------------------
000181C8                            
000181C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000181C8                            
000181C8                            
000181C8                            ObjHitWallLeft:
000181C8 D668 0008                  		add.w	obX(a0),d3
000181CC 3428 000C                  		move.w	obY(a0),d2
000181D0                            		; Engine bug: colliding with left walls is erratic with this function.
000181D0                            		; The cause is this: a missing instruction to flip collision on the found
000181D0                            		; 16x16 block; this one:
000181D0                            		;eori.w	#$F,d3
000181D0 49F8 F768                  		lea	(v_anglebuffer).w,a4
000181D4 18BC 0000                  		move.b	#0,(a4)
000181D8 367C FFF0                  		movea.w	#-$10,a3
000181DC 3C3C 0800                  		move.w	#$800,d6
000181E0 7A0E                       		moveq	#$E,d5
000181E2 6100 FA84                  		bsr.w	FindWall
000181E6 1638 F768                  		move.b	(v_anglebuffer).w,d3
000181EA 0803 0000                  		btst	#0,d3
000181EE 6700                       		beq.s	locret_15098
000181F0 163C 0040                  		move.b	#$40,d3
000181F4                            
000181F4                            locret_15098:
000181F4 4E75                       		rts	
000181F6                            ; End of function ObjHitWallLeft
000181F6                            
000181F6                            ; ===========================================================================
000181F6                            
000181F6                            		include	"_incObj\66 Rotating Junction.asm"
000181F6                            ; ---------------------------------------------------------------------------
000181F6                            ; Object 66 - rotating disc junction that grabs Sonic (SBZ)
000181F6                            ; ---------------------------------------------------------------------------
000181F6                            
000181F6                            Junction:
000181F6 7000                       		moveq	#0,d0
000181F8 1028 0024                  		move.b	obRoutine(a0),d0
000181FC 323B 0000                  		move.w	Jun_Index(pc,d0.w),d1
00018200 4EFB 1000                  		jmp	Jun_Index(pc,d1.w)
00018204                            ; ===========================================================================
00018204 0000                       Jun_Index:	dc.w Jun_Main-Jun_Index
00018206 0000                       		dc.w Jun_Action-Jun_Index
00018208 0000                       		dc.w Jun_Display-Jun_Index
0001820A 0000                       		dc.w Jun_Release-Jun_Index
0001820C                            
0001820C =00000034                  jun_frame:	equ $34		; current frame
0001820C =00000036                  jun_reverse:	equ $36		; flag set when switch is pressed
0001820C =00000038                  jun_switch:	equ $38		; which switch will reverse the disc
0001820C                            ; ===========================================================================
0001820C                            
0001820C                            Jun_Main:	; Routine 0
0001820C 5428 0024                  		addq.b	#2,obRoutine(a0)
00018210 323C 0001                  		move.w	#1,d1
00018214 2248                       		movea.l	a0,a1
00018216 6000                       		bra.s	@makeitem
00018218                            ; ===========================================================================
00018218                            
00018218                            	@repeat:
00018218 4EB9 0000 FA54             		jsr	FindFreeObj
0001821E 6600                       		bne.s	@fail
00018220 12BC 0066                  		move.b	#id_Junction,0(a1)
00018224 5829 0024                  		addq.b	#4,obRoutine(a1) ; goto Jun_Display next
00018228 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001822E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00018234 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001823A 137C 0010 001A             		move.b	#$10,obFrame(a1) ; use large circular sprite
00018240                            
00018240                            @makeitem:
00018240 237C 0000 0000 0004        		move.l	#Map_Jun,obMap(a1)
00018248 337C 4348 0002             		move.w	#$4348,obGfx(a1)
0001824E 0029 0004 0001             		ori.b	#4,obRender(a1)
00018254 137C 0038 0014             		move.b	#$38,obActWid(a1)
0001825A                            
0001825A                            	@fail:
0001825A 51C9 FFBC                  		dbf	d1,@repeat
0001825E                            
0001825E 117C 0030 0014             		move.b	#$30,obActWid(a0)
00018264 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001826A 317C 003C 0030             		move.w	#$3C,$30(a0)
00018270 117C 0001 0034             		move.b	#1,jun_frame(a0)
00018276 1168 0028 0038             		move.b	obSubtype(a0),jun_switch(a0)
0001827C                            
0001827C                            Jun_Action:	; Routine 2
0001827C 6100 0000                  		bsr.w	Jun_ChkSwitch
00018280 4A28 0001                  		tst.b	obRender(a0)
00018284 6A00 0000                  		bpl.w	Jun_Display
00018288 323C 0030                  		move.w	#$30,d1
0001828C 3401                       		move.w	d1,d2
0001828E 3602                       		move.w	d2,d3
00018290 5243                       		addq.w	#1,d3
00018292 3828 0008                  		move.w	obX(a0),d4
00018296 6100 975E                  		bsr.w	SolidObject
0001829A 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing the disc?
000182A0 6700 0000                  		beq.w	Jun_Display	; if not, branch
000182A4                            
000182A4 43F8 D000                  		lea	(v_player).w,a1
000182A8 720E                       		moveq	#$E,d1
000182AA 3029 0008                  		move.w	obX(a1),d0
000182AE B068 0008                  		cmp.w	obX(a0),d0	; is Sonic to the left of the disc?
000182B2 6500                       		bcs.s	@isleft		; if yes, branch
000182B4 7207                       		moveq	#7,d1		
000182B6                            
000182B6                            	@isleft:
000182B6 B228 001A                  		cmp.b	obFrame(a0),d1	; is the gap next to Sonic?
000182BA 6600                       		bne.s	Jun_Display	; if not, branch
000182BC                            
000182BC 1141 0032                  		move.b	d1,$32(a0)
000182C0 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Jun_Release next
000182C4 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
000182CA 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic use "rolling" animation
000182D0 337C 0800 0020             		move.w	#$800,obInertia(a1)
000182D6 337C 0000 0010             		move.w	#0,obVelX(a1)
000182DC 337C 0000 0012             		move.w	#0,obVelY(a1)
000182E2 08A8 0005 0022             		bclr	#5,obStatus(a0)
000182E8 08A9 0005 0022             		bclr	#5,obStatus(a1)
000182EE 08E9 0001 0022             		bset	#1,obStatus(a1)
000182F4 3429 0008                  		move.w	obX(a1),d2
000182F8 3629 000C                  		move.w	obY(a1),d3
000182FC 6100 0000                  		bsr.w	Jun_ChgPos
00018300 D569 0008                  		add.w	d2,obX(a1)
00018304 D769 000C                  		add.w	d3,obY(a1)
00018308 E0E9 0008                  		asr	obX(a1)
0001830C E0E9 000C                  		asr	obY(a1)
00018310                            
00018310                            Jun_Display:	; Routine 4
00018310 6000 924C                  		bra.w	RememberState
00018314                            ; ===========================================================================
00018314                            
00018314                            Jun_Release:	; Routine 6
00018314 1028 001A                  		move.b	obFrame(a0),d0
00018318 0C00 0004                  		cmpi.b	#4,d0		; is gap pointing down?
0001831C 6700                       		beq.s	@release	; if yes, branch
0001831E 0C00 0007                  		cmpi.b	#7,d0		; is gap pointing right?
00018322 6600                       		bne.s	@dontrelease	; if not, branch
00018324                            
00018324                            	@release:
00018324 B028 0032                  		cmp.b	$32(a0),d0
00018328 6700                       		beq.s	@dontrelease
0001832A 43F8 D000                  		lea	(v_player).w,a1
0001832E 337C 0000 0010             		move.w	#0,obVelX(a1)
00018334 337C 0800 0012             		move.w	#$800,obVelY(a1)
0001833A 0C00 0004                  		cmpi.b	#4,d0
0001833E 6700                       		beq.s	@isdown
00018340 337C 0800 0010             		move.w	#$800,obVelX(a1)
00018346 337C 0800 0012             		move.w	#$800,obVelY(a1)
0001834C                            
0001834C                            	@isdown:
0001834C 4238 F7C8                  		clr.b	(f_lockmulti).w	; unlock controls
00018350 5928 0024                  		subq.b	#4,obRoutine(a0)
00018354                            
00018354                            	@dontrelease:
00018354 6100                       		bsr.s	Jun_ChkSwitch
00018356 6100                       		bsr.s	Jun_ChgPos
00018358 6000 9204                  		bra.w	RememberState
0001835C                            
0001835C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001835C                            
0001835C                            
0001835C                            Jun_ChkSwitch:
0001835C 45F8 F7E0                  		lea	(f_switch).w,a2
00018360 7000                       		moveq	#0,d0
00018362 1028 0038                  		move.b	jun_switch(a0),d0
00018366 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
0001836C 6700                       		beq.s	@unpressed	; if not, branch
0001836E                            
0001836E 4A28 0036                  		tst.b	jun_reverse(a0)	; has switch previously	been pressed?
00018372 6600                       		bne.s	@animate	; if yes, branch
00018374 4428 0034                  		neg.b	jun_frame(a0)
00018378 117C 0001 0036             		move.b	#1,jun_reverse(a0) ; set to "previously pressed"
0001837E 6000                       		bra.s	@animate
00018380                            ; ===========================================================================
00018380                            
00018380                            @unpressed:
00018380 4228 0036                  		clr.b	jun_reverse(a0)	; set to "not yet pressed"
00018384                            
00018384                            @animate:
00018384 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement frame timer
00018388 6A00                       		bpl.s	@nochange	; if time remains, branch
0001838A 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00018390 1228 0034                  		move.b	jun_frame(a0),d1
00018394 1028 001A                  		move.b	obFrame(a0),d0
00018398 D001                       		add.b	d1,d0
0001839A 0200 000F                  		andi.b	#$F,d0
0001839E 1140 001A                  		move.b	d0,obFrame(a0)	; update frame
000183A2                            
000183A2                            	@nochange:
000183A2 4E75                       		rts	
000183A4                            ; End of function Jun_ChkSwitch
000183A4                            
000183A4                            
000183A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000183A4                            
000183A4                            
000183A4                            Jun_ChgPos:
000183A4 43F8 D000                  		lea	(v_player).w,a1
000183A8 7000                       		moveq	#0,d0
000183AA 1028 001A                  		move.b	obFrame(a0),d0
000183AE D040                       		add.w	d0,d0
000183B0 45FB 0000                  		lea	@data(pc,d0.w),a2
000183B4 101A                       		move.b	(a2)+,d0
000183B6 4880                       		ext.w	d0
000183B8 D068 0008                  		add.w	obX(a0),d0
000183BC 3340 0008                  		move.w	d0,obX(a1)
000183C0 101A                       		move.b	(a2)+,d0
000183C2 4880                       		ext.w	d0
000183C4 D068 000C                  		add.w	obY(a0),d0
000183C8 3340 000C                  		move.w	d0,obY(a1)
000183CC 4E75                       		rts	
000183CE                            
000183CE                            
000183CE E000 E20E                  @data:		dc.b -$20,    0, -$1E,   $E ; disc x-pos, Sonic x-pos, disc y-pos, Sonic y-pos
000183D2 E818 F21E                  		dc.b -$18,  $18,  -$E,  $1E
000183D6 0020 0E1E                  		dc.b    0,  $20,   $E,  $1E
000183DA 1818 1E0E                  		dc.b  $18,  $18,  $1E,   $E
000183DE 2000 1EF2                  		dc.b  $20,    0,  $1E,  -$E
000183E2 18E8 0EE2                  		dc.b  $18, -$18,   $E, -$1E
000183E6 00E0 F2E2                  		dc.b    0, -$20,  -$E, -$1E
000183EA E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
000183EA E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
000183EE                            Map_Jun:	include	"_maps\Rotating Junction.asm"
000183EE                            ; ---------------------------------------------------------------------------
000183EE                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000183EE                            ; ---------------------------------------------------------------------------
000183EE                            Map_Jun_internal:
000183EE 0000                       		dc.w @gap0-Map_Jun_internal
000183F0 0000                       		dc.w @gap1-Map_Jun_internal
000183F2 0000                       		dc.w @gap2-Map_Jun_internal
000183F4 0000                       		dc.w @gap3-Map_Jun_internal
000183F6 0000                       		dc.w @gap4-Map_Jun_internal
000183F8 0000                       		dc.w @gap5-Map_Jun_internal
000183FA 0000                       		dc.w @gap6-Map_Jun_internal
000183FC 0000                       		dc.w @gap7-Map_Jun_internal
000183FE 0000                       		dc.w @gap8-Map_Jun_internal
00018400 0000                       		dc.w @gap9-Map_Jun_internal
00018402 0000                       		dc.w @gapA-Map_Jun_internal
00018404 0000                       		dc.w @gapB-Map_Jun_internal
00018406 0000                       		dc.w @gapC-Map_Jun_internal
00018408 0000                       		dc.w @gapD-Map_Jun_internal
0001840A 0000                       		dc.w @gapE-Map_Jun_internal
0001840C 0000                       		dc.w @gapF-Map_Jun_internal
0001840E 0000                       		dc.w @circle-Map_Jun_internal
00018410 06                         @gap0:		dc.b 6
00018411 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00018416 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
0001841B E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00018420 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00018425 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
0001842A 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
0001842F 06                         @gap1:		dc.b 6
00018430 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00018435 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
0001843A F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
0001843F F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00018444 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00018449 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
0001844E 06                         @gap2:		dc.b 6
0001844F 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00018454 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00018459 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
0001845E 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00018463 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00018468 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
0001846D 06                         @gap3:		dc.b 6
0001846E 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00018473 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00018478 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
0001847D 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00018482 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00018487 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
0001848C 06                         @gap4:		dc.b 6
0001848D 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00018492 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00018497 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
0001849C 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
000184A1 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
000184A6 200A 1800 00               		dc.b $20, $A, $18, 0, 0
000184AB 06                         @gap5:		dc.b 6
000184AC 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
000184B1 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
000184B6 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
000184BB 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
000184C0 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
000184C5 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
000184CA 06                         @gap6:		dc.b 6
000184CB 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
000184D0 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
000184D5 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
000184DA 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
000184DF 180A 1000 00               		dc.b $18, $A, $10, 0, 0
000184E4 180A 1800 18               		dc.b $18, $A, $18, 0, $18
000184E9 06                         @gap7:		dc.b 6
000184EA 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
000184EF F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
000184F4 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
000184F9 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
000184FE 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00018503 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00018508 06                         @gap8:		dc.b 6
00018509 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
0001850E 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00018513 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00018518 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
0001851D 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00018522 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00018527 06                         @gap9:		dc.b 6
00018528 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
0001852D E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00018532 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00018537 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
0001853C F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00018541 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00018546 06                         @gapA:		dc.b 6
00018547 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
0001854C E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00018551 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00018556 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
0001855B E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00018560 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00018565 06                         @gapB:		dc.b 6
00018566 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
0001856B D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00018570 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00018575 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
0001857A E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
0001857F E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00018584 06                         @gapC:		dc.b 6
00018585 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
0001858A D005 1845 08               		dc.b $D0, 5, $18, $45, 8
0001858F C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00018594 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00018599 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
0001859E E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
000185A3 06                         @gapD:		dc.b 6
000185A4 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
000185A9 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
000185AE CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
000185B3 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
000185B8 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
000185BD E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
000185C2 06                         @gapE:		dc.b 6
000185C3 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
000185C8 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
000185CD D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
000185D2 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
000185D7 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
000185DC E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
000185E1 06                         @gapF:		dc.b 6
000185E2 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
000185E7 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
000185EC DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
000185F1 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
000185F6 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
000185FB F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00018600 0C                         @circle:	dc.b $C
00018601 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00018606 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
0001860B E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00018610 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00018615 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
0001861A E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
0001861F 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00018624 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00018629 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
0001862E 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00018633 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00018638 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
0001863E 00                         		even
0001863E 00                         		even
0001863E                            		include	"_incObj\67 Running Disc.asm"
0001863E                            ; ---------------------------------------------------------------------------
0001863E                            ; Object 67 - disc that	you run	around (SBZ)
0001863E                            ; ---------------------------------------------------------------------------
0001863E                            
0001863E                            RunningDisc:
0001863E 7000                       		moveq	#0,d0
00018640 1028 0024                  		move.b	obRoutine(a0),d0
00018644 323B 0000                  		move.w	Disc_Index(pc,d0.w),d1
00018648 4EFB 1000                  		jmp	Disc_Index(pc,d1.w)
0001864C                            ; ===========================================================================
0001864C 0000                       Disc_Index:	dc.w Disc_Main-Disc_Index
0001864E 0000                       		dc.w Disc_Action-Disc_Index
00018650                            
00018650 =00000032                  disc_origX:	equ $32		; original x-axis position
00018650 =00000030                  disc_origY:	equ $30		; original y-axis position
00018650                            ; ===========================================================================
00018650                            
00018650                            Disc_Main:	; Routine 0
00018650 5428 0024                  		addq.b	#2,obRoutine(a0)
00018654 217C 0000 0000 0004        		move.l	#Map_Disc,obMap(a0)
0001865C 317C C344 0002             		move.w	#$C344,obGfx(a0)
00018662 117C 0004 0001             		move.b	#4,obRender(a0)
00018668 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001866E 117C 0008 0014             		move.b	#8,obActWid(a0)
00018674 3168 0008 0032             		move.w	obX(a0),disc_origX(a0)
0001867A 3168 000C 0030             		move.w	obY(a0),disc_origY(a0)
00018680 117C 0018 0034             		move.b	#$18,$34(a0)
00018686 117C 0048 0038             		move.b	#$48,$38(a0)
0001868C 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018690 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00018694 6700                       		beq.s	@typeis0	; branch if 0
00018696 117C 0010 0034             		move.b	#$10,$34(a0)
0001869C 117C 0038 0038             		move.b	#$38,$38(a0)
000186A2                            
000186A2                            	@typeis0:
000186A2 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000186A6 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000186AA 4881                       		ext.w	d1
000186AC E741                       		asl.w	#3,d1
000186AE 3141 0036                  		move.w	d1,$36(a0)
000186B2 1028 0022                  		move.b	obStatus(a0),d0
000186B6 E418                       		ror.b	#2,d0
000186B8 0200 00C0                  		andi.b	#$C0,d0
000186BC 1140 0026                  		move.b	d0,obAngle(a0)
000186C0                            
000186C0                            Disc_Action:	; Routine 2
000186C0 6100 0000                  		bsr.w	Disc_MoveSonic
000186C4 6100 0000                  		bsr.w	Disc_MoveSpot
000186C8 6000 0000                  		bra.w	Disc_ChkDel
000186CC                            ; ===========================================================================
000186CC                            
000186CC                            Disc_MoveSonic:
000186CC 7400                       		moveq	#0,d2
000186CE 1428 0038                  		move.b	$38(a0),d2
000186D2 3602                       		move.w	d2,d3
000186D4 D643                       		add.w	d3,d3
000186D6 43F8 D000                  		lea	(v_player).w,a1
000186DA 3029 0008                  		move.w	obX(a1),d0
000186DE 9068 0032                  		sub.w	disc_origX(a0),d0
000186E2 D042                       		add.w	d2,d0
000186E4 B043                       		cmp.w	d3,d0
000186E6 6400                       		bcc.s	loc_155A8
000186E8 3229 000C                  		move.w	obY(a1),d1
000186EC 9268 0030                  		sub.w	disc_origY(a0),d1
000186F0 D242                       		add.w	d2,d1
000186F2 B243                       		cmp.w	d3,d1
000186F4 6400                       		bcc.s	loc_155A8
000186F6 0829 0001 0022             		btst	#1,obStatus(a1)
000186FC 6700                       		beq.s	loc_155B8
000186FE 4228 003A                  		clr.b	$3A(a0)
00018702 4E75                       		rts	
00018704                            ; ===========================================================================
00018704                            
00018704                            loc_155A8:
00018704 4A28 003A                  		tst.b	$3A(a0)
00018708 6700                       		beq.s	locret_155B6
0001870A 4229 0038                  		clr.b	$38(a1)
0001870E 4228 003A                  		clr.b	$3A(a0)
00018712                            
00018712                            locret_155B6:
00018712 4E75                       		rts	
00018714                            ; ===========================================================================
00018714                            
00018714                            loc_155B8:
00018714 4A28 003A                  		tst.b	$3A(a0)
00018718 6600                       		bne.s	loc_155E2
0001871A 117C 0001 003A             		move.b	#1,$3A(a0)
00018720 0829 0002 0022             		btst	#2,obStatus(a1)
00018726 6600                       		bne.s	loc_155D0
00018728 4229 001C                  		clr.b	obAnim(a1)
0001872C                            
0001872C                            loc_155D0:
0001872C 08A9 0005 0022             		bclr	#5,obStatus(a1)
00018732 137C 0001 001D             		move.b	#1,obNextAni(a1)
00018738 137C 0001 0038             		move.b	#1,$38(a1)
0001873E                            
0001873E                            loc_155E2:
0001873E 3029 0020                  		move.w	obInertia(a1),d0
00018742 4A68 0036                  		tst.w	$36(a0)
00018746 6A00                       		bpl.s	loc_15608
00018748 0C40 FC00                  		cmpi.w	#-$400,d0
0001874C 6F00                       		ble.s	loc_155FA
0001874E 337C FC00 0020             		move.w	#-$400,obInertia(a1)
00018754 4E75                       		rts	
00018756                            ; ===========================================================================
00018756                            
00018756                            loc_155FA:
00018756 0C40 F100                  		cmpi.w	#-$F00,d0
0001875A 6C00                       		bge.s	locret_15606
0001875C 337C F100 0020             		move.w	#-$F00,obInertia(a1)
00018762                            
00018762                            locret_15606:
00018762 4E75                       		rts	
00018764                            ; ===========================================================================
00018764                            
00018764                            loc_15608:
00018764 0C40 0400                  		cmpi.w	#$400,d0
00018768 6C00                       		bge.s	loc_15616
0001876A 337C 0400 0020             		move.w	#$400,obInertia(a1)
00018770 4E75                       		rts	
00018772                            ; ===========================================================================
00018772                            
00018772                            loc_15616:
00018772 0C40 0F00                  		cmpi.w	#$F00,d0
00018776 6F00                       		ble.s	locret_15622
00018778 337C 0F00 0020             		move.w	#$F00,obInertia(a1)
0001877E                            
0001877E                            locret_15622:
0001877E 4E75                       		rts	
00018780                            ; ===========================================================================
00018780                            
00018780                            Disc_MoveSpot:
00018780 3028 0036                  		move.w	$36(a0),d0
00018784 D168 0026                  		add.w	d0,obAngle(a0)
00018788 1028 0026                  		move.b	obAngle(a0),d0
0001878C 4EB9 0000 3BA2             		jsr	(CalcSine).l
00018792 3428 0030                  		move.w	disc_origY(a0),d2
00018796 3628 0032                  		move.w	disc_origX(a0),d3
0001879A 7800                       		moveq	#0,d4
0001879C 1828 0034                  		move.b	$34(a0),d4
000187A0 E14C                       		lsl.w	#8,d4
000187A2 2A04                       		move.l	d4,d5
000187A4 C9C0                       		muls.w	d0,d4
000187A6 4844                       		swap	d4
000187A8 CBC1                       		muls.w	d1,d5
000187AA 4845                       		swap	d5
000187AC D842                       		add.w	d2,d4
000187AE DA43                       		add.w	d3,d5
000187B0 3144 000C                  		move.w	d4,obY(a0)
000187B4 3145 0008                  		move.w	d5,obX(a0)
000187B8 4E75                       		rts	
000187BA                            ; ===========================================================================
000187BA                            
000187BA                            Disc_ChkDel:
000187D6 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
000187DC                            
000187DC                            	@delete:
000187DC 4EF9 0000 F4FA             		jmp	(DeleteObject).l
000187DC 4EF9 0000 F4FA             		jmp	(DeleteObject).l
000187E2                            Map_Disc:	include	"_maps\Running Disc.asm"
000187E2                            ; ---------------------------------------------------------------------------
000187E2                            ; Sprite mappings - disc that you run around (SBZ)
000187E2                            ; (It's just a small blob that moves around in a circle. The disc itself is
000187E2                            ; part of the level tiles.)
000187E2                            ; ---------------------------------------------------------------------------
000187E2                            Map_Disc_internal:
000187E2 0000                       		dc.w @spot-Map_Disc_internal
000187E4 01                         @spot:		dc.b 1
000187E5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000187EA                            		even
000187EA                            		even
000187EA                            		include	"_incObj\68 Conveyor Belt.asm"
000187EA                            ; ---------------------------------------------------------------------------
000187EA                            ; Object 68 - conveyor belts (SBZ)
000187EA                            ; ---------------------------------------------------------------------------
000187EA                            
000187EA                            Conveyor:
000187EA 7000                       		moveq	#0,d0
000187EC 1028 0024                  		move.b	obRoutine(a0),d0
000187F0 323B 0000                  		move.w	Conv_Index(pc,d0.w),d1
000187F4 4EFB 1000                  		jmp	Conv_Index(pc,d1.w)
000187F8                            ; ===========================================================================
000187F8 0000                       Conv_Index:	dc.w Conv_Main-Conv_Index
000187FA 0000                       		dc.w Conv_Action-Conv_Index
000187FC                            
000187FC =00000036                  conv_speed:	equ $36
000187FC =00000038                  conv_width:	equ $38
000187FC                            ; ===========================================================================
000187FC                            
000187FC                            Conv_Main:	; Routine 0
000187FC 5428 0024                  		addq.b	#2,obRoutine(a0)
00018800 117C 0080 0038             		move.b	#128,conv_width(a0) ; set width to 128 pixels
00018806 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
0001880A 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001880E 6700                       		beq.s	@typeis0	; if zero, branch
00018810 117C 0038 0038             		move.b	#56,conv_width(a0) ; set width to 56 pixels
00018816                            
00018816                            	@typeis0:
00018816 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
0001881A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001881E 4881                       		ext.w	d1
00018820 E841                       		asr.w	#4,d1
00018822 3141 0036                  		move.w	d1,conv_speed(a0) ; set belt speed
00018826                            
00018826                            Conv_Action:	; Routine 2
00018826 6100                       		bsr.s	@movesonic
00018844 4E75                       		rts	
00018846                            
00018846                            	@delete:
00018846 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001884C                            ; ===========================================================================
0001884C                            
0001884C                            @movesonic:
0001884C 7400                       		moveq	#0,d2
0001884E 1428 0038                  		move.b	conv_width(a0),d2
00018852 3602                       		move.w	d2,d3
00018854 D643                       		add.w	d3,d3
00018856 43F8 D000                  		lea	(v_player).w,a1
0001885A 3029 0008                  		move.w	obX(a1),d0
0001885E 9068 0008                  		sub.w	obX(a0),d0
00018862 D042                       		add.w	d2,d0
00018864 B043                       		cmp.w	d3,d0
00018866 6400                       		bcc.s	@notonconveyor
00018868 3229 000C                  		move.w	obY(a1),d1
0001886C 9268 000C                  		sub.w	obY(a0),d1
00018870 0641 0030                  		addi.w	#$30,d1
00018874 0C41 0030                  		cmpi.w	#$30,d1
00018878 6400                       		bcc.s	@notonconveyor
0001887A 0829 0001 0022             		btst	#1,obStatus(a1)
00018880 6600                       		bne.s	@notonconveyor
00018882 3028 0036                  		move.w	conv_speed(a0),d0
00018886 D169 0008                  		add.w	d0,obX(a1)
0001888A                            
0001888A                            	@notonconveyor:
0001888A 4E75                       		rts	
0001888A 4E75                       		rts	
0001888C                            		include	"_incObj\69 SBZ Spinning Platforms.asm"
0001888C                            ; ---------------------------------------------------------------------------
0001888C                            ; Object 69 - spinning platforms and trapdoors (SBZ)
0001888C                            ; ---------------------------------------------------------------------------
0001888C                            
0001888C                            SpinPlatform:
0001888C 7000                       		moveq	#0,d0
0001888E 1028 0024                  		move.b	obRoutine(a0),d0
00018892 323B 0000                  		move.w	Spin_Index(pc,d0.w),d1
00018896 4EFB 1000                  		jmp	Spin_Index(pc,d1.w)
0001889A                            ; ===========================================================================
0001889A 0000                       Spin_Index:	dc.w Spin_Main-Spin_Index
0001889C 0000                       		dc.w Spin_Trapdoor-Spin_Index
0001889E 0000                       		dc.w Spin_Spinner-Spin_Index
000188A0                            
000188A0 =00000030                  spin_timer:	equ $30		; time counter until change
000188A0 =00000032                  spin_timelen:	equ $32		; time between changes (general)
000188A0                            ; ===========================================================================
000188A0                            
000188A0                            Spin_Main:	; Routine 0
000188A0 5428 0024                  		addq.b	#2,obRoutine(a0)
000188A4 217C 0000 0000 0004        		move.l	#Map_Trap,obMap(a0)
000188AC 317C 4492 0002             		move.w	#$4492,obGfx(a0)
000188B2 0028 0004 0001             		ori.b	#4,obRender(a0)
000188B8 117C 0080 0014             		move.b	#$80,obActWid(a0)
000188BE 7000                       		moveq	#0,d0
000188C0 1028 0028                  		move.b	obSubtype(a0),d0
000188C4 0240 000F                  		andi.w	#$F,d0
000188C8 C0FC 003C                  		mulu.w	#$3C,d0
000188CC 3140 0032                  		move.w	d0,spin_timelen(a0)
000188D0 4A28 0028                  		tst.b	obSubtype(a0)	; is subtype $8x?
000188D4 6A00                       		bpl.s	Spin_Trapdoor	; if not, branch
000188D6                            
000188D6 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Spin_Spinner next
000188DA 217C 0000 0000 0004        		move.l	#Map_Spin,obMap(a0)
000188E2 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
000188E8 117C 0010 0014             		move.b	#$10,obActWid(a0)
000188EE 117C 0002 001C             		move.b	#2,obAnim(a0)
000188F4 7000                       		moveq	#0,d0
000188F6 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000188FA 3200                       		move.w	d0,d1
000188FC 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00018900 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00018904 3140 0030                  		move.w	d0,spin_timer(a0)
00018908 3140 0032                  		move.w	d0,spin_timelen(a0) ; set time delay
0001890C 0241 0070                  		andi.w	#$70,d1
00018910 0641 0010                  		addi.w	#$10,d1
00018914 E549                       		lsl.w	#2,d1
00018916 5341                       		subq.w	#1,d1
00018918 3141 0036                  		move.w	d1,$36(a0)
0001891C 6000                       		bra.s	Spin_Spinner
0001891E                            ; ===========================================================================
0001891E                            
0001891E                            Spin_Trapdoor:	; Routine 2
0001891E 5368 0030                  		subq.w	#1,spin_timer(a0) ; decrement timer
00018922 6A00                       		bpl.s	@animate	; if time remains, branch
00018924                            
00018924 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
0001892A 0868 0000 001C             		bchg	#0,obAnim(a0)
00018930 4A28 0001                  		tst.b	obRender(a0)
00018934 6A00                       		bpl.s	@animate
00018940                            
00018940                            	@animate:
00018940 43F9 0000 0000             		lea	(Ani_Spin).l,a1
00018946 4EB9 0000 C574             		jsr	(AnimateSprite).l
0001894C 4A28 001A                  		tst.b	obFrame(a0)	; is frame number 0 displayed?
00018950 6600                       		bne.s	@notsolid	; if not, branch
00018952 323C 004B                  		move.w	#$4B,d1
00018956 343C 000C                  		move.w	#$C,d2
0001895A 3602                       		move.w	d2,d3
0001895C 5243                       		addq.w	#1,d3
0001895E 3828 0008                  		move.w	obX(a0),d4
00018962 6100 9092                  		bsr.w	SolidObject
00018966 6000 8BF6                  		bra.w	RememberState
0001896A                            ; ===========================================================================
0001896A                            
0001896A                            @notsolid:
0001896A 0828 0003 0022             		btst	#3,obStatus(a0) ; is Sonic standing on the trapdoor?
00018970 6700                       		beq.s	@display	; if not, branch
00018972 43F8 D000                  		lea	(v_player).w,a1
00018976 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001897C 08A8 0003 0022             		bclr	#3,obStatus(a0)
00018982 4228 0025                  		clr.b	obSolid(a0)
00018986                            
00018986                            	@display:
00018986 6000 8BD6                  		bra.w	RememberState
0001898A                            ; ===========================================================================
0001898A                            
0001898A                            Spin_Spinner:	; Routine 4
0001898A 3038 FE04                  		move.w	(v_framecount).w,d0
0001898E C068 0036                  		and.w	$36(a0),d0
00018992 6600                       		bne.s	@delay
00018994 117C 0001 0034             		move.b	#1,$34(a0)
0001899A                            
0001899A                            	@delay:
0001899A 4A28 0034                  		tst.b	$34(a0)
0001899E 6700                       		beq.s	@animate
000189A0 5368 0030                  		subq.w	#1,spin_timer(a0)
000189A4 6A00                       		bpl.s	@animate
000189A6 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
000189AC 4228 0034                  		clr.b	$34(a0)
000189B0 0868 0000 001C             		bchg	#0,obAnim(a0)
000189B6                            
000189B6                            	@animate:
000189B6 43F9 0000 0000             		lea	(Ani_Spin).l,a1
000189BC 4EB9 0000 C574             		jsr	(AnimateSprite).l
000189C2 4A28 001A                  		tst.b	obFrame(a0)	; check	if frame number	0 is displayed
000189C6 6600                       		bne.s	@notsolid2	; if not, branch
000189C8 323C 001B                  		move.w	#$1B,d1
000189CC 343C 0007                  		move.w	#7,d2
000189D0 3602                       		move.w	d2,d3
000189D2 5243                       		addq.w	#1,d3
000189D4 3828 0008                  		move.w	obX(a0),d4
000189D8 6100 901C                  		bsr.w	SolidObject
000189DC 6000 8B80                  		bra.w	RememberState
000189E0                            ; ===========================================================================
000189E0                            
000189E0                            @notsolid2:
000189E0 0828 0003 0022             		btst	#3,obStatus(a0)
000189E6 6700                       		beq.s	@display
000189E8 43F8 D000                  		lea	(v_player).w,a1
000189EC 08A9 0003 0022             		bclr	#3,obStatus(a1)
000189F2 08A8 0003 0022             		bclr	#3,obStatus(a0)
000189F8 4228 0025                  		clr.b	obSolid(a0)
000189FC                            
000189FC                            	@display:
000189FC 6000 8B60                  		bra.w	RememberState
000189FC 6000 8B60                  		bra.w	RememberState
00018A00                            		include	"_anim\SBZ Spinning Platforms.asm"
00018A00                            ; ---------------------------------------------------------------------------
00018A00                            ; Animation script - trapdoor (SBZ)
00018A00                            ; ---------------------------------------------------------------------------
00018A00 0000                       Ani_Spin:	dc.w @trapopen-Ani_Spin
00018A02 0000                       		dc.w @trapclose-Ani_Spin
00018A04 0000                       		dc.w @spin1-Ani_Spin
00018A06 0000                       		dc.w @spin2-Ani_Spin
00018A08 0300 0102 FE01             @trapopen:	dc.b 3,	0, 1, 2, afBack, 1
00018A0E 0302 0100 FE01             @trapclose:	dc.b 3,	2, 1, 0, afBack, 1
00018A14 0100 0102 0304 4342 4140+  @spin1:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
00018A28 0100 0102 0304 4342 4140+  @spin2:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
00018A3C                            		even
00018A3C                            		even
00018A3C                            Map_Trap:	include	"_maps\Trapdoor.asm"
00018A3C                            ; ---------------------------------------------------------------------------
00018A3C                            ; Sprite mappings - trapdoor (SBZ)
00018A3C                            ; ---------------------------------------------------------------------------
00018A3C                            Map_Trap_internal:
00018A3C 0000                       		dc.w @closed-Map_Trap_internal
00018A3E 0000                       		dc.w @half-Map_Trap_internal
00018A40 0000                       		dc.w @open-Map_Trap_internal
00018A42 04                         @closed:	dc.b 4
00018A43 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00018A48 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00018A4D F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00018A52 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00018A57 08                         @half:		dc.b 8
00018A58 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00018A5D 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00018A62 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00018A67 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00018A6C F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00018A71 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00018A76 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00018A7B 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00018A80 04                         @open:		dc.b 4
00018A81 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00018A86 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00018A8B 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00018A90 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00018A96 00                         		even
00018A96 00                         		even
00018A96                            Map_Spin:	include	"_maps\SBZ Spinning Platforms.asm"
00018A96                            ; ---------------------------------------------------------------------------
00018A96                            ; Sprite mappings - spinning platforms (SBZ)
00018A96                            ; ---------------------------------------------------------------------------
00018A96                            Map_Spin_internal:
00018A96 0000                       		dc.w @flat-Map_Spin_internal
00018A98 0000                       		dc.w @spin1-Map_Spin_internal
00018A9A 0000                       		dc.w @spin2-Map_Spin_internal
00018A9C 0000                       		dc.w @spin3-Map_Spin_internal
00018A9E 0000                       		dc.w @spin4-Map_Spin_internal
00018AA0 02                         @flat:		dc.b 2
00018AA1 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00018AA6 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00018AAB 02                         @spin1:		dc.b 2
00018AAC F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00018AB1 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00018AB6 02                         @spin2:		dc.b 2
00018AB7 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00018ABC 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00018AC1 02                         @spin3:		dc.b 2
00018AC2 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00018AC7 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00018ACC 02                         @spin4:		dc.b 2
00018ACD F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00018AD2 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00018AD8 00                         		even
00018AD8 00                         		even
00018AD8                            		include	"_incObj\6A Saws and Pizza Cutters.asm"
00018AD8                            ; ---------------------------------------------------------------------------
00018AD8                            ; Object 6A - ground saws and pizza cutters (SBZ)
00018AD8                            ; ---------------------------------------------------------------------------
00018AD8                            
00018AD8                            Saws:
00018AD8 7000                       		moveq	#0,d0
00018ADA 1028 0024                  		move.b	obRoutine(a0),d0
00018ADE 323B 0000                  		move.w	Saw_Index(pc,d0.w),d1
00018AE2 4EFB 1000                  		jmp	Saw_Index(pc,d1.w)
00018AE6                            ; ===========================================================================
00018AE6 0000                       Saw_Index:	dc.w Saw_Main-Saw_Index
00018AE8 0000                       		dc.w Saw_Action-Saw_Index
00018AEA                            
00018AEA =0000003A                  saw_origX:	equ $3A		; original x-axis position
00018AEA =00000038                  saw_origY:	equ $38		; original y-axis position
00018AEA =0000003D                  saw_here:	equ $3D		; flag set when the ground saw appears
00018AEA                            ; ===========================================================================
00018AEA                            
00018AEA                            Saw_Main:	; Routine 0
00018AEA 5428 0024                  		addq.b	#2,obRoutine(a0)
00018AEE 217C 0000 0000 0004        		move.l	#Map_Saw,obMap(a0)
00018AF6 317C 43AD 0002             		move.w	#$43AD,obGfx(a0)
00018AFC 117C 0004 0001             		move.b	#4,obRender(a0)
00018B02 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018B08 117C 0020 0014             		move.b	#$20,obActWid(a0)
00018B0E 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018B14 3168 000C 0038             		move.w	obY(a0),saw_origY(a0)
00018B1A 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object a ground saw?
00018B20 6400                       		bcc.s	Saw_Action	; if yes, branch
00018B22 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018B28                            
00018B28                            Saw_Action:	; Routine 2
00018B28 7000                       		moveq	#0,d0
00018B2A 1028 0028                  		move.b	obSubtype(a0),d0
00018B2E 0240 0007                  		andi.w	#7,d0
00018B32 D040                       		add.w	d0,d0
00018B34 323B 0000                  		move.w	@index(pc,d0.w),d1
00018B38 4EBB 1000                  		jsr	@index(pc,d1.w)
00018B58 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
00018B5E                            
00018B5E                            	@delete:
00018B5E 4EF9 0000 F4FA             		jmp	(DeleteObject).l
00018B64                            ; ===========================================================================
00018B64 0000 0000 0000             @index:		dc.w @type00-@index, @type01-@index, @type02-@index ; pizza cutters
00018B6A 0000 0000                  		dc.w @type03-@index, @type04-@index ; ground saws
00018B6E                            ; ===========================================================================
00018B6E                            
00018B6E                            @type00:
00018B6E 4E75                       		rts			; doesn't move
00018B70                            ; ===========================================================================
00018B70                            
00018B70                            @type01:
00018B70 323C 0060                  		move.w	#$60,d1
00018B74 7000                       		moveq	#0,d0
00018B76 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00018B7A 0828 0000 0022             		btst	#0,obStatus(a0)
00018B80 6700                       		beq.s	@noflip01
00018B82 4440                       		neg.w	d0
00018B84 D041                       		add.w	d1,d0
00018B86                            
00018B86                            	@noflip01:
00018B86 3228 003A                  		move.w	saw_origX(a0),d1
00018B8A 9240                       		sub.w	d0,d1
00018B8C 3141 0008                  		move.w	d1,obX(a0)	; move saw sideways
00018B90                            
00018B90 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018B94 6A00                       		bpl.s	@sameframe01
00018B96 117C 0002 001E             		move.b	#2,obTimeFrame(a0) ; time between frame changes
00018B9C 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
00018BA2                            
00018BA2                            	@sameframe01:
00018BA2 4A28 0001                  		tst.b	obRender(a0)
00018BA6 6A00                       		bpl.s	@nosound01
00018BA8 3038 FE04                  		move.w	(v_framecount).w,d0
00018BAC 0240 000F                  		andi.w	#$F,d0
00018BB0 6600                       		bne.s	@nosound01
00018BBC                            
00018BBC                            	@nosound01:
00018BBC 4E75                       		rts	
00018BBE                            ; ===========================================================================
00018BBE                            
00018BBE                            @type02:
00018BBE 323C 0030                  		move.w	#$30,d1
00018BC2 7000                       		moveq	#0,d0
00018BC4 1038 FE64                  		move.b	(v_oscillate+6).w,d0
00018BC8 0828 0000 0022             		btst	#0,obStatus(a0)
00018BCE 6700                       		beq.s	@noflip02
00018BD0 4440                       		neg.w	d0
00018BD2 0640 0080                  		addi.w	#$80,d0
00018BD6                            
00018BD6                            	@noflip02:
00018BD6 3228 0038                  		move.w	saw_origY(a0),d1
00018BDA 9240                       		sub.w	d0,d1
00018BDC 3141 000C                  		move.w	d1,obY(a0)	; move saw vertically
00018BE0 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018BE4 6A00                       		bpl.s	@sameframe02
00018BE6 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018BEC 0868 0000 001A             		bchg	#0,obFrame(a0)
00018BF2                            
00018BF2                            	@sameframe02:
00018BF2 4A28 0001                  		tst.b	obRender(a0)
00018BF6 6A00                       		bpl.s	@nosound02
00018BF8 1038 FE64                  		move.b	(v_oscillate+6).w,d0
00018BFC 0C00 0018                  		cmpi.b	#$18,d0
00018C00 6600                       		bne.s	@nosound02
00018C0C                            
00018C0C                            	@nosound02:
00018C0C 4E75                       		rts	
00018C0E                            ; ===========================================================================
00018C0E                            
00018C0E                            @type03:
00018C0E 4A28 003D                  		tst.b	saw_here(a0)	; has the saw appeared already?
00018C12 6600                       		bne.s	@here03		; if yes, branch
00018C14                            
00018C14 3038 D008                  		move.w	(v_player+obX).w,d0
00018C18 0440 00C0                  		subi.w	#$C0,d0
00018C1C 6500                       		bcs.s	@nosaw03x
00018C1E 9068 0008                  		sub.w	obX(a0),d0
00018C22 6500                       		bcs.s	@nosaw03x
00018C24 3038 D00C                  		move.w	(v_player+obY).w,d0
00018C28 0440 0080                  		subi.w	#$80,d0
00018C2C B068 000C                  		cmp.w	obY(a0),d0
00018C30 6400                       		bcc.s	@nosaw03y
00018C32 0640 0100                  		addi.w	#$100,d0
00018C36 B068 000C                  		cmp.w	obY(a0),d0
00018C3A 6500                       		bcs.s	@nosaw03y
00018C3C 117C 0001 003D             		move.b	#1,saw_here(a0)
00018C42 317C 0600 0010             		move.w	#$600,obVelX(a0) ; move object to the right
00018C48 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018C4E 117C 0002 001A             		move.b	#2,obFrame(a0)
00018C5E                            
00018C5E                            	@nosaw03x:
00018C5E 588F                       		addq.l	#4,sp
00018C60                            
00018C60                            	@nosaw03y:
00018C60 4E75                       		rts	
00018C62                            ; ===========================================================================
00018C62                            
00018C62                            @here03:
00018C62 4EB9 0000 F4A6             		jsr	(SpeedToPos).l
00018C68 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018C6E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018C72 6A00                       		bpl.s	@sameframe03
00018C74 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018C7A 0868 0000 001A             		bchg	#0,obFrame(a0)
00018C80                            
00018C80                            	@sameframe03:
00018C80 4E75                       		rts	
00018C82                            ; ===========================================================================
00018C82                            
00018C82                            @type04:
00018C82 4A28 003D                  		tst.b	saw_here(a0)
00018C86 6600                       		bne.s	@here04
00018C88 3038 D008                  		move.w	(v_player+obX).w,d0
00018C8C 0640 00E0                  		addi.w	#$E0,d0
00018C90 9068 0008                  		sub.w	obX(a0),d0
00018C94 6400                       		bcc.s	@nosaw04x
00018C96 3038 D00C                  		move.w	(v_player+obY).w,d0
00018C9A 0440 0080                  		subi.w	#$80,d0
00018C9E B068 000C                  		cmp.w	obY(a0),d0
00018CA2 6400                       		bcc.s	@nosaw04y
00018CA4 0640 0100                  		addi.w	#$100,d0
00018CA8 B068 000C                  		cmp.w	obY(a0),d0
00018CAC 6500                       		bcs.s	@nosaw04y
00018CAE 117C 0001 003D             		move.b	#1,saw_here(a0)
00018CB4 317C FA00 0010             		move.w	#-$600,obVelX(a0) ; move object to the left
00018CBA 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018CC0 117C 0002 001A             		move.b	#2,obFrame(a0)
00018CD0                            
00018CD0                            	@nosaw04x:
00018CD0 588F                       		addq.l	#4,sp
00018CD2                            
00018CD2                            	@nosaw04y:
00018CD2 4E75                       		rts	
00018CD4                            ; ===========================================================================
00018CD4                            
00018CD4                            @here04:
00018CD4 4EB9 0000 F4A6             		jsr	(SpeedToPos).l
00018CDA 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018CE0 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018CE4 6A00                       		bpl.s	@sameframe04
00018CE6 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018CEC 0868 0000 001A             		bchg	#0,obFrame(a0)
00018CF2                            
00018CF2                            	@sameframe04:
00018CF2 4E75                       		rts	
00018CF2 4E75                       		rts	
00018CF4                            Map_Saw:	include	"_maps\Saws and Pizza Cutters.asm"
00018CF4                            ; ---------------------------------------------------------------------------
00018CF4                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00018CF4                            ; ---------------------------------------------------------------------------
00018CF4                            Map_Saw_internal:
00018CF4 0000                       		dc.w @pizzacutter1-Map_Saw_internal
00018CF6 0000                       		dc.w @pizzacutter2-Map_Saw_internal
00018CF8 0000                       		dc.w @groundsaw1-Map_Saw_internal
00018CFA 0000                       		dc.w @groundsaw2-Map_Saw_internal
00018CFC 07                         @pizzacutter1:	dc.b 7
00018CFD C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018D02 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018D07 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018D0C E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018D11 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018D16 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018D1B 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018D20 07                         @pizzacutter2:	dc.b 7
00018D21 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018D26 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018D2B E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018D30 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018D35 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018D3A 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018D3F 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018D44 04                         @groundsaw1:	dc.b 4
00018D45 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018D4A E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018D4F 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018D54 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018D59 04                         @groundsaw2:	dc.b 4
00018D5A E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018D5F E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018D64 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018D69 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018D6E                            		even
00018D6E                            		even
00018D6E                            		include	"_incObj\6B SBZ Stomper and Door.asm"
00018D6E                            ; ---------------------------------------------------------------------------
00018D6E                            ; Object 6B - stomper and sliding door (SBZ)
00018D6E                            ; ---------------------------------------------------------------------------
00018D6E                            
00018D6E                            ScrapStomp:
00018D6E 7000                       		moveq	#0,d0
00018D70 1028 0024                  		move.b	obRoutine(a0),d0
00018D74 323B 0000                  		move.w	Sto_Index(pc,d0.w),d1
00018D78 4EFB 1000                  		jmp	Sto_Index(pc,d1.w)
00018D7C                            ; ===========================================================================
00018D7C 0000                       Sto_Index:	dc.w Sto_Main-Sto_Index
00018D7E 0000                       		dc.w Sto_Action-Sto_Index
00018D80                            
00018D80 =00000016                  sto_height:	equ $16
00018D80 =00000034                  sto_origX:	equ $34		; original x-axis position
00018D80 =00000030                  sto_origY:	equ $30		; original y-axis position
00018D80 =00000038                  sto_active:	equ $38		; flag set when a switch is pressed
00018D80                            
00018D80 400C 8001                  Sto_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00018D84 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00018D88 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00018D8C 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00018D90 8040 0005                  		dc.b  $80, $40,	  0,   5
00018D94                            ; ===========================================================================
00018D94                            
00018D94                            Sto_Main:	; Routine 0
00018D94 5428 0024                  		addq.b	#2,obRoutine(a0)
00018D98 7000                       		moveq	#0,d0
00018D9A 1028 0028                  		move.b	obSubtype(a0),d0
00018D9E E448                       		lsr.w	#2,d0
00018DA0 0240 001C                  		andi.w	#$1C,d0
00018DA4 47FB 00DA                  		lea	Sto_Var(pc,d0.w),a3
00018DA8 115B 0014                  		move.b	(a3)+,obActWid(a0)
00018DAC 115B 0016                  		move.b	(a3)+,sto_height(a0)
00018DB0 E448                       		lsr.w	#2,d0
00018DB2 1140 001A                  		move.b	d0,obFrame(a0)
00018DB6 217C 0000 0000 0004        		move.l	#Map_Stomp,obMap(a0)
00018DBE 317C 22C0 0002             		move.w	#$22C0,obGfx(a0)
00018DC4 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ/SBZ3
00018DCA 6600                       		bne.s	@isSBZ12	; if not, branch
00018DCC 08F8 0000 F7CB             		bset	#0,(v_obj6B).w
00018DD2 6700                       		beq.s	@isSBZ3
00018DD4                            
00018DD4                            @chkdel:
00018DD4 45F8 FC00                  		lea	(v_objstate).w,a2
00018DD8 7000                       		moveq	#0,d0
00018DDA 1028 0023                  		move.b	obRespawnNo(a0),d0
00018DDE 6700                       		beq.s	@delete
00018DE0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018DE6                            
00018DE6                            	@delete:
00018DE6 4EF9 0000 F4FA             		jmp	(DeleteObject).l
00018DEC                            ; ===========================================================================
00018DEC                            
00018DEC                            @isSBZ3:
00018DEC 317C 41F0 0002             		move.w	#$41F0,obGfx(a0)
00018DF2 0C68 0A80 0008             		cmpi.w	#$A80,obX(a0)
00018DF8 6600                       		bne.s	@isSBZ12
00018DFA 45F8 FC00                  		lea	(v_objstate).w,a2
00018DFE 7000                       		moveq	#0,d0
00018E00 1028 0023                  		move.b	obRespawnNo(a0),d0
00018E04 6700                       		beq.s	@isSBZ12
00018E06 0832 0000 0002             		btst	#0,2(a2,d0.w)
00018E0C 6700                       		beq.s	@isSBZ12
00018E0E 4238 F7CB                  		clr.b	(v_obj6B).w
00018E12 60C0                       		bra.s	@chkdel
00018E14                            ; ===========================================================================
00018E14                            
00018E14                            @isSBZ12:
00018E14 0028 0004 0001             		ori.b	#4,obRender(a0)
00018E1A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018E20 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00018E26 3168 000C 0030             		move.w	obY(a0),sto_origY(a0)
00018E2C 7000                       		moveq	#0,d0
00018E2E 101B                       		move.b	(a3)+,d0
00018E30 3140 003C                  		move.w	d0,$3C(a0)
00018E34 7000                       		moveq	#0,d0
00018E36 1028 0028                  		move.b	obSubtype(a0),d0
00018E3A 6A00                       		bpl.s	Sto_Action
00018E3C 0200 000F                  		andi.b	#$F,d0
00018E40 1140 003E                  		move.b	d0,$3E(a0)
00018E44 1153 0028                  		move.b	(a3),obSubtype(a0)
00018E48 0C13 0005                  		cmpi.b	#5,(a3)
00018E4C 6600                       		bne.s	@chkgone
00018E4E 08E8 0004 0001             		bset	#4,obRender(a0)
00018E54                            
00018E54                            	@chkgone:
00018E54 45F8 FC00                  		lea	(v_objstate).w,a2
00018E58 7000                       		moveq	#0,d0
00018E5A 1028 0023                  		move.b	obRespawnNo(a0),d0
00018E5E 6700                       		beq.s	Sto_Action
00018E60 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018E66                            
00018E66                            Sto_Action:	; Routine 2
00018E66 3F28 0008                  		move.w	obX(a0),-(sp)
00018E6A 7000                       		moveq	#0,d0
00018E6C 1028 0028                  		move.b	obSubtype(a0),d0
00018E70 0240 000F                  		andi.w	#$F,d0
00018E74 D040                       		add.w	d0,d0
00018E76 323B 0000                  		move.w	@index(pc,d0.w),d1
00018E7A 4EBB 1000                  		jsr	@index(pc,d1.w)
00018E7E 381F                       		move.w	(sp)+,d4
00018E80 4A28 0001                  		tst.b	obRender(a0)
00018E84 6A00                       		bpl.s	@chkdel
00018E86 7200                       		moveq	#0,d1
00018E88 1228 0014                  		move.b	obActWid(a0),d1
00018E8C 0641 000B                  		addi.w	#$B,d1
00018E90 7400                       		moveq	#0,d2
00018E92 1428 0016                  		move.b	sto_height(a0),d2
00018E96 3602                       		move.w	d2,d3
00018E98 5243                       		addq.w	#1,d3
00018E9A 6100 8B5A                  		bsr.w	SolidObject
00018E9E                            
00018E9E                            	@chkdel:
00018EBA 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
00018EC0                            
00018EC0                            	@chkgone:
00018EC0 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w
00018EC6 6600                       		bne.s	@delete
00018EC8 4238 F7CB                  		clr.b	(v_obj6B).w
00018ECC 45F8 FC00                  		lea	(v_objstate).w,a2
00018ED0 7000                       		moveq	#0,d0
00018ED2 1028 0023                  		move.b	obRespawnNo(a0),d0
00018ED6 6700                       		beq.s	@delete
00018ED8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018EDE                            
00018EDE                            	@delete:
00018EDE 4EF9 0000 F4FA             		jmp	(DeleteObject).l
00018EE4                            ; ===========================================================================
00018EE4 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00018EE8 0000 0000                  		dc.w @type02-@index, @type03-@index
00018EEC 0000 0000                  		dc.w @type04-@index, @type05-@index
00018EF0                            ; ===========================================================================
00018EF0                            
00018EF0                            @type00:
00018EF0 4E75                       		rts
00018EF2                            ; ===========================================================================
00018EF2                            
00018EF2                            @type01:
00018EF2 4A28 0038                  		tst.b	sto_active(a0)
00018EF6 6600                       		bne.s	@isactive01
00018EF8 45F8 F7E0                  		lea	(f_switch).w,a2
00018EFC 7000                       		moveq	#0,d0
00018EFE 1028 003E                  		move.b	$3E(a0),d0
00018F02 0832 0000 0000             		btst	#0,(a2,d0.w)
00018F08 6700                       		beq.s	@loc_15DC2
00018F0A 117C 0001 0038             		move.b	#1,sto_active(a0)
00018F10                            
00018F10                            	@isactive01:
00018F10 3028 003C                  		move.w	$3C(a0),d0
00018F14 B068 003A                  		cmp.w	$3A(a0),d0
00018F18 6700                       		beq.s	@loc_15DE0
00018F1A 5468 003A                  		addq.w	#2,$3A(a0)
00018F1E                            
00018F1E                            	@loc_15DC2:
00018F1E 3028 003A                  		move.w	$3A(a0),d0
00018F22 0828 0000 0022             		btst	#0,obStatus(a0)
00018F28 6700                       		beq.s	@noflip01
00018F2A 4440                       		neg.w	d0
00018F2C 0640 0080                  		addi.w	#$80,d0
00018F30                            
00018F30                            	@noflip01:
00018F30 3228 0034                  		move.w	sto_origX(a0),d1
00018F34 9240                       		sub.w	d0,d1
00018F36 3141 0008                  		move.w	d1,obX(a0)
00018F3A 4E75                       		rts	
00018F3C                            ; ===========================================================================
00018F3C                            
00018F3C                            @loc_15DE0:
00018F3C 5228 0028                  		addq.b	#1,obSubtype(a0)
00018F40 317C 00B4 0036             		move.w	#$B4,$36(a0)
00018F46 4228 0038                  		clr.b	sto_active(a0)
00018F4A 45F8 FC00                  		lea	(v_objstate).w,a2
00018F4E 7000                       		moveq	#0,d0
00018F50 1028 0023                  		move.b	obRespawnNo(a0),d0
00018F54 67C8                       		beq.s	@loc_15DC2
00018F56 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018F5C 60C0                       		bra.s	@loc_15DC2
00018F5E                            ; ===========================================================================
00018F5E                            
00018F5E                            @type02:
00018F5E 4A28 0038                  		tst.b	sto_active(a0)
00018F62 6600                       		bne.s	@isactive02
00018F64 5368 0036                  		subq.w	#1,$36(a0)
00018F68 6600                       		bne.s	@loc_15E1E
00018F6A 117C 0001 0038             		move.b	#1,sto_active(a0)
00018F70                            
00018F70                            	@isactive02:
00018F70 4A68 003A                  		tst.w	$3A(a0)
00018F74 6700                       		beq.s	@loc_15E3C
00018F76 5568 003A                  		subq.w	#2,$3A(a0)
00018F7A                            
00018F7A                            	@loc_15E1E:
00018F7A 3028 003A                  		move.w	$3A(a0),d0
00018F7E 0828 0000 0022             		btst	#0,obStatus(a0)
00018F84 6700                       		beq.s	@noflip02
00018F86 4440                       		neg.w	d0
00018F88 0640 0080                  		addi.w	#$80,d0
00018F8C                            
00018F8C                            	@noflip02:
00018F8C 3228 0034                  		move.w	sto_origX(a0),d1
00018F90 9240                       		sub.w	d0,d1
00018F92 3141 0008                  		move.w	d1,obX(a0)
00018F96 4E75                       		rts	
00018F98                            ; ===========================================================================
00018F98                            
00018F98                            @loc_15E3C:
00018F98 5328 0028                  		subq.b	#1,obSubtype(a0)
00018F9C 4228 0038                  		clr.b	sto_active(a0)
00018FA0 45F8 FC00                  		lea	(v_objstate).w,a2
00018FA4 7000                       		moveq	#0,d0
00018FA6 1028 0023                  		move.b	obRespawnNo(a0),d0
00018FAA 67CE                       		beq.s	@loc_15E1E
00018FAC 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00018FB2 60C6                       		bra.s	@loc_15E1E
00018FB4                            ; ===========================================================================
00018FB4                            
00018FB4                            @type03:
00018FB4 4A28 0038                  		tst.b	sto_active(a0)
00018FB8 6600                       		bne.s	@isactive03
00018FBA 4A68 003A                  		tst.w	$3A(a0)
00018FBE 6700                       		beq.s	@loc_15E6A
00018FC0 5368 003A                  		subq.w	#1,$3A(a0)
00018FC4 6000                       		bra.s	@loc_15E8E
00018FC6                            ; ===========================================================================
00018FC6                            
00018FC6                            @loc_15E6A:
00018FC6 5368 0036                  		subq.w	#1,$36(a0)
00018FCA 6A00                       		bpl.s	@loc_15E8E
00018FCC 317C 003C 0036             		move.w	#$3C,$36(a0)
00018FD2 117C 0001 0038             		move.b	#1,sto_active(a0)
00018FD8                            
00018FD8                            @isactive03:
00018FD8 5068 003A                  		addq.w	#8,$3A(a0)
00018FDC 3028 003A                  		move.w	$3A(a0),d0
00018FE0 B068 003C                  		cmp.w	$3C(a0),d0
00018FE4 6600                       		bne.s	@loc_15E8E
00018FE6 4228 0038                  		clr.b	sto_active(a0)
00018FEA                            
00018FEA                            @loc_15E8E:
00018FEA 3028 003A                  		move.w	$3A(a0),d0
00018FEE 0828 0000 0022             		btst	#0,obStatus(a0)
00018FF4 6700                       		beq.s	@noflip03
00018FF6 4440                       		neg.w	d0
00018FF8 0640 0038                  		addi.w	#$38,d0
00018FFC                            
00018FFC                            	@noflip03:
00018FFC 3228 0030                  		move.w	sto_origY(a0),d1
00019000 D240                       		add.w	d0,d1
00019002 3141 000C                  		move.w	d1,obY(a0)
00019006 4E75                       		rts	
00019008                            ; ===========================================================================
00019008                            
00019008                            @type04:
00019008 4A28 0038                  		tst.b	sto_active(a0)
0001900C 6600                       		bne.s	@isactive04
0001900E 4A68 003A                  		tst.w	$3A(a0)
00019012 6700                       		beq.s	@loc_15EBE
00019014 5168 003A                  		subq.w	#8,$3A(a0)
00019018 6000                       		bra.s	@loc_15EF0
0001901A                            ; ===========================================================================
0001901A                            
0001901A                            @loc_15EBE:
0001901A 5368 0036                  		subq.w	#1,$36(a0)
0001901E 6A00                       		bpl.s	@loc_15EF0
00019020 317C 003C 0036             		move.w	#$3C,$36(a0)
00019026 117C 0001 0038             		move.b	#1,sto_active(a0)
0001902C                            
0001902C                            @isactive04:
0001902C 3028 003A                  		move.w	$3A(a0),d0
00019030 B068 003C                  		cmp.w	$3C(a0),d0
00019034 6700                       		beq.s	@loc_15EE0
00019036 5068 003A                  		addq.w	#8,$3A(a0)
0001903A 6000                       		bra.s	@loc_15EF0
0001903C                            ; ===========================================================================
0001903C                            
0001903C                            @loc_15EE0:
0001903C 5368 0036                  		subq.w	#1,$36(a0)
00019040 6A00                       		bpl.s	@loc_15EF0
00019042 317C 003C 0036             		move.w	#$3C,$36(a0)
00019048 4228 0038                  		clr.b	sto_active(a0)
0001904C                            
0001904C                            @loc_15EF0:
0001904C 3028 003A                  		move.w	$3A(a0),d0
00019050 0828 0000 0022             		btst	#0,obStatus(a0)
00019056 6700                       		beq.s	@noflip04
00019058 4440                       		neg.w	d0
0001905A 0640 0038                  		addi.w	#$38,d0
0001905E                            
0001905E                            	@noflip04:
0001905E 3228 0030                  		move.w	sto_origY(a0),d1
00019062 D240                       		add.w	d0,d1
00019064 3141 000C                  		move.w	d1,obY(a0)
00019068 4E75                       		rts	
0001906A                            ; ===========================================================================
0001906A                            
0001906A                            @type05:
0001906A 4A28 0038                  		tst.b	sto_active(a0)
0001906E 6600                       		bne.s	@loc_15F3E
00019070 45F8 F7E0                  		lea	(f_switch).w,a2
00019074 7000                       		moveq	#0,d0
00019076 1028 003E                  		move.b	$3E(a0),d0
0001907A 0832 0000 0000             		btst	#0,(a2,d0.w)
00019080 6700                       		beq.s	@locret_15F5C
00019082 117C 0001 0038             		move.b	#1,sto_active(a0)
00019088 45F8 FC00                  		lea	(v_objstate).w,a2
0001908C 7000                       		moveq	#0,d0
0001908E 1028 0023                  		move.b	obRespawnNo(a0),d0
00019092 6700                       		beq.s	@loc_15F3E
00019094 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001909A                            
0001909A                            @loc_15F3E:
0001909A 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
000190A2 06A8 0000 8000 000C        		addi.l	#$8000,obY(a0)
000190AA 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
000190B0 0C68 0980 0008             		cmpi.w	#$980,obX(a0)
000190B6 6700                       		beq.s	@loc_15F5E
000190B8                            
000190B8                            @locret_15F5C:
000190B8 4E75                       		rts	
000190BA                            ; ===========================================================================
000190BA                            
000190BA                            @loc_15F5E:
000190BA 4228 0028                  		clr.b	obSubtype(a0)
000190BE 4228 0038                  		clr.b	sto_active(a0)
000190C2 4E75                       		rts	
000190C2 4E75                       		rts	
000190C4                            Map_Stomp:	include	"_maps\SBZ Stomper and Door.asm"
000190C4                            ; ---------------------------------------------------------------------------
000190C4                            ; Sprite mappings - stomper and	platforms (SBZ)
000190C4                            ; ---------------------------------------------------------------------------
000190C4                            Map_Stomp_internal:
000190C4 0000                       		dc.w @door-Map_Stomp_internal
000190C6 0000                       		dc.w @stomper-Map_Stomp_internal
000190C8 0000                       		dc.w @stomper-Map_Stomp_internal
000190CA 0000                       		dc.w @stomper-Map_Stomp_internal
000190CC 0000                       		dc.w @bigdoor-Map_Stomp_internal
000190CE 04                         @door:		dc.b 4
000190CF F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0 ; horizontal sliding door
000190D4 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
000190D9 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
000190DE F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
000190E3 08                         @stomper:	dc.b 8
000190E4 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4 ; stomper block with yellow/black stripes
000190E9 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
000190EE E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
000190F3 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
000190F8 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
000190FD 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00019102 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00019107 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
0001910C 0E                         @bigdoor:	dc.b $E
0001910D C00F 0000 80               		dc.b $C0, $F, 0, 0, $80	; huge diagonal sliding door from SBZ3
00019112 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00019117 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
0001911C C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00019121 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00019126 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
0001912B C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00019130 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00019135 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
0001913A E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
0001913F E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00019144 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00019149 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
0001914E 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00019154 00                         		even
00019154 00                         		even
00019154                            		include	"_incObj\6C SBZ Vanishing Platforms.asm"
00019154                            ; ---------------------------------------------------------------------------
00019154                            ; Object 6C - vanishing	platforms (SBZ)
00019154                            ; ---------------------------------------------------------------------------
00019154                            
00019154                            VanishPlatform:
00019154 7000                       		moveq	#0,d0
00019156 1028 0024                  		move.b	obRoutine(a0),d0
0001915A 323B 0000                  		move.w	VanP_Index(pc,d0.w),d1
0001915E 4EFB 1000                  		jmp	VanP_Index(pc,d1.w)
00019162                            ; ===========================================================================
00019162 0000                       VanP_Index:	dc.w VanP_Main-VanP_Index
00019164 0000                       		dc.w VanP_Vanish-VanP_Index
00019166 0000                       		dc.w VanP_Appear-VanP_Index
00019168 0000                       		dc.w loc_16068-VanP_Index
0001916A                            
0001916A =00000030                  vanp_timer:	equ $30		; counter for time until event
0001916A =00000032                  vanp_timelen:	equ $32		; time between events (general)
0001916A                            ; ===========================================================================
0001916A                            
0001916A                            VanP_Main:	; Routine 0
0001916A 5C28 0024                  		addq.b	#6,obRoutine(a0)
0001916E 217C 0000 0000 0004        		move.l	#Map_VanP,obMap(a0)
00019176 317C 445D 0002             		move.w	#$445D,obGfx(a0)
0001917C 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone?
00019182 6700                       		beq.s	VanP_IsSYZ	; if yes, branch
00019184 317C 44C3 0002             		move.w	#$44C3,obGfx(a0)	; SBZ
0001918A                            
0001918A                            	VanP_IsSYZ:	
0001918A 0028 0004 0001             		ori.b	#4,obRender(a0)
00019190 117C 0010 0014             		move.b	#$10,obActWid(a0)
00019196 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001919C 7000                       		moveq	#0,d0
0001919E 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000191A2 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000191A6 5240                       		addq.w	#1,d0		; add 1
000191A8 EF48                       		lsl.w	#7,d0		; multiply by $80
000191AA 3200                       		move.w	d0,d1
000191AC 5340                       		subq.w	#1,d0
000191AE 3140 0030                  		move.w	d0,vanp_timer(a0)
000191B2 3140 0032                  		move.w	d0,vanp_timelen(a0)
000191B6 7000                       		moveq	#0,d0
000191B8 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000191BC 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
000191C0 0641 0080                  		addi.w	#$80,d1
000191C4 C0C1                       		mulu.w	d1,d0
000191C6 E088                       		lsr.l	#8,d0
000191C8 3140 0036                  		move.w	d0,$36(a0)
000191CC 5341                       		subq.w	#1,d1
000191CE 3141 0038                  		move.w	d1,$38(a0)
000191D2                            
000191D2                            loc_16068:	; Routine 6
000191D2 3038 FE04                  		move.w	(v_framecount).w,d0
000191D6 9068 0036                  		sub.w	$36(a0),d0
000191DA C068 0038                  		and.w	$38(a0),d0
000191DE 6600                       		bne.s	@animate
000191E0 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto VanP_Vanish next
000191E4 6000                       		bra.s	VanP_Vanish
000191E6                            ; ===========================================================================
000191E6                            
000191E6                            @animate:
000191E6 43F9 0000 0000             		lea	(Ani_Van).l,a1
000191EC 4EB9 0000 C574             		jsr	(AnimateSprite).l
000191F2 6000 836A                  		bra.w	RememberState
000191F6                            ; ===========================================================================
000191F6                            
000191F6                            VanP_Vanish:	; Routine 2
000191F6                            VanP_Appear:	; Routine 4
000191F6 5368 0030                  		subq.w	#1,vanp_timer(a0)
000191FA 6A00                       		bpl.s	@wait
000191FC 317C 007F 0030             		move.w	#127,vanp_timer(a0)
00019202 4A28 001C                  		tst.b	obAnim(a0)	; is platform vanishing?
00019206 6700                       		beq.s	@isvanishing	; if yes, branch
00019208 3168 0032 0030             		move.w	vanp_timelen(a0),vanp_timer(a0)
0001920E                            
0001920E                            	@isvanishing:
0001920E 0868 0000 001C             		bchg	#0,obAnim(a0)
00019214                            
00019214                            	@wait:
00019214 43F9 0000 0000             		lea	(Ani_Van).l,a1
0001921A 4EB9 0000 C574             		jsr	(AnimateSprite).l
00019220 0828 0001 001A             		btst	#1,obFrame(a0)	; has platform vanished?
00019226 6600                       		bne.s	@notsolid	; if yes, branch
00019228 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0001922E 6600                       		bne.s	@loc_160D6
00019230 7200                       		moveq	#0,d1
00019232 1228 0014                  		move.b	obActWid(a0),d1
00019236 4EB9 0000 8B78             		jsr	(PlatformObject).l
0001923C 6000 8320                  		bra.w	RememberState
00019240                            ; ===========================================================================
00019240                            
00019240                            @loc_160D6:
00019240 7200                       		moveq	#0,d1
00019242 1228 0014                  		move.b	obActWid(a0),d1
00019246 4EB9 0000 8CEC             		jsr	(ExitPlatform).l
0001924C 3428 0008                  		move.w	obX(a0),d2
00019250 4EB9 0000 9256             		jsr	(MvSonicOnPtfm2).l
00019256 6000 8306                  		bra.w	RememberState
0001925A                            ; ===========================================================================
0001925A                            
0001925A                            @notsolid:
0001925A 0828 0003 0022             		btst	#3,obStatus(a0)
00019260 6700                       		beq.s	@display
00019262 43F8 D000                  		lea	(v_player).w,a1
00019266 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001926C 08A8 0003 0022             		bclr	#3,obStatus(a0)
00019272 117C 0002 0024             		move.b	#2,obRoutine(a0)
00019278 4228 0025                  		clr.b	obSolid(a0)
0001927C                            
0001927C                            	@display:
0001927C 6000 82E0                  		bra.w	RememberState
0001927C 6000 82E0                  		bra.w	RememberState
00019280                            		include	"_anim\SBZ Vanishing Platforms.asm"
00019280                            ; ---------------------------------------------------------------------------
00019280                            ; Animation script - vanishing platforms (SBZ)
00019280                            ; ---------------------------------------------------------------------------
00019280 0000                       Ani_Van:	dc.w @vanish-Ani_Van
00019282 0000                       		dc.w @appear-Ani_Van
00019284 0300 0102 0304 0506 FE01   @vanish:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, afBack, 1
0001928E                            		even
0001928E 0306 0504 0302 0100 FE01   @appear:	dc.b 3,	6, 5, 4, 3, 2, 1, 0, afBack, 1
00019298                            		even
00019298                            		even
00019298                            Map_VanP:	include	"_maps\SBZ Vanishing Platforms.asm"
00019298                            ; --------------------------------------------------------------------------------
00019298                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00019298                            ; --------------------------------------------------------------------------------
00019298                            
00019298                            SME_Mrcg1:	
00019298 0000 0000                  		dc.w SME_Mrcg1_E-SME_Mrcg1, SME_Mrcg1_14-SME_Mrcg1	
0001929C 0000 0000                  		dc.w SME_Mrcg1_29-SME_Mrcg1, SME_Mrcg1_2F-SME_Mrcg1	
000192A0 0000 0000                  		dc.w SME_Mrcg1_3A-SME_Mrcg1, SME_Mrcg1_40-SME_Mrcg1	
000192A4 0000                       		dc.w SME_Mrcg1_46-SME_Mrcg1	
000192A6 01                         SME_Mrcg1_E:	dc.b 1	
000192A7 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
000192AC 04                         SME_Mrcg1_14:	dc.b 4	
000192AD F803 0010 F8               		dc.b $F8, 3, 0, $10, $F8	
000192B2 F803 0010 00               		dc.b $F8, 3, 0, $10, 0	
000192B7 F803 0010 F0               		dc.b $F8, 3, 0, $10, $F0	
000192BC F803 0010 08               		dc.b $F8, 3, 0, $10, 8	
000192C1 01                         SME_Mrcg1_29:	dc.b 1	
000192C2 F807 0000 F8               		dc.b $F8, 7, 0, 0, $F8	
000192C7 02                         SME_Mrcg1_2F:	dc.b 2	
000192C8 F803 0010 F8               		dc.b $F8, 3, 0, $10, $F8	
000192CD F803 0010 00               		dc.b $F8, 3, 0, $10, 0	
000192D2 01                         SME_Mrcg1_3A:	dc.b 1	
000192D3 F803 0000 FD               		dc.b $F8, 3, 0, 0, $FD	
000192D8 01                         SME_Mrcg1_40:	dc.b 1	
000192D9 F803 0010 FD               		dc.b $F8, 3, 0, $10, $FD	
000192DE 00                         SME_Mrcg1_46:	dc.b 0	
000192E0 00                         		even
000192E0 00                         		even
000192E0                            		include	"_incObj\6E Electrocuter.asm"
000192E0                            ; ---------------------------------------------------------------------------
000192E0                            ; Object 6E - electrocution orbs (SBZ)
000192E0                            ; ---------------------------------------------------------------------------
000192E0                            
000192E0                            Electro:
000192E0 7000                       		moveq	#0,d0
000192E2 1028 0024                  		move.b	obRoutine(a0),d0
000192E6 323B 0000                  		move.w	Elec_Index(pc,d0.w),d1
000192EA 4EFB 1000                  		jmp	Elec_Index(pc,d1.w)
000192EE                            ; ===========================================================================
000192EE 0000                       Elec_Index:	dc.w Elec_Main-Elec_Index
000192F0 0000                       		dc.w Elec_Shock-Elec_Index
000192F2                            
000192F2 =00000034                  elec_freq:	equ $34		; frequency
000192F2                            ; ===========================================================================
000192F2                            
000192F2                            Elec_Main:	; Routine 0
000192F2 5428 0024                  		addq.b	#2,obRoutine(a0)
000192F6 217C 0000 0000 0004        		move.l	#Map_Elec,obMap(a0)
000192FE 317C 047E 0002             		move.w	#$47E,obGfx(a0)
00019304 0028 0004 0001             		ori.b	#4,obRender(a0)
0001930A 117C 0028 0014             		move.b	#$28,obActWid(a0)
00019310 7000                       		moveq	#0,d0
00019312 1028 0028                  		move.b	obSubtype(a0),d0 ; read object type
00019316 E948                       		lsl.w	#4,d0		; multiply by $10
00019318 5340                       		subq.w	#1,d0
0001931A 3140 0034                  		move.w	d0,elec_freq(a0)
0001931E                            
0001931E                            Elec_Shock:	; Routine 2
0001931E 3038 FE04                  		move.w	(v_framecount).w,d0
00019322 C068 0034                  		and.w	elec_freq(a0),d0 ; is it time to zap?
00019326 6600                       		bne.s	@animate	; if not, branch
00019328                            
00019328 117C 0001 001C             		move.b	#1,obAnim(a0)	; run "zap" animation
0001932E 4A28 0001                  		tst.b	obRender(a0)
00019332 6A00                       		bpl.s	@animate
0001933E                            
0001933E                            	@animate:
0001933E 43F9 0000 0000             		lea	(Ani_Elec).l,a1
00019344 4EB9 0000 C574             		jsr	(AnimateSprite).l
0001934A 117C 0000 0020             		move.b	#0,obColType(a0)
00019350 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; is 4th frame displayed?
00019356 6600                       		bne.s	@display	; if not, branch
00019358 117C 00A4 0020             		move.b	#$A4,obColType(a0) ; if yes, make object hurt Sonic
0001935E                            
0001935E                            	@display:
0001935E 6000 81FE                  		bra.w	RememberState
0001935E 6000 81FE                  		bra.w	RememberState
00019362                            		include	"_anim\Electrocuter.asm"
00019362                            ; ---------------------------------------------------------------------------
00019362                            ; Animation script - electrocution orbs (SBZ)
00019362                            ; ---------------------------------------------------------------------------
00019362 0000                       Ani_Elec:	dc.w byte_161CC-Ani_Elec
00019364 0000                       		dc.w byte_161D0-Ani_Elec
00019366 0700 FF                    byte_161CC:	dc.b 7,	0, afEnd
0001936A 00                         		even
0001936A 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, afChange, 0
0001937A                            		even
0001937A                            		even
0001937A                            Map_Elec:	include	"_maps\Electrocuter.asm"
0001937A                            ; --------------------------------------------------------------------------------
0001937A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001937A                            ; --------------------------------------------------------------------------------
0001937A                            
0001937A                            SME_KiF9w:	
0001937A 0000 0000                  		dc.w SME_KiF9w_C-SME_KiF9w, SME_KiF9w_17-SME_KiF9w	
0001937E 0000 0000                  		dc.w SME_KiF9w_27-SME_KiF9w, SME_KiF9w_41-SME_KiF9w	
00019382 0000 0000                  		dc.w SME_KiF9w_56-SME_KiF9w, SME_KiF9w_75-SME_KiF9w	
00019386 02                         SME_KiF9w_C:	dc.b 2	
00019387 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
0001938C 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019391 03                         SME_KiF9w_17:	dc.b 3	
00019392 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019397 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
0001939C 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000193A1 05                         SME_KiF9w_27:	dc.b 5	
000193A2 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
000193A7 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
000193AC 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000193B1 F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
000193B6 F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
000193BB 04                         SME_KiF9w_41:	dc.b 4	
000193BC F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
000193C1 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000193C6 F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
000193CB F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
000193D0 06                         SME_KiF9w_56:	dc.b 6	
000193D1 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
000193D6 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000193DB F60D 300C 08               		dc.b $F6, $D, $30, $C, 8	
000193E0 F60D 380C DC               		dc.b $F6, $D, $38, $C, $DC	
000193E5 F60D 200C 24               		dc.b $F6, $D, $20, $C, $24	
000193EA F60D 280C C0               		dc.b $F6, $D, $28, $C, $C0	
000193EF 04                         SME_KiF9w_75:	dc.b 4	
000193F0 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
000193F5 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000193FA F60D 300C 24               		dc.b $F6, $D, $30, $C, $24	
000193FF F60D 380C C0               		dc.b $F6, $D, $38, $C, $C0	
00019404                            		even
00019404                            		even
00019404                            		include	"_incObj\6F SBZ Spin Platform Conveyor.asm"
00019404                            ; ---------------------------------------------------------------------------
00019404                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00019404                            ; ---------------------------------------------------------------------------
00019404                            
00019404                            SpinConvey:
00019404 7000                       		moveq	#0,d0
00019406 1028 0024                  		move.b	obRoutine(a0),d0
0001940A 323B 0000                  		move.w	SpinC_Index(pc,d0.w),d1
0001940E 4EBB 1000                  		jsr	SpinC_Index(pc,d1.w)
0001942E                            
0001942E                            SpinC_Display:
0001942E 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
00019434                            ; ===========================================================================
00019434                            
00019434                            loc_1629A:
00019434 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; check if act is 3
0001943A 6600                       		bne.s	SpinC_Act1or2	; if not, branch
0001943C 0C40 FF80                  		cmpi.w	#-$80,d0
00019440 64EC                       		bcc.s	SpinC_Display
00019442                            
00019442                            SpinC_Act1or2:
00019442 1028 002F                  		move.b	$2F(a0),d0
00019446 6A00                       		bpl.s	SpinC_Delete
00019448 0240 007F                  		andi.w	#$7F,d0
0001944C 45F8 F7C1                  		lea	(v_obj63).w,a2
00019450 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00019456                            
00019456                            SpinC_Delete:
00019456 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001945C                            ; ===========================================================================
0001945C 0000                       SpinC_Index:	dc.w SpinC_Main-SpinC_Index
0001945E 0000                       		dc.w loc_163D8-SpinC_Index
00019460                            ; ===========================================================================
00019460                            
00019460                            SpinC_Main:	; Routine 0
00019460 1028 0028                  		move.b	obSubtype(a0),d0
00019464 6B00 0000                  		bmi.w	loc_16380
00019468 5428 0024                  		addq.b	#2,obRoutine(a0)
0001946C 217C 0001 8A96 0004        		move.l	#Map_Spin,obMap(a0)
00019474 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
0001947A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00019480 0028 0004 0001             		ori.b	#4,obRender(a0)
00019486 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001948C 7000                       		moveq	#0,d0
0001948E 1028 0028                  		move.b	obSubtype(a0),d0
00019492 3200                       		move.w	d0,d1
00019494 E648                       		lsr.w	#3,d0
00019496 0240 001E                  		andi.w	#$1E,d0
0001949A 45FA 0000                  		lea	off_164A6(pc),a2
0001949E D4F2 0000                  		adda.w	(a2,d0.w),a2
000194A2 315A 0038                  		move.w	(a2)+,$38(a0)
000194A6 315A 0030                  		move.w	(a2)+,$30(a0)
000194AA 214A 003C                  		move.l	a2,$3C(a0)
000194AE 0241 000F                  		andi.w	#$F,d1
000194B2 E549                       		lsl.w	#2,d1
000194B4 1141 0038                  		move.b	d1,$38(a0)
000194B8 117C 0004 003A             		move.b	#4,$3A(a0)
000194BE 4A38 F7C0                  		tst.b	(f_conveyrev).w
000194C2 6700                       		beq.s	loc_16356
000194C4 117C 0001 003B             		move.b	#1,$3B(a0)
000194CA 4428 003A                  		neg.b	$3A(a0)
000194CE 7200                       		moveq	#0,d1
000194D0 1228 0038                  		move.b	$38(a0),d1
000194D4 D228 003A                  		add.b	$3A(a0),d1
000194D8 B228 0039                  		cmp.b	$39(a0),d1
000194DC 6500                       		bcs.s	loc_16352
000194DE 1001                       		move.b	d1,d0
000194E0 7200                       		moveq	#0,d1
000194E2 4A00                       		tst.b	d0
000194E4 6A00                       		bpl.s	loc_16352
000194E6 1228 0039                  		move.b	$39(a0),d1
000194EA 5901                       		subq.b	#4,d1
000194EC                            
000194EC                            loc_16352:
000194EC 1141 0038                  		move.b	d1,$38(a0)
000194F0                            
000194F0                            loc_16356:
000194F0 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000194F6 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000194FC 4A41                       		tst.w	d1
000194FE 6600                       		bne.s	loc_1636C
00019500 117C 0001 001C             		move.b	#1,obAnim(a0)
00019506                            
00019506                            loc_1636C:
00019506 0C41 0008                  		cmpi.w	#8,d1
0001950A 6600                       		bne.s	loc_16378
0001950C 117C 0000 001C             		move.b	#0,obAnim(a0)
00019512                            
00019512                            loc_16378:
00019512 6100 B0D0                  		bsr.w	LCon_ChangeDir
00019516 6000 0000                  		bra.w	loc_163D8
0001951A                            ; ===========================================================================
0001951A                            
0001951A                            loc_16380:
0001951A 1140 002F                  		move.b	d0,$2F(a0)
0001951E 0240 007F                  		andi.w	#$7F,d0
00019522 45F8 F7C1                  		lea	(v_obj63).w,a2
00019526 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001952C 6700                       		beq.s	loc_1639A
0001952E 4EF9 0000 F4FA             		jmp	(DeleteObject).l
00019534                            ; ===========================================================================
00019534                            
00019534                            loc_1639A:
00019534 D040                       		add.w	d0,d0
00019536 0240 001E                  		andi.w	#$1E,d0
0001953A 0640 0000                  		addi.w	#ObjPosSBZPlatform_Index-ObjPos_Index,d0
0001953E 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00019544 D4F2 0000                  		adda.w	(a2,d0.w),a2
00019548 321A                       		move.w	(a2)+,d1
0001954A 2248                       		movea.l	a0,a1
0001954C 6000                       		bra.s	SpinC_LoadPform
0001954E                            ; ===========================================================================
0001954E                            
0001954E                            SpinC_Loop:
0001954E 4EB9 0000 FA54             		jsr	(FindFreeObj).l
00019554 6600                       		bne.s	loc_163D0
00019556                            
00019556                            SpinC_LoadPform:
00019556 12BC 006F                  		move.b	#id_SpinConvey,0(a1)
0001955A 335A 0008                  		move.w	(a2)+,obX(a1)
0001955E 335A 000C                  		move.w	(a2)+,obY(a1)
00019562 301A                       		move.w	(a2)+,d0
00019564 1340 0028                  		move.b	d0,obSubtype(a1)
00019568                            
00019568                            loc_163D0:
00019568 51C9 FFE4                  		dbf	d1,SpinC_Loop
0001956C                            
0001956C 588F                       		addq.l	#4,sp
0001956E 4E75                       		rts	
00019570                            ; ===========================================================================
00019570                            
00019570                            loc_163D8:	; Routine 2
00019570 43F9 0000 0000             		lea	(Ani_SpinConvey).l,a1
00019576 4EB9 0000 C574             		jsr	(AnimateSprite).l
0001957C 4A28 001A                  		tst.b	obFrame(a0)
00019580 6600                       		bne.s	loc_16404
00019582 3F28 0008                  		move.w	obX(a0),-(sp)
00019586 6100 0000                  		bsr.w	loc_16424
0001958A 323C 001B                  		move.w	#$1B,d1
0001958E 343C 0007                  		move.w	#7,d2
00019592 3602                       		move.w	d2,d3
00019594 5243                       		addq.w	#1,d3
00019596 381F                       		move.w	(sp)+,d4
00019598 6000 845C                  		bra.w	SolidObject
0001959C                            ; ===========================================================================
0001959C                            
0001959C                            loc_16404:
0001959C 0828 0003 0022             		btst	#3,obStatus(a0)
000195A2 6700                       		beq.s	loc_16420
000195A4 43F8 D000                  		lea	(v_objspace).w,a1
000195A8 08A9 0003 0022             		bclr	#3,obStatus(a1)
000195AE 08A8 0003 0022             		bclr	#3,obStatus(a0)
000195B4 4228 0025                  		clr.b	obSolid(a0)
000195B8                            
000195B8                            loc_16420:
000195B8 6000 0000                  		bra.w	loc_16424
000195BC                            
000195BC                            loc_16424:
000195BC 3028 0008                  		move.w	obX(a0),d0
000195C0 B068 0034                  		cmp.w	$34(a0),d0
000195C4 6600                       		bne.s	loc_16484
000195C6 3028 000C                  		move.w	obY(a0),d0
000195CA B068 0036                  		cmp.w	$36(a0),d0
000195CE 6600                       		bne.s	loc_16484
000195D0 7200                       		moveq	#0,d1
000195D2 1228 0038                  		move.b	$38(a0),d1
000195D6 D228 003A                  		add.b	$3A(a0),d1
000195DA B228 0039                  		cmp.b	$39(a0),d1
000195DE 6500                       		bcs.s	loc_16456
000195E0 1001                       		move.b	d1,d0
000195E2 7200                       		moveq	#0,d1
000195E4 4A00                       		tst.b	d0
000195E6 6A00                       		bpl.s	loc_16456
000195E8 1228 0039                  		move.b	$39(a0),d1
000195EC 5901                       		subq.b	#4,d1
000195EE                            
000195EE                            loc_16456:
000195EE 1141 0038                  		move.b	d1,$38(a0)
000195F2 2268 003C                  		movea.l	$3C(a0),a1
000195F6 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000195FC 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00019602 4A41                       		tst.w	d1
00019604 6600                       		bne.s	loc_16474
00019606 117C 0001 001C             		move.b	#1,obAnim(a0)
0001960C                            
0001960C                            loc_16474:
0001960C 0C41 0008                  		cmpi.w	#8,d1
00019610 6600                       		bne.s	loc_16480
00019612 117C 0000 001C             		move.b	#0,obAnim(a0)
00019618                            
00019618                            loc_16480:
00019618 6100 AFCA                  		bsr.w	LCon_ChangeDir
0001961C                            
0001961C                            loc_16484:
0001961C 4EF9 0000 F4A6             		jmp	(SpeedToPos).l
0001961C 4EF9 0000 F4A6             		jmp	(SpeedToPos).l
00019622                            		include	"_anim\SBZ Spin Platform Conveyor.asm"
00019622                            ; ---------------------------------------------------------------------------
00019622                            ; Animation script - platform on conveyor belt (SBZ)
00019622                            ; ---------------------------------------------------------------------------
00019622 0000                       Ani_SpinConvey:	dc.w @spin-Ani_SpinConvey
00019624 0000                       		dc.w @still-Ani_SpinConvey
00019626 0000 0102 0304 4342 4140+  @spin:		dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00019633 6423 2221 00FF             		dc.b $64, $23, $22, $21, 0, afEnd
0001963A 00                         		even
0001963A 0F00 FF                    @still:		dc.b $F, 0, afEnd
0001963E 00                         		even
0001963E 00                         		even
0001963E                            
0001963E 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00019644 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
0001964A 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
0001965E 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00019672 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00019686 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
0001969A 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
000196AE 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
000196C2                            ; ===========================================================================
000196C2                            
000196C2                            		include	"_incObj\70 Girder Block.asm"
000196C2                            ; ---------------------------------------------------------------------------
000196C2                            ; Object 70 - large girder block (SBZ)
000196C2                            ; ---------------------------------------------------------------------------
000196C2                            
000196C2                            Girder:
000196C2 7000                       		moveq	#0,d0
000196C4 1028 0024                  		move.b	obRoutine(a0),d0
000196C8 323B 0000                  		move.w	Gird_Index(pc,d0.w),d1
000196CC 4EFB 1000                  		jmp	Gird_Index(pc,d1.w)
000196D0                            ; ===========================================================================
000196D0 0000                       Gird_Index:	dc.w Gird_Main-Gird_Index
000196D2 0000                       		dc.w Gird_Action-Gird_Index
000196D4                            
000196D4 =00000016                  gird_height:	equ $16
000196D4 =00000032                  gird_origX:	equ $32		; original x-axis position
000196D4 =00000030                  gird_origY:	equ $30		; original y-axis position
000196D4 =00000034                  gird_time:	equ $34		; duration for movement in a direction
000196D4 =00000038                  gird_set:	equ $38		; which movement settings to use (0/8/16/24)
000196D4 =0000003A                  gird_delay:	equ $3A		; delay for movement
000196D4                            ; ===========================================================================
000196D4                            
000196D4                            Gird_Main:	; Routine 0
000196D4 5428 0024                  		addq.b	#2,obRoutine(a0)
000196D8 217C 0000 0000 0004        		move.l	#Map_Gird,obMap(a0)
000196E0 317C 42F0 0002             		move.w	#$42F0,obGfx(a0)
000196E6 0028 0004 0001             		ori.b	#4,obRender(a0)
000196EC 317C 0200 0018             		move.w	#$200,obPriority(a0)
000196F2 117C 0060 0014             		move.b	#$60,obActWid(a0)
000196F8 117C 0018 0016             		move.b	#$18,gird_height(a0)
000196FE 3168 0008 0032             		move.w	obX(a0),gird_origX(a0)
00019704 3168 000C 0030             		move.w	obY(a0),gird_origY(a0)
0001970A 6100 0000                  		bsr.w	Gird_ChgMove
0001970E                            
0001970E                            Gird_Action:	; Routine 2
0001970E 3F28 0008                  		move.w	obX(a0),-(sp)
00019712 4A68 003A                  		tst.w	gird_delay(a0)
00019716 6700                       		beq.s	@beginmove
00019718 5368 003A                  		subq.w	#1,gird_delay(a0)
0001971C 6600                       		bne.s	@solid
0001971E                            
0001971E                            	@beginmove:
0001971E 4EB9 0000 F4A6             		jsr	(SpeedToPos).l
00019724 5368 0034                  		subq.w	#1,gird_time(a0) ; decrement movement duration
00019728 6600                       		bne.s	@solid		; if time remains, branch
0001972A 6100 0000                  		bsr.w	Gird_ChgMove	; if time is zero, branch
0001972E                            
0001972E                            	@solid:
0001972E 381F                       		move.w	(sp)+,d4
00019730 4A28 0001                  		tst.b	obRender(a0)
00019734 6A00                       		bpl.s	@chkdel
00019736 7200                       		moveq	#0,d1
00019738 1228 0014                  		move.b	obActWid(a0),d1
0001973C 0641 000B                  		addi.w	#$B,d1
00019740 7400                       		moveq	#0,d2
00019742 1428 0016                  		move.b	gird_height(a0),d2
00019746 3602                       		move.w	d2,d3
00019748 5243                       		addq.w	#1,d3
0001974A 6100 82AA                  		bsr.w	SolidObject
0001974E                            
0001974E                            	@chkdel:
0001976A 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
00019770                            
00019770                            	@delete:
00019770 4EF9 0000 F4FA             		jmp	(DeleteObject).l
00019776                            ; ===========================================================================
00019776                            
00019776                            Gird_ChgMove:
00019776 1028 0038                  		move.b	gird_set(a0),d0
0001977A 0240 0018                  		andi.w	#$18,d0
0001977E 43F9 0000 0000             		lea	(@settings).l,a1
00019784 43F1 0000                  		lea	(a1,d0.w),a1
00019788 3159 0010                  		move.w	(a1)+,obVelX(a0)
0001978C 3159 0012                  		move.w	(a1)+,obVelY(a0)
00019790 3159 0034                  		move.w	(a1)+,gird_time(a0)
00019794 5028 0038                  		addq.b	#8,gird_set(a0)	; use next settings
00019798 317C 0007 003A             		move.w	#7,gird_delay(a0)
0001979E 4E75                       		rts	
000197A0                            ; ===========================================================================
000197A0                            @settings:	;   x-speed, y-speed, duration
000197A0 0100 0000 0060 0000        		dc.w   $100,	 0,   $60,     0 ; right
000197A8 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0 ; down
000197B0 FF00 FFC0 0060 0000        		dc.w  -$100,  -$40,   $60,     0 ; up/left
000197B8 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
000197B8 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
000197C0                            Map_Gird:	include	"_maps\Girder Block.asm"
000197C0                            ; ---------------------------------------------------------------------------
000197C0                            ; Sprite mappings - large girder block (SBZ)
000197C0                            ; ---------------------------------------------------------------------------
000197C0                            Map_Gird_internal:
000197C0 0000                       		dc.w @girder-Map_Gird_internal
000197C2 0C                         @girder:	dc.b $C
000197C3 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
000197C8 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
000197CD E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
000197D2 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
000197D7 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
000197DC 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
000197E1 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
000197E6 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
000197EB E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
000197F0 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
000197F5 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
000197FA 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00019800 00                         		even
00019800 00                         		even
00019800                            		include	"_incObj\72 Teleporter.asm"
00019800                            ; ---------------------------------------------------------------------------
00019800                            ; Object 72 - teleporter (SBZ)
00019800                            ; ---------------------------------------------------------------------------
00019800                            
00019800                            Teleport:
00019800 7000                       		moveq	#0,d0
00019802 1028 0024                  		move.b	obRoutine(a0),d0
00019806 323B 0000                  		move.w	Tele_Index(pc,d0.w),d1
0001980A 4EBB 1000                  		jsr	Tele_Index(pc,d1.w)
0001982A 4E75                       		rts	
0001982C                            
0001982C                            	@delete:
0001982C 4EF9 0000 F4FA             		jmp	(DeleteObject).l
00019832                            ; ===========================================================================
00019832 0000                       Tele_Index:	dc.w Tele_Main-Tele_Index
00019834 0000                       		dc.w loc_166C8-Tele_Index
00019836 0000                       		dc.w loc_1675E-Tele_Index
00019838 0000                       		dc.w loc_16798-Tele_Index
0001983A                            ; ===========================================================================
0001983A                            
0001983A                            Tele_Main:	; Routine 0
0001983A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001983E 1028 0028                  		move.b	obSubtype(a0),d0
00019842 D040                       		add.w	d0,d0
00019844 0240 001E                  		andi.w	#$1E,d0
00019848 45FA 0000                  		lea	Tele_Data(pc),a2
0001984C D4F2 0000                  		adda.w	(a2,d0.w),a2
00019850 315A 003A                  		move.w	(a2)+,$3A(a0)
00019854 214A 003C                  		move.l	a2,$3C(a0)
00019858 315A 0036                  		move.w	(a2)+,$36(a0)
0001985C 315A 0038                  		move.w	(a2)+,$38(a0)
00019860                            
00019860                            loc_166C8:	; Routine 2
00019860 43F8 D000                  		lea	(v_player).w,a1
00019864 3029 0008                  		move.w	obX(a1),d0
00019868 9068 0008                  		sub.w	obX(a0),d0
0001986C 0828 0000 0022             		btst	#0,obStatus(a0)
00019872 6700                       		beq.s	loc_166E0
00019874 0640 000F                  		addi.w	#$F,d0
00019878                            
00019878                            loc_166E0:
00019878 0C40 0010                  		cmpi.w	#$10,d0
0001987C 6400                       		bcc.s	locret_1675C
0001987E 3229 000C                  		move.w	obY(a1),d1
00019882 9268 000C                  		sub.w	obY(a0),d1
00019886 0641 0020                  		addi.w	#$20,d1
0001988A 0C41 0040                  		cmpi.w	#$40,d1
0001988E 6400                       		bcc.s	locret_1675C
00019890 4A38 F7C8                  		tst.b	(f_lockmulti).w
00019894 6600                       		bne.s	locret_1675C
00019896 0C28 0007 0028             		cmpi.b	#7,obSubtype(a0)
0001989C 6600                       		bne.s	loc_1670E
0001989E 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w
000198A4 6500                       		bcs.s	locret_1675C
000198A6                            
000198A6                            loc_1670E:
000198A6 5428 0024                  		addq.b	#2,obRoutine(a0)
000198AA 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
000198B0 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; use Sonic's rolling animation
000198B6 337C 0800 0020             		move.w	#$800,obInertia(a1)
000198BC 337C 0000 0010             		move.w	#0,obVelX(a1)
000198C2 337C 0000 0012             		move.w	#0,obVelY(a1)
000198C8 08A8 0005 0022             		bclr	#5,obStatus(a0)
000198CE 08A9 0005 0022             		bclr	#5,obStatus(a1)
000198D4 08E9 0001 0022             		bset	#1,obStatus(a1)
000198DA 3368 0008 0008             		move.w	obX(a0),obX(a1)
000198E0 3368 000C 000C             		move.w	obY(a0),obY(a1)
000198E6 4228 0032                  		clr.b	$32(a0)
000198F4                            
000198F4                            locret_1675C:
000198F4 4E75                       		rts	
000198F6                            ; ===========================================================================
000198F6                            
000198F6                            loc_1675E:	; Routine 4
000198F6 43F8 D000                  		lea	(v_player).w,a1
000198FA 1028 0032                  		move.b	$32(a0),d0
000198FE 5428 0032                  		addq.b	#2,$32(a0)
00019902 4EB9 0000 3BA2             		jsr	(CalcSine).l
00019908 EA40                       		asr.w	#5,d0
0001990A 3428 000C                  		move.w	obY(a0),d2
0001990E 9440                       		sub.w	d0,d2
00019910 3342 000C                  		move.w	d2,obY(a1)
00019914 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
0001991A 6600                       		bne.s	locret_16796
0001991C 6100 0000                  		bsr.w	sub_1681C
00019920 5428 0024                  		addq.b	#2,obRoutine(a0)
0001992E                            
0001992E                            locret_16796:
0001992E 4E75                       		rts	
00019930                            ; ===========================================================================
00019930                            
00019930                            loc_16798:	; Routine 6
00019930 588F                       		addq.l	#4,sp
00019932 43F8 D000                  		lea	(v_player).w,a1
00019936 5328 002E                  		subq.b	#1,$2E(a0)
0001993A 6A00                       		bpl.s	loc_167DA
0001993C 3368 0036 0008             		move.w	$36(a0),obX(a1)
00019942 3368 0038 000C             		move.w	$38(a0),obY(a1)
00019948 7200                       		moveq	#0,d1
0001994A 1228 003A                  		move.b	$3A(a0),d1
0001994E 5801                       		addq.b	#4,d1
00019950 B228 003B                  		cmp.b	$3B(a0),d1
00019954 6500                       		bcs.s	loc_167C2
00019956 7200                       		moveq	#0,d1
00019958 6000                       		bra.s	loc_16800
0001995A                            ; ===========================================================================
0001995A                            
0001995A                            loc_167C2:
0001995A 1141 003A                  		move.b	d1,$3A(a0)
0001995E 2468 003C                  		movea.l	$3C(a0),a2
00019962 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00019968 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
0001996E 6000 0000                  		bra.w	sub_1681C
00019972                            ; ===========================================================================
00019972                            
00019972                            loc_167DA:
00019972 2429 0008                  		move.l	obX(a1),d2
00019976 2629 000C                  		move.l	obY(a1),d3
0001997A 3029 0010                  		move.w	obVelX(a1),d0
0001997E 48C0                       		ext.l	d0
00019980 E180                       		asl.l	#8,d0
00019982 D480                       		add.l	d0,d2
00019984 3029 0012                  		move.w	obVelY(a1),d0
00019988 48C0                       		ext.l	d0
0001998A E180                       		asl.l	#8,d0
0001998C D680                       		add.l	d0,d3
0001998E 2342 0008                  		move.l	d2,obX(a1)
00019992 2343 000C                  		move.l	d3,obY(a1)
00019996 4E75                       		rts	
00019998                            ; ===========================================================================
00019998                            
00019998                            loc_16800:
00019998 0269 07FF 000C             		andi.w	#$7FF,obY(a1)
0001999E 4228 0024                  		clr.b	obRoutine(a0)
000199A2 4238 F7C8                  		clr.b	(f_lockmulti).w
000199A6 337C 0000 0010             		move.w	#0,obVelX(a1)
000199AC 337C 0200 0012             		move.w	#$200,obVelY(a1)
000199B2 4E75                       		rts	
000199B4                            
000199B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000199B4                            
000199B4                            
000199B4                            sub_1681C:
000199B4 7000                       		moveq	#0,d0
000199B6 343C 1000                  		move.w	#$1000,d2
000199BA 3028 0036                  		move.w	$36(a0),d0
000199BE 9069 0008                  		sub.w	obX(a1),d0
000199C2 6C00                       		bge.s	loc_16830
000199C4 4440                       		neg.w	d0
000199C6 4442                       		neg.w	d2
000199C8                            
000199C8                            loc_16830:
000199C8 7200                       		moveq	#0,d1
000199CA 363C 1000                  		move.w	#$1000,d3
000199CE 3228 0038                  		move.w	$38(a0),d1
000199D2 9269 000C                  		sub.w	obY(a1),d1
000199D6 6C00                       		bge.s	loc_16844
000199D8 4441                       		neg.w	d1
000199DA 4443                       		neg.w	d3
000199DC                            
000199DC                            loc_16844:
000199DC B240                       		cmp.w	d0,d1
000199DE 6500                       		bcs.s	loc_1687A
000199E0 7200                       		moveq	#0,d1
000199E2 3228 0038                  		move.w	$38(a0),d1
000199E6 9269 000C                  		sub.w	obY(a1),d1
000199EA 4841                       		swap	d1
000199EC 83C3                       		divs.w	d3,d1
000199EE 7000                       		moveq	#0,d0
000199F0 3028 0036                  		move.w	$36(a0),d0
000199F4 9069 0008                  		sub.w	obX(a1),d0
000199F8 6700                       		beq.s	loc_16866
000199FA 4840                       		swap	d0
000199FC 81C1                       		divs.w	d1,d0
000199FE                            
000199FE                            loc_16866:
000199FE 3340 0010                  		move.w	d0,obVelX(a1)
00019A02 3343 0012                  		move.w	d3,obVelY(a1)
00019A06 4A41                       		tst.w	d1
00019A08 6A00                       		bpl.s	loc_16874
00019A0A 4441                       		neg.w	d1
00019A0C                            
00019A0C                            loc_16874:
00019A0C 3141 002E                  		move.w	d1,$2E(a0)
00019A10 4E75                       		rts	
00019A12                            ; ===========================================================================
00019A12                            
00019A12                            loc_1687A:
00019A12 7000                       		moveq	#0,d0
00019A14 3028 0036                  		move.w	$36(a0),d0
00019A18 9069 0008                  		sub.w	obX(a1),d0
00019A1C 4840                       		swap	d0
00019A1E 81C2                       		divs.w	d2,d0
00019A20 7200                       		moveq	#0,d1
00019A22 3228 0038                  		move.w	$38(a0),d1
00019A26 9269 000C                  		sub.w	obY(a1),d1
00019A2A 6700                       		beq.s	loc_16898
00019A2C 4841                       		swap	d1
00019A2E 83C0                       		divs.w	d0,d1
00019A30                            
00019A30                            loc_16898:
00019A30 3341 0012                  		move.w	d1,obVelY(a1)
00019A34 3342 0010                  		move.w	d2,obVelX(a1)
00019A38 4A40                       		tst.w	d0
00019A3A 6A00                       		bpl.s	loc_168A6
00019A3C 4440                       		neg.w	d0
00019A3E                            
00019A3E                            loc_168A6:
00019A3E 3140 002E                  		move.w	d0,$2E(a0)
00019A42 4E75                       		rts	
00019A44                            ; End of function sub_1681C
00019A44                            
00019A44                            ; ===========================================================================
00019A44 0000 0000 0000             Tele_Data:	dc.w @type00-Tele_Data, @type01-Tele_Data, @type02-Tele_Data
00019A4A 0000 0000 0000             		dc.w @type03-Tele_Data, @type04-Tele_Data, @type05-Tele_Data
00019A50 0000 0000                  		dc.w @type06-Tele_Data, @type07-Tele_Data
00019A54 0004 0794 098C             @type00:	dc.w 4,	$794, $98C
00019A5A 0004 0094 038C             @type01:	dc.w 4,	$94, $38C
00019A60 001C 0794 02E8             @type02:	dc.w $1C, $794,	$2E8
00019A66 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00019A6C 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00019A72 0884 0298 0894             		dc.w $884, $298, $894
00019A78 0270 0894 0190             		dc.w $270, $894, $190
00019A7E 0004 0894 0690             @type03:	dc.w 4,	$894, $690
00019A84 001C 1194 0470             @type04:	dc.w $1C, $1194, $470
00019A8A 1184 0498 1158             		dc.w $1184, $498, $1158
00019A90 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00019A96 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00019A9C 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00019AA2 0004 1294 0490             @type05:	dc.w 4,	$1294, $490
00019AA8 001C 1594 FFE8             @type06:	dc.w $1C, $1594, $FFE8
00019AAE 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00019AB4 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00019ABA 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00019AC0 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00019AC6 0004 0894 0090             @type07:	dc.w 4,	$894, $90
00019AC6 0004 0894 0090             @type07:	dc.w 4,	$894, $90
00019ACC                            
00019ACC                            		include	"_incObj\78 Caterkiller.asm"
00019ACC                            ; ---------------------------------------------------------------------------
00019ACC                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00019ACC                            ; ---------------------------------------------------------------------------
00019ACC                            
00019ACC                            Caterkiller:
00019ACC 7000                       		moveq	#0,d0
00019ACE 1028 0024                  		move.b	obRoutine(a0),d0
00019AD2 323B 0000                  		move.w	Cat_Index(pc,d0.w),d1
00019AD6 4EFB 1000                  		jmp	Cat_Index(pc,d1.w)
00019ADA                            ; ===========================================================================
00019ADA 0000                       Cat_Index:	dc.w Cat_Main-Cat_Index
00019ADC 0000                       		dc.w Cat_Head-Cat_Index
00019ADE 0000                       		dc.w Cat_BodySeg1-Cat_Index
00019AE0 0000                       		dc.w Cat_BodySeg2-Cat_Index
00019AE2 0000                       		dc.w Cat_BodySeg1-Cat_Index
00019AE4 0000                       		dc.w Cat_Delete-Cat_Index
00019AE6 0000                       		dc.w loc_16CC0-Cat_Index
00019AE8                            
00019AE8 =0000003C                  cat_parent:	equ $3C		; address of parent object
00019AE8                            ; ===========================================================================
00019AE8                            
00019AE8                            locret_16950:
00019AE8 4E75                       		rts	
00019AEA                            ; ===========================================================================
00019AEA                            
00019AEA                            Cat_Main:	; Routine 0
00019AEA 117C 0007 0016             		move.b	#7,obHeight(a0)
00019AF0 117C 0008 0017             		move.b	#8,obWidth(a0)
00019AF6 4EB9 0000 F46E             		jsr	(ObjectFall).l
00019AFC 4EB9 0001 7F74             		jsr	(ObjFloorDist).l
00019B02 4A41                       		tst.w	d1
00019B04 6AE2                       		bpl.s	locret_16950
00019B06 D368 000C                  		add.w	d1,obY(a0)
00019B0A 4268 0012                  		clr.w	obVelY(a0)
00019B0E 5428 0024                  		addq.b	#2,obRoutine(a0)
00019B12 217C 0000 0000 0004        		move.l	#Map_Cat,obMap(a0)
00019B1A 317C 22B0 0002             		move.w	#$22B0,obGfx(a0)
00019B20 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; if level is SBZ, branch
00019B26 6700                       		beq.s	@isscrapbrain
00019B28 317C 24FF 0002             		move.w	#$24FF,obGfx(a0) ; MZ specific code
00019B2E                            
00019B2E                            	@isscrapbrain:
00019B2E 0228 0003 0001             		andi.b	#3,obRender(a0)
00019B34 0028 0004 0001             		ori.b	#4,obRender(a0)
00019B3A 1168 0001 0022             		move.b	obRender(a0),obStatus(a0)
00019B40 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019B46 117C 0008 0014             		move.b	#8,obActWid(a0)
00019B4C 117C 000B 0020             		move.b	#$B,obColType(a0)
00019B52 3428 0008                  		move.w	obX(a0),d2
00019B56 7A0C                       		moveq	#$C,d5
00019B58 0828 0000 0022             		btst	#0,obStatus(a0)
00019B5E 6700                       		beq.s	@noflip
00019B60 4445                       		neg.w	d5
00019B62                            
00019B62                            	@noflip:
00019B62 1C3C 0004                  		move.b	#4,d6
00019B66 7600                       		moveq	#0,d3
00019B68 7804                       		moveq	#4,d4
00019B6A 2448                       		movea.l	a0,a2
00019B6C 7202                       		moveq	#2,d1
00019B6E                            
00019B6E                            Cat_Loop:
00019B6E 4EB9 0000 FA6A             		jsr	(FindNextFreeObj).l
00019B74 6600 0000                  			bne.w	Cat_ChkGone
00019B78 12BC 0078                  		move.b	#id_Caterkiller,0(a1) ; load body segment object
00019B7C 1346 0024                  		move.b	d6,obRoutine(a1) ; goto Cat_BodySeg1 or Cat_BodySeg2 next
00019B80 5406                       		addq.b	#2,d6		; alternate between the two
00019B82 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00019B88 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00019B8E 337C 0280 0018             		move.w	#$280,obPriority(a1)
00019B94 137C 0008 0014             		move.b	#8,obActWid(a1)
00019B9A 137C 00CB 0020             		move.b	#$CB,obColType(a1)
00019BA0 D445                       		add.w	d5,d2
00019BA2 3342 0008                  		move.w	d2,obX(a1)
00019BA6 3368 000C 000C             		move.w	obY(a0),obY(a1)
00019BAC 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00019BB2 1368 0022 0001             		move.b	obStatus(a0),obRender(a1)
00019BB8 137C 0008 001A             		move.b	#8,obFrame(a1)
00019BBE 234A 003C                  		move.l	a2,cat_parent(a1)
00019BC2 1344 003C                  		move.b	d4,cat_parent(a1)
00019BC6 5804                       		addq.b	#4,d4
00019BC8 2449                       		movea.l	a1,a2
00019BCA                            
00019BCA                            	@fail:
00019BCA 51C9 FFA2                  		dbf	d1,Cat_Loop	; repeat sequence 2 more times
00019BCE                            
00019BCE 117C 0007 002A             		move.b	#7,$2A(a0)
00019BD4 4228 003C                  		clr.b	cat_parent(a0)
00019BD8                            
00019BD8                            Cat_Head:	; Routine 2
00019BD8 4A28 0022                  		tst.b	obStatus(a0)
00019BDC 6B00 0000                  		bmi.w	loc_16C96
00019BE0 7000                       		moveq	#0,d0
00019BE2 1028 0025                  		move.b	ob2ndRout(a0),d0
00019BE6 323B 0000                  		move.w	Cat_Index2(pc,d0.w),d1
00019BEA 4EBB 1000                  		jsr	Cat_Index2(pc,d1.w)
00019BEE 1228 002B                  		move.b	$2B(a0),d1
00019BF2 6A00                       		bpl.s	@display
00019BF4 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019BFA 1028 0026                  		move.b	obAngle(a0),d0
00019BFE 0240 007F                  		andi.w	#$7F,d0
00019C02 5828 0026                  		addq.b	#4,obAngle(a0)
00019C06 1031 0000                  		move.b	(a1,d0.w),d0
00019C0A 6A00                       		bpl.s	@animate
00019C0C 08A8 0007 002B             		bclr	#7,$2B(a0)
00019C12 6000                       		bra.s	@display
00019C14                            
00019C14                            	@animate:
00019C14 0201 0010                  		andi.b	#$10,d1
00019C18 D001                       		add.b	d1,d0
00019C1A 1140 001A                  		move.b	d0,obFrame(a0)
00019C1E                            
00019C1E                            	@display:
00019C3C 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
00019C42                            
00019C42                            	Cat_ChkGone:
00019C42 45F8 FC00                  		lea	(v_objstate).w,a2
00019C46 7000                       		moveq	#0,d0
00019C48 1028 0023                  		move.b	obRespawnNo(a0),d0
00019C4C 6700                       		beq.s	@delete
00019C4E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019C54                            
00019C54                            	@delete:
00019C54 117C 000A 0024             		move.b	#$A,obRoutine(a0)	; goto Cat_Delete next
00019C5A 4E75                       		rts	
00019C5C                            ; ===========================================================================
00019C5C                            
00019C5C                            Cat_Delete:	; Routine $A
00019C5C 4EF9 0000 F4FA             		jmp	(DeleteObject).l
00019C62                            ; ===========================================================================
00019C62 0000                       Cat_Index2:	dc.w @wait-Cat_Index2
00019C64 0000                       		dc.w loc_16B02-Cat_Index2
00019C66                            ; ===========================================================================
00019C66                            
00019C66                            @wait:
00019C66 5328 002A                  		subq.b	#1,$2A(a0)
00019C6A 6B00                       		bmi.s	@move
00019C6C 4E75                       		rts	
00019C6E                            ; ===========================================================================
00019C6E                            
00019C6E                            @move:
00019C6E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00019C72 117C 0010 002A             		move.b	#$10,$2A(a0)
00019C78 317C FF40 0010             		move.w	#-$C0,obVelX(a0)
00019C7E 317C 0040 001C             		move.w	#$40,obAnim(a0)
00019C84 0868 0004 002B             		bchg	#4,$2B(a0)
00019C8A 6600                       		bne.s	loc_16AFC
00019C8C 4268 0010                  		clr.w	obVelX(a0)
00019C90 4468 001C                  		neg.w	obAnim(a0)
00019C94                            
00019C94                            loc_16AFC:
00019C94 08E8 0007 002B             		bset	#7,$2B(a0)
00019C9A                            
00019C9A                            loc_16B02:
00019C9A 5328 002A                  		subq.b	#1,$2A(a0)
00019C9E 6B00                       		bmi.s	@loc_16B5E
00019CA0 4A68 0010                  			tst.w	obVelX(a0)
00019CA4 6700                       			beq.s	@notmoving
00019CA6 2428 0008                  			move.l	obX(a0),d2
00019CAA 2602                       			move.l	d2,d3
00019CAC 3028 0010                  		move.w	obVelX(a0),d0
00019CB0 0828 0000 0022             		btst	#0,obStatus(a0)
00019CB6 6700                       		beq.s	@noflip
00019CB8 4440                       		neg.w	d0
00019CBA                            
00019CBA                            	@noflip:
00019CBA 48C0                       		ext.l	d0
00019CBC E180                       		asl.l	#8,d0
00019CBE D480                       		add.l	d0,d2
00019CC0 2142 0008                  		move.l	d2,obX(a0)
00019CC4 4843                       			swap	d3
00019CC6 B668 0008                  			cmp.w	obX(a0),d3
00019CCA 6700                       			beq.s	@notmoving
00019CCC 4EB9 0001 7F74             			jsr	(ObjFloorDist).l
00019CD2 0C41 FFF8                  			cmpi.w	#-8,d1
00019CD6 6D00                       			blt.s	@loc_16B70
00019CD8 0C41 000C                  			cmpi.w	#$C,d1
00019CDC 6C00                       			bge.s	@loc_16B70
00019CDE D368 000C                  			add.w	d1,obY(a0)
00019CE2 7000                       		moveq	#0,d0
00019CE4 1028 003C                  		move.b	cat_parent(a0),d0
00019CE8 5228 003C                  		addq.b	#1,cat_parent(a0)
00019CEC 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019CF2 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019CF6                            
00019CF6                            	@notmoving:
00019CF6 4E75                       		rts	
00019CF8                            ; ===========================================================================
00019CF8                            
00019CF8                            @loc_16B5E:
00019CF8 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00019CFC 117C 0007 002A             		move.b	#7,$2A(a0)
00019D02 4268 0010                  			clr.w	obVelX(a0)
00019D06 4268 001C                  			clr.w	obAnim(a0)
00019D0A 4E75                       		rts	
00019D0C                            ; ===========================================================================
00019D0C                            
00019D0C                            @loc_16B70:
00019D0C 7000                       			moveq	#0,d0
00019D0E 1028 003C                  			move.b	cat_parent(a0),d0
00019D12 11BC 0080 002C             			move.b	#$80,$2C(a0,d0)
00019D18 4468 000A                  			neg.w	obX+2(a0)
00019D1C 6700                       			beq.s	@loc_1730A
00019D1E 0828 0000 0022             			btst	#0,obStatus(a0)
00019D24 6700                       			beq.s	@loc_1730A
00019D26 5368 0008                  			subq.w	#1,obX(a0)
00019D2A 5228 003C                  			addq.b	#1,cat_parent(a0)
00019D2E 7000                       			moveq	#0,d0
00019D30 1028 003C                  			move.b	cat_parent(a0),d0
00019D34 4230 002C                  			clr.b	$2C(a0,d0)
00019D38                            	@loc_1730A:
00019D38 0868 0000 0022             			bchg	#0,obStatus(a0)
00019D3E 1168 0022 0001             			move.b	obStatus(a0),obRender(a0)
00019D44 5228 003C                  		addq.b	#1,cat_parent(a0)
00019D48 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019D4E 4E75                       		rts	
00019D50                            ; ===========================================================================
00019D50                            
00019D50                            Cat_BodySeg2:	; Routine 6
00019D50 2268 003C                  		movea.l	cat_parent(a0),a1
00019D54 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019D5A 6A00                       		bpl.s	Cat_BodySeg1
00019D5C 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019D62 1028 0026                  		move.b	obAngle(a0),d0
00019D66 0240 007F                  		andi.w	#$7F,d0
00019D6A 5828 0026                  		addq.b	#4,obAngle(a0)
00019D6E 4A31 0004                  		tst.b	4(a1,d0.w)
00019D72 6A00                       		bpl.s	Cat_AniBody
00019D74 5828 0026                  		addq.b	#4,obAngle(a0)
00019D78                            
00019D78                            Cat_AniBody:
00019D78 1031 0000                  		move.b	(a1,d0.w),d0
00019D7C 5000                       		addq.b	#8,d0
00019D7E 1140 001A                  		move.b	d0,obFrame(a0)
00019D82                            
00019D82                            Cat_BodySeg1:	; Routine 4, 8
00019D82 2268 003C                  		movea.l	cat_parent(a0),a1
00019D86 4A28 0022                  		tst.b	obStatus(a0)
00019D8A 6B00 0000                  		bmi.w	loc_16C90
00019D8E 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019D94 1169 0025 0025             		move.b	ob2ndRout(a1),ob2ndRout(a0)
00019D9A 6700 0000                  		beq.w	loc_16C64
00019D9E 3169 001C 001C             		move.w	obAnim(a1),obAnim(a0)
00019DA4 3029 0010                  		move.w	obVelX(a1),d0
00019DA8 D068 001C                  			add.w	obAnim(a0),d0
00019DAC 3140 0010                  		move.w	d0,obVelX(a0)
00019DB0 2428 0008                  		move.l	obX(a0),d2
00019DB4 2602                       		move.l	d2,d3
00019DB6 3028 0010                  		move.w	obVelX(a0),d0
00019DBA 0828 0000 0022             		btst	#0,obStatus(a0)
00019DC0 6700                       		beq.s	loc_16C0C
00019DC2 4440                       		neg.w	d0
00019DC4                            
00019DC4                            loc_16C0C:
00019DC4 48C0                       		ext.l	d0
00019DC6 E180                       		asl.l	#8,d0
00019DC8 D480                       		add.l	d0,d2
00019DCA 2142 0008                  		move.l	d2,obX(a0)
00019DCE 4843                       		swap	d3
00019DD0 B668 0008                  		cmp.w	obX(a0),d3
00019DD4 6700                       		beq.s	loc_16C64
00019DD6 7000                       		moveq	#0,d0
00019DD8 1028 003C                  		move.b	cat_parent(a0),d0
00019DDC 1231 002C                  		move.b	$2C(a1,d0.w),d1
00019DE0 0C01 0080                  		cmpi.b	#$80,d1
00019DE4 6600                       		bne.s	loc_16C50
00019DE6 1181 002C                  			move.b	d1,$2C(a0,d0)
00019DEA 4468 000A                  			neg.w	obX+2(a0)
00019DEE 6700                       			beq.s	locj_173E4
00019DF0 0828 0000 0022             			btst	#0,obStatus(a0)
00019DF6 6700                       			beq.s	locj_173E4
00019DF8 0C68 FF40 0010             			cmpi.w	#-$C0,obVelX(a0)
00019DFE 6600                       			bne.s	locj_173E4
00019E00 5368 0008                  			subq.w	#1,obX(a0)
00019E04 5228 003C                  			addq.b	#1,cat_parent(a0)
00019E08 7000                       			moveq	#0,d0
00019E0A 1028 003C                  			move.b	cat_parent(a0),d0
00019E0E 4230 002C                  			clr.b	$2C(a0,d0)
00019E12                            	locj_173E4:
00019E12 0868 0000 0022             		bchg	#0,obStatus(a0)
00019E18 1168 0022 0001             		move.b	obStatus(a0),1(a0)
00019E1E 5228 003C                  		addq.b	#1,cat_parent(a0)
00019E22 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019E28 6000                       		bra.s	loc_16C64
00019E2A                            ; ===========================================================================
00019E2A                            
00019E2A                            loc_16C50:
00019E2A 4881                       		ext.w	d1
00019E2C D368 000C                  		add.w	d1,obY(a0)
00019E30 5228 003C                  		addq.b	#1,cat_parent(a0)
00019E34 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019E3A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019E3E                            
00019E3E                            loc_16C64:
00019E3E 0C29 000C 0024             		cmpi.b	#$C,obRoutine(a1)
00019E44 6700                       		beq.s	loc_16C90
00019E46 0C11 0027                  		cmpi.b	#id_ExplosionItem,0(a1)
00019E4A 6700                       		beq.s	loc_16C7C
00019E4C 0C29 000A 0024             		cmpi.b	#$A,obRoutine(a1)
00019E52 6600                       		bne.s	loc_16C82
00019E54                            
00019E54                            loc_16C7C:
00019E54 4229 0020                  		clr.b    $20(a1)
00019E58 117C 000A 0024             		move.b	#$A,obRoutine(a0)
00019E5E                            
00019E5E                            loc_16C82:
00019E5E 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
00019E64                            
00019E64                            ; ===========================================================================
00019E64 FE00 FE80 0180 0200        Cat_FragSpeed:	dc.w -$200, -$180, $180, $200
00019E6C                            ; ===========================================================================
00019E6C                            
00019E6C                            loc_16C90:
00019E6C 08E9 0007 0022             		bset	#7,obStatus(a1)
00019E72                            
00019E72                            loc_16C96:
00019E72 7000                       		moveq	#0,d0
00019E74 1028 0024                  		move.b	obRoutine(a0),d0
00019E78 303B 00E8                  		move.w	Cat_FragSpeed-2(pc,d0.w),d0
00019E7C 0828 0000 0022             		btst	#0,obStatus(a0)
00019E82 6700                       		beq.s	loc_16CAA
00019E84 4440                       		neg.w	d0
00019E86                            
00019E86                            loc_16CAA:
00019E86 3140 0010                  		move.w	d0,obVelX(a0)
00019E8A 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019E90 117C 000C 0024             		move.b	#$C,obRoutine(a0)
00019E96 0228 00F8 001A             		andi.b	#$F8,obFrame(a0)
00019E9C                            
00019E9C                            loc_16CC0:	; Routine $C
00019E9C 4EB9 0000 F46E             		jsr	(ObjectFall).l
00019EA2 4A68 0012                  		tst.w	obVelY(a0)
00019EA6 6B00                       		bmi.s	loc_16CE0
00019EA8 4EB9 0001 7F74             		jsr	(ObjFloorDist).l
00019EAE 4A41                       		tst.w	d1
00019EB0 6A00                       		bpl.s	loc_16CE0
00019EB2 D368 000C                  		add.w	d1,obY(a0)
00019EB6 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019EBC                            
00019EBC                            loc_16CE0:
00019EBC 4A28 0001                  		tst.b	obRender(a0)
00019EC0 6A00 FD80                  		bpl.w	Cat_ChkGone
00019EC4 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
00019EC4 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
00019ECA                            		include	"_anim\Caterkiller.asm"
00019ECA                            ; ---------------------------------------------------------------------------
00019ECA                            ; Animation script - Caterkiller enemy (uses non-standard format)
00019ECA                            ; ---------------------------------------------------------------------------
00019ECA 0000 0000 0000 0000 0000+  Ani_Cat:	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00019EDA 0101 0101 0101 0202 0202+  		dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00019EEA 0404 0404 0404 0505 0505+  		dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00019EFA 0606 0707 0707 0707 0707+  		dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00019F0A 0707 0707 0707 0707 0707+  		dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00019F1A 0606 0606 0606 0505 0505+  		dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00019F2A 0403 0303 0303 0202 0202+  		dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00019F3A 0101 0000 0000 0000 0000+  		dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00019F4A                            		even
00019F4A                            		even
00019F4A                            Map_Cat:	include	"_maps\Caterkiller.asm"
00019F4A                            ; ---------------------------------------------------------------------------
00019F4A                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00019F4A                            ; ---------------------------------------------------------------------------
00019F4A                            Map_Cat_internal:
00019F4A 0000                       		dc.w byte_16D9E-Map_Cat_internal
00019F4C 0000                       		dc.w byte_16DA4-Map_Cat_internal
00019F4E 0000                       		dc.w byte_16DAA-Map_Cat_internal
00019F50 0000                       		dc.w byte_16DB0-Map_Cat_internal
00019F52 0000                       		dc.w byte_16DB6-Map_Cat_internal
00019F54 0000                       		dc.w byte_16DBC-Map_Cat_internal
00019F56 0000                       		dc.w byte_16DC2-Map_Cat_internal
00019F58 0000                       		dc.w byte_16DC8-Map_Cat_internal
00019F5A 0000                       		dc.w byte_16DCE-Map_Cat_internal
00019F5C 0000                       		dc.w byte_16DD4-Map_Cat_internal
00019F5E 0000                       		dc.w byte_16DDA-Map_Cat_internal
00019F60 0000                       		dc.w byte_16DE0-Map_Cat_internal
00019F62 0000                       		dc.w byte_16DE6-Map_Cat_internal
00019F64 0000                       		dc.w byte_16DEC-Map_Cat_internal
00019F66 0000                       		dc.w byte_16DF2-Map_Cat_internal
00019F68 0000                       		dc.w byte_16DF8-Map_Cat_internal
00019F6A 0000                       		dc.w byte_16DFE-Map_Cat_internal
00019F6C 0000                       		dc.w byte_16E04-Map_Cat_internal
00019F6E 0000                       		dc.w byte_16E0A-Map_Cat_internal
00019F70 0000                       		dc.w byte_16E10-Map_Cat_internal
00019F72 0000                       		dc.w byte_16E16-Map_Cat_internal
00019F74 0000                       		dc.w byte_16E1C-Map_Cat_internal
00019F76 0000                       		dc.w byte_16E22-Map_Cat_internal
00019F78 0000                       		dc.w byte_16E28-Map_Cat_internal
00019F7A 01                         byte_16D9E:	dc.b 1
00019F7B F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00019F80 01                         byte_16DA4:	dc.b 1
00019F81 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00019F86 01                         byte_16DAA:	dc.b 1
00019F87 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00019F8C 01                         byte_16DB0:	dc.b 1
00019F8D EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00019F92 01                         byte_16DB6:	dc.b 1
00019F93 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00019F98 01                         byte_16DBC:	dc.b 1
00019F99 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00019F9E 01                         byte_16DC2:	dc.b 1
00019F9F EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00019FA4 01                         byte_16DC8:	dc.b 1
00019FA5 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00019FAA 01                         byte_16DCE:	dc.b 1
00019FAB F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00019FB0 01                         byte_16DD4:	dc.b 1
00019FB1 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00019FB6 01                         byte_16DDA:	dc.b 1
00019FB7 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00019FBC 01                         byte_16DE0:	dc.b 1
00019FBD F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00019FC2 01                         byte_16DE6:	dc.b 1
00019FC3 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00019FC8 01                         byte_16DEC:	dc.b 1
00019FC9 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00019FCE 01                         byte_16DF2:	dc.b 1
00019FCF F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00019FD4 01                         byte_16DF8:	dc.b 1
00019FD5 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00019FDA 01                         byte_16DFE:	dc.b 1
00019FDB F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00019FE0 01                         byte_16E04:	dc.b 1
00019FE1 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00019FE6 01                         byte_16E0A:	dc.b 1
00019FE7 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00019FEC 01                         byte_16E10:	dc.b 1
00019FED EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00019FF2 01                         byte_16E16:	dc.b 1
00019FF3 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00019FF8 01                         byte_16E1C:	dc.b 1
00019FF9 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00019FFE 01                         byte_16E22:	dc.b 1
00019FFF EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
0001A004 01                         byte_16E28:	dc.b 1
0001A005 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
0001A00A                            		even
0001A00A                            		even
0001A00A                            
0001A00A                            		include	"_incObj\79 Lamppost.asm"
0001A00A                            ; ---------------------------------------------------------------------------
0001A00A                            ; Object 79 - lamppost
0001A00A                            ; ---------------------------------------------------------------------------
0001A00A                            
0001A00A                            Lamppost:
0001A00A 7000                       		moveq	#0,d0
0001A00C 1028 0024                  		move.b	obRoutine(a0),d0
0001A010 323B 0000                  		move.w	Lamp_Index(pc,d0.w),d1
0001A014 4EBB 1000                  		jsr	Lamp_Index(pc,d1.w)
0001A018 4EF9 0001 155E             		jmp	(RememberState).l
0001A01E                            ; ===========================================================================
0001A01E 0000                       Lamp_Index:	dc.w Lamp_Main-Lamp_Index
0001A020 0000                       		dc.w Lamp_Blue-Lamp_Index
0001A022 0000                       		dc.w Lamp_Finish-Lamp_Index
0001A024 0000                       		dc.w Lamp_Twirl-Lamp_Index
0001A026                            
0001A026 =00000030                  lamp_origX:	equ $30		; original x-axis position
0001A026 =00000032                  lamp_origY:	equ $32		; original y-axis position
0001A026 =00000036                  lamp_time:	equ $36		; length of time to twirl the lamp
0001A026                            ; ===========================================================================
0001A026                            
0001A026                            Lamp_Main:	; Routine 0
0001A026 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A02A 217C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a0)
0001A032 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
0001A038 117C 0004 0001             		move.b	#4,obRender(a0)
0001A03E 117C 0008 0014             		move.b	#8,obActWid(a0)
0001A044 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001A04A 45F8 FC00                  		lea	(v_objstate).w,a2
0001A04E 7000                       		moveq	#0,d0
0001A050 1028 0023                  		move.b	obRespawnNo(a0),d0
0001A054 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001A05A 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001A060 6600                       		bne.s	@red
0001A062 1238 FE30                  		move.b	(v_lastlamp).w,d1
0001A066 0201 007F                  		andi.b	#$7F,d1
0001A06A 1428 0028                  		move.b	obSubtype(a0),d2 ; get lamppost number
0001A06E 0202 007F                  		andi.b	#$7F,d2
0001A072 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
0001A074 6500                       		bcs.s	Lamp_Blue	; if yes, branch
0001A076                            
0001A076                            @red:
0001A076 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001A07C 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
0001A082 117C 0003 001A             		move.b	#3,obFrame(a0)
0001A088 4E75                       		rts	
0001A08A                            
0001A08A                            ; ===========================================================================
0001A08A                            
0001A08A                            Lamp_Blue:	; Routine 2
0001A08A 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001A08E 6600 0000                  		bne.w	@donothing	; if yes, branch
0001A092 4A38 F7C8                  		tst.b	(f_lockmulti).w
0001A096 6B00 0000                  		bmi.w	@donothing
0001A09A 1238 FE30                  		move.b	(v_lastlamp).w,d1
0001A09E 0201 007F                  		andi.b	#$7F,d1
0001A0A2 1428 0028                  		move.b	obSubtype(a0),d2
0001A0A6 0202 007F                  		andi.b	#$7F,d2
0001A0AA B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
0001A0AC 6500                       		bcs.s	@chkhit		; if yes, branch
0001A0AE 45F8 FC00                  		lea	(v_objstate).w,a2
0001A0B2 7000                       		moveq	#0,d0
0001A0B4 1028 0023                  		move.b	obRespawnNo(a0),d0
0001A0B8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001A0BE 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001A0C4 117C 0003 001A             		move.b	#3,obFrame(a0)
0001A0CA 6000 0000                  		bra.w	@donothing
0001A0CE                            ; ===========================================================================
0001A0CE                            
0001A0CE                            @chkhit:
0001A0CE 3038 D008                  		move.w	(v_player+obX).w,d0
0001A0D2 9068 0008                  		sub.w	obX(a0),d0
0001A0D6 5040                       		addq.w	#8,d0
0001A0D8 0C40 0010                  		cmpi.w	#$10,d0
0001A0DC 6400 0000                  		bcc.w	@donothing
0001A0E0 3038 D00C                  		move.w	(v_player+obY).w,d0
0001A0E4 9068 000C                  		sub.w	obY(a0),d0
0001A0E8 0640 0040                  		addi.w	#$40,d0
0001A0EC 0C40 0068                  		cmpi.w	#$68,d0
0001A0F0 6400                       		bcc.s	@donothing
0001A0F2                            
0001A0FC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A100 4EB9 0000 FA54             		jsr	(FindFreeObj).l
0001A106 6600                       		bne.s	@fail
0001A108 12BC 0079                  		move.b	#id_Lamppost,0(a1)	; load twirling	lamp object
0001A10C 137C 0006 0024             		move.b	#6,obRoutine(a1) ; goto Lamp_Twirl next
0001A112 3368 0008 0030             		move.w	obX(a0),lamp_origX(a1)
0001A118 3368 000C 0032             		move.w	obY(a0),lamp_origY(a1)
0001A11E 0469 0018 0032             		subi.w	#$18,lamp_origY(a1)
0001A124 237C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a1)
0001A12C 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
0001A132 137C 0004 0001             		move.b	#4,obRender(a1)
0001A138 137C 0008 0014             		move.b	#8,obActWid(a1)
0001A13E 337C 0200 0018             		move.w	#$200,obPriority(a1)
0001A144 137C 0002 001A             		move.b	#2,obFrame(a1)	; use "ball only" frame
0001A14A 337C 0020 0036             		move.w	#$20,lamp_time(a1)
0001A150                            
0001A150                            	@fail:
0001A150 117C 0001 001A             		move.b	#1,obFrame(a0)	; use "post only" frame
0001A156 6100 0000                  		bsr.w	Lamp_StoreInfo
0001A15A 45F8 FC00                  		lea	(v_objstate).w,a2
0001A15E 7000                       		moveq	#0,d0
0001A160 1028 0023                  		move.b	obRespawnNo(a0),d0
0001A164 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001A16A                            
0001A16A                            	@donothing:
0001A16A 4E75                       		rts	
0001A16C                            ; ===========================================================================
0001A16C                            
0001A16C                            Lamp_Finish:	; Routine 4	
0001A16C 4E75                       		rts	
0001A16E                            ; ===========================================================================
0001A16E                            
0001A16E                            Lamp_Twirl:	; Routine 6
0001A16E 5368 0036                  		subq.w	#1,lamp_time(a0) ; decrement timer
0001A172 6A00                       		bpl.s	@continue	; if time remains, keep twirling
0001A174 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
0001A17A                            
0001A17A                            	@continue:
0001A17A 1028 0026                  		move.b	obAngle(a0),d0
0001A17E 0428 0010 0026             		subi.b	#$10,obAngle(a0)
0001A184 0400 0040                  		subi.b	#$40,d0
0001A188 4EB9 0000 3BA2             		jsr	(CalcSine).l
0001A18E C3FC 0C00                  		muls.w	#$C00,d1
0001A192 4841                       		swap	d1
0001A194 D268 0030                  		add.w	lamp_origX(a0),d1
0001A198 3141 0008                  		move.w	d1,obX(a0)
0001A19C C1FC 0C00                  		muls.w	#$C00,d0
0001A1A0 4840                       		swap	d0
0001A1A2 D068 0032                  		add.w	lamp_origY(a0),d0
0001A1A6 3140 000C                  		move.w	d0,obY(a0)
0001A1AA 4E75                       		rts	
0001A1AC                            ; ===========================================================================
0001A1AC                            ; ---------------------------------------------------------------------------
0001A1AC                            ; Subroutine to	store information when you hit a lamppost
0001A1AC                            ; ---------------------------------------------------------------------------
0001A1AC                            
0001A1AC                            Lamp_StoreInfo:
0001A1AC 11E8 0028 FE30             		move.b	obSubtype(a0),(v_lastlamp).w 	; lamppost number
0001A1B2 11F8 FE30 FE31             		move.b	(v_lastlamp).w,($FFFFFE31).w
0001A1B8 31E8 0008 FE32             		move.w	obX(a0),($FFFFFE32).w		; x-position
0001A1BE 31E8 000C FE34             		move.w	obY(a0),($FFFFFE34).w		; y-position
0001A1C4 31F8 FE20 FE36             		move.w	(v_rings).w,($FFFFFE36).w 	; rings
0001A1CA 11F8 FE1B FE54             		move.b	(v_lifecount).w,($FFFFFE54).w 	; lives
0001A1D0 21F8 FE22 FE38             		move.l	(v_time).w,($FFFFFE38).w 	; time
0001A1D6 11F8 F742 FE3C             		move.b	(v_dle_routine).w,($FFFFFE3C).w ; routine counter for dynamic level mod
0001A1DC 31F8 F72E FE3E             		move.w	(v_limitbtm2).w,($FFFFFE3E).w 	; lower y-boundary of level
0001A1E2 31F8 F700 FE40             		move.w	(v_screenposx).w,($FFFFFE40).w 	; screen x-position
0001A1E8 31F8 F704 FE42             		move.w	(v_screenposy).w,($FFFFFE42).w 	; screen y-position
0001A1EE 31F8 F708 FE44             		move.w	(v_bgscreenposx).w,($FFFFFE44).w ; bg position
0001A1F4 31F8 F70C FE46             		move.w	(v_bgscreenposy).w,($FFFFFE46).w 	; bg position
0001A1FA 31F8 F710 FE48             		move.w	(v_bg2screenposx).w,($FFFFFE48).w 	; bg position
0001A200 31F8 F714 FE4A             		move.w	(v_bg2screenposy).w,($FFFFFE4A).w 	; bg position
0001A206 31F8 F718 FE4C             		move.w	(v_bg3screenposx).w,($FFFFFE4C).w 	; bg position
0001A20C 31F8 F71C FE4E             		move.w	(v_bg3screenposy).w,($FFFFFE4E).w 	; bg position
0001A212 31F8 F648 FE50             		move.w	(v_waterpos2).w,($FFFFFE50).w 	; water height
0001A218 11F8 F64D FE52             		move.b	(v_wtr_routine).w,($FFFFFE52).w ; rountine counter for water
0001A21E 11F8 F64E FE53             		move.b	(f_wtr_state).w,($FFFFFE53).w 	; water direction
0001A224 11F8 F5C3 FE54             		move.b	(f_emeraldm).w,($FFFFFE54).w 	; emerald monitor
0001A22A 4E75                       		rts	
0001A22C                            
0001A22C                            ; ---------------------------------------------------------------------------
0001A22C                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001A22C                            ; ---------------------------------------------------------------------------
0001A22C                            
0001A22C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A22C                            
0001A22C                            
0001A22C                            Lamp_LoadInfo:
0001A22C 11F8 FE31 FE30             		move.b	($FFFFFE31).w,(v_lastlamp).w
0001A232 31F8 FE32 D008             		move.w	($FFFFFE32).w,(v_player+obX).w
0001A238 31F8 FE34 D00C             		move.w	($FFFFFE34).w,(v_player+obY).w
0001A23E 31F8 FE36 FE20             		move.w	($FFFFFE36).w,(v_rings).w
0001A244 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,(v_lifecount).w
0001A24A 4278 FE20                  		clr.w	(v_rings).w
0001A24E 4238 FE1B                  		clr.b	(v_lifecount).w
0001A252 21F8 FE38 FE22             		move.l	($FFFFFE38).w,(v_time).w
0001A258 11FC 003B FE25             		move.b	#59,(v_timecent).w
0001A25E 5338 FE24                  		subq.b	#1,(v_timesec).w
0001A262 11F8 FE3C F742             		move.b	($FFFFFE3C).w,(v_dle_routine).w
0001A268 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001A26E 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,(v_limitbtm2).w
0001A274 31F8 FE3E F726             		move.w	($FFFFFE3E).w,(v_limitbtm1).w
0001A27A 31F8 FE40 F700             		move.w	($FFFFFE40).w,(v_screenposx).w
0001A280 31F8 FE42 F704             		move.w	($FFFFFE42).w,(v_screenposy).w
0001A286 31F8 FE44 F708             		move.w	($FFFFFE44).w,(v_bgscreenposx).w
0001A28C 31F8 FE46 F70C             		move.w	($FFFFFE46).w,(v_bgscreenposy).w
0001A292 31F8 FE48 F710             		move.w	($FFFFFE48).w,(v_bg2screenposx).w
0001A298 31F8 FE4A F714             		move.w	($FFFFFE4A).w,(v_bg2screenposy).w
0001A29E 31F8 FE4C F718             		move.w	($FFFFFE4C).w,(v_bg3screenposx).w
0001A2A4 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,(v_bg3screenposy).w
0001A2AA 11F8 FE54 F5C3             		move.b	($FFFFFE54).w,(f_emeraldm).w	;emerald monitor count
0001A2B0 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w	; is this Labyrinth Zone?
0001A2B6 6600                       		bne.s	@notlabyrinth	; if not, branch
0001A2B8                            
0001A2B8 31F8 FE50 F648             		move.w	($FFFFFE50).w,(v_waterpos2).w
0001A2BE 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001A2C4 11F8 FE53 F64E             		move.b	($FFFFFE53).w,(f_wtr_state).w
0001A2CA                            
0001A2CA                            	@notlabyrinth:
0001A2CA 4A38 FE30                  		tst.b	(v_lastlamp).w
0001A2CE 6A00                       		bpl.s	locret_170F6
0001A2D0 3038 FE32                  		move.w	($FFFFFE32).w,d0
0001A2D4 0440 00A0                  		subi.w	#$A0,d0
0001A2D8 31C0 F728                  		move.w	d0,(v_limitleft2).w
0001A2DC                            
0001A2DC                            locret_170F6:
0001A2DC 4E75                       		rts	
0001A2DC 4E75                       		rts	
0001A2DE                            Map_Lamp:	include	"_maps\Lamppost.asm"
0001A2DE                            ; --------------------------------------------------------------------------------
0001A2DE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001A2DE                            ; --------------------------------------------------------------------------------
0001A2DE                            
0001A2DE                            SME_JfaKr:	
0001A2DE 0000 0000                  		dc.w SME_JfaKr_A-SME_JfaKr, SME_JfaKr_3D-SME_JfaKr	
0001A2E2 0000 0000                  		dc.w SME_JfaKr_66-SME_JfaKr, SME_JfaKr_71-SME_JfaKr	
0001A2E6 0000                       		dc.w SME_JfaKr_A4-SME_JfaKr	
0001A2E8 0A                         SME_JfaKr_A:	dc.b $A	
0001A2E9 E401 0000 F8               		dc.b $E4, 1, 0, 0, $F8	
0001A2EE E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A2F3 D401 0006 F8               		dc.b $D4, 1, 0, 6, $F8	
0001A2F8 D401 0806 00               		dc.b $D4, 1, 8, 6, 0	
0001A2FD F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A302 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A307 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A30C 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A311 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A316 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A31B 08                         SME_JfaKr_3D:	dc.b 8	
0001A31C E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A321 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A326 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A32B F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A330 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A335 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A33A 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A33F 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A344 02                         SME_JfaKr_66:	dc.b 2	
0001A345 F801 0008 F8               		dc.b $F8, 1, 0, 8, $F8	
0001A34A F801 0808 00               		dc.b $F8, 1, 8, 8, 0	
0001A34F 0A                         SME_JfaKr_71:	dc.b $A	
0001A350 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A355 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A35A F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A35F F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A364 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A369 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A36E 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A373 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A378 D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A37D D401 0808 00               		dc.b $D4, 1, 8, 8, 0	
0001A382 0A                         SME_JfaKr_A4:	dc.b $A	
0001A383 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A388 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A38D F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A392 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A397 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A39C 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A3A1 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A3A6 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A3AB D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A3B0 D401 2808 00               		dc.b $D4, 1, $28, 8, 0	
0001A3B6 00                         		even
0001A3B6 00                         		even
0001A3B6                            		include	"_incObj\7D Hidden Bonuses.asm"
0001A3B6                            ; ---------------------------------------------------------------------------
0001A3B6                            ; Object 7D - hidden points at the end of a level
0001A3B6                            ; ---------------------------------------------------------------------------
0001A3B6                            
0001A3B6                            HiddenBonus:
0001A3B6 7000                       		moveq	#0,d0
0001A3B8 1028 0024                  		move.b	obRoutine(a0),d0
0001A3BC 323B 0000                  		move.w	Bonus_Index(pc,d0.w),d1
0001A3C0 4EFB 1000                  		jmp	Bonus_Index(pc,d1.w)
0001A3C4                            ; ===========================================================================
0001A3C4 0000                       Bonus_Index:	dc.w Bonus_Main-Bonus_Index
0001A3C6 0000                       		dc.w Bonus_Display-Bonus_Index
0001A3C8                            
0001A3C8 =00000030                  bonus_timelen:	equ $30		; length of time to display bonus sprites
0001A3C8                            ; ===========================================================================
0001A3C8                            
0001A3C8                            Bonus_Main:	; Routine 0
0001A3C8 7410                       		moveq	#$10,d2
0001A3CA 3602                       		move.w	d2,d3
0001A3CC D643                       		add.w	d3,d3
0001A3CE 43F8 D000                  		lea	(v_player).w,a1
0001A3D2 3029 0008                  		move.w	obX(a1),d0
0001A3D6 9068 0008                  		sub.w	obX(a0),d0
0001A3DA D042                       		add.w	d2,d0
0001A3DC B043                       		cmp.w	d3,d0
0001A3DE 6400                       		bcc.s	bonu_chkdel
0001A3E0 3229 000C                  		move.w	obY(a1),d1
0001A3E4 9268 000C                  		sub.w	obY(a0),d1
0001A3E8 D242                       		add.w	d2,d1
0001A3EA B243                       		cmp.w	d3,d1
0001A3EC 6400                       		bcc.s	bonu_chkdel
0001A3EE 4A78 FE08                  		tst.w	(v_debuguse).w
0001A3F2 6600                       		bne.s	bonu_chkdel
0001A3F4 4A38 F7CD                  		tst.b	(f_bigring).w
0001A3F8 6600                       		bne.s	bonu_chkdel
0001A3FA 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A3FE 217C 0000 0000 0004        		move.l	#Map_Bonus,obMap(a0)
0001A406 317C 84B6 0002             		move.w	#$84B6,obGfx(a0)
0001A40C 0028 0004 0001             		ori.b	#4,obRender(a0)
0001A412 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A418 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001A41E 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0001A424 317C 0077 0030             		move.w	#119,bonus_timelen(a0) ; set display time to 2 seconds
0001A434 7000                       		moveq	#0,d0
0001A436 1028 0028                  		move.b	obSubtype(a0),d0
0001A43A D040                       		add.w	d0,d0
0001A43C 303B 0000                  		move.w	obj7d_points(pc,d0.w),d0 ; load bonus points array
0001A440 4EB9 0000 0000             		jsr	(AddPoints).l
0001A446                            
0001A446                            bonu_chkdel:
0001A462 4E75                       		rts	
0001A464                            
0001A464                            	@delete:
0001A464 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001A46A                            
0001A46A                            ; ===========================================================================
0001A46A 0000                       obj7d_points:	dc.w 0			; Bonus	points array
0001A46C 03E8                       		dc.w 1000
0001A46E 0064                       		dc.w 100
0001A470 000A                       		dc.w 10
0001A472                            ; ===========================================================================
0001A472                            
0001A472                            Bonus_Display:	; Routine 2
0001A472 5368 0030                  		subq.w	#1,bonus_timelen(a0) ; decrement display time
0001A476 6B00                       		bmi.s	Bonus_Display_Delete		; if time is zero, branch
0001A494 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001A49A                            
0001A49A                            Bonus_Display_Delete:	
0001A49A 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001A49A 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001A4A0                            Map_Bonus:	include	"_maps\Hidden Bonuses.asm"
0001A4A0                            ; ---------------------------------------------------------------------------
0001A4A0                            ; Sprite mappings - hidden points at the end of	a level
0001A4A0                            ; ---------------------------------------------------------------------------
0001A4A0                            Map_Bonus_internal:
0001A4A0 0000                       		dc.w @blank-Map_Bonus_internal
0001A4A2 0000                       		dc.w @10000-Map_Bonus_internal
0001A4A4 0000                       		dc.w @1000-Map_Bonus_internal
0001A4A6 0000                       		dc.w @100-Map_Bonus_internal
0001A4A8 00                         @blank:		dc.b 0
0001A4A9 01                         @10000:		dc.b 1
0001A4AA F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001A4AF 01                         @1000:		dc.b 1
0001A4B0 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001A4B5 01                         @100:		dc.b 1
0001A4B6 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001A4BC 00                         		even
0001A4BC 00                         		even
0001A4BC                            
0001A4BC                            		include	"_incObj\8A Credits.asm"
0001A4BC                            ; ---------------------------------------------------------------------------
0001A4BC                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001A4BC                            ; ---------------------------------------------------------------------------
0001A4BC                            
0001A4BC                            CreditsText:
0001A4BC 7000                       		moveq	#0,d0
0001A4BE 1028 0024                  		move.b	obRoutine(a0),d0
0001A4C2 323B 0000                  		move.w	Cred_Index(pc,d0.w),d1
0001A4C6 4EFB 1000                  		jmp	Cred_Index(pc,d1.w)
0001A4CA                            ; ===========================================================================
0001A4CA 0000                       Cred_Index:	dc.w Cred_Main-Cred_Index
0001A4CC 0000                       		dc.w Cred_Display-Cred_Index
0001A4CE                            ; ===========================================================================
0001A4CE                            
0001A4CE                            Cred_Main:	; Routine 0
0001A4CE 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A4D2 317C 0120 0008             		move.w	#$120,obX(a0)
0001A4D8 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0001A4DE 217C 0000 0000 0004        		move.l	#Map_Cred,obMap(a0)
0001A4E6 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0001A4EC 3038 FFF4                  		move.w	(v_creditsnum).w,d0 ; load credits index number
0001A4F0 1140 001A                  		move.b	d0,obFrame(a0)	; display appropriate sprite
0001A4F4 117C 0000 0001             		move.b	#0,obRender(a0)
0001A4FA 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A500                            
0001A500 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w ; is the mode #4 (title screen)?
0001A506 6600                       		bne.s	Cred_Display	; if not, branch
0001A508                            
0001A508 317C 00A6 0002             		move.w	#$A6,obGfx(a0)
0001A50E 117C 000A 001A             		move.b	#$A,obFrame(a0)	; display "SONIC TEAM PRESENTS"
0001A514 4A38 FFE3                  		tst.b	(f_creditscheat).w ; is hidden credits cheat on?
0001A518 6700                       		beq.s	Cred_Display	; if not, branch
0001A51A 0C38 0072 F604             		cmpi.b	#btnABC+btnDn,(v_jpadhold1).w ; is A+B+C+Down being pressed? ($72)
0001A520 6600                       		bne.s	Cred_Display	; if not, branch
0001A522 31FC 0EEE FBC0             		move.w	#cWhite,(v_pal_dry_dup+$40).w ; 3rd palette, 1st entry = white
0001A528 31FC 0880 FBC2             		move.w	#$880,(v_pal_dry_dup+$42).w ; 3rd palette, 2nd entry = cyan
0001A52E 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001A534                            ; ===========================================================================
0001A534                            
0001A534                            Cred_Display:	; Routine 2
0001A534 4EF9 0000 F4BA             		jmp	DisplaySprite
0001A534 4EF9 0000 F4BA             		jmp	DisplaySprite
0001A53A                            Map_Cred:	include	"_maps\Credits.asm"
0001A53A                            ; ---------------------------------------------------------------------------
0001A53A                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001A53A                            ; ---------------------------------------------------------------------------
0001A53A                            Map_Cred_internal:
0001A53A 0000                       		dc.w @staff-Map_Cred_internal
0001A53C 0000                       		dc.w @gameplan-Map_Cred_internal
0001A53E 0000                       		dc.w @program-Map_Cred_internal
0001A540 0000                       		dc.w @character-Map_Cred_internal
0001A542 0000                       		dc.w @design-Map_Cred_internal
0001A544 0000                       		dc.w @soundproduce-Map_Cred_internal
0001A546 0000                       		dc.w @soundprogram-Map_Cred_internal
0001A548 0000                       		dc.w @thanks-Map_Cred_internal
0001A54A 0000                       		dc.w @presentedby-Map_Cred_internal
0001A54C 0000                       		dc.w @tryagain-Map_Cred_internal
0001A54E 0000                       		dc.w @sonicteam-Map_Cred_internal
0001A550 0E                         @staff:		dc.b $E			 ; SONIC TEAM STAFF
0001A551 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
0001A556 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001A55B F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
0001A560 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
0001A565 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001A56A F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001A56F F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
0001A574 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001A579 F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001A57E F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
0001A583 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001A588 F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001A58D F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
0001A592 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0001A597 0E                         @gameplan:	dc.b $E	;  GAME PLAN CAROL YAS | GAME PLAN SORRA    
0001A598 9005 0000 90               		dc.b $90, 5, 0, 0, $90		; G
0001A59D 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
0001A5A2 9009 0008 B0               		dc.b $90, 9, 0, 8, $B0		; M
0001A5A7 9005 000E C4               		dc.b $90, 5, 0, $0E, $C4	; E
0001A5AC 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A5B1 9005 0012 E4               		dc.b $90, 5, 0, $12, $E4	; P
0001A5B6 9005 0016 F4               		dc.b $90, 5, 0, $16, $F4	; L
0001A5BB 9005 0004 04               		dc.b $90, 5, 0, 4, $4		; A
0001A5C0 9005 001A 14               		dc.b $90, 5, 0, $1A, $14	; N
0001A5C5                            
0001A5C5 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A5CA B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A5CF B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A5D4 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A5D9 B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A5DE 1B                         @program:	dc.b $1B	;  CHARACTER DESIGN BIGISLAND | PROGRAM ANGELKOR INVISIBLE SUN  
0001A5DF 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A5E4 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A5E9 9005 0026 B0               		dc.b $90, 5, 0, $26, $B0	; O
0001A5EE 9005 0000 C0               		dc.b $90, 5, 0, 0, $C0		; G
0001A5F3 9005 0022 D0               		dc.b $90, 5, 0, $22, $D0	; R
0001A5F8 9005 0004 E0               		dc.b $90, 5, 0, 4, $E0		; A
0001A5FD 9009 0008 F0               		dc.b $90, 9, 0, 8, $F0		; M
0001A602                            
0001A602 B805 0004 C0               		dc.b $B8, 5, 0, 4, $C0		; A
0001A607 B805 001A D0               		dc.b $B8, 5, 0, $1A, $D0	; N
0001A60C B805 0000 E0               		dc.b $B8, 5, 0, 0, $E0		; G
0001A611 B805 000E F0               		dc.b $B8, 5, 0, $0E, $F0	; E
0001A616 B805 0016 00               		dc.b $B8, 5, 0, $16, $0	; L
0001A61B B805 0058 10               		dc.b $B8, 5, 0, $58, $10	; K
0001A620 B805 0026 20               		dc.b $B8, 5, 0, $26, $20	; O
0001A625 B805 0022 30               		dc.b $B8, 5, 0, $22, $30	; R
0001A62A                            
0001A62A D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	; I
0001A62F D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	; N
0001A634                            
0001A634 D801 0046 E8               		dc.b $D8, 1, 0, $46, $E8	; I
0001A639 D805 002E F0               		dc.b $D8, 5, 0, $2E, $F0	; S
0001A63E D801 0046 00               		dc.b $D8, 1, 0, $46, $0	; I
0001A643 D805 0048 08               		dc.b $D8, 5, 0, $48, $8	; B
0001A648 D805 0016 18               		dc.b $D8, 5, 0, $16, $18	; L
0001A64D D805 000E 28               		dc.b $D8, 5, 0, $0E, $28	; E
0001A652                            
0001A652 F805 002E C0               		dc.b $F8, 5, 0, $2E, $C0	; S
0001A657 F805 0032 D0               		dc.b $F8, 5, 0, $32, $D0	; U
0001A65C F805 001A E0               		dc.b $F8, 5, 0, $1A, $E0	; N
0001A661 08                         @character:	dc.b $8	;  CHARACTER DESIGN BIGISLAND | ART SORRA    
0001A662 9005 0004 90               		dc.b $90, 5, 0, 4, $90		; A
0001A667 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A66C 9005 003E B0               		dc.b $90, 5, 0, $3E, $B0	; T
0001A671                            
0001A671 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A676 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A67B B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A680 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A685 B805 0004 00               		dc.b $B8, 5, 0, 4, $0
0001A68A 0B                         @design:	dc.b $B	;  DESIGN JINYA PHENIX RIE | DESIGN SORRA    
0001A68B 9005 0042 90               		dc.b $90, 5, 0, $42, $90	; D
0001A690 9005 000E A0               		dc.b $90, 5, 0, $0E, $A0	; E
0001A695 9005 002E B0               		dc.b $90, 5, 0, $2E, $B0	; S
0001A69A 9001 0046 C0               		dc.b $90, 1, 0, $46, $C0	; I
0001A69F 9005 0000 C8               		dc.b $90, 5, 0, 0, $C8		; G
0001A6A4 9005 001A D8               		dc.b $90, 5, 0, $1A, $D8	; N
0001A6A9                            
0001A6A9 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A6AE B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A6B3 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A6B8 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A6BD B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A6C2 1C                         @soundproduce:	dc.b $1C	;  SOUND PRODUCE MASATO NAKAMURA | SOUND PORT MR JOKER PRODUCTION   
0001A6C3 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A6C8 9005 0026 A0               		dc.b $90, 5, 0, $26, $A0	; O
0001A6CD 9005 0032 B0               		dc.b $90, 5, 0, $32, $B0	; U
0001A6D2 9005 001A C0               		dc.b $90, 5, 0, $1A, $C0	; N
0001A6D7 9005 0042 D0               		dc.b $90, 5, 0, $42, $D0	; D
0001A6DC 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A6E1 9005 0012 F0               		dc.b $90, 5, 0, $12, $F0	; P
0001A6E6 9005 0026 00               		dc.b $90, 5, 0, $26, $0	; O
0001A6EB 9005 0022 10               		dc.b $90, 5, 0, $22, $10	; R
0001A6F0 9005 003E 20               		dc.b $90, 5, 0, $3E, $20	; T
0001A6F5                            
0001A6F5 B809 0008 C0               		dc.b $B8, 9, 0, 8, $C0		; M
0001A6FA B805 0022 D4               		dc.b $B8, 5, 0, $22, $D4	; R
0001A6FF B800 0060 0C               		dc.b $B8, 0, 0, $60, $C    ;Space
0001A704 B805 004C F4               		dc.b $B8, 5, 0, $4C, $F4	; J
0001A709 B805 0026 04               		dc.b $B8, 5, 0, $26, $4	; O
0001A70E B805 0058 14               		dc.b $B8, 5, 0, $58, $14	; K
0001A713 B805 000E 24               		dc.b $B8, 5, 0, $0E, $24	; E
0001A718 B805 0022 34               		dc.b $B8, 5, 0, $22, $34	; R
0001A71D                            
0001A71D D805 0012 C0               		dc.b $D8, 5, 0, $12, $C0	; P
0001A722 D805 0022 D0               		dc.b $D8, 5, 0, $22, $D0	; R
0001A727 D805 0026 E0               		dc.b $D8, 5, 0, $26, $E0	; O
0001A72C D805 0042 F0               		dc.b $D8, 5, 0, $42, $F0	; D
0001A731 D805 0032 00               		dc.b $D8, 5, 0, $32, $0	; U
0001A736 D805 001E 10               		dc.b $D8, 5, 0, $1E, $10	; C
0001A73B D805 003E 20               		dc.b $D8, 5, 0, $3E, $20	; T
0001A740 D801 0046 30               		dc.b $D8, 1, 0, $46, $30	; I
0001A745 D805 0026 38               		dc.b $D8, 5, 0, $26, $38	; O
0001A74A D805 001A 48               		dc.b $D8, 5, 0, $1A, $48	; N
0001A74F 17                         @soundprogram:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001A750 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
0001A755 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0001A75A D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001A75F D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
0001A764 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0001A769 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001A76E D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
0001A773 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
0001A778 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001A77D D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
0001A782 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
0001A787 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001A78C 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
0001A791 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001A796 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001A79B 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
0001A7A0 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
0001A7A5 0005 0004 14               		dc.b 0,	5, 0, 4, $14
0001A7AA 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
0001A7AF 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
0001A7B4 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
0001A7B9 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
0001A7BE 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
0001A7C3 11                         @thanks:	dc.b $11	;  SPECIAL THANKS FUJIO MINEGISHI PAPA | SPECIAL  THANKS YOU   
0001A7C4 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A7C9 9005 0012 A0               		dc.b $90, 5, 0, $12, $A0	; P
0001A7CE 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A7D3 9005 001E C0               		dc.b $90, 5, 0, $1E, $C0	; C
0001A7D8 9001 0046 D0               		dc.b $90, 1, 0, $46, $D0	; I
0001A7DD 9005 0004 D8               		dc.b $90, 5, 0, 4, $D8		; A
0001A7E2 9005 0016 E8               		dc.b $90, 5, 0, $16, $E8	; L
0001A7E7 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A7EC                            
0001A7EC B805 003E C0               		dc.b $B8, 5, 0, $3E, $C0	; T
0001A7F1 B805 003A D0               		dc.b $B8, 5, 0, $3A, $D0	; H
0001A7F6 B805 0004 E0               		dc.b $B8, 5, 0, 4, $E0		; A
0001A7FB B805 001A F0               		dc.b $B8, 5, 0, $1A, $F0	; N
0001A800 B805 0058 00               		dc.b $B8, 5, 0, $58, $0	; K
0001A805 B805 002E 10               		dc.b $B8, 5, 0, $2E, $10	; S
0001A80A                            
0001A80A D805 002A C0               		dc.b $D8, 5, 0, $2A, $C0	; Y
0001A80F D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A814 D805 0032 E0               		dc.b $D8, 5, 0, $32, $E0	; U
0001A819 10                         @presentedby:	dc.b $10	;  PRESENTED BY SEGA | PRESENTED BY SORRA   
0001A81A 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A81F 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A824 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A829 9005 002E C0               		dc.b $90, 5, 0, $2E, $C0	; S
0001A82E 9005 000E D0               		dc.b $90, 5, 0, $0E, $D0	; E
0001A833 9005 001A E0               		dc.b $90, 5, 0, $1A, $E0	; N
0001A838 9005 003E F0               		dc.b $90, 5, 0, $3E, $F0	; T
0001A83D 9005 000E 00               		dc.b $90, 5, 0, $0E, $0	; E
0001A842 9005 0042 10               		dc.b $90, 5, 0, $42, $10	; D
0001A847                            
0001A847 B805 0048 C0               		dc.b $B8, 5, 0, $48, $C0	; B
0001A84C B805 002A D0               		dc.b $B8, 5, 0, $2A, $D0	; Y
0001A851                            
0001A851 D805 002E C0               		dc.b $D8, 5, 0, $2E, $C0	; S
0001A856 D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A85B D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
0001A860 D805 0022 F0               		dc.b $D8, 5, 0, $22, $F0	; R
0001A865 D805 0004 00               		dc.b $D8, 5, 0, 4, $0		; A
0001A86A 08                         @tryagain:	dc.b 8			 ; TRY AGAIN
0001A86B 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
0001A870 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
0001A875 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001A87A 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0001A87F 3005 0000 08               		dc.b $30, 5, 0,	0, 8
0001A884 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001A889 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
0001A88E 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
0001A893 0E                         @sonicteam:	dc.b $E	;  SONIC TEAM PRESENTS | SORRA PRESENTS
0001A894 E805 002E D0               		dc.b $E8, 5, 0, $2E, $D0	; S
0001A899 E805 0026 E0               		dc.b $E8, 5, 0, $26, $E0	; O
0001A89E E805 0022 F0               		dc.b $E8, 5, 0, $22, $F0	; R
0001A8A3 E805 0022 00               		dc.b $E8, 5, 0, $22, $0	; R
0001A8A8 E805 0004 10               		dc.b $E8, 5, 0, 4, $10		; A
0001A8AD E800 0060 0C               		dc.b $E8, 0, 0, $60, $C   	 ; Space
0001A8B2                            
0001A8B2 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0	; P
0001A8B7 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0	; R
0001A8BC 0005 000E E0               		dc.b 0,	5, 0, $E, $E0	; E
0001A8C1 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0	; S
0001A8C6 0005 000E 00               		dc.b 0,	5, 0, $E, 0	; E
0001A8CB 0005 001A 10               		dc.b 0,	5, 0, $1A, $10	; N
0001A8D0 0005 003E 20               		dc.b 0,	5, 0, $3E, $20	; T
0001A8D5 0005 002E 30               		dc.b 0,	5, 0, $2E, $30	; S
0001A8DA                            		even
0001A8DA                            		even
0001A8DA                            
0001A8DA                            		include	"_incObj\3D Boss - Green Hill (part 1).asm"
0001A8DA                            ; ---------------------------------------------------------------------------
0001A8DA                            ; Object 3D - Eggman (GHZ)
0001A8DA                            ; ---------------------------------------------------------------------------
0001A8DA                            
0001A8DA                            BossGreenHill:
0001A8DA 7000                       		moveq	#0,d0
0001A8DC 1028 0024                  		move.b	obRoutine(a0),d0
0001A8E0 323B 0000                  		move.w	BGHZ_Index(pc,d0.w),d1
0001A8E4 4EFB 1000                  		jmp	BGHZ_Index(pc,d1.w)
0001A8E8                            ; ===========================================================================
0001A8E8 0000                       BGHZ_Index:	dc.w BGHZ_Main-BGHZ_Index
0001A8EA 0000                       		dc.w BGHZ_ShipMain-BGHZ_Index
0001A8EC 0000                       		dc.w BGHZ_FaceMain-BGHZ_Index
0001A8EE 0000                       		dc.w BGHZ_FlameMain-BGHZ_Index
0001A8F0                            
0001A8F0 0200                       BGHZ_ObjData:	dc.b 2,	0		; routine counter, animation
0001A8F2 0401                       		dc.b 4,	1
0001A8F4 0607                       		dc.b 6,	7
0001A8F6                            ; ===========================================================================
0001A8F6                            
0001A8F6                            BGHZ_Main:	; Routine 0
0001A8F6 45F9 0001 A8F0             		lea	(BGHZ_ObjData).l,a2
0001A8FC 2248                       		movea.l	a0,a1
0001A8FE 7202                       		moveq	#2,d1
0001A900 6000                       		bra.s	BGHZ_LoadBoss
0001A902                            ; ===========================================================================
0001A902                            
0001A902                            BGHZ_Loop:
0001A902 4EB9 0000 FA6A             		jsr	(FindNextFreeObj).l
0001A908 6600                       		bne.s	loc_17772
0001A90A                            
0001A90A                            BGHZ_LoadBoss:
0001A90A 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001A90E 12BC 003D                  		move.b	#id_BossGreenHill,0(a1)
0001A912 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A918 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A91E 237C 0000 0000 0004        		move.l	#Map_Eggman,obMap(a1)
0001A926 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001A92C 137C 0004 0001             		move.b	#4,obRender(a1)
0001A932 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001A938 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001A93E 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001A942 2348 0034                  		move.l	a0,$34(a1)
0001A946 51C9 FFBA                  		dbf	d1,BGHZ_Loop	; repeat sequence 2 more times
0001A94A                            
0001A94A                            loc_17772:
0001A94A 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001A950 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001A956 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A95C 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001A962                            
0001A962                            
0001A962                            BGHZ_ShipMain:	; Routine 2
0001A962 7000                       		moveq	#0,d0
0001A964 1028 0025                  		move.b	ob2ndRout(a0),d0
0001A968 323B 0000                  		move.w	BGHZ_ShipIndex(pc,d0.w),d1
0001A96C 4EBB 1000                  		jsr	BGHZ_ShipIndex(pc,d1.w)
0001A970 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001A976 4EB9 0000 C574             		jsr	(AnimateSprite).l
0001A97C 1028 0022                  		move.b	obStatus(a0),d0
0001A980 0200 0003                  		andi.b	#3,d0
0001A984 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001A98A 8128 0001                  		or.b	d0,obRender(a0)
0001A98E 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001A994                            ; ===========================================================================
0001A994 0000                       BGHZ_ShipIndex:	dc.w BGHZ_ShipStart-BGHZ_ShipIndex
0001A996 0000                       		dc.w BGHZ_MakeBall-BGHZ_ShipIndex
0001A998 0000                       		dc.w BGHZ_ShipMove-BGHZ_ShipIndex
0001A99A 0000                       		dc.w loc_17954-BGHZ_ShipIndex
0001A99C 0000                       		dc.w loc_1797A-BGHZ_ShipIndex
0001A99E 0000                       		dc.w loc_179AC-BGHZ_ShipIndex
0001A9A0 0000                       		dc.w loc_179F6-BGHZ_ShipIndex
0001A9A2                            ; ===========================================================================
0001A9A2                            
0001A9A2                            BGHZ_ShipStart:
0001A9A2 317C 0100 0012             		move.w	#$100,obVelY(a0) ; move ship down
0001A9A8 6100 0000                  		bsr.w	BossMove
0001A9AC 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001A9B2 6600                       		bne.s	loc_177E6
0001A9B4 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop ship
0001A9BA 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto next routine
0001A9BE                            
0001A9BE                            loc_177E6:
0001A9BE 1028 003F                  		move.b	$3F(a0),d0
0001A9C2 4EB9 0000 3BA2             		jsr	(CalcSine).l
0001A9C8 EC40                       		asr.w	#6,d0
0001A9CA D068 0038                  		add.w	$38(a0),d0
0001A9CE 3140 000C                  		move.w	d0,obY(a0)
0001A9D2 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001A9D8 5428 003F                  		addq.b	#2,$3F(a0)
0001A9DC 0C28 0008 0025             		cmpi.b	#8,ob2ndRout(a0)
0001A9E2 6400                       		bcc.s	locret_1784A
0001A9E4 4A28 0022                  		tst.b	obStatus(a0)
0001A9E8 6B00                       		bmi.s	loc_1784C
0001A9EA 4A28 0020                  		tst.b	obColType(a0)
0001A9EE 6600                       		bne.s	locret_1784A
0001A9F0 4A28 003E                  		tst.b	$3E(a0)
0001A9F4 6600                       		bne.s	BGHZ_ShipFlash
0001A9F6 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001AA06                            
0001AA06                            BGHZ_ShipFlash:
0001AA06 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1 ; load 2nd pallet, 2nd entry
0001AA0A 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001AA0C 4A51                       		tst.w	(a1)
0001AA0E 6600                       		bne.s	loc_1783C
0001AA10 303C 0EEE                  		move.w	#cWhite,d0	; move 0EEE (white) to d0
0001AA14                            
0001AA14                            loc_1783C:
0001AA14 3280                       		move.w	d0,(a1)		; load color stored in	d0
0001AA16 5328 003E                  		subq.b	#1,$3E(a0)
0001AA1A 6600                       		bne.s	locret_1784A
0001AA1C 117C 000F 0020             		move.b	#$F,obColType(a0)
0001AA22                            
0001AA22                            locret_1784A:
0001AA22 4E75                       		rts	
0001AA24                            ; ===========================================================================
0001AA24                            
0001AA24                            loc_1784C:
0001AA24 7064                       		moveq	#100,d0
0001AA26 6100 0000                  		bsr.w	AddPoints
0001AA2A 117C 0008 0025             		move.b	#8,ob2ndRout(a0)
0001AA30 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001AA36 4E75                       		rts	
0001AA36 4E75                       		rts	
0001AA38                            
0001AA38                            ; ---------------------------------------------------------------------------
0001AA38                            ; Defeated boss	subroutine
0001AA38                            ; ---------------------------------------------------------------------------
0001AA38                            
0001AA38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AA38                            
0001AA38                            
0001AA38                            BossDefeated:
0001AA38 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001AA3C 0200 0007                  		andi.b	#7,d0
0001AA40 6600                       		bne.s	locret_178A2
0001AA42 4EB9 0000 FA54             		jsr	(FindFreeObj).l
0001AA48 6600                       		bne.s	locret_178A2
0001AA4A 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1)	; load explosion object
0001AA4E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001AA54 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001AA5A 4EB9 0000 3B7C             		jsr	(RandomNumber).l
0001AA60 3200                       		move.w	d0,d1
0001AA62 7200                       		moveq	#0,d1
0001AA64 1200                       		move.b	d0,d1
0001AA66 E409                       		lsr.b	#2,d1
0001AA68 0441 0020                  		subi.w	#$20,d1
0001AA6C D369 0008                  		add.w	d1,obX(a1)
0001AA70 E048                       		lsr.w	#8,d0
0001AA72 E608                       		lsr.b	#3,d0
0001AA74 D169 000C                  		add.w	d0,obY(a1)
0001AA78                            
0001AA78                            locret_178A2:
0001AA78 4E75                       		rts	
0001AA7A                            ; End of function BossDefeated
0001AA7A                            
0001AA7A                            ; ---------------------------------------------------------------------------
0001AA7A                            ; Subroutine to	move a boss
0001AA7A                            ; ---------------------------------------------------------------------------
0001AA7A                            
0001AA7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AA7A                            
0001AA7A                            
0001AA7A                            BossMove:
0001AA7A 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0001AA80 E188                       		lsl.l	#8,d0
0001AA82 D1A8 0030                  		add.l	d0,$30(a0)
0001AA86 E18A                       		lsl.l	#8,d2
0001AA88 D5A8 0038                  		add.l	d2,$38(a0)
0001AA8C 4E75                       		rts
0001AA8E                            ; End of function BossMove
0001AA8E                            
0001AA8E                            ; ===========================================================================
0001AA8E                            
0001AA8E                            		include	"_incObj\3D Boss - Green Hill (part 2).asm"
0001AA8E                            
0001AA8E                            BGHZ_MakeBall:
0001AA8E 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001AA94 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001AA9A 6100 FFDE                  		bsr.w	BossMove
0001AA9E 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001AAA4 6600                       		bne.s	loc_17916
0001AAA6 317C 0000 0010             		move.w	#0,obVelX(a0)
0001AAAC 317C 0000 0012             		move.w	#0,obVelY(a0)
0001AAB2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AAB6 4EB9 0000 FA6A             		jsr	(FindNextFreeObj).l
0001AABC 6600                       		bne.s	loc_17910
0001AABE 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load swinging ball object
0001AAC2 3368 0300 0008             		move.w	$300(a0),obX(a1)
0001AAC8 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001AACE 2348 0034                  		move.l	a0,$34(a1)
0001AAD2                            
0001AAD2                            loc_17910:
0001AAD2 317C 0077 003C             		move.w	#$77,$3C(a0)
0001AAD8                            
0001AAD8                            loc_17916:
0001AAD8 6000 FEE4                  		bra.w	loc_177E6
0001AADC                            ; ===========================================================================
0001AADC                            
0001AADC                            BGHZ_ShipMove:
0001AADC 5368 003C                  		subq.w	#1,$3C(a0)
0001AAE0 6A00                       		bpl.s	BGHZ_Reverse
0001AAE2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AAE6 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001AAEC 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move the ship sideways
0001AAF2 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001AAF8 6600                       		bne.s	BGHZ_Reverse
0001AAFA 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001AB00 317C 0040 0010             		move.w	#$40,obVelX(a0)
0001AB06                            
0001AB06                            BGHZ_Reverse:
0001AB06 0828 0000 0022             		btst	#0,obStatus(a0)
0001AB0C 6600                       		bne.s	loc_17950
0001AB0E 4468 0010                  		neg.w	obVelX(a0)	; reverse direction of the ship
0001AB12                            
0001AB12                            loc_17950:
0001AB12 6000 FEAA                  		bra.w	loc_177E6
0001AB16                            ; ===========================================================================
0001AB16                            
0001AB16                            loc_17954:
0001AB16 5368 003C                  		subq.w	#1,$3C(a0)
0001AB1A 6B00                       		bmi.s	loc_17960
0001AB1C 6100 FF5C                  		bsr.w	BossMove
0001AB20 6000                       		bra.s	loc_17976
0001AB22                            ; ===========================================================================
0001AB22                            
0001AB22                            loc_17960:
0001AB22 0868 0000 0022             		bchg	#0,obStatus(a0)
0001AB28 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001AB2E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001AB32 317C 0000 0010             		move.w	#0,obVelX(a0)
0001AB38                            
0001AB38                            loc_17976:
0001AB38 6000 FE84                  		bra.w	loc_177E6
0001AB3C                            ; ===========================================================================
0001AB3C                            
0001AB3C                            loc_1797A:
0001AB3C 5368 003C                  		subq.w	#1,$3C(a0)
0001AB40 6B00                       		bmi.s	loc_17984
0001AB42 6000 FEF4                  		bra.w	BossDefeated
0001AB46                            ; ===========================================================================
0001AB46                            
0001AB46                            loc_17984:
0001AB46 08E8 0000 0022             		bset	#0,obStatus(a0)
0001AB4C 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001AB52 4268 0010                  		clr.w	obVelX(a0)
0001AB56 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AB5A 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001AB60 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001AB64 6600                       		bne.s	locret_179AA
0001AB66 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001AB6C                            
0001AB6C                            locret_179AA:
0001AB6C 4E75                       		rts	
0001AB6E                            ; ===========================================================================
0001AB6E                            
0001AB6E                            loc_179AC:
0001AB6E 5268 003C                  		addq.w	#1,$3C(a0)
0001AB72 6700                       		beq.s	loc_179BC
0001AB74 6A00                       		bpl.s	loc_179C2
0001AB76 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001AB7C 6000                       		bra.s	loc_179EE
0001AB7E                            ; ===========================================================================
0001AB7E                            
0001AB7E                            loc_179BC:
0001AB7E 4268 0012                  		clr.w	obVelY(a0)
0001AB82 6000                       		bra.s	loc_179EE
0001AB84                            ; ===========================================================================
0001AB84                            
0001AB84                            loc_179C2:
0001AB84 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001AB8A 6500                       		bcs.s	loc_179DA
0001AB8C 6700                       		beq.s	loc_179E0
0001AB8E 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001AB94 6500                       		bcs.s	loc_179EE
0001AB96 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AB9A 6000                       		bra.s	loc_179EE
0001AB9C                            ; ===========================================================================
0001AB9C                            
0001AB9C                            loc_179DA:
0001AB9C 5168 0012                  		subq.w	#8,obVelY(a0)
0001ABA0 6000                       		bra.s	loc_179EE
0001ABA2                            ; ===========================================================================
0001ABA2                            
0001ABA2                            loc_179E0:
0001ABA2 4268 0012                          clr.w    obVelY(a0)
0001ABA6 4A38 FE2D                          tst.b     (v_invinc).w
0001ABAA 6600                               bne.s   @boss_invinc
0001ABAC 4A38 FE2E                          tst.b     (v_shoes).w
0001ABB0 6600                               bne.s   @boss_shoes
0001ABB2                            
0001ABB2 1038 F5C6                          move.b   (v_Saved_music),d0
0001ABB6 6000 0000                          bra.w      @boss_play
0001ABBA                            
0001ABBA                            @boss_invinc:
0001ABBA 103C 0000                          move.b #bgm_Invincible,d0
0001ABBE                            
0001ABBE                            @boss_shoes:
0001ABBE 103C 0000                          move.b #bgm_Ending,d0
0001ABC2                            
0001ABC2                            @boss_play:
0001ABC2 4EB8 129A                          jsr PlaySound
0001ABC6                            
0001ABC6                            loc_179EE:
0001ABC6 6100 FEB2                  		bsr.w	BossMove
0001ABCA 6000 FDF2                  		bra.w	loc_177E6
0001ABCE                            ; ===========================================================================
0001ABCE                            
0001ABCE                            loc_179F6:
0001ABCE 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001ABD4 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001ABDA 0C78 2AC0 F72A             		cmpi.w	#$2AC0,(v_limitright2).w
0001ABE0 6700                       		beq.s	loc_17A10
0001ABE2 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001ABE6 6000                       		bra.s	loc_17A16
0001ABE8                            ; ===========================================================================
0001ABE8                            
0001ABE8                            loc_17A10:
0001ABE8 4A28 0001                  		tst.b	obRender(a0)
0001ABEC 6A00                       		bpl.s	BGHZ_ShipDel
0001ABEE                            
0001ABEE                            loc_17A16:
0001ABEE 6100 FE8A                  		bsr.w	BossMove
0001ABF2 6000 FDCA                  		bra.w	loc_177E6
0001ABF6                            ; ===========================================================================
0001ABF6                            
0001ABF6                            BGHZ_ShipDel:
0001ABF6 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001ABFC                            ; ===========================================================================
0001ABFC                            
0001ABFC                            BGHZ_FaceMain:	; Routine 4
0001ABFC 7000                       		moveq	#0,d0
0001ABFE 7201                       		moveq	#1,d1
0001AC00 2268 0034                  		movea.l	$34(a0),a1
0001AC04 1029 0025                  		move.b	ob2ndRout(a1),d0
0001AC08 5900                       		subq.b	#4,d0
0001AC0A 6600                       		bne.s	loc_17A3E
0001AC0C 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001AC12 6600                       		bne.s	loc_17A46
0001AC14 7204                       		moveq	#4,d1
0001AC16                            
0001AC16                            loc_17A3E:
0001AC16 5D00                       		subq.b	#6,d0
0001AC18 6B00                       		bmi.s	loc_17A46
0001AC1A 720A                       		moveq	#$A,d1
0001AC1C 6000                       		bra.s	loc_17A5A
0001AC1E                            ; ===========================================================================
0001AC1E                            
0001AC1E                            loc_17A46:
0001AC1E 4A29 0020                  		tst.b	obColType(a1)
0001AC22 6600                       		bne.s	loc_17A50
0001AC24 7205                       		moveq	#5,d1
0001AC26 6000                       		bra.s	loc_17A5A
0001AC28                            ; ===========================================================================
0001AC28                            
0001AC28                            loc_17A50:
0001AC28 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001AC2E 6500                       		bcs.s	loc_17A5A
0001AC30 7204                       		moveq	#4,d1
0001AC32                            
0001AC32                            loc_17A5A:
0001AC32 1141 001C                  		move.b	d1,obAnim(a0)
0001AC36 5500                       		subq.b	#2,d0
0001AC38 6600                       		bne.s	BGHZ_FaceDisp
0001AC3A 117C 0006 001C             		move.b	#6,obAnim(a0)
0001AC40 4A28 0001                  		tst.b	obRender(a0)
0001AC44 6A00                       		bpl.s	BGHZ_FaceDel
0001AC46                            
0001AC46                            BGHZ_FaceDisp:
0001AC46 6000                       		bra.s	BGHZ_Display
0001AC48                            ; ===========================================================================
0001AC48                            
0001AC48                            BGHZ_FaceDel:
0001AC48 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001AC4E                            ; ===========================================================================
0001AC4E                            
0001AC4E                            BGHZ_FlameMain:	; Routine 6
0001AC4E 117C 0007 001C             		move.b	#7,obAnim(a0)
0001AC54 2268 0034                  		movea.l	$34(a0),a1
0001AC58 0C29 000C 0025             		cmpi.b	#$C,ob2ndRout(a1)
0001AC5E 6600                       		bne.s	loc_17A96
0001AC60 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001AC66 4A28 0001                  		tst.b	obRender(a0)
0001AC6A 6A00                       		bpl.s	BGHZ_FlameDel
0001AC6C 6000                       		bra.s	BGHZ_FlameDisp
0001AC6E                            ; ===========================================================================
0001AC6E                            
0001AC6E                            loc_17A96:
0001AC6E 3029 0010                  		move.w	obVelX(a1),d0
0001AC72 6700                       		beq.s	BGHZ_FlameDisp
0001AC74 117C 0008 001C             		move.b	#8,obAnim(a0)
0001AC7A                            
0001AC7A                            BGHZ_FlameDisp:
0001AC7A 6000                       		bra.s	BGHZ_Display
0001AC7C                            ; ===========================================================================
0001AC7C                            
0001AC7C                            BGHZ_FlameDel:
0001AC7C 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001AC82                            ; ===========================================================================
0001AC82                            
0001AC82                            BGHZ_Display:
0001AC82 2268 0034                  		movea.l	$34(a0),a1
0001AC86 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001AC8C 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001AC92 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001AC98 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001AC9E 4EB9 0000 C574             		jsr	(AnimateSprite).l
0001ACA4 1028 0022                  		move.b	obStatus(a0),d0
0001ACA8 0200 0003                  		andi.b	#3,d0
0001ACAC 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001ACB2 8128 0001                  		or.b	d0,obRender(a0)
0001ACB6 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001ACB6 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001ACBC                            		include	"_incObj\48 Eggman's Swinging Ball.asm"
0001ACBC                            ; ---------------------------------------------------------------------------
0001ACBC                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001ACBC                            ; ---------------------------------------------------------------------------
0001ACBC                            
0001ACBC                            BossBall:
0001ACBC 7000                       		moveq	#0,d0
0001ACBE 1028 0024                  		move.b	obRoutine(a0),d0
0001ACC2 323B 0000                  		move.w	GBall_Index(pc,d0.w),d1
0001ACC6 4EFB 1000                  		jmp	GBall_Index(pc,d1.w)
0001ACCA                            ; ===========================================================================
0001ACCA 0000                       GBall_Index:	dc.w GBall_Main-GBall_Index
0001ACCC 0000                       		dc.w GBall_Base-GBall_Index
0001ACCE 0000                       		dc.w GBall_Display2-GBall_Index
0001ACD0 0000                       		dc.w loc_17C68-GBall_Index
0001ACD2 0000                       		dc.w GBall_ChkVanish-GBall_Index
0001ACD4                            ; ===========================================================================
0001ACD4                            
0001ACD4                            GBall_Main:	; Routine 0
0001ACD4 5428 0024                  		addq.b	#2,obRoutine(a0)
0001ACD8 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0001ACDE 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001ACE4 217C 0000 0000 0004        		move.l	#Map_BossItems,obMap(a0)
0001ACEC 317C 046C 0002             		move.w	#$46C,obGfx(a0)
0001ACF2 45E8 0028                  		lea	obSubtype(a0),a2
0001ACF6 14FC 0000                  		move.b	#0,(a2)+
0001ACFA 7205                       		moveq	#5,d1
0001ACFC 2248                       		movea.l	a0,a1
0001ACFE 6000                       		bra.s	loc_17B60
0001AD00                            ; ===========================================================================
0001AD00                            
0001AD00                            GBall_MakeLinks:
0001AD00 4EB9 0000 FA6A             		jsr	(FindNextFreeObj).l
0001AD06 6600                       		bne.s	GBall_MakeBall
0001AD08 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001AD0E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001AD14 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load chain link object
0001AD18 137C 0006 0024             		move.b	#6,obRoutine(a1)
0001AD1E 237C 0000 9370 0004        		move.l	#Map_Swing_GHZ,obMap(a1)
0001AD26 337C 0380 0002             		move.w	#$380,obGfx(a1)
0001AD2C 137C 0001 001A             		move.b	#1,obFrame(a1)
0001AD32 5228 0028                  		addq.b	#1,obSubtype(a0)
0001AD36                            
0001AD36                            loc_17B60:
0001AD36 3A09                       		move.w	a1,d5
0001AD38 0445 D000                  		subi.w	#$D000,d5
0001AD3C EC4D                       		lsr.w	#6,d5
0001AD3E 0245 007F                  		andi.w	#$7F,d5
0001AD42 14C5                       		move.b	d5,(a2)+
0001AD44 137C 0004 0001             		move.b	#4,obRender(a1)
0001AD4A 137C 0008 0014             		move.b	#8,obActWid(a1)
0001AD50 337C 0300 0018             		move.w	#$300,obPriority(a1)
0001AD56 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001AD5C 51C9 FFA2                  		dbf	d1,GBall_MakeLinks ; repeat sequence 5 more times
0001AD60                            
0001AD60                            GBall_MakeBall:
0001AD60 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001AD66 237C 0000 98CC 0004        		move.l	#Map_GBall,obMap(a1) ; load different mappings for final link
0001AD6E 337C 43AA 0002             		move.w	#$43AA,obGfx(a1) ; use different graphics
0001AD74 137C 0001 001A             		move.b	#1,obFrame(a1)
0001AD7A 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001AD80 137C 0081 0020             		move.b	#$81,obColType(a1) ; make object hurt Sonic
0001AD86 4E75                       		rts	
0001AD88                            ; ===========================================================================
0001AD88                            
0001AD88 0010 2030 4060             GBall_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001AD8E                            
0001AD8E                            ; ===========================================================================
0001AD8E                            
0001AD8E                            GBall_Base:	; Routine 2
0001AD8E 47F9 0001 AD88             		lea	(GBall_PosData).l,a3
0001AD94 45E8 0028                  		lea	obSubtype(a0),a2
0001AD98 7C00                       		moveq	#0,d6
0001AD9A 1C1A                       		move.b	(a2)+,d6
0001AD9C                            
0001AD9C                            loc_17BC6:
0001AD9C 7800                       		moveq	#0,d4
0001AD9E 181A                       		move.b	(a2)+,d4
0001ADA0 ED4C                       		lsl.w	#6,d4
0001ADA2 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
0001ADA8 2244                       		movea.l	d4,a1
0001ADAA 101B                       		move.b	(a3)+,d0
0001ADAC B029 003C                  		cmp.b	$3C(a1),d0
0001ADB0 6700                       		beq.s	loc_17BE0
0001ADB2 5229 003C                  		addq.b	#1,$3C(a1)
0001ADB6                            
0001ADB6                            loc_17BE0:
0001ADB6 51CE FFE4                  		dbf	d6,loc_17BC6
0001ADBA                            
0001ADBA B029 003C                  		cmp.b	$3C(a1),d0
0001ADBE 6600                       		bne.s	loc_17BFA
0001ADC0 2268 0034                  		movea.l	$34(a0),a1
0001ADC4 0C29 0006 0025             		cmpi.b	#6,ob2ndRout(a1)
0001ADCA 6600                       		bne.s	loc_17BFA
0001ADCC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001ADD0                            
0001ADD0                            loc_17BFA:
0001ADD0 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001ADD6 6700                       		beq.s	GBall_Display
0001ADD8 5268 0032                  		addq.w	#1,$32(a0)
0001ADDC                            
0001ADDC                            GBall_Display:
0001ADDC 6100 0000                  		bsr.w	sub_17C2A
0001ADE0 1028 0026                  		move.b	obAngle(a0),d0
0001ADE4 4EB9 0000 92E2             		jsr	(Swing_Move2).l
0001ADEA 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001ADF0                            ; ===========================================================================
0001ADF0                            
0001ADF0                            GBall_Display2:	; Routine 4
0001ADF0 6100 0000                  		bsr.w	sub_17C2A
0001ADF4 4EB9 0000 92A2             		jsr	(Obj48_Move).l
0001ADFA 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001AE00                            
0001AE00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AE00                            
0001AE00                            
0001AE00                            sub_17C2A:
0001AE00 2268 0034                  		movea.l	$34(a0),a1
0001AE04 0628 0020 001B             		addi.b	#$20,obAniFrame(a0)
0001AE0A 6400                       		bcc.s	loc_17C3C
0001AE0C 0868 0000 001A             		bchg	#0,obFrame(a0)
0001AE12                            
0001AE12                            loc_17C3C:
0001AE12 3169 0008 003A             		move.w	obX(a1),$3A(a0)
0001AE18 3029 000C                  		move.w	obY(a1),d0
0001AE1C D068 0032                  		add.w	$32(a0),d0
0001AE20 3140 0038                  		move.w	d0,$38(a0)
0001AE24 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001AE2A 4A29 0022                  		tst.b	obStatus(a1)
0001AE2E 6A00                       		bpl.s	locret_17C66
0001AE30 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001AE34 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AE3A                            
0001AE3A                            locret_17C66:
0001AE3A 4E75                       		rts	
0001AE3C                            ; End of function sub_17C2A
0001AE3C                            
0001AE3C                            ; ===========================================================================
0001AE3C                            
0001AE3C                            loc_17C68:	; Routine 6
0001AE3C 2268 0034                  		movea.l	$34(a0),a1
0001AE40 4A29 0022                  		tst.b	obStatus(a1)
0001AE44 6A00                       		bpl.s	GBall_Display3
0001AE46 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001AE4A 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AE50                            
0001AE50                            GBall_Display3:
0001AE50 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001AE56                            ; ===========================================================================
0001AE56                            
0001AE56                            GBall_ChkVanish:; Routine 8
0001AE56 7000                       		moveq	#0,d0
0001AE58 4A28 001A                  		tst.b	obFrame(a0)
0001AE5C 6600                       		bne.s	GBall_Vanish
0001AE5E 5200                       		addq.b	#1,d0
0001AE60                            
0001AE60                            GBall_Vanish:
0001AE60 1140 001A                  		move.b	d0,obFrame(a0)
0001AE64 2268 0034                  		movea.l	$34(a0),a1
0001AE68 4A29 0022                  		tst.b	obStatus(a1)
0001AE6C 6A00                       		bpl.s	GBall_Display4
0001AE6E 117C 0000 0020             		move.b	#0,obColType(a0)
0001AE74 6100 FBC2                  		bsr.w	BossDefeated
0001AE78 5328 003C                  		subq.b	#1,$3C(a0)
0001AE7C 6A00                       		bpl.s	GBall_Display4
0001AE7E 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001AE82 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AE88                            
0001AE88                            GBall_Display4:
0001AE88 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001AE88 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001AE8E                            		include	"_anim\Eggman.asm"
0001AE8E                            ; ---------------------------------------------------------------------------
0001AE8E                            ; Animation script - Eggman (bosses)
0001AE8E                            ; ---------------------------------------------------------------------------
0001AE8E 0000                       Ani_Eggman:	dc.w @ship-Ani_Eggman
0001AE90 0000                       		dc.w @facenormal1-Ani_Eggman
0001AE92 0000                       		dc.w @facenormal2-Ani_Eggman
0001AE94 0000                       		dc.w @facenormal3-Ani_Eggman
0001AE96 0000                       		dc.w @facelaugh-Ani_Eggman
0001AE98 0000                       		dc.w @facehit-Ani_Eggman
0001AE9A 0000                       		dc.w @facepanic-Ani_Eggman
0001AE9C 0000                       		dc.w @blank-Ani_Eggman
0001AE9E 0000                       		dc.w @flame1-Ani_Eggman
0001AEA0 0000                       		dc.w @flame2-Ani_Eggman
0001AEA2 0000                       		dc.w @facedefeat-Ani_Eggman
0001AEA4 0000                       		dc.w @escapeflame-Ani_Eggman
0001AEA6 0F00 FF                    @ship:		dc.b $F, 0, afEnd
0001AEAA 00                         		even
0001AEAA 0501 02FF                  @facenormal1:	dc.b 5,	1, 2, afEnd
0001AEAE                            		even
0001AEAE 0301 02FF                  @facenormal2:	dc.b 3,	1, 2, afEnd
0001AEB2                            		even
0001AEB2 0101 02FF                  @facenormal3:	dc.b 1,	1, 2, afEnd
0001AEB6                            		even
0001AEB6 0403 04FF                  @facelaugh:	dc.b 4,	3, 4, afEnd
0001AEBA                            		even
0001AEBA 1F05 01FF                  @facehit:	dc.b $1F, 5, 1,	afEnd
0001AEBE                            		even
0001AEBE 0306 01FF                  @facepanic:	dc.b 3,	6, 1, afEnd
0001AEC2                            		even
0001AEC2 0F0A FF                    @blank:		dc.b $F, $A, afEnd
0001AEC6 00                         		even
0001AEC6 0308 09FF                  @flame1:	dc.b 3,	8, 9, afEnd
0001AECA                            		even
0001AECA 0108 09FF                  @flame2:	dc.b 1,	8, 9, afEnd
0001AECE                            		even
0001AECE 0F07 FF                    @facedefeat:	dc.b $F, 7, afEnd
0001AED2 00                         		even
0001AED2 0209 080B 0C0B 0C09 08FE+  @escapeflame:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, afBack, 2
0001AEDE 00                         		even
0001AEDE 00                         		even
0001AEDE                            Map_Eggman:	include	"_maps\Eggman.asm"
0001AEDE                            ; --------------------------------------------------------------------------------
0001AEDE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001AEDE                            ; --------------------------------------------------------------------------------
0001AEDE                            
0001AEDE                            SME_F_pyS:	
0001AEDE 0000 0000                  		dc.w SME_F_pyS_1A-SME_F_pyS, SME_F_pyS_34-SME_F_pyS	
0001AEE2 0000 0000                  		dc.w SME_F_pyS_44-SME_F_pyS, SME_F_pyS_54-SME_F_pyS	
0001AEE6 0000 0000                  		dc.w SME_F_pyS_69-SME_F_pyS, SME_F_pyS_7E-SME_F_pyS	
0001AEEA 0000 0000                  		dc.w SME_F_pyS_93-SME_F_pyS, SME_F_pyS_A8-SME_F_pyS	
0001AEEE 0000 0000                  		dc.w SME_F_pyS_CC-SME_F_pyS, SME_F_pyS_D2-SME_F_pyS	
0001AEF2 0000 0000                  		dc.w SME_F_pyS_D8-SME_F_pyS, SME_F_pyS_D9-SME_F_pyS	
0001AEF6 0000                       		dc.w SME_F_pyS_E4-SME_F_pyS	
0001AEF8 05                         SME_F_pyS_1A:	dc.b 5	
0001AEF9 EC01 000A E4               		dc.b $EC, 1, 0, $A, $E4	
0001AEFE FC0E 2010 E4               		dc.b $FC, $E, $20, $10, $E4	
0001AF03 FC0E 201C 04               		dc.b $FC, $E, $20, $1C, 4	
0001AF08 140C 2028 EC               		dc.b $14, $C, $20, $28, $EC	
0001AF0D 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C	
0001AF12 03                         SME_F_pyS_34:	dc.b 3	
0001AF13 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AF18 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC	
0001AF1D EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AF22 03                         SME_F_pyS_44:	dc.b 3	
0001AF23 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AF28 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001AF2D EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AF32 04                         SME_F_pyS_54:	dc.b 4	
0001AF33 E408 003D F4               		dc.b $E4, 8, 0, $3D, $F4	
0001AF38 EC09 0040 EC               		dc.b $EC, 9, 0, $40, $EC	
0001AF3D EC05 0046 04               		dc.b $EC, 5, 0, $46, 4	
0001AF42 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AF47 04                         SME_F_pyS_69:	dc.b 4	
0001AF48 E408 004A F4               		dc.b $E4, 8, 0, $4A, $F4	
0001AF4D EC09 004D EC               		dc.b $EC, 9, 0, $4D, $EC	
0001AF52 EC05 0053 04               		dc.b $EC, 5, 0, $53, 4	
0001AF57 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AF5C 04                         SME_F_pyS_7E:	dc.b 4	
0001AF5D E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001AF62 EC09 005A EC               		dc.b $EC, 9, 0, $5A, $EC	
0001AF67 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001AF6C EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AF71 04                         SME_F_pyS_93:	dc.b 4	
0001AF72 E404 0064 04               		dc.b $E4, 4, 0, $64, 4	
0001AF77 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AF7C EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001AF81 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AF86 07                         SME_F_pyS_A8:	dc.b 7	
0001AF87 E409 0066 F4               		dc.b $E4, 9, 0, $66, $F4	
0001AF8C E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001AF91 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001AF96 EC01 0035 EC               		dc.b $EC, 1, 0, $35, $EC	
0001AF9B F400 005D F4               		dc.b $F4, 0, 0, $5D, $F4	
0001AFA0 F400 005F FC               		dc.b $F4, 0, 0, $5F, $FC	
0001AFA5 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AFAA 01                         SME_F_pyS_CC:	dc.b 1	
0001AFAB 0405 002D 22               		dc.b 4, 5, 0, $2D, $22	
0001AFB0 01                         SME_F_pyS_D2:	dc.b 1	
0001AFB1 0405 0031 22               		dc.b 4, 5, 0, $31, $22	
0001AFB6 00                         SME_F_pyS_D8:	dc.b 0	
0001AFB7 02                         SME_F_pyS_D9:	dc.b 2	
0001AFB8 0008 012A 22               		dc.b 0, 8, 1, $2A, $22	
0001AFBD 0808 112A 22               		dc.b 8, 8, $11, $2A, $22	
0001AFC2 02                         SME_F_pyS_E4:	dc.b 2	
0001AFC3 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22	
0001AFC8 0001 0139 3A               		dc.b 0, 1, 1, $39, $3A	
0001AFCE 00                         		even
0001AFCE 00                         		even
0001AFCE                            Map_BossItems:	include	"_maps\Boss Items.asm"
0001AFCE                            ; ---------------------------------------------------------------------------
0001AFCE                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001AFCE                            ; ---------------------------------------------------------------------------
0001AFCE                            Map_BossItems_internal:
0001AFCE 0000                       		dc.w @chainanchor1-Map_BossItems_internal
0001AFD0 0000                       		dc.w @chainanchor2-Map_BossItems_internal
0001AFD2 0000                       		dc.w @cross-Map_BossItems_internal
0001AFD4 0000                       		dc.w @widepipe-Map_BossItems_internal
0001AFD6 0000                       		dc.w @pipe-Map_BossItems_internal
0001AFD8 0000                       		dc.w @spike-Map_BossItems_internal
0001AFDA 0000                       		dc.w @legmask-Map_BossItems_internal
0001AFDC 0000                       		dc.w @legs-Map_BossItems_internal
0001AFDE 01                         @chainanchor1:	dc.b 1
0001AFDF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; GHZ boss
0001AFE4 02                         @chainanchor2:	dc.b 2
0001AFE5 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; GHZ boss
0001AFEA F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001AFF0 00                         		even
0001AFF0 01                         @cross:		dc.b 1
0001AFF1 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; unknown
0001AFF6 01                         @widepipe:	dc.b 1
0001AFF7 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4	; SLZ boss
0001AFFC 01                         @pipe:		dc.b 1
0001AFFD 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8	; MZ boss
0001B002 04                         @spike:		dc.b 4
0001B003 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8 ; SYZ boss
0001B008 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001B00D F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001B012 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001B018 00                         		even
0001B018 02                         @legmask:	dc.b 2
0001B019 0005 0017 00               		dc.b 0,	5, 0, $17, 0	; FZ post-boss: sprite covering part of legs
0001B01E 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001B024 00                         		even
0001B024 02                         @legs:		dc.b 2
0001B025 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0	; FZ post-boss
0001B02A 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001B030 00                         		even
0001B030 00                         		even
0001B030                            		include	"_incObj\77 Boss - Labyrinth.asm"
0001B030                            ; ---------------------------------------------------------------------------
0001B030                            ; Object 77 - Eggman (LZ)
0001B030                            ; ---------------------------------------------------------------------------
0001B030                            
0001B030                            BossLabyrinth:
0001B030 7000                       		moveq	#0,d0
0001B032 1028 0024                  		move.b	obRoutine(a0),d0
0001B036 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001B03A 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001B03E                            ; ===========================================================================
0001B03E 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001B040 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001B042 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001B044 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001B046                            
0001B046 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001B048 0401                       		dc.b 4,	1
0001B04A 0607                       		dc.b 6,	7
0001B04C                            ; ===========================================================================
0001B04C                            
0001B04C                            Obj77_Main:	; Routine 0
0001B04C 317C 1E10 0008             		move.w	#$1E10,obX(a0)
0001B052 317C 05C0 000C             		move.w	#$5C0,obY(a0)
0001B058 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B05E 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B064 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B06A 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B070 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001B076 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001B07A 2248                       		movea.l	a0,a1
0001B07C 7202                       		moveq	#2,d1
0001B07E 6000                       		bra.s	Obj77_LoadBoss
0001B080                            ; ===========================================================================
0001B080                            
0001B080                            Obj77_Loop:
0001B080 4EB9 0000 FA6A             		jsr	(FindNextFreeObj).l
0001B086 6600                       		bne.s	Obj77_ShipMain
0001B088 12BC 0077                  		move.b	#id_BossLabyrinth,0(a1)
0001B08C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B092 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B098                            
0001B098                            Obj77_LoadBoss:
0001B098 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B09E 4229 0025                  		clr.b	ob2ndRout(a1)
0001B0A2 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B0A6 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B0AA 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0001B0B0 237C 0001 AEDE 0004        		move.l	#Map_Eggman,obMap(a1)
0001B0B8 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B0BE 137C 0004 0001             		move.b	#4,obRender(a1)
0001B0C4 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B0CA 2348 0034                  		move.l	a0,$34(a1)
0001B0CE 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001B0D2                            
0001B0D2                            Obj77_ShipMain:	; Routine 2
0001B0D2 43F8 D000                  		lea	(v_player).w,a1
0001B0D6 7000                       		moveq	#0,d0
0001B0D8 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B0DC 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001B0E0 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001B0E4 43F9 0001 AE8E             		lea	(Ani_Eggman).l,a1
0001B0EA 4EB9 0000 C574             		jsr	(AnimateSprite).l
0001B0F0 7003                       		moveq	#3,d0
0001B0F2 C028 0022                  		and.b	obStatus(a0),d0
0001B0F6 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B0FC 8128 0001                  		or.b	d0,obRender(a0)
0001B100 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001B106                            ; ===========================================================================
0001B106 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001B10A 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001B10E 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001B112 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001B116                            ; ===========================================================================
0001B116                            
0001B116                            loc_17F1E:
0001B116 3029 0008                  		move.w	obX(a1),d0
0001B11A 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001B11E 6500                       		bcs.s	loc_17F38
0001B120 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B126 317C 0060 0010             		move.w	#$60,obVelX(a0)
0001B12C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B130                            
0001B130                            loc_17F38:
0001B130 6100 F948                  		bsr.w	BossMove
0001B134 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B13A 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B140                            
0001B140                            loc_17F48:
0001B140 4A28 003D                  		tst.b	$3D(a0)
0001B144 6600                       		bne.s	loc_17F8E
0001B146 4A28 0022                  		tst.b	obStatus(a0)
0001B14A 6B00                       		bmi.s	loc_17F92
0001B14C 4A28 0020                  		tst.b	obColType(a0)
0001B150 6600                       		bne.s	locret_17F8C
0001B152 4A28 003E                  		tst.b	$3E(a0)
0001B156 6600                       		bne.s	loc_17F70
0001B158 117C 0020 003E             		move.b	#$20,$3E(a0)
0001B168                            
0001B168                            loc_17F70:
0001B168 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B16C 7000                       		moveq	#0,d0
0001B16E 4A51                       		tst.w	(a1)
0001B170 6600                       		bne.s	loc_17F7E
0001B172 303C 0EEE                  		move.w	#cWhite,d0
0001B176                            
0001B176                            loc_17F7E:
0001B176 3280                       		move.w	d0,(a1)
0001B178 5328 003E                  		subq.b	#1,$3E(a0)
0001B17C 6600                       		bne.s	locret_17F8C
0001B17E 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B184                            
0001B184                            locret_17F8C:
0001B184 4E75                       		rts	
0001B186                            ; ===========================================================================
0001B186                            
0001B186                            loc_17F8E:
0001B186 6000 F8B0                  		bra.w	BossDefeated
0001B18A                            ; ===========================================================================
0001B18A                            
0001B18A                            loc_17F92:
0001B18A 7064                       		moveq	#100,d0
0001B18C 6100 0000                  		bsr.w	AddPoints
0001B190 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001B196 4E75                       		rts	
0001B198                            ; ===========================================================================
0001B198                            
0001B198                            loc_17FA0:
0001B198 70FE                       		moveq	#-2,d0
0001B19A 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001B1A0 6500                       		bcs.s	loc_17FB6
0001B1A2 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001B1A8 4268 0010                  		clr.w	obVelX(a0)
0001B1AC 5240                       		addq.w	#1,d0
0001B1AE                            
0001B1AE                            loc_17FB6:
0001B1AE 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001B1B4 6E00                       		bgt.s	loc_17FCA
0001B1B6 317C 0500 0038             		move.w	#$500,$38(a0)
0001B1BC 4268 0012                  		clr.w	obVelY(a0)
0001B1C0 5240                       		addq.w	#1,d0
0001B1C2                            
0001B1C2                            loc_17FCA:
0001B1C2 6600                       		bne.s	loc_17FDC
0001B1C4 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001B1CA 317C FE00 0012             		move.w	#-$200,obVelY(a0)
0001B1D0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B1D4                            
0001B1D4                            loc_17FDC:
0001B1D4 6000 FF5A                  		bra.w	loc_17F38
0001B1D8                            ; ===========================================================================
0001B1D8                            
0001B1D8                            loc_17FE0:
0001B1D8 70FE                       		moveq	#-2,d0
0001B1DA 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001B1E0 6500                       		bcs.s	loc_17FF6
0001B1E2 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001B1E8 4268 0010                  		clr.w	obVelX(a0)
0001B1EC 5240                       		addq.w	#1,d0
0001B1EE                            
0001B1EE                            loc_17FF6:
0001B1EE 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001B1F4 6E00                       		bgt.s	loc_1800A
0001B1F6 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001B1FC 4268 0012                  		clr.w	obVelY(a0)
0001B200 5240                       		addq.w	#1,d0
0001B202                            
0001B202                            loc_1800A:
0001B202 6600                       		bne.s	loc_1801A
0001B204 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B20A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B20E 4228 003F                  		clr.b	$3F(a0)
0001B212                            
0001B212                            loc_1801A:
0001B212 6000 FF1C                  		bra.w	loc_17F38
0001B216                            ; ===========================================================================
0001B216                            
0001B216                            loc_1801E:
0001B216 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001B21C 6E00                       		bgt.s	loc_1804E
0001B21E 317C 0100 0038             		move.w	#$100,$38(a0)
0001B224 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001B22A 317C FF80 0012             		move.w	#-$80,obVelY(a0)
0001B230 4A28 003D                  		tst.b	$3D(a0)
0001B234 6700                       		beq.s	loc_18046
0001B236 E1E8 0010                  		asl	obVelX(a0)
0001B23A E1E8 0012                  		asl	obVelY(a0)
0001B23E                            
0001B23E                            loc_18046:
0001B23E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B242 6000 FEEC                  		bra.w	loc_17F38
0001B246                            ; ===========================================================================
0001B246                            
0001B246                            loc_1804E:
0001B246 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B24C 5428 003F                  		addq.b	#2,$3F(a0)
0001B250 1028 003F                  		move.b	$3F(a0),d0
0001B254 4EB9 0000 3BA2             		jsr	(CalcSine).l
0001B25A 4A41                       		tst.w	d1
0001B25C 6A00                       		bpl.s	loc_1806C
0001B25E 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B264                            
0001B264                            loc_1806C:
0001B264 E840                       		asr.w	#4,d0
0001B266 4840                       		swap	d0
0001B268 4240                       		clr.w	d0
0001B26A D0A8 0030                  		add.l	$30(a0),d0
0001B26E 4840                       		swap	d0
0001B270 3140 0008                  		move.w	d0,obX(a0)
0001B274 3028 0012                  		move.w	obVelY(a0),d0
0001B278 3238 D00C                  		move.w	(v_player+obY).w,d1
0001B27C 9268 000C                  		sub.w	obY(a0),d1
0001B280 6500                       		bcs.s	loc_180A2
0001B282 0441 0048                  		subi.w	#$48,d1
0001B286 6500                       		bcs.s	loc_180A2
0001B288 E240                       		asr.w	#1,d0
0001B28A 0441 0028                  		subi.w	#$28,d1
0001B28E 6500                       		bcs.s	loc_180A2
0001B290 E240                       		asr.w	#1,d0
0001B292 0441 0028                  		subi.w	#$28,d1
0001B296 6500                       		bcs.s	loc_180A2
0001B298 7000                       		moveq	#0,d0
0001B29A                            
0001B29A                            loc_180A2:
0001B29A 48C0                       		ext.l	d0
0001B29C E180                       		asl.l	#8,d0
0001B29E 4A28 003D                  		tst.b	$3D(a0)
0001B2A2 6700                       		beq.s	loc_180AE
0001B2A4 D080                       		add.l	d0,d0
0001B2A6                            
0001B2A6                            loc_180AE:
0001B2A6 D1A8 0038                  		add.l	d0,$38(a0)
0001B2AA 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B2B0 6000 FE8E                  		bra.w	loc_17F48
0001B2B4                            ; ===========================================================================
0001B2B4                            
0001B2B4                            loc_180BC:
0001B2B4 70FE                       		moveq	#-2,d0
0001B2B6 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001B2BC 6500                       		bcs.s	loc_180D2
0001B2BE 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001B2C4 4268 0010                  		clr.w	obVelX(a0)
0001B2C8 5240                       		addq.w	#1,d0
0001B2CA                            
0001B2CA                            loc_180D2:
0001B2CA 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001B2D0 6E00                       		bgt.s	loc_180E6
0001B2D2 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001B2D8 4268 0012                  		clr.w	obVelY(a0)
0001B2DC 5240                       		addq.w	#1,d0
0001B2DE                            
0001B2DE                            loc_180E6:
0001B2DE 6600                       		bne.s	loc_180F2
0001B2E0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B2E4 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B2EA                            
0001B2EA                            loc_180F2:
0001B2EA 6000 FE44                  		bra.w	loc_17F38
0001B2EE                            ; ===========================================================================
0001B2EE                            
0001B2EE                            loc_180F6:
0001B2EE 4A28 003D                  		tst.b	$3D(a0)
0001B2F2 6600                       		bne.s	loc_18112
0001B2F4 0C69 1EC8 0008             		cmpi.w	#$1EC8,obX(a1)
0001B2FA 6D00                       		blt.s	loc_18126
0001B2FC 0C69 00F0 000C             		cmpi.w	#$F0,obY(a1)
0001B302 6E00                       		bgt.s	loc_18126
0001B304 117C 0032 003C             		move.b	#$32,$3C(a0)
0001B30A                            
0001B30A                            loc_18112:
0001B30A 4A38 FE2D                          tst.b     (v_invinc).w
0001B30E 6600                               bne.s   @boss_invinc
0001B310                            
0001B310 1038 F5C6                          move.b   (v_Saved_music),d0
0001B314 6000 0000                          bra.w      @boss_play
0001B318                            
0001B318                            @boss_invinc:
0001B318 103C 0000                          move.b #bgm_Invincible,d0
0001B31C                            
0001B31C                            @boss_play:
0001B31C 4EB8 129A                          jsr PlaySound
0001B320 4238 F7AA                          clr.b    (f_lockscreen).w
0001B324 08E8 0000 0022                     bset    #0,obStatus(a0)
0001B32A 5428 0025                          addq.b    #2,ob2ndRout(a0)
0001B32E                            
0001B32E                            loc_18126:
0001B32E 6000 FE00                  		bra.w	loc_17F38
0001B332                            ; ===========================================================================
0001B332                            
0001B332                            loc_1812A:
0001B332 4A28 003D                  		tst.b	$3D(a0)
0001B336 6600                       		bne.s	loc_18136
0001B338 5328 003C                  		subq.b	#1,$3C(a0)
0001B33C 6600                       		bne.s	loc_1814E
0001B33E                            
0001B33E                            loc_18136:
0001B33E 4228 003C                  		clr.b	$3C(a0)
0001B342 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001B348 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B34E 4228 003D                  		clr.b	$3D(a0)
0001B352 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B356                            
0001B356                            loc_1814E:
0001B356 6000 FDD8                  		bra.w	loc_17F38
0001B35A                            ; ===========================================================================
0001B35A                            
0001B35A                            loc_18152:
0001B35A 0C78 2030 F72A             		cmpi.w	#$2030,(v_limitright2).w
0001B360 6400                       		bcc.s	loc_18160
0001B362 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B366 6000                       		bra.s	loc_18166
0001B368                            ; ===========================================================================
0001B368                            
0001B368                            loc_18160:
0001B368 4A28 0001                  		tst.b	obRender(a0)
0001B36C 6A00                       		bpl.s	Obj77_ShipDel
0001B36E                            
0001B36E                            loc_18166:
0001B36E 6000 FDC0                  		bra.w	loc_17F38
0001B372                            ; ===========================================================================
0001B372                            
0001B372                            Obj77_ShipDel:
0001B372 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001B378                            ; ===========================================================================
0001B378                            
0001B378                            Obj77_FaceMain:	; Routine 4
0001B378 2268 0034                  		movea.l	$34(a0),a1
0001B37C 1011                       		move.b	(a1),d0
0001B37E B010                       		cmp.b	(a0),d0
0001B380 6600                       		bne.s	Obj77_FaceDel
0001B382 7000                       		moveq	#0,d0
0001B384 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B388 7201                       		moveq	#1,d1
0001B38A 4A28 003D                  		tst.b	$3D(a0)
0001B38E 6700                       		beq.s	loc_1818C
0001B390 720A                       		moveq	#$A,d1
0001B392 6000                       		bra.s	loc_181A0
0001B394                            ; ===========================================================================
0001B394                            
0001B394                            loc_1818C:
0001B394 4A29 0020                  		tst.b	obColType(a1)
0001B398 6600                       		bne.s	loc_18196
0001B39A 7205                       		moveq	#5,d1
0001B39C 6000                       		bra.s	loc_181A0
0001B39E                            ; ===========================================================================
0001B39E                            
0001B39E                            loc_18196:
0001B39E 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B3A4 6500                       		bcs.s	loc_181A0
0001B3A6 7204                       		moveq	#4,d1
0001B3A8                            
0001B3A8                            loc_181A0:
0001B3A8 1141 001C                  		move.b	d1,obAnim(a0)
0001B3AC 0C00 000E                  		cmpi.b	#$E,d0
0001B3B0 6600                       		bne.s	loc_181B6
0001B3B2 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B3B8 4A28 0001                  		tst.b	obRender(a0)
0001B3BC 6A00                       		bpl.s	Obj77_FaceDel
0001B3BE                            
0001B3BE                            loc_181B6:
0001B3BE 6000                       		bra.s	Obj77_Display
0001B3C0                            ; ===========================================================================
0001B3C0                            
0001B3C0                            Obj77_FaceDel:
0001B3C0 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001B3C6                            ; ===========================================================================
0001B3C6                            
0001B3C6                            Obj77_FlameMain:; Routine 6
0001B3C6 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B3CC 2268 0034                  		movea.l	$34(a0),a1
0001B3D0 1011                       		move.b	(a1),d0
0001B3D2 B010                       		cmp.b	(a0),d0
0001B3D4 6600                       		bne.s	Obj77_FlameDel
0001B3D6 0C29 000E 0025             		cmpi.b	#$E,ob2ndRout(a1)
0001B3DC 6600                       		bne.s	loc_181F0
0001B3DE 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B3E4 4A28 0001                  		tst.b	1(a0)
0001B3E8 6A00                       		bpl.s	Obj77_FlameDel
0001B3EA 6000                       		bra.s	loc_181F0
0001B3EC                            ; ===========================================================================
0001B3EC 4A69 0010                  		tst.w	obVelX(a1)
0001B3F0 6700                       		beq.s	loc_181F0
0001B3F2 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B3F8                            
0001B3F8                            loc_181F0:
0001B3F8 6000                       		bra.s	Obj77_Display
0001B3FA                            ; ===========================================================================
0001B3FA                            
0001B3FA                            Obj77_FlameDel:
0001B3FA 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001B400                            ; ===========================================================================
0001B400                            
0001B400                            Obj77_Display:
0001B400 43F9 0001 AE8E             		lea	(Ani_Eggman).l,a1
0001B406 4EB9 0000 C574             		jsr	(AnimateSprite).l
0001B40C 2268 0034                  		movea.l	$34(a0),a1
0001B410 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B416 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B41C 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B422 7003                       		moveq	#3,d0
0001B424 C028 0022                  		and.b	obStatus(a0),d0
0001B428 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B42E 8128 0001                  		or.b	d0,obRender(a0)
0001B432 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001B432 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001B438                            		include	"_incObj\73 Boss - Marble.asm"
0001B438                            ; ---------------------------------------------------------------------------
0001B438                            ; Object 73 - Eggman (MZ)
0001B438                            ; ---------------------------------------------------------------------------
0001B438                            
0001B438                            BossMarble:
0001B438 7000                       		moveq	#0,d0
0001B43A 1028 0024                  		move.b	obRoutine(a0),d0
0001B43E 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001B442 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001B446                            ; ===========================================================================
0001B446 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001B448 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001B44A 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001B44C 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001B44E 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001B450                            
0001B450 0200 0200                  Obj73_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001B454 0401 0200                  		dc.b 4,	1, $02, $00
0001B458 0607 0200                  		dc.b 6,	7, $02, $00
0001B45C 0800 0180                  		dc.b 8,	0, $01, $80
0001B460                            ; ===========================================================================
0001B460                            
0001B460                            Obj73_Main:	; Routine 0
0001B460 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B466 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B46C 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B472 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B478 45FA FFD6                  		lea	Obj73_ObjData(pc),a2
0001B47C 2248                       		movea.l	a0,a1
0001B47E 7203                       		moveq	#3,d1
0001B480 6000                       		bra.s	Obj73_LoadBoss
0001B482                            ; ===========================================================================
0001B482                            
0001B482                            Obj73_Loop:
0001B482 4EB9 0000 FA6A             		jsr	(FindNextFreeObj).l
0001B488 6600                       		bne.s	Obj73_ShipMain
0001B48A 12BC 0073                  		move.b	#id_BossMarble,0(a1)
0001B48E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B494 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B49A                            
0001B49A                            Obj73_LoadBoss:
0001B49A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B4A0 4229 0025                  		clr.b	ob2ndRout(a1)
0001B4A4 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B4A8 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B4AC 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001B4B0 237C 0001 AEDE 0004        		move.l	#Map_Eggman,obMap(a1)
0001B4B8 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B4BE 137C 0004 0001             		move.b	#4,obRender(a1)
0001B4C4 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B4CA 2348 0034                  		move.l	a0,$34(a1)
0001B4CE 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001B4D2                            
0001B4D2                            Obj73_ShipMain:	; Routine 2
0001B4D2 7000                       		moveq	#0,d0
0001B4D4 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B4D8 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001B4DC 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001B4E0 43F9 0001 AE8E             		lea	(Ani_Eggman).l,a1
0001B4E6 4EB9 0000 C574             		jsr	(AnimateSprite).l
0001B4EC 7003                       		moveq	#3,d0
0001B4EE C028 0022                  		and.b	obStatus(a0),d0
0001B4F2 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B4F8 8128 0001                  		or.b	d0,obRender(a0)
0001B4FC 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001B502                            ; ===========================================================================
0001B502 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001B504 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001B506 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001B508 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001B50A 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001B50C                            ; ===========================================================================
0001B50C                            
0001B50C                            loc_18302:
0001B50C 1028 003F                  		move.b	$3F(a0),d0
0001B510 5428 003F                  		addq.b	#2,$3F(a0)
0001B514 4EB9 0000 3BA2             		jsr	(CalcSine).l
0001B51A E440                       		asr.w	#2,d0
0001B51C 3140 0012                  		move.w	d0,obVelY(a0)
0001B520 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001B526 6100 F552                  		bsr.w	BossMove
0001B52A 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B530 6600                       		bne.s	loc_18334
0001B532 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B536 4228 0028                  		clr.b	obSubtype(a0)
0001B53A 42A8 0010                  		clr.l	obVelX(a0)
0001B53E                            
0001B53E                            loc_18334:
0001B53E 4EB9 0000 3B7C             		jsr	(RandomNumber).l
0001B544 1140 0034                  		move.b	d0,$34(a0)
0001B548                            
0001B548                            loc_1833E:
0001B548 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B54E 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B554 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0001B55A 6400                       		bcc.s	locret_18390
0001B55C 4A28 0022                  		tst.b	obStatus(a0)
0001B560 6B00                       		bmi.s	loc_18392
0001B562 4A28 0020                  		tst.b	obColType(a0)
0001B566 6600                       		bne.s	locret_18390
0001B568 4A28 003E                  		tst.b	$3E(a0)
0001B56C 6600                       		bne.s	loc_18374
0001B56E 117C 0028 003E             		move.b	#$28,$3E(a0)
0001B57E                            
0001B57E                            loc_18374:
0001B57E 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B582 7000                       		moveq	#0,d0
0001B584 4A51                       		tst.w	(a1)
0001B586 6600                       		bne.s	loc_18382
0001B588 303C 0EEE                  		move.w	#cWhite,d0
0001B58C                            
0001B58C                            loc_18382:
0001B58C 3280                       		move.w	d0,(a1)
0001B58E 5328 003E                  		subq.b	#1,$3E(a0)
0001B592 6600                       		bne.s	locret_18390
0001B594 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B59A                            
0001B59A                            locret_18390:
0001B59A 4E75                       		rts	
0001B59C                            ; ===========================================================================
0001B59C                            
0001B59C                            loc_18392:
0001B59C 7064                       		moveq	#100,d0
0001B59E 6100 0000                  		bsr.w	AddPoints
0001B5A2 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
0001B5A8 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001B5AE 4268 0010                  		clr.w	obVelX(a0)
0001B5B2 4E75                       		rts	
0001B5B4                            ; ===========================================================================
0001B5B4                            
0001B5B4                            loc_183AA:
0001B5B4 7000                       		moveq	#0,d0
0001B5B6 1028 0028                  		move.b	obSubtype(a0),d0
0001B5BA 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001B5BE 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001B5C2 0228 0006 0028             		andi.b	#6,obSubtype(a0)
0001B5C8 6000 FF7E                  		bra.w	loc_1833E
0001B5CC                            ; ===========================================================================
0001B5CC 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001B5CE 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B5D0 0000                       		dc.w loc_183CA-off_183C2
0001B5D2 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B5D4                            ; ===========================================================================
0001B5D4                            
0001B5D4                            loc_183CA:
0001B5D4 4A68 0010                  		tst.w	obVelX(a0)
0001B5D8 6600                       		bne.s	loc_183FE
0001B5DA 7040                       		moveq	#$40,d0
0001B5DC 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B5E2 6700                       		beq.s	loc_183E6
0001B5E4 6500                       		bcs.s	loc_183DE
0001B5E6 4440                       		neg.w	d0
0001B5E8                            
0001B5E8                            loc_183DE:
0001B5E8 3140 0012                  		move.w	d0,obVelY(a0)
0001B5EC 6000 F48C                  		bra.w	BossMove
0001B5F0                            ; ===========================================================================
0001B5F0                            
0001B5F0                            loc_183E6:
0001B5F0 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001B5F6 317C 0100 0012             		move.w	#$100,obVelY(a0)
0001B5FC 0828 0000 0022             		btst	#0,obStatus(a0)
0001B602 6600                       		bne.s	loc_183FE
0001B604 4468 0010                  		neg.w	obVelX(a0)
0001B608                            
0001B608                            loc_183FE:
0001B608 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001B60E 6400                       		bcc.s	Obj73_MakeLava
0001B610 6100 F468                  		bsr.w	BossMove
0001B614 5968 0012                  		subq.w	#4,obVelY(a0)
0001B618                            
0001B618                            Obj73_MakeLava:
0001B618 5328 0034                  		subq.b	#1,$34(a0)
0001B61C 6400                       		bcc.s	loc_1845C
0001B61E 4EB9 0000 FA54             		jsr	(FindFreeObj).l
0001B624 6600                       		bne.s	loc_1844A
0001B626 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
0001B62A 337C 02E8 000C             		move.w	#$2E8,obY(a1)	; set Y	position
0001B630 4EB9 0000 3B7C             		jsr	(RandomNumber).l
0001B636 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001B63C 80FC 0050                  		divu.w	#$50,d0
0001B640 4840                       		swap	d0
0001B642 0640 1878                  		addi.w	#$1878,d0
0001B646 3340 0008                  		move.w	d0,obX(a1)
0001B64A EE09                       		lsr.b	#7,d1
0001B64C 337C 00FF 0028             		move.w	#$FF,obSubtype(a1)
0001B652                            
0001B652                            loc_1844A:
0001B652 4EB9 0000 3B7C             		jsr	(RandomNumber).l
0001B658 0200 001F                  		andi.b	#$1F,d0
0001B65C 0600 0040                  		addi.b	#$40,d0
0001B660 1140 0034                  		move.b	d0,$34(a0)
0001B664                            
0001B664                            loc_1845C:
0001B664 0828 0000 0022             		btst	#0,obStatus(a0)
0001B66A 6700                       		beq.s	loc_18474
0001B66C 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B672 6D00                       		blt.s	locret_1849C
0001B674 317C 1910 0030             		move.w	#$1910,$30(a0)
0001B67A 6000                       		bra.s	loc_18482
0001B67C                            ; ===========================================================================
0001B67C                            
0001B67C                            loc_18474:
0001B67C 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001B682 6E00                       		bgt.s	locret_1849C
0001B684 317C 1830 0030             		move.w	#$1830,$30(a0)
0001B68A                            
0001B68A                            loc_18482:
0001B68A 4268 0010                  		clr.w	obVelX(a0)
0001B68E 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B694 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B69A 6400                       		bcc.s	loc_18498
0001B69C 4468 0012                  		neg.w	obVelY(a0)
0001B6A0                            
0001B6A0                            loc_18498:
0001B6A0 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B6A4                            
0001B6A4                            locret_1849C:
0001B6A4 4E75                       		rts	
0001B6A6                            ; ===========================================================================
0001B6A6                            
0001B6A6                            Obj73_MakeLava2:
0001B6A6 6100 F3D2                  		bsr.w	BossMove
0001B6AA 3028 0038                  		move.w	$38(a0),d0
0001B6AE 0440 022C                  		subi.w	#$22C,d0
0001B6B2 6E00                       		bgt.s	locret_184F4
0001B6B4 303C 022C                  		move.w	#$22C,d0
0001B6B8 4A68 0012                  		tst.w	obVelY(a0)
0001B6BC 6700                       		beq.s	loc_184EA
0001B6BE 4268 0012                  		clr.w	obVelY(a0)
0001B6C2 317C 0050 003C             		move.w	#$50,$3C(a0)
0001B6C8 0868 0000 0022             		bchg	#0,obStatus(a0)
0001B6CE 4EB9 0000 FA54             		jsr	(FindFreeObj).l
0001B6D4 6600                       		bne.s	loc_184EA
0001B6D6 3368 0030 0008             		move.w	$30(a0),obX(a1)
0001B6DC 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001B6E2 0669 0018 000C             		addi.w	#$18,obY(a1)
0001B6E8 12BC 0074                  		move.b	#id_BossFire,(a1)	; load lava ball object
0001B6EC 137C 0001 0028             		move.b	#1,obSubtype(a1)
0001B6F2                            
0001B6F2                            loc_184EA:
0001B6F2 5368 003C                  		subq.w	#1,$3C(a0)
0001B6F6 6600                       		bne.s	locret_184F4
0001B6F8 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B6FC                            
0001B6FC                            locret_184F4:
0001B6FC 4E75                       		rts	
0001B6FE                            ; ===========================================================================
0001B6FE                            
0001B6FE                            loc_184F6:
0001B6FE 5368 003C                  		subq.w	#1,$3C(a0)
0001B702 6B00                       		bmi.s	loc_18500
0001B704 6000 F332                  		bra.w	BossDefeated
0001B708                            ; ===========================================================================
0001B708                            
0001B708                            loc_18500:
0001B708 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B70E 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001B714 4268 0010                  		clr.w	obVelX(a0)
0001B718 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B71C 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001B722 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001B726 6600                       		bne.s	locret_1852A
0001B728 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001B72E 4268 0012                  		clr.w	obVelY(a0)
0001B732                            
0001B732                            locret_1852A:
0001B732 4E75                       		rts	
0001B734                            ; ===========================================================================
0001B734                            
0001B734                            loc_1852C:
0001B734 5268 003C                  		addq.w	#1,$3C(a0)
0001B738 6700                       		beq.s	loc_18544
0001B73A 6A00                       		bpl.s	loc_1854E
0001B73C 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001B742 6400                       		bcc.s	loc_18544
0001B744 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B74A 6000                       		bra.s	loc_1857A
0001B74C                            ; ===========================================================================
0001B74C                            
0001B74C                            loc_18544:
0001B74C 4268 0012                  		clr.w	obVelY(a0)
0001B750 4268 003C                  		clr.w	$3C(a0)
0001B754 6000                       		bra.s	loc_1857A
0001B756                            ; ===========================================================================
0001B756                            
0001B756                            loc_1854E:
0001B756 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001B75C 6500                       		bcs.s	loc_18566
0001B75E 6700                       		beq.s	loc_1856C
0001B760 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001B766 6500                       		bcs.s	loc_1857A
0001B768 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B76C 6000                       		bra.s	loc_1857A
0001B76E                            ; ===========================================================================
0001B76E                            
0001B76E                            loc_18566:
0001B76E 5168 0012                  		subq.w	#8,obVelY(a0)
0001B772 6000                       		bra.s	loc_1857A
0001B774                            ; ===========================================================================
0001B774                            
0001B774                            loc_1856C:
0001B774 4268 0012                  		clr.w	obVelY(a0)
0001B782                            
0001B782                            loc_1857A:
0001B782 6100 F2F6                  		bsr.w	BossMove
0001B786 6000 FDC0                  		bra.w	loc_1833E
0001B78A                            ; ===========================================================================
0001B78A                            
0001B78A                            loc_18582:
0001B78A 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001B790 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B796 0C78 1960 F72A             		cmpi.w	#$1960,(v_limitright2).w
0001B79C 6400                       		bcc.s	loc_1859C
0001B79E 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B7A2 6000                       		bra.s	loc_185A2
0001B7A4                            ; ===========================================================================
0001B7A4                            
0001B7A4                            loc_1859C:
0001B7A4 4A28 0001                  		tst.b	obRender(a0)
0001B7A8 6A00                       		bpl.s	Obj73_ShipDel
0001B7AA                            
0001B7AA                            loc_185A2:
0001B7AA 6100 F2CE                  		bsr.w	BossMove
0001B7AE 6000 FD98                  		bra.w	loc_1833E
0001B7B2                            ; ===========================================================================
0001B7B2                            
0001B7B2                            Obj73_ShipDel:
0001B7B2 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001B7B8                            ; ===========================================================================
0001B7B8                            
0001B7B8                            Obj73_FaceMain:	; Routine 4
0001B7B8 7000                       		moveq	#0,d0
0001B7BA 7201                       		moveq	#1,d1
0001B7BC 2268 0034                  		movea.l	$34(a0),a1
0001B7C0 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B7C4 5540                       		subq.w	#2,d0
0001B7C6 6600                       		bne.s	loc_185D2
0001B7C8 0829 0001 0028             		btst	#1,obSubtype(a1)
0001B7CE 6700                       		beq.s	loc_185DA
0001B7D0 4A69 0012                  		tst.w	obVelY(a1)
0001B7D4 6600                       		bne.s	loc_185DA
0001B7D6 7204                       		moveq	#4,d1
0001B7D8 6000                       		bra.s	loc_185EE
0001B7DA                            ; ===========================================================================
0001B7DA                            
0001B7DA                            loc_185D2:
0001B7DA 5500                       		subq.b	#2,d0
0001B7DC 6B00                       		bmi.s	loc_185DA
0001B7DE 720A                       		moveq	#$A,d1
0001B7E0 6000                       		bra.s	loc_185EE
0001B7E2                            ; ===========================================================================
0001B7E2                            
0001B7E2                            loc_185DA:
0001B7E2 4A29 0020                  		tst.b	obColType(a1)
0001B7E6 6600                       		bne.s	loc_185E4
0001B7E8 7205                       		moveq	#5,d1
0001B7EA 6000                       		bra.s	loc_185EE
0001B7EC                            ; ===========================================================================
0001B7EC                            
0001B7EC                            loc_185E4:
0001B7EC 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B7F2 6500                       		bcs.s	loc_185EE
0001B7F4 7204                       		moveq	#4,d1
0001B7F6                            
0001B7F6                            loc_185EE:
0001B7F6 1141 001C                  		move.b	d1,obAnim(a0)
0001B7FA 5900                       		subq.b	#4,d0
0001B7FC 6600                       		bne.s	loc_18602
0001B7FE 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B804 4A28 0001                  		tst.b	obRender(a0)
0001B808 6A00                       		bpl.s	Obj73_FaceDel
0001B80A                            
0001B80A                            loc_18602:
0001B80A 6000                       		bra.s	Obj73_Display
0001B80C                            ; ===========================================================================
0001B80C                            
0001B80C                            Obj73_FaceDel:
0001B80C 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001B812                            ; ===========================================================================
0001B812                            
0001B812                            Obj73_FlameMain:; Routine 6
0001B812 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B818 2268 0034                  		movea.l	$34(a0),a1
0001B81C 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B822 6D00                       		blt.s	loc_1862A
0001B824 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B82A 4A28 0001                  		tst.b	obRender(a0)
0001B82E 6A00                       		bpl.s	Obj73_FlameDel
0001B830 6000                       		bra.s	loc_18636
0001B832                            ; ===========================================================================
0001B832                            
0001B832                            loc_1862A:
0001B832 4A69 0010                  		tst.w	obVelX(a1)
0001B836 6700                       		beq.s	loc_18636
0001B838 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B83E                            
0001B83E                            loc_18636:
0001B83E 6000                       		bra.s	Obj73_Display
0001B840                            ; ===========================================================================
0001B840                            
0001B840                            Obj73_FlameDel:
0001B840 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001B846                            ; ===========================================================================
0001B846                            
0001B846                            Obj73_Display:
0001B846 43F9 0001 AE8E             		lea	(Ani_Eggman).l,a1
0001B84C 4EB9 0000 C574             		jsr	(AnimateSprite).l
0001B852                            
0001B852                            loc_1864A:
0001B852 2268 0034                  		movea.l	$34(a0),a1
0001B856 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B85C 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B862 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B868 7003                       		moveq	#3,d0
0001B86A C028 0022                  		and.b	obStatus(a0),d0
0001B86E 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B874 8128 0001                  		or.b	d0,obRender(a0)
0001B878 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001B87E                            ; ===========================================================================
0001B87E                            
0001B87E                            Obj73_TubeMain:	; Routine 8
0001B87E 2268 0034                  		movea.l	$34(a0),a1
0001B882 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B888 6600                       		bne.s	loc_18688
0001B88A 4A28 0001                  		tst.b	obRender(a0)
0001B88E 6A00                       		bpl.s	Obj73_TubeDel
0001B890                            
0001B890                            loc_18688:
0001B890 217C 0001 AFCE 0004        		move.l	#Map_BossItems,obMap(a0)
0001B898 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001B89E 117C 0004 001A             		move.b	#4,obFrame(a0)
0001B8A4 60AC                       		bra.s	loc_1864A
0001B8A6                            ; ===========================================================================
0001B8A6                            
0001B8A6                            Obj73_TubeDel:
0001B8A6 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001B8A6 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001B8AC                            		include	"_incObj\74 MZ Boss Fire.asm"
0001B8AC                            ; ---------------------------------------------------------------------------
0001B8AC                            ; Object 74 - lava that	Eggman drops (MZ)
0001B8AC                            ; ---------------------------------------------------------------------------
0001B8AC                            
0001B8AC                            BossFire:
0001B8AC 7000                       		moveq	#0,d0
0001B8AE 1028 0024                  		move.b	obRoutine(a0),d0
0001B8B2 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001B8B6 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001B8BA 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001B8C0                            ; ===========================================================================
0001B8C0 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001B8C2 0000                       		dc.w Obj74_Action-Obj74_Index
0001B8C4 0000                       		dc.w loc_18886-Obj74_Index
0001B8C6 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001B8C8                            ; ===========================================================================
0001B8C8                            
0001B8C8                            Obj74_Main:	; Routine 0
0001B8C8 117C 0008 0016             		move.b	#8,obHeight(a0)
0001B8CE 117C 0008 0017             		move.b	#8,obWidth(a0)
0001B8D4 217C 0000 D1C6 0004        		move.l	#Map_Fire,obMap(a0)
0001B8DC 317C 0345 0002             		move.w	#$345,obGfx(a0)
0001B8E2 117C 0004 0001             		move.b	#4,obRender(a0)
0001B8E8 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001B8EE 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B8F4 117C 0008 0014             		move.b	#8,obActWid(a0)
0001B8FA 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B8FE 4A28 0028                  		tst.b	obSubtype(a0)
0001B902 6600                       		bne.s	loc_1870A
0001B904 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B90A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B90E 6000 0000                  		bra.w	loc_18886
0001B912                            ; ===========================================================================
0001B912                            
0001B912                            loc_1870A:
0001B912 117C 001E 0029             		move.b	#$1E,$29(a0)
0001B922                            
0001B922                            Obj74_Action:	; Routine 2
0001B922 7000                       		moveq	#0,d0
0001B924 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B928 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001B92C 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001B930 4EB9 0000 F4A6             		jsr	(SpeedToPos).l
0001B936 43F9 0001 0490             		lea	(Ani_Fire).l,a1
0001B93C 4EB9 0000 C574             		jsr	(AnimateSprite).l
0001B942 0C68 02E8 000C             		cmpi.w	#$2E8,obY(a0)
0001B948 6200                       		bhi.s	Obj74_Delete
0001B94A 4E75                       		rts	
0001B94C                            ; ===========================================================================
0001B94C                            
0001B94C                            Obj74_Delete:
0001B94C 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001B952                            ; ===========================================================================
0001B952 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001B954 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001B956 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001B958 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001B95A                            ; ===========================================================================
0001B95A                            
0001B95A                            Obj74_Drop:
0001B95A 08E8 0001 0022             		bset	#1,obStatus(a0)
0001B960 5328 0029                  		subq.b	#1,$29(a0)
0001B964 6A00                       		bpl.s	locret_18780
0001B966 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B96C 4228 0028                  		clr.b	obSubtype(a0)
0001B970 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B976 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B97C 6100 C5F6                  		bsr.w	ObjFloorDist
0001B980 4A41                       		tst.w	d1
0001B982 6A00                       		bpl.s	locret_18780
0001B984 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B988                            
0001B988                            locret_18780:
0001B988 4E75                       		rts	
0001B98A                            ; ===========================================================================
0001B98A                            
0001B98A                            Obj74_MakeFlame:
0001B98A 5568 000C                  		subq.w	#2,obY(a0)
0001B98E 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B994 317C 00A0 0010             		move.w	#$A0,obVelX(a0)
0001B99A 4268 0012                  		clr.w	obVelY(a0)
0001B99E 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B9A4 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B9AA 117C 0003 0029             		move.b	#3,$29(a0)
0001B9B0 4EB9 0000 FA6A             		jsr	(FindNextFreeObj).l
0001B9B6 6600                       		bne.s	loc_187CA
0001B9B8 47D1                       		lea	(a1),a3
0001B9BA 45D0                       		lea	(a0),a2
0001B9BC 7003                       		moveq	#3,d0
0001B9BE                            
0001B9BE                            Obj74_Loop:
0001B9BE 26DA                       		move.l	(a2)+,(a3)+
0001B9C0 26DA                       		move.l	(a2)+,(a3)+
0001B9C2 26DA                       		move.l	(a2)+,(a3)+
0001B9C4 26DA                       		move.l	(a2)+,(a3)+
0001B9C6 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001B9CA                            
0001B9CA 4469 0010                  		neg.w	obVelX(a1)
0001B9CE 5429 0025                  		addq.b	#2,ob2ndRout(a1)
0001B9D2                            
0001B9D2                            loc_187CA:
0001B9D2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B9D6 4E75                       		rts	
0001B9D8                            
0001B9D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B9D8                            
0001B9D8                            
0001B9D8                            Obj74_Duplicate2:
0001B9D8 4EB9 0000 FA6A             		jsr	(FindNextFreeObj).l
0001B9DE 6600                       		bne.s	locret_187EE
0001B9E0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B9E6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B9EC 12BC 0074                  		move.b	#id_BossFire,(a1)
0001B9F0 337C 0067 0028             		move.w	#$67,obSubtype(a1)
0001B9F6                            
0001B9F6                            locret_187EE:
0001B9F6 4E75                       		rts	
0001B9F8                            ; End of function Obj74_Duplicate2
0001B9F8                            
0001B9F8                            ; ===========================================================================
0001B9F8                            
0001B9F8                            Obj74_Duplicate:
0001B9F8 6100 C57A                  		bsr.w	ObjFloorDist
0001B9FC 4A41                       		tst.w	d1
0001B9FE 6A00                       		bpl.s	loc_18826
0001BA00 3028 0008                  		move.w	obX(a0),d0
0001BA04 0C40 1940                  		cmpi.w	#$1940,d0
0001BA08 6E00                       		bgt.s	loc_1882C
0001BA0A 3228 0030                  		move.w	$30(a0),d1
0001BA0E B240                       		cmp.w	d0,d1
0001BA10 6700                       		beq.s	loc_1881E
0001BA12 0240 0010                  		andi.w	#$10,d0
0001BA16 0241 0010                  		andi.w	#$10,d1
0001BA1A B240                       		cmp.w	d0,d1
0001BA1C 6700                       		beq.s	loc_1881E
0001BA1E 61B8                       		bsr.s	Obj74_Duplicate2
0001BA20 3168 0008 0032             		move.w	obX(a0),$32(a0)
0001BA26                            
0001BA26                            loc_1881E:
0001BA26 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BA2C 4E75                       		rts	
0001BA2E                            ; ===========================================================================
0001BA2E                            
0001BA2E                            loc_18826:
0001BA2E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BA32 4E75                       		rts	
0001BA34                            ; ===========================================================================
0001BA34                            
0001BA34                            loc_1882C:
0001BA34 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BA38 4E75                       		rts	
0001BA3A                            ; ===========================================================================
0001BA3A                            
0001BA3A                            Obj74_FallEdge:
0001BA3A 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001BA40 0668 0024 0012             		addi.w	#$24,obVelY(a0)	; make flame fall
0001BA46 3028 0008                  		move.w	obX(a0),d0
0001BA4A 9068 0032                  		sub.w	$32(a0),d0
0001BA4E 6A00                       		bpl.s	loc_1884A
0001BA50 4440                       		neg.w	d0
0001BA52                            
0001BA52                            loc_1884A:
0001BA52 0C40 0012                  		cmpi.w	#$12,d0
0001BA56 6600                       		bne.s	loc_18856
0001BA58 08A8 0007 0002             		bclr	#7,obGfx(a0)
0001BA5E                            
0001BA5E                            loc_18856:
0001BA5E 6100 C514                  		bsr.w	ObjFloorDist
0001BA62 4A41                       		tst.w	d1
0001BA64 6A00                       		bpl.s	locret_1887E
0001BA66 5328 0029                  		subq.b	#1,$29(a0)
0001BA6A 6700                       		beq.s	Obj74_Delete2
0001BA6C 4268 0012                  		clr.w	obVelY(a0)
0001BA70 3168 0032 0008             		move.w	$32(a0),obX(a0)
0001BA76 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001BA7C 08E8 0007 0002             		bset	#7,obGfx(a0)
0001BA82 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001BA86                            
0001BA86                            locret_1887E:
0001BA86 4E75                       		rts	
0001BA88                            ; ===========================================================================
0001BA88                            
0001BA88                            Obj74_Delete2:
0001BA88 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001BA8E                            ; ===========================================================================
0001BA8E                            
0001BA8E                            loc_18886:	; Routine 4
0001BA8E 08E8 0007 0002             		bset	#7,obGfx(a0)
0001BA94 5328 0029                  		subq.b	#1,$29(a0)
0001BA98 6600                       		bne.s	Obj74_Animate
0001BA9A 117C 0001 001C             		move.b	#1,obAnim(a0)
0001BAA0 5968 000C                  		subq.w	#4,obY(a0)
0001BAA4 4228 0020                  		clr.b	obColType(a0)
0001BAA8                            
0001BAA8                            Obj74_Animate:
0001BAA8 43F9 0001 0490             		lea	(Ani_Fire).l,a1
0001BAAE 4EF9 0000 C574             		jmp	(AnimateSprite).l
0001BAB4                            ; ===========================================================================
0001BAB4                            
0001BAB4                            Obj74_Delete3:	; Routine 6
0001BAB4 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001BAB4 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001BABA                            
0001BABA                            	Obj7A_Delete:
0001BABA 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001BAC0                            
0001BAC0                            		include	"_incObj\7A Boss - Star Light.asm"
0001BAC0                            ; ---------------------------------------------------------------------------
0001BAC0                            ; Object 7A - Eggman (SLZ)
0001BAC0                            ; ---------------------------------------------------------------------------
0001BAC0                            
0001BAC0                            BossStarLight:
0001BAC0 7000                       		moveq	#0,d0
0001BAC2 1028 0024                  		move.b	obRoutine(a0),d0
0001BAC6 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001BACA 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001BACE                            ; ===========================================================================
0001BACE 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001BAD0 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001BAD2 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001BAD4 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001BAD6 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001BAD8                            
0001BAD8 0200 0200                  Obj7A_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001BADC 0401 0200                  		dc.b 4,	1, $02, $00
0001BAE0 0607 0200                  		dc.b 6,	7, $02, $00
0001BAE4 0800 0180                  		dc.b 8,	0, $01, $80
0001BAE8                            ; ===========================================================================
0001BAE8                            
0001BAE8                            Obj7A_Main:
0001BAE8 317C 2188 0008             		move.w	#$2188,obX(a0)
0001BAEE 317C 0228 000C             		move.w	#$228,obY(a0)
0001BAF4 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BAFA 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001BB00 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BB06 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001BB0C 45FA FFCA                  		lea	Obj7A_ObjData(pc),a2
0001BB10 2248                       		movea.l	a0,a1
0001BB12 7203                       		moveq	#3,d1
0001BB14 6000                       		bra.s	Obj7A_LoadBoss
0001BB16                            ; ===========================================================================
0001BB16                            
0001BB16                            Obj7A_Loop:
0001BB16 4EB9 0000 FA6A             		jsr	(FindNextFreeObj).l
0001BB1C 6600                       		bne.s	loc_1895C
0001BB1E 12BC 007A                  		move.b	#id_BossStarLight,0(a1)
0001BB22 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BB28 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BB2E                            
0001BB2E                            Obj7A_LoadBoss:
0001BB2E 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BB34 4229 0025                  		clr.b	ob2ndRout(a1)
0001BB38 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001BB3C 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001BB40 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001BB44 237C 0001 AEDE 0004        		move.l	#Map_Eggman,obMap(a1)
0001BB4C 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001BB52 137C 0004 0001             		move.b	#4,obRender(a1)
0001BB58 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001BB5E 2348 0034                  		move.l	a0,$34(a1)
0001BB62 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001BB66                            
0001BB66                            loc_1895C:
0001BB66 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BB6A 45E8 002A                  		lea	$2A(a0),a2
0001BB6E 705E                       		moveq	#$5E,d0
0001BB70 723E                       		moveq	#$3E,d1
0001BB72                            
0001BB72                            loc_18968:
0001BB72 B011                       		cmp.b	(a1),d0
0001BB74 6600                       		bne.s	loc_18974
0001BB76 4A29 0028                  		tst.b	obSubtype(a1)
0001BB7A 6700                       		beq.s	loc_18974
0001BB7C 34C9                       		move.w	a1,(a2)+
0001BB7E                            
0001BB7E                            loc_18974:
0001BB7E D2FC 0040                  		adda.w	#$40,a1
0001BB82 51C9 FFEE                  		dbf	d1,loc_18968
0001BB86                            
0001BB86                            Obj7A_ShipMain:	; Routine 2
0001BB86 7000                       		moveq	#0,d0
0001BB88 1028 0025                  		move.b	ob2ndRout(a0),d0
0001BB8C 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001BB90 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001BB94 43F9 0001 AE8E             		lea	(Ani_Eggman).l,a1
0001BB9A 4EB9 0000 C574             		jsr	(AnimateSprite).l
0001BBA0 7003                       		moveq	#3,d0
0001BBA2 C028 0022                  		and.b	obStatus(a0),d0
0001BBA6 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BBAC 8128 0001                  		or.b	d0,obRender(a0)
0001BBB0 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001BBB6                            ; ===========================================================================
0001BBB6 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001BBB8 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001BBBA 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001BBBC 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001BBBE 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001BBC0 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001BBC2                            ; ===========================================================================
0001BBC2                            
0001BBC2                            loc_189B8:
0001BBC2 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001BBC8 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001BBCE 6400                       		bcc.s	loc_189CA
0001BBD0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BBD4                            
0001BBD4                            loc_189CA:
0001BBD4 6100 EEA4                  		bsr.w	BossMove
0001BBD8 1028 003F                  		move.b	$3F(a0),d0
0001BBDC 5428 003F                  		addq.b	#2,$3F(a0)
0001BBE0 4EB9 0000 3BA2             		jsr	(CalcSine).l
0001BBE6 EC40                       		asr.w	#6,d0
0001BBE8 D068 0038                  		add.w	$38(a0),d0
0001BBEC 3140 000C                  		move.w	d0,obY(a0)
0001BBF0 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001BBF6 6000                       		bra.s	loc_189FE
0001BBF8                            ; ===========================================================================
0001BBF8                            
0001BBF8                            loc_189EE:
0001BBF8 6100 EE80                  		bsr.w	BossMove
0001BBFC 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001BC02 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001BC08                            
0001BC08                            loc_189FE:
0001BC08 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001BC0E 6400                       		bcc.s	locret_18A44
0001BC10 4A28 0022                  		tst.b	obStatus(a0)
0001BC14 6B00                       		bmi.s	loc_18A46
0001BC16 4A28 0020                  		tst.b	obColType(a0)
0001BC1A 6600                       		bne.s	locret_18A44
0001BC1C 4A28 003E                  		tst.b	$3E(a0)
0001BC20 6600                       		bne.s	loc_18A28
0001BC22 117C 0020 003E             		move.b	#$20,$3E(a0)
0001BC32                            
0001BC32                            loc_18A28:
0001BC32 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001BC36 7000                       		moveq	#0,d0
0001BC38 4A51                       		tst.w	(a1)
0001BC3A 6600                       		bne.s	loc_18A36
0001BC3C 303C 0EEE                  		move.w	#cWhite,d0
0001BC40                            
0001BC40                            loc_18A36:
0001BC40 3280                       		move.w	d0,(a1)
0001BC42 5328 003E                  		subq.b	#1,$3E(a0)
0001BC46 6600                       		bne.s	locret_18A44
0001BC48 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BC4E                            
0001BC4E                            locret_18A44:
0001BC4E 4E75                       		rts	
0001BC50                            ; ===========================================================================
0001BC50                            
0001BC50                            loc_18A46:
0001BC50 7064                       		moveq	#100,d0
0001BC52 6100 0000                  		bsr.w	AddPoints
0001BC56 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001BC5C 117C 0078 003C             		move.b	#$78,$3C(a0)
0001BC62 4268 0010                  		clr.w	obVelX(a0)
0001BC66 4E75                       		rts	
0001BC68                            ; ===========================================================================
0001BC68                            
0001BC68                            loc_18A5E:
0001BC68 3028 0030                  		move.w	$30(a0),d0
0001BC6C 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001BC72 0828 0000 0022             		btst	#0,obStatus(a0)
0001BC78 6600                       		bne.s	loc_18A7C
0001BC7A 4468 0010                  		neg.w	obVelX(a0)
0001BC7E 0C40 2008                  		cmpi.w	#$2008,d0
0001BC82 6E00                       		bgt.s	loc_18A88
0001BC84 6000                       		bra.s	loc_18A82
0001BC86                            ; ===========================================================================
0001BC86                            
0001BC86                            loc_18A7C:
0001BC86 0C40 2138                  		cmpi.w	#$2138,d0
0001BC8A 6D00                       		blt.s	loc_18A88
0001BC8C                            
0001BC8C                            loc_18A82:
0001BC8C 0868 0000 0022             		bchg	#0,obStatus(a0)
0001BC92                            
0001BC92                            loc_18A88:
0001BC92 3028 0008                  		move.w	8(a0),d0
0001BC96 72FF                       		moveq	#-1,d1
0001BC98 7402                       		moveq	#2,d2
0001BC9A 45E8 002A                  		lea	$2A(a0),a2
0001BC9E 7828                       		moveq	#$28,d4
0001BCA0 4A68 0010                  		tst.w	obVelX(a0)
0001BCA4 6A00                       		bpl.s	loc_18A9E
0001BCA6 4444                       		neg.w	d4
0001BCA8                            
0001BCA8                            loc_18A9E:
0001BCA8 321A                       		move.w	(a2)+,d1
0001BCAA 2641                       		movea.l	d1,a3
0001BCAC 082B 0003 0022             		btst	#3,obStatus(a3)
0001BCB2 6600                       		bne.s	loc_18AB4
0001BCB4 362B 0008                  		move.w	8(a3),d3
0001BCB8 D644                       		add.w	d4,d3
0001BCBA 9640                       		sub.w	d0,d3
0001BCBC 6700                       		beq.s	loc_18AC0
0001BCBE                            
0001BCBE                            loc_18AB4:
0001BCBE 51CA FFE8                  		dbf	d2,loc_18A9E
0001BCC2                            
0001BCC2 1142 0028                  		move.b	d2,obSubtype(a0)
0001BCC6 6000 FF0C                  		bra.w	loc_189CA
0001BCCA                            ; ===========================================================================
0001BCCA                            
0001BCCA                            loc_18AC0:
0001BCCA 1142 0028                  		move.b	d2,obSubtype(a0)
0001BCCE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BCD2 117C 0028 003C             		move.b	#$28,$3C(a0)
0001BCD8 6000 FEFA                  		bra.w	loc_189CA
0001BCDC                            ; ===========================================================================
0001BCDC                            
0001BCDC                            Obj7A_MakeBall:
0001BCDC 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001BCE2 6600                       		bne.s	loc_18B36
0001BCE4 70FF                       		moveq	#-1,d0
0001BCE6 1028 0028                  		move.b	obSubtype(a0),d0
0001BCEA 4880                       		ext.w	d0
0001BCEC 6B00                       		bmi.s	loc_18B40
0001BCEE 5540                       		subq.w	#2,d0
0001BCF0 4440                       		neg.w	d0
0001BCF2 D040                       		add.w	d0,d0
0001BCF4 43E8 002A                  		lea	$2A(a0),a1
0001BCF8 3031 0000                  		move.w	(a1,d0.w),d0
0001BCFC 2440                       		movea.l	d0,a2
0001BCFE 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BD02 723E                       		moveq	#$3E,d1
0001BD04                            
0001BD04                            loc_18AFA:
0001BD04 B0A9 003C                  		cmp.l	$3C(a1),d0
0001BD08 6700                       		beq.s	loc_18B40
0001BD0A D2FC 0040                  		adda.w	#$40,a1
0001BD0E 51C9 FFF4                  		dbf	d1,loc_18AFA
0001BD12                            
0001BD12 2F08                       		move.l	a0,-(sp)
0001BD14 41D2                       		lea	(a2),a0
0001BD16 4EB9 0000 FA6A             		jsr	(FindNextFreeObj).l
0001BD1C 205F                       		movea.l	(sp)+,a0
0001BD1E 6600                       		bne.s	loc_18B40
0001BD20 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load spiked ball object
0001BD24 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BD2A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BD30 0669 0020 000C             		addi.w	#$20,obY(a1)
0001BD36 136A 0022 0022             		move.b	obStatus(a2),obStatus(a1)
0001BD3C 234A 003C                  		move.l	a2,$3C(a1)
0001BD40                            
0001BD40                            loc_18B36:
0001BD40 5328 003C                  		subq.b	#1,$3C(a0)
0001BD44 6700                       		beq.s	loc_18B40
0001BD46 6000 FEC0                  		bra.w	loc_189FE
0001BD4A                            ; ===========================================================================
0001BD4A                            
0001BD4A                            loc_18B40:
0001BD4A 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001BD4E 6000 FE84                  		bra.w	loc_189CA
0001BD52                            ; ===========================================================================
0001BD52                            
0001BD52                            loc_18B48:
0001BD52 5328 003C                  		subq.b	#1,$3C(a0)
0001BD56 6B00                       		bmi.s	loc_18B52
0001BD58 6000 ECDE                  		bra.w	BossDefeated
0001BD5C                            ; ===========================================================================
0001BD5C                            
0001BD5C                            loc_18B52:
0001BD5C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BD60 4268 0012                  		clr.w	obVelY(a0)
0001BD64 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BD6A 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001BD70 4268 0010                  		clr.w	obVelX(a0)
0001BD74 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001BD7A 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001BD7E 6600                       		bne.s	loc_18B7C
0001BD80 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001BD86                            
0001BD86                            loc_18B7C:
0001BD86 6000 FE80                  		bra.w	loc_189FE
0001BD8A                            ; ===========================================================================
0001BD8A                            
0001BD8A                            loc_18B80:
0001BD8A 5228 003C                  		addq.b	#1,$3C(a0)
0001BD8E 6700                       		beq.s	loc_18B90
0001BD90 6A00                       		bpl.s	loc_18B96
0001BD92 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001BD98 6000                       		bra.s	loc_18BC2
0001BD9A                            ; ===========================================================================
0001BD9A                            
0001BD9A                            loc_18B90:
0001BD9A 4268 0012                  		clr.w	obVelY(a0)
0001BD9E 6000                       		bra.s	loc_18BC2
0001BDA0                            ; ===========================================================================
0001BDA0                            
0001BDA0                            loc_18B96:
0001BDA0 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001BDA6 6500                       		bcs.s	loc_18BAE
0001BDA8 6700                       		beq.s	loc_18BB4
0001BDAA 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001BDB0 6500                       		bcs.s	loc_18BC2
0001BDB2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BDB6 6000                       		bra.s	loc_18BC2
0001BDB8                            ; ===========================================================================
0001BDB8                            
0001BDB8                            loc_18BAE:
0001BDB8 5168 0012                  		subq.w	#8,obVelY(a0)
0001BDBC 6000                       		bra.s	loc_18BC2
0001BDBE                            ; ===========================================================================
0001BDBE                            
0001BDBE                            loc_18BB4:
0001BDBE 4268 0012                          	clr.w    obVelY(a0)
0001BDC2 4A38 FE2D                          	tst.b     (v_invinc).w
0001BDC6 6600                               	bne.s   @boss_invinc
0001BDC8                            
0001BDC8 1038 F5C6                          	move.b   (v_Saved_music),d0
0001BDCC 6000 0000                          	bra.w      @boss_play
0001BDD0                            
0001BDD0                            	@boss_invinc:
0001BDD0 103C 0000                          	move.b #bgm_Invincible,d0
0001BDD4                            
0001BDD4                            	@boss_play:
0001BDD4 4EB8 129A                          	jsr PlaySound
0001BDD8                            
0001BDD8                            loc_18BC2:
0001BDD8 6000 FE1E                  		bra.w	loc_189EE
0001BDDC                            ; ===========================================================================
0001BDDC                            
0001BDDC                            loc_18BC6:
0001BDDC 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001BDE2 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001BDE8 0C78 2160 F72A             		cmpi.w	#$2160,(v_limitright2).w
0001BDEE 6400                       		bcc.s	loc_18BE0
0001BDF0 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001BDF4 6000                       		bra.s	loc_18BE8
0001BDF6                            ; ===========================================================================
0001BDF6                            
0001BDF6                            loc_18BE0:
0001BDF6 4A28 0001                  		tst.b	obRender(a0)
0001BDFA 6A00 FCBE                  		bpl.w	Obj7A_Delete
0001BDFE                            
0001BDFE                            loc_18BE8:
0001BDFE 6100 EC7A                  		bsr.w	BossMove
0001BE02 6000 FDD0                  		bra.w	loc_189CA
0001BE06                            ; ===========================================================================
0001BE06                            
0001BE06                            Obj7A_FaceMain:	; Routine 4
0001BE06 7000                       		moveq	#0,d0
0001BE08 7201                       		moveq	#1,d1
0001BE0A 2268 0034                  		movea.l	$34(a0),a1
0001BE0E 1029 0025                  		move.b	ob2ndRout(a1),d0
0001BE12 0C00 0006                  		cmpi.b	#6,d0
0001BE16 6B00                       		bmi.s	loc_18C06
0001BE18 720A                       		moveq	#$A,d1
0001BE1A 6000                       		bra.s	loc_18C1A
0001BE1C                            ; ===========================================================================
0001BE1C                            
0001BE1C                            loc_18C06:
0001BE1C 4A29 0020                  		tst.b	obColType(a1)
0001BE20 6600                       		bne.s	loc_18C10
0001BE22 7205                       		moveq	#5,d1
0001BE24 6000                       		bra.s	loc_18C1A
0001BE26                            ; ===========================================================================
0001BE26                            
0001BE26                            loc_18C10:
0001BE26 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001BE2C 6500                       		bcs.s	loc_18C1A
0001BE2E 7204                       		moveq	#4,d1
0001BE30                            
0001BE30                            loc_18C1A:
0001BE30 1141 001C                  		move.b	d1,obAnim(a0)
0001BE34 0C00 000A                  		cmpi.b	#$A,d0
0001BE38 6600                       		bne.s	loc_18C32
0001BE3A 117C 0006 001C             		move.b	#6,obAnim(a0)
0001BE40 4A28 0001                  		tst.b	obRender(a0)
0001BE44 6A00 FC74                  		bpl.w	Obj7A_Delete
0001BE48                            
0001BE48                            loc_18C32:
0001BE48 6000                       		bra.s	loc_18C6C
0001BE4A                            ; ===========================================================================
0001BE4A                            
0001BE4A                            Obj7A_FlameMain:; Routine 6
0001BE4A 117C 0008 001C             		move.b	#8,obAnim(a0)
0001BE50 2268 0034                  		movea.l	$34(a0),a1
0001BE54 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BE5A 6600                       		bne.s	loc_18C56
0001BE5C 4A28 0001                  		tst.b	obRender(a0)
0001BE60 6A00 FC58                  		bpl.w	Obj7A_Delete
0001BE64 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001BE6A 6000                       		bra.s	loc_18C6C
0001BE6C                            ; ===========================================================================
0001BE6C                            
0001BE6C                            loc_18C56:
0001BE6C 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001BE72 6E00                       		bgt.s	loc_18C6C
0001BE74 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001BE7A 6D00                       		blt.s	loc_18C6C
0001BE7C 117C 0007 001C             		move.b	#7,obAnim(a0)
0001BE82                            
0001BE82                            loc_18C6C:
0001BE82 43F9 0001 AE8E             		lea	(Ani_Eggman).l,a1
0001BE88 4EB9 0000 C574             		jsr	(AnimateSprite).l
0001BE8E                            
0001BE8E                            loc_18C78:
0001BE8E 2268 0034                  		movea.l	$34(a0),a1
0001BE92 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001BE98 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001BE9E 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001BEA4 7003                       		moveq	#3,d0
0001BEA6 C028 0022                  		and.b	obStatus(a0),d0
0001BEAA 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BEB0 8128 0001                  		or.b	d0,obRender(a0)
0001BEB4 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001BEBA                            ; ===========================================================================
0001BEBA                            
0001BEBA                            Obj7A_TubeMain:	; Routine 8
0001BEBA 2268 0034                  		movea.l	$34(a0),a1
0001BEBE 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BEC4 6600                       		bne.s	loc_18CB8
0001BEC6 4A28 0001                  		tst.b	obRender(a0)
0001BECA 6A00 FBEE                  		bpl.w	Obj7A_Delete
0001BECE                            
0001BECE                            loc_18CB8:
0001BECE 217C 0001 AFCE 0004        		move.l	#Map_BossItems,obMap(a0)
0001BED6 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001BEDC 117C 0003 001A             		move.b	#3,obFrame(a0)
0001BEE2 60AA                       		bra.s	loc_18C78
0001BEE2 60AA                       		bra.s	loc_18C78
0001BEE4                            		include	"_incObj\7B SLZ Boss Spikeball.asm"
0001BEE4                            ; ---------------------------------------------------------------------------
0001BEE4                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001BEE4                            ; ---------------------------------------------------------------------------
0001BEE4                            
0001BEE4                            BossSpikeball:
0001BEE4 7000                       		moveq	#0,d0
0001BEE6 1028 0024                  		move.b	obRoutine(a0),d0
0001BEEA 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001BEEE 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001BEF2 3028 0030                  		move.w	$30(a0),d0
0001BEF6 0240 FF80                  		andi.w	#$FF80,d0
0001BEFA 3238 F700                  		move.w	(v_screenposx).w,d1
0001BEFE 0441 0080                  		subi.w	#$80,d1
0001BF02 0241 FF80                  		andi.w	#$FF80,d1
0001BF06 9041                       		sub.w	d1,d0
0001BF08 6B00 FBB0                  		bmi.w	Obj7A_Delete
0001BF0C 0C40 0280                  		cmpi.w	#$280,d0
0001BF10 6200 FBA8                  		bhi.w	Obj7A_Delete
0001BF14 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001BF1A                            ; ===========================================================================
0001BF1A 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001BF1C 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001BF1E 0000                       		dc.w loc_18DC6-Obj7B_Index
0001BF20 0000                       		dc.w loc_18EAA-Obj7B_Index
0001BF22 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001BF24 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001BF26                            ; ===========================================================================
0001BF26                            
0001BF26                            Obj7B_Main:	; Routine 0
0001BF26 217C 0001 3A6A 0004        		move.l	#Map_SSawBall,obMap(a0)
0001BF2E 317C 0518 0002             		move.w	#$518,obGfx(a0)
0001BF34 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BF3A 0028 0004 0001             		ori.b	#4,obRender(a0)
0001BF40 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001BF46 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001BF4C 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001BF52 2268 003C                  		movea.l	$3C(a0),a1
0001BF56 3169 0008 0030             		move.w	obX(a1),$30(a0)
0001BF5C 3169 000C 0034             		move.w	obY(a1),$34(a0)
0001BF62 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BF68 3028 0008                  		move.w	obX(a0),d0
0001BF6C B069 0008                  		cmp.w	obX(a1),d0
0001BF70 6E00                       		bgt.s	loc_18D68
0001BF72 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BF78 117C 0002 003A             		move.b	#2,$3A(a0)
0001BF7E                            
0001BF7E                            loc_18D68:
0001BF7E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BF82                            
0001BF82                            Obj7B_Fall:	; Routine 2
0001BF82 4EB9 0000 F46E             		jsr	(ObjectFall).l
0001BF88 2268 003C                  		movea.l	$3C(a0),a1
0001BF8C 45F9 0000 0000             		lea	(word_19018).l,a2
0001BF92 7000                       		moveq	#0,d0
0001BF94 1029 001A                  		move.b	obFrame(a1),d0
0001BF98 3228 0008                  		move.w	8(a0),d1
0001BF9C 9268 0030                  		sub.w	$30(a0),d1
0001BFA0 6400                       		bcc.s	loc_18D8E
0001BFA2 5440                       		addq.w	#2,d0
0001BFA4                            
0001BFA4                            loc_18D8E:
0001BFA4 D040                       		add.w	d0,d0
0001BFA6 3228 0034                  		move.w	$34(a0),d1
0001BFAA D272 0000                  		add.w	(a2,d0.w),d1
0001BFAE B268 000C                  		cmp.w	obY(a0),d1
0001BFB2 6E00                       		bgt.s	locret_18DC4
0001BFB4 2268 003C                  		movea.l	$3C(a0),a1
0001BFB8 7202                       		moveq	#2,d1
0001BFBA 0828 0000 0022             		btst	#0,obStatus(a0)
0001BFC0 6700                       		beq.s	loc_18DAE
0001BFC2 7200                       		moveq	#0,d1
0001BFC4                            
0001BFC4                            loc_18DAE:
0001BFC4 317C 00F0 0028             		move.w	#$F0,obSubtype(a0)
0001BFCA 117C 000A 001F             		move.b	#10,obDelayAni(a0)	; set frame duration to	10 frames
0001BFD0 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001BFD6 6000 0000                  		bra.w	loc_18FA2
0001BFDA                            ; ===========================================================================
0001BFDA                            
0001BFDA                            locret_18DC4:
0001BFDA 4E75                       		rts	
0001BFDC                            ; ===========================================================================
0001BFDC                            
0001BFDC                            loc_18DC6:	; Routine 4
0001BFDC 2268 003C                  		movea.l	$3C(a0),a1
0001BFE0 7000                       		moveq	#0,d0
0001BFE2 1028 003A                  		move.b	$3A(a0),d0
0001BFE6 9029 003A                  		sub.b	$3A(a1),d0
0001BFEA 6700                       		beq.s	loc_18E2A
0001BFEC 6400                       		bcc.s	loc_18DDA
0001BFEE 4400                       		neg.b	d0
0001BFF0                            
0001BFF0                            loc_18DDA:
0001BFF0 323C F7E8                  		move.w	#-$818,d1
0001BFF4 343C FEEC                  		move.w	#-$114,d2
0001BFF8 0C00 0001                  		cmpi.b	#1,d0
0001BFFC 6700                       		beq.s	loc_18E00
0001BFFE 323C F6A0                  		move.w	#-$960,d1
0001C002 343C FF0C                  		move.w	#-$F4,d2
0001C006 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001C00C 6D00                       		blt.s	loc_18E00
0001C00E 323C F5E0                  		move.w	#-$A20,d1
0001C012 343C FF80                  		move.w	#-$80,d2
0001C016                            
0001C016                            loc_18E00:
0001C016 3141 0012                  		move.w	d1,obVelY(a0)
0001C01A 3142 0010                  		move.w	d2,obVelX(a0)
0001C01E 3028 0008                  		move.w	obX(a0),d0
0001C022 9068 0030                  		sub.w	$30(a0),d0
0001C026 6400                       		bcc.s	loc_18E16
0001C028 4468 0010                  		neg.w	obVelX(a0)
0001C02C                            
0001C02C                            loc_18E16:
0001C02C 117C 0001 001A             		move.b	#1,obFrame(a0)
0001C032 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001C038 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C03C 6000 0000                  		bra.w	loc_18EAA
0001C040                            ; ===========================================================================
0001C040                            
0001C040                            loc_18E2A:
0001C040 45F9 0000 0000             		lea	(word_19018).l,a2
0001C046 7000                       		moveq	#0,d0
0001C048 1029 001A                  		move.b	obFrame(a1),d0
0001C04C 343C 0028                  		move.w	#$28,d2
0001C050 3228 0008                  		move.w	obX(a0),d1
0001C054 9268 0030                  		sub.w	$30(a0),d1
0001C058 6400                       		bcc.s	loc_18E48
0001C05A 4442                       		neg.w	d2
0001C05C 5440                       		addq.w	#2,d0
0001C05E                            
0001C05E                            loc_18E48:
0001C05E D040                       		add.w	d0,d0
0001C060 3228 0034                  		move.w	$34(a0),d1
0001C064 D272 0000                  		add.w	(a2,d0.w),d1
0001C068 3141 000C                  		move.w	d1,obY(a0)
0001C06C D468 0030                  		add.w	$30(a0),d2
0001C070 3142 0008                  		move.w	d2,obX(a0)
0001C074 4268 000E                  		clr.w	obY+2(a0)
0001C078 4268 000A                  		clr.w	obX+2(a0)
0001C07C 5368 0028                  		subq.w	#1,obSubtype(a0)
0001C080 6600                       		bne.s	loc_18E7A
0001C082 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001C088 117C 0008 0024             		move.b	#8,obRoutine(a0)
0001C08E 4E75                       		rts	
0001C090                            ; ===========================================================================
0001C090                            
0001C090                            loc_18E7A:
0001C090 0C68 0078 0028             		cmpi.w	#$78,obSubtype(a0)
0001C096 6600                       		bne.s	loc_18E88
0001C098 117C 0005 001F             		move.b	#5,obDelayAni(a0)
0001C09E                            
0001C09E                            loc_18E88:
0001C09E 0C68 003C 0028             		cmpi.w	#$3C,obSubtype(a0)
0001C0A4 6600                       		bne.s	loc_18E96
0001C0A6 117C 0002 001F             		move.b	#2,obDelayAni(a0)
0001C0AC                            
0001C0AC                            loc_18E96:
0001C0AC 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001C0B0 6E00                       		bgt.s	locret_18EA8
0001C0B2 0868 0000 001A             		bchg	#0,obFrame(a0)
0001C0B8 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001C0BE                            
0001C0BE                            locret_18EA8:
0001C0BE 4E75                       		rts	
0001C0C0                            ; ===========================================================================
0001C0C0                            
0001C0C0                            loc_18EAA:	; Routine 6
0001C0C0 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C0C4 707A                       		moveq	#id_BossStarLight,d0
0001C0C6 7240                       		moveq	#$40,d1
0001C0C8 743E                       		moveq	#$3E,d2
0001C0CA                            
0001C0CA                            loc_18EB4:
0001C0CA B011                       		cmp.b	(a1),d0
0001C0CC 6700                       		beq.s	loc_18EC0
0001C0CE D2C1                       		adda.w	d1,a1
0001C0D0 51CA FFF8                  		dbf	d2,loc_18EB4
0001C0D4                            
0001C0D4 6000                       		bra.s	loc_18F38
0001C0D6                            ; ===========================================================================
0001C0D6                            
0001C0D6                            loc_18EC0:
0001C0D6 3029 0008                  		move.w	obX(a1),d0
0001C0DA 3229 000C                  		move.w	obY(a1),d1
0001C0DE 3428 0008                  		move.w	obX(a0),d2
0001C0E2 3628 000C                  		move.w	obY(a0),d3
0001C0E6 45FA 0000                  		lea	byte_19022(pc),a2
0001C0EA 47FA 0000                  		lea	byte_19026(pc),a3
0001C0EE 181A                       		move.b	(a2)+,d4
0001C0F0 4884                       		ext.w	d4
0001C0F2 D044                       		add.w	d4,d0
0001C0F4 181B                       		move.b	(a3)+,d4
0001C0F6 4884                       		ext.w	d4
0001C0F8 D444                       		add.w	d4,d2
0001C0FA B440                       		cmp.w	d0,d2
0001C0FC 6500                       		bcs.s	loc_18F38
0001C0FE 181A                       		move.b	(a2)+,d4
0001C100 4884                       		ext.w	d4
0001C102 D044                       		add.w	d4,d0
0001C104 181B                       		move.b	(a3)+,d4
0001C106 4884                       		ext.w	d4
0001C108 D444                       		add.w	d4,d2
0001C10A B042                       		cmp.w	d2,d0
0001C10C 6500                       		bcs.s	loc_18F38
0001C10E 181A                       		move.b	(a2)+,d4
0001C110 4884                       		ext.w	d4
0001C112 D244                       		add.w	d4,d1
0001C114 181B                       		move.b	(a3)+,d4
0001C116 4884                       		ext.w	d4
0001C118 D644                       		add.w	d4,d3
0001C11A B641                       		cmp.w	d1,d3
0001C11C 6500                       		bcs.s	loc_18F38
0001C11E 181A                       		move.b	(a2)+,d4
0001C120 4884                       		ext.w	d4
0001C122 D244                       		add.w	d4,d1
0001C124 181B                       		move.b	(a3)+,d4
0001C126 4884                       		ext.w	d4
0001C128 D644                       		add.w	d4,d3
0001C12A B243                       		cmp.w	d3,d1
0001C12C 6500                       		bcs.s	loc_18F38
0001C12E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C132 4268 0028                  		clr.w	obSubtype(a0)
0001C136 4229 0020                  		clr.b	obColType(a1)
0001C13A 5329 0021                  		subq.b	#1,obColProp(a1)
0001C13E 6600                       		bne.s	loc_18F38
0001C140 08E9 0007 0022             		bset	#7,obStatus(a1)
0001C146 4268 0010                  		clr.w	obVelX(a0)
0001C14A 4268 0012                  		clr.w	obVelY(a0)
0001C14E                            
0001C14E                            loc_18F38:
0001C14E 4A68 0012                  		tst.w	obVelY(a0)
0001C152 6A00                       		bpl.s	loc_18F5C
0001C154 4EB9 0000 F46E             		jsr	(ObjectFall).l
0001C15A 3028 0034                  		move.w	$34(a0),d0
0001C15E 0440 002F                  		subi.w	#$2F,d0
0001C162 B068 000C                  		cmp.w	obY(a0),d0
0001C166 6E00                       		bgt.s	loc_18F58
0001C168 4EB9 0000 F46E             		jsr	(ObjectFall).l
0001C16E                            
0001C16E                            loc_18F58:
0001C16E 6000 FF20                  		bra.w	loc_18E7A
0001C172                            ; ===========================================================================
0001C172                            
0001C172                            loc_18F5C:
0001C172 4EB9 0000 F46E             		jsr	(ObjectFall).l
0001C178 2268 003C                  		movea.l	$3C(a0),a1
0001C17C 45F9 0000 0000             		lea	(word_19018).l,a2
0001C182 7000                       		moveq	#0,d0
0001C184 1029 001A                  		move.b	obFrame(a1),d0
0001C188 3228 0008                  		move.w	obX(a0),d1
0001C18C 9268 0030                  		sub.w	$30(a0),d1
0001C190 6400                       		bcc.s	loc_18F7E
0001C192 5440                       		addq.w	#2,d0
0001C194                            
0001C194                            loc_18F7E:
0001C194 D040                       		add.w	d0,d0
0001C196 3228 0034                  		move.w	$34(a0),d1
0001C19A D272 0000                  		add.w	(a2,d0.w),d1
0001C19E B268 000C                  		cmp.w	obY(a0),d1
0001C1A2 6ECA                       		bgt.s	loc_18F58
0001C1A4 2268 003C                  		movea.l	$3C(a0),a1
0001C1A8 7202                       		moveq	#2,d1
0001C1AA 4A68 0010                  		tst.w	obVelX(a0)
0001C1AE 6B00                       		bmi.s	loc_18F9C
0001C1B0 7200                       		moveq	#0,d1
0001C1B2                            
0001C1B2                            loc_18F9C:
0001C1B2 317C 0000 0028             		move.w	#0,obSubtype(a0)
0001C1B8                            
0001C1B8                            loc_18FA2:
0001C1B8 1341 003A                  		move.b	d1,$3A(a1)
0001C1BC 1141 003A                  		move.b	d1,$3A(a0)
0001C1C0 B229 001A                  		cmp.b	obFrame(a1),d1
0001C1C4 6700                       		beq.s	loc_19008
0001C1C6 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001C1CC 6700                       		beq.s	loc_19008
0001C1CE 4229 0025                  		clr.b	ob2ndRout(a1)
0001C1D2 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001C1D8 45F8 D000                  		lea	(v_objspace).w,a2
0001C1DC 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
0001C1E2 446A 0012                  		neg.w	obVelY(a2)
0001C1E6 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0001C1EC 6600                       		bne.s	loc_18FDC
0001C1EE E0EA 0012                  		asr	obVelY(a2)
0001C1F2                            
0001C1F2                            loc_18FDC:
0001C1F2 08EA 0001 0022             		bset	#1,obStatus(a2)
0001C1F8 08AA 0003 0022             		bclr	#3,obStatus(a2)
0001C1FE 422A 003C                  		clr.b	$3C(a2)
0001C202 2F08                       		move.l	a0,-(sp)
0001C204 41D2                       		lea	(a2),a0
0001C206 4EB9 0001 5E1C             		jsr	(Sonic_ChkRoll).l
0001C20C 205F                       		movea.l	(sp)+,a0
0001C20E 157C 0002 0024             		move.b	#2,obRoutine(a2)
0001C21E                            
0001C21E                            loc_19008:
0001C21E 4268 0010                  		clr.w	obVelX(a0)
0001C222 4268 0012                  		clr.w	obVelY(a0)
0001C226 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C22A 6000 FE64                  		bra.w	loc_18E7A
0001C22E                            ; ===========================================================================
0001C22E FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w -8, -$1C, -$2F, -$1C, -8
0001C238                            		even
0001C238 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001C23C                            		even
0001C23C 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001C240                            		even
0001C240                            ; ===========================================================================
0001C240                            
0001C240                            Obj7B_Explode:	; Routine 8
0001C240 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001C244 4228 0024                  		clr.b	obRoutine(a0)
0001C248 0C68 0020 0028             		cmpi.w	#$20,obSubtype(a0)
0001C24E 6700                       		beq.s	Obj7B_MakeFrag
0001C250 4E75                       		rts	
0001C252                            ; ===========================================================================
0001C252                            
0001C252                            Obj7B_MakeFrag:
0001C252 3168 0034 000C             		move.w	$34(a0),obY(a0)
0001C258 7203                       		moveq	#3,d1
0001C25A 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001C25E                            
0001C25E                            Obj7B_Loop:
0001C25E 4EB9 0000 FA54             		jsr	(FindFreeObj).l
0001C264 6600                       		bne.s	loc_1909A
0001C266 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load shrapnel object
0001C26A 137C 000A 0024             		move.b	#$A,obRoutine(a1)
0001C270 237C 0000 0000 0004        		move.l	#Map_BSBall,obMap(a1)
0001C278 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001C27E 337C 0518 0002             		move.w	#$518,obGfx(a1)
0001C284 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C28A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C290 335A 0010                  		move.w	(a2)+,obVelX(a1)
0001C294 335A 0012                  		move.w	(a2)+,obVelY(a1)
0001C298 137C 0098 0020             		move.b	#$98,obColType(a1)
0001C29E 0029 0004 0001             		ori.b	#4,obRender(a1)
0001C2A4 08E9 0007 0001             		bset	#7,obRender(a1)
0001C2AA 137C 000C 0014             		move.b	#$C,obActWid(a1)
0001C2B0                            
0001C2B0                            loc_1909A:
0001C2B0 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001C2B4                            
0001C2B4 4E75                       		rts	
0001C2B6                            ; ===========================================================================
0001C2B6 FF00 FCC0                  Obj7B_FragSpeed:dc.w -$100, -$340	; horizontal, vertical
0001C2BA FF60 FDC0                  		dc.w -$A0, -$240
0001C2BE 0100 FCC0                  		dc.w $100, -$340
0001C2C2 00A0 FDC0                  		dc.w $A0, -$240
0001C2C6                            ; ===========================================================================
0001C2C6                            
0001C2C6                            Obj7B_MoveFrag:	; Routine $A
0001C2C6 4EB9 0000 F4A6             		jsr	(SpeedToPos).l
0001C2CC 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C2D2 3168 000C 0034             		move.w	obY(a0),$34(a0)
0001C2D8 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C2DE 7004                       		moveq	#4,d0
0001C2E0 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001C2E4 E448                       		lsr.w	#2,d0
0001C2E6 1140 001A                  		move.b	d0,obFrame(a0)
0001C2EA 4A28 0001                  		tst.b	1(a0)
0001C2EE 6A00 F7CA                  		bpl.w	Obj7A_Delete
0001C2F2 4E75                       		rts	
0001C2F2 4E75                       		rts	
0001C2F4                            Map_BSBall:	include	"_maps\SLZ Boss Spikeball.asm"
0001C2F4                            ; ---------------------------------------------------------------------------
0001C2F4                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001C2F4                            ; ---------------------------------------------------------------------------
0001C2F4                            Map_BSBall_internal:
0001C2F4 0000                       		dc.w @fireball1-Map_BSBall_internal
0001C2F6 0000                       		dc.w @fireball2-Map_BSBall_internal
0001C2F8 01                         @fireball1:	dc.b 1
0001C2F9 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001C2FE 01                         @fireball2:	dc.b 1
0001C2FF FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001C304                            		even
0001C304                            		even
0001C304                            		include	"_incObj\75 Boss - Spring Yard.asm"
0001C304                            ; ---------------------------------------------------------------------------
0001C304                            ; Object 75 - Eggman (SYZ)
0001C304                            ; ---------------------------------------------------------------------------
0001C304                            
0001C304                            BossSpringYard:
0001C304 7000                       		moveq	#0,d0
0001C306 1028 0024                  		move.b	obRoutine(a0),d0
0001C30A 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001C30E 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001C312                            ; ===========================================================================
0001C312 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001C314 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001C316 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001C318 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001C31A 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001C31C                            
0001C31C 0200 0280                  Obj75_ObjData:	dc.b 2,	0, $02, $80		; routine number, animation, priority (high and low bytes)
0001C320 0401 0280                  		dc.b 4,	1, $02, $80
0001C324 0607 0280                  		dc.b 6,	7, $02, $80
0001C328 0800 0280                  		dc.b 8,	0, $02, $80
0001C32C                            ; ===========================================================================
0001C32C                            
0001C32C                            Obj75_Main:	; Routine 0
0001C32C 317C 2DB0 0008             		move.w	#$2DB0,obX(a0)
0001C332 317C 04DA 000C             		move.w	#$4DA,obY(a0)
0001C338 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C33E 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C344 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C34A 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001C350 45FA FFCA                  		lea	Obj75_ObjData(pc),a2
0001C354 2248                       		movea.l	a0,a1
0001C356 7203                       		moveq	#3,d1
0001C358 6000                       		bra.s	Obj75_LoadBoss
0001C35A                            ; ===========================================================================
0001C35A                            
0001C35A                            Obj75_Loop:
0001C35A 4EB9 0000 FA6A             		jsr	(FindNextFreeObj).l
0001C360 6600                       		bne.s	Obj75_ShipMain
0001C362 12BC 0075                  		move.b	#id_BossSpringYard,(a1)
0001C366 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C36C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C372                            
0001C372                            Obj75_LoadBoss:
0001C372 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C378 4229 0025                  		clr.b	ob2ndRout(a1)
0001C37C 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C380 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C384 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001C388 237C 0001 AEDE 0004        		move.l	#Map_Eggman,obMap(a1)
0001C390 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001C396 137C 0004 0001             		move.b	#4,obRender(a1)
0001C39C 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001C3A2 2348 0034                  		move.l	a0,$34(a1)
0001C3A6 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001C3AA                            
0001C3AA                            Obj75_ShipMain:	; Routine 2
0001C3AA 7000                       		moveq	#0,d0
0001C3AC 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C3B0 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001C3B4 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001C3B8 43F9 0001 AE8E             		lea	(Ani_Eggman).l,a1
0001C3BE 4EB9 0000 C574             		jsr	(AnimateSprite).l
0001C3C4 7003                       		moveq	#3,d0
0001C3C6 C028 0022                  		and.b	obStatus(a0),d0
0001C3CA 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C3D0 8128 0001                  		or.b	d0,obRender(a0)
0001C3D4 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001C3DA                            ; ===========================================================================
0001C3DA 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001C3DE 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001C3E2 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001C3E6                            ; ===========================================================================
0001C3E6                            
0001C3E6                            loc_191CC:
0001C3E6 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001C3EC 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001C3F2 6400                       		bcc.s	loc_191DE
0001C3F4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C3F8                            
0001C3F8                            loc_191DE:
0001C3F8 1028 003F                  		move.b	$3F(a0),d0
0001C3FC 5428 003F                  		addq.b	#2,$3F(a0)
0001C400 4EB9 0000 3BA2             		jsr	(CalcSine).l
0001C406 E440                       		asr.w	#2,d0
0001C408 3140 0012                  		move.w	d0,obVelY(a0)
0001C40C                            
0001C40C                            loc_191F2:
0001C40C 6100 E66C                  		bsr.w	BossMove
0001C410 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C416 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C41C                            
0001C41C                            loc_19202:
0001C41C 3028 0008                  		move.w	8(a0),d0
0001C420 0440 2C00                  		subi.w	#$2C00,d0
0001C424 EA48                       		lsr.w	#5,d0
0001C426 1140 0034                  		move.b	d0,$34(a0)
0001C42A 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001C430 6400                       		bcc.s	locret_19256
0001C432 4A28 0022                  		tst.b	obStatus(a0)
0001C436 6B00                       		bmi.s	loc_19258
0001C438 4A28 0020                  		tst.b	obColType(a0)
0001C43C 6600                       		bne.s	locret_19256
0001C43E 4A28 003E                  		tst.b	$3E(a0)
0001C442 6600                       		bne.s	loc_1923A
0001C444 117C 0020 003E             		move.b	#$20,$3E(a0)
0001C454                            
0001C454                            loc_1923A:
0001C454 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001C458 7000                       		moveq	#0,d0
0001C45A 4A51                       		tst.w	(a1)
0001C45C 6600                       		bne.s	loc_19248
0001C45E 303C 0EEE                  		move.w	#cWhite,d0
0001C462                            
0001C462                            loc_19248:
0001C462 3280                       		move.w	d0,(a1)
0001C464 5328 003E                  		subq.b	#1,$3E(a0)
0001C468 6600                       		bne.s	locret_19256
0001C46A 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C470                            
0001C470                            locret_19256:
0001C470 4E75                       		rts	
0001C472                            ; ===========================================================================
0001C472                            
0001C472                            loc_19258:
0001C472 7064                       		moveq	#100,d0
0001C474 6100 0000                  		bsr.w	AddPoints
0001C478 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001C47E 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001C484 4268 0010                  		clr.w	obVelX(a0)
0001C488 4E75                       		rts	
0001C48A                            ; ===========================================================================
0001C48A                            
0001C48A                            loc_19270:
0001C48A 3028 0030                  		move.w	$30(a0),d0
0001C48E 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001C494 0828 0000 0022             		btst	#0,obStatus(a0)
0001C49A 6600                       		bne.s	loc_1928E
0001C49C 4468 0010                  		neg.w	obVelX(a0)
0001C4A0 0C40 2C08                  		cmpi.w	#$2C08,d0
0001C4A4 6E00                       		bgt.s	loc_1929E
0001C4A6 6000                       		bra.s	loc_19294
0001C4A8                            ; ===========================================================================
0001C4A8                            
0001C4A8                            loc_1928E:
0001C4A8 0C40 2D38                  		cmpi.w	#$2D38,d0
0001C4AC 6D00                       		blt.s	loc_1929E
0001C4AE                            
0001C4AE                            loc_19294:
0001C4AE 0868 0000 0022             		bchg	#0,obStatus(a0)
0001C4B4 4228 003D                  		clr.b	$3D(a0)
0001C4B8                            
0001C4B8                            loc_1929E:
0001C4B8 0440 2C10                  		subi.w	#$2C10,d0
0001C4BC 0240 001F                  		andi.w	#$1F,d0
0001C4C0 0440 001F                  		subi.w	#$1F,d0
0001C4C4 6A00                       		bpl.s	loc_192AE
0001C4C6 4440                       		neg.w	d0
0001C4C8                            
0001C4C8                            loc_192AE:
0001C4C8 5340                       		subq.w	#1,d0
0001C4CA 6E00                       		bgt.s	loc_192E8
0001C4CC 4A28 003D                  		tst.b	$3D(a0)
0001C4D0 6600                       		bne.s	loc_192E8
0001C4D2 3238 D008                  		move.w	(v_player+obX).w,d1
0001C4D6 0441 2C00                  		subi.w	#$2C00,d1
0001C4DA EA41                       		asr.w	#5,d1
0001C4DC B228 0034                  		cmp.b	$34(a0),d1
0001C4E0 6600                       		bne.s	loc_192E8
0001C4E2 7000                       		moveq	#0,d0
0001C4E4 1028 0034                  		move.b	$34(a0),d0
0001C4E8 EB40                       		asl.w	#5,d0
0001C4EA 0640 2C10                  		addi.w	#$2C10,d0
0001C4EE 3140 0030                  		move.w	d0,$30(a0)
0001C4F2 6100 0000                  		bsr.w	Obj75_FindBlocks
0001C4F6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C4FA 4268 0028                  		clr.w	obSubtype(a0)
0001C4FE 4268 0010                  		clr.w	obVelX(a0)
0001C502                            
0001C502                            loc_192E8:
0001C502 6000 FEF4                  		bra.w	loc_191DE
0001C506                            ; ===========================================================================
0001C506                            
0001C506                            loc_192EC:
0001C506 7000                       		moveq	#0,d0
0001C508 1028 0028                  		move.b	obSubtype(a0),d0
0001C50C 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001C510 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001C514                            ; ===========================================================================
0001C514 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001C516 0000                       		dc.w loc_19348-off_192FA
0001C518 0000                       		dc.w loc_1938E-off_192FA
0001C51A 0000                       		dc.w loc_193D0-off_192FA
0001C51C                            ; ===========================================================================
0001C51C                            
0001C51C                            loc_19302:
0001C51C 317C 0180 0012             		move.w	#$180,obVelY(a0)
0001C522 3028 0038                  		move.w	$38(a0),d0
0001C526 0C40 0556                  		cmpi.w	#$556,d0
0001C52A 6500                       		bcs.s	loc_19344
0001C52C 317C 0556 0038             		move.w	#$556,$38(a0)
0001C532 4268 003C                  		clr.w	$3C(a0)
0001C536 70FF                       		moveq	#-1,d0
0001C538 3028 0036                  		move.w	$36(a0),d0
0001C53C 6700                       		beq.s	loc_1933C
0001C53E 2240                       		movea.l	d0,a1
0001C540 137C 00FF 0029             		move.b	#-1,$29(a1)
0001C546 117C 00FF 0029             		move.b	#-1,$29(a0)
0001C54C 2348 0034                  		move.l	a0,$34(a1)
0001C550 317C 0032 003C             		move.w	#$32,$3C(a0)
0001C556                            
0001C556                            loc_1933C:
0001C556 4268 0012                  		clr.w	obVelY(a0)
0001C55A 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C55E                            
0001C55E                            loc_19344:
0001C55E 6000 FEAC                  		bra.w	loc_191F2
0001C562                            ; ===========================================================================
0001C562                            
0001C562                            loc_19348:
0001C562 5368 003C                  		subq.w	#1,$3C(a0)
0001C566 6A00                       		bpl.s	loc_19366
0001C568 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C56C 317C F800 0012             		move.w	#-$800,obVelY(a0)
0001C572 4A68 0036                  		tst.w	$36(a0)
0001C576 6600                       		bne.s	loc_19362
0001C578 E0E8 0012                  		asr	obVelY(a0)
0001C57C                            
0001C57C                            loc_19362:
0001C57C 7000                       		moveq	#0,d0
0001C57E 6000                       		bra.s	loc_1937C
0001C580                            ; ===========================================================================
0001C580                            
0001C580                            loc_19366:
0001C580 7000                       		moveq	#0,d0
0001C582 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001C588 6E00                       		bgt.s	loc_1937C
0001C58A 7002                       		moveq	#2,d0
0001C58C 0828 0001 003D             		btst	#1,$3D(a0)
0001C592 6700                       		beq.s	loc_1937C
0001C594 4440                       		neg.w	d0
0001C596                            
0001C596                            loc_1937C:
0001C596 D068 0038                  		add.w	$38(a0),d0
0001C59A 3140 000C                  		move.w	d0,obY(a0)
0001C59E 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C5A4 6000 FE76                  		bra.w	loc_19202
0001C5A8                            ; ===========================================================================
0001C5A8                            
0001C5A8                            loc_1938E:
0001C5A8 303C 04DA                  		move.w	#$4DA,d0
0001C5AC 4A68 0036                  		tst.w	$36(a0)
0001C5B0 6700                       		beq.s	loc_1939C
0001C5B2 0440 0018                  		subi.w	#$18,d0
0001C5B6                            
0001C5B6                            loc_1939C:
0001C5B6 B068 0038                  		cmp.w	$38(a0),d0
0001C5BA 6D00                       		blt.s	loc_193BE
0001C5BC 317C 0008 003C             		move.w	#8,$3C(a0)
0001C5C2 4A68 0036                  		tst.w	$36(a0)
0001C5C6 6700                       		beq.s	loc_193B4
0001C5C8 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001C5CE                            
0001C5CE                            loc_193B4:
0001C5CE 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C5D2 4268 0012                  		clr.w	obVelY(a0)
0001C5D6 6000                       		bra.s	loc_193CC
0001C5D8                            ; ===========================================================================
0001C5D8                            
0001C5D8                            loc_193BE:
0001C5D8 0C68 FFC0 0012             		cmpi.w	#-$40,obVelY(a0)
0001C5DE 6C00                       		bge.s	loc_193CC
0001C5E0 0668 000C 0012             		addi.w	#$C,obVelY(a0)
0001C5E6                            
0001C5E6                            loc_193CC:
0001C5E6 6000 FE24                  		bra.w	loc_191F2
0001C5EA                            ; ===========================================================================
0001C5EA                            
0001C5EA                            loc_193D0:
0001C5EA 5368 003C                  		subq.w	#1,$3C(a0)
0001C5EE 6E00                       		bgt.s	loc_19406
0001C5F0 6B00                       		bmi.s	loc_193EE
0001C5F2 70FF                       		moveq	#-1,d0
0001C5F4 3028 0036                  		move.w	$36(a0),d0
0001C5F8 6700                       		beq.s	loc_193E8
0001C5FA 2240                       		movea.l	d0,a1
0001C5FC 137C 000A 0029             		move.b	#$A,$29(a1)
0001C602                            
0001C602                            loc_193E8:
0001C602 4268 0036                  		clr.w	$36(a0)
0001C606 6000                       		bra.s	loc_19406
0001C608                            ; ===========================================================================
0001C608                            
0001C608                            loc_193EE:
0001C608 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001C60E 6600                       		bne.s	loc_19406
0001C610 4228 0029                  		clr.b	$29(a0)
0001C614 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001C618 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001C61E 6000                       		bra.s	loc_19446
0001C620                            ; ===========================================================================
0001C620                            
0001C620                            loc_19406:
0001C620 7001                       		moveq	#1,d0
0001C622 4A68 0036                  		tst.w	$36(a0)
0001C626 6700                       		beq.s	loc_19410
0001C628 7002                       		moveq	#2,d0
0001C62A                            
0001C62A                            loc_19410:
0001C62A 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001C630 6700                       		beq.s	loc_19424
0001C632 6D00                       		blt.s	loc_1941C
0001C634 4440                       		neg.w	d0
0001C636                            
0001C636                            loc_1941C:
0001C636 4A68 0036                  		tst.w	$36(a0)
0001C63A D168 0038                  		add.w	d0,$38(a0)
0001C63E                            
0001C63E                            loc_19424:
0001C63E 7000                       		moveq	#0,d0
0001C640 4A68 0036                  		tst.w	$36(a0)
0001C644 6700                       		beq.s	loc_19438
0001C646 7002                       		moveq	#2,d0
0001C648 0828 0000 003D             		btst	#0,$3D(a0)
0001C64E 6700                       		beq.s	loc_19438
0001C650 4440                       		neg.w	d0
0001C652                            
0001C652                            loc_19438:
0001C652 D068 0038                  		add.w	$38(a0),d0
0001C656 3140 000C                  		move.w	d0,obY(a0)
0001C65A 3168 0030 0008             		move.w	$30(a0),8(a0)
0001C660                            
0001C660                            loc_19446:
0001C660 6000 FDBA                  		bra.w	loc_19202
0001C664                            
0001C664                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C664                            
0001C664                            
0001C664                            Obj75_FindBlocks:
0001C664 4268 0036                  		clr.w	$36(a0)
0001C668 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C66C 703E                       		moveq	#$3E,d0
0001C66E 7276                       		moveq	#$76,d1
0001C670 1428 0034                  		move.b	$34(a0),d2
0001C674                            
0001C674                            Obj75_FindLoop:
0001C674 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001C676 6600                       		bne.s	loc_1946A	; if not, branch
0001C678 B429 0028                  		cmp.b	obSubtype(a1),d2
0001C67C 6600                       		bne.s	loc_1946A
0001C67E 3149 0036                  		move.w	a1,$36(a0)
0001C682 6000                       		bra.s	locret_19472
0001C684                            ; ===========================================================================
0001C684                            
0001C684                            loc_1946A:
0001C684 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001C688 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001C68C                            
0001C68C                            locret_19472:
0001C68C 4E75                       		rts	
0001C68E                            ; End of function Obj75_FindBlocks
0001C68E                            
0001C68E                            ; ===========================================================================
0001C68E                            
0001C68E                            loc_19474:
0001C68E 5368 003C                  		subq.w	#1,$3C(a0)
0001C692 6B00                       		bmi.s	loc_1947E
0001C694 6000 E3A2                  		bra.w	BossDefeated
0001C698                            ; ===========================================================================
0001C698                            
0001C698                            loc_1947E:
0001C698 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C69C 4268 0012                  		clr.w	obVelY(a0)
0001C6A0 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C6A6 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001C6AC 4268 0010                  		clr.w	obVelX(a0)
0001C6B0 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001C6B6 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001C6BA 6600                       		bne.s	loc_194A8
0001C6BC 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001C6C2                            
0001C6C2                            loc_194A8:
0001C6C2 6000 FD58                  		bra.w	loc_19202
0001C6C6                            ; ===========================================================================
0001C6C6                            
0001C6C6                            loc_194AC:
0001C6C6 5268 003C                  		addq.w	#1,$3C(a0)
0001C6CA 6700                       		beq.s	loc_194BC
0001C6CC 6A00                       		bpl.s	loc_194C2
0001C6CE 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C6D4 6000                       		bra.s	loc_194EE
0001C6D6                            ; ===========================================================================
0001C6D6                            
0001C6D6                            loc_194BC:
0001C6D6 4268 0012                  		clr.w	obVelY(a0)
0001C6DA 6000                       		bra.s	loc_194EE
0001C6DC                            ; ===========================================================================
0001C6DC                            
0001C6DC                            loc_194C2:
0001C6DC 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001C6E2 6500                       		bcs.s	loc_194DA
0001C6E4 6700                       		beq.s	loc_194E0
0001C6E6 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001C6EC 6500                       		bcs.s	loc_194EE
0001C6EE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C6F2 6000                       		bra.s	loc_194EE
0001C6F4                            ; ===========================================================================
0001C6F4                            
0001C6F4                            loc_194DA:
0001C6F4 5168 0012                  		subq.w	#8,obVelY(a0)
0001C6F8 6000                       		bra.s	loc_194EE
0001C6FA                            ; ===========================================================================
0001C6FA                            
0001C6FA                            loc_194E0:
0001C6FA 4268 0012                  		clr.w    obVelY(a0)
0001C6FE 4A38 FE2D                          	tst.b     (v_invinc).w
0001C702 6600                               	bne.s   @boss_invinc
0001C704                            
0001C704 1038 F5C6                          	move.b   (v_Saved_music),d0
0001C708 6000 0000                          	bra.w      @boss_play
0001C70C                            
0001C70C                            @boss_invinc:
0001C70C 103C 0000                          	move.b #bgm_Invincible,d0
0001C710                            
0001C710                            @boss_play:
0001C710 4EB8 129A                          	jsr PlaySound
0001C714                            
0001C714                            loc_194EE:
0001C714 6000 FCF6                  		bra.w	loc_191F2
0001C718                            ; ===========================================================================
0001C718                            
0001C718                            loc_194F2:
0001C718 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001C71E 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001C724 0C78 2D40 F72A             		cmpi.w	#$2D40,(v_limitright2).w
0001C72A 6400                       		bcc.s	loc_1950C
0001C72C 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001C730 6000                       		bra.s	loc_19512
0001C732                            ; ===========================================================================
0001C732                            
0001C732                            loc_1950C:
0001C732 4A28 0001                  		tst.b	obRender(a0)
0001C736 6A00                       		bpl.s	Obj75_ShipDelete
0001C738                            
0001C738                            loc_19512:
0001C738 6100 E340                  		bsr.w	BossMove
0001C73C 6000 FCBA                  		bra.w	loc_191DE
0001C740                            ; ===========================================================================
0001C740                            
0001C740                            Obj75_ShipDelete:
0001C740 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001C746                            ; ===========================================================================
0001C746                            
0001C746                            Obj75_FaceMain:	; Routine 4
0001C746 7201                       		moveq	#1,d1
0001C748 2268 0034                  		movea.l	$34(a0),a1
0001C74C 7000                       		moveq	#0,d0
0001C74E 1029 0025                  		move.b	ob2ndRout(a1),d0
0001C752 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001C756 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001C75A 1141 001C                  		move.b	d1,obAnim(a0)
0001C75E 1010                       		move.b	(a0),d0
0001C760 B011                       		cmp.b	(a1),d0
0001C762 6600                       		bne.s	Obj75_FaceDelete
0001C764 6000                       		bra.s	loc_195BE
0001C766                            ; ===========================================================================
0001C766                            
0001C766                            Obj75_FaceDelete:
0001C766 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001C76C                            ; ===========================================================================
0001C76C 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001C770 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001C774 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001C778                            ; ===========================================================================
0001C778                            
0001C778                            loc_19552:
0001C778 720A                       		moveq	#$A,d1
0001C77A 4E75                       		rts	
0001C77C                            ; ===========================================================================
0001C77C                            
0001C77C                            loc_19556:
0001C77C 7206                       		moveq	#6,d1
0001C77E 4E75                       		rts	
0001C780                            ; ===========================================================================
0001C780                            
0001C780                            loc_1955A:
0001C780 7000                       		moveq	#0,d0
0001C782 1029 0028                  		move.b	obSubtype(a1),d0
0001C786 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001C78A 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001C78E                            ; ===========================================================================
0001C78E 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001C792 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001C796                            ; ===========================================================================
0001C796                            
0001C796                            loc_19570:
0001C796 6000                       		bra.s	loc_19574
0001C798                            ; ===========================================================================
0001C798                            
0001C798                            loc_19572:
0001C798 7206                       		moveq	#6,d1
0001C79A                            
0001C79A                            loc_19574:
0001C79A 4A29 0020                  		tst.b	obColType(a1)
0001C79E 6600                       		bne.s	loc_1957E
0001C7A0 7205                       		moveq	#5,d1
0001C7A2 4E75                       		rts	
0001C7A4                            ; ===========================================================================
0001C7A4                            
0001C7A4                            loc_1957E:
0001C7A4 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001C7AA 6500                       		bcs.s	locret_19588
0001C7AC 7204                       		moveq	#4,d1
0001C7AE                            
0001C7AE                            locret_19588:
0001C7AE 4E75                       		rts	
0001C7B0                            ; ===========================================================================
0001C7B0                            
0001C7B0                            Obj75_FlameMain:; Routine 6
0001C7B0 117C 0007 001C             		move.b	#7,obAnim(a0)
0001C7B6 2268 0034                  		movea.l	$34(a0),a1
0001C7BA 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C7C0 6600                       		bne.s	loc_195AA
0001C7C2 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001C7C8 4A28 0001                  		tst.b	1(a0)
0001C7CC 6A00                       		bpl.s	Obj75_FlameDelete
0001C7CE 6000                       		bra.s	loc_195B6
0001C7D0                            ; ===========================================================================
0001C7D0                            
0001C7D0                            loc_195AA:
0001C7D0 4A69 0010                  		tst.w	obVelX(a1)
0001C7D4 6700                       		beq.s	loc_195B6
0001C7D6 117C 0008 001C             		move.b	#8,obAnim(a0)
0001C7DC                            
0001C7DC                            loc_195B6:
0001C7DC 6000                       		bra.s	loc_195BE
0001C7DE                            ; ===========================================================================
0001C7DE                            
0001C7DE                            Obj75_FlameDelete:
0001C7DE 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001C7E4                            ; ===========================================================================
0001C7E4                            
0001C7E4                            loc_195BE:
0001C7E4 43F9 0001 AE8E             		lea	(Ani_Eggman).l,a1
0001C7EA 4EB9 0000 C574             		jsr	(AnimateSprite).l
0001C7F0 2268 0034                  		movea.l	$34(a0),a1
0001C7F4 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C7FA 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C800                            
0001C800                            loc_195DA:
0001C800 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001C806 7003                       		moveq	#3,d0
0001C808 C028 0022                  		and.b	obStatus(a0),d0
0001C80C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C812 8128 0001                  		or.b	d0,obRender(a0)
0001C816 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001C81C                            ; ===========================================================================
0001C81C                            
0001C81C                            Obj75_SpikeMain:; Routine 8
0001C81C 217C 0001 AFCE 0004        		move.l	#Map_BossItems,obMap(a0)
0001C824 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001C82A 117C 0005 001A             		move.b	#5,obFrame(a0)
0001C830 2268 0034                  		movea.l	$34(a0),a1
0001C834 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C83A 6600                       		bne.s	loc_1961C
0001C83C 4A28 0001                  		tst.b	obRender(a0)
0001C840 6A00                       		bpl.s	Obj75_SpikeDelete
0001C842                            
0001C842                            loc_1961C:
0001C842 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C848 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C84E 3028 003C                  		move.w	$3C(a0),d0
0001C852 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001C858 6600                       		bne.s	loc_19652
0001C85A 0C29 0006 0028             		cmpi.b	#6,obSubtype(a1)
0001C860 6700                       		beq.s	loc_1964C
0001C862 4A29 0028                  		tst.b	obSubtype(a1)
0001C866 6600                       		bne.s	loc_19658
0001C868 0C40 0094                  		cmpi.w	#$94,d0
0001C86C 6C00                       		bge.s	loc_19658
0001C86E 5E40                       		addq.w	#7,d0
0001C870 6000                       		bra.s	loc_19658
0001C872                            ; ===========================================================================
0001C872                            
0001C872                            loc_1964C:
0001C872 4A69 003C                  		tst.w	$3C(a1)
0001C876 6A00                       		bpl.s	loc_19658
0001C878                            
0001C878                            loc_19652:
0001C878 4A40                       		tst.w	d0
0001C87A 6F00                       		ble.s	loc_19658
0001C87C 5B40                       		subq.w	#5,d0
0001C87E                            
0001C87E                            loc_19658:
0001C87E 3140 003C                  		move.w	d0,$3C(a0)
0001C882 E440                       		asr.w	#2,d0
0001C884 D168 000C                  		add.w	d0,obY(a0)
0001C888 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C88E 117C 000C 0016             		move.b	#$C,obHeight(a0)
0001C894 4228 0020                  		clr.b	obColType(a0)
0001C898 2268 0034                  		movea.l	$34(a0),a1
0001C89C 4A29 0020                  		tst.b	obColType(a1)
0001C8A0 6700                       		beq.s	loc_19688
0001C8A2 4A29 0029                  		tst.b	$29(a1)
0001C8A6 6600                       		bne.s	loc_19688
0001C8A8 117C 0084 0020             		move.b	#$84,obColType(a0)
0001C8AE                            
0001C8AE                            loc_19688:
0001C8AE 6000 FF50                  		bra.w	loc_195DA
0001C8B2                            ; ===========================================================================
0001C8B2                            
0001C8B2                            Obj75_SpikeDelete:
0001C8B2 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001C8B2 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001C8B8                            		include	"_incObj\76 SYZ Boss Blocks.asm"
0001C8B8                            ; ---------------------------------------------------------------------------
0001C8B8                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001C8B8                            ; ---------------------------------------------------------------------------
0001C8B8                            
0001C8B8                            BossBlock:
0001C8B8 7000                       		moveq	#0,d0
0001C8BA 1028 0024                  		move.b	obRoutine(a0),d0
0001C8BE 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001C8C2 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001C8C6                            ; ===========================================================================
0001C8C6 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001C8C8 0000                       		dc.w Obj76_Action-Obj76_Index
0001C8CA 0000                       		dc.w loc_19762-Obj76_Index
0001C8CC                            ; ===========================================================================
0001C8CC                            
0001C8CC                            Obj76_Main:	; Routine 0
0001C8CC 7800                       		moveq	#0,d4
0001C8CE 3A3C 2C10                  		move.w	#$2C10,d5
0001C8D2 7C09                       		moveq	#9,d6
0001C8D4 43D0                       		lea	(a0),a1
0001C8D6 6000                       		bra.s	Obj76_MakeBlock
0001C8D8                            ; ===========================================================================
0001C8D8                            
0001C8D8                            Obj76_Loop:
0001C8D8 4EB9 0000 FA54             		jsr	(FindFreeObj).l
0001C8DE 6600                       		bne.s	Obj76_ExitLoop
0001C8E0                            
0001C8E0                            Obj76_MakeBlock:
0001C8E0 12BC 0076                  		move.b	#id_BossBlock,(a1)
0001C8E4 237C 0000 0000 0004        		move.l	#Map_BossBlock,obMap(a1)
0001C8EC 337C 4000 0002             		move.w	#$4000,obGfx(a1)
0001C8F2 137C 0004 0001             		move.b	#4,obRender(a1)
0001C8F8 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001C8FE 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001C904 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001C90A 3345 0008                  		move.w	d5,obX(a1)	; set x-position
0001C90E 337C 0582 000C             		move.w	#$582,obY(a1)
0001C914 3344 0028                  		move.w	d4,obSubtype(a1)
0001C918 0644 0101                  		addi.w	#$101,d4
0001C91C 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001C920 5429 0024                  		addq.b	#2,obRoutine(a1)
0001C924 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001C928                            
0001C928                            Obj76_ExitLoop:
0001C928 4E75                       		rts	
0001C92A                            ; ===========================================================================
0001C92A                            
0001C92A                            Obj76_Action:	; Routine 2
0001C92A 1028 0029                  		move.b	$29(a0),d0
0001C92E B028 0028                  		cmp.b	obSubtype(a0),d0
0001C932 6700                       		beq.s	Obj76_Solid
0001C934 4A00                       		tst.b	d0
0001C936 6B00                       		bmi.s	loc_19718
0001C938                            
0001C938                            loc_19712:
0001C938 6100 0000                  		bsr.w	Obj76_Break
0001C93C 6000                       		bra.s	Obj76_Display
0001C93E                            ; ===========================================================================
0001C93E                            
0001C93E                            loc_19718:
0001C93E 2268 0034                  		movea.l	$34(a0),a1
0001C942 4A29 0021                  		tst.b	obColProp(a1)
0001C946 67F0                       		beq.s	loc_19712
0001C948 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C94E 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C954 0668 002C 000C             		addi.w	#$2C,obY(a0)
0001C95A B2C8                       		cmpa.w	a0,a1
0001C95C 6500                       		bcs.s	Obj76_Display
0001C95E 3029 0012                  		move.w	obVelY(a1),d0
0001C962 48C0                       		ext.l	d0
0001C964 E080                       		asr.l	#8,d0
0001C966 D168 000C                  		add.w	d0,obY(a0)
0001C96A 6000                       		bra.s	Obj76_Display
0001C96C                            ; ===========================================================================
0001C96C                            
0001C96C                            Obj76_Solid:
0001C96C 323C 001B                  		move.w	#$1B,d1
0001C970 343C 0010                  		move.w	#$10,d2
0001C974 363C 0011                  		move.w	#$11,d3
0001C978 3828 0008                  		move.w	obX(a0),d4
0001C97C 4EB9 0001 19F6             		jsr	(SolidObject).l
0001C982                            
0001C982                            Obj76_Display:
0001C982 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001C988                            ; ===========================================================================
0001C988                            
0001C988                            loc_19762:	; Routine 4
0001C988 4A28 0001                  		tst.b	obRender(a0)
0001C98C 6A00                       		bpl.s	Obj76_Delete
0001C98E 4EB9 0000 F46E             		jsr	(ObjectFall).l
0001C994 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001C99A                            ; ===========================================================================
0001C99A                            
0001C99A                            Obj76_Delete:
0001C99A 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001C9A0                            
0001C9A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9A0                            
0001C9A0                            
0001C9A0                            Obj76_Break:
0001C9A0 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001C9A4 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001C9A8 7801                       		moveq	#1,d4
0001C9AA 7203                       		moveq	#3,d1
0001C9AC 7438                       		moveq	#$38,d2
0001C9AE 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C9B2 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C9B8 117C 0008 0016             		move.b	#8,obHeight(a0)
0001C9BE 43D0                       		lea	(a0),a1
0001C9C0 6000                       		bra.s	Obj76_MakeFrag
0001C9C2                            ; ===========================================================================
0001C9C2                            
0001C9C2                            Obj76_LoopFrag:
0001C9C2 4EB9 0000 FA6A             		jsr	(FindNextFreeObj).l
0001C9C8 6600                       		bne.s	loc_197D4
0001C9CA                            
0001C9CA                            Obj76_MakeFrag:
0001C9CA 45D0                       		lea	(a0),a2
0001C9CC 47D1                       		lea	(a1),a3
0001C9CE 7603                       		moveq	#3,d3
0001C9D0                            
0001C9D0                            loc_197AA:
0001C9D0 26DA                       		move.l	(a2)+,(a3)+
0001C9D2 26DA                       		move.l	(a2)+,(a3)+
0001C9D4 26DA                       		move.l	(a2)+,(a3)+
0001C9D6 26DA                       		move.l	(a2)+,(a3)+
0001C9D8 51CB FFF6                  		dbf	d3,loc_197AA
0001C9DC                            
0001C9DC 335C 0010                  		move.w	(a4)+,obVelX(a1)
0001C9E0 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001C9E4 361D                       		move.w	(a5)+,d3
0001C9E6 D769 0008                  		add.w	d3,obX(a1)
0001C9EA 361D                       		move.w	(a5)+,d3
0001C9EC D769 000C                  		add.w	d3,obY(a1)
0001C9F0 1344 001A                  		move.b	d4,obFrame(a1)
0001C9F4 5244                       		addq.w	#1,d4
0001C9F6 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001C9FA                            
0001C9FA                            loc_197D4:
0001CA04                            ; End of function Obj76_Break
0001CA04                            
0001CA04                            ; ===========================================================================
0001CA04 FE80 FE00                  Obj76_FragSpeed:dc.w -$180, -$200
0001CA08 0180 FE00                  		dc.w $180, -$200
0001CA0C FF00 FF00                  		dc.w -$100, -$100
0001CA10 0100 FF00                  		dc.w $100, -$100
0001CA14 FFF8 FFF8                  Obj76_FragPos:	dc.w -8, -8
0001CA18 0010 0000                  		dc.w $10, 0
0001CA1C 0000 0010                  		dc.w 0,	$10
0001CA20 0010 0010                  		dc.w $10, $10
0001CA20 0010 0010                  		dc.w $10, $10
0001CA24                            Map_BossBlock:	include	"_maps\SYZ Boss Blocks.asm"
0001CA24                            ; ---------------------------------------------------------------------------
0001CA24                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001CA24                            ; ---------------------------------------------------------------------------
0001CA24                            Map_BossBlock_internal:
0001CA24 0000                       		dc.w @wholeblock-Map_BossBlock_internal
0001CA26 0000                       		dc.w @topleft-Map_BossBlock_internal
0001CA28 0000                       		dc.w @topright-Map_BossBlock_internal
0001CA2A 0000                       		dc.w @bottomleft-Map_BossBlock_internal
0001CA2C 0000                       		dc.w @bottomright-Map_BossBlock_internal
0001CA2E 02                         @wholeblock:	dc.b 2
0001CA2F F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001CA34 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001CA39 00                         		dc.b 0
0001CA3A 01                         @topleft:	dc.b 1
0001CA3B F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001CA40 01                         @topright:	dc.b 1
0001CA41 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001CA46 01                         @bottomleft:	dc.b 1
0001CA47 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001CA4C 01                         @bottomright:	dc.b 1
0001CA4D F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001CA52                            		even
0001CA52                            		even
0001CA52                            
0001CA52                            loc_1982C:
0001CA52 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001CA58                            
0001CA58                            		include	"_incObj\82 Eggman - Scrap Brain 2.asm"
0001CA58                            ; ---------------------------------------------------------------------------
0001CA58                            ; Object 82 - Eggman (SBZ2)
0001CA58                            ; ---------------------------------------------------------------------------
0001CA58                            
0001CA58                            ScrapEggman:
0001CA58 7000                       		moveq	#0,d0
0001CA5A 1028 0024                  		move.b	obRoutine(a0),d0
0001CA5E 323B 0000                  		move.w	SEgg_Index(pc,d0.w),d1
0001CA62 4EFB 1000                  		jmp	SEgg_Index(pc,d1.w)
0001CA66                            ; ===========================================================================
0001CA66 0000                       SEgg_Index:	dc.w SEgg_Main-SEgg_Index
0001CA68 0000                       		dc.w SEgg_Eggman-SEgg_Index
0001CA6A 0000                       		dc.w SEgg_Switch-SEgg_Index
0001CA6C                            
0001CA6C 0200 03                    SEgg_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001CA6F 0400 03                    		dc.b 4,	0, 3
0001CA72                            ; ===========================================================================
0001CA72                            
0001CA72                            SEgg_Main:	; Routine 0
0001CA72 45FA FFF8                  		lea	SEgg_ObjData(pc),a2
0001CA76 317C 1C60 0008             		move.w	#$1C60,obX(a0)
0001CA7C 317C 02A4 000C             		move.w	#$2A4,obY(a0)
0001CA82 117C 000F 0020             		move.b	#$F,obColType(a0)
0001CA88 117C 0010 0021             		move.b	#$10,obColProp(a0)
0001CA8E 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001CA94 4228 0025                  		clr.b	ob2ndRout(a0)
0001CA98 115A 0024                  		move.b	(a2)+,obRoutine(a0)
0001CA9C 115A 001C                  		move.b	(a2)+,obAnim(a0)
0001CAA0 115A 0018                  		move.b	(a2)+,obPriority(a0)
0001CAA4 217C 0000 0000 0004        		move.l	#Map_SEgg,obMap(a0)
0001CAAC 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001CAB2 117C 0004 0001             		move.b	#4,obRender(a0)
0001CAB8 08E8 0007 0001             		bset	#7,obRender(a0)
0001CABE 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001CAC4 4EB9 0000 FA6A             		jsr	(FindNextFreeObj).l
0001CACA 6600                       		bne.s	SEgg_Eggman
0001CACC 2348 0034                  		move.l	a0,$34(a1)
0001CAD0 12BC 0082                  		move.b	#id_ScrapEggman,(a1) ; load switch object
0001CAD4 337C 1C30 0008             		move.w	#$1C30,obX(a1)
0001CADA 337C 02BC 000C             		move.w	#$2BC,obY(a1)
0001CAE0 4228 0025                  		clr.b	ob2ndRout(a0)
0001CAE4 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001CAE8 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001CAEC 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001CAF0 237C 0000 DCF6 0004        		move.l	#Map_But,obMap(a1)
0001CAF8 337C 04A4 0002             		move.w	#$4A4,obGfx(a1)
0001CAFE 137C 0004 0001             		move.b	#4,obRender(a1)
0001CB04 08E9 0007 0001             		bset	#7,obRender(a1)
0001CB0A 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001CB10 137C 0000 001A             		move.b	#0,obFrame(a1)
0001CB16                            
0001CB16                            SEgg_Eggman:	; Routine 2
0001CB16 7000                       		moveq	#0,d0
0001CB18 1028 0025                  		move.b	ob2ndRout(a0),d0
0001CB1C 323B 0000                  		move.w	SEgg_EggIndex(pc,d0.w),d1
0001CB20 4EBB 1000                  		jsr	SEgg_EggIndex(pc,d1.w)
0001CB24 43FA 0000                  		lea	Ani_SEgg(pc),a1
0001CB28 4EB9 0000 C574             		jsr	(AnimateSprite).l
0001CB2E 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001CB34                            ; ===========================================================================
0001CB34 0000                       SEgg_EggIndex:	dc.w SEgg_ChkSonic-SEgg_EggIndex
0001CB36 0000                       		dc.w SEgg_PreLeap-SEgg_EggIndex
0001CB38 0000                       		dc.w SEgg_Leap-SEgg_EggIndex
0001CB3A 0000                       		dc.w loc_19934-SEgg_EggIndex
0001CB3C                            ; ===========================================================================
0001CB3C                            
0001CB3C                            SEgg_ChkSonic:
0001CB3C 3028 0008                  		move.w	obX(a0),d0
0001CB40 9078 D008                  		sub.w	(v_player+obX).w,d0
0001CB44 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001CB48 6400                       		bcc.s	loc_19934	; if not, branch
0001CB4A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CB4E 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001CB54 117C 0001 001C             		move.b	#1,obAnim(a0)
0001CB5A                            
0001CB5A                            loc_19934:
0001CB5A 4EF9 0000 F4A6             		jmp	(SpeedToPos).l
0001CB60                            ; ===========================================================================
0001CB60                            
0001CB60                            SEgg_PreLeap:
0001CB60 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001CB64 6600                       		bne.s	loc_19954	; if time remains, branch
0001CB66 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CB6A 117C 0002 001C             		move.b	#2,obAnim(a0)
0001CB70 5868 000C                  		addq.w	#4,obY(a0)
0001CB74 317C 000F 003C             		move.w	#15,$3C(a0)
0001CB7A                            
0001CB7A                            loc_19954:
0001CB7A 60DE                       		bra.s	loc_19934
0001CB7C                            ; ===========================================================================
0001CB7C                            
0001CB7C                            SEgg_Leap:
0001CB7C 5368 003C                  		subq.w	#1,$3C(a0)
0001CB80 6E00                       		bgt.s	loc_199D0
0001CB82 6600                       		bne.s	loc_1996A
0001CB84 317C FF04 0010             		move.w	#-$FC,obVelX(a0) ; make Eggman leap
0001CB8A 317C FC40 0012             		move.w	#-$3C0,obVelY(a0)
0001CB90                            
0001CB90                            loc_1996A:
0001CB90 0C68 1C32 0008             		cmpi.w	#$1C32,obX(a0)
0001CB96 6E00                       		bgt.s	loc_19976
0001CB98 4268 0010                  		clr.w	obVelX(a0)
0001CB9C                            
0001CB9C                            loc_19976:
0001CB9C 0668 0024 0012             		addi.w	#$24,obVelY(a0)
0001CBA2 4A68 0012                  		tst.w	obVelY(a0)
0001CBA6 6B00                       		bmi.s	SEgg_FindBlocks
0001CBA8 0C68 0295 000C             		cmpi.w	#$295,obY(a0)
0001CBAE 6500                       		bcs.s	SEgg_FindBlocks
0001CBB0 317C 5357 0028             		move.w	#$5357,obSubtype(a0)
0001CBB6 0C68 029B 000C             		cmpi.w	#$29B,obY(a0)
0001CBBC 6500                       		bcs.s	SEgg_FindBlocks
0001CBBE 317C 029B 000C             		move.w	#$29B,obY(a0)
0001CBC4 4268 0012                  		clr.w	obVelY(a0)
0001CBC8                            
0001CBC8                            SEgg_FindBlocks:
0001CBC8 3028 0010                  		move.w	obVelX(a0),d0
0001CBCC 8068 0012                  		or.w	obVelY(a0),d0
0001CBD0 6600                       		bne.s	loc_199D0
0001CBD2 43F8 D000                  		lea	(v_objspace).w,a1 ; start at the first object RAM
0001CBD6 703E                       		moveq	#$3E,d0
0001CBD8 7240                       		moveq	#$40,d1
0001CBDA                            
0001CBDA                            SEgg_FindLoop:	
0001CBDA D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001CBDC 0C11 0083                  		cmpi.b	#id_FalseFloor,(a1) ; is object a block? (object $83)
0001CBE0 57C8 FFF8                  		dbeq	d0,SEgg_FindLoop ; if not, repeat (max	$3E times)
0001CBE4                            
0001CBE4 6600                       		bne.s	loc_199D0
0001CBE6 337C 474F 0028             		move.w	#$474F,obSubtype(a1) ; set block to disintegrate
0001CBEC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CBF0 117C 0001 001C             		move.b	#1,obAnim(a0)
0001CBF6                            
0001CBF6                            loc_199D0:
0001CBF6 6000 FF62                  		bra.w	loc_19934
0001CBFA                            ; ===========================================================================
0001CBFA                            
0001CBFA                            SEgg_Switch:	; Routine 4
0001CBFA 7000                       		moveq	#0,d0
0001CBFC 1028 0025                  		move.b	ob2ndRout(a0),d0
0001CC00 303B 0000                  		move.w	SEgg_SwIndex(pc,d0.w),d0
0001CC04 4EFB 0000                  		jmp	SEgg_SwIndex(pc,d0.w)
0001CC08                            ; ===========================================================================
0001CC08 0000                       SEgg_SwIndex:	dc.w loc_199E6-SEgg_SwIndex
0001CC0A 0000                       		dc.w SEgg_SwDisplay-SEgg_SwIndex
0001CC0C                            ; ===========================================================================
0001CC0C                            
0001CC0C                            loc_199E6:
0001CC0C 2268 0034                  		movea.l	$34(a0),a1
0001CC10 0C69 5357 0028             		cmpi.w	#$5357,obSubtype(a1)
0001CC16 6600                       		bne.s	SEgg_SwDisplay
0001CC18 117C 0001 001A             		move.b	#1,obFrame(a0)
0001CC1E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CC22                            
0001CC22                            SEgg_SwDisplay:
0001CC22 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001CC22 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001CC28                            		include	"_anim\Eggman - Scrap Brain 2 & Final.asm"
0001CC28                            ; ---------------------------------------------------------------------------
0001CC28                            ; Animation script - Eggman (SBZ2)
0001CC28                            ; ---------------------------------------------------------------------------
0001CC28 0000                       Ani_SEgg:	dc.w @stand-Ani_SEgg
0001CC2A 0000                       		dc.w @laugh-Ani_SEgg
0001CC2C 0000                       		dc.w @jump1-Ani_SEgg
0001CC2E 0000                       		dc.w @intube-Ani_SEgg
0001CC30 0000                       		dc.w @running-Ani_SEgg
0001CC32 0000                       		dc.w @jump2-Ani_SEgg
0001CC34 0000                       		dc.w @starjump-Ani_SEgg
0001CC36 7E00 FF                    @stand:		dc.b $7E, 0, afEnd
0001CC3A 00                         		even
0001CC3A 0601 02FF                  @laugh:		dc.b 6,	1, 2, afEnd
0001CC3E 0E03 0404 0000 00FF        @jump1:		dc.b $E, 3, 4, 4, 0, 0,	0, afEnd
0001CC46 0005 09FF                  @intube:	dc.b 0,	5, 9, afEnd
0001CC4A 0607 0408 04FF             @running:	dc.b 6,	7, 4, 8, 4, afEnd
0001CC50 0F04 0303 FF               @jump2:		dc.b $F, 4, 3, 3, afEnd
0001CC56 00                         		even
0001CC56 7E06 FF                    @starjump:	dc.b $7E, 6, afEnd
0001CC5A 00                         		even
0001CC5A 00                         		even
0001CC5A                            Map_SEgg:	include	"_maps\Eggman - Scrap Brain 2.asm"
0001CC5A                            ; --------------------------------------------------------------------------------
0001CC5A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001CC5A                            ; --------------------------------------------------------------------------------
0001CC5A                            
0001CC5A                            SME_y00JM:	
0001CC5A 0000 0000                  		dc.w SME_y00JM_16-SME_y00JM, SME_y00JM_26-SME_y00JM	
0001CC5E 0000 0000                  		dc.w SME_y00JM_4A-SME_y00JM, SME_y00JM_6E-SME_y00JM	
0001CC62 0000 0000                  		dc.w SME_y00JM_83-SME_y00JM, SME_y00JM_A7-SME_y00JM	
0001CC66 0000 0000                  		dc.w SME_y00JM_BC-SME_y00JM, SME_y00JM_E0-SME_y00JM	
0001CC6A 0000 0000                  		dc.w SME_y00JM_FA-SME_y00JM, SME_y00JM_119-SME_y00JM	
0001CC6E 0000                       		dc.w SME_y00JM_142-SME_y00JM	
0001CC70 03                         SME_y00JM_16:	dc.b 3	
0001CC71 FC00 008F E8               		dc.b $FC, 0, 0, $8F, $E8	
0001CC76 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001CC7B 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001CC80 07                         SME_y00JM_26:	dc.b 7	
0001CC81 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0	
0001CC86 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001CC8B FC00 008F E8               		dc.b $FC, 0, 0, $8F, $E8	
0001CC90 F800 0002 F0               		dc.b $F8, 0, 0, 2, $F0	
0001CC95 F800 0005 F8               		dc.b $F8, 0, 0, 5, $F8	
0001CC9A F800 0008 00               		dc.b $F8, 0, 0, 8, 0	
0001CC9F F800 000B 08               		dc.b $F8, 0, 0, $B, 8	
0001CCA4 07                         SME_y00JM_4A:	dc.b 7	
0001CCA5 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0	
0001CCAA FD00 008F E8               		dc.b $FD, 0, 0, $8F, $E8	
0001CCAF F900 0002 F0               		dc.b $F9, 0, 0, 2, $F0	
0001CCB4 F900 0005 F8               		dc.b $F9, 0, 0, 5, $F8	
0001CCB9 F900 0008 00               		dc.b $F9, 0, 0, 8, 0	
0001CCBE F900 000B 08               		dc.b $F9, 0, 0, $B, 8	
0001CCC3 010F 007F F0               		dc.b 1, $F, 0, $7F, $F0	
0001CCC8 04                         SME_y00JM_6E:	dc.b 4	
0001CCC9 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0	
0001CCCE F504 0830 10               		dc.b $F5, 4, 8, $30, $10	
0001CCD3 0809 084E F0               		dc.b 8, 9, 8, $4E, $F0	
0001CCD8 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0	
0001CCDD 07                         SME_y00JM_83:	dc.b 7	
0001CCDE F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001CCE3 F104 0830 10               		dc.b $F1, 4, 8, $30, $10	
0001CCE8 0806 083E F8               		dc.b 8, 6, 8, $3E, $F8	
0001CCED E800 0000 F0               		dc.b $E8, 0, 0, 0, $F0	
0001CCF2 E800 0003 F8               		dc.b $E8, 0, 0, 3, $F8	
0001CCF7 E800 0006 00               		dc.b $E8, 0, 0, 6, 0	
0001CCFC E800 0009 08               		dc.b $E8, 0, 0, 9, 8	
0001CD01 04                         SME_y00JM_A7:	dc.b 4	
0001CD02 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001CD07 E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001CD0C E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001CD11 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001CD16 07                         SME_y00JM_BC:	dc.b 7	
0001CD17 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001CD1C E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001CD21 0409 0834 00               		dc.b 4, 9, 8, $34, 0	
0001CD26 0405 083A E8               		dc.b 4, 5, 8, $3A, $E8	
0001CD2B F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001CD30 F104 0854 10               		dc.b $F1, 4, 8, $54, $10	
0001CD35 F104 0054 E0               		dc.b $F1, 4, 0, $54, $E0	
0001CD3A 05                         SME_y00JM_E0:	dc.b 5	
0001CD3B F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001CD40 F104 0830 10               		dc.b $F1, 4, 8, $30, $10	
0001CD45 0409 0834 00               		dc.b 4, 9, 8, $34, 0	
0001CD4A 0405 083A E8               		dc.b 4, 5, 8, $3A, $E8	
0001CD4F E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001CD54 06                         SME_y00JM_FA:	dc.b 6	
0001CD55 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0	
0001CD5A EF04 0830 10               		dc.b $EF, 4, 8, $30, $10	
0001CD5F 0905 0844 00               		dc.b 9, 5, 8, $44, 0	
0001CD64 0301 0848 F8               		dc.b 3, 1, 8, $48, $F8	
0001CD69 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8	
0001CD6E E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
0001CD73 08                         SME_y00JM_119:	dc.b 8	
0001CD74 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001CD79 E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001CD7E E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001CD83 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001CD88 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0, $F0	
0001CD8D F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0, $F0	
0001CD92 000D 3EF0 F0               		dc.b 0, $D, $3E, $F0, $F0	
0001CD97 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0, $F0	
0001CD9C 03                         SME_y00JM_142:	dc.b 3	
0001CD9D EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4	
0001CDA2 F408 005E 04               		dc.b $F4, 8, 0, $5E, 4	
0001CDA7 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC	
0001CDAC                            		even
0001CDAC                            		even
0001CDAC                            		include	"_incObj\83 SBZ Eggman's Crumbling Floor.asm"
0001CDAC                            ; ---------------------------------------------------------------------------
0001CDAC                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001CDAC                            ; ---------------------------------------------------------------------------
0001CDAC                            
0001CDAC                            FalseFloor:
0001CDAC 7000                       		moveq	#0,d0
0001CDAE 1028 0024                  		move.b	obRoutine(a0),d0
0001CDB2 323B 0000                  		move.w	FFloor_Index(pc,d0.w),d1
0001CDB6 4EFB 1000                  		jmp	FFloor_Index(pc,d1.w)
0001CDBA                            ; ===========================================================================
0001CDBA 0000                       FFloor_Index:	dc.w FFloor_Main-FFloor_Index
0001CDBC 0000                       		dc.w FFloor_ChkBreak-FFloor_Index
0001CDBE 0000                       		dc.w loc_19C36-FFloor_Index
0001CDC0 0000                       		dc.w loc_19C62-FFloor_Index
0001CDC2 0000                       		dc.w loc_19C72-FFloor_Index
0001CDC4 0000                       		dc.w loc_19C80-FFloor_Index
0001CDC6                            ; ===========================================================================
0001CDC6                            
0001CDC6                            FFloor_Main:	; Routine 0
0001CDC6 317C 1B80 0008             		move.w	#$1B80,obX(a0)
0001CDCC 317C 02D0 000C             		move.w	#$2D0,obY(a0)
0001CDD2 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001CDD8 117C 0010 0016             		move.b	#$10,obHeight(a0)
0001CDDE 117C 0004 0001             		move.b	#4,obRender(a0)
0001CDE4 08E8 0007 0001             		bset	#7,obRender(a0)
0001CDEA 7800                       		moveq	#0,d4
0001CDEC 3A3C 1B10                  		move.w	#$1B10,d5
0001CDF0 7C07                       		moveq	#7,d6
0001CDF2 45E8 0030                  		lea	$30(a0),a2
0001CDF6                            
0001CDF6                            FFloor_MakeBlock:
0001CDF6 4EB9 0000 FA54             		jsr	(FindFreeObj).l
0001CDFC 6600                       		bne.s	FFloor_ExitMake
0001CDFE 34C9                       		move.w	a1,(a2)+
0001CE00 12BC 0083                  		move.b	#id_FalseFloor,(a1) ; load block object
0001CE04 237C 0000 0000 0004        		move.l	#Map_FFloor,obMap(a1)
0001CE0C 337C 4518 0002             		move.w	#$4518,obGfx(a1)
0001CE12 137C 0004 0001             		move.b	#4,obRender(a1)
0001CE18 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001CE1E 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001CE24 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001CE2A 3345 0008                  		move.w	d5,obX(a1)	; set X	position
0001CE2E 337C 02D0 000C             		move.w	#$2D0,obY(a1)
0001CE34 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001CE38 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001CE3E 51CE FFB6                  		dbf	d6,FFloor_MakeBlock ; repeat sequence 7 more times
0001CE42                            
0001CE42                            FFloor_ExitMake:
0001CE42 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CE46 4E75                       		rts	
0001CE48                            ; ===========================================================================
0001CE48                            
0001CE48                            FFloor_ChkBreak:; Routine 2
0001CE48 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CE4E 6600                       		bne.s	FFloor_Solid	; if not, branch
0001CE50 4228 001A                  		clr.b	obFrame(a0)
0001CE54 5428 0024                  		addq.b	#2,obRoutine(a0) ; next subroutine
0001CE58                            
0001CE58                            FFloor_Solid:
0001CE58 7000                       		moveq	#0,d0
0001CE5A 1028 001A                  		move.b	obFrame(a0),d0
0001CE5E 4400                       		neg.b	d0
0001CE60 4880                       		ext.w	d0
0001CE62 5040                       		addq.w	#8,d0
0001CE64 E940                       		asl.w	#4,d0
0001CE66 383C 1C00                  		move.w	#$1C00,d4
0001CE6A 9840                       		sub.w	d0,d4
0001CE6C 1140 0014                  		move.b	d0,obActWid(a0)
0001CE70 3144 0008                  		move.w	d4,obX(a0)
0001CE74 720B                       		moveq	#$B,d1
0001CE76 D240                       		add.w	d0,d1
0001CE78 7410                       		moveq	#$10,d2
0001CE7A 7611                       		moveq	#$11,d3
0001CE7C 4EF9 0001 19F6             		jmp	(SolidObject).l
0001CE82                            ; ===========================================================================
0001CE82                            
0001CE82                            loc_19C36:	; Routine 4
0001CE82 0428 000E 001E             		subi.b	#$E,obTimeFrame(a0)
0001CE88 6400                       		bcc.s	FFloor_Solid2
0001CE8A 70FF                       		moveq	#-1,d0
0001CE8C 1028 001A                  		move.b	obFrame(a0),d0
0001CE90 4880                       		ext.w	d0
0001CE92 D040                       		add.w	d0,d0
0001CE94 3030 0030                  		move.w	$30(a0,d0.w),d0
0001CE98 2240                       		movea.l	d0,a1
0001CE9A 337C 474F 0028             		move.w	#$474F,obSubtype(a1)
0001CEA0 5228 001A                  		addq.b	#1,obFrame(a0)
0001CEA4 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)
0001CEAA 6700                       		beq.s	loc_19C62
0001CEAC                            
0001CEAC                            FFloor_Solid2:
0001CEAC 60AA                       		bra.s	FFloor_Solid
0001CEAE                            ; ===========================================================================
0001CEAE                            
0001CEAE                            loc_19C62:	; Routine 6
0001CEAE 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001CEB4 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001CEBA 6000 FB96                  		bra.w	loc_1982C
0001CEBE                            ; ===========================================================================
0001CEBE                            
0001CEBE                            loc_19C72:	; Routine 8
0001CEBE 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CEC4 6700                       		beq.s	FFloor_Break	; if yes, branch
0001CEC6 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001CECC                            ; ===========================================================================
0001CECC                            
0001CECC                            loc_19C80:	; Routine $A
0001CECC 4A28 0001                  		tst.b	obRender(a0)
0001CED0 6A00 FB80                  		bpl.w	loc_1982C
0001CED4 4EB9 0000 F46E             		jsr	(ObjectFall).l
0001CEDA 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001CEE0                            ; ===========================================================================
0001CEE0                            
0001CEE0                            FFloor_Break:
0001CEE0 49FA 0000                  		lea	FFloor_FragSpeed(pc),a4
0001CEE4 4BFA 0000                  		lea	FFloor_FragPos(pc),a5
0001CEE8 7801                       		moveq	#1,d4
0001CEEA 7203                       		moveq	#3,d1
0001CEEC 7438                       		moveq	#$38,d2
0001CEEE 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CEF2 117C 0008 0014             		move.b	#8,obActWid(a0)
0001CEF8 117C 0008 0016             		move.b	#8,obHeight(a0)
0001CEFE 43D0                       		lea	(a0),a1
0001CF00 6000                       		bra.s	FFloor_MakeFrag
0001CF02                            ; ===========================================================================
0001CF02                            
0001CF02                            FFloor_LoopFrag:
0001CF02 4EB9 0000 FA6A             		jsr	(FindNextFreeObj).l
0001CF08 6600                       		bne.s	FFloor_BreakSnd
0001CF0A                            
0001CF0A                            FFloor_MakeFrag:
0001CF0A 45D0                       		lea	(a0),a2
0001CF0C 47D1                       		lea	(a1),a3
0001CF0E 7603                       		moveq	#3,d3
0001CF10                            
0001CF10                            loc_19CC4:
0001CF10 26DA                       		move.l	(a2)+,(a3)+
0001CF12 26DA                       		move.l	(a2)+,(a3)+
0001CF14 26DA                       		move.l	(a2)+,(a3)+
0001CF16 26DA                       		move.l	(a2)+,(a3)+
0001CF18 51CB FFF6                  		dbf	d3,loc_19CC4
0001CF1C                            
0001CF1C 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001CF20 361D                       		move.w	(a5)+,d3
0001CF22 D769 0008                  		add.w	d3,obX(a1)
0001CF26 361D                       		move.w	(a5)+,d3
0001CF28 D769 000C                  		add.w	d3,obY(a1)
0001CF2C 1344 001A                  		move.b	d4,obFrame(a1)
0001CF30 5244                       		addq.w	#1,d4
0001CF32 51C9 FFCE                  		dbf	d1,FFloor_LoopFrag ; repeat sequence 3 more times
0001CF36                            
0001CF36                            FFloor_BreakSnd:
0001CF40 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001CF46                            ; ===========================================================================
0001CF46 0080 0000                  FFloor_FragSpeed:dc.w $80, 0
0001CF4A 0120 00C0                  		dc.w $120, $C0
0001CF4E FFF8 FFF8                  FFloor_FragPos:	dc.w -8, -8
0001CF52 0010 0000                  		dc.w $10, 0
0001CF56 0000 0010                  		dc.w 0,	$10
0001CF5A 0010 0010                  		dc.w $10, $10
0001CF5A 0010 0010                  		dc.w $10, $10
0001CF5E                            Map_FFloor:	include	"_maps\SBZ Eggman's Crumbling Floor.asm"
0001CF5E                            ; ---------------------------------------------------------------------------
0001CF5E                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001CF5E                            ; ---------------------------------------------------------------------------
0001CF5E                            Map_FFloor_internal:
0001CF5E 0000                       		dc.w @wholeblock-Map_FFloor_internal
0001CF60 0000                       		dc.w @topleft-Map_FFloor_internal
0001CF62 0000                       		dc.w @topright-Map_FFloor_internal
0001CF64 0000                       		dc.w @bottomleft-Map_FFloor_internal
0001CF66 0000                       		dc.w @bottomright-Map_FFloor_internal
0001CF68 01                         @wholeblock:	dc.b 1
0001CF69 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001CF6E 02                         @topleft:	dc.b 2
0001CF6F F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001CF74 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001CF79 00                         		dc.b 0
0001CF7A 02                         @topright:	dc.b 2
0001CF7B F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001CF80 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001CF85 00                         		dc.b 0
0001CF86 02                         @bottomleft:	dc.b 2
0001CF87 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001CF8C F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001CF91 00                         		dc.b 0
0001CF92 02                         @bottomright:	dc.b 2
0001CF93 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001CF98 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001CF9E 00                         		even
0001CF9E 00                         		even
0001CF9E                            		include	"_incObj\85 Boss - Final.asm"
0001CF9E                            ; ---------------------------------------------------------------------------
0001CF9E                            ; Object 85 - Eggman (FZ)
0001CF9E                            ; ---------------------------------------------------------------------------
0001CF9E                            
0001CF9E                            Obj85_Delete:
0001CF9E 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001CFA4                            ; ===========================================================================
0001CFA4                            
0001CFA4                            BossFinal:
0001CFA4 7000                       		moveq	#0,d0
0001CFA6 1028 0024                  		move.b	obRoutine(a0),d0
0001CFAA 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001CFAE 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001CFB2                            ; ===========================================================================
0001CFB2 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001CFB4 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001CFB6 0000                       		dc.w loc_1A38E-Obj85_Index
0001CFB8 0000                       		dc.w loc_1A346-Obj85_Index
0001CFBA 0000                       		dc.w loc_1A2C6-Obj85_Index
0001CFBC 0000                       		dc.w loc_1A3AC-Obj85_Index
0001CFBE 0000                       		dc.w loc_1A264-Obj85_Index
0001CFC0                            
0001CFC0 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001CFC6 0001 CC5A                  		dc.l Map_SEgg		; mappings pointer
0001CFCA 25B0 0590 0300             		dc.w $25B0, $590, $300
0001CFD0 0000 0000                  		dc.l Map_EggCyl
0001CFD4 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001CFDA 0000 0000                  		dc.l Map_FZLegs
0001CFDE 26E0 0596 0470             		dc.w $26E0, $596, $470
0001CFE4 0001 CC5A                  		dc.l Map_SEgg
0001CFE8 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CFEE 0001 AEDE                  		dc.l Map_Eggman
0001CFF2 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CFF8 0001 AEDE                  		dc.l Map_Eggman
0001CFFC                            
0001CFFC                            Obj85_ObjData2:	; routine num, animation, sprite priority (high and low bytes), width, height		
0001CFFC 0200 0200 2019             		dc.b  2, 0, $02, $00, $20, $19
0001D002 0400 0080 1208             		dc.b  4, 0, $00, $80, $12,   8
0001D008 0600 0180 0000             		dc.b  6, 0, $01, $80,   0,   0
0001D00E 0800 0180 0000             		dc.b  8, 0, $01, $80,   0,   0
0001D014 0A00 0180 2020             		dc.b $A, 0, $01, $80, $20, $20
0001D01A 0C00 0180 0000             		dc.b $C, 0, $01, $80,   0,   0
0001D020                            ; ===========================================================================
0001D020                            
0001D020                            Obj85_Main:	; Routine 0
0001D020 45FA FF9E                  		lea	Obj85_ObjData(pc),a2
0001D024 47FA FFD6                  		lea	Obj85_ObjData2(pc),a3
0001D028 2248                       		movea.l	a0,a1
0001D02A 7205                       		moveq	#5,d1
0001D02C 6000                       		bra.s	Obj85_LoadBoss
0001D02E                            ; ===========================================================================
0001D02E                            
0001D02E                            Obj85_Loop:
0001D02E 4EB9 0000 FA6A             		jsr	(FindNextFreeObj).l
0001D034 6600                       		bne.s	loc_19E20
0001D036                            
0001D036                            Obj85_LoadBoss:
0001D036 12BC 0085                  		move.b	#id_BossFinal,(a1)
0001D03A 335A 0008                  		move.w	(a2)+,obX(a1)
0001D03E 335A 000C                  		move.w	(a2)+,obY(a1)
0001D042 335A 0002                  		move.w	(a2)+,obGfx(a1)
0001D046 235A 0004                  		move.l	(a2)+,obMap(a1)
0001D04A 135B 0024                  		move.b	(a3)+,obRoutine(a1)
0001D04E 135B 001C                  		move.b	(a3)+,obAnim(a1)
0001D052 335B 0018                  		move.w	(a3)+,obPriority(a1)
0001D056 135B 0014                  			move.b	(a3)+,obActWid(a1)
0001D05A 135B 0016                  		move.b	(a3)+,obHeight(a1)
0001D05E 137C 0004 0001             		move.b	#4,obRender(a1)
0001D064 08E8 0007 0001             		bset	#7,obRender(a0)
0001D06A 2348 0034                  		move.l	a0,$34(a1)
0001D06E 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001D072                            
0001D072                            loc_19E20:
0001D072 45E8 0036                  		lea	$36(a0),a2
0001D076 4EB9 0000 FA54             		jsr	(FindFreeObj).l
0001D07C 6600                       		bne.s	loc_19E5A
0001D07E 12BC 0086                  		move.b	#id_BossPlasma,(a1) ; load energy ball object
0001D082 3489                       		move.w	a1,(a2)
0001D084 2348 0034                  		move.l	a0,$34(a1)
0001D088 45E8 0038                  		lea	$38(a0),a2
0001D08C 7400                       		moveq	#0,d2
0001D08E 7203                       		moveq	#3,d1
0001D090                            
0001D090                            loc_19E3E:
0001D090 4EB9 0000 FA6A             		jsr	(FindNextFreeObj).l
0001D096 6600                       		bne.s	loc_19E5A
0001D098 34C9                       		move.w	a1,(a2)+
0001D09A 12BC 0084                  		move.b	#id_EggmanCylinder,(a1) ; load crushing	cylinder object
0001D09E 2348 0034                  		move.l	a0,$34(a1)
0001D0A2 1342 0028                  		move.b	d2,obSubtype(a1)
0001D0A6 5442                       		addq.w	#2,d2
0001D0A8 51C9 FFE6                  		dbf	d1,loc_19E3E
0001D0AC                            
0001D0AC                            loc_19E5A:
0001D0AC 317C 0000 0034             		move.w	#0,$34(a0)
0001D0B2 117C 0006 0021             		move.b	#6,obColProp(a0) ; set number of hits to 6
0001D0B8 317C FFFF 0030             		move.w	#-1,$30(a0)
0001D0BE                            
0001D0BE                            Obj85_Eggman:	; Routine 2
0001D0BE 7000                       		moveq	#0,d0
0001D0C0 1028 0034                  		move.b	$34(a0),d0
0001D0C4 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001D0C8 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001D0CC 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001D0D2                            ; ===========================================================================
0001D0D2 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001D0D6 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001D0DA 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001D0DE 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001D0E2                            ; ===========================================================================
0001D0E2                            
0001D0E2                            loc_19E90:
0001D0E2 4AB8 F680                  		tst.l	(v_plc_buffer).w
0001D0E6 6600                       		bne.s	loc_19EA2
0001D0E8 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
0001D0EE 6500                       		bcs.s	loc_19EA2
0001D0F0 5428 0034                  		addq.b	#2,$34(a0)
0001D0F4                            
0001D0F4                            loc_19EA2:
0001D0F4 52B8 F636                  		addq.l	#1,(v_random).w
0001D0F8 4E75                       		rts	
0001D0FA                            ; ===========================================================================
0001D0FA                            
0001D0FA                            loc_19EA8:
0001D0FA 4A68 0030                  		tst.w	$30(a0)
0001D0FE 6A00                       		bpl.s	loc_19F10
0001D100 4268 0030                  		clr.w	$30(a0)
0001D104 4EB9 0000 3B7C             		jsr	(RandomNumber).l
0001D10A 0240 000C                  		andi.w	#$C,d0
0001D10E 3200                       		move.w	d0,d1
0001D110 5441                       		addq.w	#2,d1
0001D112 4A80                       		tst.l	d0
0001D114 6A00                       		bpl.s	loc_19EC6
0001D116 C340                       		exg	d1,d0
0001D118                            
0001D118                            loc_19EC6:
0001D118 43FA 0000                  		lea	word_19FD6(pc),a1
0001D11C 3031 0000                  		move.w	(a1,d0.w),d0
0001D120 3231 1000                  		move.w	(a1,d1.w),d1
0001D124 3140 0030                  		move.w	d0,$30(a0)
0001D128 74FF                       		moveq	#-1,d2
0001D12A 3430 0038                  		move.w	$38(a0,d0.w),d2
0001D12E 2242                       		movea.l	d2,a1
0001D130 137C 00FF 0029             		move.b	#-1,$29(a1)
0001D136 337C FFFF 0030             		move.w	#-1,$30(a1)
0001D13C 3430 1038                  		move.w	$38(a0,d1.w),d2
0001D140 2242                       		movea.l	d2,a1
0001D142 137C 0001 0029             		move.b	#1,$29(a1)
0001D148 337C 0000 0030             		move.w	#0,$30(a1)
0001D14E 317C 0001 0032             		move.w	#1,$32(a0)
0001D154 4228 0035                  		clr.b	$35(a0)
0001D162                            
0001D162                            loc_19F10:
0001D162 4A68 0032                  		tst.w	$32(a0)
0001D166 6B00 0000                  		bmi.w	loc_19FA6
0001D16A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001D170 3038 D008                  		move.w	(v_player+obX).w,d0
0001D174 9068 0008                  		sub.w	obX(a0),d0
0001D178 6500                       		bcs.s	loc_19F2E
0001D17A 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D180                            
0001D180                            loc_19F2E:
0001D180 323C 002B                  		move.w	#$2B,d1
0001D184 343C 0014                  		move.w	#$14,d2
0001D188 363C 0014                  		move.w	#$14,d3
0001D18C 3828 0008                  		move.w	obX(a0),d4
0001D190 4EB9 0001 19F6             		jsr	(SolidObject).l
0001D196 4A44                       		tst.w	d4
0001D198 6E00                       		bgt.s	loc_19F50
0001D19A                            
0001D19A                            loc_19F48:
0001D19A 4A28 0035                  		tst.b	$35(a0)
0001D19E 6600                       		bne.s	loc_19F88
0001D1A0 6000                       		bra.s	loc_19F96
0001D1A2                            ; ===========================================================================
0001D1A2                            
0001D1A2                            loc_19F50:
0001D1A2 5E78 F636                  		addq.w	#7,(v_random).w
0001D1A6 0C38 0002 D01C             		cmpi.b	#id_Roll,(v_player+obAnim).w
0001D1AC 66EC                       		bne.s	loc_19F48
0001D1AE 303C 0300                  		move.w	#$300,d0
0001D1B2 0828 0000 0022             		btst	#0,obStatus(a0)
0001D1B8 6600                       		bne.s	loc_19F6A
0001D1BA 4440                       		neg.w	d0
0001D1BC                            
0001D1BC                            loc_19F6A:
0001D1BC 31C0 D010                  		move.w	d0,(v_player+obVelX).w
0001D1C0 4A28 0035                  		tst.b	$35(a0)
0001D1C4 6600                       		bne.s	loc_19F88
0001D1C6 5328 0021                  		subq.b	#1,obColProp(a0)
0001D1CA 117C 00FF 0035             		move.b	#$FF,$35(a0)
0001D1D0 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001D1D6                            
0001D1D6                            loc_19F88:
0001D1D6 5328 0035                  		subq.b	#1,$35(a0)
0001D1DA 6700                       		beq.s	loc_19F96
0001D1DC 117C 0003 001C             		move.b	#3,obAnim(a0)
0001D1E2 6000                       		bra.s	loc_19F9C
0001D1E4                            ; ===========================================================================
0001D1E4                            
0001D1E4                            loc_19F96:
0001D1E4 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D1EA                            
0001D1EA                            loc_19F9C:
0001D1EA 43FA FA3C                  		lea	Ani_SEgg(pc),a1
0001D1EE 4EF9 0000 C574             		jmp	(AnimateSprite).l
0001D1F4                            ; ===========================================================================
0001D1F4                            
0001D1F4                            loc_19FA6:
0001D1F4 4A28 0021                  		tst.b	obColProp(a0)
0001D1F8 6700                       		beq.s	loc_19FBC
0001D1FA 5428 0034                  		addq.b	#2,$34(a0)
0001D1FE 317C FFFF 0030             		move.w	#-1,$30(a0)
0001D204 4268 0032                  		clr.w	$32(a0)
0001D208 4E75                       		rts	
0001D20A                            ; ===========================================================================
0001D20A                            
0001D20A                            loc_19FBC:
0001D20A 7064                       			moveq	#100,d0
0001D20C 6100 0000                  			bsr.w	AddPoints
0001D210 117C 0006 0034             		move.b	#6,$34(a0)
0001D216 317C 25C0 0008             		move.w	#$25C0,obX(a0)
0001D21C 317C 053C 000C             		move.w	#$53C,obY(a0)
0001D222 117C 0014 0016             		move.b	#$14,obHeight(a0)
0001D228 4E75                       		rts	
0001D22A                            ; ===========================================================================
0001D22A 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001D23A                            ; ===========================================================================
0001D23A                            
0001D23A                            loc_19FE6:
0001D23A 70FF                       		moveq	#-1,d0
0001D23C 3028 0036                  		move.w	$36(a0),d0
0001D240 2240                       		movea.l	d0,a1
0001D242 4A68 0030                  		tst.w	$30(a0)
0001D246 6A00                       		bpl.s	loc_1A000
0001D248 4268 0030                  		clr.w	$30(a0)
0001D24C 137C 00FF 0029             		move.b	#-1,$29(a1)
0001D252 6100                       		bsr.s	loc_1A020
0001D254                            
0001D254                            loc_1A000:
0001D254 700F                       		moveq	#$F,d0
0001D256 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001D25A 6600                       		bne.s	loc_1A00A
0001D25C 6100                       		bsr.s	loc_1A020
0001D25E                            
0001D25E                            loc_1A00A:
0001D25E 4A68 0032                  		tst.w	$32(a0)
0001D262 6700                       		beq.s	locret_1A01E
0001D264 5528 0034                  		subq.b	#2,$34(a0)
0001D268 317C FFFF 0030             		move.w	#-1,$30(a0)
0001D26E 4268 0032                  		clr.w	$32(a0)
0001D272                            
0001D272                            locret_1A01E:
0001D272 4E75                       		rts	
0001D274                            ; ===========================================================================
0001D274                            
0001D274                            loc_1A020:
0001D27E                            ; ===========================================================================
0001D27E                            
0001D27E                            loc_1A02A:
0001D27E 117C 0030 0014             			move.b	#$30,obActWid(a0)
0001D284 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D28A 4EB9 0000 F4A6             		jsr	(SpeedToPos).l
0001D290 117C 0006 001A             		move.b	#6,obFrame(a0)
0001D296 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001D29C 0C68 059C 000C             		cmpi.w	#$59C,obY(a0)
0001D2A2 6500                       		bcs.s	loc_1A070
0001D2A4 317C 059C 000C             		move.w	#$59C,obY(a0)
0001D2AA 5428 0034                  		addq.b	#2,$34(a0)
0001D2AE 117C 0020 0014             			move.b	#$20,obActWid(a0)
0001D2B4 317C 0100 0010             		move.w	#$100,obVelX(a0)
0001D2BA 317C FF00 0012             		move.w	#-$100,obVelY(a0)
0001D2C0 5438 F742                  		addq.b	#2,(v_dle_routine).w
0001D2C4                            
0001D2C4                            loc_1A070:
0001D2C4 6000 0000                  		bra.w	loc_1A166
0001D2C8                            ; ===========================================================================
0001D2C8                            
0001D2C8                            loc_1A074:
0001D2C8 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D2CE 117C 0004 001C             		move.b	#4,obAnim(a0)
0001D2D4 4EB9 0000 F4A6             		jsr	(SpeedToPos).l
0001D2DA 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001D2E0 0C68 05A3 000C             		cmpi.w	#$5A3,obY(a0)
0001D2E6 6500                       		bcs.s	loc_1A09A
0001D2E8 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001D2EE                            
0001D2EE                            loc_1A09A:
0001D2EE 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001D2F4 3028 0008                  		move.w	obX(a0),d0
0001D2F8 9078 D008                  		sub.w	(v_player+obX).w,d0
0001D2FC 6A00                       		bpl.s	loc_1A0B4
0001D2FE 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001D304 6000 0000                  		bra.w	loc_1A0F2
0001D308                            ; ===========================================================================
0001D308                            
0001D308                            loc_1A0B4:
0001D308 0440 0070                  		subi.w	#$70,d0
0001D30C 6500                       		bcs.s	loc_1A0F2
0001D30E 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001D314 5140                       		subq.w	#8,d0
0001D316 6500                       		bcs.s	loc_1A0F2
0001D318 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001D31E 5140                       		subq.w	#8,d0
0001D320 6500                       		bcs.s	loc_1A0F2
0001D322 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D328 5140                       		subq.w	#8,d0
0001D32A 6500                       		bcs.s	loc_1A0F2
0001D32C 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D332 5140                       		subq.w	#8,d0
0001D334 6500                       		bcs.s	loc_1A0F2
0001D336 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D33C 0440 0038                  		subi.w	#$38,d0
0001D340 6500                       		bcs.s	loc_1A0F2
0001D342 4268 0010                  		clr.w	obVelX(a0)
0001D346                            
0001D346                            loc_1A0F2:
0001D346 0C68 26A0 0008             		cmpi.w	#$26A0,obX(a0)
0001D34C 6500                       		bcs.s	loc_1A110
0001D34E 317C 26A0 0008             		move.w	#$26A0,obX(a0)
0001D354 317C 0240 0010             		move.w	#$240,obVelX(a0)
0001D35A 317C FB40 0012             		move.w	#-$4C0,obVelY(a0)
0001D360 5428 0034                  		addq.b	#2,$34(a0)
0001D364                            
0001D364                            loc_1A110:
0001D364 6000                       		bra.s	loc_1A15C
0001D366                            ; ===========================================================================
0001D366                            
0001D366                            loc_1A112:
0001D366 4EB9 0000 F4A6             		jsr	(SpeedToPos).l
0001D36C 0C68 26E0 0008             		cmpi.w	#$26E0,obX(a0)
0001D372 6500                       		bcs.s	loc_1A124
0001D374 4268 0010                  		clr.w	obVelX(a0)
0001D378                            
0001D378                            loc_1A124:
0001D378 0668 0034 0012             		addi.w	#$34,obVelY(a0)
0001D37E 4A68 0012                  		tst.w	obVelY(a0)
0001D382 6B00                       		bmi.s	loc_1A142
0001D384 0C68 0592 000C             		cmpi.w	#$592,obY(a0)
0001D38A 6500                       		bcs.s	loc_1A142
0001D38C 317C 0592 000C             		move.w	#$592,obY(a0)
0001D392 4268 0012                  		clr.w	obVelY(a0)
0001D396                            
0001D396                            loc_1A142:
0001D396 3028 0010                  		move.w	obVelX(a0),d0
0001D39A 8068 0012                  		or.w	obVelY(a0),d0
0001D39E 6600                       		bne.s	loc_1A15C
0001D3A0 5428 0034                  		addq.b	#2,$34(a0)
0001D3A4 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001D3AA 117C 0001 0021             		move.b	#1,obColProp(a0)
0001D3B0                            
0001D3B0                            loc_1A15C:
0001D3B0 43FA F876                  		lea	Ani_SEgg(pc),a1
0001D3B4 4EB9 0000 C574             		jsr	(AnimateSprite).l
0001D3BA                            
0001D3BA                            loc_1A166:
0001D3BA 0C78 2700 F72A             		cmpi.w	#$2700,(v_limitright2).w
0001D3C0 6C00                       		bge.s	loc_1A172
0001D3C2 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001D3C6                            
0001D3C6                            loc_1A172:
0001D3C6 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001D3CC 6C00                       		bge.s	locret_1A190
0001D3CE 323C 001B                  		move.w	#$1B,d1
0001D3D2 343C 0070                  		move.w	#$70,d2
0001D3D6 363C 0071                  		move.w	#$71,d3
0001D3DA 3828 0008                  		move.w	obX(a0),d4
0001D3DE 4EF9 0001 19F6             		jmp	(SolidObject).l
0001D3E4                            ; ===========================================================================
0001D3E4                            
0001D3E4                            locret_1A190:
0001D3E4 4E75                       		rts	
0001D3E6                            ; ===========================================================================
0001D3E6                            
0001D3E6                            loc_1A192:
0001D3E6 217C 0001 AEDE 0004        		move.l	#Map_Eggman,obMap(a0)
0001D3EE 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D3F4 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D3FA 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D400 4EB9 0000 F4A6             		jsr	(SpeedToPos).l
0001D406 0C68 0544 000C             		cmpi.w	#$544,obY(a0)
0001D40C 6400                       		bcc.s	loc_1A1D0
0001D40E 317C 0180 0010             		move.w	#$180,obVelX(a0)
0001D414 317C FFE8 0012             		move.w	#-$18,obVelY(a0)
0001D41A 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D420 5428 0034                  		addq.b	#2,$34(a0)
0001D424                            
0001D424                            loc_1A1D0:
0001D424 6000 FF8A                  		bra.w	loc_1A15C
0001D428                            ; ===========================================================================
0001D428                            
0001D428                            loc_1A1D4:
0001D428 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D42E 4EB9 0000 F4A6             		jsr	(SpeedToPos).l
0001D434 4A68 0030                  		tst.w	$30(a0)
0001D438 6600                       		bne.s	loc_1A1FC
0001D43A 4A28 0020                  		tst.b	obColType(a0)
0001D43E 6600                       		bne.s	loc_1A216
0001D440 317C 001E 0030             		move.w	#$1E,$30(a0)
0001D446 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001D44C                            
0001D44C                            loc_1A1FC:
0001D44C 5368 0030                  		subq.w	#1,$30(a0)
0001D450 6600                       		bne.s	loc_1A216
0001D452 4A28 0022                  		tst.b	obStatus(a0)
0001D456 6A00                       		bpl.s	loc_1A210
0001D458 317C 0060 0012             		move.w	#$60,obVelY(a0)
0001D45E 6000                       		bra.s	loc_1A216
0001D460                            ; ===========================================================================
0001D460                            
0001D460                            loc_1A210:
0001D460 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D466                            
0001D466                            loc_1A216:
0001D466 0C78 2790 D008             		cmpi.w	#$2790,(v_player+obX).w
0001D46C 6D00                       		blt.s	loc_1A23A
0001D46E 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w
0001D474 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
0001D47A 4278 D020                  		clr.w	(v_player+obInertia).w
0001D47E 4A68 0012                  		tst.w	obVelY(a0)
0001D482 6A00                       		bpl.s	loc_1A248
0001D484 31FC 0100 F602             		move.w	#$100,(v_jpadhold2).w
0001D48A                            
0001D48A                            loc_1A23A:
0001D48A 0C78 27E0 D008             		cmpi.w	#$27E0,(v_player+obX).w
0001D490 6D00                       		blt.s	loc_1A248
0001D492 31FC 27E0 D008             		move.w	#$27E0,(v_player+obX).w
0001D498                            
0001D498                            loc_1A248:
0001D498 0C68 2900 0008             		cmpi.w	#$2900,obX(a0)
0001D49E 6500                       		bcs.s	loc_1A260
0001D4A0 4A28 0001                  		tst.b	obRender(a0)
0001D4A4 6B00                       		bmi.s	loc_1A260
0001D4A6 11FC 0018 F600             		move.b	#$18,(v_gamemode).w
0001D4AC 6000 FAF0                  		bra.w	Obj85_Delete
0001D4B0                            ; ===========================================================================
0001D4B0                            
0001D4B0                            loc_1A260:
0001D4B0 6000 FEFE                  		bra.w	loc_1A15C
0001D4B4                            ; ===========================================================================
0001D4B4                            
0001D4B4                            loc_1A264:	; Routine 4
0001D4B4 2268 0034                  		movea.l	$34(a0),a1
0001D4B8 1011                       		move.b	(a1),d0
0001D4BA B010                       		cmp.b	(a0),d0
0001D4BC 6600 FAE0                  		bne.w	Obj85_Delete
0001D4C0 117C 0007 001C             		move.b	#7,obAnim(a0)
0001D4C6 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D4CC 6C00                       		bge.s	loc_1A280
0001D4CE 6000                       		bra.s	loc_1A2A6
0001D4D0                            ; ===========================================================================
0001D4D0                            
0001D4D0                            loc_1A280:
0001D4D0 4A69 0010                  		tst.w	obVelX(a1)
0001D4D4 6700                       		beq.s	loc_1A28C
0001D4D6 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001D4DC                            
0001D4DC                            loc_1A28C:
0001D4DC 43FA D9B0                  		lea	Ani_Eggman(pc),a1
0001D4E0 4EB9 0000 C574             		jsr	(AnimateSprite).l
0001D4E6                            
0001D4E6                            loc_1A296:
0001D4E6 2268 0034                  		movea.l	$34(a0),a1
0001D4EA 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D4F0 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D4F6                            
0001D4F6                            loc_1A2A6:
0001D4F6 2268 0034                  		movea.l	$34(a0),a1
0001D4FA 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001D500 7003                       		moveq	#3,d0
0001D502 C028 0022                  		and.b	obStatus(a0),d0
0001D506 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001D50C 8128 0001                  		or.b	d0,obRender(a0)
0001D510 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001D516                            ; ===========================================================================
0001D516                            
0001D516                            loc_1A2C6:	; Routine 6
0001D516 2268 0034                  		movea.l	$34(a0),a1
0001D51A 1011                       		move.b	(a1),d0
0001D51C B010                       		cmp.b	(a0),d0
0001D51E 6600 FA7E                  		bne.w	Obj85_Delete
0001D522 0CA9 0001 AEDE 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D52A 6700                       		beq.s	loc_1A2E4
0001D52C 117C 000A 001A             		move.b	#$A,obFrame(a0)
0001D532 60C2                       		bra.s	loc_1A2A6
0001D534                            ; ===========================================================================
0001D534                            
0001D534                            loc_1A2E4:
0001D534 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D53A 4A29 0021                  		tst.b	obColProp(a1)
0001D53E 6F00                       		ble.s	loc_1A312
0001D540 117C 0006 001C             		move.b	#6,obAnim(a0)
0001D546 217C 0001 AEDE 0004        		move.l	#Map_Eggman,obMap(a0)
0001D54E 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D554 43FA D938                  		lea	Ani_Eggman(pc),a1
0001D558 4EB9 0000 C574             		jsr	(AnimateSprite).l
0001D55E 6000 FF86                  		bra.w	loc_1A296
0001D562                            ; ===========================================================================
0001D562                            
0001D562                            loc_1A312:
0001D562 4A28 0001                  		tst.b	1(a0)
0001D566 6A00 FA36                  		bpl.w	Obj85_Delete
0001D56A 6100 D4CC                  		bsr.w	BossDefeated
0001D56E 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001D574 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D57A 217C 0000 0000 0004        		move.l	#Map_FZDamaged,obMap(a0)
0001D582 317C 03A0 0002             		move.w	#$3A0,obGfx(a0)
0001D588 43FA 0000                  		lea	Ani_FZEgg(pc),a1
0001D58C 4EB9 0000 C574             		jsr	(AnimateSprite).l
0001D592 6000 FF52                  		bra.w	loc_1A296
0001D596                            ; ===========================================================================
0001D596                            
0001D596                            loc_1A346:	; Routine 8
0001D596 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D59C 2268 0034                  		movea.l	$34(a0),a1
0001D5A0 0CA9 0001 AEDE 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D5A8 6700                       		beq.s	loc_1A35E
0001D5AA 6000 FF4A                  		bra.w	loc_1A2A6
0001D5AE                            ; ===========================================================================
0001D5AE                            
0001D5AE                            loc_1A35E:
0001D5AE 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D5B4 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D5BA 4A28 001E                  		tst.b	obTimeFrame(a0)
0001D5BE 6600                       		bne.s	loc_1A376
0001D5C0 117C 0014 001E             		move.b	#$14,obTimeFrame(a0)
0001D5C6                            
0001D5C6                            loc_1A376:
0001D5C6 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001D5CA 6E00                       		bgt.s	loc_1A38A
0001D5CC 5228 001A                  		addq.b	#1,obFrame(a0)
0001D5D0 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001D5D6 6E00 F9C6                  		bgt.w	Obj85_Delete
0001D5DA                            
0001D5DA                            loc_1A38A:
0001D5DA 6000 FF0A                  		bra.w	loc_1A296
0001D5DE                            ; ===========================================================================
0001D5DE                            
0001D5DE                            loc_1A38E:	; Routine $A
0001D5DE 117C 000B 001A             		move.b	#$B,obFrame(a0)
0001D5E4 3038 D008                  		move.w	(v_player+obX).w,d0
0001D5E8 9068 0008                  		sub.w	obX(a0),d0
0001D5EC 6500                       		bcs.s	loc_1A3A6
0001D5EE 4A28 0001                  		tst.b	obRender(a0)
0001D5F2 6A00 F9AA                  		bpl.w	Obj85_Delete
0001D5F6                            
0001D5F6                            loc_1A3A6:
0001D5F6 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001D5FC                            ; ===========================================================================
0001D5FC                            
0001D5FC                            loc_1A3AC:	; Routine $C
0001D5FC 117C 0000 001A             		move.b	#0,obFrame(a0)
0001D602 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D608 2268 0034                  		movea.l	$34(a0),a1
0001D60C 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D612 6600                       		bne.s	loc_1A3D0
0001D614 0CA9 0001 AEDE 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D61C 6700 F980                  		beq.w	Obj85_Delete
0001D620                            
0001D620                            loc_1A3D0:
0001D620 6000 FED4                  		bra.w	loc_1A2A6
0001D624                            		
0001D624                            BossModeMusic:
0001D624 0C28 0002 0021             		cmpi.b	#2,obColProp(a0)
0001D62A 6600 0000                  		bne.w	NormalMode
0001D62E 4EF9 0000 0000             		jmp	PinchMode
0001D634                            
0001D634                            NormalMode:
0001D634 303C 00AC                  		move.w	#$AC,d0
0001D638 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001D63E 4E75                       		rts
0001D640                            
0001D640                            PinchMode:
0001D640 303C 0094                  		move.w	#$94,d0
0001D644 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001D64A 303C 00E2                  		move.w	#$E2,d0
0001D64E 4EB9 0000 129A             		jsr	(PlaySound).l
0001D654 4E75                       		rts		
0001D654 4E75                       		rts		
0001D656                            		include	"_anim\FZ Eggman in Ship.asm"
0001D656                            ; ---------------------------------------------------------------------------
0001D656                            ; Animation script - Eggman (FZ)
0001D656                            ; ---------------------------------------------------------------------------
0001D656 0000                       Ani_FZEgg:	dc.w byte_1A3D6-Ani_FZEgg
0001D658 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, afEnd
0001D65C                            		even
0001D65C                            		even
0001D65C                            Map_FZDamaged:	include	"_maps\FZ Damaged Eggmobile.asm"
0001D65C                            ; ---------------------------------------------------------------------------
0001D65C                            ; Sprite mappings - Eggman in broken eggmobile (FZ)
0001D65C                            ; ---------------------------------------------------------------------------
0001D65C                            Map_FZDamaged_internal:
0001D65C 0000                       		dc.w @damage1-Map_FZDamaged_internal
0001D65E 0000                       		dc.w @damage2-Map_FZDamaged_internal
0001D660 06                         @damage1:	dc.b 6
0001D661 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001D666 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001D66B EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D670 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D675 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D67A 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D67F 06                         @damage2:	dc.b 6
0001D680 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001D685 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001D68A EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D68F FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D694 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D699 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D69E                            		even
0001D69E                            		even
0001D69E                            Map_FZLegs:	include	"_maps\FZ Eggmobile Legs.asm"
0001D69E                            ; ---------------------------------------------------------------------------
0001D69E                            ; Sprite mappings - legs on Eggman's escape ship (FZ)
0001D69E                            ; ---------------------------------------------------------------------------
0001D69E                            Map_FZLegs_internal:
0001D69E 0000                       		dc.w @extended-Map_FZLegs_internal
0001D6A0 0000                       		dc.w @halfway-Map_FZLegs_internal
0001D6A2 0000                       		dc.w @retracted-Map_FZLegs_internal
0001D6A4 02                         @extended:	dc.b 2
0001D6A5 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001D6AA 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001D6AF 03                         @halfway:	dc.b 3
0001D6B0 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001D6B5 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001D6BA 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001D6BF 02                         @retracted:	dc.b 2
0001D6C0 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001D6C5 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001D6CA                            		even
0001D6CA                            		even
0001D6CA                            		include	"_incObj\84 FZ Eggman's Cylinders.asm"
0001D6CA                            ; ---------------------------------------------------------------------------
0001D6CA                            ; Object 84 - cylinder Eggman hides in (FZ)
0001D6CA                            ; ---------------------------------------------------------------------------
0001D6CA                            
0001D6CA                            Obj84_Delete:
0001D6CA 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001D6D0                            ; ===========================================================================
0001D6D0                            
0001D6D0                            EggmanCylinder:
0001D6D0 7000                       		moveq	#0,d0
0001D6D2 1028 0024                  		move.b	obRoutine(a0),d0
0001D6D6 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001D6DA 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001D6DE                            ; ===========================================================================
0001D6DE 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001D6E0 0000                       		dc.w loc_1A4CE-Obj84_Index
0001D6E2 0000                       		dc.w loc_1A57E-Obj84_Index
0001D6E4                            
0001D6E4 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001D6E8 2550 0620                  		dc.w $2550, $620
0001D6EC 2490 04C0                  		dc.w $2490, $4C0
0001D6F0 2510 04C0                  		dc.w $2510, $4C0
0001D6F4                            ; ===========================================================================
0001D6F4                            
0001D6F4                            Obj84_Main:	; Routine
0001D6F4 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001D6F8 7000                       		moveq	#0,d0
0001D6FA 1028 0028                  		move.b	obSubtype(a0),d0
0001D6FE D040                       		add.w	d0,d0
0001D700 D2C0                       		adda.w	d0,a1
0001D702 117C 0004 0001             		move.b	#4,obRender(a0)
0001D708 08E8 0007 0001             		bset	#7,obRender(a0)
0001D70E 08E8 0004 0001             		bset	#4,obRender(a0)
0001D714 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001D71A 217C 0000 0000 0004        		move.l	#Map_EggCyl,obMap(a0)
0001D722 3159 0008                  		move.w	(a1)+,obX(a0)
0001D726 3151 000C                  		move.w	(a1),obY(a0)
0001D72A 3159 0038                  		move.w	(a1)+,$38(a0)
0001D72E 117C 0020 0016             		move.b	#$20,obHeight(a0)
0001D734 117C 0060 0017             		move.b	#$60,obWidth(a0)
0001D73A 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001D740 117C 0060 0016             		move.b	#$60,obHeight(a0)
0001D746 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001D74C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D750                            
0001D750                            loc_1A4CE:	; Routine 2
0001D750 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D756 6F00                       		ble.s	loc_1A4DC
0001D758 08E8 0001 0001             		bset	#1,obRender(a0)
0001D75E                            
0001D75E                            loc_1A4DC:
0001D75E 42A8 003C                  		clr.l	$3C(a0)
0001D762 4A28 0029                  		tst.b	$29(a0)
0001D766 6700                       		beq.s	loc_1A4EA
0001D768 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D76C                            
0001D76C                            loc_1A4EA:
0001D76C 2028 003C                  		move.l	$3C(a0),d0
0001D770 2228 0038                  		move.l	$38(a0),d1
0001D774 D280                       		add.l	d0,d1
0001D776 4841                       		swap	d1
0001D778 3141 000C                  		move.w	d1,obY(a0)
0001D77C 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0001D782 6600                       		bne.s	loc_1A524
0001D784 4A68 0030                  		tst.w	$30(a0)
0001D788 6A00                       		bpl.s	loc_1A524
0001D78A 70F6                       		moveq	#-$A,d0
0001D78C 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D792 6F00                       		ble.s	loc_1A514
0001D794 700E                       		moveq	#$E,d0
0001D796                            
0001D796                            loc_1A514:
0001D796 D240                       		add.w	d0,d1
0001D798 2268 0034                  		movea.l	$34(a0),a1
0001D79C 3341 000C                  		move.w	d1,obY(a1)
0001D7A0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001D7A6                            
0001D7A6                            loc_1A524:
0001D7A6 323C 002B                  		move.w	#$2B,d1
0001D7AA 343C 0060                  		move.w	#$60,d2
0001D7AE 363C 0061                  		move.w	#$61,d3
0001D7B2 3828 0008                  		move.w	obX(a0),d4
0001D7B6 4EB9 0001 19F6             		jsr	(SolidObject).l
0001D7BC 7000                       		moveq	#0,d0
0001D7BE 3228 003C                  		move.w	$3C(a0),d1
0001D7C2 6A00                       		bpl.s	loc_1A550
0001D7C4 4441                       		neg.w	d1
0001D7C6 5141                       		subq.w	#8,d1
0001D7C8 6500                       		bcs.s	loc_1A55C
0001D7CA 5200                       		addq.b	#1,d0
0001D7CC E841                       		asr.w	#4,d1
0001D7CE D041                       		add.w	d1,d0
0001D7D0 6000                       		bra.s	loc_1A55C
0001D7D2                            ; ===========================================================================
0001D7D2                            
0001D7D2                            loc_1A550:
0001D7D2 0441 0027                  		subi.w	#$27,d1
0001D7D6 6500                       		bcs.s	loc_1A55C
0001D7D8 5200                       		addq.b	#1,d0
0001D7DA E841                       		asr.w	#4,d1
0001D7DC D041                       		add.w	d1,d0
0001D7DE                            
0001D7DE                            loc_1A55C:
0001D7DE 1140 001A                  		move.b	d0,obFrame(a0)
0001D7E2 3038 D008                  		move.w	(v_player+obX).w,d0
0001D7E6 9068 0008                  		sub.w	obX(a0),d0
0001D7EA 6B00                       		bmi.s	loc_1A578
0001D7EC 0440 0140                  		subi.w	#$140,d0
0001D7F0 6B00                       		bmi.s	loc_1A578
0001D7F2 4A28 0001                  		tst.b	obRender(a0)
0001D7F6 6A00 FED2                  		bpl.w	Obj84_Delete
0001D7FA                            
0001D7FA                            loc_1A578:
0001D7FA 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001D800                            ; ===========================================================================
0001D800                            
0001D800                            loc_1A57E:	; Routine 4
0001D800 7000                       		moveq	#0,d0
0001D802 1028 0028                  		move.b	obSubtype(a0),d0
0001D806 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001D80A 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001D80E 6000 FF5C                  		bra.w	loc_1A4EA
0001D812                            ; ===========================================================================
0001D812 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001D814 0000                       		dc.w loc_1A598-off_1A590
0001D816 0000                       		dc.w loc_1A604-off_1A590
0001D818 0000                       		dc.w loc_1A604-off_1A590
0001D81A                            ; ===========================================================================
0001D81A                            
0001D81A                            loc_1A598:
0001D81A 4A28 0029                  		tst.b	$29(a0)
0001D81E 6600                       		bne.s	loc_1A5D4
0001D820 2268 0034                  		movea.l	$34(a0),a1
0001D824 4A29 0021                  		tst.b	obColProp(a1)
0001D828 6600                       		bne.s	loc_1A5B4
0001D82A 6100 D20C                  		bsr.w	BossDefeated
0001D82E 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001D836                            
0001D836                            loc_1A5B4:
0001D836 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001D83E 6400                       		bcc.s	locret_1A602
0001D840 42A8 003C                  		clr.l	$3C(a0)
0001D844 2268 0034                  		movea.l	$34(a0),a1
0001D848 5369 0032                  		subq.w	#1,$32(a1)
0001D84C 4269 0030                  		clr.w	$30(a1)
0001D850 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D854 4E75                       		rts	
0001D856                            ; ===========================================================================
0001D856                            
0001D856                            loc_1A5D4:
0001D856 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001D85C 6C00                       		bge.s	loc_1A5E4
0001D85E 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001D866                            
0001D866                            loc_1A5E4:
0001D866 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001D86E 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001D874 6E00                       		bgt.s	locret_1A602
0001D876 4268 003E                  		clr.w	$3E(a0)
0001D87A 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001D880 4228 0029                  		clr.b	$29(a0)
0001D884                            
0001D884                            locret_1A602:
0001D884 4E75                       		rts	
0001D886                            ; ===========================================================================
0001D886                            
0001D886                            loc_1A604:
0001D886 08E8 0001 0001             		bset	#1,obRender(a0)
0001D88C 4A28 0029                  		tst.b	$29(a0)
0001D890 6600                       		bne.s	loc_1A646
0001D892 2268 0034                  		movea.l	$34(a0),a1
0001D896 4A29 0021                  		tst.b	obColProp(a1)
0001D89A 6600                       		bne.s	loc_1A626
0001D89C 6100 D19A                  		bsr.w	BossDefeated
0001D8A0 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001D8A8                            
0001D8A8                            loc_1A626:
0001D8A8 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001D8B0 6400                       		bcc.s	locret_1A674
0001D8B2 42A8 003C                  		clr.l	$3C(a0)
0001D8B6 2268 0034                  		movea.l	$34(a0),a1
0001D8BA 5369 0032                  		subq.w	#1,$32(a1)
0001D8BE 4269 0030                  		clr.w	$30(a1)
0001D8C2 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D8C6 4E75                       		rts	
0001D8C8                            ; ===========================================================================
0001D8C8                            
0001D8C8                            loc_1A646:
0001D8C8 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001D8CE 6D00                       		blt.s	loc_1A656
0001D8D0 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001D8D8                            
0001D8D8                            loc_1A656:
0001D8D8 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001D8E0 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001D8E6 6D00                       		blt.s	locret_1A674
0001D8E8 4268 003E                  		clr.w	$3E(a0)
0001D8EC 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001D8F2 4228 0029                  		clr.b	$29(a0)
0001D8F6                            
0001D8F6                            locret_1A674:
0001D8F6 4E75                       		rts	
0001D8F6 4E75                       		rts	
0001D8F8                            Map_EggCyl:	include	"_maps\FZ Eggman's Cylinders.asm"
0001D8F8                            ; --------------------------------------------------------------------------------
0001D8F8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001D8F8                            ; --------------------------------------------------------------------------------
0001D8F8                            
0001D8F8                            SME_SCUpI:	
0001D8F8 0000 0000                  		dc.w SME_SCUpI_18-SME_SCUpI, SME_SCUpI_37-SME_SCUpI	
0001D8FC 0000 0000                  		dc.w SME_SCUpI_60-SME_SCUpI, SME_SCUpI_93-SME_SCUpI	
0001D900 0000 0000                  		dc.w SME_SCUpI_D0-SME_SCUpI, SME_SCUpI_112-SME_SCUpI	
0001D904 0000 0000                  		dc.w SME_SCUpI_159-SME_SCUpI, SME_SCUpI_1A0-SME_SCUpI	
0001D908 0000 0000                  		dc.w SME_SCUpI_1E7-SME_SCUpI, SME_SCUpI_22E-SME_SCUpI	
0001D90C 0000 0000                  		dc.w SME_SCUpI_275-SME_SCUpI, SME_SCUpI_2BC-SME_SCUpI	
0001D910 06                         SME_SCUpI_18:	dc.b 6	
0001D911 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D916 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D91B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D920 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D925 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D92A A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D92F 08                         SME_SCUpI_37:	dc.b 8	
0001D930 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D935 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D93A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D93F B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D944 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D949 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D94E D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D953 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D958 0A                         SME_SCUpI_60:	dc.b $A	
0001D959 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D95E B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D963 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D968 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D96D B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D972 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D977 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D97C F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D981 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D986 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D98B 0C                         SME_SCUpI_93:	dc.b $C	
0001D98C A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D991 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D996 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D99B B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D9A0 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D9A5 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D9AA D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D9AF F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D9B4 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D9B9 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D9BE 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D9C3 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D9C8 0D                         SME_SCUpI_D0:	dc.b $D	
0001D9C9 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D9CE B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D9D3 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D9D8 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D9DD B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D9E2 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D9E7 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D9EC F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D9F1 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D9F6 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D9FB 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DA00 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DA05 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DA0A 0E                         SME_SCUpI_112:	dc.b $E	
0001DA0B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DA10 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DA15 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DA1A B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DA1F B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DA24 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DA29 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DA2E F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DA33 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DA38 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DA3D 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DA42 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DA47 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DA4C A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DA51 0E                         SME_SCUpI_159:	dc.b $E	
0001DA52 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DA57 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DA5C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DA61 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DA66 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DA6B D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DA70 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DA75 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DA7A F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DA7F 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DA84 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DA89 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DA8E 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DA93 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DA98 0E                         SME_SCUpI_1A0:	dc.b $E	
0001DA99 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DA9E B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DAA3 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DAA8 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DAAD B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DAB2 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DAB7 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DABC F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DAC1 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DAC6 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DACB 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DAD0 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DAD5 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DADA A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DADF 0E                         SME_SCUpI_1E7:	dc.b $E	
0001DAE0 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DAE5 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DAEA B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DAEF B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DAF4 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DAF9 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DAFE D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DB03 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DB08 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DB0D 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DB12 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DB17 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DB1C 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DB21 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DB26 0E                         SME_SCUpI_22E:	dc.b $E	
0001DB27 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DB2C B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DB31 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DB36 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DB3B B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DB40 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DB45 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DB4A F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DB4F F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DB54 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DB59 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DB5E 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DB63 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DB68 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DB6D 0E                         SME_SCUpI_275:	dc.b $E	
0001DB6E A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DB73 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DB78 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DB7D B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DB82 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DB87 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DB8C D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DB91 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DB96 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DB9B 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DBA0 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DBA5 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DBAA 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DBAF A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DBB4 02                         SME_SCUpI_2BC:	dc.b 2	
0001DBB5 F804 0068 F0               		dc.b $F8, 4, 0, $68, $F0	
0001DBBA 000C 006A F0               		dc.b 0, $C, 0, $6A, $F0	
0001DBC0 00                         		even
0001DBC0 00                         		even
0001DBC0                            		include	"_incObj\86 FZ Plasma Ball Launcher.asm"
0001DBC0                            ; ---------------------------------------------------------------------------
0001DBC0                            ; Object 86 - energy balls (FZ)
0001DBC0                            ; ---------------------------------------------------------------------------
0001DBC0                            
0001DBC0                            BossPlasma:
0001DBC0 7000                       		moveq	#0,d0
0001DBC2 1028 0024                  		move.b	obRoutine(a0),d0
0001DBC6 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001DBCA 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001DBCE                            ; ===========================================================================
0001DBCE 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001DBD0 0000                       		dc.w Obj86_Generator-Obj86_Index
0001DBD2 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001DBD4 0000                       		dc.w loc_1A962-Obj86_Index
0001DBD6 0000                       		dc.w loc_1A982-Obj86_Index
0001DBD8                            ; ===========================================================================
0001DBD8                            
0001DBD8                            Obj86_Main:	; Routine 0
0001DBD8 317C 2588 0008             		move.w	#$2588,obX(a0)
0001DBDE 317C 053C 000C             		move.w	#$53C,obY(a0)
0001DBE4 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001DBEA 217C 0000 0000 0004        		move.l	#Map_PLaunch,obMap(a0)
0001DBF2 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DBF8 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001DBFE 117C 0008 0017             		move.b	#8,obWidth(a0)
0001DC04 117C 0008 0016             		move.b	#8,obHeight(a0)
0001DC0A 117C 0004 0001             		move.b	#4,obRender(a0)
0001DC10 08E8 0007 0001             		bset	#7,obRender(a0)
0001DC16 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DC1A                            
0001DC1A                            Obj86_Generator:; Routine 2
0001DC1A 2268 0034                  		movea.l	$34(a0),a1
0001DC1E 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001DC24 6600                       		bne.s	loc_1A850
0001DC26 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001DC2A 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001DC30 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001DC36                            ; ===========================================================================
0001DC36                            
0001DC36                            loc_1A850:
0001DC36 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DC3C 4A28 0029                  		tst.b	$29(a0)
0001DC40 6700                       		beq.s	loc_1A86C
0001DC42 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DC46 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DC4C 117C 003E 0028             		move.b	#$3E,obSubtype(a0)
0001DC52                            
0001DC52                            loc_1A86C:
0001DC52 323C 0013                  		move.w	#$13,d1
0001DC56 343C 0008                  		move.w	#8,d2
0001DC5A 363C 0011                  		move.w	#$11,d3
0001DC5E 3828 0008                  		move.w	obX(a0),d4
0001DC62 4EB9 0001 19F6             		jsr	(SolidObject).l
0001DC68 3038 D008                  		move.w	(v_player+obX).w,d0
0001DC6C 9068 0008                  		sub.w	obX(a0),d0
0001DC70 6B00                       		bmi.s	loc_1A89A
0001DC72 0440 0140                  		subi.w	#$140,d0
0001DC76 6B00                       		bmi.s	loc_1A89A
0001DC78 4A28 0001                  		tst.b	obRender(a0)
0001DC7C 6A00 FA4C                  		bpl.w	Obj84_Delete
0001DC80                            
0001DC80                            loc_1A89A:
0001DC80 43FA 0000                  		lea	Ani_PLaunch(pc),a1
0001DC84 4EB9 0000 C574             		jsr	(AnimateSprite).l
0001DC8A 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001DC90                            ; ===========================================================================
0001DC90                            
0001DC90                            Obj86_MakeBalls:; Routine 4
0001DC90 4A28 0029                  		tst.b	$29(a0)
0001DC94 6700 0000                  		beq.w	loc_1A954
0001DC98 4228 0029                  		clr.b	$29(a0)
0001DC9C D068 0030                  		add.w	$30(a0),d0
0001DCA0 0240 001E                  		andi.w	#$1E,d0
0001DCA4 D4C0                       		adda.w	d0,a2
0001DCA6 5868 0030                  		addq.w	#4,$30(a0)
0001DCAA 4268 0032                  		clr.w	$32(a0)
0001DCAE 7403                       		moveq	#3,d2
0001DCB0                            
0001DCB0                            Obj86_Loop:
0001DCB0 4EB9 0000 FA6A             		jsr	(FindNextFreeObj).l
0001DCB6 6600 0000                  		bne.w	loc_1A954
0001DCBA 12BC 0086                  		move.b	#id_BossPlasma,(a1)
0001DCBE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DCC4 337C 053C 000C             		move.w	#$53C,obY(a1)
0001DCCA 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001DCD0 337C 2300 0002             		move.w	#$2300,obGfx(a1)
0001DCD6 237C 0000 0000 0004        		move.l	#Map_Plasma,obMap(a1)
0001DCDE 137C 000C 0016             		move.b	#$C,obHeight(a1)
0001DCE4 137C 000C 0017             		move.b	#$C,obWidth(a1)
0001DCEA 137C 0000 0020             		move.b	#0,obColType(a1)
0001DCF0 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001DCF6 337C 003E 0028             		move.w	#$3E,obSubtype(a1)
0001DCFC 137C 0004 0001             		move.b	#4,obRender(a1)
0001DD02 08E9 0007 0001             		bset	#7,obRender(a1)
0001DD08 2348 0034                  		move.l	a0,$34(a1)
0001DD0C 4EB9 0000 3B7C             		jsr	(RandomNumber).l
0001DD12 3228 0032                  		move.w	$32(a0),d1
0001DD16 C3FC FFB1                  		muls.w	#-$4F,d1
0001DD1A 0641 2578                  		addi.w	#$2578,d1
0001DD1E 0240 001F                  		andi.w	#$1F,d0
0001DD22 0440 0010                  		subi.w	#$10,d0
0001DD26 D041                       		add.w	d1,d0
0001DD28 3340 0030                  		move.w	d0,$30(a1)
0001DD2C 5268 0032                  		addq.w	#1,$32(a0)
0001DD30 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001DD36 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001DD3A                            
0001DD3A                            loc_1A954:
0001DD3A 4A68 0032                  		tst.w	$32(a0)
0001DD3E 6600                       		bne.s	loc_1A95E
0001DD40 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DD44                            
0001DD44                            loc_1A95E:
0001DD44 6000 FF0C                  		bra.w	loc_1A86C
0001DD48                            ; ===========================================================================
0001DD48                            
0001DD48                            loc_1A962:	; Routine 6
0001DD48 117C 0002 001C             		move.b	#2,obAnim(a0)
0001DD4E 4A68 0038                  		tst.w	$38(a0)
0001DD52 6600                       		bne.s	loc_1A97E
0001DD54 117C 0002 0024             		move.b	#2,obRoutine(a0)
0001DD5A 2268 0034                  		movea.l	$34(a0),a1
0001DD5E 337C FFFF 0032             		move.w	#-1,$32(a1)
0001DD64                            
0001DD64                            loc_1A97E:
0001DD64 6000 FEEC                  		bra.w	loc_1A86C
0001DD68                            ; ===========================================================================
0001DD68                            
0001DD68                            loc_1A982:	; Routine 8
0001DD68 7000                       		moveq	#0,d0
0001DD6A 1028 0025                  		move.b	ob2ndRout(a0),d0
0001DD6E 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001DD72 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001DD76 43FA 0000                  		lea	Ani_Plasma(pc),a1
0001DD7A 4EB9 0000 C574             		jsr	(AnimateSprite).l
0001DD80 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001DD86                            ; ===========================================================================
0001DD86 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001DD88 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001DD8A 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001DD8C                            ; ===========================================================================
0001DD8C                            
0001DD8C                            loc_1A9A6:
0001DD8C 3028 0030                  		move.w	$30(a0),d0
0001DD90 9068 0008                  		sub.w	obX(a0),d0
0001DD94 E940                       		asl.w	#4,d0
0001DD96 3140 0010                  		move.w	d0,obVelX(a0)
0001DD9A 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DDA0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DDA4 4E75                       		rts	
0001DDA6                            ; ===========================================================================
0001DDA6                            
0001DDA6                            loc_1A9C0:
0001DDA6 4A68 0010                  		tst.w	obVelX(a0)
0001DDAA 6700                       		beq.s	loc_1A9E6
0001DDAC 4EB9 0000 F4A6             		jsr	(SpeedToPos).l
0001DDB2 3028 0008                  		move.w	obX(a0),d0
0001DDB6 9068 0030                  		sub.w	$30(a0),d0
0001DDBA 6400                       		bcc.s	loc_1A9E6
0001DDBC 4268 0010                  		clr.w	obVelX(a0)
0001DDC0 D168 0008                  		add.w	d0,obX(a0)
0001DDC4 2268 0034                  		movea.l	$34(a0),a1
0001DDC8 5369 0032                  		subq.w	#1,$32(a1)
0001DDCC                            
0001DDCC                            loc_1A9E6:
0001DDCC 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DDD2 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DDD6 6600                       		bne.s	locret_1AA1C
0001DDD8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DDDC 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DDE2 117C 009A 0020             		move.b	#$9A,obColType(a0)
0001DDE8 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DDEE 7000                       		moveq	#0,d0
0001DDF0 3038 D008                  		move.w	(v_player+obX).w,d0
0001DDF4 9068 0008                  		sub.w	obX(a0),d0
0001DDF8 3140 0010                  		move.w	d0,obVelX(a0)
0001DDFC 317C 0140 0012             		move.w	#$140,obVelY(a0)
0001DE02                            
0001DE02                            locret_1AA1C:
0001DE02 4E75                       		rts	
0001DE04                            ; ===========================================================================
0001DE04                            
0001DE04                            loc_1AA1E:
0001DE04 4EB9 0000 F4A6             		jsr	(SpeedToPos).l
0001DE0A 0C68 05E0 000C             		cmpi.w	#$5E0,obY(a0)
0001DE10 6400                       		bcc.s	loc_1AA34
0001DE12 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DE16 6700                       		beq.s	loc_1AA34
0001DE18 4E75                       		rts	
0001DE1A                            ; ===========================================================================
0001DE1A                            
0001DE1A                            loc_1AA34:
0001DE1A 2268 0034                  		movea.l	$34(a0),a1
0001DE1E 5369 0038                  		subq.w	#1,$38(a1)
0001DE22 6000 F8A6                  		bra.w	Obj84_Delete
0001DE22 6000 F8A6                  		bra.w	Obj84_Delete
0001DE26                            		include	"_anim\Plasma Ball Launcher.asm"
0001DE26                            ; ---------------------------------------------------------------------------
0001DE26                            ; Animation script - energy ball launcher (FZ)
0001DE26                            ; ---------------------------------------------------------------------------
0001DE26 0000                       Ani_PLaunch:	dc.w @red-Ani_PLaunch
0001DE28 0000                       		dc.w @redsparking-Ani_PLaunch
0001DE2A 0000                       		dc.w @whitesparking-Ani_PLaunch
0001DE2C 7E00 FF                    @red:		dc.b $7E, 0, afEnd
0001DE30 00                         		even
0001DE30 0100 0200 03FF             @redsparking:	dc.b 1,	0, 2, 0, 3, afEnd
0001DE36                            		even
0001DE36 0101 0201 03FF             @whitesparking:	dc.b 1,	1, 2, 1, 3, afEnd
0001DE3C                            		even
0001DE3C                            		even
0001DE3C                            Map_PLaunch:	include	"_maps\Plasma Ball Launcher.asm"
0001DE3C                            ; ---------------------------------------------------------------------------
0001DE3C                            ; Sprite mappings - energy ball	launcher (FZ)
0001DE3C                            ; ---------------------------------------------------------------------------
0001DE3C                            Map_PLaunch_internal:
0001DE3C 0000                       		dc.w @red-Map_PLaunch_internal
0001DE3E 0000                       		dc.w @white-Map_PLaunch_internal
0001DE40 0000                       		dc.w @sparking1-Map_PLaunch_internal
0001DE42 0000                       		dc.w @sparking2-Map_PLaunch_internal
0001DE44 01                         @red:		dc.b 1
0001DE45 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001DE4A 01                         @white:		dc.b 1
0001DE4B F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001DE50 01                         @sparking1:	dc.b 1
0001DE51 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001DE56 01                         @sparking2:	dc.b 1
0001DE57 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001DE5C                            		even
0001DE5C                            		even
0001DE5C                            		include	"_anim\Plasma Balls.asm"
0001DE5C                            ; ---------------------------------------------------------------------------
0001DE5C                            ; Animation script - energy balls (FZ)
0001DE5C                            ; ---------------------------------------------------------------------------
0001DE5C 0000                       Ani_Plasma:	dc.w @full-Ani_Plasma
0001DE5E 0000                       		dc.w @short-Ani_Plasma
0001DE60 0100 0A08 0A01 0A09 0A06+  @full:		dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001DE6F 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001DE7E 0A05 FF                    		dc.b $A, 5, afEnd
0001DE82 00                         		even
0001DE82 0006 0501 0507 0501 05FF   @short:		dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	afEnd
0001DE8C                            		even
0001DE8C                            		even
0001DE8C                            Map_Plasma:	include	"_maps\Plasma Balls.asm"
0001DE8C                            ; ---------------------------------------------------------------------------
0001DE8C                            ; Sprite mappings - energy balls (FZ)
0001DE8C                            ; ---------------------------------------------------------------------------
0001DE8C                            Map_Plasma_internal:
0001DE8C 0000                       		dc.w @fuzzy1-Map_Plasma_internal
0001DE8E 0000                       		dc.w @fuzzy2-Map_Plasma_internal
0001DE90 0000                       		dc.w @white1-Map_Plasma_internal
0001DE92 0000                       		dc.w @white2-Map_Plasma_internal
0001DE94 0000                       		dc.w @white3-Map_Plasma_internal
0001DE96 0000                       		dc.w @white4-Map_Plasma_internal
0001DE98 0000                       		dc.w @fuzzy3-Map_Plasma_internal
0001DE9A 0000                       		dc.w @fuzzy4-Map_Plasma_internal
0001DE9C 0000                       		dc.w @fuzzy5-Map_Plasma_internal
0001DE9E 0000                       		dc.w @fuzzy6-Map_Plasma_internal
0001DEA0 0000                       		dc.w @blank-Map_Plasma_internal
0001DEA2 02                         @fuzzy1:	dc.b 2
0001DEA3 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001DEA8 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001DEAD 02                         @fuzzy2:	dc.b 2
0001DEAE F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001DEB3 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001DEB8 02                         @white1:	dc.b 2
0001DEB9 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001DEBE 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001DEC3 02                         @white2:	dc.b 2
0001DEC4 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001DEC9 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001DECE 02                         @white3:	dc.b 2
0001DECF F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001DED4 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001DED9 02                         @white4:	dc.b 2
0001DEDA F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001DEDF F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001DEE4 01                         @fuzzy3:	dc.b 1
0001DEE5 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001DEEA 01                         @fuzzy4:	dc.b 1
0001DEEB F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001DEF0 02                         @fuzzy5:	dc.b 2
0001DEF1 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001DEF6 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001DEFB 02                         @fuzzy6:	dc.b 2
0001DEFC F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001DF01 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001DF06 00                         @blank:		dc.b 0
0001DF08 00                         		even
0001DF08 00                         		even
0001DF08                            
0001DF08                            		include	"_incObj\3E Prison Capsule.asm"
0001DF08                            ; ---------------------------------------------------------------------------
0001DF08                            ; Object 3E - prison capsule
0001DF08                            ; ---------------------------------------------------------------------------
0001DF08                            
0001DF08                            Prison:
0001DF08 7000                       		moveq	#0,d0
0001DF0A 1028 0024                  		move.b	obRoutine(a0),d0
0001DF0E 323B 0000                  		move.w	Pri_Index(pc,d0.w),d1
0001DF12 4EBB 1000                  		jsr	Pri_Index(pc,d1.w)
0001DF32 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001DF38                            
0001DF38                            	@delete:
0001DF38 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001DF3E                            ; ===========================================================================
0001DF3E 0000                       Pri_Index:	dc.w Pri_Main-Pri_Index
0001DF40 0000                       		dc.w Pri_BodyMain-Pri_Index
0001DF42 0000                       		dc.w Pri_Switched-Pri_Index
0001DF44 0000                       		dc.w Pri_Explosion-Pri_Index
0001DF46 0000                       		dc.w Pri_Explosion-Pri_Index
0001DF48 0000                       		dc.w Pri_Explosion-Pri_Index
0001DF4A 0000                       		dc.w Pri_Animals-Pri_Index
0001DF4C 0000                       		dc.w Pri_EndAct-Pri_Index
0001DF4E                            
0001DF4E =00000030                  pri_origY:	equ $30		; original y-axis position
0001DF4E                            
0001DF4E 0220 0400                  Pri_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001DF52 040C 0501                  		dc.b 4,	$C, 5, 1
0001DF56 0610 0403                  		dc.b 6,	$10, 4,	3
0001DF5A 0810 0305                  		dc.b 8,	$10, 3,	5
0001DF5E                            ; ===========================================================================
0001DF5E                            
0001DF5E                            Pri_Main:	; Routine 0
0001DF5E 217C 0000 0000 0004        		move.l	#Map_Pri,obMap(a0)
0001DF66 317C 049D 0002             		move.w	#$49D,obGfx(a0)
0001DF6C 117C 0004 0001             		move.b	#4,obRender(a0)
0001DF72 3168 000C 0030             		move.w	obY(a0),pri_origY(a0)
0001DF78 7000                       		moveq	#0,d0
0001DF7A 1028 0028                  		move.b	obSubtype(a0),d0
0001DF7E E548                       		lsl.w	#2,d0
0001DF80 43FB 00CC                  		lea	Pri_Var(pc,d0.w),a1
0001DF84 1159 0024                  		move.b	(a1)+,obRoutine(a0)
0001DF88 1159 0014                  		move.b	(a1)+,obActWid(a0)
0001DF8C 1159 0018                  		move.b	(a1)+,obPriority(a0)
0001DF90 3028 0018                  		move.w obPriority(a0),d0 
0001DF94 E248                       		lsr.w #1,d0 
0001DF96 0240 0380                  		andi.w #$380,d0 
0001DF9A 3140 0018                  		move.w d0,obPriority(a0)		
0001DF9E 1159 001A                  		move.b	(a1)+,obFrame(a0)
0001DFA2 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001DFA6 6600                       		bne.s	@not02		; if not, branch
0001DFA8                            
0001DFA8 117C 0006 0020             		move.b	#6,obColType(a0)
0001DFAE 117C 0008 0021             		move.b	#8,obColProp(a0)
0001DFB4                            
0001DFB4                            	@not02:
0001DFB4 4E75                       		rts	
0001DFB6                            ; ===========================================================================
0001DFB6                            
0001DFB6                            Pri_BodyMain:	; Routine 2
0001DFB6 0C38 0002 F7A7             		cmpi.b	#2,(v_bossstatus).w
0001DFBC 6700                       		beq.s	@chkopened
0001DFBE 323C 002B                  		move.w	#$2B,d1
0001DFC2 343C 0018                  		move.w	#$18,d2
0001DFC6 363C 0018                  		move.w	#$18,d3
0001DFCA 3828 0008                  		move.w	obX(a0),d4
0001DFCE 4EF9 0001 19F6             		jmp	(SolidObject).l
0001DFD4                            ; ===========================================================================
0001DFD4                            
0001DFD4                            @chkopened:
0001DFD4 4A28 0025                  		tst.b	ob2ndRout(a0)	; has the prison been opened?
0001DFD8 6700                       		beq.s	@open		; if yes, branch
0001DFDA 4228 0025                  		clr.b	ob2ndRout(a0)
0001DFDE 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DFE4 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DFEA                            
0001DFEA                            	@open:
0001DFEA 117C 0002 001A             		move.b	#2,obFrame(a0)	; use frame number 2 (destroyed	prison)
0001DFF0                            		
0001DFF0                            	@rts:
0001DFF0 4E75                       		rts
0001DFF2                            ; ===========================================================================
0001DFF2                            
0001DFF2                            Pri_Switched:	; Routine 4
0001DFF2 323C 0017                  		move.w	#$17,d1
0001DFF6 343C 0008                  		move.w	#8,d2
0001DFFA 363C 0008                  		move.w	#8,d3
0001DFFE 3828 0008                  		move.w	obX(a0),d4
0001E002 4EB9 0001 19F6             		jsr	(SolidObject).l
0001E008 43F9 0000 0000             		lea	(Ani_Pri).l,a1
0001E00E 4EB9 0000 C574             		jsr	(AnimateSprite).l
0001E014 3168 0030 000C             		move.w	pri_origY(a0),obY(a0)
0001E01A 4A28 0025                  		tst.b	ob2ndRout(a0)	; has prison already been opened?
0001E01E 6700                       		beq.s	@open2		; if yes, branch
0001E020                            
0001E020 5068 000C                  		addq.w	#8,obY(a0)
0001E024 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001E02A 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time between animal spawns
0001E030 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001E034 4238 F7AA                  		clr.b	(f_lockscreen).w ; lock screen position
0001E038 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0001E03E 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; make Sonic run to the right
0001E044 4228 0025                  		clr.b	ob2ndRout(a0)
0001E048 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001E04E 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001E054 4A38 F5C3                  		tst.b	(f_emeraldm).w
0001E058 6700                       		beq.s	@open2
0001E05A 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001E068                            
0001E068                            	@open2:
0001E068 4E75                       		rts	
0001E06A                            ; ===========================================================================
0001E06A                            
0001E06A                            Pri_Explosion:	; Routine 6, 8, $A
0001E06A 7007                       		moveq	#7,d0
0001E06C C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001E070 6600                       		bne.s	@noexplosion
0001E072 4EB9 0000 FA54             		jsr	(FindFreeObj).l
0001E078 6600                       		bne.s	@noexplosion
0001E07A 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1) ; load explosion object
0001E07E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E084 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E08A 4EB9 0000 3B7C             		jsr	(RandomNumber).l
0001E090 7200                       		moveq	#0,d1
0001E092 1200                       		move.b	d0,d1
0001E094 E409                       		lsr.b	#2,d1
0001E096 0441 0020                  		subi.w	#$20,d1
0001E09A D369 0008                  		add.w	d1,obX(a1)
0001E09E E048                       		lsr.w	#8,d0
0001E0A0 E608                       		lsr.b	#3,d0
0001E0A2 D169 000C                  		add.w	d0,obY(a1)
0001E0A6                            
0001E0A6                            	@noexplosion:
0001E0A6 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001E0AA 6700                       		beq.s	@makeanimal
0001E0AC 4E75                       		rts	
0001E0AE                            ; ===========================================================================
0001E0AE                            
0001E0AE                            @makeanimal:
0001E0AE 11FC 0002 F7A7             		move.b	#2,(v_bossstatus).w
0001E0B4 117C 000C 0024             		move.b	#$C,obRoutine(a0)	; replace explosions with animals
0001E0BA 117C 0006 001A             		move.b	#6,obFrame(a0)
0001E0C0 317C 0096 001E             		move.w	#150,obTimeFrame(a0)
0001E0C6 0668 0020 000C             		addi.w	#$20,obY(a0)
0001E0CC 7C07                       		moveq	#7,d6
0001E0CE 3A3C 009A                  		move.w	#$9A,d5
0001E0D2 78E4                       		moveq	#-$1C,d4
0001E0D4                            
0001E0D4                            	@loop:
0001E0D4 4EB9 0000 FA54             		jsr	(FindFreeObj).l
0001E0DA 6600                       		bne.s	@fail
0001E0DC 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001E0E0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E0E6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E0EC D969 0008                  		add.w	d4,obX(a1)
0001E0F0 5E44                       		addq.w	#7,d4
0001E0F2 3345 0036                  		move.w	d5,$36(a1)
0001E0F6 5145                       		subq.w	#8,d5
0001E0F8 51CE FFDA                  		dbf	d6,@loop	; repeat 7 more	times
0001E0FC                            
0001E0FC                            	@fail:
0001E0FC 4E75                       		rts	
0001E0FE                            ; ===========================================================================
0001E0FE                            
0001E0FE                            Pri_Animals:	; Routine $C
0001E0FE 7007                       		moveq	#7,d0
0001E100 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001E104 6600                       		bne.s	@noanimal
0001E106 4EB9 0000 FA54             		jsr	(FindFreeObj).l
0001E10C 6600                       		bne.s	@noanimal
0001E10E 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001E112 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E118 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E11E 4EB9 0000 3B7C             		jsr	(RandomNumber).l
0001E124 0240 001F                  		andi.w	#$1F,d0
0001E128 5D40                       		subq.w	#6,d0
0001E12A 4A41                       		tst.w	d1
0001E12C 6A00                       		bpl.s	@ispositive
0001E12E 4440                       		neg.w	d0
0001E130                            
0001E130                            	@ispositive:
0001E130 D169 0008                  		add.w	d0,obX(a1)
0001E134 337C 000C 0036             		move.w	#$C,$36(a1)
0001E13A                            
0001E13A                            	@noanimal:
0001E13A 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001E13E 6600                       		bne.s	@wait
0001E140 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E144 317C 00B4 001E             		move.w	#180,obTimeFrame(a0)
0001E14A                            
0001E14A                            	@wait:
0001E14A 4E75                       		rts	
0001E14C                            ; ===========================================================================
0001E14C                            
0001E14C                            Pri_EndAct:	; Routine $E
0001E14C 703E                       		moveq	#$3E,d0
0001E14E 7228                       		moveq	#id_Animals,d1
0001E150 7440                       		moveq	#$40,d2
0001E152 43F8 D040                  		lea	(v_objspace+$40).w,a1 ; load object RAM
0001E156                            
0001E156                            	@findanimal:
0001E156 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001E158 6700                       		beq.s	@found		; if yes, branch
0001E15A D2C2                       		adda.w	d2,a1		; next object RAM
0001E15C 51C8 FFF8                  		dbf	d0,@findanimal	; repeat $3E times
0001E160                            
0001E160 4EB9 0001 0D18             		jsr	(GotThroughAct1).l
0001E166 4EF9 0000 F4FA             		jmp	(DeleteObject).l
0001E16C                            
0001E16C                            	@found:
0001E16C 4E75                       		rts	
0001E16C 4E75                       		rts	
0001E16E                            		include	"_anim\Prison Capsule.asm"
0001E16E                            ; ---------------------------------------------------------------------------
0001E16E                            ; Animation script - prison capsule
0001E16E                            ; ---------------------------------------------------------------------------
0001E16E 0000                       Ani_Pri:	dc.w @switchflash-Ani_Pri
0001E170 0000                       		dc.w @switchflash-Ani_Pri
0001E172 0201 03FF                  @switchflash:	dc.b 2,	1, 3, afEnd
0001E176                            		even
0001E176                            		even
0001E176                            Map_Pri:	include	"_maps\Prison Capsule.asm"
0001E176                            ; ---------------------------------------------------------------------------
0001E176                            ; Sprite mappings - prison capsule
0001E176                            ; ---------------------------------------------------------------------------
0001E176                            Map_Pri_internal:
0001E176 0000                       		dc.w @capsule-Map_Pri_internal
0001E178 0000                       		dc.w @switch1-Map_Pri_internal
0001E17A 0000                       		dc.w @broken-Map_Pri_internal
0001E17C 0000                       		dc.w @switch2-Map_Pri_internal
0001E17E 0000                       		dc.w @unusedthing1-Map_Pri_internal
0001E180 0000                       		dc.w @unusedthing2-Map_Pri_internal
0001E182 0000                       		dc.w @blank-Map_Pri_internal
0001E184 07                         @capsule:	dc.b 7
0001E185 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001E18A E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001E18F E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001E194 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001E199 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001E19E 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001E1A3 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001E1A8 01                         @switch1:	dc.b 1
0001E1A9 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001E1AE 06                         @broken:	dc.b 6
0001E1AF 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001E1B4 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001E1B9 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001E1BE 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001E1C3 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001E1C8 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001E1CD 01                         @switch2:	dc.b 1
0001E1CE F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001E1D3 02                         @unusedthing1:	dc.b 2
0001E1D4 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001E1D9 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001E1DE 01                         @unusedthing2:	dc.b 1
0001E1DF F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001E1E4 00                         @blank:		dc.b 0
0001E1E6 00                         		even
0001E1E6 00                         		even
0001E1E6                            
0001E1E6                            		include	"_incObj\sub ReactToItem.asm"
0001E1E6                            ; ---------------------------------------------------------------------------
0001E1E6                            ; Subroutine to react to obColType(a0)
0001E1E6                            ; ---------------------------------------------------------------------------
0001E1E6                            
0001E1E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E1E6                            
0001E1E6                            
0001E1E6                            ReactToItem:
0001E1E6 4E71                       		nop	
0001E1E8 3428 0008                  		move.w	obX(a0),d2	; load Sonic's x-axis position
0001E1EC 3628 000C                  		move.w	obY(a0),d3	; load Sonic's y-axis position
0001E1F0 5142                       		subq.w	#8,d2
0001E1F2 7A00                       		moveq	#0,d5
0001E1F4 1A28 0016                  		move.b	obHeight(a0),d5	; load Sonic's height
0001E1F8 5705                       		subq.b	#3,d5
0001E1FA 9645                       		sub.w	d5,d3
0001E1FC 0C28 0071 001A             		cmpi.b	#fr_Duck,obFrame(a0) ; is Sonic ducking?
0001E202 6600                       		bne.s	@notducking	; if not, branch
0001E204 0643 000C                  		addi.w	#$C,d3
0001E208 7A0A                       		moveq	#$A,d5
0001E20A                            
0001E20A                            	@notducking:
0001E20A 383C 0010                  		move.w	#$10,d4
0001E20E DA45                       		add.w	d5,d5
0001E210 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; set object RAM start address
0001E214 3C3C 005F                  		move.w	#$5F,d6
0001E218                            
0001E218                            @loop:
0001E218 4A29 0001                  		tst.b	obRender(a1)
0001E21C 6A00                       		bpl.s	@next
0001E21E 1029 0020                  		move.b	obColType(a1),d0 ; load collision type
0001E222 6600                       		bne.s	@proximity	; if nonzero, branch
0001E224                            
0001E224                            	@next:
0001E224 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001E228 51CE FFEE                  		dbf	d6,@loop	; repeat $5F more times
0001E22C                            
0001E22C 7000                       		moveq	#0,d0
0001E22E 4E75                       		rts	
0001E230                            ; ===========================================================================
0001E230                            @sizes:		;   width, height
0001E230 1414                       		dc.b  $14, $14		; $01
0001E232 0C14                       		dc.b   $C, $14		; $02
0001E234 140C                       		dc.b  $14,  $C		; $03
0001E236 0410                       		dc.b	4, $10		; $04
0001E238 0C12                       		dc.b   $C, $12		; $05
0001E23A 1010                       		dc.b  $10, $10		; $06
0001E23C 0606                       		dc.b	6,   6		; $07
0001E23E 180C                       		dc.b  $18,  $C		; $08
0001E240 0C10                       		dc.b   $C, $10		; $09
0001E242 100C                       		dc.b  $10,  $C		; $0A
0001E244 0808                       		dc.b	8,   8		; $0B
0001E246 1410                       		dc.b  $14, $10		; $0C
0001E248 1408                       		dc.b  $14,   8		; $0D
0001E24A 0E0E                       		dc.b   $E,  $E		; $0E
0001E24C 1818                       		dc.b  $18, $18		; $0F
0001E24E 2810                       		dc.b  $28, $10		; $10
0001E250 1018                       		dc.b  $10, $18		; $11
0001E252 0810                       		dc.b	8, $10		; $12
0001E254 2070                       		dc.b  $20, $70		; $13
0001E256 4020                       		dc.b  $40, $20		; $14
0001E258 8020                       		dc.b  $80, $20		; $15
0001E25A 2020                       		dc.b  $20, $20		; $16
0001E25C 0808                       		dc.b	8,   8		; $17
0001E25E 0404                       		dc.b	4,   4		; $18
0001E260 2008                       		dc.b  $20,   8		; $19
0001E262 0C0C                       		dc.b   $C,  $C		; $1A
0001E264 0804                       		dc.b	8,   4		; $1B
0001E266 1804                       		dc.b  $18,   4		; $1C
0001E268 2804                       		dc.b  $28,   4		; $1D
0001E26A 0408                       		dc.b	4,   8		; $1E
0001E26C 0418                       		dc.b	4, $18		; $1F
0001E26E 0428                       		dc.b	4, $28		; $20
0001E270 0420                       		dc.b	4, $20		; $21
0001E272 1818                       		dc.b  $18, $18		; $22
0001E274 0C18                       		dc.b   $C, $18		; $23
0001E276 4808                       		dc.b  $48,   8		; $24
0001E278                            ; ===========================================================================
0001E278                            
0001E278                            @proximity:
0001E278 0240 003F                  		andi.w	#$3F,d0
0001E27C D040                       		add.w	d0,d0
0001E27E 45FB 00AE                  		lea	@sizes-2(pc,d0.w),a2
0001E282 7200                       		moveq	#0,d1
0001E284 121A                       		move.b	(a2)+,d1
0001E286 3029 0008                  		move.w	obX(a1),d0
0001E28A 9041                       		sub.w	d1,d0
0001E28C 9042                       		sub.w	d2,d0
0001E28E 6400                       		bcc.s	@outsidex	; branch if not touching
0001E290 D241                       		add.w	d1,d1
0001E292 D041                       		add.w	d1,d0
0001E294 6500                       		bcs.s	@withinx	; branch if touching
0001E296 6000 FF8C                  		bra.w	@next
0001E29A                            ; ===========================================================================
0001E29A                            
0001E29A                            @outsidex:
0001E29A 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001E29E B044                       		cmp.w	d4,d0
0001E2A0 6200 FF82                  		bhi.w	@next
0001E2A4                            
0001E2A4                            @withinx:
0001E2A4 7200                       		moveq	#0,d1
0001E2A6 121A                       		move.b	(a2)+,d1
0001E2A8 3029 000C                  		move.w	obY(a1),d0
0001E2AC 9041                       		sub.w	d1,d0
0001E2AE 9043                       		sub.w	d3,d0
0001E2B0 6400                       		bcc.s	@outsidey	; branch if not touching
0001E2B2 D241                       		add.w	d1,d1
0001E2B4 D240                       		add.w	d0,d1
0001E2B6 6500                       		bcs.s	@withiny	; branch if touching
0001E2B8 6000 FF6A                  		bra.w	@next
0001E2BC                            
0001E2BC                            ; ===========================================================================
0001E2BC                            
0001E2BC                            @outsidey:
0001E2BC 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001E2C0 B045                       		cmp.w	d5,d0
0001E2C2 6200 FF60                  		bhi.w	@next
0001E2C6                            
0001E2C6                            @withiny:
0001E2C6                            	@chktype:
0001E2C6 0C38 0004 FE10                     	cmpi.b	#id_SYZ,(v_zone).w   ;TIS is level GHZZ?
0001E2CC 6600 0000                          	bne	NotGHZReact  ;TIS
0001E2D0 1229 0020                          	move.b	obColType(a1),d1 ;TIS load collision type
0001E2D4 0C01 0096                          	cmpi.b	#$96,d1        ;TIS - is collision type $96?
0001E2D8 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E2DC 0C01 0094                          	cmpi.b	#$94,d1        ;TIS - is collision type $94?
0001E2E0 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E2E4 0C01 0095                          	cmpi.b	#$95,d1        ;TIS - is collision type $95?
0001E2E8 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E2EC                            NotGHZReact:                      ;TIS
0001E2EC 1229 0020                  		move.b	obColType(a1),d1 ; load collision type
0001E2F0 0201 00C0                  		andi.b	#$C0,d1        ; is obColType $40 or higher?
0001E2F4 6700 0000                  		beq.w	React_Enemy    ; if not, branch
0001E2F8 0C01 00C0                  		cmpi.b	#$C0,d1		; is obColType $C0 or higher?
0001E2FC 6700 0000                  		beq.w	React_Special	; if yes, branch
0001E300 4A01                       		tst.b	d1		; is obColType $80-$BF?
0001E302 6B00 0000                  		bmi.w	React_ChkHurt	; if yes, branch
0001E306                            
0001E306                            ; obColType is $40-$7F (powerups)
0001E306                            
0001E306 1029 0020                  		move.b	obColType(a1),d0
0001E30A 0200 003F                  		andi.b	#$3F,d0
0001E30E 0C00 0006                  		cmpi.b	#6,d0		; is collision type $46	?
0001E312 6700                       		beq.s	React_Monitor	; if yes, branch
0001E314 0C68 005A 0030             		cmpi.w	#90,$30(a0)	; is Sonic invincible?
0001E31A 6400 0000                  		bcc.w	@invincible	; if yes, branch
0001E31E 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the object's routine counter
0001E322                            
0001E322                            	@invincible:
0001E322 4E75                       		rts	
0001E324                            ; ===========================================================================
0001E324                            
0001E324                            React_Monitor:
0001E324 4A68 0012                  		tst.w	obVelY(a0)	; is Sonic moving upwards?
0001E328 6A00                       		bpl.s	@movingdown	; if not, branch
0001E32A                            
0001E32A 3028 000C                  		move.w	obY(a0),d0
0001E32E 0440 0010                  		subi.w	#$10,d0
0001E332 B069 000C                  		cmp.w	obY(a1),d0
0001E336 6500                       		bcs.s	@donothing
0001E338 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's vertical speed
0001E33C 337C FE80 0012             		move.w	#-$180,obVelY(a1)
0001E342 4A29 0025                  		tst.b	ob2ndRout(a1)
0001E346 6600                       		bne.s	@donothing
0001E348 5829 0025                  		addq.b	#4,ob2ndRout(a1) ; advance the monitor's routine counter
0001E34C 4E75                       		rts	
0001E34E                            ; ===========================================================================
0001E34E                            
0001E34E                            @movingdown:
0001E34E 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001E354 6600                       		bne.s	@donothing
0001E356 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's y-motion
0001E35A 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the monitor's routine counter
0001E35E 4EB9 0001 5CCC             		jsr		BounceJD
0001E364                            
0001E364                            	@donothing:
0001E364 4E75                       		rts	
0001E366                            ; ===========================================================================
0001E366                            
0001E366                            React_Enemy:
0001E366 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E36A 6600                       		bne.s	@donthurtsonic	; if yes, branch
0001E36C 0C28 001F 001C             		cmpi.b	#id_Spindash,obAnim(a0)	; is Sonic Spin Dashing? 
0001E372 6700 0000                  		beq.w	@donthurtsonic	; if yes, branch
0001E376 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001E37C 6600 0000                  		bne.w	React_ChkHurt	; if not, branch
0001E380                            
0001E380                            	@donthurtsonic:
0001E380 4A29 0021                  		tst.b	obColProp(a1)
0001E384 6700                       		beq.s	breakenemy
0001E386                            
0001E386 4468 0010                  		neg.w	obVelX(a0)	; repel Sonic
0001E38A 4468 0012                  		neg.w	obVelY(a0)
0001E38E E0E8 0010                  		asr	obVelX(a0)
0001E392 E0E8 0012                  		asr	obVelY(a0)
0001E396 137C 0000 0020             		move.b	#0,obColType(a1)
0001E39C 5329 0021                  		subq.b	#1,obColProp(a1)
0001E3A0 6600                       		bne.s	@flagnotclear
0001E3A2 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E3A8                            
0001E3A8                            	@flagnotclear:
0001E3A8 4E75                       		rts	
0001E3AA                            ; ===========================================================================
0001E3AA                            
0001E3AA                            breakenemy:
0001E3AA 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E3B0 7000                       		moveq	#0,d0
0001E3B2 3038 F7D0                  		move.w	(v_itembonus).w,d0
0001E3B6 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; add 2 to item bonus counter
0001E3BA 0C40 0006                  		cmpi.w	#6,d0
0001E3BE 6500                       		bcs.s	@bonusokay
0001E3C0 7006                       		moveq	#6,d0		; max bonus is lvl6
0001E3C2                            
0001E3C2                            	@bonusokay:
0001E3C2 3340 003E                  		move.w	d0,$3E(a1)
0001E3C6 303B 0000                  		move.w	@points(pc,d0.w),d0
0001E3CA 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 enemies been destroyed?
0001E3D0 6500                       		bcs.s	@lessthan16	; if not, branch
0001E3D2 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001E3D6 337C 000A 003E             		move.w	#$A,$3E(a1)
0001E3DC                            
0001E3DC                            	@lessthan16:
0001E3DC 6100 0000                  		bsr.w	AddPoints
0001E3E0 4EB9 0001 5CCC             		jsr		BounceJD
0001E3E6 12BC 0027                  		move.b	#id_ExplosionItem,0(a1) ; change object to explosion
0001E3EA 137C 0000 0024             		move.b	#0,obRoutine(a1)
0001E3F0 4A68 0012                  		tst.w	obVelY(a0)
0001E3F4 6B00                       		bmi.s	@bouncedown
0001E3F6 3028 000C                  		move.w	obY(a0),d0
0001E3FA B069 000C                  		cmp.w	obY(a1),d0
0001E3FE 6400                       		bcc.s	@bounceup
0001E400 4468 0012                  		neg.w	obVelY(a0)
0001E404 4E75                       		rts	
0001E406                            ; ===========================================================================
0001E406                            
0001E406                            	@bouncedown:
0001E406 0668 0100 0012             		addi.w	#$100,obVelY(a0)
0001E40C 4E75                       		rts	
0001E40E                            
0001E40E                            	@bounceup:
0001E40E 0468 0100 0012             		subi.w	#$100,obVelY(a0)
0001E414 4E75                       		rts	
0001E416                            
0001E416 000A 0014 0032 0064        @points:	dc.w 10, 20, 50, 100	; points awarded div 10
0001E41E                            
0001E41E                            ; ===========================================================================
0001E41E                            
0001E41E                            React_Caterkiller:
0001E41E 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E424                            
0001E424                            React_ChkHurt:
0001E424 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E428 6700                       		beq.s	notinvincible	; if not, branch
0001E42A                            
0001E42A                            	isflashing:
0001E42A 70FF                       		moveq	#-1,d0
0001E42C 4E75                       		rts	
0001E42E                            ; ===========================================================================
0001E42E                            
0001E42E                            	notinvincible:
0001E42E 4E71                       		nop	
0001E430 4A68 0030                  		tst.w	$30(a0)		; is Sonic flashing?
0001E434 66F4                       		bne.s	isflashing	; if yes, branch
0001E436 2449                       		movea.l	a1,a2
0001E438                            
0001E438                            ; End of function ReactToItem
0001E438                            ; continue straight to HurtSonic
0001E438                            
0001E438                            ; ---------------------------------------------------------------------------
0001E438                            ; Hurting Sonic	subroutine
0001E438                            ; ---------------------------------------------------------------------------
0001E438                            
0001E438                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E438                            
0001E438                            
0001E438                            HurtSonic:
0001E438 4A38 FE2C                  		tst.b	(v_shield).w	; does Sonic have a shield?
0001E43C 6600                       		bne.s	@hasshield	; if yes, branch
0001E43E 4A38 F5C8                  		tst.b	(v_rshield).w	; does Sonic have a red shield?
0001E442 6600                       		bne.s	@hasshield	; if yes, branch
0001E444 4A38 F5C9                  		tst.b	(v_gshield).w	; does Sonic have a gold shield?
0001E448 6600                       		bne.s	@hasshield	; if yes, branch
0001E44A 4A38 F5CA                  		tst.b	(v_spshield).w	; does Sonic have a silver shield?
0001E44E 6600                       		bne.s	@hasshield	; if yes, branch
0001E450 4A78 FE20                  		tst.w	(v_rings).w	; does Sonic have any rings?
0001E454 6700 0000                  		beq.w	@norings	; if not, branch
0001E458                            
0001E458 4EB9 0000 FA54             		jsr	(FindFreeObj).l
0001E45E 6600                       		bne.s	@hasshield
0001E460 12BC 0037                  		move.b	#id_RingLoss,0(a1) ; load bouncing multi rings object
0001E464 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E46A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E470                            
0001E470                            	@hasshield:
0001E470 0C38 0001 FE2C             		cmpi.b	#1,(v_shield).w     ; does sonic have a Shield?
0001E476 6600                       		bne.s	@hasrshield        ; if no, check for red shield
0001E478 0C12 006E                  		cmpi.b	#$6E,(a2)     ; was damage caused by electrocuter?
0001E47C 6700 FFAC                  		beq.w	isflashing
0001E480 0C12 0086                  		cmpi.b	#$86,(a2)     ; was damage caused by Plasma Ball Launcher?
0001E484 6700 FFA4                  		beq.w	isflashing
0001E488                            
0001E488                            	@hasrshield:
0001E488 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w     ; does sonic not a Red Shield?
0001E48E 6700                       		beq.s	@hasspshield          ; if yes, check for gray shield
0001E490 0C12 0014                  		cmpi.b	#$14,(a2)	; was damage caused by lava ball?
0001E494 6700 FF94                  		beq.w 	isflashing
0001E498 0C12 004C                  		cmpi.b	#$4C,(a2)	; was damage caused by lava geyser?
0001E49C 6700 FF8C                  		beq.w 	isflashing
0001E4A0 0C12 004D                  		cmpi.b	#$4D,(a2)	; was damage caused by lava geyser?
0001E4A4 6700 FF84                  		beq.w 	isflashing
0001E4A8 0C12 0062                  		cmpi.b	#$62,(a2)	; was damage caused by gargoyle?
0001E4AC 6700 FF7C                  		beq.w 	isflashing
0001E4B0 0C12 0074                  		cmpi.b	#$74,(a2)	; was damage caused by MZ fire boss?
0001E4B4 6700 FF74                  		beq.w 	isflashing
0001E4B8 0C12 0035                  		cmpi.b	#$35,(a2)	; was damage caused by burning grass?
0001E4BC 6700 FF6C                  		beq.w 	isflashing
0001E4C0 0C12 006D                  		cmpi.b	#$6D,(a2)	; was damage caused by flamethrower?
0001E4C4 6700 FF64                  		beq.w 	isflashing
0001E4C8 0C12 0054                  		cmpi.b	#$54,(a2)	; was damage caused by Lava Tag/Magma?
0001E4CC 6700 FF5C                  		beq.w 	isflashing
0001E4D0                            
0001E4D0                            	@hasspshield:
0001E4D0 0C38 0001 F5CA             		cmpi.b	#1,(v_spshield).w     ; does sonic have a sp Shield?
0001E4D6 6600 0000                  		bne.w	@hurtcont           ; if yes, make him invulnerable to metal objects
0001E4DA 0C12 0015                  		cmpi.b	#$15,(a2)	; was damage caused by SBZ Spiked Ball?
0001E4DE 6700 FF4A                  		beq.w 	isflashing
0001E4E2 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ Harpoon?
0001E4E6 6700 FF42                  		beq.w 	isflashing
0001E4EA 0C12 0017                  		cmpi.b	#$17,(a2)	; was damage caused by helix of spikes?
0001E4EE 6700 FF3A                  		beq.w 	isflashing
0001E4F2 0C12 0031                  		cmpi.b	#$31,(a2)	; was damage caused by Chained Stompers?
0001E4F6 6700 FF32                  		beq.w 	isflashing
0001E4FA 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by Spikes?
0001E4FE 6700 FF2A                  		beq.w 	isflashing
0001E502 0C12 007B                  		cmpi.b	#$7B,(a2)	; was damage caused by SLZ boss spikeball?
0001E506 6700 FF22                  		beq.w 	isflashing
0001E50A 0C12 0057                  		cmpi.b	#$57,(a2)	; was damage caused by Spiked Ball & Chain?
0001E50E 6700 FF1A                  		beq.w 	isflashing
0001E512 0C12 0058                  		cmpi.b	#$58,(a2)	; was damage caused by Big Spiked Ball?
0001E516 6700 FF12                  		beq.w 	isflashing
0001E51A 0C12 006A                  		cmpi.b	#$6A,(a2)	; was damage caused by Saws?
0001E51E 6700 FF0A                  		beq.w 	isflashing
0001E522 0C12 005E                  		cmpi.b	#$5E,(a2)	; was damage caused by Seesaw ball?
0001E526 6700 FF02                  		beq.w 	isflashing
0001E52A                            
0001E52A 0C12 0006                  		cmpi.b	#$06,(a2)	; was damage caused by Mozzietron?
0001E52E 6700 FE7A                  		beq.w 	breakenemy
0001E532 0C12 001E                  		cmpi.b	#$1E,(a2)	; was damage caused by Ball Hog?
0001E536 6700 FE72                  		beq.w 	breakenemy
0001E53A 0C12 002D                  		cmpi.b	#$2D,(a2)	; was damage caused by Burrobot?
0001E53E 6700 FE6A                  		beq.w 	breakenemy
0001E542 0C12 0017                  		cmpi.b	#$17,(a2)	; was damage caused by Jaws?
0001E546 6700 FEE2                  		beq.w 	isflashing
0001E54A 0C12 0050                  		cmpi.b	#$50,(a2)	; was damage caused by Yadrin?
0001E54E 6700 FE5A                  		beq.w 	breakenemy
0001E552                            		;cmpi.b	#$5F,(a2)	; was damage caused by Bomb?
0001E552                            		;beq.w 	breakenemy
0001E552 0C12 0060                  		cmpi.b	#$60,(a2)	; was damage caused by Orbinaut?
0001E556 6700 FE52                  		beq.w 	breakenemy
0001E55A 0C12 0078                  		cmpi.b	#$78,(a2)	; was damage caused by Catterkiller?
0001E55E 6700 FE4A                  		beq.w 	breakenemy
0001E562                            
0001E562                            	@hurtcont:
0001E562 11FC 0000 FE2C             		move.b	#0,(v_shield).w		; remove shield
0001E568                            		;move.b	#0,(v_gshield).w	; remove g shield
0001E568 11FC 0000 F5CA             		move.b	#0,(v_spshield).w	; remove sp shield
0001E56E                            		
0001E56E 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w ; do you have no r shield?
0001E574 6700                       		beq.s	@gshieldcheck	;if not, branch
0001E576 5338 F5C8                  		subq.b	#1,(v_rshield).w
0001E57A                            		
0001E57A                            	@gshieldcheck:
0001E57A 0C38 0000 F5C9             		cmpi.b	#0,(v_gshield).w 	; do you have no g shield?
0001E580 6700                       		beq.s	@hurtcont2			;if not, branch
0001E582 5338 F5C9                  		subq.b	#1,(v_gshield).w	
0001E586                            		
0001E586                            	@hurtcont2:
0001E586 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001E58C 4EB9 0001 620E             		jsr		Sonic_ResetOnFloor
0001E592 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E598 317C FC00 0012             		move.w	#-$400,obVelY(a0) ; make Sonic bounce away from the object
0001E59E 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001E5A4 0828 0006 0022             		btst	#6,obStatus(a0)	; is Sonic underwater?
0001E5AA 6700                       		beq.s	@isdry		; if not, branch
0001E5AC                            
0001E5AC 317C FE00 0012             		move.w	#-$200,obVelY(a0) ; slower bounce
0001E5B2 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001E5B8                            
0001E5B8                            	@isdry:
0001E5B8 3028 0008                  		move.w	obX(a0),d0
0001E5BC B06A 0008                  		cmp.w	obX(a2),d0
0001E5C0 6500                       		bcs.s	@isleft		; if Sonic is left of the object, branch
0001E5C2 4468 0010                  		neg.w	obVelX(a0)	; if Sonic is right of the object, reverse
0001E5C6                            
0001E5C6                            	@isleft:
0001E5C6 117C 0000 0039             		move.b	#0,f_spindash(a0) ; clear Spin Dash flag 
0001E5CC 317C 0000 0020             		move.w	#0,obInertia(a0) 
0001E5D2 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0) 
0001E5D8 317C 0120 0030             		move.w	#$120,$30(a0)
0001E5DE 0C12 006E                  		cmpi.b	#$6E,(a2)    ; check if you were hurt by Electrocuter
0001E5E2 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E5E4 0C12 0086                  		cmpi.b	#$86,(a2)    ; check if you were hurt by FZ plasma
0001E5E8 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E5EA 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E5F0 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0)
0001E5F6 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E5FC 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E600 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E604 6600                       		bne.s	@sound		; if not, branch
0001E606 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E60A 6600                       		bne.s	@sound		; if not, branch
0001E60C 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E610                            
0001E610                            	@sound:
0001E610 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001E616 70FF                       		moveq	#-1,d0
0001E618 4E75                       		rts	
0001E61A                            
0001E61A                            	@hurtelec:
0001E61A 117C 0020 001C             		move.b	#id_Hurt2,obAnim(a0)
0001E620 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E626 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E62A 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E62E 66E0                       		bne.s	@sound		; if not, branch
0001E630 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E634 66DA                       		bne.s	@sound		; if not, branch
0001E636 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E63A                            ; ===========================================================================
0001E63A                            
0001E63A                            @norings:
0001E63A 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat on?
0001E63E 6600 FE30                  		bne.w	@hasshield	; if yes, branch
0001E642                            
0001E642                            ; ---------------------------------------------------------------------------
0001E642                            ; Subroutine to	kill Sonic
0001E642                            ; ---------------------------------------------------------------------------
0001E642                            
0001E642                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E642                            
0001E642                            
0001E642                            KillSonic:
0001E642 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	active?
0001E646 6600 0000                  		bne.w	@dontdie	; if yes, branch
0001E64A 31FC 0000 FE20             		move.w	#0,(v_rings).w ; clear rings
0001E650 11FC 0000 FE2D             		move.b	#0,(v_invinc).w	; remove invincibility
0001E656 11FC 0000 FE2E             		move.b  #0,(v_shoes).w
0001E65C 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0001E662 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w  ;clear victory animation flag
0001E668 117C 0006 0024             		move.b	#6,obRoutine(a0)
0001E66E 4EB9 0001 620E             		jsr		Sonic_ResetOnFloor
0001E674 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E67A 317C F900 0012             		move.w	#-$700,obVelY(a0)
0001E680 317C 0000 0010             		move.w	#0,obVelX(a0)
0001E686 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E68C 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001E692 0C12 0054                  		cmpi.b	#$54,(a2)    ; check if you were killed by lava
0001E696 6700                       		beq.s	Kill_Lava       ; if yes, branch
0001E698 0C12 006D                  		cmpi.b	#$6D,(a2)    ; check if you were killed by flamethrower
0001E69C 6700                       		beq.s	Kill_Lava        ; if yes, branch
0001E69E 117C 0018 001C             		move.b	#id_Death,obAnim(a0)
0001E6A4 08E8 0007 0002             		bset	#7,obGfx(a0)
0001E6AA 303C 0000                  		move.w	#sfx_Death,d0	; play normal death sound
0001E6AE 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; check	if you were killed by spikes
0001E6B2 6600                       		bne.s	@sound
0001E6B4 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; play spikes death sound
0001E6B8                            
0001E6B8                            	@sound:
0001E6B8 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001E6BE                            
0001E6BE                            	@dontdie:
0001E6BE 70FF                       		moveq	#-1,d0
0001E6C0 4E75                       		rts	
0001E6C2                            ; End of function KillSonic
0001E6C2                            Kill_Lava:	
0001E6C2 08E8 0007 0002             	bset	#7,obGfx(a0)
0001E6C8 117C 0016 001C             	move.b	#$16,$1C(a0)
0001E6CE 303C 00C8                  	move.w	#$C8,d0        ; play death sound
0001E6D2 4EB9 0000 12A0                 jsr		(PlaySound_Special).l
0001E6D8                            
0001E6D8                            
0001E6D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E6D8                            
0001E6D8                            
0001E6D8                            React_Special:
0001E6D8 1229 0020                  		move.b	obColType(a1),d1
0001E6DC 0201 003F                  		andi.b	#$3F,d1
0001E6E0 0C01 000B                  		cmpi.b	#$B,d1		; is collision type $CB	?
0001E6E4 6700                       		beq.s	@caterkiller	; if yes, branch
0001E6E6 0C01 000C                  		cmpi.b	#$C,d1		; is collision type $CC	?
0001E6EA 6700                       		beq.s	@yadrin		; if yes, branch
0001E6EC 0C01 0017                  		cmpi.b	#$17,d1		; is collision type $D7	?
0001E6F0 6700                       		beq.s	@D7orE1		; if yes, branch
0001E6F2 0C01 0021                  		cmpi.b	#$21,d1		; is collision type $E1	?
0001E6F6 6700                       		beq.s	@D7orE1		; if yes, branch
0001E6F8 4E75                       		rts	
0001E6FA                            ; ===========================================================================
0001E6FA                            
0001E6FA                            @caterkiller:
0001E6FA 6000 FD22                  		bra.w	React_Caterkiller
0001E6FE                            ; ===========================================================================
0001E6FE                            
0001E6FE                            @yadrin:
0001E6FE 9A40                       		sub.w	d0,d5
0001E700 0C45 0008                  		cmpi.w	#8,d5
0001E704 6400                       		bcc.s	@normalenemy
0001E706 3029 0008                  		move.w	obX(a1),d0
0001E70A 5940                       		subq.w	#4,d0
0001E70C 0829 0000 0022             		btst	#0,obStatus(a1)
0001E712 6700                       		beq.s	@noflip
0001E714 0440 0010                  		subi.w	#$10,d0
0001E718                            
0001E718                            	@noflip:
0001E718 9042                       		sub.w	d2,d0
0001E71A 6400                       		bcc.s	@loc_1B13C
0001E71C 0640 0018                  		addi.w	#$18,d0
0001E720 6500                       		bcs.s	@loc_1B140
0001E722 6000                       		bra.s	@normalenemy
0001E724                            ; ===========================================================================
0001E724                            
0001E724                            	@loc_1B13C:
0001E724 B044                       		cmp.w	d4,d0
0001E726 6200                       		bhi.s	@normalenemy
0001E728                            
0001E728                            	@loc_1B140:
0001E728 6000 FCFA                  		bra.w	React_ChkHurt
0001E72C                            ; ===========================================================================
0001E72C                            
0001E72C                            	@normalenemy:
0001E72C 6000 FC38                  		bra.w	React_Enemy
0001E730                            ; ===========================================================================
0001E730                            
0001E730                            @D7orE1:
0001E730 5229 0021                  		addq.b	#1,obColProp(a1)
0001E734 4E75                       		rts	
0001E736                            ; End of function React_Special
0001E736                            
0001E736                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E736                            
0001E736                            React_ChkWaterTag:
0001E736 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E73C 6600 0000                  		bne	NotWaterTag
0001E740 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0001E746                            	NotWaterTag:
0001E746 4E75                       		rts
0001E748                            
0001E748                            React_WaterTag:
0001E748 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E74E 6700 0000                  		beq	SkipWaterTag
0001E752 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0001E758                            	SkipWaterTag:
0001E758 4E75                       		rts
0001E758 4E75                       		rts
0001E75A                            
0001E75A                            ; ---------------------------------------------------------------------------
0001E75A                            ; Subroutine to	show the special stage layout
0001E75A                            ; ---------------------------------------------------------------------------
0001E75A                            
0001E75A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E75A                            
0001E75A                            
0001E75A                            SS_ShowLayout:
0001E75A 6100 0000                  		bsr.w	SS_AniWallsRings
0001E75E 6100 0000                  		bsr.w	SS_AniItems
0001E762 3F05                       		move.w	d5,-(sp)
0001E764 43F8 8000                  		lea	($FFFF8000).w,a1
0001E768 1038 F780                  		move.b	(v_ssangle).w,d0
0001E76C 0200 00FC                  		andi.b	#$FC,d0
0001E770 4EB9 0000 3BA2             		jsr	(CalcSine).l
0001E776 3800                       		move.w	d0,d4
0001E778 3A01                       		move.w	d1,d5
0001E77A C9FC 0018                  		muls.w	#$18,d4
0001E77E CBFC 0018                  		muls.w	#$18,d5
0001E782 7400                       		moveq	#0,d2
0001E784 3438 F700                  		move.w	(v_screenposx).w,d2
0001E788 84FC 0018                  		divu.w	#$18,d2
0001E78C 4842                       		swap	d2
0001E78E 4442                       		neg.w	d2
0001E790 0642 FF4C                  		addi.w	#-$B4,d2
0001E794 7600                       		moveq	#0,d3
0001E796 3638 F704                  		move.w	(v_screenposy).w,d3
0001E79A 86FC 0018                  		divu.w	#$18,d3
0001E79E 4843                       		swap	d3
0001E7A0 4443                       		neg.w	d3
0001E7A2 0643 FF4C                  		addi.w	#-$B4,d3
0001E7A6 3E3C 000F                  		move.w	#$F,d7
0001E7AA                            
0001E7AA                            loc_1B19E:
0001E7AA 48A7 E000                  		movem.w	d0-d2,-(sp)
0001E7AE 48A7 C000                  		movem.w	d0-d1,-(sp)
0001E7B2 4440                       		neg.w	d0
0001E7B4 C3C2                       		muls.w	d2,d1
0001E7B6 C1C3                       		muls.w	d3,d0
0001E7B8 2C00                       		move.l	d0,d6
0001E7BA DC81                       		add.l	d1,d6
0001E7BC 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001E7C0 C1C2                       		muls.w	d2,d0
0001E7C2 C3C3                       		muls.w	d3,d1
0001E7C4 D280                       		add.l	d0,d1
0001E7C6 2406                       		move.l	d6,d2
0001E7C8 3C3C 000F                  		move.w	#$F,d6
0001E7CC                            
0001E7CC                            loc_1B1C0:
0001E7CC 2002                       		move.l	d2,d0
0001E7CE E080                       		asr.l	#8,d0
0001E7D0 32C0                       		move.w	d0,(a1)+
0001E7D2 2001                       		move.l	d1,d0
0001E7D4 E080                       		asr.l	#8,d0
0001E7D6 32C0                       		move.w	d0,(a1)+
0001E7D8 D485                       		add.l	d5,d2
0001E7DA D284                       		add.l	d4,d1
0001E7DC 51CE FFEE                  		dbf	d6,loc_1B1C0
0001E7E0                            
0001E7E0 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001E7E4 0643 0018                  		addi.w	#$18,d3
0001E7E8 51CF FFC0                  		dbf	d7,loc_1B19E
0001E7EC                            
0001E7EC 3A1F                       		move.w	(sp)+,d5
0001E7EE 41F9 00FF 0000             		lea	($FF0000).l,a0
0001E7F4 7000                       		moveq	#0,d0
0001E7F6 3038 F704                  		move.w	(v_screenposy).w,d0
0001E7FA 80FC 0018                  		divu.w	#$18,d0
0001E7FE C0FC 0080                  		mulu.w	#$80,d0
0001E802 D1C0                       		adda.l	d0,a0
0001E804 7000                       		moveq	#0,d0
0001E806 3038 F700                  		move.w	(v_screenposx).w,d0
0001E80A 80FC 0018                  		divu.w	#$18,d0
0001E80E D0C0                       		adda.w	d0,a0
0001E810 49F8 8000                  		lea	($FFFF8000).w,a4
0001E814 3E3C 000F                  		move.w	#$F,d7
0001E818                            
0001E818                            loc_1B20C:
0001E818 3C3C 000F                  		move.w	#$F,d6
0001E81C                            
0001E81C                            loc_1B210:
0001E81C 7000                       		moveq	#0,d0
0001E81E 1018                       		move.b	(a0)+,d0
0001E820 6700                       		beq.s	loc_1B268
0001E822 0C00 004E                  		cmpi.b	#$4E,d0
0001E826 6200                       		bhi.s	loc_1B268
0001E828 3614                       		move.w	(a4),d3
0001E82A 0643 0120                  		addi.w	#$120,d3
0001E82E 0C43 0070                  		cmpi.w	#$70,d3
0001E832 6500                       		blo.s	loc_1B268
0001E834 0C43 01D0                  		cmpi.w	#$1D0,d3
0001E838 6400                       		bhs.s	loc_1B268
0001E83A 342C 0002                  		move.w	2(a4),d2
0001E83E 0642 00F0                  		addi.w	#$F0,d2
0001E842 0C42 0070                  		cmpi.w	#$70,d2
0001E846 6500                       		blo.s	loc_1B268
0001E848 0C42 0170                  		cmpi.w	#$170,d2
0001E84C 6400                       		bhs.s	loc_1B268
0001E84E 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001E854 E748                       		lsl.w	#3,d0
0001E856 4BF5 0000                  		lea	(a5,d0.w),a5
0001E85A 225D                       		movea.l	(a5)+,a1
0001E85C 321D                       		move.w	(a5)+,d1
0001E85E D241                       		add.w	d1,d1
0001E860 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001E864 365D                       		movea.w	(a5)+,a3
0001E866 7200                       		moveq	#0,d1
0001E868 1219                       		move.b	(a1)+,d1
0001E86A 5301                       		subq.b	#1,d1
0001E86C 6B00                       		bmi.s	loc_1B268
0001E86E 4EB9 0000 F72C             		jsr	(sub_D762).l
0001E874                            
0001E874                            loc_1B268:
0001E874 584C                       		addq.w	#4,a4
0001E876 51CE FFA4                  		dbf	d6,loc_1B210
0001E87A                            
0001E87A 41E8 0070                  		lea	$70(a0),a0
0001E87E 51CF FF98                  		dbf	d7,loc_1B20C
0001E882                            
0001E882 11C5 F62C                  		move.b	d5,(v_spritecount).w
0001E886 0C05 0050                  		cmpi.b	#$50,d5
0001E88A 6700                       		beq.s	loc_1B288
0001E88C 24BC 0000 0000             		move.l	#0,(a2)
0001E892 4E75                       		rts	
0001E894                            ; ===========================================================================
0001E894                            
0001E894                            loc_1B288:
0001E894 157C 0000 FFFB             		move.b	#0,-5(a2)
0001E89A 4E75                       		rts	
0001E89C                            ; End of function SS_ShowLayout
0001E89C                            
0001E89C                            ; ---------------------------------------------------------------------------
0001E89C                            ; Subroutine to	animate	walls and rings	in the special stage
0001E89C                            ; ---------------------------------------------------------------------------
0001E89C                            
0001E89C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E89C                            
0001E89C                            
0001E89C                            SS_AniWallsRings:
0001E89C 43F9 00FF 400C             		lea	($FF400C).l,a1
0001E8A2 7000                       		moveq	#0,d0
0001E8A4 1038 F780                  		move.b	(v_ssangle).w,d0
0001E8A8 E408                       		lsr.b	#2,d0
0001E8AA 0240 000F                  		andi.w	#$F,d0
0001E8AE 7223                       		moveq	#$23,d1
0001E8B0                            
0001E8B0                            loc_1B2A4:
0001E8B0 3280                       		move.w	d0,(a1)
0001E8B2 5049                       		addq.w	#8,a1
0001E8B4 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001E8B8                            
0001E8B8 43F9 00FF 4005             		lea	($FF4005).l,a1
0001E8BE 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
0001E8C2 6A00                       		bpl.s	loc_1B2C8
0001E8C4 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0001E8CA 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
0001E8CE 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0001E8D4                            
0001E8D4                            loc_1B2C8:
0001E8D4 1378 FEC3 01D0             		move.b	(v_ani1_frame).w,$1D0(a1)
0001E8DA 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0001E8DE 6A00                       		bpl.s	loc_1B2E4
0001E8E0 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
0001E8E6 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0001E8EA 0238 0001 FEC5             		andi.b	#1,(v_ani2_frame).w
0001E8F0                            
0001E8F0                            loc_1B2E4:
0001E8F0 1038 FEC5                  		move.b	(v_ani2_frame).w,d0
0001E8F4 1340 0138                  		move.b	d0,$138(a1)
0001E8F8 1340 0160                  		move.b	d0,$160(a1)
0001E8FC 1340 0148                  		move.b	d0,$148(a1)
0001E900 1340 0150                  		move.b	d0,$150(a1)
0001E904 1340 01D8                  		move.b	d0,$1D8(a1)
0001E908 1340 01E0                  		move.b	d0,$1E0(a1)
0001E90C 1340 01E8                  		move.b	d0,$1E8(a1)
0001E910 1340 01F0                  		move.b	d0,$1F0(a1)
0001E914 1340 01F8                  		move.b	d0,$1F8(a1)
0001E918 1340 0200                  		move.b	d0,$200(a1)
0001E91C 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0001E920 6A00                       		bpl.s	loc_1B326
0001E922 11FC 0004 FEC6             		move.b	#4,(v_ani3_time).w
0001E928 5238 FEC7                  		addq.b	#1,(v_ani3_frame).w
0001E92C 0238 0003 FEC7             		andi.b	#3,(v_ani3_frame).w
0001E932                            
0001E932                            loc_1B326:
0001E932 1038 FEC7                  		move.b	(v_ani3_frame).w,d0
0001E936 1340 0168                  		move.b	d0,$168(a1)
0001E93A 1340 0170                  		move.b	d0,$170(a1)
0001E93E 1340 0178                  		move.b	d0,$178(a1)
0001E942 1340 0180                  		move.b	d0,$180(a1)
0001E946 5338 FEC0                  		subq.b	#1,(v_ani0_time).w
0001E94A 6A00                       		bpl.s	loc_1B350
0001E94C 11FC 0007 FEC0             		move.b	#7,(v_ani0_time).w
0001E952 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w
0001E956 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w
0001E95C                            
0001E95C                            loc_1B350:
0001E95C 43F9 00FF 4016             		lea	($FF4016).l,a1
0001E962 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001E968 7000                       		moveq	#0,d0
0001E96A 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0001E96E D040                       		add.w	d0,d0
0001E970 41F0 0000                  		lea	(a0,d0.w),a0
0001E974 3290                       		move.w	(a0),(a1)
0001E976 3368 0002 0008             		move.w	2(a0),8(a1)
0001E97C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E982 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E988 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E98E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E994 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E99A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E9A0 D0FC 0020                  		adda.w	#$20,a0
0001E9A4 D2FC 0048                  		adda.w	#$48,a1
0001E9A8 3290                       		move.w	(a0),(a1)
0001E9AA 3368 0002 0008             		move.w	2(a0),8(a1)
0001E9B0 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E9B6 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E9BC 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E9C2 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E9C8 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E9CE 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E9D4 D0FC 0020                  		adda.w	#$20,a0
0001E9D8 D2FC 0048                  		adda.w	#$48,a1
0001E9DC 3290                       		move.w	(a0),(a1)
0001E9DE 3368 0002 0008             		move.w	2(a0),8(a1)
0001E9E4 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E9EA 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E9F0 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E9F6 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E9FC 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001EA02 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001EA08 D0FC 0020                  		adda.w	#$20,a0
0001EA0C D2FC 0048                  		adda.w	#$48,a1
0001EA10 3290                       		move.w	(a0),(a1)
0001EA12 3368 0002 0008             		move.w	2(a0),8(a1)
0001EA18 3368 0004 0010             		move.w	4(a0),$10(a1)
0001EA1E 3368 0006 0018             		move.w	6(a0),$18(a1)
0001EA24 3368 0008 0020             		move.w	8(a0),$20(a1)
0001EA2A 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001EA30 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001EA36 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001EA3C D0FC 0020                  		adda.w	#$20,a0
0001EA40 D2FC 0048                  		adda.w	#$48,a1
0001EA44 4E75                       		rts	
0001EA46                            ; End of function SS_AniWallsRings
0001EA46                            
0001EA46                            ; ===========================================================================
0001EA46 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001EA56 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001EA66 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001EA76 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001EA86 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001EA96 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001EAA6 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001EAB6 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001EAC6                            ; ---------------------------------------------------------------------------
0001EAC6                            ; Subroutine to	remove items when you collect them in the special stage
0001EAC6                            ; ---------------------------------------------------------------------------
0001EAC6                            
0001EAC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EAC6                            
0001EAC6                            
0001EAC6                            SS_RemoveCollectedItem:
0001EAC6 45F9 00FF 4400             		lea	($FF4400).l,a2
0001EACC 303C 001F                  		move.w	#$1F,d0
0001EAD0                            
0001EAD0                            loc_1B4C4:
0001EAD0 4A12                       		tst.b	(a2)
0001EAD2 6700                       		beq.s	locret_1B4CE
0001EAD4 504A                       		addq.w	#8,a2
0001EAD6 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001EADA                            
0001EADA                            locret_1B4CE:
0001EADA 4E75                       		rts	
0001EADC                            ; End of function SS_RemoveCollectedItem
0001EADC                            
0001EADC                            ; ---------------------------------------------------------------------------
0001EADC                            ; Subroutine to	animate	special	stage items when you touch them
0001EADC                            ; ---------------------------------------------------------------------------
0001EADC                            
0001EADC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EADC                            
0001EADC                            
0001EADC                            SS_AniItems:
0001EADC 41F9 00FF 4400             		lea	($FF4400).l,a0
0001EAE2 3E3C 001F                  		move.w	#$1F,d7
0001EAE6                            
0001EAE6                            loc_1B4DA:
0001EAE6 7000                       		moveq	#0,d0
0001EAE8 1010                       		move.b	(a0),d0
0001EAEA 6700                       		beq.s	loc_1B4E8
0001EAEC E548                       		lsl.w	#2,d0
0001EAEE 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001EAF2 4E91                       		jsr	(a1)
0001EAF4                            
0001EAF4                            loc_1B4E8:
0001EAF4 5048                       		addq.w	#8,a0
0001EAF6                            
0001EAF6                            loc_1B4EA:
0001EAF6 51CF FFEE                  		dbf	d7,loc_1B4DA
0001EAFA                            
0001EAFA 4E75                       		rts	
0001EAFC                            ; End of function SS_AniItems
0001EAFC                            
0001EAFC                            ; ===========================================================================
0001EAFC 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001EB00 0000 0000                  		dc.l SS_AniBumper
0001EB04 0000 0000                  		dc.l SS_Ani1Up
0001EB08 0000 0000                  		dc.l SS_AniReverse
0001EB0C 0000 0000                  		dc.l SS_AniEmeraldSparks
0001EB10 0000 0000                  		dc.l SS_AniGlassBlock
0001EB14                            ; ===========================================================================
0001EB14                            
0001EB14                            SS_AniRingSparks:
0001EB14 5328 0002                  		subq.b	#1,2(a0)
0001EB18 6A00                       		bpl.s	locret_1B530
0001EB1A 117C 0005 0002             		move.b	#5,2(a0)
0001EB20 7000                       		moveq	#0,d0
0001EB22 1028 0003                  		move.b	3(a0),d0
0001EB26 5228 0003                  		addq.b	#1,3(a0)
0001EB2A 2268 0004                  		movea.l	4(a0),a1
0001EB2E 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001EB32 1280                       		move.b	d0,(a1)
0001EB34 6600                       		bne.s	locret_1B530
0001EB36 4290                       		clr.l	(a0)
0001EB38 42A8 0004                  		clr.l	4(a0)
0001EB3C                            
0001EB3C                            locret_1B530:
0001EB3C 4E75                       		rts	
0001EB3E                            ; ===========================================================================
0001EB3E 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001EB44                            ; ===========================================================================
0001EB44                            
0001EB44                            SS_AniBumper:
0001EB44 5328 0002                  		subq.b	#1,2(a0)
0001EB48 6A00                       		bpl.s	locret_1B566
0001EB4A 117C 0007 0002             		move.b	#7,2(a0)
0001EB50 7000                       		moveq	#0,d0
0001EB52 1028 0003                  		move.b	3(a0),d0
0001EB56 5228 0003                  		addq.b	#1,3(a0)
0001EB5A 2268 0004                  		movea.l	4(a0),a1
0001EB5E 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001EB62 6600                       		bne.s	loc_1B564
0001EB64 4290                       		clr.l	(a0)
0001EB66 42A8 0004                  		clr.l	4(a0)
0001EB6A 12BC 0025                  		move.b	#$25,(a1)
0001EB6E 4E75                       		rts	
0001EB70                            ; ===========================================================================
0001EB70                            
0001EB70                            loc_1B564:
0001EB70 1280                       		move.b	d0,(a1)
0001EB72                            
0001EB72                            locret_1B566:
0001EB72 4E75                       		rts	
0001EB74                            ; ===========================================================================
0001EB74 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001EB7A                            ; ===========================================================================
0001EB7A                            
0001EB7A                            SS_Ani1Up:
0001EB7A 5328 0002                  		subq.b	#1,2(a0)
0001EB7E 6A00                       		bpl.s	locret_1B596
0001EB80 117C 0005 0002             		move.b	#5,2(a0)
0001EB86 7000                       		moveq	#0,d0
0001EB88 1028 0003                  		move.b	3(a0),d0
0001EB8C 5228 0003                  		addq.b	#1,3(a0)
0001EB90 2268 0004                  		movea.l	4(a0),a1
0001EB94 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001EB98 1280                       		move.b	d0,(a1)
0001EB9A 6600                       		bne.s	locret_1B596
0001EB9C 4290                       		clr.l	(a0)
0001EB9E 42A8 0004                  		clr.l	4(a0)
0001EBA2                            
0001EBA2                            locret_1B596:
0001EBA2 4E75                       		rts	
0001EBA4                            ; ===========================================================================
0001EBA4 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001EBAA                            ; ===========================================================================
0001EBAA                            
0001EBAA                            SS_AniReverse:
0001EBAA 5328 0002                  		subq.b	#1,2(a0)
0001EBAE 6A00                       		bpl.s	locret_1B5CC
0001EBB0 117C 0007 0002             		move.b	#7,2(a0)
0001EBB6 7000                       		moveq	#0,d0
0001EBB8 1028 0003                  		move.b	3(a0),d0
0001EBBC 5228 0003                  		addq.b	#1,3(a0)
0001EBC0 2268 0004                  		movea.l	4(a0),a1
0001EBC4 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001EBC8 6600                       		bne.s	loc_1B5CA
0001EBCA 4290                       		clr.l	(a0)
0001EBCC 42A8 0004                  		clr.l	4(a0)
0001EBD0 12BC 002B                  		move.b	#$2B,(a1)
0001EBD4 4E75                       		rts	
0001EBD6                            ; ===========================================================================
0001EBD6                            
0001EBD6                            loc_1B5CA:
0001EBD6 1280                       		move.b	d0,(a1)
0001EBD8                            
0001EBD8                            locret_1B5CC:
0001EBD8 4E75                       		rts	
0001EBDA                            ; ===========================================================================
0001EBDA 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001EBE0                            ; ===========================================================================
0001EBE0                            
0001EBE0                            SS_AniEmeraldSparks:
0001EBE0 5328 0002                  		subq.b	#1,2(a0)
0001EBE4 6A00                       		bpl.s	locret_1B60C
0001EBE6 117C 0005 0002             		move.b	#5,2(a0)
0001EBEC 7000                       		moveq	#0,d0
0001EBEE 1028 0003                  		move.b	3(a0),d0
0001EBF2 5228 0003                  		addq.b	#1,3(a0)
0001EBF6 2268 0004                  		movea.l	4(a0),a1
0001EBFA 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001EBFE 1280                       		move.b	d0,(a1)
0001EC00 6600                       		bne.s	locret_1B60C
0001EC02 4290                       		clr.l	(a0)
0001EC04 42A8 0004                  		clr.l	4(a0)
0001EC08 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001EC18                            
0001EC18                            locret_1B60C:
0001EC18 4E75                       		rts	
0001EC1A                            ; ===========================================================================
0001EC1A 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001EC20                            ; ===========================================================================
0001EC20                            
0001EC20                            SS_AniGlassBlock:
0001EC20 5328 0002                  		subq.b	#1,2(a0)
0001EC24 6A00                       		bpl.s	locret_1B640
0001EC26 117C 0001 0002             		move.b	#1,2(a0)
0001EC2C 7000                       		moveq	#0,d0
0001EC2E 1028 0003                  		move.b	3(a0),d0
0001EC32 5228 0003                  		addq.b	#1,3(a0)
0001EC36 2268 0004                  		movea.l	4(a0),a1
0001EC3A 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001EC3E 1280                       		move.b	d0,(a1)
0001EC40 6600                       		bne.s	locret_1B640
0001EC42 12A8 0004                  		move.b	4(a0),(a1)
0001EC46 4290                       		clr.l	(a0)
0001EC48 42A8 0004                  		clr.l	4(a0)
0001EC4C                            
0001EC4C                            locret_1B640:
0001EC4C 4E75                       		rts	
0001EC4E                            ; ===========================================================================
0001EC4E 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001EC58                            
0001EC58                            ; ---------------------------------------------------------------------------
0001EC58                            ; Special stage	layout pointers
0001EC58                            ; ---------------------------------------------------------------------------
0001EC58                            SS_LayoutIndex:
0001EC58 0000 0000                  		dc.l SS_1
0001EC5C 0000 0000                  		dc.l SS_2
0001EC60 0000 0000                  		dc.l SS_3
0001EC64 0000 0000                  		dc.l SS_4
0001EC68 0000 0000                  		dc.l SS_5
0001EC6C 0000 0000                  		dc.l SS_6
0001EC70                            		even
0001EC70                            
0001EC70                            ; ---------------------------------------------------------------------------
0001EC70                            ; Special stage start locations
0001EC70                            ; ---------------------------------------------------------------------------
0001EC70                            SS_StartLoc:	include	"_inc\Start Location Array - Special Stages.asm"
0001EC70                            ; ---------------------------------------------------------------------------
0001EC70                            ; Special stage start locations
0001EC70                            ; ---------------------------------------------------------------------------
0001EC70                            
0001EC70                            		incbin	"startpos\ss1.bin"
0001EC74                            		incbin	"startpos\ss2.bin"
0001EC78                            		incbin	"startpos\ss3.bin"
0001EC7C                            		incbin	"startpos\ss4.bin"
0001EC80                            		incbin	"startpos\ss5.bin"
0001EC84                            		incbin	"startpos\ss6.bin"
0001EC88                            		even
0001EC88                            		even
0001EC88                            
0001EC88                            ; ---------------------------------------------------------------------------
0001EC88                            ; Subroutine to	load special stage layout
0001EC88                            ; ---------------------------------------------------------------------------
0001EC88                            
0001EC88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC88                            
0001EC88                            
0001EC88                            SS_Load:
0001EC88 7000                       		moveq	#0,d0
0001EC8A 1038 FE16                  		move.b	(v_lastspecial).w,d0 ; load number of last special stage entered
0001EC8E 5238 FE16                  		addq.b	#1,(v_lastspecial).w
0001EC92 0C38 0006 FE16             		cmpi.b	#6,(v_lastspecial).w
0001EC98 6500                       		blo.s	SS_ChkEmldNum
0001EC9A 11FC 0000 FE16             		move.b	#0,(v_lastspecial).w ; reset if higher than 6
0001ECA0                            
0001ECA0                            SS_ChkEmldNum:
0001ECA0 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all emeralds?
0001ECA6 6700                       		beq.s	SS_LoadData	; if yes, branch
0001ECA8 7200                       		moveq	#0,d1
0001ECAA 1238 FE57                  		move.b	(v_emeralds).w,d1
0001ECAE 5301                       		subq.b	#1,d1
0001ECB0 6500                       		blo.s	SS_LoadData
0001ECB2 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0001ECB6                            
0001ECB6                            SS_ChkEmldLoop:	
0001ECB6 B033 1000                  		cmp.b	(a3,d1.w),d0
0001ECBA 6600                       		bne.s	SS_ChkEmldRepeat
0001ECBC 60CA                       		bra.s	SS_Load
0001ECBE                            ; ===========================================================================
0001ECBE                            
0001ECBE                            SS_ChkEmldRepeat:
0001ECBE 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001ECC2                            
0001ECC2                            SS_LoadData:
0001ECC2 E548                       		lsl.w	#2,d0
0001ECC4 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001ECC8 31D9 D008                  		move.w	(a1)+,(v_player+obX).w
0001ECCC 31D9 D00C                  		move.w	(a1)+,(v_player+obY).w
0001ECD0 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001ECD4 43F9 00FF 4000             		lea	($FF4000).l,a1
0001ECDA 303C 0000                  		move.w	#0,d0
0001ECDE 4EB9 0000 18D8             		jsr	(EniDec).l
0001ECE4 43F9 00FF 0000             		lea	($FF0000).l,a1
0001ECEA 303C 0FFF                  		move.w	#$FFF,d0
0001ECEE                            
0001ECEE                            SS_ClrRAM3:
0001ECEE 4299                       		clr.l	(a1)+
0001ECF0 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001ECF4                            
0001ECF4 43F9 00FF 1020             		lea	($FF1020).l,a1
0001ECFA 41F9 00FF 4000             		lea	($FF4000).l,a0
0001ED00 723F                       		moveq	#$3F,d1
0001ED02                            
0001ED02                            loc_1B6F6:
0001ED02 743F                       		moveq	#$3F,d2
0001ED04                            
0001ED04                            loc_1B6F8:
0001ED04 12D8                       		move.b	(a0)+,(a1)+
0001ED06 51CA FFFC                  		dbf	d2,loc_1B6F8
0001ED0A                            
0001ED0A 43E9 0040                  		lea	$40(a1),a1
0001ED0E 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001ED12                            
0001ED12 43F9 00FF 4008             		lea	($FF4008).l,a1
0001ED18 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001ED1E 724D                       		moveq	#$4D,d1
0001ED20                            
0001ED20                            loc_1B714:
0001ED20 22D8                       		move.l	(a0)+,(a1)+
0001ED22 32FC 0000                  		move.w	#0,(a1)+
0001ED26 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001ED2C 32D8                       		move.w	(a0)+,(a1)+
0001ED2E 51C9 FFF0                  		dbf	d1,loc_1B714
0001ED32                            
0001ED32 43F9 00FF 4400             		lea	($FF4400).l,a1
0001ED38 323C 003F                  		move.w	#$3F,d1
0001ED3C                            
0001ED3C                            loc_1B730:
0001ED3C                            
0001ED3C 4299                       		clr.l	(a1)+
0001ED3E 51C9 FFFC                  		dbf	d1,loc_1B730
0001ED42                            
0001ED42 4E75                       		rts	
0001ED44                            ; End of function SS_Load
0001ED44                            
0001ED44                            ; ===========================================================================
0001ED44                            
0001ED44                            SS_MapIndex:
0001ED44                            		include	"_inc\Special Stage Mappings & VRAM Pointers.asm"
0001ED44                            ; ---------------------------------------------------------------------------
0001ED44                            ; Special stage	mappings and VRAM pointers
0001ED44                            ; ---------------------------------------------------------------------------
0001ED44 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001ED48 0142                       	dc.w $142		; VRAM setting
0001ED4A 0000 0000                  	dc.l Map_SSWalls
0001ED4E 0142                       	dc.w $142
0001ED50 0000 0000                  	dc.l Map_SSWalls
0001ED54 0142                       	dc.w $142
0001ED56 0000 0000                  	dc.l Map_SSWalls
0001ED5A 0142                       	dc.w $142
0001ED5C 0000 0000                  	dc.l Map_SSWalls
0001ED60 0142                       	dc.w $142
0001ED62 0000 0000                  	dc.l Map_SSWalls
0001ED66 0142                       	dc.w $142
0001ED68 0000 0000                  	dc.l Map_SSWalls
0001ED6C 0142                       	dc.w $142
0001ED6E 0000 0000                  	dc.l Map_SSWalls
0001ED72 0142                       	dc.w $142
0001ED74 0000 0000                  	dc.l Map_SSWalls
0001ED78 0142                       	dc.w $142
0001ED7A 0000 0000                  	dc.l Map_SSWalls
0001ED7E 2142                       	dc.w $2142
0001ED80 0000 0000                  	dc.l Map_SSWalls
0001ED84 2142                       	dc.w $2142
0001ED86 0000 0000                  	dc.l Map_SSWalls
0001ED8A 2142                       	dc.w $2142
0001ED8C 0000 0000                  	dc.l Map_SSWalls
0001ED90 2142                       	dc.w $2142
0001ED92 0000 0000                  	dc.l Map_SSWalls
0001ED96 2142                       	dc.w $2142
0001ED98 0000 0000                  	dc.l Map_SSWalls
0001ED9C 2142                       	dc.w $2142
0001ED9E 0000 0000                  	dc.l Map_SSWalls
0001EDA2 2142                       	dc.w $2142
0001EDA4 0000 0000                  	dc.l Map_SSWalls
0001EDA8 2142                       	dc.w $2142
0001EDAA 0000 0000                  	dc.l Map_SSWalls
0001EDAE 2142                       	dc.w $2142
0001EDB0 0000 0000                  	dc.l Map_SSWalls
0001EDB4 4142                       	dc.w $4142
0001EDB6 0000 0000                  	dc.l Map_SSWalls
0001EDBA 4142                       	dc.w $4142
0001EDBC 0000 0000                  	dc.l Map_SSWalls
0001EDC0 4142                       	dc.w $4142
0001EDC2 0000 0000                  	dc.l Map_SSWalls
0001EDC6 4142                       	dc.w $4142
0001EDC8 0000 0000                  	dc.l Map_SSWalls
0001EDCC 4142                       	dc.w $4142
0001EDCE 0000 0000                  	dc.l Map_SSWalls
0001EDD2 4142                       	dc.w $4142
0001EDD4 0000 0000                  	dc.l Map_SSWalls
0001EDD8 4142                       	dc.w $4142
0001EDDA 0000 0000                  	dc.l Map_SSWalls
0001EDDE 4142                       	dc.w $4142
0001EDE0 0000 0000                  	dc.l Map_SSWalls
0001EDE4 4142                       	dc.w $4142
0001EDE6 0000 0000                  	dc.l Map_SSWalls
0001EDEA 6142                       	dc.w $6142
0001EDEC 0000 0000                  	dc.l Map_SSWalls
0001EDF0 6142                       	dc.w $6142
0001EDF2 0000 0000                  	dc.l Map_SSWalls
0001EDF6 6142                       	dc.w $6142
0001EDF8 0000 0000                  	dc.l Map_SSWalls
0001EDFC 6142                       	dc.w $6142
0001EDFE 0000 0000                  	dc.l Map_SSWalls
0001EE02 6142                       	dc.w $6142
0001EE04 0000 0000                  	dc.l Map_SSWalls
0001EE08 6142                       	dc.w $6142
0001EE0A 0000 0000                  	dc.l Map_SSWalls
0001EE0E 6142                       	dc.w $6142
0001EE10 0000 0000                  	dc.l Map_SSWalls
0001EE14 6142                       	dc.w $6142
0001EE16 0000 0000                  	dc.l Map_SSWalls
0001EE1A 6142                       	dc.w $6142
0001EE1C 0001 0AF0                  	dc.l Map_Bump
0001EE20 023B                       	dc.w $23B
0001EE22 0000 0000                  	dc.l Map_SS_R
0001EE26 0570                       	dc.w $570
0001EE28 0000 0000                  	dc.l Map_SS_R
0001EE2C 0251                       	dc.w $251
0001EE2E 0000 0000                  	dc.l Map_SS_R
0001EE32 0370                       	dc.w $370
0001EE34 0000 0000                  	dc.l Map_SS_Up
0001EE38 0263                       	dc.w $263
0001EE3A 0000 0000                  	dc.l Map_SS_Down
0001EE3E 0263                       	dc.w $263
0001EE40 0000 0000                  	dc.l Map_SS_R
0001EE44 22F0                       	dc.w $22F0
0001EE46 0000 0000                  	dc.l Map_SS_Glass
0001EE4A 0470                       	dc.w $470
0001EE4C 0000 0000                  	dc.l Map_SS_Glass
0001EE50 05F0                       	dc.w $5F0
0001EE52 0000 0000                  	dc.l Map_SS_Glass
0001EE56 65F0                       	dc.w $65F0
0001EE58 0000 0000                  	dc.l Map_SS_Glass
0001EE5C 25F0                       	dc.w $25F0
0001EE5E 0000 0000                  	dc.l Map_SS_Glass
0001EE62 45F0                       	dc.w $45F0
0001EE64 0000 0000                  	dc.l Map_SS_R
0001EE68 02F0                       	dc.w $2F0
0001EE6A 0101 0AF0                  	dc.l Map_Bump+$1000000	; add frame no.	* $1000000
0001EE6E 023B                       	dc.w $23B
0001EE70 0201 0AF0                  	dc.l Map_Bump+$2000000
0001EE74 023B                       	dc.w $23B
0001EE76 0000 0000                  	dc.l Map_SS_R
0001EE7A 0797                       	dc.w $797
0001EE7C 0000 0000                  	dc.l Map_SS_R
0001EE80 07A0                       	dc.w $7A0
0001EE82 0000 0000                  	dc.l Map_SS_R
0001EE86 07A9                       	dc.w $7A9
0001EE88 0000 0000                  	dc.l Map_SS_R
0001EE8C 0797                       	dc.w $797
0001EE8E 0000 0000                  	dc.l Map_SS_R
0001EE92 07A0                       	dc.w $7A0
0001EE94 0000 0000                  	dc.l Map_SS_R
0001EE98 07A9                       	dc.w $7A9
0001EE9A 0000 BADA                  	dc.l Map_Ring
0001EE9E 2798                       	dc.w $2798
0001EEA0 0000 0000                  	dc.l Map_SS_Chaos3
0001EEA4 0770                       	dc.w $770
0001EEA6 0000 0000                  	dc.l Map_SS_Chaos3
0001EEAA 2770                       	dc.w $2770
0001EEAC 0000 0000                  	dc.l Map_SS_Chaos3
0001EEB0 4770                       	dc.w $4770
0001EEB2 0000 0000                  	dc.l Map_SS_Chaos3
0001EEB6 6770                       	dc.w $6770
0001EEB8 0000 0000                  	dc.l Map_SS_Chaos1
0001EEBC 0770                       	dc.w $770
0001EEBE 0000 0000                  	dc.l Map_SS_Chaos2
0001EEC2 0770                       	dc.w $770
0001EEC4 0000 0000                  	dc.l Map_SS_R
0001EEC8 04F0                       	dc.w $4F0
0001EECA 0400 BADA                  	dc.l Map_Ring+$4000000
0001EECE 2798                       	dc.w $2798
0001EED0 0500 BADA                  	dc.l Map_Ring+$5000000
0001EED4 2798                       	dc.w $2798
0001EED6 0600 BADA                  	dc.l Map_Ring+$6000000
0001EEDA 2798                       	dc.w $2798
0001EEDC 0700 BADA                  	dc.l Map_Ring+$7000000
0001EEE0 2798                       	dc.w $2798
0001EEE2 0000 0000                  	dc.l Map_SS_Glass
0001EEE6 23F0                       	dc.w $23F0
0001EEE8 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001EEEC 23F0                       	dc.w $23F0
0001EEEE 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001EEF2 23F0                       	dc.w $23F0
0001EEF4 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001EEF8 23F0                       	dc.w $23F0
0001EEFA 0000 0000                  	dc.l Map_SS_R+$2000000
0001EEFE 04F0                       	dc.w $4F0
0001EF00 0000 0000                  	dc.l Map_SS_Glass
0001EF04 05F0                       	dc.w $5F0
0001EF06 0000 0000                  	dc.l Map_SS_Glass
0001EF0A 65F0                       	dc.w $65F0
0001EF0C 0000 0000                  	dc.l Map_SS_Glass
0001EF10 25F0                       	dc.w $25F0
0001EF12 0000 0000                  	dc.l Map_SS_Glass
0001EF16 45F0                       	dc.w $45F0
0001EF16 45F0                       	dc.w $45F0
0001EF18                            
0001EF18                            Map_SS_R:	include	"_maps\SS R Block.asm"
0001EF18                            ; ---------------------------------------------------------------------------
0001EF18                            ; Sprite mappings - special stage "R" block
0001EF18                            ; ---------------------------------------------------------------------------
0001EF18                            Map_SS_R_internal:
0001EF18 0000                       		dc.w byte_1B912-Map_SS_R_internal
0001EF1A 0000                       		dc.w byte_1B918-Map_SS_R_internal
0001EF1C 0000                       		dc.w byte_1B91E-Map_SS_R_internal
0001EF1E 01                         byte_1B912:	dc.b 1
0001EF1F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EF24 01                         byte_1B918:	dc.b 1
0001EF25 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001EF2A 00                         byte_1B91E:	dc.b 0
0001EF2C 00                         		even
0001EF2C 00                         		even
0001EF2C                            Map_SS_Glass:	include	"_maps\SS Glass Block.asm"
0001EF2C                            ; ---------------------------------------------------------------------------
0001EF2C                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001EF2C                            ; ---------------------------------------------------------------------------
0001EF2C                            Map_SS_Glass_internal:
0001EF2C 0000                       		dc.w byte_1B928-Map_SS_Glass_internal
0001EF2E 0000                       		dc.w byte_1B92E-Map_SS_Glass_internal
0001EF30 0000                       		dc.w byte_1B934-Map_SS_Glass_internal
0001EF32 0000                       		dc.w byte_1B93A-Map_SS_Glass_internal
0001EF34 01                         byte_1B928:	dc.b 1
0001EF35 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EF3A 01                         byte_1B92E:	dc.b 1
0001EF3B F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001EF40 01                         byte_1B934:	dc.b 1
0001EF41 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001EF46 01                         byte_1B93A:	dc.b 1
0001EF47 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001EF4C                            		even
0001EF4C                            		even
0001EF4C                            Map_SS_Up:	include	"_maps\SS UP Block.asm"
0001EF4C                            ; ---------------------------------------------------------------------------
0001EF4C                            ; Sprite mappings - special stage "UP" block
0001EF4C                            ; ---------------------------------------------------------------------------
0001EF4C                            Map_SS_Up_internal:
0001EF4C 0000                       		dc.w byte_1B944-Map_SS_Up_internal
0001EF4E 0000                       		dc.w byte_1B94A-Map_SS_Up_internal
0001EF50 01                         byte_1B944:	dc.b 1
0001EF51 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EF56 01                         byte_1B94A:	dc.b 1
0001EF57 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001EF5C                            		even
0001EF5C                            		even
0001EF5C                            Map_SS_Down:	include	"_maps\SS DOWN Block.asm"
0001EF5C                            ; ---------------------------------------------------------------------------
0001EF5C                            ; Sprite mappings - special stage "DOWN" block
0001EF5C                            ; ---------------------------------------------------------------------------
0001EF5C                            Map_SS_Down_internal:
0001EF5C 0000                       		dc.w byte_1B954-Map_SS_Down_internal
0001EF5E 0000                       		dc.w byte_1B95A-Map_SS_Down_internal
0001EF60 01                         byte_1B954:	dc.b 1
0001EF61 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001EF66 01                         byte_1B95A:	dc.b 1
0001EF67 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001EF6C                            		even
0001EF6C                            		even
0001EF6C                            		include	"_maps\SS Chaos Emeralds.asm"
0001EF6C                            ; ---------------------------------------------------------------------------
0001EF6C                            ; Sprite mappings - special stage chaos	emeralds
0001EF6C                            ; ---------------------------------------------------------------------------
0001EF6C 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001EF6E 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001EF70 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001EF72 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001EF74 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001EF76 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001EF78 01                         byte_1B96C:	dc.b 1
0001EF79 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001EF7E 01                         byte_1B972:	dc.b 1
0001EF7F F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0001EF84 01                         byte_1B978:	dc.b 1
0001EF85 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001EF8A 01                         byte_1B97E:	dc.b 1
0001EF8B F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001EF90                            		even
0001EF90                            		even
0001EF90                            
0001EF90                            		include	"_incObj\09 Sonic in Special Stage.asm"
0001EF90                            ; ---------------------------------------------------------------------------
0001EF90                            ; Object 09 - Sonic (special stage)
0001EF90                            ; ---------------------------------------------------------------------------
0001EF90                            
0001EF90                            SonicSpecial:
0001EF90 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001EF94 6700                       		beq.s	Obj09_Normal	; if not, branch
0001EF96 6100 0000                  		bsr.w	SS_FixCamera
0001EF9A 6000 0000                  		bra.w	DebugMode
0001EF9E                            ; ===========================================================================
0001EF9E                            
0001EF9E                            Obj09_Normal:
0001EF9E 7000                       		moveq	#0,d0
0001EFA0 1028 0024                  		move.b	obRoutine(a0),d0
0001EFA4 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001EFA8 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001EFAC                            ; ===========================================================================
0001EFAC 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001EFAE 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001EFB0 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001EFB2 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001EFB4                            ; ===========================================================================
0001EFB4                            
0001EFB4                            Obj09_Main:	; Routine 0
0001EFB4 5428 0024                  		addq.b	#2,obRoutine(a0)
0001EFB8 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001EFBE 117C 0007 0017             		move.b	#7,obWidth(a0)
0001EFC4 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0001EFCC 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001EFD2 117C 0004 0001             		move.b	#4,obRender(a0)
0001EFD8 317C 0000 0018             		move.w	#0,obPriority(a0)
0001EFDE 117C 0002 001C             		move.b	#id_Roll,obAnim(a0)
0001EFE4 08E8 0002 0022             		bset	#2,obStatus(a0)
0001EFEA 08E8 0001 0022             		bset	#1,obStatus(a0)
0001EFF0                            
0001EFF0                            Obj09_ChkDebug:	; Routine 2
0001EFF0 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat enabled?
0001EFF4 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001EFF6 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0001EFFC 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001EFFE 31FC 0001 FE08             		move.w	#1,(v_debuguse).w ; change Sonic into a ring
0001F004                            
0001F004                            Obj09_NoDebug:
0001F004 117C 0000 0030             		move.b	#0,$30(a0)
0001F00A 7000                       		moveq	#0,d0
0001F00C 1028 0022                  		move.b	obStatus(a0),d0
0001F010 0240 0002                  		andi.w	#2,d0
0001F014 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001F018 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001F01C 4EB9 0001 67E4             		jsr	(Sonic_LoadGfx).l
0001F022 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001F028                            ; ===========================================================================
0001F028 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001F02A 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001F02C                            ; ===========================================================================
0001F02C                            
0001F02C                            Obj09_OnWall:
0001F02C 6100 0000                  		bsr.w	Obj09_Jump
0001F030 6100 0000                  		bsr.w	Obj09_Move
0001F034 6100 0000                  		bsr.w	Obj09_Fall
0001F038 6000                       		bra.s	Obj09_Display
0001F03A                            ; ===========================================================================
0001F03A                            
0001F03A                            Obj09_InAir:
0001F03A 6100 0000                  		bsr.w	nullsub_2
0001F03E 6100 0000                  		bsr.w	Obj09_Move
0001F042 6100 0000                  		bsr.w	Obj09_Fall
0001F046                            
0001F046                            Obj09_Display:
0001F046 6100 0000                  		bsr.w	Obj09_ChkItems
0001F04A 6100 0000                  		bsr.w	Obj09_ChkItems2
0001F04E 4EB9 0000 F4A6             		jsr	(SpeedToPos).l
0001F054 6100 0000                  		bsr.w	SS_FixCamera
0001F058 3038 F780                  		move.w	(v_ssangle).w,d0
0001F05C D078 F782                  		add.w	(v_ssrotate).w,d0
0001F060 31C0 F780                  		move.w	d0,(v_ssangle).w
0001F064 4EB9 0001 642C             		jsr	(Sonic_Animate).l
0001F06A 4E75                       		rts	
0001F06C                            
0001F06C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F06C                            
0001F06C                            
0001F06C                            Obj09_Move:
0001F06C 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001F072 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001F074 6100 0000                  		bsr.w	Obj09_MoveLeft
0001F078                            
0001F078                            Obj09_ChkRight:
0001F078 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
0001F07E 6700                       		beq.s	loc_1BA78	; if not, branch
0001F080 6100 0000                  		bsr.w	Obj09_MoveRight
0001F084                            
0001F084                            loc_1BA78:
0001F084 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001F088 0200 000C                  		andi.b	#btnL+btnR,d0
0001F08C 6600                       		bne.s	loc_1BAA8
0001F08E 3028 0020                  		move.w	obInertia(a0),d0
0001F092 6700                       		beq.s	loc_1BAA8
0001F094 6B00                       		bmi.s	loc_1BA9A
0001F096 0440 000C                  		subi.w	#$C,d0
0001F09A 6400                       		bcc.s	loc_1BA94
0001F09C 303C 0000                  		move.w	#0,d0
0001F0A0                            
0001F0A0                            loc_1BA94:
0001F0A0 3140 0020                  		move.w	d0,obInertia(a0)
0001F0A4 6000                       		bra.s	loc_1BAA8
0001F0A6                            ; ===========================================================================
0001F0A6                            
0001F0A6                            loc_1BA9A:
0001F0A6 0640 000C                  		addi.w	#$C,d0
0001F0AA 6400                       		bcc.s	loc_1BAA4
0001F0AC 303C 0000                  		move.w	#0,d0
0001F0B0                            
0001F0B0                            loc_1BAA4:
0001F0B0 3140 0020                  		move.w	d0,obInertia(a0)
0001F0B4                            
0001F0B4                            loc_1BAA8:
0001F0B4 1038 F780                  		move.b	(v_ssangle).w,d0
0001F0B8 0600 0020                  		addi.b	#$20,d0
0001F0BC 0200 00C0                  		andi.b	#$C0,d0
0001F0C0 4400                       		neg.b	d0
0001F0C2 4EB9 0000 3BA2             		jsr	(CalcSine).l
0001F0C8 C3E8 0020                  		muls.w	obInertia(a0),d1
0001F0CC D3A8 0008                  		add.l	d1,obX(a0)
0001F0D0 C1E8 0020                  		muls.w	obInertia(a0),d0
0001F0D4 D1A8 000C                  		add.l	d0,obY(a0)
0001F0D8 48E7 C000                  		movem.l	d0-d1,-(sp)
0001F0DC 2428 000C                  		move.l	obY(a0),d2
0001F0E0 2628 0008                  		move.l	obX(a0),d3
0001F0E4 6100 0000                  		bsr.w	sub_1BCE8
0001F0E8 6700                       		beq.s	loc_1BAF2
0001F0EA 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001F0EE 93A8 0008                  		sub.l	d1,obX(a0)
0001F0F2 91A8 000C                  		sub.l	d0,obY(a0)
0001F0F6 317C 0000 0020             		move.w	#0,obInertia(a0)
0001F0FC 4E75                       		rts	
0001F0FE                            ; ===========================================================================
0001F0FE                            
0001F0FE                            loc_1BAF2:
0001F0FE 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001F102 4E75                       		rts	
0001F104                            ; End of function Obj09_Move
0001F104                            
0001F104                            
0001F104                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F104                            
0001F104                            
0001F104                            Obj09_MoveLeft:
0001F104 08E8 0000 0022             		bset	#0,obStatus(a0)
0001F10A 3028 0020                  		move.w	obInertia(a0),d0
0001F10E 6700                       		beq.s	loc_1BB06
0001F110 6A00                       		bpl.s	loc_1BB1A
0001F112                            
0001F112                            loc_1BB06:
0001F112 0440 000C                  		subi.w	#$C,d0
0001F116 0C40 F800                  		cmpi.w	#-$800,d0
0001F11A 6E00                       		bgt.s	loc_1BB14
0001F11C 303C F800                  		move.w	#-$800,d0
0001F120                            
0001F120                            loc_1BB14:
0001F120 3140 0020                  		move.w	d0,obInertia(a0)
0001F124 4E75                       		rts	
0001F126                            ; ===========================================================================
0001F126                            
0001F126                            loc_1BB1A:
0001F126 0440 0040                  		subi.w	#$40,d0
0001F12A 6400                       		bcc.s	loc_1BB22
0001F12C 4E71                       		nop	
0001F12E                            
0001F12E                            loc_1BB22:
0001F12E 3140 0020                  		move.w	d0,obInertia(a0)
0001F132 4E75                       		rts	
0001F134                            ; End of function Obj09_MoveLeft
0001F134                            
0001F134                            
0001F134                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F134                            
0001F134                            
0001F134                            Obj09_MoveRight:
0001F134 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001F13A 3028 0020                  		move.w	obInertia(a0),d0
0001F13E 6B00                       		bmi.s	loc_1BB48
0001F140 0640 000C                  		addi.w	#$C,d0
0001F144 0C40 0800                  		cmpi.w	#$800,d0
0001F148 6D00                       		blt.s	loc_1BB42
0001F14A 303C 0800                  		move.w	#$800,d0
0001F14E                            
0001F14E                            loc_1BB42:
0001F14E 3140 0020                  		move.w	d0,obInertia(a0)
0001F152 6000                       		bra.s	locret_1BB54
0001F154                            ; ===========================================================================
0001F154                            
0001F154                            loc_1BB48:
0001F154 0640 0040                  		addi.w	#$40,d0
0001F158 6400                       		bcc.s	loc_1BB50
0001F15A 4E71                       		nop	
0001F15C                            
0001F15C                            loc_1BB50:
0001F15C 3140 0020                  		move.w	d0,obInertia(a0)
0001F160                            
0001F160                            locret_1BB54:
0001F160 4E75                       		rts	
0001F162                            ; End of function Obj09_MoveRight
0001F162                            
0001F162                            
0001F162                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F162                            
0001F162                            
0001F162                            Obj09_Jump:
0001F162 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001F166 0200 0070                  		andi.b	#btnABC,d0	; is A,	B or C pressed?
0001F16A 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001F16C 1038 F780                  		move.b	(v_ssangle).w,d0
0001F170 0200 00FC                  		andi.b	#$FC,d0
0001F174 4400                       		neg.b	d0
0001F176 0400 0040                  		subi.b	#$40,d0
0001F17A 4EB9 0000 3BA2             		jsr	(CalcSine).l
0001F180 C3FC 0680                  		muls.w	#$680,d1
0001F184 E081                       		asr.l	#8,d1
0001F186 3141 0010                  		move.w	d1,obVelX(a0)
0001F18A C1FC 0680                  		muls.w	#$680,d0
0001F18E E080                       		asr.l	#8,d0
0001F190 3140 0012                  		move.w	d0,obVelY(a0)
0001F194 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F1A4                            
0001F1A4                            Obj09_NoJump:
0001F1A4 4E75                       		rts	
0001F1A6                            ; End of function Obj09_Jump
0001F1A6                            
0001F1A6                            
0001F1A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F1A6                            
0001F1A6                            
0001F1A6                            nullsub_2:
0001F1A6 4E75                       		rts	
0001F1A8                            ; End of function nullsub_2
0001F1A8                            
0001F1A8                            ; ===========================================================================
0001F1A8                            ; ---------------------------------------------------------------------------
0001F1A8                            ; unused subroutine to limit Sonic's upward vertical speed
0001F1A8                            ; ---------------------------------------------------------------------------
0001F1A8 323C FC00                  		move.w	#-$400,d1
0001F1AC B268 0012                  		cmp.w	obVelY(a0),d1
0001F1B0 6F00                       		ble.s	locret_1BBB4
0001F1B2 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001F1B6 0200 0070                  		andi.b	#btnABC,d0
0001F1BA 6600                       		bne.s	locret_1BBB4
0001F1BC 3141 0012                  		move.w	d1,obVelY(a0)
0001F1C0                            
0001F1C0                            locret_1BBB4:
0001F1C0 4E75                       		rts	
0001F1C2                            ; ---------------------------------------------------------------------------
0001F1C2                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001F1C2                            ; ---------------------------------------------------------------------------
0001F1C2                            
0001F1C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F1C2                            
0001F1C2                            
0001F1C2                            SS_FixCamera:
0001F1C2 3428 000C                  		move.w	obY(a0),d2
0001F1C6 3628 0008                  		move.w	obX(a0),d3
0001F1CA 3038 F700                  		move.w	(v_screenposx).w,d0
0001F1CE 0443 00A0                  		subi.w	#$A0,d3
0001F1D2 6500                       		bcs.s	loc_1BBCE
0001F1D4 9043                       		sub.w	d3,d0
0001F1D6 9178 F700                  		sub.w	d0,(v_screenposx).w
0001F1DA                            
0001F1DA                            loc_1BBCE:
0001F1DA 3038 F704                  		move.w	(v_screenposy).w,d0
0001F1DE 0442 0070                  		subi.w	#$70,d2
0001F1E2 6500                       		bcs.s	locret_1BBDE
0001F1E4 9042                       		sub.w	d2,d0
0001F1E6 9178 F704                  		sub.w	d0,(v_screenposy).w
0001F1EA                            
0001F1EA                            locret_1BBDE:
0001F1EA 4E75                       		rts	
0001F1EC                            ; End of function SS_FixCamera
0001F1EC                            
0001F1EC                            ; ===========================================================================
0001F1EC                            
0001F1EC                            Obj09_ExitStage:
0001F1EC 0678 0040 F782             		addi.w	#$40,(v_ssrotate).w
0001F1F2 0C78 1800 F782             		cmpi.w	#$1800,(v_ssrotate).w
0001F1F8 6600                       		bne.s	loc_1BBF4
0001F1FA 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001F200                            
0001F200                            loc_1BBF4:
0001F200 0C78 3000 F782             		cmpi.w	#$3000,(v_ssrotate).w
0001F206 6D00                       		blt.s	loc_1BC12
0001F208 31FC 0000 F782             		move.w	#0,(v_ssrotate).w
0001F20E 31FC 4000 F780             		move.w	#$4000,(v_ssangle).w
0001F214 5428 0024                  		addq.b	#2,obRoutine(a0)
0001F218 317C 003C 0038             		move.w	#$3C,$38(a0)
0001F21E                            
0001F21E                            loc_1BC12:
0001F21E 3038 F780                  		move.w	(v_ssangle).w,d0
0001F222 D078 F782                  		add.w	(v_ssrotate).w,d0
0001F226 31C0 F780                  		move.w	d0,(v_ssangle).w
0001F22A 4EB9 0001 642C             		jsr	(Sonic_Animate).l
0001F230 4EB9 0001 67E4             		jsr	(Sonic_LoadGfx).l
0001F236 6100 FF8A                  		bsr.w	SS_FixCamera
0001F23A 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001F240                            ; ===========================================================================
0001F240                            
0001F240                            Obj09_Exit2:
0001F240 5368 0038                  		subq.w	#1,$38(a0)
0001F244 6600                       		bne.s	loc_1BC40
0001F246 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001F24C                            
0001F24C                            loc_1BC40:
0001F24C 4EB9 0001 642C             		jsr	(Sonic_Animate).l
0001F252 4EB9 0001 67E4             		jsr	(Sonic_LoadGfx).l
0001F258 6100 FF68                  		bsr.w	SS_FixCamera
0001F25C 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
0001F262                            
0001F262                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F262                            
0001F262                            
0001F262                            Obj09_Fall:
0001F262 2428 000C                  		move.l	obY(a0),d2
0001F266 2628 0008                  		move.l	obX(a0),d3
0001F26A 1038 F780                  		move.b	(v_ssangle).w,d0
0001F26E 0200 00FC                  		andi.b	#$FC,d0
0001F272 4EB9 0000 3BA2             		jsr	(CalcSine).l
0001F278 3828 0010                  		move.w	obVelX(a0),d4
0001F27C 48C4                       		ext.l	d4
0001F27E E184                       		asl.l	#8,d4
0001F280 C1FC 002A                  		muls.w	#$2A,d0
0001F284 D084                       		add.l	d4,d0
0001F286 3828 0012                  		move.w	obVelY(a0),d4
0001F28A 48C4                       		ext.l	d4
0001F28C E184                       		asl.l	#8,d4
0001F28E C3FC 002A                  		muls.w	#$2A,d1
0001F292 D284                       		add.l	d4,d1
0001F294 D680                       		add.l	d0,d3
0001F296 6100 0000                  		bsr.w	sub_1BCE8
0001F29A 6700                       		beq.s	loc_1BCB0
0001F29C 9680                       		sub.l	d0,d3
0001F29E 7000                       		moveq	#0,d0
0001F2A0 3140 0010                  		move.w	d0,obVelX(a0)
0001F2A4 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001F2AA D481                       		add.l	d1,d2
0001F2AC 6100 0000                  		bsr.w	sub_1BCE8
0001F2B0 6700                       		beq.s	loc_1BCC6
0001F2B2 9481                       		sub.l	d1,d2
0001F2B4 7200                       		moveq	#0,d1
0001F2B6 3141 0012                  		move.w	d1,obVelY(a0)
0001F2BA 4E75                       		rts	
0001F2BC                            ; ===========================================================================
0001F2BC                            
0001F2BC                            loc_1BCB0:
0001F2BC D481                       		add.l	d1,d2
0001F2BE 6100 0000                  		bsr.w	sub_1BCE8
0001F2C2 6700                       		beq.s	loc_1BCD4
0001F2C4 9481                       		sub.l	d1,d2
0001F2C6 7200                       		moveq	#0,d1
0001F2C8 3141 0012                  		move.w	d1,obVelY(a0)
0001F2CC 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001F2D2                            
0001F2D2                            loc_1BCC6:
0001F2D2 E080                       		asr.l	#8,d0
0001F2D4 E081                       		asr.l	#8,d1
0001F2D6 3140 0010                  		move.w	d0,obVelX(a0)
0001F2DA 3141 0012                  		move.w	d1,obVelY(a0)
0001F2DE 4E75                       		rts	
0001F2E0                            ; ===========================================================================
0001F2E0                            
0001F2E0                            loc_1BCD4:
0001F2E0 E080                       		asr.l	#8,d0
0001F2E2 E081                       		asr.l	#8,d1
0001F2E4 3140 0010                  		move.w	d0,obVelX(a0)
0001F2E8 3141 0012                  		move.w	d1,obVelY(a0)
0001F2EC 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F2F2 4E75                       		rts	
0001F2F4                            ; End of function Obj09_Fall
0001F2F4                            
0001F2F4                            
0001F2F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F2F4                            
0001F2F4                            
0001F2F4                            sub_1BCE8:
0001F2F4 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F2FA 7800                       		moveq	#0,d4
0001F2FC 4842                       		swap	d2
0001F2FE 3802                       		move.w	d2,d4
0001F300 4842                       		swap	d2
0001F302 0644 0044                  		addi.w	#$44,d4
0001F306 88FC 0018                  		divu.w	#$18,d4
0001F30A C8FC 0080                  		mulu.w	#$80,d4
0001F30E D3C4                       		adda.l	d4,a1
0001F310 7800                       		moveq	#0,d4
0001F312 4843                       		swap	d3
0001F314 3803                       		move.w	d3,d4
0001F316 4843                       		swap	d3
0001F318 0644 0014                  		addi.w	#$14,d4
0001F31C 88FC 0018                  		divu.w	#$18,d4
0001F320 D2C4                       		adda.w	d4,a1
0001F322 7A00                       		moveq	#0,d5
0001F324 1819                       		move.b	(a1)+,d4
0001F326 6100                       		bsr.s	sub_1BD30
0001F328 1819                       		move.b	(a1)+,d4
0001F32A 6100                       		bsr.s	sub_1BD30
0001F32C D2FC 007E                  		adda.w	#$7E,a1
0001F330 1819                       		move.b	(a1)+,d4
0001F332 6100                       		bsr.s	sub_1BD30
0001F334 1819                       		move.b	(a1)+,d4
0001F336 6100                       		bsr.s	sub_1BD30
0001F338 4A05                       		tst.b	d5
0001F33A 4E75                       		rts	
0001F33C                            ; End of function sub_1BCE8
0001F33C                            
0001F33C                            
0001F33C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F33C                            
0001F33C                            
0001F33C                            sub_1BD30:
0001F33C 6700                       		beq.s	locret_1BD44
0001F33E 0C04 0028                  		cmpi.b	#$28,d4
0001F342 6700                       		beq.s	locret_1BD44
0001F344 0C04 003A                  		cmpi.b	#$3A,d4
0001F348 6500                       		bcs.s	loc_1BD46
0001F34A 0C04 004B                  		cmpi.b	#$4B,d4
0001F34E 6400                       		bcc.s	loc_1BD46
0001F350                            
0001F350                            locret_1BD44:
0001F350 4E75                       		rts	
0001F352                            ; ===========================================================================
0001F352                            
0001F352                            loc_1BD46:
0001F352 1144 0030                  		move.b	d4,$30(a0)
0001F356 2149 0032                  		move.l	a1,$32(a0)
0001F35A 7AFF                       		moveq	#-1,d5
0001F35C 4E75                       		rts	
0001F35E                            ; End of function sub_1BD30
0001F35E                            
0001F35E                            
0001F35E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F35E                            
0001F35E                            
0001F35E                            Obj09_ChkItems:
0001F35E 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F364 7800                       		moveq	#0,d4
0001F366 3828 000C                  		move.w	obY(a0),d4
0001F36A 0644 0050                  		addi.w	#$50,d4
0001F36E 88FC 0018                  		divu.w	#$18,d4
0001F372 C8FC 0080                  		mulu.w	#$80,d4
0001F376 D3C4                       		adda.l	d4,a1
0001F378 7800                       		moveq	#0,d4
0001F37A 3828 0008                  		move.w	obX(a0),d4
0001F37E 0644 0020                  		addi.w	#$20,d4
0001F382 88FC 0018                  		divu.w	#$18,d4
0001F386 D2C4                       		adda.w	d4,a1
0001F388 1811                       		move.b	(a1),d4
0001F38A 6600                       		bne.s	Obj09_ChkCont
0001F38C 4A28 003A                  		tst.b	$3A(a0)
0001F390 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001F394 7800                       		moveq	#0,d4
0001F396 4E75                       		rts	
0001F398                            ; ===========================================================================
0001F398                            
0001F398                            Obj09_ChkCont:
0001F398 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001F39C 6600                       		bne.s	Obj09_Chk1Up
0001F39E 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001F3A2 6600                       		bne.s	Obj09_GetCont
0001F3A4 14BC 0001                  		move.b	#1,(a2)
0001F3A8 2549 0004                  		move.l	a1,4(a2)
0001F3AC                            
0001F3AC                            Obj09_GetCont:
0001F3AC 4EB9 0000 B642             		jsr	(CollectRing).l
0001F3B2 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; check if you have 50 rings
0001F3B8 6500                       		bcs.s	Obj09_NoCont
0001F3BA 08F8 0000 FE1B             		bset	#0,(v_lifecount).w
0001F3C0 6600                       		bne.s	Obj09_NoCont
0001F3C2 5238 FE18                  		addq.b	#1,(v_continues).w ; add 1 to number of continues
0001F3D0                            
0001F3D0                            Obj09_NoCont:
0001F3D0 7800                       		moveq	#0,d4
0001F3D2 4E75                       		rts	
0001F3D4                            ; ===========================================================================
0001F3D4                            
0001F3D4                            Obj09_Chk1Up:
0001F3D4 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001F3D8 6600                       		bne.s	Obj09_ChkEmer
0001F3DA 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001F3DE 6600                       		bne.s	Obj09_Get1Up
0001F3E0 14BC 0003                  		move.b	#3,(a2)
0001F3E4 2549 0004                  		move.l	a1,4(a2)
0001F3E8                            
0001F3E8                            Obj09_Get1Up:
0001F3E8 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to number of lives
0001F3EC 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0001F3FA 7800                       		moveq	#0,d4
0001F3FC 4E75                       		rts	
0001F3FE                            ; ===========================================================================
0001F3FE                            
0001F3FE                            Obj09_ChkEmer:
0001F3FE 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001F402 6500                       		bcs.s	Obj09_ChkGhost
0001F404 0C04 0040                  		cmpi.b	#$40,d4
0001F408 6200                       		bhi.s	Obj09_ChkGhost
0001F40A 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001F40E 6600                       		bne.s	Obj09_GetEmer
0001F410 14BC 0005                  		move.b	#5,(a2)
0001F414 2549 0004                  		move.l	a1,4(a2)
0001F418                            
0001F418                            Obj09_GetEmer:
0001F418 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0001F41E 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001F420 0404 003B                  		subi.b	#$3B,d4
0001F424 7000                       		moveq	#0,d0
0001F426 1038 FE57                  		move.b	(v_emeralds).w,d0
0001F42A 45F8 FE58                  		lea	(v_emldlist).w,a2
0001F42E 1584 0000                  		move.b	d4,(a2,d0.w)
0001F432 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001F436                            
0001F436                            Obj09_NoEmer:
0001F440 7800                       		moveq	#0,d4
0001F442 4E75                       		rts	
0001F444                            ; ===========================================================================
0001F444                            
0001F444                            Obj09_ChkGhost:
0001F444 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001F448 6600                       		bne.s	Obj09_ChkGhostTag
0001F44A 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001F450                            
0001F450                            Obj09_ChkGhostTag:
0001F450 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001F454 6600                       		bne.s	Obj09_NoGhost
0001F456 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001F45C 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001F45E 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001F464                            
0001F464                            Obj09_NoGhost:
0001F464 78FF                       		moveq	#-1,d4
0001F466 4E75                       		rts	
0001F468                            ; ===========================================================================
0001F468                            
0001F468                            Obj09_MakeGhostSolid:
0001F468 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001F46E 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001F470 43F9 00FF 1020             		lea	($FF1020).l,a1
0001F476 723F                       		moveq	#$3F,d1
0001F478                            
0001F478                            Obj09_GhostLoop2:
0001F478 743F                       		moveq	#$3F,d2
0001F47A                            
0001F47A                            Obj09_GhostLoop:
0001F47A 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001F47E 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001F480 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001F484                            
0001F484                            Obj09_NoReplace:
0001F484 5249                       		addq.w	#1,a1
0001F486 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001F48A 43E9 0040                  		lea	$40(a1),a1
0001F48E 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001F492                            
0001F492                            Obj09_GhostNotSolid:
0001F492 4228 003A                  		clr.b	$3A(a0)
0001F496 7800                       		moveq	#0,d4
0001F498 4E75                       		rts	
0001F49A                            ; End of function Obj09_ChkItems
0001F49A                            
0001F49A                            
0001F49A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F49A                            
0001F49A                            
0001F49A                            Obj09_ChkItems2:
0001F49A 1028 0030                  		move.b	$30(a0),d0
0001F49E 6600                       		bne.s	Obj09_ChkBumper
0001F4A0 5328 0036                  		subq.b	#1,$36(a0)
0001F4A4 6A00                       		bpl.s	loc_1BEA0
0001F4A6 117C 0000 0036             		move.b	#0,$36(a0)
0001F4AC                            
0001F4AC                            loc_1BEA0:
0001F4AC 5328 0037                  		subq.b	#1,$37(a0)
0001F4B0 6A00                       		bpl.s	locret_1BEAC
0001F4B2 117C 0000 0037             		move.b	#0,$37(a0)
0001F4B8                            
0001F4B8                            locret_1BEAC:
0001F4B8 4E75                       		rts	
0001F4BA                            ; ===========================================================================
0001F4BA                            
0001F4BA                            Obj09_ChkBumper:
0001F4BA 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001F4BE 6600                       		bne.s	Obj09_GOAL
0001F4C0 2228 0032                  		move.l	$32(a0),d1
0001F4C4 0481 00FF 0001             		subi.l	#$FF0001,d1
0001F4CA 3401                       		move.w	d1,d2
0001F4CC 0241 007F                  		andi.w	#$7F,d1
0001F4D0 C2FC 0018                  		mulu.w	#$18,d1
0001F4D4 0441 0014                  		subi.w	#$14,d1
0001F4D8 EE4A                       		lsr.w	#7,d2
0001F4DA 0242 007F                  		andi.w	#$7F,d2
0001F4DE C4FC 0018                  		mulu.w	#$18,d2
0001F4E2 0442 0044                  		subi.w	#$44,d2
0001F4E6 9268 0008                  		sub.w	obX(a0),d1
0001F4EA 9468 000C                  		sub.w	obY(a0),d2
0001F4EE 4EB9 0000 3E34             		jsr	(CalcAngle).l
0001F4F4 4EB9 0000 3BA2             		jsr	(CalcSine).l
0001F4FA C3FC F900                  		muls.w	#-$700,d1
0001F4FE E081                       		asr.l	#8,d1
0001F500 3141 0010                  		move.w	d1,obVelX(a0)
0001F504 C1FC F900                  		muls.w	#-$700,d0
0001F508 E080                       		asr.l	#8,d0
0001F50A 3140 0012                  		move.w	d0,obVelY(a0)
0001F50E 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F514 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001F518 6600                       		bne.s	Obj09_BumpSnd
0001F51A 14BC 0002                  		move.b	#2,(a2)
0001F51E 2028 0032                  		move.l	$32(a0),d0
0001F522 5380                       		subq.l	#1,d0
0001F524 2540 0004                  		move.l	d0,4(a2)
0001F528                            
0001F528                            Obj09_BumpSnd:
0001F532                            ; ===========================================================================
0001F532                            
0001F532                            Obj09_GOAL:
0001F532 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001F536 6600                       		bne.s	Obj09_UPblock
0001F538 5428 0024                  		addq.b	#2,obRoutine(a0) ; run routine "Obj09_ExitStage"
0001F546 4E75                       		rts	
0001F548                            ; ===========================================================================
0001F548                            
0001F548                            Obj09_UPblock:
0001F548 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001F54C 6600                       		bne.s	Obj09_DOWNblock
0001F54E 4A28 0036                  		tst.b	$36(a0)
0001F552 6600 0000                  		bne.w	Obj09_NoGlass
0001F556 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F55C 0838 0006 F783             		btst	#6,($FFFFF783).w
0001F562 6700                       		beq.s	Obj09_UPsnd
0001F564 E1F8 F782                  		asl	(v_ssrotate).w	; increase stage rotation speed
0001F568 2268 0032                  		movea.l	$32(a0),a1
0001F56C 5389                       		subq.l	#1,a1
0001F56E 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001F572                            
0001F572                            Obj09_UPsnd:
0001F57C                            ; ===========================================================================
0001F57C                            
0001F57C                            Obj09_DOWNblock:
0001F57C 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001F580 6600                       		bne.s	Obj09_Rblock
0001F582 4A28 0036                  		tst.b	$36(a0)
0001F586 6600 0000                  		bne.w	Obj09_NoGlass
0001F58A 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F590 0838 0006 F783             		btst	#6,(v_ssrotate+1).w
0001F596 6600                       		bne.s	Obj09_DOWNsnd
0001F598 E0F8 F782                  		asr	(v_ssrotate).w	; reduce stage rotation speed
0001F59C 2268 0032                  		movea.l	$32(a0),a1
0001F5A0 5389                       		subq.l	#1,a1
0001F5A2 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001F5A6                            
0001F5A6                            Obj09_DOWNsnd:
0001F5B0                            ; ===========================================================================
0001F5B0                            
0001F5B0                            Obj09_Rblock:
0001F5B0 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001F5B4 6600                       		bne.s	Obj09_ChkGlass
0001F5B6 4A28 0037                  		tst.b	$37(a0)
0001F5BA 6600 0000                  		bne.w	Obj09_NoGlass
0001F5BE 117C 001E 0037             		move.b	#$1E,$37(a0)
0001F5C4 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001F5C8 6600                       		bne.s	Obj09_RevStage
0001F5CA 14BC 0004                  		move.b	#4,(a2)
0001F5CE 2028 0032                  		move.l	$32(a0),d0
0001F5D2 5380                       		subq.l	#1,d0
0001F5D4 2540 0004                  		move.l	d0,4(a2)
0001F5D8                            
0001F5D8                            Obj09_RevStage:
0001F5D8 4478 F782                  		neg.w	(v_ssrotate).w	; reverse stage rotation
0001F5E6                            ; ===========================================================================
0001F5E6                            
0001F5E6                            Obj09_ChkGlass:
0001F5E6 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001F5EA 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001F5EC 0C00 002E                  		cmpi.b	#$2E,d0
0001F5F0 6700                       		beq.s	Obj09_Glass
0001F5F2 0C00 002F                  		cmpi.b	#$2F,d0
0001F5F6 6700                       		beq.s	Obj09_Glass
0001F5F8 0C00 0030                  		cmpi.b	#$30,d0
0001F5FC 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001F5FE                            
0001F5FE                            Obj09_Glass:
0001F5FE 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001F602 6600                       		bne.s	Obj09_GlassSnd
0001F604 14BC 0006                  		move.b	#6,(a2)
0001F608 2268 0032                  		movea.l	$32(a0),a1
0001F60C 5389                       		subq.l	#1,a1
0001F60E 2549 0004                  		move.l	a1,4(a2)
0001F612 1011                       		move.b	(a1),d0
0001F614 5200                       		addq.b	#1,d0		; change glass type when touched
0001F616 0C00 0030                  		cmpi.b	#$30,d0
0001F61A 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001F61C 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001F61E                            
0001F61E                            Obj09_GlassUpdate:
0001F61E 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001F622                            
0001F622                            Obj09_GlassSnd:
0001F62C                            ; ===========================================================================
0001F62C                            
0001F62C                            Obj09_NoGlass:
0001F62C 4E75                       		rts	
0001F62E                            ; End of function Obj09_ChkItems2
0001F62E                            ; End of function Obj09_ChkItems2
0001F62E                            
0001F62E                            		include	"_incObj\10.asm"
0001F62E                            ; ---------------------------------------------------------------------------
0001F62E                            ; Object 10 - After-Image
0001F62E                            ; ---------------------------------------------------------------------------
0001F62E                            
0001F62E                            Obj10:
0001F62E 0C38 0018 D01C                   cmpi.b   #id_Death,(v_player+obAnim).w   ; is Sonic using the death animation?
0001F634 6700 0000                        beq.w   AfterimageEnd      ; if yes, delete the After Image
0001F638                            
0001F638 7000                             moveq   #0,d0
0001F63A 1028 0024                        move.b   obRoutine(a0),d0
0001F63E 323B 0000                        move.w   Afterimage_Index(pc,d0.w),d1
0001F642 4EFB 1000                        jmp	Afterimage_Index(pc,d1.w)
0001F646                            
0001F646                            ; ===========================================================================
0001F646                            ;           Change the length by moving around the "No Afterimage" and "After Image Start/ After Image L Priority" sections.
0001F646                            ; ===========================================================================
0001F646                            Afterimage_Index:
0001F646 0000                             dc.w NoAfterImage-Afterimage_Index
0001F648 0000                             dc.w NoAfterImage-Afterimage_Index
0001F64A 0000                             dc.w NoAfterImage-Afterimage_Index
0001F64C 0000                             dc.w AfterimageStart-Afterimage_Index
0001F64E 0000                             dc.w NoAfterImage-Afterimage_Index
0001F650 0000                             dc.w NoAfterImage-Afterimage_Index
0001F652 0000                             dc.w NoAfterImage-Afterimage_Index
0001F654 0000                             dc.w AfterimageLPrio-Afterimage_Index
0001F656 0000                             dc.w AfterimageEnd-Afterimage_Index
0001F658                            ; ===========================================================================
0001F658                            NoAfterImage:
0001F658 5428 0024                        addq.b   #2,obRoutine(a0)         ; go to next item of index, at the next frame
0001F65C 4E75                             rts
0001F65E                            ; ===========================================================================
0001F65E                            AfterimageStart:
0001F65E 117C 0002 0018                   move.b   #2,obPriority(a0)         ; set sprite priority to 2
0001F664 6000                             bra.s   Afterimage_Show
0001F666                            ; ===========================================================================
0001F666                            AfterimageLPrio:
0001F666 5228 0018                        addq.b   #1,obPriority(a0)         ; set a lower sprite priority
0001F66A                            ; ===========================================================================
0001F66A                            Afterimage_Show:
0001F66A 5428 0024                        addq.b   #2,obRoutine(a0)            ; go to next item of index
0001F66E 4EB9 0000 3B7C                   jsr   (RandomNumber).l         ; get a random number
0001F674 0200 0003                        andi.b   #3,d0               ; get a number equal or lower than 2 (0 until 2)
0001F678 6600                             bne.s   AfterimageException   ; if is not 0, branch
0001F67A 4E75                             rts                        ; if it is 0, then don't show the after-image
0001F67C                            
0001F67C                            AfterimageException:
0001F67C 3178 D002 0002                   move.w   (v_player+obGfx).w,obGfx(a0)      ; copy Sonic map to after-image map
0001F682 1178 D001 0001                    move.b   (v_player+obRender).w,obRender(a0)      ; copy Sonic frame infos (horizontal/vertical mirror, coordinate system......)
0001F688 2178 D01A 001A                    move.l   (v_player+obFrame).w,obFrame(a0)   ; copy the Sonic animation frame
0001F68E 4EF9 0000 F4BA                   jmp   DisplaySprite
0001F694                            ; ===========================================================================
0001F694                            AfterimageEnd:
0001F694 4EF9 0000 F4FA                   jmp   DeleteObject
0001F694 4EF9 0000 F4FA                   jmp   DeleteObject
0001F69A                            
0001F69A                            		include	"_inc\AnimateLevelGfx.asm"
0001F69A                            ; ---------------------------------------------------------------------------
0001F69A                            ; Subroutine to	animate	level graphics
0001F69A                            ; ---------------------------------------------------------------------------
0001F69A                            
0001F69A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F69A                            
0001F69A                            
0001F69A                            AnimateLevelGfx:
0001F69A 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0001F69E 6600                       		bne.s	@ispaused	; if yes, branch
0001F6A0 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001F6A6 6100 0000                  		bsr.w	AniArt_GiantRing
0001F6AA 7000                       		moveq	#0,d0
0001F6AC 1038 FE10                  		move.b	(v_zone).w,d0
0001F6B0 D040                       		add.w	d0,d0
0001F6B2 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001F6B6 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001F6BA                            
0001F6BA                            	@ispaused:
0001F6BA 4E75                       		rts	
0001F6BC                            
0001F6BC                            ; ===========================================================================
0001F6BC 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001F6C0 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001F6C4 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001F6C8 0000                       		dc.w AniArt_Ending-AniArt_Index
0001F6CA                            ; ===========================================================================
0001F6CA                            ; ---------------------------------------------------------------------------
0001F6CA                            ; Animated pattern routine - Green Hill
0001F6CA                            ; ---------------------------------------------------------------------------
0001F6CA                            
0001F6CA                            AniArt_GHZ:
0001F6CA                            
0001F6CA                            AniArt_GHZ_Waterfall:
0001F6CA                            
0001F6CA =00000008                  @size:		equ 8	; number of tiles per frame
0001F6CA                            
0001F6CA 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F6CE 6A00                       		bpl.s	AniArt_GHZ_Bigflower ; branch if not 0
0001F6D0                            
0001F6D0 11FC 0005 F7B1             		move.b	#5,(v_lani0_time).w ; time to display each frame
0001F6D6 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001F6DC 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F6E0 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F6E4 0240 0001                  		andi.w	#1,d0		; there are only 2 frames
0001F6E8 6700                       		beq.s	@isframe0	; branch if frame 0
0001F6EA 43E9 0100                  		lea	@size*$20(a1),a1 ; use graphics for frame 1
0001F6EE                            
0001F6EE                            	@isframe0:
0001F6F8 323C 0007                  		move.w	#@size-1,d1	; number of 8x8	tiles
0001F6FC 6000 0000                  		bra.w	LoadTiles
0001F700                            ; ===========================================================================
0001F700                            
0001F700                            AniArt_GHZ_Bigflower:
0001F700                            
0001F700 =00000010                  @size:		equ 16	; number of tiles per frame
0001F700                            
0001F700 5338 F7B3                  		subq.b	#1,(v_lani1_time).w
0001F704 6A00                       		bpl.s	AniArt_GHZ_Smallflower
0001F706                            
0001F706 11FC 000F F7B3             		move.b	#$F,(v_lani1_time).w
0001F70C 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F712 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F716 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w
0001F71A 0240 0001                  		andi.w	#1,d0
0001F71E 6700                       		beq.s	@isframe0
0001F720 43E9 0200                  		lea	@size*$20(a1),a1
0001F724                            
0001F724                            	@isframe0:
0001F72E 323C 000F                  		move.w	#@size-1,d1
0001F732 6000 0000                  		bra.w	LoadTiles
0001F736                            ; ===========================================================================
0001F736                            
0001F736                            AniArt_GHZ_Smallflower:
0001F736                            
0001F736 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F736                            
0001F736 5338 F7B5                  		subq.b	#1,(v_lani2_time).w
0001F73A 6A00                       		bpl.s	@end
0001F73C                            
0001F73C 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F742 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F746 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F74A 0240 0003                  		andi.w	#3,d0		; there are 4 frames
0001F74E 103B 0000                  		move.b	@sequence(pc,d0.w),d0
0001F752 0800 0000                  		btst	#0,d0		; is frame 0 or 2? (actual frame, not frame counter)
0001F756 6600                       		bne.s	@isframe1	; if not, branch
0001F758 11FC 007F F7B5             		move.b	#$7F,(v_lani2_time).w ; set longer duration for frames 0 and 2
0001F75E                            
0001F75E                            	@isframe1:
0001F75E EF48                       		lsl.w	#7,d0		; multiply frame num by $80
0001F760 3200                       		move.w	d0,d1
0001F762 D040                       		add.w	d0,d0
0001F764 D041                       		add.w	d1,d0		; multiply that by 3 (i.e. frame num times 12 * $20)
0001F770 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F776 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F77A 323C 000B                  		move.w	#@size-1,d1
0001F77E 6100 0000                  		bsr.w	LoadTiles
0001F782                            
0001F782                            @end:
0001F782 4E75                       		rts	
0001F784                            
0001F784 0001 0201                  @sequence:	dc.b 0,	1, 2, 1
0001F788                            ; ===========================================================================
0001F788                            ; ---------------------------------------------------------------------------
0001F788                            ; Animated pattern routine - Marble
0001F788                            ; ---------------------------------------------------------------------------
0001F788                            
0001F788                            AniArt_MZ:
0001F788                            
0001F788                            AniArt_MZ_Lava:
0001F788                            
0001F788 =00000008                  @size:		equ 8	; number of tiles per frame
0001F788                            
0001F788 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F78C 6A00                       		bpl.s	AniArt_MZ_Magma	; branch if not 0
0001F78E                            
0001F78E 11FC 0011 F7B1             		move.b	#$11,(v_lani0_time).w ; time to display each frame
0001F794 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001F79A 7000                       		moveq	#0,d0
0001F79C 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F7A0 5200                       		addq.b	#1,d0		; increment frame counter
0001F7A2 0C00 0003                  		cmpi.b	#3,d0		; there are 3 frames
0001F7A6 6600                       		bne.s	@frame01or2	; branch if frame 0, 1 or 2
0001F7A8 7000                       		moveq	#0,d0
0001F7AA                            
0001F7AA                            	@frame01or2:
0001F7AA 11C0 F7B0                  		move.b	d0,(v_lani0_frame).w
0001F7AE C0FC 0100                  		mulu.w	#@size*$20,d0
0001F7B2 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F7BE 323C 0007                  		move.w	#@size-1,d1
0001F7C2 6100 0000                  		bsr.w	LoadTiles
0001F7C6                            
0001F7C6                            AniArt_MZ_Magma:
0001F7C6 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F7CA 6A00                       		bpl.s	AniArt_MZ_Torch	; branch if not 0
0001F7CC                            		
0001F7CC 11FC 0001 F7B3             		move.b	#1,(v_lani1_time).w ; time between each gfx change
0001F7D2 7000                       		moveq	#0,d0
0001F7D4 1038 F7B0                  		move.b	(v_lani0_frame).w,d0 ; get surface lava frame number
0001F7D8 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load magma gfx
0001F7DE EE58                       		ror.w	#7,d0		; multiply frame num by $200
0001F7E0 D8C0                       		adda.w	d0,a4		; jump to appropriate tile
0001F7EC 7600                       		moveq	#0,d3
0001F7EE 1638 F7B2                  		move.b	(v_lani1_frame).w,d3
0001F7F2 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter (unused)
0001F7F6 1638 FE68                  		move.b	(v_oscillate+$A).w,d3 ; get oscillating value
0001F7FA 343C 0003                  		move.w	#3,d2
0001F7FE                            
0001F7FE                            	@loop:
0001F7FE 3003                       		move.w	d3,d0
0001F800 D040                       		add.w	d0,d0
0001F802 0240 001E                  		andi.w	#$1E,d0
0001F806 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001F80C 3033 0000                  		move.w	(a3,d0.w),d0
0001F810 47F3 0000                  		lea	(a3,d0.w),a3
0001F814 224C                       		movea.l	a4,a1
0001F816 323C 001F                  		move.w	#$1F,d1
0001F81A 4E93                       		jsr	(a3)
0001F81C 5843                       		addq.w	#4,d3
0001F81E 51CA FFDE                  		dbf	d2,@loop
0001F822 4E75                       		rts	
0001F824                            ; ===========================================================================
0001F824                            
0001F824                            AniArt_MZ_Torch:
0001F824                            
0001F824 =00000006                  @size:		equ 6	; number of tiles per frame
0001F824                            
0001F824 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F828 6A00 0000                  		bpl.w	@end		; branch if not 0
0001F82C                            		
0001F82C 11FC 0004 F7B5             		move.b	#4,(v_lani2_time).w ; time to display each frame
0001F832 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001F838 7000                       		moveq	#0,d0
0001F83A 1038 F7B6                  		move.b	(v_lani3_frame).w,d0
0001F83E 5238 F7B6                  		addq.b	#1,(v_lani3_frame).w ; increment frame counter
0001F842 0238 0003 F7B6             		andi.b	#3,(v_lani3_frame).w ; there are 3 frames
0001F848 C0FC 00C0                  		mulu.w	#@size*$20,d0
0001F84C D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F858 323C 0005                  		move.w	#@size-1,d1
0001F85C 6000 0000                  		bra.w	LoadTiles
0001F860                            
0001F860                            @end:
0001F860 4E75                       		rts	
0001F862                            ; ===========================================================================
0001F862                            ; ---------------------------------------------------------------------------
0001F862                            ; Animated pattern routine - Scrap Brain
0001F862                            ; ---------------------------------------------------------------------------
0001F862                            
0001F862                            AniArt_SBZ:
0001F862                            
0001F862 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F862                            
0001F862 4A38 F7B4                  		tst.b	(v_lani2_frame).w
0001F866 6700                       		beq.s	@smokepuff	; branch if counter hits 0
0001F868                            		
0001F868 5338 F7B4                  		subq.b	#1,(v_lani2_frame).w ; decrement counter
0001F86C 6000                       		bra.s	@chk_smokepuff2
0001F86E                            ; ===========================================================================
0001F86E                            
0001F86E                            @smokepuff:
0001F86E 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F872 6A00                       		bpl.s	@chk_smokepuff2 ; branch if not 0
0001F874                            		
0001F874 11FC 0007 F7B1             		move.b	#7,(v_lani0_time).w ; time to display each frame
0001F87A 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F88A 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F88E 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F892 0240 0007                  		andi.w	#7,d0
0001F896 6700                       		beq.s	@untilnextpuff	; branch if frame 0
0001F898 5340                       		subq.w	#1,d0
0001F89A C0FC 0180                  		mulu.w	#@size*$20,d0
0001F89E 43F1 0000                  		lea	(a1,d0.w),a1
0001F8A2 323C 000B                  		move.w	#@size-1,d1
0001F8A6 6000 0000                  		bra.w	LoadTiles
0001F8AA                            ; ===========================================================================
0001F8AA                            
0001F8AA                            @untilnextpuff:
0001F8AA 11FC 00B4 F7B4             		move.b	#180,(v_lani2_frame).w ; time between smoke puffs (3 seconds)
0001F8B0                            
0001F8B0                            @clearsky:
0001F8B0 323C 0005                  		move.w	#(@size/2)-1,d1
0001F8B4 6100 0000                  		bsr.w	LoadTiles
0001F8B8 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001F8BE 323C 0005                  		move.w	#(@size/2)-1,d1
0001F8C2 6000 0000                  		bra.w	LoadTiles	; load blank tiles for no smoke puff
0001F8C6                            ; ===========================================================================
0001F8C6                            
0001F8C6                            @chk_smokepuff2:
0001F8C6 4A38 F7B5                  		tst.b	(v_lani2_time).w
0001F8CA 6700                       		beq.s	@smokepuff2	; branch if counter hits 0
0001F8CC                            		
0001F8CC 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement counter
0001F8D0 6000                       		bra.s	@end
0001F8D2                            ; ===========================================================================
0001F8D2                            
0001F8D2                            @smokepuff2:
0001F8D2 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F8D6 6A00                       		bpl.s	@end		; branch if not 0
0001F8D8                            		
0001F8D8 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w ; time to display each frame
0001F8DE 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F8EE 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F8F2 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F8F6 0240 0007                  		andi.w	#7,d0
0001F8FA 6700                       		beq.s	@untilnextpuff2	; branch if frame 0
0001F8FC 5340                       		subq.w	#1,d0
0001F8FE C0FC 0180                  		mulu.w	#@size*$20,d0
0001F902 43F1 0000                  		lea	(a1,d0.w),a1
0001F906 323C 000B                  		move.w	#@size-1,d1
0001F90A 6000 0000                  		bra.w	LoadTiles
0001F90E                            ; ===========================================================================
0001F90E                            
0001F90E                            @untilnextpuff2:
0001F90E 11FC 0078 F7B5             		move.b	#120,(v_lani2_time).w ; time between smoke puffs (2 seconds)
0001F914 609A                       		bra.s	@clearsky
0001F916                            ; ===========================================================================
0001F916                            
0001F916                            @end:
0001F916 4E75                       		rts	
0001F918                            ; ===========================================================================
0001F918                            ; ---------------------------------------------------------------------------
0001F918                            ; Animated pattern routine - ending sequence
0001F918                            ; ---------------------------------------------------------------------------
0001F918                            
0001F918                            AniArt_Ending:
0001F918                            
0001F918                            AniArt_Ending_BigFlower:
0001F918                            
0001F918 =00000010                  @size:		equ 16	; number of tiles per frame
0001F918                            
0001F918 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F91C 6A00                       		bpl.s	AniArt_Ending_SmallFlower ; branch if not 0
0001F91E                            		
0001F91E 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w
0001F924 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F92A 45F8 9400                  		lea	($FFFF9400).w,a2 ; load 2nd big flower from RAM
0001F92E 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F932 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F936 0240 0001                  		andi.w	#1,d0		; only 2 frames
0001F93A 6700                       		beq.s	@isframe0	; branch if frame 0
0001F93C 43E9 0200                  		lea	@size*$20(a1),a1
0001F940 45EA 0200                  		lea	@size*$20(a2),a2
0001F944                            
0001F944                            	@isframe0:
0001F94E 323C 000F                  		move.w	#@size-1,d1
0001F952 6100 0000                  		bsr.w	LoadTiles
0001F956 224A                       		movea.l	a2,a1
0001F962 323C 000F                  		move.w	#@size-1,d1
0001F966 6000 0000                  		bra.w	LoadTiles
0001F96A                            ; ===========================================================================
0001F96A                            
0001F96A                            AniArt_Ending_SmallFlower:
0001F96A                            
0001F96A =0000000C                  @size:		equ 12	; number of tiles per frame
0001F96A                            
0001F96A 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F96E 6A00                       		bpl.s	AniArt_Ending_Flower3 ; branch if not 0
0001F970                            		
0001F970 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F976 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F97A 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F97E 0240 0007                  		andi.w	#7,d0		; max 8 frames
0001F982 103B 0000                  		move.b	@sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F986 EF48                       		lsl.w	#7,d0		; multiply by $80
0001F988 3200                       		move.w	d0,d1
0001F98A D040                       		add.w	d0,d0
0001F98C D041                       		add.w	d1,d0		; multiply by 3
0001F998 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F99E 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F9A2 323C 000B                  		move.w	#@size-1,d1
0001F9A6 6000 0000                  		bra.w	LoadTiles
0001F9AA                            ; ===========================================================================
0001F9AA 0000 0001 0202 0201        @sequence:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001F9B2                            ; ===========================================================================
0001F9B2                            
0001F9B2                            AniArt_Ending_Flower3:
0001F9B2                            
0001F9B2 =00000010                  @size:		equ 16	; number of tiles per frame
0001F9B2                            
0001F9B2 5338 F7B9                  		subq.b	#1,(v_lani4_time).w ; decrement timer
0001F9B6 6A00                       		bpl.s	AniArt_Ending_Flower4 ; branch if not 0
0001F9B8                            		
0001F9B8 11FC 000E F7B9             		move.b	#$E,(v_lani4_time).w
0001F9BE 1038 F7B8                  		move.b	(v_lani4_frame).w,d0
0001F9C2 5238 F7B8                  		addq.b	#1,(v_lani4_frame).w ; increment frame counter
0001F9C6 0240 0003                  		andi.w	#3,d0		; max 4 frames
0001F9CA 103B 0000                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F9CE E148                       		lsl.w	#8,d0		; multiply by $100
0001F9D0 D040                       		add.w	d0,d0		; multiply by 2
0001F9DC 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001F9E0 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F9E4 323C 000F                  		move.w	#@size-1,d1
0001F9E8 6000 0000                  		bra.w	LoadTiles
0001F9EC                            ; ===========================================================================
0001F9EC 0001 0201                  AniArt_Ending_Flower3_sequence:	dc.b 0,	1, 2, 1
0001F9F0                            ; ===========================================================================
0001F9F0                            
0001F9F0                            AniArt_Ending_Flower4:
0001F9F0                            
0001F9F0 =00000010                  @size:		equ 16	; number of tiles per frame
0001F9F0                            
0001F9F0 5338 F7BB                  		subq.b	#1,(v_lani5_time).w ; decrement timer
0001F9F4 6A00                       		bpl.s	@end		; branch if not 0
0001F9F6                            		
0001F9F6 11FC 000B F7BB             		move.b	#$B,(v_lani5_time).w
0001F9FC 1038 F7BA                  		move.b	(v_lani5_frame).w,d0
0001FA00 5238 F7BA                  		addq.b	#1,(v_lani5_frame).w ; increment frame counter
0001FA04 0240 0003                  		andi.w	#3,d0
0001FA08 103B 00E2                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001FA0C E148                       		lsl.w	#8,d0		; multiply by $100
0001FA0E D040                       		add.w	d0,d0		; multiply by 2
0001FA1A 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001FA1E 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001FA22 323C 000F                  		move.w	#@size-1,d1
0001FA26 6000 0000                  		bra.w	LoadTiles
0001FA2A                            ; ===========================================================================
0001FA2A                            
0001FA2A                            @end:
0001FA2A 4E75                       		rts	
0001FA2C                            ; ===========================================================================
0001FA2C                            
0001FA2C                            AniArt_none:
0001FA2C 4E75                       		rts	
0001FA2E                            
0001FA2E                            ; ---------------------------------------------------------------------------
0001FA2E                            ; Subroutine to	transfer graphics to VRAM
0001FA2E                            
0001FA2E                            ; input:
0001FA2E                            ;	a1 = source address
0001FA2E                            ;	a6 = vdp_data_port ($C00000)
0001FA2E                            ;	d1 = number of tiles to load (minus one)
0001FA2E                            ; ---------------------------------------------------------------------------
0001FA2E                            
0001FA2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FA2E                            
0001FA2E                            
0001FA2E                            LoadTiles:
0001FA2E 2C99                       		move.l	(a1)+,(a6)
0001FA30 2C99                       		move.l	(a1)+,(a6)
0001FA32 2C99                       		move.l	(a1)+,(a6)
0001FA34 2C99                       		move.l	(a1)+,(a6)
0001FA36 2C99                       		move.l	(a1)+,(a6)
0001FA38 2C99                       		move.l	(a1)+,(a6)
0001FA3A 2C99                       		move.l	(a1)+,(a6)
0001FA3C 2C99                       		move.l	(a1)+,(a6)
0001FA3E 51C9 FFEE                  		dbf	d1,LoadTiles
0001FA42 4E75                       		rts	
0001FA44                            ; End of function LoadTiles
0001FA44                            
0001FA44                            ; ===========================================================================
0001FA44                            ; ---------------------------------------------------------------------------
0001FA44                            ; Animated pattern routine - more Marble Zone
0001FA44                            ; ---------------------------------------------------------------------------
0001FA44 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001FA48 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001FA4C 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001FA50 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001FA54 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001FA58 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001FA5C 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001FA60 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001FA64                            ; ===========================================================================
0001FA64                            
0001FA64                            loc_1C3EE:
0001FA64 2C91                       		move.l	(a1),(a6)
0001FA66 43E9 0010                  		lea	$10(a1),a1
0001FA6A 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001FA6E 4E75                       		rts	
0001FA70                            ; ===========================================================================
0001FA70                            
0001FA70                            loc_1C3FA:
0001FA70 2029 0002                  		move.l	2(a1),d0
0001FA74 1029 0001                  		move.b	1(a1),d0
0001FA78 E098                       		ror.l	#8,d0
0001FA7A 2C80                       		move.l	d0,(a6)
0001FA7C 43E9 0010                  		lea	$10(a1),a1
0001FA80 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001FA84 4E75                       		rts	
0001FA86                            ; ===========================================================================
0001FA86                            
0001FA86                            loc_1C410:
0001FA86 2CA9 0002                  		move.l	2(a1),(a6)
0001FA8A 43E9 0010                  		lea	$10(a1),a1
0001FA8E 51C9 FFF6                  		dbf	d1,loc_1C410
0001FA92 4E75                       		rts	
0001FA94                            ; ===========================================================================
0001FA94                            
0001FA94                            loc_1C41E:
0001FA94 2029 0004                  		move.l	4(a1),d0
0001FA98 1029 0003                  		move.b	3(a1),d0
0001FA9C E098                       		ror.l	#8,d0
0001FA9E 2C80                       		move.l	d0,(a6)
0001FAA0 43E9 0010                  		lea	$10(a1),a1
0001FAA4 51C9 FFEE                  		dbf	d1,loc_1C41E
0001FAA8 4E75                       		rts	
0001FAAA                            ; ===========================================================================
0001FAAA                            
0001FAAA                            loc_1C434:
0001FAAA 2CA9 0004                  		move.l	4(a1),(a6)
0001FAAE 43E9 0010                  		lea	$10(a1),a1
0001FAB2 51C9 FFF6                  		dbf	d1,loc_1C434
0001FAB6 4E75                       		rts	
0001FAB8                            ; ===========================================================================
0001FAB8                            
0001FAB8                            loc_1C442:
0001FAB8 2029 0006                  		move.l	6(a1),d0
0001FABC 1029 0005                  		move.b	5(a1),d0
0001FAC0 E098                       		ror.l	#8,d0
0001FAC2 2C80                       		move.l	d0,(a6)
0001FAC4 43E9 0010                  		lea	$10(a1),a1
0001FAC8 51C9 FFEE                  		dbf	d1,loc_1C442
0001FACC 4E75                       		rts	
0001FACE                            ; ===========================================================================
0001FACE                            
0001FACE                            loc_1C458:
0001FACE 2CA9 0006                  		move.l	6(a1),(a6)
0001FAD2 43E9 0010                  		lea	$10(a1),a1
0001FAD6 51C9 FFF6                  		dbf	d1,loc_1C458
0001FADA 4E75                       		rts	
0001FADC                            ; ===========================================================================
0001FADC                            
0001FADC                            loc_1C466:
0001FADC 2029 0008                  		move.l	8(a1),d0
0001FAE0 1029 0007                  		move.b	7(a1),d0
0001FAE4 E098                       		ror.l	#8,d0
0001FAE6 2C80                       		move.l	d0,(a6)
0001FAE8 43E9 0010                  		lea	$10(a1),a1
0001FAEC 51C9 FFEE                  		dbf	d1,loc_1C466
0001FAF0 4E75                       		rts	
0001FAF2                            ; ===========================================================================
0001FAF2                            
0001FAF2                            loc_1C47C:
0001FAF2 2CA9 0008                  		move.l	8(a1),(a6)
0001FAF6 43E9 0010                  		lea	$10(a1),a1
0001FAFA 51C9 FFF6                  		dbf	d1,loc_1C47C
0001FAFE 4E75                       		rts	
0001FB00                            ; ===========================================================================
0001FB00                            
0001FB00                            loc_1C48A:
0001FB00 2029 000A                  		move.l	$A(a1),d0
0001FB04 1029 0009                  		move.b	9(a1),d0
0001FB08 E098                       		ror.l	#8,d0
0001FB0A 2C80                       		move.l	d0,(a6)
0001FB0C 43E9 0010                  		lea	$10(a1),a1
0001FB10 51C9 FFEE                  		dbf	d1,loc_1C48A
0001FB14 4E75                       		rts	
0001FB16                            ; ===========================================================================
0001FB16                            
0001FB16                            loc_1C4A0:
0001FB16 2CA9 000A                  		move.l	$A(a1),(a6)
0001FB1A 43E9 0010                  		lea	$10(a1),a1
0001FB1E 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001FB22 4E75                       		rts	
0001FB24                            ; ===========================================================================
0001FB24                            
0001FB24                            loc_1C4AE:
0001FB24 2029 000C                  		move.l	$C(a1),d0
0001FB28 1029 000B                  		move.b	$B(a1),d0
0001FB2C E098                       		ror.l	#8,d0
0001FB2E 2C80                       		move.l	d0,(a6)
0001FB30 43E9 0010                  		lea	$10(a1),a1
0001FB34 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001FB38 4E75                       		rts	
0001FB3A                            ; ===========================================================================
0001FB3A                            
0001FB3A                            loc_1C4C4:
0001FB3A 2CA9 000C                  		move.l	$C(a1),(a6)
0001FB3E 43E9 0010                  		lea	$10(a1),a1
0001FB42 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001FB46 4E75                       		rts	
0001FB48                            ; ===========================================================================
0001FB48                            
0001FB48                            loc_1C4D2:
0001FB48 2029 000C                  		move.l	$C(a1),d0
0001FB4C E198                       		rol.l	#8,d0
0001FB4E 1011                       		move.b	0(a1),d0
0001FB50 2C80                       		move.l	d0,(a6)
0001FB52 43E9 0010                  		lea	$10(a1),a1
0001FB56 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001FB5A 4E75                       		rts	
0001FB5C                            ; ===========================================================================
0001FB5C                            
0001FB5C                            loc_1C4E8:
0001FB5C 3CA9 000E                  		move.w	$E(a1),(a6)
0001FB60 3C91                       		move.w	0(a1),(a6)
0001FB62 43E9 0010                  		lea	$10(a1),a1
0001FB66 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001FB6A 4E75                       		rts	
0001FB6C                            ; ===========================================================================
0001FB6C                            
0001FB6C                            loc_1C4FA:
0001FB6C 2011                       		move.l	0(a1),d0
0001FB6E 1029 000F                  		move.b	$F(a1),d0
0001FB72 E098                       		ror.l	#8,d0
0001FB74 2C80                       		move.l	d0,(a6)
0001FB76 43E9 0010                  		lea	$10(a1),a1
0001FB7A 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001FB7E 4E75                       		rts	
0001FB80                            
0001FB80                            ; ---------------------------------------------------------------------------
0001FB80                            ; Animated pattern routine - giant ring
0001FB80                            ; ---------------------------------------------------------------------------
0001FB80                            
0001FB80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB80                            
0001FB80                            
0001FB80                            AniArt_GiantRing:
0001FB80                            
0001FB80 =0000000E                  @size:		equ 14
0001FB80                            
0001FB80 4A78 F7BE                  		tst.w	(v_gfxbigring).w	; Is there any of the art left to load?
0001FB84 6600                       		bne.s	@loadTiles		; If so, get to work
0001FB86 4E75                       		rts	
0001FB88                            ; ===========================================================================
0001FB88                            ; loc_1C518:
0001FB88                            @loadTiles:
0001FB88 0478 01C0 F7BE             		subi.w	#@size*$20,(v_gfxbigring).w	; Count-down the 14 tiles we're going to load now
0001FB8E 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001FB94 7000                       		moveq	#0,d0
0001FB96 3038 F7BE                  		move.w	(v_gfxbigring).w,d0
0001FB9A 43F1 0000                  		lea	(a1,d0.w),a1
0001FB9E                            		; Turn VRAM address into VDP command
0001FB9E 0640 8000                  		addi.w	#$8000,d0
0001FBA2 E588                       		lsl.l	#2,d0
0001FBA4 E448                       		lsr.w	#2,d0
0001FBA6 0040 4000                  		ori.w	#$4000,d0
0001FBAA 4840                       		swap	d0
0001FBAC                            		; Send VDP command (write to VRAM at address contained in v_gfxbigring)
0001FBAC 2D40 0004                  		move.l	d0,4(a6)
0001FBB0                            
0001FBB0 323C 000D                  		move.w	#@size-1,d1
0001FBB4 6000 FE78                  		bra.w	LoadTiles
0001FBB8                            
0001FBB8                            ; End of function AniArt_GiantRing
0001FBB8                            ; End of function AniArt_GiantRing
0001FBB8                            
0001FBB8                            		include	"_incObj\21 HUD.asm"
0001FBB8                            ; ---------------------------------------------------------------------------
0001FBB8                            ; Object 21 - SCORE, TIME, RINGS
0001FBB8                            ; ---------------------------------------------------------------------------
0001FBB8                            
0001FBB8                            HUD:
0001FBB8 7000                       		moveq	#0,d0
0001FBBA 1028 0024                  		move.b	obRoutine(a0),d0
0001FBBE 323B 0000                  		move.w	HUD_Index(pc,d0.w),d1
0001FBC2 4EFB 1000                  		jmp	HUD_Index(pc,d1.w)
0001FBC6                            ; ===========================================================================
0001FBC6 0000                       HUD_Index:	dc.w HUD_Main-HUD_Index
0001FBC8 0000                       		dc.w HUD_Flash-HUD_Index
0001FBCA                            ; ===========================================================================
0001FBCA                            
0001FBCA                            HUD_Main:	; Routine 0
0001FBCA 5428 0024                  		addq.b	#2,obRoutine(a0)
0001FBCE 317C 0090 0008             		move.w	#$90,obX(a0)
0001FBD4 317C 0108 000A             		move.w	#$108,obScreenY(a0)
0001FBDA 217C 0000 0000 0004        		move.l	#Map_HUD,obMap(a0)
0001FBE2 317C 06CA 0002             		move.w	#$6CA,obGfx(a0)
0001FBE8 117C 0000 0001             		move.b	#0,obRender(a0)
0001FBEE 317C 0000 0018             		move.w	#0,obPriority(a0)
0001FBF4                            
0001FBF4                            HUD_Flash:	; Routine 2
0001FBF4 7000                       		moveq	#0,d0
0001FBF6 0838 0003 FE05             		btst	#3,(v_framebyte).w
0001FBFC 6600                       		bne.s	@display
0001FBFE 4A78 FE20                  		tst.w	(v_rings).w	; do you have any rings?
0001FC02 6600                       		bne.s	@norings	; if so, branch
0001FC04 5240                       		addq.w	#1,d0		; make ring counter flash red
0001FC06                            ; ===========================================================================
0001FC06                            
0001FC06                            @norings:
0001FC06 0C38 0009 FE23             		cmpi.b	#9,(v_timemin).w ; have	9 minutes elapsed?
0001FC0C 6600                       		bne.s	@display	; if not, branch
0001FC0E 5440                       		addq.w	#2,d0		; make time counter flash red
0001FC10                            
0001FC10                            	@display:
0001FC10 1140 001A                  		move.b	d0,obFrame(a0)
0001FC14 4EF9 0000 F4BA             		jmp	DisplaySprite
0001FC14 4EF9 0000 F4BA             		jmp	DisplaySprite
0001FC1A                            Map_HUD:	include	"_maps\HUD.asm"
0001FC1A                            ; ---------------------------------------------------------------------------
0001FC1A                            ; Sprite mappings - SCORE, TIME, RINGS
0001FC1A                            ; ---------------------------------------------------------------------------
0001FC1A                            Map_HUD_internal:
0001FC1A 0000                       		dc.w @allyellow-Map_HUD_internal
0001FC1C 0000                       		dc.w @ringred-Map_HUD_internal
0001FC1E 0000                       		dc.w @timered-Map_HUD_internal
0001FC20 0000                       		dc.w @allred-Map_HUD_internal
0001FC22 0A                         @allyellow:	dc.b $A
0001FC23 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FC28 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FC2D 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FC32 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001FC37 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FC3C A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001FC41 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001FC46 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FC4B 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FC50 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FC55 00                         		dc.b 0
0001FC56 0A                         @ringred:	dc.b $A
0001FC57 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FC5C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FC61 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FC66 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001FC6B 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FC70 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001FC75 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001FC7A A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FC7F 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FC84 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FC89 00                         		dc.b 0
0001FC8A 0A                         @timered:	dc.b $A
0001FC8B 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FC90 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FC95 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FC9A 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001FC9F 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FCA4 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001FCA9 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001FCAE A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FCB3 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FCB8 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FCBD 00                         		dc.b 0
0001FCBE 0A                         @allred:	dc.b $A
0001FCBF 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FCC4 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FCC9 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FCCE 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001FCD3 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FCD8 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001FCDD A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001FCE2 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FCE7 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FCEC 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FCF2 00                         		even
0001FCF2 00                         		even
0001FCF2                            
0001FCF2                            ; ---------------------------------------------------------------------------
0001FCF2                            ; Add points subroutine
0001FCF2                            ; ---------------------------------------------------------------------------
0001FCF2                            
0001FCF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FCF2                            
0001FCF2                            
0001FCF2                            AddPoints:
0001FCF2 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; set score counter to update
0001FCF8                            
0001FCF8                            
0001FCF8 47F8 FE26                  			lea     (v_score).w,a3
0001FCFC D193                       			add.l   d0,(a3)
0001FCFE 223C 000F 423F             			move.l  #999999,d1
0001FD04 B293                       			cmp.l   (a3),d1 ; is score below 999999?
0001FD06 6200                       			bhi.s   @belowmax ; if yes, branch
0001FD08 2681                       			move.l  d1,(a3) ; reset score to 999999
0001FD0A                            		@belowmax:
0001FD0A 2013                       			move.l  (a3),d0
0001FD0C B0B8 FFC0                  			cmp.l   (v_scorelife).w,d0 ; has Sonic got 50000+ points?
0001FD10 6500                       			blo.s   @noextralife ; if not, branch
0001FD12                            
0001FD12 06B8 0000 1388 FFC0        			addi.l  #5000,(v_scorelife).w ; increase requirement by 50000
0001FD1A 4A38 FFF8                  			tst.b   (v_megadrive).w
0001FD1E 6B00                       			bmi.s   @noextralife ; branch if Mega Drive is Japanese
0001FD20 5238 FE12                  			addq.b  #1,(v_lives).w ; give extra life
0001FD24 5238 FE1C                  			addq.b  #1,(f_lifecount).w
0001FD32                            
0001FD32                            @locret_1C6B6:
0001FD32                            @noextralife:
0001FD32 4E75                       		rts	
0001FD34                            ; End of function AddPoints
0001FD34                            
0001FD34                            		include	"_inc\HUD_Update.asm"
0001FD34                            ; ---------------------------------------------------------------------------
0001FD34                            ; Subroutine to	update the HUD
0001FD34                            ; ---------------------------------------------------------------------------
0001FD34                            
0001FD34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD34                            
0001FD34                            hudVRAM:	macro loc
0001FD34                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),d0
0001FD34                            		endm
0001FD34                            
0001FD34                            
0001FD34                            HUD_Update:
0001FD34 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	on?
0001FD38 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001FD3C 4A38 FE1F                  		tst.b	(f_scorecount).w ; does the score need updating?
0001FD40 6700                       		beq.s	@chkrings	; if not, branch
0001FD42                            
0001FD42 4238 FE1F                  		clr.b	(f_scorecount).w
0001FD46 203C 5C80 0003             		hudVRAM	$DC80		; set VRAM address
0001FD4C 2238 FE26                  		move.l	(v_score).w,d1	; load score
0001FD50 6100 0000                  		bsr.w	Hud_Score
0001FD54                            
0001FD54                            	@chkrings:
0001FD54 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FD58 6700                       		beq.s	@chktime	; if not, branch
0001FD5A 6A00                       		bpl.s	@notzero
0001FD5C 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FD60                            
0001FD60                            	@notzero:
0001FD60 4238 FE1D                  		clr.b	(f_ringcount).w
0001FD64 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FD6A 7200                       		moveq	#0,d1
0001FD6C 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FD70 6100 0000                  		bsr.w	Hud_Rings
0001FD74                            
0001FD74                            	@chktime:
0001FD74 4A38 FE1E                  		tst.b	(f_timecount).w	; does the time	need updating?
0001FD78 6700                       		beq.s	@chklives	; if not, branch
0001FD7A 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0001FD7E 6600                       		bne.s	@chklives	; if yes, branch
0001FD80 43F8 FE22                  		lea	(v_time).w,a1
0001FD84 0C99 0009 3B3B             		cmpi.l	#(9*$10000)+(59*$100)+59,(a1)+ ; is the time 9:59:59?
0001FD8A 6700                       		beq.s	TimeOver	; if yes, branch
0001FD8C                            
0001FD8C 5221                       		addq.b	#1,-(a1)	; increment 1/60s counter
0001FD8E 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001FD92 6500                       		bcs.s	@chklives
0001FD94 12BC 0000                  		move.b	#0,(a1)
0001FD98 5221                       		addq.b	#1,-(a1)	; increment second counter
0001FD9A 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001FD9E 6500                       		bcs.s	@updatetime
0001FDA0 12BC 0000                  		move.b	#0,(a1)
0001FDA4 5221                       		addq.b	#1,-(a1)	; increment minute counter
0001FDA6 0C11 0009                  		cmpi.b	#9,(a1)		; check if passed 9
0001FDAA 6500                       		bcs.s	@updatetime
0001FDAC 12BC 0009                  		move.b	#9,(a1)		; keep as 9
0001FDB0                            
0001FDB0                            	@updatetime:
0001FDB0 203C 5E40 0003             		hudVRAM	$DE40
0001FDB6 7200                       		moveq	#0,d1
0001FDB8 1238 FE23                  		move.b	(v_timemin).w,d1 ; load	minutes
0001FDBC 6100 0000                  		bsr.w	Hud_Mins
0001FDC0 203C 5EC0 0003             		hudVRAM	$DEC0
0001FDC6 7200                       		moveq	#0,d1
0001FDC8 1238 FE24                  		move.b	(v_timesec).w,d1 ; load	seconds
0001FDCC 6100 0000                  		bsr.w	Hud_Secs
0001FDD0                            
0001FDD0                            	@chklives:
0001FDD0 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FDD4 6700                       		beq.s	@chkbonus	; if not, branch
0001FDD6 4238 FE1C                  		clr.b	(f_lifecount).w
0001FDDA 6100 0000                  		bsr.w	Hud_Lives
0001FDDE                            
0001FDDE                            	@chkbonus:
0001FDDE 4A38 F7D6                  		tst.b	(f_endactbonus).w ; do time/ring bonus counters need updating?
0001FDE2 6700                       		beq.s	@finish		; if not, branch
0001FDE4 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FDF2 7200                       		moveq	#0,d1
0001FDF4 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FDF8 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FDFC 7200                       		moveq	#0,d1
0001FDFE 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FE02 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FE06                            
0001FE06                            	@finish:
0001FE06 4E75                       		rts	
0001FE08                            ; ===========================================================================
0001FE08                            
0001FE08                            TimeOver:
0001FE08 4238 FE1E                  		clr.b	(f_timecount).w
0001FE0C 41F8 D000                  		lea	(v_player).w,a0
0001FE10 2448                       		movea.l	a0,a2
0001FE12 6100 E82E                  		bsr.w	KillSonic
0001FE16 11FC 0001 FE1A             		move.b	#1,(f_timeover).w
0001FE1C 4E75                       		rts	
0001FE1E                            ; ===========================================================================
0001FE1E                            
0001FE1E                            HudDebug:
0001FE1E 6100 0000                  		bsr.w	HudDb_XY
0001FE22 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FE26 6700                       		beq.s	@objcounter	; if not, branch
0001FE28 6A00                       		bpl.s	@notzero
0001FE2A 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FE2E                            
0001FE2E                            	@notzero:
0001FE2E 4238 FE1D                  		clr.b	(f_ringcount).w
0001FE32 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FE38 7200                       		moveq	#0,d1
0001FE3A 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FE3E 6100 0000                  		bsr.w	Hud_Rings
0001FE42                            
0001FE42                            	@objcounter:
0001FE42 203C 5EC0 0003             		hudVRAM	$DEC0		; set VRAM address
0001FE48 7200                       		moveq	#0,d1
0001FE4A 1238 F62C                  		move.b	(v_spritecount).w,d1 ; load "number of objects" counter
0001FE4E 6100 0000                  		bsr.w	Hud_Secs
0001FE52 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FE56 6700                       		beq.s	@chkbonus	; if not, branch
0001FE58 4238 FE1C                  		clr.b	(f_lifecount).w
0001FE5C 6100 0000                  		bsr.w	Hud_Lives
0001FE60                            
0001FE60                            	@chkbonus:
0001FE60 4A38 F7D6                  		tst.b	(f_endactbonus).w ; does the ring/time bonus counter need updating?
0001FE64 6700                       		beq.s	@finish		; if not, branch
0001FE66 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FE74 7200                       		moveq	#0,d1
0001FE76 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FE7A 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FE7E 7200                       		moveq	#0,d1
0001FE80 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FE84 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FE88                            
0001FE88                            	@finish:
0001FE88 4E75                       		rts	
0001FE8A                            ; End of function HUD_Update
0001FE8A                            
0001FE8A                            ; ---------------------------------------------------------------------------
0001FE8A                            ; Subroutine to	load "0" on the	HUD
0001FE8A                            ; ---------------------------------------------------------------------------
0001FE8A                            
0001FE8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE8A                            
0001FE8A                            
0001FE8A                            Hud_LoadZero:
0001FE94 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001FE98 343C 0002                  		move.w	#2,d2
0001FE9C 6000                       		bra.s	loc_1C83E
0001FE9E                            ; End of function Hud_LoadZero
0001FE9E                            
0001FE9E                            ; ---------------------------------------------------------------------------
0001FE9E                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001FE9E                            ; ---------------------------------------------------------------------------
0001FE9E                            
0001FE9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE9E                            
0001FE9E                            
0001FE9E                            Hud_Base:
0001FE9E 4DF9 00C0 0000             		lea	($C00000).l,a6
0001FEA4 6100 0000                  		bsr.w	Hud_Lives
0001FEB2 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001FEB6 343C 000E                  		move.w	#$E,d2
0001FEBA                            
0001FEBA                            loc_1C83E:
0001FEBA 43FA 0000                  		lea	Art_Hud(pc),a1
0001FEBE                            
0001FEBE                            loc_1C842:
0001FEBE 323C 000F                  		move.w	#$F,d1
0001FEC2 101A                       		move.b	(a2)+,d0
0001FEC4 6B00                       		bmi.s	loc_1C85E
0001FEC6 4880                       		ext.w	d0
0001FEC8 EB48                       		lsl.w	#5,d0
0001FECA 47F1 0000                  		lea	(a1,d0.w),a3
0001FECE                            
0001FECE                            loc_1C852:
0001FECE 2C9B                       		move.l	(a3)+,(a6)
0001FED0 51C9 FFFC                  		dbf	d1,loc_1C852
0001FED4                            
0001FED4                            loc_1C858:
0001FED4 51CA FFE8                  		dbf	d2,loc_1C842
0001FED8                            
0001FED8 4E75                       		rts	
0001FEDA                            ; ===========================================================================
0001FEDA                            
0001FEDA                            loc_1C85E:
0001FEDA 2CBC 0000 0000             		move.l	#0,(a6)
0001FEE0 51C9 FFF8                  		dbf	d1,loc_1C85E
0001FEE4                            
0001FEE4 60EE                       		bra.s	loc_1C858
0001FEE6                            ; End of function Hud_Base
0001FEE6                            
0001FEE6                            ; ===========================================================================
0001FEE6 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001FEF2 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001FEF6                            ; ---------------------------------------------------------------------------
0001FEF6                            ; Subroutine to	load debug mode	numbers	patterns
0001FEF6                            ; ---------------------------------------------------------------------------
0001FEF6                            
0001FEF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FEF6                            
0001FEF6                            
0001FEF6                            HudDb_XY:
0001FF00 3238 F700                  		move.w	(v_screenposx).w,d1 ; load camera x-position
0001FF04 4841                       		swap	d1
0001FF06 3238 D008                  		move.w	(v_player+obX).w,d1 ; load Sonic's x-position
0001FF0A 6100                       		bsr.s	HudDb_XY2
0001FF0C 3238 F704                  		move.w	(v_screenposy).w,d1 ; load camera y-position
0001FF10 4841                       		swap	d1
0001FF12 3238 D00C                  		move.w	(v_player+obY).w,d1 ; load Sonic's y-position
0001FF16                            ; End of function HudDb_XY
0001FF16                            
0001FF16                            
0001FF16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FF16                            
0001FF16                            
0001FF16                            HudDb_XY2:
0001FF16 7C07                       		moveq	#7,d6
0001FF18 43F9 0000 059E             		lea	(Art_Text).l,a1
0001FF1E                            
0001FF1E                            HudDb_XYLoop:
0001FF1E E959                       		rol.w	#4,d1
0001FF20 3401                       		move.w	d1,d2
0001FF22 0242 000F                  		andi.w	#$F,d2
0001FF26 0C42 000A                  		cmpi.w	#$A,d2
0001FF2A 6500                       		bcs.s	loc_1C8B2
0001FF2C 5E42                       		addq.w	#7,d2
0001FF2E                            
0001FF2E                            loc_1C8B2:
0001FF2E EB4A                       		lsl.w	#5,d2
0001FF30 47F1 2000                  		lea	(a1,d2.w),a3
0001FF34 2C9B                       		move.l	(a3)+,(a6)
0001FF36 2C9B                       		move.l	(a3)+,(a6)
0001FF38 2C9B                       		move.l	(a3)+,(a6)
0001FF3A 2C9B                       		move.l	(a3)+,(a6)
0001FF3C 2C9B                       		move.l	(a3)+,(a6)
0001FF3E 2C9B                       		move.l	(a3)+,(a6)
0001FF40 2C9B                       		move.l	(a3)+,(a6)
0001FF42 2C9B                       		move.l	(a3)+,(a6)
0001FF44 4841                       		swap	d1
0001FF46 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001FF4A                            
0001FF4A 4E75                       		rts	
0001FF4C                            ; End of function HudDb_XY2
0001FF4C                            
0001FF4C                            ; ---------------------------------------------------------------------------
0001FF4C                            ; Subroutine to	load rings numbers patterns
0001FF4C                            ; ---------------------------------------------------------------------------
0001FF4C                            
0001FF4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FF4C                            
0001FF4C                            
0001FF4C                            Hud_Rings:
0001FF4C 45F9 0000 0000             		lea	(Hud_100).l,a2
0001FF52 7C02                       		moveq	#2,d6
0001FF54 6000                       		bra.s	Hud_LoadArt
0001FF56                            ; End of function Hud_Rings
0001FF56                            
0001FF56                            ; ---------------------------------------------------------------------------
0001FF56                            ; Subroutine to	load score numbers patterns
0001FF56                            ; ---------------------------------------------------------------------------
0001FF56                            
0001FF56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FF56                            
0001FF56                            
0001FF56                            Hud_Score:
0001FF56 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001FF5C 7C05                       		moveq	#5,d6
0001FF5E                            
0001FF5E                            Hud_LoadArt:
0001FF5E 7800                       		moveq	#0,d4
0001FF60 43FA 0000                  		lea	Art_Hud(pc),a1
0001FF64                            
0001FF64                            Hud_ScoreLoop:
0001FF64 7400                       		moveq	#0,d2
0001FF66 261A                       		move.l	(a2)+,d3
0001FF68                            
0001FF68                            loc_1C8EC:
0001FF68 9283                       		sub.l	d3,d1
0001FF6A 6500                       		bcs.s	loc_1C8F4
0001FF6C 5242                       		addq.w	#1,d2
0001FF6E 60F8                       		bra.s	loc_1C8EC
0001FF70                            ; ===========================================================================
0001FF70                            
0001FF70                            loc_1C8F4:
0001FF70 D283                       		add.l	d3,d1
0001FF72 4A42                       		tst.w	d2
0001FF74 6700                       		beq.s	loc_1C8FE
0001FF76 383C 0001                  		move.w	#1,d4
0001FF7A                            
0001FF7A                            loc_1C8FE:
0001FF7A 4A44                       		tst.w	d4
0001FF7C 6700                       		beq.s	loc_1C92C
0001FF7E ED4A                       		lsl.w	#6,d2
0001FF80 2D40 0004                  		move.l	d0,4(a6)
0001FF84 47F1 2000                  		lea	(a1,d2.w),a3
0001FF88 2C9B                       		move.l	(a3)+,(a6)
0001FF8A 2C9B                       		move.l	(a3)+,(a6)
0001FF8C 2C9B                       		move.l	(a3)+,(a6)
0001FF8E 2C9B                       		move.l	(a3)+,(a6)
0001FF90 2C9B                       		move.l	(a3)+,(a6)
0001FF92 2C9B                       		move.l	(a3)+,(a6)
0001FF94 2C9B                       		move.l	(a3)+,(a6)
0001FF96 2C9B                       		move.l	(a3)+,(a6)
0001FF98 2C9B                       		move.l	(a3)+,(a6)
0001FF9A 2C9B                       		move.l	(a3)+,(a6)
0001FF9C 2C9B                       		move.l	(a3)+,(a6)
0001FF9E 2C9B                       		move.l	(a3)+,(a6)
0001FFA0 2C9B                       		move.l	(a3)+,(a6)
0001FFA2 2C9B                       		move.l	(a3)+,(a6)
0001FFA4 2C9B                       		move.l	(a3)+,(a6)
0001FFA6 2C9B                       		move.l	(a3)+,(a6)
0001FFA8                            
0001FFA8                            loc_1C92C:
0001FFA8 0680 0040 0000             		addi.l	#$400000,d0
0001FFAE 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001FFB2                            
0001FFB2 4E75                       		rts	
0001FFB4                            
0001FFB4                            ; End of function Hud_Score
0001FFB4                            ; End of function Hud_Score
0001FFB4                            
0001FFB4                            ; ---------------------------------------------------------------------------
0001FFB4                            ; Subroutine to	load countdown numbers on the continue screen
0001FFB4                            ; ---------------------------------------------------------------------------
0001FFB4                            
0001FFB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FFB4                            
0001FFB4                            
0001FFB4                            ContScrCounter:
0001FFBE 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001FFC4 45F9 0000 0000             		lea	(Hud_10).l,a2
0001FFCA 7C01                       		moveq	#1,d6
0001FFCC 7800                       		moveq	#0,d4
0001FFCE 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001FFD2                            
0001FFD2                            ContScr_Loop:
0001FFD2 7400                       		moveq	#0,d2
0001FFD4 261A                       		move.l	(a2)+,d3
0001FFD6                            
0001FFD6                            loc_1C95A:
0001FFD6 9283                       		sub.l	d3,d1
0001FFD8 6500                       		blo.s	loc_1C962
0001FFDA 5242                       		addq.w	#1,d2
0001FFDC 60F8                       		bra.s	loc_1C95A
0001FFDE                            ; ===========================================================================
0001FFDE                            
0001FFDE                            loc_1C962:
0001FFDE D283                       		add.l	d3,d1
0001FFE0 ED4A                       		lsl.w	#6,d2
0001FFE2 47F1 2000                  		lea	(a1,d2.w),a3
0001FFE6 2C9B                       		move.l	(a3)+,(a6)
0001FFE8 2C9B                       		move.l	(a3)+,(a6)
0001FFEA 2C9B                       		move.l	(a3)+,(a6)
0001FFEC 2C9B                       		move.l	(a3)+,(a6)
0001FFEE 2C9B                       		move.l	(a3)+,(a6)
0001FFF0 2C9B                       		move.l	(a3)+,(a6)
0001FFF2 2C9B                       		move.l	(a3)+,(a6)
0001FFF4 2C9B                       		move.l	(a3)+,(a6)
0001FFF6 2C9B                       		move.l	(a3)+,(a6)
0001FFF8 2C9B                       		move.l	(a3)+,(a6)
0001FFFA 2C9B                       		move.l	(a3)+,(a6)
0001FFFC 2C9B                       		move.l	(a3)+,(a6)
0001FFFE 2C9B                       		move.l	(a3)+,(a6)
00020000 2C9B                       		move.l	(a3)+,(a6)
00020002 2C9B                       		move.l	(a3)+,(a6)
00020004 2C9B                       		move.l	(a3)+,(a6)
00020006 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0002000A                            
0002000A 4E75                       		rts	
0002000C                            ; End of function ContScrCounter
0002000C                            
0002000C                            ; ===========================================================================
0002000C                            
0002000C                            		include	"_inc\HUD (part 2).asm"
0002000C                            ; ---------------------------------------------------------------------------
0002000C                            ; HUD counter sizes
0002000C                            ; ---------------------------------------------------------------------------
0002000C 0001 86A0                  Hud_100000:	dc.l 100000
00020010 0000 2710                  Hud_10000:	dc.l 10000
00020014 0000 03E8                  Hud_1000:	dc.l 1000
00020018 0000 0064                  Hud_100:	dc.l 100
0002001C 0000 000A                  Hud_10:		dc.l 10
00020020 0000 0001                  Hud_1:		dc.l 1
00020024                            
00020024                            ; ---------------------------------------------------------------------------
00020024                            ; Subroutine to	load time numbers patterns
00020024                            ; ---------------------------------------------------------------------------
00020024                            
00020024                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020024                            
00020024                            
00020024                            Hud_Mins:
00020024 45F9 0002 0020             		lea	(Hud_1).l,a2
0002002A 7C00                       		moveq	#0,d6
0002002C 6000                       		bra.s	loc_1C9BA
0002002E                            ; End of function Hud_Mins
0002002E                            
0002002E                            
0002002E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002002E                            
0002002E                            
0002002E                            Hud_Secs:
0002002E 45F9 0002 001C             		lea	(Hud_10).l,a2
00020034 7C01                       		moveq	#1,d6
00020036                            
00020036                            loc_1C9BA:
00020036 7800                       		moveq	#0,d4
00020038 43FA 0000                  		lea	Art_Hud(pc),a1
0002003C                            
0002003C                            Hud_TimeLoop:
0002003C 7400                       		moveq	#0,d2
0002003E 261A                       		move.l	(a2)+,d3
00020040                            
00020040                            loc_1C9C4:
00020040 9283                       		sub.l	d3,d1
00020042 6500                       		bcs.s	loc_1C9CC
00020044 5242                       		addq.w	#1,d2
00020046 60F8                       		bra.s	loc_1C9C4
00020048                            ; ===========================================================================
00020048                            
00020048                            loc_1C9CC:
00020048 D283                       		add.l	d3,d1
0002004A 4A42                       		tst.w	d2
0002004C 6700                       		beq.s	loc_1C9D6
0002004E 383C 0001                  		move.w	#1,d4
00020052                            
00020052                            loc_1C9D6:
00020052 ED4A                       		lsl.w	#6,d2
00020054 2D40 0004                  		move.l	d0,4(a6)
00020058 47F1 2000                  		lea	(a1,d2.w),a3
0002005C 2C9B                       		move.l	(a3)+,(a6)
0002005E 2C9B                       		move.l	(a3)+,(a6)
00020060 2C9B                       		move.l	(a3)+,(a6)
00020062 2C9B                       		move.l	(a3)+,(a6)
00020064 2C9B                       		move.l	(a3)+,(a6)
00020066 2C9B                       		move.l	(a3)+,(a6)
00020068 2C9B                       		move.l	(a3)+,(a6)
0002006A 2C9B                       		move.l	(a3)+,(a6)
0002006C 2C9B                       		move.l	(a3)+,(a6)
0002006E 2C9B                       		move.l	(a3)+,(a6)
00020070 2C9B                       		move.l	(a3)+,(a6)
00020072 2C9B                       		move.l	(a3)+,(a6)
00020074 2C9B                       		move.l	(a3)+,(a6)
00020076 2C9B                       		move.l	(a3)+,(a6)
00020078 2C9B                       		move.l	(a3)+,(a6)
0002007A 2C9B                       		move.l	(a3)+,(a6)
0002007C 0680 0040 0000             		addi.l	#$400000,d0
00020082 51CE FFB8                  		dbf	d6,Hud_TimeLoop
00020086                            
00020086 4E75                       		rts	
00020088                            ; End of function Hud_Secs
00020088                            
00020088                            ; ---------------------------------------------------------------------------
00020088                            ; Subroutine to	load time/ring bonus numbers patterns
00020088                            ; ---------------------------------------------------------------------------
00020088                            
00020088                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020088                            
00020088                            
00020088                            Hud_TimeRingBonus:
00020088 45F9 0002 0014             		lea	(Hud_1000).l,a2
0002008E 7C03                       		moveq	#3,d6
00020090 7800                       		moveq	#0,d4
00020092 43FA 0000                  		lea	Art_Hud(pc),a1
00020096                            
00020096                            Hud_BonusLoop:
00020096 7400                       		moveq	#0,d2
00020098 261A                       		move.l	(a2)+,d3
0002009A                            
0002009A                            loc_1CA1E:
0002009A 9283                       		sub.l	d3,d1
0002009C 6500                       		bcs.s	loc_1CA26
0002009E 5242                       		addq.w	#1,d2
000200A0 60F8                       		bra.s	loc_1CA1E
000200A2                            ; ===========================================================================
000200A2                            
000200A2                            loc_1CA26:
000200A2 D283                       		add.l	d3,d1
000200A4 4A42                       		tst.w	d2
000200A6 6700                       		beq.s	loc_1CA30
000200A8 383C 0001                  		move.w	#1,d4
000200AC                            
000200AC                            loc_1CA30:
000200AC 4A44                       		tst.w	d4
000200AE 6700                       		beq.s	Hud_ClrBonus
000200B0 ED4A                       		lsl.w	#6,d2
000200B2 47F1 2000                  		lea	(a1,d2.w),a3
000200B6 2C9B                       		move.l	(a3)+,(a6)
000200B8 2C9B                       		move.l	(a3)+,(a6)
000200BA 2C9B                       		move.l	(a3)+,(a6)
000200BC 2C9B                       		move.l	(a3)+,(a6)
000200BE 2C9B                       		move.l	(a3)+,(a6)
000200C0 2C9B                       		move.l	(a3)+,(a6)
000200C2 2C9B                       		move.l	(a3)+,(a6)
000200C4 2C9B                       		move.l	(a3)+,(a6)
000200C6 2C9B                       		move.l	(a3)+,(a6)
000200C8 2C9B                       		move.l	(a3)+,(a6)
000200CA 2C9B                       		move.l	(a3)+,(a6)
000200CC 2C9B                       		move.l	(a3)+,(a6)
000200CE 2C9B                       		move.l	(a3)+,(a6)
000200D0 2C9B                       		move.l	(a3)+,(a6)
000200D2 2C9B                       		move.l	(a3)+,(a6)
000200D4 2C9B                       		move.l	(a3)+,(a6)
000200D6                            
000200D6                            loc_1CA5A:
000200D6 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
000200DA                            
000200DA 4E75                       		rts	
000200DC                            ; ===========================================================================
000200DC                            
000200DC                            Hud_ClrBonus:
000200DC 7A0F                       		moveq	#$F,d5
000200DE                            
000200DE                            Hud_ClrBonusLoop:
000200DE 2CBC 0000 0000             		move.l	#0,(a6)
000200E4 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
000200E8                            
000200E8 60EC                       		bra.s	loc_1CA5A
000200EA                            ; End of function Hud_TimeRingBonus
000200EA                            
000200EA                            ; ---------------------------------------------------------------------------
000200EA                            ; Subroutine to	load uncompressed lives	counter	patterns
000200EA                            ; ---------------------------------------------------------------------------
000200EA                            
000200EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000200EA                            
000200EA                            
000200EA                            Hud_Lives:
000200EA 203C 7BA0 0003             		hudVRAM	$FBA0		; set VRAM address
000200F0 7200                       		moveq	#0,d1
000200F2 1238 FE12                  		move.b	(v_lives).w,d1	; load number of lives
000200F6 45F9 0002 001C             		lea	(Hud_10).l,a2
000200FC 7C01                       		moveq	#1,d6
000200FE 7800                       		moveq	#0,d4
00020100 43FA 0000                  		lea	Art_LivesNums(pc),a1
00020104                            		
00020104                            
00020104                            Hud_LivesLoop:
00020104 2D40 0004                  		move.l	d0,4(a6)
00020108 7400                       		moveq	#0,d2
0002010A 261A                       		move.l	(a2)+,d3
0002010C                            
0002010C                            loc_1CA90:
0002010C 9283                       		sub.l	d3,d1
0002010E 6500                       		bcs.s	loc_1CA98
00020110 5242                       		addq.w	#1,d2
00020112 60F8                       		bra.s	loc_1CA90
00020114                            ; ===========================================================================
00020114                            
00020114                            loc_1CA98:
00020114 D283                       		add.l	d3,d1
00020116 4A42                       		tst.w	d2
00020118 6700                       		beq.s	loc_1CAA2
0002011A 383C 0001                  		move.w	#1,d4
0002011E                            
0002011E                            loc_1CAA2:
0002011E 4A44                       		tst.w	d4
00020120 6700                       		beq.s	Hud_ClrLives
00020122                            
00020122                            loc_1CAA6:
00020122 EB4A                       		lsl.w	#5,d2
00020124 47F1 2000                  		lea	(a1,d2.w),a3
00020128 2C9B                       		move.l	(a3)+,(a6)
0002012A 2C9B                       		move.l	(a3)+,(a6)
0002012C 2C9B                       		move.l	(a3)+,(a6)
0002012E 2C9B                       		move.l	(a3)+,(a6)
00020130 2C9B                       		move.l	(a3)+,(a6)
00020132 2C9B                       		move.l	(a3)+,(a6)
00020134 2C9B                       		move.l	(a3)+,(a6)
00020136 2C9B                       		move.l	(a3)+,(a6)
00020138                            
00020138                            loc_1CABC:
00020138 0680 0040 0000             		addi.l	#$400000,d0
0002013E 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
00020142                            
00020142 4E75                       		rts	
00020144                            ; ===========================================================================
00020144                            
00020144                            Hud_ClrLives:
00020144 4A46                       		tst.w	d6
00020146 67DA                       		beq.s	loc_1CAA6
00020148 7A07                       		moveq	#7,d5
0002014A                            
0002014A                            Hud_ClrLivesLoop:
0002014A 2CBC 0000 0000             		move.l	#0,(a6)
00020150 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
00020154 60E2                       		bra.s	loc_1CABC
00020156                            ; End of function Hud_Lives
00020156                            ; End of function Hud_Lives
00020156                            
00020156                            Art_Hud:	incbin	"artunc\HUD Numbers.bin" ; 8x16 pixel numbers on HUD
00020456                            		even
00020456                            Art_LivesNums:	incbin	"artunc\Lives Counter Numbers.bin" ; 8x8 pixel numbers on lives counter
00020596                            		even
00020596                            
00020596                            		include	"_incObj\DebugMode.asm"
00020596                            ; ---------------------------------------------------------------------------
00020596                            ; When debug mode is currently in use
00020596                            ; ---------------------------------------------------------------------------
00020596                            
00020596                            DebugMode:
00020596 7000                       		moveq	#0,d0
00020598 1038 FE08                  		move.b	(v_debuguse).w,d0
0002059C 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
000205A0 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
000205A4                            ; ===========================================================================
000205A4 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
000205A6 0000                       		dc.w Debug_Action-Debug_Index
000205A8                            ; ===========================================================================
000205A8                            
000205A8                            Debug_Main:	; Routine 0
000205A8 5438 FE08                  		addq.b	#2,(v_debuguse).w
000205AC 31F8 F72C FEF0             		move.w	(v_limittop2).w,(v_limittopdb).w ; buffer level x-boundary
000205B2 31F8 F726 FEF2             		move.w	(v_limitbtm1).w,(v_limitbtmdb).w ; buffer level y-boundary
000205B8 31FC 0000 F72C             		move.w	#0,(v_limittop2).w
000205BE 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
000205C4 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
000205CA 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
000205D0 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
000205D6 117C 0000 001A             		move.b	#0,obFrame(a0)
000205DC 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000205E2 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
000205E8 6600                       		bne.s	@islevel	; if not, branch
000205EA                            
000205EA 31FC 0000 F782             		move.w	#0,(v_ssrotate).w ; stop special stage rotating
000205F0 31FC 0000 F780             		move.w	#0,(v_ssangle).w ; make	special	stage "upright"
000205F6 7006                       		moveq	#6,d0		; use 6th debug	item list
000205F8 6000                       		bra.s	@selectlist
000205FA                            ; ===========================================================================
000205FA                            
000205FA                            @islevel:
000205FA 7000                       		moveq	#0,d0
000205FC 1038 FE10                  		move.b	(v_zone).w,d0
00020600                            
00020600                            @selectlist:
00020600 45F9 0000 0000             		lea	(DebugList).l,a2
00020606 D040                       		add.w	d0,d0
00020608 D4F2 0000                  		adda.w	(a2,d0.w),a2
0002060C 3C1A                       		move.w	(a2)+,d6
0002060E BC38 FE06                  		cmp.b	(v_debugitem).w,d6 ; have you gone past the last item?
00020612 6200                       		bhi.s	@noreset	; if not, branch
00020614 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; back to start of list
0002061A                            
0002061A                            	@noreset:
0002061A 6100 0000                  		bsr.w	Debug_ShowItem
0002061E 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
00020624 11FC 0001 FE0B             		move.b	#1,(v_debugyspeed).w
0002062A                            
0002062A                            Debug_Action:	; Routine 2
0002062A 7006                       		moveq	#6,d0
0002062C 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w
00020632 6700                       		beq.s	@isntlevel
00020634                            
00020634 7000                       		moveq	#0,d0
00020636 1038 FE10                  		move.b	(v_zone).w,d0
0002063A                            
0002063A                            	@isntlevel:
0002063A 45F9 0000 0000             		lea	(DebugList).l,a2
00020640 D040                       		add.w	d0,d0
00020642 D4F2 0000                  		adda.w	(a2,d0.w),a2
00020646 3C1A                       		move.w	(a2)+,d6
00020648 6100 0000                  		bsr.w	Debug_Control
0002064C 4EF9 0000 F4BA             		jmp	(DisplaySprite).l
00020652                            
00020652                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020652                            
00020652                            
00020652                            Debug_Control:
00020652 7800                       		moveq	#0,d4
00020654 323C 0001                  		move.w	#1,d1
00020658 1838 F605                  		move.b	(v_jpadpress1).w,d4
0002065C 0244 000F                  		andi.w	#btnDir,d4	; is up/down/left/right	pressed?
00020660 6600                       		bne.s	@dirpressed	; if yes, branch
00020662                            
00020662 1038 F604                  		move.b	(v_jpadhold1).w,d0
00020666 0240 000F                  		andi.w	#btnDir,d0	; is up/down/left/right	held?
0002066A 6600                       		bne.s	@dirheld	; if yes, branch
0002066C                            
0002066C 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
00020672 11FC 000F FE0B             		move.b	#15,(v_debugyspeed).w
00020678 6000 0000                  		bra.w	Debug_ChgItem
0002067C                            ; ===========================================================================
0002067C                            
0002067C                            @dirheld:
0002067C 5338 FE0A                  		subq.b	#1,(v_debugxspeed).w
00020680 6600                       		bne.s	loc_1D01C
00020682 11FC 0001 FE0A             		move.b	#1,(v_debugxspeed).w
00020688 5238 FE0B                  		addq.b	#1,(v_debugyspeed).w
0002068C 6600                       		bne.s	@dirpressed
0002068E 11FC 00FF FE0B             		move.b	#-1,(v_debugyspeed).w
00020694                            
00020694                            @dirpressed:
00020694 1838 F604                  		move.b	(v_jpadhold1).w,d4
00020698                            
00020698                            loc_1D01C:
00020698 7200                       		moveq	#0,d1
0002069A 1238 FE0B                  		move.b	(v_debugyspeed).w,d1
0002069E 5241                       		addq.w	#1,d1
000206A0 4841                       		swap	d1
000206A2 E881                       		asr.l	#4,d1
000206A4 2428 000C                  		move.l	obY(a0),d2
000206A8 2628 0008                  		move.l	obX(a0),d3
000206AC 0804 0000                  		btst	#bitUp,d4	; is up	being pressed?
000206B0 6700                       		beq.s	loc_1D03C	; if not, branch
000206B2 9481                       		sub.l	d1,d2
000206B4 6400                       		bcc.s	loc_1D03C
000206B6 7400                       		moveq	#0,d2
000206B8                            
000206B8                            loc_1D03C:
000206B8 0804 0001                  		btst	#bitDn,d4	; is down being	pressed?
000206BC 6700                       		beq.s	loc_1D052	; if not, branch
000206BE D481                       		add.l	d1,d2
000206C0 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
000206C6 6500                       		bcs.s	loc_1D052
000206C8 243C 07FF 0000             		move.l	#$7FF0000,d2
000206CE                            
000206CE                            loc_1D052:
000206CE 0804 0002                  		btst	#bitL,d4
000206D2 6700                       		beq.s	loc_1D05E
000206D4 9681                       		sub.l	d1,d3
000206D6 6400                       		bcc.s	loc_1D05E
000206D8 7600                       		moveq	#0,d3
000206DA                            
000206DA                            loc_1D05E:
000206DA 0804 0003                  		btst	#bitR,d4
000206DE 6700                       		beq.s	loc_1D066
000206E0 D681                       		add.l	d1,d3
000206E2                            
000206E2                            loc_1D066:
000206E2 2142 000C                  		move.l	d2,obY(a0)
000206E6 2143 0008                  		move.l	d3,obX(a0)
000206EA                            
000206EA                            Debug_ChgItem:
000206EA 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
000206F0 6700                       		beq.s	@createitem	; if not, branch
000206F2 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000206F8 6700                       		beq.s	@nextitem	; if not, branch
000206FA 5338 FE06                  		subq.b	#1,(v_debugitem).w ; go back 1 item
000206FE 6400                       		bcc.s	@display
00020700 DD38 FE06                  		add.b	d6,(v_debugitem).w
00020704 6000                       		bra.s	@display
00020706                            ; ===========================================================================
00020706                            
00020706                            @nextitem:
00020706 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
0002070C 6700                       		beq.s	@createitem	; if not, branch
0002070E 5238 FE06                  		addq.b	#1,(v_debugitem).w ; go forwards 1 item
00020712 BC38 FE06                  		cmp.b	(v_debugitem).w,d6
00020716 6200                       		bhi.s	@display
00020718 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; loop back to first item
0002071E                            
0002071E                            	@display:
0002071E 6000 0000                  		bra.w	Debug_ShowItem
00020722                            ; ===========================================================================
00020722                            
00020722                            @createitem:
00020722 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
00020728 6700                       		beq.s	@backtonormal	; if not, branch
0002072A 4EB9 0000 FA54             		jsr	(FindFreeObj).l
00020730 6600                       		bne.s	@backtonormal
00020732 3368 0008 0008             		move.w	obX(a0),obX(a1)
00020738 3368 000C 000C             		move.w	obY(a0),obY(a1)
0002073E 12A8 0004                  		move.b	4(a0),0(a1)	; create object
00020742 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00020748 1368 0001 0022             		move.b	obRender(a0),obStatus(a1)
0002074E 0229 007F 0022             		andi.b	#$7F,obStatus(a1)
00020754 7000                       		moveq	#0,d0
00020756 1038 FE06                  		move.b	(v_debugitem).w,d0
0002075A E748                       		lsl.w	#3,d0
0002075C 1372 0004 0028             		move.b	4(a2,d0.w),obSubtype(a1)
00020762 4E75                       		rts	
00020764                            ; ===========================================================================
00020764                            
00020764                            @backtonormal:
00020764 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0002076A 6700                       		beq.s	@stayindebug	; if not, branch
0002076C 7000                       		moveq	#0,d0
0002076E 31C0 FE08                  		move.w	d0,(v_debuguse).w ; deactivate debug mode
00020772 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
0002077A 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
00020780 11C0 D01C                  		move.b	d0,(v_player+obAnim).w
00020784 3140 000A                  		move.w	d0,obX+2(a0)
00020788 3140 000E                  		move.w	d0,obY+2(a0)
0002078C 31F8 FEF0 F72C             		move.w	(v_limittopdb).w,(v_limittop2).w ; restore level boundaries
00020792 31F8 FEF2 F726             		move.w	(v_limitbtmdb).w,(v_limitbtm1).w
00020798 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; are you in the special stage?
0002079E 6600                       		bne.s	@stayindebug	; if not, branch
000207A0                            
000207A0 4278 F780                  		clr.w	(v_ssangle).w
000207A4 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set new level rotation speed
000207AA 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
000207B2 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
000207B8 11FC 0002 D01C             		move.b	#id_Roll,(v_player+obAnim).w
000207BE 08F8 0002 D022             		bset	#2,(v_player+obStatus).w
000207C4 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
000207CA                            
000207CA                            	@stayindebug:
000207CA 4E75                       		rts	
000207CC                            ; End of function Debug_Control
000207CC                            
000207CC                            
000207CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000207CC                            
000207CC                            
000207CC                            Debug_ShowItem:
000207CC 7000                       		moveq	#0,d0
000207CE 1038 FE06                  		move.b	(v_debugitem).w,d0
000207D2 E748                       		lsl.w	#3,d0
000207D4 2172 0000 0004             		move.l	(a2,d0.w),obMap(a0) ; load mappings for item
000207DA 3172 0006 0002             		move.w	6(a2,d0.w),obGfx(a0) ; load VRAM setting for item
000207E0 1172 0005 001A             		move.b	5(a2,d0.w),obFrame(a0) ; load frame number for item
000207E6 4E75                       		rts	
000207E8                            ; End of function Debug_ShowItem
000207E8                            ; End of function Debug_ShowItem
000207E8                            		include	"_inc\DebugList.asm"
000207E8                            ; ---------------------------------------------------------------------------
000207E8                            ; Debug	mode item lists
000207E8                            ; ---------------------------------------------------------------------------
000207E8                            DebugList:
000207E8 0000                       	dc.w @GHZ-DebugList
000207EA 0000                       	dc.w @LZ-DebugList
000207EC 0000                       	dc.w @MZ-DebugList
000207EE 0000                       	dc.w @SLZ-DebugList
000207F0 0000                       	dc.w @SYZ-DebugList
000207F2 0000                       	dc.w @SBZ-DebugList
000207F4 0000                       	dc.w @Ending-DebugList
000207F6                            
000207F6                            dbug:	macro map,object,subtype,frame,vram
000207F6                            	dc.l map+(object<<24)
000207F6                            	dc.b subtype,frame
000207F6                            	dc.w vram
000207F6                            	endm
000207F6                            
000207F6                            @GHZ:
000207F6 0000                       	dc.w (@GHZend-@GHZ-2)/8
000207F8                            
000207F8                            ;		mappings	object		subtype	frame	VRAM setting
000207F8 2500 BADA 0000 27B2        	dbug 	Map_Ring,	id_Rings,	0,	0,	$27B2
00020800 2600 C284 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020808 1F00 AEBA 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
00020810 2200 B344 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00020818 2B00 CA26 0000 047B        	dbug	Map_Chop,	id_Chopper,	0,	0,	$47B
00020820 3600 EE64 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00020828 1800 9860 0000 4000        	dbug	Map_Plat_GHZ,	id_BasicPlatform, 0,	0,	$4000
00020830 3B00 EF8A 0000 63D0        	dbug	Map_PRock,	id_PurpleRock,	0,	0,	$63D0
00020838 4001 1650 0000 04F0        	dbug	Map_Moto,	id_MotoBug,	0,	0,	$4F0
00020840 4100 FCE6 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020848 4200 FF10 0000 249B        	dbug	Map_Newt,	id_Newtron,	0,	0,	$249B
00020850 4401 021E 0000 434C        	dbug	Map_Edge,	id_EdgeWalls,	0,	0,	$434C
00020858 7901 A2DE 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020860 4B00 BB2A 0000 2400        	dbug	Map_GRing,	id_GiantRing,	0,	0,	$2400
00020868 7D01 A4A0 0101 84B6        	dbug	Map_Bonus,	id_HiddenBonus,	1,	1,	$84B6
00020870                            	@GHZend:
00020870                            
00020870                            @LZ:
00020870 0000                       	dc.w (@LZend-@LZ-2)/8
00020872                            
00020872                            ;		mappings	object		subtype	frame	VRAM setting
00020872 2500 BADA 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002087A 2600 C284 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020882 4100 FCE6 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002088A 2C00 CACC 0800 2486        	dbug	Map_Jaws,	id_Jaws,	8,	0,	$2486
00020892 2D00 CCB8 0002 84A6        	dbug	Map_Burro,	id_Burrobot,	0,	2,	$84A6
0002089A 1601 4012 0000 03CC        	dbug	Map_Harp,	id_Harpoon,	0,	0,	$3CC
000208A2 1601 4012 0203 03CC        	dbug	Map_Harp,	id_Harpoon,	2,	3,	$3CC
000208AA 3300 E136 0000 43DE        	dbug	Map_Push,	id_PushBlock,	0,	0,	$43DE
000208B2 3200 DCF6 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
000208BA 3600 EE64 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000208C2 5201 20E8 0400 43BC        	dbug	Map_MBlockLZ,	id_MovingBlock,	4,	0,	$43BC
000208CA 6101 423A 0100 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 1,	0,	$43E6
000208D2 6101 423A 1301 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $13,	1,	$43E6
000208DA 6101 423A 0500 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 5,	0,	$43E6
000208E2 6201 438E 0000 443E        	dbug	Map_Gar,	id_Gargoyle,	0,	0,	$443E
000208EA 6101 423A 2702 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $27,	2,	$43E6
000208F2 6101 423A 3003 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $30,	3,	$43E6
000208FA 6301 46F0 7F00 03F6        	dbug	Map_LConv,	id_LabyrinthConvey, $7F, 0,	$3F6
00020902 6001 3F5C 0000 0467        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$467
0002090A 6401 4A3E 8413 8348        	dbug	Map_Bub,	id_Bubble,	$84,	$13,	$8348
00020912 6501 4BC6 0202 C259        	dbug	Map_WFall,	id_Waterfall,	2,	2,	$C259
0002091A 6501 4BC6 0909 C259        	dbug	Map_WFall,	id_Waterfall,	9,	9,	$C259
00020922 0B01 33A8 0000 43DE        	dbug	Map_Pole,	id_Pole,	0,	0,	$43DE
0002092A 0C01 3478 0200 4328        	dbug	Map_Flap,	id_FlapDoor,	2,	0,	$4328
00020932 7901 A2DE 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002093A                            	@LZend:
0002093A                            
0002093A                            @MZ:
0002093A 0000                       	dc.w (@MZend-@MZ-2)/8
0002093C                            
0002093C                            ;		mappings	object		subtype	frame	VRAM setting
0002093C 2500 BADA 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020944 2600 C284 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0002094C 2200 B344 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00020954 3600 EE64 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
0002095C 4100 FCE6 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020964 1300 D1C6 0000 0345        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$345
0002096C 4601 08CE 0000 4000        	dbug	Map_Brick,	id_MarbleBrick,	0,	0,	$4000
00020974 6E01 937A 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
0002097C 6A01 8CF4 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
00020984 3300 E136 0000 42B8        	dbug	Map_Push,	id_PushBlock,	0,	0,	$42B8
0002098C 1E00 A5D2 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
00020994 5101 1E0E 0000 42B8        	dbug	Map_Smab,	id_SmashBlock,	0,	0,	$42B8
0002099C 5201 2092 0000 02B8        	dbug	Map_MBlock,	id_MovingBlock,	0,	0,	$2B8
000209A4 5300 9EA2 0000 62B8        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$62B8
000209AC 5401 11B6 0000 8680        	dbug	Map_LTag,	id_LavaTag,	0,	0,	$8680
000209B4 5501 2286 0000 04B8        	dbug	Map_Bas,	id_Basaran,	0,	0,	$4B8
000209BC 7801 9F4A 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
000209C4 7901 A2DE 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000209CC                            	@MZend:
000209CC                            
000209CC                            @SLZ:
000209CC 0000                       	dc.w (@SLZend-@SLZ-2)/8
000209CE                            
000209CE                            ;		mappings	object		subtype	frame	VRAM setting
000209CE 2500 BADA 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000209D6 2600 C284 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000209DE 5901 2DD0 0000 4000        	dbug	Map_Elev,	id_Elevator,	0,	0,	$4000
000209E6 5300 9EA2 0002 44E0        	dbug	Map_CFlo,	id_CollapseFloor, 0,	2,	$44E0
000209EE 1800 98BE 0000 4000        	dbug	Map_Plat_SLZ,	id_BasicPlatform, 0,	0,	$4000
000209F6 5A01 2F0A 0000 4000        	dbug	Map_Circ,	id_CirclingPlatform, 0,	0,	$4000
000209FE 5B01 30C2 0000 4000        	dbug	Map_Stair,	id_Staircase,	0,	0,	$4000
00020A06 5D01 3696 0000 43A0        	dbug	Map_Fan,	id_Fan,		0,	0,	$43A0
00020A0E 5E01 3A28 0000 0374        	dbug	Map_Seesaw,	id_Seesaw,	0,	0,	$374
00020A16 4100 FCE6 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020A1E 1300 D1C6 0000 0480        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$480
00020A26 1C00 9FD4 0000 44D8        	dbug	Map_Scen,	id_Scenery,	0,	0,	$44D8
00020A2E 5F01 3CA6 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
00020A36 6001 3F5C 0000 2429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$2429
00020A3E 7901 A2DE 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020A46                            	@SLZend:
00020A46                            
00020A46                            @SYZ:
00020A46 0000                       	dc.w (@SYZend-@SYZ-2)/8
00020A48                            
00020A48                            ;		mappings	object		subtype	frame	VRAM setting
00020A48 2500 BADA 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020A50 2600 C284 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020A58 3600 EE64 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00020A60 4100 FCE6 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020A68 4301 0170 0000 04B8        	dbug	Map_Roll,	id_Roller,	0,	0,	$4B8
00020A70 1201 094C 0000 0000        	dbug	Map_Light,	id_SpinningLight, 0,	0,	0
00020A78 4701 0AF0 0000 0380        	dbug	Map_Bump,	id_Bumper,	0,	0,	$380
00020A80 1F00 AEBA 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
00020A88 2200 B344 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00020A90 5001 18E0 0000 247B        	dbug	Map_Yad,	id_Yadrin,	0,	0,	$247B
00020A98 1800 98AC 0000 4000        	dbug	Map_Plat_SYZ,	id_BasicPlatform, 0,	0,	$4000
00020AA0 5601 2790 0000 4000        	dbug	Map_FBlock,	id_FloatingBlock, 0,	0,	$4000
00020AA8 3200 DCF6 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
00020AB0 7801 9F4A 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
00020AB8 7901 A2DE 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020AC0                            	@SYZend:
00020AC0                            
00020AC0                            @SBZ:
00020AC0 0000                       	dc.w (@SBZend-@SBZ-2)/8
00020AC2                            
00020AC2                            ;		mappings	object		subtype	frame	VRAM setting
00020AC2 2500 BADA 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020ACA 2600 C284 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020AD2 5F01 3CA6 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
00020ADA 6001 3F5C 0000 0429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$429
00020AE2 7801 9F4A 0000 22B0        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$22B0
00020AEA 1501 2B2C 0702 4391        	dbug	Map_BBall,	id_SwingingPlatform, 7,	2,	$4391
00020AF2 6701 87E2 E000 C344        	dbug	Map_Disc,	id_RunningDisc,	$E0,	0,	$C344
00020AFA 5201 2092 2802 22C0        	dbug	Map_MBlock,	id_MovingBlock,	$28,	2,	$22C0
00020B02 3200 DCF6 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
00020B0A 6901 8A3C 0300 4492        	dbug	Map_Trap,	id_SpinPlatform, 3,	0,	$4492
00020B12 6901 8A96 8300 04DF        	dbug	Map_Spin,	id_SpinPlatform, $83,	0,	$4DF
00020B1A 6A01 8CF4 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
00020B22 5300 9EA2 0000 43F5        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$43F5
00020B2A 5201 2092 3903 4460        	dbug	Map_MBlock,	id_MovingBlock,	$39,	3,	$4460
00020B32 6B01 90C4 0000 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	0,	0,	$22C0
00020B3A 2A00 A164 0000 42E8        	dbug	Map_ADoor,	id_AutoDoor,	0,	0,	$42E8
00020B42 6B01 90C4 1301 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$13,	1,	$22C0
00020B4A 6A01 8CF4 0100 43B5        	dbug	Map_Saw,	id_Saws,	1,	0,	$43B5
00020B52 6B01 90C4 2401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$24,	1,	$22C0
00020B5A 6A01 8CF4 0402 43B5        	dbug	Map_Saw,	id_Saws,	4,	2,	$43B5
00020B62 6B01 90C4 3401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$34,	1,	$22C0
00020B6A 6C01 9298 0000 44C3        	dbug	Map_VanP,	id_VanishPlatform, 0,	0,	$44C3
00020B72 6D01 05C0 6400 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	0,	$83D9
00020B7A 6D01 05C0 640B 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	$B,	$83D9
00020B82 6E01 937A 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
00020B8A 7001 97C0 0000 42F0        	dbug	Map_Gird,	id_Girder,	0,	0,	$42F0
00020B92 7101 353C 1100 8680        	dbug	Map_Invis,	id_Invisibarrier, $11,	0,	$8680
00020B9A 1E00 A5D2 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
00020BA2 7901 A2DE 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020BAA                            	@SBZend:
00020BAA                            
00020BAA                            @Ending:
00020BAA 0000                       	dc.w (@Endingend-@Ending-2)/8
00020BAC                            
00020BAC                            ;		mappings	object		subtype	frame	VRAM setting
00020BAC 2500 BADA 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020BB4 2500 BADA 0008 27B2        	dbug	Map_Ring,	id_Rings,	0,	8,	$27B2
00020BBC                            	@Endingend:
00020BBC                            
00020BBC                            	even
00020BBC                            	even
00020BBC                            		include	"_inc\LevelHeaders.asm"
00020BBC                            ; ---------------------------------------------------------------------------
00020BBC                            ; Level Headers
00020BBC                            ; ---------------------------------------------------------------------------
00020BBC                            
00020BBC                            LevelHeaders:
00020BBC                            
00020BBC                            lhead:	macro plc1,lvlgfx,plc2,sixteen,twofivesix,music,pal
00020BBC                            	dc.l (plc1<<24)+lvlgfx
00020BBC                            	dc.l (plc2<<24)+sixteen
00020BBC                            	dc.l twofivesix
00020BBC                            	dc.b 0, music, pal, pal
00020BBC                            	endm
00020BBC                            
00020BBC                            ; 1st PLC, level gfx (unused), 2nd PLC, 16x16 data, 256x256 data,
00020BBC                            ; music (unused), palette (unused), palette
00020BBC                            
00020BBC                            ;		1st PLC				2nd PLC				256x256 data			palette
00020BBC                            ;				level gfx*			16x16 data			music*
00020BBC                            
00020BBC 0000 0000 0000 0000 0000+  	lhead	plcid_GHZ,	Nem_GHZ_2nd,	plcid_GHZ2,	Blk16_GHZ,	Blk256_GHZ,	bgm_GHZ,	palid_GHZ	; Green Hill
00020BCC 0000 0000 0000 0000 0000+  	lhead	plcid_LZ,	Nem_LZ,		plcid_LZ2,	Blk16_LZ,	Blk256_LZ,	bgm_LZ,		palid_LZ	; Labyrinth
00020BDC 0000 0000 0000 0000 0000+  	lhead	plcid_MZ,	Nem_MZ,		plcid_MZ2,	Blk16_MZ,	Blk256_MZ,	bgm_MZ,		palid_MZ	; Marble
00020BEC 0000 0000 0000 0000 0000+  	lhead	plcid_SLZ,	Nem_SLZ,	plcid_SLZ2,	Blk16_SLZ,	Blk256_SLZ,	bgm_SLZ,	palid_SLZ	; Star Light
00020BFC 0000 0000 0000 0000 0000+  	lhead	plcid_SYZ,	Nem_SYZ,	plcid_SYZ2,	Blk16_SYZ,	Blk256_SYZ,	bgm_SYZ,	palid_SYZ	; Spring Yard
00020C0C 0000 0000 0000 0000 0000+  	lhead	plcid_SBZ,	Nem_SBZ,	plcid_SBZ2,	Blk16_SBZ,	Blk256_SBZ,	bgm_SBZ,	palid_SBZ1	; Scrap Brain
00020C1C 0000 0000 0000 0000 0000+  	lhead	0,		Nem_GHZ_2nd,	0,		Blk16_GHZ,	Blk256_GHZ,	bgm_SBZ,	palid_Ending	; Ending
00020C2C                            	even
00020C2C                            
00020C2C                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00020C2C                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00020C2C                            		include	"_inc\Pattern Load Cues.asm"
00020C2C                            ; ---------------------------------------------------------------------------
00020C2C                            ; Pattern load cues
00020C2C                            ; ---------------------------------------------------------------------------
00020C2C                            ArtLoadCues:
00020C2C                            
00020C2C 0000                       ptr_PLC_Main:		dc.w PLC_Main-ArtLoadCues
00020C2E 0000                       ptr_PLC_Main2:		dc.w PLC_Main2-ArtLoadCues
00020C30 0000                       ptr_PLC_Explode:	dc.w PLC_Explode-ArtLoadCues
00020C32 0000                       ptr_PLC_GameOver:	dc.w PLC_GameOver-ArtLoadCues
00020C34                            PLC_Levels:
00020C34 0000                       ptr_PLC_GHZ:		dc.w PLC_GHZ-ArtLoadCues
00020C36 0000                       ptr_PLC_GHZ2:		dc.w PLC_GHZ2-ArtLoadCues
00020C38 0000                       ptr_PLC_LZ:		dc.w PLC_LZ-ArtLoadCues
00020C3A 0000                       ptr_PLC_LZ2:		dc.w PLC_LZ2-ArtLoadCues
00020C3C 0000                       ptr_PLC_MZ:		dc.w PLC_MZ-ArtLoadCues
00020C3E 0000                       ptr_PLC_MZ2:		dc.w PLC_MZ2-ArtLoadCues
00020C40 0000                       ptr_PLC_SLZ:		dc.w PLC_SLZ-ArtLoadCues
00020C42 0000                       ptr_PLC_SLZ2:		dc.w PLC_SLZ2-ArtLoadCues
00020C44 0000                       ptr_PLC_SYZ:		dc.w PLC_SYZ-ArtLoadCues
00020C46 0000                       ptr_PLC_SYZ2:		dc.w PLC_SYZ2-ArtLoadCues
00020C48 0000                       ptr_PLC_SBZ:		dc.w PLC_SBZ-ArtLoadCues
00020C4A 0000                       ptr_PLC_SBZ2:		dc.w PLC_SBZ2-ArtLoadCues
00020C4C 0000                       ptr_PLC_TitleCard:	dc.w PLC_TitleCard-ArtLoadCues
00020C4E 0000                       ptr_PLC_Boss:		dc.w PLC_Boss-ArtLoadCues
00020C50 0000                       ptr_PLC_Signpost:	dc.w PLC_Signpost-ArtLoadCues
00020C52 0000                       ptr_PLC_Warp:		dc.w PLC_Warp-ArtLoadCues
00020C54 0000                       ptr_PLC_SpecialStage:	dc.w PLC_SpecialStage-ArtLoadCues
00020C56                            PLC_Animals:
00020C56 0000                       ptr_PLC_GHZAnimals:	dc.w PLC_GHZAnimals-ArtLoadCues
00020C58 0000                       ptr_PLC_LZAnimals:	dc.w PLC_LZAnimals-ArtLoadCues
00020C5A 0000                       ptr_PLC_MZAnimals:	dc.w PLC_MZAnimals-ArtLoadCues
00020C5C 0000                       ptr_PLC_SLZAnimals:	dc.w PLC_SLZAnimals-ArtLoadCues
00020C5E 0000                       ptr_PLC_SYZAnimals:	dc.w PLC_SYZAnimals-ArtLoadCues
00020C60 0000                       ptr_PLC_SBZAnimals:	dc.w PLC_SBZAnimals-ArtLoadCues
00020C62 0000                       ptr_PLC_SSResult:	dc.w PLC_SSResult-ArtLoadCues
00020C64 0000                       ptr_PLC_Ending:		dc.w PLC_Ending-ArtLoadCues
00020C66 0000                       ptr_PLC_TryAgain:	dc.w PLC_TryAgain-ArtLoadCues
00020C68 0000                       ptr_PLC_EggmanSBZ2:	dc.w PLC_EggmanSBZ2-ArtLoadCues
00020C6A 0000                       ptr_PLC_FZBoss:		dc.w PLC_FZBoss-ArtLoadCues
00020C6C 0000                       ptr_PLC_Egg:		dc.w PLC_Egg-ArtLoadCues
00020C6E 0000                       ptr_PLC_LifeIcon:		dc.w PLC_LifeIcon-ArtLoadCues
00020C70 0000                       ptr_PLC_LifeIconF:		dc.w PLC_LifeIconF-ArtLoadCues
00020C72                            
00020C72                            plcm:	macro gfx,vram
00020C72                            	dc.l gfx
00020C72                            	dc.w vram
00020C72                            	endm
00020C72                            
00020C72                            ; ---------------------------------------------------------------------------
00020C72                            ; Pattern load cues - standard block 1
00020C72                            ; ---------------------------------------------------------------------------
00020C72 0000                       PLC_Main:	dc.w ((PLC_Mainend-PLC_Main-2)/6)-1
00020C74 0000 0000 D800             		plcm	Nem_Lamp, $D800		; lamppost
00020C7A 0000 0000 D940             		plcm	Nem_Hud, $D940		; HUD
00020C80 0000 0000 F300             		plcm	Nem_Ring, $F300		; rings		
00020C86 0000 0000 ADA0             		plcm	Nem_Points, $ADA0 	; points from enemy
00020C8C                            	PLC_Mainend:
00020C8C                            ; ---------------------------------------------------------------------------
00020C8C                            ; Pattern load cues - standard block 2
00020C8C                            ; ---------------------------------------------------------------------------
00020C8C 0000                       PLC_Main2:	dc.w ((PLC_Main2end-PLC_Main2-2)/6)-1
00020C8E 0000 0000 D000             		plcm	Nem_Monitors, $D000	; monitors
00020C94                            	PLC_Main2end:
00020C94                            ; ---------------------------------------------------------------------------
00020C94                            ; Pattern load cues - explosion
00020C94                            ; ---------------------------------------------------------------------------
00020C94 0000                       PLC_Explode:	dc.w ((PLC_Explodeend-PLC_Explode-2)/6)-1
00020C96 0000 0000 B400             		plcm	Nem_Explode, $B400	; explosion
00020C9C                            	PLC_Explodeend:
00020C9C                            ; ---------------------------------------------------------------------------
00020C9C                            ; Pattern load cues - game/time	over
00020C9C                            ; ---------------------------------------------------------------------------
00020C9C 0000                       PLC_GameOver:	dc.w ((PLC_GameOverend-PLC_GameOver-2)/6)-1
00020C9E 0000 0000 ABC0             		plcm	Nem_GameOver, $ABC0	; game/time over
00020CA4                            	PLC_GameOverend:
00020CA4                            ; ---------------------------------------------------------------------------
00020CA4                            ; Pattern load cues - Green Hill
00020CA4                            ; ---------------------------------------------------------------------------
00020CA4 0000                       PLC_GHZ:	dc.w ((PLC_GHZ2-PLC_GHZ-2)/6)-1
00020CA6 0000 0000 0000             		plcm	Nem_GHZ_1st, 0		; GHZ main patterns
00020CAC 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00020CB2 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00020CB8 0000 0000 7A00             		plcm	Nem_PplRock, $7A00	; purple rock
00020CBE 0000 0000 8000             		plcm	Nem_Crabmeat, $8000	; crabmeat enemy
00020CC4 0000 0000 8880             		plcm	Nem_Mozzietron, $8880	; mozzietron enemy
00020CCA 0000 0000 8F60             		plcm	Nem_Chopper, $8F60	; chopper enemy
00020CD0 0000 0000 9360             		plcm	Nem_Newtron, $9360	; newtron enemy
00020CD6 0000 0000 9E00             		plcm	Nem_Motobug, $9E00	; motobug enemy
00020CDC 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020CE2 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020CE8 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020CEE                            
00020CEE 0000                       PLC_GHZ2:	dc.w ((PLC_GHZ2end-PLC_GHZ2-2)/6)-1
00020CF0 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020CF6 0000 0000 71C0             		plcm	Nem_Bridge, $71C0	; bridge
00020CFC 0000 0000 7300             		plcm	Nem_SpikePole, $7300	; spiked pole
00020D02 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
00020D08 0000 0000 A1E0             		plcm	Nem_GhzWall1, $A1E0	; breakable wall
00020D0E 0000 0000 6980             		plcm	Nem_GhzWall2, $6980	; normal wall
00020D14                            	PLC_GHZ2end:
00020D14                            ; ---------------------------------------------------------------------------
00020D14                            ; Pattern load cues - Labyrinth
00020D14                            ; ---------------------------------------------------------------------------
00020D14 0000                       PLC_LZ:		dc.w ((PLC_LZ2-PLC_LZ-2)/6)-1
00020D16 0000 0000 0000             		plcm	Nem_LZ,0		; LZ main patterns
00020D1C 0000 0000 3C00             		plcm	Nem_LzBlock1, $3C00	; block
00020D22                            		;plcm	Nem_LzBlock2, $3E00	; blocks
00020D22 0000 0000 6000             		plcm	Nem_Water, $6000	; water	surface
00020D28 0000 0000 6200             		plcm	Nem_LzSpikeBall, $6200	; spiked ball
00020D2E 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020D34 0000 0000 7780             		plcm	Nem_LzBlock3, $7780	; block
00020D3A 0000 0000 7880             		plcm	Nem_LzDoor1, $7880	; vertical door
00020D40 0000 0000 7980             		plcm	Nem_Harpoon, $7980	; harpoon
00020D46 0000 0000 94C0             		plcm	Nem_Burrobot, $94C0	; burrobot enemy
00020D4C                            
00020D4C 0000                       PLC_LZ2:	dc.w ((PLC_LZ2end-PLC_LZ2-2)/6)-1
00020D4E 0000 0000 7BC0             		plcm	Nem_LzPole, $7BC0	; pole that breaks
00020D54 0000 0000 7CC0             		plcm	Nem_LzDoor2, $7CC0	; large	horizontal door
00020D5A                            		;plcm	Nem_LzWheel, $7EC0	; wheel
00020D5A                            		;plcm	Nem_Gargoyle, $5D20	; gargoyle head
00020D5A 0000 0000 89E0             		plcm	Nem_LzPlatfm, $89E0	; rising platform
00020D60 0000 0000 8CE0             		plcm	Nem_Orbinaut, $8CE0	; orbinaut enemy
00020D66 0000 0000 90C0             		plcm	Nem_Jaws, $90C0		; jaws enemy
00020D6C 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020D72 0000 0000 A000             		plcm	Nem_Cork, $A000		; cork block
00020D78 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020D7E 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020D84 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020D8A                            	PLC_LZ2end:
00020D8A                            ; ---------------------------------------------------------------------------
00020D8A                            ; Pattern load cues - Marble
00020D8A                            ; ---------------------------------------------------------------------------
00020D8A 0000                       PLC_MZ:		dc.w ((PLC_MZ2-PLC_MZ-2)/6)-1
00020D8C 0000 0000 0000             		plcm	Nem_MZ,0		; MZ main patterns
00020D92 0000 0000 9FE0             		plcm	Nem_Cater, $9FE0	; caterkiller enemy
00020D98 0000 0000 6040             		plcm	Nem_BallHog, $6040	; ball hog enemy
00020D9E 0000 0000 68A0             		plcm	Nem_MzFire, $68A0	; fireballs
00020DA4                            	;	plcm	Nem_MzGlass, $71C0	; green	glassy block
00020DA4 0000 0000 75A0             		plcm	Nem_Cutter, $75A0	; pizza	cutter
00020DAA 0000 0000 8000             		plcm	Nem_Bomb, $8000
00020DB0 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020DB6 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020DBC 0000 0000 9700             		plcm	Nem_Basaran, $9700	; basaran enemy
00020DC2                            
00020DC2 0000                       PLC_MZ2:	dc.w ((PLC_MZ2end-PLC_MZ2-2)/6)-1
00020DC4 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020DCA 0000 0000 5D40             		plcm	Nem_SbzDoor1, $5D40	; door
00020DD0                            		;plcm	Nem_MzSwitch, $A260	; switch
00020DD0 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020DD6 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020DDC 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020DE2 0000 0000 5700             		plcm	Nem_MzBlock, $5700	; green	stone block
00020DE8 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020DEE                            	PLC_MZ2end:
00020DEE                            ; ---------------------------------------------------------------------------
00020DEE                            ; Pattern load cues - Star Light
00020DEE                            ; ---------------------------------------------------------------------------
00020DEE 0000                       PLC_SLZ:	dc.w ((PLC_SLZ2-PLC_SLZ-2)/6)-1
00020DF0 0000 0000 0000             		plcm	Nem_SLZ,0		; SLZ main patterns
00020DF6 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020DFC 0000 0000 8520             		plcm	Nem_Orbinaut, $8520	; orbinaut enemy
00020E02 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020E08 0000 0000 9000             		plcm	Nem_MzFire, $9000	; fireballs
00020E0E 0000 0000 9C00             		plcm	Nem_SlzBlock, $9C00	; block
00020E14 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020E1A 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020E20 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020E26 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020E2C                            
00020E2C 0000                       PLC_SLZ2:	dc.w ((PLC_SLZ2end-PLC_SLZ2-2)/6)-1
00020E2E 0000 0000 6E80             		plcm	Nem_Seesaw, $6E80	; seesaw
00020E34 0000 0000 7400             		plcm	Nem_Fan, $7400		; fan
00020E3A 0000 0000 7980             		plcm	Nem_Pylon, $7980	; foreground pylon
00020E40 0000 0000 7B80             		plcm	Nem_SlzSwing, $7B80	; swinging platform
00020E46 0000 0000 9B00             		plcm	Nem_SlzCannon, $9B00	; fireball launcher
00020E4C 0000 0000 9E00             		plcm	Nem_SlzSpike, $9E00	; spikeball
00020E52                            	PLC_SLZ2end:
00020E52                            ; ---------------------------------------------------------------------------
00020E52                            ; Pattern load cues - Spring Yard
00020E52                            ; ---------------------------------------------------------------------------
00020E52 0000                       PLC_SYZ:	dc.w ((PLC_SYZ2-PLC_SYZ-2)/6)-1
00020E54 0000 0000 0000             		plcm	Nem_SYZ,0		; SYZ main patterns
00020E5A                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020E5A                            		;plcm	Nem_SbzDoor1, $5D40	; door
00020E5A 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
00020E60 0000 0000 7EA0             		plcm	Nem_Bubbles, $7EA0	; bubbles and numbers
00020E66                            		;plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020E66 0000 0000 8F60             		plcm	Nem_Yadrin, $8F60	; yadrin enemy
00020E6C 0000 0000 9700             		plcm	Nem_Roller, $9700	; roller enemy
00020E72 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020E78 0000 0000 7840             		plcm	Nem_SbzFloor, $7840	; collapsing floor
00020E7E 0000 0000 8BA0             		plcm	Nem_SbzBlock, $8BA0	; vanishing block
00020E84 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020E8A                            
00020E8A 0000                       PLC_SYZ2:	dc.w ((PLC_SYZ2end-PLC_SYZ2-2)/6)-1
00020E8C                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020E8C 0000 0000 7000             		plcm	Nem_Bumper, $7000	; bumper
00020E92 0000 0000 72C0             		plcm	Nem_SyzSpike1, $72C0	; large	spikeball
00020E98 0000 0000 7740             		plcm	Nem_SyzSpike2, $7740	; small	spikeball
00020E9E                            		;plcm	Nem_TrapDoor, $9240	; trapdoor
00020E9E 0000 0000 78C0             		plcm	Nem_SbzFloor, $78C0	; collapsing floor
00020EA4                            		;plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020EA4 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020EAA 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020EB0 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020EB6 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020EBC                            	PLC_SYZ2end:
00020EBC                            ; ---------------------------------------------------------------------------
00020EBC                            ; Pattern load cues - Scrap Brain
00020EBC                            ; ---------------------------------------------------------------------------
00020EBC 0000                       PLC_SBZ:	dc.w ((PLC_SBZ2-PLC_SBZ-2)/6)-1
00020EBE 0000 0000 0000             		plcm	Nem_SBZ,0		; SBZ main patterns
00020EC4                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020EC4                            		;plcm	Nem_SbzDoor1, $5D00	; door
00020EC4                            		;plcm	Nem_Girder, $5E00	; girder
00020EC4 0000 0000 6880             		plcm	Nem_SbzWheel1, $6880	; spot on large	wheel
00020ECA 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020ED0                            		;plcm	Nem_SbzWheel2, $6900	; wheel	that grabs Sonic
00020ED0 0000 0000 7220             		plcm	Nem_SyzSpike1, $7220	; large	spikeball
00020ED6 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020EDC 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020EE2 0000 0000 9860             		plcm	Nem_SbzBlock, $9860	; vanishing block
00020EE8                            
00020EE8 0000                       PLC_SBZ2:	dc.w ((PLC_SBZ2end-PLC_SBZ2-2)/6)-1
00020EEA 0000 0000 5600             		plcm	Nem_Cater, $5600	; caterkiller enemy
00020EF0 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020EF6 0000 0000 8C00             		plcm	Nem_SlideFloor, $8C00	; floor	that slides away
00020EFC                            		;plcm	Nem_SbzDoor2, $8DE0	; horizontal door
00020EFC 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020F02 0000 0000 9240             		plcm	Nem_TrapDoor, $9240	; trapdoor
00020F08 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020F0E 0000 0000 9BE0             		plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020F14 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020F1A 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020F20 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020F26 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020F2C                            	PLC_SBZ2end:
00020F2C                            ; ---------------------------------------------------------------------------
00020F2C                            ; Pattern load cues - title card
00020F2C                            ; ---------------------------------------------------------------------------
00020F2C 0000                       PLC_TitleCard:	dc.w ((PLC_TitleCardend-PLC_TitleCard-2)/6)-1
00020F2E 0000 0000 B000             		plcm	Nem_TitleCard, $B000
00020F34                            	PLC_TitleCardend:
00020F34                            ; ---------------------------------------------------------------------------
00020F34                            ; Pattern load cues - act 3 boss
00020F34                            ; ---------------------------------------------------------------------------
00020F34 0000                       PLC_Boss:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020F36 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020F3C 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020F42 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020F48                            		;plcm	Nem_Bomb, $A300		; bomb enemy ((gets overwritten)
00020F48                            		;plcm	Nem_SlzSpike, $A300	; spikeball ((SLZ boss)
00020F48 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020F4E 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00020F54                            	PLC_Bossend:
00020F54                            ; ---------------------------------------------------------------------------
00020F54                            ; Pattern load cues - act 1/2 signpost
00020F54                            ; ---------------------------------------------------------------------------
00020F54 0000                       PLC_Signpost:	dc.w ((PLC_Signpostend-PLC_Signpost-2)/6)-1
00020F56 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00020F5C 0000 0000 96C0             		plcm	Nem_Bonus, $96C0	; hidden bonus points
00020F62 0000 0000 8C40             		plcm	Nem_BigFlash, $8C40	; giant	ring flash effect
00020F68                            		;plcm	Nem_SSEmerald, $EE00	; emeralds
00020F68                            	PLC_Signpostend:
00020F68                            ; ---------------------------------------------------------------------------
00020F68                            ; Pattern load cues - beta special stage warp effect
00020F68                            ; ---------------------------------------------------------------------------
00020F68                            PLC_Warp:
00020F68                            	PLC_Warpend:
00020F68                            ; ---------------------------------------------------------------------------
00020F68                            ; Pattern load cues - special stage
00020F68                            ; ---------------------------------------------------------------------------
00020F68 0000                       PLC_SpecialStage:	dc.w ((PLC_SpeStageend-PLC_SpecialStage-2)/6)-1
00020F6A 0000 0000 0000             		plcm	Nem_SSBgCloud, 0	; bubble and cloud background
00020F70 0000 0000 0A20             		plcm	Nem_SSBgFish, $A20	; bird and fish	background
00020F76 0000 0000 2840             		plcm	Nem_SSWalls, $2840	; walls
00020F7C 0000 0000 4760             		plcm	Nem_Bumper, $4760	; bumper
00020F82 0000 0000 4A20             		plcm	Nem_SSGOAL, $4A20	; GOAL block
00020F88 0000 0000 4C60             		plcm	Nem_SSUpDown, $4C60	; UP and DOWN blocks
00020F8E 0000 0000 5E00             		plcm	Nem_SSRBlock, $5E00	; R block
00020F94 0000 0000 6E00             		plcm	Nem_SS1UpBlock, $6E00	; 1UP block
00020F9A 0000 0000 7E00             		plcm	Nem_SSEmStars, $7E00	; emerald collection stars
00020FA0 0000 0000 8E00             		plcm	Nem_SSRedWhite, $8E00	; red and white	block
00020FA6 0000 0000 9E00             		plcm	Nem_SSGhost, $9E00	; ghost	block
00020FAC 0000 0000 AE00             		plcm	Nem_SSWBlock, $AE00	; W block
00020FB2 0000 0000 BE00             		plcm	Nem_SSGlass, $BE00	; glass	block
00020FB8 0000 0000 EE00             		plcm	Nem_SSEmerald, $EE00	; emeralds
00020FBE                            		;plcm	Nem_SSZone1, $F2E0	; ZONE 1 block
00020FBE                            		;plcm	Nem_SSZone2, $F400	; ZONE 2 block
00020FBE                            		;plcm	Nem_SSZone3, $F520	; ZONE 3 block
00020FBE                            	PLC_SpeStageend:
00020FBE                            		;plcm	Nem_SSZone4, $F2E0	; ZONE 4 block
00020FBE                            		;plcm	Nem_SSZone5, $F400	; ZONE 5 block
00020FBE                            		;plcm	Nem_SSZone6, $F520	; ZONE 6 block
00020FBE                            ; ---------------------------------------------------------------------------
00020FBE                            ; Pattern load cues - GHZ animals
00020FBE                            ; ---------------------------------------------------------------------------
00020FBE 0000                       PLC_GHZAnimals:	dc.w ((PLC_GHZAnimalsend-PLC_GHZAnimals-2)/6)-1
00020FC0 0000 0000 B000             		plcm	Nem_Rabbit, $B000	; rabbit
00020FC6 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020FCC                            	PLC_GHZAnimalsend:
00020FCC                            ; ---------------------------------------------------------------------------
00020FCC                            ; Pattern load cues - LZ animals
00020FCC                            ; ---------------------------------------------------------------------------
00020FCC 0000                       PLC_LZAnimals:	dc.w ((PLC_LZAnimalsend-PLC_LZAnimals-2)/6)-1
00020FCE 0000 0000 B000             		plcm	Nem_BlackBird, $B000	; blackbird
00020FD4 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020FDA                            	PLC_LZAnimalsend:
00020FDA                            ; ---------------------------------------------------------------------------
00020FDA                            ; Pattern load cues - MZ animals
00020FDA                            ; ---------------------------------------------------------------------------
00020FDA 0000                       PLC_MZAnimals:	dc.w ((PLC_MZAnimalsend-PLC_MZAnimals-2)/6)-1
00020FDC 0000 0000 B000             		plcm	Nem_Squirrel, $B000	; squirrel
00020FE2 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020FE8                            	PLC_MZAnimalsend:
00020FE8                            ; ---------------------------------------------------------------------------
00020FE8                            ; Pattern load cues - SLZ animals
00020FE8                            ; ---------------------------------------------------------------------------
00020FE8 0000                       PLC_SLZAnimals:	dc.w ((PLC_SLZAnimalsend-PLC_SLZAnimals-2)/6)-1
00020FEA 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020FF0 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020FF6                            	PLC_SLZAnimalsend:
00020FF6                            ; ---------------------------------------------------------------------------
00020FF6                            ; Pattern load cues - SYZ animals
00020FF6                            ; ---------------------------------------------------------------------------
00020FF6 0000                       PLC_SYZAnimals:	dc.w ((PLC_SYZAnimalsend-PLC_SYZAnimals-2)/6)-1
00020FF8 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020FFE 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00021004                            	PLC_SYZAnimalsend:
00021004                            ; ---------------------------------------------------------------------------
00021004                            ; Pattern load cues - SBZ animals
00021004                            ; ---------------------------------------------------------------------------
00021004 0000                       PLC_SBZAnimals:	dc.w ((PLC_SBZAnimalsend-PLC_SBZAnimals-2)/6)-1
00021006 0000 0000 B000             		plcm	Nem_Rabbit, $B000		; rabbit
0002100C 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00021012                            	PLC_SBZAnimalsend:
00021012                            ; ---------------------------------------------------------------------------
00021012                            ; Pattern load cues - special stage results screen
00021012                            ; ---------------------------------------------------------------------------
00021012 0000                       PLC_SSResult:dc.w ((PLC_SpeStResultend-PLC_SSResult-2)/6)-1
00021014 0000 0000 A820             		plcm	Nem_ResultEm, $A820	; emeralds
0002101A 0000 0000 AA20             		plcm	Nem_MiniSonic, $AA20	; mini Sonic
00021020                            	PLC_SpeStResultend:
00021020                            ; ---------------------------------------------------------------------------
00021020                            ; Pattern load cues - ending sequence
00021020                            ; ---------------------------------------------------------------------------
00021020 0000                       PLC_Ending:	dc.w ((PLC_Endingend-PLC_Ending-2)/6)-1
00021022 0000 0000 0000             		plcm	Nem_GHZ_1st,0		; GHZ main patterns
00021028 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
0002102E 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00021034                            		;plcm	Nem_EndFlower, $7400	; flowers
00021034 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
0002103A 0000 0000 7C20             		plcm	Nem_EndSonic, $7C20	; Sonic
00021040 0000 0000 AA60             		plcm	Nem_Rabbit, $AA60	; rabbit
00021046 0000 0000 ACA0             		plcm	Nem_Chicken, $ACA0	; chicken
0002104C 0000 0000 AE60             		plcm	Nem_BlackBird, $AE60	; blackbird
00021052 0000 0000 B0A0             		plcm	Nem_Seal, $B0A0		; seal
00021058 0000 0000 B260             		plcm	Nem_Pig, $B260		; pig
0002105E 0000 0000 B4A0             		plcm	Nem_Flicky, $B4A0	; flicky
00021064 0000 0000 B660             		plcm	Nem_Squirrel, $B660	; squirrel
0002106A 0000 0000 B8A0             		plcm	Nem_EndStH, $B8A0	; "SONIC THE HEDGEHOG"
00021070                            	PLC_Endingend:
00021070                            ; ---------------------------------------------------------------------------
00021070                            ; Pattern load cues - "TRY AGAIN" and "END" screens
00021070                            ; ---------------------------------------------------------------------------
00021070 0000                       PLC_TryAgain:	dc.w ((PLC_TryAgainend-PLC_TryAgain-2)/6)-1
00021072 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00021078 0000 0000 7C20             		plcm	Nem_TryAgain, $7C20	; Eggman
0002107E 0000 0000 B400             		plcm	Nem_CreditText, $B400	; credits alphabet
00021084                            	PLC_TryAgainend:
00021084                            ; ---------------------------------------------------------------------------
00021084                            ; Pattern load cues - Eggman on SBZ 2
00021084                            ; ---------------------------------------------------------------------------
00021084 0000                       PLC_EggmanSBZ2:	dc.w ((PLC_EggmanSBZ2end-PLC_EggmanSBZ2-2)/6)-1
00021086 0000 0000 A300             		plcm	Nem_SbzBlock, $A300	; block
0002108C 0000 0000 8000             		plcm	Nem_Sbz2Eggman, $8000	; Eggman
00021092 0000 0000 9400             		plcm	Nem_LzSwitch, $9400	; switch
00021098                            	PLC_EggmanSBZ2end:
00021098                            ; ---------------------------------------------------------------------------
00021098                            ; Pattern load cues - final boss
00021098                            ; ---------------------------------------------------------------------------
00021098 0000                       PLC_FZBoss:	dc.w ((PLC_FZBossend-PLC_FZBoss-2)/6)-1
0002109A 0000 0000 7400             		plcm	Nem_FzEggman, $7400	; Eggman after boss
000210A0 0000 0000 6000             		plcm	Nem_FzBoss, $6000	; FZ boss
000210A6 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
000210AC 0000 0000 8E00             		plcm	Nem_Sbz2Eggman, $8E00	; Eggman without ship
000210B2 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
000210B8                            	PLC_FZBossend:
000210B8                            ; ---------------------------------------------------------------------------
000210B8                            ; Pattern load cues - Eggman
000210B8                            ; ---------------------------------------------------------------------------
000210B8 0004                       PLC_Egg:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
000210BA 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
000210C0 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
000210C6 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
000210CC 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
000210D2 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
000210D8 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
000210DE                            	PLC_Eggend:
000210DE                            		even
000210DE                            ; ---------------------------------------------------------------------------
000210DE                            ; Pattern load cues - Life Icon
000210DE                            ; ---------------------------------------------------------------------------	
000210DE 0000                       PLC_LifeIcon:	dc.w ((PLC_LifeIcon_end-PLC_LifeIcon-2)/6)-1
000210E0 0000 0000 FA80             		plcm	Nem_Lives, $FA80	; lives	counter	
000210E6                            	PLC_LifeIcon_end: 
000210E6                            		even	
000210E6                            ; ---------------------------------------------------------------------------
000210E6                            ; Pattern load cues - Life Icon (Future)
000210E6                            ; ---------------------------------------------------------------------------	
000210E6 0000                       PLC_LifeIconF:	dc.w ((PLC_LifeIconF_end-PLC_LifeIconF-2)/6)-1
000210E8 0000 0000 FA80             		plcm	Nem_Future, $FA80	; lives	counter	
000210EE                            	PLC_LifeIconF_end: ; nahhhhh... too far, bro
000210EE                            		even			
000210EE                            ; ---------------------------------------------------------------------------
000210EE                            ; Pattern load cue IDs
000210EE                            ; ---------------------------------------------------------------------------
000210EE =00000000                  plcid_Main:		equ (ptr_PLC_Main-ArtLoadCues)/2	; 0
000210EE =00000001                  plcid_Main2:		equ (ptr_PLC_Main2-ArtLoadCues)/2	; 1
000210EE =00000002                  plcid_Explode:		equ (ptr_PLC_Explode-ArtLoadCues)/2	; 2
000210EE =00000003                  plcid_GameOver:		equ (ptr_PLC_GameOver-ArtLoadCues)/2	; 3
000210EE =00000004                  plcid_GHZ:		equ (ptr_PLC_GHZ-ArtLoadCues)/2		; 4
000210EE =00000005                  plcid_GHZ2:		equ (ptr_PLC_GHZ2-ArtLoadCues)/2	; 5
000210EE =00000006                  plcid_LZ:		equ (ptr_PLC_LZ-ArtLoadCues)/2		; 6
000210EE =00000007                  plcid_LZ2:		equ (ptr_PLC_LZ2-ArtLoadCues)/2		; 7
000210EE =00000008                  plcid_MZ:		equ (ptr_PLC_MZ-ArtLoadCues)/2		; 8
000210EE =00000009                  plcid_MZ2:		equ (ptr_PLC_MZ2-ArtLoadCues)/2		; 9
000210EE =0000000A                  plcid_SLZ:		equ (ptr_PLC_SLZ-ArtLoadCues)/2		; $A
000210EE =0000000B                  plcid_SLZ2:		equ (ptr_PLC_SLZ2-ArtLoadCues)/2	; $B
000210EE =0000000C                  plcid_SYZ:		equ (ptr_PLC_SYZ-ArtLoadCues)/2		; $C
000210EE =0000000D                  plcid_SYZ2:		equ (ptr_PLC_SYZ2-ArtLoadCues)/2	; $D
000210EE =0000000E                  plcid_SBZ:		equ (ptr_PLC_SBZ-ArtLoadCues)/2		; $E
000210EE =0000000F                  plcid_SBZ2:		equ (ptr_PLC_SBZ2-ArtLoadCues)/2	; $F
000210EE =00000010                  plcid_TitleCard:	equ (ptr_PLC_TitleCard-ArtLoadCues)/2	; $10
000210EE =00000011                  plcid_Boss:		equ (ptr_PLC_Boss-ArtLoadCues)/2	; $11
000210EE =00000012                  plcid_Signpost:		equ (ptr_PLC_Signpost-ArtLoadCues)/2	; $12
000210EE =00000013                  plcid_Warp:		equ (ptr_PLC_Warp-ArtLoadCues)/2	; $13
000210EE =00000014                  plcid_SpecialStage:	equ (ptr_PLC_SpecialStage-ArtLoadCues)/2 ; $14
000210EE =00000015                  plcid_GHZAnimals:	equ (ptr_PLC_GHZAnimals-ArtLoadCues)/2	; $15
000210EE =00000016                  plcid_LZAnimals:	equ (ptr_PLC_LZAnimals-ArtLoadCues)/2	; $16
000210EE =00000017                  plcid_MZAnimals:	equ (ptr_PLC_MZAnimals-ArtLoadCues)/2	; $17
000210EE =00000018                  plcid_SLZAnimals:	equ (ptr_PLC_SLZAnimals-ArtLoadCues)/2	; $18
000210EE =00000019                  plcid_SYZAnimals:	equ (ptr_PLC_SYZAnimals-ArtLoadCues)/2	; $19
000210EE =0000001A                  plcid_SBZAnimals:	equ (ptr_PLC_SBZAnimals-ArtLoadCues)/2	; $1A
000210EE =0000001B                  plcid_SSResult:		equ (ptr_PLC_SSResult-ArtLoadCues)/2	; $1B
000210EE =0000001C                  plcid_Ending:		equ (ptr_PLC_Ending-ArtLoadCues)/2	; $1C
000210EE =0000001D                  plcid_TryAgain:		equ (ptr_PLC_TryAgain-ArtLoadCues)/2	; $1D
000210EE =0000001E                  plcid_EggmanSBZ2:	equ (ptr_PLC_EggmanSBZ2-ArtLoadCues)/2	; $1E
000210EE =0000001F                  plcid_FZBoss:		equ (ptr_PLC_FZBoss-ArtLoadCues)/2	; $1F
000210EE =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $20
000210EE =00000021                  plcid_LifeIcon:		equ (ptr_PLC_LifeIcon-ArtLoadCues)/2	; $21
000210EE =00000022                  plcid_LifeIconF:		equ (ptr_PLC_LifeIconF-ArtLoadCues)/2	; $21
000210EE =00000022                  plcid_LifeIconF:		equ (ptr_PLC_LifeIconF-ArtLoadCues)/2	; $21
000210EE                            
00021200                            			dcb.b	$300,$FF
00021500                            	Nem_SegaLogo:	incbin	"artnem\Sega Logo (JP1).bin" ; large Sega logo
00021970                            			even
00021970                            	Eni_SegaLogo:	incbin	"tilemaps\Sega Logo (JP1).bin" ; large Sega logo (mappings)
00021A6C                            			even
00021A6C                            Eni_Title:	incbin	"tilemaps\Title Screen.bin" ; title screen foreground (mappings)
00021B4C                            		even
00021B4C                            Nem_TitleFg:	incbin	"artnem\Title Screen Foreground.bin"
00022FB8                            		even
00022FB8                            Nem_TitleSonic:	incbin	"artnem\Title Screen Sonic.bin"
00024A98                            		even
00024A98                            Nem_TitleTM:	incbin	"artnem\Title Screen TM.bin"
00024ACC                            		even
00024ACC                            Nem_TitleMenu:   incbin   "artnem\titlemenu.bin"  
00024CFE 00                         		even		
00024CFE                            Eni_JapNames:	incbin	"tilemaps\Hidden Japanese Credits.bin" ; Japanese credits (mappings)
00024DBC                            		even
00024DBC                            Nem_JapNames:	incbin	"artnem\Hidden Japanese Credits.bin"
00025264                            		even
00025264                            
00025264                            Map_Sonic:	include	"_maps\Sonic.asm"
00025264                            ; --------------------------------------------------------------------------------
00025264                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00025264                            ; --------------------------------------------------------------------------------
00025264                            
00025264                            SME_IMvhi:	
00025264 0000 0000                  		dc.w SME_IMvhi_198-SME_IMvhi, SME_IMvhi_199-SME_IMvhi	
00025268 0000 0000                  		dc.w SME_IMvhi_1AE-SME_IMvhi, SME_IMvhi_1DC-SME_IMvhi	
0002526C 0000 0000                  		dc.w SME_IMvhi_20F-SME_IMvhi, SME_IMvhi_224-SME_IMvhi	
00025270 0000 0000                  		dc.w SME_IMvhi_234-SME_IMvhi, SME_IMvhi_244-SME_IMvhi	
00025274 0000 0000                  		dc.w SME_IMvhi_259-SME_IMvhi, SME_IMvhi_264-SME_IMvhi	
00025278 0000 0000                  		dc.w SME_IMvhi_274-SME_IMvhi, SME_IMvhi_284-SME_IMvhi	
0002527C 0000 0000                  		dc.w SME_IMvhi_294-SME_IMvhi, SME_IMvhi_2A9-SME_IMvhi	
00025280 0000 0000                  		dc.w SME_IMvhi_2B9-SME_IMvhi, SME_IMvhi_2DD-SME_IMvhi	
00025284 0000 0000                  		dc.w SME_IMvhi_2F7-SME_IMvhi, SME_IMvhi_302-SME_IMvhi	
00025288 0000 0000                  		dc.w SME_IMvhi_312-SME_IMvhi, SME_IMvhi_327-SME_IMvhi	
0002528C 0000 0000                  		dc.w SME_IMvhi_332-SME_IMvhi, SME_IMvhi_342-SME_IMvhi	
00025290 0000 0000                  		dc.w SME_IMvhi_35C-SME_IMvhi, SME_IMvhi_376-SME_IMvhi	
00025294 0000 0000                  		dc.w SME_IMvhi_395-SME_IMvhi, SME_IMvhi_3AA-SME_IMvhi	
00025298 0000 0000                  		dc.w SME_IMvhi_3BA-SME_IMvhi, SME_IMvhi_3D4-SME_IMvhi	
0002529C 0000 0000                  		dc.w SME_IMvhi_3E9-SME_IMvhi, SME_IMvhi_3F9-SME_IMvhi	
000252A0 0000 0000                  		dc.w SME_IMvhi_413-SME_IMvhi, SME_IMvhi_428-SME_IMvhi	
000252A4 0000 0000                  		dc.w SME_IMvhi_433-SME_IMvhi, SME_IMvhi_43E-SME_IMvhi	
000252A8 0000 0000                  		dc.w SME_IMvhi_458-SME_IMvhi, SME_IMvhi_46D-SME_IMvhi	
000252AC 0000 0000                  		dc.w SME_IMvhi_478-SME_IMvhi, SME_IMvhi_488-SME_IMvhi	
000252B0 0000 0000                  		dc.w SME_IMvhi_498-SME_IMvhi, SME_IMvhi_4B7-SME_IMvhi	
000252B4 0000 0000                  		dc.w SME_IMvhi_4D6-SME_IMvhi, SME_IMvhi_4EB-SME_IMvhi	
000252B8 0000 0000                  		dc.w SME_IMvhi_4FB-SME_IMvhi, SME_IMvhi_515-SME_IMvhi	
000252BC 0000 0000                  		dc.w SME_IMvhi_52A-SME_IMvhi, SME_IMvhi_53A-SME_IMvhi	
000252C0 0000 0000                  		dc.w SME_IMvhi_554-SME_IMvhi, SME_IMvhi_55F-SME_IMvhi	
000252C4 0000 0000                  		dc.w SME_IMvhi_56A-SME_IMvhi, SME_IMvhi_575-SME_IMvhi	
000252C8 0000 0000                  		dc.w SME_IMvhi_580-SME_IMvhi, SME_IMvhi_58B-SME_IMvhi	
000252CC 0000 0000                  		dc.w SME_IMvhi_596-SME_IMvhi, SME_IMvhi_5A1-SME_IMvhi	
000252D0 0000 0000                  		dc.w SME_IMvhi_5AC-SME_IMvhi, SME_IMvhi_5C1-SME_IMvhi	
000252D4 0000 0000                  		dc.w SME_IMvhi_5D1-SME_IMvhi, SME_IMvhi_5E1-SME_IMvhi	
000252D8 0000 0000                  		dc.w SME_IMvhi_5F1-SME_IMvhi, SME_IMvhi_606-SME_IMvhi	
000252DC 0000 0000                  		dc.w SME_IMvhi_616-SME_IMvhi, SME_IMvhi_626-SME_IMvhi	
000252E0 0000 0000                  		dc.w SME_IMvhi_636-SME_IMvhi, SME_IMvhi_641-SME_IMvhi	
000252E4 0000 0000                  		dc.w SME_IMvhi_64C-SME_IMvhi, SME_IMvhi_657-SME_IMvhi	
000252E8 0000 0000                  		dc.w SME_IMvhi_662-SME_IMvhi, SME_IMvhi_66D-SME_IMvhi	
000252EC 0000 0000                  		dc.w SME_IMvhi_678-SME_IMvhi, SME_IMvhi_683-SME_IMvhi	
000252F0 0000 0000                  		dc.w SME_IMvhi_68E-SME_IMvhi, SME_IMvhi_6A3-SME_IMvhi	
000252F4 0000 0000                  		dc.w SME_IMvhi_6B3-SME_IMvhi, SME_IMvhi_6BE-SME_IMvhi	
000252F8 0000 0000                  		dc.w SME_IMvhi_6CE-SME_IMvhi, SME_IMvhi_6E3-SME_IMvhi	
000252FC 0000 0000                  		dc.w SME_IMvhi_6F3-SME_IMvhi, SME_IMvhi_6FE-SME_IMvhi	
00025300 0000 0000                  		dc.w SME_IMvhi_70E-SME_IMvhi, SME_IMvhi_71E-SME_IMvhi	
00025304 0000 0000                  		dc.w SME_IMvhi_72E-SME_IMvhi, SME_IMvhi_75C-SME_IMvhi	
00025308 0000 0000                  		dc.w SME_IMvhi_78A-SME_IMvhi, SME_IMvhi_79A-SME_IMvhi	
0002530C 0000 0000                  		dc.w SME_IMvhi_7AA-SME_IMvhi, SME_IMvhi_7BA-SME_IMvhi	
00025310 0000 0000                  		dc.w SME_IMvhi_7D4-SME_IMvhi, SME_IMvhi_7E4-SME_IMvhi	
00025314 0000 0000                  		dc.w SME_IMvhi_7F4-SME_IMvhi, SME_IMvhi_80E-SME_IMvhi	
00025318 0000 0000                  		dc.w SME_IMvhi_828-SME_IMvhi, SME_IMvhi_83D-SME_IMvhi	
0002531C 0000 0000                  		dc.w SME_IMvhi_852-SME_IMvhi, SME_IMvhi_867-SME_IMvhi	
00025320 0000 0000                  		dc.w SME_IMvhi_87C-SME_IMvhi, SME_IMvhi_882-SME_IMvhi	
00025324 0000 0000                  		dc.w SME_IMvhi_888-SME_IMvhi, SME_IMvhi_88E-SME_IMvhi	
00025328 0000 0000                  		dc.w SME_IMvhi_894-SME_IMvhi, SME_IMvhi_89A-SME_IMvhi	
0002532C 0000 0000                  		dc.w SME_IMvhi_8A0-SME_IMvhi, SME_IMvhi_8A6-SME_IMvhi	
00025330 0000 0000                  		dc.w SME_IMvhi_8B6-SME_IMvhi, SME_IMvhi_8BC-SME_IMvhi	
00025334 0000 0000                  		dc.w SME_IMvhi_8C7-SME_IMvhi, SME_IMvhi_8CD-SME_IMvhi	
00025338 0000 0000                  		dc.w SME_IMvhi_8D8-SME_IMvhi, SME_IMvhi_8DE-SME_IMvhi	
0002533C 0000 0000                  		dc.w SME_IMvhi_8F3-SME_IMvhi, SME_IMvhi_917-SME_IMvhi	
00025340 0000 0000                  		dc.w SME_IMvhi_931-SME_IMvhi, SME_IMvhi_941-SME_IMvhi	
00025344 0000 0000                  		dc.w SME_IMvhi_95B-SME_IMvhi, SME_IMvhi_970-SME_IMvhi	
00025348 0000 0000                  		dc.w SME_IMvhi_985-SME_IMvhi, SME_IMvhi_99A-SME_IMvhi	
0002534C 0000 0000                  		dc.w SME_IMvhi_9C8-SME_IMvhi, SME_IMvhi_9D8-SME_IMvhi	
00025350 0000 0000                  		dc.w SME_IMvhi_9E8-SME_IMvhi, SME_IMvhi_9F8-SME_IMvhi	
00025354 0000 0000                  		dc.w SME_IMvhi_9F9-SME_IMvhi, SME_IMvhi_A22-SME_IMvhi	
00025358 0000 0000                  		dc.w SME_IMvhi_A46-SME_IMvhi, SME_IMvhi_A5B-SME_IMvhi	
0002535C 0000 0000                  		dc.w SME_IMvhi_A6B-SME_IMvhi, SME_IMvhi_A7B-SME_IMvhi	
00025360 0000 0000                  		dc.w SME_IMvhi_A8B-SME_IMvhi, SME_IMvhi_A96-SME_IMvhi	
00025364 0000 0000                  		dc.w SME_IMvhi_AA6-SME_IMvhi, SME_IMvhi_AB6-SME_IMvhi	
00025368 0000 0000                  		dc.w SME_IMvhi_AC6-SME_IMvhi, SME_IMvhi_AD6-SME_IMvhi	
0002536C 0000 0000                  		dc.w SME_IMvhi_AEB-SME_IMvhi, SME_IMvhi_B14-SME_IMvhi	
00025370 0000 0000                  		dc.w SME_IMvhi_B29-SME_IMvhi, SME_IMvhi_B3E-SME_IMvhi	
00025374 0000 0000                  		dc.w SME_IMvhi_B58-SME_IMvhi, SME_IMvhi_B72-SME_IMvhi	
00025378 0000 0000                  		dc.w SME_IMvhi_B7D-SME_IMvhi, SME_IMvhi_B97-SME_IMvhi	
0002537C 0000 0000                  		dc.w SME_IMvhi_BA7-SME_IMvhi, SME_IMvhi_BC1-SME_IMvhi	
00025380 0000 0000                  		dc.w SME_IMvhi_BCC-SME_IMvhi, SME_IMvhi_BDC-SME_IMvhi	
00025384 0000 0000                  		dc.w SME_IMvhi_BEC-SME_IMvhi, SME_IMvhi_BFC-SME_IMvhi	
00025388 0000 0000                  		dc.w SME_IMvhi_C07-SME_IMvhi, SME_IMvhi_C17-SME_IMvhi	
0002538C 0000 0000                  		dc.w SME_IMvhi_C4F-SME_IMvhi, SME_IMvhi_C6E-SME_IMvhi	
00025390 0000 0000                  		dc.w SME_IMvhi_C7E-SME_IMvhi, SME_IMvhi_CA2-SME_IMvhi	
00025394 0000 0000                  		dc.w SME_IMvhi_CAD-SME_IMvhi, SME_IMvhi_CC2-SME_IMvhi	
00025398 0000 0000                  		dc.w SME_IMvhi_CD2-SME_IMvhi, SME_IMvhi_CE2-SME_IMvhi	
0002539C 0000 0000                  		dc.w SME_IMvhi_CF7-SME_IMvhi, SME_IMvhi_CFD-SME_IMvhi	
000253A0 0000 0000                  		dc.w SME_IMvhi_D03-SME_IMvhi, SME_IMvhi_D09-SME_IMvhi	
000253A4 0000 0000                  		dc.w SME_IMvhi_D0F-SME_IMvhi, SME_IMvhi_D1A-SME_IMvhi	
000253A8 0000 0000                  		dc.w SME_IMvhi_D20-SME_IMvhi, SME_IMvhi_D26-SME_IMvhi	
000253AC 0000 0000                  		dc.w SME_IMvhi_D2C-SME_IMvhi, SME_IMvhi_D3C-SME_IMvhi	
000253B0 0000 0000                  		dc.w SME_IMvhi_D4C-SME_IMvhi, SME_IMvhi_D5C-SME_IMvhi	
000253B4 0000 0000                  		dc.w SME_IMvhi_D6C-SME_IMvhi, SME_IMvhi_D7C-SME_IMvhi	
000253B8 0000 0000                  		dc.w SME_IMvhi_DA5-SME_IMvhi, SME_IMvhi_DB5-SME_IMvhi	
000253BC 0000 0000                  		dc.w SME_IMvhi_DC5-SME_IMvhi, SME_IMvhi_DE9-SME_IMvhi	
000253C0 0000 0000                  		dc.w SME_IMvhi_DF9-SME_IMvhi, SME_IMvhi_DFF-SME_IMvhi	
000253C4 0000 0000                  		dc.w SME_IMvhi_E05-SME_IMvhi, SME_IMvhi_E29-SME_IMvhi	
000253C8 0000 0000                  		dc.w SME_IMvhi_E39-SME_IMvhi, SME_IMvhi_E3F-SME_IMvhi	
000253CC 0000 0000                  		dc.w SME_IMvhi_E4A-SME_IMvhi, SME_IMvhi_E55-SME_IMvhi	
000253D0 0000 0000                  		dc.w SME_IMvhi_E6F-SME_IMvhi, SME_IMvhi_E8E-SME_IMvhi	
000253D4 0000 0000                  		dc.w SME_IMvhi_EA3-SME_IMvhi, SME_IMvhi_EB3-SME_IMvhi	
000253D8 0000 0000                  		dc.w SME_IMvhi_EB9-SME_IMvhi, SME_IMvhi_EBF-SME_IMvhi	
000253DC 0000 0000                  		dc.w SME_IMvhi_ECF-SME_IMvhi, SME_IMvhi_EDF-SME_IMvhi	
000253E0 0000 0000                  		dc.w SME_IMvhi_EE5-SME_IMvhi, SME_IMvhi_EF5-SME_IMvhi	
000253E4 0000 0000                  		dc.w SME_IMvhi_F00-SME_IMvhi, SME_IMvhi_F1F-SME_IMvhi	
000253E8 0000 0000                  		dc.w SME_IMvhi_F3E-SME_IMvhi, SME_IMvhi_F53-SME_IMvhi	
000253EC 0000 0000                  		dc.w SME_IMvhi_F63-SME_IMvhi, SME_IMvhi_F7D-SME_IMvhi	
000253F0 0000 0000                  		dc.w SME_IMvhi_F92-SME_IMvhi, SME_IMvhi_FA2-SME_IMvhi	
000253F4 0000 0000                  		dc.w SME_IMvhi_FBC-SME_IMvhi, SME_IMvhi_FCC-SME_IMvhi	
000253F8 0000 0000                  		dc.w SME_IMvhi_FCD-SME_IMvhi, SME_IMvhi_FCE-SME_IMvhi	
000253FC 00                         SME_IMvhi_198:	dc.b 0	
000253FD 04                         SME_IMvhi_199:	dc.b 4	
000253FE EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00025403 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
00025408 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
0002540D 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00025412 09                         SME_IMvhi_1AE:	dc.b 9	
00025413 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00025418 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
0002541D 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00025422 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00025427 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
0002542C F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00025431 FC00 000D F8               		dc.b $FC, 0, 0, $D, $F8	
00025436 FC00 000E 08               		dc.b $FC, 0, 0, $E, 8	
0002543B F404 000F F8               		dc.b $F4, 4, 0, $F, $F8	
00025440 0A                         SME_IMvhi_1DC:	dc.b $A	
00025441 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00025446 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
0002544B 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00025450 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00025455 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
0002545A F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
0002545F FC00 000D 08               		dc.b $FC, 0, 0, $D, 8	
00025464 F400 000E F8               		dc.b $F4, 0, 0, $E, $F8	
00025469 F400 000F 00               		dc.b $F4, 0, 0, $F, 0	
0002546E FC00 0010 F8               		dc.b $FC, 0, 0, $10, $F8	
00025473 04                         SME_IMvhi_20F:	dc.b 4	
00025474 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00025479 F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
0002547E FC00 100D 08               		dc.b $FC, 0, $10, $D, 8	
00025483 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00025488 03                         SME_IMvhi_224:	dc.b 3	
00025489 EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
0002548E FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025493 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00025498 03                         SME_IMvhi_234:	dc.b 3	
00025499 EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
0002549E FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
000254A3 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
000254A8 04                         SME_IMvhi_244:	dc.b 4	
000254A9 EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
000254AE FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
000254B3 0C04 000C 00               		dc.b $C, 4, 0, $C, 0	
000254B8 0C00 000E F8               		dc.b $C, 0, 0, $E, $F8	
000254BD 02                         SME_IMvhi_259:	dc.b 2	
000254BE F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
000254C3 0401 000C 08               		dc.b 4, 1, 0, $C, 8	
000254C8 03                         SME_IMvhi_264:	dc.b 3	
000254C9 FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
000254CE FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
000254D3 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
000254D8 03                         SME_IMvhi_274:	dc.b 3	
000254D9 FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
000254DE FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
000254E3 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
000254E8 03                         SME_IMvhi_284:	dc.b 3	
000254E9 F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
000254EE EC08 000C F0               		dc.b $EC, 8, 0, $C, $F0	
000254F3 FC02 000F 08               		dc.b $FC, 2, 0, $F, 8	
000254F8 04                         SME_IMvhi_294:	dc.b 4	
000254F9 0408 0000 F0               		dc.b 4, 8, 0, 0, $F0	
000254FE 0C08 0003 F8               		dc.b $C, 8, 0, 3, $F8	
00025503 EC0A 0006 F0               		dc.b $EC, $A, 0, 6, $F0	
00025508 F400 000F 08               		dc.b $F4, 0, 0, $F, 8	
0002550D 03                         SME_IMvhi_2A9:	dc.b 3	
0002550E EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
00025513 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
00025518 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002551D 07                         SME_IMvhi_2B9:	dc.b 7	
0002551E FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00025523 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
00025528 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
0002552D F300 000E F5               		dc.b $F3, 0, 0, $E, $F5	
00025532 EB05 000F FD               		dc.b $EB, 5, 0, $F, $FD	
00025537 EB00 0013 F5               		dc.b $EB, 0, 0, $13, $F5	
0002553C F300 0014 ED               		dc.b $F3, 0, 0, $14, $ED	
00025541 05                         SME_IMvhi_2DD:	dc.b 5	
00025542 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
00025547 F400 000C F5               		dc.b $F4, 0, 0, $C, $F5	
0002554C EC05 000D FD               		dc.b $EC, 5, 0, $D, $FD	
00025551 EC00 0011 F5               		dc.b $EC, 0, 0, $11, $F5	
00025556 F400 0012 ED               		dc.b $F4, 0, 0, $12, $ED	
0002555B 02                         SME_IMvhi_2F7:	dc.b 2	
0002555C FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
00025561 ED09 0009 F5               		dc.b $ED, 9, 0, 9, $F5	
00025566 03                         SME_IMvhi_302:	dc.b 3	
00025567 F30F 0000 F0               		dc.b $F3, $F, 0, 0, $F0	
0002556C EB0C 0010 F0               		dc.b $EB, $C, 0, $10, $F0	
00025571 0500 0014 10               		dc.b 5, 0, 0, $14, $10	
00025576 04                         SME_IMvhi_312:	dc.b 4	
00025577 EB09 0000 F5               		dc.b $EB, 9, 0, 0, $F5	
0002557C FB09 0006 ED               		dc.b $FB, 9, 0, 6, $ED	
00025581 FB06 000C 05               		dc.b $FB, 6, 0, $C, 5	
00025586 0B04 0012 ED               		dc.b $B, 4, 0, $12, $ED	
0002558B 02                         SME_IMvhi_327:	dc.b 2	
0002558C EC09 0000 F6               		dc.b $EC, 9, 0, 0, $F6	
00025591 FC0E 0006 EE               		dc.b $FC, $E, 0, 6, $EE	
00025596 03                         SME_IMvhi_332:	dc.b 3	
00025597 ED09 0000 F6               		dc.b $ED, 9, 0, 0, $F6	
0002559C FD06 0006 F6               		dc.b $FD, 6, 0, 6, $F6	
000255A1 FD00 000C 06               		dc.b $FD, 0, 0, $C, 6	
000255A6 05                         SME_IMvhi_342:	dc.b 5	
000255A7 FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
000255AC 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
000255B1 F500 000A EE               		dc.b $F5, 0, 0, $A, $EE	
000255B6 ED01 000B F6               		dc.b $ED, 1, 0, $B, $F6	
000255BB ED05 000D FE               		dc.b $ED, 5, 0, $D, $FE	
000255C0 05                         SME_IMvhi_35C:	dc.b 5	
000255C1 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
000255C6 EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
000255CB FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
000255D0 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
000255D5 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
000255DA 06                         SME_IMvhi_376:	dc.b 6	
000255DB ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
000255E0 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
000255E5 FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
000255EA 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
000255EF FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
000255F4 F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
000255F9 04                         SME_IMvhi_395:	dc.b 4	
000255FA EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000255FF EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025604 FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
00025609 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
0002560E 03                         SME_IMvhi_3AA:	dc.b 3	
0002560F ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
00025614 ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
00025619 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
0002561E 05                         SME_IMvhi_3BA:	dc.b 5	
0002561F EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00025624 EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
00025629 FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
0002562E 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
00025633 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
00025638 04                         SME_IMvhi_3D4:	dc.b 4	
00025639 EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
0002563E EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
00025643 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
00025648 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
0002564D 03                         SME_IMvhi_3E9:	dc.b 3	
0002564E ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
00025653 ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
00025658 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
0002565D 05                         SME_IMvhi_3F9:	dc.b 5	
0002565E ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
00025663 ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
00025668 FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
0002566D FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
00025672 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
00025677 04                         SME_IMvhi_413:	dc.b 4	
00025678 F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
0002567D EB09 0008 FD               		dc.b $EB, 9, 0, 8, $FD	
00025682 FB04 000E FD               		dc.b $FB, 4, 0, $E, $FD	
00025687 0309 0010 FD               		dc.b 3, 9, 0, $10, $FD	
0002568C 02                         SME_IMvhi_428:	dc.b 2	
0002568D F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
00025692 EC0B 0008 FD               		dc.b $EC, $B, 0, 8, $FD	
00025697 02                         SME_IMvhi_433:	dc.b 2	
00025698 F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
0002569D F406 0009 ED               		dc.b $F4, 6, 0, 9, $ED	
000256A2 05                         SME_IMvhi_43E:	dc.b 5	
000256A3 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
000256A8 F10C 0001 F4               		dc.b $F1, $C, 0, 1, $F4	
000256AD F100 0005 EC               		dc.b $F1, 0, 0, 5, $EC	
000256B2 F90E 0006 EC               		dc.b $F9, $E, 0, 6, $EC	
000256B7 F902 0012 0C               		dc.b $F9, 2, 0, $12, $C	
000256BC 04                         SME_IMvhi_458:	dc.b 4	
000256BD F306 0000 EC               		dc.b $F3, 6, 0, 0, $EC	
000256C2 EB09 0006 FC               		dc.b $EB, 9, 0, 6, $FC	
000256C7 FB04 000C FC               		dc.b $FB, 4, 0, $C, $FC	
000256CC 0309 000E FC               		dc.b 3, 9, 0, $E, $FC	
000256D1 02                         SME_IMvhi_46D:	dc.b 2	
000256D2 F306 0000 ED               		dc.b $F3, 6, 0, 0, $ED	
000256D7 F30B 0006 FD               		dc.b $F3, $B, 0, 6, $FD	
000256DC 03                         SME_IMvhi_478:	dc.b 3	
000256DD F408 0000 ED               		dc.b $F4, 8, 0, 0, $ED	
000256E2 FC0D 0003 ED               		dc.b $FC, $D, 0, 3, $ED	
000256E7 FC01 000B 0D               		dc.b $FC, 1, 0, $B, $D	
000256EC 03                         SME_IMvhi_488:	dc.b 3	
000256ED F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
000256F2 EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
000256F7 F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
000256FC 06                         SME_IMvhi_498:	dc.b 6	
000256FD FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00025702 EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
00025707 F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
0002570C F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00025711 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
00025716 FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
0002571B 06                         SME_IMvhi_4B7:	dc.b 6	
0002571C FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00025721 E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
00025726 EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
0002572B F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
00025730 F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
00025735 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
0002573A 04                         SME_IMvhi_4D6:	dc.b 4	
0002573B FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00025740 F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
00025745 EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
0002574A 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
0002574F 03                         SME_IMvhi_4EB:	dc.b 3	
00025750 E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
00025755 F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
0002575A 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
0002575F 05                         SME_IMvhi_4FB:	dc.b 5	
00025760 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00025765 EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
0002576A F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
0002576F F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
00025774 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
00025779 04                         SME_IMvhi_515:	dc.b 4	
0002577A FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
0002577F F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
00025784 EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
00025789 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
0002578E 03                         SME_IMvhi_52A:	dc.b 3	
0002578F EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
00025794 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
00025799 EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
0002579E 05                         SME_IMvhi_53A:	dc.b 5	
0002579F FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
000257A4 EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
000257A9 F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
000257AE 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
000257B3 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
000257B8 02                         SME_IMvhi_554:	dc.b 2	
000257B9 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
000257BE FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
000257C3 02                         SME_IMvhi_55F:	dc.b 2	
000257C4 FE0E 0000 EC               		dc.b $FE, $E, 0, 0, $EC	
000257C9 EE09 000C F4               		dc.b $EE, 9, 0, $C, $F4	
000257CE 02                         SME_IMvhi_56A:	dc.b 2	
000257CF EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
000257D4 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
000257D9 02                         SME_IMvhi_575:	dc.b 2	
000257DA EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
000257DF FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
000257E4 02                         SME_IMvhi_580:	dc.b 2	
000257E5 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
000257EA FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
000257EF 02                         SME_IMvhi_58B:	dc.b 2	
000257F0 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
000257F5 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
000257FA 02                         SME_IMvhi_596:	dc.b 2	
000257FB EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025800 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025805 02                         SME_IMvhi_5A1:	dc.b 2	
00025806 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002580B FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025810 04                         SME_IMvhi_5AC:	dc.b 4	
00025811 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025816 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002581B FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00025820 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00025825 03                         SME_IMvhi_5C1:	dc.b 3	
00025826 F60F 0000 F6               		dc.b $F6, $F, 0, 0, $F6	
0002582B EE02 0010 EE               		dc.b $EE, 2, 0, $10, $EE	
00025830 EE08 0013 F6               		dc.b $EE, 8, 0, $13, $F6	
00025835 03                         SME_IMvhi_5D1:	dc.b 3	
00025836 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002583B EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025840 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00025845 03                         SME_IMvhi_5E1:	dc.b 3	
00025846 FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
0002584B EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
00025850 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00025855 04                         SME_IMvhi_5F1:	dc.b 4	
00025856 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002585B EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025860 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00025865 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
0002586A 03                         SME_IMvhi_606:	dc.b 3	
0002586B FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
00025870 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
00025875 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
0002587A 03                         SME_IMvhi_616:	dc.b 3	
0002587B EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025880 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025885 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
0002588A 03                         SME_IMvhi_626:	dc.b 3	
0002588B EE0D 0000 EE               		dc.b $EE, $D, 0, 0, $EE	
00025890 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00025895 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
0002589A 02                         SME_IMvhi_636:	dc.b 2	
0002589B F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000258A0 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000258A5 02                         SME_IMvhi_641:	dc.b 2	
000258A6 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000258AB F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000258B0 02                         SME_IMvhi_64C:	dc.b 2	
000258B1 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000258B6 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000258BB 02                         SME_IMvhi_657:	dc.b 2	
000258BC F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000258C1 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000258C6 02                         SME_IMvhi_662:	dc.b 2	
000258C7 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000258CC F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000258D1 02                         SME_IMvhi_66D:	dc.b 2	
000258D2 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000258D7 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000258DC 02                         SME_IMvhi_678:	dc.b 2	
000258DD F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000258E2 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000258E7 02                         SME_IMvhi_683:	dc.b 2	
000258E8 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000258ED F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000258F2 04                         SME_IMvhi_68E:	dc.b 4	
000258F3 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
000258F8 F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
000258FD EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025902 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
00025907 03                         SME_IMvhi_6A3:	dc.b 3	
00025908 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002590D 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00025912 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025917 02                         SME_IMvhi_6B3:	dc.b 2	
00025918 F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
0002591D EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025922 03                         SME_IMvhi_6BE:	dc.b 3	
00025923 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
00025928 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
0002592D F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025932 04                         SME_IMvhi_6CE:	dc.b 4	
00025933 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
00025938 F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002593D EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025942 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
00025947 03                         SME_IMvhi_6E3:	dc.b 3	
00025948 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002594D 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00025952 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025957 02                         SME_IMvhi_6F3:	dc.b 2	
00025958 F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
0002595D EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025962 03                         SME_IMvhi_6FE:	dc.b 3	
00025963 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
00025968 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
0002596D F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025972 03                         SME_IMvhi_70E:	dc.b 3	
00025973 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
00025978 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
0002597D F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
00025982 03                         SME_IMvhi_71E:	dc.b 3	
00025983 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
00025988 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
0002598D F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
00025992 09                         SME_IMvhi_72E:	dc.b 9	
00025993 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
00025998 F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
0002599D 1000 0009 F3               		dc.b $10, 0, 0, 9, $F3	
000259A2 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
000259A7 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
000259AC 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
000259B1 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
000259B6 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
000259BB F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
000259C0 09                         SME_IMvhi_75C:	dc.b 9	
000259C1 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
000259C6 F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
000259CB 1000 0009 F0               		dc.b $10, 0, 0, 9, $F0	
000259D0 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
000259D5 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
000259DA 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
000259DF F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
000259E4 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
000259E9 F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
000259EE 03                         SME_IMvhi_78A:	dc.b 3	
000259EF F20F 0000 F5               		dc.b $F2, $F, 0, 0, $F5	
000259F4 0201 0010 ED               		dc.b 2, 1, 0, $10, $ED	
000259F9 EA0C 0012 F5               		dc.b $EA, $C, 0, $12, $F5	
000259FE 03                         SME_IMvhi_79A:	dc.b 3	
000259FF F40B 0000 EF               		dc.b $F4, $B, 0, 0, $EF	
00025A04 EC07 000C 07               		dc.b $EC, 7, 0, $C, 7	
00025A09 EC04 0014 F7               		dc.b $EC, 4, 0, $14, $F7	
00025A0E 03                         SME_IMvhi_7AA:	dc.b 3	
00025A0F F30F 0000 F4               		dc.b $F3, $F, 0, 0, $F4	
00025A14 EB0C 0010 F4               		dc.b $EB, $C, 0, $10, $F4	
00025A19 0300 0014 EC               		dc.b 3, 0, 0, $14, $EC	
00025A1E 05                         SME_IMvhi_7BA:	dc.b 5	
00025A1F F10E 0000 F7               		dc.b $F1, $E, 0, 0, $F7	
00025A24 090C 000C EF               		dc.b 9, $C, 0, $C, $EF	
00025A29 F901 0010 EF               		dc.b $F9, 1, 0, $10, $EF	
00025A2E 1104 0012 F7               		dc.b $11, 4, 0, $12, $F7	
00025A33 E908 0014 F7               		dc.b $E9, 8, 0, $14, $F7	
00025A38 03                         SME_IMvhi_7D4:	dc.b 3	
00025A39 ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
00025A3E ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
00025A43 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
00025A48 03                         SME_IMvhi_7E4:	dc.b 3	
00025A49 ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
00025A4E ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
00025A53 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
00025A58 05                         SME_IMvhi_7F4:	dc.b 5	
00025A59 0509 0000 F6               		dc.b 5, 9, 0, 0, $F6	
00025A5E ED02 0006 0E               		dc.b $ED, 2, 0, 6, $E	
00025A63 0500 0009 0E               		dc.b 5, 0, 0, 9, $E	
00025A68 ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
00025A6D ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
00025A72 05                         SME_IMvhi_80E:	dc.b 5	
00025A73 ED02 0000 0E               		dc.b $ED, 2, 0, 0, $E	
00025A78 0509 0003 F6               		dc.b 5, 9, 0, 3, $F6	
00025A7D 0800 0009 0E               		dc.b 8, 0, 0, 9, $E	
00025A82 ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
00025A87 ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
00025A8C 04                         SME_IMvhi_828:	dc.b 4	
00025A8D F00E 0000 E9               		dc.b $F0, $E, 0, 0, $E9	
00025A92 0808 000C F9               		dc.b 8, 8, 0, $C, $F9	
00025A97 E808 000F F1               		dc.b $E8, 8, 0, $F, $F1	
00025A9C F002 0012 09               		dc.b $F0, 2, 0, $12, 9	
00025AA1 04                         SME_IMvhi_83D:	dc.b 4	
00025AA2 E60B 0000 F3               		dc.b $E6, $B, 0, 0, $F3	
00025AA7 0608 000C F3               		dc.b 6, 8, 0, $C, $F3	
00025AAC F602 000F 0B               		dc.b $F6, 2, 0, $F, $B	
00025AB1 EE02 0012 EB               		dc.b $EE, 2, 0, $12, $EB	
00025AB6 04                         SME_IMvhi_852:	dc.b 4	
00025AB7 EA0F 0000 EA               		dc.b $EA, $F, 0, 0, $EA	
00025ABC F202 0010 0A               		dc.b $F2, 2, 0, $10, $A	
00025AC1 0A00 0013 02               		dc.b $A, 0, 0, $13, 2	
00025AC6 0A00 0014 0A               		dc.b $A, 0, 0, $14, $A	
00025ACB 04                         SME_IMvhi_867:	dc.b 4	
00025ACC E80F 0000 ED               		dc.b $E8, $F, 0, 0, $ED	
00025AD1 0808 0010 F5               		dc.b 8, 8, 0, $10, $F5	
00025AD6 F801 0013 0D               		dc.b $F8, 1, 0, $13, $D	
00025ADB F001 0015 E5               		dc.b $F0, 1, 0, $15, $E5	
00025AE0 01                         SME_IMvhi_87C:	dc.b 1	
00025AE1 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025AE6 01                         SME_IMvhi_882:	dc.b 1	
00025AE7 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025AEC 01                         SME_IMvhi_888:	dc.b 1	
00025AED F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025AF2 01                         SME_IMvhi_88E:	dc.b 1	
00025AF3 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025AF8 01                         SME_IMvhi_894:	dc.b 1	
00025AF9 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025AFE 01                         SME_IMvhi_89A:	dc.b 1	
00025AFF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025B04 01                         SME_IMvhi_8A0:	dc.b 1	
00025B05 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025B0A 03                         SME_IMvhi_8A6:	dc.b 3	
00025B0B F00A 0000 F0               		dc.b $F0, $A, 0, 0, $F0	
00025B10 080C 0009 F0               		dc.b 8, $C, 0, 9, $F0	
00025B15 F002 000D 08               		dc.b $F0, 2, 0, $D, 8	
00025B1A 01                         SME_IMvhi_8B6:	dc.b 1	
00025B1B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025B20 02                         SME_IMvhi_8BC:	dc.b 2	
00025B21 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC	
00025B26 F402 000C 0C               		dc.b $F4, 2, 0, $C, $C	
00025B2B 01                         SME_IMvhi_8C7:	dc.b 1	
00025B2C F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025B31 02                         SME_IMvhi_8CD:	dc.b 2	
00025B32 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
00025B37 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
00025B3C 01                         SME_IMvhi_8D8:	dc.b 1	
00025B3D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025B42 04                         SME_IMvhi_8DE:	dc.b 4	
00025B43 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
00025B48 FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
00025B4D F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
00025B52 F500 0014 08               		dc.b $F5, 0, 0, $14, 8	
00025B57 07                         SME_IMvhi_8F3:	dc.b 7	
00025B58 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
00025B5D FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
00025B62 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
00025B67 F500 0010 E8               		dc.b $F5, 0, 0, $10, $E8	
00025B6C F500 0011 08               		dc.b $F5, 0, 0, $11, 8	
00025B71 0D00 0012 F8               		dc.b $D, 0, 0, $12, $F8	
00025B76 FD00 0013 E8               		dc.b $FD, 0, 0, $13, $E8	
00025B7B 05                         SME_IMvhi_917:	dc.b 5	
00025B7C F502 0000 F0               		dc.b $F5, 2, 0, 0, $F0	
00025B81 F50B 0003 F8               		dc.b $F5, $B, 0, 3, $F8	
00025B86 ED08 000F F0               		dc.b $ED, 8, 0, $F, $F0	
00025B8B F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
00025B90 ED00 0014 08               		dc.b $ED, 0, 0, $14, 8	
00025B95 03                         SME_IMvhi_931:	dc.b 3	
00025B96 F50B 0000 F8               		dc.b $F5, $B, 0, 0, $F8	
00025B9B ED03 000C F0               		dc.b $ED, 3, 0, $C, $F0	
00025BA0 ED04 0010 F8               		dc.b $ED, 4, 0, $10, $F8	
00025BA5 05                         SME_IMvhi_941:	dc.b 5	
00025BA6 F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4	
00025BAB E80C 000C F4               		dc.b $E8, $C, 0, $C, $F4	
00025BB0 1004 0010 F4               		dc.b $10, 4, 0, $10, $F4	
00025BB5 0000 0012 EC               		dc.b 0, 0, 0, $12, $EC	
00025BBA F000 0013 0C               		dc.b $F0, 0, 0, $13, $C	
00025BBF 04                         SME_IMvhi_95B:	dc.b 4	
00025BC0 F402 0000 F8               		dc.b $F4, 2, 0, 0, $F8	
00025BC5 F402 0003 00               		dc.b $F4, 2, 0, 3, 0	
00025BCA F402 0006 08               		dc.b $F4, 2, 0, 6, 8	
00025BCF 0C08 0009 F8               		dc.b $C, 8, 0, 9, $F8	
00025BD4 04                         SME_IMvhi_970:	dc.b 4	
00025BD5 F404 0000 03               		dc.b $F4, 4, 0, 0, 3	
00025BDA FC0D 0002 F8               		dc.b $FC, $D, 0, 2, $F8	
00025BDF 0C08 000A F8               		dc.b $C, 8, 0, $A, $F8	
00025BE4 0C00 000D 10               		dc.b $C, 0, 0, $D, $10	
00025BE9 04                         SME_IMvhi_985:	dc.b 4	
00025BEA EC08 0800 E8               		dc.b $EC, 8, 8, 0, $E8	
00025BEF F402 0803 00               		dc.b $F4, 2, 8, 3, 0	
00025BF4 F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0	
00025BF9 EC00 0016 00               		dc.b $EC, 0, 0, $16, 0	
00025BFE 09                         SME_IMvhi_99A:	dc.b 9	
00025BFF F402 0000 00               		dc.b $F4, 2, 0, 0, 0	
00025C04 EC0C 0003 E8               		dc.b $EC, $C, 0, 3, $E8	
00025C09 F407 0007 E0               		dc.b $F4, 7, 0, 7, $E0	
00025C0E 0C00 080F F8               		dc.b $C, 0, 8, $F, $F8	
00025C13 F400 0010 F0               		dc.b $F4, 0, 0, $10, $F0	
00025C18 F402 0011 F8               		dc.b $F4, 2, 0, $11, $F8	
00025C1D 0400 0014 F0               		dc.b 4, 0, 0, $14, $F0	
00025C22 0C00 0015 F0               		dc.b $C, 0, 0, $15, $F0	
00025C27 FC00 0016 F0               		dc.b $FC, 0, 0, $16, $F0	
00025C2C 03                         SME_IMvhi_9C8:	dc.b 3	
00025C2D EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8	
00025C32 040D 080C E0               		dc.b 4, $D, 8, $C, $E0	
00025C37 0C00 1814 00               		dc.b $C, 0, $18, $14, 0	
00025C3C 03                         SME_IMvhi_9D8:	dc.b 3	
00025C3D F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
00025C42 0401 0010 E0               		dc.b 4, 1, 0, $10, $E0	
00025C47 EC0C 0012 E8               		dc.b $EC, $C, 0, $12, $E8	
00025C4C 03                         SME_IMvhi_9E8:	dc.b 3	
00025C4D F30F 0000 EC               		dc.b $F3, $F, 0, 0, $EC	
00025C52 EB0C 0010 EC               		dc.b $EB, $C, 0, $10, $EC	
00025C57 F303 0014 0C               		dc.b $F3, 3, 0, $14, $C	
00025C5C 00                         SME_IMvhi_9F8:	dc.b 0	
00025C5D 08                         SME_IMvhi_9F9:	dc.b 8	
00025C5E E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
00025C63 E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
00025C68 F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
00025C6D F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
00025C72 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
00025C77 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
00025C7C 0801 0013 F8               		dc.b 8, 1, 0, $13, $F8	
00025C81 1000 0015 10               		dc.b $10, 0, 0, $15, $10	
00025C86 07                         SME_IMvhi_A22:	dc.b 7	
00025C87 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
00025C8C E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
00025C91 F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
00025C96 F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
00025C9B F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
00025CA0 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
00025CA5 0801 0013 10               		dc.b 8, 1, 0, $13, $10	
00025CAA 04                         SME_IMvhi_A46:	dc.b 4	
00025CAB E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
00025CB0 F00A 0004 F8               		dc.b $F0, $A, 0, 4, $F8	
00025CB5 E801 000D 10               		dc.b $E8, 1, 0, $D, $10	
00025CBA 0809 000F F0               		dc.b 8, 9, 0, $F, $F0	
00025CBF 03                         SME_IMvhi_A5B:	dc.b 3	
00025CC0 F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
00025CC5 FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
00025CCA 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
00025CCF 03                         SME_IMvhi_A6B:	dc.b 3	
00025CD0 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025CD5 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025CDA 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00025CDF 03                         SME_IMvhi_A7B:	dc.b 3	
00025CE0 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025CE5 040C 0008 F4               		dc.b 4, $C, 0, 8, $F4	
00025CEA FC00 000C F4               		dc.b $FC, 0, 0, $C, $F4	
00025CEF 02                         SME_IMvhi_A8B:	dc.b 2	
00025CF0 F40A 0000 F0               		dc.b $F4, $A, 0, 0, $F0	
00025CF5 F40A 0800 08               		dc.b $F4, $A, 8, 0, 8	
00025CFA 03                         SME_IMvhi_A96:	dc.b 3	
00025CFB F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00025D00 040C 0808 FC               		dc.b 4, $C, 8, 8, $FC	
00025D05 FC00 080C 14               		dc.b $FC, 0, 8, $C, $14	
00025D0A 03                         SME_IMvhi_AA6:	dc.b 3	
00025D0B F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00025D10 FC05 0808 14               		dc.b $FC, 5, 8, 8, $14	
00025D15 0408 080C FC               		dc.b 4, 8, 8, $C, $FC	
00025D1A 03                         SME_IMvhi_AB6:	dc.b 3	
00025D1B F40D 0000 F4               		dc.b $F4, $D, 0, 0, $F4	
00025D20 FC00 0008 14               		dc.b $FC, 0, 0, 8, $14	
00025D25 040C 0009 FC               		dc.b 4, $C, 0, 9, $FC	
00025D2A 03                         SME_IMvhi_AC6:	dc.b 3	
00025D2B F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025D30 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025D35 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00025D3A 04                         SME_IMvhi_AD6:	dc.b 4	
00025D3B E90B 0000 F4               		dc.b $E9, $B, 0, 0, $F4	
00025D40 1100 000C FC               		dc.b $11, 0, 0, $C, $FC	
00025D45 0900 000D FC               		dc.b 9, 0, 0, $D, $FC	
00025D4A 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
00025D4F 08                         SME_IMvhi_AEB:	dc.b 8	
00025D50 E909 0000 F4               		dc.b $E9, 9, 0, 0, $F4	
00025D55 F901 0006 04               		dc.b $F9, 1, 0, 6, 4	
00025D5A 0900 0008 FC               		dc.b 9, 0, 0, 8, $FC	
00025D5F 1100 0009 FC               		dc.b $11, 0, 0, 9, $FC	
00025D64 F901 000A FC               		dc.b $F9, 1, 0, $A, $FC	
00025D69 F900 000C F4               		dc.b $F9, 0, 0, $C, $F4	
00025D6E 0100 000D F4               		dc.b 1, 0, 0, $D, $F4	
00025D73 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
00025D78 04                         SME_IMvhi_B14:	dc.b 4	
00025D79 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
00025D7E 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
00025D83 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
00025D88 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00025D8D 04                         SME_IMvhi_B29:	dc.b 4	
00025D8E F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
00025D93 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
00025D98 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
00025D9D F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00025DA2 05                         SME_IMvhi_B3E:	dc.b 5	
00025DA3 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
00025DA8 F001 0009 0C               		dc.b $F0, 1, 0, 9, $C	
00025DAD 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00025DB2 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
00025DB7 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
00025DBC 05                         SME_IMvhi_B58:	dc.b 5	
00025DBD E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
00025DC2 E801 0009 0C               		dc.b $E8, 1, 0, 9, $C	
00025DC7 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00025DCC 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
00025DD1 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
00025DD6 02                         SME_IMvhi_B72:	dc.b 2	
00025DD7 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00025DDC 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00025DE1 05                         SME_IMvhi_B7D:	dc.b 5	
00025DE2 0505 0000 EB               		dc.b 5, 5, 0, 0, $EB	
00025DE7 ED02 0004 F3               		dc.b $ED, 2, 0, 4, $F3	
00025DEC F503 0007 FB               		dc.b $F5, 3, 0, 7, $FB	
00025DF1 ED03 000B 03               		dc.b $ED, 3, 0, $B, 3	
00025DF6 ED00 000F FB               		dc.b $ED, 0, 0, $F, $FB	
00025DFB 03                         SME_IMvhi_B97:	dc.b 3	
00025DFC EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00025E01 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025E06 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00025E0B 05                         SME_IMvhi_BA7:	dc.b 5	
00025E0C 0D00 0000 EB               		dc.b $D, 0, 0, 0, $EB	
00025E11 F503 0001 F3               		dc.b $F5, 3, 0, 1, $F3	
00025E16 F503 0005 FB               		dc.b $F5, 3, 0, 5, $FB	
00025E1B F503 0009 03               		dc.b $F5, 3, 0, 9, 3	
00025E20 ED08 000D F3               		dc.b $ED, 8, 0, $D, $F3	
00025E25 02                         SME_IMvhi_BC1:	dc.b 2	
00025E26 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00025E2B 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00025E30 03                         SME_IMvhi_BCC:	dc.b 3	
00025E31 F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025E36 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025E3B ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
00025E40 03                         SME_IMvhi_BDC:	dc.b 3	
00025E41 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00025E46 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025E4B 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00025E50 03                         SME_IMvhi_BEC:	dc.b 3	
00025E51 F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025E56 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025E5B ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
00025E60 02                         SME_IMvhi_BFC:	dc.b 2	
00025E61 EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025E66 FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0	
00025E6B 03                         SME_IMvhi_C07:	dc.b 3	
00025E6C E80D 2000 EC               		dc.b $E8, $D, $20, 0, $EC	
00025E71 E801 2008 0C               		dc.b $E8, 1, $20, 8, $C	
00025E76 F80B 200A F4               		dc.b $F8, $B, $20, $A, $F4	
00025E7B 0B                         SME_IMvhi_C17:	dc.b $B	
00025E7C E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00025E81 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00025E86 1000 000A F4               		dc.b $10, 0, 0, $A, $F4	
00025E8B 0808 000B F4               		dc.b 8, 8, 0, $B, $F4	
00025E90 1000 000E 04               		dc.b $10, 0, 0, $E, 4	
00025E95 F800 000F FC               		dc.b $F8, 0, 0, $F, $FC	
00025E9A F800 0010 F4               		dc.b $F8, 0, 0, $10, $F4	
00025E9F F800 0011 04               		dc.b $F8, 0, 0, $11, 4	
00025EA4 0000 0012 FC               		dc.b 0, 0, 0, $12, $FC	
00025EA9 0000 0013 04               		dc.b 0, 0, 0, $13, 4	
00025EAE 0000 0014 F4               		dc.b 0, 0, 0, $14, $F4	
00025EB3 06                         SME_IMvhi_C4F:	dc.b 6	
00025EB4 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00025EB9 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00025EBE F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
00025EC3 1000 0010 F4               		dc.b $10, 0, 0, $10, $F4	
00025EC8 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
00025ECD 1000 0014 04               		dc.b $10, 0, 0, $14, 4	
00025ED2 03                         SME_IMvhi_C6E:	dc.b 3	
00025ED3 EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
00025ED8 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
00025EDD 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
00025EE2 07                         SME_IMvhi_C7E:	dc.b 7	
00025EE3 F801 0000 0C               		dc.b $F8, 1, 0, 0, $C	
00025EE8 080C 0002 F4               		dc.b 8, $C, 0, 2, $F4	
00025EED F801 0006 FC               		dc.b $F8, 1, 0, 6, $FC	
00025EF2 F000 0008 FC               		dc.b $F0, 0, 0, 8, $FC	
00025EF7 F801 0009 EC               		dc.b $F8, 1, 0, 9, $EC	
00025EFC F002 000B F4               		dc.b $F0, 2, 0, $B, $F4	
00025F01 F002 000E 04               		dc.b $F0, 2, 0, $E, 4	
00025F06 02                         SME_IMvhi_CA2:	dc.b 2	
00025F07 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00025F0C F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
00025F11 04                         SME_IMvhi_CAD:	dc.b 4	
00025F12 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025F17 F800 000C EC               		dc.b $F8, 0, 0, $C, $EC	
00025F1C F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025F21 0000 0011 EC               		dc.b 0, 0, 0, $11, $EC	
00025F26 03                         SME_IMvhi_CC2:	dc.b 3	
00025F27 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025F2C F801 000C EC               		dc.b $F8, 1, 0, $C, $EC	
00025F31 F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025F36 03                         SME_IMvhi_CD2:	dc.b 3	
00025F37 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025F3C F008 000C F4               		dc.b $F0, 8, 0, $C, $F4	
00025F41 F801 000F EC               		dc.b $F8, 1, 0, $F, $EC	
00025F46 04                         SME_IMvhi_CE2:	dc.b 4	
00025F47 0002 0000 F4               		dc.b 0, 2, 0, 0, $F4	
00025F4C F803 0003 FC               		dc.b $F8, 3, 0, 3, $FC	
00025F51 F803 0007 04               		dc.b $F8, 3, 0, 7, 4	
00025F56 F802 000B 0C               		dc.b $F8, 2, 0, $B, $C	
00025F5B 01                         SME_IMvhi_CF7:	dc.b 1	
00025F5C F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025F61 01                         SME_IMvhi_CFD:	dc.b 1	
00025F62 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025F67 01                         SME_IMvhi_D03:	dc.b 1	
00025F68 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025F6D 01                         SME_IMvhi_D09:	dc.b 1	
00025F6E F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025F73 02                         SME_IMvhi_D0F:	dc.b 2	
00025F74 F80B 0000 F4               		dc.b $F8, $B, 0, 0, $F4	
00025F79 F802 000C 0C               		dc.b $F8, 2, 0, $C, $C	
00025F7E 01                         SME_IMvhi_D1A:	dc.b 1	
00025F7F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025F84 01                         SME_IMvhi_D20:	dc.b 1	
00025F85 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025F8A 01                         SME_IMvhi_D26:	dc.b 1	
00025F8B F00B 0000 F5               		dc.b $F0, $B, 0, 0, $F5	
00025F90 03                         SME_IMvhi_D2C:	dc.b 3	
00025F91 E80F 0000 F1               		dc.b $E8, $F, 0, 0, $F1	
00025F96 0805 0010 F1               		dc.b 8, 5, 0, $10, $F1	
00025F9B 0801 0014 01               		dc.b 8, 1, 0, $14, 1	
00025FA0 03                         SME_IMvhi_D3C:	dc.b 3	
00025FA1 0809 0000 F1               		dc.b 8, 9, 0, 0, $F1	
00025FA6 E80B 0006 F1               		dc.b $E8, $B, 0, 6, $F1	
00025FAB 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00025FB0 03                         SME_IMvhi_D4C:	dc.b 3	
00025FB1 E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
00025FB6 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
00025FBB 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00025FC0 03                         SME_IMvhi_D5C:	dc.b 3	
00025FC1 E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
00025FC6 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
00025FCB 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00025FD0 03                         SME_IMvhi_D6C:	dc.b 3	
00025FD1 E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
00025FD6 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
00025FDB 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00025FE0 08                         SME_IMvhi_D7C:	dc.b 8	
00025FE1 0809 0000 F1               		dc.b 8, 9, 0, 0, $F1	
00025FE6 0000 0006 09               		dc.b 0, 0, 0, 6, 9	
00025FEB F002 0007 F9               		dc.b $F0, 2, 0, 7, $F9	
00025FF0 F001 000A 01               		dc.b $F0, 1, 0, $A, 1	
00025FF5 0000 000C F1               		dc.b 0, 0, 0, $C, $F1	
00025FFA 0000 000D 01               		dc.b 0, 0, 0, $D, 1	
00025FFF E802 000E F1               		dc.b $E8, 2, 0, $E, $F1	
00026004 E804 0011 F9               		dc.b $E8, 4, 0, $11, $F9	
00026009 03                         SME_IMvhi_DA5:	dc.b 3	
0002600A 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
0002600F EC0F 0003 EF               		dc.b $EC, $F, 0, 3, $EF	
00026014 E40C 0013 EF               		dc.b $E4, $C, 0, $13, $EF	
00026019 03                         SME_IMvhi_DB5:	dc.b 3	
0002601A 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
0002601F EC0F 0003 EF               		dc.b $EC, $F, 0, 3, $EF	
00026024 E408 0013 EF               		dc.b $E4, 8, 0, $13, $EF	
00026029 07                         SME_IMvhi_DC5:	dc.b 7	
0002602A 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
0002602F F402 0003 F7               		dc.b $F4, 2, 0, 3, $F7	
00026034 F402 0006 FF               		dc.b $F4, 2, 0, 6, $FF	
00026039 EC02 0009 07               		dc.b $EC, 2, 0, 9, 7	
0002603E 0400 000C EF               		dc.b 4, 0, 0, $C, $EF	
00026043 E403 000D EF               		dc.b $E4, 3, 0, $D, $EF	
00026048 E405 0011 F7               		dc.b $E4, 5, 0, $11, $F7	
0002604D 03                         SME_IMvhi_DE9:	dc.b 3	
0002604E FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00026053 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
00026058 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
0002605D 01                         SME_IMvhi_DF9:	dc.b 1	
0002605E FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
00026063 01                         SME_IMvhi_DFF:	dc.b 1	
00026064 FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
00026069 07                         SME_IMvhi_E05:	dc.b 7	
0002606A 0500 0000 10               		dc.b 5, 0, 0, 0, $10	
0002606F 0301 0001 F0               		dc.b 3, 1, 0, 1, $F0	
00026074 0301 0003 F8               		dc.b 3, 1, 0, 3, $F8	
00026079 FB02 0005 00               		dc.b $FB, 2, 0, 5, 0	
0002607E FB00 0008 F8               		dc.b $FB, 0, 0, 8, $F8	
00026083 FB00 0009 F0               		dc.b $FB, 0, 0, 9, $F0	
00026088 FB02 000A 08               		dc.b $FB, 2, 0, $A, 8	
0002608D 03                         SME_IMvhi_E29:	dc.b 3	
0002608E FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00026093 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
00026098 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
0002609D 01                         SME_IMvhi_E39:	dc.b 1	
0002609E FC0E 0000 EE               		dc.b $FC, $E, 0, 0, $EE	
000260A3 02                         SME_IMvhi_E3F:	dc.b 2	
000260A4 FD06 0000 F6               		dc.b $FD, 6, 0, 0, $F6	
000260A9 FD00 0006 06               		dc.b $FD, 0, 0, 6, 6	
000260AE 02                         SME_IMvhi_E4A:	dc.b 2	
000260AF FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
000260B4 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
000260B9 05                         SME_IMvhi_E55:	dc.b 5	
000260BA EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
000260BF EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
000260C4 FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
000260C9 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
000260CE 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
000260D3 06                         SME_IMvhi_E6F:	dc.b 6	
000260D4 ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
000260D9 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
000260DE FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
000260E3 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
000260E8 FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
000260ED F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
000260F2 04                         SME_IMvhi_E8E:	dc.b 4	
000260F3 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000260F8 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000260FD FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
00026102 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
00026107 03                         SME_IMvhi_EA3:	dc.b 3	
00026108 EB09 0000 FD               		dc.b $EB, 9, 0, 0, $FD	
0002610D FB04 0006 FD               		dc.b $FB, 4, 0, 6, $FD	
00026112 0309 0008 FD               		dc.b 3, 9, 0, 8, $FD	
00026117 01                         SME_IMvhi_EB3:	dc.b 1	
00026118 EC0B 0000 FD               		dc.b $EC, $B, 0, 0, $FD	
0002611D 01                         SME_IMvhi_EB9:	dc.b 1	
0002611E F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
00026123 03                         SME_IMvhi_EBF:	dc.b 3	
00026124 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
00026129 F90A 0001 FC               		dc.b $F9, $A, 0, 1, $FC	
0002612E F108 000A FC               		dc.b $F1, 8, 0, $A, $FC	
00026133 03                         SME_IMvhi_ECF:	dc.b 3	
00026134 EB09 0000 FC               		dc.b $EB, 9, 0, 0, $FC	
00026139 FB04 0006 FC               		dc.b $FB, 4, 0, 6, $FC	
0002613E 0309 0008 FC               		dc.b 3, 9, 0, 8, $FC	
00026143 01                         SME_IMvhi_EDF:	dc.b 1	
00026144 F30B 0000 FD               		dc.b $F3, $B, 0, 0, $FD	
00026149 03                         SME_IMvhi_EE5:	dc.b 3	
0002614A FC01 0000 0D               		dc.b $FC, 1, 0, 0, $D	
0002614F F400 0002 FD               		dc.b $F4, 0, 0, 2, $FD	
00026154 FC05 0003 FD               		dc.b $FC, 5, 0, 3, $FD	
00026159 02                         SME_IMvhi_EF5:	dc.b 2	
0002615A EC00 0000 FD               		dc.b $EC, 0, 0, 0, $FD	
0002615F F40A 0001 FD               		dc.b $F4, $A, 0, 1, $FD	
00026164 06                         SME_IMvhi_F00:	dc.b 6	
00026165 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
0002616A EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
0002616F F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
00026174 F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00026179 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
0002617E FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
00026183 06                         SME_IMvhi_F1F:	dc.b 6	
00026184 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00026189 E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
0002618E EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
00026193 F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
00026198 F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
0002619D 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
000261A2 04                         SME_IMvhi_F3E:	dc.b 4	
000261A3 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
000261A8 F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
000261AD EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
000261B2 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
000261B7 03                         SME_IMvhi_F53:	dc.b 3	
000261B8 E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
000261BD F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
000261C2 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
000261C7 05                         SME_IMvhi_F63:	dc.b 5	
000261C8 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
000261CD EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
000261D2 F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
000261D7 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
000261DC 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
000261E1 04                         SME_IMvhi_F7D:	dc.b 4	
000261E2 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
000261E7 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
000261EC EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
000261F1 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
000261F6 03                         SME_IMvhi_F92:	dc.b 3	
000261F7 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
000261FC 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
00026201 EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
00026206 05                         SME_IMvhi_FA2:	dc.b 5	
00026207 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
0002620C EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
00026211 F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
00026216 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
0002621B 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
00026220 03                         SME_IMvhi_FBC:	dc.b 3	
00026221 F80E 0000 F8               		dc.b $F8, $E, 0, 0, $F8	
00026226 1008 000C F0               		dc.b $10, 8, 0, $C, $F0	
0002622B 0800 000F F0               		dc.b 8, 0, 0, $F, $F0	
00026230 00                         SME_IMvhi_FCC:	dc.b 0	
00026231 00                         SME_IMvhi_FCD:	dc.b 0	
00026232 00                         SME_IMvhi_FCE:	dc.b 0	
00026234 00                         		even
00026234 00                         		even
00026234                            SonicDynPLC:	include	"_maps\Sonic - Dynamic Gfx Script.asm"
00026234                            ; --------------------------------------------------------------------------------
00026234                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00026234                            
00026234                            SME_NWVLZ:	
00026234 0000 0000                  		dc.w SME_NWVLZ_198-SME_NWVLZ, SME_NWVLZ_199-SME_NWVLZ	
00026238 0000 0000                  		dc.w SME_NWVLZ_1A2-SME_NWVLZ, SME_NWVLZ_1B5-SME_NWVLZ	
0002623C 0000 0000                  		dc.w SME_NWVLZ_1CA-SME_NWVLZ, SME_NWVLZ_1D3-SME_NWVLZ	
00026240 0000 0000                  		dc.w SME_NWVLZ_1DA-SME_NWVLZ, SME_NWVLZ_1E1-SME_NWVLZ	
00026244 0000 0000                  		dc.w SME_NWVLZ_1EA-SME_NWVLZ, SME_NWVLZ_1EF-SME_NWVLZ	
00026248 0000 0000                  		dc.w SME_NWVLZ_1F6-SME_NWVLZ, SME_NWVLZ_1FD-SME_NWVLZ	
0002624C 0000 0000                  		dc.w SME_NWVLZ_204-SME_NWVLZ, SME_NWVLZ_20D-SME_NWVLZ	
00026250 0000 0000                  		dc.w SME_NWVLZ_214-SME_NWVLZ, SME_NWVLZ_223-SME_NWVLZ	
00026254 0000 0000                  		dc.w SME_NWVLZ_22E-SME_NWVLZ, SME_NWVLZ_235-SME_NWVLZ	
00026258 0000 0000                  		dc.w SME_NWVLZ_23C-SME_NWVLZ, SME_NWVLZ_245-SME_NWVLZ	
0002625C 0000 0000                  		dc.w SME_NWVLZ_24A-SME_NWVLZ, SME_NWVLZ_251-SME_NWVLZ	
00026260 0000 0000                  		dc.w SME_NWVLZ_25C-SME_NWVLZ, SME_NWVLZ_267-SME_NWVLZ	
00026264 0000 0000                  		dc.w SME_NWVLZ_274-SME_NWVLZ, SME_NWVLZ_27D-SME_NWVLZ	
00026268 0000 0000                  		dc.w SME_NWVLZ_284-SME_NWVLZ, SME_NWVLZ_28F-SME_NWVLZ	
0002626C 0000 0000                  		dc.w SME_NWVLZ_298-SME_NWVLZ, SME_NWVLZ_29F-SME_NWVLZ	
00026270 0000 0000                  		dc.w SME_NWVLZ_2AA-SME_NWVLZ, SME_NWVLZ_2B3-SME_NWVLZ	
00026274 0000 0000                  		dc.w SME_NWVLZ_2B8-SME_NWVLZ, SME_NWVLZ_2BD-SME_NWVLZ	
00026278 0000 0000                  		dc.w SME_NWVLZ_2C8-SME_NWVLZ, SME_NWVLZ_2D1-SME_NWVLZ	
0002627C 0000 0000                  		dc.w SME_NWVLZ_2D6-SME_NWVLZ, SME_NWVLZ_2DD-SME_NWVLZ	
00026280 0000 0000                  		dc.w SME_NWVLZ_2E4-SME_NWVLZ, SME_NWVLZ_2F1-SME_NWVLZ	
00026284 0000 0000                  		dc.w SME_NWVLZ_2FE-SME_NWVLZ, SME_NWVLZ_307-SME_NWVLZ	
00026288 0000 0000                  		dc.w SME_NWVLZ_30E-SME_NWVLZ, SME_NWVLZ_319-SME_NWVLZ	
0002628C 0000 0000                  		dc.w SME_NWVLZ_322-SME_NWVLZ, SME_NWVLZ_329-SME_NWVLZ	
00026290 0000 0000                  		dc.w SME_NWVLZ_334-SME_NWVLZ, SME_NWVLZ_339-SME_NWVLZ	
00026294 0000 0000                  		dc.w SME_NWVLZ_33E-SME_NWVLZ, SME_NWVLZ_343-SME_NWVLZ	
00026298 0000 0000                  		dc.w SME_NWVLZ_348-SME_NWVLZ, SME_NWVLZ_34D-SME_NWVLZ	
0002629C 0000 0000                  		dc.w SME_NWVLZ_352-SME_NWVLZ, SME_NWVLZ_357-SME_NWVLZ	
000262A0 0000 0000                  		dc.w SME_NWVLZ_35C-SME_NWVLZ, SME_NWVLZ_365-SME_NWVLZ	
000262A4 0000 0000                  		dc.w SME_NWVLZ_36C-SME_NWVLZ, SME_NWVLZ_373-SME_NWVLZ	
000262A8 0000 0000                  		dc.w SME_NWVLZ_37A-SME_NWVLZ, SME_NWVLZ_383-SME_NWVLZ	
000262AC 0000 0000                  		dc.w SME_NWVLZ_38A-SME_NWVLZ, SME_NWVLZ_391-SME_NWVLZ	
000262B0 0000 0000                  		dc.w SME_NWVLZ_398-SME_NWVLZ, SME_NWVLZ_39D-SME_NWVLZ	
000262B4 0000 0000                  		dc.w SME_NWVLZ_3A2-SME_NWVLZ, SME_NWVLZ_3A7-SME_NWVLZ	
000262B8 0000 0000                  		dc.w SME_NWVLZ_3AC-SME_NWVLZ, SME_NWVLZ_3B1-SME_NWVLZ	
000262BC 0000 0000                  		dc.w SME_NWVLZ_3B6-SME_NWVLZ, SME_NWVLZ_3BB-SME_NWVLZ	
000262C0 0000 0000                  		dc.w SME_NWVLZ_3C0-SME_NWVLZ, SME_NWVLZ_3C9-SME_NWVLZ	
000262C4 0000 0000                  		dc.w SME_NWVLZ_3D0-SME_NWVLZ, SME_NWVLZ_3D5-SME_NWVLZ	
000262C8 0000 0000                  		dc.w SME_NWVLZ_3DC-SME_NWVLZ, SME_NWVLZ_3E5-SME_NWVLZ	
000262CC 0000 0000                  		dc.w SME_NWVLZ_3EC-SME_NWVLZ, SME_NWVLZ_3F1-SME_NWVLZ	
000262D0 0000 0000                  		dc.w SME_NWVLZ_3F8-SME_NWVLZ, SME_NWVLZ_3FF-SME_NWVLZ	
000262D4 0000 0000                  		dc.w SME_NWVLZ_406-SME_NWVLZ, SME_NWVLZ_419-SME_NWVLZ	
000262D8 0000 0000                  		dc.w SME_NWVLZ_42C-SME_NWVLZ, SME_NWVLZ_433-SME_NWVLZ	
000262DC 0000 0000                  		dc.w SME_NWVLZ_43A-SME_NWVLZ, SME_NWVLZ_441-SME_NWVLZ	
000262E0 0000 0000                  		dc.w SME_NWVLZ_44C-SME_NWVLZ, SME_NWVLZ_453-SME_NWVLZ	
000262E4 0000 0000                  		dc.w SME_NWVLZ_45A-SME_NWVLZ, SME_NWVLZ_465-SME_NWVLZ	
000262E8 0000 0000                  		dc.w SME_NWVLZ_470-SME_NWVLZ, SME_NWVLZ_479-SME_NWVLZ	
000262EC 0000 0000                  		dc.w SME_NWVLZ_482-SME_NWVLZ, SME_NWVLZ_48B-SME_NWVLZ	
000262F0 0000 0000                  		dc.w SME_NWVLZ_494-SME_NWVLZ, SME_NWVLZ_497-SME_NWVLZ	
000262F4 0000 0000                  		dc.w SME_NWVLZ_49A-SME_NWVLZ, SME_NWVLZ_49D-SME_NWVLZ	
000262F8 0000 0000                  		dc.w SME_NWVLZ_4A0-SME_NWVLZ, SME_NWVLZ_4A3-SME_NWVLZ	
000262FC 0000 0000                  		dc.w SME_NWVLZ_4A6-SME_NWVLZ, SME_NWVLZ_4A9-SME_NWVLZ	
00026300 0000 0000                  		dc.w SME_NWVLZ_4B0-SME_NWVLZ, SME_NWVLZ_4B3-SME_NWVLZ	
00026304 0000 0000                  		dc.w SME_NWVLZ_4B8-SME_NWVLZ, SME_NWVLZ_4BB-SME_NWVLZ	
00026308 0000 0000                  		dc.w SME_NWVLZ_4C0-SME_NWVLZ, SME_NWVLZ_4C3-SME_NWVLZ	
0002630C 0000 0000                  		dc.w SME_NWVLZ_4CC-SME_NWVLZ, SME_NWVLZ_4DB-SME_NWVLZ	
00026310 0000 0000                  		dc.w SME_NWVLZ_4E6-SME_NWVLZ, SME_NWVLZ_4ED-SME_NWVLZ	
00026314 0000 0000                  		dc.w SME_NWVLZ_4F8-SME_NWVLZ, SME_NWVLZ_501-SME_NWVLZ	
00026318 0000 0000                  		dc.w SME_NWVLZ_50A-SME_NWVLZ, SME_NWVLZ_513-SME_NWVLZ	
0002631C 0000 0000                  		dc.w SME_NWVLZ_526-SME_NWVLZ, SME_NWVLZ_52D-SME_NWVLZ	
00026320 0000 0000                  		dc.w SME_NWVLZ_534-SME_NWVLZ, SME_NWVLZ_53B-SME_NWVLZ	
00026324 0000 0000                  		dc.w SME_NWVLZ_53C-SME_NWVLZ, SME_NWVLZ_54D-SME_NWVLZ	
00026328 0000 0000                  		dc.w SME_NWVLZ_55C-SME_NWVLZ, SME_NWVLZ_565-SME_NWVLZ	
0002632C 0000 0000                  		dc.w SME_NWVLZ_56C-SME_NWVLZ, SME_NWVLZ_573-SME_NWVLZ	
00026330 0000 0000                  		dc.w SME_NWVLZ_57A-SME_NWVLZ, SME_NWVLZ_57D-SME_NWVLZ	
00026334 0000 0000                  		dc.w SME_NWVLZ_584-SME_NWVLZ, SME_NWVLZ_58B-SME_NWVLZ	
00026338 0000 0000                  		dc.w SME_NWVLZ_592-SME_NWVLZ, SME_NWVLZ_599-SME_NWVLZ	
0002633C 0000 0000                  		dc.w SME_NWVLZ_5A2-SME_NWVLZ, SME_NWVLZ_5B3-SME_NWVLZ	
00026340 0000 0000                  		dc.w SME_NWVLZ_5BC-SME_NWVLZ, SME_NWVLZ_5C5-SME_NWVLZ	
00026344 0000 0000                  		dc.w SME_NWVLZ_5D0-SME_NWVLZ, SME_NWVLZ_5DB-SME_NWVLZ	
00026348 0000 0000                  		dc.w SME_NWVLZ_5E0-SME_NWVLZ, SME_NWVLZ_5EB-SME_NWVLZ	
0002634C 0000 0000                  		dc.w SME_NWVLZ_5F2-SME_NWVLZ, SME_NWVLZ_5FD-SME_NWVLZ	
00026350 0000 0000                  		dc.w SME_NWVLZ_602-SME_NWVLZ, SME_NWVLZ_609-SME_NWVLZ	
00026354 0000 0000                  		dc.w SME_NWVLZ_610-SME_NWVLZ, SME_NWVLZ_617-SME_NWVLZ	
00026358 0000 0000                  		dc.w SME_NWVLZ_61C-SME_NWVLZ, SME_NWVLZ_623-SME_NWVLZ	
0002635C 0000 0000                  		dc.w SME_NWVLZ_63A-SME_NWVLZ, SME_NWVLZ_647-SME_NWVLZ	
00026360 0000 0000                  		dc.w SME_NWVLZ_64E-SME_NWVLZ, SME_NWVLZ_65D-SME_NWVLZ	
00026364 0000 0000                  		dc.w SME_NWVLZ_662-SME_NWVLZ, SME_NWVLZ_66B-SME_NWVLZ	
00026368 0000 0000                  		dc.w SME_NWVLZ_672-SME_NWVLZ, SME_NWVLZ_679-SME_NWVLZ	
0002636C 0000 0000                  		dc.w SME_NWVLZ_682-SME_NWVLZ, SME_NWVLZ_685-SME_NWVLZ	
00026370 0000 0000                  		dc.w SME_NWVLZ_688-SME_NWVLZ, SME_NWVLZ_68B-SME_NWVLZ	
00026374 0000 0000                  		dc.w SME_NWVLZ_68E-SME_NWVLZ, SME_NWVLZ_691-SME_NWVLZ	
00026378 0000 0000                  		dc.w SME_NWVLZ_694-SME_NWVLZ, SME_NWVLZ_697-SME_NWVLZ	
0002637C 0000 0000                  		dc.w SME_NWVLZ_69A-SME_NWVLZ, SME_NWVLZ_6A1-SME_NWVLZ	
00026380 0000 0000                  		dc.w SME_NWVLZ_6A8-SME_NWVLZ, SME_NWVLZ_6AF-SME_NWVLZ	
00026384 0000 0000                  		dc.w SME_NWVLZ_6B6-SME_NWVLZ, SME_NWVLZ_6BD-SME_NWVLZ	
00026388 0000 0000                  		dc.w SME_NWVLZ_6CE-SME_NWVLZ, SME_NWVLZ_6D5-SME_NWVLZ	
0002638C 0000 0000                  		dc.w SME_NWVLZ_6DC-SME_NWVLZ, SME_NWVLZ_6EB-SME_NWVLZ	
00026390 0000 0000                  		dc.w SME_NWVLZ_6F2-SME_NWVLZ, SME_NWVLZ_6F5-SME_NWVLZ	
00026394 0000 0000                  		dc.w SME_NWVLZ_6FA-SME_NWVLZ, SME_NWVLZ_709-SME_NWVLZ	
00026398 0000 0000                  		dc.w SME_NWVLZ_710-SME_NWVLZ, SME_NWVLZ_713-SME_NWVLZ	
0002639C 0000 0000                  		dc.w SME_NWVLZ_718-SME_NWVLZ, SME_NWVLZ_71D-SME_NWVLZ	
000263A0 0000 0000                  		dc.w SME_NWVLZ_728-SME_NWVLZ, SME_NWVLZ_735-SME_NWVLZ	
000263A4 0000 0000                  		dc.w SME_NWVLZ_73E-SME_NWVLZ, SME_NWVLZ_745-SME_NWVLZ	
000263A8 0000 0000                  		dc.w SME_NWVLZ_748-SME_NWVLZ, SME_NWVLZ_74B-SME_NWVLZ	
000263AC 0000 0000                  		dc.w SME_NWVLZ_752-SME_NWVLZ, SME_NWVLZ_759-SME_NWVLZ	
000263B0 0000 0000                  		dc.w SME_NWVLZ_75C-SME_NWVLZ, SME_NWVLZ_763-SME_NWVLZ	
000263B4 0000 0000                  		dc.w SME_NWVLZ_768-SME_NWVLZ, SME_NWVLZ_775-SME_NWVLZ	
000263B8 0000 0000                  		dc.w SME_NWVLZ_782-SME_NWVLZ, SME_NWVLZ_78B-SME_NWVLZ	
000263BC 0000 0000                  		dc.w SME_NWVLZ_792-SME_NWVLZ, SME_NWVLZ_79D-SME_NWVLZ	
000263C0 0000 0000                  		dc.w SME_NWVLZ_7A6-SME_NWVLZ, SME_NWVLZ_7AD-SME_NWVLZ	
000263C4 0000 0000                  		dc.w SME_NWVLZ_7B8-SME_NWVLZ, SME_NWVLZ_7BF-SME_NWVLZ	
000263C8 0000 0000                  		dc.w SME_NWVLZ_7C0-SME_NWVLZ, SME_NWVLZ_7C1-SME_NWVLZ	
000263CC 00                         SME_NWVLZ_198:	dc.b 0	
000263CD 0420 0070 0320 0B20 0E     SME_NWVLZ_199:	dc.b 4, $20, 0, $70, 3, $20, $B, $20, $E	
000263D6 0920 0020 0B20 0E10 0300+  SME_NWVLZ_1A2:	dc.b 9, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, 6, 0, $A, $10, $1D	
000263E9 0A20 0020 0B20 0E10 0300+  SME_NWVLZ_1B5:	dc.b $A, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, $A, 0, $1F, 0, $26, 0, $32	
000263FE 04B6 C606 D200 0920 0E     SME_NWVLZ_1CA:	dc.b 4, $B6, $C6, 6, $D2, 0, 9, $20, $E	
00026407 0350 1150 1720 0E          SME_NWVLZ_1D3:	dc.b 3, $50, $11, $50, $17, $20, $E	
0002640E 0350 2050 1720 0E          SME_NWVLZ_1DA:	dc.b 3, $50, $20, $50, $17, $20, $E	
00026415 0450 2050 1710 2700 0E     SME_NWVLZ_1E1:	dc.b 4, $50, $20, $50, $17, $10, $27, 0, $E	
0002641E 02B6 D316 DF               SME_NWVLZ_1EA:	dc.b 2, $B6, $D3, $16, $DF	
00026423 0356 E126 E736 EA          SME_NWVLZ_1EF:	dc.b 3, $56, $E1, $26, $E7, $36, $EA	
0002642A 0356 E126 E736 EE          SME_NWVLZ_1F6:	dc.b 3, $56, $E1, $26, $E7, $36, $EE	
00026431 03B6 F226 FE27 01          SME_NWVLZ_1FD:	dc.b 3, $B6, $F2, $26, $FE, $27, 1	
00026438 0420 0B20 0E87 0A07 13     SME_NWVLZ_204:	dc.b 4, $20, $B, $20, $E, $87, $A, 7, $13	
00026441 0380 2920 0B20 0E          SME_NWVLZ_20D:	dc.b 3, $80, $29, $20, $B, $20, $E	
00026448 0750 3A50 4010 4600 3530+  SME_NWVLZ_214:	dc.b 7, $50, $3A, $50, $40, $10, $46, 0, $35, $30, $36, 0, $34, 0, $33	
00026457 05B0 4800 3530 3600 3400+  SME_NWVLZ_223:	dc.b 5, $B0, $48, 0, $35, $30, $36, 0, $34, 0, $33	
00026462 0380 5A57 0400 09          SME_NWVLZ_22E:	dc.b 3, $80, $5A, $57, 4, 0, 9	
00026469 03F7 1437 2407 28          SME_NWVLZ_235:	dc.b 3, $F7, $14, $37, $24, 7, $28	
00026470 0450 5450 6350 6910 6F     SME_NWVLZ_23C:	dc.b 4, $50, $54, $50, $63, $50, $69, $10, $6F	
00026479 0250 54B0 71               SME_NWVLZ_245:	dc.b 2, $50, $54, $B0, $71	
0002647E 0357 0457 2907 2F          SME_NWVLZ_24A:	dc.b 3, $57, 4, $57, $29, 7, $2F	
00026485 0530 7D50 8100 3310 3430+  SME_NWVLZ_251:	dc.b 5, $30, $7D, $50, $81, 0, $33, $10, $34, $30, $36	
00026490 0550 8750 8D20 9350 9600+  SME_NWVLZ_25C:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
0002649B 0650 8710 9D30 9F50 A330+  SME_NWVLZ_267:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
000264A8 0450 AE10 B470 B620 BE     SME_NWVLZ_274:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
000264B1 03F9 7539 8539 89          SME_NWVLZ_27D:	dc.b 3, $F9, $75, $39, $85, $39, $89	
000264B8 0550 C130 C770 CB20 D310+  SME_NWVLZ_284:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
000264C3 0450 C110 D870 DA20 E2     SME_NWVLZ_28F:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
000264CC 03F9 8D39 9D39 A1          SME_NWVLZ_298:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
000264D3 0550 8710 9D00 9370 E520+  SME_NWVLZ_29F:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
000264DE 0470 F050 F810 FE51 00     SME_NWVLZ_2AA:	dc.b 4, $70, $F0, $50, $F8, $10, $FE, $51, 0	
000264E7 0270 F0B1 06               SME_NWVLZ_2B3:	dc.b 2, $70, $F0, $B1, 6	
000264EC 0281 1858 F9               SME_NWVLZ_2B8:	dc.b 2, $81, $18, $58, $F9	
000264F1 0508 FF39 0009 04B9 0529+  SME_NWVLZ_2BD:	dc.b 5, 8, $FF, $39, 0, 9, 4, $B9, 5, $29, $11	
000264FC 0451 1251 2111 2751 29     SME_NWVLZ_2C8:	dc.b 4, $51, $12, $51, $21, $11, $27, $51, $29	
00026505 0251 12B1 2F               SME_NWVLZ_2D1:	dc.b 2, $51, $12, $B1, $2F	
0002650A 0329 1479 1719 1F          SME_NWVLZ_2D6:	dc.b 3, $29, $14, $79, $17, $19, $1F	
00026511 0370 F001 0681 3B          SME_NWVLZ_2DD:	dc.b 3, $70, $F0, 1, 6, $81, $3B	
00026518 0651 4411 4A11 4C81 4E01+  SME_NWVLZ_2E4:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
00026525 0651 4421 5911 5C11 5E81+  SME_NWVLZ_2F1:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
00026532 0451 6911 6F81 7111 7A     SME_NWVLZ_2FE:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
0002653B 03F9 A529 B529 B8          SME_NWVLZ_307:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
00026542 0551 7C21 8211 8571 8721+  SME_NWVLZ_30E:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
0002654D 0451 7C11 9281 9411 9D     SME_NWVLZ_319:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
00026556 03F9 BB29 CB19 CE          SME_NWVLZ_322:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
0002655D 0551 4481 9F11 5E11 A801+  SME_NWVLZ_329:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
00026568 0251 AAB1 B0               SME_NWVLZ_334:	dc.b 2, $51, $AA, $B1, $B0	
0002656D 02B7 3057 3C               SME_NWVLZ_339:	dc.b 2, $B7, $30, $57, $3C	
00026572 0250 54B1 BC               SME_NWVLZ_33E:	dc.b 2, $50, $54, $B1, $BC	
00026577 0257 3CB7 42               SME_NWVLZ_343:	dc.b 2, $57, $3C, $B7, $42	
0002657C 0251 AAB1 C8               SME_NWVLZ_348:	dc.b 2, $51, $AA, $B1, $C8	
00026581 0257 3CB7 4E               SME_NWVLZ_34D:	dc.b 2, $57, $3C, $B7, $4E	
00026586 0250 54B1 D4               SME_NWVLZ_352:	dc.b 2, $50, $54, $B1, $D4	
0002658B 0257 3CB7 5A               SME_NWVLZ_357:	dc.b 2, $57, $3C, $B7, $5A	
00026590 0451 E011 E6B1 E801 F4     SME_NWVLZ_35C:	dc.b 4, $51, $E0, $11, $E6, $B1, $E8, 1, $F4	
00026599 03F8 7128 8128 84          SME_NWVLZ_365:	dc.b 3, $F8, $71, $28, $81, $28, $84	
000265A0 0351 F511 FBB1 FD          SME_NWVLZ_36C:	dc.b 3, $51, $F5, $11, $FB, $B1, $FD	
000265A7 03B8 BD78 C901 F4          SME_NWVLZ_373:	dc.b 3, $B8, $BD, $78, $C9, 1, $F4	
000265AE 0451 E012 09B2 0B01 F4     SME_NWVLZ_37A:	dc.b 4, $51, $E0, $12, 9, $B2, $B, 1, $F4	
000265B7 03B8 D178 DD01 F4          SME_NWVLZ_383:	dc.b 3, $B8, $D1, $78, $DD, 1, $F4	
000265BE 0351 F511 FBB2 17          SME_NWVLZ_38A:	dc.b 3, $51, $F5, $11, $FB, $B2, $17	
000265C5 0378 E5B8 ED01 F4          SME_NWVLZ_391:	dc.b 3, $78, $E5, $B8, $ED, 1, $F4	
000265CC 0252 23B2 29               SME_NWVLZ_398:	dc.b 2, $52, $23, $B2, $29	
000265D1 0258 87B8 8D               SME_NWVLZ_39D:	dc.b 2, $58, $87, $B8, $8D	
000265D6 0251 12B2 35               SME_NWVLZ_3A2:	dc.b 2, $51, $12, $B2, $35	
000265DB 0258 87B8 99               SME_NWVLZ_3A7:	dc.b 2, $58, $87, $B8, $99	
000265E0 0252 23B2 41               SME_NWVLZ_3AC:	dc.b 2, $52, $23, $B2, $41	
000265E5 0258 87B8 A5               SME_NWVLZ_3B1:	dc.b 2, $58, $87, $B8, $A5	
000265EA 0251 12B2 4D               SME_NWVLZ_3B6:	dc.b 2, $51, $12, $B2, $4D	
000265EF 0258 87B8 B1               SME_NWVLZ_3BB:	dc.b 2, $58, $87, $B8, $B1	
000265F4 0452 5912 5FB2 6102 6D     SME_NWVLZ_3C0:	dc.b 4, $52, $59, $12, $5F, $B2, $61, 2, $6D	
000265FD 03B9 2129 2D59 30          SME_NWVLZ_3C9:	dc.b 3, $B9, $21, $29, $2D, $59, $30	
00026604 0272 6EB2 76               SME_NWVLZ_3D0:	dc.b 2, $72, $6E, $B2, $76	
00026609 03B9 3629 4259 45          SME_NWVLZ_3D5:	dc.b 3, $B9, $36, $29, $42, $59, $45	
00026610 0452 5912 82B2 8402 6D     SME_NWVLZ_3DC:	dc.b 4, $52, $59, $12, $82, $B2, $84, 2, $6D	
00026619 03B9 4B29 5759 5A          SME_NWVLZ_3E5:	dc.b 3, $B9, $4B, $29, $57, $59, $5A	
00026620 0272 6EB2 90               SME_NWVLZ_3EC:	dc.b 2, $72, $6E, $B2, $90	
00026625 03B9 6029 6C59 6F          SME_NWVLZ_3F1:	dc.b 3, $B9, $60, $29, $6C, $59, $6F	
0002662C 03B4 EE24 FA54 FD          SME_NWVLZ_3F8:	dc.b 3, $B4, $EE, $24, $FA, $54, $FD	
00026633 03B5 0325 0F55 12          SME_NWVLZ_3FF:	dc.b 3, $B5, 3, $25, $F, $55, $12	
0002663A 0925 1E55 2105 3715 1815+  SME_NWVLZ_406:	dc.b 9, $25, $1E, $55, $21, 5, $37, $15, $18, $15, $1A, $15, $1C, $14, $EE, $14, $F2, $14, $F6	
0002664D 0925 2D55 3005 3615 2715+  SME_NWVLZ_419:	dc.b 9, $25, $2D, $55, $30, 5, $36, $15, $27, $15, $29, $15, $2B, $15, 3, $15, 7, $15, $B	
00026660 03F6 6416 7436 76          SME_NWVLZ_42C:	dc.b 3, $F6, $64, $16, $74, $36, $76	
00026667 03B6 8176 8D16 95          SME_NWVLZ_433:	dc.b 3, $B6, $81, $76, $8D, $16, $95	
0002666E 03F5 3835 4805 4C          SME_NWVLZ_43A:	dc.b 3, $F5, $38, $35, $48, 5, $4C	
00026675 05B5 4D35 5915 5D15 5F25+  SME_NWVLZ_441:	dc.b 5, $B5, $4D, $35, $59, $15, $5D, $15, $5F, $25, $61	
00026680 03B5 6425 7055 73          SME_NWVLZ_44C:	dc.b 3, $B5, $64, $25, $70, $55, $73	
00026687 03B5 7925 8555 88          SME_NWVLZ_453:	dc.b 3, $B5, $79, $25, $85, $55, $88	
0002668E 0555 9425 9A05 AD55 8E55+  SME_NWVLZ_45A:	dc.b 5, $55, $94, $25, $9A, 5, $AD, $55, $8E, $55, $64	
00026699 0525 A355 A605 AC55 9D55+  SME_NWVLZ_465:	dc.b 5, $25, $A3, $55, $A6, 5, $AC, $55, $9D, $55, $79	
000266A4 04B5 BA25 C625 C925 CC     SME_NWVLZ_470:	dc.b 4, $B5, $BA, $25, $C6, $25, $C9, $25, $CC	
000266AD 04B5 AE25 CF25 D225 D5     SME_NWVLZ_479:	dc.b 4, $B5, $AE, $25, $CF, $25, $D2, $25, $D5	
000266B6 04F5 D825 E805 EB05 EC     SME_NWVLZ_482:	dc.b 4, $F5, $D8, $25, $E8, 5, $EB, 5, $EC	
000266BF 04F5 ED25 FD16 0016 02     SME_NWVLZ_48B:	dc.b 4, $F5, $ED, $25, $FD, $16, 0, $16, 2	
000266C8 01F2 9C                    SME_NWVLZ_494:	dc.b 1, $F2, $9C	
000266CB 01F6 2B                    SME_NWVLZ_497:	dc.b 1, $F6, $2B	
000266CE 01F2 AC                    SME_NWVLZ_49A:	dc.b 1, $F2, $AC	
000266D1 01F6 3B                    SME_NWVLZ_49D:	dc.b 1, $F6, $3B	
000266D4 01F2 BC                    SME_NWVLZ_4A0:	dc.b 1, $F2, $BC	
000266D7 01F6 4B                    SME_NWVLZ_4A3:	dc.b 1, $F6, $4B	
000266DA 01F2 CC                    SME_NWVLZ_4A6:	dc.b 1, $F2, $CC	
000266DD 0386 5B36 7A26 7E          SME_NWVLZ_4A9:	dc.b 3, $86, $5B, $36, $7A, $26, $7E	
000266E4 01F2 DC                    SME_NWVLZ_4B0:	dc.b 1, $F2, $DC	
000266E7 02B2 EC22 F8               SME_NWVLZ_4B3:	dc.b 2, $B2, $EC, $22, $F8	
000266EC 01F2 FB                    SME_NWVLZ_4B8:	dc.b 1, $F2, $FB	
000266EF 02B3 0B23 17               SME_NWVLZ_4BB:	dc.b 2, $B3, $B, $23, $17	
000266F4 01F3 1A                    SME_NWVLZ_4C0:	dc.b 1, $F3, $1A	
000266F7 0453 2AB3 3018 1508 17     SME_NWVLZ_4C3:	dc.b 4, $53, $2A, $B3, $30, $18, $15, 8, $17	
00026700 0753 3C73 4213 4A03 4C08+  SME_NWVLZ_4CC:	dc.b 7, $53, $3C, $73, $42, $13, $4A, 3, $4C, 8, $1A, 8, $19, 8, $18	
0002670F 0528 1BB8 1E28 2A18 2D08+  SME_NWVLZ_4DB:	dc.b 5, $28, $1B, $B8, $1E, $28, $2A, $18, $2D, 8, $2F	
0002671A 03B8 3038 3C18 40          SME_NWVLZ_4E6:	dc.b 3, $B8, $30, $38, $3C, $18, $40	
00026721 05B4 8834 9413 FD03 FF0A+  SME_NWVLZ_4ED:	dc.b 5, $B4, $88, $34, $94, $13, $FD, 3, $FF, $A, $CD	
0002672C 0427 6627 6927 6C20 0E     SME_NWVLZ_4F8:	dc.b 4, $27, $66, $27, $69, $27, $6C, $20, $E	
00026735 0413 4D73 4F23 5703 5A     SME_NWVLZ_501:	dc.b 4, $13, $4D, $73, $4F, $23, $57, 3, $5A	
0002673E 0423 5B23 5EF3 6108 42     SME_NWVLZ_50A:	dc.b 4, $23, $5B, $23, $5E, $F3, $61, 8, $42	
00026747 0928 5338 5678 4303 6408+  SME_NWVLZ_513:	dc.b 9, $28, $53, $38, $56, $78, $43, 3, $64, 8, $4B, $28, $4F, 8, $4D, 8, $4E, 8, $52	
0002675A 03B3 7173 7D00 71          SME_NWVLZ_526:	dc.b 3, $B3, $71, $73, $7D, 0, $71	
00026761 03F8 5B18 6B38 6D          SME_NWVLZ_52D:	dc.b 3, $F8, $5B, $18, $6B, $38, $6D	
00026768 03F8 0138 113A CE          SME_NWVLZ_534:	dc.b 3, $F8, 1, $38, $11, $3A, $CE	
0002676F 00                         SME_NWVLZ_53B:	dc.b 0	
00026770 0839 E219 EF29 E619 E919+  SME_NWVLZ_53C:	dc.b 8, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $59, $F7, $19, $FD, 9, $FF	
00026781 0739 E219 EF29 E619 E919+  SME_NWVLZ_54D:	dc.b 7, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $5A, 0, $1A, 6	
00026790 0439 E289 E619 EF59 F1     SME_NWVLZ_55C:	dc.b 4, $39, $E2, $89, $E6, $19, $EF, $59, $F1	
00026799 0373 9D03 A533 A6          SME_NWVLZ_565:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
000267A0 0373 8533 8D23 91          SME_NWVLZ_56C:	dc.b 3, $73, $85, $33, $8D, $23, $91	
000267A7 0376 9736 9F06 A3          SME_NWVLZ_573:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
000267AE 0183 94                    SME_NWVLZ_57A:	dc.b 1, $83, $94	
000267B1 0376 9736 9F06 A3          SME_NWVLZ_57D:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
000267B8 0373 8533 8D23 91          SME_NWVLZ_584:	dc.b 3, $73, $85, $33, $8D, $23, $91	
000267BF 0373 9D03 A533 A6          SME_NWVLZ_58B:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
000267C6 0373 AA33 B223 B6          SME_NWVLZ_592:	dc.b 3, $73, $AA, $33, $B2, $23, $B6	
000267CD 04B3 B903 C603 C503 C7     SME_NWVLZ_599:	dc.b 4, $B3, $B9, 3, $C6, 3, $C5, 3, $C7	
000267D6 0856 1113 C303 C503 C613+  SME_NWVLZ_5A2:	dc.b 8, $56, $11, $13, $C3, 3, $C5, 3, $C6, $13, $BF, 6, 5, 6, 6, 3, $C7	
000267E7 04B3 DA33 E603 EA03 EB     SME_NWVLZ_5B3:	dc.b 4, $B3, $DA, $33, $E6, 3, $EA, 3, $EB	
000267F0 04B3 C833 D403 D803 D9     SME_NWVLZ_5BC:	dc.b 4, $B3, $C8, $33, $D4, 3, $D8, 3, $D9	
000267F9 0583 EC13 F553 F713 FD03+  SME_NWVLZ_5C5:	dc.b 5, $83, $EC, $13, $F5, $53, $F7, $13, $FD, 3, $FF	
00026804 0584 0014 0953 F713 FD03+  SME_NWVLZ_5D0:	dc.b 5, $84, 0, $14, 9, $53, $F7, $13, $FD, 3, $FF	
0002680F 0284 0B74 14               SME_NWVLZ_5DB:	dc.b 2, $84, $B, $74, $14	
00026814 0534 9824 9C34 9F34 A304+  SME_NWVLZ_5E0:	dc.b 5, $34, $98, $24, $9C, $34, $9F, $34, $A3, 4, $A7	
0002681F 0384 1C24 2514 28          SME_NWVLZ_5EB:	dc.b 3, $84, $1C, $24, $25, $14, $28	
00026826 0504 A834 A934 AD34 B124+  SME_NWVLZ_5F2:	dc.b 5, 4, $A8, $34, $A9, $34, $AD, $34, $B1, $24, $B5	
00026831 0284 2A74 33               SME_NWVLZ_5FD:	dc.b 2, $84, $2A, $74, $33	
00026836 03B7 DF17 EB27 ED          SME_NWVLZ_602:	dc.b 3, $B7, $DF, $17, $EB, $27, $ED	
0002683D 0384 1C24 3B14 3E          SME_NWVLZ_609:	dc.b 3, $84, $1C, $24, $3B, $14, $3E	
00026844 03B7 F017 FC27 FE          SME_NWVLZ_610:	dc.b 3, $B7, $F0, $17, $FC, $27, $FE	
0002684B 0254 40B4 46               SME_NWVLZ_617:	dc.b 2, $54, $40, $B4, $46	
00026850 0374 5214 5AB4 5C          SME_NWVLZ_61C:	dc.b 3, $74, $52, $14, $5A, $B4, $5C	
00026857 0B74 6814 7004 7924 7504+  SME_NWVLZ_623:	dc.b $B, $74, $68, $14, $70, 4, $79, $24, $75, 4, $78, 4, $73, 4, $72, 4, $74, 4, $85, 4, $87, 4, $83	
0002686E 0674 7A14 7054 8204 7924+  SME_NWVLZ_63A:	dc.b 6, $74, $7A, $14, $70, $54, $82, 4, $79, $24, $75, 4, $78	
0002687B 0354 C9B4 CF10 6D          SME_NWVLZ_647:	dc.b 3, $54, $C9, $B4, $CF, $10, $6D	
00026882 0714 C334 C514 BE04 BD14+  SME_NWVLZ_64E:	dc.b 7, $14, $C3, $34, $C5, $14, $BE, 4, $BD, $14, $B8, $24, $BA, $24, $C0	
00026891 02F4 DB24 EB               SME_NWVLZ_65D:	dc.b 2, $F4, $DB, $24, $EB	
00026896 04B6 A416 B026 B206 B1     SME_NWVLZ_662:	dc.b 4, $B6, $A4, $16, $B0, $26, $B2, 6, $B1	
0002689F 03B6 B516 C126 C3          SME_NWVLZ_66B:	dc.b 3, $B6, $B5, $16, $C1, $26, $C3	
000268A6 03B9 D129 DD19 E0          SME_NWVLZ_672:	dc.b 3, $B9, $D1, $29, $DD, $19, $E0	
000268AD 0427 6F37 7237 7627 7A     SME_NWVLZ_679:	dc.b 4, $27, $6F, $37, $72, $37, $76, $27, $7A	
000268B6 01F7 7E                    SME_NWVLZ_682:	dc.b 1, $F7, $7E	
000268B9 01F7 8E                    SME_NWVLZ_685:	dc.b 1, $F7, $8E	
000268BC 01F7 9E                    SME_NWVLZ_688:	dc.b 1, $F7, $9E	
000268BF 01F7 AE                    SME_NWVLZ_68B:	dc.b 1, $F7, $AE	
000268C2 01F7 BE                    SME_NWVLZ_68E:	dc.b 1, $F7, $BE	
000268C5 01FA 08                    SME_NWVLZ_691:	dc.b 1, $FA, 8	
000268C8 01FA BD                    SME_NWVLZ_694:	dc.b 1, $FA, $BD	
000268CB 01BA 18                    SME_NWVLZ_697:	dc.b 1, $BA, $18	
000268CE 03FA 243A 341A 38          SME_NWVLZ_69A:	dc.b 3, $FA, $24, $3A, $34, $1A, $38	
000268D5 035A 46BA 3A0A 4C          SME_NWVLZ_6A1:	dc.b 3, $5A, $46, $BA, $3A, $A, $4C	
000268DC 03BA 4D5A 590A 5F          SME_NWVLZ_6A8:	dc.b 3, $BA, $4D, $5A, $59, $A, $5F	
000268E3 03BA 605A 6C0A 72          SME_NWVLZ_6AF:	dc.b 3, $BA, $60, $5A, $6C, $A, $72	
000268EA 03BA 735A 7F0A 85          SME_NWVLZ_6B6:	dc.b 3, $BA, $73, $5A, $7F, $A, $85	
000268F1 085A 7F0A 852A 781A 7C0A+  SME_NWVLZ_6BD:	dc.b 8, $5A, $7F, $A, $85, $2A, $78, $1A, $7C, $A, $76, $A, $86, $2A, $87, $1A, $8A	
00026902 0320 0EFA 8C3A 9C          SME_NWVLZ_6CE:	dc.b 3, $20, $E, $FA, $8C, $3A, $9C	
00026909 0320 0EFA A02A B0          SME_NWVLZ_6D5:	dc.b 3, $20, $E, $FA, $A0, $2A, $B0	
00026910 0720 0E2A 912A 952A 980A+  SME_NWVLZ_6DC:	dc.b 7, $20, $E, $2A, $91, $2A, $95, $2A, $98, $A, $8F, $3A, $B5, $3A, $B9	
0002691F 0350 3A50 4010 46          SME_NWVLZ_6EB:	dc.b 3, $50, $3A, $50, $40, $10, $46	
00026926 01B0 48                    SME_NWVLZ_6F2:	dc.b 1, $B0, $48	
00026929 0280 5A00 09               SME_NWVLZ_6F5:	dc.b 2, $80, $5A, 0, 9	
0002692E 0707 2817 1617 1A27 1D07+  SME_NWVLZ_6FA:	dc.b 7, 7, $28, $17, $16, $17, $1A, $27, $1D, 7, $19, 7, $15, $27, $21	
0002693D 0350 6350 6910 6F          SME_NWVLZ_709:	dc.b 3, $50, $63, $50, $69, $10, $6F	
00026944 01B0 71                    SME_NWVLZ_710:	dc.b 1, $B0, $71	
00026947 0257 2907 2F               SME_NWVLZ_713:	dc.b 2, $57, $29, 7, $2F	
0002694C 0230 7D50 81               SME_NWVLZ_718:	dc.b 2, $30, $7D, $50, $81	
00026951 0550 8750 8D20 9350 9600+  SME_NWVLZ_71D:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
0002695C 0650 8710 9D30 9F50 A330+  SME_NWVLZ_728:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
00026969 0450 AE10 B470 B620 BE     SME_NWVLZ_735:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
00026972 0350 F810 FE51 00          SME_NWVLZ_73E:	dc.b 3, $50, $F8, $10, $FE, $51, 0	
00026979 01B1 06                    SME_NWVLZ_745:	dc.b 1, $B1, 6	
0002697C 0181 18                    SME_NWVLZ_748:	dc.b 1, $81, $18	
0002697F 0308 FF89 0B29 01          SME_NWVLZ_74B:	dc.b 3, 8, $FF, $89, $B, $29, 1	
00026986 0351 2111 2751 29          SME_NWVLZ_752:	dc.b 3, $51, $21, $11, $27, $51, $29	
0002698D 01B1 2F                    SME_NWVLZ_759:	dc.b 1, $B1, $2F	
00026990 0319 1F09 1639 1B          SME_NWVLZ_75C:	dc.b 3, $19, $1F, 9, $16, $39, $1B	
00026997 0201 0681 3B               SME_NWVLZ_763:	dc.b 2, 1, 6, $81, $3B	
0002699C 0651 4411 4A11 4C81 4E01+  SME_NWVLZ_768:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
000269A9 0651 4421 5911 5C11 5E81+  SME_NWVLZ_775:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
000269B6 0451 6911 6F81 7111 7A     SME_NWVLZ_782:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
000269BF 03F9 A529 B529 B8          SME_NWVLZ_78B:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
000269C6 0551 7C21 8211 8571 8721+  SME_NWVLZ_792:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
000269D1 0451 7C11 9281 9411 9D     SME_NWVLZ_79D:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
000269DA 03F9 BB29 CB19 CE          SME_NWVLZ_7A6:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
000269E1 0551 4481 9F11 5E11 A801+  SME_NWVLZ_7AD:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
000269EC 03BA D32A DF0A E2          SME_NWVLZ_7B8:	dc.b 3, $BA, $D3, $2A, $DF, $A, $E2	
000269F3 00                         SME_NWVLZ_7BF:	dc.b 0	
000269F4 00                         SME_NWVLZ_7C0:	dc.b 0	
000269F5 00                         SME_NWVLZ_7C1:	dc.b 0	
000269F6                            		even
000269F6                            		even
000269F6                            
000269F6                            ; ---------------------------------------------------------------------------
000269F6                            ; Uncompressed graphics	- Sonic
000269F6                            ; ---------------------------------------------------------------------------
000269F6                            Art_Sonic:	incbin	"artunc\Sonic.bin"	; Sonic
0004E196                            		even
0004E196                            ; ---------------------------------------------------------------------------
0004E196                            ; Compressed graphics - various
0004E196                            ; ---------------------------------------------------------------------------
0004E196                            Art_GShield:	incbin	"artunc\Gold Shield.bin"
0004EE56                            		even
0004EE56                            Art_RedShield:	incbin	"artunc\Red Shield.bin"
0004FB16                            		even
0004FB16                            Art_SpShield:	incbin	"artunc\Gray Shield.bin"
000507D6                            		even
000507D6                            Art_Shield:	incbin	"artunc\Shield.bin"
00051496                            		even
00051496                            Unc_Stars:	incbin	"artunc\Invincibility Stars.bin"
00051896                            		even
00051896                            
00051896                            Map_SSWalls:	include	"_maps\SS Walls.asm"
00051896                            ; ---------------------------------------------------------------------------
00051896                            ; Sprite mappings - walls of the special stage
00051896                            ; ---------------------------------------------------------------------------
00051896                            Map_SSWalls_internal:
00051896 0000                       		dc.w byte_2C584-Map_SSWalls_internal
00051898 0000                       		dc.w byte_2C58A-Map_SSWalls_internal
0005189A 0000                       		dc.w byte_2C590-Map_SSWalls_internal
0005189C 0000                       		dc.w byte_2C596-Map_SSWalls_internal
0005189E 0000                       		dc.w byte_2C59C-Map_SSWalls_internal
000518A0 0000                       		dc.w byte_2C5A2-Map_SSWalls_internal
000518A2 0000                       		dc.w byte_2C5A8-Map_SSWalls_internal
000518A4 0000                       		dc.w byte_2C5AE-Map_SSWalls_internal
000518A6 0000                       		dc.w byte_2C5B4-Map_SSWalls_internal
000518A8 0000                       		dc.w byte_2C5BA-Map_SSWalls_internal
000518AA 0000                       		dc.w byte_2C5C0-Map_SSWalls_internal
000518AC 0000                       		dc.w byte_2C5C6-Map_SSWalls_internal
000518AE 0000                       		dc.w byte_2C5CC-Map_SSWalls_internal
000518B0 0000                       		dc.w byte_2C5D2-Map_SSWalls_internal
000518B2 0000                       		dc.w byte_2C5D8-Map_SSWalls_internal
000518B4 0000                       		dc.w byte_2C5DE-Map_SSWalls_internal
000518B6 01                         byte_2C584:	dc.b 1
000518B7 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000518BC 01                         byte_2C58A:	dc.b 1
000518BD F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
000518C2 01                         byte_2C590:	dc.b 1
000518C3 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
000518C8 01                         byte_2C596:	dc.b 1
000518C9 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
000518CE 01                         byte_2C59C:	dc.b 1
000518CF F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
000518D4 01                         byte_2C5A2:	dc.b 1
000518D5 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
000518DA 01                         byte_2C5A8:	dc.b 1
000518DB F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
000518E0 01                         byte_2C5AE:	dc.b 1
000518E1 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
000518E6 01                         byte_2C5B4:	dc.b 1
000518E7 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
000518EC 01                         byte_2C5BA:	dc.b 1
000518ED F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
000518F2 01                         byte_2C5C0:	dc.b 1
000518F3 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
000518F8 01                         byte_2C5C6:	dc.b 1
000518F9 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
000518FE 01                         byte_2C5CC:	dc.b 1
000518FF F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00051904 01                         byte_2C5D2:	dc.b 1
00051905 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0005190A 01                         byte_2C5D8:	dc.b 1
0005190B F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
00051910 01                         byte_2C5DE:	dc.b 1
00051911 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00051916                            		even
00051916                            		even
00051916                            
00051916                            ; ---------------------------------------------------------------------------
00051916                            ; Compressed graphics - special stage
00051916                            ; ---------------------------------------------------------------------------
00051916                            Nem_SSWalls:	incbin	"artnem\Special Walls.bin" ; special stage walls
0005224E                            		even
0005224E                            Eni_SSBg1:	incbin	"tilemaps\SS Background 1.bin" ; special stage background (mappings)
00052382                            		even
00052382                            Nem_SSBgFish:	incbin	"artnem\Special Birds & Fish.bin" ; special stage birds and fish background
00053012                            		even
00053012                            Eni_SSBg2:	incbin	"tilemaps\SS Background 2.bin" ; special stage background (mappings)
00053312                            		even
00053312                            Nem_SSBgCloud:	incbin	"artnem\Special Clouds.bin" ; special stage clouds background
00053806                            		even
00053806                            Nem_SSGOAL:	incbin	"artnem\Special GOAL.bin" ; special stage GOAL block
000538F4                            		even
000538F4                            Nem_SSRBlock:	incbin	"artnem\Special R.bin"	; special stage R block
000539C4                            		even
000539C4                            Nem_SS1UpBlock:	incbin	"artnem\Special 1UP.bin" ; special stage 1UP block
00053ABA                            		even
00053ABA                            Nem_SSEmStars:	incbin	"artnem\Special Emerald Twinkle.bin" ; special stage stars from a collected emerald
00053B18                            		even
00053B18                            Nem_SSRedWhite:	incbin	"artnem\Special Red-White.bin" ; special stage red/white block
00053BAA                            		even
00053BAA                            Nem_SSZone1:	incbin	"artnem\Special ZONE1.bin" ; special stage ZONE1 block
00053C6C                            		even
00053C6C                            Nem_SSZone2:	incbin	"artnem\Special ZONE2.bin" ; ZONE2 block
00053D3A                            		even
00053D3A                            Nem_SSZone3:	incbin	"artnem\Special ZONE3.bin" ; ZONE3 block
00053E06                            		even
00053E06                            Nem_SSZone4:	incbin	"artnem\Special ZONE4.bin" ; ZONE4 block
00053ECE                            		even
00053ECE                            Nem_SSZone5:	incbin	"artnem\Special ZONE5.bin" ; ZONE5 block
00053F98                            		even
00053F98                            Nem_SSZone6:	incbin	"artnem\Special ZONE6.bin" ; ZONE6 block
00054068                            		even
00054068                            Nem_SSUpDown:	incbin	"artnem\Special UP-DOWN.bin" ; special stage UP/DOWN block
0005425C                            		even
0005425C                            Nem_SSEmerald:	incbin	"artnem\Special Emeralds.bin" ; special stage chaos emeralds
000543C4                            		even
000543C4                            Nem_SSGhost:	incbin	"artnem\Special Ghost.bin" ; special stage ghost block
00054474                            		even
00054474                            Nem_SSWBlock:	incbin	"artnem\Special W.bin"	; special stage W block
0005454E                            		even
0005454E                            Nem_SSGlass:	incbin	"artnem\Special Glass.bin" ; special stage destroyable glass block
000545D2                            		even
000545D2                            Nem_ResultEm:	incbin	"artnem\Special Result Emeralds.bin" ; chaos emeralds on special stage results screen
00054750                            		even
00054750                            ; ---------------------------------------------------------------------------
00054750                            ; Compressed graphics - GHZ stuff
00054750                            ; ---------------------------------------------------------------------------
00054750                            Nem_Stalk:	incbin	"artnem\GHZ Flower Stalk.bin"
000547B2                            		even
000547B2                            Nem_Swing:	incbin	"artnem\GHZ Swinging Platform.bin"
000548CC                            		even
000548CC                            Nem_Bridge:	incbin	"artnem\GHZ Bridge.bin"
000549EA                            		even
000549EA                            Nem_GhzUnkBlock:incbin	"artnem\Unused - GHZ Block.bin"
00054A32                            		even
00054A32                            Nem_Ball:	incbin	"artnem\GHZ Giant Ball.bin"
00054BD0                            		even
00054BD0                            Nem_Spikes:	incbin	"artnem\Spikes.bin"
00054C4C                            		even
00054C4C                            Nem_GhzLog:	incbin	"artnem\Unused - GHZ Log.bin"
00054E60                            		even
00054E60                            Nem_SpikePole:	incbin	"artnem\GHZ Spiked Log.bin"
00054F8C                            		even
00054F8C                            Nem_PplRock:	incbin	"artnem\GHZ Purple Rock.bin"
000550E0                            		even
000550E0                            Nem_GhzWall1:	incbin	"artnem\GHZ Breakable Wall.bin"
00055190                            		even
00055190                            Nem_GhzWall2:	incbin	"artnem\GHZ Edge Wall.bin"
000551F0                            		even
000551F0                            ; ---------------------------------------------------------------------------
000551F0                            ; Compressed graphics - LZ stuff
000551F0                            ; ---------------------------------------------------------------------------
000551F0                            Nem_Water:	incbin	"artnem\LZ Water Surface.bin"
000552C8                            		even
000552C8                            Nem_Splash:	incbin	"artnem\LZ Water & Splashes.bin"
00055ABC                            		even
00055ABC                            Nem_LzSpikeBall:incbin	"artnem\LZ Spiked Ball & Chain.bin"
00055C4E 00                         		even
00055C4E                            Nem_FlapDoor:	incbin	"artnem\LZ Flapping Door.bin"
00055DB8                            		even
00055DB8                            Nem_Bubbles:	incbin	"artnem\LZ Bubbles & Countdown.bin"
000563F8 00                         		even
000563F8                            Nem_LzBlock3:	incbin	"artnem\LZ 32x16 Block.bin"
0005649A 00                         		even
0005649A                            Nem_LzDoor1:	incbin	"artnem\LZ Vertical Door.bin"
00056514 00                         		even
00056514                            Nem_Harpoon:	incbin	"artnem\LZ Harpoon.bin"
0005667A 00                         		even
0005667A                            Nem_LzPole:	incbin	"artnem\LZ Breakable Pole.bin"
00056700 00                         		even
00056700                            Nem_LzDoor2:	incbin	"artnem\LZ Horizontal Door.bin"
0005686C                            		even
0005686C                            Nem_LzWheel:	incbin	"artnem\LZ Wheel.bin"
00056D4E                            		even
00056D4E                            Nem_Gargoyle:	incbin	"artnem\LZ Gargoyle & Fireball.bin"
00056EBE                            		even
00056EBE                            Nem_LzBlock2:	incbin	"artnem\LZ Blocks.bin"
00057176                            		even
00057176                            Nem_LzPlatfm:	incbin	"artnem\LZ Rising Platform.bin"
000572BC                            		even
000572BC                            Nem_Cork:	incbin	"artnem\LZ Cork.bin"
000573E6                            		even
000573E6                            Nem_LzBlock1:	incbin	"artnem\LZ 32x32 Block.bin"
00057566 00                         		even
00057566                            ; ---------------------------------------------------------------------------
00057566                            ; Compressed graphics - MZ stuff
00057566                            ; ---------------------------------------------------------------------------
00057566                            Nem_MzMetal:	incbin	"artnem\MZ Metal Blocks.bin"
000577F4                            		even
000577F4                            Nem_MzSwitch:	incbin	"artnem\MZ Switch.bin"
000578B2                            		even
000578B2                            Nem_MzGlass:	incbin	"artnem\MZ Green Glass Block.bin"
0005798A                            		even
0005798A                            Nem_UnkGrass:	incbin	"artnem\Unused - Grass.bin"
000579DE                            		even
000579DE                            Nem_MzFire:	incbin	"artnem\Fireballs.bin"
00057CFC 00                         		even
00057CFC                            Nem_Lava:	incbin	"artnem\MZ Lava.bin"
00058612                            		even
00058612                            Nem_MzBlock:	incbin	"artnem\MZ Green Pushable Block.bin"
00058780                            		even
00058780                            Nem_MzUnkBlock:	incbin	"artnem\Unused - MZ Background.bin"
00058808                            		even
00058808                            ; ---------------------------------------------------------------------------
00058808                            ; Compressed graphics - SLZ stuff
00058808                            ; ---------------------------------------------------------------------------
00058808                            Nem_Seesaw:	incbin	"artnem\SLZ Seesaw.bin"
00058A44                            		even
00058A44                            Nem_SlzSpike:	incbin	"artnem\SLZ Little Spikeball.bin"
00058B8A                            		even
00058B8A                            Nem_Fan:	incbin	"artnem\SLZ Fan.bin"
00058DCE                            		even
00058DCE                            Nem_SlzWall:	incbin	"artnem\SLZ Breakable Wall.bin"
00058E6A 00                         		even
00058E6A                            Nem_Pylon:	incbin	"artnem\SLZ Pylon.bin"
00058F4C                            		even
00058F4C                            Nem_SlzSwing:	incbin	"artnem\SLZ Swinging Platform.bin"
0005912E                            		even
0005912E                            Nem_SlzBlock:	incbin	"artnem\SLZ 32x32 Block.bin"
0005923A                            		even
0005923A                            Nem_SlzCannon:	incbin	"artnem\SLZ Cannon.bin"
000592DE                            		even
000592DE                            ; ---------------------------------------------------------------------------
000592DE                            ; Compressed graphics - SYZ stuff
000592DE                            ; ---------------------------------------------------------------------------
000592DE                            Nem_Bumper:	incbin	"artnem\SYZ Bumper.bin"
0005946E                            		even
0005946E                            Nem_SyzSpike2:	incbin	"artnem\SYZ Small Spikeball.bin"
000594D0                            		even
000594D0                            Nem_LzSwitch:	incbin	"artnem\Switch.bin"
000595EC 00                         		even
000595EC                            Nem_SyzSpike1:	incbin	"artnem\SYZ Large Spikeball.bin"
0005987A                            		even
0005987A                            ; ---------------------------------------------------------------------------
0005987A                            ; Compressed graphics - SBZ stuff
0005987A                            ; ---------------------------------------------------------------------------
0005987A                            Nem_SbzWheel1:	incbin	"artnem\SBZ Running Disc.bin"
000598CE                            		even
000598CE                            Nem_SbzWheel2:	incbin	"artnem\SBZ Junction Wheel.bin"
00059B6A                            		even
00059B6A                            Nem_Cutter:	incbin	"artnem\SBZ Pizza Cutter.bin"
00059D5A                            		even
00059D5A                            Nem_Stomper:	incbin	"artnem\SBZ Stomper.bin"
00059EF8                            		even
00059EF8                            Nem_SpinPform:	incbin	"artnem\SBZ Spinning Platform.bin"
0005A228                            		even
0005A228                            Nem_TrapDoor:	incbin	"artnem\SBZ Trapdoor.bin"
0005A406                            		even
0005A406                            Nem_SbzFloor:	incbin	"artnem\SBZ Collapsing Floor.bin"
0005A45E                            		even
0005A45E                            Nem_Electric:	incbin	"artnem\SBZ Electrocuter.bin"
0005A610 00                         		even
0005A610                            Nem_SbzBlock:	incbin	"artnem\SBZ Vanishing Block.bin"
0005A72C                            		even
0005A72C                            Nem_FlamePipe:	incbin	"artnem\SBZ Flaming Pipe.bin"
0005A8BA                            		even
0005A8BA                            Nem_SbzDoor1:	incbin	"artnem\SBZ Small Vertical Door.bin"
0005A954                            		even
0005A954                            Nem_SlideFloor:	incbin	"artnem\SBZ Sliding Floor Trap.bin"
0005A9AC                            		even
0005A9AC                            Nem_SbzDoor2:	incbin	"artnem\SBZ Large Horizontal Door.bin"
0005AAA8                            		even
0005AAA8                            Nem_Girder:	incbin	"artnem\SBZ Crushing Girder.bin"
0005ABBE                            		even
0005ABBE                            ; ---------------------------------------------------------------------------
0005ABBE                            ; Compressed graphics - enemies
0005ABBE                            ; ---------------------------------------------------------------------------
0005ABBE                            Nem_BallHog:	incbin	"artnem\Enemy Ball Hog.bin"
0005B006 00                         		even
0005B006                            Nem_Crabmeat:	incbin	"artnem\Enemy Crabmeat.bin"
0005B4F6 00                         		even
0005B4F6                            Nem_Mozzietron:	incbin	"artnem\Enemy Mozzietron.bin"
0005B7DA 00                         		even
0005B7DA                            Nem_Buzz:	incbin	"artnem\Enemy Buzz Bomber.bin"
0005BB9A                            		even
0005BB9A                            Nem_UnkExplode:	incbin	"artnem\Unused - Explosion.bin"
0005BD82                            		even
0005BD82                            Nem_Burrobot:	incbin	"artnem\Enemy Burrobot.bin"
0005C4B0 00                         		even
0005C4B0                            Nem_Chopper:	incbin	"artnem\Enemy Chopper.bin"
0005C738 00                         		even
0005C738                            Nem_Jaws:	incbin	"artnem\Enemy Jaws.bin"
0005C9D4 00                         		even
0005C9D4                            Nem_Roller:	incbin	"artnem\Enemy Roller.bin"
0005CFA8                            		even
0005CFA8                            Nem_Motobug:	incbin	"artnem\Enemy Motobug.bin"
0005D23A                            		even
0005D23A                            Nem_Newtron:	incbin	"artnem\Enemy Newtron.bin"
0005D884 00                         		even
0005D884                            Nem_Yadrin:	incbin	"artnem\Enemy Yadrin.bin"
0005DCC0                            		even
0005DCC0                            Nem_Basaran:	incbin	"artnem\Enemy Basaran.bin"
0005DFCE 00                         		even
0005DFCE                            Nem_Splats:	incbin	"artnem\Enemy Splats.bin"
0005E22E                            		even
0005E22E                            Nem_Bomb:	incbin	"artnem\Enemy Bomb.bin"
0005E52C                            		even
0005E52C                            Nem_Orbinaut:	incbin	"artnem\Enemy Orbinaut.bin"
0005E758 00                         		even
0005E758                            Nem_Cater:	incbin	"artnem\Enemy Caterkiller.bin"
0005E8E6                            		even
0005E8E6                            ; ---------------------------------------------------------------------------
0005E8E6                            ; Compressed graphics - various
0005E8E6                            ; ---------------------------------------------------------------------------
0005E8E6                            Nem_TitleCard:	incbin	"artnem\Title Cards.bin"
0005EF34 00                         		even
0005EF34                            Nem_Hud:	incbin	"artnem\HUD.bin"	; HUD (rings, time, score)
0005F0AC 00                         		even
0005F0AC                            Nem_Lives:	incbin	"artnem\HUD - Life Counter Icon.bin"
0005F1CE 00                         		even
0005F1CE                            Nem_Future:	incbin	"artnem\HUD - Life Counter Icon Future.bin"
0005F2D6 00                         		even
0005F2D6                            Nem_Ring:	incbin	"artnem\Rings.bin"
0005F42A 00                         		even
0005F42A                            Nem_Monitors:	incbin	"artnem\Monitors.bin"
0005F8B8                            		even
0005F8B8                            Nem_Explode:	incbin	"artnem\Explosion.bin"
0005FF2C                            		even
0005FF2C                            Nem_Points:	incbin	"artnem\Points.bin"	; points from destroyed enemy or object
0005FFC6 00                         		even
0005FFC6                            Nem_GameOver:	incbin	"artnem\Game Over.bin"	; game over / time over
00060158                            		even
00060158                            Nem_HSpring:	incbin	"artnem\Spring Horizontal.bin"
00060276 00                         		even
00060276                            Nem_VSpring:	incbin	"artnem\Spring Vertical.bin"
00060362                            		even
00060362                            Nem_SignPost:	incbin	"artnem\Signpost.bin"	; end of level signpost
000608DA                            		even
000608DA                            Nem_Lamp:	incbin	"artnem\Lamppost.bin"
000609C4                            		even
000609C4                            Nem_BigFlash:	incbin	"artnem\Giant Ring Flash.bin"
00060B38                            		even
00060B38                            Nem_Bonus:	incbin	"artnem\Hidden Bonuses.bin" ; hidden bonuses at end of a level
00060EC0 00                         		even
00060EC0                            ; ---------------------------------------------------------------------------
00060EC0                            ; Compressed graphics - continue screen
00060EC0                            ; ---------------------------------------------------------------------------
00060EC0                            Nem_ContSonic:	incbin	"artnem\Continue Screen Sonic.bin"
00061194 00                         		even
00061194                            Nem_MiniSonic:	incbin	"artnem\Continue Screen Stuff.bin"
0006142E 00                         		even
0006142E                            ; ---------------------------------------------------------------------------
0006142E                            ; Compressed graphics - animals
0006142E                            ; ---------------------------------------------------------------------------
0006142E                            Nem_Rabbit:	incbin	"artnem\Animal Rabbit.bin"
00061586                            		even
00061586                            Nem_Chicken:	incbin	"artnem\Animal Chicken.bin"
000616E2                            		even
000616E2                            Nem_BlackBird:	incbin	"artnem\Animal Blackbird.bin"
0006185E                            		even
0006185E                            Nem_Seal:	incbin	"artnem\Animal Seal.bin"
0006197A                            		even
0006197A                            Nem_Pig:	incbin	"artnem\Animal Pig.bin"
00061AF4                            		even
00061AF4                            Nem_Flicky:	incbin	"artnem\Animal Flicky.bin"
00061C2E                            		even
00061C2E                            Nem_Squirrel:	incbin	"artnem\Animal Squirrel.bin"
00061D8A                            		even
00061D8A                            ; ---------------------------------------------------------------------------
00061D8A                            ; Compressed graphics - primary patterns and block mappings
00061D8A                            ; ---------------------------------------------------------------------------
00061D8A                            Blk16_GHZ:	incbin	"map16\GHZ.bin"
00062766                            		even
00062766                            Nem_GHZ_1st:	incbin	"artnem\8x8 - GHZ1.bin"	; GHZ primary patterns
000640B6                            		even
000640B6                            Nem_GHZ_2nd:	incbin	"artnem\8x8 - GHZ2.bin"	; GHZ secondary patterns
0006563C                            		even
0006563C                            Blk256_GHZ:	incbin	"map256\GHZ.bin"
00067A36                            		even
00067A36                            Blk16_TS:	incbin	"map16\TS.bin"
00067CBA                            		even
00067CBA                            Nem_TS_1st:	incbin	"artnem\8x8 - TS1.bin"	; GHZ primary patterns
00068DF8                            		even
00068DF8                            Blk256_TS:	incbin	"map256\TS.bin"
000699A6                            		even
000699A6                            Blk16_LZ:	incbin	"map16\LZ.bin"
0006AB44                            		even
0006AB44                            Nem_LZ:		incbin	"artnem\8x8 - LZ.bin"	; LZ primary patterns
0006DFEC                            		even
0006DFEC                            Blk256_LZ:	incbin	"map256\LZ.bin"
0007150E                            		even
0007150E                            Blk16_MZ:	incbin	"map16\MZ.bin"
00071CFC                            		even
00071CFC                            Nem_MZ:		incbin	"artnem\8x8 - MZ.bin"	; MZ primary patterns
0007478C                            		even
0007478C                            		incbin	"map256\MZ (JP1).bin"
000768C6                            		even
000768C6                            Blk16_SLZ:	incbin	"map16\SLZ.bin"
00076F48                            		even
00076F48                            Nem_SLZ:	incbin	"artnem\8x8 - SLZ.bin"	; SLZ primary patterns
0007A9B2                            		even
0007A9B2                            Blk256_SLZ:	incbin	"map256\SLZ.bin"
0007CDBC                            		even
0007CDBC                            Blk16_SYZ:	incbin	"map16\SYZ.bin"
0007D260                            		even
0007D260                            Nem_SYZ:	incbin	"artnem\8x8 - SYZ.bin"	; SYZ primary patterns
0007EA38                            		even
0007EA38                            Blk256_SYZ:	incbin	"map256\SYZ.bin"
0007EDA2                            		even
0007EDA2                            Blk16_SBZ:	incbin	"map16\SBZ.bin"
0007F99C                            		even
0007F99C                            Nem_SBZ:	incbin	"artnem\8x8 - SBZ.bin"	; SBZ primary patterns
000821DE                            		even
000821DE                            		incbin	"map256\SBZ (JP1).bin"
00082D6A                            		even
00082D6A                            ; ---------------------------------------------------------------------------
00082D6A                            ; Compressed graphics - bosses and ending sequence
00082D6A                            ; ---------------------------------------------------------------------------
00082D6A                            Nem_Eggman:	incbin	"artnem\Boss - Main.bin"
000835D2                            		even
000835D2                            Nem_Weapons:	incbin	"artnem\Boss - Weapons.bin"
000838BC                            		even
000838BC                            Nem_Prison:	incbin	"artnem\Prison Capsule.bin"
00084140                            		even
00084140                            Nem_Sbz2Eggman:	incbin	"artnem\Boss - Eggman in SBZ2 & FZ.bin"
0008497E 00                         		even
0008497E                            Nem_FzBoss:	incbin	"artnem\Boss - Final Zone.bin"
0008514C 00                         		even
0008514C                            Nem_FzEggman:	incbin	"artnem\Boss - Eggman after FZ Fight.bin"
00085674                            		even
00085674                            Nem_Exhaust:	incbin	"artnem\Boss - Exhaust Flame.bin"
00085794                            		even
00085794                            Nem_EndEm:	incbin	"artnem\Ending - Emeralds.bin"
0008599C 00                         		even
0008599C                            Nem_EndSonic:	incbin	"artnem\Ending - Sonic.bin"
00086C86 00                         		even
00086C86                            Nem_TryAgain:	incbin	"artnem\Ending - Try Again.bin"
000875CA                            		even
000875CA                            		even
000875CA                            Kos_EndFlowers:	incbin	"artkos\Flowers at Ending.bin" ; ending sequence animated flowers
00087B5A                            		even
00087B5A                            Nem_EndFlower:	incbin	"artnem\Ending - Flowers.bin"
00087DE2                            		even
00087DE2                            Nem_CreditText:	incbin	"artnem\Ending - Credits.bin"
00088466                            		even
00088466                            Nem_EndStH:	incbin	"artnem\Ending - StH Logo.bin"
000887CA                            		even
000887CA                            
000887CA FFFF FFFF FFFF FFFF FFFF+  		dcb.b $40,$FF
0008880A                            ; ---------------------------------------------------------------------------
0008880A                            ; Collision data
0008880A                            ; ---------------------------------------------------------------------------
0008880A                            AngleMap:	incbin	"collide\Angle Map.bin"
0008890A                            		even
0008890A                            CollArray1:	incbin	"collide\Collision Array (Normal).bin"
0008990A                            		even
0008990A                            CollArray2:	incbin	"collide\Collision Array (Rotated).bin"
0008A90A                            		even
0008A90A                            Col_GHZ:	incbin	"collide\GHZ.bin"	; GHZ index
0008AAB8 00                         		even
0008AAB8                            Col_LZ:		incbin	"collide\LZ.bin"	; LZ index
0008AD5C                            		even
0008AD5C                            Col_MZ:		incbin	"collide\MZ.bin"	; MZ index
0008AF00 00                         		even
0008AF00                            Col_SLZ:	incbin	"collide\SLZ.bin"	; SLZ index
0008B0F4                            		even
0008B0F4                            Col_SYZ:	incbin	"collide\SYZ.bin"	; SYZ index
0008B1CE                            		even
0008B1CE                            Col_SBZ:	incbin	"collide\SBZ.bin"	; SBZ index
0008B39E                            		even
0008B39E                            ; ---------------------------------------------------------------------------
0008B39E                            ; Special Stage layouts
0008B39E                            ; ---------------------------------------------------------------------------
0008B39E                            SS_1:		incbin	"sslayout\1.bin"
0008B618                            		even
0008B618                            SS_2:		incbin	"sslayout\2.bin"
0008BA2A                            		even
0008BA2A                            SS_3:		incbin	"sslayout\3.bin"
0008BD86                            		even
0008BD86                            SS_4:		incbin	"sslayout\4.bin"
0008C260                            		even
0008C260                            	SS_5:		incbin	"sslayout\5 (JP1).bin"
0008C710                            			even
0008C710                            	SS_6:		incbin	"sslayout\6 (JP1).bin"
0008CA02                            		even
0008CA02                            ; ---------------------------------------------------------------------------
0008CA02                            ; Animated uncompressed graphics
0008CA02                            ; ---------------------------------------------------------------------------
0008CA02                            Art_GhzWater:	incbin	"artunc\GHZ Waterfall.bin"
0008CC02                            		even
0008CC02                            Art_GhzFlower1:	incbin	"artunc\GHZ Flower Large.bin"
0008D002                            		even
0008D002                            Art_GhzFlower2:	incbin	"artunc\GHZ Flower Small.bin"
0008D482                            		even
0008D482                            Art_MzLava1:	incbin	"artunc\MZ Lava Surface.bin"
0008D782                            		even
0008D782                            Art_MzLava2:	incbin	"artunc\MZ Lava.bin"
0008DD82                            		even
0008DD82                            Art_MzTorch:	incbin	"artunc\MZ Background Torch.bin"
0008E082                            		even
0008E082                            Art_SbzSmoke:	incbin	"artunc\SBZ Background Smoke.bin"
0008EB02                            		even
0008EB02                            
0008EB02                            ; ---------------------------------------------------------------------------
0008EB02                            ; Level	layout index
0008EB02                            ; ---------------------------------------------------------------------------
0008EB02                            Level_Index:
0008EB02                            		; GHZ
0008EB02 0000 0000 0000             		dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0008EB08 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0008EB0E 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0008EB14 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0008EB1A                            		; LZ
0008EB1A 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0008EB20 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0008EB26 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0008EB2C 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0008EB32                            		; MZ
0008EB32 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0008EB38 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0008EB3E 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0008EB44 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0008EB4A                            		; SLZ
0008EB4A 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0008EB50 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0008EB56 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0008EB5C 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0008EB62                            		; SYZ
0008EB62 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0008EB68 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0008EB6E 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0008EB74 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0008EB7A                            		; SBZ
0008EB7A 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0008EB80 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0008EB86 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0008EB8C 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0008EB92                            		; Ending
0008EB92 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0008EB98 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0008EB9E 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0008EBA4 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0008EBAA                            
0008EBAA                            Level_GHZ1:	incbin	"levels\ghz1.bin"
0008EDDC                            		even
0008EDDC 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0008EDE0                            Level_GHZ2:	incbin	"levels\ghz2.bin"
0008EF1A                            		even
0008EF1A 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0008EF1E                            Level_GHZ3:	incbin	"levels\ghz3.bin"
0008F040                            		even
0008F040                            Level_GHZbg:	incbin	"levels\ghzbg.bin"
0008F07E                            		even
0008F07E 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0008F082 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0008F086                            
0008F086                            Level_LZ1:	incbin	"levels\lz1.bin"
0008F148                            		even
0008F148                            Level_LZbg:	incbin	"levels\lzbg.bin"
0008F24A                            		even
0008F24A 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0008F24E                            Level_LZ2:	incbin	"levels\lz2.bin"
0008F2E8                            		even
0008F2E8 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0008F2EC                            Level_LZ3:	incbin	"levels\lz3.bin"
0008F406                            		even
0008F406 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0008F40A                            Level_SBZ3:	incbin	"levels\sbz3.bin"
0008F4C4                            		even
0008F4C4 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0008F4C8                            
0008F4C8                            Level_MZ1:	incbin	"levels\mz1.bin"
0008F5BA                            		even
0008F5BA                            Level_MZ1bg:	incbin	"levels\mz1bg.bin"
0008F6DC                            		even
0008F6DC                            Level_MZ2:	incbin	"levels\mz2.bin"
0008F7FE                            		even
0008F7FE                            Level_MZ2bg:	incbin	"levels\mz2bg.bin"
0008F920                            		even
0008F920 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0008F924                            Level_MZ3:	incbin	"levels\mz3.bin"
0008F9BE                            		even
0008F9BE                            Level_MZ3bg:	incbin	"levels\mz3bg.bin"
0008FAE0                            		even
0008FAE0 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0008FAE4 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0008FAE8                            
0008FAE8                            Level_SLZ1:	incbin	"levels\slz1.bin"
0008FBFA                            		even
0008FBFA                            Level_SLZbg:	incbin	"levels\slzbg.bin"
0008FC74                            		even
0008FC74                            Level_SLZ2:	incbin	"levels\slz2.bin"
0008FD64                            		even
0008FD64                            Level_SLZ3:	incbin	"levels\slz3.bin"
0008FE7E                            		even
0008FE7E 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0008FE82                            
0008FE82                            Level_SYZ1:	incbin	"levels\syz1.bin"
0008FF86                            		even
0008FF86                            		incbin	"levels\syzbg (JP1).bin"
0008FFC0                            		even
0008FFC0 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0008FFC4                            Level_SYZ2:	incbin	"levels\syz2.bin"
000900C8                            		even
000900C8 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
000900CC                            Level_SYZ3:	incbin	"levels\syz3.bin"
00090226 00                         		even
00090226 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0009022A 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0009022E                            
0009022E                            Level_SBZ1:	incbin	"levels\sbz1.bin"
00090350                            		even
00090350                            Level_SBZ1bg:	incbin	"levels\sbz1bg.bin"
0009038E                            		even
0009038E                            Level_SBZ2:	incbin	"levels\sbz2.bin"
000904D0                            		even
000904D0                            Level_SBZ2bg:	incbin	"levels\sbz2bg.bin"
0009063A                            		even
0009063A 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0009063E 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00090642                            Level_End:	incbin	"levels\ending.bin"
00090672 00                         		even
00090672 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00090676                            
00090676                            
00090676                            Art_BigRing:	incbin	"artunc\Giant Ring.bin"
000912B6                            		even
000912B6                            
00091300                            
00091300                            ; ---------------------------------------------------------------------------
00091300                            ; Sprite locations index
00091300                            ; ---------------------------------------------------------------------------
00091300                            ObjPos_Index:
00091300                            		; GHZ
00091300 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091304 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091308 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009130C 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091310                            		; LZ
00091310 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091314 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091318 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009131C 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091320                            		; MZ
00091320 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091324 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091328 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009132C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091330                            		; SLZ
00091330 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091334 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091338 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009133C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091340                            		; SYZ
00091340 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091344 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091348 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009134C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091350                            		; SBZ
00091350 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091354 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091358 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009135C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091360                            		; Ending
00091360 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091364 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091368 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009136C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091370                            		; --- Put extra object data here. ---
00091370                            ObjPosLZPlatform_Index:
00091370 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00091374 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00091378 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0009137C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00091380                            ObjPosSBZPlatform_Index:
00091380 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00091384 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00091388 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0009138C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00091390 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00091396                            ObjPos_GHZ1:	incbin	"objpos\ghz1.bin"
00091A3E                            		even
00091A3E                            ObjPos_GHZ2:	incbin	"objpos\ghz2.bin"
0009205C                            		even
0009205C                            		incbin	"objpos\ghz3 (JP1).bin"
0009266E                            		even
0009266E                            		incbin	"objpos\lz1 (JP1).bin"
000926A4                            		even
000926A4                            ObjPos_LZ2:	incbin	"objpos\lz2.bin"
000929E6                            		even
000929E6                            		incbin	"objpos\lz3 (JP1).bin"
00092FAA                            		even
00092FAA                            ObjPos_SBZ3:	incbin	"objpos\sbz3.bin"
00093514                            		even
00093514                            ObjPos_LZ1pf1:	incbin	"objpos\lz1pf1.bin"
00093546                            		even
00093546                            ObjPos_LZ1pf2:	incbin	"objpos\lz1pf2.bin"
00093578                            		even
00093578                            ObjPos_LZ2pf1:	incbin	"objpos\lz2pf1.bin"
000935AA                            		even
000935AA                            ObjPos_LZ2pf2:	incbin	"objpos\lz2pf2.bin"
000935DC                            		even
000935DC                            ObjPos_LZ3pf1:	incbin	"objpos\lz3pf1.bin"
00093626                            		even
00093626                            ObjPos_LZ3pf2:	incbin	"objpos\lz3pf2.bin"
00093664                            		even
00093664                            		incbin	"objpos\mz1 (JP1).bin"
00093C5E                            		even
00093C5E                            ObjPos_MZ2:	incbin	"objpos\mz2.bin"
0009425E                            		even
0009425E                            ObjPos_MZ3:	incbin	"objpos\mz3.bin"
0009454C                            		even
0009454C                            ObjPos_SLZ1:	incbin	"objpos\slz1.bin"
00094A80                            		even
00094A80                            ObjPos_SLZ2:	incbin	"objpos\slz2.bin"
00094EEE                            		even
00094EEE                            ObjPos_SLZ3:	incbin	"objpos\slz3.bin"
000954D0                            		even
000954D0                            ObjPos_SYZ1:	incbin	"objpos\syz1.bin"
0009571C                            		even
0009571C                            ObjPos_SYZ2:	incbin	"objpos\syz2.bin"
0009597A                            		even
0009597A                            		incbin	"objpos\syz3 (JP1).bin"
000959AA                            		even
000959AA                            		incbin	"objpos\sbz1 (JP1).bin"
000959F2                            		even
000959F2                            ObjPos_SBZ2:	incbin	"objpos\sbz2.bin"
00095A1C                            		even
00095A1C                            ObjPos_FZ:	incbin	"objpos\fz.bin"
00095A58                            		even
00095A58                            ObjPos_SBZ1pf1:	incbin	"objpos\sbz1pf1.bin"
00095A8A                            		even
00095A8A                            ObjPos_SBZ1pf2:	incbin	"objpos\sbz1pf2.bin"
00095ABC                            		even
00095ABC                            ObjPos_SBZ1pf3:	incbin	"objpos\sbz1pf3.bin"
00095AEE                            		even
00095AEE                            ObjPos_SBZ1pf4:	incbin	"objpos\sbz1pf4.bin"
00095B20                            		even
00095B20                            ObjPos_SBZ1pf5:	incbin	"objpos\sbz1pf5.bin"
00095B52                            		even
00095B52                            ObjPos_SBZ1pf6:	incbin	"objpos\sbz1pf6.bin"
00095B8A                            		even
00095B8A                            ObjPos_End:	incbin	"objpos\ending.bin"
00095CE6                            		even
00095CE6 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00095CEC                            
00095CEC                            		dcb.b $63C,$FF
00096328                            		;dcb.b ($10000-(*%$10000))-(EndOfRom-SoundDriver),$FF
00096328                            
00096328                            SoundDriver:	include "s1.sounddriver.asm"
00096328                            ; ---------------------------------------------------------------------------
00096328                            ; Modified (early?) SMPS 68k Type 1b
00096328                            ; ---------------------------------------------------------------------------
00096328                            ; Go_SoundTypes:
00096328 0000 0000                  Go_SoundPriorities:	dc.l SoundPriorities
0009632C                            ; Go_SoundD0:
0009632C 0000 0000                  Go_SpecSoundIndex:	dc.l SpecSoundIndex
00096330 0000 0000                  Go_MusicIndex:		dc.l MusicIndex
00096334 0000 0000                  Go_SoundIndex:		dc.l SoundIndex
00096338                            ; off_719A0:
00096338 0000 0000                  Go_SpeedUpIndex:	dc.l SpeedUpIndex
0009633C 0000 0000                  Go_PSGIndex:		dc.l PSG_Index
00096340                            ; ---------------------------------------------------------------------------
00096340                            ; PSG instruments used in music
00096340                            ; ---------------------------------------------------------------------------
00096340                            PSG_Index:
00096340 0000 0000 0000 0000 0000+  		dc.l PSG1, PSG2, PSG3
0009634C 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00096358 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00096364                            PSG1:		incbin	"sound/psg/psg1.bin"
0009637B                            PSG2:		incbin	"sound/psg/psg2.bin"
00096382                            PSG3:		incbin	"sound/psg/psg3.bin"
00096393                            PSG4:		incbin	"sound/psg/psg4.bin"
0009639E                            PSG6:		incbin	"sound/psg/psg6.bin"
000963AD                            PSG5:		incbin	"sound/psg/psg5.bin"
000963D7                            PSG7:		incbin	"sound/psg/psg7.bin"
000963F3                            PSG8:		incbin	"sound/psg/psg8.bin"
0009641B                            PSG9:		incbin	"sound/psg/psg9.bin"
0009642C                            ; ---------------------------------------------------------------------------
0009642C                            ; New tempos for songs during speed shoes
0009642C                            ; ---------------------------------------------------------------------------
0009642C                            ; DANGER! several songs will use the first few bytes of MusicIndex as their main
0009642C                            ; tempos while speed shoes are active. If you don't want that, you should add
0009642C                            ; their "correct" sped-up main tempos to the list.
0009642C                            ; byte_71A94:
0009642C                            SpeedUpIndex:
0009642C 07                         		dc.b 7		; GHZ
0009642D 72                         		dc.b $72	; LZ
0009642E 73                         		dc.b $73	; MZ
0009642F 26                         		dc.b $26	; SLZ
00096430 15                         		dc.b $15	; SYZ
00096431 08                         		dc.b 8		; SBZ
00096432 FF                         		dc.b $FF	; Invincibility
00096433 05                         		dc.b 5		; Extra Life
00096434                            		;dc.b ?		; Special Stage
00096434                            		;dc.b ?		; Title Screen
00096434                            		;dc.b ?		; Ending
00096434                            		;dc.b ?		; Boss
00096434                            		;dc.b ?		; FZ
00096434                            		;dc.b ?		; Sonic Got Through
00096434                            		;dc.b ?		; Game Over
00096434                            		;dc.b ?		; Continue Screen
00096434                            		;dc.b ?		; Credits
00096434                            		;dc.b ?		; Drowning
00096434                            		;dc.b ?		; Get Emerald
00096434                            
00096434                            ; ---------------------------------------------------------------------------
00096434                            ; Music	Pointers
00096434                            ; ---------------------------------------------------------------------------
00096434                            MusicIndex:
00096434 0000 0000                  ptr_mus81:	dc.l Music81
00096438 0000 0000                  ptr_mus82:	dc.l Music82
0009643C 0000 0000                  ptr_mus83:	dc.l Music83
00096440 0000 0000                  ptr_mus84:	dc.l Music84
00096444 0000 0000                  ptr_mus85:	dc.l Music85
00096448 0000 0000                  ptr_mus86:	dc.l Music86
0009644C 0000 0000                  ptr_mus87:	dc.l Music87
00096450 0000 0000                  ptr_mus88:	dc.l Music88
00096454 0000 0000                  ptr_mus89:	dc.l Music89
00096458 0000 0000                  ptr_mus8A:	dc.l Music8A
0009645C 0000 0000                  ptr_mus8B:	dc.l Music8B
00096460 0000 0000                  ptr_mus8C:	dc.l Music8C
00096464 0000 0000                  ptr_mus8D:	dc.l Music8D
00096468 0000 0000                  ptr_mus8E:	dc.l Music8E
0009646C 0000 0000                  ptr_mus8F:	dc.l Music8F
00096470 0000 0000                  ptr_mus90:	dc.l Music90
00096474 0000 0000                  ptr_mus91:	dc.l Music91
00096478 0000 0000                  ptr_mus92:	dc.l Music92
0009647C 0000 0000                  ptr_mus93:	dc.l Music93
00096480 0000 0000                  ptr_mus94:	dc.l Music94
00096484 0000 0000                  ptr_mus95:	dc.l Music95
00096488 0000 0000                  ptr_mus96:	dc.l Music96
0009648C 0000 0000                  ptr_mus97:	dc.l Music97
00096490 0000 0000                  ptr_mus98:	dc.l Music98
00096494 0000 0000                  ptr_mus99:	dc.l Music99
00096498 0000 0000                  ptr_mus9A:	dc.l Music9A
0009649C 0000 0000                  ptr_mus9B:	dc.l Music9B
000964A0 0000 0000                  ptr_mus9C:	dc.l Music9C
000964A4                            ptr_musend
000964A4                            ; ---------------------------------------------------------------------------
000964A4                            ; Priority of sound. New music or SFX must have a priority higher than or equal
000964A4                            ; to what is stored in v_sndprio or it won't play. If bit 7 of new priority is
000964A4                            ; set ($80 and up), the new music or SFX will not set its priority -- meaning
000964A4                            ; any music or SFX can override it (as long as it can override whatever was
000964A4                            ; playing before). Usually, SFX will only override SFX, special SFX ($D0-$DF)
000964A4                            ; will only override special SFX and music will only override music.
000964A4                            ; ---------------------------------------------------------------------------
000964A4                            ; SoundTypes:
000964A4                            SoundPriorities:
000964A4 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $81
000964B3 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
000964C3 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
000964D3 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
000964E3 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
000964F3 8080 8080 8080 8080 8080+  		dc.b $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	; $D0
00096503 9090 9090 90               		dc.b $90,$90,$90,$90,$90                                            	; $E0
00096508                            
00096508                            ; ---------------------------------------------------------------------------
00096508                            ; Subroutine to update music more than once per frame
00096508                            ; (Called by horizontal & vert. interrupts)
00096508                            ; ---------------------------------------------------------------------------
00096508                            
00096508                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00096508                            
00096508                            ; sub_71B4C:
00096508                            UpdateMusic:
00096508 33FC 0100 00A1 1100        		stopZ80
00096510 4E71                       		nop	
00096512 4E71                       		nop	
00096514 4E71                       		nop	
00096516                            ; loc_71B5A:
00096516                            @updateloop:
00096516 0839 0000 00A1 1100        		btst	#0,(z80_bus_request).l		; Is the z80 busy?
0009651E 66F6                       		bne.s	@updateloop			; If so, wait
00096520                            
00096520 0839 0007 00A0 1FFD        		btst	#7,(z80_dac_status).l		; Is DAC accepting new samples?
00096528 6700                       		beq.s	@driverinput			; Branch if yes
0009652A 33FC 0000 00A1 1100        		startZ80
00096532 4E71                       		nop	
00096534 4E71                       		nop	
00096536 4E71                       		nop	
00096538 4E71                       		nop	
0009653A 4E71                       		nop	
0009653C 60CA                       		bra.s	UpdateMusic
0009653E                            ; ===========================================================================
0009653E                            ; loc_71B82:
0009653E                            @driverinput:
0009653E 4DF9 00FF F000             		lea	(v_snddriver_ram&$FFFFFF).l,a6
00096544 422E 000E                  		clr.b	f_voice_selector(a6)
00096548 4A2E 0003                  		tst.b	f_pausemusic(a6)		; is music paused?
0009654C 6600 0000                  		bne.w	PauseMusic			; if yes, branch
00096550 532E 0001                  		subq.b	#1,v_main_tempo_timeout(a6)	; Has main tempo timer expired?
00096554 6600                       		bne.s	@skipdelay
00096556 4EBA 0000                  		jsr	TempoWait(pc)
0009655A                            ; loc_71B9E:
0009655A                            @skipdelay:
0009655A 102E 0004                  		move.b	v_fadeout_counter(a6),d0
0009655E 6700                       		beq.s	@skipfadeout
00096560 4EBA 0000                  		jsr	DoFadeOut(pc)
00096564                            ; loc_71BA8:
00096564                            @skipfadeout:
00096564 4A2E 0024                  		tst.b	f_fadein_flag(a6)
00096568 6700                       		beq.s	@skipfadein
0009656A 4EBA 0000                  		jsr	DoFadeIn(pc)
0009656E                            ; loc_71BB2:
0009656E                            @skipfadein:
0009656E                            		; DANGER! The following line only checks v_soundqueue0 and v_soundqueue1, breaking v_soundqueue2.
0009656E 4A6E 000A                  		tst.w	v_soundqueue0(a6)	; is a music or sound queued for played?
00096572 6700                       		beq.s	@nosndinput		; if not, branch
00096574 4EBA 0000                  		jsr	CycleSoundQueue(pc)
00096578                            ; loc_71BBC:
00096578                            @nosndinput:
00096578 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; is song queue set for silence (empty)?
0009657E 6700                       		beq.s	@nonewsound		; If yes, branch
00096580 4EBA 0000                  		jsr	PlaySoundID(pc)
00096584                            ; loc_71BC8:
00096584                            @nonewsound:
00096584 4A38 C901                  		tst.b	($FFFFC901).w
00096588 6700                       		beq.s	@cont
0009658A 5338 C901                  		subq.b	#1,($FFFFC901).w
0009658E                            		
0009658E                            @cont:
0009658E 4BEE 0040                  		lea	v_music_dac_track(a6),a5
00096592 4A15                       		tst.b	(a5)			; Is DAC track playing? (TrackPlaybackControl)
00096594 6A00                       		bpl.s	@dacdone		; Branch if not
00096596 4EBA 0000                  		jsr	DACUpdateTrack(pc)
0009659A                            ; loc_71BD4:
0009659A                            @dacdone:
0009659A 422E 0008                  		clr.b	f_updating_dac(a6)
0009659E 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
000965A0                            ; loc_71BDA:
000965A0                            @bgmfmloop:
000965A0 DAFC 0030                  		adda.w	#TrackSz,a5
000965A4 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000965A6 6A00                       		bpl.s	@bgmfmnext		; Branch if not
000965A8 4EBA 0000                  		jsr	FMUpdateTrack(pc)
000965AC                            ; loc_71BE6:
000965AC                            @bgmfmnext:
000965AC 51CF FFF2                  		dbf	d7,@bgmfmloop
000965B0                            
000965B0 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks
000965B2                            ; loc_71BEC:
000965B2                            @bgmpsgloop:
000965B2 DAFC 0030                  		adda.w	#TrackSz,a5
000965B6 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000965B8 6A00                       		bpl.s	@bgmpsgnext		; Branch if not
000965BA 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
000965BE                            ; loc_71BF8:
000965BE                            @bgmpsgnext:
000965BE 51CF FFF2                  		dbf	d7,@bgmpsgloop
000965C2                            
000965C2 1D7C 0080 000E             		move.b	#$80,f_voice_selector(a6)			; Now at SFX tracks
000965C8 7E02                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d7	; 3 FM tracks (SFX)
000965CA                            ; loc_71C04:
000965CA                            @sfxfmloop:
000965CA DAFC 0030                  		adda.w	#TrackSz,a5
000965CE 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000965D0 6A00                       		bpl.s	@sfxfmnext		; Branch if not
000965D2 4EBA 0000                  		jsr	FMUpdateTrack(pc)
000965D6                            ; loc_71C10:
000965D6                            @sfxfmnext:
000965D6 51CF FFF2                  		dbf	d7,@sfxfmloop
000965DA                            
000965DA 7E02                       		moveq	#((v_sfx_psg_tracks_end-v_sfx_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks (SFX)
000965DC                            ; loc_71C16:
000965DC                            @sfxpsgloop:
000965DC DAFC 0030                  		adda.w	#TrackSz,a5
000965E0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000965E2 6A00                       		bpl.s	@sfxpsgnext		; Branch of not
000965E4 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
000965E8                            ; loc_71C22:
000965E8                            @sfxpsgnext:
000965E8 51CF FFF2                  		dbf	d7,@sfxpsgloop
000965EC                            		
000965EC 1D7C 0040 000E             		move.b	#$40,f_voice_selector(a6) ; Now at special SFX tracks
000965F2 DAFC 0030                  		adda.w	#TrackSz,a5
000965F6 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000965F8 6A00                       		bpl.s	@specfmdone		; Branch if not
000965FA 4EBA 0000                  		jsr	FMUpdateTrack(pc)
000965FE                            ; loc_71C38:
000965FE                            @specfmdone:
000965FE DAFC 0030                  		adda.w	#TrackSz,a5
00096602 4A15                       		tst.b	(a5)			; Is track playing (TrackPlaybackControl)
00096604 6A00                       		bpl.s	DoStartZ80		; Branch if not
00096606 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
0009660A                            ; loc_71C44:
0009660A                            DoStartZ80:
0009660A 33FC 0000 00A1 1100        		startZ80
00096612 0838 0006 FFF8             		btst #6,(v_megadrive).w ; is Megadrive PAL?
00096618 6700                       		beq.s @end ; if not, branch
0009661A 0C38 0005 F015             		cmpi.b #$5,(v_palmuscounter).w ; 5th frame?
00096620 6600                       		bne.s @end ; if not, branch
00096622 11FC 0000 F015             		move.b #$0,(v_palmuscounter).w ; reset counter
00096628 6000 FEDE                  		bra.w UpdateMusic ; run sound driver again
0009662C                            
0009662C                            	@end:
0009662C 5238 F015                  		addq.b #$1,(v_palmuscounter).w ; add 1 to frame count
00096630 4E75                       		rts
00096632                            ; End of function UpdateMusic
00096632                            
00096632                            
00096632                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00096632                            
00096632                            ; sub_71C4E: UpdateDAC:
00096632                            DACUpdateTrack:
00096632 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Has DAC sample timeout expired?
00096636 6600                       		bne.s	@locret				; Return if not
00096638 1D7C 0080 0008             		move.b	#$80,f_updating_dac(a6)		; Set flag to indicate this is the DAC
0009663E                            ;DACDoNext:
0009663E 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; DAC track data pointer
00096642                            ; loc_71C5E:
00096642                            @sampleloop:
00096642 7A00                       		moveq	#0,d5
00096644 1A1C                       		move.b	(a4)+,d5	; Get next SMPS unit
00096646 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
0009664A 6500                       		blo.s	@notcoord	; Branch if not
0009664C 4EBA 0000                  		jsr	CoordFlag(pc)
00096650 60F0                       		bra.s	@sampleloop
00096652                            ; ===========================================================================
00096652                            ; loc_71C6E:
00096652                            @notcoord:
00096652 4A05                       		tst.b	d5			; Is it a sample?
00096654 6A00                       		bpl.s	@gotduration		; Branch if not (duration)
00096656 1B45 0010                  		move.b	d5,TrackSavedDAC(a5)	; Store new sample
0009665A 1A1C                       		move.b	(a4)+,d5		; Get another byte
0009665C 6A00                       		bpl.s	@gotduration		; Branch if it is a duration
0009665E 534C                       		subq.w	#1,a4			; Put byte back
00096660 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5) ; Use last duration
00096666 6000                       		bra.s	@gotsampleduration
00096668                            ; ===========================================================================
00096668                            ; loc_71C84:
00096668                            @gotduration:
00096668 4EBA 0000                  		jsr	SetDuration(pc)
0009666C                            ; loc_71C88:
0009666C                            @gotsampleduration:
0009666C 2B4C 0004                  		move.l	a4,TrackDataPointer(a5) ; Save pointer
00096670 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00096674 6600                       		bne.s	@locret			; Return if yes
00096676 7000                       		moveq	#0,d0
00096678 102D 0010                  		move.b	TrackSavedDAC(a5),d0	; Get sample
0009667C 0C00 0080                  		cmpi.b	#$80,d0			; Is it a rest?
00096680 6700                       		beq.s	@locret			; Return if yes
00096682 0800 0003                  		btst	#3,d0			; Is bit 3 set (samples between $88-$8F)?
00096686 6600                       		bne.s	@timpani		; Various timpani
00096688 13C0 00A0 1FFF             		move.b	d0,(z80_dac_sample).l
0009668E                            ; locret_71CAA:
0009668E                            @locret:
0009668E 4E75                       		rts	
00096690                            ; ===========================================================================
00096690                            ; loc_71CAC:
00096690                            @timpani:
00096690 0400 0088                  		subi.b	#$88,d0		; Convert into an index
00096694 103B 0000                  		move.b	DAC_sample_rate(pc,d0.w),d0
00096698                            		; Warning: this affects the raw pitch of sample $83, meaning it will
00096698                            		; use this value from then on.
00096698 13C0 00A0 00EA             		move.b	d0,(z80_dac3_pitch).l
0009669E 13FC 0083 00A0 1FFF        		move.b	#$83,(z80_dac_sample).l	; Use timpani
000966A6 4E75                       		rts	
000966A8                            ; End of function DACUpdateTrack
000966A8                            
000966A8                            ; ===========================================================================
000966A8                            ; Note: this only defines rates for samples $88-$8D, meaning $8E-$8F are invalid.
000966A8                            ; Also, $8C-$8D are so slow you may want to skip them.
000966A8                            ; byte_71CC4:
000966A8 171A 2122 FFFF             DAC_sample_rate: dc.b $17, $1A, $21, $22, $FF, $FF
000966AE                            
000966AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000966AE                            
000966AE                            ; sub_71CCA:
000966AE                            FMUpdateTrack:
000966AE 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5) ; Update duration timeout
000966B2 6600                       		bne.s	@notegoing		; Branch if it hasn't expired
000966B4 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
000966B8 4EBA 0000                  		jsr	FMDoNext(pc)
000966BC 4EBA 0000                  		jsr	FMPrepareNote(pc)
000966C0 6000 0000                  		bra.w	FMNoteOn
000966C4                            ; ===========================================================================
000966C4                            ; loc_71CE0:
000966C4                            @notegoing:
000966C4 4EBA 0000                  		jsr	NoteTimeoutUpdate(pc)
000966C8 4EBA 0000                  		jsr	DoModulation(pc)
000966CC 6000 0000                  		bra.w	FMUpdateFreq
000966D0                            ; End of function FMUpdateTrack
000966D0                            
000966D0                            
000966D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000966D0                            
000966D0                            ; sub_71CEC:
000966D0                            FMDoNext:
000966D0 286D 0004                  		movea.l	TrackDataPointer(a5),a4 ; Track data pointer
000966D4 0895 0001                  		bclr	#1,(a5)			; Clear 'track at rest' bit (TrackPlaybackControl)
000966D8                            ; loc_71CF4:
000966D8                            @noteloop:
000966D8 7A00                       		moveq	#0,d5
000966DA 1A1C                       		move.b	(a4)+,d5	; Get byte from track
000966DC 0C05 00E0                  		cmpi.b	#$E0,d5		; Is this a coord. flag?
000966E0 6500                       		blo.s	@gotnote	; Branch if not
000966E2 4EBA 0000                  		jsr	CoordFlag(pc)
000966E6 60F0                       		bra.s	@noteloop
000966E8                            ; ===========================================================================
000966E8                            ; loc_71D04:
000966E8                            @gotnote:
000966E8 4EBA 0000                  		jsr	FMNoteOff(pc)
000966EC 4A05                       		tst.b	d5		; Is this a note?
000966EE 6A00                       		bpl.s	@gotduration	; Branch if not
000966F0 4EBA 0000                  		jsr	FMSetFreq(pc)
000966F4 1A1C                       		move.b	(a4)+,d5	; Get another byte
000966F6 6A00                       		bpl.s	@gotduration	; Branch if it is a duration
000966F8 534C                       		subq.w	#1,a4		; Otherwise, put it back
000966FA 6000 0000                  		bra.w	FinishTrackUpdate
000966FE                            ; ===========================================================================
000966FE                            ; loc_71D1A:
000966FE                            @gotduration:
000966FE 4EBA 0000                  		jsr	SetDuration(pc)
00096702 6000 0000                  		bra.w	FinishTrackUpdate
00096706                            ; End of function FMDoNext
00096706                            
00096706                            
00096706                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00096706                            
00096706                            ; sub_71D22:
00096706                            FMSetFreq:
00096706 0405 0080                  		subi.b	#$80,d5			; Make it a zero-based index
0009670A 6700                       		beq.s	TrackSetRest
0009670C DA2D 0008                  		add.b	TrackTranspose(a5),d5	; Add track transposition
00096710 0245 007F                  		andi.w	#$7F,d5			; Clear high byte and sign bit
00096714 E34D                       		lsl.w	#1,d5
00096716 41FA 0000                  		lea	FMFrequencies(pc),a0
0009671A 3C30 5000                  		move.w	(a0,d5.w),d6
0009671E 3B46 0010                  		move.w	d6,TrackFreq(a5)	; Store new frequency
00096722 4E75                       		rts	
00096724                            ; End of function FMSetFreq
00096724                            
00096724                            
00096724                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00096724                            
00096724                            ; sub_71D40:
00096724                            SetDuration:
00096724 1005                       		move.b	d5,d0
00096726 122D 0002                  		move.b	TrackTempoDivider(a5),d1	; Get dividing timing
0009672A                            ; loc_71D46:
0009672A                            @multloop:
0009672A 5301                       		subq.b	#1,d1
0009672C 6700                       		beq.s	@donemult
0009672E D005                       		add.b	d5,d0
00096730 60F8                       		bra.s	@multloop
00096732                            ; ===========================================================================
00096732                            ; loc_71D4E:
00096732                            @donemult:
00096732 1B40 000F                  		move.b	d0,TrackSavedDuration(a5)	; Save duration
00096736 1B40 000E                  		move.b	d0,TrackDurationTimeout(a5)	; Save duration timeout
0009673A 4E75                       		rts	
0009673C                            ; End of function SetDuration
0009673C                            
0009673C                            ; ===========================================================================
0009673C                            ; loc_71D58:
0009673C                            TrackSetRest:
0009673C 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00096740 426D 0010                  		clr.w	TrackFreq(a5)	; Clear frequency
00096744                            
00096744                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00096744                            
00096744                            ; sub_71D60:
00096744                            FinishTrackUpdate:
00096744 2B4C 0004                  		move.l	a4,TrackDataPointer(a5)	; Store new track position
00096748 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5)	; Reset note timeout
0009674E 0815 0004                  		btst	#4,(a5)				; Is track set to not attack note? (TrackPlaybackControl)
00096752 6600                       		bne.s	@locret				; If so, branch
00096754 1B6D 0013 0012             		move.b	TrackNoteTimeoutMaster(a5),TrackNoteTimeout(a5)	; Reset note fill timeout
0009675A 422D 000C                  		clr.b	TrackVolEnvIndex(a5)		; Reset PSG volume envelope index (even on FM tracks...)
0009675E 0815 0003                  		btst	#3,(a5)				; Is modulation on? (TrackPlaybackControl)
00096762 6700                       		beq.s	@locret				; If not, return (TrackPlaybackControl)
00096764 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Modulation data pointer
00096768 1B58 0018                  		move.b	(a0)+,TrackModulationWait(a5)	; Reset wait
0009676C 1B58 0019                  		move.b	(a0)+,TrackModulationSpeed(a5)	; Reset speed
00096770 1B58 001A                  		move.b	(a0)+,TrackModulationDelta(a5)	; Reset delta
00096774 1018                       		move.b	(a0)+,d0			; Get steps
00096776 E208                       		lsr.b	#1,d0				; Halve them
00096778 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; Then store
0009677C 426D 001C                  		clr.w	TrackModulationVal(a5)		; Reset frequency change
00096780                            ; locret_71D9C:
00096780                            @locret:
00096780 4E75                       		rts	
00096782                            ; End of function FinishTrackUpdate
00096782                            
00096782                            
00096782                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00096782                            
00096782                            ; sub_71D9E: NoteFillUpdate
00096782                            NoteTimeoutUpdate:
00096782 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)	; Is note fill on?
00096786 6700                       		beq.s	@locret
00096788 532D 0012                  		subq.b	#1,TrackNoteTimeout(a5)	; Update note fill timeout
0009678C 6600                       		bne.s	@locret				; Return if it hasn't expired
0009678E 08D5 0001                  		bset	#1,(a5)				; Put track at rest (TrackPlaybackControl)
00096792 4A2D 0001                  		tst.b	TrackVoiceControl(a5)		; Is this a psg track?
00096796 6B00 0000                  		bmi.w	@psgnoteoff			; If yes, branch
0009679A 4EBA 0000                  		jsr	FMNoteOff(pc)
0009679E 584F                       		addq.w	#4,sp				; Do not return to caller
000967A0 4E75                       		rts	
000967A2                            ; ===========================================================================
000967A2                            ; loc_71DBE:
000967A2                            @psgnoteoff:
000967A2 4EBA 0000                  		jsr	PSGNoteOff(pc)
000967A6 584F                       		addq.w	#4,sp		; Do not return to caller
000967A8                            ; locret_71DC4:
000967A8                            @locret:
000967A8 4E75                       		rts	
000967AA                            ; End of function NoteTimeoutUpdate
000967AA                            
000967AA                            
000967AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000967AA                            
000967AA                            ; sub_71DC6:
000967AA                            DoModulation:
000967AA 584F                       		addq.w	#4,sp				; Do not return to caller (but see below)
000967AC 0815 0003                  		btst	#3,(a5)				; Is modulation active? (TrackPlaybackControl)
000967B0 6700                       		beq.s	@locret				; Return if not
000967B2 4A2D 0018                  		tst.b	TrackModulationWait(a5)	; Has modulation wait expired?
000967B6 6700                       		beq.s	@waitdone			; If yes, branch
000967B8 532D 0018                  		subq.b	#1,TrackModulationWait(a5)	; Update wait timeout
000967BC 4E75                       		rts	
000967BE                            ; ===========================================================================
000967BE                            ; loc_71DDA:
000967BE                            @waitdone:
000967BE 532D 0019                  		subq.b	#1,TrackModulationSpeed(a5)	; Update speed
000967C2 6700                       		beq.s	@updatemodulation		; If it expired, want to update modulation
000967C4 4E75                       		rts	
000967C6                            ; ===========================================================================
000967C6                            ; loc_71DE2:
000967C6                            @updatemodulation:
000967C6 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Get modulation data
000967CA 1B68 0001 0019             		move.b	1(a0),TrackModulationSpeed(a5)	; Restore modulation speed
000967D0 4A2D 001B                  		tst.b	TrackModulationSteps(a5)	; Check number of steps
000967D4 6600                       		bne.s	@calcfreq			; If nonzero, branch
000967D6 1B68 0003 001B             		move.b	3(a0),TrackModulationSteps(a5)	; Restore from modulation data
000967DC 442D 001A                  		neg.b	TrackModulationDelta(a5)	; Negate modulation delta
000967E0 4E75                       		rts	
000967E2                            ; ===========================================================================
000967E2                            ; loc_71DFE:
000967E2                            @calcfreq:
000967E2 532D 001B                  		subq.b	#1,TrackModulationSteps(a5)	; Update modulation steps
000967E6 1C2D 001A                  		move.b	TrackModulationDelta(a5),d6	; Get modulation delta
000967EA 4886                       		ext.w	d6
000967EC DC6D 001C                  		add.w	TrackModulationVal(a5),d6	; Add cumulative modulation change
000967F0 3B46 001C                  		move.w	d6,TrackModulationVal(a5)	; Store it
000967F4 DC6D 0010                  		add.w	TrackFreq(a5),d6		; Add note frequency to it
000967F8 594F                       		subq.w	#4,sp		; In this case, we want to return to caller after all
000967FA                            ; locret_71E16:
000967FA                            @locret:
000967FA 4E75                       		rts	
000967FC                            ; End of function DoModulation
000967FC                            
000967FC                            
000967FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000967FC                            
000967FC                            ; sub_71E18:
000967FC                            FMPrepareNote:
000967FC 0815 0001                  		btst	#1,(a5)			; Is track resting? (TrackPlaybackControl)
00096800 6600                       		bne.s	locret_71E48		; Return if so
00096802 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get current note frequency
00096806 6700                       		beq.s	FMSetRest		; Branch if zero
00096808                            ; loc_71E24:
00096808                            FMUpdateFreq:
00096808 102D 001E                  		move.b	TrackDetune(a5),d0 	; Get detune value
0009680C 4880                       		ext.w	d0
0009680E DC40                       		add.w	d0,d6			; Add note frequency
00096810 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00096814 6600                       		bne.s	locret_71E48		; Return if so
00096816 3206                       		move.w	d6,d1
00096818 E049                       		lsr.w	#8,d1
0009681A 103C 00A4                  		move.b	#$A4,d0			; Register for upper 6 bits of frequency
0009681E 4EBA 0000                  		jsr	WriteFMIorII(pc)
00096822 1206                       		move.b	d6,d1
00096824 103C 00A0                  		move.b	#$A0,d0			; Register for lower 8 bits of frequency
00096828 4EBA 0000                  		jsr	WriteFMIorII(pc)	; (It would be better if this were a jmp)
0009682C                            ; locret_71E48:
0009682C                            locret_71E48:
0009682C 4E75                       		rts	
0009682E                            ; ===========================================================================
0009682E                            ; loc_71E4A:
0009682E                            FMSetRest:
0009682E 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00096832 4E75                       		rts	
00096834                            ; End of function FMPrepareNote
00096834                            
00096834                            ; ===========================================================================
00096834                            ; loc_71E50:
00096834                            PauseMusic:
00096834 6B00                       		bmi.s	@unpausemusic		; Branch if music is being unpaused
00096836 0C2E 0002 0003             		cmpi.b	#2,f_pausemusic(a6)
0009683C 6700 0000                  		beq.w	@unpausedallfm
00096840 1D7C 0002 0003             		move.b	#2,f_pausemusic(a6)
00096846 7602                       		moveq	#2,d3
00096848 103C 00B4                  		move.b	#$B4,d0		; Command to set AMS/FMS/panning
0009684C 7200                       		moveq	#0,d1		; No panning, AMS or FMS
0009684E                            ; loc_71E6A:
0009684E                            @killpanloop:
0009684E 4EBA 0000                  		jsr	WriteFMI(pc)
00096852 4EBA 0000                  		jsr	WriteFMII(pc)
00096856 5200                       		addq.b	#1,d0
00096858 51CB FFF4                  		dbf	d3,@killpanloop
0009685C                            
0009685C 7602                       		moveq	#2,d3
0009685E 7028                       		moveq	#$28,d0		; Key on/off register
00096860                            ; loc_71E7C:
00096860                            @noteoffloop:
00096860 1203                       		move.b	d3,d1		; FM1, FM2, FM3
00096862 4EBA 0000                  		jsr	WriteFMI(pc)
00096866 5801                       		addq.b	#4,d1		; FM4, FM5, FM6
00096868 4EBA 0000                  		jsr	WriteFMI(pc)
0009686C 51CB FFF2                  		dbf	d3,@noteoffloop
00096870                            
00096870 4EBA 0000                  		jsr	PSGSilenceAll(pc)
00096874 6000 FD94                  		bra.w	DoStartZ80
00096878                            ; ===========================================================================
00096878                            ; loc_71E94:
00096878                            @unpausemusic:
00096878 422E 0003                  		clr.b	f_pausemusic(a6)
0009687C 7630                       		moveq	#TrackSz,d3
0009687E 4BEE 0040                  		lea	v_music_fmdac_tracks(a6),a5
00096882 7806                       		moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d4	; 6 FM + 1 DAC tracks
00096884                            ; loc_71EA0:
00096884                            @bgmfmloop:
00096884 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00096888 6700                       		beq.s	@bgmfmnext		; Branch if not
0009688A 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
0009688E 6600                       		bne.s	@bgmfmnext		; Branch if yes
00096890 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00096894 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00096898 4EBA 0000                  		jsr	WriteFMIorII(pc)
0009689C                            ; loc_71EB8:
0009689C                            @bgmfmnext:
0009689C DAC3                       		adda.w	d3,a5
0009689E 51CC FFE4                  		dbf	d4,@bgmfmloop
000968A2                            
000968A2 4BEE 0220                  		lea	v_sfx_fm_tracks(a6),a5
000968A6 7802                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d4	; 3 FM tracks (SFX)
000968A8                            ; loc_71EC4:
000968A8                            @sfxfmloop:
000968A8 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
000968AC 6700                       		beq.s	@sfxfmnext		; Branch if not
000968AE 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000968B2 6600                       		bne.s	@sfxfmnext		; Branch if yes
000968B4 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
000968B8 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
000968BC 4EBA 0000                  		jsr	WriteFMIorII(pc)
000968C0                            ; loc_71EDC:
000968C0                            @sfxfmnext:
000968C0 DAC3                       		adda.w	d3,a5
000968C2 51CC FFE4                  		dbf	d4,@sfxfmloop
000968C6                            
000968C6 4BEE 0340                  		lea	v_spcsfx_track_ram(a6),a5
000968CA 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
000968CE 6700                       		beq.s	@unpausedallfm		; Branch if not
000968D0 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000968D4 6600                       		bne.s	@unpausedallfm		; Branch if yes
000968D6 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
000968DA 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
000968DE 4EBA 0000                  		jsr	WriteFMIorII(pc)
000968E2                            ; loc_71EFE:
000968E2                            @unpausedallfm:
000968E2 6000 FD26                  		bra.w	DoStartZ80
000968E6                            
000968E6                            ; ---------------------------------------------------------------------------
000968E6                            ; Subroutine to	play a sound or	music track
000968E6                            ; ---------------------------------------------------------------------------
000968E6                            
000968E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000968E6                            
000968E6                            ; Sound_Play:
000968E6                            CycleSoundQueue:
000968E6 2079 0009 6328             		movea.l	(Go_SoundPriorities).l,a0
000968EC 43EE 000A                  		lea	v_soundqueue0(a6),a1	; load music track number
000968F0 1616                       		move.b	v_sndprio(a6),d3	; Get priority of currently playing SFX
000968F2 7802                       		moveq	#2,d4			; Number of queues-1 (v_soundqueue0, v_soundqueue1, v_soundqueue2)
000968F4                            ; loc_71F12:
000968F4                            @inputloop:
000968F4 1011                       		move.b	(a1),d0			; move track number to d0
000968F6 1200                       		move.b	d0,d1
000968F8 4219                       		clr.b	(a1)+			; Clear entry
000968FA 0400 0081                  		subi.b	#bgm__First,d0		; Make it into 0-based index
000968FE 6500                       		bcs.s	@nextinput		; If negative (i.e., it was $80 or lower), branch
00096900 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; Is v_sound_id a $80 (silence/empty)?
00096906 6700                       		beq.s	@havesound		; If yes, branch
00096908 1D41 000A                  		move.b	d1,v_soundqueue0(a6)	; Put sound into v_soundqueue0
0009690C 6000                       		bra.s	@nextinput
0009690E                            ; ===========================================================================
0009690E                            ; loc_71F2C:
0009690E                            @havesound:
0009690E 0240 007F                  		andi.w	#$7F,d0			; Clear high byte and sign bit
00096912 1430 0000                  		move.b	(a0,d0.w),d2		; Get sound type
00096916 B403                       		cmp.b	d3,d2			; Is it a lower priority sound?
00096918 6500                       		blo.s	@nextinput		; Branch if yes
0009691A 1602                       		move.b	d2,d3			; Store new priority
0009691C 1D41 0009                  		move.b	d1,v_sound_id(a6)	; Queue sound for play
00096920                            ; loc_71F3E:
00096920                            @nextinput:
00096920 51CC FFD2                  		dbf	d4,@inputloop
00096924                            
00096924 4A03                       		tst.b	d3			; We don't want to change sound priority if it is negative
00096926 6B00                       		bmi.s	@locret
00096928 1C83                       		move.b	d3,v_sndprio(a6)	; Set new sound priority
0009692A                            ; locret_71F4A:
0009692A                            @locret:
0009692A 4E75                       		rts	
0009692C                            ; End of function CycleSoundQueue
0009692C                            
0009692C                            
0009692C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009692C                            
0009692C                            ; Sound_ChkValue:
0009692C                            PlaySoundID:
0009692C 7E00                       		moveq	#0,d7
0009692E 1E2E 0009                  		move.b	v_sound_id(a6),d7
00096932 6700 0000                  		beq.w	StopAllSound
00096936 6A00                       		bpl.s	@locret			; If >= 0, return (not a valid sound, bgm or command)
00096938 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; reset	music flag
0009693E                            		; DANGER! Music ends at $93, yet this checks until $9F; attempting to
0009693E                            		; play sounds $94-$9F will cause a crash! Remove the '+$C' to fix this.
0009693E                            		; See LevSel_NoCheat for more.
0009693E 0C07 0000                  		cmpi.b	#bgm__Last,d7	; Is this music ($81-$9F)?
00096942 6300 0000                  		bls.w	Sound_PlayBGM		; Branch if yes
00096946 0C07 00A0                  		cmpi.b	#sfx__First,d7		; Is this after music but before sfx? (redundant check)
0009694A 6500 0000                  		blo.w	@locret			; Return if yes
0009694E 0C07 0000                  		cmpi.b	#sfx__Last,d7		; Is this sfx ($A0-$CF)?
00096952 6300 0000                  		bls.w	Sound_PlaySFX		; Branch if yes
00096956 0C07 00D0                  		cmpi.b	#spec__First,d7		; Is this after sfx but before special sfx? (redundant check)
0009695A 6500 0000                  		blo.w	@locret			; Return if yes
0009695E 0C07 00D1                  		cmpi.b	#$D1,d7
00096962 6500 0000                  		bcs.w	Sound_PlaySpecial
00096966 0C07 00DF                  		cmp.b	#$DF,d7
0009696A 6F00 0000                  		ble.w	Sound_D1toDF
0009696E 0C07 00E0                  		cmpi.b	#flg__First,d7		; Is this after special sfx but before $E0?
00096972 6500 0000                  		blo.w	@locret			; Return if yes
00096976 0C07 0000                  		cmpi.b	#flg__Last,d7		; Is this $E0-$E4?
0009697A 6300                       		bls.s	Sound_E0toE4		; Branch if yes
0009697C                            ; locret_71F8C:
0009697C                            @locret:
0009697C 4E75                       		rts	
0009697E                            ; ===========================================================================
0009697E                            
0009697E                            Sound_E0toE4:
0009697E 0407 00E0                  		subi.b	#flg__First,d7
00096982 E54F                       		lsl.w	#2,d7
00096984 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00096988                            ; ===========================================================================
00096988                            
00096988                            Sound_ExIndex:
00096988 6000 0000                  ptr_flgE0:	bra.w	FadeOutMusic		; $E0
0009698C 6000 0000                  ptr_flgE1:	bra.w	PlaySegaSound		; $E1
00096990 6000 0000                  ptr_flgE2:	bra.w	SpeedUpMusic		; $E2
00096994 6000 0000                  ptr_flgE3:	bra.w	SlowDownMusic		; $E3
00096998 6000 0000                  ptr_flgE4:	bra.w	StopAllSound		; $E4
0009699C                            ptr_flgend
0009699C                            ; ===========================================================================
0009699C                            ; ---------------------------------------------------------------------------
0009699C                            ; Play "Say-gaa" PCM sound
0009699C                            ; ---------------------------------------------------------------------------
0009699C                            ; Sound_E1: PlaySega:
0009699C                            PlaySegaSound:
0009699C 13FC 0088 00A0 1FFF        		move.b	#$88,(z80_dac_sample).l	; Queue Sega PCM
000969A4 33FC 0000 00A1 1100        		startZ80
000969AC 323C 0011                  		move.w	#$11,d1
000969B0                            ; loc_71FC0:
000969B0                            @busyloop_outer:
000969B0 303C FFFF                  		move.w	#-1,d0
000969B4                            ; loc_71FC4:
000969B4                            @busyloop:
000969B4 4E71                       		nop	
000969B6 51C8 FFFC                  		dbf	d0,@busyloop
000969BA                            
000969BA 51C9 FFF4                  		dbf	d1,@busyloop_outer
000969BE                            
000969BE 584F                       		addq.w	#4,sp	; Tamper return value so we don't return to caller
000969C0 4E75                       		rts	
000969C2                            ; ===========================================================================
000969C2                            ; ---------------------------------------------------------------------------
000969C2                            ; Play music track $81-$9F
000969C2                            ; ---------------------------------------------------------------------------
000969C2                            ; Sound_81to9F:
000969C2                            Sound_PlayBGM:
000969C2 0C07 0000                  		cmpi.b	#bgm_ExtraLife,d7	; is the "extra life" music to be played?
000969C6 6600                       		bne.s	@bgmnot1up		; if not, branch
000969C8 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is a 1-up music playing?
000969CC 6600 0000                  		bne.w	@locdblret		; if yes, branch
000969D0 4BEE 0040                  		lea	v_music_track_ram(a6),a5
000969D4 7009                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d0	; 1 DAC + 6 FM + 3 PSG tracks
000969D6                            ; loc_71FE6:
000969D6                            @clearsfxloop:
000969D6 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000969DA DAFC 0030                  		adda.w	#TrackSz,a5
000969DE 51C8 FFF6                  		dbf	d0,@clearsfxloop
000969E2                            
000969E2 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
000969E6 7005                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d0	; 3 FM + 3 PSG tracks (SFX)
000969E8                            ; loc_71FF8:
000969E8                            @cleartrackplayloop:
000969E8 0895 0007                  		bclr	#7,(a5)			; Clear 'track is playing' bit (TrackPlaybackControl)
000969EC DAFC 0030                  		adda.w	#TrackSz,a5
000969F0 51C8 FFF6                  		dbf	d0,@cleartrackplayloop
000969F4                            
000969F4 4216                       		clr.b	v_sndprio(a6)		; Clear priority
000969F6 204E                       		movea.l	a6,a0
000969F8 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
000969FC 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Backup $220 bytes: all variables and music track data
00096A00                            ; loc_72012:
00096A00                            @backupramloop:
00096A00 22D8                       		move.l	(a0)+,(a1)+
00096A02 51C8 FFFC                  		dbf	d0,@backupramloop
00096A06                            
00096A06 1D7C 0080 0027             		move.b	#$80,f_1up_playing(a6)
00096A0C 4216                       		clr.b	v_sndprio(a6)		; Clear priority again (?)
00096A0E 6000                       		bra.s	@bgm_loadMusic
00096A10                            ; ===========================================================================
00096A10                            ; loc_72024:
00096A10                            @bgmnot1up:
00096A10 422E 0027                  		clr.b	f_1up_playing(a6)
00096A14 422E 0026                  		clr.b	v_fadein_counter(a6)
00096A18                            ; loc_7202C:
00096A18                            @bgm_loadMusic:
00096A18 4EBA 0000                  		jsr	InitMusicPlayback(pc)
00096A1C 2879 0009 6338             		movea.l	(Go_SpeedUpIndex).l,a4
00096A22 0407 0081                  		subi.b	#bgm__First,d7
00096A26 1D74 7000 0029             		move.b	(a4,d7.w),v_speeduptempo(a6)
00096A2C 2879 0009 6330             		movea.l	(Go_MusicIndex).l,a4
00096A32 E54F                       		lsl.w	#2,d7
00096A34 2874 7000                  		movea.l	(a4,d7.w),a4		; a4 now points to (uncompressed) song data
00096A38 7000                       		moveq	#0,d0
00096A3A 3014                       		move.w	(a4),d0			; load voice pointer
00096A3C D08C                       		add.l	a4,d0			; It is a relative pointer
00096A3E 2D40 0018                  		move.l	d0,v_voice_ptr(a6)
00096A42 102C 0005                  		move.b	5(a4),d0		; load tempo
00096A46 1D40 0028                  		move.b	d0,v_tempo_mod(a6)
00096A4A                            		;tst.b	f_speedup(a6)
00096A4A                            		;beq.s	@nospeedshoes
00096A4A                            		;move.b	v_speeduptempo(a6),d0
00096A4A                            ; loc_72068:
00096A4A                            ;@nospeedshoes:
00096A4A 1D40 0002                  		move.b	d0,v_main_tempo(a6)
00096A4E 1D40 0001                  		move.b	d0,v_main_tempo_timeout(a6)
00096A52 7200                       		moveq	#0,d1
00096A54 264C                       		movea.l	a4,a3
00096A56 5C4C                       		addq.w	#6,a4			; Point past header
00096A58 7E00                       		moveq	#0,d7
00096A5A 1E2B 0002                  		move.b	2(a3),d7		; load number of FM+DAC tracks
00096A5E 6700 0000                  		beq.w	@bgm_fmdone		; branch if zero
00096A62 5307                       		subq.b	#1,d7
00096A64 123C 00C0                  		move.b	#$C0,d1			; Default AMS+FMS+Panning
00096A68 182B 0004                  		move.b	4(a3),d4		; load tempo dividing timing
00096A6C 7C30                       		moveq	#TrackSz,d6
00096A6E 1A3C 0001                  		move.b	#1,d5			; Note duration for first "note"
00096A72 43EE 0040                  		lea	v_music_fmdac_tracks(a6),a1
00096A76 45FA 0000                  		lea	FMDACInitBytes(pc),a2
00096A7A                            ; loc_72098:
00096A7A                            @bmg_fmloadloop:
00096A7A 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00096A7E 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00096A82 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00096A86 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
00096A8A 1341 000A                  		move.b	d1,TrackAMSFMSPan(a1)		; Set AMS/FMS/Panning
00096A8E 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00096A92 7000                       		moveq	#0,d0
00096A94 301C                       		move.w	(a4)+,d0			; load DAC/FM pointer
00096A96 D08B                       		add.l	a3,d0				; Relative pointer
00096A98 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00096A9C 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load FM channel modifier
00096AA0 D2C6                       		adda.w	d6,a1
00096AA2 51CF FFD6                  		dbf	d7,@bmg_fmloadloop
00096AA6                            		
00096AA6 0C2B 0007 0002             		cmpi.b	#7,2(a3)	; Are 7 FM tracks defined?
00096AAC 6600                       		bne.s	@silencefm6
00096AAE 702B                       		moveq	#$2B,d0		; DAC enable/disable register
00096AB0 7200                       		moveq	#0,d1		; Disable DAC
00096AB2 4EBA 0000                  		jsr	WriteFMI(pc)
00096AB6 6000 0000                  		bra.w	@bgm_fmdone
00096ABA                            ; ===========================================================================
00096ABA                            ; loc_720D8:
00096ABA                            @silencefm6:
00096ABA 7028                       		moveq	#$28,d0		; Key on/off register
00096ABC 7206                       		moveq	#6,d1		; Note off on all operators of channel 6
00096ABE 4EBA 0000                  		jsr	WriteFMI(pc)
00096AC2 103C 0042                  		move.b	#$42,d0		; TL for operator 1 of FM6
00096AC6 727F                       		moveq	#$7F,d1		; Total silence
00096AC8 4EBA 0000                  		jsr	WriteFMII(pc)
00096ACC 103C 004A                  		move.b	#$4A,d0		; TL for operator 3 of FM6
00096AD0 727F                       		moveq	#$7F,d1		; Total silence
00096AD2 4EBA 0000                  		jsr	WriteFMII(pc)
00096AD6 103C 0046                  		move.b	#$46,d0		; TL for operator 2 of FM6
00096ADA 727F                       		moveq	#$7F,d1		; Total silence
00096ADC 4EBA 0000                  		jsr	WriteFMII(pc)
00096AE0 103C 004E                  		move.b	#$4E,d0		; TL for operator 4 of FM6
00096AE4 727F                       		moveq	#$7F,d1		; Total silence
00096AE6 4EBA 0000                  		jsr	WriteFMII(pc)
00096AEA 103C 00B6                  		move.b	#$B6,d0		; AMS/FMS/panning of FM6
00096AEE 123C 00C0                  		move.b	#$C0,d1		; Stereo
00096AF2 4EBA 0000                  		jsr	WriteFMII(pc)
00096AF6                            ; loc_72114:
00096AF6                            @bgm_fmdone:
00096AF6 7E00                       		moveq	#0,d7
00096AF8 1E2B 0003                  		move.b	3(a3),d7	; Load number of PSG tracks
00096AFC 6700                       		beq.s	@bgm_psgdone	; branch if zero
00096AFE 5307                       		subq.b	#1,d7
00096B00 43EE 0190                  		lea	v_music_psg_tracks(a6),a1
00096B04 45FA 0000                  		lea	PSGInitBytes(pc),a2
00096B08                            ; loc_72126:
00096B08                            @bgm_psgloadloop:
00096B08 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00096B0C 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00096B10 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00096B14 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
00096B18 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00096B1C 7000                       		moveq	#0,d0
00096B1E 301C                       		move.w	(a4)+,d0			; load PSG channel pointer
00096B20 D08B                       		add.l	a3,d0				; Relative pointer
00096B22 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00096B26 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load PSG modifier
00096B2A 101C                       		move.b	(a4)+,d0			; load redundant byte
00096B2C 135C 000B                  		move.b	(a4)+,TrackVoiceIndex(a1)	; Initial PSG tone
00096B30 D2C6                       		adda.w	d6,a1
00096B32 51CF FFD4                  		dbf	d7,@bgm_psgloadloop
00096B36                            ; loc_72154:
00096B36                            @bgm_psgdone:
00096B36 43EE 0220                  		lea	v_sfx_track_ram(a6),a1
00096B3A 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 6 SFX tracks
00096B3C                            ; loc_7215A:
00096B3C                            @sfxstoploop:
00096B3C 4A11                       		tst.b	(a1)		; Is SFX playing? (TrackPlaybackControl)
00096B3E 6A00 0000                  		bpl.w	@sfxnext	; Branch if not
00096B42 7000                       		moveq	#0,d0
00096B44 1029 0001                  		move.b	TrackVoiceControl(a1),d0 ; Get voice control bits
00096B48 6B00                       		bmi.s	@sfxpsgchannel		; Branch if this is a PSG channel
00096B4A 5500                       		subq.b	#2,d0			; SFX can't have FM1 or FM2
00096B4C E508                       		lsl.b	#2,d0			; Convert to index
00096B4E 6000                       		bra.s	@gotchannelindex
00096B50                            ; ===========================================================================
00096B50                            ; loc_7216E:
00096B50                            @sfxpsgchannel:
00096B50 E608                       		lsr.b	#3,d0		; Convert to index
00096B52                            ; loc_72170:
00096B52                            @gotchannelindex:
00096B52 41FA 0000                  		lea	SFX_BGMChannelRAM(pc),a0
00096B56 2070 0000                  		movea.l	(a0,d0.w),a0
00096B5A 08D0 0002                  		bset	#2,(a0)		; Set 'SFX is overriding' bit (TrackPlaybackControl)
00096B5E                            ; loc_7217C:
00096B5E                            @sfxnext:
00096B5E D2C6                       		adda.w	d6,a1
00096B60 51CF FFDA                  		dbf	d7,@sfxstoploop
00096B64                            
00096B64 4A6E 0340                  		tst.w	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00096B68 6A00                       		bpl.s	@checkspecialpsg				; Branch if not
00096B6A 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00096B70                            ; loc_7218E:
00096B70                            @checkspecialpsg:
00096B70 4A6E 0370                  		tst.w	v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00096B74 6A00                       		bpl.s	@sendfmnoteoff					; Branch if not
00096B76 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00096B7C                            ; loc_7219A:
00096B7C                            @sendfmnoteoff:
00096B7C 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00096B80 7805                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d4	; 6 FM tracks
00096B82                            ; loc_721A0:
00096B82                            @fmnoteoffloop:
00096B82 4EBA 0000                  		jsr	FMNoteOff(pc)
00096B86 DAC6                       		adda.w	d6,a5
00096B88 51CC FFF8                  		dbf	d4,@fmnoteoffloop		; run all FM tracks
00096B8C 7802                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d4 ; 3 PSG tracks
00096B8E                            ; loc_721AC:
00096B8E                            @psgnoteoffloop:
00096B8E 4EBA 0000                  		jsr	PSGNoteOff(pc)
00096B92 DAC6                       		adda.w	d6,a5
00096B94 51CC FFF8                  		dbf	d4,@psgnoteoffloop		; run all PSG tracks
00096B98                            ; loc_721B6:
00096B98                            @locdblret:
00096B98 584F                       		addq.w	#4,sp	; Tamper with return value to not return to caller
00096B9A 4E75                       		rts	
00096B9C                            ; ===========================================================================
00096B9C                            ; byte_721BA:
00096B9C 0600 0102 0405 06          FMDACInitBytes:	dc.b 6,	0, 1, 2, 4, 5, 6	; first byte is for DAC; then notice the 0, 1, 2 then 4, 5, 6; this is the gap between parts I and II for YM2612 port writes
00096BA4 00                         		even
00096BA4                            ; byte_721C2:
00096BA4 80A0 C0                    PSGInitBytes:	dc.b $80, $A0, $C0	; Specifically, these configure writes to the PSG port for each channel
00096BA8 00                         		even
00096BA8                            ; ===========================================================================
00096BA8                            ; ---------------------------------------------------------------------------
00096BA8                            ; Play Spin Dash sound effect
00096BA8                            ; ---------------------------------------------------------------------------
00096BA8                            Sound_D1toDF:
00096BA8 4A2E 0027                  		tst.b	$27(a6)
00096BAC 6600 0000                  		bne.w	loc_722C6
00096BB0 4A2E 0004                  		tst.b	4(a6)
00096BB4 6600 0000                  		bne.w	loc_722C6
00096BB8 4A2E 0024                  		tst.b	$24(a6)
00096BBC 6600 0000                  		bne.w	loc_722C6
00096BC0 4238 C900                  		clr.b	($FFFFC900).w
00096BC4 0C07 00D5                  		cmp.b	#$D5,d7		; is this the Spin Dash sound?
00096BC8 6600                       		bne.s	@cont3	; if not, branch
00096BCA 3F00                       		move.w	d0,-(sp)
00096BCC 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
00096BD0 4A38 C901                  		tst.b	($FFFFC901).w	; is the Spin Dash timer active?
00096BD4 6600                       		bne.s	@cont1		; if it is, branch
00096BD6 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
00096BDA                            		
00096BDA                            @cont1:
00096BDA 5200                       		addq.b	#1,d0
00096BDC 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
00096BE0 6400                       		bcc.s	@cont2		; if it has, branch
00096BE2 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
00096BE6                            		
00096BE6                            @cont2:
00096BE6 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
00096BEC 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
00096BF2 301F                       		move.w	(sp)+,d0
00096BF4                            		
00096BF4                            @cont3:	
00096BF4 2079 0009 6334             		movea.l	(Go_SoundIndex).l,a0
00096BFA 0407 00A0                  		sub.b	#$A0,d7
00096BFE 6000                       		bra.s	SoundEffects_Common
00096C00                            ; ---------------------------------------------------------------------------
00096C00                            ; Play normal sound effect
00096C00                            ; ---------------------------------------------------------------------------
00096C00                            ; Sound_A0toCF:
00096C00                            Sound_PlaySFX:
00096C00 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00096C04 6600 0000                  		bne.w	loc_722C6		; Exit is it is
00096C08 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00096C0C 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00096C10 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00096C14 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00096C18 4238 C900                  		clr.b	($FFFFC900).w
00096C1C 0C07 0000                  		cmpi.b	#sfx_Ring,d7		; is ring sound	effect played?
00096C20 6600                       		bne.s	Sound_notB5		; if not, branch
00096C22 4A2E 002B                  		tst.b	v_ring_speaker(a6)	; Is the ring sound playing on right speaker?
00096C26 6600                       		bne.s	loc_721EE		; Branch if not
00096C28 1E3C 0000                  		move.b	#sfx_RingLeft,d7	; play ring sound in left speaker
00096C2C                            
00096C2C                            loc_721EE:
00096C2C 086E 0000 002B             		bchg	#0,v_ring_speaker(a6)	; change speaker
00096C32                            
00096C32                            Sound_notB5:
00096C32 0C07 0000                  		cmpi.b	#sfx_Push,d7		; is "pushing" sound played?
00096C36 6600                       		bne.s	Sound_notA7		; if not, branch
00096C38 4A2E 002C                  		tst.b	f_push_playing(a6)	; Is pushing sound already playing?
00096C3C 6600 0000                  		bne.w	locret_722C4			; Return if not
00096C40 1D7C 0080 002C             		move.b	#$80,f_push_playing(a6)	; Mark it as playing
00096C46                            		
00096C46                            Sound_notA7:
00096C46 2079 0009 6334             		movea.l	(Go_SoundIndex).l,a0
00096C4C 0407 00A0                  		subi.b	#sfx__First,d7		; Make it 0-based
00096C50                            
00096C50                            SoundEffects_Common:		
00096C50 E54F                       		lsl.w	#2,d7			; Convert sfx ID into index
00096C52 2670 7000                  		movea.l	(a0,d7.w),a3		; SFX data pointer
00096C56 224B                       		movea.l	a3,a1
00096C58 7200                       		moveq	#0,d1
00096C5A 3219                       		move.w	(a1)+,d1		; Voice pointer
00096C5C D28B                       		add.l	a3,d1			; Relative pointer
00096C5E 1A19                       		move.b	(a1)+,d5		; Dividing timing	
00096C60                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which SFXes whose
00096C60                            		; index entry is above $3F will cause a crash. This is actually the same way that
00096C60                            		; this bug is fixed in Ristar's driver.
00096C60 7E00                       		moveq	#0,d7	
00096C62 1E19                       		move.b	(a1)+,d7	; Number of tracks (FM + PSG)
00096C64 5307                       		subq.b	#1,d7
00096C66 7C30                       		moveq	#TrackSz,d6
00096C68                            
00096C68                            loc_72228:
00096C68 7600                       		moveq	#0,d3
00096C6A 1629 0001                  		move.b	1(a1),d3	; Channel assignment bits
00096C6E 1803                       		move.b	d3,d4
00096C70 6B00                       		bmi.s	loc_72244	; Branch if PSG
00096C72 5543                       		subq.w	#2,d3		; SFX can only have FM3, FM4 or FM5
00096C74 E54B                       		lsl.w	#2,d3
00096C76 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
00096C7A 2A75 3000                  		movea.l	(a5,d3.w),a5
00096C7E 08D5 0002                  		bset	#2,(a5)		; Mark music track as being overridden (TrackPlaybackControl)
00096C82 6000                       		bra.s	loc_7226E
00096C84                            ; ===========================================================================
00096C84                            
00096C84                            loc_72244:
00096C84 E64B                       		lsr.w	#3,d3
00096C86 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
00096C8A 2A75 3000                  		movea.l	(a5,d3.w),a5
00096C8E 08D5 0002                  		bset	#2,(a5)			; Mark music track as being overridden (TrackPlaybackControl)
00096C92 0C04 00C0                  		cmpi.b	#$C0,d4			; Is this PSG 3?
00096C96 6600                       		bne.s	loc_7226E	; Branch if not
00096C98 1004                       		move.b	d4,d0
00096C9A 0000 001F                  		ori.b	#$1F,d0			; Command to silence PSG 3
00096C9E 13C0 00C0 0011             		move.b	d0,(psg_input).l
00096CA4 0840 0005                  		bchg	#5,d0			; Command to silence noise channel
00096CA8 13C0 00C0 0011             		move.b	d0,(psg_input).l
00096CAE                            
00096CAE                            loc_7226E:
00096CAE 4BFA 0000                  		lea	SFX_SFXChannelRAM(pc),a5
00096CB2 2A75 3000                  		movea.l	(a5,d3.w),a5
00096CB6 244D                       		movea.l	a5,a2
00096CB8 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00096CBA                            
00096CBA                            loc_72276:
00096CBA 429A                       		clr.l	(a2)+
00096CBC 51C8 FFFC                  		dbf	d0,loc_72276
00096CC0                            
00096CC0 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits (TrackPlaybackControl)
00096CC2 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)	; Initial voice control bits
00096CC6 7000                       		moveq	#0,d0
00096CC8 3019                       		move.w	(a1)+,d0			; Track data pointer
00096CCA D08B                       		add.l	a3,d0				; Relative pointer
00096CCC 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
00096CD0 3B59 0008                  		move.w	(a1)+,8(a5)
00096CD4 4A38 C900                  		tst.b	($FFFFC900).w	; is the Spin Dash sound playing?
00096CD8 6700                       		beq.s	@cont		; if not, branch
00096CDA 3F00                       		move.w	d0,-(sp)
00096CDC 1038 C902                  		move.b	($FFFFC902).w,d0
00096CE0 D12D 0008                  		add.b	d0,8(a5)
00096CE4 301F                       		move.w	(sp)+,d0
00096CE6                            		
00096CE6                            @cont:
00096CE6 1B7C 0001 000E             		move.b	#1,$E(a5)
00096CEC 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
00096CF0 4A04                       		tst.b	d4				; Is this a PSG channel?
00096CF2 6B00                       		bmi.s	loc_722A8		; Branch if yes
00096CF4 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00096CFA 2B41 0020                  		move.l	d1,TrackVoicePtr(a5)		; Voice pointer
00096CFE                            
00096CFE                            loc_722A8:
00096CFE 51CF FF68                  		dbf	d7,loc_72228
00096D02                            
00096D02 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00096D06 6A00                       		bpl.s	loc_722B8				; Branch if not
00096D08 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00096D0E                            
00096D0E                            loc_722B8:
00096D0E 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is SFX being played?
00096D12 6A00                       		bpl.s	locret_722C4						; Branch if not
00096D14 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00096D1A                            
00096D1A                            locret_722C4:
00096D1A 4E75                       		rts	
00096D1C                            ; ===========================================================================
00096D1C                            
00096D1C                            loc_722C6:
00096D1C 4216                       		clr.b	v_sndprio(a6)	; Clear priority
00096D1E 4E75                       		rts	
00096D20                            ; ===========================================================================
00096D20                            ; ---------------------------------------------------------------------------
00096D20                            ; RAM addresses for FM and PSG channel variables used by the SFX
00096D20                            ; ---------------------------------------------------------------------------
00096D20                            ; dword_722CC: BGMChannelRAM:
00096D20                            SFX_BGMChannelRAM:
00096D20 00FF F0D0                  		dc.l (v_snddriver_ram+v_music_fm3_track)&$FFFFFF
00096D24 0000 0000                  		dc.l 0
00096D28 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00096D2C 00FF F130                  		dc.l (v_snddriver_ram+v_music_fm5_track)&$FFFFFF
00096D30 00FF F190                  		dc.l (v_snddriver_ram+v_music_psg1_track)&$FFFFFF
00096D34 00FF F1C0                  		dc.l (v_snddriver_ram+v_music_psg2_track)&$FFFFFF
00096D38 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Plain PSG3
00096D3C 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Noise
00096D40                            ; dword_722EC: SFXChannelRAM:
00096D40                            SFX_SFXChannelRAM:
00096D40 00FF F220                  		dc.l (v_snddriver_ram+v_sfx_fm3_track)&$FFFFFF
00096D44 0000 0000                  		dc.l 0
00096D48 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00096D4C 00FF F280                  		dc.l (v_snddriver_ram+v_sfx_fm5_track)&$FFFFFF
00096D50 00FF F2B0                  		dc.l (v_snddriver_ram+v_sfx_psg1_track)&$FFFFFF
00096D54 00FF F2E0                  		dc.l (v_snddriver_ram+v_sfx_psg2_track)&$FFFFFF
00096D58 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Plain PSG3
00096D5C 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Noise
00096D60                            ; ===========================================================================
00096D60                            ; ---------------------------------------------------------------------------
00096D60                            ; Play GHZ waterfall sound
00096D60                            ; ---------------------------------------------------------------------------
00096D60                            ; Sound_D0toDF:
00096D60                            Sound_PlaySpecial:
00096D60 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00096D64 6600 0000                  		bne.w	@locret			; Return if so
00096D68 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00096D6C 6600 0000                  		bne.w	@locret			; Exit if it is
00096D70 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00096D74 6600 0000                  		bne.w	@locret			; Exit if it is
00096D78 2079 0009 632C             		movea.l	(Go_SpecSoundIndex).l,a0
00096D7E 0407 00D0                  		subi.b	#spec__First,d7		; Make it 0-based
00096D82 E54F                       		lsl.w	#2,d7
00096D84 2670 7000                  		movea.l	(a0,d7.w),a3
00096D88 224B                       		movea.l	a3,a1
00096D8A 7000                       		moveq	#0,d0
00096D8C 3019                       		move.w	(a1)+,d0			; Voice pointer
00096D8E D08B                       		add.l	a3,d0				; Relative pointer
00096D90 2D40 0020                  		move.l	d0,v_special_voice_ptr(a6)	; Store voice pointer
00096D94 1A19                       		move.b	(a1)+,d5			; Dividing timing
00096D96                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which special SFXes whose
00096D96                            		; index entry is above $3F will cause a crash. This instance was not fixed in Ristar's driver.
00096D96 7E00                       		moveq	#0,d7	
00096D98 1E19                       		move.b	(a1)+,d7			; Number of tracks (FM + PSG)
00096D9A 5307                       		subq.b	#1,d7
00096D9C 7C30                       		moveq	#TrackSz,d6
00096D9E                            ; loc_72348:
00096D9E                            @sfxloadloop:
00096D9E 1829 0001                  		move.b	1(a1),d4					; Voice control bits
00096DA2 6B00                       		bmi.s	@sfxoverridepsg					; Branch if PSG
00096DA4 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00096DAA 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00096DAE 6000                       		bra.s	@sfxinitpsg
00096DB0                            ; ===========================================================================
00096DB0                            ; loc_7235A:
00096DB0                            @sfxoverridepsg:
00096DB0 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00096DB6 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00096DBA                            ; loc_72364:
00096DBA                            @sfxinitpsg:
00096DBA 244D                       		movea.l	a5,a2
00096DBC 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00096DBE                            ; loc_72368:
00096DBE                            @clearsfxtrackram:
00096DBE 429A                       		clr.l	(a2)+
00096DC0 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
00096DC4                            
00096DC4 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits & voice control bits (TrackPlaybackControl)
00096DC6 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)
00096DCA 7000                       		moveq	#0,d0
00096DCC 3019                       		move.w	(a1)+,d0			; Track data pointer
00096DCE D08B                       		add.l	a3,d0				; Relative pointer
00096DD0 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
00096DD4 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
00096DD8 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
00096DDE 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
00096DE2 4A04                       		tst.b	d4				; Is this a PSG channel?
00096DE4 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
00096DE6 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00096DEC                            ; loc_72396:
00096DEC                            @sfxpsginitdone:
00096DEC 51CF FFB0                  		dbf	d7,@sfxloadloop
00096DF0                            
00096DF0 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is track playing?
00096DF4 6A00                       		bpl.s	@doneoverride					; Branch if not
00096DF6 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00096DFC                            ; loc_723A6:
00096DFC                            @doneoverride:
00096DFC 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is track playing?
00096E00 6A00                       		bpl.s	@locret						; Branch if not
00096E02 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00096E08 0004 001F                  		ori.b	#$1F,d4						; Command to silence channel
00096E0C 13C4 00C0 0011             		move.b	d4,(psg_input).l
00096E12 0844 0005                  		bchg	#5,d4			; Command to silence noise channel
00096E16 13C4 00C0 0011             		move.b	d4,(psg_input).l
00096E1C                            ; locret_723C6:
00096E1C                            @locret:
00096E1C 4E75                       		rts	
00096E1E                            ; End of function PlaySoundID
00096E1E                            
00096E1E                            ; ===========================================================================
00096E1E                            ; ---------------------------------------------------------------------------
00096E1E                            ; Unused RAM addresses for FM and PSG channel variables used by the Special SFX
00096E1E                            ; ---------------------------------------------------------------------------
00096E1E                            ; The first block would have been used for overriding the music tracks
00096E1E                            ; as they have a lower priority, just as they are in Sound_PlaySFX
00096E1E                            ; The third block would be used to set up the Special SFX
00096E1E                            ; The second block, however, is for the SFX tracks, which have a higher priority
00096E1E                            ; and would be checked for if they're currently playing
00096E1E                            ; If they are, then the third block would be used again, this time to mark
00096E1E                            ; the new tracks as 'currently playing'
00096E1E                            
00096E1E                            ; These were actually used in Moonwalker's driver (and other SMPS 68k Type 1a drivers)
00096E1E                            
00096E1E                            ; BGMFM4PSG3RAM:
00096E1E                            ;SpecSFX_BGMChannelRAM:
00096E1E 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00096E22 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF
00096E26                            ; SFXFM4PSG3RAM:
00096E26                            ;SpecSFX_SFXChannelRAM:
00096E26 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00096E2A 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF
00096E2E                            ; SpecialSFXFM4PSG3RAM:
00096E2E                            ;SpecSFX_SpecSFXChannelRAM:
00096E2E 00FF F340                  		dc.l (v_snddriver_ram+v_spcsfx_fm4_track)&$FFFFFF
00096E32 00FF F370                  		dc.l (v_snddriver_ram+v_spcsfx_psg3_track)&$FFFFFF
00096E36                            
00096E36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00096E36                            
00096E36                            ; Snd_FadeOut1: Snd_FadeOutSFX: FadeOutSFX:
00096E36                            StopSFX:
00096E36 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00096E38 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00096E3C 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 3 FM + 3 PSG tracks (SFX)
00096E3E                            ; loc_723EA:
00096E3E                            @trackloop:
00096E3E 4A15                       		tst.b	(a5)		; Is track playing? (TrackPlaybackControl)
00096E40 6A00 0000                  		bpl.w	@nexttrack	; Branch if not
00096E44 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00096E48 7600                       		moveq	#0,d3
00096E4A 162D 0001                  		move.b	TrackVoiceControl(a5),d3	; Get voice control bits
00096E4E 6B00                       		bmi.s	@trackpsg			; Branch if PSG
00096E50 4EBA 0000                  		jsr	FMNoteOff(pc)
00096E54 0C03 0004                  		cmpi.b	#4,d3						; Is this FM4?
00096E58 6600                       		bne.s	@getfmpointer					; Branch if not
00096E5A 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00096E5E 6A00                       		bpl.s	@getfmpointer					; Branch if not
00096E60                            		; DANGER! there is a missing 'movea.l	a5,a3' here, without which the
00096E60                            		; code is broken. It is dangerous to do a fade out when a GHZ waterfall
00096E60                            		; is playing its sound!
00096E60 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00096E64 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get special voice pointer
00096E68 6000                       		bra.s	@gotfmpointer
00096E6A                            ; ===========================================================================
00096E6A                            ; loc_72416:
00096E6A                            @getfmpointer:
00096E6A 5503                       		subq.b	#2,d3		; SFX only has FM3 and up
00096E6C E50B                       		lsl.b	#2,d3
00096E6E 41FA FEB0                  		lea	SFX_BGMChannelRAM(pc),a0
00096E72 264D                       		movea.l	a5,a3
00096E74 2A70 3000                  		movea.l	(a0,d3.w),a5
00096E78 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get music voice pointer
00096E7C                            ; loc_72428:
00096E7C                            @gotfmpointer:
00096E7C 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00096E80 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00096E84 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00096E88 4EBA 0000                  		jsr	SetVoice(pc)
00096E8C 2A4B                       		movea.l	a3,a5
00096E8E 6000                       		bra.s	@nexttrack
00096E90                            ; ===========================================================================
00096E90                            ; loc_7243C:
00096E90                            @trackpsg:
00096E90 4EBA 0000                  		jsr	PSGNoteOff(pc)
00096E94 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00096E98 0C03 00E0                  		cmpi.b	#$E0,d3			; Is this a noise channel:
00096E9C 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00096E9E 0C03 00C0                  		cmpi.b	#$C0,d3			; Is this PSG 3?
00096EA2 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00096EA4 E60B                       		lsr.b	#3,d3
00096EA6 41FA FE78                  		lea	SFX_BGMChannelRAM(pc),a0
00096EAA 2070 3000                  		movea.l	(a0,d3.w),a0
00096EAE                            ; loc_7245A:
00096EAE                            @gotpsgpointer:
00096EAE 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00096EB2 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00096EB6 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise channel?
00096EBC 6600                       		bne.s	@nexttrack			; Branch if not
00096EBE 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise type
00096EC6                            ; loc_72472:
00096EC6                            @nexttrack:
00096EC6 DAFC 0030                  		adda.w	#TrackSz,a5
00096ECA 51CF FF72                  		dbf	d7,@trackloop
00096ECE                            
00096ECE 4E75                       		rts	
00096ED0                            ; End of function StopSFX
00096ED0                            
00096ED0                            
00096ED0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00096ED0                            
00096ED0                            ; Snd_FadeOut2: FadeOutSFX2: FadeOutSpecialSFX:
00096ED0                            StopSpecialSFX:
00096ED0 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00096ED4 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00096ED6 6A00                       		bpl.s	@fadedfm		; Branch if not
00096ED8 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00096EDC 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00096EE0 6600                       		bne.s	@fadedfm		; Branch if not
00096EE2 4EBA 0000                  		jsr	SendFMNoteOff(pc)
00096EE6 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00096EEA 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00096EEE 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00096EF2 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00096EF4 6A00                       		bpl.s	@fadedfm		; Branch if not
00096EF6 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00096EFA 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00096EFE 4EBA 0000                  		jsr	SetVoice(pc)
00096F02                            ; loc_724AE:
00096F02                            @fadedfm:
00096F02 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00096F06 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00096F08 6A00                       		bpl.s	@fadedpsg		; Branch if not
00096F0A 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00096F0E 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00096F12 6600                       		bne.s	@fadedpsg		; Return if not
00096F14 4EBA 0000                  		jsr	SendPSGNoteOff(pc)
00096F18 4BEE 01F0                  		lea	v_music_psg3_track(a6),a5
00096F1C 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00096F20 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00096F24 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00096F26 6A00                       		bpl.s	@fadedpsg		; Return if not
00096F28 0C2D 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a5)	; Is this a noise channel?
00096F2E 6600                       		bne.s	@fadedpsg			; Return if not
00096F30 13ED 001F 00C0 0011        		move.b	TrackPSGNoise(a5),(psg_input).l ; Set noise type
00096F38                            ; locret_724E4:
00096F38                            @fadedpsg:
00096F38 4E75                       		rts	
00096F3A                            ; End of function StopSpecialSFX
00096F3A                            
00096F3A                            ; ===========================================================================
00096F3A                            ; ---------------------------------------------------------------------------
00096F3A                            ; Fade out music
00096F3A                            ; ---------------------------------------------------------------------------
00096F3A                            ; Sound_E0:
00096F3A                            FadeOutMusic:
00096F3A 4EBA FEFA                  		jsr	StopSFX(pc)
00096F3E 4EBA FF90                  		jsr	StopSpecialSFX(pc)
00096F42 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)			; Set fadeout delay to 3
00096F48 1D7C 0028 0004             		move.b	#$28,v_fadeout_counter(a6)		; Set fadeout counter
00096F4E 422E 0040                  		clr.b	v_music_dac_track+TrackPlaybackControl(a6)	; Stop DAC track
00096F52 422E 002A                  		clr.b	f_speedup(a6)				; Disable speed shoes tempo
00096F56 4E75                       		rts	
00096F58                            
00096F58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00096F58                            
00096F58                            ; sub_72504:
00096F58                            DoFadeOut:
00096F58 102E 0006                  		move.b	v_fadeout_delay(a6),d0	; Has fadeout delay expired?
00096F5C 6700                       		beq.s	@continuefade		; Branch if yes
00096F5E 532E 0006                  		subq.b	#1,v_fadeout_delay(a6)
00096F62 4E75                       		rts	
00096F64                            ; ===========================================================================
00096F64                            ; loc_72510:
00096F64                            @continuefade:
00096F64 532E 0004                  		subq.b	#1,v_fadeout_counter(a6)	; Update fade counter
00096F68 6700 0000                  		beq.w	StopAllSound			; Branch if fade is done
00096F6C 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)		; Reset fade delay
00096F72 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00096F76 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00096F78                            ; loc_72524:
00096F78                            @fmloop:
00096F78 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00096F7A 6A00                       		bpl.s	@nextfm			; Branch if not
00096F7C 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00096F80 6A00                       		bpl.s	@sendfmtl		; Branch if still positive
00096F82 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00096F86 6000                       		bra.s	@nextfm
00096F88                            ; ===========================================================================
00096F88                            ; loc_72534:
00096F88                            @sendfmtl:
00096F88 4EBA 0000                  		jsr	SendVoiceTL(pc)
00096F8C                            ; loc_72538:
00096F8C                            @nextfm:
00096F8C DAFC 0030                  		adda.w	#TrackSz,a5
00096F90 51CF FFE6                  		dbf	d7,@fmloop
00096F94                            
00096F94 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00096F96                            ; loc_72542:
00096F96                            @psgloop:
00096F96 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00096F98 6A00                       		bpl.s	@nextpsg		; branch if not
00096F9A 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00096F9E 0C2D 0010 0009             		cmpi.b	#$10,TrackVolume(a5)	; Is it greater than $F?
00096FA4 6500                       		blo.s	@sendpsgvol		; Branch if not
00096FA6 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00096FAA 6000                       		bra.s	@nextpsg
00096FAC                            ; ===========================================================================
00096FAC                            ; loc_72558:
00096FAC                            @sendpsgvol:
00096FAC 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Store new volume attenuation
00096FB0 4EBA 0000                  		jsr	SetPSGVolume(pc)
00096FB4                            ; loc_72560:
00096FB4                            @nextpsg:
00096FB4 DAFC 0030                  		adda.w	#TrackSz,a5
00096FB8 51CF FFDC                  		dbf	d7,@psgloop
00096FBC                            
00096FBC 4E75                       		rts	
00096FBE                            ; End of function DoFadeOut
00096FBE                            
00096FBE                            
00096FBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00096FBE                            
00096FBE                            ; sub_7256A:
00096FBE                            FMSilenceAll:
00096FBE 7602                       		moveq	#2,d3		; 3 FM channels for each YM2612 parts
00096FC0 7028                       		moveq	#$28,d0		; FM key on/off register
00096FC2                            ; loc_7256E:
00096FC2                            @noteoffloop:
00096FC2 1203                       		move.b	d3,d1
00096FC4 4EBA 0000                  		jsr	WriteFMI(pc)
00096FC8 5801                       		addq.b	#4,d1		; Move to YM2612 part 1
00096FCA 4EBA 0000                  		jsr	WriteFMI(pc)
00096FCE 51CB FFF2                  		dbf	d3,@noteoffloop
00096FD2                            
00096FD2 7040                       		moveq	#$40,d0		; Set TL on FM channels...
00096FD4 727F                       		moveq	#$7F,d1		; ... to total attenuation...
00096FD6 7802                       		moveq	#2,d4		; ... for all 3 channels...
00096FD8                            ; loc_72584:
00096FD8                            @channelloop:
00096FD8 7603                       		moveq	#3,d3		; ... for all operators on each channel...
00096FDA                            ; loc_72586:
00096FDA                            @channeltlloop:
00096FDA 4EBA 0000                  		jsr	WriteFMI(pc)	; ... for part 0...
00096FDE 4EBA 0000                  		jsr	WriteFMII(pc)	; ... and part 1.
00096FE2 5840                       		addq.w	#4,d0		; Next TL operator
00096FE4 51CB FFF4                  		dbf	d3,@channeltlloop
00096FE8                            
00096FE8 0400 000F                  		subi.b	#$F,d0		; Move to TL operator 1 of next channel
00096FEC 51CC FFEA                  		dbf	d4,@channelloop
00096FF0                            
00096FF0 4E75                       		rts	
00096FF2                            ; End of function FMSilenceAll
00096FF2                            
00096FF2                            ; ===========================================================================
00096FF2                            ; ---------------------------------------------------------------------------
00096FF2                            ; Stop music
00096FF2                            ; ---------------------------------------------------------------------------
00096FF2                            ; Sound_E4: StopSoundAndMusic:
00096FF2                            StopAllSound:
00096FF2 702B                       		moveq	#$2B,d0		; Enable/disable DAC
00096FF4 123C 0080                  		move.b	#$80,d1		; Enable DAC
00096FF8 4EBA 0000                  		jsr	WriteFMI(pc)
00096FFC 7027                       		moveq	#$27,d0		; Timers, FM3/FM6 mode
00096FFE 7200                       		moveq	#0,d1		; FM3/FM6 normal mode, disable timers
00097000 4EBA 0000                  		jsr	WriteFMI(pc)
00097004 204E                       		movea.l	a6,a0
00097006                            		; DANGER! This should be clearing all variables and track data, but misses the last $10 bytes of v_spcsfx_psg3_track.
00097006                            		; Remove the '-$10' to fix this.
00097006 303C 00E7                  		move.w	#((v_spcsfx_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $390 bytes: all variables and most track data
0009700A                            ; loc_725B6:
0009700A                            @clearramloop:
0009700A 4298                       		clr.l	(a0)+
0009700C 51C8 FFFC                  		dbf	d0,@clearramloop
00097010                            
00097010 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00097016 4EBA FFA6                  		jsr	FMSilenceAll(pc)
0009701A 6000 0000                  		bra.w	PSGSilenceAll
0009701E                            
0009701E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009701E                            
0009701E                            ; sub_725CA:
0009701E                            InitMusicPlayback:
0009701E 204E                       		movea.l	a6,a0
00097020                            		; Save several values
00097020 1216                       		move.b	v_sndprio(a6),d1
00097022 142E 0027                  		move.b	f_1up_playing(a6),d2
00097026 162E 002A                  		move.b	f_speedup(a6),d3
0009702A 182E 0026                  		move.b	v_fadein_counter(a6),d4
0009702E                            		; DANGER! Only v_soundqueue0 and v_soundqueue1 are backed up, once again breaking v_soundqueue2
0009702E 3A2E 000A                  		move.w	v_soundqueue0(a6),d5
00097032 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $220 bytes: all variables and music track data
00097036                            ; loc_725E4:
00097036                            @clearramloop:
00097036 4298                       		clr.l	(a0)+
00097038 51C8 FFFC                  		dbf	d0,@clearramloop
0009703C                            
0009703C                            		; Restore the values saved above
0009703C 1C81                       		move.b	d1,v_sndprio(a6)
0009703E 1D42 0027                  		move.b	d2,f_1up_playing(a6)
00097042 1D43 002A                  		move.b	d3,f_speedup(a6)
00097046 1D44 0026                  		move.b	d4,v_fadein_counter(a6)
0009704A 3D45 000A                  		move.w	d5,v_soundqueue0(a6)
0009704E 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00097054                            		; DANGER! This silences ALL channels, even the ones being used
00097054                            		; by SFX, and not music! @sendfmnoteoff does this already, and
00097054                            		; doesn't affect SFX channels, either.
00097054                            		; This should be replaced with an 'rts'.
00097054 4EBA FF68                  		jsr	FMSilenceAll(pc)
00097058 6000 0000                  		bra.w	PSGSilenceAll
0009705C                            		; DANGER! InitMusicPlayback, and Sound_PlayBGM for that matter,
0009705C                            		; don't do a very good job of setting up the music tracks.
0009705C                            		; Tracks that aren't defined in a music file's header don't have
0009705C                            		; their channels defined, meaning @sendfmnoteoff won't silence
0009705C                            		; hardware properly. In combination with removing the above
0009705C                            		; calls to FMSilenceAll/PSGSilenceAll, this will cause hanging
0009705C                            		; notes.
0009705C                            		; To fix this, I suggest using this code, instead of an 'rts':
0009705C                            		;lea	v_music_track_ram+TrackVoiceControl(a6),a1
0009705C                            		;lea	FMDACInitBytes(pc),a2
0009705C                            		;moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d1		; 7 DAC/FM tracks
0009705C                            		;bsr.s	@writeloop
0009705C                            		;lea	PSGInitBytes(pc),a2
0009705C                            		;moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d1	; 3 PSG tracks
0009705C                            
0009705C                            ;@writeloop:
0009705C                            		;move.b	(a2)+,(a1)		; Write track's channel byte
0009705C                            		;lea	TrackSz(a1),a1		; Next track
0009705C                            		;dbf	d1,@writeloop		; Loop for all DAC/FM/PSG tracks
0009705C                            
0009705C                            		;rts
0009705C                            	
0009705C                            ; End of function InitMusicPlayback
0009705C                            
0009705C                            
0009705C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009705C                            
0009705C                            ; sub_7260C:
0009705C                            TempoWait:
0009705C 1D6E 0002 0001             		move.b	v_main_tempo(a6),v_main_tempo_timeout(a6)	; Reset main tempo timeout
00097062 41EE 004E                  		lea	v_music_track_ram+TrackDurationTimeout(a6),a0	; note timeout
00097066 7030                       		moveq	#TrackSz,d0
00097068 7209                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d1		; 1 DAC + 6 FM + 3 PSG tracks
0009706A                            ; loc_7261A:
0009706A                            @tempoloop:
0009706A 5210                       		addq.b	#1,(a0)	; Delay note by 1 frame
0009706C D0C0                       		adda.w	d0,a0	; Advance to next track
0009706E 51C9 FFFA                  		dbf	d1,@tempoloop
00097072                            
00097072 4E75                       		rts	
00097074                            ; End of function TempoWait
00097074                            
00097074                            ; ===========================================================================
00097074                            ; ---------------------------------------------------------------------------
00097074                            ; Speed	up music
00097074                            ; ---------------------------------------------------------------------------
00097074                            ; Sound_E2:
00097074                            SpeedUpMusic:
00097074 4A2E 0027                  		tst.b	f_1up_playing(a6)
00097078 6600                       		bne.s	@speedup_1up
0009707A 1D6E 0029 0002             		move.b	v_speeduptempo(a6),v_main_tempo(a6)
00097080 1D6E 0029 0001             		move.b	v_speeduptempo(a6),v_main_tempo_timeout(a6)
00097086 1D7C 0080 002A             		move.b	#$80,f_speedup(a6)
0009708C 4E75                       		rts	
0009708E                            ; ===========================================================================
0009708E                            ; loc_7263E:
0009708E                            @speedup_1up:
0009708E 1D6E 03C9 03A2             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo(a6)
00097094 1D6E 03C9 03A1             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
0009709A 1D7C 0080 03CA             		move.b	#$80,v_1up_ram_copy+f_speedup(a6)
000970A0 4E75                       		rts	
000970A2                            ; ===========================================================================
000970A2                            ; ---------------------------------------------------------------------------
000970A2                            ; Change music back to normal speed
000970A2                            ; ---------------------------------------------------------------------------
000970A2                            ; Sound_E3:
000970A2                            SlowDownMusic:
000970A2 4A2E 0027                  		tst.b	f_1up_playing(a6)
000970A6 6600                       		bne.s	@slowdown_1up
000970A8 1D6E 0028 0002             		move.b	v_tempo_mod(a6),v_main_tempo(a6)
000970AE 1D6E 0028 0001             		move.b	v_tempo_mod(a6),v_main_tempo_timeout(a6)
000970B4 422E 002A                  		clr.b	f_speedup(a6)
000970B8 4E75                       		rts	
000970BA                            ; ===========================================================================
000970BA                            ; loc_7266A:
000970BA                            @slowdown_1up:
000970BA 1D6E 03C8 03A2             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo(a6)
000970C0 1D6E 03C8 03A1             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
000970C6 422E 03CA                  		clr.b	v_1up_ram_copy+f_speedup(a6)
000970CA 4E75                       		rts	
000970CC                            
000970CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000970CC                            
000970CC                            ; sub_7267C:
000970CC                            DoFadeIn:
000970CC 4A2E 0025                  		tst.b	v_fadein_delay(a6)	; Has fadein delay expired?
000970D0 6700                       		beq.s	@continuefade		; Branch if yes
000970D2 532E 0025                  		subq.b	#1,v_fadein_delay(a6)
000970D6 4E75                       		rts	
000970D8                            ; ===========================================================================
000970D8                            ; loc_72688:
000970D8                            @continuefade:
000970D8 4A2E 0026                  		tst.b	v_fadein_counter(a6)	; Is fade done?
000970DC 6700                       		beq.s	@fadedone		; Branch if yes
000970DE 532E 0026                  		subq.b	#1,v_fadein_counter(a6)	; Update fade counter
000970E2 1D7C 0002 0025             		move.b	#2,v_fadein_delay(a6)	; Reset fade delay
000970E8 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
000970EC 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
000970EE                            ; loc_7269E:
000970EE                            @fmloop:
000970EE 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000970F0 6A00                       		bpl.s	@nextfm			; Branch if not
000970F2 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
000970F6 4EBA 0000                  		jsr	SendVoiceTL(pc)
000970FA                            ; loc_726AA:
000970FA                            @nextfm:
000970FA DAFC 0030                  		adda.w	#TrackSz,a5
000970FE 51CF FFEE                  		dbf	d7,@fmloop
00097102 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7		; 3 PSG tracks
00097104                            ; loc_726B4:
00097104                            @psgloop:
00097104 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097106 6A00                       		bpl.s	@nextpsg		; Branch if not
00097108 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
0009710C 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get value
00097110 0C06 0010                  		cmpi.b	#$10,d6			; Is it is < $10?
00097114 6500                       		blo.s	@sendpsgvol		; Branch if yes
00097116 7C0F                       		moveq	#$F,d6			; Limit to $F (maximum attenuation)
00097118                            ; loc_726C8:
00097118                            @sendpsgvol:
00097118 4EBA 0000                  		jsr	SetPSGVolume(pc)
0009711C                            ; loc_726CC:
0009711C                            @nextpsg:
0009711C DAFC 0030                  		adda.w	#TrackSz,a5
00097120 51CF FFE2                  		dbf	d7,@psgloop
00097124 4E75                       		rts	
00097126                            ; ===========================================================================
00097126                            ; loc_726D6:
00097126                            @fadedone:
00097126 08AE 0002 0040             		bclr	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Clear 'SFX overriding' bit
0009712C 422E 0024                  		clr.b	f_fadein_flag(a6)				; Stop fadein
00097130 4E75                       		rts	
00097132                            ; End of function DoFadeIn
00097132                            
00097132                            ; ===========================================================================
00097132                            ; loc_726E2:
00097132                            FMNoteOn:
00097132 0815 0001                  		btst	#1,(a5)		; Is track resting? (TrackPlaybackControl)
00097136 6600                       		bne.s	@locret		; Return if so
00097138 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
0009713C 6600                       		bne.s	@locret		; Return if so
0009713E 7028                       		moveq	#$28,d0		; Note on/off register
00097140 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Get channel bits
00097144 0001 00F0                  		ori.b	#$F0,d1		; Note on on all operators
00097148 6000 0000                  		bra.w	WriteFMI
0009714C                            ; ===========================================================================
0009714C                            ; locret_726FC:
0009714C                            @locret:
0009714C 4E75                       		rts	
0009714E                            
0009714E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009714E                            
0009714E                            ; sub_726FE:
0009714E                            FMNoteOff:
0009714E 0815 0004                  		btst	#4,(a5)		; Is 'do not attack next note' set? (TrackPlaybackControl)
00097152 6600                       		bne.s	locret_72714	; Return if yes
00097154 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00097158 6600                       		bne.s	locret_72714	; Return if yes
0009715A                            ; loc_7270A:
0009715A                            SendFMNoteOff:
0009715A 7028                       		moveq	#$28,d0		; Note on/off register
0009715C 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Note off to this channel
00097160 6000 0000                  		bra.w	WriteFMI
00097164                            ; ===========================================================================
00097164                            
00097164                            locret_72714:
00097164 4E75                       		rts	
00097166                            ; End of function FMNoteOff
00097166                            
00097166                            ; ===========================================================================
00097166                            ; loc_72716:
00097166                            WriteFMIorIIMain:
00097166 0815 0002                  		btst	#2,(a5)		; Is track being overriden by sfx? (TrackPlaybackControl)
0009716A 6600                       		bne.s	@locret		; Return if yes
0009716C 6000 0000                  		bra.w	WriteFMIorII
00097170                            ; ===========================================================================
00097170                            ; locret_72720:
00097170                            @locret:
00097170 4E75                       		rts	
00097172                            
00097172                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097172                            
00097172                            ; sub_72722:
00097172                            WriteFMIorII:
00097172 082D 0002 0001             		btst	#2,TrackVoiceControl(a5)	; Is this bound for part I or II?
00097178 6600                       		bne.s	WriteFMIIPart			; Branch if for part II
0009717A D02D 0001                  		add.b	TrackVoiceControl(a5),d0	; Add in voice control bits
0009717E                            ; End of function WriteFMIorII
0009717E                            
0009717E                            
0009717E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009717E                            
0009717E                            ; The reason I think this is an *early* SMPS 68k Type 1b
0009717E                            ; is because this subroutine is the one from Type 1a:
0009717E                            ; other Type 1b drivers have a newer, optimised version.
0009717E                            ; The driver itself is Type 1b, with this odd exception.
0009717E                            
0009717E                            ; sub_7272E:
0009717E                            WriteFMI:
0009717E 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00097184 0802 0007                  		btst	#7,d2		; Is FM busy?
00097188 66F4                       		bne.s	WriteFMI	; Loop if so
0009718A 13C0 00A0 4000             		move.b	d0,(ym2612_a0).l
00097190 4E71                       		nop	
00097192 4E71                       		nop	
00097194 4E71                       		nop	
00097196                            ; loc_72746:
00097196                            @waitloop:
00097196 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
0009719C 0802 0007                  		btst	#7,d2		; Is FM busy?
000971A0 66F4                       		bne.s	@waitloop	; Loop if so
000971A2                            
000971A2 13C1 00A0 4001             		move.b	d1,(ym2612_d0).l
000971A8 4E75                       		rts	
000971AA                            ; End of function WriteFMI
000971AA                            
000971AA                            ; ===========================================================================
000971AA                            ; loc_7275A:
000971AA                            WriteFMIIPart:
000971AA 142D 0001                  		move.b	TrackVoiceControl(a5),d2 ; Get voice control bits
000971AE 0882 0002                  		bclr	#2,d2			; Clear chip toggle
000971B2 D002                       		add.b	d2,d0			; Add in to destination register
000971B4                            
000971B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000971B4                            
000971B4                            ; sub_72764:
000971B4                            WriteFMII:
000971B4 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
000971BA 0802 0007                  		btst	#7,d2		; Is FM busy?
000971BE 66F4                       		bne.s	WriteFMII	; Loop if so
000971C0 13C0 00A0 4002             		move.b	d0,(ym2612_a1).l
000971C6 4E71                       		nop	
000971C8 4E71                       		nop	
000971CA 4E71                       		nop	
000971CC                            ; loc_7277C:
000971CC                            @waitloop:
000971CC 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
000971D2 0802 0007                  		btst	#7,d2		; Is FM busy?
000971D6 66F4                       		bne.s	@waitloop	; Loop if so
000971D8                            
000971D8 13C1 00A0 4003             		move.b	d1,(ym2612_d1).l
000971DE 4E75                       		rts	
000971E0                            ; End of function WriteFMII
000971E0                            
000971E0                            ; ===========================================================================
000971E0                            ; ---------------------------------------------------------------------------
000971E0                            ; FM Note Values: b-0 to a#8
000971E0                            ; ---------------------------------------------------------------------------
000971E0                            ; word_72790: FM_Notes:
000971E0                            FMFrequencies:
000971E0 025E 0284 02AB 02D3 02FE+  	dc.w $025E,$0284,$02AB,$02D3,$02FE,$032D,$035C,$038F,$03C5,$03FF,$043C,$047C
000971F8 0A5E 0A84 0AAB 0AD3 0AFE+  	dc.w $0A5E,$0A84,$0AAB,$0AD3,$0AFE,$0B2D,$0B5C,$0B8F,$0BC5,$0BFF,$0C3C,$0C7C
00097210 125E 1284 12AB 12D3 12FE+  	dc.w $125E,$1284,$12AB,$12D3,$12FE,$132D,$135C,$138F,$13C5,$13FF,$143C,$147C
00097228 1A5E 1A84 1AAB 1AD3 1AFE+  	dc.w $1A5E,$1A84,$1AAB,$1AD3,$1AFE,$1B2D,$1B5C,$1B8F,$1BC5,$1BFF,$1C3C,$1C7C
00097240 225E 2284 22AB 22D3 22FE+  	dc.w $225E,$2284,$22AB,$22D3,$22FE,$232D,$235C,$238F,$23C5,$23FF,$243C,$247C
00097258 2A5E 2A84 2AAB 2AD3 2AFE+  	dc.w $2A5E,$2A84,$2AAB,$2AD3,$2AFE,$2B2D,$2B5C,$2B8F,$2BC5,$2BFF,$2C3C,$2C7C
00097270 325E 3284 32AB 32D3 32FE+  	dc.w $325E,$3284,$32AB,$32D3,$32FE,$332D,$335C,$338F,$33C5,$33FF,$343C,$347C
00097288 3A5E 3A84 3AAB 3AD3 3AFE+  	dc.w $3A5E,$3A84,$3AAB,$3AD3,$3AFE,$3B2D,$3B5C,$3B8F,$3BC5,$3BFF,$3C3C,$3C7C
000972A0                            
000972A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000972A0                            
000972A0                            ; sub_72850:
000972A0                            PSGUpdateTrack:
000972A0 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Update note timeout
000972A4 6600                       		bne.s	@notegoing
000972A6 0895 0004                  		bclr	#4,(a5)				; Clear 'do not attack note' bit (TrackPlaybackControl)
000972AA 4EBA 0000                  		jsr	PSGDoNext(pc)
000972AE 4EBA 0000                  		jsr	PSGDoNoteOn(pc)
000972B2 6000 0000                  		bra.w	PSGDoVolFX
000972B6                            ; ===========================================================================
000972B6                            ; loc_72866:
000972B6                            @notegoing:
000972B6 4EBA F4CA                  		jsr	NoteTimeoutUpdate(pc)
000972BA 4EBA 0000                  		jsr	PSGUpdateVolFX(pc)
000972BE 4EBA F4EA                  		jsr	DoModulation(pc)
000972C2 4EBA 0000                  		jsr	PSGUpdateFreq(pc)	; It would be better if this were a jmp and the rts was removed
000972C6 4E75                       		rts
000972C8                            ; End of function PSGUpdateTrack
000972C8                            
000972C8                            
000972C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000972C8                            
000972C8                            ; sub_72878:
000972C8                            PSGDoNext:
000972C8 0895 0001                  		bclr	#1,(a5)				; Clear 'track at rest' bit (TrackPlaybackControl)
000972CC 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; Get track data pointer
000972D0                            ; loc_72880:
000972D0                            @noteloop:
000972D0 7A00                       		moveq	#0,d5
000972D2 1A1C                       		move.b	(a4)+,d5	; Get byte from track
000972D4 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
000972D8 6500                       		blo.s	@gotnote	; Branch if not
000972DA 4EBA 0000                  		jsr	CoordFlag(pc)
000972DE 60F0                       		bra.s	@noteloop
000972E0                            ; ===========================================================================
000972E0                            ; loc_72890:
000972E0                            @gotnote:
000972E0 4A05                       		tst.b	d5		; Is it a note?
000972E2 6A00                       		bpl.s	@gotduration	; Branch if not
000972E4 4EBA 0000                  		jsr	PSGSetFreq(pc)
000972E8 1A1C                       		move.b	(a4)+,d5	; Get another byte
000972EA 4A05                       		tst.b	d5		; Is it a duration?
000972EC 6A00                       		bpl.s	@gotduration	; Branch if yes
000972EE 534C                       		subq.w	#1,a4		; Put byte back
000972F0 6000 F452                  		bra.w	FinishTrackUpdate
000972F4                            ; ===========================================================================
000972F4                            ; loc_728A4:
000972F4                            @gotduration:
000972F4 4EBA F42E                  		jsr	SetDuration(pc)
000972F8 6000 F44A                  		bra.w	FinishTrackUpdate
000972FC                            ; End of function PSGDoNext
000972FC                            
000972FC                            
000972FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000972FC                            
000972FC                            ; sub_728AC:
000972FC                            PSGSetFreq:
000972FC 0405 0081                  		subi.b	#$81,d5		; Convert to 0-based index
00097300 6500                       		bcs.s	@restpsg	; If $80, put track at rest
00097302 DA2D 0008                  		add.b	TrackTranspose(a5),d5 ; Add in channel transposition
00097306 0245 007F                  		andi.w	#$7F,d5		; Clear high byte and sign bit
0009730A E34D                       		lsl.w	#1,d5
0009730C 41FA 0000                  		lea	PSGFrequencies(pc),a0
00097310 3B70 5000 0010             		move.w	(a0,d5.w),TrackFreq(a5)	; Set new frequency
00097316 6000 F42C                  		bra.w	FinishTrackUpdate
0009731A                            ; ===========================================================================
0009731A                            ; loc_728CA:
0009731A                            @restpsg:
0009731A 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
0009731E 3B7C FFFF 0010             		move.w	#-1,TrackFreq(a5)	; Invalidate note frequency
00097324 4EBA F41E                  		jsr	FinishTrackUpdate(pc)
00097328 6000 0000                  		bra.w	PSGNoteOff
0009732C                            ; End of function PSGSetFreq
0009732C                            
0009732C                            
0009732C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009732C                            
0009732C                            ; sub_728DC:
0009732C                            PSGDoNoteOn:
0009732C 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get note frequency
00097330 6B00                       		bmi.s	PSGSetRest		; If invalid, branch
00097332                            ; End of function PSGDoNoteOn
00097332                            
00097332                            
00097332                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097332                            
00097332                            ; sub_728E2:
00097332                            PSGUpdateFreq:
00097332 102D 001E                  		move.b	TrackDetune(a5),d0	; Get detune value
00097336 4880                       		ext.w	d0
00097338 DC40                       		add.w	d0,d6		; Add to frequency
0009733A 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
0009733E 6600                       		bne.s	@locret		; Return if yes
00097340 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
00097344 6600                       		bne.s	@locret		; Return if yes
00097346 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get channel bits
0009734A 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it a noise channel?
0009734E 6600                       		bne.s	@notnoise	; Branch if not
00097350 103C 00C0                  		move.b	#$C0,d0		; Use PSG 3 channel bits
00097354                            ; loc_72904:
00097354                            @notnoise:
00097354 3206                       		move.w	d6,d1
00097356 0201 000F                  		andi.b	#$F,d1		; Low nibble of frequency
0009735A 8001                       		or.b	d1,d0		; Latch tone data to channel
0009735C E84E                       		lsr.w	#4,d6		; Get upper 6 bits of frequency
0009735E 0206 003F                  		andi.b	#$3F,d6		; Send to latched channel
00097362 13C0 00C0 0011             		move.b	d0,(psg_input).l
00097368 13C6 00C0 0011             		move.b	d6,(psg_input).l
0009736E                            ; locret_7291E:
0009736E                            @locret:
0009736E 4E75                       		rts	
00097370                            ; End of function PSGUpdateFreq
00097370                            
00097370                            ; ===========================================================================
00097370                            ; loc_72920:
00097370                            PSGSetRest:
00097370 08D5 0001                  		bset	#1,(a5)	; Set 'track at rest' bit (TrackPlaybackControl)
00097374 4E75                       		rts	
00097376                            
00097376                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097376                            
00097376                            ; sub_72926:
00097376                            PSGUpdateVolFX:
00097376 4A2D 000B                  		tst.b	TrackVoiceIndex(a5)	; Test PSG tone
0009737A 6700 0000                  		beq.w	locret_7298A		; Return if it is zero
0009737E                            ; loc_7292E:
0009737E                            PSGDoVolFX:	; This can actually be made a bit more efficient, see the comments for more
0009737E 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get volume
00097382 7000                       		moveq	#0,d0
00097384 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get PSG tone
00097388 6700                       		beq.s	SetPSGVolume
0009738A 2079 0009 633C             		movea.l	(Go_PSGIndex).l,a0
00097390 5340                       		subq.w	#1,d0
00097392 E548                       		lsl.w	#2,d0
00097394 2070 0000                  		movea.l	(a0,d0.w),a0
00097398 102D 000C                  		move.b	TrackVolEnvIndex(a5),d0	; Get volume envelope index		; move.b	TrackVolEnvIndex(a5),d0
0009739C 1030 0000                  		move.b	(a0,d0.w),d0			; Volume envelope value			; addq.b	#1,TrackVolEnvIndex(a5)
000973A0 522D 000C                  		addq.b	#1,TrackVolEnvIndex(a5)	; Increment volume envelope index	; move.b	(a0,d0.w),d0
000973A4 0800 0007                  		btst	#7,d0				; Is volume envelope value negative?	; <-- makes this line redundant
000973A8 6700                       		beq.s	@gotflutter			; Branch if not				; but you gotta make this one a bpl
000973AA 0C00 0080                  		cmpi.b	#$80,d0				; Is it the terminator?			; Since this is the only check, you can take the optimisation a step further:
000973AE 6700                       		beq.s	VolEnvHold			; If so, branch				; Change the previous beq (bpl) to a bmi and make it branch to VolEnvHold to make these last two lines redundant
000973B0                            ; loc_72960:
000973B0                            @gotflutter:
000973B0 DC40                       		add.w	d0,d6		; Add volume envelope value to volume
000973B2 0C06 0010                  		cmpi.b	#$10,d6		; Is volume $10 or higher?
000973B6 6500                       		blo.s	SetPSGVolume	; Branch if not
000973B8 7C0F                       		moveq	#$F,d6		; Limit to silence and fall through
000973BA                            ; End of function PSGUpdateVolFX
000973BA                            
000973BA                            
000973BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000973BA                            
000973BA                            ; sub_7296A:
000973BA                            SetPSGVolume:
000973BA 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
000973BE 6600                       		bne.s	locret_7298A	; Return if so
000973C0 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000973C4 6600                       		bne.s	locret_7298A	; Return if so
000973C6 0815 0004                  		btst	#4,(a5)		; Is track set to not attack next note? (TrackPlaybackControl)
000973CA 6600                       		bne.s	PSGCheckNoteTimeout ; Branch if yes
000973CC                            ; loc_7297C:
000973CC                            PSGSendVolume:
000973CC 8C2D 0001                  		or.b	TrackVoiceControl(a5),d6 ; Add in track selector bits
000973D0 0606 0010                  		addi.b	#$10,d6			; Mark it as a volume command
000973D4 13C6 00C0 0011             		move.b	d6,(psg_input).l
000973DA                            
000973DA                            locret_7298A:
000973DA 4E75                       		rts	
000973DC                            ; ===========================================================================
000973DC                            ; loc_7298C: PSGCheckNoteFill:
000973DC                            PSGCheckNoteTimeout:
000973DC 4A2D 0013                  		tst.b	TrackNoteTimeoutMaster(a5)	; Is note timeout on?
000973E0 67EA                       		beq.s	PSGSendVolume			; Branch if not
000973E2 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)		; Has note timeout expired?
000973E6 66E4                       		bne.s	PSGSendVolume			; Branch if not
000973E8 4E75                       		rts	
000973EA                            ; End of function SetPSGVolume
000973EA                            
000973EA                            ; ===========================================================================
000973EA                            ; loc_7299A: FlutterDone:
000973EA                            VolEnvHold:
000973EA 532D 000C                  		subq.b	#1,TrackVolEnvIndex(a5)	; Decrement volume envelope index
000973EE 4E75                       		rts	
000973F0                            
000973F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000973F0                            
000973F0                            ; sub_729A0:
000973F0                            PSGNoteOff:
000973F0 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000973F4 6600                       		bne.s	locret_729B4	; Return if so
000973F6                            ; loc_729A6:
000973F6                            SendPSGNoteOff:
000973F6 102D 0001                  		move.b	TrackVoiceControl(a5),d0	; PSG channel to change
000973FA 0000 001F                  		ori.b	#$1F,d0				; Maximum volume attenuation
000973FE 13C0 00C0 0011             		move.b	d0,(psg_input).l
00097404                            		; DANGER! If InitMusicPlayback doesn't silence all channels, there's the
00097404                            		; risk of music accidentally playing noise because it can't detect if
00097404                            		; the PSG4/noise channel needs muting on track initialisation.
00097404                            		; S&K's driver fixes it by doing this:
00097404 0C00 00DF                  		cmpi.b	#$DF,d0				; Are stopping PSG3?
00097408 6600                       		bne.s	locret_729B4
0009740A 13FC 00FF 00C0 0011        		move.b	#$FF,(psg_input).l		; If so, stop noise channel while we're at it
00097412                            
00097412                            locret_729B4:
00097412 4E75                       		rts	
00097414                            ; End of function PSGNoteOff
00097414                            
00097414                            
00097414                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097414                            
00097414                            ; sub_729B6:
00097414                            PSGSilenceAll:
00097414 41F9 00C0 0011             		lea	(psg_input).l,a0
0009741A 10BC 009F                  		move.b	#$9F,(a0)	; Silence PSG 1
0009741E 10BC 00BF                  		move.b	#$BF,(a0)	; Silence PSG 2
00097422 10BC 00DF                  		move.b	#$DF,(a0)	; Silence PSG 3
00097426 10BC 00FF                  		move.b	#$FF,(a0)	; Silence noise channel
0009742A 4E75                       		rts	
0009742C                            ; End of function PSGSilenceAll
0009742C                            
0009742C                            ; ===========================================================================
0009742C                            ; word_729CE:
0009742C                            PSGFrequencies:
0009742C 0356 0326 02F9 02CE 02A5+  		dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A
0009743C 021A 01FB 01DF 01C4 01AB+  		dc.w $21A, $1FB, $1DF, $1C4, $1AB, $193, $17D, $167
0009744C 0153 0140 012E 011D 010D+  		dc.w $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
0009745C 00D6 00C9 00BE 00B4 00A9+  		dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F
0009746C 0087 007F 0078 0071 006B+  		dc.w  $87,  $7F,  $78,  $71,  $6B,  $65,  $5F,  $5A
0009747C 0055 0050 004B 0047 0043+  		dc.w  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
0009748C 0036 0033 0030 002D 002B+  		dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24
0009749C 0022 0020 001F 001D 001B+  		dc.w  $22,  $20,  $1F,  $1D,  $1B,  $1A,  $18,  $17
000974AC 0016 0015 0013 0012 0011+  		dc.w  $16,  $15,  $13,  $12,  $11,    0
000974B8                            
000974B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000974B8                            
000974B8                            ; sub_72A5A:
000974B8                            CoordFlag:
000974B8 0445 00E0                  		subi.w	#$E0,d5
000974BC E54D                       		lsl.w	#2,d5
000974BE 4EFB 5000                  		jmp	coordflagLookup(pc,d5.w)
000974C2                            ; End of function CoordFlag
000974C2                            
000974C2                            ; ===========================================================================
000974C2                            ; loc_72A64:
000974C2                            coordflagLookup:
000974C2 6000 0000                  		bra.w	cfPanningAMSFMS		; $E0
000974C6                            ; ===========================================================================
000974C6 6000 0000                  		bra.w	cfDetune		; $E1
000974CA                            ; ===========================================================================
000974CA 6000 0000                  		bra.w	cfSetCommunication	; $E2
000974CE                            ; ===========================================================================
000974CE 6000 0000                  		bra.w	cfJumpReturn		; $E3
000974D2                            ; ===========================================================================
000974D2 6000 0000                  		bra.w	cfFadeInToPrevious	; $E4
000974D6                            ; ===========================================================================
000974D6 6000 0000                  		bra.w	cfSetTempoDivider	; $E5
000974DA                            ; ===========================================================================
000974DA 6000 0000                  		bra.w	cfChangeFMVolume	; $E6
000974DE                            ; ===========================================================================
000974DE 6000 0000                  		bra.w	cfHoldNote		; $E7
000974E2                            ; ===========================================================================
000974E2 6000 0000                  		bra.w	cfNoteTimeout		; $E8
000974E6                            ; ===========================================================================
000974E6 6000 0000                  		bra.w	cfChangeTransposition	; $E9
000974EA                            ; ===========================================================================
000974EA 6000 0000                  		bra.w	cfSetTempo		; $EA
000974EE                            ; ===========================================================================
000974EE 6000 0000                  		bra.w	cfSetTempoDividerAll	; $EB
000974F2                            ; ===========================================================================
000974F2 6000 0000                  		bra.w	cfChangePSGVolume	; $EC
000974F6                            ; ===========================================================================
000974F6 6000 0000                  		bra.w	cfClearPush		; $ED
000974FA                            ; ===========================================================================
000974FA 6000 0000                  		bra.w	cfStopSpecialFM4	; $EE
000974FE                            ; ===========================================================================
000974FE 6000 0000                  		bra.w	cfSetVoice		; $EF
00097502                            ; ===========================================================================
00097502 6000 0000                  		bra.w	cfModulation		; $F0
00097506                            ; ===========================================================================
00097506 6000 0000                  		bra.w	cfEnableModulation	; $F1
0009750A                            ; ===========================================================================
0009750A 6000 0000                  		bra.w	cfStopTrack		; $F2
0009750E                            ; ===========================================================================
0009750E 6000 0000                  		bra.w	cfSetPSGNoise		; $F3
00097512                            ; ===========================================================================
00097512 6000 0000                  		bra.w	cfDisableModulation	; $F4
00097516                            ; ===========================================================================
00097516 6000 0000                  		bra.w	cfSetPSGTone		; $F5
0009751A                            ; ===========================================================================
0009751A 6000 0000                  		bra.w	cfJumpTo		; $F6
0009751E                            ; ===========================================================================
0009751E 6000 0000                  		bra.w	cfRepeatAtPos		; $F7
00097522                            ; ===========================================================================
00097522 6000 0000                  		bra.w	cfJumpToGosub		; $F8
00097526                            ; ===========================================================================
00097526 6000 0000                  		bra.w	cfOpF9			; $F9
0009752A                            ; ===========================================================================
0009752A                            ; loc_72ACC:
0009752A                            cfPanningAMSFMS:
0009752A 121C                       		move.b	(a4)+,d1		; New AMS/FMS/panning value
0009752C 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00097530 6B00                       		bmi.s	locret_72AEA		; Return if yes
00097532 102D 000A                  		move.b	TrackAMSFMSPan(a5),d0	; Get current AMS/FMS/panning
00097536 0200 0037                  		andi.b	#$37,d0			; Retain bits 0-2, 3-4 if set
0009753A 8200                       		or.b	d0,d1			; Mask in new value
0009753C 1B41 000A                  		move.b	d1,TrackAMSFMSPan(a5)	; Store value
00097540 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00097544 6000 FC20                  		bra.w	WriteFMIorIIMain
00097548                            ; ===========================================================================
00097548                            
00097548                            locret_72AEA:
00097548 4E75                       		rts	
0009754A                            ; ===========================================================================
0009754A                            ; loc_72AEC: cfAlterNotes:
0009754A                            cfDetune:
0009754A 1B5C 001E                  		move.b	(a4)+,TrackDetune(a5)	; Set detune value
0009754E 4E75                       		rts	
00097550                            ; ===========================================================================
00097550                            ; loc_72AF2: cfUnknown1:
00097550                            cfSetCommunication:
00097550 1D5C 0007                  		move.b	(a4)+,v_communication_byte(a6)	; Set otherwise unused communication byte to parameter
00097554 4E75                       		rts	
00097556                            ; ===========================================================================
00097556                            ; loc_72AF8:
00097556                            cfJumpReturn:
00097556 7000                       		moveq	#0,d0
00097558 102D 000D                  		move.b	TrackStackPointer(a5),d0 ; Track stack pointer
0009755C 2875 0000                  		movea.l	(a5,d0.w),a4		; Set track return address
00097560 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)		; Set 'popped' value to zero
00097568 544C                       		addq.w	#2,a4			; Skip jump target address from gosub flag
0009756A 5800                       		addq.b	#4,d0			; Actually 'pop' value
0009756C 1B40 000D                  		move.b	d0,TrackStackPointer(a5) ; Set new stack pointer
00097570 4E75                       		rts	
00097572                            ; ===========================================================================
00097572                            ; loc_72B14:
00097572                            cfFadeInToPrevious:
00097572 204E                       		movea.l	a6,a0
00097574 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00097578 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; $220 bytes to restore: all variables and music track data
0009757C                            ; loc_72B1E:
0009757C                            @restoreramloop:
0009757C 20D9                       		move.l	(a1)+,(a0)+
0009757E 51C8 FFFC                  		dbf	d0,@restoreramloop
00097582                            
00097582 08EE 0002 0040             		bset	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Set 'SFX overriding' bit
00097588 264D                       		movea.l	a5,a3
0009758A 1C3C 0028                  		move.b	#$28,d6
0009758E 9C2E 0026                  		sub.b	v_fadein_counter(a6),d6			; If fade already in progress, this adjusts track volume accordingly
00097592 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00097594 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00097598                            ; loc_72B3A:
00097598                            @fmloop:
00097598 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
0009759C 6700                       		beq.s	@nextfm		; Branch if not
0009759E 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
000975A2 DD2D 0009                  		add.b	d6,TrackVolume(a5) ; Apply current volume fade-in
000975A6 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000975AA 6600                       		bne.s	@nextfm		; Branch if yes
000975AC 7000                       		moveq	#0,d0
000975AE 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get voice
000975B2 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
000975B6 4EBA 0000                  		jsr	SetVoice(pc)
000975BA                            ; loc_72B5C:
000975BA                            @nextfm:
000975BA DAFC 0030                  		adda.w	#TrackSz,a5
000975BE 51CF FFD8                  		dbf	d7,@fmloop
000975C2                            
000975C2 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
000975C4                            ; loc_72B66:
000975C4                            @psgloop:
000975C4 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
000975C8 6700                       		beq.s	@nextpsg	; Branch if not
000975CA 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
000975CE 4EBA FE20                  		jsr	PSGNoteOff(pc)
000975D2 DD2D 0009                  		add.b	d6,TrackVolume(a5)	; Apply current volume fade-in
000975D6                            ; loc_72B78:
000975D6                            @nextpsg:
000975D6 DAFC 0030                  		adda.w	#TrackSz,a5
000975DA 51CF FFE8                  		dbf	d7,@psgloop
000975DE                            		
000975DE 2A4B                       		movea.l	a3,a5
000975E0 1D7C 0080 0024             		move.b	#$80,f_fadein_flag(a6)		; Trigger fade-in
000975E6 1D7C 0028 0026             		move.b	#$28,v_fadein_counter(a6)	; Fade-in delay
000975EC 422E 0027                  		clr.b	f_1up_playing(a6)
000975F0 33FC 0000 00A1 1100        		startZ80
000975F8 504F                       		addq.w	#8,sp		; Tamper return value so we don't return to caller
000975FA 4E75                       		rts	
000975FC                            ; ===========================================================================
000975FC                            ; loc_72B9E:
000975FC                            cfSetTempoDivider:
000975FC 1B5C 0002                  		move.b	(a4)+,TrackTempoDivider(a5)	; Set tempo divider on current track
00097600 4E75                       		rts	
00097602                            ; ===========================================================================
00097602                            ; loc_72BA4: cfSetVolume:
00097602                            cfChangeFMVolume:
00097602 101C                       		move.b	(a4)+,d0		; Get parameter
00097604 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Add to current volume
00097608 6000 0000                  		bra.w	SendVoiceTL
0009760C                            ; ===========================================================================
0009760C                            ; loc_72BAE: cfPreventAttack:
0009760C                            cfHoldNote:
0009760C 08D5 0004                  		bset	#4,(a5)		; Set 'do not attack next note' bit (TrackPlaybackControl)
00097610 4E75                       		rts	
00097612                            ; ===========================================================================
00097612                            ; loc_72BB4: cfNoteFill
00097612                            cfNoteTimeout:
00097612 1B54 0012                  		move.b	(a4),TrackNoteTimeout(a5)		; Note fill timeout
00097616 1B5C 0013                  		move.b	(a4)+,TrackNoteTimeoutMaster(a5)	; Note fill master
0009761A 4E75                       		rts	
0009761C                            ; ===========================================================================
0009761C                            ; loc_72BBE: cfAddKey:
0009761C                            cfChangeTransposition:
0009761C 101C                       		move.b	(a4)+,d0		; Get parameter
0009761E D12D 0008                  		add.b	d0,TrackTranspose(a5)	; Add to transpose value
00097622 4E75                       		rts	
00097624                            ; ===========================================================================
00097624                            ; loc_72BC6:
00097624                            cfSetTempo:
00097624 1D54 0002                  		move.b	(a4),v_main_tempo(a6)		; Set main tempo
00097628 1D5C 0001                  		move.b	(a4)+,v_main_tempo_timeout(a6)	; And reset timeout (!)
0009762C 4E75                       		rts	
0009762E                            ; ===========================================================================
0009762E                            ; loc_72BD0: cfSetTempoMod:
0009762E                            cfSetTempoDividerAll:
0009762E 41EE 0040                  		lea	v_music_track_ram(a6),a0
00097632 101C                       		move.b	(a4)+,d0			; Get new tempo divider
00097634 7230                       		moveq	#TrackSz,d1
00097636 7409                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d2	; 1 DAC + 6 FM + 3 PSG tracks
00097638                            ; loc_72BDA:
00097638                            @trackloop:
00097638 1140 0002                  		move.b	d0,TrackTempoDivider(a0)	; Set track's tempo divider
0009763C D0C1                       		adda.w	d1,a0
0009763E 51CA FFF8                  		dbf	d2,@trackloop
00097642                            
00097642 4E75                       		rts	
00097644                            ; ===========================================================================
00097644                            ; loc_72BE6: cfChangeVolume:
00097644                            cfChangePSGVolume:
00097644 101C                       		move.b	(a4)+,d0		; Get volume change
00097646 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Apply it
0009764A 4E75                       		rts	
0009764C                            ; ===========================================================================
0009764C                            ; loc_72BEE:
0009764C                            cfClearPush:
0009764C 422E 002C                  		clr.b	f_push_playing(a6)	; Allow push sound to be played once more
00097650 4E75                       		rts	
00097652                            ; ===========================================================================
00097652                            ; loc_72BF4:
00097652                            cfStopSpecialFM4:
00097652 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00097656 0895 0004                  		bclr	#4,(a5)		; Clear 'do not attack next note' bit (TrackPlaybackControl)
0009765A 4EBA FAF2                  		jsr	FMNoteOff(pc)
0009765E 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is SFX using FM4?
00097662 6B00                       		bmi.s	@locexit					; Branch if yes
00097664 264D                       		movea.l	a5,a3
00097666 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
0009766A 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
0009766E 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00097672 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00097676 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
0009767A 4EBA 0000                  		jsr	SetVoice(pc)
0009767E 2A4B                       		movea.l	a3,a5
00097680                            ; loc_72C22:
00097680                            @locexit:
00097680 504F                       		addq.w	#8,sp		; Tamper with return value so we don't return to caller
00097682 4E75                       		rts	
00097684                            ; ===========================================================================
00097684                            ; loc_72C26:
00097684                            cfSetVoice:
00097684 7000                       		moveq	#0,d0
00097686 101C                       		move.b	(a4)+,d0		; Get new voice
00097688 1B40 000B                  		move.b	d0,TrackVoiceIndex(a5)	; Store it
0009768C 0815 0002                  		btst	#2,(a5)			; Is SFX overriding this track? (TrackPlaybackControl)
00097690 6600 0000                  		bne.w	locret_72CAA		; Return if yes
00097694 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Music voice pointer
00097698 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a music track?
0009769C 6700                       		beq.s	SetVoice		; If yes, branch
0009769E 226D 0020                  		movea.l	TrackVoicePtr(a5),a1	; SFX track voice pointer
000976A2 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a SFX track?
000976A6 6B00                       		bmi.s	SetVoice		; If yes, branch
000976A8 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1 ; Special SFX voice pointer
000976AC                            
000976AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000976AC                            
000976AC                            ; sub_72C4E:
000976AC                            SetVoice:
000976AC 5340                       		subq.w	#1,d0
000976AE 6B00                       		bmi.s	@havevoiceptr
000976B0 323C 0019                  		move.w	#25,d1
000976B4                            ; loc_72C56:
000976B4                            @voicemultiply:
000976B4 D2C1                       		adda.w	d1,a1
000976B6 51C8 FFFC                  		dbf	d0,@voicemultiply
000976BA                            ; loc_72C5C:
000976BA                            @havevoiceptr:
000976BA 1219                       		move.b	(a1)+,d1		; feedback/algorithm
000976BC 1B41 001F                  		move.b	d1,TrackFeedbackAlgo(a5) ; Save it to track RAM
000976C0 1801                       		move.b	d1,d4
000976C2 103C 00B0                  		move.b	#$B0,d0			; Command to write feedback/algorithm
000976C6 4EBA FAAA                  		jsr	WriteFMIorII(pc)
000976CA 45FA 0000                  		lea	FMInstrumentOperatorTable(pc),a2
000976CE 7600                       		moveq	#(FMInstrumentOperatorTable_End-FMInstrumentOperatorTable)-1,d3		; Don't want to send TL yet
000976D0                            ; loc_72C72:
000976D0                            @sendvoiceloop:
000976D0 101A                       		move.b	(a2)+,d0
000976D2 1219                       		move.b	(a1)+,d1
000976D4 4EBA FA9C                  		jsr	WriteFMIorII(pc)
000976D8 51CB FFF6                  		dbf	d3,@sendvoiceloop
000976DC                            
000976DC 7A03                       		moveq	#3,d5
000976DE 0244 0007                  		andi.w	#7,d4			; Get algorithm
000976E2 183B 4000                  		move.b	FMSlotMask(pc,d4.w),d4	; Get slot mask for algorithm
000976E6 162D 0009                  		move.b	TrackVolume(a5),d3	; Track volume attenuation
000976EA                            ; loc_72C8C:
000976EA                            @sendtlloop:
000976EA 101A                       		move.b	(a2)+,d0
000976EC 1219                       		move.b	(a1)+,d1
000976EE E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
000976F0 6400                       		bcc.s	@sendtl		; Branch if not
000976F2 D203                       		add.b	d3,d1		; Include additional attenuation
000976F4                            ; loc_72C96:
000976F4                            @sendtl:
000976F4 4EBA FA7C                  		jsr	WriteFMIorII(pc)
000976F8 51CD FFF0                  		dbf	d5,@sendtlloop
000976FC                            		
000976FC 103C 00B4                  		move.b	#$B4,d0			; Register for AMS/FMS/Panning
00097700 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Value to send
00097704 4EBA FA6C                  		jsr	WriteFMIorII(pc) 	; (It would be better if this were a jmp)
00097708                            
00097708                            locret_72CAA:
00097708 4E75                       		rts	
0009770A                            ; End of function SetVoice
0009770A                            
0009770A                            ; ===========================================================================
0009770A                            ; byte_72CAC:
0009770A 0808 0808 0A0E 0E0F        FMSlotMask:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00097712                            
00097712                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097712                            
00097712                            ; sub_72CB4:
00097712                            SendVoiceTL:
00097712 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00097716 6600                       		bne.s	@locret		; Return if so
00097718 7000                       		moveq	#0,d0
0009771A 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
0009771E 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00097722 4A2E 000E                  		tst.b	f_voice_selector(a6)
00097726 6700                       		beq.s	@gotvoiceptr
00097728                            		; DANGER! This uploads the wrong voice! It should have been a5 instead
00097728                            		; of a6!
00097728 226D 0020                  		movea.l	TrackVoicePtr(a5),a1
0009772C 4A2E 000E                  		tst.b	f_voice_selector(a6)
00097730 6B00                       		bmi.s	@gotvoiceptr
00097732 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1
00097736                            ; loc_72CD8:
00097736                            @gotvoiceptr:
00097736 5340                       		subq.w	#1,d0
00097738 6B00                       		bmi.s	@gotvoice
0009773A 323C 0019                  		move.w	#25,d1
0009773E                            ; loc_72CE0:
0009773E                            @voicemultiply:
0009773E D2C1                       		adda.w	d1,a1
00097740 51C8 FFFC                  		dbf	d0,@voicemultiply
00097744                            ; loc_72CE6:
00097744                            @gotvoice:
00097744 D2FC 0015                  		adda.w	#21,a1				; Want TL
00097748 45FA 0000                  		lea	FMInstrumentTLTable(pc),a2
0009774C 102D 001F                  		move.b	TrackFeedbackAlgo(a5),d0	; Get feedback/algorithm
00097750 0240 0007                  		andi.w	#7,d0				; Want only algorithm
00097754 183B 00B4                  		move.b	FMSlotMask(pc,d0.w),d4		; Get slot mask
00097758 162D 0009                  		move.b	TrackVolume(a5),d3		; Get track volume attenuation
0009775C 6B00                       		bmi.s	@locret				; If negative, stop
0009775E 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
00097760                            ; loc_72D02:
00097760                            @sendtlloop:
00097760 101A                       		move.b	(a2)+,d0
00097762 1219                       		move.b	(a1)+,d1
00097764 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00097766 6400                       		bcc.s	@senttl		; Branch if not
00097768 D203                       		add.b	d3,d1		; Include additional attenuation
0009776A 6500                       		bcs.s	@senttl		; Branch on overflow
0009776C 4EBA FA04                  		jsr	WriteFMIorII(pc)
00097770                            ; loc_72D12:
00097770                            @senttl:
00097770 51CD FFEE                  		dbf	d5,@sendtlloop
00097774                            ; locret_72D16:
00097774                            @locret:
00097774 4E75                       		rts	
00097776                            ; End of function SendVoiceTL
00097776                            
00097776                            ; ===========================================================================
00097776                            ; byte_72D18:
00097776                            FMInstrumentOperatorTable:
00097776 30                         		dc.b  $30		; Detune/multiple operator 1
00097777 38                         		dc.b  $38		; Detune/multiple operator 3
00097778 34                         		dc.b  $34		; Detune/multiple operator 2
00097779 3C                         		dc.b  $3C		; Detune/multiple operator 4
0009777A 50                         		dc.b  $50		; Rate scalling/attack rate operator 1
0009777B 58                         		dc.b  $58		; Rate scalling/attack rate operator 3
0009777C 54                         		dc.b  $54		; Rate scalling/attack rate operator 2
0009777D 5C                         		dc.b  $5C		; Rate scalling/attack rate operator 4
0009777E 60                         		dc.b  $60		; Amplitude modulation/first decay rate operator 1
0009777F 68                         		dc.b  $68		; Amplitude modulation/first decay rate operator 3
00097780 64                         		dc.b  $64		; Amplitude modulation/first decay rate operator 2
00097781 6C                         		dc.b  $6C		; Amplitude modulation/first decay rate operator 4
00097782 70                         		dc.b  $70		; Secondary decay rate operator 1
00097783 78                         		dc.b  $78		; Secondary decay rate operator 3
00097784 74                         		dc.b  $74		; Secondary decay rate operator 2
00097785 7C                         		dc.b  $7C		; Secondary decay rate operator 4
00097786 80                         		dc.b  $80		; Secondary amplitude/release rate operator 1
00097787 88                         		dc.b  $88		; Secondary amplitude/release rate operator 3
00097788 84                         		dc.b  $84		; Secondary amplitude/release rate operator 2
00097789 8C                         		dc.b  $8C		; Secondary amplitude/release rate operator 4
0009778A                            FMInstrumentOperatorTable_End
0009778A                            ; byte_72D2C:
0009778A                            FMInstrumentTLTable:
0009778A 40                         		dc.b  $40		; Total level operator 1
0009778B 48                         		dc.b  $48		; Total level operator 3
0009778C 44                         		dc.b  $44		; Total level operator 2
0009778D 4C                         		dc.b  $4C		; Total level operator 4
0009778E                            FMInstrumentTLTable_End
0009778E                            ; ===========================================================================
0009778E                            ; loc_72D30:
0009778E                            cfModulation:
0009778E 08D5 0003                  		bset	#3,(a5)				; Turn on modulation (TrackPlaybackControl)
00097792 2B4C 0014                  		move.l	a4,TrackModulationPtr(a5)	; Save pointer to modulation data
00097796 1B5C 0018                  		move.b	(a4)+,TrackModulationWait(a5)	; Modulation delay
0009779A 1B5C 0019                  		move.b	(a4)+,TrackModulationSpeed(a5)	; Modulation speed
0009779E 1B5C 001A                  		move.b	(a4)+,TrackModulationDelta(a5)	; Modulation delta
000977A2 101C                       		move.b	(a4)+,d0			; Modulation steps...
000977A4 E208                       		lsr.b	#1,d0				; ... divided by 2...
000977A6 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; ... before being stored
000977AA 426D 001C                  		clr.w	TrackModulationVal(a5)		; Total accumulated modulation frequency change
000977AE 4E75                       		rts	
000977B0                            ; ===========================================================================
000977B0                            ; loc_72D52:
000977B0                            cfEnableModulation:
000977B0 08D5 0003                  		bset	#3,(a5)		; Turn on modulation (TrackPlaybackControl)
000977B4 4E75                       		rts	
000977B6                            ; ===========================================================================
000977B6                            ; loc_72D58:
000977B6                            cfStopTrack:
000977B6 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
000977BA 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
000977BE 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
000977C2 6B00                       		bmi.s	@stoppsg		; Branch if yes
000977C4 4A2E 0008                  		tst.b	f_updating_dac(a6)	; Is this the DAC we are updating?
000977C8 6B00 0000                  		bmi.w	@locexit		; Exit if yes
000977CC 4EBA F980                  		jsr	FMNoteOff(pc)
000977D0 6000                       		bra.s	@stoppedchannel
000977D2                            ; ===========================================================================
000977D2                            ; loc_72D74:
000977D2                            @stoppsg:
000977D2 4EBA FC1C                  		jsr	PSGNoteOff(pc)
000977D6                            ; loc_72D78:
000977D6                            @stoppedchannel:
000977D6 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating SFX?
000977DA 6A00 0000                  		bpl.w	@locexit		; Exit if not
000977DE 4216                       		clr.b	v_sndprio(a6)		; Clear priority
000977E0 7000                       		moveq	#0,d0
000977E2 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get voice control bits
000977E6 6B00                       		bmi.s	@getpsgptr		; Branch if PSG
000977E8 41FA F536                  		lea	SFX_BGMChannelRAM(pc),a0
000977EC 264D                       		movea.l	a5,a3
000977EE 0C00 0004                  		cmpi.b	#4,d0			; Is this FM4?
000977F2 6600                       		bne.s	@getpointer		; Branch if not
000977F4 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
000977F8 6A00                       		bpl.s	@getpointer		; Branch if not
000977FA 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
000977FE 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get voice pointer
00097802 6000                       		bra.s	@gotpointer
00097804                            ; ===========================================================================
00097804                            ; loc_72DA8:
00097804                            @getpointer:
00097804 5500                       		subq.b	#2,d0		; SFX can only use FM3 and up
00097806 E508                       		lsl.b	#2,d0
00097808 2A70 0000                  		movea.l	(a0,d0.w),a5
0009780C 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0009780E 6A00                       		bpl.s	@novoiceupd		; Branch if not
00097810 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get voice pointer
00097814                            ; loc_72DB8:
00097814                            @gotpointer:
00097814 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX overriding' bit (TrackPlaybackControl)
00097818 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
0009781C 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00097820 4EBA FE8A                  		jsr	SetVoice(pc)
00097824                            ; loc_72DC8:
00097824                            @novoiceupd:
00097824 2A4B                       		movea.l	a3,a5
00097826 6000                       		bra.s	@locexit
00097828                            ; ===========================================================================
00097828                            ; loc_72DCC:
00097828                            @getpsgptr:
00097828 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
0009782C 4A10                       		tst.b	(a0)		; Is track playing? (TrackPlaybackControl)
0009782E 6A00                       		bpl.s	@getchannelptr	; Branch if not
00097830 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it the noise channel?
00097834 6700                       		beq.s	@gotchannelptr	; Branch if yes
00097836 0C00 00C0                  		cmpi.b	#$C0,d0		; Is it PSG 3?
0009783A 6700                       		beq.s	@gotchannelptr	; Branch if yes
0009783C                            ; loc_72DE0:
0009783C                            @getchannelptr:
0009783C 41FA F4E2                  		lea	SFX_BGMChannelRAM(pc),a0
00097840 E608                       		lsr.b	#3,d0
00097842 2070 0000                  		movea.l	(a0,d0.w),a0
00097846                            ; loc_72DEA:
00097846                            @gotchannelptr:
00097846 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX overriding' bit (TrackPlaybackControl)
0009784A 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
0009784E 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise pointer?
00097854 6600                       		bne.s	@locexit			; Branch if not
00097856 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise tone
0009785E                            ; loc_72E02:
0009785E                            @locexit:
0009785E 504F                       		addq.w	#8,sp		; Tamper with return value so we don't go back to caller
00097860 4E75                       		rts	
00097862                            ; ===========================================================================
00097862                            ; loc_72E06:
00097862                            cfSetPSGNoise:
00097862 1B7C 00E0 0001             		move.b	#$E0,TrackVoiceControl(a5)	; Turn channel into noise channel
00097868 1B5C 001F                  		move.b	(a4)+,TrackPSGNoise(a5)	; Save noise tone
0009786C 0815 0002                  		btst	#2,(a5)				; Is track being overridden? (TrackPlaybackControl)
00097870 6600                       		bne.s	@locret				; Return if yes
00097872 13EC FFFF 00C0 0011        		move.b	-1(a4),(psg_input).l		; Set tone
0009787A                            ; locret_72E1E:
0009787A                            @locret:
0009787A 4E75                       		rts	
0009787C                            ; ===========================================================================
0009787C                            ; loc_72E20:
0009787C                            cfDisableModulation:
0009787C 0895 0003                  		bclr	#3,(a5)		; Disable modulation (TrackPlaybackControl)
00097880 4E75                       		rts	
00097882                            ; ===========================================================================
00097882                            ; loc_72E26:
00097882                            cfSetPSGTone:
00097882 1B5C 000B                  		move.b	(a4)+,TrackVoiceIndex(a5)	; Set current PSG tone
00097886 4E75                       		rts	
00097888                            ; ===========================================================================
00097888                            ; loc_72E2C:
00097888                            cfJumpTo:
00097888 101C                       		move.b	(a4)+,d0	; High byte of offset
0009788A E148                       		lsl.w	#8,d0		; Shift it into place
0009788C 101C                       		move.b	(a4)+,d0	; Low byte of offset
0009788E D8C0                       		adda.w	d0,a4		; Add to current position
00097890 534C                       		subq.w	#1,a4		; Put back one byte
00097892 4E75                       		rts	
00097894                            ; ===========================================================================
00097894                            ; loc_72E38:
00097894                            cfRepeatAtPos:
00097894 7000                       		moveq	#0,d0
00097896 101C                       		move.b	(a4)+,d0			; Loop index
00097898 121C                       		move.b	(a4)+,d1			; Repeat count
0009789A 4A35 0024                  		tst.b	TrackLoopCounters(a5,d0.w)	; Has this loop already started?
0009789E 6600                       		bne.s	@loopexists			; Branch if yes
000978A0 1B81 0024                  		move.b	d1,TrackLoopCounters(a5,d0.w)	; Initialize repeat count
000978A4                            ; loc_72E48:
000978A4                            @loopexists:
000978A4 5335 0024                  		subq.b	#1,TrackLoopCounters(a5,d0.w)	; Decrease loop's repeat count
000978A8 66DE                       		bne.s	cfJumpTo			; If nonzero, branch to target
000978AA 544C                       		addq.w	#2,a4				; Skip target address
000978AC 4E75                       		rts	
000978AE                            ; ===========================================================================
000978AE                            ; loc_72E52:
000978AE                            cfJumpToGosub:
000978AE 7000                       		moveq	#0,d0
000978B0 102D 000D                  		move.b	TrackStackPointer(a5),d0	; Current stack pointer
000978B4 5900                       		subq.b	#4,d0				; Add space for another target
000978B6 2B8C 0000                  		move.l	a4,(a5,d0.w)			; Put in current address (*before* target for jump!)
000978BA 1B40 000D                  		move.b	d0,TrackStackPointer(a5)	; Store new stack pointer
000978BE 60C8                       		bra.s	cfJumpTo
000978C0                            ; ===========================================================================
000978C0                            ; loc_72E64:
000978C0                            cfOpF9:
000978C0 103C 0088                  		move.b	#$88,d0		; D1L/RR of Operator 3
000978C4 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
000978C8 4EBA F8B4                  		jsr	WriteFMI(pc)
000978CC 103C 008C                  		move.b	#$8C,d0		; D1L/RR of Operator 4
000978D0 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
000978D4 6000 F8A8                  		bra.w	WriteFMI
000978D8                            ; ===========================================================================
000978D8                            
000978D8                            Kos_Z80:
000978D8                            		incbin	"sound\z80.bin", 0, $15
000978ED 00                         		dc.b ((SegaPCM&$FF8000)/$8000)&1						; Least bit of bank ID (bit 15 of address)
000978EE                            		incbin	"sound\z80.bin", $16, 6
000978F4 00                         		dc.b ((SegaPCM&$FF8000)/$8000)>>1						; ... the remaining bits of bank ID (bits 16-23)
000978F5                            		incbin	"sound\z80.bin", $1D, $93
00097988 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$7F00)>>8)|$80				; Pointer to Sega PCM, relative to start of ROM bank (i.e., little_endian($8000 + SegaPCM&$7FFF)
0009798A                            		incbin	"sound\z80.bin", $B2, 1
0009798B 0000                       		dc.w (((SegaPCM_End-SegaPCM)&$FF)<<8)+(((SegaPCM_End-SegaPCM)&$FF00)>>8)	; ... the size of the Sega PCM (little endian)
0009798D                            		incbin	"sound\z80.bin", $B5, $16AB
0009902E                            		even
0009902E                            
0009902E                            Music81:	incbin	"sound/music/Mus81 - GHZ.bin"
0009A352 00                         		even
0009A352                            Music82:	incbin	"sound/music/Mus82 - LZ.bin"
0009BBDA                            		even
0009BBDA                            Music83:	incbin	"sound/music/Mus83 - MZ.bin"
000A355A 00                         		even
000A355A                            Music84:	incbin	"sound/music/Mus84 - SLZ.bin"
000A4D6E 00                         		even
000A4D6E                            Music85:	incbin	"sound/music/Mus85 - SYZ.bin"
000A5B14                            		even
000A5B14                            Music86:	incbin	"sound/music/Mus86 - SBZ.bin"
000A6ECC                            		even
000A6ECC                            Music87:	incbin	"sound/music/Mus87 - Invincibility.bin"
000A77C4 00                         		even
000A77C4                            Music88:	include	"sound/music/Mus88 - Extra Life.asm"
000A77C4                            extralifejingle_Header:
000A77C4                            	smpsHeaderStartSong 1
000A77C6 0703                       	smpsHeaderChan      $07, $03
000A77C8 0100                       	smpsHeaderTempo     $01, $00
000A77CA                            
000A77CE 0000 0000                  	smpsHeaderFM        extralifejingle_FM1,	$00, $00
000A77D2 0000 0000                  	smpsHeaderFM        extralifejingle_FM2,	$00, $00
000A77D6 0000 0000                  	smpsHeaderFM        extralifejingle_FM3,	$00, $00
000A77DA 0000 0000                  	smpsHeaderFM        extralifejingle_FM4,	$00, $00
000A77DE 0000 0000                  	smpsHeaderFM        extralifejingle_FM5,	$00, $00
000A77E2 0000 0000                  	smpsHeaderFM        extralifejingle_FM6,	$00, $00
000A77F8                            
000A77F8                            ; DAC Data
000A77F8                            extralifejingle_DAC:
000A77F8 807F 55                    	dc.b	nRst, $7F, $55
000A77FB E4                         	smpsFade
000A77FC                            ; PSG1 Data
000A77FC                            extralifejingle_PSG1:
000A77FC                            ; PSG2 Data
000A77FC                            extralifejingle_PSG2:
000A77FC                            ; PSG3 Data
000A77FC                            extralifejingle_PSG3:
000A77FC F2                         	smpsStop
000A77FD                            
000A77FD                            ; FM1 Data
000A77FD                            extralifejingle_FM1:
000A77FD EF00                       	smpsSetvoice        $00
000A77FF E616                       	smpsAlterVol        $16
000A7801 E0C0                       	smpsPan             panCenter, $00
000A7803 A61A BC13 BB12 B913 B60D+  	dc.b	nCs3, $1A, nB4, $13, nBb4, $12, nAb4, $13, nF4, $0D, nG3, $2C
000A780F AC06 800C                  	dc.b	nG3, $06, nRst, $0C
000A7813 F2                         	smpsStop
000A7814                            
000A7814                            ; FM2 Data
000A7814                            extralifejingle_FM2:
000A7814 EF01                       	smpsSetvoice        $01
000A7816 E616                       	smpsAlterVol        $16
000A7818 E0C0                       	smpsPan             panCenter, $00
000A781A B61A AD13 AB12 AA13 A60D+  	dc.b	nF4, $1A, nAb3, $13, nFs3, $12, nF3, $13, nCs3, $0D, nA2, $2C
000A7826 A206 800C                  	dc.b	nA2, $06, nRst, $0C
000A782A F2                         	smpsStop
000A782B                            
000A782B                            ; FM3 Data
000A782B                            extralifejingle_FM3:
000A782B EF01                       	smpsSetvoice        $01
000A782D E616                       	smpsAlterVol        $16
000A782F E0C0                       	smpsPan             panCenter, $00
000A7831 AD0D BC13 B9B7 B60C B20D+  	dc.b	nAb3, $0D, nB4, $13, nAb4, nFs4, nF4, $0C, nCs4, $0D, nC4, $2C
000A783D B106 800C                  	dc.b	nC4, $06, nRst, $0C
000A7841 F2                         	smpsStop
000A7842                            
000A7842                            ; FM4 Data
000A7842                            extralifejingle_FM4:
000A7842 EF02                       	smpsSetvoice        $02
000A7844 E0C0                       	smpsPan             panCenter, $00
000A7846 8001                       	dc.b	nRst, $01
000A7848 E616                       	smpsAlterVol        $16
000A784A BE0C B913 ABAA A60C A20D+  	dc.b	nCs5, $0C, nAb4, $13, nFs3, nF3, nCs3, $0C, nA2, $0D, nE5, $2C
000A7856 C106 800C                  	dc.b	nE5, $06, nRst, $0C
000A785A F2                         	smpsStop
000A785B                            
000A785B                            ; FM5 Data
000A785B                            extralifejingle_FM5:
000A785B EF03                       	smpsSetvoice        $03
000A785D E602                       	smpsAlterVol        $02
000A785F E0C0                       	smpsPan             panCenter, $00
000A7861 8001                       	dc.b	nRst, $01
000A7863 EF05                       	smpsSetvoice        $05
000A7865 E60A                       	smpsAlterVol        $0A
000A7867 E780 0CC8 06B2 07B9 06C7+  	dc.b	smpsNoAttack, nRst, $0C, nB5, $06, nCs4, $07, nAb4, $06, nBb5, nCs4, $07
000A7873 B706 C5C8 B607 C206 B2BE+  	dc.b	nFs4, $06, nAb5, nB5, nF4, $07, nF5, $06, nCs4, nCs5, $07, nA5
000A787F 06BD C1C4 07BD 06C1 C407+  	dc.b	$06, nC5, nE5, nG5, $07, nC5, $06, nE5, nG5, $07, nC5, $06
000A788B C1C4 80                    	dc.b	nE5, nG5, nRst
000A788E F2                         	smpsStop
000A788F                            
000A788F                            ; FM6 Data
000A788F                            extralifejingle_FM6:
000A788F EF04                       	smpsSetvoice        $04
000A7891 E607                       	smpsAlterVol        $07
000A7893 E0C0                       	smpsPan             panCenter, $00
000A7895 8001                       	dc.b	nRst, $01
000A7897 EF06                       	smpsSetvoice        $06
000A7899 E6F9                       	smpsAlterVol        $F9
000A789B A658 A72C A70C 80          	dc.b	nCs3, $58, nD3, $2C, nD3, $0C, nRst
000A78A2 F2                         	smpsStop
000A78A3                            
000A78A3                            extralifejingle_Voices:
000A78A3                            ;	Voice $00
000A78A3                            ;	$3A
000A78A3                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000A78A3                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000A78A3                            	smpsVcAlgorithm     $02
000A78A3                            	smpsVcFeedback      $07
000A78A3                            	smpsVcUnusedBits    $00
000A78A3                            	smpsVcDetune        $03, $07, $07, $03
000A78A3                            	smpsVcCoarseFreq    $01, $04, $03, $04
000A78A3                            	smpsVcRateScale     $00, $00, $00, $00
000A78A3                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A78A3                            	smpsVcAmpMod        $00, $00, $00, $00
000A78A3                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000A78A3                            	smpsVcDecayRate2    $00, $00, $00, $00
000A78A3                            	smpsVcDecayLevel    $00, $00, $00, $00
000A78A3                            	smpsVcReleaseRate   $05, $03, $03, $03
000A78BC                            
000A78BC                            ;	Voice $01
000A78BC                            ;	$3A
000A78BC                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000A78BC                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000A78BC                            	smpsVcAlgorithm     $02
000A78BC                            	smpsVcFeedback      $07
000A78BC                            	smpsVcUnusedBits    $00
000A78BC                            	smpsVcDetune        $03, $07, $07, $03
000A78BC                            	smpsVcCoarseFreq    $01, $04, $03, $04
000A78BC                            	smpsVcRateScale     $00, $00, $00, $00
000A78BC                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A78BC                            	smpsVcAmpMod        $00, $00, $00, $00
000A78BC                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000A78BC                            	smpsVcDecayRate2    $00, $00, $00, $00
000A78BC                            	smpsVcDecayLevel    $00, $00, $00, $00
000A78BC                            	smpsVcReleaseRate   $05, $03, $03, $03
000A78D5                            
000A78D5                            ;	Voice $02
000A78D5                            ;	$3A
000A78D5                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000A78D5                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000A78D5                            	smpsVcAlgorithm     $02
000A78D5                            	smpsVcFeedback      $07
000A78D5                            	smpsVcUnusedBits    $00
000A78D5                            	smpsVcDetune        $03, $07, $07, $03
000A78D5                            	smpsVcCoarseFreq    $01, $04, $03, $04
000A78D5                            	smpsVcRateScale     $00, $00, $00, $00
000A78D5                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A78D5                            	smpsVcAmpMod        $00, $00, $00, $00
000A78D5                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000A78D5                            	smpsVcDecayRate2    $00, $00, $00, $00
000A78D5                            	smpsVcDecayLevel    $00, $00, $00, $00
000A78D5                            	smpsVcReleaseRate   $05, $03, $03, $03
000A78EE                            
000A78EE                            ;	Voice $03
000A78EE                            ;	$00
000A78EE                            ;	$01, $0E, $00, $00, 	$1E, $1E, $1E, $1D, 	$1A, $1C, $10, $10
000A78EE                            ;	$00, $00, $00, $00, 	$FD, $FE, $F8, $F8, 	$1A, $25, $05, $00
000A78EE                            	smpsVcAlgorithm     $00
000A78EE                            	smpsVcFeedback      $00
000A78EE                            	smpsVcUnusedBits    $00
000A78EE                            	smpsVcDetune        $00, $00, $00, $00
000A78EE                            	smpsVcCoarseFreq    $00, $00, $0E, $01
000A78EE                            	smpsVcRateScale     $00, $00, $00, $00
000A78EE                            	smpsVcAttackRate    $1D, $1E, $1E, $1E
000A78EE                            	smpsVcAmpMod        $00, $00, $00, $00
000A78EE                            	smpsVcDecayRate1    $10, $10, $1C, $1A
000A78EE                            	smpsVcDecayRate2    $00, $00, $00, $00
000A78EE                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A78EE                            	smpsVcReleaseRate   $08, $08, $0E, $0D
000A7907                            
000A7907                            ;	Voice $04
000A7907                            ;	$03
000A7907                            ;	$66, $40, $40, $31, 	$1F, $1F, $1F, $1C, 	$0E, $05, $02, $01
000A7907                            ;	$01, $00, $04, $06, 	$AA, $6A, $16, $18, 	$2A, $1A, $20, $00
000A7907                            	smpsVcAlgorithm     $03
000A7907                            	smpsVcFeedback      $00
000A7907                            	smpsVcUnusedBits    $00
000A7907                            	smpsVcDetune        $03, $04, $04, $06
000A7907                            	smpsVcCoarseFreq    $01, $00, $00, $06
000A7907                            	smpsVcRateScale     $00, $00, $00, $00
000A7907                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
000A7907                            	smpsVcAmpMod        $00, $00, $00, $00
000A7907                            	smpsVcDecayRate1    $01, $02, $05, $0E
000A7907                            	smpsVcDecayRate2    $06, $04, $00, $01
000A7907                            	smpsVcDecayLevel    $01, $01, $06, $0A
000A7907                            	smpsVcReleaseRate   $08, $06, $0A, $0A
000A7920                            
000A7920                            ;	Voice $05
000A7920                            ;	$34
000A7920                            ;	$33, $7E, $01, $74, 	$9B, $1F, $5F, $1F, 	$14, $07, $07, $08
000A7920                            ;	$00, $00, $00, $00, 	$F6, $E4, $F7, $F7, 	$19, $71, $00, $00
000A7920                            	smpsVcAlgorithm     $04
000A7920                            	smpsVcFeedback      $06
000A7920                            	smpsVcUnusedBits    $00
000A7920                            	smpsVcDetune        $07, $00, $07, $03
000A7920                            	smpsVcCoarseFreq    $04, $01, $0E, $03
000A7920                            	smpsVcRateScale     $00, $01, $00, $02
000A7920                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
000A7920                            	smpsVcAmpMod        $00, $00, $00, $00
000A7920                            	smpsVcDecayRate1    $08, $07, $07, $14
000A7920                            	smpsVcDecayRate2    $00, $00, $00, $00
000A7920                            	smpsVcDecayLevel    $0F, $0F, $0E, $0F
000A7920                            	smpsVcReleaseRate   $07, $07, $04, $06
000A7939                            
000A7939                            ;	Voice $06
000A7939                            ;	$30
000A7939                            ;	$01, $00, $00, $01, 	$9F, $1F, $1F, $5C, 	$0F, $0D, $10, $14
000A7939                            ;	$08, $18, $05, $08, 	$6F, $00, $0F, $18, 	$15, $1F, $19, $00
000A7939                            	smpsVcAlgorithm     $00
000A7939                            	smpsVcFeedback      $06
000A7939                            	smpsVcUnusedBits    $00
000A7939                            	smpsVcDetune        $00, $00, $00, $00
000A7939                            	smpsVcCoarseFreq    $01, $00, $00, $01
000A7939                            	smpsVcRateScale     $01, $00, $00, $02
000A7939                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
000A7939                            	smpsVcAmpMod        $00, $00, $00, $00
000A7939                            	smpsVcDecayRate1    $14, $10, $0D, $0F
000A7939                            	smpsVcDecayRate2    $08, $05, $18, $08
000A7939                            	smpsVcDecayLevel    $01, $00, $00, $06
000A7939                            	smpsVcReleaseRate   $08, $0F, $00, $0F
000A7952                            
000A7952                            
000A7952                            		even
000A7952                            Music89:	incbin	"sound/music/Mus89 - Special Stage.bin"
000A81AA 00                         		even
000A81AA                            Music8A:	incbin	"sound/music/Mus8A - Title Screen.bin"
000A86CA                            		even
000A86CA                            Music8B:	incbin	"sound/music/Mus8B - Ending.bin"
000A898C 00                         		even
000A898C                            Music8C:	incbin	"sound/music/Mus8C - Boss.bin"
000A97E4                            		even
000A97E4                            Music8D:	incbin	"sound/music/Mus8D - FZ.bin"
000A9A30 00                         		even
000A9A30                            Music8E:	incbin	"sound/music/Mus8E - Sonic Got Through.bin"
000A9D66 00                         		even
000A9D66                            Music8F:	incbin	"sound/music/Mus8F - Game Over.bin"
000A9F12 00                         		even
000A9F12                            Music90:	incbin	"sound/music/Mus90 - Continue Screen.bin"
000AA120 00                         		even
000AA120                            Music91:	incbin	"sound/music/Mus91 - Credits.bin"
000AA404 00                         		even
000AA404                            Music92:	incbin	"sound/music/Mus92 - Drowning.bin"
000AAB34 00                         		even
000AAB34                            Music93:	incbin	"sound/music/Mus93 - Get Emerald.bin"
000AAC02                            		even
000AAC02                            Music94:	incbin	"sound/music/Mus94 - Final Boss Pinch.bin"
000AB070 00                         		even
000AB070                            Music95:		incbin	"sound/music/Mus95 - Seaside Front.bin"
000ABB66                            		even
000ABB66                            Music96:		incbin	"sound/music/Mus96 - Big Water.bin"
000AC6BC                            		even
000AC6BC                            Music97:		incbin	"sound/music/Mus97 - Granada Game Over.bin"
000AD9C2 00                         		even
000AD9C2                            Music98:		include	"sound/music/Mus98 - Options Theme.asm"
000AD9C2                            PasswordEntry_Header:
000AD9C2                            	smpsHeaderStartSong 3
000AD9C4 0603                       	smpsHeaderChan      $06, $03
000AD9C6 0105                       	smpsHeaderTempo     $01, $05
000AD9C8                            
000AD9CC 0000 0013                  	smpsHeaderFM        PasswordEntry_FM1,	$00, $13
000AD9D0 0000 F40B                  	smpsHeaderFM        PasswordEntry_FM2,	$F4, $0B
000AD9D4 0000 000F                  	smpsHeaderFM        PasswordEntry_FM3,	$00, $0F
000AD9D8 0000 000F                  	smpsHeaderFM        PasswordEntry_FM4,	$00, $0F
000AD9DC 0000 001D                  	smpsHeaderFM        PasswordEntry_FM5,	$00, $1D
000AD9F2                            
000AD9F2                            ; FM1 Data
000AD9F2                            PasswordEntry_FM1:
000AD9F2 EF00                       	smpsSetvoice        $00
000AD9F9                            
000AD9F9                            PasswordEntry_Jump00:
000AD9F9 CD30 CED0 D010 CE08 CD10+  	dc.b	nE6, $30, nF6, nG6, nG6, $10, nF6, $08, nE6, $10, nF6, $08
000ADA05 C930 CBCD CE10 CD08 CB10+  	dc.b	nC6, $30, nD6, nE6, nF6, $10, nE6, $08, nD6, $10, nE6, $08
000ADA11 C960 C830 C4C6 C210 C6C9+  	dc.b	nC6, $60, nB5, $30, nG5, nA5, nF5, $10, nA5, nC6, nB5, $30
000ADA1D C918 CB                    	dc.b	nC6, $18, nD6
000ADA20 F6FF D7                    	smpsJump            PasswordEntry_Jump00
000ADA23                            
000ADA23                            ; FM2 Data
000ADA23                            PasswordEntry_FM2:
000ADA23 EF01                       	smpsSetvoice        $01
000ADA25                            
000ADA25                            PasswordEntry_Jump03:
000ADA25 B118 1818 10AC 08B1 1818+  	dc.b	nC4, $18, $18, $18, $10, nG3, $08, nC4, $18, $18, $18, nB3
000ADA31 AEAE AEAE 10B5 08AE 1818+  	dc.b	nA3, nA3, nA3, nA3, $10, nE4, $08, nA3, $18, $18, $18, nG3
000ADA3D AAAA AAAA 1008 B518 1818+  	dc.b	nF3, nF3, nF3, nF3, $10, $08, nE4, $18, $18, $18, $10, $08
000ADA49 AC18 1818 1008 1818 AEB0   	dc.b	nG3, $18, $18, $18, $10, $08, $18, $18, nA3, nB3
000ADA53 F6FF D0                    	smpsJump            PasswordEntry_Jump03
000ADA56                            
000ADA56                            ; FM3 Data
000ADA56                            PasswordEntry_FM3:
000ADA56 E080                       	smpsPan             panLeft, $00
000ADA58 EF02                       	smpsSetvoice        $02
000ADA5A                            
000ADA5A                            PasswordEntry_Jump02:
000ADA5A C104 8014 C408 8010 C208+  	dc.b	nE5, $04, nRst, $14, nG5, $08, nRst, $10, nF5, $08, nRst, $10
000ADA66 C204 8014 C104 8014 C104+  	dc.b	nF5, $04, nRst, $14, nE5, $04, nRst, $14, nE5, $04, nRst, $0C
000ADA72 C204 8014 C21C 8004 C404+  	dc.b	nF5, $04, nRst, $14, nF5, $1C, nRst, $04, nG5, $04, nRst, $14
000ADA7E C408 8010 C204 8014 C204+  	dc.b	nG5, $08, nRst, $10, nF5, $04, nRst, $14, nF5, $04, nRst, $14
000ADA8A C108 8010 C104 800C C204+  	dc.b	nE5, $08, nRst, $10, nE5, $04, nRst, $0C, nF5, $04, nRst, $14
000ADA96 C21C 8004 C108 8010 C108+  	dc.b	nF5, $1C, nRst, $04, nE5, $08, nRst, $10, nE5, $08, nRst, $10
000ADAA2 BF08 8010 C20C 800C C408+  	dc.b	nD5, $08, nRst, $10, nF5, $0C, nRst, $0C, nG5, $08, nRst, $10
000ADAAE C408 8010 BF08 8010 BF0C+  	dc.b	nG5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $0C, nRst, $0C
000ADABA BA08 8010 BD0C 800C BD0C+  	dc.b	nA4, $08, nRst, $10, nC5, $0C, nRst, $0C, nC5, $0C, nRst, $0C
000ADAC6 BD0C 800C BF08 8010 BF08+  	dc.b	nC5, $0C, nRst, $0C, nD5, $08, nRst, $10, nD5, $08, nRst, $10
000ADAD2 BF08 8010 BF08 8010        	dc.b	nD5, $08, nRst, $10, nD5, $08, nRst, $10
000ADADA F6FF 7E                    	smpsJump            PasswordEntry_Jump02
000ADADD                            
000ADADD                            ; FM4 Data
000ADADD                            PasswordEntry_FM4:
000ADADD E040                       	smpsPan             panRight, $00
000ADADF EF02                       	smpsSetvoice        $02
000ADAE1                            
000ADAE1                            PasswordEntry_Jump01:
000ADAE1 C404 8014 C104 8014 BF04+  	dc.b	nG5, $04, nRst, $14, nE5, $04, nRst, $14, nD5, $04, nRst, $14
000ADAED BF04 8014 BD04 8014 BD04+  	dc.b	nD5, $04, nRst, $14, nC5, $04, nRst, $14, nC5, $04, nRst, $0C
000ADAF9 BF04 8014 BF18 8008 C104+  	dc.b	nD5, $04, nRst, $14, nD5, $18, nRst, $08, nE5, $04, nRst, $14
000ADB05 C104 8014 BF04 8014 BF04+  	dc.b	nE5, $04, nRst, $14, nD5, $04, nRst, $14, nD5, $04, nRst, $14
000ADB11 BD04 8014 BD04 800C BF04+  	dc.b	nC5, $04, nRst, $14, nC5, $04, nRst, $0C, nD5, $04, nRst, $14
000ADB1D BF1C 8004 C408 8010 C408+  	dc.b	nD5, $1C, nRst, $04, nG5, $08, nRst, $10, nG5, $08, nRst, $10
000ADB29 C208 8010 BF08 8010 BF08+  	dc.b	nF5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $08, nRst, $10
000ADB35 BF08 8010 BC08 8010 BC0C+  	dc.b	nD5, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $0C, nRst, $0C
000ADB41 BD08 8010 BA08 8010 BA08+  	dc.b	nC5, $08, nRst, $10, nA4, $08, nRst, $10, nA4, $08, nRst, $10
000ADB4D BA08 8010 BC08 8010 BC08+  	dc.b	nA4, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $08, nRst, $10
000ADB59 BC08 8010 BC08 8010        	dc.b	nB4, $08, nRst, $10, nB4, $08, nRst, $10
000ADB61 F6FF 7E                    	smpsJump            PasswordEntry_Jump01
000ADB64                            
000ADB64                            ; FM5 Data
000ADB64                            PasswordEntry_FM5:
000ADB64 EF00                       	smpsSetvoice        $00
000ADB66 E1FB                       	smpsAlterNote       $FB
000ADB68 800C                       	dc.b	nRst, $0C
000ADB6A F6FE 8D                    	smpsJump            PasswordEntry_Jump00
000ADB6D                            
000ADB6D                            ; PSG1 Data
000ADB6D                            PasswordEntry_PSG1:
000ADB6D C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
000ADB79 CD10 D038 C410 C908 CD10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nC6, $08, nE6, $10, nG6, $38
000ADB85 C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
000ADB91 CD10 D038 C410 C808 CB10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nB5, $08, nD6, $10, nG6, $38
000ADB9D C210 C608 C910 CE18 C908+  	dc.b	nF5, $10, nA5, $08, nC6, $10, nF6, $18, nC6, $08, nA5, $10
000ADBA9 C208 C410 C808 CB10 D018+  	dc.b	nF5, $08, nG5, $10, nB5, $08, nD6, $10, nG6, $18, nD6, $08
000ADBB5 C810 C408                  	dc.b	nB5, $10, nG5, $08
000ADBB9 F6FF B2                    	smpsJump            PasswordEntry_PSG1
000ADBBC                            
000ADBBC                            ; PSG2 Data
000ADBBC                            PasswordEntry_PSG2:
000ADBBC E1FF                       	smpsAlterNote       $FF
000ADBBE 800C                       	dc.b	nRst, $0C
000ADBC0 F6FF AB                    	smpsJump            PasswordEntry_PSG1
000ADBC3                            
000ADBC3                            ; PSG3 Data
000ADBC3                            PasswordEntry_PSG3:
000ADBC3 F502                       	smpsPSGvoice        fTone_02
000ADBC5 F3E7                       	smpsPSGform         $E7
000ADBC7 C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
000ADBD3 C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
000ADBDF C508 80C5 C508 C5          	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nAb5
000ADBE6 F503                       	smpsPSGvoice        fTone_03
000ADBE8 C5                         	dc.b	nAb5
000ADBE9 F6FF D8                    	smpsJump            PasswordEntry_PSG3
000ADBEC                            
000ADBEC                            ; DAC Data
000ADBEC                            PasswordEntry_DAC:
000ADBEC 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000ADBF8 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
000ADC00 F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_DAC
000ADC05 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000ADC11 0880 0881 8210 8208        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dSnare, $08
000ADC19                            
000ADC19                            PasswordEntry_Loop00:
000ADC19 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000ADC25 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
000ADC2D F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_Loop00
000ADC32 8118 8281 8210 8108 8108+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $08, nRst, $08
000ADC3E 8182 8182 8282 8889 898A   	dc.b	dKick, dSnare, dKick, dSnare, dSnare, dSnare, dHiTimpani, dMidTimpani, dMidTimpani, dLowTimpani
000ADC48 F6FF A2                    	smpsJump            PasswordEntry_DAC
000ADC4B                            
000ADC4B                            PasswordEntry_Voices:
000ADC4B                            ;	Voice $00
000ADC4B                            ;	$04
000ADC4B                            ;	$02, $01, $01, $00, 	$1F, $10, $1F, $12, 	$09, $03, $0B, $04
000ADC4B                            ;	$03, $00, $00, $05, 	$EF, $FF, $2F, $0F, 	$1C, $80, $19, $80
000ADC4B                            	smpsVcAlgorithm     $04
000ADC4B                            	smpsVcFeedback      $00
000ADC4B                            	smpsVcUnusedBits    $00
000ADC4B                            	smpsVcDetune        $00, $00, $00, $00
000ADC4B                            	smpsVcCoarseFreq    $00, $01, $01, $02
000ADC4B                            	smpsVcRateScale     $00, $00, $00, $00
000ADC4B                            	smpsVcAttackRate    $12, $1F, $10, $1F
000ADC4B                            	smpsVcAmpMod        $00, $00, $00, $00
000ADC4B                            	smpsVcDecayRate1    $04, $0B, $03, $09
000ADC4B                            	smpsVcDecayRate2    $05, $00, $00, $03
000ADC4B                            	smpsVcDecayLevel    $00, $02, $0F, $0E
000ADC4B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADC64                            
000ADC64                            ;	Voice $01
000ADC64                            ;	$39
000ADC64                            ;	$03, $61, $40, $00, 	$1F, $5F, $5F, $5F, 	$10, $11, $09, $09
000ADC64                            ;	$06, $00, $00, $00, 	$C8, $F8, $F8, $F8, 	$1E, $24, $20, $80
000ADC64                            	smpsVcAlgorithm     $01
000ADC64                            	smpsVcFeedback      $07
000ADC64                            	smpsVcUnusedBits    $00
000ADC64                            	smpsVcDetune        $00, $04, $06, $00
000ADC64                            	smpsVcCoarseFreq    $00, $00, $01, $03
000ADC64                            	smpsVcRateScale     $01, $01, $01, $00
000ADC64                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000ADC64                            	smpsVcAmpMod        $00, $00, $00, $00
000ADC64                            	smpsVcDecayRate1    $09, $09, $11, $10
000ADC64                            	smpsVcDecayRate2    $00, $00, $00, $06
000ADC64                            	smpsVcDecayLevel    $0F, $0F, $0F, $0C
000ADC64                            	smpsVcReleaseRate   $08, $08, $08, $08
000ADC7D                            
000ADC7D                            ;	Voice $02
000ADC7D                            ;	$2C
000ADC7D                            ;	$41, $00, $23, $00, 	$1F, $1F, $1F, $1F, 	$08, $0A, $0B, $0A
000ADC7D                            ;	$04, $05, $00, $05, 	$45, $56, $85, $86, 	$14, $82, $18, $82
000ADC7D                            	smpsVcAlgorithm     $04
000ADC7D                            	smpsVcFeedback      $05
000ADC7D                            	smpsVcUnusedBits    $00
000ADC7D                            	smpsVcDetune        $00, $02, $00, $04
000ADC7D                            	smpsVcCoarseFreq    $00, $03, $00, $01
000ADC7D                            	smpsVcRateScale     $00, $00, $00, $00
000ADC7D                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000ADC7D                            	smpsVcAmpMod        $00, $00, $00, $00
000ADC7D                            	smpsVcDecayRate1    $0A, $0B, $0A, $08
000ADC7D                            	smpsVcDecayRate2    $05, $00, $05, $04
000ADC7D                            	smpsVcDecayLevel    $08, $08, $05, $04
000ADC7D                            	smpsVcReleaseRate   $06, $05, $06, $05
000ADC96                            
000ADC96                            
000ADC96                            		even	
000ADC96                            Music99:		include	"sound/music/Mus99 - Toxic Landfill.asm"
000ADC96                            ToxicLandfill_Header:
000ADC96                            	smpsHeaderStartSong 1
000ADC98 0603                       	smpsHeaderChan      $06, $03
000ADC9A 0208                       	smpsHeaderTempo     $02, $08
000ADC9C                            
000ADCA0 0000 000A                  	smpsHeaderFM        ToxicLandfill_FM1,	$00, $0A
000ADCA4 0000 000A                  	smpsHeaderFM        ToxicLandfill_FM2,	$00, $0A	
000ADCA8 0000 0C0B                  	smpsHeaderFM        ToxicLandfill_FM3,	$0C, $0B
000ADCAC 0000 0C0B                  	smpsHeaderFM        ToxicLandfill_FM4,	$0C, $0B
000ADCB0 0000 0012                  	smpsHeaderFM        ToxicLandfill_FM5,	$00, $12
000ADCC6                            
000ADCC6                            ; DAC Data
000ADCC6                            ToxicLandfill_DAC:
000ADCC6 E0C0                       	smpsPan             panCenter, $00
000ADCC8 807F 7F22 8106 1803 0382+  	dc.b	nRst, $7F, $7F, $22, dKick, $06, $18, $03, $03, dSnare, $06, dKick
000ADCD4 8181 8281 0306 8281 0382+  	dc.b	dKick, dKick, dSnare, dKick, $03, $06, dSnare, dKick, $03, dSnare, dKick
000ADCDF                            
000ADCDF                            ToxicLandfill_Loop00:
000ADCDF 82                         	dc.b	dSnare
000ADCE0                            
000ADCE0                            ToxicLandfill_Loop01:
000ADCE0 82                         	dc.b	dSnare
000ADCE1                            
000ADCE1                            ToxicLandfill_Jump00:
000ADCE1 8106 8203 8106 0382 8181+  	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, dKick, dKick, $06, dSnare
000ADCED 0381 0603                  	dc.b	$03, dKick, $06, $03
000ADCF1 F700 03FF EA               	smpsLoop            $00, $03, ToxicLandfill_Loop00
000ADCF6 8282 8206 8103 8206 8103+  	dc.b	dSnare, dSnare, dSnare, $06, dKick, $03, dSnare, $06, dKick, $03, dSnare, dKick
000ADD02 0682 0381 8281 8281        	dc.b	$06, dSnare, $03, dKick, dSnare, dKick, dSnare, dKick
000ADD0A F701 02FF D2               	smpsLoop            $01, $02, ToxicLandfill_Loop01
000ADD0F                            
000ADD0F                            ToxicLandfill_Loop06:
000ADD0F 82                         	dc.b	dSnare
000ADD10                            
000ADD10                            ToxicLandfill_Loop02:
000ADD10 8181 8281                  	dc.b	dKick, dKick, dSnare, dKick
000ADD14 F700 06FF F8               	smpsLoop            $00, $06, ToxicLandfill_Loop02
000ADD19                            
000ADD19                            ToxicLandfill_Loop03:
000ADD19 8281 81                    	dc.b	dSnare, dKick, dKick
000ADD1C F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop03
000ADD21                            
000ADD21                            ToxicLandfill_Loop04:
000ADD21 8182 8181                  	dc.b	dKick, dSnare, dKick, dKick
000ADD25 F700 03FF F8               	smpsLoop            $00, $03, ToxicLandfill_Loop04
000ADD2A 8182 81                    	dc.b	dKick, dSnare, dKick
000ADD2D                            
000ADD2D                            ToxicLandfill_Loop05:
000ADD2D 8102 0182 03               	dc.b	dKick, $02, $01, dSnare, $03
000ADD32 F700 06FF F7               	smpsLoop            $00, $06, ToxicLandfill_Loop05
000ADD37 0303 03                    	dc.b	$03, $03, $03
000ADD3A F701 02FF D1               	smpsLoop            $01, $02, ToxicLandfill_Loop06
000ADD3F                            
000ADD3F                            ToxicLandfill_Loop08:
000ADD3F 03                         	dc.b	$03
000ADD40                            
000ADD40                            ToxicLandfill_Loop07:
000ADD40 8106 8203 8106 0382 06     	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, $06
000ADD49 F700 07FF F3               	smpsLoop            $00, $07, ToxicLandfill_Loop07
000ADD4E 8182 0381 8282 82          	dc.b	dKick, dSnare, $03, dKick, dSnare, dSnare, dSnare
000ADD55 F701 02FF E6               	smpsLoop            $01, $02, ToxicLandfill_Loop08
000ADD5A                            
000ADD5A                            ToxicLandfill_Loop0D:
000ADD5A 82                         	dc.b	dSnare
000ADD5B                            
000ADD5B                            ToxicLandfill_Loop09:
000ADD5B 8181 8281                  	dc.b	dKick, dKick, dSnare, dKick
000ADD5F F700 06FF F8               	smpsLoop            $00, $06, ToxicLandfill_Loop09
000ADD64                            
000ADD64                            ToxicLandfill_Loop0A:
000ADD64 8281 81                    	dc.b	dSnare, dKick, dKick
000ADD67 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop0A
000ADD6C                            
000ADD6C                            ToxicLandfill_Loop0B:
000ADD6C 8182 8181                  	dc.b	dKick, dSnare, dKick, dKick
000ADD70 F700 03FF F8               	smpsLoop            $00, $03, ToxicLandfill_Loop0B
000ADD75 8182 81                    	dc.b	dKick, dSnare, dKick
000ADD78                            
000ADD78                            ToxicLandfill_Loop0C:
000ADD78 8102 0182 03               	dc.b	dKick, $02, $01, dSnare, $03
000ADD7D F700 06FF F7               	smpsLoop            $00, $06, ToxicLandfill_Loop0C
000ADD82 0303 03                    	dc.b	$03, $03, $03
000ADD85 F701 02FF D1               	smpsLoop            $01, $02, ToxicLandfill_Loop0D
000ADD8A                            
000ADD8A                            ToxicLandfill_Loop0E:
000ADD8A 03                         	dc.b	$03
000ADD8B                            
000ADD8B                            ToxicLandfill_Loop0F:
000ADD8B 8106 8203 8106 0382 8181+  	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, dKick, dKick, $06, dSnare
000ADD97 0381 0603 82               	dc.b	$03, dKick, $06, $03, dSnare
000ADD9C F700 03FF EA               	smpsLoop            $00, $03, ToxicLandfill_Loop0E
000ADDA1 8282 0681 0382 0681 0382+  	dc.b	dSnare, dSnare, $06, dKick, $03, dSnare, $06, dKick, $03, dSnare, dKick, $06
000ADDAD 8203 8182 8182 8182        	dc.b	dSnare, $03, dKick, dSnare, dKick, dSnare, dKick, dSnare
000ADDB5 F701 02FF D2               	smpsLoop            $01, $02, ToxicLandfill_Loop0F
000ADDBA                            
000ADDBA                            ToxicLandfill_Loop10:
000ADDBA 8106 8203 8106 0382 06     	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, $06
000ADDC3 F700 07FF F3               	smpsLoop            $00, $07, ToxicLandfill_Loop10
000ADDC8 8182 0381 8282 8282        	dc.b	dKick, dSnare, $03, dKick, dSnare, dSnare, dSnare, dSnare
000ADDD0 F701 04FF E6               	smpsLoop            $01, $04, ToxicLandfill_Loop10
000ADDD5 F6FF 0A                    	smpsJump            ToxicLandfill_Jump00
000ADDD8                            
000ADDD8                            ; FM1 Data
000ADDD8                            ToxicLandfill_FM1:
000ADDD8 E0C0                       	smpsPan             panCenter, $00
000ADDDA EF00                       	smpsSetvoice        $00
000ADDDC 807F 7F76 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $76, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000ADDE8 AD02 AE01 AF02 B001        	dc.b	nAb3, $02, nA3, $01, nBb3, $02, nB3, $01
000ADDF0                            
000ADDF0                            ToxicLandfill_Loop44:
000ADDF0 AC09 0909 AA03 AC06 06AF+  	dc.b	nG3, $09, $09, $09, nF3, $03, nG3, $06, $06, nBb3, nG3, $09
000ADDFC 0909 AA03 AC06 06B1 AC09+  	dc.b	$09, $09, nF3, $03, nG3, $06, $06, nC4, nG3, $09, $09, $09
000ADE08 AA03 AC06 06AF A709 0909+  	dc.b	nF3, $03, nG3, $06, $06, nBb3, nD3, $09, $09, $09, nC3, $03
000ADE14 A706 06AA                  	dc.b	nD3, $06, $06, nF3
000ADE18 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop44
000ADE1D                            
000ADE1D                            ToxicLandfill_Loop46:
000ADE1D AC12 AA36 A902 A801 A702+  	dc.b	nG3, $12, nF3, $36, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000ADE29 A502 A401 A302 A201 A102+  	dc.b	nC3, $02, nB2, $01, nBb2, $02, nA2, $01, nAb2, $02, nG2, $01
000ADE35 9F02 9E01 9D02 9C01 9B02+  	dc.b	nFs2, $02, nF2, $01, nE2, $02, nEb2, $01, nD2, $02, nCs2, $01
000ADE41 AC12 AA2A 03A9 AAA9        	dc.b	nG3, $12, nF3, $2A, $03, nE3, nF3, nE3
000ADE49                            
000ADE49                            ToxicLandfill_Loop45:
000ADE49 AA02 A901                  	dc.b	nF3, $02, nE3, $01
000ADE4D F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop45
000ADE52 AA02 A5A1 AAA5 A1          	dc.b	nF3, $02, nC3, nAb2, nF3, nC3, nAb2
000ADE59 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop46
000ADE5E                            
000ADE5E                            ToxicLandfill_Loop47:
000ADE5E B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3
000ADE6A F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop47
000ADE6F                            
000ADE6F                            ToxicLandfill_Loop48:
000ADE6F B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000ADE7A F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop48
000ADE7F F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop47
000ADE84                            
000ADE84                            ToxicLandfill_Loop4A:
000ADE84 B812 B636 B502 B401 B302+  	dc.b	nG4, $12, nF4, $36, nE4, $02, nEb4, $01, nD4, $02, nCs4, $01
000ADE90 B102 B001 AF02 AE01 AD02+  	dc.b	nC4, $02, nB3, $01, nBb3, $02, nA3, $01, nAb3, $02, nG3, $01
000ADE9C AB02 AA01 A902 A801 A702+  	dc.b	nFs3, $02, nF3, $01, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000ADEA8 B812 B62A 03B5 B6B5        	dc.b	nG4, $12, nF4, $2A, $03, nE4, nF4, nE4
000ADEB0                            
000ADEB0                            ToxicLandfill_Loop49:
000ADEB0 B602 B501                  	dc.b	nF4, $02, nE4, $01
000ADEB4 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop49
000ADEB9 B602 B1AD B6B1 AD          	dc.b	nF4, $02, nC4, nAb3, nF4, nC4, nAb3
000ADEC0 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop4A
000ADEC5                            
000ADEC5                            ToxicLandfill_Loop4B:
000ADEC5 B809 0909 B603 B806 06BB+  	dc.b	nG4, $09, $09, $09, nF4, $03, nG4, $06, $06, nBb4, nG4, $09
000ADED1 0909 B603 B806 06BD B809+  	dc.b	$09, $09, nF4, $03, nG4, $06, $06, nC5, nG4, $09, $09, $09
000ADEDD B603 B806 06BB B309 0909+  	dc.b	nF4, $03, nG4, $06, $06, nBb4, nD4, $09, $09, $09, nC4, $03
000ADEE9 B306 06B6                  	dc.b	nD4, $06, $06, nF4
000ADEED F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop4B
000ADEF2                            
000ADEF2                            ToxicLandfill_Loop4C:
000ADEF2 BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000ADEFD F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop4C
000ADF02                            
000ADF02                            ToxicLandfill_Loop4D:
000ADF02 BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000ADF0D F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop4D
000ADF12 F701 04FF DC               	smpsLoop            $01, $04, ToxicLandfill_Loop4C
000ADF17 F6FE D7                    	smpsJump            ToxicLandfill_Loop44
000ADF1A                            
000ADF1A                            ; FM2 Data
000ADF1A                            ToxicLandfill_FM2:
000ADF1A E0C0                       	smpsPan             panCenter, $00
000ADF1C EF00                       	smpsSetvoice        $00
000ADF1E 807F 7F76 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $76, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000ADF2A AD02 AE01 AF02 B001        	dc.b	nAb3, $02, nA3, $01, nBb3, $02, nB3, $01
000ADF32                            
000ADF32                            ToxicLandfill_Loop3A:
000ADF32 B109 0909 AF03 B106 06B4+  	dc.b	nC4, $09, $09, $09, nBb3, $03, nC4, $06, $06, nEb4, nC4, $09
000ADF3E 0909 AF03 B106 06B6 B109+  	dc.b	$09, $09, nBb3, $03, nC4, $06, $06, nF4, nC4, $09, $09, $09
000ADF4A AF03 B106 06B4 AC09 0909+  	dc.b	nBb3, $03, nC4, $06, $06, nEb4, nG3, $09, $09, $09, nF3, $03
000ADF56 AC06 06AF                  	dc.b	nG3, $06, $06, nBb3
000ADF5A F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop3A
000ADF5F                            
000ADF5F                            ToxicLandfill_Loop3C:
000ADF5F B112 AF36 AE02 AD01 AC02+  	dc.b	nC4, $12, nBb3, $36, nA3, $02, nAb3, $01, nG3, $02, nFs3, $01
000ADF6B AA02 A901 A802 A701 A602+  	dc.b	nF3, $02, nE3, $01, nEb3, $02, nD3, $01, nCs3, $02, nC3, $01
000ADF77 A402 A301 A202 A101 A002+  	dc.b	nB2, $02, nBb2, $01, nA2, $02, nAb2, $01, nG2, $02, nFs2, $01
000ADF83 B112 AF2A 03AE AFAE        	dc.b	nC4, $12, nBb3, $2A, $03, nA3, nBb3, nA3
000ADF8B                            
000ADF8B                            ToxicLandfill_Loop3B:
000ADF8B AF02 AE01                  	dc.b	nBb3, $02, nA3, $01
000ADF8F F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop3B
000ADF94 AF02 AAA6 AFAA A6          	dc.b	nBb3, $02, nF3, nCs3, nBb3, nF3, nCs3
000ADF9B F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop3C
000ADFA0                            
000ADFA0                            ToxicLandfill_Loop3D:
000ADFA0 AC06 A7AA AB03 AC09 A706+  	dc.b	nG3, $06, nD3, nF3, nFs3, $03, nG3, $09, nD3, $06, nF3, nFs3
000ADFAC F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop3D
000ADFB1                            
000ADFB1                            ToxicLandfill_Loop3E:
000ADFB1 ACA5 A7AA 03AC 09A5 06A7+  	dc.b	nG3, nC3, nD3, nF3, $03, nG3, $09, nC3, $06, nD3, nF3
000ADFBC F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop3E
000ADFC1 F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop3D
000ADFC6                            
000ADFC6                            ToxicLandfill_Loop40:
000ADFC6 BD12 BB36 BA02 B901 B802+  	dc.b	nC5, $12, nBb4, $36, nA4, $02, nAb4, $01, nG4, $02, nFs4, $01
000ADFD2 B602 B501 B402 B301 B202+  	dc.b	nF4, $02, nE4, $01, nEb4, $02, nD4, $01, nCs4, $02, nC4, $01
000ADFDE B002 AF01 AE02 AD01 AC02+  	dc.b	nB3, $02, nBb3, $01, nA3, $02, nAb3, $01, nG3, $02, nFs3, $01
000ADFEA BD12 BB2A 03BA BBBA        	dc.b	nC5, $12, nBb4, $2A, $03, nA4, nBb4, nA4
000ADFF2                            
000ADFF2                            ToxicLandfill_Loop3F:
000ADFF2 BB02 BA01                  	dc.b	nBb4, $02, nA4, $01
000ADFF6 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop3F
000ADFFB BB02 B6B2 BBB6 B2          	dc.b	nBb4, $02, nF4, nCs4, nBb4, nF4, nCs4
000AE002 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop40
000AE007                            
000AE007                            ToxicLandfill_Loop41:
000AE007 BD09 0909 BB03 BD06 06C0+  	dc.b	nC5, $09, $09, $09, nBb4, $03, nC5, $06, $06, nEb5, nC5, $09
000AE013 0909 BB03 BD06 06C2 BD09+  	dc.b	$09, $09, nBb4, $03, nC5, $06, $06, nF5, nC5, $09, $09, $09
000AE01F BB03 BD06 06C0 B809 0909+  	dc.b	nBb4, $03, nC5, $06, $06, nEb5, nG4, $09, $09, $09, nF4, $03
000AE02B B806 06BB                  	dc.b	nG4, $06, $06, nBb4
000AE02F F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop41
000AE034 B8B3 B6B7 03B8 09B3 06B6+  	dc.b	nG4, nD4, nF4, nFs4, $03, nG4, $09, nD4, $06, nF4, nFs4, nG4
000AE040 B3B6 B703 8009 B306 B6B7+  	dc.b	nD4, nF4, nFs4, $03, nRst, $09, nD4, $06, nF4, nFs4, nG4, nC4
000AE04C B3B6 03B8 09B1 06B3 B6B8+  	dc.b	nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4, nG4, nC4, nD4
000AE058 B603 8009 B106 B3B6 B8B3+  	dc.b	nF4, $03, nRst, $09, nC4, $06, nD4, nF4, nG4, nD4, nF4, nFs4
000AE064 03B8 09B3 06B6 B7B8 B3B6+  	dc.b	$03, nG4, $09, nD4, $06, nF4, nFs4, nG4, nD4, nF4, nFs4, $03
000AE070 8009 B306 B6B7             	dc.b	nRst, $09, nD4, $06, nF4, nFs4
000AE076                            
000AE076                            ToxicLandfill_Loop42:
000AE076 B8B1 B3B6 03B8 09B1 06B3+  	dc.b	nG4, nC4, nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4
000AE081 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop42
000AE086                            
000AE086                            ToxicLandfill_Loop43:
000AE086 B8B3 B6B7 03B8 09B3 06B6+  	dc.b	nG4, nD4, nF4, nFs4, $03, nG4, $09, nD4, $06, nF4, nFs4
000AE091 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop43
000AE096 F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop42
000AE09B B8B1 B3B6 03B8 09B1 06B3+  	dc.b	nG4, nC4, nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4, nG4
000AE0A7 B1B3 B603 8009 B106 B3B6   	dc.b	nC4, nD4, nF4, $03, nRst, $09, nC4, $06, nD4, nF4
000AE0B1 F6FE 7F                    	smpsJump            ToxicLandfill_Loop3A
000AE0B4                            
000AE0B4                            ; FM3 Data
000AE0B4                            ToxicLandfill_FM3:
000AE0B4 E0C0                       	smpsPan             panCenter, $00
000AE0B6 EF01                       	smpsSetvoice        $01
000AE0B8                            
000AE0B8                            ToxicLandfill_Loop2D:
000AE0B8 9903 A580 9E80 9F80 A080+  	dc.b	nC2, $03, nC3, nRst, nF2, nRst, nFs2, nRst, nG2, nRst, nFs2, nRst
000AE0C4 9E80 9C9E 9C99 9C80 9E80+  	dc.b	nF2, nRst, nEb2, nF2, nEb2, nC2, nEb2, nRst, nF2, nRst, nEb2, nRst
000AE0D0 9E80 9F9E 9C9E 9C97 98     	dc.b	nF2, nRst, nFs2, nF2, nEb2, nF2, nEb2, nBb1, nB1
000AE0D9 F700 03FF DB               	smpsLoop            $00, $03, ToxicLandfill_Loop2D
000AE0DE 99A5 809E 809F 80A0 809F+  	dc.b	nC2, nC3, nRst, nF2, nRst, nFs2, nRst, nG2, nRst, nFs2, nRst, nF2
000AE0EA 809C 9E9C 999C 809E 809C+  	dc.b	nRst, nEb2, nF2, nEb2, nC2, nEb2, nRst, nF2, nRst, nEb2, nRst, nF2
000AE0F6 809F 9E9C 9D02 9E01 9F02+  	dc.b	nRst, nFs2, nF2, nEb2, nE2, $02, nF2, $01, nFs2, $02, nG2, $01
000AE102 A102 A201 A302 A401        	dc.b	nAb2, $02, nA2, $01, nBb2, $02, nB2, $01
000AE10A                            
000AE10A                            ToxicLandfill_Loop2E:
000AE10A A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AE116 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop2E
000AE11B A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nG2
000AE127 0909 0909 06A3             	dc.b	$09, $09, $09, $09, $06, nBb2
000AE12D F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop2E
000AE132                            
000AE132                            ToxicLandfill_Loop31:
000AE132 A503 9999 A5               	dc.b	nC3, $03, nC2, nC2, nC3
000AE137                            
000AE137                            ToxicLandfill_Loop2F:
000AE137 9999 A3                    	dc.b	nC2, nC2, nBb2
000AE13A F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop2F
000AE13F 99A3                       	dc.b	nC2, nBb2
000AE141                            
000AE141                            ToxicLandfill_Loop30:
000AE141 99A3 99                    	dc.b	nC2, nBb2, nC2
000AE144 F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop30
000AE149 99A3 A0A3 A4               	dc.b	nC2, nBb2, nG2, nBb2, nB2
000AE14E F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop31
000AE153                            
000AE153                            ToxicLandfill_Loop32:
000AE153 A506 06A0 A003 A309 A006+  	dc.b	nC3, $06, $06, nG2, nG2, $03, nBb2, $09, nG2, $06, nBb2, nB2
000AE15F F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop32
000AE164                            
000AE164                            ToxicLandfill_Loop33:
000AE164 A5A5 9E9E 03A0 0906 A3A4   	dc.b	nC3, nC3, nF2, nF2, $03, nG2, $09, $06, nBb2, nB2
000AE16E F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop33
000AE173 F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop32
000AE178                            
000AE178                            ToxicLandfill_Loop36:
000AE178 A503 9999 A5               	dc.b	nC3, $03, nC2, nC2, nC3
000AE17D                            
000AE17D                            ToxicLandfill_Loop34:
000AE17D 9999 A3                    	dc.b	nC2, nC2, nBb2
000AE180 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop34
000AE185 99A3                       	dc.b	nC2, nBb2
000AE187                            
000AE187                            ToxicLandfill_Loop35:
000AE187 99A3 99                    	dc.b	nC2, nBb2, nC2
000AE18A F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop35
000AE18F 99A3 A0A3 A4               	dc.b	nC2, nBb2, nG2, nBb2, nB2
000AE194 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop36
000AE199                            
000AE199                            ToxicLandfill_Loop37:
000AE199 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AE1A5 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop37
000AE1AA A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nG2
000AE1B6 0909 0909 06A3             	dc.b	$09, $09, $09, $09, $06, nBb2
000AE1BC F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop37
000AE1C1                            
000AE1C1                            ToxicLandfill_Loop38:
000AE1C1 A5A5 A0A0 03A3 09A0 06A3+  	dc.b	nC3, nC3, nG2, nG2, $03, nBb2, $09, nG2, $06, nBb2, nB2
000AE1CC F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop38
000AE1D1                            
000AE1D1                            ToxicLandfill_Loop39:
000AE1D1 A5A5 9E9E 03A0 0906 A3A4   	dc.b	nC3, nC3, nF2, nF2, $03, nG2, $09, $06, nBb2, nB2
000AE1DB F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop39
000AE1E0 F701 04FF DD               	smpsLoop            $01, $04, ToxicLandfill_Loop38
000AE1E5 F6FF 23                    	smpsJump            ToxicLandfill_Loop2E
000AE1E8                            
000AE1E8                            ; FM4 Data
000AE1E8                            ToxicLandfill_FM4:
000AE1E8 E0C0                       	smpsPan             panCenter, $00
000AE1EA EF01                       	smpsSetvoice        $01
000AE1EC                            
000AE1EC                            ToxicLandfill_Loop20:
000AE1EC 8D03 9980 9280 9380 9480+  	dc.b	nC1, $03, nC2, nRst, nF1, nRst, nFs1, nRst, nG1, nRst, nFs1, nRst
000AE1F8 9280 9092 908D 9080 9280+  	dc.b	nF1, nRst, nEb1, nF1, nEb1, nC1, nEb1, nRst, nF1, nRst, nEb1, nRst
000AE204 9280 9392 9092 908B 8C     	dc.b	nF1, nRst, nFs1, nF1, nEb1, nF1, nEb1, nBb0, nB0
000AE20D F700 03FF DB               	smpsLoop            $00, $03, ToxicLandfill_Loop20
000AE212 8D99 8092 8093 8094 8093+  	dc.b	nC1, nC2, nRst, nF1, nRst, nFs1, nRst, nG1, nRst, nFs1, nRst, nF1
000AE21E 8090 9290 8D90 8092 8090+  	dc.b	nRst, nEb1, nF1, nEb1, nC1, nEb1, nRst, nF1, nRst, nEb1, nRst, nF1
000AE22A 8093 9290 9293 0294 0195+  	dc.b	nRst, nFs1, nF1, nEb1, nF1, nFs1, $02, nG1, $01, nAb1, $02, nA1
000AE236 0197 0298 01               	dc.b	$01, nBb1, $02, nB1, $01
000AE23B                            
000AE23B                            ToxicLandfill_Loop21:
000AE23B 9906 9497 9803 9909 9406+  	dc.b	nC2, $06, nG1, nBb1, nB1, $03, nC2, $09, nG1, $06, nBb1, nB1
000AE247 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop21
000AE24C 9992 9497 0399 0992 0694+  	dc.b	nC2, nF1, nG1, nBb1, $03, nC2, $09, nF1, $06, nG1, nBb1, nG1
000AE258 0909 0909 0697             	dc.b	$09, $09, $09, $09, $06, nBb1
000AE25E F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop21
000AE263                            
000AE263                            ToxicLandfill_Loop24:
000AE263 9903 8D8D 99               	dc.b	nC2, $03, nC1, nC1, nC2
000AE268                            
000AE268                            ToxicLandfill_Loop22:
000AE268 8D8D 97                    	dc.b	nC1, nC1, nBb1
000AE26B F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop22
000AE270 8D97                       	dc.b	nC1, nBb1
000AE272                            
000AE272                            ToxicLandfill_Loop23:
000AE272 8D97 8D                    	dc.b	nC1, nBb1, nC1
000AE275 F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop23
000AE27A 8D97 9497 98               	dc.b	nC1, nBb1, nG1, nBb1, nB1
000AE27F F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop24
000AE284                            
000AE284                            ToxicLandfill_Loop25:
000AE284 9906 0694 9403 9709 9406+  	dc.b	nC2, $06, $06, nG1, nG1, $03, nBb1, $09, nG1, $06, nBb1, nB1
000AE290 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop25
000AE295                            
000AE295                            ToxicLandfill_Loop26:
000AE295 9999 9292 0394 0906 9798   	dc.b	nC2, nC2, nF1, nF1, $03, nG1, $09, $06, nBb1, nB1
000AE29F F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop26
000AE2A4 F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop25
000AE2A9                            
000AE2A9                            ToxicLandfill_Loop29:
000AE2A9 9903 8D8D 99               	dc.b	nC2, $03, nC1, nC1, nC2
000AE2AE                            
000AE2AE                            ToxicLandfill_Loop27:
000AE2AE 8D8D 97                    	dc.b	nC1, nC1, nBb1
000AE2B1 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop27
000AE2B6 8D97                       	dc.b	nC1, nBb1
000AE2B8                            
000AE2B8                            ToxicLandfill_Loop28:
000AE2B8 8D97 8D                    	dc.b	nC1, nBb1, nC1
000AE2BB F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop28
000AE2C0 8D97 9497 98               	dc.b	nC1, nBb1, nG1, nBb1, nB1
000AE2C5 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop29
000AE2CA                            
000AE2CA                            ToxicLandfill_Loop2A:
000AE2CA 9906 9497 9803 9909 9406+  	dc.b	nC2, $06, nG1, nBb1, nB1, $03, nC2, $09, nG1, $06, nBb1, nB1
000AE2D6 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop2A
000AE2DB 9992 9497 0399 0992 0694+  	dc.b	nC2, nF1, nG1, nBb1, $03, nC2, $09, nF1, $06, nG1, nBb1, nG1
000AE2E7 0909 0909 0697             	dc.b	$09, $09, $09, $09, $06, nBb1
000AE2ED F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop2A
000AE2F2                            
000AE2F2                            ToxicLandfill_Loop2B:
000AE2F2 9999 9494 0397 0994 0697+  	dc.b	nC2, nC2, nG1, nG1, $03, nBb1, $09, nG1, $06, nBb1, nB1
000AE2FD F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop2B
000AE302                            
000AE302                            ToxicLandfill_Loop2C:
000AE302 9999 9292 0394 0906 9798   	dc.b	nC2, nC2, nF1, nF1, $03, nG1, $09, $06, nBb1, nB1
000AE30C F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop2C
000AE311 F701 04FF DD               	smpsLoop            $01, $04, ToxicLandfill_Loop2B
000AE316 F6FF 23                    	smpsJump            ToxicLandfill_Loop21
000AE319                            
000AE319                            ; FM5 Data
000AE319                            ToxicLandfill_FM5:
000AE319 E0C0                       	smpsPan             panCenter, $00
000AE31B E6FA                       	smpsAlterVol			-$06		
000AE31D E102                       	smpsDetune			$02	
000AE31F EF00                       	smpsSetvoice        $00
000AE321 807F 7F78 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $78, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000AE32D AD02 AE01 AF               	dc.b	nAb3, $02, nA3, $01, nBb3
000AE332                            
000AE332                            ToxicLandfill_Jump01:
000AE332 E701 B0                    	dc.b	smpsNoAttack, $01, nB3
000AE335                            
000AE335                            ToxicLandfill_Loop11:
000AE335 AC09 0909 AA03 AC06 06AF+  	dc.b	nG3, $09, $09, $09, nF3, $03, nG3, $06, $06, nBb3, nG3, $09
000AE341 0909 AA03 AC06 06B1 AC09+  	dc.b	$09, $09, nF3, $03, nG3, $06, $06, nC4, nG3, $09, $09, $09
000AE34D AA03 AC06 06AF A709 0909+  	dc.b	nF3, $03, nG3, $06, $06, nBb3, nD3, $09, $09, $09, nC3, $03
000AE359 A706 06AA                  	dc.b	nD3, $06, $06, nF3
000AE35D F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop11
000AE362                            
000AE362                            ToxicLandfill_Loop13:
000AE362 AC12 AA36 A902 A801 A702+  	dc.b	nG3, $12, nF3, $36, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000AE36E A502 A401 A302 A201 A102+  	dc.b	nC3, $02, nB2, $01, nBb2, $02, nA2, $01, nAb2, $02, nG2, $01
000AE37A 9F02 9E01 9D02 9C01 9B02+  	dc.b	nFs2, $02, nF2, $01, nE2, $02, nEb2, $01, nD2, $02, nCs2, $01
000AE386 AC12 AA2A 03A9 AAA9        	dc.b	nG3, $12, nF3, $2A, $03, nE3, nF3, nE3
000AE38E                            
000AE38E                            ToxicLandfill_Loop12:
000AE38E AA02 A901                  	dc.b	nF3, $02, nE3, $01
000AE392 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop12
000AE397 AA02 A5A1 AAA5 A1          	dc.b	nF3, $02, nC3, nAb2, nF3, nC3, nAb2
000AE39E F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop13
000AE3A3                            
000AE3A3                            ToxicLandfill_Loop14:
000AE3A3 B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3
000AE3AF F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop14
000AE3B4                            
000AE3B4                            ToxicLandfill_Loop15:
000AE3B4 B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000AE3BF F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop15
000AE3C4 F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop14
000AE3C9                            
000AE3C9                            ToxicLandfill_Loop17:
000AE3C9 B812 B636 B502 B401 B302+  	dc.b	nG4, $12, nF4, $36, nE4, $02, nEb4, $01, nD4, $02, nCs4, $01
000AE3D5 B102 B001 AF02 AE01 AD02+  	dc.b	nC4, $02, nB3, $01, nBb3, $02, nA3, $01, nAb3, $02, nG3, $01
000AE3E1 AB02 AA01 A902 A801 A702+  	dc.b	nFs3, $02, nF3, $01, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000AE3ED B812 B62A 03B5 B6B5        	dc.b	nG4, $12, nF4, $2A, $03, nE4, nF4, nE4
000AE3F5                            
000AE3F5                            ToxicLandfill_Loop16:
000AE3F5 B602 B501                  	dc.b	nF4, $02, nE4, $01
000AE3F9 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop16
000AE3FE B602 B1AD B6B1 AD          	dc.b	nF4, $02, nC4, nAb3, nF4, nC4, nAb3
000AE405 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop17
000AE40A                            
000AE40A                            ToxicLandfill_Loop18:
000AE40A B809 0909 B603 B806 06BB+  	dc.b	nG4, $09, $09, $09, nF4, $03, nG4, $06, $06, nBb4, nG4, $09
000AE416 0909 B603 B806 06BD B809+  	dc.b	$09, $09, nF4, $03, nG4, $06, $06, nC5, nG4, $09, $09, $09
000AE422 B603 B806 06BB B309 0909+  	dc.b	nF4, $03, nG4, $06, $06, nBb4, nD4, $09, $09, $09, nC4, $03
000AE42E B306 06B6                  	dc.b	nD4, $06, $06, nF4
000AE432 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop18
000AE437                            
000AE437                            ToxicLandfill_Loop19:
000AE437 BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000AE442 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop19
000AE447                            
000AE447                            ToxicLandfill_Loop1A:
000AE447 BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000AE452 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1A
000AE457                            
000AE457                            ToxicLandfill_Loop1B:
000AE457 BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000AE462 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1B
000AE467 BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4, nC5
000AE473 B6B8 BB03 BD09 B606 B8BB+  	dc.b	nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4, $02, nRst
000AE47F EF02                       	smpsSetvoice        $02
000AE481 E1FE                       	smpsDetune			-$02
000AE483 E606                       	smpsAlterVol		$06
000AE485                            	
000AE485                            ToxicLandfill_Loop1C:
000AE485 B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3	
000AE491 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop1C
000AE496                            
000AE496                            ToxicLandfill_Loop1D:
000AE496 B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000AE4A1 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1D
000AE4A6                            
000AE4A6                            ToxicLandfill_Loop1E:
000AE4A6 BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000AE4B1 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1E
000AE4B6                            
000AE4B6                            ToxicLandfill_Loop1F:
000AE4B6 BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000AE4C1 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1F
000AE4C6 EF00                       	smpsSetvoice        $00
000AE4C8 E102                       	smpsDetune			$02
000AE4CA E6FA                       	smpsAlterVol		-$06	
000AE4CC F6FE 64                    	smpsJump            ToxicLandfill_Jump01
000AE4CF                            
000AE4CF                            ; PSG1 Data
000AE4CF                            ToxicLandfill_PSG1:
000AE4CF 807F 7F7F 03               	dc.b	nRst, $7F, $7F, $7F, $03
000AE4D4                            
000AE4D4                            ToxicLandfill_Jump04:
000AE4D4 80                         	dc.b	nRst
000AE4D5                            
000AE4D5                            ToxicLandfill_Loop57:
000AE4D5 60                         	dc.b	$60
000AE4D6 F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop57
000AE4DB                            
000AE4DB                            ToxicLandfill_Loop58:
000AE4DB A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AE4E7 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop58
000AE4EC                            
000AE4EC                            ToxicLandfill_Loop59:
000AE4EC A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2
000AE4F7 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop59
000AE4FC                            
000AE4FC                            ToxicLandfill_Loop5A:
000AE4FC A5A0 A3A4 03A5 09A0 06A3+  	dc.b	nC3, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AE507 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5A
000AE50C A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nC3
000AE518 9EA0 A303 A509 9E06 A0A3+  	dc.b	nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, $04, nRst
000AE524                            
000AE524                            ToxicLandfill_Loop5B:
000AE524 6E                         	dc.b	$6E
000AE525 F700 07FF FB               	smpsLoop            $00, $07, ToxicLandfill_Loop5B
000AE52A                            
000AE52A                            ToxicLandfill_Loop5C:
000AE52A A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AE536 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop5C
000AE53B                            
000AE53B                            ToxicLandfill_Loop5D:
000AE53B A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2
000AE546 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5D
000AE54B F701 03FF DB               	smpsLoop            $01, $03, ToxicLandfill_Loop5C
000AE550                            
000AE550                            ToxicLandfill_Loop5E:
000AE550 A5A0 A3A4 03A5 09A0 06A3+  	dc.b	nC3, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AE55B F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5E
000AE560 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nC3
000AE56C 9EA0 A303 A509 9E06 A0A3+  	dc.b	nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, $05, nRst
000AE578 01                         	dc.b	$01
000AE579 F6FF 59                    	smpsJump            ToxicLandfill_Jump04
000AE57C                            
000AE57C                            ; PSG2 Data
000AE57C                            ToxicLandfill_PSG2:
000AE57C 807F 7F7F 03               	dc.b	nRst, $7F, $7F, $7F, $03
000AE581                            
000AE581                            ToxicLandfill_Jump03:
000AE581 80                         	dc.b	nRst
000AE582                            
000AE582                            ToxicLandfill_Loop50:
000AE582 60                         	dc.b	$60
000AE583 F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop50
000AE588 A006 9B9E 9F03 A009 9B06+  	dc.b	nG2, $06, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000AE594 A09B 9E9F 03A0 0880 019B+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $08, nRst, $01, nD2, $06, nF2
000AE5A0 9FA0 999B 9E03 A009 9906+  	dc.b	nFs2, nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000AE5AC A099 9B9E 03A0 0880 0199+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2
000AE5B8 9E                         	dc.b	nF2
000AE5B9                            
000AE5B9                            ToxicLandfill_Loop51:
000AE5B9 A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000AE5C4 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop51
000AE5C9 A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, nG2
000AE5D5 999B 9E03 A008 8001 9906+  	dc.b	nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2, nF2
000AE5E1 0580                       	dc.b	$05, nRst
000AE5E3                            
000AE5E3                            ToxicLandfill_Loop52:
000AE5E3 60                         	dc.b	$60
000AE5E4 F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop52
000AE5E9 01                         	dc.b	$01
000AE5EA                            
000AE5EA                            ToxicLandfill_Loop53:
000AE5EA A006 9B9E 9F03 A009 9B06+  	dc.b	nG2, $06, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000AE5F6 A09B 9E9F 03A0 0880 019B+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $08, nRst, $01, nD2, $06, nF2
000AE602 9FA0 999B 9E03 A009 9906+  	dc.b	nFs2, nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000AE60E A099 9B9E 03A0 0880 0199+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2
000AE61A 9E                         	dc.b	nF2
000AE61B F700 02FF CB               	smpsLoop            $00, $02, ToxicLandfill_Loop53
000AE620                            
000AE620                            ToxicLandfill_Loop54:
000AE620 A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000AE62B F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop54
000AE630                            
000AE630                            ToxicLandfill_Loop55:
000AE630 A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000AE63B F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop55
000AE640                            
000AE640                            ToxicLandfill_Loop56:
000AE640 A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000AE64B F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop56
000AE650 A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, nG2
000AE65C 999B 9E03 A009 9906 9B9E+  	dc.b	nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, $05, nRst
000AE668 01                         	dc.b	$01
000AE669 F6FF 16                    	smpsJump            ToxicLandfill_Jump03
000AE66C                            
000AE66C                            ; PSG3 Data
000AE66C                            ToxicLandfill_PSG3:
000AE66C F3E7                       	smpsPSGform         $E7
000AE66E 807F 41C6 0C0C 0C0C        	dc.b	nRst, $7F, $41, nMaxPSG, $0C, $0C, $0C, $0C
000AE676                            
000AE676                            ToxicLandfill_Loop4E:
000AE676 0C0C 0603 03               	dc.b	$0C, $0C, $06, $03, $03
000AE67B F501                       	smpsPSGvoice        fTone_01
000AE67D 0C                         	dc.b	$0C
000AE67E F502                       	smpsPSGvoice        fTone_02
000AE680 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop4E
000AE685 0603 03                    	dc.b	$06, $03, $03
000AE688 F501                       	smpsPSGvoice        fTone_01
000AE68A 06                         	dc.b	$06
000AE68B F502                       	smpsPSGvoice        fTone_02
000AE68D 03                         	dc.b	$03
000AE68E F501                       	smpsPSGvoice        fTone_01
000AE690 0906 0606                  	dc.b	$09, $06, $06, $06
000AE694                            
000AE694                            ToxicLandfill_Jump02:
000AE694 E77F E77F E77F E715        	dc.b	smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $15
000AE69C F502                       	smpsPSGvoice        fTone_02
000AE69E C618 1818                  	dc.b	nMaxPSG, $18, $18, $18
000AE6A2 F501                       	smpsPSGvoice        fTone_01
000AE6A4 18                         	dc.b	$18
000AE6A5 F502                       	smpsPSGvoice        fTone_02
000AE6A7 1806                       	dc.b	$18, $06
000AE6A9 F501                       	smpsPSGvoice        fTone_01
000AE6AB 0909 0909 0618             	dc.b	$09, $09, $09, $09, $06, $18
000AE6B1 F502                       	smpsPSGvoice        fTone_02
000AE6B3 1818 18                    	dc.b	$18, $18, $18
000AE6B6 F501                       	smpsPSGvoice        fTone_01
000AE6B8 18                         	dc.b	$18
000AE6B9 F502                       	smpsPSGvoice        fTone_02
000AE6BB 1806                       	dc.b	$18, $06
000AE6BD F501                       	smpsPSGvoice        fTone_01
000AE6BF 0909 0909 067F E77F E77F+  	dc.b	$09, $09, $09, $09, $06, $7F, smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $1B
000AE6CB F502                       	smpsPSGvoice        fTone_02
000AE6CD 1818 18                    	dc.b	$18, $18, $18
000AE6D0 F501                       	smpsPSGvoice        fTone_01
000AE6D2 18                         	dc.b	$18
000AE6D3 F502                       	smpsPSGvoice        fTone_02
000AE6D5 1806                       	dc.b	$18, $06
000AE6D7 F501                       	smpsPSGvoice        fTone_01
000AE6D9 0909 0909 0618             	dc.b	$09, $09, $09, $09, $06, $18
000AE6DF F502                       	smpsPSGvoice        fTone_02
000AE6E1 1818 18                    	dc.b	$18, $18, $18
000AE6E4 F501                       	smpsPSGvoice        fTone_01
000AE6E6 18                         	dc.b	$18
000AE6E7 F502                       	smpsPSGvoice        fTone_02
000AE6E9 1806                       	dc.b	$18, $06
000AE6EB F501                       	smpsPSGvoice        fTone_01
000AE6ED 0909 0909 06               	dc.b	$09, $09, $09, $09, $06
000AE6F2                            
000AE6F2                            ToxicLandfill_Loop4F:
000AE6F2 59E7                       	dc.b	$59, smpsNoAttack
000AE6F4 F700 0CFF FA               	smpsLoop            $00, $0C, ToxicLandfill_Loop4F
000AE6F9 5A                         	dc.b	$5A
000AE6FA F6FF 98                    	smpsJump            ToxicLandfill_Jump02
000AE6FD                            
000AE6FD                            
000AE6FD                            ToxicLandfill_Voices:
000AE6FD                            ;	Voice $00
000AE6FD                            ;	$29
000AE6FD                            ;	$33, $02, $02, $01, 	$1F, $1F, $1F, $19, 	$00, $02, $00, $0B
000AE6FD                            ;	$03, $02, $00, $03, 	$0A, $1A, $0A, $1A, 	$1A, $1D, $20, $05
000AE6FD                            	smpsVcAlgorithm     $01
000AE6FD                            	smpsVcFeedback      $05
000AE6FD                            	smpsVcUnusedBits    $00
000AE6FD                            	smpsVcDetune        $00, $00, $00, $03
000AE6FD                            	smpsVcCoarseFreq    $01, $02, $02, $03
000AE6FD                            	smpsVcRateScale     $00, $00, $00, $00
000AE6FD                            	smpsVcAttackRate    $19, $1F, $1F, $1F
000AE6FD                            	smpsVcAmpMod        $00, $00, $00, $00
000AE6FD                            	smpsVcDecayRate1    $0B, $00, $02, $00
000AE6FD                            	smpsVcDecayRate2    $03, $00, $02, $03
000AE6FD                            	smpsVcDecayLevel    $01, $00, $01, $00
000AE6FD                            	smpsVcReleaseRate   $0A, $0A, $0A, $0A
000AE716                            	
000AE716                            ;	Voice $01
000AE716                            ;	$18
000AE716                            ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
000AE716                            ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$32, $22, $14, $00
000AE716                            	smpsVcAlgorithm     $00
000AE716                            	smpsVcFeedback      $03
000AE716                            	smpsVcUnusedBits    $00
000AE716                            	smpsVcDetune        $03, $03, $03, $03
000AE716                            	smpsVcCoarseFreq    $01, $00, $00, $07
000AE716                            	smpsVcRateScale     $02, $00, $03, $02
000AE716                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
000AE716                            	smpsVcAmpMod        $00, $00, $00, $00
000AE716                            	smpsVcDecayRate1    $01, $04, $06, $0D
000AE716                            	smpsVcDecayRate2    $05, $03, $0A, $08
000AE716                            	smpsVcDecayLevel    $02, $03, $0B, $0B
000AE716                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AE72F                            
000AE72F                            ;	Voice $02
000AE72F                            ;	$2C
000AE72F                            ;	$72, $78, $34, $34, 	$1F, $12, $1F, $12, 	$00, $0A, $00, $0A
000AE72F                            ;	$00, $00, $00, $00, 	$00, $16, $00, $16, 	$16, $00, $17, $00
000AE72F                            	smpsVcAlgorithm     $04
000AE72F                            	smpsVcFeedback      $05
000AE72F                            	smpsVcUnusedBits    $00
000AE72F                            	smpsVcDetune        $03, $03, $07, $07
000AE72F                            	smpsVcCoarseFreq    $04, $04, $08, $02
000AE72F                            	smpsVcRateScale     $00, $00, $00, $00
000AE72F                            	smpsVcAttackRate    $12, $1F, $12, $1F
000AE72F                            	smpsVcAmpMod        $00, $00, $00, $00
000AE72F                            	smpsVcDecayRate1    $0A, $00, $0A, $00
000AE72F                            	smpsVcDecayRate2    $00, $00, $00, $00
000AE72F                            	smpsVcDecayLevel    $01, $00, $01, $00
000AE72F                            	smpsVcReleaseRate   $06, $00, $06, $00
000AE748                            		even			
000AE748                            Music9A:		include	"sound/music/Mus9A - RRZ2.asm"
000AE748                            RRZ2_Header:
000AE748                            	smpsHeaderStartSong 1
000AE74A 0603                       	smpsHeaderChan      $06, $03
000AE74C 0104                       	smpsHeaderTempo     $01, $04
000AE74E                            
000AE752 0000 0010                  	smpsHeaderFM        RRZ2_FM1,	$00, $10
000AE756 0000 0C0D                  	smpsHeaderFM        RRZ2_FM2,	$0C, $0D
000AE75A 0000 0019                  	smpsHeaderFM        RRZ2_FM3,	$00, $19
000AE75E 0000 0019                  	smpsHeaderFM        RRZ2_FM4,	$00, $19
000AE762 0000 0019                  	smpsHeaderFM        RRZ2_FM5,	$00, $19
000AE778                            
000AE778                            ; FM1 Data
000AE778                            RRZ2_FM1:
000AE778 E0C0                       	smpsPan             panCenter, $00
000AE77F EF03                       	smpsSetvoice        $03
000AE781 B160 BD18 B8BB 12B4 AF0C+  	dc.b	nC4, $60, nC5, $18, nG4, nBb4, $12, nEb4, nBb3, $0C, nC4, $60
000AE78D BD18 B8BB 12B4 C00C B160+  	dc.b	nC5, $18, nG4, nBb4, $12, nEb4, nEb5, $0C, nC4, $60, $18, nG4
000AE799 BD12 C0C4 0C30 C2C0 B804+  	dc.b	nC5, $12, nEb5, nG5, $0C, $30, nF5, nEb5, nG4, $04, nF4, nEb4
000AE7A5 B6B4 B3B4 B3B1 AFAC AFB1+  	dc.b	nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3, nG3, nBb3, nC4, $60, nRst
000AE7B1 8080                       	dc.b	nRst, nRst
000AE7B3 EF00                       	smpsSetvoice        $00
000AE7B5 B848 0CB1 B430 0CB3 B4BB+  	dc.b	nG4, $48, $0C, nC4, nEb4, $30, $0C, nD4, nEb4, nBb4, nA4, $30
000AE7C1 B8E7 B82E 8032 B860 B130+  	dc.b	nG4, smpsNoAttack, nG4, $2E, nRst, $32, nG4, $60, nC4, $30, $18, nG4
000AE7CD 0CB4 BB30 BDBA 60B8 30B1+  	dc.b	$0C, nEb4, nBb4, $30, nC5, nA4, $60, nG4, $30, nC4, nEb4, $18
000AE7D9 B3AF AE0C AFB1 30B8 E7B8+  	dc.b	nD4, nBb3, nA3, $0C, nBb3, nC4, $30, nG4, smpsNoAttack, nG4, $2E, nRst
000AE7E5 32B4 600C B3B4 B8BB 18BA+  	dc.b	$32, nEb4, $60, $0C, nD4, nEb4, nG4, nBb4, $18, nA4, $0C, nF4
000AE7F1 B818 B630 BB12 BA06 E760+  	dc.b	nG4, $18, nF4, $30, nBb4, $12, nA4, $06, smpsNoAttack, $60, nA4, $60
000AE7FD C918 C4C7 14C6 10BD 0CC0+  	dc.b	nC6, $18, nG5, nBb5, $14, nA5, $10, nC5, $0C, nEb5, $2E, nRst
000AE809 3280 60                    	dc.b	$32, nRst, $60
000AE80C EF05                       	smpsSetvoice        $05
000AE80E E9F4                       	smpsAlterPitch      $F4
000AE810 B930 BDB4 60B7 30AF B260+  	dc.b	nAb4, $30, nC5, nEb4, $60, nFs4, $30, nBb3, nCs4, $60, nAb4, $30
000AE81C B4B9 C0C3 B7E7 B760        	dc.b	nEb4, nAb4, nEb5, nFs5, nFs4, smpsNoAttack, nFs4, $60
000AE824 E90C                       	smpsAlterPitch      $0C
000AE826 B160 A5B1 30AC B860 B430+  	dc.b	nC4, $60, nC3, nC4, $30, nG3, nG4, $60, nEb4, $30, nBb4, nG4
000AE832 60B1 30AC B8B6 B460 B630+  	dc.b	$60, nC4, $30, nG3, nG4, nF4, nEb4, $60, nF4, $30, nD4, nG4
000AE83E 60E7 30C0 18BF             	dc.b	$60, smpsNoAttack, $30, nEb5, $18, nD5
000AE844 F6FF 32                    	smpsJump            RRZ2_FM1
000AE847                            
000AE847                            ; FM2 Data
000AE847                            RRZ2_FM2:
000AE847 E0C0                       	smpsPan             panCenter, $00
000AE84E EF01                       	smpsSetvoice        $01
000AE850                            
000AE850                            RRZ2_Jump02:
000AE850 9960 E748 0C9B 9C60 E79C+  	dc.b	nC2, $60, smpsNoAttack, $48, $0C, nD2, nEb2, $60, smpsNoAttack, nEb2, nF2, nF2
000AE85C 480C 9FA0 6030 049E 9C9E+  	dc.b	$48, $0C, nFs2, nG2, $60, $30, $04, nF2, nEb2, nF2, nEb2, nD2
000AE868 9C9B 9997 9497 9908 0494+  	dc.b	nEb2, nD2, nC2, nBb1, nG1, nBb1, nC2, $08, $04, nG1, $0C, nBb1
000AE874 9908 0480 3080 0899 0480+  	dc.b	nC2, $08, $04, nRst, $30, nRst, $08, nC2, $04, nRst, $0C, nC2
000AE880 8097 0480 0897 8004 970C+  	dc.b	nRst, nBb1, $04, nRst, $08, nBb1, nRst, $04, nBb1, $0C, nG1, $08
000AE88C 9704 9908 0494 0C97 9908+  	dc.b	nBb1, $04, nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst
000AE898 3080 0899 0480 0C99 8097+  	dc.b	$30, nRst, $08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst
000AE8A4 0897 8004 9480 9410        	dc.b	$08, nBb1, nRst, $04, nG1, nRst, nG1, $10
000AE8AC                            
000AE8AC                            RRZ2_Loop07:
000AE8AC 9908 0494 0C97 9908 0480+  	dc.b	nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst, $30, nRst
000AE8B8 0899 0480 0C99 8097 0480+  	dc.b	$08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst, $08, nBb1
000AE8C4 8004 970C 9408 9704        	dc.b	nRst, $04, nBb1, $0C, nG1, $08, nBb1, $04
000AE8CC F700 08FF DC               	smpsLoop            $00, $08, RRZ2_Loop07
000AE8D1                            
000AE8D1                            RRZ2_Loop08:
000AE8D1 9908 0494 0C97 9908 0480+  	dc.b	nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst, $30, nRst
000AE8DD 0899 0480 0C99 8097 0480+  	dc.b	$08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst, $08, nBb1
000AE8E9 8004 970C 9408 9704        	dc.b	nRst, $04, nBb1, $0C, nG1, $08, nBb1, $04
000AE8F1 F700 02FF DC               	smpsLoop            $00, $02, RRZ2_Loop08
000AE8F6 9508 9C04 A108 9C04 9508+  	dc.b	nAb1, $08, nEb2, $04, nAb2, $08, nEb2, $04, nAb1, $08, $04, nRst
000AE902 0895 2680 0A95 04A1 1680+  	dc.b	$08, nAb1, $26, nRst, $0A, nAb1, $04, nAb2, $16, nRst, $0E, nAb2
000AE90E 049C A1A6 0CA5 A19C 08A1+  	dc.b	$04, nEb2, nAb2, nCs3, $0C, nC3, nAb2, nEb2, $08, nAb2, $04, nFs1
000AE91A 089A 049F 089A 0493 0804+  	dc.b	$08, nCs2, $04, nFs2, $08, nCs2, $04, nFs1, $08, $04, nRst, $08
000AE926 9304 2280 0A93 049F 8093+  	dc.b	nFs1, $04, $22, nRst, $0A, nFs1, $04, nFs2, nRst, nFs1, nRst, $08
000AE932 9304 0C92 0893 0480 0893+  	dc.b	nFs1, $04, $0C, nF1, $08, nFs1, $04, nRst, $08, nFs1, $04, nFs1
000AE93E 9A9F A408 A304 A408 A304+  	dc.b	nCs2, nFs2, nB2, $08, nBb2, $04, nB2, $08, nBb2, $04, nAb1, $08
000AE94A 9C04 A108 9C04 9508 0480+  	dc.b	nEb2, $04, nAb2, $08, nEb2, $04, nAb1, $08, $04, nRst, $08, nAb1
000AE956 2680 0A95 04A1 1680 0EA1+  	dc.b	$26, nRst, $0A, nAb1, $04, nAb2, $16, nRst, $0E, nAb2, $04, nEb2
000AE962 A1A6 A5A6 ADA8 A39F 9E9F+  	dc.b	nAb2, nCs3, nC3, nCs3, nAb3, nEb3, nBb2, nFs2, nF2, nFs2, nEb2, nBb2
000AE96E 9C93 089A 049F 089A 0493+  	dc.b	nEb2, nFs1, $08, nCs2, $04, nFs2, $08, nCs2, $04, nFs1, $08, $04
000AE97A 8008 9304 2280 0A93 049F+  	dc.b	nRst, $08, nFs1, $04, $22, nRst, $0A, nFs1, $04, nFs2, nRst, nFs1
000AE986 8008 9304 0C92 0893 0480+  	dc.b	nRst, $08, nFs1, $04, $0C, nF1, $08, nFs1, $04, nRst, $08, nFs1
000AE992 0493 9A9F A408 A304 A408+  	dc.b	$04, nFs1, nCs2, nFs2, nB2, $08, nBb2, $04, nB2, $08, nBb2, $04
000AE99E 8D08 048D 8008 8D0C 8F08+  	dc.b	nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04
000AE9AA 8008 8D0C 0408 8F04 900C+  	dc.b	nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08
000AE9B6 048D 8008 8D0C 8F08 9004+  	dc.b	$04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08
000AE9C2 8D0C 0408 8F04 900C 8D08+  	dc.b	nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1
000AE9CE 8008 8D0C 8F08 9004 8008+  	dc.b	nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C
000AE9DA 0408 8F04 900C 8D08 048D+  	dc.b	$04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08
000AE9E6 8D0C 8F08 9004 8008 8D0C+  	dc.b	nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08
000AE9F2 8F04 900C 8D08 048D 8008+  	dc.b	nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C
000AE9FE 8F08 9004 8008 8D0C 0408+  	dc.b	nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04
000AEA0A 900C 8D08 048D 8008 8D0C+  	dc.b	nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08
000AEA16 9004 8008 8D0C 0408 8F04+  	dc.b	nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C
000AEA22 8D08 048D 8008 8D0C 8F08+  	dc.b	nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04
000AEA2E 8008 8D0C 0408 8F04 900C+  	dc.b	nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08
000AEA3A 048D 8008 8D0C 8F08 9004+  	dc.b	$04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08
000AEA46 8D0C 0408 8F04 900C 8D08+  	dc.b	nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1
000AEA52 8008 8D0C 8F08 9004 8008+  	dc.b	nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C
000AEA5E 0408 8F04 900C 8D08 048D+  	dc.b	$04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08
000AEA6A 8D0C 8F08 9004 8008 8D0C+  	dc.b	nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08
000AEA76 8F04 900C 8D08 048D 8008+  	dc.b	nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C
000AEA82 8F08 9004 8008 8D0C 0408+  	dc.b	nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04
000AEA8E 900C 8D08 048D 8008 8D0C+  	dc.b	nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08
000AEA9A 9004 940C 8094 18          	dc.b	nEb1, $04, nG1, $0C, nRst, nG1, $18
000AEAA1 F6FD AD                    	smpsJump            RRZ2_Jump02
000AEAA4                            
000AEAA4                            ; FM3 Data
000AEAA4                            RRZ2_FM3:
000AEAA4 E080                       	smpsPan             panLeft, $00
000AEAAB                            
000AEAAB                            RRZ2_Jump01:
000AEAAB EF02                       	smpsSetvoice        $02
000AEAAD                            
000AEAAD                            RRZ2_Loop05:
000AEAAD B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000AEAB9 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000AEAC5 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000AEAD1 8008 B104 AF08 B104 8008+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04
000AEADD ACAF B1B8 0810             	dc.b	nG3, nBb3, nC4, nG4, $08, $10
000AEAE3 F700 03FF C6               	smpsLoop            $00, $03, RRZ2_Loop05
000AEAE8 B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000AEAF4 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000AEB00 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000AEB0C 8008 B104 AF08 B104 B8B6+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nG4, nF4, nG4, nF4
000AEB18 B4B6 B4B3 B4B3 B1AF        	dc.b	nEb4, nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3
000AEB20                            
000AEB20                            RRZ2_Loop06:
000AEB20 AC0C B8AC 08B6 0CAC 04B4+  	dc.b	nG3, $0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3
000AEB2C 08B3 0CAC 04B4 8008 AC04+  	dc.b	$08, nD4, $0C, nG3, $04, nEb4, nRst, $08, nG3, $04, nRst, $08
000AEB38 B1B3 04B4 08B8 0480 08AC+  	dc.b	nC4, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nG3, $04, nC4
000AEB44 08B3 04B4 08B8 0480 08BB+  	dc.b	$08, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nBb4, $10, nG3
000AEB50 0CB8 AC08 B60C AC04 B40C+  	dc.b	$0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3, $08
000AEB5C B30C AC04 B480 08B1 AC04+  	dc.b	nD4, $0C, nG3, $04, nEb4, nRst, $08, nC4, nG3, $04, nG4, $08
000AEB68 B604 B408 B304 8008 B404+  	dc.b	nF4, $04, nEb4, $08, nD4, $04, nRst, $08, nEb4, $04, nF4, $08
000AEB74 B404 B680 08B8 BB04 B880+  	dc.b	nEb4, $04, nF4, nRst, $08, nG4, nBb4, $04, nG4, nRst, $08
000AEB7F F700 05FF 9D               	smpsLoop            $00, $05, RRZ2_Loop06
000AEB84 AC0C B8AC 08B6 0CAC 04B4+  	dc.b	nG3, $0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3
000AEB90 08B3 0CAC 04B4 8008 AC04+  	dc.b	$08, nD4, $0C, nG3, $04, nEb4, nRst, $08, nG3, $04, nRst, $08
000AEB9C B1B3 04B4 08B8 0480 08AC+  	dc.b	nC4, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nG3, $04, nC4
000AEBA8 08B3 04B4 08B8 0480 08BB+  	dc.b	$08, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nBb4, $10, nG3
000AEBB4 0CB8 AC08 B60C AC04 B40C+  	dc.b	$0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3, $08
000AEBC0 B30C AC04 B480 08B1 AC04+  	dc.b	nD4, $0C, nG3, $04, nEb4, nRst, $08, nC4, nG3, $04, nG4, $08
000AEBCC B604 B408 B304 8008 B404+  	dc.b	nF4, $04, nEb4, $08, nD4, $04, nRst, $08, nEb4, $04, nF4, $08
000AEBD8 B404 B680 08B8 BB04 B880+  	dc.b	nEb4, $04, nF4, nRst, $08, nG4, nBb4, $04, nG4, nRst, $08
000AEBE3 EF05                       	smpsSetvoice        $05
000AEBE5 8060 8018 BD04 B9B4 B9B4+  	dc.b	nRst, $60, nRst, $18, nC5, $04, nAb4, nEb4, nAb4, nEb4, nC4, nEb4
000AEBF1 B1AD B1AD A8A1 1880 60B7+  	dc.b	nC4, nAb3, nC4, nAb3, nEb3, nAb2, $18, nRst, $60, nFs4, $04, nCs4
000AEBFD AFAB AFB2 B7AF ABA6 ABAF+  	dc.b	nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3, nBb3, nFs3, nCs3
000AEC09 A39F 2480 6080 18BD 04B9+  	dc.b	nBb2, nFs2, $24, nRst, $60, nRst, $18, nC5, $04, nAb4, nEb4, nAb4
000AEC15 B4B1 B4B1 ADB1 ADA8 A118+  	dc.b	nEb4, nC4, nEb4, nC4, nAb3, nC4, nAb3, nEb3, nAb2, $18, nRst, $60
000AEC21 B704 B2AF ABAF B2B7 AFAB+  	dc.b	nFs4, $04, nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3
000AEC2D AFAB A6A3 9F24             	dc.b	nBb3, nFs3, nCs3, nBb2, nFs2, $24
000AEC33 E6FA                       	smpsAlterVol        $FA
000AEC35 A560 E7A5 B148 0804 8008+  	dc.b	nC3, $60, smpsNoAttack, nC3, nC4, $48, $08, $04, nRst, $08, nC4, $04
000AEC41 8008 AF04 22E7 1A08 0480+  	dc.b	nRst, $08, nBb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08, nBb3
000AEC4D 0480 08AD 0422 E71A 0804+  	dc.b	$04, nRst, $08, nAb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08
000AEC59 AD04 8008 AC04 240C AAA8+  	dc.b	nAb3, $04, nRst, $08, nG3, $04, $24, $0C, nF3, nEb3, nD3, nC4
000AEC65 4808 0408 0480 08B3 0422+  	dc.b	$48, $08, $04, $08, $04, nRst, $08, nD4, $04, $22, smpsNoAttack, $1A
000AEC71 0804 8008 B304 8008 B404+  	dc.b	$08, $04, nRst, $08, nD4, $04, nRst, $08, nEb4, $04, $2E, smpsNoAttack
000AEC7D 0E08 0480 08B4 0480 08B6+  	dc.b	$0E, $08, $04, nRst, $08, nEb4, $04, nRst, $08, nF4, $04, $24
000AEC89 BB30 B860 B118 B1B4 18B3   	dc.b	nBb4, $30, nG4, $60, nC4, $18, nC4, nEb4, $18, nD4
000AEC93 E606                       	smpsAlterVol        $06
000AEC95 F6FE 14                    	smpsJump            RRZ2_Jump01
000AEC98                            
000AEC98                            ; FM4 Data
000AEC98                            RRZ2_FM4:
000AEC98 E040                       	smpsPan             panRight, $00
000AEC9F                            
000AEC9F                            RRZ2_Jump00:
000AEC9F EF02                       	smpsSetvoice        $02
000AECA1                            
000AECA1                            RRZ2_Loop03:
000AECA1 AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000AECAD 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000AECB9 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000AECC5 AC04 AA08 AC04 8008 AC04+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3
000AECD1 ACAF 08B3 10               	dc.b	nG3, nBb3, $08, nD4, $10
000AECD6 F700 03FF C7               	smpsLoop            $00, $03, RRZ2_Loop03
000AECDB AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000AECE7 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000AECF3 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000AECFF AC04 AA08 AC04 B4B3 B4B3+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nEb4, nD4, nEb4, nD4, nC4, nD4
000AED0B B1AF B1AF ACAA             	dc.b	nC4, nBb3, nC4, nBb3, nG3, nF3
000AED11                            
000AED11                            RRZ2_Loop04:
000AED11 A00C ACA0 08AA 0CA0 04A8+  	dc.b	nG2, $0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2
000AED1D 08A7 0CA0 04A8 8008 A004+  	dc.b	$08, nD3, $0C, nG2, $04, nEb3, nRst, $08, nG2, $04, nRst, $08
000AED29 A5A7 04A8 08AC 0480 08A0+  	dc.b	nC3, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nG2, $04, nC3
000AED35 08A7 04A8 08AC 0480 08AF+  	dc.b	$08, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nBb3, $10, nG2
000AED41 0CAC A008 AA0C A004 A80C+  	dc.b	$0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2, $08
000AED4D A70C A004 A880 08A5 A004+  	dc.b	nD3, $0C, nG2, $04, nEb3, nRst, $08, nC3, nG2, $04, nG3, $08
000AED59 AA04 A808 A704 8008 A804+  	dc.b	nF3, $04, nEb3, $08, nD3, $04, nRst, $08, nEb3, $04, nF3, $08
000AED65 A804 AA80 08AC AF04 AC80+  	dc.b	nEb3, $04, nF3, nRst, $08, nG3, nBb3, $04, nG3, nRst, $08
000AED70 F700 05FF 9D               	smpsLoop            $00, $05, RRZ2_Loop04
000AED75 A00C ACA0 08AA 0CA0 04A8+  	dc.b	nG2, $0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2
000AED81 08A7 0CA0 04A8 8008 A004+  	dc.b	$08, nD3, $0C, nG2, $04, nEb3, nRst, $08, nG2, $04, nRst, $08
000AED8D A5A7 04A8 08AC 0480 08A0+  	dc.b	nC3, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nG2, $04, nC3
000AED99 08A7 04A8 08AC 0480 08AF+  	dc.b	$08, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nBb3, $10, nG2
000AEDA5 0CAC A008 AA0C A004 A80C+  	dc.b	$0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2, $08
000AEDB1 A70C A004 A880 08A5 A004+  	dc.b	nD3, $0C, nG2, $04, nEb3, nRst, $08, nC3, nG2, $04, nG3, $08
000AEDBD AA04 A808 A704 8008 A804+  	dc.b	nF3, $04, nEb3, $08, nD3, $04, nRst, $08, nEb3, $04, nF3, $08
000AEDC9 A804 AA80 08AC AF04 AC08+  	dc.b	nEb3, $04, nF3, nRst, $08, nG3, nBb3, $04, nG3, $08, nRst, $04
000AEDD5 EF05                       	smpsSetvoice        $05
000AEDD7 8060 8018 800C BD04 B9B4+  	dc.b	nRst, $60, nRst, $18, nRst, $0C, nC5, $04, nAb4, nEb4, nAb4, nEb4
000AEDE3 B1B4 B1AD B1AD A8A1 0C80+  	dc.b	nC4, nEb4, nC4, nAb3, nC4, nAb3, nEb3, nAb2, $0C, nRst, $60, nRst
000AEDEF 0CB7 04B2 AFAB AFB2 B7AF+  	dc.b	$0C, nFs4, $04, nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3
000AEDFB ABAF ABA6 E7A3 1CE7 0880+  	dc.b	nFs3, nBb3, nFs3, nCs3, smpsNoAttack, nBb2, $1C, smpsNoAttack, $08, nRst, $58, nRst
000AEE07 1880 0CBD 04B9 B4B9 B4B1+  	dc.b	$18, nRst, $0C, nC5, $04, nAb4, nEb4, nAb4, nEb4, nC4, nEb4, nC4
000AEE13 ADB1 ADA8 A10C 8060 800C+  	dc.b	nAb3, nC4, nAb3, nEb3, nAb2, $0C, nRst, $60, nRst, $0C, nFs4, $04
000AEE1F B2AF ABAF B2B7 AFAB A6AB+  	dc.b	nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3, nBb3, nFs3
000AEE2B A6E7 A31C                  	dc.b	nCs3, smpsNoAttack, nBb2, $1C
000AEE2F E6FA                       	smpsAlterVol        $FA
000AEE31 A060 E7A0 AC48 0804 8008+  	dc.b	nG2, $60, smpsNoAttack, nG2, nG3, $48, $08, $04, nRst, $08, nG3, $04
000AEE3D 8008 AC04 22E7 1A08 0480+  	dc.b	nRst, $08, nG3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08, nG3
000AEE49 0480 08A8 0422 E71A 0804+  	dc.b	$04, nRst, $08, nEb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08
000AEE55 A804 8008 A704 2418 A0AC+  	dc.b	nEb3, $04, nRst, $08, nD3, $04, $24, $18, nG2, nG3, $48, $08
000AEE61 0408 0480 08AC 0422 E71A+  	dc.b	$04, $08, $04, nRst, $08, nG3, $04, $22, smpsNoAttack, $1A, $08, $04
000AEE6D 8008 AC04 8008 AC04 2EE7+  	dc.b	nRst, $08, nG3, $04, nRst, $08, nG3, $04, $2E, smpsNoAttack, $0E, $08
000AEE79 0480 08AC 0480 08AF 0424+  	dc.b	$04, nRst, $08, nG3, $04, nRst, $08, nBb3, $04, $24, nD4, $30
000AEE85 B160 AC18 ACAC 18AC        	dc.b	nC4, $60, nG3, $18, nG3, nG3, $18, nG3
000AEE8D E606                       	smpsAlterVol        $06
000AEE8F F6FE 0E                    	smpsJump            RRZ2_Jump00
000AEE92                            
000AEE92                            ; FM5 Data
000AEE92                            RRZ2_FM5:
000AEE97 8010                       	dc.b	nRst, $10
000AEE99 E101                       	smpsAlterNote       $01
000AEE9B F6F8 DB                    	smpsJump            RRZ2_FM1
000AEE9E                            
000AEE9E                            ; PSG1 Data
000AEE9E                            RRZ2_PSG1:
000AEEA3 F507                       	smpsPSGvoice        stone_1D
000AEEA5 B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000AEEB1 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000AEEBD 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000AEEC9 8008 B104 AF08 B104 8008+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04
000AEED5 ACAF B1B8 0810             	dc.b	nG3, nBb3, nC4, nG4, $08, $10
000AEEDB F700 03FF BF               	smpsLoop            $00, $03, RRZ2_PSG1
000AEEE0 B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000AEEEC 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000AEEF8 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000AEF04 8008 B104 AF08 B104 B8B6+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nG4, nF4, nG4, nF4
000AEF10 B4B6 B4B3 B4B3 B1AF        	dc.b	nEb4, nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3
000AEF18 F507                       	smpsPSGvoice        stone_26
000AEF1A B860 E7B8 1680 4AB8 60E7+  	dc.b	nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16
000AEF26 804A                       	dc.b	nRst, $4A
000AEF28                            
000AEF28                            RRZ2_Loop0D:
000AEF28 B860 E7B8 1680 4ABB 60E7+  	dc.b	nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nBb4, $60, smpsNoAttack, nBb4, $16
000AEF34 804A                       	dc.b	nRst, $4A
000AEF36 F700 02FF EE               	smpsLoop            $00, $02, RRZ2_Loop0D
000AEF3B BA60 E7BA 1680 4AB8 60E7+  	dc.b	nA4, $60, smpsNoAttack, nA4, $16, nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16
000AEF47 804A B860 E7B8 1680 4ABB+  	dc.b	nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nBb4, $60, smpsNoAttack
000AEF53 BB16 804A                  	dc.b	nBb4, $16, nRst, $4A
000AEF57                            
000AEF57                            RRZ2_Loop0E:
000AEF57 F507                       	smpsPSGvoice        stone_23
000AEF59 B808 04B8 8008 B8B6 0480+  	dc.b	nG4, $08, $04, nG4, nRst, $08, nG4, nF4, $04, nRst, $08, nG4
000AEF65 0480 08B8 04B6 8008 B8BB+  	dc.b	$04, nRst, $08, nG4, $04, nF4, nRst, $08, nG4, nBb4, $04, nRst
000AEF71 08B8 0480 08B8 04B6 8008+  	dc.b	$08, nG4, $04, nRst, $08, nG4, $04, nF4, nRst, $08, nG4, nBb4
000AEF7D 0480 08B6 0680 2E          	dc.b	$04, nRst, $08, nF4, $06, nRst, $2E
000AEF84 F700 02FF CF               	smpsLoop            $00, $02, RRZ2_Loop0E
000AEF89                            
000AEF89                            RRZ2_Loop0F:
000AEF89 F507                       	smpsPSGvoice        stone_1D
000AEF8B B908 0480 08B9 0480 08B9+  	dc.b	nAb4, $08, $04, nRst, $08, nAb4, $04, nRst, $08, nAb4, $04, nRst
000AEF97 08B9 0430 E760 B708 0480+  	dc.b	$08, nAb4, $04, $30, smpsNoAttack, $60, nFs4, $08, $04, nRst, $08, nFs4
000AEFA3 0480 08B7 0480 08B7 0430+  	dc.b	$04, nRst, $08, nFs4, $04, nRst, $08, nFs4, $04, $30, smpsNoAttack, $60
000AEFAF F700 02FF D6               	smpsLoop            $00, $02, RRZ2_Loop0F
000AEFB4 8060 8030 B804 B1B8 BDB8+  	dc.b	nRst, $60, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000AEFC0 B1B8 B10C 8030 B804 B1B8+  	dc.b	nC4, nG4, nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4
000AEFCC BDB8 B1B8 B10C 8060 8060+  	dc.b	nC5, nG4, nC4, nG4, nC4, $0C, nRst, $60, nRst, $60, nRst, $60
000AEFD8 8030 B804 B1B8 BDB8 BDB8+  	dc.b	nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4, nC4, nG4
000AEFE4 B10C 8030 B804 B1B8 BDB8+  	dc.b	nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000AEFF0 B1B8 B10C 8060 B618 B3AF+  	dc.b	nC4, nG4, nC4, $0C, nRst, $60, nF4, $18, nD4, nBb3, nG3, nC3
000AEFFC 30AC A518 ACB4 BB          	dc.b	$30, nG3, nC3, $18, nG3, nEb4, nBb4
000AF003 F6FE 99                    	smpsJump            RRZ2_PSG1
000AF006                            
000AF006                            ; PSG2 Data
000AF006                            RRZ2_PSG2:
000AF00B F507                       	smpsPSGvoice        stone_1D
000AF00D                            
000AF00D                            RRZ2_Loop09:
000AF00D AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000AF019 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000AF025 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000AF031 AC04 AA08 AC04 8008 AC04+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3
000AF03D ACAF 08B3 10               	dc.b	nG3, nBb3, $08, nD4, $10
000AF042 F700 03FF C7               	smpsLoop            $00, $03, RRZ2_Loop09
000AF047 AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000AF053 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000AF05F 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000AF06B AC04 AA08 AC04 B4B3 B4B3+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nEb4, nD4, nEb4, nD4, nC4, nD4
000AF077 B1AF B1AF ACAA             	dc.b	nC4, nBb3, nC4, nBb3, nG3, nF3
000AF07D F507                       	smpsPSGvoice        stone_26
000AF07F B160 E7B1 1680 4AB1 60E7+  	dc.b	nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nC4, $60, smpsNoAttack, nC4, $16
000AF08B 804A                       	dc.b	nRst, $4A
000AF08D                            
000AF08D                            RRZ2_Loop0A:
000AF08D B160 E7B1 1680 4AB4 60E7+  	dc.b	nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nEb4, $60, smpsNoAttack, nEb4, $16
000AF099 804A                       	dc.b	nRst, $4A
000AF09B F700 02FF EE               	smpsLoop            $00, $02, RRZ2_Loop0A
000AF0A0 B660 E7B6 1680 4AB4 60E7+  	dc.b	nF4, $60, smpsNoAttack, nF4, $16, nRst, $4A, nEb4, $60, smpsNoAttack, nEb4, $16
000AF0AC 804A B160 E7B1 1680 4AB4+  	dc.b	nRst, $4A, nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nEb4, $60, smpsNoAttack
000AF0B8 B416 804A                  	dc.b	nEb4, $16, nRst, $4A
000AF0BC                            
000AF0BC                            RRZ2_Loop0B:
000AF0BC F507                       	smpsPSGvoice        stone_23
000AF0BE B408 04B4 8008 B4B3 0480+  	dc.b	nEb4, $08, $04, nEb4, nRst, $08, nEb4, nD4, $04, nRst, $08, nEb4
000AF0CA 0480 08B4 04B3 8008 B4B8+  	dc.b	$04, nRst, $08, nEb4, $04, nD4, nRst, $08, nEb4, nG4, $04, nRst
000AF0D6 08B4 0480 08B4 04B3 8008+  	dc.b	$08, nEb4, $04, nRst, $08, nEb4, $04, nD4, nRst, $08, nEb4, nG4
000AF0E2 0480 08B3 0680 2E          	dc.b	$04, nRst, $08, nD4, $06, nRst, $2E
000AF0E9 F700 02FF CF               	smpsLoop            $00, $02, RRZ2_Loop0B
000AF0EE                            
000AF0EE                            RRZ2_Loop0C:
000AF0EE F507                       	smpsPSGvoice        stone_1D
000AF0F0 B208 0480 08B2 0480 08B2+  	dc.b	nCs4, $08, $04, nRst, $08, nCs4, $04, nRst, $08, nCs4, $04, nRst
000AF0FC 08B2 04B1 30E7 60B0 0804+  	dc.b	$08, nCs4, $04, nC4, $30, smpsNoAttack, $60, nB3, $08, $04, nRst, $08
000AF108 B004 8008 B004 8008 B004+  	dc.b	nB3, $04, nRst, $08, nB3, $04, nRst, $08, nB3, $04, nBb3, $30
000AF114 E760                       	dc.b	smpsNoAttack, $60
000AF116 F700 02FF D4               	smpsLoop            $00, $02, RRZ2_Loop0C
000AF11B 800D                       	dc.b	nRst, $0D
000AF11D EC02                       	smpsPSGAlterVol     $02
000AF11F 8060 8030 B804 B1B8 BDB8+  	dc.b	nRst, $60, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000AF12B B1B8 B10C 8030 B804 B1B8+  	dc.b	nC4, nG4, nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4
000AF137 BDB8 B1B8 B10C 8060 8060+  	dc.b	nC5, nG4, nC4, nG4, nC4, $0C, nRst, $60, nRst, $60, nRst, $60
000AF143 8030 B804 B1B8 BDB8 BDB8+  	dc.b	nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4, nC4, nG4
000AF14F B10C 8030 B804 B1B8 BDB8+  	dc.b	nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000AF15B B1B8 B10C 8060 B618 B3AF+  	dc.b	nC4, nG4, nC4, $0C, nRst, $60, nF4, $18, nD4, nBb3, nG3, nC3
000AF167 30AC A518 ACB4 BB0B        	dc.b	$30, nG3, nC3, $18, nG3, nEb4, nBb4, $0B
000AF16F ECFE                       	smpsPSGAlterVol     $FE
000AF171 F6FE 93                    	smpsJump            RRZ2_PSG2
000AF174                            
000AF174                            ; PSG3 Data
000AF174                            RRZ2_PSG3:
000AF174 F3E7                       	smpsPSGform         $E7
000AF176 8060 80                    	dc.b	nRst, $60, nRst
000AF179 F800 00                    	smpsCall            RRZ2_Call00
000AF17C F800 00                    	smpsCall            RRZ2_Call00
000AF17F F800 00                    	smpsCall            RRZ2_Call01
000AF182                            
000AF182                            RRZ2_Jump03:
000AF182 F800 00                    	smpsCall            RRZ2_Call00
000AF185 F6FF FB                    	smpsJump            RRZ2_Jump03
000AF188                            
000AF188                            RRZ2_Call00:
000AF188 F502                       	smpsPSGvoice        stone_0F
000AF18A B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000AF191 F700 10FF F3               	smpsLoop            $00, $10, RRZ2_Call00
000AF196 E3                         	smpsReturn
000AF197                            
000AF197                            RRZ2_Call01:
000AF197 F502                       	smpsPSGvoice        stone_0F
000AF199 B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000AF1A0 F502                       	smpsPSGvoice        stone_0F
000AF1A2 B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000AF1A9 F502                       	smpsPSGvoice        stone_0F
000AF1AB B104 8080 B180 80          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nRst
000AF1B2 F503                       	smpsPSGvoice        stone_04
000AF1B4 B10C                       	dc.b	nC4, $0C
000AF1B6 F502                       	smpsPSGvoice        stone_0F
000AF1B8 B104 8080                  	dc.b	nC4, $04, nRst, nRst
000AF1BC E3                         	smpsReturn
000AF1BD                            
000AF1BD                            ; DAC Data
000AF1BD                            RRZ2_DAC:
000AF1BD 8160 8048 810C 8181 6080+  	dc.b	dKick, $60, nRst, $48, dKick, $0C, dKick, dKick, $60, nRst, $48, dHiTimpani
000AF1C9 0488 8A8B 8B8B 8160 8048+  	dc.b	$04, dHiTimpani, dLowTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dKick, $60, nRst, $48, dKick, $0C
000AF1D5 8181 6080 0882 0480 8080+  	dc.b	dKick, dKick, $60, nRst, $08, dSnare, $04, nRst, nRst, nRst, dSnare, nRst
000AF1E1 8080 8080 8280 8082 8080+  	dc.b	nRst, nRst, nRst, nRst, dSnare, nRst, nRst, dSnare, nRst, nRst, dFloorTimpani, $04
000AF1ED 8B8B 8B8B 8B81 0480 8080+  	dc.b	dFloorTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dKick, $04, nRst, nRst, nRst, nRst, nRst
000AF1F9 8280 8080 8080 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, dKick, nRst, nRst
000AF205 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, dKick
000AF211 8280 8080 8081 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst, dKick, nRst, nRst
000AF21D 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, nRst
000AF229 8280 8080 8080 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, dKick, nRst, nRst
000AF235 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, nRst
000AF241 8280 8080 8081 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst, dKick, nRst, nRst
000AF24D 8280 8082 8282             	dc.b	dSnare, nRst, nRst, dSnare, dSnare, dSnare
000AF253                            
000AF253                            RRZ2_Loop00:
000AF253 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000AF25F 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000AF26B 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000AF277 8081 8080 8180 8082 8080+  	dc.b	nRst, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000AF283 80                         	dc.b	nRst
000AF284 F700 07FF CB               	smpsLoop            $00, $07, RRZ2_Loop00
000AF289 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000AF295 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000AF2A1 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000AF2AD 8081 8181 8180 8082 8080+  	dc.b	nRst, dKick, dKick, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dSnare, dSnare
000AF2B9 82                         	dc.b	dSnare
000AF2BA                            
000AF2BA                            RRZ2_Loop01:
000AF2BA 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000AF2C6 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000AF2D2 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000AF2DE 8081 8080 8180 8082 8080+  	dc.b	nRst, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000AF2EA 80                         	dc.b	nRst
000AF2EB F700 02FF CB               	smpsLoop            $00, $02, RRZ2_Loop01
000AF2F0 8104 8080 8180 8180 8082+  	dc.b	dKick, $04, nRst, nRst, dKick, nRst, dKick, nRst, nRst, dSnare, nRst, nRst
000AF2FC 8181 3081 0480 8081 8081+  	dc.b	dKick, dKick, $30, dKick, $04, nRst, nRst, dKick, nRst, dKick, nRst, nRst
000AF308 8180 8081 8118 8181 0480+  	dc.b	dKick, nRst, nRst, dKick, dKick, $18, dKick, dKick, $04, nRst, nRst, dKick
000AF314 8081 8080 8280 8081 8180+  	dc.b	nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, dKick, nRst, nRst, nRst
000AF320 8081 8280 8080 8080 8180+  	dc.b	nRst, dKick, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, dSnare, nRst
000AF32C 8080 8280 8080 8080 8180+  	dc.b	nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, dKick, dSnare
000AF338 8080 8180 8182 8080 8104+  	dc.b	nRst, nRst, dKick, nRst, dKick, dSnare, nRst, nRst, dKick, $04, nRst, nRst
000AF344 8080 8082 8080 8080 8081+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000AF350 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000AF35C 8080 8182 8080 8080 8181+  	dc.b	nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst
000AF368 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000AF374 8080 8082 8080 8080 8081+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000AF380 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000AF38C 8080 8082 8080 8080 8181+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst
000AF398 8180 8082 8080 8282 8281+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, dSnare, dSnare, dSnare, dKick, $04, nRst
000AF3A4 8080 8080 8280 8080 8081+  	dc.b	nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000AF3B0 8181 8080 8280 8080 8080+  	dc.b	dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, $04
000AF3BC 8080 8080 8082 8080 8080+  	dc.b	nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, nRst
000AF3C8 8081 8180 8082 8080 8A8B+  	dc.b	nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dLowTimpani, dFloorTimpani, dFloorTimpani, dKick
000AF3D4 0480 8080 8080 8280 8080+  	dc.b	$04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick
000AF3E0 8080 8181 8080 8280 8080+  	dc.b	nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst
000AF3EC                            
000AF3EC                            RRZ2_Loop02:
000AF3EC 8104 8080 8080 8082 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000AF3F8 8180 8081 8180 8082 8080+  	dc.b	dKick, nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000AF404 80                         	dc.b	nRst
000AF405 F700 07FF E3               	smpsLoop            $00, $07, RRZ2_Loop02
000AF40A 8104 8080 8080 8082 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000AF416 8180 8081 8180 8082 8080+  	dc.b	dKick, nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000AF422 8181 1818 8204 0404 0404+  	dc.b	dKick, dKick, $18, $18, dSnare, $04, $04, $04, $04, $04, $04, $04
000AF42E 0404 0404 04               	dc.b	$04, $04, $04, $04, $04
000AF433 F6FD 88                    	smpsJump            RRZ2_DAC
000AF436                            
000AF436                            RRZ2_Voices:
000AF436                            ;	Voice $00
000AF436                            ;	$3A
000AF436                            ;	$3F, $73, $73, $31, 	$9F, $5F, $54, $17, 	$03, $14, $0A, $05
000AF436                            ;	$01, $05, $01, $01, 	$FF, $EF, $8F, $FF, 	$29, $39, $23, $00
000AF436                            	smpsVcAlgorithm     $02
000AF436                            	smpsVcFeedback      $07
000AF436                            	smpsVcUnusedBits    $00
000AF436                            	smpsVcDetune        $03, $07, $07, $03
000AF436                            	smpsVcCoarseFreq    $01, $03, $03, $0F
000AF436                            	smpsVcRateScale     $00, $01, $01, $02
000AF436                            	smpsVcAttackRate    $17, $14, $1F, $1F
000AF436                            	smpsVcAmpMod        $00, $00, $00, $00
000AF436                            	smpsVcDecayRate1    $05, $0A, $14, $03
000AF436                            	smpsVcDecayRate2    $01, $01, $05, $01
000AF436                            	smpsVcDecayLevel    $0F, $08, $0E, $0F
000AF436                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AF44F                            
000AF44F                            ;	Voice $01
000AF44F                            ;	$3C
000AF44F                            ;	$01, $00, $00, $00, 	$1F, $1F, $15, $1F, 	$11, $03, $12, $05
000AF44F                            ;	$07, $04, $09, $02, 	$55, $3A, $25, $1A, 	$1A, $00, $07, $00
000AF44F                            	smpsVcAlgorithm     $04
000AF44F                            	smpsVcFeedback      $07
000AF44F                            	smpsVcUnusedBits    $00
000AF44F                            	smpsVcDetune        $00, $00, $00, $00
000AF44F                            	smpsVcCoarseFreq    $00, $00, $00, $01
000AF44F                            	smpsVcRateScale     $00, $00, $00, $00
000AF44F                            	smpsVcAttackRate    $1F, $15, $1F, $1F
000AF44F                            	smpsVcAmpMod        $00, $00, $00, $00
000AF44F                            	smpsVcDecayRate1    $05, $12, $03, $11
000AF44F                            	smpsVcDecayRate2    $02, $09, $04, $07
000AF44F                            	smpsVcDecayLevel    $01, $02, $03, $05
000AF44F                            	smpsVcReleaseRate   $0A, $05, $0A, $05
000AF468                            
000AF468                            ;	Voice $02
000AF468                            ;	$3A
000AF468                            ;	$73, $04, $11, $31, 	$9F, $DF, $9F, $9F, 	$05, $05, $03, $0A
000AF468                            ;	$03, $02, $03, $02, 	$6F, $6F, $5F, $7F, 	$1C, $20, $1E, $00
000AF468                            	smpsVcAlgorithm     $02
000AF468                            	smpsVcFeedback      $07
000AF468                            	smpsVcUnusedBits    $00
000AF468                            	smpsVcDetune        $03, $01, $00, $07
000AF468                            	smpsVcCoarseFreq    $01, $01, $04, $03
000AF468                            	smpsVcRateScale     $02, $02, $03, $02
000AF468                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AF468                            	smpsVcAmpMod        $00, $00, $00, $00
000AF468                            	smpsVcDecayRate1    $0A, $03, $05, $05
000AF468                            	smpsVcDecayRate2    $02, $03, $02, $03
000AF468                            	smpsVcDecayLevel    $07, $05, $06, $06
000AF468                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AF481                            
000AF481                            ;	Voice $03
000AF481                            ;	$3E
000AF481                            ;	$07, $01, $02, $0A, 	$1F, $1F, $1F, $1F, 	$03, $06, $00, $00
000AF481                            ;	$08, $06, $07, $0C, 	$15, $0A, $0A, $0A, 	$20, $05, $06, $08
000AF481                            	smpsVcAlgorithm     $06
000AF481                            	smpsVcFeedback      $07
000AF481                            	smpsVcUnusedBits    $00
000AF481                            	smpsVcDetune        $00, $00, $00, $00
000AF481                            	smpsVcCoarseFreq    $0A, $02, $01, $07
000AF481                            	smpsVcRateScale     $00, $00, $00, $00
000AF481                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AF481                            	smpsVcAmpMod        $00, $00, $00, $00
000AF481                            	smpsVcDecayRate1    $00, $00, $06, $03
000AF481                            	smpsVcDecayRate2    $0C, $07, $06, $08
000AF481                            	smpsVcDecayLevel    $00, $00, $00, $01
000AF481                            	smpsVcReleaseRate   $0A, $0A, $0A, $05
000AF49A                            
000AF49A                            ;	Voice $04
000AF49A                            ;	$3C
000AF49A                            ;	$71, $71, $11, $11, 	$17, $1E, $19, $1E, 	$04, $01, $07, $01
000AF49A                            ;	$00, $00, $00, $00, 	$F7, $F8, $F7, $F8, 	$1E, $00, $14, $00
000AF49A                            	smpsVcAlgorithm     $04
000AF49A                            	smpsVcFeedback      $07
000AF49A                            	smpsVcUnusedBits    $00
000AF49A                            	smpsVcDetune        $01, $01, $07, $07
000AF49A                            	smpsVcCoarseFreq    $01, $01, $01, $01
000AF49A                            	smpsVcRateScale     $00, $00, $00, $00
000AF49A                            	smpsVcAttackRate    $1E, $19, $1E, $17
000AF49A                            	smpsVcAmpMod        $00, $00, $00, $00
000AF49A                            	smpsVcDecayRate1    $01, $07, $01, $04
000AF49A                            	smpsVcDecayRate2    $00, $00, $00, $00
000AF49A                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000AF49A                            	smpsVcReleaseRate   $08, $07, $08, $07
000AF4B3                            
000AF4B3                            ;	Voice $05
000AF4B3                            ;	$16
000AF4B3                            ;	$7A, $74, $3C, $31, 	$1F, $1F, $1F, $1F, 	$0A, $08, $0C, $0A
000AF4B3                            ;	$07, $0A, $07, $05, 	$2F, $AF, $AF, $5F, 	$14, $05, $0A, $00
000AF4B3                            	smpsVcAlgorithm     $06
000AF4B3                            	smpsVcFeedback      $02
000AF4B3                            	smpsVcUnusedBits    $00
000AF4B3                            	smpsVcDetune        $03, $03, $07, $07
000AF4B3                            	smpsVcCoarseFreq    $01, $0C, $04, $0A
000AF4B3                            	smpsVcRateScale     $00, $00, $00, $00
000AF4B3                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AF4B3                            	smpsVcAmpMod        $00, $00, $00, $00
000AF4B3                            	smpsVcDecayRate1    $0A, $0C, $08, $0A
000AF4B3                            	smpsVcDecayRate2    $05, $07, $0A, $07
000AF4B3                            	smpsVcDecayLevel    $05, $0A, $0A, $02
000AF4B3                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AF4CC                            
000AF4CC                            
000AF4CC                            		even				
000AF4CC                            Music9B:		incbin	"sound/music/Mus9B - TTZ BF US.bin"
000B00AE                            		even
000B00AE                            Music9C:		include	"sound/music/Mus9C - Tribute.asm"
000B00AE                            Tribute_Header:
000B00AE                            	smpsHeaderStartSong 3
000B00B0 0603                       	smpsHeaderChan      $06, $03
000B00B2 0106                       	smpsHeaderTempo     $01, $06
000B00B4                            
000B00B8 0000 000D                  	smpsHeaderFM        Tribute_FM1,	$00, $0D
000B00BC 0000 0016                  	smpsHeaderFM        Tribute_FM2,	$00, $16
000B00C0 0000 0016                  	smpsHeaderFM        Tribute_FM3,	$00, $16
000B00C4 0000 0016                  	smpsHeaderFM        Tribute_FM4,	$00, $16
000B00C8 0000 0C15                  	smpsHeaderFM        Tribute_FM5,	$0C, $15
000B00CC                            ;	smpsHeaderFM        Tribute_FM6,	$0C, $17
000B00DE                            
000B00DE                            ; FM1 Data
000B00DE                            Tribute_FM1:
000B00DE EF00                       	smpsSetvoice        $00
000B00E0 F800 00                    	smpsCall            Tribute_Call05
000B00E3 E712 9B06 8024 9B06 8080+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst
000B00EF 9BE7 069B 06A7 9BA7 9B80+  	dc.b	nD2, smpsNoAttack, $06, nD2, $06, nD3, nD2, nD3, nD2, nRst, nD2, $0C
000B00FB 06A7 9B99 9A9B 9E          	dc.b	$06, nD3, nD2, nC2, nCs2, nD2, nF2
000B0102 F800 00                    	smpsCall            Tribute_Call05
000B0105 E712 9B06 8024 9B06 8080+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst
000B0111 94                         	dc.b	nG1
000B0112 EA09                       	smpsSetTempoMod     $09
000B0114 E760 E748 8018             	dc.b	smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B011A                            
000B011A                            Tribute_Loop05:
000B011A 9918 0C0C 1206 80A5 8098+  	dc.b	nC2, $18, $0C, $0C, $12, $06, nRst, nC3, nRst, nB1, smpsNoAttack, $18
000B0126 0C0C 120C A006 940C 9618+  	dc.b	$0C, $0C, $12, $0C, nG2, $06, nG1, $0C, nA1, $18, $0C, $0C
000B0132 1206 80A2 8094 E70C 0C0C+  	dc.b	$12, $06, nRst, nA2, nRst, nG1, smpsNoAttack, $0C, $0C, $0C, $0C, $0C
000B013E 0C0C 999B 180C 0C12 0680+  	dc.b	$0C, $0C, nC2, nD2, $18, $0C, $0C, $12, $06, nRst, nD3, nRst
000B014A 97E7 0C0C 0C0C 1212 A306+  	dc.b	nBb1, smpsNoAttack, $0C, $0C, $0C, $0C, $12, $12, nBb2, $06, nRst, nA1
000B0156 180C 0C12 0680 A280 92E7+  	dc.b	$18, $0C, $0C, $12, $06, nRst, nA2, nRst, nF1, smpsNoAttack, $0C, $0C
000B0162 0C0C 910C 0C0C 9B          	dc.b	$0C, $0C, nE1, $0C, $0C, $0C, nD2
000B0169 F700 02FF AD               	smpsLoop            $00, $02, Tribute_Loop05
000B016E 9624 9530 940C E724 9330+  	dc.b	nA1, $24, nAb1, $30, nG1, $0C, smpsNoAttack, $24, nFs1, $30, nF1, $0C
000B017A E74E 8006 940C E760        	dc.b	smpsNoAttack, $4E, nRst, $06, nG1, $0C, smpsNoAttack, $60
000B0182 F800 00                    	smpsCall            Tribute_Call00
000B0185 F2                         	smpsStop
000B0186                            
000B0186                            Tribute_Call05:
000B0186 9B12 0680 249B 0680 809B+  	dc.b	nD2, $12, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst, nD2
000B0192 E712 9B06 801E A706 9B80+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $1E, nD3, $06, nD2, nRst, nRst, nD2
000B019E 809B                       	dc.b	nRst, nD2
000B01A0 E3                         	smpsReturn
000B01A1                            
000B01A1                            Tribute_Call00:
000B01A1 8006 999B A09E 9D94 99E7+  	dc.b	nRst, $06, nC2, nD2, nG2, nF2, nE2, nG1, nC2, smpsNoAttack, $06, nG2
000B01AD 9EA5 A0A5 A7AC E706 9E9D+  	dc.b	nF2, nC3, nG2, nC3, nD3, nG3, smpsNoAttack, $06, nF2, nE2, nC2, nF1
000B01B9 9496 99E7 06               	dc.b	nG1, nA1, nC2, smpsNoAttack, $06
000B01BE E3                         	smpsReturn
000B01BF                            
000B01BF                            ; FM2 Data
000B01BF                            Tribute_FM2:
000B01BF EF01                       	smpsSetvoice        $01
000B01C1 B512 B306                  	dc.b	nE4, $12, nD4, $06
000B01C5 E60A                       	smpsFMAlterVol      $0A
000B01C7 0680                       	dc.b	$06, nRst
000B01C9 E6F6                       	smpsFMAlterVol      $F6
000B01CB B8                         	dc.b	nG4
000B01CC E60A                       	smpsFMAlterVol      $0A
000B01CE 0680                       	dc.b	$06, nRst
000B01D0 E6F6                       	smpsFMAlterVol      $F6
000B01D2 B6B5                       	dc.b	nF4, nE4
000B01D4 E60A                       	smpsFMAlterVol      $0A
000B01D6 06                         	dc.b	$06
000B01D7 E6F6                       	smpsFMAlterVol      $F6
000B01D9 B1                         	dc.b	nC4
000B01DA E60A                       	smpsFMAlterVol      $0A
000B01DC 06                         	dc.b	$06
000B01DD E6F6                       	smpsFMAlterVol      $F6
000B01DF B3                         	dc.b	nD4
000B01E0 EF02                       	smpsSetvoice        $02
000B01E2 E918                       	smpsAlterPitch      $18
000B01E4 F800 00                    	smpsCall            Tribute_Call04
000B01E7 EF01                       	smpsSetvoice        $01
000B01E9 E9E8                       	smpsAlterPitch      $E8
000B01EB F800 00                    	smpsCall            Tribute_Call04
000B01EE B406 E712 18B6 1818        	dc.b	nEb4, $06, smpsNoAttack, $12, $18, nF4, $18, $18
000B01F6 E60A                       	smpsFMAlterVol      $0A
000B01F8 06                         	dc.b	$06
000B01F9 E6F6                       	smpsFMAlterVol      $F6
000B01FB B512 B306                  	dc.b	nE4, $12, nD4, $06
000B01FF E60A                       	smpsFMAlterVol      $0A
000B0201 0680                       	dc.b	$06, nRst
000B0203 E6F6                       	smpsFMAlterVol      $F6
000B0205 B8                         	dc.b	nG4
000B0206 E60A                       	smpsFMAlterVol      $0A
000B0208 0680                       	dc.b	$06, nRst
000B020A E6F6                       	smpsFMAlterVol      $F6
000B020C B6B5                       	dc.b	nF4, nE4
000B020E E60A                       	smpsFMAlterVol      $0A
000B0210 06                         	dc.b	$06
000B0211 E6F6                       	smpsFMAlterVol      $F6
000B0213 B1                         	dc.b	nC4
000B0214 E60A                       	smpsFMAlterVol      $0A
000B0216 06                         	dc.b	$06
000B0217 E6F6                       	smpsFMAlterVol      $F6
000B0219 B3                         	dc.b	nD4
000B021A EF02                       	smpsSetvoice        $02
000B021C E918                       	smpsAlterPitch      $18
000B021E F800 00                    	smpsCall            Tribute_Call04
000B0221 EF01                       	smpsSetvoice        $01
000B0223 E9E8                       	smpsAlterPitch      $E8
000B0225 F800 00                    	smpsCall            Tribute_Call04
000B0228 B106 E760 E748 8018        	dc.b	nC4, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B0230                            
000B0230                            Tribute_Loop04:
000B0230 8018 B512                  	dc.b	nRst, $18, nE4, $12
000B0234 E60A                       	smpsFMAlterVol      $0A
000B0236 06                         	dc.b	$06
000B0237 E6F6                       	smpsFMAlterVol      $F6
000B0239 B50C                       	dc.b	nE4, $0C
000B023B E60A                       	smpsFMAlterVol      $0A
000B023D 06                         	dc.b	$06
000B023E E6F6                       	smpsFMAlterVol      $F6
000B0240 06                         	dc.b	$06
000B0241 E60A                       	smpsFMAlterVol      $0A
000B0243 06                         	dc.b	$06
000B0244 E6F6                       	smpsFMAlterVol      $F6
000B0246 06                         	dc.b	$06
000B0247 E60A                       	smpsFMAlterVol      $0A
000B0249 06                         	dc.b	$06
000B024A E6F6                       	smpsFMAlterVol      $F6
000B024C B3E7 60                    	dc.b	nD4, smpsNoAttack, $60
000B024F F700 03FF DD               	smpsLoop            $00, $03, Tribute_Loop04
000B0254 8018 B512                  	dc.b	nRst, $18, nE4, $12
000B0258 E60A                       	smpsFMAlterVol      $0A
000B025A 06                         	dc.b	$06
000B025B E6F6                       	smpsFMAlterVol      $F6
000B025D B50C                       	dc.b	nE4, $0C
000B025F E60A                       	smpsFMAlterVol      $0A
000B0261 06                         	dc.b	$06
000B0262 E6F6                       	smpsFMAlterVol      $F6
000B0264 06                         	dc.b	$06
000B0265 E60A                       	smpsFMAlterVol      $0A
000B0267 06                         	dc.b	$06
000B0268 E6F6                       	smpsFMAlterVol      $F6
000B026A 06                         	dc.b	$06
000B026B E60A                       	smpsFMAlterVol      $0A
000B026D 06                         	dc.b	$06
000B026E E6F6                       	smpsFMAlterVol      $F6
000B0270 B5E7 30B3 18B8             	dc.b	nE4, smpsNoAttack, $30, nD4, $18, nG4
000B0276 F701 02FF B6               	smpsLoop            $01, $02, Tribute_Loop04
000B027B B51E                       	dc.b	nE4, $1E
000B027D E60A                       	smpsFMAlterVol      $0A
000B027F 06                         	dc.b	$06
000B0280 E6F6                       	smpsFMAlterVol      $F6
000B0282 B62A                       	dc.b	nF4, $2A
000B0284 E60A                       	smpsFMAlterVol      $0A
000B0286 06                         	dc.b	$06
000B0287 E6F6                       	smpsFMAlterVol      $F6
000B0289 B52A                       	dc.b	nE4, $2A
000B028B E60A                       	smpsFMAlterVol      $0A
000B028D 06                         	dc.b	$06
000B028E E6F6                       	smpsFMAlterVol      $F6
000B0290 B52A                       	dc.b	nE4, $2A
000B0292 E60A                       	smpsFMAlterVol      $0A
000B0294 06                         	dc.b	$06
000B0295 E6F6                       	smpsFMAlterVol      $F6
000B0297 B50C E74E                  	dc.b	nE4, $0C, smpsNoAttack, $4E
000B029B E60A                       	smpsFMAlterVol      $0A
000B029D 06                         	dc.b	$06
000B029E E6F6                       	smpsFMAlterVol      $F6
000B02A0 B30C E760                  	dc.b	nD4, $0C, smpsNoAttack, $60
000B02A4 F800 00                    	smpsCall            Tribute_Call03
000B02A7 F2                         	smpsStop
000B02A8                            
000B02A8                            Tribute_Call04:
000B02A8 B506 E712 B306             	dc.b	nE4, $06, smpsNoAttack, $12, nD4, $06
000B02AE E60A                       	smpsFMAlterVol      $0A
000B02B0 0680                       	dc.b	$06, nRst
000B02B2 E6F6                       	smpsFMAlterVol      $F6
000B02B4 B8                         	dc.b	nG4
000B02B5 E60A                       	smpsFMAlterVol      $0A
000B02B7 0680                       	dc.b	$06, nRst
000B02B9 E6F6                       	smpsFMAlterVol      $F6
000B02BB B6B5                       	dc.b	nF4, nE4
000B02BD E60A                       	smpsFMAlterVol      $0A
000B02BF 06                         	dc.b	$06
000B02C0 E6F6                       	smpsFMAlterVol      $F6
000B02C2 B1                         	dc.b	nC4
000B02C3 E60A                       	smpsFMAlterVol      $0A
000B02C5 06                         	dc.b	$06
000B02C6 E6F6                       	smpsFMAlterVol      $F6
000B02C8 B3                         	dc.b	nD4
000B02C9 E3                         	smpsReturn
000B02CA                            
000B02CA                            Tribute_Call03:
000B02CA E918                       	smpsAlterPitch      $18
000B02CC 8006 999B A09E 9D94 99     	dc.b	nRst, $06, nC2, nD2, nG2, nF2, nE2, nG1, nC2
000B02D5 E60A                       	smpsFMAlterVol      $0A
000B02D7 06                         	dc.b	$06
000B02D8 E6F6                       	smpsFMAlterVol      $F6
000B02DA A09E A5A0 A5A7 AC          	dc.b	nG2, nF2, nC3, nG2, nC3, nD3, nG3
000B02E1 E60A                       	smpsFMAlterVol      $0A
000B02E3 06                         	dc.b	$06
000B02E4 E6F6                       	smpsFMAlterVol      $F6
000B02E6 9E9D 9992 9496 99          	dc.b	nF2, nE2, nC2, nF1, nG1, nA1, nC2
000B02ED E60A                       	smpsFMAlterVol      $0A
000B02EF 06                         	dc.b	$06
000B02F0 E6F6                       	smpsFMAlterVol      $F6
000B02F2 E9E8                       	smpsAlterPitch      $E8
000B02F4 E3                         	smpsReturn
000B02F5                            
000B02F5                            ; FM3 Data
000B02F5                            Tribute_FM3:
000B02F5 EF01                       	smpsSetvoice        $01
000B02F7 B112 B006                  	dc.b	nC4, $12, nB3, $06
000B02FB E60A                       	smpsFMAlterVol      $0A
000B02FD 0680                       	dc.b	$06, nRst
000B02FF E6F6                       	smpsFMAlterVol      $F6
000B0301 B3                         	dc.b	nD4
000B0302 E60A                       	smpsFMAlterVol      $0A
000B0304 0680                       	dc.b	$06, nRst
000B0306 E6F6                       	smpsFMAlterVol      $F6
000B0308 B1B1                       	dc.b	nC4, nC4
000B030A E60A                       	smpsFMAlterVol      $0A
000B030C 06                         	dc.b	$06
000B030D E6F6                       	smpsFMAlterVol      $F6
000B030F AE                         	dc.b	nA3
000B0310 E60A                       	smpsFMAlterVol      $0A
000B0312 06                         	dc.b	$06
000B0313 E6F6                       	smpsFMAlterVol      $F6
000B0315 B0                         	dc.b	nB3
000B0316 EF02                       	smpsSetvoice        $02
000B0318 E918                       	smpsAlterPitch      $18
000B031A E080                       	smpsPan             panLeft, $00
000B031C F800 00                    	smpsCall            Tribute_Call02
000B031F EF01                       	smpsSetvoice        $01
000B0321 E9E8                       	smpsAlterPitch      $E8
000B0323 E0C0                       	smpsPan             panCenter, $00
000B0325 F800 00                    	smpsCall            Tribute_Call02
000B0328 AF06 E712 18B1 1818        	dc.b	nBb3, $06, smpsNoAttack, $12, $18, nC4, $18, $18
000B0330 E60A                       	smpsFMAlterVol      $0A
000B0332 06                         	dc.b	$06
000B0333 E6F6                       	smpsFMAlterVol      $F6
000B0335 B112 B006                  	dc.b	nC4, $12, nB3, $06
000B0339 E60A                       	smpsFMAlterVol      $0A
000B033B 0680                       	dc.b	$06, nRst
000B033D E6F6                       	smpsFMAlterVol      $F6
000B033F B3                         	dc.b	nD4
000B0340 E60A                       	smpsFMAlterVol      $0A
000B0342 0680                       	dc.b	$06, nRst
000B0344 E6F6                       	smpsFMAlterVol      $F6
000B0346 B1B1                       	dc.b	nC4, nC4
000B0348 E60A                       	smpsFMAlterVol      $0A
000B034A 06                         	dc.b	$06
000B034B E6F6                       	smpsFMAlterVol      $F6
000B034D AE                         	dc.b	nA3
000B034E E60A                       	smpsFMAlterVol      $0A
000B0350 06                         	dc.b	$06
000B0351 E6F6                       	smpsFMAlterVol      $F6
000B0353 B0                         	dc.b	nB3
000B0354 EF02                       	smpsSetvoice        $02
000B0356 E918                       	smpsAlterPitch      $18
000B0358 E080                       	smpsPan             panLeft, $00
000B035A F800 00                    	smpsCall            Tribute_Call02
000B035D EF01                       	smpsSetvoice        $01
000B035F E9E8                       	smpsAlterPitch      $E8
000B0361 E0C0                       	smpsPan             panCenter, $00
000B0363 F800 00                    	smpsCall            Tribute_Call02
000B0366 AE06 E760 E748 8018        	dc.b	nA3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B036E                            
000B036E                            Tribute_Loop03:
000B036E 8018 B112                  	dc.b	nRst, $18, nC4, $12
000B0372 E60A                       	smpsFMAlterVol      $0A
000B0374 06                         	dc.b	$06
000B0375 E6F6                       	smpsFMAlterVol      $F6
000B0377 0C                         	dc.b	$0C
000B0378 E60A                       	smpsFMAlterVol      $0A
000B037A 06                         	dc.b	$06
000B037B E6F6                       	smpsFMAlterVol      $F6
000B037D 06                         	dc.b	$06
000B037E E60A                       	smpsFMAlterVol      $0A
000B0380 06                         	dc.b	$06
000B0381 E6F6                       	smpsFMAlterVol      $F6
000B0383 06                         	dc.b	$06
000B0384 E60A                       	smpsFMAlterVol      $0A
000B0386 06                         	dc.b	$06
000B0387 E6F6                       	smpsFMAlterVol      $F6
000B0389 B0E7 60                    	dc.b	nB3, smpsNoAttack, $60
000B038C F700 02FF DE               	smpsLoop            $00, $02, Tribute_Loop03
000B0391 8018 B112                  	dc.b	nRst, $18, nC4, $12
000B0395 E60A                       	smpsFMAlterVol      $0A
000B0397 06                         	dc.b	$06
000B0398 E6F6                       	smpsFMAlterVol      $F6
000B039A 0C                         	dc.b	$0C
000B039B E60A                       	smpsFMAlterVol      $0A
000B039D 06                         	dc.b	$06
000B039E E6F6                       	smpsFMAlterVol      $F6
000B03A0 06                         	dc.b	$06
000B03A1 E60A                       	smpsFMAlterVol      $0A
000B03A3 06                         	dc.b	$06
000B03A4 E6F6                       	smpsFMAlterVol      $F6
000B03A6 06                         	dc.b	$06
000B03A7 E60A                       	smpsFMAlterVol      $0A
000B03A9 06                         	dc.b	$06
000B03AA E6F6                       	smpsFMAlterVol      $F6
000B03AC AFE7 6080 18B1 12          	dc.b	nBb3, smpsNoAttack, $60, nRst, $18, nC4, $12
000B03B3 E60A                       	smpsFMAlterVol      $0A
000B03B5 06                         	dc.b	$06
000B03B6 E6F6                       	smpsFMAlterVol      $F6
000B03B8 0C                         	dc.b	$0C
000B03B9 E60A                       	smpsFMAlterVol      $0A
000B03BB 06                         	dc.b	$06
000B03BC E6F6                       	smpsFMAlterVol      $F6
000B03BE 06                         	dc.b	$06
000B03BF E60A                       	smpsFMAlterVol      $0A
000B03C1 06                         	dc.b	$06
000B03C2 E6F6                       	smpsFMAlterVol      $F6
000B03C4 06                         	dc.b	$06
000B03C5 E60A                       	smpsFMAlterVol      $0A
000B03C7 06                         	dc.b	$06
000B03C8 E6F6                       	smpsFMAlterVol      $F6
000B03CA B1E7 30B0 18B3             	dc.b	nC4, smpsNoAttack, $30, nB3, $18, nD4
000B03D0 F701 02FF 9A               	smpsLoop            $01, $02, Tribute_Loop03
000B03D5 B11E                       	dc.b	nC4, $1E
000B03D7 E60A                       	smpsFMAlterVol      $0A
000B03D9 06                         	dc.b	$06
000B03DA E6F6                       	smpsFMAlterVol      $F6
000B03DC B12A                       	dc.b	nC4, $2A
000B03DE E60A                       	smpsFMAlterVol      $0A
000B03E0 06                         	dc.b	$06
000B03E1 E6F6                       	smpsFMAlterVol      $F6
000B03E3 B12A                       	dc.b	nC4, $2A
000B03E5 E60A                       	smpsFMAlterVol      $0A
000B03E7 06                         	dc.b	$06
000B03E8 E6F6                       	smpsFMAlterVol      $F6
000B03EA B12A                       	dc.b	nC4, $2A
000B03EC E60A                       	smpsFMAlterVol      $0A
000B03EE 06                         	dc.b	$06
000B03EF E6F6                       	smpsFMAlterVol      $F6
000B03F1 B10C E74E                  	dc.b	nC4, $0C, smpsNoAttack, $4E
000B03F5 E60A                       	smpsFMAlterVol      $0A
000B03F7 06                         	dc.b	$06
000B03F8 E6F6                       	smpsFMAlterVol      $F6
000B03FA B00C E760                  	dc.b	nB3, $0C, smpsNoAttack, $60
000B03FE E9F4                       	smpsAlterPitch      $F4
000B0400 F8FE C8                    	smpsCall            Tribute_Call03
000B0403 E90C                       	smpsAlterPitch      $0C
000B0405 F2                         	smpsStop
000B0406                            
000B0406                            Tribute_Call02:
000B0406 B106 E712 B006             	dc.b	nC4, $06, smpsNoAttack, $12, nB3, $06
000B040C E60A                       	smpsFMAlterVol      $0A
000B040E 0680                       	dc.b	$06, nRst
000B0410 E6F6                       	smpsFMAlterVol      $F6
000B0412 B3                         	dc.b	nD4
000B0413 E60A                       	smpsFMAlterVol      $0A
000B0415 0680                       	dc.b	$06, nRst
000B0417 E6F6                       	smpsFMAlterVol      $F6
000B0419 B1B1                       	dc.b	nC4, nC4
000B041B E60A                       	smpsFMAlterVol      $0A
000B041D 06                         	dc.b	$06
000B041E E6F6                       	smpsFMAlterVol      $F6
000B0420 AE                         	dc.b	nA3
000B0421 E60A                       	smpsFMAlterVol      $0A
000B0423 06                         	dc.b	$06
000B0424 E6F6                       	smpsFMAlterVol      $F6
000B0426 B0                         	dc.b	nB3
000B0427 E3                         	smpsReturn
000B0428                            
000B0428                            ; FM4 Data
000B0428                            Tribute_FM4:
000B0428 EF01                       	smpsSetvoice        $01
000B042A AC12 06                    	dc.b	nG3, $12, $06
000B042D E60A                       	smpsFMAlterVol      $0A
000B042F 0680                       	dc.b	$06, nRst
000B0431 E6F6                       	smpsFMAlterVol      $F6
000B0433 AF                         	dc.b	nBb3
000B0434 E60A                       	smpsFMAlterVol      $0A
000B0436 0680                       	dc.b	$06, nRst
000B0438 E6F6                       	smpsFMAlterVol      $F6
000B043A ACAC                       	dc.b	nG3, nG3
000B043C E60A                       	smpsFMAlterVol      $0A
000B043E 06                         	dc.b	$06
000B043F E6F6                       	smpsFMAlterVol      $F6
000B0441 AA                         	dc.b	nF3
000B0442 E60A                       	smpsFMAlterVol      $0A
000B0444 06                         	dc.b	$06
000B0445 E6F6                       	smpsFMAlterVol      $F6
000B0447 AC                         	dc.b	nG3
000B0448 EF02                       	smpsSetvoice        $02
000B044A E918                       	smpsAlterPitch      $18
000B044C E040                       	smpsPan             panRight, $00
000B044E F800 00                    	smpsCall            Tribute_Call01
000B0451 EF01                       	smpsSetvoice        $01
000B0453 E9E8                       	smpsAlterPitch      $E8
000B0455 E0C0                       	smpsPan             panCenter, $00
000B0457 F800 00                    	smpsCall            Tribute_Call01
000B045A AC06 E712 18AE 1818        	dc.b	nG3, $06, smpsNoAttack, $12, $18, nA3, $18, $18
000B0462 E60A                       	smpsFMAlterVol      $0A
000B0464 06                         	dc.b	$06
000B0465 E6F6                       	smpsFMAlterVol      $F6
000B0467 AC12 06                    	dc.b	nG3, $12, $06
000B046A E60A                       	smpsFMAlterVol      $0A
000B046C 0680                       	dc.b	$06, nRst
000B046E E6F6                       	smpsFMAlterVol      $F6
000B0470 AF                         	dc.b	nBb3
000B0471 E60A                       	smpsFMAlterVol      $0A
000B0473 0680                       	dc.b	$06, nRst
000B0475 E6F6                       	smpsFMAlterVol      $F6
000B0477 ACAC                       	dc.b	nG3, nG3
000B0479 E60A                       	smpsFMAlterVol      $0A
000B047B 06                         	dc.b	$06
000B047C E6F6                       	smpsFMAlterVol      $F6
000B047E AA                         	dc.b	nF3
000B047F E60A                       	smpsFMAlterVol      $0A
000B0481 06                         	dc.b	$06
000B0482 E6F6                       	smpsFMAlterVol      $F6
000B0484 AC                         	dc.b	nG3
000B0485 EF02                       	smpsSetvoice        $02
000B0487 E918                       	smpsAlterPitch      $18
000B0489 E040                       	smpsPan             panRight, $00
000B048B F800 00                    	smpsCall            Tribute_Call01
000B048E EF01                       	smpsSetvoice        $01
000B0490 E9E8                       	smpsAlterPitch      $E8
000B0492 E0C0                       	smpsPan             panCenter, $00
000B0494 F800 00                    	smpsCall            Tribute_Call01
000B0497 AA06 E760 E748 8018        	dc.b	nF3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B049F                            
000B049F                            Tribute_Loop02:
000B049F 8018 AC12                  	dc.b	nRst, $18, nG3, $12
000B04A3 E60A                       	smpsFMAlterVol      $0A
000B04A5 06                         	dc.b	$06
000B04A6 E6F6                       	smpsFMAlterVol      $F6
000B04A8 0C                         	dc.b	$0C
000B04A9 E60A                       	smpsFMAlterVol      $0A
000B04AB 06                         	dc.b	$06
000B04AC E6F6                       	smpsFMAlterVol      $F6
000B04AE 06                         	dc.b	$06
000B04AF E60A                       	smpsFMAlterVol      $0A
000B04B1 06                         	dc.b	$06
000B04B2 E6F6                       	smpsFMAlterVol      $F6
000B04B4 06                         	dc.b	$06
000B04B5 E60A                       	smpsFMAlterVol      $0A
000B04B7 06                         	dc.b	$06
000B04B8 E6F6                       	smpsFMAlterVol      $F6
000B04BA ACE7 60                    	dc.b	nG3, smpsNoAttack, $60
000B04BD F700 02FF DE               	smpsLoop            $00, $02, Tribute_Loop02
000B04C2 8018 AC12                  	dc.b	nRst, $18, nG3, $12
000B04C6 E60A                       	smpsFMAlterVol      $0A
000B04C8 06                         	dc.b	$06
000B04C9 E6F6                       	smpsFMAlterVol      $F6
000B04CB 0C                         	dc.b	$0C
000B04CC E60A                       	smpsFMAlterVol      $0A
000B04CE 06                         	dc.b	$06
000B04CF E6F6                       	smpsFMAlterVol      $F6
000B04D1 06                         	dc.b	$06
000B04D2 E60A                       	smpsFMAlterVol      $0A
000B04D4 06                         	dc.b	$06
000B04D5 E6F6                       	smpsFMAlterVol      $F6
000B04D7 06                         	dc.b	$06
000B04D8 E60A                       	smpsFMAlterVol      $0A
000B04DA 06                         	dc.b	$06
000B04DB E6F6                       	smpsFMAlterVol      $F6
000B04DD AAE7 6080 18AC 12          	dc.b	nF3, smpsNoAttack, $60, nRst, $18, nG3, $12
000B04E4 E60A                       	smpsFMAlterVol      $0A
000B04E6 06                         	dc.b	$06
000B04E7 E6F6                       	smpsFMAlterVol      $F6
000B04E9 0C                         	dc.b	$0C
000B04EA E60A                       	smpsFMAlterVol      $0A
000B04EC 06                         	dc.b	$06
000B04ED E6F6                       	smpsFMAlterVol      $F6
000B04EF 06                         	dc.b	$06
000B04F0 E60A                       	smpsFMAlterVol      $0A
000B04F2 06                         	dc.b	$06
000B04F3 E6F6                       	smpsFMAlterVol      $F6
000B04F5 06                         	dc.b	$06
000B04F6 E60A                       	smpsFMAlterVol      $0A
000B04F8 06                         	dc.b	$06
000B04F9 E6F6                       	smpsFMAlterVol      $F6
000B04FB AEE7 30AD 18B0             	dc.b	nA3, smpsNoAttack, $30, nAb3, $18, nB3
000B0501 F701 02FF 9A               	smpsLoop            $01, $02, Tribute_Loop02
000B0506 AC1E                       	dc.b	nG3, $1E
000B0508 E60A                       	smpsFMAlterVol      $0A
000B050A 06                         	dc.b	$06
000B050B E6F6                       	smpsFMAlterVol      $F6
000B050D AD2A                       	dc.b	nAb3, $2A
000B050F E60A                       	smpsFMAlterVol      $0A
000B0511 06                         	dc.b	$06
000B0512 E6F6                       	smpsFMAlterVol      $F6
000B0514 AC2A                       	dc.b	nG3, $2A
000B0516 E60A                       	smpsFMAlterVol      $0A
000B0518 06                         	dc.b	$06
000B0519 E6F6                       	smpsFMAlterVol      $F6
000B051B AE2A                       	dc.b	nA3, $2A
000B051D E60A                       	smpsFMAlterVol      $0A
000B051F 06                         	dc.b	$06
000B0520 E6F6                       	smpsFMAlterVol      $F6
000B0522 AE0C E74E                  	dc.b	nA3, $0C, smpsNoAttack, $4E
000B0526 E60A                       	smpsFMAlterVol      $0A
000B0528 06                         	dc.b	$06
000B0529 E6F6                       	smpsFMAlterVol      $F6
000B052B AC0C E760 8060             	dc.b	nG3, $0C, smpsNoAttack, $60, nRst, $60
000B0531 F2                         	smpsStop
000B0532                            
000B0532                            Tribute_Call01:
000B0532 AC06 E712 AC06             	dc.b	nG3, $06, smpsNoAttack, $12, nG3, $06
000B0538 E60A                       	smpsFMAlterVol      $0A
000B053A 0680                       	dc.b	$06, nRst
000B053C E6F6                       	smpsFMAlterVol      $F6
000B053E AF                         	dc.b	nBb3
000B053F E60A                       	smpsFMAlterVol      $0A
000B0541 0680                       	dc.b	$06, nRst
000B0543 E6F6                       	smpsFMAlterVol      $F6
000B0545 ACAC                       	dc.b	nG3, nG3
000B0547 E60A                       	smpsFMAlterVol      $0A
000B0549 06                         	dc.b	$06
000B054A E6F6                       	smpsFMAlterVol      $F6
000B054C AA                         	dc.b	nF3
000B054D E60A                       	smpsFMAlterVol      $0A
000B054F 06                         	dc.b	$06
000B0550 E6F6                       	smpsFMAlterVol      $F6
000B0552 AC                         	dc.b	nG3
000B0553 E3                         	smpsReturn
000B0554                            
000B0554                            ; FM5 Data
000B0554                            Tribute_FM5:
000B0554 EF02                       	smpsSetvoice        $02
000B0556                            
000B0556                            Tribute_Jump00:
000B0556 8060 8080 800C B406 B6B8+  	dc.b	nRst, $60, nRst, nRst, nRst, $0C, nEb4, $06, nF4, nG4, nD5, $12
000B0562 800C B606 B8BA C412 8060+  	dc.b	nRst, $0C, nF4, $06, nG4, nA4, nG5, $12, nRst, $60, nRst, $60
000B056E 805A D706 CECD C9C4 CECD+  	dc.b	nRst, $5A, nD7, $06, nF6, nE6, nC6, nG5, nF6, nE6, nC6, nG5
000B057A C2C1 BDB8 B6B5 B1AC AA48+  	dc.b	nF5, nE5, nC5, nG4, nF4, nE4, nC4, nG3, nF3, $48, nRst, $18
000B0586                            
000B0586                            Tribute_Loop01:
000B0586 8060 800C B106 B3B8 BDBF+  	dc.b	nRst, $60, nRst, $0C, nC4, $06, nD4, nG4, nC5, nD5, nG5, nC5
000B0592 BFC4 BFC4 C9C4 BF80 6080+  	dc.b	nD5, nG5, nD5, nG5, nC6, nG5, nD5, nRst, $60, nRst, $0C, nC5
000B059E 06C4 BDBF C4C6 BDB8 BDBF+  	dc.b	$06, nG5, nC5, nD5, nG5, nA5, nC5, nG4, nC5, nD5, nG5, nC5
000B05AA BFC4 8060 800C B806 BABD+  	dc.b	nD5, nG5, nRst, $60, nRst, $0C, nG4, $06, nA4, nC5, nA4, nC5
000B05B6 BFC4 C2BD BFB8 B3BD BF80+  	dc.b	nD5, nG5, nF5, nC5, nD5, nG4, nD4, nC5, nD5, nRst, $60, nG5
000B05C2 06C2 BDBA C4C2 BDBA C4C2+  	dc.b	$06, nF5, nC5, nA4, nG5, nF5, nC5, nA4, nG5, nF5, nD5, nB4
000B05CE B9BA BCBF                  	dc.b	nAb4, nA4, nB4, nD5
000B05D2 F700 02FF B0               	smpsLoop            $00, $02, Tribute_Loop01
000B05D7 800C B806 BDBF C1C2 0C80+  	dc.b	nRst, $0C, nG4, $06, nC5, nD5, nE5, nF5, $0C, nRst, $30, nRst
000B05E3 0CB8 06BD BFC1 C60C 8030+  	dc.b	$0C, nG4, $06, nC5, nD5, nE5, nA5, $0C, nRst, $30, nRst, $0C
000B05EF C6C4 C2C1 18BD 0CBF E70C+  	dc.b	nA5, nG5, nF5, nE5, $18, nC5, $0C, nD5, smpsNoAttack, $0C, nB4, nC5
000B05FB BFB3 06B8 BABF B8BA BFC4   	dc.b	nD5, nD4, $06, nG4, nA4, nD5, nG4, nA4, nD5, nG5
000B0605 E918                       	smpsAlterPitch      $18
000B0607 F8FB 98                    	smpsCall            Tribute_Call00
000B060A E9E8                       	smpsAlterPitch      $E8
000B060C F2                         	smpsStop
000B060D                            
000B060D                            ; FM6 Data
000B060D                            Tribute_FM6:
000B060D EF02                       	smpsSetvoice        $02
000B060F E040                       	smpsPan             panRight, $00
000B0616 E104                       	smpsAlterNote       $04
000B0618 8006                       	dc.b	nRst, $06
000B061A F6FF 3A                    	smpsJump            Tribute_Jump00
000B061D                            
000B061D                            ; PSG1 Data
000B061D                            Tribute_PSG1:
000B061D F505                       	smpsPSGvoice        sTone_09
000B0624 A760 E760 E760 E760 A760+  	dc.b	nD3, $60, smpsNoAttack, $60, smpsNoAttack, $60, smpsNoAttack, $60, nD3, $60, smpsNoAttack, $60
000B0630 E75A AC06 E760 E748 8018   	dc.b	smpsNoAttack, $5A, nG3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B063F ECFD                       	smpsPSGAlterVol     $FD
000B0641                            
000B0641                            Tribute_Jump01:
000B0641 F505                       	smpsPSGvoice        sTone_09
000B0643 F800 00                    	smpsCall            Tribute_Call07
000B0646 E706 AAAC AEB0 02B1 B0AC+  	dc.b	smpsNoAttack, $06, nF3, nG3, nA3, nB3, $02, nC4, nB3, nG3, $06, nA3
000B0652 B0B1 AEB0 B1B3 B5B6 BA     	dc.b	nB3, nC4, nA3, nB3, nC4, nD4, nE4, nF4, nA4
000B065B F800 00                    	smpsCall            Tribute_Call07
000B065E E70C AEB0 B106 80B3 0CB5+  	dc.b	smpsNoAttack, $0C, nA3, nB3, nC4, $06, nRst, nD4, $0C, nE4, $06, nRst
000B066A B60C B306 80B8 1E80 06B9+  	dc.b	nF4, $0C, nD4, $06, nRst, nG4, $1E, nRst, $06, nAb4, $18, nG4
000B0676 0680 B680 B50C E70C B3B1+  	dc.b	$06, nRst, nF4, nRst, nE4, $0C, smpsNoAttack, $0C, nD4, nC4, $06, nRst
000B0682 B318 AE0C B006 80B1 0CE7+  	dc.b	nD4, $18, nA3, $0C, nB3, $06, nRst, nC4, $0C, smpsNoAttack, $3C, nB3
000B068E 0CB1 0680 B30C E73C B80C+  	dc.b	$0C, nC4, $06, nRst, nD4, $0C, smpsNoAttack, $3C, nG4, $0C, nD5, nG5
000B069A E918                       	smpsAlterPitch      $18
000B069C F8FB 03                    	smpsCall            Tribute_Call00
000B069F E9E8                       	smpsAlterPitch      $E8
000B06A1 F2                         	smpsStop
000B06A2                            
000B06A2                            Tribute_Call07:
000B06A2 B703 B833 8006 BC80 BDBF+  	dc.b	nFs4, $03, nG4, $33, nRst, $06, nB4, nRst, nC5, nD5, nRst, nFs4
000B06AE 03B8 03E7 3680 06B5 80B3+  	dc.b	$03, nG4, $03, smpsNoAttack, $36, nRst, $06, nE4, nRst, nD4, nC4, nRst
000B06BA B702 B804 E736 8006 BC80+  	dc.b	nFs4, $02, nG4, $04, smpsNoAttack, $36, nRst, $06, nB4, nRst, nC5, nD5
000B06C6 80B8 E712 8006 B512 8006+  	dc.b	nRst, nG4, smpsNoAttack, $12, nRst, $06, nE4, $12, nRst, $06, nD4, $12
000B06D2 8006 B50C 8006 B1E7 3680+  	dc.b	nRst, $06, nE4, $0C, nRst, $06, nC4, smpsNoAttack, $36, nRst, $06, nC5
000B06DE 80BC BD80 B1E7 3680 06BD+  	dc.b	nRst, nB4, nC5, nRst, nC4, smpsNoAttack, $36, nRst, $06, nC5, nRst, nB4
000B06EA BD80 B1E7 3CB5 0CB3 B1     	dc.b	nC5, nRst, nC4, smpsNoAttack, $3C, nE4, $0C, nD4, nC4
000B06F3 E3                         	smpsReturn
000B06F4                            
000B06F4                            ; PSG2 Data
000B06F4                            Tribute_PSG2:
000B06F4 F505                       	smpsPSGvoice        sTone_09
000B06FB 9B60 E760 E760 E760 9B60+  	dc.b	nD2, $60, smpsNoAttack, $60, smpsNoAttack, $60, smpsNoAttack, $60, nD2, $60, smpsNoAttack, $60
000B0707 E75A A006 E760 E748 8018   	dc.b	smpsNoAttack, $5A, nG2, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B0711 ECFF                       	smpsPSGAlterVol     $FF
000B0718 8006                       	dc.b	nRst, $06
000B071A F6FF 25                    	smpsJump            Tribute_Jump01
000B071D                            
000B071D                            ; PSG3 Data
000B071D                            Tribute_PSG3:
000B071D F3E7                       	smpsPSGform         $E7
000B071F F502                       	smpsPSGvoice        sTone_02
000B0721 AF18 1818 0606 06          	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $18, $06, $06, $06
000B0728 F501                       	smpsPSGvoice        sTone_05
000B072A 0680 18                    	dc.b	$06, nRst, $18
000B072D F502                       	smpsPSGvoice        sTone_02
000B072F AF18 1806                  	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $06
000B0733 F501                       	smpsPSGvoice        sTone_05
000B0735 06                         	dc.b	$06
000B0736 F502                       	smpsPSGvoice        sTone_02
000B0738 06                         	dc.b	$06
000B0739 F501                       	smpsPSGvoice        sTone_05
000B073B 06                         	dc.b	$06
000B073C F502                       	smpsPSGvoice        sTone_02
000B073E 8018 AF18 1806 0606        	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06, $06, $06
000B0746 F501                       	smpsPSGvoice        sTone_05
000B0748 0680 12AF 06               	dc.b	$06, nRst, $12, (nMaxPSG2-$23)&$FF, $06
000B074D F502                       	smpsPSGvoice        sTone_02
000B074F 06                         	dc.b	$06
000B0750 F501                       	smpsPSGvoice        sTone_05
000B0752 06                         	dc.b	$06
000B0753 F502                       	smpsPSGvoice        sTone_02
000B0755 06                         	dc.b	$06
000B0756 F501                       	smpsPSGvoice        sTone_05
000B0758 06                         	dc.b	$06
000B0759 F502                       	smpsPSGvoice        sTone_02
000B075B 800C AF06                  	dc.b	nRst, $0C, (nMaxPSG2-$23)&$FF, $06
000B075F F501                       	smpsPSGvoice        sTone_05
000B0761 06                         	dc.b	$06
000B0762 F502                       	smpsPSGvoice        sTone_02
000B0764 06                         	dc.b	$06
000B0765 F501                       	smpsPSGvoice        sTone_05
000B0767 06                         	dc.b	$06
000B0768 F502                       	smpsPSGvoice        sTone_02
000B076A 0C                         	dc.b	$0C
000B076B F502                       	smpsPSGvoice        sTone_02
000B076D AF18 1818 0606 06          	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $18, $06, $06, $06
000B0774 F501                       	smpsPSGvoice        sTone_05
000B0776 06                         	dc.b	$06
000B0777 F502                       	smpsPSGvoice        sTone_02
000B0779 8018 AF18 1806             	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06
000B077F F501                       	smpsPSGvoice        sTone_05
000B0781 06                         	dc.b	$06
000B0782 F502                       	smpsPSGvoice        sTone_02
000B0784 06                         	dc.b	$06
000B0785 F501                       	smpsPSGvoice        sTone_05
000B0787 06                         	dc.b	$06
000B0788 F502                       	smpsPSGvoice        sTone_02
000B078A 8018 AF18 1806 0606        	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06, $06, $06
000B0792 F501                       	smpsPSGvoice        sTone_05
000B0794 0680 6080                  	dc.b	$06, nRst, $60, nRst
000B0798                            
000B0798                            Tribute_Loop06:
000B0798 F800 00                    	smpsCall            Tribute_Call06
000B079B 800C                       	dc.b	nRst, $0C
000B079D F502                       	smpsPSGvoice        sTone_02
000B079F AF0C 0C0C 0C0C 8018        	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, $0C, $0C, nRst, $18
000B07A7 F800 00                    	smpsCall            Tribute_Call06
000B07AA 800C                       	dc.b	nRst, $0C
000B07AC F502                       	smpsPSGvoice        sTone_02
000B07AE AF0C 0C0C 8030             	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, nRst, $30
000B07B4 F700 02FF E0               	smpsLoop            $00, $02, Tribute_Loop06
000B07B9 E718                       	dc.b	smpsNoAttack, $18
000B07BB F502                       	smpsPSGvoice        sTone_02
000B07BD AF80 AF80 AF80 AF80 AF80+  	dc.b	(nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst
000B07C9 AF                         	dc.b	(nMaxPSG2-$23)&$FF
000B07CA F2                         	smpsStop
000B07CB                            
000B07CB                            Tribute_Call06:
000B07CB F502                       	smpsPSGvoice        sTone_02
000B07CD 0C0C 0C0C 0C06 0606        	dc.b	$0C, $0C, $0C, $0C, $0C, $06, $06, $06
000B07D5 F501                       	smpsPSGvoice        sTone_05
000B07D7 06                         	dc.b	$06
000B07D8 F502                       	smpsPSGvoice        sTone_02
000B07DA 06                         	dc.b	$06
000B07DB F501                       	smpsPSGvoice        sTone_05
000B07DD 0680 0C                    	dc.b	$06, nRst, $0C
000B07E0 F502                       	smpsPSGvoice        sTone_02
000B07E2 AF0C 0C0C 0C0C 0C06 06     	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, $0C, $0C, $0C, $06, $06
000B07EB F502                       	smpsPSGvoice        sTone_02
000B07ED 0C0C 0C0C 0C06 0606        	dc.b	$0C, $0C, $0C, $0C, $0C, $06, $06, $06
000B07F5 F501                       	smpsPSGvoice        sTone_05
000B07F7 06                         	dc.b	$06
000B07F8 F502                       	smpsPSGvoice        sTone_02
000B07FA 06                         	dc.b	$06
000B07FB F501                       	smpsPSGvoice        sTone_05
000B07FD 06                         	dc.b	$06
000B07FE E3                         	smpsReturn
000B07FF                            
000B07FF                            ; DAC Data
000B07FF                            Tribute_DAC:
000B07FF 8148 8218 8148 8206 8906   	dc.b	dKick, $48, dSnare, $18, dKick, $48, dSnare, $06, dMidTimpani, $06
000B0809 E690                       	smpsFMAlterVol      $90
000B080B 8A0C                       	dc.b	dLowTimpani, $0C
000B080D E670                       	smpsFMAlterVol      $70
000B080F 8148 8218 8130 8206        	dc.b	dKick, $48, dSnare, $18, dKick, $30, dSnare, $06
000B0817 E6F9                       	smpsFMAlterVol      $F9
000B0819 88                         	dc.b	dHiTimpani
000B081A E607                       	smpsFMAlterVol      $07
000B081C 8982                       	dc.b	dMidTimpani, dSnare
000B081E E690                       	smpsFMAlterVol      $90
000B0820 8A                         	dc.b	dLowTimpani
000B0821 E670                       	smpsFMAlterVol      $70
000B0823 8282 8281 4882 1881 4882+  	dc.b	dSnare, dSnare, dSnare, dKick, $48, dSnare, $18, dKick, $48, dSnare, $06, dMidTimpani
000B082F 06                         	dc.b	$06
000B0830 E690                       	smpsFMAlterVol      $90
000B0832 8A0C                       	dc.b	dLowTimpani, $0C
000B0834 E670                       	smpsFMAlterVol      $70
000B0836 8148 8218 8160 8148 8218   	dc.b	dKick, $48, dSnare, $18, dKick, $60, dKick, $48, dSnare, $18
000B0840                            
000B0840                            Tribute_Loop00:
000B0840 8118 8281 8281 8281 8281+  	dc.b	dKick, $18, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick
000B084C 8281 8281 8206             	dc.b	dSnare, dKick, dSnare, dKick, dSnare, $06
000B0852 E6F9                       	smpsFMAlterVol      $F9
000B0854 88                         	dc.b	dHiTimpani
000B0855 E607                       	smpsFMAlterVol      $07
000B0857 8982 8118 8281 8281 8281+  	dc.b	dMidTimpani, dSnare, dKick, $18, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick
000B0863 8281 8281 8281 06          	dc.b	dSnare, dKick, dSnare, dKick, dSnare, dKick, $06
000B086A E607                       	smpsFMAlterVol      $07
000B086C 88                         	dc.b	dHiTimpani
000B086D E6F9                       	smpsFMAlterVol      $F9
000B086F 8982 8182 8282             	dc.b	dMidTimpani, dSnare, dKick, dSnare, dSnare, dSnare
000B0875 F700 02FF C7               	smpsLoop            $00, $02, Tribute_Loop00
000B087A 813C 820C                  	dc.b	dKick, $3C, dSnare, $0C
000B087E E6F9                       	smpsFMAlterVol      $F9
000B0880 8804                       	dc.b	dHiTimpani, $04
000B0882 E607                       	smpsFMAlterVol      $07
000B0884 89                         	dc.b	dMidTimpani
000B0885 E690                       	smpsFMAlterVol      $90
000B0887 8A                         	dc.b	dLowTimpani
000B0888 E670                       	smpsFMAlterVol      $70
000B088A 810C 813C 8206 8282 8281+  	dc.b	dKick, $0C, dKick, $3C, dSnare, $06, dSnare, dSnare, dSnare, dKick, $0C, dKick
000B0896 6081 36                    	dc.b	$60, dKick, $36
000B0899 E6F9                       	smpsFMAlterVol      $F9
000B089B 8806                       	dc.b	dHiTimpani, $06
000B089D E607                       	smpsFMAlterVol      $07
000B089F 89                         	dc.b	dMidTimpani
000B08A0 E690                       	smpsFMAlterVol      $90
000B08A2 8A                         	dc.b	dLowTimpani
000B08A3 E670                       	smpsFMAlterVol      $70
000B08A5 8282 8282 8182 8282 8282+  	dc.b	dSnare, dSnare, dSnare, dSnare, dKick, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dKick
000B08B1 8182                       	dc.b	dKick, dSnare
000B08B3 E6F9                       	smpsFMAlterVol      $F9
000B08B5 88                         	dc.b	dHiTimpani
000B08B6 E607                       	smpsFMAlterVol      $07
000B08B8 8982                       	dc.b	dMidTimpani, dSnare
000B08BA E690                       	smpsFMAlterVol      $90
000B08BC 8A                         	dc.b	dLowTimpani
000B08BD E670                       	smpsFMAlterVol      $70
000B08BF 8281 8182 8289 82          	dc.b	dSnare, dKick, dKick, dSnare, dSnare, dMidTimpani, dSnare
000B08C6 E690                       	smpsFMAlterVol      $90
000B08C8 8A                         	dc.b	dLowTimpani
000B08C9 E670                       	smpsFMAlterVol      $70
000B08CB 8281                       	dc.b	dSnare, dKick
000B08CD F2                         	smpsStop
000B08CE                            
000B08CE                            Tribute_Voices:
000B08CE                            ;	Voice $00
000B08CE                            ;	$3B
000B08CE                            ;	$53, $31, $02, $03, 	$DF, $9F, $5F, $9F, 	$17, $08, $0E, $07
000B08CE                            ;	$0F, $0E, $0D, $02, 	$5F, $7F, $3F, $5F, 	$0C, $16, $1F, $80
000B08CE                            	smpsVcAlgorithm     $03
000B08CE                            	smpsVcFeedback      $07
000B08CE                            	smpsVcUnusedBits    $00
000B08CE                            	smpsVcDetune        $00, $00, $03, $05
000B08CE                            	smpsVcCoarseFreq    $03, $02, $01, $03
000B08CE                            	smpsVcRateScale     $02, $01, $02, $03
000B08CE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B08CE                            	smpsVcAmpMod        $00, $00, $00, $00
000B08CE                            	smpsVcDecayRate1    $07, $0E, $08, $17
000B08CE                            	smpsVcDecayRate2    $02, $0D, $0E, $0F
000B08CE                            	smpsVcDecayLevel    $05, $03, $07, $05
000B08CE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B08E7                            
000B08E7                            ;	Voice $01
000B08E7                            ;	$3D
000B08E7                            ;	$52, $02, $04, $01, 	$94, $19, $19, $19, 	$11, $0D, $0D, $0D
000B08E7                            ;	$07, $04, $04, $04, 	$35, $1A, $1A, $1A, 	$0D, $80, $80, $80
000B08E7                            	smpsVcAlgorithm     $05
000B08E7                            	smpsVcFeedback      $07
000B08E7                            	smpsVcUnusedBits    $00
000B08E7                            	smpsVcDetune        $00, $00, $00, $05
000B08E7                            	smpsVcCoarseFreq    $01, $04, $02, $02
000B08E7                            	smpsVcRateScale     $00, $00, $00, $02
000B08E7                            	smpsVcAttackRate    $19, $19, $19, $14
000B08E7                            	smpsVcAmpMod        $00, $00, $00, $00
000B08E7                            	smpsVcDecayRate1    $0D, $0D, $0D, $11
000B08E7                            	smpsVcDecayRate2    $04, $04, $04, $07
000B08E7                            	smpsVcDecayLevel    $01, $01, $01, $03
000B08E7                            	smpsVcReleaseRate   $0A, $0A, $0A, $05
000B0900                            
000B0900                            ;	Voice $02
000B0900                            ;	$1F
000B0900                            ;	$26, $32, $07, $11, 	$9F, $9F, $9F, $9F, 	$06, $07, $09, $07
000B0900                            ;	$0D, $0F, $0D, $11, 	$9C, $9C, $9C, $9C, 	$80, $80, $80, $80
000B0900                            	smpsVcAlgorithm     $07
000B0900                            	smpsVcFeedback      $03
000B0900                            	smpsVcUnusedBits    $00
000B0900                            	smpsVcDetune        $01, $00, $03, $02
000B0900                            	smpsVcCoarseFreq    $01, $07, $02, $06
000B0900                            	smpsVcRateScale     $02, $02, $02, $02
000B0900                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B0900                            	smpsVcAmpMod        $00, $00, $00, $00
000B0900                            	smpsVcDecayRate1    $07, $09, $07, $06
000B0900                            	smpsVcDecayRate2    $11, $0D, $0F, $0D
000B0900                            	smpsVcDecayLevel    $09, $09, $09, $09
000B0900                            	smpsVcReleaseRate   $0C, $0C, $0C, $0C
000B0919                            
000B0919                            
000B091A 00                         		even		
000B091A                            ; ---------------------------------------------------------------------------
000B091A                            ; Sound	effect pointers
000B091A                            ; ---------------------------------------------------------------------------
000B091A                            SoundIndex:
000B091A 0000 0000                  ptr_sndA0:	dc.l SoundA0
000B091E 0000 0000                  ptr_sndA1:	dc.l SoundA1
000B0922 0000 0000                  ptr_sndA2:	dc.l SoundA2
000B0926 0000 0000                  ptr_sndA3:	dc.l SoundA3
000B092A 0000 0000                  ptr_sndA4:	dc.l SoundA4
000B092E 0000 0000                  ptr_sndA5:	dc.l SoundA5
000B0932 0000 0000                  ptr_sndA6:	dc.l SoundA6
000B0936 0000 0000                  ptr_sndA7:	dc.l SoundA7
000B093A 0000 0000                  ptr_sndA8:	dc.l SoundA8
000B093E 0000 0000                  ptr_sndA9:	dc.l SoundA9
000B0942 0000 0000                  ptr_sndAA:	dc.l SoundAA
000B0946 0000 0000                  ptr_FireShield:	dc.l SoundAB
000B094A 0000 0000                  ptr_sndAC:	dc.l SoundAC
000B094E 0000 0000                  ptr_sndAD:	dc.l SoundAD
000B0952 0000 0000                  ptr_sndAE:	dc.l SoundAE
000B0956 0000 0000                  ptr_sndAF:	dc.l SoundAF
000B095A 0000 0000                  ptr_sndB0:	dc.l SoundB0
000B095E 0000 0000                  ptr_sndB1:	dc.l SoundB1
000B0962 0000 0000                  ptr_sndB2:	dc.l SoundB2
000B0966 0000 0000                  ptr_sndB3:	dc.l SoundB3
000B096A 0000 0000                  ptr_sndB4:	dc.l SoundB4
000B096E 0000 0000                  ptr_sndB5:	dc.l SoundB5
000B0972 0000 0000                  ptr_sndB6:	dc.l SoundB6
000B0976 0000 0000                  ptr_sndB7:	dc.l SoundB7
000B097A 0000 0000                  ptr_sndB8:	dc.l SoundB8
000B097E 0000 0000                  ptr_sndB9:	dc.l SoundB9
000B0982 0000 0000                  ptr_sndBA:	dc.l SoundBA
000B0986 0000 0000                  ptr_sndBB:	dc.l SoundBB
000B098A 0000 0000                  ptr_sndBC:	dc.l SoundBC
000B098E 0000 0000                  ptr_sndBD:	dc.l SoundBD
000B0992 0000 0000                  ptr_sndBE:	dc.l SoundBE
000B0996 0000 0000                  ptr_sndBF:	dc.l SoundBF
000B099A 0000 0000                  ptr_sndC0:	dc.l SoundC0
000B099E 0000 0000                  ptr_sndC1:	dc.l SoundC1
000B09A2 0000 0000                  ptr_sndC2:	dc.l SoundC2
000B09A6 0000 0000                  ptr_sndC3:	dc.l SoundC3
000B09AA 0000 0000                  ptr_sndC4:	dc.l SoundC4
000B09AE 0000 0000                  ptr_sndC5:	dc.l SoundC5
000B09B2 0000 0000                  ptr_sndC6:	dc.l SoundC6
000B09B6 0000 0000                  ptr_sndC7:	dc.l SoundC7
000B09BA 0000 0000                  ptr_sndC8:	dc.l SoundC8
000B09BE 0000 0000                  ptr_sndC9:	dc.l SoundC9
000B09C2 0000 0000                  ptr_sndCA:	dc.l SoundCA
000B09C6 0000 0000                  ptr_sndCB:	dc.l SoundCB
000B09CA 0000 0000                  ptr_sndCC:	dc.l SoundCC
000B09CE 0000 0000                  ptr_sndCD:	dc.l SoundCD
000B09D2 0000 0000                  ptr_sndCE:	dc.l SoundCE
000B09D6 0000 0000                  ptr_sndCF:	dc.l SoundCF
000B09DA                            ptr_sndend
000B09DA                            ; ---------------------------------------------------------------------------
000B09DA                            ; Special sound effect pointers
000B09DA                            ; ---------------------------------------------------------------------------
000B09DA                            SpecSoundIndex:
000B09DA 0000 0000                  ptr_sndD0:	dc.l SoundD0
000B09DE 0000 0000                  ptr_sndD1:	dc.l SoundD1
000B09E2 0000 0000                  ptr_sndD2:	dc.l SoundD2
000B09E6 0000 0000                  ptr_sndD3:	dc.l SoundD3
000B09EA 0000 0000                  ptr_sndD4:	dc.l SoundD4
000B09EE 0000 0000                  ptr_sndD5:	dc.l SoundD5
000B09F2                            ptr_specend
000B09F2                            SoundA0:	include	"sound/sfx/Jump.asm"
000B09F2                            SndA0_Jump_Header:
000B09F2                            	smpsHeaderStartSong 1
000B09F4 01                         	smpsHeaderTempoSFX  $01
000B09F5 01                         	smpsHeaderChanSFX   $01
000B09F6                            
000B09FC                            
000B09FC                            ; PSG2 Data
000B09FC                            SndA0_Jump_PSG2:
000B09FC F500                       	smpsPSGvoice        $00
000B09FE 9E05                       	dc.b	nF2, $05
000B0A05 A315                       	dc.b	nBb2, $15
000B0A07 F2                         	smpsStop
000B0A08                            
000B0A08                            ; Song seems to not use any FM voices
000B0A08                            SndA0_Jump_Voices:
000B0A08                            SndA0_Jump_Voices:
000B0A08                            		even
000B0A08                            SoundA1:	incbin	"sound/sfx/SndA1 - Lamppost.bin"
000B0A32                            		even
000B0A32                            SoundA2:	include	"sound/sfx/DrowningSound.asm"
000B0A32                            SndDF_Header:
000B0A32                            	smpsHeaderStartSong 3
000B0A34 01                         	smpsHeaderTempoSFX  $01
000B0A35 01                         	smpsHeaderChanSFX   $01
000B0A36                            
000B0A3C                            
000B0A3C                            ; FM5 Data
000B0A3C                            SndDF_FM5:
000B0A3C EF00                       	smpsSetvoice        $00
000B0A3E                            
000B0A3E                            SndDF_Loop00:
000B0A3E F800 00                    	smpsCall            SndDF_Call00
000B0A41 E905                       	smpsAlterPitch $05
000B0A43 E608                       	smpsFMAlterVol      $08
000B0A45 F701 03FF F5               	smpsLoop            $01, $03, SndDF_Loop00
000B0A4A E9EC                       	smpsAlterPitch $EC
000B0A4C E6E0                       	smpsFMAlterVol      $E0
000B0A4E F2                         	smpsStop
000B0A4F                            
000B0A4F                            SndDF_Call00:
000B0A4F 9902                       	dc.b	nC2, $02
000B0A51 E901                       	smpsAlterPitch $01
000B0A53 F700 0AFF F8               	smpsLoop            $00, $0A, SndDF_Call00
000B0A58 E9F6                       	smpsAlterPitch $F6
000B0A5A E3                         	smpsReturn
000B0A5B                            
000B0A5B                            SndDF_Voices:
000B0A5B                            ;	Voice $00
000B0A5B                            ;	$07
000B0A5B                            ;	$04, $04, $05, $04, 	$1F, $1F, $15, $15, 	$00, $00, $00, $00
000B0A5B                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$7F, $7F, $80, $80
000B0A5B                            	smpsVcAlgorithm     $07
000B0A5B                            	smpsVcFeedback      $00
000B0A5B                            	smpsVcUnusedBits    $00
000B0A5B                            	smpsVcDetune        $00, $00, $00, $00
000B0A5B                            	smpsVcCoarseFreq    $04, $05, $04, $04
000B0A5B                            	smpsVcRateScale     $00, $00, $00, $00
000B0A5B                            	smpsVcAttackRate    $15, $15, $1F, $1F
000B0A5B                            	smpsVcAmpMod        $00, $00, $00, $00
000B0A5B                            	smpsVcDecayRate1    $00, $00, $00, $00
000B0A5B                            	smpsVcDecayRate2    $00, $00, $00, $00
000B0A5B                            	smpsVcDecayLevel    $01, $01, $01, $01
000B0A5B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B0A74                            		even
000B0A74                            SoundA3:	incbin	"sound/sfx/SndA3 - Death.bin"
000B0AA6                            		even
000B0AA6                            SoundA4:	incbin	"sound/sfx/SndA4 - Skid.bin"
000B0AEA 00                         		even
000B0AEA                            SoundA5:	include	"sound/sfx/LargeRingBox.asm"
000B0AEA                            SndD2_Header:
000B0AEA                            	smpsHeaderStartSong 3
000B0AEC 01                         	smpsHeaderTempoSFX  $01
000B0AED 01                         	smpsHeaderChanSFX   $01
000B0AEE                            
000B0AF4                            
000B0AF4                            ; FM4 Data
000B0AF4                            SndD2_FM4:
000B0AF4 EF00                       	smpsSetvoice        $00
000B0AFB C645                       	dc.b	nA5, $45
000B0AFD F2                         	smpsStop
000B0AFE                            
000B0AFE                            SndD2_Voices:
000B0AFE                            ;	Voice $00
000B0AFE                            ;	$04
000B0AFE                            ;	$27, $02, $07, $47, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000B0AFE                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$1F, $80, $23, $80
000B0AFE                            	smpsVcAlgorithm     $04
000B0AFE                            	smpsVcFeedback      $00
000B0AFE                            	smpsVcUnusedBits    $00
000B0AFE                            	smpsVcDetune        $04, $00, $00, $02
000B0AFE                            	smpsVcCoarseFreq    $07, $07, $02, $07
000B0AFE                            	smpsVcRateScale     $00, $00, $00, $00
000B0AFE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B0AFE                            	smpsVcAmpMod        $00, $00, $00, $00
000B0AFE                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000B0AFE                            	smpsVcDecayRate2    $0B, $00, $0B, $00
000B0AFE                            	smpsVcDecayLevel    $00, $01, $00, $01
000B0AFE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B0B18 00                         		even
000B0B18                            SoundA6:	incbin	"sound/sfx/SndA6 - Hit Spikes.bin"
000B0B48                            		even
000B0B48                            SoundA7:	incbin	"sound/sfx/SndA7 - Push Block.bin"
000B0B78                            		even
000B0B78                            SoundA8:	incbin	"sound/sfx/SndA8 - SS Goal.bin"
000B0BAC                            		even
000B0BAC                            SoundA9:	incbin	"sound/sfx/SndA9 - SS Item.bin"
000B0BBE                            		even
000B0BBE                            SoundAA:	include	"sound/sfx/Splash.asm"
000B0BBE                            SndA2_Header:
000B0BBE                            	smpsHeaderStartSong 3
000B0BC0 01                         	smpsHeaderTempoSFX  $01
000B0BC1 02                         	smpsHeaderChanSFX   $02
000B0BC2                            
000B0BCE                            
000B0BCE                            ; FM3 Data
000B0BCE                            SndA2_FM3:
000B0BCE EF00                       	smpsSetvoice        $00
000B0BD5 8106                       	dc.b	nC0, $06
000B0BD7                            
000B0BD7                            SndA2_Loop00:
000B0BD7 810E                       	dc.b	nC0, $0E
000B0BD9 E60E                       	smpsAlterVol      $0E
000B0BDB F700 04FF F8               	smpsLoop            $00, $04, SndA2_Loop00
000B0BE0 F2                         	smpsStop
000B0BE1                            
000B0BE1                            ; FM4 Data
000B0BE1                            SndA2_FM4:
000B0BE1 EF01                       	smpsSetvoice        $01
000B0BE3 A606 14                    	dc.b	nCs3, $06, $14
000B0BE6 F2                         	smpsStop
000B0BE7                            
000B0BE7                            SndA2_Voices:
000B0BE7                            ;	Voice $00
000B0BE7                            ;	$F9
000B0BE7                            ;	$21, $30, $10, $32, 	$1C, $1F, $1F, $10, 	$05, $18, $09, $02
000B0BE7                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0C, $06, $04, $80
000B0BE7                            	smpsVcAlgorithm     $01
000B0BE7                            	smpsVcFeedback      $07
000B0BE7                            	smpsVcUnusedBits    $03
000B0BE7                            	smpsVcDetune        $03, $01, $03, $02
000B0BE7                            	smpsVcCoarseFreq    $02, $00, $00, $01
000B0BE7                            	smpsVcRateScale     $00, $00, $00, $00
000B0BE7                            	smpsVcAttackRate    $10, $1F, $1F, $1C
000B0BE7                            	smpsVcAmpMod        $00, $00, $00, $00
000B0BE7                            	smpsVcDecayRate1    $02, $09, $18, $05
000B0BE7                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B0BE7                            	smpsVcDecayLevel    $02, $04, $02, $01
000B0BE7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B0C00                            
000B0C00                            ;	Voice $01
000B0C00                            ;	$00
000B0C00                            ;	$00, $03, $02, $00, 	$D9, $DF, $1F, $1F, 	$12, $11, $14, $0F
000B0C00                            ;	$0A, $00, $0A, $0D, 	$FF, $FF, $FF, $FF, 	$22, $07, $27, $80
000B0C00                            	smpsVcAlgorithm     $00
000B0C00                            	smpsVcFeedback      $00
000B0C00                            	smpsVcUnusedBits    $00
000B0C00                            	smpsVcDetune        $00, $00, $00, $00
000B0C00                            	smpsVcCoarseFreq    $00, $02, $03, $00
000B0C00                            	smpsVcRateScale     $00, $00, $03, $03
000B0C00                            	smpsVcAttackRate    $1F, $1F, $1F, $19
000B0C00                            	smpsVcAmpMod        $00, $00, $00, $00
000B0C00                            	smpsVcDecayRate1    $0F, $14, $11, $12
000B0C00                            	smpsVcDecayRate2    $0D, $0A, $00, $0A
000B0C00                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B0C00                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B0C1A 00                         		even
000B0C1A                            SoundAB:	include	"sound/sfx/FireShield.asm"
000B0C1A                            Sound_3E_Header:
000B0C1A                            	smpsHeaderStartSong 3
000B0C1C 01                         	smpsHeaderTempoSFX  $01
000B0C1D 01                         	smpsHeaderChanSFX   $01
000B0C1E                            
000B0C24                            
000B0C24                            ; FM5 Data
000B0C24                            Sound_3E_3F_40_41_FM5:
000B0C24 EF00                       	smpsSetvoice        $00
000B0C26 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
000B0C2B F2                         	smpsStop
000B0C2C                            
000B0C2C                            Sound_3E_Voices:
000B0C2C                            ;	Voice $00
000B0C2C                            ;	$0C
000B0C2C                            ;	$01, $21, $31, $31, 	$1E, $0C, $0E, $1C, 	$0A, $00, $04, $00
000B0C2C                            ;	$08, $12, $08, $0C, 	$FF, $0F, $BF, $0F, 	$03, $80, $0D, $80
000B0C2C                            	smpsVcAlgorithm     $04
000B0C2C                            	smpsVcFeedback      $01
000B0C2C                            	smpsVcUnusedBits    $00
000B0C2C                            	smpsVcDetune        $03, $03, $02, $00
000B0C2C                            	smpsVcCoarseFreq    $01, $01, $01, $01
000B0C2C                            	smpsVcRateScale     $00, $00, $00, $00
000B0C2C                            	smpsVcAttackRate    $1C, $0E, $0C, $1E
000B0C2C                            	smpsVcAmpMod        $00, $00, $00, $00
000B0C2C                            	smpsVcDecayRate1    $00, $04, $00, $0A
000B0C2C                            	smpsVcDecayRate2    $0C, $08, $12, $08
000B0C2C                            	smpsVcDecayLevel    $00, $0B, $00, $0F
000B0C2C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B0C45                            
000B0C45                            
000B0C46 00                         		even
000B0C46                            SoundAC:	incbin	"sound/sfx/SndAC - Hit Boss.bin"
000B0C7A                            		even
000B0C7A                            SoundAD:	incbin	"sound/sfx/SndAD - Get Bubble.bin"
000B0CB0                            		even
000B0CB0                            SoundAE:	include	"sound/sfx/Fireball.asm"
000B0CB0                            Sound_70_Header:
000B0CB0                            	smpsHeaderStartSong 3
000B0CB2 01                         	smpsHeaderTempoSFX  $01
000B0CB3 02                         	smpsHeaderChanSFX   $02
000B0CB4                            
000B0CC0                            
000B0CC0                            ; FM5 Data
000B0CC0                            Sound_70_FM5:
000B0CC0 EF00                       	smpsSetvoice        $00
000B0CC2 8001                       	dc.b	nRst, $01
000B0CC9 8306 8502                  	dc.b	nD0, $06, nE0, $02
000B0CCD F2                         	smpsStop
000B0CCE                            
000B0CCE                            ; PSG3 Data
000B0CCE                            Sound_70_PSG3:
000B0CCE F500                       	smpsPSGvoice        sTone_0D
000B0CD0 800B                       	dc.b	nRst, $0B
000B0CD2 F3E7                       	smpsPSGform         $E7
000B0CD4 C501 E7                    	dc.b	(nMaxPSG1-$D)&$FF, $01, smpsNoAttack
000B0CD7                            
000B0CD7                            Sound_70_Loop00:
000B0CD7 02                         	dc.b	$02
000B0CD8 EC01                       	smpsPSGAlterVol     $01
000B0CDA E7                         	dc.b	smpsNoAttack
000B0CDB F700 10FF F8               	smpsLoop            $00, $10, Sound_70_Loop00
000B0CE0 F2                         	smpsStop
000B0CE1                            
000B0CE1                            Sound_70_Voices:
000B0CE1                            ;	Voice $00
000B0CE1                            ;	$FA
000B0CE1                            ;	$02, $03, $00, $05, 	$12, $11, $0F, $13, 	$05, $18, $09, $02
000B0CE1                            ;	$06, $0F, $06, $02, 	$1F, $2F, $4F, $2F, 	$2F, $1A, $0E, $80
000B0CE1                            	smpsVcAlgorithm     $02
000B0CE1                            	smpsVcFeedback      $07
000B0CE1                            	smpsVcUnusedBits    $03
000B0CE1                            	smpsVcDetune        $00, $00, $00, $00
000B0CE1                            	smpsVcCoarseFreq    $05, $00, $03, $02
000B0CE1                            	smpsVcRateScale     $00, $00, $00, $00
000B0CE1                            	smpsVcAttackRate    $13, $0F, $11, $12
000B0CE1                            	smpsVcAmpMod        $00, $00, $00, $00
000B0CE1                            	smpsVcDecayRate1    $02, $09, $18, $05
000B0CE1                            	smpsVcDecayRate2    $02, $06, $0F, $06
000B0CE1                            	smpsVcDecayLevel    $02, $04, $02, $01
000B0CE1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B0CFA                            
000B0CFA                            
000B0CFA                            		even
000B0CFA                            SoundAF:	incbin	"sound/sfx/SndAF - Shield.bin"
000B0D28                            		even
000B0D28                            SoundB0:	incbin	"sound/sfx/SndB0 - Saw.bin"
000B0D5A                            		even
000B0D5A                            SoundB1:	incbin	"sound/sfx/SndB1 - Electric.bin"
000B0D86                            		even
000B0D86                            SoundB2:	incbin	"sound/sfx/SndB2 - Drown Death.bin"
000B0DD6                            		even
000B0DD6                            SoundB3:	incbin	"sound/sfx/SndB3 - Flamethrower.bin"
000B0E20                            		even
000B0E20                            SoundB4:	incbin	"sound/sfx/SndB4 - Bumper.bin"
000B0E7C                            		even
000B0E7C                            SoundB5:	incbin	"sound/sfx/SndB5 - Ring.bin"
000B0EAA                            		even
000B0EAA                            SoundB6:	include	"sound/sfx/Spikes.asm"
000B0EAA                            SpikesSFX_Header:
000B0EAA                            	smpsHeaderStartSong 3
000B0EAC 01                         	smpsHeaderTempoSFX  $01
000B0EAD 02                         	smpsHeaderChanSFX   $02
000B0EAE                            
000B0EBA                            
000B0EBA                            ; FM6 Data
000B0EBA                            SndB7_FM3:
000B0EBA EF01                       	smpsSetvoice        $01
000B0EC1 B105                       	dc.b	nC4, $05
000B0EC3 F1                         	smpsModOn
000B0EC4 E10A                       	smpsAlterNote       $0A
000B0EC6 E601                       	smpsAlterVol        $01
000B0EC8 F2                         	smpsStop
000B0EC9                            
000B0EC9                            ; FM5 Data
000B0EC9                            SndB7_FM5:
000B0EC9 8005                       	dc.b	nRst, $05			 
000B0ECB EF00                       	smpsSetvoice        $00
000B0ECD DB01 8001 DB11             	dc.b	nFs7, $01, nRst, $01, nFs7, $11
000B0ED3 F2                         	smpsStop
000B0ED4                            
000B0ED4                            SndB7_Voices:
000B0ED4                            ;	Voice $00
000B0ED4                            ;	$34
000B0ED4                            ;	$09, $0F, $01, $D7, 	$1F, $1F, $1F, $1F, 	$0C, $11, $09, $0F
000B0ED4                            ;	$0A, $0E, $0D, $0E, 	$35, $1A, $55, $3A, 	$0C, $80, $0F, $80
000B0ED4                            	smpsVcAlgorithm     $04
000B0ED4                            	smpsVcFeedback      $06
000B0ED4                            	smpsVcUnusedBits    $00
000B0ED4                            	smpsVcDetune        $0D, $00, $00, $00
000B0ED4                            	smpsVcCoarseFreq    $07, $01, $0F, $09
000B0ED4                            	smpsVcRateScale     $00, $00, $00, $00
000B0ED4                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B0ED4                            	smpsVcAmpMod        $00, $00, $00, $00
000B0ED4                            	smpsVcDecayRate1    $0F, $09, $11, $0C
000B0ED4                            	smpsVcDecayRate2    $0E, $0D, $0E, $0A
000B0ED4                            	smpsVcDecayLevel    $03, $05, $01, $03
000B0ED4                            	smpsVcReleaseRate   $0A, $05, $0A, $05
000B0EED                            
000B0EED                            ;	Voice $01
000B0EED                            ;	$FA
000B0EED                            ;	$21, $3A, $19, $30, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
000B0EED                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
000B0EED                            	smpsVcAlgorithm     $02
000B0EED                            	smpsVcFeedback      $07
000B0EED                            	smpsVcUnusedBits    $03
000B0EED                            	smpsVcDetune        $03, $01, $03, $02
000B0EED                            	smpsVcCoarseFreq    $00, $09, $0A, $01
000B0EED                            	smpsVcRateScale     $00, $00, $00, $00
000B0EED                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B0EED                            	smpsVcAmpMod        $00, $00, $00, $00
000B0EED                            	smpsVcDecayRate1    $02, $09, $18, $05
000B0EED                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B0EED                            	smpsVcDecayLevel    $02, $04, $02, $01
000B0EED                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B0F06                            		even
000B0F06                            SoundB7:	incbin	"sound/sfx/SndB7 - Rumbling.bin"
000B0F42                            		even
000B0F42                            SoundB8:	include	"sound/sfx/ScoreTallying.asm"
000B0F42                            SndBD_Header:
000B0F42                            	smpsHeaderStartSong 3
000B0F44 01                         	smpsHeaderTempoSFX  $01
000B0F45 01                         	smpsHeaderChanSFX   $01
000B0F46                            
000B0F4C                            
000B0F4C                            ; FM6 Data
000B0F4C                            SndBD_FM3:
000B0F4C EF00                       	smpsSetvoice        $00
000B0F4E                            
000B0F4E                            SndBD_Loop00:
000B0F4E C009                       	dc.b	nEb5, $09
000B0F50 F700 08FF FA               	smpsLoop            $00, $08, SndBD_Loop00
000B0F55 F2                         	smpsStop
000B0F56                            
000B0F56                            SndBD_Voices:
000B0F56                            ;	Voice $00
000B0F56                            ;	$02
000B0F56                            ;	$02, $51, $20, $01, 	$1E, $1E, $1E, $1E, 	$10, $0A, $14, $13
000B0F56                            ;	$01, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$24, $0E, $1F, $80
000B0F56                            	smpsVcAlgorithm     $02
000B0F56                            	smpsVcFeedback      $00
000B0F56                            	smpsVcUnusedBits    $00
000B0F56                            	smpsVcDetune        $00, $02, $05, $00
000B0F56                            	smpsVcCoarseFreq    $01, $00, $01, $02
000B0F56                            	smpsVcRateScale     $00, $00, $00, $00
000B0F56                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
000B0F56                            	smpsVcAmpMod        $00, $00, $00, $00
000B0F56                            	smpsVcDecayRate1    $13, $14, $0A, $10
000B0F56                            	smpsVcDecayRate2    $00, $00, $00, $01
000B0F56                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B0F56                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B0F70 00                         		even
000B0F70                            SoundB9:	include	"sound/sfx/BreakFloor.asm"
000B0F70                            Sound_59_Header:
000B0F70                            	smpsHeaderStartSong 3
000B0F72 01                         	smpsHeaderTempoSFX  $01
000B0F73 04                         	smpsHeaderChanSFX   $04
000B0F74                            
000B0F8C                            
000B0F8C                            ; FM3 Data
000B0F8C                            Sound_59_FM3:
000B0F8C E040                       	smpsPan             panRight, $00
000B0F8E 8002                       	dc.b	nRst, $02
000B0F90 F600 00                    	smpsJump            Sound_59_FM4
000B0F93                            
000B0F93                            ; FM5 Data
000B0F93                            Sound_59_FM5:
000B0F93 E080                       	smpsPan             panLeft, $00
000B0F95 8001                       	dc.b	nRst, $01
000B0F97                            
000B0F97                            ; FM4 Data
000B0F97                            Sound_59_FM4:
000B0F97 EF00                       	smpsSetvoice        $00
000B0F9E 8110                       	dc.b	nC0, $10
000B0FA0 F2                         	smpsStop
000B0FA1                            
000B0FA1                            ; PSG3 Data
000B0FA1                            Sound_59_PSG3:
000B0FA6 F3E7                       	smpsPSGform         $E7
000B0FA8                            
000B0FA8                            Sound_59_Loop00:
000B0FA8 B018 E7                    	dc.b	nB3, $18, smpsNoAttack
000B0FAB EC03                       	smpsPSGAlterVol     $03
000B0FAD F700 05FF F7               	smpsLoop            $00, $05, Sound_59_Loop00
000B0FB2 F2                         	smpsStop
000B0FB3                            
000B0FB3                            Sound_59_Voices:
000B0FB3                            ;	Voice $00
000B0FB3                            ;	$F9
000B0FB3                            ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
000B0FB3                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
000B0FB3                            	smpsVcAlgorithm     $01
000B0FB3                            	smpsVcFeedback      $07
000B0FB3                            	smpsVcUnusedBits    $03
000B0FB3                            	smpsVcDetune        $03, $01, $03, $02
000B0FB3                            	smpsVcCoarseFreq    $02, $00, $00, $01
000B0FB3                            	smpsVcRateScale     $00, $00, $00, $00
000B0FB3                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B0FB3                            	smpsVcAmpMod        $00, $00, $00, $00
000B0FB3                            	smpsVcDecayRate1    $02, $09, $18, $05
000B0FB3                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B0FB3                            	smpsVcDecayLevel    $02, $04, $02, $01
000B0FB3                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B0FCC                            
000B0FCC                            
000B0FCC                            		even
000B0FCC                            SoundBA:	incbin	"sound/sfx/SndBA - SS Glass.bin"
000B0FF4                            		even
000B0FF4                            SoundBB:	incbin	"sound/sfx/SndBB - Door.bin"
000B1020                            		even
000B1020                            SoundBC:	include	"sound/sfx/DashRelease.asm"
000B1020                            Sound_B6_Header:
000B1020                            	smpsHeaderStartSong 3
000B1022 01                         	smpsHeaderTempoSFX  $01
000B1023 02                         	smpsHeaderChanSFX   $02
000B1024                            
000B1030                            
000B1030                            ; FM5 Data
000B1030                            Sound_B6_FM5:
000B1030 EF00                       	smpsSetvoice        $00
000B1037 CD0F                       	dc.b	nE6, $0F
000B1039 F2                         	smpsStop
000B103A                            
000B103A                            ; PSG3 Data
000B103A                            Sound_B6_PSG3:
000B103A F507                       	smpsPSGvoice        sTone_1D
000B103C 8006                       	dc.b	nRst, $06
000B1043 F3E7                       	smpsPSGform         $E7
000B1045 CD4F                       	dc.b	nE6, $4F
000B1047 F2                         	smpsStop
000B1048                            
000B1048                            Sound_B6_Voices:
000B1048                            ;	Voice $00
000B1048                            ;	$3D
000B1048                            ;	$09, $03, $00, $00, 	$1F, $1F, $1F, $1F, 	$10, $0C, $0C, $0C
000B1048                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$09, $84, $92, $8E
000B1048                            	smpsVcAlgorithm     $05
000B1048                            	smpsVcFeedback      $07
000B1048                            	smpsVcUnusedBits    $00
000B1048                            	smpsVcDetune        $00, $00, $00, $00
000B1048                            	smpsVcCoarseFreq    $00, $00, $03, $09
000B1048                            	smpsVcRateScale     $00, $00, $00, $00
000B1048                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1048                            	smpsVcAmpMod        $00, $00, $00, $00
000B1048                            	smpsVcDecayRate1    $0C, $0C, $0C, $10
000B1048                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B1048                            	smpsVcDecayLevel    $02, $04, $02, $01
000B1048                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1061                            
000B1061                            
000B1062 00                         		even
000B1062                            SoundBD:	incbin	"sound/sfx/SndBD - ChainStomp.bin"
000B10B6                            		even
000B10B6                            SoundBE:	incbin	"sound/sfx/SndBE - Roll.bin"
000B10F0                            		even
000B10F0                            SoundBF:	incbin	"sound/sfx/SndBF - Get Continue.bin"
000B1162                            		even
000B1162                            SoundC0:	incbin	"sound/sfx/SndC0 - Basaran Flap.bin"
000B1190                            		even
000B1190                            SoundC1:	incbin	"sound/sfx/SndC1 - Break Item.bin"
000B11CA                            		even
000B11CA                            SoundC2:	include	"sound/sfx/DrowningWarning.asm"
000B11CA                            SndC1_Header:
000B11CA                            	smpsHeaderStartSong 3
000B11CC 01                         	smpsHeaderTempoSFX  $01
000B11CD 01                         	smpsHeaderChanSFX   $01
000B11CE                            
000B11D4                            
000B11D4                            ; FM4 Data
000B11D4                            SndC1_FM4:
000B11D4 EF00                       	smpsSetvoice        $00
000B11D6 D506 40                    	dc.b	nC7, $06, $40
000B11D9 F2                         	smpsStop
000B11DA                            
000B11DA                            SndC1_Voices:
000B11DA                            ;	Voice $00
000B11DA                            ;	$38
000B11DA                            ;	$01, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$09, $09, $09, $0B
000B11DA                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$5C, $22, $27, $80
000B11DA                            	smpsVcAlgorithm     $00
000B11DA                            	smpsVcFeedback      $07
000B11DA                            	smpsVcUnusedBits    $00
000B11DA                            	smpsVcDetune        $00, $00, $00, $00
000B11DA                            	smpsVcCoarseFreq    $00, $00, $00, $01
000B11DA                            	smpsVcRateScale     $00, $00, $00, $00
000B11DA                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B11DA                            	smpsVcAmpMod        $00, $00, $00, $00
000B11DA                            	smpsVcDecayRate1    $0B, $09, $09, $09
000B11DA                            	smpsVcDecayRate2    $00, $00, $00, $00
000B11DA                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B11DA                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B11F4 00                         		even
000B11F4                            SoundC3:	incbin	"sound/sfx/SndC3 - Giant Ring.bin"
000B126E                            		even
000B126E                            SoundC4:	incbin	"sound/sfx/SndC4 - Bomb.bin"
000B1296                            		even
000B1296                            SoundC5:	include	"sound/sfx/Cash Register.asm"
000B1296                            Sound_B0_Header:
000B1296                            	smpsHeaderStartSong 3
000B1298 01                         	smpsHeaderTempoSFX  $01
000B1299 03                         	smpsHeaderChanSFX   $03
000B129A                            
000B12AC                            
000B12AC                            ; FM5 Data
000B12AC                            Sound_B0_FM5:
000B12AC EF00                       	smpsSetvoice        $00
000B12AE 8A08 8002 8A08             	dc.b	nA0, $08, nRst, $02, nA0, $08
000B12B4 F2                         	smpsStop
000B12B5                            
000B12B5                            ; FM4 Data
000B12B5                            Sound_B0_FM4:
000B12B5 EF01                       	smpsSetvoice        $01
000B12B7 8012 C655                  	dc.b	nRst, $12, nA5, $55
000B12BB F2                         	smpsStop
000B12BC                            
000B12BC                            ; FM3 Data
000B12BC                            Sound_B0_FM3:
000B12BC EF02                       	smpsSetvoice        $02
000B12BE 8002 C205 0405 04          	dc.b	nRst, $02, nF5, $05, $04, $05, $04
000B12C5 F2                         	smpsStop
000B12C6                            
000B12C6                            Sound_B0_Voices:
000B12C6                            ;	Voice $00
000B12C6                            ;	$3B
000B12C6                            ;	$03, $02, $03, $06, 	$18, $1A, $1A, $96, 	$17, $0E, $0A, $10
000B12C6                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $28, $39, $80
000B12C6                            	smpsVcAlgorithm     $03
000B12C6                            	smpsVcFeedback      $07
000B12C6                            	smpsVcUnusedBits    $00
000B12C6                            	smpsVcDetune        $00, $00, $00, $00
000B12C6                            	smpsVcCoarseFreq    $06, $03, $02, $03
000B12C6                            	smpsVcRateScale     $02, $00, $00, $00
000B12C6                            	smpsVcAttackRate    $16, $1A, $1A, $18
000B12C6                            	smpsVcAmpMod        $00, $00, $00, $00
000B12C6                            	smpsVcDecayRate1    $10, $0A, $0E, $17
000B12C6                            	smpsVcDecayRate2    $00, $00, $00, $00
000B12C6                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B12C6                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B12DF                            
000B12DF                            ;	Voice $01
000B12DF                            ;	$04
000B12DF                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000B12DF                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $80, $23, $80
000B12DF                            	smpsVcAlgorithm     $04
000B12DF                            	smpsVcFeedback      $00
000B12DF                            	smpsVcUnusedBits    $00
000B12DF                            	smpsVcDetune        $04, $07, $07, $03
000B12DF                            	smpsVcCoarseFreq    $09, $07, $02, $07
000B12DF                            	smpsVcRateScale     $00, $00, $00, $00
000B12DF                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B12DF                            	smpsVcAmpMod        $00, $00, $00, $00
000B12DF                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000B12DF                            	smpsVcDecayRate2    $0B, $00, $0B, $00
000B12DF                            	smpsVcDecayLevel    $00, $01, $00, $01
000B12DF                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B12F8                            
000B12F8                            ;	Voice $02
000B12F8                            ;	$3C
000B12F8                            ;	$0F, $00, $00, $00, 	$1F, $1A, $18, $1C, 	$17, $11, $1A, $0E
000B12F8                            ;	$00, $0F, $14, $10, 	$1F, $9F, $9F, $2F, 	$07, $80, $26, $8C
000B12F8                            	smpsVcAlgorithm     $04
000B12F8                            	smpsVcFeedback      $07
000B12F8                            	smpsVcUnusedBits    $00
000B12F8                            	smpsVcDetune        $00, $00, $00, $00
000B12F8                            	smpsVcCoarseFreq    $00, $00, $00, $0F
000B12F8                            	smpsVcRateScale     $00, $00, $00, $00
000B12F8                            	smpsVcAttackRate    $1C, $18, $1A, $1F
000B12F8                            	smpsVcAmpMod        $00, $00, $00, $00
000B12F8                            	smpsVcDecayRate1    $0E, $1A, $11, $17
000B12F8                            	smpsVcDecayRate2    $10, $14, $0F, $00
000B12F8                            	smpsVcDecayLevel    $02, $09, $09, $01
000B12F8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1311                            
000B1311                            
000B1312 00                         		even
000B1312                            SoundC6:	incbin	"sound/sfx/SndC6 - Ring Loss.bin"
000B1354                            		even
000B1354                            SoundC7:	incbin	"sound/sfx/SndC7 - Chain Rising.bin"
000B1382                            		even
000B1382                            SoundC8:	incbin	"sound/sfx/SndC8 - Burning.bin"
000B1394                            		even
000B1394                            SoundC9:	incbin	"sound/sfx/SndC9 - Hidden Bonus.bin"
000B13C2                            		even
000B13C2                            SoundCA:	incbin	"sound/sfx/SndCA - Enter SS.bin"
000B13F0                            		even
000B13F0                            SoundCB:	incbin	"sound/sfx/SndCB - Wall Smash.bin"
000B143C                            		even
000B143C                            SoundCC:	include	"sound/sfx/Spring.asm"
000B143C                            Spring_Header:
000B143C                            	smpsHeaderStartSong 1
000B143E 01                         	smpsHeaderTempoSFX  $01
000B143F 01                         	smpsHeaderChanSFX   $01
000B1440                            
000B1446                            
000B1446                            ; FM6 Data
000B1446                            Spring_FM6:
000B1446 EF00                       	smpsSetvoice        $00
000B1448 8001                       	dc.b	nRst, $01
000B144F B006                       	dc.b	nB3, $06
000B1451 F4                         	smpsModOff
000B1452 EF01                       	smpsSetvoice        $01
000B1454                            
000B1454                            Spring_Loop00:
000B1454 BD02                       	dc.b	nC5, $02
000B1456 E601                       	smpsAlterVol      $01
000B1458 E7                         	dc.b	smpsNoAttack
000B1459 F700 19FF F7               	smpsLoop            $00, $19, Spring_Loop00
000B145E F2                         	smpsStop
000B145F                            
000B145F                            Spring_Voices:
000B145F                            ;	Voice $00
000B145F                            ;	$20
000B145F                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
000B145F                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$16, $30, $13, $80
000B145F                            	smpsVcAlgorithm     $00
000B145F                            	smpsVcFeedback      $04
000B145F                            	smpsVcUnusedBits    $00
000B145F                            	smpsVcDetune        $03, $03, $03, $03
000B145F                            	smpsVcCoarseFreq    $01, $00, $05, $06
000B145F                            	smpsVcRateScale     $02, $02, $03, $03
000B145F                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B145F                            	smpsVcAmpMod        $00, $00, $00, $00
000B145F                            	smpsVcDecayRate1    $06, $09, $06, $07
000B145F                            	smpsVcDecayRate2    $08, $06, $06, $07
000B145F                            	smpsVcDecayLevel    $0F, $01, $01, $02
000B145F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1478                            
000B1478                            ;	Voice $01
000B1478                            ;	$20
000B1478                            ;	$31, $33, $30, $31, 	$9F, $9F, $9F, $9F, 	$07, $06, $09, $06
000B1478                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $23, $11, $80
000B1478                            	smpsVcAlgorithm     $00
000B1478                            	smpsVcFeedback      $04
000B1478                            	smpsVcUnusedBits    $00
000B1478                            	smpsVcDetune        $03, $03, $03, $03
000B1478                            	smpsVcCoarseFreq    $01, $00, $03, $01
000B1478                            	smpsVcRateScale     $02, $02, $02, $02
000B1478                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1478                            	smpsVcAmpMod        $00, $00, $00, $00
000B1478                            	smpsVcDecayRate1    $06, $09, $06, $07
000B1478                            	smpsVcDecayRate2    $08, $06, $06, $07
000B1478                            	smpsVcDecayLevel    $0F, $01, $01, $02
000B1478                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1492 00                         		even
000B1492                            SoundCD:	include	"sound/sfx/Beep.asm"
000B1492                            Snd99_Header:
000B1492                            	smpsHeaderStartSong 3
000B1494 01                         	smpsHeaderTempoSFX  $01
000B1495 01                         	smpsHeaderChanSFX   $01
000B1496                            
000B149C                            
000B149C                            ; FM4 Data
000B149C                            Snd99_FM4:
000B149C EF00                       	smpsSetvoice        $00
000B149E B502                       	dc.b	nE4, $02
000B14A0 F2                         	smpsStop
000B14A1                            
000B14A1                            Snd99_Voices:
000B14A1                            ;	Voice $00
000B14A1                            ;	$07
000B14A1                            ;	$0A, $0A, $0A, $0A, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000B14A1                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$88, $88, $88, $88
000B14A1                            	smpsVcAlgorithm     $07
000B14A1                            	smpsVcFeedback      $00
000B14A1                            	smpsVcUnusedBits    $00
000B14A1                            	smpsVcDetune        $00, $00, $00, $00
000B14A1                            	smpsVcCoarseFreq    $0A, $0A, $0A, $0A
000B14A1                            	smpsVcRateScale     $00, $00, $00, $00
000B14A1                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B14A1                            	smpsVcAmpMod        $00, $00, $00, $00
000B14A1                            	smpsVcDecayRate1    $00, $00, $00, $00
000B14A1                            	smpsVcDecayRate2    $00, $00, $00, $00
000B14A1                            	smpsVcDecayLevel    $00, $00, $00, $00
000B14A1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B14BA                            		even
000B14BA                            SoundCE:	incbin	"sound/sfx/SndCE - Ring Left Speaker.bin"
000B14E8                            		even
000B14E8                            SoundCF:	include	"sound/sfx/Signpost.asm"
000B14E8                            SignpostCD_Header:
000B14E8                            	smpsHeaderStartSong 3
000B14EA 01                         	smpsHeaderTempoSFX  $01
000B14EB 02                         	smpsHeaderChanSFX   $02
000B14EC                            
000B14F8                            
000B14F8                            ; FM5 Data
000B14F8                            Snd9D_FM5:
000B14F8 8004                       	dc.b	nRst, $04
000B14FA                            
000B14FA                            ; FM4 Data
000B14FA                            Snd9D_FM4:
000B14FA EF00                       	smpsSetvoice        $00
000B14FC                            
000B14FC                            Snd9D_Loop00:
000B14FC B405                       	dc.b	nEb4, $05
000B14FE E604                       	smpsFMAlterVol      $04
000B1500 F700 08FF F8               	smpsLoop            $00, $08, Snd9D_Loop00
000B1505 F2                         	smpsStop
000B1506                            
000B1506                            Snd9D_Voices:
000B1506                            ;	Voice $00
000B1506                            ;	$F4
000B1506                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
000B1506                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$0C, $85, $00, $80
000B1506                            	smpsVcAlgorithm     $04
000B1506                            	smpsVcFeedback      $06
000B1506                            	smpsVcUnusedBits    $03
000B1506                            	smpsVcDetune        $00, $00, $00, $00
000B1506                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
000B1506                            	smpsVcRateScale     $00, $00, $00, $00
000B1506                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1506                            	smpsVcAmpMod        $00, $00, $00, $00
000B1506                            	smpsVcDecayRate1    $0B, $0B, $00, $00
000B1506                            	smpsVcDecayRate2    $08, $05, $00, $00
000B1506                            	smpsVcDecayLevel    $0F, $0F, $00, $00
000B1506                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1520 00                         		even
000B1520                            SoundD0:	incbin	"sound/sfx/SndD0 - Waterfall.bin"
000B155A                            		even
000B155A                            SoundD1:	include	"sound/sfx/Lightning Shield.asm"
000B155A                            Sound_41_Header:
000B155A                            	smpsHeaderStartSong 3
000B155C 01                         	smpsHeaderTempoSFX  $01
000B155D 01                         	smpsHeaderChanSFX   $01
000B155E                            
000B1564                            	
000B1564                            Sound41_FM5:
000B1564 EF00                       	smpsSetvoice        $00
000B1566 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
000B156B F2                         	smpsStop
000B156C                            
000B156C                            Sound_41_Voices:
000B156C                            ;	Voice $00
000B156C                            ;	$36
000B156C                            ;	$07, $10, $0E, $0C, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000B156C                            ;	$00, $0D, $0D, $0E, 	$0F, $0F, $0F, $0F, 	$17, $80, $80, $80
000B156C                            	smpsVcAlgorithm     $06
000B156C                            	smpsVcFeedback      $06
000B156C                            	smpsVcUnusedBits    $00
000B156C                            	smpsVcDetune        $00, $00, $01, $00
000B156C                            	smpsVcCoarseFreq    $0C, $0E, $00, $07
000B156C                            	smpsVcRateScale     $00, $00, $00, $00
000B156C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B156C                            	smpsVcAmpMod        $00, $00, $00, $00
000B156C                            	smpsVcDecayRate1    $00, $00, $00, $00
000B156C                            	smpsVcDecayRate2    $0E, $0D, $0D, $00
000B156C                            	smpsVcDecayLevel    $00, $00, $00, $00
000B156C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1585                            
000B1585                            
000B1586 00                         		even
000B1586                            SoundD2:	include	"sound/sfx/CD_Charge.asm"
000B1586                            Snd9B_Header:
000B1586                            	smpsHeaderStartSong 3
000B1588 01                         	smpsHeaderTempoSFX  $01
000B1589 01                         	smpsHeaderChanSFX   $01
000B158A                            
000B1590                            
000B1590                            ; FM5 Data
000B1590                            Snd9B_FM5:
000B1590 EF00                       	smpsSetvoice        $00
000B1592 8001                       	dc.b	nRst, $01
000B1599 CA25                       	dc.b	nCs6, $25
000B159B F4                         	smpsModOff
000B159C                            
000B159C                            Snd9B_Loop00:
000B159C E7                         	dc.b	smpsNoAttack
000B159D E601                       	smpsFMAlterVol      $01
000B159F D102                       	dc.b	nAb6, $02
000B15A1 F700 2AFF F7               	smpsLoop            $00, $2A, Snd9B_Loop00
000B15A6 F2                         	smpsStop
000B15A7                            
000B15A7                            Snd9B_Voices:
000B15A7                            ;	Voice $00
000B15A7                            ;	$3C
000B15A7                            ;	$00, $44, $02, $02, 	$1F, $1F, $1F, $15, 	$00, $1F, $00, $00
000B15A7                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$0D, $80, $28, $80
000B15A7                            	smpsVcAlgorithm     $04
000B15A7                            	smpsVcFeedback      $07
000B15A7                            	smpsVcUnusedBits    $00
000B15A7                            	smpsVcDetune        $00, $00, $04, $00
000B15A7                            	smpsVcCoarseFreq    $02, $02, $04, $00
000B15A7                            	smpsVcRateScale     $00, $00, $00, $00
000B15A7                            	smpsVcAttackRate    $15, $1F, $1F, $1F
000B15A7                            	smpsVcAmpMod        $00, $00, $00, $00
000B15A7                            	smpsVcDecayRate1    $00, $00, $1F, $00
000B15A7                            	smpsVcDecayRate2    $00, $00, $00, $00
000B15A7                            	smpsVcDecayLevel    $00, $00, $00, $00
000B15A7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B15C0                            
000B15C0                            
000B15C0                            		even		
000B15C0                            SoundD3:	incbin	"sound/sfx/Peelout_Release.bin"
000B1658                            		even
000B1658                            SoundD4:	incbin	"sound/sfx/Peelout_Stop.bin"
000B1664                            		even				
000B1664                            SoundD5:	incbin	"sound/sfx/Spindash.bin"
000B16A0                            		even			
000B16A0                            		; Don't let Sega sample cross $8000-byte boundary
000B16A0                            		; (DAC driver doesn't switch banks automatically)
000B8000                            SegaPCM:	incbin	"sound/dac/sega.pcm"
000BE978                            SegaPCM_End
000BE978                            		even
000BE978                            
000BE978                            
000BE978                            
000BE978                            
000BE978                            			include "_inc\Sonic 2 Options.asm"
000BE978                            ; ---------------------------------------------------------------------------
000BE978                            ; Common menu screen subroutine for transferring text to RAM
000BE978                            
000BE978                            ; ARGUMENTS:
000BE978                            ; d0 = starting art tile
000BE978                            ; a1 = data source
000BE978                            ; a2 = destination
000BE978                            ;
000BE978                            ; ---------------------------------------------------------------------------
000BE978                            MenuScreen:
000BE978 103C 0000                  		move.b	#bgm_Fade,d0
000BE97C 4EB8 12A0                  		jsr	PlaySound_Special ; fade out music
000BE980 4EB8 2232                  		jsr	PaletteFadeOut
000BE984 46FC 2700                  		move	#$2700,sr
000BE988 3038 F60C                  		move.w	($FFFFF60C).w,d0
000BE98C 0200 00BF                  		andi.b	#-$41,d0
000BE990 33C0 00C0 0004             		move.w	d0,($00C00004).l
000BE996 4EB8 11D0                  		jsr	ClearScreen
000BE99A 4DF9 00C0 0004             		lea		($00C00004).l,a6
000BE9A0 3CBC 8004                  		move.w	#$8004,(a6)
000BE9A4 3CBC 8230                  		move.w	#$8230,(a6)
000BE9A8 3CBC 8407                  		move.w	#$8407,(a6)
000BE9AC 3CBC 8230                  		move.w	#$8230,(a6)
000BE9B0 3CBC 8700                  		move.w	#$8700,(a6)
000BE9B4 3CBC 8C81                  		move.w	#$8C81,(a6)
000BE9B8 3CBC 9001                  		move.w	#$9001,(a6)
000BE9BC 43F8 AC00                  		lea	($FFFFAC00).w,a1
000BE9C0 7000                       		moveq	#0,d0
000BE9C2 323C 00FF                  		move.w	#$FF,d1
000BE9C6                            
000BE9C6                            MenuScreen_ClrObjRam:
000BE9C6 22C0                       		move.l	d0,(a1)+
000BE9C8 51C9 FFFC                  		dbf		d1,MenuScreen_ClrObjRam
000BE9CC                            
000BE9CC                            ; ===========================================================================
000BE9CC                            
000BE9CC 31FC C800 C8FC             		ResetDMAQueue
000BE9D2                            
000BE9DC 41F9 0000 0000             		lea		(Nem_MenuFont).l,a0
000BE9E2 4EB8 134E                  		jsr	NemDec
000BE9F0 41F9 0000 0000             		lea		(Nem_MenuBox).l,a0
000BE9F6 4EB8 134E                  		jsr	NemDec
000BE9FA 43F9 00FF 0000             		lea	($FF0000).l,a1
000BEA00 41F9 0000 0000             		lea	(Eni_MenuBg).l,a0 ; load SONIC/MILES mappings
000BEA06 303C 6000                  		move.w	#$6000,d0
000BEA0A 4EB8 18D8                  		jsr	EniDec
000BEA0E                            
000BEA0E 43F9 00FF 0000 203C 6000+  		copyTilemap	$FF0000,$E000,$27,$1B
000BEA22                            
000BEA22 6100 0000                  		bsr.w	MenuScreen_Options	; if yes, branch
000BEA26                            
000BEA26                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEA26                            
000BEA26                            ; sub_8FBE:
000BEA26                            MenuScreenTextToRAM:
000BEA26 7200                       		moveq	#0,d1
000BEA28 1219                       		move.b	(a1)+,d1
000BEA2A                            
000BEA2A                            MenuScreenTextToRAM_Cont:
000BEA2A 1019                       		move.b	(a1)+,d0
000BEA2C 34C0                       		move.w	d0,(a2)+
000BEA2E 51C9 FFFA                  		dbf	d1,MenuScreenTextToRAM_Cont
000BEA32 4E75                       		rts
000BEA34                            ; End of function MenuScreenTextToRAM
000BEA34                            
000BEA34                            ; ===========================================================================
000BEA34                            ; loc_8FCC:
000BEA34                            MenuScreen_Options:
000BEA34 43F9 00FF 0000             		lea	(v_256x256).l,a1
000BEA3A 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000BEA40 303C 0070                  		move.w	#$70,d0
000BEA44 4EB8 18D8                  		jsr	EniDec
000BEA48 43F9 00FF 0160             		lea	(v_256x256+$160).l,a1
000BEA4E 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000BEA54 303C 2070                  		move.w	#$2070,d0
000BEA58 4EB8 18D8                  		jsr	EniDec
000BEA5C 4238 FF8C                  		clr.b	(Options_menu_box).w
000BEA60 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000BEA64 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000BEA68 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEA6C 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000BEA70 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEA74 4238 FF8C                  		clr.b	(Options_menu_box).w
000BEA78 4238 F711                  		clr.b	($FFFFF711).w		
000BEA7C 4278 F7F0                  		clr.w	($FFFFF7F0).w					 
000BEA80                            ;-------------------------------------------------------------------------------
000BEA80 4278 F5B8                  		clr.w	($FFFFF5B8).w
000BEA84 45F9 0000 0000             		lea	(Sonic_Miles_Spr).l,a2 ; sonic/miles background load
000BEA8A 6100 0000                  		bsr.w	Dynamic_Menu
000BEA8E                            ;-------------------------------------------------------------------------------
000BEA8E 7013                       		moveq	#palid_Options,d0
000BEA90 4EB8 24DC                  		jsr		PalLoad1
000BEA94 103C 0091                  		move.b	#$91,d0
000BEA98 4EB8 12A0                  		jsr	PlaySound_Special ; play options music
000BEA9C 42B8 F700                  		clr.l	(v_screenposx).w
000BEAA0 42B8 F704                  		clr.l	(v_screenposy).w
000BEAA4 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000BEAAA 4EB8 3B70                  		jsr	WaitForVBla
000BEAAE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000BEAB2 0000 0040                  		ori.b	#$40,d0
000BEAB6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000BEABC 4EB8 218C                  		jsr	PaletteFadeIn
000BEAC0                            ; loc_9060:
000BEAC0                            OptionScreen_Main:
000BEAC0 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000BEAC6 4EB8 3B70                  		jsr	WaitForVBla				
000BEACA 46FC 2700                  		move	#$2700,sr
000BEACE 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEAD2 6100 0000                  		bsr.w	OptionScreen_Controls			
000BEAD6 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000BEADA 46FC 2300                  		move	#$2300,sr
000BEADE 45F9 0000 0000             		lea	(Sonic_Miles_Spr).l,a2 ; sonic/miles background load	
000BEAE4 6100 0000                  		bsr.w	Dynamic_Menu		
000BEAE8 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000BEAEE                            
000BEAEE 6600                       		bne.s	OptionScreen_Select		; if yes, branch
000BEAF0 60CE                       		bra.s	OptionScreen_Main
000BEAF2                            ; ===========================================================================
000BEAF2                            ; loc_909A:
000BEAF2                            OptionScreen_Select:
000BEAF2 1038 FF8C                  		move.b	(Options_menu_box).w,d0
000BEAF6 6600                       		bne.s	OptionScreen_Select_Not1P
000BEAF8 7000                       		moveq	#0,d0
000BEAFA 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; => SegaScreen
000BEB00 4E75                       		rts
000BEB02                            ; ===========================================================================
000BEB02                            ; loc_90B6:
000BEB02                            OptionScreen_Select_Not1P:
000BEB02 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; => SegaScreen
000BEB08 4E75                       		rts
000BEB0A                            ; ===========================================================================
000BEB0A                            
000BEB0A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEB0A                            
000BEB0A                            ;sub_90E0:
000BEB0A                            OptionScreen_Controls:
000BEB0A 7400                       		moveq	#0,d2
000BEB0C 1438 FF8C                  		move.b	(Options_menu_box).w,d2			
000BEB10 1038 F605                  		move.b	(v_jpadpress1).w,d0		; Ctrl_1_Press
000BEB14 0800 0000                  		btst	#0,d0			; is up pressed?
000BEB18 6700                       		beq.s	Option_Controls_Down	; if not, branch
000BEB1A 5302                       		subq.b	#1,d2					; move up 1 selection
000BEB1C 6400                       		bcc.s	Option_Controls_Down
000BEB1E 143C 0001                  		move.b	#1,d2
000BEB22                            
000BEB22                            Option_Controls_Down:
000BEB22 0800 0001                  		btst	#1,d0			; is down pressed?
000BEB26 6700                       		beq.s	Option_Controls_Refresh	; if not, branch
000BEB28 5202                       		addq.b	#1,d2					; move down 1 selection
000BEB2A 0C02 0002                  		cmpi.b	#2,d2
000BEB2E 6500                       		blo.s	Option_Controls_Refresh
000BEB30 7400                       		moveq	#0,d2
000BEB32                            
000BEB32                            Option_Controls_Refresh:
000BEB32 11C2 FF8C                  		move.b	d2,(Options_menu_box).w
000BEB36 E54A                       		lsl.w	#2,d2
000BEB38 163B 2000                  		move.b	OptionScreen_Choices(pc,d2.w),d3 ; number of choices for the option
000BEB3C 227B 2000                  		movea.l	OptionScreen_Choices(pc,d2.w),a1 ; location where the choice is stored (in RAM)
000BEB40 3411                       		move.w	(a1),d2
000BEB42 0800 0002                  		btst	#2,d0				; is left pressed?
000BEB46 6700                       		beq.s	Option_Controls_Right		; if not, branch
000BEB48 5302                       		subq.b	#1,d2						; subtract 1 from sound test
000BEB4A 6400                       		bcc.s	Option_Controls_Right
000BEB4C 1403                       		move.b	d3,d2
000BEB4E                            
000BEB4E                            Option_Controls_Right:
000BEB4E 0800 0003                  		btst	#3,d0			; is right pressed?
000BEB52 6700                       		beq.s	Option_Controls_Button_A	; if not, branch
000BEB54 5202                       		addq.b	#1,d2						; add 1 to sound test
000BEB56 B403                       		cmp.b	d3,d2
000BEB58 6300                       		bls.s	Option_Controls_Button_A
000BEB5A 7400                       		moveq	#0,d2
000BEB5C                            
000BEB5C                            Option_Controls_Button_A:
000BEB5C 0800 0006                  		btst	#6,d0				; is button A pressed?
000BEB60 6700                       		beq.s	Option_Controls_Refresh2	; if not, branch
000BEB62 0602 0010                  		addi.b	#$10,d2						; add $10 to sound test
000BEB66 B403                       		cmp.b	d3,d2
000BEB68 6300                       		bls.s	Option_Controls_Refresh2
000BEB6A 7400                       		moveq	#0,d2
000BEB6C                            
000BEB6C                            Option_Controls_Refresh2:
000BEB6C 3282                       		move.w	d2,(a1)
000BEB6E                            
000BEB6E                            Option_Controls_NoMove:
000BEB6E 4E75                       		rts
000BEB70                            ; End of function OptionScreen_Controls
000BEB70                            
000BEB70                            ; ===========================================================================
000BEB70                            ; word_917A:
000BEB70                            OptionScreen_Choices:
000BEB70 0AFF FFBE                  		dc.l ($B-1)<<24|($FFFFBE&$FFFFFF)
000BEB74 01FF FF8A                  		dc.l (2-1)<<24|($FFFF8A&$FFFFFF)
000BEB78                            		even
000BEB78                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEB78                            
000BEB78                            
000BEB78                            OptionScreen_DrawSelected:
000BEB78 6100 0000                  		bsr.w	loc_9268
000BEB7C 7200                       		moveq	#0,d1
000BEB7E 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEB82 E749                       		lsl.w	#3,d1
000BEB84 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000BEB8A 47F3 1000                  		lea	(a3,d1.w),a3
000BEB8E 303C 6000                  		move.w	#$6000,d0
000BEB92 45F9 FFFF 0030             		lea	($FFFF0030).l,a2
000BEB98 225B                       		movea.l	(a3)+,a1
000BEB9A 6100 FE8A                  		bsr.w	MenuScreenTextToRAM
000BEB9E 45F9 FFFF 00B6             		lea	($FFFF00B6).l,a2
000BEBA4 7200                       		moveq	#0,d1
000BEBA6 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEBAA E549                       		lsl.w	#2,d1
000BEBAC 43FA FFC2                  		lea	OptionScreen_Choices(pc),a1
000BEBB0 2271 1000                  		movea.l	(a1,d1.w),a1
000BEBB4 3211                       		move.w	(a1),d1
000BEBB6 E549                       		lsl.w	#2,d1
000BEBB8                            
000BEBB8                            loc_9186:		
000BEBB8 2274 1000                  		movea.l	(a4,d1.w),a1
000BEBBC 6100 FE68                  		bsr.w	MenuScreenTextToRAM
000BEBC0                            		;cmpi.b	#2,(Options_menu_box).w
000BEBC0                            		;bne.s	loc2_9186
000BEBC0                            		;lea	($FFFF00C2).l,a2
000BEBC0                            		;bsr.w	loc_9296
000BEBC0                            
000BEBC0                            loc2_9186:		
000BEBC0 43F9 00FF 0000             		lea	(v_256x256).l,a1
000BEBC6 201B                       		move.l	(a3)+,d0
000BEBC8 7215                       		moveq	#$15,d1
000BEBCA 7407                       		moveq	#7,d2
000BEBCC 4EF8 1324                  		jmp	TilemapToVRAM
000BEBD0                            ; ===========================================================================
000BEBD0                            
000BEBD0                            OptionScreen_DrawUnselected:
000BEBD0 6100 0000                  		bsr.w	loc_9268
000BEBD4 7200                       		moveq	#0,d1
000BEBD6 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEBDA E749                       		lsl.w	#3,d1
000BEBDC 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000BEBE2 47F3 1000                  		lea	(a3,d1.w),a3
000BEBE6 7000                       		moveq	#0,d0
000BEBE8 45F9 FFFF 0190             		lea	($FFFF0190).l,a2
000BEBEE 225B                       		movea.l	(a3)+,a1
000BEBF0 6100 FE34                  		bsr.w	MenuScreenTextToRAM
000BEBF4 45F9 FFFF 0216             		lea	($FFFF0216).l,a2
000BEBFA 7200                       		moveq	#0,d1
000BEBFC                            		;cmpi.b	#2,(Options_menu_box).w
000BEBFC                            		;beq.s	loc2_91F8
000BEBFC 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEC00 E549                       		lsl.w	#2,d1
000BEC02 43FA FF6C                  		lea	OptionScreen_Choices(pc),a1
000BEC06 2271 1000                  		movea.l	(a1,d1.w),a1
000BEC0A 3211                       		move.w	(a1),d1
000BEC0C E549                       		lsl.w	#2,d1
000BEC0E                            
000BEC0E                            loc2_91F8		
000BEC0E 2274 1000                  		movea.l	(a4,d1.w),a1
000BEC12 6100 FE12                  		bsr.w	MenuScreenTextToRAM
000BEC16                            		;cmpi.b	#2,(Options_menu_box).w
000BEC16                            		;bne.s	loc3_91F8
000BEC16                            		;lea	($FFFF0222).l,a2
000BEC16                            		;bsr.w	loc_9296
000BEC16                            
000BEC16                            loc3_91F8		
000BEC16 43F9 FFFF 0160             		lea	($FFFF0160).l,a1
000BEC1C 201B                       		move.l	(a3)+,d0
000BEC1E 7215                       		moveq	#$15,d1
000BEC20 7407                       		moveq	#7,d2
000BEC22 4EF8 1324                  		jmp	TilemapToVRAM
000BEC26                            ; ===========================================================================
000BEC26                            
000BEC26                            loc_9268:
000BEC26 49F9 0000 0000             		lea	(off_92D2).l,a4
000BEC2C 4A38 FFF8                  		tst.b	(v_megadrive).w
000BEC30 6A00                       		bpl.s	loc2_9268
000BEC32 49F9 0000 0000             		lea	(off_92DE).l,a4
000BEC38                            
000BEC38                            loc2_9268:
000BEC38 4A38 FF8C                  		tst.b	(Options_menu_box).w
000BEC3C 6700                       		beq.s	loc4_9268
000BEC3E 49F9 0000 0000             		lea	(off_92EA).l,a4
000BEC44                            
000BEC44                            loc4_9268:
000BEC44 4E75                       		rts
000BEC46                            ; ===========================================================================
000BEC46                            
000BEC46                            loc_9296:
000BEC46 4E75                       		rts
000BEC48                            
000BEC48                            Dynamic_Menu:
000BEC48 5338 F5B9                                  subq.b  #$01, ($FFFFF5B9).w          ; remove 1 from frame count
000BEC4C 6A00                                       bpl.s   Exit_Dinamic_Menu            ; exit menu
000BEC4E 11FC 0007 F5B9                             move.b  #$07, ($FFFFF5B9).w          ; Set time for frame display
000BEC54 1038 F5B8                                  move.b  ($FFFFF5B8).w, D0            ; Current Frame D0
000BEC58 5238 F5B8                                  addq.b  #$01, ($FFFFF5B8).w          ; Advance frame $FFFFFFB8
000BEC5C 0240 001F                                  andi.w  #$001F, D0
000BEC60 103B 0000                                  move.b  Sonic_Miles_Frame_Select(PC, D0), D0  ; Id frame D0
000BEC64                                          ; muls.w  #$0140, D0                   ; as above
000BEC64 ED48                                       lsl.w   #$06, D0
000BEC66 4DF9 00C0 0000                             lea     ($00C00000), A6
000BEC6C 2D7C 4020 0000 0004                        move.l  #$40200000, $0004(A6)
000BEC74 43F9 0000 0000                             lea     (Sonic_Miles_Spr), A1
000BEC7A 43F1 0000                                  lea     $00(A1, D0), A1
000BEC7E 303C 0009                                  move.w  #$0009, D0                   ; load tiles
000BEC82                                            
000BEC82                            Menu_Loop_Load_Tiles:
000BEC82 2C99                                       move.l  (A1)+, (A6)
000BEC84 2C99                                       move.l  (A1)+, (A6)     
000BEC86 2C99                                       move.l  (A1)+, (A6)     
000BEC88 2C99                                       move.l  (A1)+, (A6)     
000BEC8A 2C99                                       move.l  (A1)+, (A6)     
000BEC8C 2C99                                       move.l  (A1)+, (A6)
000BEC8E 2C99                                       move.l  (A1)+, (A6)
000BEC90 2C99                                       move.l  (A1)+, (A6)
000BEC92 51C8 FFEE                                  dbra    D0, Menu_Loop_Load_Tiles
000BEC96                            Exit_Dinamic_Menu:                
000BEC96                                           
000BEC96 4E75                                       rts      
000BEC98                                                    
000BEC98                            Sonic_Miles_Frame_Select:     
000BEC98 0000 0000 0000 0000 0000+                  dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
000BECA6 050A                                       dc.b    $05, $0A
000BECA8 0F0F 0F0F 0F0F 0F0F 0F0F+                  dc.b    $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F
000BECB6 0A05                                       dc.b    $0A, $05   
000BECB8                            ; ===========================================================================
000BECB8                            ; off_92BA:
000BECB8                            OptScrBoxData:
000BECB8                            
000BECB8 0000 0000                  		dc.l TextOptScr_PlayerSelect
000BECBC 4192                       		dc.w $4192
000BECBE 0003                       		dc.w 3
000BECC0 0000 0000                  		dc.l TextOptScr_LivesSystem
000BECC4 4592                       		dc.w $4592
000BECC6 0003                       		dc.w 3
000BECC8                            
000BECC8                            off_92D2:
000BECC8 0000 0000                  		dc.l TextOptScr_Default
000BECCC 0000 0000                  		dc.l TextOptScr_Original
000BECD0 0000 0000                  		dc.l TextOptScr_Beta
000BECD4 0000 0000                  		dc.l TextOptScr_Midnight
000BECD8 0000 0000                  		dc.l TextOptScr_C2
000BECDC 0000 0000                  		dc.l TextOptScr_Clackers
000BECE0 0000 0000                  		dc.l TextOptScr_RHS
000BECE4 0000 0000                  		dc.l TextOptScr_Socket
000BECE8 0000 0000                  		dc.l TextOptScr_Cringe
000BECEC 0000 0000                  		dc.l TextOptScr_Dark	
000BECF0 0000 0000                  		dc.l TextOptScr_DeltaWooloo			
000BECF4                            off_92DE:
000BECF4 0000 0000                  		dc.l TextOptScr_Default
000BECF8 0000 0000                  		dc.l TextOptScr_Original
000BECFC 0000 0000                  		dc.l TextOptScr_Beta
000BED00 0000 0000                  		dc.l TextOptScr_Midnight
000BED04 0000 0000                  		dc.l TextOptScr_C2
000BED08 0000 0000                  		dc.l TextOptScr_Clackers
000BED0C 0000 0000                  		dc.l TextOptScr_RHS
000BED10 0000 0000                  		dc.l TextOptScr_Socket
000BED14 0000 0000                  		dc.l TextOptScr_Cringe
000BED18 0000 0000                  		dc.l TextOptScr_Dark
000BED1C 0000 0000                  		dc.l TextOptScr_DeltaWooloo		
000BED20                            off_92EA:
000BED20 0000 0000                  		dc.l TextOptScr_On
000BED24 0000 0000                  		dc.l TextOptScr_Off
000BED28                            ; ===========================================================================
000BED28                            
000BEE20                            ; ============================================================================
000BEE20                            		even
000BEE20                            Sonic_Miles_Spr:	incbin  "artunc/Sonic and Miles text.bin"
000BF320                            		even
000BF320                            Eni_MenuBg:    incbin    "tilemaps/menubgeni.bin"
000BF4CC                            		even
000BF4CC                            Nem_MenuFont:    incbin    "artnem/Standard font.bin"
000BFA36                            		even
000BFA36                            Nem_MenuBox:    incbin   "artnem/Menu Box.bin"
000BFAB6                            		even
000BFAB6                            Eni_MenuBox:    incbin    "tilemaps/menuboxeni.bin"
000BFAE2                            		even
000BFAE2                            		even
000BFAE2                            
000BFAE2                            SHC2022:    incbin "SHC22_Full_Sonic12.bin"
0013D366                                        even
0013D366                            
0013D366                            Art_Dust:	incbin	artunc\spindust.bin
0013ECA6                            
0013ECA6                            ; ===============================================================
0013ECA6                            ; ==============================================================
0013ECA6                            ; --------------------------------------------------------------
0013ECA6                            ; Debugging modules
0013ECA6                            ; --------------------------------------------------------------
0013ECA6                            
0013ECA6                               include   "ErrorHandler.asm"
0013ECA6                            
0013ECA6                            ; ===============================================================
0013ECA6                            ; ---------------------------------------------------------------
0013ECA6                            ; Error handling and debugging modules
0013ECA6                            ; 2016-2017, Vladikcomper
0013ECA6                            ; ---------------------------------------------------------------
0013ECA6                            ; Error handler functions and calls
0013ECA6                            ; ---------------------------------------------------------------
0013ECA6                            
0013ECA6                            ; ---------------------------------------------------------------
0013ECA6                            ; Error handler control flags
0013ECA6                            ; ---------------------------------------------------------------
0013ECA6                            
0013ECA6                            ; Screen appearence flags
0013ECA6 =00000001                  _eh_address_error	equ	$01		; use for address and bus errors only (tells error handler to display additional "Address" field)
0013ECA6 =00000002                  _eh_show_sr_usp		equ	$02		; displays SR and USP registers content on error screen
0013ECA6 =00000010                  _eh_disassemble		equ	$10		; disassembles the instruction where the error happened + vint and hint handlers
0013ECA6                            
0013ECA6                            ; Advanced execution flags
0013ECA6                            ; WARNING! For experts only, DO NOT USES them unless you know what you're doing
0013ECA6 =00000020                  _eh_return		equ	$20
0013ECA6 =00000040                  _eh_enter_console	equ	$40
0013ECA6 =00000080                  _eh_align_offset	equ	$80
0013ECA6                            
0013ECA6                            ; ---------------------------------------------------------------
0013ECA6                            ; Errors vector table
0013ECA6                            ; ---------------------------------------------------------------
0013ECA6                            
0013ECA6                            ; Default screen configuration
0013ECA6 =00000000                  _eh_default			equ	0 ;_eh_show_sr_usp
0013ECA6                            
0013ECA6                            ; ---------------------------------------------------------------
0013ECA6                            
0013ECA6                            BusError:
0013ECA6 4EB9 0000 0000 4255 5320+  	__ErrorMessage "BUS ERROR", _eh_default|_eh_address_error|_eh_disassemble
0013ECB8                            
0013ECB8                            AddressError:
0013ECB8 4EB9 0000 0000 4144 4452+  	__ErrorMessage "ADDRESS ERROR", _eh_default|_eh_address_error|_eh_disassemble
0013ECCE                            
0013ECCE                            IllegalInstr:
0013ECCE 4EB9 0000 0000 494C 4C45+  	__ErrorMessage "ILLEGAL INSTRUCTION", _eh_default|_eh_disassemble
0013ECEA                            
0013ECEA                            ZeroDivide:
0013ECEA 4EB9 0000 0000 5A45 524F+  	__ErrorMessage "ZERO DIVIDE", _eh_default|_eh_disassemble
0013ECFE                            
0013ECFE                            ChkInstr:
0013ECFE 4EB9 0000 0000 4348 4B20+  	__ErrorMessage "CHK INSTRUCTION", _eh_default|_eh_disassemble
0013ED16                            
0013ED16                            TrapvInstr:
0013ED16 4EB9 0000 0000 5452 4150+  	__ErrorMessage "TRAPV INSTRUCTION", _eh_default|_eh_disassemble
0013ED30                            
0013ED30                            PrivilegeViol:
0013ED30 4EB9 0000 0000 5052 4956+  	__ErrorMessage "PRIVILEGE VIOLATION", _eh_default|_eh_disassemble
0013ED4C                            
0013ED4C                            Trace:
0013ED4C 4EB9 0000 0000 5452 4143+  	__ErrorMessage "TRACE", _eh_default|_eh_disassemble
0013ED5A                            
0013ED5A                            Line1010Emu:
0013ED5A 4EB9 0000 0000 4C49 4E45+  	__ErrorMessage "LINE A EMULATOR", _eh_default|_eh_disassemble
0013ED72                            
0013ED72                            Line1111Emu:
0013ED72 4EB9 0000 0000 4C49 4E45+  	__ErrorMessage "LINE F EMULATOR", _eh_default|_eh_disassemble
0013ED8A                            
0013ED8A                            ErrorExcept:
0013ED8A 4EB9 0000 0000 4552 524F+  	__ErrorMessage "ERROR EXCEPTION", _eh_default|_eh_disassemble
0013EDA2                            
0013EDA2                            ; ---------------------------------------------------------------
0013EDA2                            ; Import error handler global functions
0013EDA2                            ; ---------------------------------------------------------------
0013EDA2                            
0013EDA2                            ErrorHandler.__global__error_initconsole equ ErrorHandler+$158
0013EDA2                            ErrorHandler.__global__errorhandler_setupvdp equ ErrorHandler+$25C
0013EDA2                            ErrorHandler.__global__console_loadpalette equ ErrorHandler+$AE2
0013EDA2                            ErrorHandler.__global__console_setposasxy_stack equ ErrorHandler+$B1E
0013EDA2                            ErrorHandler.__global__console_setposasxy equ ErrorHandler+$B24
0013EDA2                            ErrorHandler.__global__console_getposasxy equ ErrorHandler+$B50
0013EDA2                            ErrorHandler.__global__console_startnewline equ ErrorHandler+$B72
0013EDA2                            ErrorHandler.__global__console_setbasepattern equ ErrorHandler+$B9A
0013EDA2                            ErrorHandler.__global__console_setwidth equ ErrorHandler+$BAE
0013EDA2                            ErrorHandler.__global__console_writeline_withpattern equ ErrorHandler+$BC4
0013EDA2                            ErrorHandler.__global__console_writeline equ ErrorHandler+$BC6
0013EDA2                            ErrorHandler.__global__console_write equ ErrorHandler+$BCA
0013EDA2                            ErrorHandler.__global__console_writeline_formatted equ ErrorHandler+$C76
0013EDA2                            ErrorHandler.__global__console_write_formatted equ ErrorHandler+$C7A
0013EDA2                            ErrorHandler.__global__decode68k equ ErrorHandler+$CE6
0013EDA2                            
0013EDA2                            ; ---------------------------------------------------------------
0013EDA2                            ; Error handler external functions (compiled only when used)
0013EDA2                            ; ---------------------------------------------------------------
0013EDA2                            
0013EDA2                            
0013EDA2                            
0013EDA2                            
0013EDA2                            
0013EDA2                            ; ---------------------------------------------------------------
0013EDA2                            ; Include error handler binary module
0013EDA2                            ; ---------------------------------------------------------------
0013EDA2                            
0013EDA2                            ErrorHandler:
0013EDA2                            	incbin	ErrorHandler.bin
001407B6                            
001407B6                            ; ---------------------------------------------------------------
001407B6                            ; WARNING!
001407B6                            ;	DO NOT put any data from now on! DO NOT use ROM padding!
001407B6                            ;	Symbol data should be appended here after ROM is compiled
001407B6                            ;	by ConvSym utility, otherwise debugger modules won't be able
001407B6                            ;	to resolve symbol names.
001407B6                            ; ---------------------------------------------------------------
001407B6                            ; ---------------------------------------------------------------
001407B6                            
001407B6                            ; end of 'ROM'
001407B6                            		even
001407B6                            EndOfRom:
001407B6                            
001407B6                            
